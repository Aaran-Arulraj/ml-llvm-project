; ModuleID = 'tree-into-ssa.c'
source_filename = "tree-into-ssa.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.update_ssa_stats_d = type { i32, i32, %struct.bitmap_head_def*, i32 }
%struct.VEC_gimple_vec_heap = type { %struct.VEC_gimple_vec_base }
%struct.VEC_gimple_vec_base = type { i32, i32, [1 x %struct.VEC_gimple_heap*] }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.VEC_ssa_name_info_p_heap = type { %struct.VEC_ssa_name_info_p_base }
%struct.VEC_ssa_name_info_p_base = type { i32, i32, [1 x %struct.ssa_name_info*] }
%struct.ssa_name_info = type { %union.tree_node*, i8, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.referenced_var_iterator = type { %struct.htab_iterator }
%struct.htab_iterator = type { %struct.htab*, i8**, i8** }
%struct.def_blocks_d = type { %union.tree_node*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.repl_map_d = type { %union.tree_node*, %struct.bitmap_head_def* }
%struct.sbitmap_iterator = type { i64*, i32, i32, i32, i64 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.dom_walk_data = type { i8, void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, i8*, %struct.VEC_void_p_heap*, i64, %struct.VEC_void_p_heap* }
%struct.VEC_void_p_heap = type { %struct.VEC_void_p_base }
%struct.VEC_void_p_base = type { i32, i32, [1 x i8*] }
%struct.mark_def_sites_global_data = type { %struct.bitmap_head_def* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.dom_dfsnum = type { i32, i32 }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }

@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [3 x i8] c"{ \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"NIL\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"\0A\0ARenaming stack\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c" (up to %d levels)\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Level %d (current level)\0A\00", align 1
@block_defs_stack = internal global %struct.VEC_tree_heap* null, align 8, !dbg !0
@.str.9 = private unnamed_addr constant [11 x i8] c"\0ALevel %d\0A\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.10 = private unnamed_addr constant [23 x i8] c"    Previous CURRDEF (\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c") = \00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"<NIL>\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"\0A\0ACurrent reaching definitions\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"CURRDEF (\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.15 = private unnamed_addr constant [34 x i8] c"SSA renaming information for %s\0A\0A\00", align 1
@def_blocks = internal global %struct.htab* null, align 8, !dbg !2383
@repl_tbl = internal global %struct.htab* null, align 8, !dbg !2408
@.str.16 = private unnamed_addr constant [25 x i8] c"\0AHash table statistics:\0A\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c"    def_blocks:   \00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"    repl_tbl:     \00", align 1
@.str.19 = private unnamed_addr constant [35 x i8] c"\0A\0ADefinition and live-in blocks:\0A\0A\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"ssa\00", align 1
@pass_build_ssa = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8 ()* null, i32 ()* @rewrite_into_ssa, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 24, i32 32, i32 0, i32 0, i32 49157 } }, align 8, !dbg !2355
@.str.21 = private unnamed_addr constant [7 x i8] c" -> { \00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@new_ssa_names = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2398
@.str.23 = private unnamed_addr constant [24 x i8] c"\0ASSA replacement table\0A\00", align 1
@.str.24 = private unnamed_addr constant [63 x i8] c"N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [44 x i8] c"Number of virtual NEW -> OLD mappings: %7u\0A\00", align 1
@update_ssa_stats = internal global %struct.update_ssa_stats_d zeroinitializer, align 8, !dbg !2410
@.str.26 = private unnamed_addr constant [44 x i8] c"Number of real NEW -> OLD mappings:    %7u\0A\00", align 1
@.str.27 = private unnamed_addr constant [44 x i8] c"Number of total NEW -> OLD mappings:   %7u\0A\00", align 1
@.str.28 = private unnamed_addr constant [32 x i8] c"\0ANumber of virtual symbols: %u\0A\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"\0A\0ASymbols to be put in SSA form\0A\0A\00", align 1
@names_to_release = internal global %struct.bitmap_head_def* null, align 8, !dbg !2402
@.str.30 = private unnamed_addr constant [52 x i8] c"\0A\0ASSA names to release after updating the SSA web\0A\0A\00", align 1
@old_ssa_names = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2385
@update_ssa_initialized_fn = internal global %struct.function* null, align 8, !dbg !2424
@blocks_with_phis_to_rewrite = internal global %struct.bitmap_head_def* null, align 8, !dbg !2406
@phis_to_rewrite = internal global %struct.VEC_gimple_vec_heap* null, align 8, !dbg !2404
@blocks_to_update = internal global %struct.bitmap_head_def* null, align 8, !dbg !2418
@.str.31 = private unnamed_addr constant [16 x i8] c"tree-into-ssa.c\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@timevar_enable = external dso_local global i8, align 1
@interesting_blocks = common dso_local global %struct.simple_bitmap_def* null, align 8, !dbg !2400
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.33 = private unnamed_addr constant [46 x i8] c"Incremental SSA update started at block: %d\0A\0A\00", align 1
@.str.34 = private unnamed_addr constant [29 x i8] c"Number of blocks in CFG: %d\0A\00", align 1
@.str.35 = private unnamed_addr constant [43 x i8] c"Number of blocks to update: %d (%3.0f%%)\0A\0A\00", align 1
@dump_flags = external dso_local global i32, align 4
@.str.36 = private unnamed_addr constant [18 x i8] c"Affected blocks: \00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"%u \00", align 1
@info_for_ssa_name = internal global %struct.VEC_ssa_name_info_p_heap* null, align 8, !dbg !2420
@current_info_for_ssa_name_age = internal global i32 0, align 4, !dbg !2422
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.38 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.39 = private unnamed_addr constant [51 x i8] c"size %ld, %ld elements, %f collision/search ratio\0A\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c"VAR: \00", align 1
@.str.41 = private unnamed_addr constant [17 x i8] c", DEF_BLOCKS: { \00", align 1
@.str.42 = private unnamed_addr constant [20 x i8] c", LIVEIN_BLOCKS: { \00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c", PHI_BLOCKS: { \00", align 1
@.str.44 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.46 = private unnamed_addr constant [42 x i8] c"\0AEnabled virtual name mapping heuristic.\0A\00", align 1
@.str.47 = private unnamed_addr constant [40 x i8] c"\09Number of virtual mappings:       %7u\0A\00", align 1
@.str.48 = private unnamed_addr constant [40 x i8] c"\09Number of unique virtual symbols: %7u\0A\00", align 1
@.str.49 = private unnamed_addr constant [88 x i8] c"Updating FUD-chains from top of CFG will be faster than processing\0Athe name mappings.\0A\0A\00", align 1
@.str.50 = private unnamed_addr constant [23 x i8] c"\0A\0ARenaming block #%d\0A\0A\00", align 1
@.str.51 = private unnamed_addr constant [20 x i8] c"Renaming statement \00", align 1
@.str.52 = private unnamed_addr constant [43 x i8] c"\0A\0ARegistering new PHI nodes in block #%d\0A\0A\00", align 1
@.str.53 = private unnamed_addr constant [40 x i8] c"Updating SSA information for statement \00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @get_current_def(%union.tree_node* %var) #0 !dbg !2430 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !2434, metadata !DIExpression()), !dbg !2435
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2436
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2436
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2436
  %bf.load = load i64, i64* %1, align 8, !dbg !2436
  %bf.clear = and i64 %bf.load, 65535, !dbg !2436
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2436
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !2438
  br i1 %cmp, label %if.then, label %if.else, !dbg !2439

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2440
  %call = call %struct.ssa_name_info* @get_ssa_name_ann(%union.tree_node* %2), !dbg !2441
  %current_def = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %call, i32 0, i32 0, !dbg !2442
  %3 = load %union.tree_node*, %union.tree_node** %current_def, align 8, !dbg !2442
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !2443
  br label %return, !dbg !2443

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2444
  %call1 = call %struct.var_ann_d* @var_ann(%union.tree_node* %4), !dbg !2445
  %current_def2 = getelementptr inbounds %struct.var_ann_d, %struct.var_ann_d* %call1, i32 0, i32 2, !dbg !2446
  %5 = load %union.tree_node*, %union.tree_node** %current_def2, align 8, !dbg !2446
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !2447
  br label %return, !dbg !2447

return:                                           ; preds = %if.else, %if.then
  %6 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2448
  ret %union.tree_node* %6, !dbg !2448
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_name_info* @get_ssa_name_ann(%union.tree_node* %name) #0 !dbg !2449 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  %len = alloca i32, align 4
  %info = alloca %struct.ssa_name_info*, align 8
  %new_len = alloca i32, align 4
  %info13 = alloca %struct.ssa_name_info*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !2452, metadata !DIExpression()), !dbg !2453
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !2454, metadata !DIExpression()), !dbg !2455
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !2456
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !2456
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !2456
  %1 = load i32, i32* %version, align 8, !dbg !2456
  store i32 %1, i32* %ver, align 4, !dbg !2455
  call void @llvm.dbg.declare(metadata i32* %len, metadata !2457, metadata !DIExpression()), !dbg !2458
  %2 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2459
  %tobool = icmp ne %struct.VEC_ssa_name_info_p_heap* %2, null, !dbg !2459
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2459

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2459
  %base = getelementptr inbounds %struct.VEC_ssa_name_info_p_heap, %struct.VEC_ssa_name_info_p_heap* %3, i32 0, i32 0, !dbg !2459
  br label %cond.end, !dbg !2459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ssa_name_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2459
  %call = call i32 @VEC_ssa_name_info_p_base_length(%struct.VEC_ssa_name_info_p_base* %cond), !dbg !2459
  store i32 %call, i32* %len, align 4, !dbg !2458
  call void @llvm.dbg.declare(metadata %struct.ssa_name_info** %info, metadata !2460, metadata !DIExpression()), !dbg !2461
  %4 = load i32, i32* %ver, align 4, !dbg !2462
  %5 = load i32, i32* %len, align 4, !dbg !2464
  %cmp = icmp uge i32 %4, %5, !dbg !2465
  br i1 %cmp, label %if.then, label %if.end, !dbg !2466

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %new_len, metadata !2467, metadata !DIExpression()), !dbg !2469
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2470
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2470
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !2470
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2470
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !2470
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !2470
  %tobool1 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !2470
  br i1 %tobool1, label %cond.true2, label %cond.false7, !dbg !2470

cond.true2:                                       ; preds = %if.then
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2470
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2470
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 3, !dbg !2470
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !2470
  %ssa_names5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !2470
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names5, align 8, !dbg !2470
  %base6 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !2470
  br label %cond.end8, !dbg !2470

cond.false7:                                      ; preds = %if.then
  br label %cond.end8, !dbg !2470

cond.end8:                                        ; preds = %cond.false7, %cond.true2
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true2 ], [ null, %cond.false7 ], !dbg !2470
  %call10 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond9), !dbg !2470
  store i32 %call10, i32* %new_len, align 4, !dbg !2469
  %12 = load i32, i32* %new_len, align 4, !dbg !2471
  %call11 = call i32 @VEC_ssa_name_info_p_heap_reserve(%struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, i32 %12), !dbg !2471
  br label %while.cond, !dbg !2472

while.cond:                                       ; preds = %cond.end19, %cond.end8
  %13 = load i32, i32* %len, align 4, !dbg !2473
  %inc = add i32 %13, 1, !dbg !2473
  store i32 %inc, i32* %len, align 4, !dbg !2473
  %14 = load i32, i32* %new_len, align 4, !dbg !2474
  %cmp12 = icmp ult i32 %13, %14, !dbg !2475
  br i1 %cmp12, label %while.body, label %while.end, !dbg !2472

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.ssa_name_info** %info13, metadata !2476, metadata !DIExpression()), !dbg !2478
  %call14 = call i8* @xcalloc(i64 1, i64 16), !dbg !2479
  %15 = bitcast i8* %call14 to %struct.ssa_name_info*, !dbg !2479
  store %struct.ssa_name_info* %15, %struct.ssa_name_info** %info13, align 8, !dbg !2478
  %16 = load i32, i32* @current_info_for_ssa_name_age, align 4, !dbg !2480
  %17 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info13, align 8, !dbg !2481
  %age = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %17, i32 0, i32 2, !dbg !2482
  store i32 %16, i32* %age, align 4, !dbg !2483
  %18 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2484
  %tobool15 = icmp ne %struct.VEC_ssa_name_info_p_heap* %18, null, !dbg !2484
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !2484

cond.true16:                                      ; preds = %while.body
  %19 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2484
  %base17 = getelementptr inbounds %struct.VEC_ssa_name_info_p_heap, %struct.VEC_ssa_name_info_p_heap* %19, i32 0, i32 0, !dbg !2484
  br label %cond.end19, !dbg !2484

cond.false18:                                     ; preds = %while.body
  br label %cond.end19, !dbg !2484

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_ssa_name_info_p_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !2484
  %20 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info13, align 8, !dbg !2484
  %call21 = call %struct.ssa_name_info** @VEC_ssa_name_info_p_base_quick_push(%struct.VEC_ssa_name_info_p_base* %cond20, %struct.ssa_name_info* %20), !dbg !2484
  br label %while.cond, !dbg !2472, !llvm.loop !2485

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !2487

if.end:                                           ; preds = %while.end, %cond.end
  %21 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2488
  %tobool22 = icmp ne %struct.VEC_ssa_name_info_p_heap* %21, null, !dbg !2488
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !2488

cond.true23:                                      ; preds = %if.end
  %22 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** @info_for_ssa_name, align 8, !dbg !2488
  %base24 = getelementptr inbounds %struct.VEC_ssa_name_info_p_heap, %struct.VEC_ssa_name_info_p_heap* %22, i32 0, i32 0, !dbg !2488
  br label %cond.end26, !dbg !2488

cond.false25:                                     ; preds = %if.end
  br label %cond.end26, !dbg !2488

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_ssa_name_info_p_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !2488
  %23 = load i32, i32* %ver, align 4, !dbg !2488
  %call28 = call %struct.ssa_name_info* @VEC_ssa_name_info_p_base_index(%struct.VEC_ssa_name_info_p_base* %cond27, i32 %23), !dbg !2488
  store %struct.ssa_name_info* %call28, %struct.ssa_name_info** %info, align 8, !dbg !2489
  %24 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info, align 8, !dbg !2490
  %age29 = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %24, i32 0, i32 2, !dbg !2492
  %25 = load i32, i32* %age29, align 4, !dbg !2492
  %26 = load i32, i32* @current_info_for_ssa_name_age, align 4, !dbg !2493
  %cmp30 = icmp ult i32 %25, %26, !dbg !2494
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !2495

if.then31:                                        ; preds = %cond.end26
  %27 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info, align 8, !dbg !2496
  %need_phi_state = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %27, i32 0, i32 1, !dbg !2498
  %bf.load = load i8, i8* %need_phi_state, align 8, !dbg !2499
  %bf.clear = and i8 %bf.load, -4, !dbg !2499
  store i8 %bf.clear, i8* %need_phi_state, align 8, !dbg !2499
  %28 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info, align 8, !dbg !2500
  %current_def = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %28, i32 0, i32 0, !dbg !2501
  store %union.tree_node* null, %union.tree_node** %current_def, align 8, !dbg !2502
  %29 = load i32, i32* @current_info_for_ssa_name_age, align 4, !dbg !2503
  %30 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info, align 8, !dbg !2504
  %age32 = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %30, i32 0, i32 2, !dbg !2505
  store i32 %29, i32* %age32, align 4, !dbg !2506
  br label %if.end33, !dbg !2507

if.end33:                                         ; preds = %if.then31, %cond.end26
  %31 = load %struct.ssa_name_info*, %struct.ssa_name_info** %info, align 8, !dbg !2508
  ret %struct.ssa_name_info* %31, !dbg !2509
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @var_ann(%union.tree_node* %t) #0 !dbg !2510 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !2518, metadata !DIExpression()), !dbg !2519
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !2520, metadata !DIExpression()), !dbg !2523
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2524
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2524
  %bf.load = load i64, i64* %1, align 8, !dbg !2524
  %bf.clear = and i64 %bf.load, 65535, !dbg !2524
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2524
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !2524
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2524

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !2524
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !2524
  br label %cond.end19, !dbg !2524

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2524
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !2524
  %bf.load2 = load i64, i64* %4, align 8, !dbg !2524
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !2524
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !2524
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !2524
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !2524

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !2524
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !2524
  br label %cond.end17, !dbg !2524

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !2524
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !2524
  %bf.load10 = load i64, i64* %7, align 8, !dbg !2524
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !2524
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !2524
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !2524
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !2524

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !2524
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !2524
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !2524
  br label %cond.end, !dbg !2524

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !2524

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !2524
  br label %cond.end17, !dbg !2524

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !2524
  br label %cond.end19, !dbg !2524

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !2524
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !2523
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !2525
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !2525
  br i1 %tobool, label %cond.true21, label %cond.false22, !dbg !2525

cond.true21:                                      ; preds = %cond.end19
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !2526
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !2527
  br label %cond.end23, !dbg !2525

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !2525

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi %struct.var_ann_d* [ %11, %cond.true21 ], [ null, %cond.false22 ], !dbg !2525
  ret %struct.var_ann_d* %cond24, !dbg !2528
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_current_def(%union.tree_node* %var, %union.tree_node* %def) #0 !dbg !2529 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !2532, metadata !DIExpression()), !dbg !2533
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !2534, metadata !DIExpression()), !dbg !2535
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2536
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2536
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2536
  %bf.load = load i64, i64* %1, align 8, !dbg !2536
  %bf.clear = and i64 %bf.load, 65535, !dbg !2536
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2536
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !2538
  br i1 %cmp, label %if.then, label %if.else, !dbg !2539

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !2540
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2541
  %call = call %struct.ssa_name_info* @get_ssa_name_ann(%union.tree_node* %3), !dbg !2542
  %current_def = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %call, i32 0, i32 0, !dbg !2543
  store %union.tree_node* %2, %union.tree_node** %current_def, align 8, !dbg !2544
  br label %if.end, !dbg !2542

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !2545
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !2546
  %call1 = call %struct.var_ann_d* @var_ann(%union.tree_node* %5), !dbg !2547
  %current_def2 = getelementptr inbounds %struct.var_ann_d, %struct.var_ann_d* %call1, i32 0, i32 2, !dbg !2548
  store %union.tree_node* %4, %union.tree_node** %current_def2, align 8, !dbg !2549
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2550
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_global_livein(%struct.bitmap_head_def* %livein, %struct.bitmap_head_def* %def_blocks) #0 !dbg !2551 {
entry:
  %livein.addr = alloca %struct.bitmap_head_def*, align 8
  %def_blocks.addr = alloca %struct.bitmap_head_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %worklist = alloca %struct.basic_block_def**, align 8
  %tos = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %pred = alloca %struct.basic_block_def*, align 8
  %pred_index = alloca i32, align 4
  store %struct.bitmap_head_def* %livein, %struct.bitmap_head_def** %livein.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %livein.addr, metadata !2554, metadata !DIExpression()), !dbg !2555
  store %struct.bitmap_head_def* %def_blocks, %struct.bitmap_head_def** %def_blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %def_blocks.addr, metadata !2556, metadata !DIExpression()), !dbg !2557
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2558, metadata !DIExpression()), !dbg !2559
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %worklist, metadata !2560, metadata !DIExpression()), !dbg !2561
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %tos, metadata !2562, metadata !DIExpression()), !dbg !2563
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2564, metadata !DIExpression()), !dbg !2565
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !2566, metadata !DIExpression()), !dbg !2574
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2575
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2575
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2575
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2575
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !2575
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !2575
  %add = add nsw i32 %2, 1, !dbg !2576
  %conv = sext i32 %add to i64, !dbg !2577
  %mul = mul i64 8, %conv, !dbg !2578
  %call = call i8* @xmalloc(i64 %mul), !dbg !2579
  %3 = bitcast i8* %call to %struct.basic_block_def**, !dbg !2580
  store %struct.basic_block_def** %3, %struct.basic_block_def*** %worklist, align 8, !dbg !2581
  store %struct.basic_block_def** %3, %struct.basic_block_def*** %tos, align 8, !dbg !2582
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein.addr, align 8, !dbg !2583
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %4, i32 0, i32* %i), !dbg !2583
  br label %for.cond, !dbg !2583

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2585
  %tobool = icmp ne i8 %call1, 0, !dbg !2583
  br i1 %tobool, label %for.body, label %for.end, !dbg !2583

for.body:                                         ; preds = %for.cond
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2587
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2587
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !2587
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !2587
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !2587
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !2587
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !2587
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !2587

cond.true:                                        ; preds = %for.body
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2587
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !2587
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !2587
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !2587
  %x_basic_block_info7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 2, !dbg !2587
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info7, align 8, !dbg !2587
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %10, i32 0, i32 0, !dbg !2587
  br label %cond.end, !dbg !2587

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !2587

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2587
  %11 = load i32, i32* %i, align 4, !dbg !2587
  %call8 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %11), !dbg !2587
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %tos, align 8, !dbg !2588
  %incdec.ptr = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %12, i32 1, !dbg !2588
  store %struct.basic_block_def** %incdec.ptr, %struct.basic_block_def*** %tos, align 8, !dbg !2588
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %12, align 8, !dbg !2589
  br label %for.inc, !dbg !2590

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2585
  br label %for.cond, !dbg !2585, !llvm.loop !2591

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !2593

while.cond:                                       ; preds = %for.end28, %for.end
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %tos, align 8, !dbg !2594
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !2595
  %cmp = icmp ne %struct.basic_block_def** %13, %14, !dbg !2596
  br i1 %cmp, label %while.body, label %while.end, !dbg !2593

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2597, metadata !DIExpression()), !dbg !2599
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2600, metadata !DIExpression()), !dbg !2607
  %15 = load %struct.basic_block_def**, %struct.basic_block_def*** %tos, align 8, !dbg !2608
  %incdec.ptr10 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %15, i32 -1, !dbg !2608
  store %struct.basic_block_def** %incdec.ptr10, %struct.basic_block_def*** %tos, align 8, !dbg !2608
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %incdec.ptr10, align 8, !dbg !2609
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !2610
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2611
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 0, !dbg !2611
  %call11 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2611
  %18 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2611
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 0, !dbg !2611
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 0, !dbg !2611
  store i32 %20, i32* %19, align 8, !dbg !2611
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 1, !dbg !2611
  %22 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 1, !dbg !2611
  store %struct.VEC_edge_gc** %22, %struct.VEC_edge_gc*** %21, align 8, !dbg !2611
  %23 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2611
  %24 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !2611
  br label %for.cond12, !dbg !2611

for.cond12:                                       ; preds = %for.inc27, %while.body
  %25 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2613
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !2613
  %27 = load i32, i32* %26, align 8, !dbg !2613
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !2613
  %29 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %28, align 8, !dbg !2613
  %call13 = call zeroext i8 @ei_cond(i32 %27, %struct.VEC_edge_gc** %29, %struct.edge_def** %e), !dbg !2613
  %tobool14 = icmp ne i8 %call13, 0, !dbg !2611
  br i1 %tobool14, label %for.body15, label %for.end28, !dbg !2611

for.body15:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred, metadata !2615, metadata !DIExpression()), !dbg !2617
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2618
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 0, !dbg !2619
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2619
  store %struct.basic_block_def* %31, %struct.basic_block_def** %pred, align 8, !dbg !2617
  call void @llvm.dbg.declare(metadata i32* %pred_index, metadata !2620, metadata !DIExpression()), !dbg !2621
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2622
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !2623
  %33 = load i32, i32* %index, align 8, !dbg !2623
  store i32 %33, i32* %pred_index, align 4, !dbg !2621
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2624
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2626
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !2626
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !2626
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !2626
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 0, !dbg !2626
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2626
  %cmp18 = icmp ne %struct.basic_block_def* %34, %37, !dbg !2627
  br i1 %cmp18, label %land.lhs.true, label %if.end, !dbg !2628

land.lhs.true:                                    ; preds = %for.body15
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein.addr, align 8, !dbg !2629
  %39 = load i32, i32* %pred_index, align 4, !dbg !2630
  %call20 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %38, i32 %39), !dbg !2631
  %tobool21 = icmp ne i32 %call20, 0, !dbg !2631
  br i1 %tobool21, label %if.end, label %land.lhs.true22, !dbg !2632

land.lhs.true22:                                  ; preds = %land.lhs.true
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks.addr, align 8, !dbg !2633
  %41 = load i32, i32* %pred_index, align 4, !dbg !2634
  %call23 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %40, i32 %41), !dbg !2635
  %tobool24 = icmp ne i32 %call23, 0, !dbg !2635
  br i1 %tobool24, label %if.end, label %if.then, !dbg !2636

if.then:                                          ; preds = %land.lhs.true22
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2637
  %43 = load %struct.basic_block_def**, %struct.basic_block_def*** %tos, align 8, !dbg !2639
  %incdec.ptr25 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %43, i32 1, !dbg !2639
  store %struct.basic_block_def** %incdec.ptr25, %struct.basic_block_def*** %tos, align 8, !dbg !2639
  store %struct.basic_block_def* %42, %struct.basic_block_def** %43, align 8, !dbg !2640
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein.addr, align 8, !dbg !2641
  %45 = load i32, i32* %pred_index, align 4, !dbg !2642
  %call26 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %44, i32 %45), !dbg !2643
  br label %if.end, !dbg !2644

if.end:                                           ; preds = %if.then, %land.lhs.true22, %land.lhs.true, %for.body15
  br label %for.inc27, !dbg !2645

for.inc27:                                        ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2613
  br label %for.cond12, !dbg !2613, !llvm.loop !2646

for.end28:                                        ; preds = %for.cond12
  br label %while.cond, !dbg !2593, !llvm.loop !2648

while.end:                                        ; preds = %while.cond
  %46 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !2650
  %47 = bitcast %struct.basic_block_def** %46 to i8*, !dbg !2650
  call void @free(i8* %47), !dbg !2651
  ret void, !dbg !2652
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !2653 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2661, metadata !DIExpression()), !dbg !2662
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !2663, metadata !DIExpression()), !dbg !2664
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !2665, metadata !DIExpression()), !dbg !2666
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2667, metadata !DIExpression()), !dbg !2668
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !2669
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !2670
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !2670
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2671
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !2672
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !2673
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2674
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !2675
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !2676
  br label %while.body, !dbg !2677

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2678
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !2681
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !2681
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !2678
  br i1 %tobool, label %if.end, label %if.then, !dbg !2682

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2683
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !2685
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !2686
  br label %while.end, !dbg !2687

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2688
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !2690
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !2690
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !2691
  %9 = load i32, i32* %indx, align 8, !dbg !2691
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !2692
  %div = udiv i32 %10, 128, !dbg !2693
  %cmp = icmp uge i32 %9, %div, !dbg !2694
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !2695

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !2696

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2697
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !2698
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !2698
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !2699
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2699
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2700
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !2701
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !2702
  br label %while.body, !dbg !2677, !llvm.loop !2703

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2705
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2707
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !2707
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !2708
  %17 = load i32, i32* %indx9, align 8, !dbg !2708
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !2709
  %div10 = udiv i32 %18, 128, !dbg !2710
  %cmp11 = icmp ne i32 %17, %div10, !dbg !2711
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !2712

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2713
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !2714
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !2714
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !2715
  %21 = load i32, i32* %indx14, align 8, !dbg !2715
  %mul = mul i32 %21, 128, !dbg !2716
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !2717
  br label %if.end15, !dbg !2718

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !2719
  %div16 = udiv i32 %22, 64, !dbg !2720
  %rem = urem i32 %div16, 2, !dbg !2721
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2722
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !2723
  store i32 %rem, i32* %word_no, align 8, !dbg !2724
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2725
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !2726
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !2726
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !2727
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2728
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !2729
  %27 = load i32, i32* %word_no18, align 8, !dbg !2729
  %idxprom = zext i32 %27 to i64, !dbg !2725
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !2725
  %28 = load i64, i64* %arrayidx, align 8, !dbg !2725
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2730
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !2731
  store i64 %28, i64* %bits19, align 8, !dbg !2732
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !2733
  %rem20 = urem i32 %30, 64, !dbg !2734
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2735
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !2736
  %32 = load i64, i64* %bits21, align 8, !dbg !2737
  %sh_prom = zext i32 %rem20 to i64, !dbg !2737
  %shr = lshr i64 %32, %sh_prom, !dbg !2737
  store i64 %shr, i64* %bits21, align 8, !dbg !2737
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2738
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !2739
  %34 = load i64, i64* %bits22, align 8, !dbg !2739
  %tobool23 = icmp ne i64 %34, 0, !dbg !2740
  %lnot = xor i1 %tobool23, true, !dbg !2740
  %lnot.ext = zext i1 %lnot to i32, !dbg !2740
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !2741
  %add = add i32 %35, %lnot.ext, !dbg !2741
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !2741
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !2742
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !2743
  store i32 %36, i32* %37, align 4, !dbg !2744
  ret void, !dbg !2745
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !2746 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2749, metadata !DIExpression()), !dbg !2750
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2751, metadata !DIExpression()), !dbg !2752
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2753
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !2755
  %1 = load i64, i64* %bits, align 8, !dbg !2755
  %tobool = icmp ne i64 %1, 0, !dbg !2753
  br i1 %tobool, label %if.then, label %if.end, !dbg !2756

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !2757

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !2758), !dbg !2760
  br label %while.cond, !dbg !2761

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2762
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !2763
  %3 = load i64, i64* %bits1, align 8, !dbg !2763
  %and = and i64 %3, 1, !dbg !2764
  %tobool2 = icmp ne i64 %and, 0, !dbg !2765
  %lnot = xor i1 %tobool2, true, !dbg !2765
  br i1 %lnot, label %while.body, label %while.end, !dbg !2761

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2766
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !2768
  %5 = load i64, i64* %bits3, align 8, !dbg !2769
  %shr = lshr i64 %5, 1, !dbg !2769
  store i64 %shr, i64* %bits3, align 8, !dbg !2769
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !2770
  %7 = load i32, i32* %6, align 4, !dbg !2771
  %add = add i32 %7, 1, !dbg !2771
  store i32 %add, i32* %6, align 4, !dbg !2771
  br label %while.cond, !dbg !2761, !llvm.loop !2772

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !2774
  br label %return, !dbg !2774

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !2775
  %9 = load i32, i32* %8, align 4, !dbg !2776
  %add4 = add i32 %9, 64, !dbg !2777
  %sub = sub i32 %add4, 1, !dbg !2778
  %div = udiv i32 %sub, 64, !dbg !2779
  %mul = mul i32 %div, 64, !dbg !2780
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !2781
  store i32 %mul, i32* %10, align 4, !dbg !2782
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2783
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !2784
  %12 = load i32, i32* %word_no, align 8, !dbg !2785
  %inc = add i32 %12, 1, !dbg !2785
  store i32 %inc, i32* %word_no, align 8, !dbg !2785
  br label %while.body6, !dbg !2786

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !2787

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2789
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !2790
  %14 = load i32, i32* %word_no8, align 8, !dbg !2790
  %cmp = icmp ne i32 %14, 2, !dbg !2791
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !2787

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2792
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2794
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !2794
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !2795
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2796
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !2797
  %18 = load i32, i32* %word_no11, align 8, !dbg !2797
  %idxprom = zext i32 %18 to i64, !dbg !2792
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !2792
  %19 = load i64, i64* %arrayidx, align 8, !dbg !2792
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2798
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !2799
  store i64 %19, i64* %bits12, align 8, !dbg !2800
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2801
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !2803
  %22 = load i64, i64* %bits13, align 8, !dbg !2803
  %tobool14 = icmp ne i64 %22, 0, !dbg !2801
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !2804

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !2805

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !2806
  %24 = load i32, i32* %23, align 4, !dbg !2807
  %add17 = add i32 %24, 64, !dbg !2807
  store i32 %add17, i32* %23, align 4, !dbg !2807
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2808
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !2809
  %26 = load i32, i32* %word_no18, align 8, !dbg !2810
  %inc19 = add i32 %26, 1, !dbg !2810
  store i32 %inc19, i32* %word_no18, align 8, !dbg !2810
  br label %while.cond7, !dbg !2787, !llvm.loop !2811

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2813
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !2814
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !2814
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !2815
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2815
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2816
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !2817
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !2818
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2819
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !2821
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !2821
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !2819
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !2822

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !2823
  br label %return, !dbg !2823

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2824
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !2825
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !2825
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !2826
  %35 = load i32, i32* %indx, align 8, !dbg !2826
  %mul28 = mul i32 %35, 128, !dbg !2827
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !2828
  store i32 %mul28, i32* %36, align 4, !dbg !2829
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2830
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !2831
  store i32 0, i32* %word_no29, align 8, !dbg !2832
  br label %while.body6, !dbg !2786, !llvm.loop !2833

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !2835
  ret i8 %38, !dbg !2835
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !2836 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2841, metadata !DIExpression()), !dbg !2842
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2843, metadata !DIExpression()), !dbg !2842
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2842
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !2842
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2842

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2842
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2842
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !2842
  %3 = load i32, i32* %num, align 8, !dbg !2842
  %cmp = icmp ult i32 %1, %3, !dbg !2842
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2844
  %land.ext = zext i1 %4 to i32, !dbg !2842
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2842
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !2842
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2842
  %idxprom = zext i32 %6 to i64, !dbg !2842
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !2842
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2842
  ret %struct.basic_block_def* %7, !dbg !2842
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !2845 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2848, metadata !DIExpression()), !dbg !2849
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2850, metadata !DIExpression()), !dbg !2851
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2852
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !2853
  %1 = load i64, i64* %bits, align 8, !dbg !2854
  %shr = lshr i64 %1, 1, !dbg !2854
  store i64 %shr, i64* %bits, align 8, !dbg !2854
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !2855
  %3 = load i32, i32* %2, align 4, !dbg !2856
  %add = add i32 %3, 1, !dbg !2856
  store i32 %add, i32* %2, align 4, !dbg !2856
  ret void, !dbg !2857
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2858 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2861, metadata !DIExpression()), !dbg !2862
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2863, metadata !DIExpression()), !dbg !2864
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2865
  store i32 0, i32* %index, align 8, !dbg !2866
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2867
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2868
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2869
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2870
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2870
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2870
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2871 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2875, metadata !DIExpression()), !dbg !2876
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2877, metadata !DIExpression()), !dbg !2878
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2879
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2879
  %5 = load i32, i32* %4, align 8, !dbg !2879
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2879
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2879
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2879
  %tobool = icmp ne i8 %call, 0, !dbg !2879
  br i1 %tobool, label %if.else, label %if.then, !dbg !2881

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2882
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2882
  %10 = load i32, i32* %9, align 8, !dbg !2882
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2882
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2882
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2882
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2884
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2885
  store i8 1, i8* %retval, align 1, !dbg !2886
  br label %return, !dbg !2886

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2887
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2889
  store i8 0, i8* %retval, align 1, !dbg !2890
  br label %return, !dbg !2890

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2891
  ret i8 %15, !dbg !2891
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2892 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2896, metadata !DIExpression()), !dbg !2897
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2898
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2898
  %1 = load i32, i32* %index, align 8, !dbg !2898
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2898
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2898
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2898
  %5 = load i32, i32* %4, align 8, !dbg !2898
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2898
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2898
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2898
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2898
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2898

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2898
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2898
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2898
  %11 = load i32, i32* %10, align 8, !dbg !2898
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2898
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2898
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2898
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2898
  br label %cond.end, !dbg !2898

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2898

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2898
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2898
  %cmp = icmp ult i32 %1, %call2, !dbg !2898
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2898

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !2898
  br label %cond.end5, !dbg !2898

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2898

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2898
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2899
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2900
  %15 = load i32, i32* %index7, align 8, !dbg !2901
  %inc = add i32 %15, 1, !dbg !2901
  store i32 %inc, i32* %index7, align 8, !dbg !2901
  ret void, !dbg !2902
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_decl_set(%struct._IO_FILE* %file, %struct.bitmap_head_def* %set) #0 !dbg !2903 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2906, metadata !DIExpression()), !dbg !2907
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !2908, metadata !DIExpression()), !dbg !2909
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !2910
  %tobool = icmp ne %struct.bitmap_head_def* %0, null, !dbg !2910
  br i1 %tobool, label %if.then, label %if.else, !dbg !2912

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !2913, metadata !DIExpression()), !dbg !2915
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2916, metadata !DIExpression()), !dbg !2917
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2918
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)), !dbg !2919
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !2920
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %2, i32 0, i32* %i), !dbg !2920
  br label %for.cond, !dbg !2920

for.cond:                                         ; preds = %for.inc, %if.then
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2922
  %tobool2 = icmp ne i8 %call1, 0, !dbg !2920
  br i1 %tobool2, label %for.body, label %for.end, !dbg !2920

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2924
  %4 = load i32, i32* %i, align 4, !dbg !2926
  %call3 = call %union.tree_node* @referenced_var_lookup(i32 %4), !dbg !2926
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %call3, i32 0), !dbg !2927
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2928
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2929
  br label %for.inc, !dbg !2930

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !2922
  br label %for.cond, !dbg !2922, !llvm.loop !2931

for.end:                                          ; preds = %for.cond
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2933
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !2934
  br label %if.end, !dbg !2935

if.else:                                          ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2936
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)), !dbg !2937
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end
  ret void, !dbg !2938
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @referenced_var_lookup(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_decl_set(%struct.bitmap_head_def* %set) #0 !dbg !2939 {
entry:
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !2942, metadata !DIExpression()), !dbg !2943
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2944
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !2945
  call void @dump_decl_set(%struct._IO_FILE* %0, %struct.bitmap_head_def* %1), !dbg !2946
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2947
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2948
  ret void, !dbg !2949
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_defs_stack(%struct._IO_FILE* %file, i32 %n) #0 !dbg !2950 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2953, metadata !DIExpression()), !dbg !2954
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2955, metadata !DIExpression()), !dbg !2956
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2957, metadata !DIExpression()), !dbg !2958
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2959, metadata !DIExpression()), !dbg !2960
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2961
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0)), !dbg !2962
  %1 = load i32, i32* %n.addr, align 4, !dbg !2963
  %cmp = icmp sgt i32 %1, 0, !dbg !2965
  br i1 %cmp, label %if.then, label %if.end, !dbg !2966

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2967
  %3 = load i32, i32* %n.addr, align 4, !dbg !2968
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %3), !dbg !2969
  br label %if.end, !dbg !2969

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2970
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !2971
  store i32 1, i32* %i, align 4, !dbg !2972
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2973
  %6 = load i32, i32* %i, align 4, !dbg !2974
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0), i32 %6), !dbg !2975
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !2976
  %tobool = icmp ne %struct.VEC_tree_heap* %7, null, !dbg !2976
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2976

cond.true:                                        ; preds = %if.end
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !2976
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !2976
  br label %cond.end, !dbg !2976

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2976
  %call4 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !2976
  %sub = sub nsw i32 %call4, 1, !dbg !2978
  store i32 %sub, i32* %j, align 4, !dbg !2979
  br label %for.cond, !dbg !2980

for.cond:                                         ; preds = %for.inc, %cond.end
  %9 = load i32, i32* %j, align 4, !dbg !2981
  %cmp5 = icmp sge i32 %9, 0, !dbg !2983
  br i1 %cmp5, label %for.body, label %for.end, !dbg !2984

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !2985, metadata !DIExpression()), !dbg !2987
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !2988, metadata !DIExpression()), !dbg !2989
  %10 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !2990
  %tobool6 = icmp ne %struct.VEC_tree_heap* %10, null, !dbg !2990
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !2990

cond.true7:                                       ; preds = %for.body
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !2990
  %base8 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %11, i32 0, i32 0, !dbg !2990
  br label %cond.end10, !dbg !2990

cond.false9:                                      ; preds = %for.body
  br label %cond.end10, !dbg !2990

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_tree_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !2990
  %12 = load i32, i32* %j, align 4, !dbg !2990
  %call12 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond11, i32 %12), !dbg !2990
  store %union.tree_node* %call12, %union.tree_node** %name, align 8, !dbg !2991
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !2992
  %cmp13 = icmp eq %union.tree_node* %13, null, !dbg !2994
  br i1 %cmp13, label %if.then14, label %if.end20, !dbg !2995

if.then14:                                        ; preds = %cond.end10
  %14 = load i32, i32* %i, align 4, !dbg !2996
  %inc = add nsw i32 %14, 1, !dbg !2996
  store i32 %inc, i32* %i, align 4, !dbg !2996
  %15 = load i32, i32* %n.addr, align 4, !dbg !2998
  %cmp15 = icmp sgt i32 %15, 0, !dbg !3000
  br i1 %cmp15, label %land.lhs.true, label %if.end18, !dbg !3001

land.lhs.true:                                    ; preds = %if.then14
  %16 = load i32, i32* %i, align 4, !dbg !3002
  %17 = load i32, i32* %n.addr, align 4, !dbg !3003
  %cmp16 = icmp sgt i32 %16, %17, !dbg !3004
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !3005

if.then17:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !3006

if.end18:                                         ; preds = %land.lhs.true, %if.then14
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3007
  %19 = load i32, i32* %i, align 4, !dbg !3008
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i32 %19), !dbg !3009
  br label %for.inc, !dbg !3010

if.end20:                                         ; preds = %cond.end10
  %20 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3011
  %base21 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !3011
  %21 = bitcast %struct.tree_base* %base21 to i64*, !dbg !3011
  %bf.load = load i64, i64* %21, align 8, !dbg !3011
  %bf.clear = and i64 %bf.load, 65535, !dbg !3011
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3011
  %idxprom = sext i32 %bf.cast to i64, !dbg !3011
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3011
  %22 = load i32, i32* %arrayidx, align 4, !dbg !3011
  %cmp22 = icmp eq i32 %22, 3, !dbg !3011
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !3013

if.then23:                                        ; preds = %if.end20
  %23 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3014
  store %union.tree_node* %23, %union.tree_node** %var, align 8, !dbg !3016
  store %union.tree_node* null, %union.tree_node** %name, align 8, !dbg !3017
  br label %if.end36, !dbg !3018

if.else:                                          ; preds = %if.end20
  %24 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3019
  %ssa_name = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !3019
  %var24 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3019
  %25 = load %union.tree_node*, %union.tree_node** %var24, align 8, !dbg !3019
  store %union.tree_node* %25, %union.tree_node** %var, align 8, !dbg !3021
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3022
  %call25 = call zeroext i8 @is_gimple_reg(%union.tree_node* %26), !dbg !3024
  %tobool26 = icmp ne i8 %call25, 0, !dbg !3024
  br i1 %tobool26, label %if.end35, label %if.then27, !dbg !3025

if.then27:                                        ; preds = %if.else
  %27 = load i32, i32* %j, align 4, !dbg !3026
  %dec = add nsw i32 %27, -1, !dbg !3026
  store i32 %dec, i32* %j, align 4, !dbg !3026
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !3028
  %tobool28 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !3028
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !3028

cond.true29:                                      ; preds = %if.then27
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !3028
  %base30 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !3028
  br label %cond.end32, !dbg !3028

cond.false31:                                     ; preds = %if.then27
  br label %cond.end32, !dbg !3028

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_tree_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !3028
  %30 = load i32, i32* %j, align 4, !dbg !3028
  %call34 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond33, i32 %30), !dbg !3028
  store %union.tree_node* %call34, %union.tree_node** %var, align 8, !dbg !3029
  br label %if.end35, !dbg !3030

if.end35:                                         ; preds = %cond.end32, %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then23
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3031
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0)), !dbg !3032
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3033
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3034
  call void @print_generic_expr(%struct._IO_FILE* %32, %union.tree_node* %33, i32 0), !dbg !3035
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3036
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !3037
  %35 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3038
  %tobool39 = icmp ne %union.tree_node* %35, null, !dbg !3038
  br i1 %tobool39, label %if.then40, label %if.else41, !dbg !3040

if.then40:                                        ; preds = %if.end36
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3041
  %37 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3042
  call void @print_generic_expr(%struct._IO_FILE* %36, %union.tree_node* %37, i32 0), !dbg !3043
  br label %if.end43, !dbg !3043

if.else41:                                        ; preds = %if.end36
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3044
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0)), !dbg !3045
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then40
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3046
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3047
  br label %for.inc, !dbg !3048

for.inc:                                          ; preds = %if.end43, %if.end18
  %40 = load i32, i32* %j, align 4, !dbg !3049
  %dec45 = add nsw i32 %40, -1, !dbg !3049
  store i32 %dec45, i32* %j, align 4, !dbg !3049
  br label %for.cond, !dbg !3050, !llvm.loop !3051

for.end:                                          ; preds = %if.then17, %for.cond
  ret void, !dbg !3053
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !3054 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3059, metadata !DIExpression()), !dbg !3060
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3060
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3060
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3060

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3060
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !3060
  %2 = load i32, i32* %num, align 8, !dbg !3060
  br label %cond.end, !dbg !3060

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3060
  ret i32 %cond, !dbg !3060
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !3061 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3064, metadata !DIExpression()), !dbg !3065
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3066, metadata !DIExpression()), !dbg !3065
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3065
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3065
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3065

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3065
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3065
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !3065
  %3 = load i32, i32* %num, align 8, !dbg !3065
  %cmp = icmp ult i32 %1, %3, !dbg !3065
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3067
  %land.ext = zext i1 %4 to i32, !dbg !3065
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3065
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !3065
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3065
  %idxprom = zext i32 %6 to i64, !dbg !3065
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !3065
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3065
  ret %union.tree_node* %7, !dbg !3065
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_defs_stack(i32 %n) #0 !dbg !3068 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3071, metadata !DIExpression()), !dbg !3072
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3073
  %1 = load i32, i32* %n.addr, align 4, !dbg !3074
  call void @dump_defs_stack(%struct._IO_FILE* %0, i32 %1), !dbg !3075
  ret void, !dbg !3076
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_currdefs(%struct._IO_FILE* %file) #0 !dbg !3077 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca %struct.referenced_var_iterator, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3080, metadata !DIExpression()), !dbg !3081
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %i, metadata !3082, metadata !DIExpression()), !dbg !3093
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3094, metadata !DIExpression()), !dbg !3095
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3096
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)), !dbg !3097
  %call1 = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %i), !dbg !3098
  store %union.tree_node* %call1, %union.tree_node** %var, align 8, !dbg !3098
  br label %for.cond, !dbg !3098

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %i), !dbg !3100
  %tobool = icmp ne i8 %call2, 0, !dbg !3100
  %lnot = xor i1 %tobool, true, !dbg !3100
  br i1 %lnot, label %for.body, label %for.end, !dbg !3098

for.body:                                         ; preds = %for.cond
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3102
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3102
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3102
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3102
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %2, i32 0, i32 9, !dbg !3102
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !3102
  %cmp = icmp eq %struct.bitmap_head_def* %3, null, !dbg !3104
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3105

lor.lhs.false:                                    ; preds = %for.body
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3106
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3106
  %gimple_df4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 3, !dbg !3106
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df4, align 8, !dbg !3106
  %syms_to_rename5 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 9, !dbg !3106
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename5, align 8, !dbg !3106
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3107
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !3107
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3107
  %8 = load i32, i32* %uid, align 4, !dbg !3107
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %8), !dbg !3108
  %tobool7 = icmp ne i32 %call6, 0, !dbg !3108
  br i1 %tobool7, label %if.then, label %if.end16, !dbg !3109

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3110
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0)), !dbg !3112
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3113
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3114
  call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0), !dbg !3115
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3116
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0)), !dbg !3117
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3118
  %call10 = call %union.tree_node* @get_current_def(%union.tree_node* %13), !dbg !3120
  %tobool11 = icmp ne %union.tree_node* %call10, null, !dbg !3120
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !3121

if.then12:                                        ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3122
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3123
  %call13 = call %union.tree_node* @get_current_def(%union.tree_node* %15), !dbg !3124
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %call13, i32 0), !dbg !3125
  br label %if.end, !dbg !3125

if.else:                                          ; preds = %if.then
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3126
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0)), !dbg !3127
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then12
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3128
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3129
  br label %if.end16, !dbg !3130

if.end16:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc, !dbg !3131

for.inc:                                          ; preds = %if.end16
  %call17 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %i), !dbg !3100
  store %union.tree_node* %call17, %union.tree_node** %var, align 8, !dbg !3100
  br label %for.cond, !dbg !3100, !llvm.loop !3132

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3134
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !3135 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !3139, metadata !DIExpression()), !dbg !3140
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !3141
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !3142
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3143
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3143
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr), !dbg !3144
  %call1 = call i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %call), !dbg !3145
  %2 = bitcast i8* %call1 to %union.tree_node*, !dbg !3146
  ret %union.tree_node* %2, !dbg !3147
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %iter) #0 !dbg !3148 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !3153, metadata !DIExpression()), !dbg !3154
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !3155
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !3156
  %call = call zeroext i8 @end_htab_p(%struct.htab_iterator* %hti), !dbg !3157
  ret i8 %call, !dbg !3158
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %iter) #0 !dbg !3159 {
entry:
  %iter.addr = alloca %struct.referenced_var_iterator*, align 8
  store %struct.referenced_var_iterator* %iter, %struct.referenced_var_iterator** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator** %iter.addr, metadata !3160, metadata !DIExpression()), !dbg !3161
  %0 = load %struct.referenced_var_iterator*, %struct.referenced_var_iterator** %iter.addr, align 8, !dbg !3162
  %hti = getelementptr inbounds %struct.referenced_var_iterator, %struct.referenced_var_iterator* %0, i32 0, i32 0, !dbg !3163
  %call = call i8* @next_htab_element(%struct.htab_iterator* %hti), !dbg !3164
  %1 = bitcast i8* %call to %union.tree_node*, !dbg !3165
  ret %union.tree_node* %1, !dbg !3166
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_currdefs() #0 !dbg !3167 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3170
  call void @dump_currdefs(%struct._IO_FILE* %0), !dbg !3171
  ret void, !dbg !3172
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_tree_ssa(%struct._IO_FILE* %file) #0 !dbg !3173 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %funcname = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3174, metadata !DIExpression()), !dbg !3175
  call void @llvm.dbg.declare(metadata i8** %funcname, metadata !3176, metadata !DIExpression()), !dbg !3177
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !3178
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3179
  %call = call i8* %0(%union.tree_node* %1, i32 2), !dbg !3180
  store i8* %call, i8** %funcname, align 8, !dbg !3177
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3181
  %3 = load i8*, i8** %funcname, align 8, !dbg !3182
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0), i8* %3), !dbg !3183
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3184
  call void @dump_def_blocks(%struct._IO_FILE* %4), !dbg !3185
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3186
  call void @dump_defs_stack(%struct._IO_FILE* %5, i32 -1), !dbg !3187
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3188
  call void @dump_currdefs(%struct._IO_FILE* %6), !dbg !3189
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3190
  call void @dump_tree_ssa_stats(%struct._IO_FILE* %7), !dbg !3191
  ret void, !dbg !3192
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_def_blocks(%struct._IO_FILE* %file) #0 !dbg !3193 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3194, metadata !DIExpression()), !dbg !3195
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3196
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i64 0, i64 0)), !dbg !3197
  %1 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3198
  %tobool = icmp ne %struct.htab* %1, null, !dbg !3198
  br i1 %tobool, label %if.then, label %if.end, !dbg !3200

if.then:                                          ; preds = %entry
  %2 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3201
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3202
  %4 = bitcast %struct._IO_FILE* %3 to i8*, !dbg !3202
  call void @htab_traverse(%struct.htab* %2, i32 (i8**, i8*)* @debug_def_blocks_r, i8* %4), !dbg !3203
  br label %if.end, !dbg !3203

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3204
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_tree_ssa_stats(%struct._IO_FILE* %file) #0 !dbg !3205 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3206, metadata !DIExpression()), !dbg !3207
  %0 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3208
  %tobool = icmp ne %struct.htab* %0, null, !dbg !3208
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3210

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3211
  %tobool1 = icmp ne %struct.htab* %1, null, !dbg !3211
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3212

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3213
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.16, i64 0, i64 0)), !dbg !3214
  br label %if.end, !dbg !3214

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %3 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3215
  %tobool2 = icmp ne %struct.htab* %3, null, !dbg !3215
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !3217

if.then3:                                         ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3218
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i64 0, i64 0)), !dbg !3220
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3221
  %6 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3222
  call void @htab_statistics(%struct._IO_FILE* %5, %struct.htab* %6), !dbg !3223
  br label %if.end5, !dbg !3224

if.end5:                                          ; preds = %if.then3, %if.end
  %7 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3225
  %tobool6 = icmp ne %struct.htab* %7, null, !dbg !3225
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !3227

if.then7:                                         ; preds = %if.end5
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3228
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0)), !dbg !3230
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3231
  %10 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3232
  call void @htab_statistics(%struct._IO_FILE* %9, %struct.htab* %10), !dbg !3233
  br label %if.end9, !dbg !3234

if.end9:                                          ; preds = %if.then7, %if.end5
  %11 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3235
  %tobool10 = icmp ne %struct.htab* %11, null, !dbg !3235
  br i1 %tobool10, label %if.then13, label %lor.lhs.false11, !dbg !3237

lor.lhs.false11:                                  ; preds = %if.end9
  %12 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3238
  %tobool12 = icmp ne %struct.htab* %12, null, !dbg !3238
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !3239

if.then13:                                        ; preds = %lor.lhs.false11, %if.end9
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3240
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3241
  br label %if.end15, !dbg !3241

if.end15:                                         ; preds = %if.then13, %lor.lhs.false11
  ret void, !dbg !3242
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_tree_ssa() #0 !dbg !3243 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3244
  call void @dump_tree_ssa(%struct._IO_FILE* %0), !dbg !3245
  ret void, !dbg !3246
}

; Function Attrs: noinline nounwind uwtable
define internal void @htab_statistics(%struct._IO_FILE* %file, %struct.htab* %htab) #0 !dbg !3247 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %htab.addr = alloca %struct.htab*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3250, metadata !DIExpression()), !dbg !3251
  store %struct.htab* %htab, %struct.htab** %htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %htab.addr, metadata !3252, metadata !DIExpression()), !dbg !3253
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3254
  %1 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3255
  %call = call i64 @htab_size(%struct.htab* %1), !dbg !3256
  %2 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3257
  %call1 = call i64 @htab_elements(%struct.htab* %2), !dbg !3258
  %3 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3259
  %call2 = call double @htab_collisions(%struct.htab* %3), !dbg !3260
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.39, i64 0, i64 0), i64 %call, i64 %call1, double %call2), !dbg !3261
  ret void, !dbg !3262
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_tree_ssa_stats() #0 !dbg !3263 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3264
  call void @dump_tree_ssa_stats(%struct._IO_FILE* %0), !dbg !3265
  ret void, !dbg !3266
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @debug_def_blocks_r(i8** %slot, i8* %data) #0 !dbg !3267 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %file = alloca %struct._IO_FILE*, align 8
  %db_p = alloca %struct.def_blocks_d*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3270, metadata !DIExpression()), !dbg !3271
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3272, metadata !DIExpression()), !dbg !3273
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file, metadata !3274, metadata !DIExpression()), !dbg !3275
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3276
  %1 = bitcast i8* %0 to %struct._IO_FILE*, !dbg !3277
  store %struct._IO_FILE* %1, %struct._IO_FILE** %file, align 8, !dbg !3275
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db_p, metadata !3278, metadata !DIExpression()), !dbg !3279
  %2 = load i8**, i8*** %slot.addr, align 8, !dbg !3280
  %3 = load i8*, i8** %2, align 8, !dbg !3281
  %4 = bitcast i8* %3 to %struct.def_blocks_d*, !dbg !3282
  store %struct.def_blocks_d* %4, %struct.def_blocks_d** %db_p, align 8, !dbg !3279
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !dbg !3283
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)), !dbg !3284
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !dbg !3285
  %7 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !3286
  %var = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %7, i32 0, i32 0, !dbg !3287
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3287
  %9 = load i32, i32* @dump_flags, align 4, !dbg !3288
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %8, i32 %9), !dbg !3289
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !dbg !3290
  %11 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !3291
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %11, i32 0, i32 1, !dbg !3292
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !3292
  call void @bitmap_print(%struct._IO_FILE* %10, %struct.bitmap_head_def* %12, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3293
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !dbg !3294
  %14 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !3295
  %livein_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %14, i32 0, i32 3, !dbg !3296
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein_blocks, align 8, !dbg !3296
  call void @bitmap_print(%struct._IO_FILE* %13, %struct.bitmap_head_def* %15, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !3297
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file, align 8, !dbg !3298
  %17 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !3299
  %phi_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %17, i32 0, i32 2, !dbg !3300
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_blocks, align 8, !dbg !3300
  call void @bitmap_print(%struct._IO_FILE* %16, %struct.bitmap_head_def* %18, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0)), !dbg !3301
  ret i32 1, !dbg !3302
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_def_blocks() #0 !dbg !3303 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3304
  call void @dump_def_blocks(%struct._IO_FILE* %0), !dbg !3305
  ret void, !dbg !3306
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rewrite_into_ssa() #0 !dbg !3307 {
entry:
  %dfs = alloca %struct.bitmap_head_def**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %dfs, metadata !3308, metadata !DIExpression()), !dbg !3309
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3310, metadata !DIExpression()), !dbg !3311
  br label %do.body, !dbg !3312

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !3313
  %tobool = icmp ne i8 %0, 0, !dbg !3313
  br i1 %tobool, label %if.then, label %if.end, !dbg !3316

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 59), !dbg !3313
  br label %if.end, !dbg !3313

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !3316

do.end:                                           ; preds = %if.end
  call void @init_ssa_operands(), !dbg !3317
  call void @init_ssa_renamer(), !dbg !3318
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3319
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3319
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3319
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3319
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !3319
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !3319
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %3), !dbg !3320
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !3321
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !3322
  call void @sbitmap_zero(%struct.simple_bitmap_def* %4), !dbg !3323
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3324
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3324
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !3324
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3324
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 5, !dbg !3324
  %7 = load i32, i32* %x_last_basic_block3, align 8, !dbg !3324
  %conv = sext i32 %7 to i64, !dbg !3324
  %mul = mul i64 8, %conv, !dbg !3324
  %call4 = call i8* @xmalloc(i64 %mul), !dbg !3324
  %8 = bitcast i8* %call4 to %struct.bitmap_head_def**, !dbg !3324
  store %struct.bitmap_head_def** %8, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3325
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3326
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3326
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !3326
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !3326
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !3326
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3326
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !3326
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3326
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !3326
  br label %for.cond, !dbg !3326

for.cond:                                         ; preds = %for.inc, %do.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3328
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3328
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !3328
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !3328
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !3328
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !3328
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3328
  %cmp = icmp ne %struct.basic_block_def* %13, %16, !dbg !3328
  br i1 %cmp, label %for.body, label %for.end, !dbg !3326

for.body:                                         ; preds = %for.cond
  %call10 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3330
  %17 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3331
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3332
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !3333
  %19 = load i32, i32* %index, align 8, !dbg !3333
  %idxprom = sext i32 %19 to i64, !dbg !3331
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %17, i64 %idxprom, !dbg !3331
  store %struct.bitmap_head_def* %call10, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !3334
  br label %for.inc, !dbg !3331

for.inc:                                          ; preds = %for.body
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3328
  %next_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !3328
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb11, align 8, !dbg !3328
  store %struct.basic_block_def* %21, %struct.basic_block_def** %bb, align 8, !dbg !3328
  br label %for.cond, !dbg !3328, !llvm.loop !3335

for.end:                                          ; preds = %for.cond
  call void @calculate_dominance_info(i32 1), !dbg !3337
  %22 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3338
  call void @compute_dominance_frontiers(%struct.bitmap_head_def** %22), !dbg !3339
  call void @mark_def_site_blocks(), !dbg !3340
  %23 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3341
  call void @insert_phi_nodes(%struct.bitmap_head_def** %23), !dbg !3342
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3343
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !3343
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !3343
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !3343
  %x_entry_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 0, !dbg !3343
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr14, align 8, !dbg !3343
  call void @rewrite_blocks(%struct.basic_block_def* %26, i32 0), !dbg !3344
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3345
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !3345
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !3345
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !3345
  %x_entry_block_ptr17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 0, !dbg !3345
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr17, align 8, !dbg !3345
  %next_bb18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 6, !dbg !3345
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb18, align 8, !dbg !3345
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb, align 8, !dbg !3345
  br label %for.cond19, !dbg !3345

for.cond19:                                       ; preds = %for.inc32, %for.end
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3347
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3347
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !3347
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !3347
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !3347
  %x_exit_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !3347
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr22, align 8, !dbg !3347
  %cmp23 = icmp ne %struct.basic_block_def* %31, %34, !dbg !3347
  br i1 %cmp23, label %for.body25, label %for.end34, !dbg !3345

for.body25:                                       ; preds = %for.cond19
  %35 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3349
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3349
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !3349
  %37 = load i32, i32* %index26, align 8, !dbg !3349
  %idxprom27 = sext i32 %37 to i64, !dbg !3349
  %arrayidx28 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %35, i64 %idxprom27, !dbg !3349
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx28, align 8, !dbg !3349
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %38), !dbg !3349
  %39 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3349
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3349
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !3349
  %41 = load i32, i32* %index29, align 8, !dbg !3349
  %idxprom30 = sext i32 %41 to i64, !dbg !3349
  %arrayidx31 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %39, i64 %idxprom30, !dbg !3349
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx31, align 8, !dbg !3349
  br label %for.inc32, !dbg !3349

for.inc32:                                        ; preds = %for.body25
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3347
  %next_bb33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !3347
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb33, align 8, !dbg !3347
  store %struct.basic_block_def* %43, %struct.basic_block_def** %bb, align 8, !dbg !3347
  br label %for.cond19, !dbg !3347, !llvm.loop !3350

for.end34:                                        ; preds = %for.cond19
  %44 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !3352
  %45 = bitcast %struct.bitmap_head_def** %44 to i8*, !dbg !3352
  call void @free(i8* %45), !dbg !3353
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !3354
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %46, i32 0, i32 0, !dbg !3354
  %47 = load i8*, i8** %popcount, align 8, !dbg !3354
  call void @free(i8* %47), !dbg !3354
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !3354
  %49 = bitcast %struct.simple_bitmap_def* %48 to i8*, !dbg !3354
  call void @free(i8* %49), !dbg !3354
  call void @fini_ssa_renamer(), !dbg !3355
  br label %do.body35, !dbg !3356

do.body35:                                        ; preds = %for.end34
  %50 = load i8, i8* @timevar_enable, align 1, !dbg !3357
  %tobool36 = icmp ne i8 %50, 0, !dbg !3357
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !3360

if.then37:                                        ; preds = %do.body35
  call void @timevar_pop_1(i32 59), !dbg !3357
  br label %if.end38, !dbg !3357

if.end38:                                         ; preds = %if.then37, %do.body35
  br label %do.end39, !dbg !3360

do.end39:                                         ; preds = %if.end38
  ret i32 0, !dbg !3361
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_names_replaced_by(%struct._IO_FILE* %file, %union.tree_node* %name) #0 !dbg !3362 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %old_set = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3365, metadata !DIExpression()), !dbg !3366
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3367, metadata !DIExpression()), !dbg !3368
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3369, metadata !DIExpression()), !dbg !3370
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %old_set, metadata !3371, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3373, metadata !DIExpression()), !dbg !3374
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3375
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3376
  call void @print_generic_expr(%struct._IO_FILE* %0, %union.tree_node* %1, i32 0), !dbg !3377
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3378
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0)), !dbg !3379
  %3 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3380
  %call1 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %3), !dbg !3381
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %old_set, align 8, !dbg !3382
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %old_set, align 8, !dbg !3383
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %4, i32 0, i32* %i), !dbg !3383
  br label %for.cond, !dbg !3383

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3385
  %tobool = icmp ne i8 %call2, 0, !dbg !3383
  br i1 %tobool, label %for.body, label %for.end, !dbg !3383

for.body:                                         ; preds = %for.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3387
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3389
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3389
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3389
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3389
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !3389
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3389
  %tobool3 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !3389
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3389

cond.true:                                        ; preds = %for.body
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3389
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3389
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !3389
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !3389
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !3389
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !3389
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !3389
  br label %cond.end, !dbg !3389

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3389

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3389
  %12 = load i32, i32* %i, align 4, !dbg !3389
  %call7 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %12), !dbg !3389
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %call7, i32 0), !dbg !3390
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3391
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3392
  br label %for.inc, !dbg !3393

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3385
  br label %for.cond, !dbg !3385, !llvm.loop !3394

for.end:                                          ; preds = %for.cond
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3396
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0)), !dbg !3397
  ret void, !dbg !3398
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %new_tree) #0 !dbg !3399 {
entry:
  %retval = alloca %struct.bitmap_head_def*, align 8
  %new_tree.addr = alloca %union.tree_node*, align 8
  %m = alloca %struct.repl_map_d, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !3402, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata %struct.repl_map_d* %m, metadata !3404, metadata !DIExpression()), !dbg !3405
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3406, metadata !DIExpression()), !dbg !3407
  %0 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3408
  %name = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %m, i32 0, i32 0, !dbg !3409
  store %union.tree_node* %0, %union.tree_node** %name, align 8, !dbg !3410
  %1 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3411
  %2 = bitcast %struct.repl_map_d* %m to i8*, !dbg !3412
  %call = call i8** @htab_find_slot(%struct.htab* %1, i8* %2, i32 0), !dbg !3413
  store i8** %call, i8*** %slot, align 8, !dbg !3414
  %3 = load i8**, i8*** %slot, align 8, !dbg !3415
  %cmp = icmp eq i8** %3, null, !dbg !3417
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3418

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8**, i8*** %slot, align 8, !dbg !3419
  %5 = load i8*, i8** %4, align 8, !dbg !3420
  %cmp1 = icmp eq i8* %5, null, !dbg !3421
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3422

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %retval, align 8, !dbg !3423
  br label %return, !dbg !3423

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %slot, align 8, !dbg !3424
  %7 = load i8*, i8** %6, align 8, !dbg !3425
  %8 = bitcast i8* %7 to %struct.repl_map_d*, !dbg !3426
  %set = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %8, i32 0, i32 1, !dbg !3427
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set, align 8, !dbg !3427
  store %struct.bitmap_head_def* %9, %struct.bitmap_head_def** %retval, align 8, !dbg !3428
  br label %return, !dbg !3428

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %retval, align 8, !dbg !3429
  ret %struct.bitmap_head_def* %10, !dbg !3429
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_names_replaced_by(%union.tree_node* %name) #0 !dbg !3430 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !3433, metadata !DIExpression()), !dbg !3434
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3435
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !3436
  call void @dump_names_replaced_by(%struct._IO_FILE* %0, %union.tree_node* %1), !dbg !3437
  ret void, !dbg !3438
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_update_ssa(%struct._IO_FILE* %file) #0 !dbg !3439 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %sbi = alloca %struct.sbitmap_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3440, metadata !DIExpression()), !dbg !3441
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3442, metadata !DIExpression()), !dbg !3443
  store i32 0, i32* %i, align 4, !dbg !3443
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3444, metadata !DIExpression()), !dbg !3445
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3446
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3446
  %call = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !3448
  %tobool = icmp ne i8 %call, 0, !dbg !3448
  br i1 %tobool, label %if.end, label %if.then, !dbg !3449

if.then:                                          ; preds = %entry
  br label %return, !dbg !3450

if.end:                                           ; preds = %entry
  %1 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3451
  %tobool1 = icmp ne %struct.simple_bitmap_def* %1, null, !dbg !3451
  br i1 %tobool1, label %land.lhs.true, label %if.end19, !dbg !3453

land.lhs.true:                                    ; preds = %if.end
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3454
  %call2 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %2), !dbg !3455
  %cmp = icmp sge i32 %call2, 0, !dbg !3456
  br i1 %cmp, label %if.then3, label %if.end19, !dbg !3457

if.then3:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !3458, metadata !DIExpression()), !dbg !3470
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3471
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23, i64 0, i64 0)), !dbg !3472
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3473
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.24, i64 0, i64 0)), !dbg !3474
  %5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3475
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %5, i32 0), !dbg !3475
  br label %for.cond, !dbg !3475

for.cond:                                         ; preds = %for.inc, %if.then3
  %call6 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !3477
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3475
  br i1 %tobool7, label %for.body, label %for.end, !dbg !3475

for.body:                                         ; preds = %for.cond
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3479
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3480
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3480
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 3, !dbg !3480
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3480
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !3480
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3480
  %tobool9 = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !3480
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !3480

cond.true:                                        ; preds = %for.body
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3480
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3480
  %gimple_df11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 3, !dbg !3480
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df11, align 8, !dbg !3480
  %ssa_names12 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !3480
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names12, align 8, !dbg !3480
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !3480
  br label %cond.end, !dbg !3480

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3480
  %13 = load i32, i32* %i, align 4, !dbg !3480
  %call13 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %13), !dbg !3480
  call void @dump_names_replaced_by(%struct._IO_FILE* %6, %union.tree_node* %call13), !dbg !3481
  br label %for.inc, !dbg !3481

for.inc:                                          ; preds = %cond.end
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !3477
  br label %for.cond, !dbg !3477, !llvm.loop !3482

for.end:                                          ; preds = %for.cond
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3484
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3485
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3486
  %16 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !3487
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.25, i64 0, i64 0), i32 %16), !dbg !3488
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3489
  %18 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 1), align 4, !dbg !3490
  %19 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !3491
  %sub = sub i32 %18, %19, !dbg !3492
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.26, i64 0, i64 0), i32 %sub), !dbg !3493
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3494
  %21 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 1), align 4, !dbg !3495
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i64 0, i64 0), i32 %21), !dbg !3496
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3497
  %23 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 3), align 8, !dbg !3498
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0), i32 %23), !dbg !3499
  br label %if.end19, !dbg !3500

if.end19:                                         ; preds = %for.end, %land.lhs.true, %if.end
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3501
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !3501
  %gimple_df21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 3, !dbg !3501
  %25 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df21, align 8, !dbg !3501
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %25, i32 0, i32 9, !dbg !3501
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !3501
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %26, i32 0, i32 0, !dbg !3501
  %27 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3501
  %tobool22 = icmp ne %struct.bitmap_element_def* %27, null, !dbg !3501
  br i1 %tobool22, label %if.then23, label %if.end29, !dbg !3503

if.then23:                                        ; preds = %if.end19
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3504
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i64 0, i64 0)), !dbg !3506
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3507
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3508
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !3508
  %gimple_df26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 3, !dbg !3508
  %31 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df26, align 8, !dbg !3508
  %syms_to_rename27 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %31, i32 0, i32 9, !dbg !3508
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename27, align 8, !dbg !3508
  call void @dump_decl_set(%struct._IO_FILE* %29, %struct.bitmap_head_def* %32), !dbg !3509
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3510
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3511
  br label %if.end29, !dbg !3512

if.end29:                                         ; preds = %if.then23, %if.end19
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3513
  %tobool30 = icmp ne %struct.bitmap_head_def* %34, null, !dbg !3513
  br i1 %tobool30, label %land.lhs.true31, label %if.end56, !dbg !3515

land.lhs.true31:                                  ; preds = %if.end29
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3516
  %first32 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %35, i32 0, i32 0, !dbg !3516
  %36 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first32, align 8, !dbg !3516
  %tobool33 = icmp ne %struct.bitmap_element_def* %36, null, !dbg !3516
  br i1 %tobool33, label %if.then34, label %if.end56, !dbg !3517

if.then34:                                        ; preds = %land.lhs.true31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3518
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.30, i64 0, i64 0)), !dbg !3520
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3521
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %38, i32 0, i32* %i), !dbg !3521
  br label %for.cond36, !dbg !3521

for.cond36:                                       ; preds = %for.inc54, %if.then34
  %call37 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3523
  %tobool38 = icmp ne i8 %call37, 0, !dbg !3521
  br i1 %tobool38, label %for.body39, label %for.end55, !dbg !3521

for.body39:                                       ; preds = %for.cond36
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3525
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3527
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !3527
  %gimple_df41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 3, !dbg !3527
  %41 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df41, align 8, !dbg !3527
  %ssa_names42 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %41, i32 0, i32 2, !dbg !3527
  %42 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names42, align 8, !dbg !3527
  %tobool43 = icmp ne %struct.VEC_tree_gc* %42, null, !dbg !3527
  br i1 %tobool43, label %cond.true44, label %cond.false49, !dbg !3527

cond.true44:                                      ; preds = %for.body39
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3527
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !3527
  %gimple_df46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 3, !dbg !3527
  %44 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df46, align 8, !dbg !3527
  %ssa_names47 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %44, i32 0, i32 2, !dbg !3527
  %45 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names47, align 8, !dbg !3527
  %base48 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %45, i32 0, i32 0, !dbg !3527
  br label %cond.end50, !dbg !3527

cond.false49:                                     ; preds = %for.body39
  br label %cond.end50, !dbg !3527

cond.end50:                                       ; preds = %cond.false49, %cond.true44
  %cond51 = phi %struct.VEC_tree_base* [ %base48, %cond.true44 ], [ null, %cond.false49 ], !dbg !3527
  %46 = load i32, i32* %i, align 4, !dbg !3527
  %call52 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond51, i32 %46), !dbg !3527
  call void @print_generic_expr(%struct._IO_FILE* %39, %union.tree_node* %call52, i32 0), !dbg !3528
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3529
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3530
  br label %for.inc54, !dbg !3531

for.inc54:                                        ; preds = %cond.end50
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3523
  br label %for.cond36, !dbg !3523, !llvm.loop !3532

for.end55:                                        ; preds = %for.cond36
  br label %if.end56, !dbg !3534

if.end56:                                         ; preds = %for.end55, %land.lhs.true31, %if.end29
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3535
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !3536
  br label %return, !dbg !3537

return:                                           ; preds = %if.end56, %if.then
  ret void, !dbg !3537
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @need_ssa_update_p(%struct.function* %fn) #0 !dbg !3538 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !3541, metadata !DIExpression()), !dbg !3542
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3543
  %cmp = icmp ne %struct.function* %0, null, !dbg !3543
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3543

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !3543
  br label %cond.end, !dbg !3543

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3543

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3543
  %1 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3544
  %2 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3545
  %cmp1 = icmp eq %struct.function* %1, %2, !dbg !3546
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !3547

lor.rhs:                                          ; preds = %cond.end
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3548
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !3549
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3549
  %tobool = icmp ne %struct.gimple_df* %4, null, !dbg !3548
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3550

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3551
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 3, !dbg !3551
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3551
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 9, !dbg !3551
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !3551
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %7, i32 0, i32 0, !dbg !3551
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3551
  %tobool3 = icmp ne %struct.bitmap_element_def* %8, null, !dbg !3551
  %lnot = xor i1 %tobool3, true, !dbg !3551
  %lnot4 = xor i1 %lnot, true, !dbg !3552
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %lnot4, %land.rhs ], !dbg !3553
  br label %lor.end, !dbg !3547

lor.end:                                          ; preds = %land.end, %cond.end
  %10 = phi i1 [ true, %cond.end ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32, !dbg !3547
  %conv = trunc i32 %lor.ext to i8, !dbg !3554
  ret i8 %conv, !dbg !3555
}

declare dso_local i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_init(%struct.sbitmap_iterator* %i, %struct.simple_bitmap_def* %bmp, i32 %min) #0 !dbg !3556 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %bmp.addr = alloca %struct.simple_bitmap_def*, align 8
  %min.addr = alloca i32, align 4
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !3563, metadata !DIExpression()), !dbg !3564
  store %struct.simple_bitmap_def* %bmp, %struct.simple_bitmap_def** %bmp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %bmp.addr, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i32 %min, i32* %min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min.addr, metadata !3567, metadata !DIExpression()), !dbg !3568
  %0 = load i32, i32* %min.addr, align 4, !dbg !3569
  %div = udiv i32 %0, 64, !dbg !3570
  %1 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3571
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %1, i32 0, i32 2, !dbg !3572
  store i32 %div, i32* %word_num, align 4, !dbg !3573
  %2 = load i32, i32* %min.addr, align 4, !dbg !3574
  %3 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3575
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %3, i32 0, i32 3, !dbg !3576
  store i32 %2, i32* %bit_num, align 8, !dbg !3577
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !3578
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 2, !dbg !3579
  %5 = load i32, i32* %size, align 4, !dbg !3579
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3580
  %size1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !3581
  store i32 %5, i32* %size1, align 8, !dbg !3582
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %bmp.addr, align 8, !dbg !3583
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !3584
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 0, !dbg !3583
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3585
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 0, !dbg !3586
  store i64* %arraydecay, i64** %ptr, align 8, !dbg !3587
  %9 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3588
  %word_num2 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %9, i32 0, i32 2, !dbg !3590
  %10 = load i32, i32* %word_num2, align 4, !dbg !3590
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3591
  %size3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 1, !dbg !3592
  %12 = load i32, i32* %size3, align 8, !dbg !3592
  %cmp = icmp uge i32 %10, %12, !dbg !3593
  br i1 %cmp, label %if.then, label %if.else, !dbg !3594

if.then:                                          ; preds = %entry
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3595
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 4, !dbg !3596
  store i64 0, i64* %word, align 8, !dbg !3597
  br label %if.end, !dbg !3595

if.else:                                          ; preds = %entry
  %14 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3598
  %ptr4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %14, i32 0, i32 0, !dbg !3599
  %15 = load i64*, i64** %ptr4, align 8, !dbg !3599
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3600
  %word_num5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 2, !dbg !3601
  %17 = load i32, i32* %word_num5, align 4, !dbg !3601
  %idxprom = zext i32 %17 to i64, !dbg !3598
  %arrayidx = getelementptr inbounds i64, i64* %15, i64 %idxprom, !dbg !3598
  %18 = load i64, i64* %arrayidx, align 8, !dbg !3598
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3602
  %bit_num6 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !3603
  %20 = load i32, i32* %bit_num6, align 8, !dbg !3603
  %rem = urem i32 %20, 64, !dbg !3604
  %sh_prom = zext i32 %rem to i64, !dbg !3605
  %shr = lshr i64 %18, %sh_prom, !dbg !3605
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3606
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !3607
  store i64 %shr, i64* %word7, align 8, !dbg !3608
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3609
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %i, i32* %n) #0 !dbg !3610 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  %n.addr = alloca i32*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !3613, metadata !DIExpression()), !dbg !3614
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !3615, metadata !DIExpression()), !dbg !3616
  br label %for.cond, !dbg !3617

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3618
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !3621
  %1 = load i64, i64* %word, align 8, !dbg !3621
  %cmp = icmp eq i64 %1, 0, !dbg !3622
  br i1 %cmp, label %for.body, label %for.end, !dbg !3623

for.body:                                         ; preds = %for.cond
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3624
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 2, !dbg !3626
  %3 = load i32, i32* %word_num, align 4, !dbg !3627
  %inc = add i32 %3, 1, !dbg !3627
  store i32 %inc, i32* %word_num, align 4, !dbg !3627
  %4 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3628
  %word_num1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %4, i32 0, i32 2, !dbg !3630
  %5 = load i32, i32* %word_num1, align 4, !dbg !3630
  %6 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3631
  %size = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %6, i32 0, i32 1, !dbg !3632
  %7 = load i32, i32* %size, align 8, !dbg !3632
  %cmp2 = icmp uge i32 %5, %7, !dbg !3633
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3634

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !3635
  br label %return, !dbg !3635

if.end:                                           ; preds = %for.body
  %8 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3636
  %word_num3 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %8, i32 0, i32 2, !dbg !3637
  %9 = load i32, i32* %word_num3, align 4, !dbg !3637
  %mul = mul i32 %9, 64, !dbg !3638
  %10 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3639
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %10, i32 0, i32 3, !dbg !3640
  store i32 %mul, i32* %bit_num, align 8, !dbg !3641
  br label %for.inc, !dbg !3642

for.inc:                                          ; preds = %if.end
  %11 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3643
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %11, i32 0, i32 0, !dbg !3644
  %12 = load i64*, i64** %ptr, align 8, !dbg !3644
  %13 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3645
  %word_num4 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %13, i32 0, i32 2, !dbg !3646
  %14 = load i32, i32* %word_num4, align 4, !dbg !3646
  %idxprom = zext i32 %14 to i64, !dbg !3643
  %arrayidx = getelementptr inbounds i64, i64* %12, i64 %idxprom, !dbg !3643
  %15 = load i64, i64* %arrayidx, align 8, !dbg !3643
  %16 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3647
  %word5 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %16, i32 0, i32 4, !dbg !3648
  store i64 %15, i64* %word5, align 8, !dbg !3649
  br label %for.cond, !dbg !3650, !llvm.loop !3651

for.end:                                          ; preds = %for.cond
  br label %for.cond6, !dbg !3653

for.cond6:                                        ; preds = %for.inc12, %for.end
  %17 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3654
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %17, i32 0, i32 4, !dbg !3657
  %18 = load i64, i64* %word7, align 8, !dbg !3657
  %and = and i64 %18, 1, !dbg !3658
  %cmp8 = icmp eq i64 %and, 0, !dbg !3659
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !3660

for.body9:                                        ; preds = %for.cond6
  %19 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3661
  %bit_num10 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %19, i32 0, i32 3, !dbg !3662
  %20 = load i32, i32* %bit_num10, align 8, !dbg !3663
  %inc11 = add i32 %20, 1, !dbg !3663
  store i32 %inc11, i32* %bit_num10, align 8, !dbg !3663
  br label %for.inc12, !dbg !3661

for.inc12:                                        ; preds = %for.body9
  %21 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3664
  %word13 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %21, i32 0, i32 4, !dbg !3665
  %22 = load i64, i64* %word13, align 8, !dbg !3666
  %shr = lshr i64 %22, 1, !dbg !3666
  store i64 %shr, i64* %word13, align 8, !dbg !3666
  br label %for.cond6, !dbg !3667, !llvm.loop !3668

for.end14:                                        ; preds = %for.cond6
  %23 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3670
  %bit_num15 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %23, i32 0, i32 3, !dbg !3671
  %24 = load i32, i32* %bit_num15, align 8, !dbg !3671
  %25 = load i32*, i32** %n.addr, align 8, !dbg !3672
  store i32 %24, i32* %25, align 4, !dbg !3673
  store i8 1, i8* %retval, align 1, !dbg !3674
  br label %return, !dbg !3674

return:                                           ; preds = %for.end14, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !3675
  ret i8 %26, !dbg !3675
}

; Function Attrs: noinline nounwind uwtable
define internal void @sbitmap_iter_next(%struct.sbitmap_iterator* %i) #0 !dbg !3676 {
entry:
  %i.addr = alloca %struct.sbitmap_iterator*, align 8
  store %struct.sbitmap_iterator* %i, %struct.sbitmap_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator** %i.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  %0 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3681
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %0, i32 0, i32 4, !dbg !3682
  %1 = load i64, i64* %word, align 8, !dbg !3683
  %shr = lshr i64 %1, 1, !dbg !3683
  store i64 %shr, i64* %word, align 8, !dbg !3683
  %2 = load %struct.sbitmap_iterator*, %struct.sbitmap_iterator** %i.addr, align 8, !dbg !3684
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %2, i32 0, i32 3, !dbg !3685
  %3 = load i32, i32* %bit_num, align 8, !dbg !3686
  %inc = add i32 %3, 1, !dbg !3686
  store i32 %inc, i32* %bit_num, align 8, !dbg !3686
  ret void, !dbg !3687
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_update_ssa() #0 !dbg !3688 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3689
  call void @dump_update_ssa(%struct._IO_FILE* %0), !dbg !3690
  ret void, !dbg !3691
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_update_ssa() #0 !dbg !3692 {
entry:
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %phis = alloca %struct.VEC_gimple_heap*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3695, metadata !DIExpression()), !dbg !3696
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3697
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !3697
  %1 = load i8*, i8** %popcount, align 8, !dbg !3697
  call void @free(i8* %1), !dbg !3697
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3697
  %3 = bitcast %struct.simple_bitmap_def* %2 to i8*, !dbg !3697
  call void @free(i8* %3), !dbg !3697
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3698
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3699
  %popcount1 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 0, !dbg !3699
  %5 = load i8*, i8** %popcount1, align 8, !dbg !3699
  call void @free(i8* %5), !dbg !3699
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3699
  %7 = bitcast %struct.simple_bitmap_def* %6 to i8*, !dbg !3699
  call void @free(i8* %7), !dbg !3699
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3700
  %8 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !3701
  call void @htab_delete(%struct.htab* %8), !dbg !3702
  store %struct.htab* null, %struct.htab** @repl_tbl, align 8, !dbg !3703
  %9 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3704
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 3, !dbg !3704
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3704
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 9, !dbg !3704
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !3704
  call void @bitmap_clear(%struct.bitmap_head_def* %11), !dbg !3705
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 2), align 8, !dbg !3706
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %12), !dbg !3706
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 2), align 8, !dbg !3706
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3707
  %tobool = icmp ne %struct.bitmap_head_def* %13, null, !dbg !3707
  br i1 %tobool, label %if.then, label %if.end, !dbg !3709

if.then:                                          ; preds = %entry
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3710
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %14, i32 0, i32* %i), !dbg !3710
  br label %for.cond, !dbg !3710

for.cond:                                         ; preds = %for.inc, %if.then
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3713
  %tobool2 = icmp ne i8 %call, 0, !dbg !3710
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3710

for.body:                                         ; preds = %for.cond
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3715
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3715
  %gimple_df3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3715
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df3, align 8, !dbg !3715
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !3715
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3715
  %tobool4 = icmp ne %struct.VEC_tree_gc* %17, null, !dbg !3715
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !3715

cond.true:                                        ; preds = %for.body
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3715
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !3715
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !3715
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !3715
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 2, !dbg !3715
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !3715
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %20, i32 0, i32 0, !dbg !3715
  br label %cond.end, !dbg !3715

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3715

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3715
  %21 = load i32, i32* %i, align 4, !dbg !3715
  %call8 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %21), !dbg !3715
  call void @release_ssa_name(%union.tree_node* %call8), !dbg !3716
  br label %for.inc, !dbg !3716

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3713
  br label %for.cond, !dbg !3713, !llvm.loop !3717

for.end:                                          ; preds = %for.cond
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3719
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %22), !dbg !3719
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3719
  br label %if.end, !dbg !3720

if.end:                                           ; preds = %for.end, %entry
  call void @clear_ssa_name_info(), !dbg !3721
  call void @fini_ssa_renamer(), !dbg !3722
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !3723
  %tobool9 = icmp ne %struct.bitmap_head_def* %23, null, !dbg !3723
  br i1 %tobool9, label %if.then10, label %if.end31, !dbg !3725

if.then10:                                        ; preds = %if.end
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !3726
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %24, i32 0, i32* %i), !dbg !3726
  br label %for.cond11, !dbg !3726

for.cond11:                                       ; preds = %for.inc29, %if.then10
  %call12 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3728
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3726
  br i1 %tobool13, label %for.body14, label %for.end30, !dbg !3726

for.body14:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %phis, metadata !3730, metadata !DIExpression()), !dbg !3732
  %25 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !3733
  %tobool15 = icmp ne %struct.VEC_gimple_vec_heap* %25, null, !dbg !3733
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !3733

cond.true16:                                      ; preds = %for.body14
  %26 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !3733
  %base17 = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %26, i32 0, i32 0, !dbg !3733
  br label %cond.end19, !dbg !3733

cond.false18:                                     ; preds = %for.body14
  br label %cond.end19, !dbg !3733

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_gimple_vec_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !3733
  %27 = load i32, i32* %i, align 4, !dbg !3733
  %call21 = call %struct.VEC_gimple_heap* @VEC_gimple_vec_base_index(%struct.VEC_gimple_vec_base* %cond20, i32 %27), !dbg !3733
  store %struct.VEC_gimple_heap* %call21, %struct.VEC_gimple_heap** %phis, align 8, !dbg !3732
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %phis), !dbg !3734
  %28 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !3735
  %tobool22 = icmp ne %struct.VEC_gimple_vec_heap* %28, null, !dbg !3735
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !3735

cond.true23:                                      ; preds = %cond.end19
  %29 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !3735
  %base24 = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %29, i32 0, i32 0, !dbg !3735
  br label %cond.end26, !dbg !3735

cond.false25:                                     ; preds = %cond.end19
  br label %cond.end26, !dbg !3735

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_gimple_vec_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !3735
  %30 = load i32, i32* %i, align 4, !dbg !3735
  %call28 = call %struct.VEC_gimple_heap* @VEC_gimple_vec_base_replace(%struct.VEC_gimple_vec_base* %cond27, i32 %30, %struct.VEC_gimple_heap* null), !dbg !3735
  br label %for.inc29, !dbg !3736

for.inc29:                                        ; preds = %cond.end26
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3728
  br label %for.cond11, !dbg !3728, !llvm.loop !3737

for.end30:                                        ; preds = %for.cond11
  br label %if.end31, !dbg !3738

if.end31:                                         ; preds = %for.end30, %if.end
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !3739
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %31), !dbg !3739
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !3739
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !3740
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %32), !dbg !3740
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !3740
  store %struct.function* null, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3741
  ret void, !dbg !3742
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @release_ssa_name(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_ssa_name_info() #0 !dbg !3743 {
entry:
  %0 = load i32, i32* @current_info_for_ssa_name_age, align 4, !dbg !3744
  %inc = add i32 %0, 1, !dbg !3744
  store i32 %inc, i32* @current_info_for_ssa_name_age, align 4, !dbg !3744
  ret void, !dbg !3745
}

; Function Attrs: noinline nounwind uwtable
define internal void @fini_ssa_renamer() #0 !dbg !3746 {
entry:
  %0 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3747
  %tobool = icmp ne %struct.htab* %0, null, !dbg !3747
  br i1 %tobool, label %if.then, label %if.end, !dbg !3749

if.then:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !3750
  call void @htab_delete(%struct.htab* %1), !dbg !3752
  store %struct.htab* null, %struct.htab** @def_blocks, align 8, !dbg !3753
  br label %if.end, !dbg !3754

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3755
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3755
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3756
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3756
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 10, !dbg !3757
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !3758
  %bf.clear = and i8 %bf.load, -2, !dbg !3758
  %bf.set = or i8 %bf.clear, 1, !dbg !3758
  store i8 %bf.set, i8* %in_ssa_p, align 8, !dbg !3758
  ret void, !dbg !3759
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_vec_base_index(%struct.VEC_gimple_vec_base* %vec_, i32 %ix_) #0 !dbg !3760 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_vec_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_base** %vec_.addr, metadata !3765, metadata !DIExpression()), !dbg !3766
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3767, metadata !DIExpression()), !dbg !3766
  %0 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3766
  %tobool = icmp ne %struct.VEC_gimple_vec_base* %0, null, !dbg !3766
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3766

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3766
  %2 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3766
  %num = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %2, i32 0, i32 0, !dbg !3766
  %3 = load i32, i32* %num, align 8, !dbg !3766
  %cmp = icmp ult i32 %1, %3, !dbg !3766
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3768
  %land.ext = zext i1 %4 to i32, !dbg !3766
  %5 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3766
  %vec = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %5, i32 0, i32 2, !dbg !3766
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3766
  %idxprom = zext i32 %6 to i64, !dbg !3766
  %arrayidx = getelementptr inbounds [1 x %struct.VEC_gimple_heap*], [1 x %struct.VEC_gimple_heap*]* %vec, i64 0, i64 %idxprom, !dbg !3766
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %arrayidx, align 8, !dbg !3766
  ret %struct.VEC_gimple_heap* %7, !dbg !3766
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !3769 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !3773, metadata !DIExpression()), !dbg !3774
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3775
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !3775
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !3775
  br i1 %tobool, label %if.then, label %if.end, !dbg !3774

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3775
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !3775
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !3775
  call void @free(i8* %4), !dbg !3775
  br label %if.end, !dbg !3775

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !3774
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !3774
  ret void, !dbg !3774
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_vec_base_replace(%struct.VEC_gimple_vec_base* %vec_, i32 %ix_, %struct.VEC_gimple_heap* %obj_) #0 !dbg !3777 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.VEC_gimple_heap*, align 8
  %old_obj_ = alloca %struct.VEC_gimple_heap*, align 8
  store %struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_vec_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_base** %vec_.addr, metadata !3781, metadata !DIExpression()), !dbg !3782
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3783, metadata !DIExpression()), !dbg !3782
  store %struct.VEC_gimple_heap* %obj_, %struct.VEC_gimple_heap** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %obj_.addr, metadata !3784, metadata !DIExpression()), !dbg !3782
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %old_obj_, metadata !3785, metadata !DIExpression()), !dbg !3782
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3782
  %1 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3782
  %num = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %1, i32 0, i32 0, !dbg !3782
  %2 = load i32, i32* %num, align 8, !dbg !3782
  %cmp = icmp ult i32 %0, %2, !dbg !3782
  %conv = zext i1 %cmp to i32, !dbg !3782
  %3 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3782
  %vec = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %3, i32 0, i32 2, !dbg !3782
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3782
  %idxprom = zext i32 %4 to i64, !dbg !3782
  %arrayidx = getelementptr inbounds [1 x %struct.VEC_gimple_heap*], [1 x %struct.VEC_gimple_heap*]* %vec, i64 0, i64 %idxprom, !dbg !3782
  %5 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %arrayidx, align 8, !dbg !3782
  store %struct.VEC_gimple_heap* %5, %struct.VEC_gimple_heap** %old_obj_, align 8, !dbg !3782
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %obj_.addr, align 8, !dbg !3782
  %7 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !3782
  %vec1 = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %7, i32 0, i32 2, !dbg !3782
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3782
  %idxprom2 = zext i32 %8 to i64, !dbg !3782
  %arrayidx3 = getelementptr inbounds [1 x %struct.VEC_gimple_heap*], [1 x %struct.VEC_gimple_heap*]* %vec1, i64 0, i64 %idxprom2, !dbg !3782
  store %struct.VEC_gimple_heap* %6, %struct.VEC_gimple_heap** %arrayidx3, align 8, !dbg !3782
  %9 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %old_obj_, align 8, !dbg !3782
  ret %struct.VEC_gimple_heap* %9, !dbg !3782
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @create_new_def_for(%union.tree_node* %old_name, %union.gimple_statement_d* %stmt, %union.tree_node** %def) #0 !dbg !3786 {
entry:
  %old_name.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %def.addr = alloca %union.tree_node**, align 8
  %new_name = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !3789, metadata !DIExpression()), !dbg !3790
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3791, metadata !DIExpression()), !dbg !3792
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !3793, metadata !DIExpression()), !dbg !3794
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !3795, metadata !DIExpression()), !dbg !3796
  %0 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3797
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3798
  %call = call %union.tree_node* @duplicate_ssa_name(%union.tree_node* %0, %union.gimple_statement_d* %1), !dbg !3799
  store %union.tree_node* %call, %union.tree_node** %new_name, align 8, !dbg !3796
  %2 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3800
  %3 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !3800
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !dbg !3800
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3801
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !3803
  %cmp = icmp eq i32 %call1, 16, !dbg !3804
  br i1 %cmp, label %if.then, label %if.end7, !dbg !3805

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3806, metadata !DIExpression()), !dbg !3808
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3809, metadata !DIExpression()), !dbg !3810
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3811, metadata !DIExpression()), !dbg !3812
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3813
  %call2 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %5), !dbg !3814
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %bb, align 8, !dbg !3812
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3815
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 0, !dbg !3815
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !3815
  %7 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3815
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 0, !dbg !3815
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !3815
  store i32 %9, i32* %8, align 8, !dbg !3815
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 1, !dbg !3815
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !3815
  store %struct.VEC_edge_gc** %11, %struct.VEC_edge_gc*** %10, align 8, !dbg !3815
  %12 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3815
  %13 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !3815
  br label %for.cond, !dbg !3815

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3817
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !3817
  %16 = load i32, i32* %15, align 8, !dbg !3817
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !3817
  %18 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %17, align 8, !dbg !3817
  %call4 = call zeroext i8 @ei_cond(i32 %16, %struct.VEC_edge_gc** %18, %struct.edge_def** %e), !dbg !3817
  %tobool = icmp ne i8 %call4, 0, !dbg !3815
  br i1 %tobool, label %for.body, label %for.end, !dbg !3815

for.body:                                         ; preds = %for.cond
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3819
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 7, !dbg !3821
  %20 = load i32, i32* %flags, align 8, !dbg !3821
  %and = and i32 %20, 2, !dbg !3822
  %tobool5 = icmp ne i32 %and, 0, !dbg !3822
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !3823

if.then6:                                         ; preds = %for.body
  %21 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3824
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3824
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !3824
  %bf.load = load i64, i64* %22, align 8, !dbg !3826
  %bf.clear = and i64 %bf.load, -4194305, !dbg !3826
  %bf.set = or i64 %bf.clear, 4194304, !dbg !3826
  store i64 %bf.set, i64* %22, align 8, !dbg !3826
  br label %for.end, !dbg !3827

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3828

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3817
  br label %for.cond, !dbg !3817, !llvm.loop !3829

for.end:                                          ; preds = %if.then6, %for.cond
  br label %if.end7, !dbg !3831

if.end7:                                          ; preds = %for.end, %entry
  %23 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3832
  %24 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3833
  call void @register_new_name_mapping(%union.tree_node* %23, %union.tree_node* %24), !dbg !3834
  %25 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !3835
  %26 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3836
  call void @set_current_def(%union.tree_node* %25, %union.tree_node* %26), !dbg !3837
  %27 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !3838
  ret %union.tree_node* %27, !dbg !3839
}

declare dso_local %union.tree_node* @duplicate_ssa_name(%union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3840 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3846, metadata !DIExpression()), !dbg !3847
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3848
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3849
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3850
  %bf.load = load i32, i32* %1, align 8, !dbg !3850
  %bf.clear = and i32 %bf.load, 255, !dbg !3850
  ret i32 %bf.clear, !dbg !3851
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3852 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3855, metadata !DIExpression()), !dbg !3856
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3857
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3858
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3859
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3859
  ret %struct.basic_block_def* %1, !dbg !3860
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @register_new_name_mapping(%union.tree_node* %new_tree, %union.tree_node* %old) #0 !dbg !3861 {
entry:
  %new_tree.addr = alloca %union.tree_node*, align 8
  %old.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !3862, metadata !DIExpression()), !dbg !3863
  store %union.tree_node* %old, %union.tree_node** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old.addr, metadata !3864, metadata !DIExpression()), !dbg !3865
  %0 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3866
  %tobool = icmp ne %struct.function* %0, null, !dbg !3866
  br i1 %tobool, label %if.end, label %if.then, !dbg !3868

if.then:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3869
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3869
  call void @init_update_ssa(%struct.function* %add.ptr), !dbg !3870
  br label %if.end, !dbg !3870

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3871
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3871
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3871
  %cmp = icmp eq %struct.function* %2, %add.ptr1, !dbg !3871
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3871

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2881, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !3871
  br label %cond.end, !dbg !3871

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3871

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3871
  %4 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3872
  %5 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3873
  call void @add_new_name_mapping(%union.tree_node* %4, %union.tree_node* %5), !dbg !3874
  ret void, !dbg !3875
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_update_ssa(%struct.function* %fn) #0 !dbg !3876 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !3879, metadata !DIExpression()), !dbg !3880
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3881
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3881
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3881
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3881
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !3881
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3881
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !3881
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3881

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3881
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3881
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !3881
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3881
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !3881
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !3881
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !3881
  br label %cond.end, !dbg !3881

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3881

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3881
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3881
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3882
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3882
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !3882
  %7 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !3882
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %7, i32 0, i32 2, !dbg !3882
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !3882
  %tobool7 = icmp ne %struct.VEC_tree_gc* %8, null, !dbg !3882
  br i1 %tobool7, label %cond.true8, label %cond.false13, !dbg !3882

cond.true8:                                       ; preds = %cond.end
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3882
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3882
  %gimple_df10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 3, !dbg !3882
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df10, align 8, !dbg !3882
  %ssa_names11 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !3882
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names11, align 8, !dbg !3882
  %base12 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i32 0, i32 0, !dbg !3882
  br label %cond.end14, !dbg !3882

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !3882

cond.end14:                                       ; preds = %cond.false13, %cond.true8
  %cond15 = phi %struct.VEC_tree_base* [ %base12, %cond.true8 ], [ null, %cond.false13 ], !dbg !3882
  %call16 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond15), !dbg !3882
  %div = udiv i32 %call16, 3, !dbg !3882
  %cmp = icmp ugt i32 3, %div, !dbg !3882
  br i1 %cmp, label %cond.true17, label %cond.false18, !dbg !3882

cond.true17:                                      ; preds = %cond.end14
  br label %cond.end33, !dbg !3882

cond.false18:                                     ; preds = %cond.end14
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3882
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3882
  %gimple_df20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 3, !dbg !3882
  %13 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df20, align 8, !dbg !3882
  %ssa_names21 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %13, i32 0, i32 2, !dbg !3882
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names21, align 8, !dbg !3882
  %tobool22 = icmp ne %struct.VEC_tree_gc* %14, null, !dbg !3882
  br i1 %tobool22, label %cond.true23, label %cond.false28, !dbg !3882

cond.true23:                                      ; preds = %cond.false18
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3882
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3882
  %gimple_df25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 3, !dbg !3882
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df25, align 8, !dbg !3882
  %ssa_names26 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !3882
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names26, align 8, !dbg !3882
  %base27 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %17, i32 0, i32 0, !dbg !3882
  br label %cond.end29, !dbg !3882

cond.false28:                                     ; preds = %cond.false18
  br label %cond.end29, !dbg !3882

cond.end29:                                       ; preds = %cond.false28, %cond.true23
  %cond30 = phi %struct.VEC_tree_base* [ %base27, %cond.true23 ], [ null, %cond.false28 ], !dbg !3882
  %call31 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond30), !dbg !3882
  %div32 = udiv i32 %call31, 3, !dbg !3882
  br label %cond.end33, !dbg !3882

cond.end33:                                       ; preds = %cond.end29, %cond.true17
  %cond34 = phi i32 [ 3, %cond.true17 ], [ %div32, %cond.end29 ], !dbg !3882
  %add = add i32 %call, %cond34, !dbg !3883
  %call35 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !3884
  store %struct.simple_bitmap_def* %call35, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3885
  %18 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3886
  call void @sbitmap_zero(%struct.simple_bitmap_def* %18), !dbg !3887
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3888
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !3888
  %gimple_df37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 3, !dbg !3888
  %20 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df37, align 8, !dbg !3888
  %ssa_names38 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %20, i32 0, i32 2, !dbg !3888
  %21 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names38, align 8, !dbg !3888
  %tobool39 = icmp ne %struct.VEC_tree_gc* %21, null, !dbg !3888
  br i1 %tobool39, label %cond.true40, label %cond.false45, !dbg !3888

cond.true40:                                      ; preds = %cond.end33
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3888
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !3888
  %gimple_df42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 3, !dbg !3888
  %23 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df42, align 8, !dbg !3888
  %ssa_names43 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %23, i32 0, i32 2, !dbg !3888
  %24 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names43, align 8, !dbg !3888
  %base44 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %24, i32 0, i32 0, !dbg !3888
  br label %cond.end46, !dbg !3888

cond.false45:                                     ; preds = %cond.end33
  br label %cond.end46, !dbg !3888

cond.end46:                                       ; preds = %cond.false45, %cond.true40
  %cond47 = phi %struct.VEC_tree_base* [ %base44, %cond.true40 ], [ null, %cond.false45 ], !dbg !3888
  %call48 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond47), !dbg !3888
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !3889
  %gimple_df50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 3, !dbg !3889
  %26 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df50, align 8, !dbg !3889
  %ssa_names51 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %26, i32 0, i32 2, !dbg !3889
  %27 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names51, align 8, !dbg !3889
  %tobool52 = icmp ne %struct.VEC_tree_gc* %27, null, !dbg !3889
  br i1 %tobool52, label %cond.true53, label %cond.false58, !dbg !3889

cond.true53:                                      ; preds = %cond.end46
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !3889
  %gimple_df55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 3, !dbg !3889
  %29 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df55, align 8, !dbg !3889
  %ssa_names56 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %29, i32 0, i32 2, !dbg !3889
  %30 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names56, align 8, !dbg !3889
  %base57 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %30, i32 0, i32 0, !dbg !3889
  br label %cond.end59, !dbg !3889

cond.false58:                                     ; preds = %cond.end46
  br label %cond.end59, !dbg !3889

cond.end59:                                       ; preds = %cond.false58, %cond.true53
  %cond60 = phi %struct.VEC_tree_base* [ %base57, %cond.true53 ], [ null, %cond.false58 ], !dbg !3889
  %call61 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond60), !dbg !3889
  %div62 = udiv i32 %call61, 3, !dbg !3889
  %cmp63 = icmp ugt i32 3, %div62, !dbg !3889
  br i1 %cmp63, label %cond.true64, label %cond.false65, !dbg !3889

cond.true64:                                      ; preds = %cond.end59
  br label %cond.end80, !dbg !3889

cond.false65:                                     ; preds = %cond.end59
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr66 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !3889
  %gimple_df67 = getelementptr inbounds %struct.function, %struct.function* %add.ptr66, i32 0, i32 3, !dbg !3889
  %32 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df67, align 8, !dbg !3889
  %ssa_names68 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %32, i32 0, i32 2, !dbg !3889
  %33 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names68, align 8, !dbg !3889
  %tobool69 = icmp ne %struct.VEC_tree_gc* %33, null, !dbg !3889
  br i1 %tobool69, label %cond.true70, label %cond.false75, !dbg !3889

cond.true70:                                      ; preds = %cond.false65
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr71 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !3889
  %gimple_df72 = getelementptr inbounds %struct.function, %struct.function* %add.ptr71, i32 0, i32 3, !dbg !3889
  %35 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df72, align 8, !dbg !3889
  %ssa_names73 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %35, i32 0, i32 2, !dbg !3889
  %36 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names73, align 8, !dbg !3889
  %base74 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %36, i32 0, i32 0, !dbg !3889
  br label %cond.end76, !dbg !3889

cond.false75:                                     ; preds = %cond.false65
  br label %cond.end76, !dbg !3889

cond.end76:                                       ; preds = %cond.false75, %cond.true70
  %cond77 = phi %struct.VEC_tree_base* [ %base74, %cond.true70 ], [ null, %cond.false75 ], !dbg !3889
  %call78 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond77), !dbg !3889
  %div79 = udiv i32 %call78, 3, !dbg !3889
  br label %cond.end80, !dbg !3889

cond.end80:                                       ; preds = %cond.end76, %cond.true64
  %cond81 = phi i32 [ 3, %cond.true64 ], [ %div79, %cond.end76 ], !dbg !3889
  %add82 = add i32 %call48, %cond81, !dbg !3890
  %call83 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add82), !dbg !3891
  store %struct.simple_bitmap_def* %call83, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3892
  %37 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3893
  call void @sbitmap_zero(%struct.simple_bitmap_def* %37), !dbg !3894
  %call84 = call %struct.htab* @htab_create(i64 20, i32 (i8*)* @repl_map_hash, i32 (i8*, i8*)* @repl_map_eq, void (i8*)* @repl_map_free), !dbg !3895
  store %struct.htab* %call84, %struct.htab** @repl_tbl, align 8, !dbg !3896
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !3897
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.update_ssa_stats_d* @update_ssa_stats to i8*), i8 0, i64 24, i1 false), !dbg !3898
  %call85 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3899
  store %struct.bitmap_head_def* %call85, %struct.bitmap_head_def** getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 2), align 8, !dbg !3900
  %38 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !3901
  store %struct.function* %38, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !3902
  ret void, !dbg !3903
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_new_name_mapping(%union.tree_node* %new_tree, %union.tree_node* %old) #0 !dbg !3904 {
entry:
  %new_tree.addr = alloca %union.tree_node*, align 8
  %old.addr = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  %new_sz = alloca i32, align 4
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !3905, metadata !DIExpression()), !dbg !3906
  store %union.tree_node* %old, %union.tree_node** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old.addr, metadata !3907, metadata !DIExpression()), !dbg !3908
  br label %do.body, !dbg !3909

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !3910
  %tobool = icmp ne i8 %0, 0, !dbg !3910
  br i1 %tobool, label %if.then, label %if.end, !dbg !3913

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 60), !dbg !3910
  br label %if.end, !dbg !3910

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !3913

do.end:                                           ; preds = %if.end
  %1 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3914
  %2 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3914
  %cmp = icmp ne %union.tree_node* %1, %2, !dbg !3914
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3914

land.lhs.true:                                    ; preds = %do.end
  %3 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3914
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !3914
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3914
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3914
  %5 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3914
  %ssa_name1 = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !3914
  %var2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 1, !dbg !3914
  %6 = load %union.tree_node*, %union.tree_node** %var2, align 8, !dbg !3914
  %cmp3 = icmp eq %union.tree_node* %4, %6, !dbg !3914
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !3914

cond.true:                                        ; preds = %land.lhs.true, %do.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 672, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !3914
  br label %cond.end, !dbg !3914

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3914

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3914
  %7 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3915
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %7), !dbg !3917
  %tobool4 = icmp ne i8 %call, 0, !dbg !3917
  br i1 %tobool4, label %if.end10, label %if.then5, !dbg !3918

if.then5:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !3919, metadata !DIExpression()), !dbg !3921
  %8 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !3922
  %inc = add i32 %8, 1, !dbg !3922
  store i32 %inc, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !3922
  %9 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 3), align 8, !dbg !3923
  %inc6 = add i32 %9, 1, !dbg !3923
  store i32 %inc6, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 3), align 8, !dbg !3923
  %10 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3924
  %ssa_name7 = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !3924
  %var8 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name7, i32 0, i32 1, !dbg !3924
  %11 = load %union.tree_node*, %union.tree_node** %var8, align 8, !dbg !3924
  store %union.tree_node* %11, %union.tree_node** %sym, align 8, !dbg !3925
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 2), align 8, !dbg !3926
  %13 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !3927
  %decl_minimal = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !3927
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3927
  %14 = load i32, i32* %uid, align 4, !dbg !3927
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %14), !dbg !3928
  br label %if.end10, !dbg !3929

if.end10:                                         ; preds = %if.then5, %cond.end
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3930
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %15, i32 0, i32 1, !dbg !3932
  %16 = load i32, i32* %n_bits, align 8, !dbg !3932
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3933
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !3933
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3933
  %18 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3933
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %18, i32 0, i32 2, !dbg !3933
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3933
  %tobool11 = icmp ne %struct.VEC_tree_gc* %19, null, !dbg !3933
  br i1 %tobool11, label %cond.true12, label %cond.false16, !dbg !3933

cond.true12:                                      ; preds = %if.end10
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3933
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3933
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 3, !dbg !3933
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !3933
  %ssa_names15 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !3933
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names15, align 8, !dbg !3933
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %22, i32 0, i32 0, !dbg !3933
  br label %cond.end17, !dbg !3933

cond.false16:                                     ; preds = %if.end10
  br label %cond.end17, !dbg !3933

cond.end17:                                       ; preds = %cond.false16, %cond.true12
  %cond18 = phi %struct.VEC_tree_base* [ %base, %cond.true12 ], [ null, %cond.false16 ], !dbg !3933
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond18), !dbg !3933
  %sub = sub i32 %call19, 1, !dbg !3934
  %cmp20 = icmp ule i32 %16, %sub, !dbg !3935
  br i1 %cmp20, label %if.then21, label %if.end69, !dbg !3936

if.then21:                                        ; preds = %cond.end17
  call void @llvm.dbg.declare(metadata i32* %new_sz, metadata !3937, metadata !DIExpression()), !dbg !3939
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3940
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !3940
  %gimple_df23 = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 3, !dbg !3940
  %24 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df23, align 8, !dbg !3940
  %ssa_names24 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %24, i32 0, i32 2, !dbg !3940
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names24, align 8, !dbg !3940
  %tobool25 = icmp ne %struct.VEC_tree_gc* %25, null, !dbg !3940
  br i1 %tobool25, label %cond.true26, label %cond.false31, !dbg !3940

cond.true26:                                      ; preds = %if.then21
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3940
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !3940
  %gimple_df28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 3, !dbg !3940
  %27 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df28, align 8, !dbg !3940
  %ssa_names29 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %27, i32 0, i32 2, !dbg !3940
  %28 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names29, align 8, !dbg !3940
  %base30 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %28, i32 0, i32 0, !dbg !3940
  br label %cond.end32, !dbg !3940

cond.false31:                                     ; preds = %if.then21
  br label %cond.end32, !dbg !3940

cond.end32:                                       ; preds = %cond.false31, %cond.true26
  %cond33 = phi %struct.VEC_tree_base* [ %base30, %cond.true26 ], [ null, %cond.false31 ], !dbg !3940
  %call34 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond33), !dbg !3940
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3941
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !3941
  %gimple_df36 = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 3, !dbg !3941
  %30 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df36, align 8, !dbg !3941
  %ssa_names37 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %30, i32 0, i32 2, !dbg !3941
  %31 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names37, align 8, !dbg !3941
  %tobool38 = icmp ne %struct.VEC_tree_gc* %31, null, !dbg !3941
  br i1 %tobool38, label %cond.true39, label %cond.false44, !dbg !3941

cond.true39:                                      ; preds = %cond.end32
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3941
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !3941
  %gimple_df41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 3, !dbg !3941
  %33 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df41, align 8, !dbg !3941
  %ssa_names42 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %33, i32 0, i32 2, !dbg !3941
  %34 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names42, align 8, !dbg !3941
  %base43 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %34, i32 0, i32 0, !dbg !3941
  br label %cond.end45, !dbg !3941

cond.false44:                                     ; preds = %cond.end32
  br label %cond.end45, !dbg !3941

cond.end45:                                       ; preds = %cond.false44, %cond.true39
  %cond46 = phi %struct.VEC_tree_base* [ %base43, %cond.true39 ], [ null, %cond.false44 ], !dbg !3941
  %call47 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond46), !dbg !3941
  %div = udiv i32 %call47, 3, !dbg !3941
  %cmp48 = icmp ugt i32 3, %div, !dbg !3941
  br i1 %cmp48, label %cond.true49, label %cond.false50, !dbg !3941

cond.true49:                                      ; preds = %cond.end45
  br label %cond.end65, !dbg !3941

cond.false50:                                     ; preds = %cond.end45
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3941
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !3941
  %gimple_df52 = getelementptr inbounds %struct.function, %struct.function* %add.ptr51, i32 0, i32 3, !dbg !3941
  %36 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df52, align 8, !dbg !3941
  %ssa_names53 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %36, i32 0, i32 2, !dbg !3941
  %37 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names53, align 8, !dbg !3941
  %tobool54 = icmp ne %struct.VEC_tree_gc* %37, null, !dbg !3941
  br i1 %tobool54, label %cond.true55, label %cond.false60, !dbg !3941

cond.true55:                                      ; preds = %cond.false50
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3941
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !3941
  %gimple_df57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 3, !dbg !3941
  %39 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df57, align 8, !dbg !3941
  %ssa_names58 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %39, i32 0, i32 2, !dbg !3941
  %40 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names58, align 8, !dbg !3941
  %base59 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %40, i32 0, i32 0, !dbg !3941
  br label %cond.end61, !dbg !3941

cond.false60:                                     ; preds = %cond.false50
  br label %cond.end61, !dbg !3941

cond.end61:                                       ; preds = %cond.false60, %cond.true55
  %cond62 = phi %struct.VEC_tree_base* [ %base59, %cond.true55 ], [ null, %cond.false60 ], !dbg !3941
  %call63 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond62), !dbg !3941
  %div64 = udiv i32 %call63, 3, !dbg !3941
  br label %cond.end65, !dbg !3941

cond.end65:                                       ; preds = %cond.end61, %cond.true49
  %cond66 = phi i32 [ 3, %cond.true49 ], [ %div64, %cond.end61 ], !dbg !3941
  %add = add i32 %call34, %cond66, !dbg !3942
  store i32 %add, i32* %new_sz, align 4, !dbg !3939
  %41 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3943
  %42 = load i32, i32* %new_sz, align 4, !dbg !3944
  %call67 = call %struct.simple_bitmap_def* @sbitmap_resize(%struct.simple_bitmap_def* %41, i32 %42, i32 0), !dbg !3945
  store %struct.simple_bitmap_def* %call67, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3946
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3947
  %44 = load i32, i32* %new_sz, align 4, !dbg !3948
  %call68 = call %struct.simple_bitmap_def* @sbitmap_resize(%struct.simple_bitmap_def* %43, i32 %44, i32 0), !dbg !3949
  store %struct.simple_bitmap_def* %call68, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3950
  br label %if.end69, !dbg !3951

if.end69:                                         ; preds = %cond.end65, %cond.end17
  %45 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3952
  %46 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3953
  call void @add_to_repl_tbl(%union.tree_node* %45, %union.tree_node* %46), !dbg !3954
  %47 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3955
  %call70 = call zeroext i8 @is_new_name(%union.tree_node* %47), !dbg !3957
  %tobool71 = icmp ne i8 %call70, 0, !dbg !3957
  br i1 %tobool71, label %if.then72, label %if.end76, !dbg !3958

if.then72:                                        ; preds = %if.end69
  %48 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3959
  %call73 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %48), !dbg !3960
  %49 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3961
  %call74 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %49), !dbg !3962
  %call75 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %call73, %struct.bitmap_head_def* %call74), !dbg !3963
  br label %if.end76, !dbg !3963

if.end76:                                         ; preds = %if.then72, %if.end69
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !3964
  %51 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !3965
  %ssa_name77 = bitcast %union.tree_node* %51 to %struct.tree_ssa_name*, !dbg !3965
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name77, i32 0, i32 3, !dbg !3965
  %52 = load i32, i32* %version, align 8, !dbg !3965
  call void @SET_BIT(%struct.simple_bitmap_def* %50, i32 %52), !dbg !3966
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !3967
  %54 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !3968
  %ssa_name78 = bitcast %union.tree_node* %54 to %struct.tree_ssa_name*, !dbg !3968
  %version79 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name78, i32 0, i32 3, !dbg !3968
  %55 = load i32, i32* %version79, align 8, !dbg !3968
  call void @SET_BIT(%struct.simple_bitmap_def* %53, i32 %55), !dbg !3969
  %56 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 1), align 4, !dbg !3970
  %inc80 = add i32 %56, 1, !dbg !3970
  store i32 %inc80, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 1), align 4, !dbg !3970
  br label %do.body81, !dbg !3971

do.body81:                                        ; preds = %if.end76
  %57 = load i8, i8* @timevar_enable, align 1, !dbg !3972
  %tobool82 = icmp ne i8 %57, 0, !dbg !3972
  br i1 %tobool82, label %if.then83, label %if.end84, !dbg !3975

if.then83:                                        ; preds = %do.body81
  call void @timevar_pop_1(i32 60), !dbg !3972
  br label %if.end84, !dbg !3972

if.end84:                                         ; preds = %if.then83, %do.body81
  br label %do.end85, !dbg !3975

do.end85:                                         ; preds = %if.end84
  ret void, !dbg !3976
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_sym_for_renaming(%union.tree_node* %sym) #0 !dbg !3977 {
entry:
  %sym.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !3978, metadata !DIExpression()), !dbg !3979
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3980
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3980
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3980
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3980
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 9, !dbg !3980
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !3980
  %3 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !3981
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !3981
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3981
  %4 = load i32, i32* %uid, align 4, !dbg !3981
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %2, i32 %4), !dbg !3982
  ret void, !dbg !3983
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_set_for_renaming(%struct.bitmap_head_def* %set) #0 !dbg !3984 {
entry:
  %set.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  store %struct.bitmap_head_def* %set, %struct.bitmap_head_def** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set.addr, metadata !3985, metadata !DIExpression()), !dbg !3986
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3987, metadata !DIExpression()), !dbg !3988
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3989, metadata !DIExpression()), !dbg !3990
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !3991
  %cmp = icmp eq %struct.bitmap_head_def* %0, null, !dbg !3993
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3994

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !3995
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !3995
  %2 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3995
  %tobool = icmp ne %struct.bitmap_element_def* %2, null, !dbg !3995
  br i1 %tobool, label %if.end, label %if.then, !dbg !3996

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end, !dbg !3997

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set.addr, align 8, !dbg !3998
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !3998
  br label %for.cond, !dbg !3998

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4000
  %tobool1 = icmp ne i8 %call, 0, !dbg !3998
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3998

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !4002
  %call2 = call %union.tree_node* @referenced_var_lookup(i32 %4), !dbg !4002
  call void @mark_sym_for_renaming(%union.tree_node* %call2), !dbg !4003
  br label %for.inc, !dbg !4003

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4000
  br label %for.cond, !dbg !4000, !llvm.loop !4004

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !4006
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @name_mappings_registered_p() #0 !dbg !4007 {
entry:
  %retval = alloca i8, align 1
  %0 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4008
  %tobool = icmp ne %struct.function* %0, null, !dbg !4008
  br i1 %tobool, label %if.end, label %if.then, !dbg !4010

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4011
  br label %return, !dbg !4011

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4012
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4012
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4012
  %cmp = icmp eq %struct.function* %1, %add.ptr, !dbg !4012
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4012

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2932, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4012
  br label %cond.end, !dbg !4012

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4012

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4012
  %3 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !4013
  %tobool1 = icmp ne %struct.htab* %3, null, !dbg !4013
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4014

land.rhs:                                         ; preds = %cond.end
  %4 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !4015
  %call = call i64 @htab_elements(%struct.htab* %4), !dbg !4016
  %cmp2 = icmp ugt i64 %call, 0, !dbg !4017
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %5 = phi i1 [ false, %cond.end ], [ %cmp2, %land.rhs ], !dbg !4018
  %land.ext = zext i1 %5 to i32, !dbg !4014
  %conv = trunc i32 %land.ext to i8, !dbg !4013
  store i8 %conv, i8* %retval, align 1, !dbg !4019
  br label %return, !dbg !4019

return:                                           ; preds = %land.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4020
  ret i8 %6, !dbg !4020
}

declare dso_local i64 @htab_elements(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @name_registered_for_update_p(%union.tree_node* %n) #0 !dbg !4021 {
entry:
  %retval = alloca i8, align 1
  %n.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %n, %union.tree_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %n.addr, metadata !4024, metadata !DIExpression()), !dbg !4025
  %0 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4026
  %tobool = icmp ne %struct.function* %0, null, !dbg !4026
  br i1 %tobool, label %if.end, label %if.then, !dbg !4028

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4029
  br label %return, !dbg !4029

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4030
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4030
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4030
  %cmp = icmp eq %struct.function* %1, %add.ptr, !dbg !4030
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4030

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4030
  br label %cond.end, !dbg !4030

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4030

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4030
  %3 = load %union.tree_node*, %union.tree_node** %n.addr, align 8, !dbg !4031
  %call = call zeroext i8 @is_new_name(%union.tree_node* %3), !dbg !4032
  %conv = zext i8 %call to i32, !dbg !4032
  %tobool1 = icmp ne i32 %conv, 0, !dbg !4032
  br i1 %tobool1, label %lor.end, label %lor.rhs, !dbg !4033

lor.rhs:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %n.addr, align 8, !dbg !4034
  %call2 = call zeroext i8 @is_old_name(%union.tree_node* %4), !dbg !4035
  %conv3 = zext i8 %call2 to i32, !dbg !4035
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !4033
  br label %lor.end, !dbg !4033

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %5 = phi i1 [ true, %cond.end ], [ %tobool4, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32, !dbg !4033
  %conv5 = trunc i32 %lor.ext to i8, !dbg !4032
  store i8 %conv5, i8* %retval, align 1, !dbg !4036
  br label %return, !dbg !4036

return:                                           ; preds = %lor.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4037
  ret i8 %6, !dbg !4037
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_new_name(%union.tree_node* %name) #0 !dbg !4038 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !4039, metadata !DIExpression()), !dbg !4040
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !4041, metadata !DIExpression()), !dbg !4042
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !4043
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !4043
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4043
  %1 = load i32, i32* %version, align 8, !dbg !4043
  store i32 %1, i32* %ver, align 4, !dbg !4042
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4044
  %tobool = icmp ne %struct.simple_bitmap_def* %2, null, !dbg !4044
  br i1 %tobool, label %if.end, label %if.then, !dbg !4046

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4047
  br label %return, !dbg !4047

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %ver, align 4, !dbg !4048
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4049
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 1, !dbg !4050
  %5 = load i32, i32* %n_bits, align 8, !dbg !4050
  %cmp = icmp ult i32 %3, %5, !dbg !4051
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4052

land.rhs:                                         ; preds = %if.end
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4053
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %6, i32 0, i32 3, !dbg !4053
  %7 = load i32, i32* %ver, align 4, !dbg !4053
  %div = udiv i32 %7, 64, !dbg !4053
  %idxprom = zext i32 %div to i64, !dbg !4053
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4053
  %8 = load i64, i64* %arrayidx, align 8, !dbg !4053
  %9 = load i32, i32* %ver, align 4, !dbg !4053
  %rem = urem i32 %9, 64, !dbg !4053
  %sh_prom = zext i32 %rem to i64, !dbg !4053
  %shr = lshr i64 %8, %sh_prom, !dbg !4053
  %and = and i64 %shr, 1, !dbg !4053
  %tobool1 = icmp ne i64 %and, 0, !dbg !4052
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %10 = phi i1 [ false, %if.end ], [ %tobool1, %land.rhs ], !dbg !4054
  %land.ext = zext i1 %10 to i32, !dbg !4052
  %conv = trunc i32 %land.ext to i8, !dbg !4048
  store i8 %conv, i8* %retval, align 1, !dbg !4055
  br label %return, !dbg !4055

return:                                           ; preds = %land.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !4056
  ret i8 %11, !dbg !4056
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_old_name(%union.tree_node* %name) #0 !dbg !4057 {
entry:
  %retval = alloca i8, align 1
  %name.addr = alloca %union.tree_node*, align 8
  %ver = alloca i32, align 4
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !4058, metadata !DIExpression()), !dbg !4059
  call void @llvm.dbg.declare(metadata i32* %ver, metadata !4060, metadata !DIExpression()), !dbg !4061
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !4062
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !4062
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4062
  %1 = load i32, i32* %version, align 8, !dbg !4062
  store i32 %1, i32* %ver, align 4, !dbg !4061
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4063
  %tobool = icmp ne %struct.simple_bitmap_def* %2, null, !dbg !4063
  br i1 %tobool, label %if.end, label %if.then, !dbg !4065

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4066
  br label %return, !dbg !4066

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %ver, align 4, !dbg !4067
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4068
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %4, i32 0, i32 1, !dbg !4069
  %5 = load i32, i32* %n_bits, align 8, !dbg !4069
  %cmp = icmp ult i32 %3, %5, !dbg !4070
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4071

land.rhs:                                         ; preds = %if.end
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4072
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %6, i32 0, i32 3, !dbg !4072
  %7 = load i32, i32* %ver, align 4, !dbg !4072
  %div = udiv i32 %7, 64, !dbg !4072
  %idxprom = zext i32 %div to i64, !dbg !4072
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4072
  %8 = load i64, i64* %arrayidx, align 8, !dbg !4072
  %9 = load i32, i32* %ver, align 4, !dbg !4072
  %rem = urem i32 %9, 64, !dbg !4072
  %sh_prom = zext i32 %rem to i64, !dbg !4072
  %shr = lshr i64 %8, %sh_prom, !dbg !4072
  %and = and i64 %shr, 1, !dbg !4072
  %tobool1 = icmp ne i64 %and, 0, !dbg !4071
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %10 = phi i1 [ false, %if.end ], [ %tobool1, %land.rhs ], !dbg !4073
  %land.ext = zext i1 %10 to i32, !dbg !4071
  %conv = trunc i32 %land.ext to i8, !dbg !4067
  store i8 %conv, i8* %retval, align 1, !dbg !4074
  br label %return, !dbg !4074

return:                                           ; preds = %land.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !4075
  ret i8 %11, !dbg !4075
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.bitmap_head_def* @ssa_names_to_replace() #0 !dbg !4076 {
entry:
  %i = alloca i32, align 4
  %ret = alloca %struct.bitmap_head_def*, align 8
  %sbi = alloca %struct.sbitmap_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4079, metadata !DIExpression()), !dbg !4080
  store i32 0, i32* %i, align 4, !dbg !4080
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %ret, metadata !4081, metadata !DIExpression()), !dbg !4082
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !4083, metadata !DIExpression()), !dbg !4084
  %0 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4085
  %cmp = icmp eq %struct.function* %0, null, !dbg !4085
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !4085

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4085
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4085
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4085
  %cmp1 = icmp eq %struct.function* %1, %add.ptr, !dbg !4085
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !4085

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2961, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4085
  br label %cond.end, !dbg !4085

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !4085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4085
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4086
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %ret, align 8, !dbg !4087
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4088
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %3, i32 0), !dbg !4088
  br label %for.cond, !dbg !4088

for.cond:                                         ; preds = %for.inc, %cond.end
  %call2 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4090
  %tobool = icmp ne i8 %call2, 0, !dbg !4088
  br i1 %tobool, label %for.body, label %for.end, !dbg !4088

for.body:                                         ; preds = %for.cond
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ret, align 8, !dbg !4092
  %5 = load i32, i32* %i, align 4, !dbg !4093
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %5), !dbg !4094
  br label %for.inc, !dbg !4094

for.inc:                                          ; preds = %for.body
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4090
  br label %for.cond, !dbg !4090, !llvm.loop !4095

for.end:                                          ; preds = %for.cond
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ret, align 8, !dbg !4097
  ret %struct.bitmap_head_def* %6, !dbg !4098
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @release_ssa_name_after_update_ssa(%union.tree_node* %name) #0 !dbg !4099 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !4100, metadata !DIExpression()), !dbg !4101
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4102
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4102
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !4102
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !4102

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4102
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4102
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4102
  %cmp = icmp eq %struct.function* %1, %add.ptr1, !dbg !4102
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4102

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2976, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4102
  br label %cond.end, !dbg !4102

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4102
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4103
  %cmp2 = icmp eq %struct.bitmap_head_def* %3, null, !dbg !4105
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4106

if.then:                                          ; preds = %cond.end
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4107
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4108
  br label %if.end, !dbg !4109

if.end:                                           ; preds = %if.then, %cond.end
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4110
  %5 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !4111
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !4111
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4111
  %6 = load i32, i32* %version, align 8, !dbg !4111
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %6), !dbg !4112
  ret void, !dbg !4113
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @update_ssa(i32 %update_flags) #0 !dbg !4114 {
entry:
  %update_flags.addr = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %start_bb = alloca %struct.basic_block_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %insert_phi_p = alloca i8, align 1
  %sbi = alloca %struct.sbitmap_iterator, align 8
  %dfs = alloca %struct.bitmap_head_def**, align 8
  %sbi98 = alloca %struct.sbitmap_iterator, align 8
  %tmp = alloca %struct.simple_bitmap_def*, align 8
  %c = alloca i32, align 4
  %i201 = alloca i32, align 4
  store i32 %update_flags, i32* %update_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %update_flags.addr, metadata !4117, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4119, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %start_bb, metadata !4121, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4123, metadata !DIExpression()), !dbg !4124
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4125, metadata !DIExpression()), !dbg !4126
  store i32 0, i32* %i, align 4, !dbg !4126
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p, metadata !4127, metadata !DIExpression()), !dbg !4128
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !4129, metadata !DIExpression()), !dbg !4130
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4131
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4131
  %call = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !4133
  %tobool = icmp ne i8 %call, 0, !dbg !4133
  br i1 %tobool, label %if.end, label %if.then, !dbg !4134

if.then:                                          ; preds = %entry
  br label %do.end241, !dbg !4135

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !4136

do.body:                                          ; preds = %if.end
  %1 = load i8, i8* @timevar_enable, align 1, !dbg !4137
  %tobool1 = icmp ne i8 %1, 0, !dbg !4137
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4140

if.then2:                                         ; preds = %do.body
  call void @timevar_push_1(i32 60), !dbg !4137
  br label %if.end3, !dbg !4137

if.end3:                                          ; preds = %if.then2, %do.body
  br label %do.end, !dbg !4140

do.end:                                           ; preds = %if.end3
  %2 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4141
  %tobool4 = icmp ne %struct.function* %2, null, !dbg !4141
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !4143

if.then5:                                         ; preds = %do.end
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4144
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4144
  call void @init_update_ssa(%struct.function* %add.ptr6), !dbg !4145
  br label %if.end7, !dbg !4145

if.end7:                                          ; preds = %if.then5, %do.end
  %4 = load %struct.function*, %struct.function** @update_ssa_initialized_fn, align 8, !dbg !4146
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4146
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4146
  %cmp = icmp eq %struct.function* %4, %add.ptr8, !dbg !4146
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4146

cond.true:                                        ; preds = %if.end7
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 3242, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4146
  br label %cond.end, !dbg !4146

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !4146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4146
  %call9 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4147
  store %struct.bitmap_head_def* %call9, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !4148
  %6 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !4149
  %tobool10 = icmp ne %struct.VEC_gimple_vec_heap* %6, null, !dbg !4149
  br i1 %tobool10, label %if.end14, label %if.then11, !dbg !4151

if.then11:                                        ; preds = %cond.end
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4152
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4152
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !4152
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4152
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !4152
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !4152
  %call13 = call %struct.VEC_gimple_vec_heap* @VEC_gimple_vec_heap_alloc(i32 %9), !dbg !4152
  store %struct.VEC_gimple_vec_heap* %call13, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !4153
  br label %if.end14, !dbg !4154

if.end14:                                         ; preds = %if.then11, %cond.end
  %call15 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4155
  store %struct.bitmap_head_def* %call15, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4156
  call void @calculate_dominance_info(i32 1), !dbg !4157
  %10 = load i32, i32* %update_flags.addr, align 4, !dbg !4158
  %cmp16 = icmp eq i32 %10, 2048, !dbg !4158
  br i1 %cmp16, label %cond.false23, label %lor.lhs.false, !dbg !4158

lor.lhs.false:                                    ; preds = %if.end14
  %11 = load i32, i32* %update_flags.addr, align 4, !dbg !4158
  %cmp17 = icmp eq i32 %11, 4096, !dbg !4158
  br i1 %cmp17, label %cond.false23, label %lor.lhs.false18, !dbg !4158

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %12 = load i32, i32* %update_flags.addr, align 4, !dbg !4158
  %cmp19 = icmp eq i32 %12, 8192, !dbg !4158
  br i1 %cmp19, label %cond.false23, label %lor.lhs.false20, !dbg !4158

lor.lhs.false20:                                  ; preds = %lor.lhs.false18
  %13 = load i32, i32* %update_flags.addr, align 4, !dbg !4158
  %cmp21 = icmp eq i32 %13, 16384, !dbg !4158
  br i1 %cmp21, label %cond.false23, label %cond.true22, !dbg !4158

cond.true22:                                      ; preds = %lor.lhs.false20
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 3256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4158
  br label %cond.end24, !dbg !4158

cond.false23:                                     ; preds = %lor.lhs.false20, %lor.lhs.false18, %lor.lhs.false, %if.end14
  br label %cond.end24, !dbg !4158

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !4158
  %14 = load i32, i32* %update_flags.addr, align 4, !dbg !4159
  %cmp26 = icmp eq i32 %14, 16384, !dbg !4161
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !4162

if.then27:                                        ; preds = %cond.end24
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4163
  call void @sbitmap_zero(%struct.simple_bitmap_def* %15), !dbg !4165
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4166
  call void @sbitmap_zero(%struct.simple_bitmap_def* %16), !dbg !4167
  %17 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !4168
  call void @htab_empty(%struct.htab* %17), !dbg !4169
  br label %if.end28, !dbg !4170

if.end28:                                         ; preds = %if.then27, %cond.end24
  %18 = load i32, i32* %update_flags.addr, align 4, !dbg !4171
  %cmp29 = icmp ne i32 %18, 4096, !dbg !4172
  %conv = zext i1 %cmp29 to i32, !dbg !4172
  %conv30 = trunc i32 %conv to i8, !dbg !4173
  store i8 %conv30, i8* %insert_phi_p, align 1, !dbg !4174
  %19 = load i8, i8* %insert_phi_p, align 1, !dbg !4175
  %tobool31 = icmp ne i8 %19, 0, !dbg !4175
  br i1 %tobool31, label %if.then32, label %if.else, !dbg !4177

if.then32:                                        ; preds = %if.end28
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4178
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !4178
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr33, i32 0, i32 3, !dbg !4178
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4178
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !4178
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4178
  %tobool34 = icmp ne %struct.VEC_tree_gc* %22, null, !dbg !4178
  br i1 %tobool34, label %cond.true35, label %cond.false39, !dbg !4178

cond.true35:                                      ; preds = %if.then32
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4178
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !4178
  %gimple_df37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 3, !dbg !4178
  %24 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df37, align 8, !dbg !4178
  %ssa_names38 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %24, i32 0, i32 2, !dbg !4178
  %25 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names38, align 8, !dbg !4178
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %25, i32 0, i32 0, !dbg !4178
  br label %cond.end40, !dbg !4178

cond.false39:                                     ; preds = %if.then32
  br label %cond.end40, !dbg !4178

cond.end40:                                       ; preds = %cond.false39, %cond.true35
  %cond41 = phi %struct.VEC_tree_base* [ %base, %cond.true35 ], [ null, %cond.false39 ], !dbg !4178
  %call42 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond41), !dbg !4178
  %conv43 = zext i32 %call42 to i64, !dbg !4178
  %call44 = call %struct.htab* @htab_create(i64 %conv43, i32 (i8*)* @def_blocks_hash, i32 (i8*, i8*)* @def_blocks_eq, void (i8*)* @def_blocks_free), !dbg !4180
  store %struct.htab* %call44, %struct.htab** @def_blocks, align 8, !dbg !4181
  br label %if.end45, !dbg !4182

if.else:                                          ; preds = %if.end28
  store %struct.htab* null, %struct.htab** @def_blocks, align 8, !dbg !4183
  br label %if.end45

if.end45:                                         ; preds = %if.else, %cond.end40
  %26 = load i8, i8* %insert_phi_p, align 1, !dbg !4185
  %conv46 = zext i8 %26 to i32, !dbg !4185
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !4185
  br i1 %tobool47, label %land.lhs.true, label %if.end52, !dbg !4187

land.lhs.true:                                    ; preds = %if.end45
  %call48 = call zeroext i8 @switch_virtuals_to_full_rewrite_p(), !dbg !4188
  %conv49 = zext i8 %call48 to i32, !dbg !4188
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !4188
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !4189

if.then51:                                        ; preds = %land.lhs.true
  call void @switch_virtuals_to_full_rewrite(), !dbg !4190
  br label %if.end52, !dbg !4190

if.end52:                                         ; preds = %if.then51, %land.lhs.true, %if.end45
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4191
  %call53 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %27), !dbg !4193
  %cmp54 = icmp sge i32 %call53, 0, !dbg !4194
  br i1 %cmp54, label %if.then56, label %if.end66, !dbg !4195

if.then56:                                        ; preds = %if.end52
  %28 = load i8, i8* %insert_phi_p, align 1, !dbg !4196
  call void @prepare_names_to_update(i8 zeroext %28), !dbg !4198
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4199
  %call57 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %29), !dbg !4201
  %cmp58 = icmp slt i32 %call57, 0, !dbg !4202
  br i1 %cmp58, label %land.lhs.true60, label %if.end65, !dbg !4203

land.lhs.true60:                                  ; preds = %if.then56
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4204
  %add.ptr61 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !4204
  %gimple_df62 = getelementptr inbounds %struct.function, %struct.function* %add.ptr61, i32 0, i32 3, !dbg !4204
  %31 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df62, align 8, !dbg !4204
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %31, i32 0, i32 9, !dbg !4204
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !4204
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %32, i32 0, i32 0, !dbg !4204
  %33 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4204
  %tobool63 = icmp ne %struct.bitmap_element_def* %33, null, !dbg !4204
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !4205

if.then64:                                        ; preds = %land.lhs.true60
  br label %done, !dbg !4206

if.end65:                                         ; preds = %land.lhs.true60, %if.then56
  br label %if.end66, !dbg !4207

if.end66:                                         ; preds = %if.end65, %if.end52
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4208
  %add.ptr67 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !4208
  %gimple_df68 = getelementptr inbounds %struct.function, %struct.function* %add.ptr67, i32 0, i32 3, !dbg !4208
  %35 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df68, align 8, !dbg !4208
  %syms_to_rename69 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %35, i32 0, i32 9, !dbg !4208
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename69, align 8, !dbg !4208
  %first70 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %36, i32 0, i32 0, !dbg !4208
  %37 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first70, align 8, !dbg !4208
  %tobool71 = icmp ne %struct.bitmap_element_def* %37, null, !dbg !4208
  br i1 %tobool71, label %if.then72, label %if.else75, !dbg !4210

if.then72:                                        ; preds = %if.end66
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4211
  %add.ptr73 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !4211
  %cfg74 = getelementptr inbounds %struct.function, %struct.function* %add.ptr73, i32 0, i32 1, !dbg !4211
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg74, align 8, !dbg !4211
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 0, !dbg !4211
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4211
  store %struct.basic_block_def* %40, %struct.basic_block_def** %start_bb, align 8, !dbg !4213
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %start_bb, align 8, !dbg !4214
  %42 = load i8, i8* %insert_phi_p, align 1, !dbg !4215
  call void @prepare_block_for_update(%struct.basic_block_def* %41, i8 zeroext %42), !dbg !4216
  br label %if.end77, !dbg !4217

if.else75:                                        ; preds = %if.end66
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4218
  %call76 = call %struct.basic_block_def* @nearest_common_dominator_for_set(i32 1, %struct.bitmap_head_def* %43), !dbg !4220
  store %struct.basic_block_def* %call76, %struct.basic_block_def** %start_bb, align 8, !dbg !4221
  br label %if.end77

if.end77:                                         ; preds = %if.else75, %if.then72
  %44 = load i8, i8* %insert_phi_p, align 1, !dbg !4222
  %tobool78 = icmp ne i8 %44, 0, !dbg !4222
  br i1 %tobool78, label %if.then79, label %if.end158, !dbg !4224

if.then79:                                        ; preds = %if.end77
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %dfs, metadata !4225, metadata !DIExpression()), !dbg !4227
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4228
  %add.ptr80 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !4228
  %cfg81 = getelementptr inbounds %struct.function, %struct.function* %add.ptr80, i32 0, i32 1, !dbg !4228
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg81, align 8, !dbg !4228
  %x_last_basic_block82 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 5, !dbg !4228
  %47 = load i32, i32* %x_last_basic_block82, align 8, !dbg !4228
  %conv83 = sext i32 %47 to i64, !dbg !4228
  %mul = mul i64 8, %conv83, !dbg !4228
  %call84 = call i8* @xmalloc(i64 %mul), !dbg !4228
  %48 = bitcast i8* %call84 to %struct.bitmap_head_def**, !dbg !4228
  store %struct.bitmap_head_def** %48, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4229
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4230
  %add.ptr85 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !4230
  %cfg86 = getelementptr inbounds %struct.function, %struct.function* %add.ptr85, i32 0, i32 1, !dbg !4230
  %50 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg86, align 8, !dbg !4230
  %x_entry_block_ptr87 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %50, i32 0, i32 0, !dbg !4230
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr87, align 8, !dbg !4230
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 6, !dbg !4230
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4230
  store %struct.basic_block_def* %52, %struct.basic_block_def** %bb, align 8, !dbg !4230
  br label %for.cond, !dbg !4230

for.cond:                                         ; preds = %for.inc, %if.then79
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4232
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4232
  %add.ptr88 = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !4232
  %cfg89 = getelementptr inbounds %struct.function, %struct.function* %add.ptr88, i32 0, i32 1, !dbg !4232
  %55 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg89, align 8, !dbg !4232
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %55, i32 0, i32 1, !dbg !4232
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4232
  %cmp90 = icmp ne %struct.basic_block_def* %53, %56, !dbg !4232
  br i1 %cmp90, label %for.body, label %for.end, !dbg !4230

for.body:                                         ; preds = %for.cond
  %call92 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4234
  %57 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4235
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4236
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 9, !dbg !4237
  %59 = load i32, i32* %index, align 8, !dbg !4237
  %idxprom = sext i32 %59 to i64, !dbg !4235
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %57, i64 %idxprom, !dbg !4235
  store %struct.bitmap_head_def* %call92, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4238
  br label %for.inc, !dbg !4235

for.inc:                                          ; preds = %for.body
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4232
  %next_bb93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 6, !dbg !4232
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb93, align 8, !dbg !4232
  store %struct.basic_block_def* %61, %struct.basic_block_def** %bb, align 8, !dbg !4232
  br label %for.cond, !dbg !4232, !llvm.loop !4239

for.end:                                          ; preds = %for.cond
  %62 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4241
  call void @compute_dominance_frontiers(%struct.bitmap_head_def** %62), !dbg !4242
  %63 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4243
  %call94 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %63), !dbg !4245
  %cmp95 = icmp sge i32 %call94, 0, !dbg !4246
  br i1 %cmp95, label %if.then97, label %if.end119, !dbg !4247

if.then97:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi98, metadata !4248, metadata !DIExpression()), !dbg !4250
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %tmp, metadata !4251, metadata !DIExpression()), !dbg !4252
  %64 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4253
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %64, i32 0, i32 1, !dbg !4254
  %65 = load i32, i32* %n_bits, align 8, !dbg !4254
  %call99 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %65), !dbg !4255
  store %struct.simple_bitmap_def* %call99, %struct.simple_bitmap_def** %tmp, align 8, !dbg !4252
  %66 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !4256
  %67 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4257
  call void @sbitmap_copy(%struct.simple_bitmap_def* %66, %struct.simple_bitmap_def* %67), !dbg !4258
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !4259
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi98, %struct.simple_bitmap_def* %68, i32 0), !dbg !4259
  br label %for.cond100, !dbg !4259

for.cond100:                                      ; preds = %for.inc117, %if.then97
  %call101 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi98, i32* %i), !dbg !4261
  %tobool102 = icmp ne i8 %call101, 0, !dbg !4259
  br i1 %tobool102, label %for.body103, label %for.end118, !dbg !4259

for.body103:                                      ; preds = %for.cond100
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4263
  %add.ptr104 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !4263
  %gimple_df105 = getelementptr inbounds %struct.function, %struct.function* %add.ptr104, i32 0, i32 3, !dbg !4263
  %70 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df105, align 8, !dbg !4263
  %ssa_names106 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %70, i32 0, i32 2, !dbg !4263
  %71 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names106, align 8, !dbg !4263
  %tobool107 = icmp ne %struct.VEC_tree_gc* %71, null, !dbg !4263
  br i1 %tobool107, label %cond.true108, label %cond.false113, !dbg !4263

cond.true108:                                     ; preds = %for.body103
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4263
  %add.ptr109 = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, !dbg !4263
  %gimple_df110 = getelementptr inbounds %struct.function, %struct.function* %add.ptr109, i32 0, i32 3, !dbg !4263
  %73 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df110, align 8, !dbg !4263
  %ssa_names111 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %73, i32 0, i32 2, !dbg !4263
  %74 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names111, align 8, !dbg !4263
  %base112 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %74, i32 0, i32 0, !dbg !4263
  br label %cond.end114, !dbg !4263

cond.false113:                                    ; preds = %for.body103
  br label %cond.end114, !dbg !4263

cond.end114:                                      ; preds = %cond.false113, %cond.true108
  %cond115 = phi %struct.VEC_tree_base* [ %base112, %cond.true108 ], [ null, %cond.false113 ], !dbg !4263
  %75 = load i32, i32* %i, align 4, !dbg !4263
  %call116 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond115, i32 %75), !dbg !4263
  %76 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4264
  %77 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4265
  %78 = load i32, i32* %update_flags.addr, align 4, !dbg !4266
  call void @insert_updated_phi_nodes_for(%union.tree_node* %call116, %struct.bitmap_head_def** %76, %struct.bitmap_head_def* %77, i32 %78), !dbg !4267
  br label %for.inc117, !dbg !4267

for.inc117:                                       ; preds = %cond.end114
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi98), !dbg !4261
  br label %for.cond100, !dbg !4261, !llvm.loop !4268

for.end118:                                       ; preds = %for.cond100
  %79 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !4270
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %79, i32 0, i32 0, !dbg !4270
  %80 = load i8*, i8** %popcount, align 8, !dbg !4270
  call void @free(i8* %80), !dbg !4270
  %81 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %tmp, align 8, !dbg !4270
  %82 = bitcast %struct.simple_bitmap_def* %81 to i8*, !dbg !4270
  call void @free(i8* %82), !dbg !4270
  br label %if.end119, !dbg !4271

if.end119:                                        ; preds = %for.end118, %for.end
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4272
  %add.ptr120 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !4272
  %gimple_df121 = getelementptr inbounds %struct.function, %struct.function* %add.ptr120, i32 0, i32 3, !dbg !4272
  %84 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df121, align 8, !dbg !4272
  %syms_to_rename122 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %84, i32 0, i32 9, !dbg !4272
  %85 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename122, align 8, !dbg !4272
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %85, i32 0, i32* %i), !dbg !4272
  br label %for.cond123, !dbg !4272

for.cond123:                                      ; preds = %for.inc128, %if.end119
  %call124 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4274
  %tobool125 = icmp ne i8 %call124, 0, !dbg !4272
  br i1 %tobool125, label %for.body126, label %for.end129, !dbg !4272

for.body126:                                      ; preds = %for.cond123
  %86 = load i32, i32* %i, align 4, !dbg !4276
  %call127 = call %union.tree_node* @referenced_var_lookup(i32 %86), !dbg !4276
  %87 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4277
  %88 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4278
  %89 = load i32, i32* %update_flags.addr, align 4, !dbg !4279
  call void @insert_updated_phi_nodes_for(%union.tree_node* %call127, %struct.bitmap_head_def** %87, %struct.bitmap_head_def* %88, i32 %89), !dbg !4280
  br label %for.inc128, !dbg !4280

for.inc128:                                       ; preds = %for.body126
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4274
  br label %for.cond123, !dbg !4274, !llvm.loop !4281

for.end129:                                       ; preds = %for.cond123
  %90 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4283
  %add.ptr130 = getelementptr inbounds %struct.function, %struct.function* %90, i64 0, !dbg !4283
  %cfg131 = getelementptr inbounds %struct.function, %struct.function* %add.ptr130, i32 0, i32 1, !dbg !4283
  %91 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg131, align 8, !dbg !4283
  %x_entry_block_ptr132 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %91, i32 0, i32 0, !dbg !4283
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr132, align 8, !dbg !4283
  %next_bb133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 6, !dbg !4283
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb133, align 8, !dbg !4283
  store %struct.basic_block_def* %93, %struct.basic_block_def** %bb, align 8, !dbg !4283
  br label %for.cond134, !dbg !4283

for.cond134:                                      ; preds = %for.inc147, %for.end129
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4285
  %95 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4285
  %add.ptr135 = getelementptr inbounds %struct.function, %struct.function* %95, i64 0, !dbg !4285
  %cfg136 = getelementptr inbounds %struct.function, %struct.function* %add.ptr135, i32 0, i32 1, !dbg !4285
  %96 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg136, align 8, !dbg !4285
  %x_exit_block_ptr137 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %96, i32 0, i32 1, !dbg !4285
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr137, align 8, !dbg !4285
  %cmp138 = icmp ne %struct.basic_block_def* %94, %97, !dbg !4285
  br i1 %cmp138, label %for.body140, label %for.end149, !dbg !4283

for.body140:                                      ; preds = %for.cond134
  %98 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4287
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4287
  %index141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 9, !dbg !4287
  %100 = load i32, i32* %index141, align 8, !dbg !4287
  %idxprom142 = sext i32 %100 to i64, !dbg !4287
  %arrayidx143 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %98, i64 %idxprom142, !dbg !4287
  %101 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx143, align 8, !dbg !4287
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %101), !dbg !4287
  %102 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4287
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4287
  %index144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %103, i32 0, i32 9, !dbg !4287
  %104 = load i32, i32* %index144, align 8, !dbg !4287
  %idxprom145 = sext i32 %104 to i64, !dbg !4287
  %arrayidx146 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %102, i64 %idxprom145, !dbg !4287
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx146, align 8, !dbg !4287
  br label %for.inc147, !dbg !4287

for.inc147:                                       ; preds = %for.body140
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4285
  %next_bb148 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 6, !dbg !4285
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb148, align 8, !dbg !4285
  store %struct.basic_block_def* %106, %struct.basic_block_def** %bb, align 8, !dbg !4285
  br label %for.cond134, !dbg !4285, !llvm.loop !4288

for.end149:                                       ; preds = %for.cond134
  %107 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs, align 8, !dbg !4290
  %108 = bitcast %struct.bitmap_head_def** %107 to i8*, !dbg !4290
  call void @free(i8* %108), !dbg !4291
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %start_bb, align 8, !dbg !4292
  %110 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4294
  %add.ptr150 = getelementptr inbounds %struct.function, %struct.function* %110, i64 0, !dbg !4294
  %cfg151 = getelementptr inbounds %struct.function, %struct.function* %add.ptr150, i32 0, i32 1, !dbg !4294
  %111 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg151, align 8, !dbg !4294
  %x_entry_block_ptr152 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %111, i32 0, i32 0, !dbg !4294
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr152, align 8, !dbg !4294
  %cmp153 = icmp ne %struct.basic_block_def* %109, %112, !dbg !4295
  br i1 %cmp153, label %if.then155, label %if.end157, !dbg !4296

if.then155:                                       ; preds = %for.end149
  %113 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4297
  %call156 = call %struct.basic_block_def* @nearest_common_dominator_for_set(i32 1, %struct.bitmap_head_def* %113), !dbg !4298
  store %struct.basic_block_def* %call156, %struct.basic_block_def** %start_bb, align 8, !dbg !4299
  br label %if.end157, !dbg !4300

if.end157:                                        ; preds = %if.then155, %for.end149
  br label %if.end158, !dbg !4301

if.end158:                                        ; preds = %if.end157, %if.end77
  %114 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4302
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %114, i32 0), !dbg !4302
  br label %for.cond159, !dbg !4302

for.cond159:                                      ; preds = %for.inc176, %if.end158
  %call160 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4304
  %tobool161 = icmp ne i8 %call160, 0, !dbg !4302
  br i1 %tobool161, label %for.body162, label %for.end177, !dbg !4302

for.body162:                                      ; preds = %for.cond159
  %115 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4306
  %add.ptr163 = getelementptr inbounds %struct.function, %struct.function* %115, i64 0, !dbg !4306
  %gimple_df164 = getelementptr inbounds %struct.function, %struct.function* %add.ptr163, i32 0, i32 3, !dbg !4306
  %116 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df164, align 8, !dbg !4306
  %ssa_names165 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %116, i32 0, i32 2, !dbg !4306
  %117 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names165, align 8, !dbg !4306
  %tobool166 = icmp ne %struct.VEC_tree_gc* %117, null, !dbg !4306
  br i1 %tobool166, label %cond.true167, label %cond.false172, !dbg !4306

cond.true167:                                     ; preds = %for.body162
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4306
  %add.ptr168 = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !4306
  %gimple_df169 = getelementptr inbounds %struct.function, %struct.function* %add.ptr168, i32 0, i32 3, !dbg !4306
  %119 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df169, align 8, !dbg !4306
  %ssa_names170 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %119, i32 0, i32 2, !dbg !4306
  %120 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names170, align 8, !dbg !4306
  %base171 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %120, i32 0, i32 0, !dbg !4306
  br label %cond.end173, !dbg !4306

cond.false172:                                    ; preds = %for.body162
  br label %cond.end173, !dbg !4306

cond.end173:                                      ; preds = %cond.false172, %cond.true167
  %cond174 = phi %struct.VEC_tree_base* [ %base171, %cond.true167 ], [ null, %cond.false172 ], !dbg !4306
  %121 = load i32, i32* %i, align 4, !dbg !4306
  %call175 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond174, i32 %121), !dbg !4306
  call void @set_current_def(%union.tree_node* %call175, %union.tree_node* null), !dbg !4307
  br label %for.inc176, !dbg !4307

for.inc176:                                       ; preds = %cond.end173
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4304
  br label %for.cond159, !dbg !4304, !llvm.loop !4308

for.end177:                                       ; preds = %for.cond159
  %122 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4310
  %add.ptr178 = getelementptr inbounds %struct.function, %struct.function* %122, i64 0, !dbg !4310
  %gimple_df179 = getelementptr inbounds %struct.function, %struct.function* %add.ptr178, i32 0, i32 3, !dbg !4310
  %123 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df179, align 8, !dbg !4310
  %syms_to_rename180 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %123, i32 0, i32 9, !dbg !4310
  %124 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename180, align 8, !dbg !4310
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %124, i32 0, i32* %i), !dbg !4310
  br label %for.cond181, !dbg !4310

for.cond181:                                      ; preds = %for.inc186, %for.end177
  %call182 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4312
  %tobool183 = icmp ne i8 %call182, 0, !dbg !4310
  br i1 %tobool183, label %for.body184, label %for.end187, !dbg !4310

for.body184:                                      ; preds = %for.cond181
  %125 = load i32, i32* %i, align 4, !dbg !4314
  %call185 = call %union.tree_node* @referenced_var_lookup(i32 %125), !dbg !4314
  call void @set_current_def(%union.tree_node* %call185, %union.tree_node* null), !dbg !4315
  br label %for.inc186, !dbg !4315

for.inc186:                                       ; preds = %for.body184
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4312
  br label %for.cond181, !dbg !4312, !llvm.loop !4316

for.end187:                                       ; preds = %for.cond181
  %126 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4318
  %add.ptr188 = getelementptr inbounds %struct.function, %struct.function* %126, i64 0, !dbg !4318
  %cfg189 = getelementptr inbounds %struct.function, %struct.function* %add.ptr188, i32 0, i32 1, !dbg !4318
  %127 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg189, align 8, !dbg !4318
  %x_last_basic_block190 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %127, i32 0, i32 5, !dbg !4318
  %128 = load i32, i32* %x_last_basic_block190, align 8, !dbg !4318
  %call191 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %128), !dbg !4319
  store %struct.simple_bitmap_def* %call191, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !4320
  %129 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !4321
  call void @sbitmap_zero(%struct.simple_bitmap_def* %129), !dbg !4322
  %130 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4323
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %130, i32 0, i32* %i), !dbg !4323
  br label %for.cond192, !dbg !4323

for.cond192:                                      ; preds = %for.inc196, %for.end187
  %call193 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4325
  %tobool194 = icmp ne i8 %call193, 0, !dbg !4323
  br i1 %tobool194, label %for.body195, label %for.end197, !dbg !4323

for.body195:                                      ; preds = %for.cond192
  %131 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !4327
  %132 = load i32, i32* %i, align 4, !dbg !4328
  call void @SET_BIT(%struct.simple_bitmap_def* %131, i32 %132), !dbg !4329
  br label %for.inc196, !dbg !4329

for.inc196:                                       ; preds = %for.body195
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4325
  br label %for.cond192, !dbg !4325, !llvm.loop !4330

for.end197:                                       ; preds = %for.cond192
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %start_bb, align 8, !dbg !4332
  call void @rewrite_blocks(%struct.basic_block_def* %133, i32 1), !dbg !4333
  %134 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !4334
  %popcount198 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %134, i32 0, i32 0, !dbg !4334
  %135 = load i8*, i8** %popcount198, align 8, !dbg !4334
  call void @free(i8* %135), !dbg !4334
  %136 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !4334
  %137 = bitcast %struct.simple_bitmap_def* %136 to i8*, !dbg !4334
  call void @free(i8* %137), !dbg !4334
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4335
  %tobool199 = icmp ne %struct._IO_FILE* %138, null, !dbg !4335
  br i1 %tobool199, label %if.then200, label %if.end236, !dbg !4337

if.then200:                                       ; preds = %for.end197
  call void @llvm.dbg.declare(metadata i32* %c, metadata !4338, metadata !DIExpression()), !dbg !4340
  call void @llvm.dbg.declare(metadata i32* %i201, metadata !4341, metadata !DIExpression()), !dbg !4342
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4343
  call void @dump_update_ssa(%struct._IO_FILE* %139), !dbg !4344
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4345
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %start_bb, align 8, !dbg !4346
  %index202 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 9, !dbg !4347
  %142 = load i32, i32* %index202, align 8, !dbg !4347
  %call203 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %140, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i64 0, i64 0), i32 %142), !dbg !4348
  store i32 0, i32* %c, align 4, !dbg !4349
  %143 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4350
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %143, i32 0, i32* %i201), !dbg !4350
  br label %for.cond204, !dbg !4350

for.cond204:                                      ; preds = %for.inc208, %if.then200
  %call205 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i201), !dbg !4352
  %tobool206 = icmp ne i8 %call205, 0, !dbg !4350
  br i1 %tobool206, label %for.body207, label %for.end209, !dbg !4350

for.body207:                                      ; preds = %for.cond204
  %144 = load i32, i32* %c, align 4, !dbg !4354
  %inc = add nsw i32 %144, 1, !dbg !4354
  store i32 %inc, i32* %c, align 4, !dbg !4354
  br label %for.inc208, !dbg !4355

for.inc208:                                       ; preds = %for.body207
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i201), !dbg !4352
  br label %for.cond204, !dbg !4352, !llvm.loop !4356

for.end209:                                       ; preds = %for.cond204
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4358
  %146 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4359
  %add.ptr210 = getelementptr inbounds %struct.function, %struct.function* %146, i64 0, !dbg !4359
  %cfg211 = getelementptr inbounds %struct.function, %struct.function* %add.ptr210, i32 0, i32 1, !dbg !4359
  %147 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg211, align 8, !dbg !4359
  %x_last_basic_block212 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %147, i32 0, i32 5, !dbg !4359
  %148 = load i32, i32* %x_last_basic_block212, align 8, !dbg !4359
  %call213 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.34, i64 0, i64 0), i32 %148), !dbg !4360
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4361
  %150 = load i32, i32* %c, align 4, !dbg !4362
  %151 = load i32, i32* %c, align 4, !dbg !4363
  %conv214 = sitofp i32 %151 to float, !dbg !4363
  %conv215 = fpext float %conv214 to double, !dbg !4363
  %mul216 = fmul double %conv215, 1.000000e+02, !dbg !4363
  %152 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4363
  %add.ptr217 = getelementptr inbounds %struct.function, %struct.function* %152, i64 0, !dbg !4363
  %cfg218 = getelementptr inbounds %struct.function, %struct.function* %add.ptr217, i32 0, i32 1, !dbg !4363
  %153 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg218, align 8, !dbg !4363
  %x_last_basic_block219 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %153, i32 0, i32 5, !dbg !4363
  %154 = load i32, i32* %x_last_basic_block219, align 8, !dbg !4363
  %conv220 = sitofp i32 %154 to float, !dbg !4363
  %conv221 = fpext float %conv220 to double, !dbg !4363
  %div = fdiv double %mul216, %conv221, !dbg !4363
  %call222 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.35, i64 0, i64 0), i32 %150, double %div), !dbg !4364
  %155 = load i32, i32* @dump_flags, align 4, !dbg !4365
  %and = and i32 %155, 8, !dbg !4367
  %tobool223 = icmp ne i32 %and, 0, !dbg !4367
  br i1 %tobool223, label %if.then224, label %if.end234, !dbg !4368

if.then224:                                       ; preds = %for.end209
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4369
  %call225 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %156, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.36, i64 0, i64 0)), !dbg !4371
  %157 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !4372
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %157, i32 0, i32* %i201), !dbg !4372
  br label %for.cond226, !dbg !4372

for.cond226:                                      ; preds = %for.inc231, %if.then224
  %call227 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i201), !dbg !4374
  %tobool228 = icmp ne i8 %call227, 0, !dbg !4372
  br i1 %tobool228, label %for.body229, label %for.end232, !dbg !4372

for.body229:                                      ; preds = %for.cond226
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4376
  %159 = load i32, i32* %i201, align 4, !dbg !4377
  %call230 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %158, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i32 %159), !dbg !4378
  br label %for.inc231, !dbg !4378

for.inc231:                                       ; preds = %for.body229
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i201), !dbg !4374
  br label %for.cond226, !dbg !4374, !llvm.loop !4379

for.end232:                                       ; preds = %for.cond226
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4381
  %call233 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4382
  br label %if.end234, !dbg !4383

if.end234:                                        ; preds = %for.end232, %for.end209
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4384
  %call235 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !4385
  br label %if.end236, !dbg !4386

if.end236:                                        ; preds = %if.end234, %for.end197
  br label %done, !dbg !4335

done:                                             ; preds = %if.end236, %if.then64
  call void @llvm.dbg.label(metadata !4387), !dbg !4388
  call void @delete_update_ssa(), !dbg !4389
  br label %do.body237, !dbg !4390

do.body237:                                       ; preds = %done
  %162 = load i8, i8* @timevar_enable, align 1, !dbg !4391
  %tobool238 = icmp ne i8 %162, 0, !dbg !4391
  br i1 %tobool238, label %if.then239, label %if.end240, !dbg !4394

if.then239:                                       ; preds = %do.body237
  call void @timevar_pop_1(i32 60), !dbg !4391
  br label %if.end240, !dbg !4391

if.end240:                                        ; preds = %if.then239, %do.body237
  br label %do.end241, !dbg !4394

do.end241:                                        ; preds = %if.then, %if.end240
  ret void, !dbg !4395
}

declare dso_local void @timevar_push_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_vec_heap* @VEC_gimple_vec_heap_alloc(i32 %alloc_) #0 !dbg !4396 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4399, metadata !DIExpression()), !dbg !4400
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4400
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4400
  %1 = bitcast i8* %call to %struct.VEC_gimple_vec_heap*, !dbg !4400
  ret %struct.VEC_gimple_vec_heap* %1, !dbg !4400
}

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local void @htab_empty(%struct.htab*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @def_blocks_hash(i8* %p) #0 !dbg !4401 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !4402, metadata !DIExpression()), !dbg !4403
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4404
  %1 = load i8*, i8** %p.addr, align 8, !dbg !4405
  %2 = bitcast i8* %1 to %struct.def_blocks_d*, !dbg !4406
  %var = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %2, i32 0, i32 0, !dbg !4407
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4407
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !4408
  %call = call i32 %0(i8* %4), !dbg !4404
  ret i32 %call, !dbg !4409
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @def_blocks_eq(i8* %p1, i8* %p2) #0 !dbg !4410 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !4411, metadata !DIExpression()), !dbg !4412
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !4413, metadata !DIExpression()), !dbg !4414
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !4415
  %1 = bitcast i8* %0 to %struct.def_blocks_d*, !dbg !4416
  %var = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %1, i32 0, i32 0, !dbg !4417
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4417
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !4418
  %4 = bitcast i8* %3 to %struct.def_blocks_d*, !dbg !4419
  %var1 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %4, i32 0, i32 0, !dbg !4420
  %5 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !4420
  %cmp = icmp eq %union.tree_node* %2, %5, !dbg !4421
  %conv = zext i1 %cmp to i32, !dbg !4421
  ret i32 %conv, !dbg !4422
}

; Function Attrs: noinline nounwind uwtable
define internal void @def_blocks_free(i8* %p) #0 !dbg !4423 {
entry:
  %p.addr = alloca i8*, align 8
  %entry1 = alloca %struct.def_blocks_d*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !4424, metadata !DIExpression()), !dbg !4425
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %entry1, metadata !4426, metadata !DIExpression()), !dbg !4427
  %0 = load i8*, i8** %p.addr, align 8, !dbg !4428
  %1 = bitcast i8* %0 to %struct.def_blocks_d*, !dbg !4429
  store %struct.def_blocks_d* %1, %struct.def_blocks_d** %entry1, align 8, !dbg !4427
  %2 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4430
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %2, i32 0, i32 1, !dbg !4430
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !4430
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %3), !dbg !4430
  %4 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4430
  %def_blocks2 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %4, i32 0, i32 1, !dbg !4430
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %def_blocks2, align 8, !dbg !4430
  %5 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4431
  %phi_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %5, i32 0, i32 2, !dbg !4431
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_blocks, align 8, !dbg !4431
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %6), !dbg !4431
  %7 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4431
  %phi_blocks3 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %7, i32 0, i32 2, !dbg !4431
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %phi_blocks3, align 8, !dbg !4431
  %8 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4432
  %livein_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %8, i32 0, i32 3, !dbg !4432
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein_blocks, align 8, !dbg !4432
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %9), !dbg !4432
  %10 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4432
  %livein_blocks4 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %10, i32 0, i32 3, !dbg !4432
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %livein_blocks4, align 8, !dbg !4432
  %11 = load %struct.def_blocks_d*, %struct.def_blocks_d** %entry1, align 8, !dbg !4433
  %12 = bitcast %struct.def_blocks_d* %11 to i8*, !dbg !4433
  call void @free(i8* %12), !dbg !4434
  ret void, !dbg !4435
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @switch_virtuals_to_full_rewrite_p() #0 !dbg !4436 {
entry:
  %retval = alloca i8, align 1
  %0 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !4437
  %1 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4439
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %1, i64 91, !dbg !4439
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4439
  %2 = load i32, i32* %value, align 8, !dbg !4439
  %cmp = icmp ult i32 %0, %2, !dbg !4440
  br i1 %cmp, label %if.then, label %if.end, !dbg !4441

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4442
  br label %return, !dbg !4442

if.end:                                           ; preds = %entry
  %3 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !4443
  %4 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4445
  %arrayidx1 = getelementptr inbounds %struct.param_info, %struct.param_info* %4, i64 92, !dbg !4445
  %value2 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx1, i32 0, i32 1, !dbg !4445
  %5 = load i32, i32* %value2, align 8, !dbg !4445
  %6 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 3), align 8, !dbg !4446
  %mul = mul i32 %5, %6, !dbg !4447
  %cmp3 = icmp ugt i32 %3, %mul, !dbg !4448
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !4449

if.then4:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !4450
  br label %return, !dbg !4450

if.end5:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4451
  br label %return, !dbg !4451

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !4452
  ret i8 %7, !dbg !4452
}

; Function Attrs: noinline nounwind uwtable
define internal void @switch_virtuals_to_full_rewrite() #0 !dbg !4453 {
entry:
  %i = alloca i32, align 4
  %sbi = alloca %struct.sbitmap_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4454, metadata !DIExpression()), !dbg !4455
  store i32 0, i32* %i, align 4, !dbg !4455
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !4456, metadata !DIExpression()), !dbg !4457
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4458
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !4458
  br i1 %tobool, label %if.then, label %if.end, !dbg !4460

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4461
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.46, i64 0, i64 0)), !dbg !4463
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4464
  %3 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 0), align 8, !dbg !4465
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.47, i64 0, i64 0), i32 %3), !dbg !4466
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4467
  %5 = load i32, i32* getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 3), align 8, !dbg !4468
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.48, i64 0, i64 0), i32 %5), !dbg !4469
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4470
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.49, i64 0, i64 0)), !dbg !4471
  br label %if.end, !dbg !4472

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4473
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %7, i32 0), !dbg !4473
  br label %for.cond, !dbg !4473

for.cond:                                         ; preds = %for.inc, %if.end
  %call4 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4475
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4473
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4473

for.body:                                         ; preds = %for.cond
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4477
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4477
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4477
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4477
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !4477
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4477
  %tobool6 = icmp ne %struct.VEC_tree_gc* %10, null, !dbg !4477
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !4477

cond.true:                                        ; preds = %for.body
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4477
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4477
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !4477
  %12 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !4477
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %12, i32 0, i32 2, !dbg !4477
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !4477
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %13, i32 0, i32 0, !dbg !4477
  br label %cond.end, !dbg !4477

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4477

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4477
  %14 = load i32, i32* %i, align 4, !dbg !4477
  %call10 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %14), !dbg !4477
  %call11 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call10), !dbg !4479
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4479
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4480

if.then13:                                        ; preds = %cond.end
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4481
  %16 = load i32, i32* %i, align 4, !dbg !4482
  call void @RESET_BIT(%struct.simple_bitmap_def* %15, i32 %16), !dbg !4483
  br label %if.end14, !dbg !4483

if.end14:                                         ; preds = %if.then13, %cond.end
  br label %for.inc, !dbg !4484

for.inc:                                          ; preds = %if.end14
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4475
  br label %for.cond, !dbg !4475, !llvm.loop !4485

for.end:                                          ; preds = %for.cond
  %17 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4487
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %17, i32 0), !dbg !4487
  br label %for.cond15, !dbg !4487

for.cond15:                                       ; preds = %for.inc36, %for.end
  %call16 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4489
  %tobool17 = icmp ne i8 %call16, 0, !dbg !4487
  br i1 %tobool17, label %for.body18, label %for.end37, !dbg !4487

for.body18:                                       ; preds = %for.cond15
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4491
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4491
  %gimple_df20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 3, !dbg !4491
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df20, align 8, !dbg !4491
  %ssa_names21 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 2, !dbg !4491
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names21, align 8, !dbg !4491
  %tobool22 = icmp ne %struct.VEC_tree_gc* %20, null, !dbg !4491
  br i1 %tobool22, label %cond.true23, label %cond.false28, !dbg !4491

cond.true23:                                      ; preds = %for.body18
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4491
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !4491
  %gimple_df25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 3, !dbg !4491
  %22 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df25, align 8, !dbg !4491
  %ssa_names26 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %22, i32 0, i32 2, !dbg !4491
  %23 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names26, align 8, !dbg !4491
  %base27 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %23, i32 0, i32 0, !dbg !4491
  br label %cond.end29, !dbg !4491

cond.false28:                                     ; preds = %for.body18
  br label %cond.end29, !dbg !4491

cond.end29:                                       ; preds = %cond.false28, %cond.true23
  %cond30 = phi %struct.VEC_tree_base* [ %base27, %cond.true23 ], [ null, %cond.false28 ], !dbg !4491
  %24 = load i32, i32* %i, align 4, !dbg !4491
  %call31 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond30, i32 %24), !dbg !4491
  %call32 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call31), !dbg !4493
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4493
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !4494

if.then34:                                        ; preds = %cond.end29
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4495
  %26 = load i32, i32* %i, align 4, !dbg !4496
  call void @RESET_BIT(%struct.simple_bitmap_def* %25, i32 %26), !dbg !4497
  br label %if.end35, !dbg !4497

if.end35:                                         ; preds = %if.then34, %cond.end29
  br label %for.inc36, !dbg !4498

for.inc36:                                        ; preds = %if.end35
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4489
  br label %for.cond15, !dbg !4489, !llvm.loop !4499

for.end37:                                        ; preds = %for.cond15
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.update_ssa_stats_d, %struct.update_ssa_stats_d* @update_ssa_stats, i32 0, i32 2), align 8, !dbg !4501
  call void @mark_set_for_renaming(%struct.bitmap_head_def* %27), !dbg !4502
  ret void, !dbg !4503
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_names_to_update(i8 zeroext %insert_phi_p) #0 !dbg !4504 {
entry:
  %insert_phi_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %sbi = alloca %struct.sbitmap_iterator, align 8
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4509, metadata !DIExpression()), !dbg !4510
  store i32 0, i32* %i, align 4, !dbg !4510
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4511, metadata !DIExpression()), !dbg !4512
  call void @llvm.dbg.declare(metadata %struct.sbitmap_iterator* %sbi, metadata !4513, metadata !DIExpression()), !dbg !4514
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4515
  %tobool = icmp ne %struct.bitmap_head_def* %0, null, !dbg !4515
  br i1 %tobool, label %if.then, label %if.end, !dbg !4517

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4518
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %1, i32 0, i32* %i), !dbg !4518
  br label %for.cond, !dbg !4518

for.cond:                                         ; preds = %for.inc, %if.then
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4520
  %tobool1 = icmp ne i8 %call, 0, !dbg !4518
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4518

for.body:                                         ; preds = %for.cond
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4522
  %3 = load i32, i32* %i, align 4, !dbg !4523
  call void @RESET_BIT(%struct.simple_bitmap_def* %2, i32 %3), !dbg !4524
  br label %for.inc, !dbg !4524

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4520
  br label %for.cond, !dbg !4520, !llvm.loop !4525

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !4526

if.end:                                           ; preds = %for.end, %entry
  %4 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @new_ssa_names, align 8, !dbg !4527
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %4, i32 0), !dbg !4527
  br label %for.cond2, !dbg !4527

for.cond2:                                        ; preds = %for.inc11, %if.end
  %call3 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4529
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4527
  br i1 %tobool4, label %for.body5, label %for.end12, !dbg !4527

for.body5:                                        ; preds = %for.cond2
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4531
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4531
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4531
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4531
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !4531
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4531
  %tobool6 = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !4531
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !4531

cond.true:                                        ; preds = %for.body5
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4531
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4531
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 3, !dbg !4531
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !4531
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !4531
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !4531
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i32 0, i32 0, !dbg !4531
  br label %cond.end, !dbg !4531

cond.false:                                       ; preds = %for.body5
  br label %cond.end, !dbg !4531

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4531
  %11 = load i32, i32* %i, align 4, !dbg !4531
  %call10 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %11), !dbg !4531
  %12 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4532
  call void @prepare_def_site_for(%union.tree_node* %call10, i8 zeroext %12), !dbg !4533
  br label %for.inc11, !dbg !4533

for.inc11:                                        ; preds = %cond.end
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4529
  br label %for.cond2, !dbg !4529, !llvm.loop !4534

for.end12:                                        ; preds = %for.cond2
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @old_ssa_names, align 8, !dbg !4536
  call void @sbitmap_iter_init(%struct.sbitmap_iterator* %sbi, %struct.simple_bitmap_def* %13, i32 0), !dbg !4536
  br label %for.cond13, !dbg !4536

for.cond13:                                       ; preds = %for.inc47, %for.end12
  %call14 = call zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %sbi, i32* %i), !dbg !4538
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4536
  br i1 %tobool15, label %for.body16, label %for.end48, !dbg !4536

for.body16:                                       ; preds = %for.cond13
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4540
  %cmp = icmp eq %struct.bitmap_head_def* %14, null, !dbg !4543
  br i1 %cmp, label %if.then19, label %lor.lhs.false, !dbg !4544

lor.lhs.false:                                    ; preds = %for.body16
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !4545
  %16 = load i32, i32* %i, align 4, !dbg !4546
  %call17 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %15, i32 %16), !dbg !4547
  %tobool18 = icmp ne i32 %call17, 0, !dbg !4547
  br i1 %tobool18, label %if.end33, label %if.then19, !dbg !4548

if.then19:                                        ; preds = %lor.lhs.false, %for.body16
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4549
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !4549
  %gimple_df21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 3, !dbg !4549
  %18 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df21, align 8, !dbg !4549
  %ssa_names22 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %18, i32 0, i32 2, !dbg !4549
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names22, align 8, !dbg !4549
  %tobool23 = icmp ne %struct.VEC_tree_gc* %19, null, !dbg !4549
  br i1 %tobool23, label %cond.true24, label %cond.false29, !dbg !4549

cond.true24:                                      ; preds = %if.then19
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4549
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !4549
  %gimple_df26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 3, !dbg !4549
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df26, align 8, !dbg !4549
  %ssa_names27 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !4549
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names27, align 8, !dbg !4549
  %base28 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %22, i32 0, i32 0, !dbg !4549
  br label %cond.end30, !dbg !4549

cond.false29:                                     ; preds = %if.then19
  br label %cond.end30, !dbg !4549

cond.end30:                                       ; preds = %cond.false29, %cond.true24
  %cond31 = phi %struct.VEC_tree_base* [ %base28, %cond.true24 ], [ null, %cond.false29 ], !dbg !4549
  %23 = load i32, i32* %i, align 4, !dbg !4549
  %call32 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond31, i32 %23), !dbg !4549
  %24 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4550
  call void @prepare_def_site_for(%union.tree_node* %call32, i8 zeroext %24), !dbg !4551
  br label %if.end33, !dbg !4551

if.end33:                                         ; preds = %cond.end30, %lor.lhs.false
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4552
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !4552
  %gimple_df35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 3, !dbg !4552
  %26 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df35, align 8, !dbg !4552
  %ssa_names36 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %26, i32 0, i32 2, !dbg !4552
  %27 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names36, align 8, !dbg !4552
  %tobool37 = icmp ne %struct.VEC_tree_gc* %27, null, !dbg !4552
  br i1 %tobool37, label %cond.true38, label %cond.false43, !dbg !4552

cond.true38:                                      ; preds = %if.end33
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4552
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !4552
  %gimple_df40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 3, !dbg !4552
  %29 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df40, align 8, !dbg !4552
  %ssa_names41 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %29, i32 0, i32 2, !dbg !4552
  %30 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names41, align 8, !dbg !4552
  %base42 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %30, i32 0, i32 0, !dbg !4552
  br label %cond.end44, !dbg !4552

cond.false43:                                     ; preds = %if.end33
  br label %cond.end44, !dbg !4552

cond.end44:                                       ; preds = %cond.false43, %cond.true38
  %cond45 = phi %struct.VEC_tree_base* [ %base42, %cond.true38 ], [ null, %cond.false43 ], !dbg !4552
  %31 = load i32, i32* %i, align 4, !dbg !4552
  %call46 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond45, i32 %31), !dbg !4552
  %32 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4553
  call void @prepare_use_sites_for(%union.tree_node* %call46, i8 zeroext %32), !dbg !4554
  br label %for.inc47, !dbg !4555

for.inc47:                                        ; preds = %cond.end44
  call void @sbitmap_iter_next(%struct.sbitmap_iterator* %sbi), !dbg !4538
  br label %for.cond13, !dbg !4538, !llvm.loop !4556

for.end48:                                        ; preds = %for.cond13
  ret void, !dbg !4558
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_block_for_update(%struct.basic_block_def* %bb, i8 zeroext %insert_phi_p) #0 !dbg !4559 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insert_phi_p.addr = alloca i8, align 1
  %son = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %lhs_sym = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp5 = alloca %struct.edge_iterator, align 8
  %tmp13 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  %use = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  %sym54 = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4562, metadata !DIExpression()), !dbg !4563
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !4564, metadata !DIExpression()), !dbg !4565
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !4566, metadata !DIExpression()), !dbg !4567
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4568, metadata !DIExpression()), !dbg !4575
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4576, metadata !DIExpression()), !dbg !4577
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4578, metadata !DIExpression()), !dbg !4579
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4580
  call void @mark_block_for_update(%struct.basic_block_def* %0), !dbg !4581
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4582
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !4584
  %2 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4584
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4584
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !4584
  br label %for.cond, !dbg !4585

for.cond:                                         ; preds = %for.inc11, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4586
  %tobool = icmp ne i8 %call, 0, !dbg !4588
  %lnot = xor i1 %tobool, true, !dbg !4588
  br i1 %lnot, label %for.body, label %for.end12, !dbg !4589

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4590, metadata !DIExpression()), !dbg !4592
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4593
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !4592
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_sym, metadata !4594, metadata !DIExpression()), !dbg !4595
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4596, metadata !DIExpression()), !dbg !4597
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4598
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %4), !dbg !4599
  store %union.tree_node* %call2, %union.tree_node** %lhs, align 8, !dbg !4597
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4600
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !4600
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !4600
  %bf.load = load i64, i64* %6, align 8, !dbg !4600
  %bf.clear = and i64 %bf.load, 65535, !dbg !4600
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4600
  %idxprom = sext i32 %bf.cast to i64, !dbg !4600
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4600
  %7 = load i32, i32* %arrayidx, align 4, !dbg !4600
  %cmp = icmp eq i32 %7, 3, !dbg !4600
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4600

cond.true:                                        ; preds = %for.body
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4601
  br label %cond.end, !dbg !4600

cond.false:                                       ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4602
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !4602
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4602
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4602
  br label %cond.end, !dbg !4600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %8, %cond.true ], [ %10, %cond.false ], !dbg !4600
  store %union.tree_node* %cond, %union.tree_node** %lhs_sym, align 8, !dbg !4603
  %11 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !4604
  %call3 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %11), !dbg !4606
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4606
  br i1 %tobool4, label %if.end, label %if.then, !dbg !4607

if.then:                                          ; preds = %cond.end
  br label %for.inc11, !dbg !4608

if.end:                                           ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !4609
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4610
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4611
  %15 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4612
  call void @mark_def_interesting(%union.tree_node* %12, %union.gimple_statement_d* %13, %struct.basic_block_def* %14, i8 zeroext %15), !dbg !4613
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4614
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 0, !dbg !4614
  %call6 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4614
  %17 = bitcast %struct.edge_iterator* %tmp5 to { i32, %struct.VEC_edge_gc** }*, !dbg !4614
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 0, !dbg !4614
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 0, !dbg !4614
  store i32 %19, i32* %18, align 8, !dbg !4614
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 1, !dbg !4614
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 1, !dbg !4614
  store %struct.VEC_edge_gc** %21, %struct.VEC_edge_gc*** %20, align 8, !dbg !4614
  %22 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4614
  %23 = bitcast %struct.edge_iterator* %tmp5 to i8*, !dbg !4614
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 16, i1 false), !dbg !4614
  br label %for.cond7, !dbg !4614

for.cond7:                                        ; preds = %for.inc, %if.end
  %24 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4616
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !4616
  %26 = load i32, i32* %25, align 8, !dbg !4616
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !4616
  %28 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %27, align 8, !dbg !4616
  %call8 = call zeroext i8 @ei_cond(i32 %26, %struct.VEC_edge_gc** %28, %struct.edge_def** %e), !dbg !4616
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4614
  br i1 %tobool9, label %for.body10, label %for.end, !dbg !4614

for.body10:                                       ; preds = %for.cond7
  %29 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !4618
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4619
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4620
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 0, !dbg !4621
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4621
  %33 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4622
  call void @mark_use_interesting(%union.tree_node* %29, %union.gimple_statement_d* %30, %struct.basic_block_def* %32, i8 zeroext %33), !dbg !4623
  br label %for.inc, !dbg !4623

for.inc:                                          ; preds = %for.body10
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4616
  br label %for.cond7, !dbg !4616, !llvm.loop !4624

for.end:                                          ; preds = %for.cond7
  br label %for.inc11, !dbg !4626

for.inc11:                                        ; preds = %for.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4627
  br label %for.cond, !dbg !4628, !llvm.loop !4629

for.end12:                                        ; preds = %for.cond
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4631
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp13, %struct.basic_block_def* %34), !dbg !4633
  %35 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4633
  %36 = bitcast %struct.gimple_stmt_iterator* %tmp13 to i8*, !dbg !4633
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !4633
  br label %for.cond14, !dbg !4634

for.cond14:                                       ; preds = %for.inc75, %for.end12
  %call15 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4635
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4637
  %lnot17 = xor i1 %tobool16, true, !dbg !4637
  br i1 %lnot17, label %for.body18, label %for.end76, !dbg !4638

for.body18:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4639, metadata !DIExpression()), !dbg !4641
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %i, metadata !4642, metadata !DIExpression()), !dbg !4655
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4656, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !4658, metadata !DIExpression()), !dbg !4659
  %call19 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4660
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %stmt, align 8, !dbg !4661
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4662
  %call20 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %37, i32 5), !dbg !4662
  store %struct.ssa_use_operand_d* %call20, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4662
  br label %for.cond21, !dbg !4662

for.cond21:                                       ; preds = %for.inc44, %for.body18
  %call22 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !4664
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4664
  %lnot24 = xor i1 %tobool23, true, !dbg !4664
  br i1 %lnot24, label %for.body25, label %for.end46, !dbg !4662

for.body25:                                       ; preds = %for.cond21
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !4666, metadata !DIExpression()), !dbg !4668
  %38 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4669
  %call26 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %38), !dbg !4669
  store %union.tree_node* %call26, %union.tree_node** %use, align 8, !dbg !4668
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !4670, metadata !DIExpression()), !dbg !4671
  %39 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4672
  %base27 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !4672
  %40 = bitcast %struct.tree_base* %base27 to i64*, !dbg !4672
  %bf.load28 = load i64, i64* %40, align 8, !dbg !4672
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !4672
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !4672
  %idxprom31 = sext i32 %bf.cast30 to i64, !dbg !4672
  %arrayidx32 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom31, !dbg !4672
  %41 = load i32, i32* %arrayidx32, align 4, !dbg !4672
  %cmp33 = icmp eq i32 %41, 3, !dbg !4672
  br i1 %cmp33, label %cond.true34, label %cond.false35, !dbg !4672

cond.true34:                                      ; preds = %for.body25
  %42 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4673
  br label %cond.end38, !dbg !4672

cond.false35:                                     ; preds = %for.body25
  %43 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4674
  %ssa_name36 = bitcast %union.tree_node* %43 to %struct.tree_ssa_name*, !dbg !4674
  %var37 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name36, i32 0, i32 1, !dbg !4674
  %44 = load %union.tree_node*, %union.tree_node** %var37, align 8, !dbg !4674
  br label %cond.end38, !dbg !4672

cond.end38:                                       ; preds = %cond.false35, %cond.true34
  %cond39 = phi %union.tree_node* [ %42, %cond.true34 ], [ %44, %cond.false35 ], !dbg !4672
  store %union.tree_node* %cond39, %union.tree_node** %sym, align 8, !dbg !4671
  %45 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !4675
  %call40 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %45), !dbg !4677
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4677
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !4678

if.then42:                                        ; preds = %cond.end38
  %46 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !4679
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4680
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4681
  %49 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4682
  call void @mark_use_interesting(%union.tree_node* %46, %union.gimple_statement_d* %47, %struct.basic_block_def* %48, i8 zeroext %49), !dbg !4683
  br label %if.end43, !dbg !4683

if.end43:                                         ; preds = %if.then42, %cond.end38
  br label %for.inc44, !dbg !4684

for.inc44:                                        ; preds = %if.end43
  %call45 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %i), !dbg !4664
  store %struct.ssa_use_operand_d* %call45, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4664
  br label %for.cond21, !dbg !4664, !llvm.loop !4685

for.end46:                                        ; preds = %for.cond21
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4687
  %call47 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %i, %union.gimple_statement_d* %50, i32 10), !dbg !4687
  store %union.tree_node** %call47, %union.tree_node*** %def_p, align 8, !dbg !4687
  br label %for.cond48, !dbg !4687

for.cond48:                                       ; preds = %for.inc72, %for.end46
  %call49 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %i), !dbg !4689
  %tobool50 = icmp ne i8 %call49, 0, !dbg !4689
  %lnot51 = xor i1 %tobool50, true, !dbg !4689
  br i1 %lnot51, label %for.body52, label %for.end74, !dbg !4687

for.body52:                                       ; preds = %for.cond48
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4691, metadata !DIExpression()), !dbg !4693
  %51 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !4694
  %call53 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %51), !dbg !4694
  store %union.tree_node* %call53, %union.tree_node** %def, align 8, !dbg !4693
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym54, metadata !4695, metadata !DIExpression()), !dbg !4696
  %52 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4697
  %base55 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !4697
  %53 = bitcast %struct.tree_base* %base55 to i64*, !dbg !4697
  %bf.load56 = load i64, i64* %53, align 8, !dbg !4697
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !4697
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !4697
  %idxprom59 = sext i32 %bf.cast58 to i64, !dbg !4697
  %arrayidx60 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom59, !dbg !4697
  %54 = load i32, i32* %arrayidx60, align 4, !dbg !4697
  %cmp61 = icmp eq i32 %54, 3, !dbg !4697
  br i1 %cmp61, label %cond.true62, label %cond.false63, !dbg !4697

cond.true62:                                      ; preds = %for.body52
  %55 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4698
  br label %cond.end66, !dbg !4697

cond.false63:                                     ; preds = %for.body52
  %56 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4699
  %ssa_name64 = bitcast %union.tree_node* %56 to %struct.tree_ssa_name*, !dbg !4699
  %var65 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name64, i32 0, i32 1, !dbg !4699
  %57 = load %union.tree_node*, %union.tree_node** %var65, align 8, !dbg !4699
  br label %cond.end66, !dbg !4697

cond.end66:                                       ; preds = %cond.false63, %cond.true62
  %cond67 = phi %union.tree_node* [ %55, %cond.true62 ], [ %57, %cond.false63 ], !dbg !4697
  store %union.tree_node* %cond67, %union.tree_node** %sym54, align 8, !dbg !4696
  %58 = load %union.tree_node*, %union.tree_node** %sym54, align 8, !dbg !4700
  %call68 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %58), !dbg !4702
  %tobool69 = icmp ne i8 %call68, 0, !dbg !4702
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !4703

if.then70:                                        ; preds = %cond.end66
  %59 = load %union.tree_node*, %union.tree_node** %sym54, align 8, !dbg !4704
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4705
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4706
  %62 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4707
  call void @mark_def_interesting(%union.tree_node* %59, %union.gimple_statement_d* %60, %struct.basic_block_def* %61, i8 zeroext %62), !dbg !4708
  br label %if.end71, !dbg !4708

if.end71:                                         ; preds = %if.then70, %cond.end66
  br label %for.inc72, !dbg !4709

for.inc72:                                        ; preds = %if.end71
  %call73 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %i), !dbg !4689
  store %union.tree_node** %call73, %union.tree_node*** %def_p, align 8, !dbg !4689
  br label %for.cond48, !dbg !4689, !llvm.loop !4710

for.end74:                                        ; preds = %for.cond48
  br label %for.inc75, !dbg !4712

for.inc75:                                        ; preds = %for.end74
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !4713
  br label %for.cond14, !dbg !4714, !llvm.loop !4715

for.end76:                                        ; preds = %for.cond14
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4717
  %call77 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %63), !dbg !4719
  store %struct.basic_block_def* %call77, %struct.basic_block_def** %son, align 8, !dbg !4720
  br label %for.cond78, !dbg !4721

for.cond78:                                       ; preds = %for.inc81, %for.end76
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4722
  %tobool79 = icmp ne %struct.basic_block_def* %64, null, !dbg !4724
  br i1 %tobool79, label %for.body80, label %for.end83, !dbg !4724

for.body80:                                       ; preds = %for.cond78
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4725
  %66 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !4726
  call void @prepare_block_for_update(%struct.basic_block_def* %65, i8 zeroext %66), !dbg !4727
  br label %for.inc81, !dbg !4727

for.inc81:                                        ; preds = %for.body80
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4728
  %call82 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %67), !dbg !4729
  store %struct.basic_block_def* %call82, %struct.basic_block_def** %son, align 8, !dbg !4730
  br label %for.cond78, !dbg !4731, !llvm.loop !4732

for.end83:                                        ; preds = %for.cond78
  ret void, !dbg !4734
}

declare dso_local %struct.basic_block_def* @nearest_common_dominator_for_set(i32, %struct.bitmap_head_def*) #2

declare dso_local void @compute_dominance_frontiers(%struct.bitmap_head_def**) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_copy(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_updated_phi_nodes_for(%union.tree_node* %var, %struct.bitmap_head_def** %dfs, %struct.bitmap_head_def* %blocks, i32 %update_flags) #0 !dbg !4735 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %dfs.addr = alloca %struct.bitmap_head_def**, align 8
  %blocks.addr = alloca %struct.bitmap_head_def*, align 8
  %update_flags.addr = alloca i32, align 4
  %entry1 = alloca %struct.basic_block_def*, align 8
  %db = alloca %struct.def_blocks_d*, align 8
  %idf = alloca %struct.bitmap_head_def*, align 8
  %pruned_idf = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4738, metadata !DIExpression()), !dbg !4739
  store %struct.bitmap_head_def** %dfs, %struct.bitmap_head_def*** %dfs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %dfs.addr, metadata !4740, metadata !DIExpression()), !dbg !4741
  store %struct.bitmap_head_def* %blocks, %struct.bitmap_head_def** %blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %blocks.addr, metadata !4742, metadata !DIExpression()), !dbg !4743
  store i32 %update_flags, i32* %update_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %update_flags.addr, metadata !4744, metadata !DIExpression()), !dbg !4745
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry1, metadata !4746, metadata !DIExpression()), !dbg !4747
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db, metadata !4748, metadata !DIExpression()), !dbg !4749
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %idf, metadata !4750, metadata !DIExpression()), !dbg !4751
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %pruned_idf, metadata !4752, metadata !DIExpression()), !dbg !4753
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4754, metadata !DIExpression()), !dbg !4755
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4756, metadata !DIExpression()), !dbg !4757
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4758
  %call = call %struct.def_blocks_d* @find_def_blocks_for(%union.tree_node* %0), !dbg !4759
  store %struct.def_blocks_d* %call, %struct.def_blocks_d** %db, align 8, !dbg !4760
  %1 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db, align 8, !dbg !4761
  %cmp = icmp eq %struct.def_blocks_d* %1, null, !dbg !4763
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4764

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db, align 8, !dbg !4765
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %2, i32 0, i32 1, !dbg !4765
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !4765
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !4765
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4765
  %tobool = icmp ne %struct.bitmap_element_def* %4, null, !dbg !4765
  br i1 %tobool, label %if.end, label %if.then, !dbg !4766

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !4767

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db, align 8, !dbg !4768
  %def_blocks2 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %5, i32 0, i32 1, !dbg !4769
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks2, align 8, !dbg !4769
  %7 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs.addr, align 8, !dbg !4770
  %call3 = call %struct.bitmap_head_def* @compute_idf(%struct.bitmap_head_def* %6, %struct.bitmap_head_def** %7), !dbg !4771
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %idf, align 8, !dbg !4772
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4773
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4774
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4775
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4775
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4775
  %bf.load = load i64, i64* %9, align 8, !dbg !4775
  %bf.clear = and i64 %bf.load, 65535, !dbg !4775
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4775
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !4777
  br i1 %cmp5, label %if.then6, label %if.else50, !dbg !4778

if.then6:                                         ; preds = %if.end
  %10 = load i32, i32* %update_flags.addr, align 4, !dbg !4779
  %cmp7 = icmp eq i32 %10, 2048, !dbg !4782
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !4783

if.then8:                                         ; preds = %if.then6
  %11 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db, align 8, !dbg !4784
  %def_blocks9 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %11, i32 0, i32 1, !dbg !4786
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks9, align 8, !dbg !4786
  %call10 = call %struct.basic_block_def* @nearest_common_dominator_for_set(i32 1, %struct.bitmap_head_def* %12), !dbg !4787
  store %struct.basic_block_def* %call10, %struct.basic_block_def** %entry1, align 8, !dbg !4788
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %entry1, align 8, !dbg !4789
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4791
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4791
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4791
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4791
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !4791
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4791
  %cmp11 = icmp ne %struct.basic_block_def* %13, %16, !dbg !4792
  br i1 %cmp11, label %if.then12, label %if.end42, !dbg !4793

if.then12:                                        ; preds = %if.then8
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !4794
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %17, i32 0, i32* %i), !dbg !4794
  br label %for.cond, !dbg !4794

for.cond:                                         ; preds = %for.inc, %if.then12
  %call13 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4796
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4794
  br i1 %tobool14, label %for.body, label %for.end, !dbg !4794

for.body:                                         ; preds = %for.cond
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4798
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !4798
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !4798
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !4798
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 2, !dbg !4798
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4798
  %tobool17 = icmp ne %struct.VEC_basic_block_gc* %20, null, !dbg !4798
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !4798

cond.true:                                        ; preds = %for.body
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4798
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !4798
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !4798
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !4798
  %x_basic_block_info20 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 2, !dbg !4798
  %23 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info20, align 8, !dbg !4798
  %base21 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %23, i32 0, i32 0, !dbg !4798
  br label %cond.end, !dbg !4798

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4798

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base21, %cond.true ], [ null, %cond.false ], !dbg !4798
  %24 = load i32, i32* %i, align 4, !dbg !4798
  %call22 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %24), !dbg !4798
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %entry1, align 8, !dbg !4800
  %cmp23 = icmp ne %struct.basic_block_def* %call22, %25, !dbg !4801
  br i1 %cmp23, label %land.lhs.true, label %if.end41, !dbg !4802

land.lhs.true:                                    ; preds = %cond.end
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4803
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !4803
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !4803
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !4803
  %x_basic_block_info26 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 2, !dbg !4803
  %28 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info26, align 8, !dbg !4803
  %tobool27 = icmp ne %struct.VEC_basic_block_gc* %28, null, !dbg !4803
  br i1 %tobool27, label %cond.true28, label %cond.false33, !dbg !4803

cond.true28:                                      ; preds = %land.lhs.true
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4803
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !4803
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !4803
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !4803
  %x_basic_block_info31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 2, !dbg !4803
  %31 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info31, align 8, !dbg !4803
  %base32 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %31, i32 0, i32 0, !dbg !4803
  br label %cond.end34, !dbg !4803

cond.false33:                                     ; preds = %land.lhs.true
  br label %cond.end34, !dbg !4803

cond.end34:                                       ; preds = %cond.false33, %cond.true28
  %cond35 = phi %struct.VEC_basic_block_base* [ %base32, %cond.true28 ], [ null, %cond.false33 ], !dbg !4803
  %32 = load i32, i32* %i, align 4, !dbg !4803
  %call36 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond35, i32 %32), !dbg !4803
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %entry1, align 8, !dbg !4804
  %call37 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %call36, %struct.basic_block_def* %33), !dbg !4805
  %conv = zext i8 %call37 to i32, !dbg !4805
  %tobool38 = icmp ne i32 %conv, 0, !dbg !4805
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !4806

if.then39:                                        ; preds = %cond.end34
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4807
  %35 = load i32, i32* %i, align 4, !dbg !4808
  %call40 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %34, i32 %35), !dbg !4809
  br label %if.end41, !dbg !4809

if.end41:                                         ; preds = %if.then39, %cond.end34, %cond.end
  br label %for.inc, !dbg !4810

for.inc:                                          ; preds = %if.end41
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4796
  br label %for.cond, !dbg !4796, !llvm.loop !4811

for.end:                                          ; preds = %for.cond
  br label %if.end42, !dbg !4812

if.end42:                                         ; preds = %for.end, %if.then8
  br label %if.end49, !dbg !4813

if.else:                                          ; preds = %if.then6
  %36 = load i32, i32* %update_flags.addr, align 4, !dbg !4814
  %cmp43 = icmp eq i32 %36, 8192, !dbg !4814
  br i1 %cmp43, label %cond.false46, label %cond.true45, !dbg !4814

cond.true45:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 3054, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4814
  br label %cond.end47, !dbg !4814

cond.false46:                                     ; preds = %if.else
  br label %cond.end47, !dbg !4814

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !4814
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4816
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !4817
  call void @bitmap_copy(%struct.bitmap_head_def* %37, %struct.bitmap_head_def* %38), !dbg !4818
  br label %if.end49

if.end49:                                         ; preds = %cond.end47, %if.end42
  br label %if.end51, !dbg !4819

if.else50:                                        ; preds = %if.end
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4820
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !4822
  call void @bitmap_copy(%struct.bitmap_head_def* %39, %struct.bitmap_head_def* %40), !dbg !4823
  br label %if.end51

if.end51:                                         ; preds = %if.else50, %if.end49
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4824
  %first52 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %41, i32 0, i32 0, !dbg !4824
  %42 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first52, align 8, !dbg !4824
  %tobool53 = icmp ne %struct.bitmap_element_def* %42, null, !dbg !4824
  br i1 %tobool53, label %if.then54, label %if.end89, !dbg !4826

if.then54:                                        ; preds = %if.end51
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks.addr, align 8, !dbg !4827
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4829
  %call55 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %43, %struct.bitmap_head_def* %44), !dbg !4830
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4831
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %45, i32 0, i32* %i), !dbg !4831
  br label %for.cond56, !dbg !4831

for.cond56:                                       ; preds = %for.inc87, %if.then54
  %call57 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4833
  %tobool58 = icmp ne i8 %call57, 0, !dbg !4831
  br i1 %tobool58, label %for.body59, label %for.end88, !dbg !4831

for.body59:                                       ; preds = %for.cond56
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4835, metadata !DIExpression()), !dbg !4837
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4838, metadata !DIExpression()), !dbg !4839
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4840, metadata !DIExpression()), !dbg !4841
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4842
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !4842
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !4842
  %47 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !4842
  %x_basic_block_info62 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %47, i32 0, i32 2, !dbg !4842
  %48 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info62, align 8, !dbg !4842
  %tobool63 = icmp ne %struct.VEC_basic_block_gc* %48, null, !dbg !4842
  br i1 %tobool63, label %cond.true64, label %cond.false69, !dbg !4842

cond.true64:                                      ; preds = %for.body59
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4842
  %add.ptr65 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !4842
  %cfg66 = getelementptr inbounds %struct.function, %struct.function* %add.ptr65, i32 0, i32 1, !dbg !4842
  %50 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg66, align 8, !dbg !4842
  %x_basic_block_info67 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %50, i32 0, i32 2, !dbg !4842
  %51 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info67, align 8, !dbg !4842
  %base68 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %51, i32 0, i32 0, !dbg !4842
  br label %cond.end70, !dbg !4842

cond.false69:                                     ; preds = %for.body59
  br label %cond.end70, !dbg !4842

cond.end70:                                       ; preds = %cond.false69, %cond.true64
  %cond71 = phi %struct.VEC_basic_block_base* [ %base68, %cond.true64 ], [ null, %cond.false69 ], !dbg !4842
  %52 = load i32, i32* %i, align 4, !dbg !4842
  %call72 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond71, i32 %52), !dbg !4842
  store %struct.basic_block_def* %call72, %struct.basic_block_def** %bb, align 8, !dbg !4841
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4843
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 0, !dbg !4843
  %call73 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4843
  %54 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4843
  %55 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 0, !dbg !4843
  %56 = extractvalue { i32, %struct.VEC_edge_gc** } %call73, 0, !dbg !4843
  store i32 %56, i32* %55, align 8, !dbg !4843
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 1, !dbg !4843
  %58 = extractvalue { i32, %struct.VEC_edge_gc** } %call73, 1, !dbg !4843
  store %struct.VEC_edge_gc** %58, %struct.VEC_edge_gc*** %57, align 8, !dbg !4843
  %59 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4843
  %60 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4843
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false), !dbg !4843
  br label %for.cond74, !dbg !4843

for.cond74:                                       ; preds = %for.inc85, %cond.end70
  %61 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4845
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 0, !dbg !4845
  %63 = load i32, i32* %62, align 8, !dbg !4845
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 1, !dbg !4845
  %65 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %64, align 8, !dbg !4845
  %call75 = call zeroext i8 @ei_cond(i32 %63, %struct.VEC_edge_gc** %65, %struct.edge_def** %e), !dbg !4845
  %tobool76 = icmp ne i8 %call75, 0, !dbg !4843
  br i1 %tobool76, label %for.body77, label %for.end86, !dbg !4843

for.body77:                                       ; preds = %for.cond74
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4847
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 0, !dbg !4849
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4849
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 9, !dbg !4850
  %68 = load i32, i32* %index, align 8, !dbg !4850
  %cmp78 = icmp sge i32 %68, 0, !dbg !4851
  br i1 %cmp78, label %if.then80, label %if.end84, !dbg !4852

if.then80:                                        ; preds = %for.body77
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks.addr, align 8, !dbg !4853
  %70 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4854
  %src81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 0, !dbg !4855
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %src81, align 8, !dbg !4855
  %index82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 9, !dbg !4856
  %72 = load i32, i32* %index82, align 8, !dbg !4856
  %call83 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %69, i32 %72), !dbg !4857
  br label %if.end84, !dbg !4857

if.end84:                                         ; preds = %if.then80, %for.body77
  br label %for.inc85, !dbg !4858

for.inc85:                                        ; preds = %if.end84
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4845
  br label %for.cond74, !dbg !4845, !llvm.loop !4859

for.end86:                                        ; preds = %for.cond74
  br label %for.inc87, !dbg !4861

for.inc87:                                        ; preds = %for.end86
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4833
  br label %for.cond56, !dbg !4833, !llvm.loop !4862

for.end88:                                        ; preds = %for.cond56
  %73 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4864
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4865
  call void @insert_phi_nodes_for(%union.tree_node* %73, %struct.bitmap_head_def* %74, i8 zeroext 1), !dbg !4866
  br label %if.end89, !dbg !4867

if.end89:                                         ; preds = %for.end88, %if.end51
  %75 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4868
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %75), !dbg !4868
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %pruned_idf, align 8, !dbg !4868
  %76 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !4869
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %76), !dbg !4869
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %idf, align 8, !dbg !4869
  br label %return, !dbg !4870

return:                                           ; preds = %if.end89, %if.then
  ret void, !dbg !4870
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !4871 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !4874, metadata !DIExpression()), !dbg !4875
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !4876, metadata !DIExpression()), !dbg !4877
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4878
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !4880
  %1 = load i8*, i8** %popcount, align 8, !dbg !4880
  %tobool = icmp ne i8* %1, null, !dbg !4878
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4881

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !4882, metadata !DIExpression()), !dbg !4884
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4885
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !4885
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !4885
  %div = udiv i32 %3, 64, !dbg !4885
  %idxprom = zext i32 %div to i64, !dbg !4885
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !4885
  %4 = load i64, i64* %arrayidx, align 8, !dbg !4885
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !4885
  %rem = urem i32 %5, 64, !dbg !4885
  %sh_prom = zext i32 %rem to i64, !dbg !4885
  %shr = lshr i64 %4, %sh_prom, !dbg !4885
  %and = and i64 %shr, 1, !dbg !4885
  %conv = trunc i64 %and to i8, !dbg !4885
  store i8 %conv, i8* %oldbit, align 1, !dbg !4886
  %6 = load i8, i8* %oldbit, align 1, !dbg !4887
  %tobool1 = icmp ne i8 %6, 0, !dbg !4887
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !4889

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4890
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !4891
  %8 = load i8*, i8** %popcount3, align 8, !dbg !4891
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !4892
  %div4 = udiv i32 %9, 64, !dbg !4893
  %idxprom5 = zext i32 %div4 to i64, !dbg !4890
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !4890
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !4894
  %inc = add i8 %10, 1, !dbg !4894
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !4894
  br label %if.end, !dbg !4890

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !4895

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !4896
  %rem8 = urem i32 %11, 64, !dbg !4897
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !4898
  %shl = shl i64 1, %sh_prom9, !dbg !4898
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !4899
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !4900
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !4901
  %div11 = udiv i32 %13, 64, !dbg !4902
  %idxprom12 = zext i32 %div11 to i64, !dbg !4899
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !4899
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !4903
  %or = or i64 %14, %shl, !dbg !4903
  store i64 %or, i64* %arrayidx13, align 8, !dbg !4903
  ret void, !dbg !4904
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_blocks(%struct.basic_block_def* %entry1, i32 %what) #0 !dbg !4905 {
entry:
  %entry.addr = alloca %struct.basic_block_def*, align 8
  %what.addr = alloca i32, align 4
  %walk_data = alloca %struct.dom_walk_data, align 8
  store %struct.basic_block_def* %entry1, %struct.basic_block_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry.addr, metadata !4908, metadata !DIExpression()), !dbg !4909
  store i32 %what, i32* %what.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %what.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data* %walk_data, metadata !4912, metadata !DIExpression()), !dbg !4944
  br label %do.body, !dbg !4945

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !4946
  %tobool = icmp ne i8 %0, 0, !dbg !4946
  br i1 %tobool, label %if.then, label %if.end, !dbg !4949

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 58), !dbg !4946
  br label %if.end, !dbg !4946

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4949

do.end:                                           ; preds = %if.end
  %1 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !4950
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 64, i1 false), !dbg !4950
  %2 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !4951
  %bf.load = load i8, i8* %2, align 8, !dbg !4952
  %bf.clear = and i8 %bf.load, -4, !dbg !4952
  %bf.set = or i8 %bf.clear, 1, !dbg !4952
  store i8 %bf.set, i8* %2, align 8, !dbg !4952
  %3 = load i32, i32* %what.addr, align 4, !dbg !4953
  %cmp = icmp eq i32 %3, 0, !dbg !4955
  br i1 %cmp, label %if.then2, label %if.else, !dbg !4956

if.then2:                                         ; preds = %do.end
  %before_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !4957
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @rewrite_enter_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children, align 8, !dbg !4959
  %after_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 3, !dbg !4960
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @rewrite_leave_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %after_dom_children, align 8, !dbg !4961
  br label %if.end9, !dbg !4962

if.else:                                          ; preds = %do.end
  %4 = load i32, i32* %what.addr, align 4, !dbg !4963
  %cmp3 = icmp eq i32 %4, 1, !dbg !4965
  br i1 %cmp3, label %if.then4, label %if.else7, !dbg !4966

if.then4:                                         ; preds = %if.else
  %before_dom_children5 = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !4967
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @rewrite_update_enter_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children5, align 8, !dbg !4969
  %after_dom_children6 = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 3, !dbg !4970
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @rewrite_update_leave_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %after_dom_children6, align 8, !dbg !4971
  br label %if.end8, !dbg !4972

if.else7:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2209, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !4973
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.then4
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then2
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 10), !dbg !4974
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !4975
  call void @init_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !4976
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %entry.addr, align 8, !dbg !4977
  call void @walk_dominator_tree(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %5), !dbg !4978
  call void @fini_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !4979
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4980
  %tobool10 = icmp ne %struct._IO_FILE* %6, null, !dbg !4980
  br i1 %tobool10, label %land.lhs.true, label %if.end16, !dbg !4982

land.lhs.true:                                    ; preds = %if.end9
  %7 = load i32, i32* @dump_flags, align 4, !dbg !4983
  %and = and i32 %7, 16, !dbg !4984
  %tobool11 = icmp ne i32 %and, 0, !dbg !4984
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !4985

if.then12:                                        ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4986
  call void @dump_dfa_stats(%struct._IO_FILE* %8), !dbg !4988
  %9 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !4989
  %tobool13 = icmp ne %struct.htab* %9, null, !dbg !4989
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !4991

if.then14:                                        ; preds = %if.then12
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4992
  call void @dump_tree_ssa_stats(%struct._IO_FILE* %10), !dbg !4993
  br label %if.end15, !dbg !4993

if.end15:                                         ; preds = %if.then14, %if.then12
  br label %if.end16, !dbg !4994

if.end16:                                         ; preds = %if.end15, %land.lhs.true, %if.end9
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @block_defs_stack), !dbg !4995
  br label %do.body17, !dbg !4996

do.body17:                                        ; preds = %if.end16
  %11 = load i8, i8* @timevar_enable, align 1, !dbg !4997
  %tobool18 = icmp ne i8 %11, 0, !dbg !4997
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !5000

if.then19:                                        ; preds = %do.body17
  call void @timevar_pop_1(i32 58), !dbg !4997
  br label %if.end20, !dbg !4997

if.end20:                                         ; preds = %if.then19, %do.body17
  br label %do.end21, !dbg !5000

do.end21:                                         ; preds = %if.end20
  ret void, !dbg !5001
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ssa_name_info_p_base_length(%struct.VEC_ssa_name_info_p_base* %vec_) #0 !dbg !5002 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_name_info_p_base*, align 8
  store %struct.VEC_ssa_name_info_p_base* %vec_, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_name_info_p_base** %vec_.addr, metadata !5007, metadata !DIExpression()), !dbg !5008
  %0 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5008
  %tobool = icmp ne %struct.VEC_ssa_name_info_p_base* %0, null, !dbg !5008
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5008

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5008
  %num = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %1, i32 0, i32 0, !dbg !5008
  %2 = load i32, i32* %num, align 8, !dbg !5008
  br label %cond.end, !dbg !5008

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5008
  ret i32 %cond, !dbg !5008
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ssa_name_info_p_heap_reserve(%struct.VEC_ssa_name_info_p_heap** %vec_, i32 %alloc_) #0 !dbg !5009 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_name_info_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ssa_name_info_p_heap** %vec_, %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5015, metadata !DIExpression()), !dbg !5014
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5016, metadata !DIExpression()), !dbg !5014
  %0 = load %struct.VEC_ssa_name_info_p_heap**, %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, align 8, !dbg !5014
  %1 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** %0, align 8, !dbg !5014
  %tobool = icmp ne %struct.VEC_ssa_name_info_p_heap* %1, null, !dbg !5014
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5014

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ssa_name_info_p_heap**, %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, align 8, !dbg !5014
  %3 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** %2, align 8, !dbg !5014
  %base = getelementptr inbounds %struct.VEC_ssa_name_info_p_heap, %struct.VEC_ssa_name_info_p_heap* %3, i32 0, i32 0, !dbg !5014
  br label %cond.end, !dbg !5014

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5014

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ssa_name_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5014
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5014
  %call = call i32 @VEC_ssa_name_info_p_base_space(%struct.VEC_ssa_name_info_p_base* %cond, i32 %4), !dbg !5014
  %tobool1 = icmp ne i32 %call, 0, !dbg !5014
  %lnot = xor i1 %tobool1, true, !dbg !5014
  %lnot.ext = zext i1 %lnot to i32, !dbg !5014
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5014
  %5 = load i32, i32* %extend, align 4, !dbg !5017
  %tobool2 = icmp ne i32 %5, 0, !dbg !5017
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5014

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ssa_name_info_p_heap**, %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, align 8, !dbg !5017
  %7 = load %struct.VEC_ssa_name_info_p_heap*, %struct.VEC_ssa_name_info_p_heap** %6, align 8, !dbg !5017
  %8 = bitcast %struct.VEC_ssa_name_info_p_heap* %7 to i8*, !dbg !5017
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5017
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5017
  %10 = bitcast i8* %call3 to %struct.VEC_ssa_name_info_p_heap*, !dbg !5017
  %11 = load %struct.VEC_ssa_name_info_p_heap**, %struct.VEC_ssa_name_info_p_heap*** %vec_.addr, align 8, !dbg !5017
  store %struct.VEC_ssa_name_info_p_heap* %10, %struct.VEC_ssa_name_info_p_heap** %11, align 8, !dbg !5017
  br label %if.end, !dbg !5017

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5014
  ret i32 %12, !dbg !5014
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_name_info** @VEC_ssa_name_info_p_base_quick_push(%struct.VEC_ssa_name_info_p_base* %vec_, %struct.ssa_name_info* %obj_) #0 !dbg !5019 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_name_info_p_base*, align 8
  %obj_.addr = alloca %struct.ssa_name_info*, align 8
  %slot_ = alloca %struct.ssa_name_info**, align 8
  store %struct.VEC_ssa_name_info_p_base* %vec_, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_name_info_p_base** %vec_.addr, metadata !5024, metadata !DIExpression()), !dbg !5025
  store %struct.ssa_name_info* %obj_, %struct.ssa_name_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_name_info** %obj_.addr, metadata !5026, metadata !DIExpression()), !dbg !5025
  call void @llvm.dbg.declare(metadata %struct.ssa_name_info*** %slot_, metadata !5027, metadata !DIExpression()), !dbg !5025
  %0 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5025
  %num = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %0, i32 0, i32 0, !dbg !5025
  %1 = load i32, i32* %num, align 8, !dbg !5025
  %2 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5025
  %alloc = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %2, i32 0, i32 1, !dbg !5025
  %3 = load i32, i32* %alloc, align 4, !dbg !5025
  %cmp = icmp ult i32 %1, %3, !dbg !5025
  %conv = zext i1 %cmp to i32, !dbg !5025
  %4 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5025
  %vec = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %4, i32 0, i32 2, !dbg !5025
  %5 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5025
  %num1 = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %5, i32 0, i32 0, !dbg !5025
  %6 = load i32, i32* %num1, align 8, !dbg !5025
  %inc = add i32 %6, 1, !dbg !5025
  store i32 %inc, i32* %num1, align 8, !dbg !5025
  %idxprom = zext i32 %6 to i64, !dbg !5025
  %arrayidx = getelementptr inbounds [1 x %struct.ssa_name_info*], [1 x %struct.ssa_name_info*]* %vec, i64 0, i64 %idxprom, !dbg !5025
  store %struct.ssa_name_info** %arrayidx, %struct.ssa_name_info*** %slot_, align 8, !dbg !5025
  %7 = load %struct.ssa_name_info*, %struct.ssa_name_info** %obj_.addr, align 8, !dbg !5025
  %8 = load %struct.ssa_name_info**, %struct.ssa_name_info*** %slot_, align 8, !dbg !5025
  store %struct.ssa_name_info* %7, %struct.ssa_name_info** %8, align 8, !dbg !5025
  %9 = load %struct.ssa_name_info**, %struct.ssa_name_info*** %slot_, align 8, !dbg !5025
  ret %struct.ssa_name_info** %9, !dbg !5025
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_name_info* @VEC_ssa_name_info_p_base_index(%struct.VEC_ssa_name_info_p_base* %vec_, i32 %ix_) #0 !dbg !5028 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_name_info_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_ssa_name_info_p_base* %vec_, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_name_info_p_base** %vec_.addr, metadata !5031, metadata !DIExpression()), !dbg !5032
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5033, metadata !DIExpression()), !dbg !5032
  %0 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5032
  %tobool = icmp ne %struct.VEC_ssa_name_info_p_base* %0, null, !dbg !5032
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5032

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5032
  %2 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5032
  %num = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %2, i32 0, i32 0, !dbg !5032
  %3 = load i32, i32* %num, align 8, !dbg !5032
  %cmp = icmp ult i32 %1, %3, !dbg !5032
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5034
  %land.ext = zext i1 %4 to i32, !dbg !5032
  %5 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5032
  %vec = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %5, i32 0, i32 2, !dbg !5032
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5032
  %idxprom = zext i32 %6 to i64, !dbg !5032
  %arrayidx = getelementptr inbounds [1 x %struct.ssa_name_info*], [1 x %struct.ssa_name_info*]* %vec, i64 0, i64 %idxprom, !dbg !5032
  %7 = load %struct.ssa_name_info*, %struct.ssa_name_info** %arrayidx, align 8, !dbg !5032
  ret %struct.ssa_name_info* %7, !dbg !5032
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ssa_name_info_p_base_space(%struct.VEC_ssa_name_info_p_base* %vec_, i32 %alloc_) #0 !dbg !5035 {
entry:
  %vec_.addr = alloca %struct.VEC_ssa_name_info_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ssa_name_info_p_base* %vec_, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ssa_name_info_p_base** %vec_.addr, metadata !5038, metadata !DIExpression()), !dbg !5039
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5040, metadata !DIExpression()), !dbg !5039
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5039
  %cmp = icmp sge i32 %0, 0, !dbg !5039
  %conv = zext i1 %cmp to i32, !dbg !5039
  %1 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5039
  %tobool = icmp ne %struct.VEC_ssa_name_info_p_base* %1, null, !dbg !5039
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5039

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5039
  %alloc = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %2, i32 0, i32 1, !dbg !5039
  %3 = load i32, i32* %alloc, align 4, !dbg !5039
  %4 = load %struct.VEC_ssa_name_info_p_base*, %struct.VEC_ssa_name_info_p_base** %vec_.addr, align 8, !dbg !5039
  %num = getelementptr inbounds %struct.VEC_ssa_name_info_p_base, %struct.VEC_ssa_name_info_p_base* %4, i32 0, i32 0, !dbg !5039
  %5 = load i32, i32* %num, align 8, !dbg !5039
  %sub = sub i32 %3, %5, !dbg !5039
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5039
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5039
  %conv2 = zext i1 %cmp1 to i32, !dbg !5039
  br label %cond.end, !dbg !5039

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5039
  %tobool3 = icmp ne i32 %7, 0, !dbg !5039
  %lnot = xor i1 %tobool3, true, !dbg !5039
  %lnot.ext = zext i1 %lnot to i32, !dbg !5039
  br label %cond.end, !dbg !5039

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5039
  ret i32 %cond, !dbg !5039
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5041 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5044, metadata !DIExpression()), !dbg !5045
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5046
  %3 = load i32, i32* %index, align 8, !dbg !5046
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5047
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5047
  %6 = load i32, i32* %5, align 8, !dbg !5047
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5047
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5047
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5047
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5047
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5047

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5047
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5047
  %11 = load i32, i32* %10, align 8, !dbg !5047
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5047
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5047
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5047
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5047
  br label %cond.end, !dbg !5047

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5047

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5047
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5047
  %cmp = icmp eq i32 %3, %call2, !dbg !5048
  %conv = zext i1 %cmp to i32, !dbg !5048
  %conv3 = trunc i32 %conv to i8, !dbg !5049
  ret i8 %conv3, !dbg !5050
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5051 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5054, metadata !DIExpression()), !dbg !5055
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5056
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5056
  %5 = load i32, i32* %4, align 8, !dbg !5056
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5056
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5056
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5056
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5056
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5056

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5056
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5056
  %10 = load i32, i32* %9, align 8, !dbg !5056
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5056
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5056
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5056
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5056
  br label %cond.end, !dbg !5056

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5056
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5056
  %13 = load i32, i32* %index, align 8, !dbg !5056
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5056
  ret %struct.edge_def* %call2, !dbg !5057
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5058 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5063, metadata !DIExpression()), !dbg !5064
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5064
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5064
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5064

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5064
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5064
  %2 = load i32, i32* %num, align 8, !dbg !5064
  br label %cond.end, !dbg !5064

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5064

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5064
  ret i32 %cond, !dbg !5064
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5065 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5068, metadata !DIExpression()), !dbg !5069
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5070
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5070
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5070
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5070

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.38, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5070
  br label %cond.end, !dbg !5070

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5070

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5070
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5071
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5071
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5072
  ret %struct.VEC_edge_gc* %5, !dbg !5073
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5074 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5077, metadata !DIExpression()), !dbg !5078
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5079, metadata !DIExpression()), !dbg !5078
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5078
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5078
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5078

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5078
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5078
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5078
  %3 = load i32, i32* %num, align 8, !dbg !5078
  %cmp = icmp ult i32 %1, %3, !dbg !5078
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5080
  %land.ext = zext i1 %4 to i32, !dbg !5078
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5078
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5078
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5078
  %idxprom = zext i32 %6 to i64, !dbg !5078
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5078
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5078
  ret %struct.edge_def* %7, !dbg !5078
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @first_htab_element(%struct.htab_iterator* %hti, %struct.htab* %table) #0 !dbg !5081 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %table.addr = alloca %struct.htab*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5085, metadata !DIExpression()), !dbg !5086
  store %struct.htab* %table, %struct.htab** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %table.addr, metadata !5087, metadata !DIExpression()), !dbg !5088
  %0 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5089
  %1 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5090
  %htab = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %1, i32 0, i32 0, !dbg !5091
  store %struct.htab* %0, %struct.htab** %htab, align 8, !dbg !5092
  %2 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5093
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !5094
  %3 = load i8**, i8*** %entries, align 8, !dbg !5094
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5095
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !5096
  store i8** %3, i8*** %slot, align 8, !dbg !5097
  %5 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5098
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %5, i32 0, i32 1, !dbg !5099
  %6 = load i8**, i8*** %slot1, align 8, !dbg !5099
  %7 = load %struct.htab*, %struct.htab** %table.addr, align 8, !dbg !5100
  %call = call i64 @htab_size(%struct.htab* %7), !dbg !5101
  %add.ptr = getelementptr inbounds i8*, i8** %6, i64 %call, !dbg !5102
  %8 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5103
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %8, i32 0, i32 2, !dbg !5104
  store i8** %add.ptr, i8*** %limit, align 8, !dbg !5105
  br label %do.body, !dbg !5106

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata i8** %x, metadata !5107, metadata !DIExpression()), !dbg !5109
  %9 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5110
  %slot2 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %9, i32 0, i32 1, !dbg !5111
  %10 = load i8**, i8*** %slot2, align 8, !dbg !5111
  %11 = load i8*, i8** %10, align 8, !dbg !5112
  store i8* %11, i8** %x, align 8, !dbg !5109
  %12 = load i8*, i8** %x, align 8, !dbg !5113
  %cmp = icmp ne i8* %12, null, !dbg !5115
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5116

land.lhs.true:                                    ; preds = %do.body
  %13 = load i8*, i8** %x, align 8, !dbg !5117
  %cmp3 = icmp ne i8* %13, inttoptr (i64 1 to i8*), !dbg !5118
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5119

if.then:                                          ; preds = %land.lhs.true
  br label %do.end, !dbg !5120

if.end:                                           ; preds = %land.lhs.true, %do.body
  br label %do.cond, !dbg !5121

do.cond:                                          ; preds = %if.end
  %14 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5122
  %slot4 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %14, i32 0, i32 1, !dbg !5123
  %15 = load i8**, i8*** %slot4, align 8, !dbg !5124
  %incdec.ptr = getelementptr inbounds i8*, i8** %15, i32 1, !dbg !5124
  store i8** %incdec.ptr, i8*** %slot4, align 8, !dbg !5124
  %16 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5125
  %limit5 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %16, i32 0, i32 2, !dbg !5126
  %17 = load i8**, i8*** %limit5, align 8, !dbg !5126
  %cmp6 = icmp ult i8** %incdec.ptr, %17, !dbg !5127
  br i1 %cmp6, label %do.body, label %do.end, !dbg !5121, !llvm.loop !5128

do.end:                                           ; preds = %do.cond, %if.then
  %18 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5130
  %slot7 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %18, i32 0, i32 1, !dbg !5132
  %19 = load i8**, i8*** %slot7, align 8, !dbg !5132
  %20 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5133
  %limit8 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %20, i32 0, i32 2, !dbg !5134
  %21 = load i8**, i8*** %limit8, align 8, !dbg !5134
  %cmp9 = icmp ult i8** %19, %21, !dbg !5135
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !5136

if.then10:                                        ; preds = %do.end
  %22 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5137
  %slot11 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %22, i32 0, i32 1, !dbg !5138
  %23 = load i8**, i8*** %slot11, align 8, !dbg !5138
  %24 = load i8*, i8** %23, align 8, !dbg !5139
  store i8* %24, i8** %retval, align 8, !dbg !5140
  br label %return, !dbg !5140

if.end12:                                         ; preds = %do.end
  store i8* null, i8** %retval, align 8, !dbg !5141
  br label %return, !dbg !5141

return:                                           ; preds = %if.end12, %if.then10
  %25 = load i8*, i8** %retval, align 8, !dbg !5142
  ret i8* %25, !dbg !5142
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.htab* @gimple_referenced_vars(%struct.function* %fun) #0 !dbg !5143 {
entry:
  %retval = alloca %struct.htab*, align 8
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !5148, metadata !DIExpression()), !dbg !5149
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5150
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 3, !dbg !5152
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5152
  %tobool = icmp ne %struct.gimple_df* %1, null, !dbg !5150
  br i1 %tobool, label %if.end, label %if.then, !dbg !5153

if.then:                                          ; preds = %entry
  store %struct.htab* null, %struct.htab** %retval, align 8, !dbg !5154
  br label %return, !dbg !5154

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !5155
  %gimple_df1 = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 3, !dbg !5156
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df1, align 8, !dbg !5156
  %referenced_vars = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 0, !dbg !5157
  %4 = load %struct.htab*, %struct.htab** %referenced_vars, align 8, !dbg !5157
  store %struct.htab* %4, %struct.htab** %retval, align 8, !dbg !5158
  br label %return, !dbg !5158

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.htab*, %struct.htab** %retval, align 8, !dbg !5159
  ret %struct.htab* %5, !dbg !5159
}

declare dso_local i64 @htab_size(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_htab_p(%struct.htab_iterator* %hti) #0 !dbg !5160 {
entry:
  %retval = alloca i8, align 1
  %hti.addr = alloca %struct.htab_iterator*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5165, metadata !DIExpression()), !dbg !5166
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5167
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !5169
  %1 = load i8**, i8*** %slot, align 8, !dbg !5169
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5170
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !5171
  %3 = load i8**, i8*** %limit, align 8, !dbg !5171
  %cmp = icmp uge i8** %1, %3, !dbg !5172
  br i1 %cmp, label %if.then, label %if.end, !dbg !5173

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5174
  br label %return, !dbg !5174

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5175
  br label %return, !dbg !5175

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !5176
  ret i8 %4, !dbg !5176
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @next_htab_element(%struct.htab_iterator* %hti) #0 !dbg !5177 {
entry:
  %retval = alloca i8*, align 8
  %hti.addr = alloca %struct.htab_iterator*, align 8
  %x = alloca i8*, align 8
  store %struct.htab_iterator* %hti, %struct.htab_iterator** %hti.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab_iterator** %hti.addr, metadata !5180, metadata !DIExpression()), !dbg !5181
  br label %while.cond, !dbg !5182

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5183
  %slot = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %0, i32 0, i32 1, !dbg !5184
  %1 = load i8**, i8*** %slot, align 8, !dbg !5185
  %incdec.ptr = getelementptr inbounds i8*, i8** %1, i32 1, !dbg !5185
  store i8** %incdec.ptr, i8*** %slot, align 8, !dbg !5185
  %2 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5186
  %limit = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %2, i32 0, i32 2, !dbg !5187
  %3 = load i8**, i8*** %limit, align 8, !dbg !5187
  %cmp = icmp ult i8** %incdec.ptr, %3, !dbg !5188
  br i1 %cmp, label %while.body, label %while.end, !dbg !5182

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %x, metadata !5189, metadata !DIExpression()), !dbg !5191
  %4 = load %struct.htab_iterator*, %struct.htab_iterator** %hti.addr, align 8, !dbg !5192
  %slot1 = getelementptr inbounds %struct.htab_iterator, %struct.htab_iterator* %4, i32 0, i32 1, !dbg !5193
  %5 = load i8**, i8*** %slot1, align 8, !dbg !5193
  %6 = load i8*, i8** %5, align 8, !dbg !5194
  store i8* %6, i8** %x, align 8, !dbg !5191
  %7 = load i8*, i8** %x, align 8, !dbg !5195
  %cmp2 = icmp ne i8* %7, null, !dbg !5197
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !5198

land.lhs.true:                                    ; preds = %while.body
  %8 = load i8*, i8** %x, align 8, !dbg !5199
  %cmp3 = icmp ne i8* %8, inttoptr (i64 1 to i8*), !dbg !5200
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5201

if.then:                                          ; preds = %land.lhs.true
  %9 = load i8*, i8** %x, align 8, !dbg !5202
  store i8* %9, i8** %retval, align 8, !dbg !5203
  br label %return, !dbg !5203

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond, !dbg !5182, !llvm.loop !5204

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval, align 8, !dbg !5206
  br label %return, !dbg !5206

return:                                           ; preds = %while.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !5207
  ret i8* %10, !dbg !5207
}

declare dso_local double @htab_collisions(%struct.htab*) #2

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

declare dso_local void @init_ssa_operands() #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_ssa_renamer() #0 !dbg !5208 {
entry:
  %var = alloca %union.tree_node*, align 8
  %rvi = alloca %struct.referenced_var_iterator, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5209, metadata !DIExpression()), !dbg !5210
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !5211, metadata !DIExpression()), !dbg !5212
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5213
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5213
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5214
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5214
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 10, !dbg !5215
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !5216
  %bf.clear = and i8 %bf.load, -2, !dbg !5216
  store i8 %bf.clear, i8* %in_ssa_p, align 8, !dbg !5216
  %2 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !5217
  %cmp = icmp eq %struct.htab* %2, null, !dbg !5217
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5217

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2310, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5217
  br label %cond.end, !dbg !5217

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5217
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5218
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5218
  %call = call %struct.htab* @gimple_referenced_vars(%struct.function* %add.ptr1), !dbg !5218
  %call2 = call i64 @htab_elements(%struct.htab* %call), !dbg !5218
  %call3 = call %struct.htab* @htab_create(i64 %call2, i32 (i8*)* @def_blocks_hash, i32 (i8*, i8*)* @def_blocks_eq, void (i8*)* @def_blocks_free), !dbg !5219
  store %struct.htab* %call3, %struct.htab** @def_blocks, align 8, !dbg !5220
  %call4 = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5221
  store %union.tree_node* %call4, %union.tree_node** %var, align 8, !dbg !5221
  br label %for.cond, !dbg !5221

for.cond:                                         ; preds = %for.inc, %cond.end
  %call5 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !5223
  %tobool = icmp ne i8 %call5, 0, !dbg !5223
  %lnot = xor i1 %tobool, true, !dbg !5223
  br i1 %lnot, label %for.body, label %for.end, !dbg !5221

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5225
  call void @set_current_def(%union.tree_node* %4, %union.tree_node* null), !dbg !5226
  br label %for.inc, !dbg !5226

for.inc:                                          ; preds = %for.body
  %call6 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5223
  store %union.tree_node* %call6, %union.tree_node** %var, align 8, !dbg !5223
  br label %for.cond, !dbg !5223, !llvm.loop !5227

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5229
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_def_site_blocks() #0 !dbg !5230 {
entry:
  %walk_data = alloca %struct.dom_walk_data, align 8
  %mark_def_sites_global_data = alloca %struct.mark_def_sites_global_data, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data* %walk_data, metadata !5231, metadata !DIExpression()), !dbg !5232
  call void @llvm.dbg.declare(metadata %struct.mark_def_sites_global_data* %mark_def_sites_global_data, metadata !5233, metadata !DIExpression()), !dbg !5234
  %0 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !5235
  %bf.load = load i8, i8* %0, align 8, !dbg !5236
  %bf.clear = and i8 %bf.load, -4, !dbg !5236
  %bf.set = or i8 %bf.clear, 1, !dbg !5236
  store i8 %bf.set, i8* %0, align 8, !dbg !5236
  %initialize_block_local_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 1, !dbg !5237
  store void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)* null, void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)** %initialize_block_local_data, align 8, !dbg !5238
  %before_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !5239
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @mark_def_sites_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children, align 8, !dbg !5240
  %after_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 3, !dbg !5241
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* null, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %after_dom_children, align 8, !dbg !5242
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5243
  %kills = getelementptr inbounds %struct.mark_def_sites_global_data, %struct.mark_def_sites_global_data* %mark_def_sites_global_data, i32 0, i32 0, !dbg !5244
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %kills, align 8, !dbg !5245
  %1 = bitcast %struct.mark_def_sites_global_data* %mark_def_sites_global_data to i8*, !dbg !5246
  %global_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 4, !dbg !5247
  store i8* %1, i8** %global_data, align 8, !dbg !5248
  %block_local_data_size = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 6, !dbg !5249
  store i64 0, i64* %block_local_data_size, align 8, !dbg !5250
  call void @init_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !5251
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5252
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5252
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5252
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5252
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !5252
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5252
  call void @walk_dominator_tree(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %4), !dbg !5253
  call void @fini_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !5254
  %kills1 = getelementptr inbounds %struct.mark_def_sites_global_data, %struct.mark_def_sites_global_data* %mark_def_sites_global_data, i32 0, i32 0, !dbg !5255
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills1, align 8, !dbg !5255
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %5), !dbg !5255
  %kills2 = getelementptr inbounds %struct.mark_def_sites_global_data, %struct.mark_def_sites_global_data* %mark_def_sites_global_data, i32 0, i32 0, !dbg !5255
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %kills2, align 8, !dbg !5255
  ret void, !dbg !5256
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_phi_nodes(%struct.bitmap_head_def** %dfs) #0 !dbg !5257 {
entry:
  %dfs.addr = alloca %struct.bitmap_head_def**, align 8
  %rvi = alloca %struct.referenced_var_iterator, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %var = alloca %union.tree_node*, align 8
  %vars = alloca %struct.bitmap_head_def*, align 8
  %uid = alloca i32, align 4
  %def_map = alloca %struct.def_blocks_d*, align 8
  %var18 = alloca %union.tree_node*, align 8
  %def_map20 = alloca %struct.def_blocks_d*, align 8
  %idf = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def** %dfs, %struct.bitmap_head_def*** %dfs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %dfs.addr, metadata !5260, metadata !DIExpression()), !dbg !5261
  call void @llvm.dbg.declare(metadata %struct.referenced_var_iterator* %rvi, metadata !5262, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5264, metadata !DIExpression()), !dbg !5265
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5266, metadata !DIExpression()), !dbg !5267
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %vars, metadata !5268, metadata !DIExpression()), !dbg !5269
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !5270, metadata !DIExpression()), !dbg !5271
  br label %do.body, !dbg !5272

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !5273
  %tobool = icmp ne i8 %0, 0, !dbg !5273
  br i1 %tobool, label %if.then, label %if.end, !dbg !5276

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 57), !dbg !5273
  br label %if.end, !dbg !5273

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !5276

do.end:                                           ; preds = %if.end
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !5277
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %vars, align 8, !dbg !5278
  %call1 = call %union.tree_node* @first_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5279
  store %union.tree_node* %call1, %union.tree_node** %var, align 8, !dbg !5279
  br label %for.cond, !dbg !5279

for.cond:                                         ; preds = %for.inc, %do.end
  %call2 = call zeroext i8 @end_referenced_vars_p(%struct.referenced_var_iterator* %rvi), !dbg !5281
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5281
  %lnot = xor i1 %tobool3, true, !dbg !5281
  br i1 %lnot, label %for.body, label %for.end, !dbg !5279

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %def_map, metadata !5283, metadata !DIExpression()), !dbg !5285
  %1 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5286
  %call4 = call %struct.def_blocks_d* @find_def_blocks_for(%union.tree_node* %1), !dbg !5287
  store %struct.def_blocks_d* %call4, %struct.def_blocks_d** %def_map, align 8, !dbg !5288
  %2 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map, align 8, !dbg !5289
  %cmp = icmp eq %struct.def_blocks_d* %2, null, !dbg !5291
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !5292

if.then5:                                         ; preds = %for.body
  br label %for.inc, !dbg !5293

if.end6:                                          ; preds = %for.body
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5294
  %call7 = call i32 @get_phi_state(%union.tree_node* %3), !dbg !5296
  %cmp8 = icmp ne i32 %call7, 1, !dbg !5297
  br i1 %cmp8, label %if.then9, label %if.end12, !dbg !5298

if.then9:                                         ; preds = %if.end6
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !5299
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5300
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !5300
  %uid10 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5300
  %6 = load i32, i32* %uid10, align 4, !dbg !5300
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %6), !dbg !5301
  br label %if.end12, !dbg !5301

if.end12:                                         ; preds = %if.then9, %if.end6
  br label %for.inc, !dbg !5302

for.inc:                                          ; preds = %if.end12, %if.then5
  %call13 = call %union.tree_node* @next_referenced_var(%struct.referenced_var_iterator* %rvi), !dbg !5281
  store %union.tree_node* %call13, %union.tree_node** %var, align 8, !dbg !5281
  br label %for.cond, !dbg !5281, !llvm.loop !5303

for.end:                                          ; preds = %for.cond
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !5305
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %7, i32 0, i32* %uid), !dbg !5305
  br label %for.cond14, !dbg !5305

for.cond14:                                       ; preds = %for.inc23, %for.end
  %call15 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %uid), !dbg !5307
  %tobool16 = icmp ne i8 %call15, 0, !dbg !5305
  br i1 %tobool16, label %for.body17, label %for.end24, !dbg !5305

for.body17:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata %union.tree_node** %var18, metadata !5309, metadata !DIExpression()), !dbg !5311
  %8 = load i32, i32* %uid, align 4, !dbg !5312
  %call19 = call %union.tree_node* @referenced_var_lookup(i32 %8), !dbg !5312
  store %union.tree_node* %call19, %union.tree_node** %var18, align 8, !dbg !5311
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %def_map20, metadata !5313, metadata !DIExpression()), !dbg !5314
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %idf, metadata !5315, metadata !DIExpression()), !dbg !5316
  %9 = load %union.tree_node*, %union.tree_node** %var18, align 8, !dbg !5317
  %call21 = call %struct.def_blocks_d* @find_def_blocks_for(%union.tree_node* %9), !dbg !5318
  store %struct.def_blocks_d* %call21, %struct.def_blocks_d** %def_map20, align 8, !dbg !5319
  %10 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map20, align 8, !dbg !5320
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %10, i32 0, i32 1, !dbg !5321
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !5321
  %12 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %dfs.addr, align 8, !dbg !5322
  %call22 = call %struct.bitmap_head_def* @compute_idf(%struct.bitmap_head_def* %11, %struct.bitmap_head_def** %12), !dbg !5323
  store %struct.bitmap_head_def* %call22, %struct.bitmap_head_def** %idf, align 8, !dbg !5324
  %13 = load %union.tree_node*, %union.tree_node** %var18, align 8, !dbg !5325
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !5326
  call void @insert_phi_nodes_for(%union.tree_node* %13, %struct.bitmap_head_def* %14, i8 zeroext 0), !dbg !5327
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %idf, align 8, !dbg !5328
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %15), !dbg !5328
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %idf, align 8, !dbg !5328
  br label %for.inc23, !dbg !5329

for.inc23:                                        ; preds = %for.body17
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %uid), !dbg !5307
  br label %for.cond14, !dbg !5307, !llvm.loop !5330

for.end24:                                        ; preds = %for.cond14
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !5332
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %16), !dbg !5332
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %vars, align 8, !dbg !5332
  br label %do.body25, !dbg !5333

do.body25:                                        ; preds = %for.end24
  %17 = load i8, i8* @timevar_enable, align 1, !dbg !5334
  %tobool26 = icmp ne i8 %17, 0, !dbg !5334
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !5337

if.then27:                                        ; preds = %do.body25
  call void @timevar_pop_1(i32 57), !dbg !5334
  br label %if.end28, !dbg !5334

if.end28:                                         ; preds = %if.then27, %do.body25
  br label %do.end29, !dbg !5337

do.end29:                                         ; preds = %if.end28
  ret void, !dbg !5338
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_def_sites_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !5339 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gd = alloca %struct.mark_def_sites_global_data*, align 8
  %kills = alloca %struct.bitmap_head_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !5340, metadata !DIExpression()), !dbg !5341
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5342, metadata !DIExpression()), !dbg !5343
  call void @llvm.dbg.declare(metadata %struct.mark_def_sites_global_data** %gd, metadata !5344, metadata !DIExpression()), !dbg !5345
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %kills, metadata !5346, metadata !DIExpression()), !dbg !5347
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5348, metadata !DIExpression()), !dbg !5349
  %0 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !5350
  %global_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %0, i32 0, i32 4, !dbg !5351
  %1 = load i8*, i8** %global_data, align 8, !dbg !5351
  %2 = bitcast i8* %1 to %struct.mark_def_sites_global_data*, !dbg !5352
  store %struct.mark_def_sites_global_data* %2, %struct.mark_def_sites_global_data** %gd, align 8, !dbg !5353
  %3 = load %struct.mark_def_sites_global_data*, %struct.mark_def_sites_global_data** %gd, align 8, !dbg !5354
  %kills1 = getelementptr inbounds %struct.mark_def_sites_global_data, %struct.mark_def_sites_global_data* %3, i32 0, i32 0, !dbg !5355
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills1, align 8, !dbg !5355
  store %struct.bitmap_head_def* %4, %struct.bitmap_head_def** %kills, align 8, !dbg !5356
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills, align 8, !dbg !5357
  call void @bitmap_clear(%struct.bitmap_head_def* %5), !dbg !5358
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5359
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %6), !dbg !5361
  %7 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5361
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5361
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !5361
  br label %for.cond, !dbg !5362

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5363
  %tobool = icmp ne i8 %call, 0, !dbg !5365
  %lnot = xor i1 %tobool, true, !dbg !5365
  br i1 %lnot, label %for.body, label %for.end, !dbg !5366

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5367
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5368
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills, align 8, !dbg !5369
  call void @mark_def_sites(%struct.basic_block_def* %9, %union.gimple_statement_d* %call2, %struct.bitmap_head_def* %10), !dbg !5370
  br label %for.inc, !dbg !5370

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5371
  br label %for.cond, !dbg !5372, !llvm.loop !5373

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5375
}

declare dso_local void @init_walk_dominator_tree(%struct.dom_walk_data*) #2

declare dso_local void @walk_dominator_tree(%struct.dom_walk_data*, %struct.basic_block_def*) #2

declare dso_local void @fini_walk_dominator_tree(%struct.dom_walk_data*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5376 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5379, metadata !DIExpression()), !dbg !5380
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5381, metadata !DIExpression()), !dbg !5382
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5383, metadata !DIExpression()), !dbg !5384
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5385
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5386
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5387
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5388
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5389
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5390
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5391
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5392
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5393
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5394
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5395
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5396
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5397
  ret void, !dbg !5398
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5399 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5402, metadata !DIExpression()), !dbg !5403
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5404
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5404
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5405
  %conv = zext i1 %cmp to i32, !dbg !5405
  %conv1 = trunc i32 %conv to i8, !dbg !5406
  ret i8 %conv1, !dbg !5407
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_def_sites(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt, %struct.bitmap_head_def* %kills) #0 !dbg !5408 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %kills.addr = alloca %struct.bitmap_head_def*, align 8
  %def = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %sym = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5411, metadata !DIExpression()), !dbg !5412
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  store %struct.bitmap_head_def* %kills, %struct.bitmap_head_def** %kills.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %kills.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !5417, metadata !DIExpression()), !dbg !5418
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5419, metadata !DIExpression()), !dbg !5420
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !5421, metadata !DIExpression()), !dbg !5422
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5423
  call void @update_stmt(%union.gimple_statement_d* %0), !dbg !5424
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !5425
  %cmp = icmp eq %struct.bitmap_head_def* %1, null, !dbg !5425
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5425

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5425
  br label %cond.end, !dbg !5425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5425
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5426
  call void @set_register_defs(%union.gimple_statement_d* %2, i8 zeroext 0), !dbg !5427
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5428
  call void @set_rewrite_uses(%union.gimple_statement_d* %3, i8 zeroext 0), !dbg !5429
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5430
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %4), !dbg !5432
  %tobool = icmp ne i8 %call, 0, !dbg !5432
  br i1 %tobool, label %if.then, label %if.end, !dbg !5433

if.then:                                          ; preds = %cond.end
  br label %if.end44, !dbg !5434

if.end:                                           ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5435
  %call1 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %5, i32 1), !dbg !5435
  store %struct.ssa_use_operand_d* %call1, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5435
  br label %for.cond, !dbg !5435

for.cond:                                         ; preds = %for.inc, %if.end
  %call2 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5437
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5437
  %lnot = xor i1 %tobool3, true, !dbg !5437
  br i1 %lnot, label %for.body, label %for.end, !dbg !5435

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !5439, metadata !DIExpression()), !dbg !5441
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5442
  %call4 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %6), !dbg !5442
  store %union.tree_node* %call4, %union.tree_node** %sym, align 8, !dbg !5441
  %7 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !5443
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5443
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !5443
  %bf.load = load i64, i64* %8, align 8, !dbg !5443
  %bf.clear = and i64 %bf.load, 65535, !dbg !5443
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5443
  %idxprom = sext i32 %bf.cast to i64, !dbg !5443
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5443
  %9 = load i32, i32* %arrayidx, align 4, !dbg !5443
  %cmp5 = icmp eq i32 %9, 3, !dbg !5443
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !5443

cond.true6:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5443
  br label %cond.end8, !dbg !5443

cond.false7:                                      ; preds = %for.body
  br label %cond.end8, !dbg !5443

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !5443
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills.addr, align 8, !dbg !5444
  %11 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !5446
  %decl_minimal = bitcast %union.tree_node* %11 to %struct.tree_decl_minimal*, !dbg !5446
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5446
  %12 = load i32, i32* %uid, align 4, !dbg !5446
  %call10 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %10, i32 %12), !dbg !5447
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5447
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !5448

if.then12:                                        ; preds = %cond.end8
  %13 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !5449
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5450
  call void @set_livein_block(%union.tree_node* %13, %struct.basic_block_def* %14), !dbg !5451
  br label %if.end13, !dbg !5451

if.end13:                                         ; preds = %if.then12, %cond.end8
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5452
  call void @set_rewrite_uses(%union.gimple_statement_d* %15, i8 zeroext 1), !dbg !5453
  br label %for.inc, !dbg !5454

for.inc:                                          ; preds = %if.end13
  %call14 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !5437
  store %struct.ssa_use_operand_d* %call14, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5437
  br label %for.cond, !dbg !5437, !llvm.loop !5455

for.end:                                          ; preds = %for.cond
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5457
  %call15 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %16, i32 2), !dbg !5457
  store %union.tree_node* %call15, %union.tree_node** %def, align 8, !dbg !5457
  br label %for.cond16, !dbg !5457

for.cond16:                                       ; preds = %for.inc35, %for.end
  %call17 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5459
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5459
  %lnot19 = xor i1 %tobool18, true, !dbg !5459
  br i1 %lnot19, label %for.body20, label %for.end37, !dbg !5457

for.body20:                                       ; preds = %for.cond16
  %17 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5461
  %base21 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5461
  %18 = bitcast %struct.tree_base* %base21 to i64*, !dbg !5461
  %bf.load22 = load i64, i64* %18, align 8, !dbg !5461
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !5461
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !5461
  %idxprom25 = sext i32 %bf.cast24 to i64, !dbg !5461
  %arrayidx26 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom25, !dbg !5461
  %19 = load i32, i32* %arrayidx26, align 4, !dbg !5461
  %cmp27 = icmp eq i32 %19, 3, !dbg !5461
  br i1 %cmp27, label %cond.false29, label %cond.true28, !dbg !5461

cond.true28:                                      ; preds = %for.body20
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 770, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5461
  br label %cond.end30, !dbg !5461

cond.false29:                                     ; preds = %for.body20
  br label %cond.end30, !dbg !5461

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !5461
  %20 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5463
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5464
  call void @set_def_block(%union.tree_node* %20, %struct.basic_block_def* %21, i8 zeroext 0), !dbg !5465
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills.addr, align 8, !dbg !5466
  %23 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5467
  %decl_minimal32 = bitcast %union.tree_node* %23 to %struct.tree_decl_minimal*, !dbg !5467
  %uid33 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal32, i32 0, i32 2, !dbg !5467
  %24 = load i32, i32* %uid33, align 4, !dbg !5467
  %call34 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %22, i32 %24), !dbg !5468
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5469
  call void @set_register_defs(%union.gimple_statement_d* %25, i8 zeroext 1), !dbg !5470
  br label %for.inc35, !dbg !5471

for.inc35:                                        ; preds = %cond.end30
  %call36 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !5459
  store %union.tree_node* %call36, %union.tree_node** %def, align 8, !dbg !5459
  br label %for.cond16, !dbg !5459, !llvm.loop !5472

for.end37:                                        ; preds = %for.cond16
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5474
  %call38 = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %26), !dbg !5476
  %conv = zext i8 %call38 to i32, !dbg !5476
  %tobool39 = icmp ne i32 %conv, 0, !dbg !5476
  br i1 %tobool39, label %if.then43, label %lor.lhs.false, !dbg !5477

lor.lhs.false:                                    ; preds = %for.end37
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5478
  %call40 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %27), !dbg !5479
  %conv41 = zext i8 %call40 to i32, !dbg !5479
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !5479
  br i1 %tobool42, label %if.then43, label %if.end44, !dbg !5480

if.then43:                                        ; preds = %lor.lhs.false, %for.end37
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !5481
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5482
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 9, !dbg !5483
  %30 = load i32, i32* %index, align 8, !dbg !5483
  call void @SET_BIT(%struct.simple_bitmap_def* %28, i32 %30), !dbg !5484
  br label %if.end44, !dbg !5484

if.end44:                                         ; preds = %if.then, %if.then43, %lor.lhs.false
  ret void, !dbg !5485
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5486 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5489, metadata !DIExpression()), !dbg !5490
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5491
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5491
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5492
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5492
  ret %union.gimple_statement_d* %1, !dbg !5493
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5494 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5498, metadata !DIExpression()), !dbg !5499
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5500
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5501
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5501
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5502
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5502
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5503
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5504
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5505
  ret void, !dbg !5506
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5507 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5513, metadata !DIExpression()), !dbg !5514
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5515
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5516
  %1 = load i32, i32* %flags, align 8, !dbg !5516
  %and = and i32 %1, 512, !dbg !5517
  %tobool = icmp ne i32 %and, 0, !dbg !5517
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5518

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5519
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5520
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5521
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5521
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5519
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5522

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5523
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5524
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5525
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5525
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5526
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5526
  br label %cond.end, !dbg !5522

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5522
  ret %struct.gimple_seq_d* %cond, !dbg !5527
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5528 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5534, metadata !DIExpression()), !dbg !5535
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5536
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5536
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5536

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5537
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5538
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5538
  br label %cond.end, !dbg !5536

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5536

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5536
  ret %struct.gimple_seq_node_d* %cond, !dbg !5539
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5540 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5543, metadata !DIExpression()), !dbg !5544
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5545
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5547
  %tobool = icmp ne i8 %call, 0, !dbg !5547
  br i1 %tobool, label %if.then, label %if.end, !dbg !5548

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5549
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5551
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5552
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5553
  br label %if.end, !dbg !5554

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5555
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_register_defs(%union.gimple_statement_d* %stmt, i8 zeroext %register_defs_p) #0 !dbg !5556 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %register_defs_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  store i8 %register_defs_p, i8* %register_defs_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %register_defs_p.addr, metadata !5561, metadata !DIExpression()), !dbg !5562
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5563
  %1 = load i8, i8* %register_defs_p.addr, align 1, !dbg !5564
  call void @gimple_set_plf(%union.gimple_statement_d* %0, i32 1, i8 zeroext %1), !dbg !5565
  ret void, !dbg !5566
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_rewrite_uses(%union.gimple_statement_d* %stmt, i8 zeroext %rewrite_p) #0 !dbg !5567 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rewrite_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5568, metadata !DIExpression()), !dbg !5569
  store i8 %rewrite_p, i8* %rewrite_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %rewrite_p.addr, metadata !5570, metadata !DIExpression()), !dbg !5571
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5572
  %1 = load i8, i8* %rewrite_p.addr, align 1, !dbg !5573
  call void @gimple_set_visited(%union.gimple_statement_d* %0, i8 zeroext %1), !dbg !5574
  ret void, !dbg !5575
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5576 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5579, metadata !DIExpression()), !dbg !5580
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5581
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5582
  %cmp = icmp eq i32 %call, 2, !dbg !5583
  %conv = zext i1 %cmp to i32, !dbg !5583
  %conv1 = trunc i32 %conv to i8, !dbg !5582
  ret i8 %conv1, !dbg !5584
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5585 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5589, metadata !DIExpression()), !dbg !5590
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5591, metadata !DIExpression()), !dbg !5592
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5593, metadata !DIExpression()), !dbg !5594
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5595
  %and = and i32 %0, 10, !dbg !5595
  %cmp = icmp eq i32 %and, 0, !dbg !5595
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5595

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5595
  %and1 = and i32 %1, 1, !dbg !5595
  %tobool = icmp ne i32 %and1, 0, !dbg !5595
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5595

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5595
  br label %cond.end, !dbg !5595

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5595

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5595
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5596
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5597
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5598
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !5599
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5600
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !5601
  store i32 2, i32* %iter_type, align 4, !dbg !5602
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5603
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !5604
  ret %struct.ssa_use_operand_d* %call, !dbg !5605
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5606 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5611, metadata !DIExpression()), !dbg !5612
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5613
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !5614
  %1 = load i8, i8* %done, align 8, !dbg !5614
  ret i8 %1, !dbg !5615
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5616 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5619, metadata !DIExpression()), !dbg !5620
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5621
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5622
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5622
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5623
  ret %union.tree_node* %2, !dbg !5624
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_livein_block(%union.tree_node* %var, %struct.basic_block_def* %bb) #0 !dbg !5625 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %db_p = alloca %struct.def_blocks_d*, align 8
  %state = alloca i32, align 4
  %def_block_index = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5628, metadata !DIExpression()), !dbg !5629
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5630, metadata !DIExpression()), !dbg !5631
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db_p, metadata !5632, metadata !DIExpression()), !dbg !5633
  call void @llvm.dbg.declare(metadata i32* %state, metadata !5634, metadata !DIExpression()), !dbg !5635
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5636
  %call = call i32 @get_phi_state(%union.tree_node* %0), !dbg !5637
  store i32 %call, i32* %state, align 4, !dbg !5635
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5638
  %call1 = call %struct.def_blocks_d* @get_def_blocks_for(%union.tree_node* %1), !dbg !5639
  store %struct.def_blocks_d* %call1, %struct.def_blocks_d** %db_p, align 8, !dbg !5640
  %2 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !5641
  %livein_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %2, i32 0, i32 3, !dbg !5642
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein_blocks, align 8, !dbg !5642
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5643
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !5644
  %5 = load i32, i32* %index, align 8, !dbg !5644
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %5), !dbg !5645
  %6 = load i32, i32* %state, align 4, !dbg !5646
  %cmp = icmp eq i32 %6, 1, !dbg !5648
  br i1 %cmp, label %if.then, label %if.else, !dbg !5649

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %def_block_index, metadata !5650, metadata !DIExpression()), !dbg !5652
  %7 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !5653
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %7, i32 0, i32 1, !dbg !5654
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !5654
  %call3 = call i32 @bitmap_first_set_bit(%struct.bitmap_head_def* %8), !dbg !5655
  store i32 %call3, i32* %def_block_index, align 4, !dbg !5652
  %9 = load i32, i32* %def_block_index, align 4, !dbg !5656
  %cmp4 = icmp eq i32 %9, -1, !dbg !5658
  br i1 %cmp4, label %if.then11, label %lor.lhs.false, !dbg !5659

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5660
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5661
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5661
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5661
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5661
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 2, !dbg !5661
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !5661
  %tobool = icmp ne %struct.VEC_basic_block_gc* %13, null, !dbg !5661
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5661

cond.true:                                        ; preds = %lor.lhs.false
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5661
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5661
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !5661
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !5661
  %x_basic_block_info7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 2, !dbg !5661
  %16 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info7, align 8, !dbg !5661
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %16, i32 0, i32 0, !dbg !5661
  br label %cond.end, !dbg !5661

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !5661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5661
  %17 = load i32, i32* %def_block_index, align 4, !dbg !5661
  %call8 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %17), !dbg !5661
  %call9 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %10, %struct.basic_block_def* %call8), !dbg !5662
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5662
  br i1 %tobool10, label %if.end, label %if.then11, !dbg !5663

if.then11:                                        ; preds = %cond.end, %if.then
  %18 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5664
  call void @set_phi_state(%union.tree_node* %18, i32 2), !dbg !5665
  br label %if.end, !dbg !5665

if.end:                                           ; preds = %if.then11, %cond.end
  br label %if.end12, !dbg !5666

if.else:                                          ; preds = %entry
  %19 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5667
  call void @set_phi_state(%union.tree_node* %19, i32 2), !dbg !5668
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.end
  ret void, !dbg !5669
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5670 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5673, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5675, metadata !DIExpression()), !dbg !5676
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5677
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5679
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5679
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5677
  br i1 %tobool, label %if.then, label %if.end, !dbg !5680

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5681
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5681
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5681
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5681
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5683
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5684
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5685
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5685
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5686
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5686
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5687
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5688
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5689
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5690
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5691
  br label %return, !dbg !5691

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5692
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !5694
  %10 = load i32, i32* %phi_i, align 8, !dbg !5694
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5695
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !5696
  %12 = load i32, i32* %num_phi, align 4, !dbg !5696
  %cmp = icmp slt i32 %10, %12, !dbg !5697
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !5698

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5699
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !5699
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5699
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5699
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !5699
  %16 = load i32, i32* %phi_i5, align 8, !dbg !5699
  %inc = add nsw i32 %16, 1, !dbg !5699
  store i32 %inc, i32* %phi_i5, align 8, !dbg !5699
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !5699
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5701
  br label %return, !dbg !5701

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5702
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !5703
  store i8 1, i8* %done, align 8, !dbg !5704
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5705
  br label %return, !dbg !5705

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5706
  ret %struct.ssa_use_operand_d* %18, !dbg !5706
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5707 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5710, metadata !DIExpression()), !dbg !5711
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5712, metadata !DIExpression()), !dbg !5713
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5714, metadata !DIExpression()), !dbg !5715
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5716
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5717
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5718
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !5719
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5720
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !5721
  store i32 1, i32* %iter_type, align 4, !dbg !5722
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5723
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !5724
  ret %union.tree_node* %call, !dbg !5725
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_def_block(%union.tree_node* %var, %struct.basic_block_def* %bb, i8 zeroext %phi_p) #0 !dbg !5726 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %phi_p.addr = alloca i8, align 1
  %db_p = alloca %struct.def_blocks_d*, align 8
  %state = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5729, metadata !DIExpression()), !dbg !5730
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5731, metadata !DIExpression()), !dbg !5732
  store i8 %phi_p, i8* %phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %phi_p.addr, metadata !5733, metadata !DIExpression()), !dbg !5734
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db_p, metadata !5735, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.declare(metadata i32* %state, metadata !5737, metadata !DIExpression()), !dbg !5738
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5739
  %call = call i32 @get_phi_state(%union.tree_node* %0), !dbg !5740
  store i32 %call, i32* %state, align 4, !dbg !5741
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5742
  %call1 = call %struct.def_blocks_d* @get_def_blocks_for(%union.tree_node* %1), !dbg !5743
  store %struct.def_blocks_d* %call1, %struct.def_blocks_d** %db_p, align 8, !dbg !5744
  %2 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !5745
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %2, i32 0, i32 1, !dbg !5746
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !5746
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5747
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !5748
  %5 = load i32, i32* %index, align 8, !dbg !5748
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %5), !dbg !5749
  %6 = load i8, i8* %phi_p.addr, align 1, !dbg !5750
  %tobool = icmp ne i8 %6, 0, !dbg !5750
  br i1 %tobool, label %if.then, label %if.end, !dbg !5752

if.then:                                          ; preds = %entry
  %7 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !5753
  %phi_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %7, i32 0, i32 2, !dbg !5754
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_blocks, align 8, !dbg !5754
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5755
  %index3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !5756
  %10 = load i32, i32* %index3, align 8, !dbg !5756
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %10), !dbg !5757
  br label %if.end, !dbg !5757

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, i32* %state, align 4, !dbg !5758
  %cmp = icmp eq i32 %11, 0, !dbg !5760
  br i1 %cmp, label %if.then5, label %if.else, !dbg !5761

if.then5:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5762
  call void @set_phi_state(%union.tree_node* %12, i32 1), !dbg !5763
  br label %if.end6, !dbg !5763

if.else:                                          ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5764
  call void @set_phi_state(%union.tree_node* %13, i32 2), !dbg !5765
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  ret void, !dbg !5766
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5767 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5770, metadata !DIExpression()), !dbg !5771
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !5772, metadata !DIExpression()), !dbg !5773
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5774
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5776
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5776
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5774
  br i1 %tobool, label %if.then, label %if.end, !dbg !5777

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5778
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5778
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5778
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5778
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !5778
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !5780
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5781
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5782
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5782
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5783
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5783
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5784
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5785
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5786
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5787
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5788
  br label %return, !dbg !5788

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5789
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !5791
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !5791
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !5789
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !5792

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5793
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5793
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !5793
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !5793
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5793
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !5793
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !5795
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5796
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5797
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !5797
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !5798
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !5798
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5799
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !5800
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !5801
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5802
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !5803
  br label %return, !dbg !5803

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5804
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !5805
  store i8 1, i8* %done, align 8, !dbg !5806
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5807
  br label %return, !dbg !5807

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5808
  ret %union.tree_node* %20, !dbg !5808
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %stmt) #0 !dbg !5809 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5812, metadata !DIExpression()), !dbg !5813
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5814
  %call = call zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %0), !dbg !5815
  ret i8 %call, !dbg !5816
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @register_defs_p(%union.gimple_statement_d* %stmt) #0 !dbg !5817 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5820
  %call = call i32 @gimple_plf(%union.gimple_statement_d* %0, i32 1), !dbg !5821
  %cmp = icmp ne i32 %call, 0, !dbg !5822
  %conv = zext i1 %cmp to i32, !dbg !5822
  %conv1 = trunc i32 %conv to i8, !dbg !5821
  ret i8 %conv1, !dbg !5823
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5824 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5825, metadata !DIExpression()), !dbg !5826
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5827
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5828
  %cmp = icmp uge i32 %call, 1, !dbg !5829
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5830

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5831
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5832
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5833
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5834
  %land.ext = zext i1 %2 to i32, !dbg !5830
  %conv = trunc i32 %land.ext to i8, !dbg !5828
  ret i8 %conv, !dbg !5835
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_plf(%union.gimple_statement_d* %stmt, i32 %plf, i8 zeroext %val_p) #0 !dbg !5836 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  %val_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5839, metadata !DIExpression()), !dbg !5840
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !5841, metadata !DIExpression()), !dbg !5842
  store i8 %val_p, i8* %val_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %val_p.addr, metadata !5843, metadata !DIExpression()), !dbg !5844
  %0 = load i8, i8* %val_p.addr, align 1, !dbg !5845
  %tobool = icmp ne i8 %0, 0, !dbg !5845
  br i1 %tobool, label %if.then, label %if.else, !dbg !5847

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %plf.addr, align 4, !dbg !5848
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5849
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !5850
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5851
  %bf.load = load i32, i32* %3, align 8, !dbg !5852
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5852
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5852
  %or = or i32 %bf.clear, %1, !dbg !5852
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5852
  %bf.value = and i32 %or, 3, !dbg !5852
  %bf.shl = shl i32 %bf.value, 11, !dbg !5852
  %bf.clear2 = and i32 %bf.load1, -6145, !dbg !5852
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !5852
  store i32 %bf.set, i32* %3, align 8, !dbg !5852
  br label %if.end, !dbg !5849

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %plf.addr, align 4, !dbg !5853
  %neg = xor i32 %4, -1, !dbg !5854
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5855
  %gsbase3 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_base*, !dbg !5856
  %6 = bitcast %struct.gimple_statement_base* %gsbase3 to i32*, !dbg !5857
  %bf.load4 = load i32, i32* %6, align 8, !dbg !5858
  %bf.lshr5 = lshr i32 %bf.load4, 11, !dbg !5858
  %bf.clear6 = and i32 %bf.lshr5, 3, !dbg !5858
  %and = and i32 %bf.clear6, %neg, !dbg !5858
  %bf.load7 = load i32, i32* %6, align 8, !dbg !5858
  %bf.value8 = and i32 %and, 3, !dbg !5858
  %bf.shl9 = shl i32 %bf.value8, 11, !dbg !5858
  %bf.clear10 = and i32 %bf.load7, -6145, !dbg !5858
  %bf.set11 = or i32 %bf.clear10, %bf.shl9, !dbg !5858
  store i32 %bf.set11, i32* %6, align 8, !dbg !5858
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5859
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) #0 !dbg !5860 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5861, metadata !DIExpression()), !dbg !5862
  store i8 %visited_p, i8* %visited_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %visited_p.addr, metadata !5863, metadata !DIExpression()), !dbg !5864
  %0 = load i8, i8* %visited_p.addr, align 1, !dbg !5865
  %conv = zext i8 %0 to i32, !dbg !5866
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5867
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5868
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5869
  %bf.load = load i32, i32* %2, align 8, !dbg !5870
  %bf.value = and i32 %conv, 1, !dbg !5870
  %bf.shl = shl i32 %bf.value, 9, !dbg !5870
  %bf.clear = and i32 %bf.load, -513, !dbg !5870
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !5870
  store i32 %bf.set, i32* %2, align 8, !dbg !5870
  ret void, !dbg !5871
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5872 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5877, metadata !DIExpression()), !dbg !5878
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5879, metadata !DIExpression()), !dbg !5880
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5881
  %and = and i32 %0, 8, !dbg !5881
  %tobool = icmp ne i32 %and, 0, !dbg !5881
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !5881

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5881
  %and1 = and i32 %1, 2, !dbg !5881
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5881
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !5881

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5881
  %and3 = and i32 %2, 4, !dbg !5881
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5881
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !5881

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5881
  %and6 = and i32 %3, 1, !dbg !5881
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5881
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !5881

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !5881
  br label %cond.end, !dbg !5881

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !5881

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5881
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5882
  %and8 = and i32 %4, 10, !dbg !5883
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5883
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5884

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5885
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !5886
  br label %cond.end12, !dbg !5884

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5884

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !5884
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5887
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !5888
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !5889
  %7 = load i32, i32* %flags.addr, align 4, !dbg !5890
  %and14 = and i32 %7, 8, !dbg !5892
  %tobool15 = icmp ne i32 %and14, 0, !dbg !5892
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !5893

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5894
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !5895
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !5895
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !5894
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !5896

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5897
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !5898
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !5899
  br i1 %cmp, label %if.then, label %if.end, !dbg !5900

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5901
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5902
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !5902
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !5903
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !5903
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5904
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5905
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !5906
  br label %if.end, !dbg !5904

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !5907
  %and23 = and i32 %15, 5, !dbg !5908
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5908
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5909

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5910
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !5911
  br label %cond.end28, !dbg !5909

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5909

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5909
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5912
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !5913
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !5914
  %18 = load i32, i32* %flags.addr, align 4, !dbg !5915
  %and30 = and i32 %18, 4, !dbg !5917
  %tobool31 = icmp ne i32 %and30, 0, !dbg !5917
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !5918

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5919
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !5920
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !5920
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !5919
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !5921

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5922
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !5923
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !5924
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5925

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5926
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !5927
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !5927
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !5928
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !5928
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5929
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !5930
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !5931
  br label %if.end42, !dbg !5929

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5932
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !5933
  store i8 0, i8* %done, align 8, !dbg !5934
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5935
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !5936
  store i32 0, i32* %phi_i, align 8, !dbg !5937
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5938
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !5939
  store i32 0, i32* %num_phi, align 4, !dbg !5940
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5941
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !5942
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5943
  ret void, !dbg !5944
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !5945 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5948, metadata !DIExpression()), !dbg !5949
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5950
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5952
  %tobool = icmp ne i8 %call, 0, !dbg !5952
  br i1 %tobool, label %if.end, label %if.then, !dbg !5953

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !5954
  br label %return, !dbg !5954

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5955
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5956
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5957
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5958
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5958
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !5959
  br label %return, !dbg !5959

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !5960
  ret %struct.def_optype_d* %3, !dbg !5960
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5961 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5964, metadata !DIExpression()), !dbg !5965
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5966
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5968
  %tobool = icmp ne i8 %call, 0, !dbg !5968
  br i1 %tobool, label %if.end, label %if.then, !dbg !5969

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5970
  br label %return, !dbg !5970

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5971
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5972
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5973
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5973
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5974
  br label %return, !dbg !5974

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5975
  ret %union.tree_node* %3, !dbg !5975
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !5976 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5979, metadata !DIExpression()), !dbg !5980
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5981
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5983
  %tobool = icmp ne i8 %call, 0, !dbg !5983
  br i1 %tobool, label %if.end, label %if.then, !dbg !5984

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !5985
  br label %return, !dbg !5985

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5986
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5987
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5988
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5989
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5989
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !5990
  br label %return, !dbg !5990

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !5991
  ret %struct.use_optype_d* %3, !dbg !5991
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5992 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5993, metadata !DIExpression()), !dbg !5994
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5995
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5997
  %tobool = icmp ne i8 %call, 0, !dbg !5997
  br i1 %tobool, label %if.end, label %if.then, !dbg !5998

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5999
  br label %return, !dbg !5999

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6000
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6001
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6002
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6002
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6003
  br label %return, !dbg !6003

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6004
  ret %union.tree_node* %3, !dbg !6004
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6005 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6006, metadata !DIExpression()), !dbg !6007
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6008
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6009
  %cmp = icmp uge i32 %call, 6, !dbg !6010
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6011

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6012
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6013
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6014
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6015
  %land.ext = zext i1 %2 to i32, !dbg !6011
  %conv = trunc i32 %land.ext to i8, !dbg !6009
  ret i8 %conv, !dbg !6016
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_phi_state(%union.tree_node* %var) #0 !dbg !6017 {
entry:
  %retval = alloca i32, align 4
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6020, metadata !DIExpression()), !dbg !6021
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6022
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6022
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6022
  %bf.load = load i64, i64* %1, align 8, !dbg !6022
  %bf.clear = and i64 %bf.load, 65535, !dbg !6022
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6022
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6024
  br i1 %cmp, label %if.then, label %if.else, !dbg !6025

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6026
  %call = call %struct.ssa_name_info* @get_ssa_name_ann(%union.tree_node* %2), !dbg !6027
  %need_phi_state = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %call, i32 0, i32 1, !dbg !6028
  %bf.load1 = load i8, i8* %need_phi_state, align 8, !dbg !6028
  %bf.clear2 = and i8 %bf.load1, 3, !dbg !6028
  %bf.cast3 = zext i8 %bf.clear2 to i32, !dbg !6028
  store i32 %bf.cast3, i32* %retval, align 4, !dbg !6029
  br label %return, !dbg !6029

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6030
  %call4 = call %struct.var_ann_d* @var_ann(%union.tree_node* %3), !dbg !6031
  %4 = bitcast %struct.var_ann_d* %call4 to i8*, !dbg !6032
  %bf.load5 = load i8, i8* %4, align 8, !dbg !6032
  %bf.lshr = lshr i8 %bf.load5, 2, !dbg !6032
  %bf.clear6 = and i8 %bf.lshr, 3, !dbg !6032
  %bf.cast7 = zext i8 %bf.clear6 to i32, !dbg !6032
  store i32 %bf.cast7, i32* %retval, align 4, !dbg !6033
  br label %return, !dbg !6033

return:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !6034
  ret i32 %5, !dbg !6034
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_blocks_d* @get_def_blocks_for(%union.tree_node* %var) #0 !dbg !6035 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %db = alloca %struct.def_blocks_d, align 8
  %db_p = alloca %struct.def_blocks_d*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d* %db, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db_p, metadata !6042, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6044, metadata !DIExpression()), !dbg !6045
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6046
  %var1 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %db, i32 0, i32 0, !dbg !6047
  store %union.tree_node* %0, %union.tree_node** %var1, align 8, !dbg !6048
  %1 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !6049
  %2 = bitcast %struct.def_blocks_d* %db to i8*, !dbg !6050
  %call = call i8** @htab_find_slot(%struct.htab* %1, i8* %2, i32 1), !dbg !6051
  store i8** %call, i8*** %slot, align 8, !dbg !6052
  %3 = load i8**, i8*** %slot, align 8, !dbg !6053
  %4 = load i8*, i8** %3, align 8, !dbg !6055
  %cmp = icmp eq i8* %4, null, !dbg !6056
  br i1 %cmp, label %if.then, label %if.else, !dbg !6057

if.then:                                          ; preds = %entry
  %call2 = call i8* @xmalloc(i64 32), !dbg !6058
  %5 = bitcast i8* %call2 to %struct.def_blocks_d*, !dbg !6058
  store %struct.def_blocks_d* %5, %struct.def_blocks_d** %db_p, align 8, !dbg !6060
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6061
  %7 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6062
  %var3 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %7, i32 0, i32 0, !dbg !6063
  store %union.tree_node* %6, %union.tree_node** %var3, align 8, !dbg !6064
  %call4 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6065
  %8 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6066
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %8, i32 0, i32 1, !dbg !6067
  store %struct.bitmap_head_def* %call4, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !6068
  %call5 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6069
  %9 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6070
  %phi_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %9, i32 0, i32 2, !dbg !6071
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** %phi_blocks, align 8, !dbg !6072
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6073
  %10 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6074
  %livein_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %10, i32 0, i32 3, !dbg !6075
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %livein_blocks, align 8, !dbg !6076
  %11 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6077
  %12 = bitcast %struct.def_blocks_d* %11 to i8*, !dbg !6078
  %13 = load i8**, i8*** %slot, align 8, !dbg !6079
  store i8* %12, i8** %13, align 8, !dbg !6080
  br label %if.end, !dbg !6081

if.else:                                          ; preds = %entry
  %14 = load i8**, i8*** %slot, align 8, !dbg !6082
  %15 = load i8*, i8** %14, align 8, !dbg !6083
  %16 = bitcast i8* %15 to %struct.def_blocks_d*, !dbg !6084
  store %struct.def_blocks_d* %16, %struct.def_blocks_d** %db_p, align 8, !dbg !6085
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !6086
  ret %struct.def_blocks_d* %17, !dbg !6087
}

declare dso_local i32 @bitmap_first_set_bit(%struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_phi_state(%union.tree_node* %var, i32 %state) #0 !dbg !6088 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %state.addr = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6091, metadata !DIExpression()), !dbg !6092
  store i32 %state, i32* %state.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %state.addr, metadata !6093, metadata !DIExpression()), !dbg !6094
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6095
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6095
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6095
  %bf.load = load i64, i64* %1, align 8, !dbg !6095
  %bf.clear = and i64 %bf.load, 65535, !dbg !6095
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6095
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6097
  br i1 %cmp, label %if.then, label %if.else, !dbg !6098

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %state.addr, align 4, !dbg !6099
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6100
  %call = call %struct.ssa_name_info* @get_ssa_name_ann(%union.tree_node* %3), !dbg !6101
  %need_phi_state = getelementptr inbounds %struct.ssa_name_info, %struct.ssa_name_info* %call, i32 0, i32 1, !dbg !6102
  %4 = trunc i32 %2 to i8, !dbg !6103
  %bf.load1 = load i8, i8* %need_phi_state, align 8, !dbg !6103
  %bf.value = and i8 %4, 3, !dbg !6103
  %bf.clear2 = and i8 %bf.load1, -4, !dbg !6103
  %bf.set = or i8 %bf.clear2, %bf.value, !dbg !6103
  store i8 %bf.set, i8* %need_phi_state, align 8, !dbg !6103
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !6103
  br label %if.end, !dbg !6101

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %state.addr, align 4, !dbg !6104
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6105
  %call3 = call %struct.var_ann_d* @var_ann(%union.tree_node* %6), !dbg !6106
  %7 = bitcast %struct.var_ann_d* %call3 to i8*, !dbg !6107
  %8 = trunc i32 %5 to i8, !dbg !6108
  %bf.load4 = load i8, i8* %7, align 8, !dbg !6108
  %bf.value5 = and i8 %8, 3, !dbg !6108
  %bf.shl = shl i8 %bf.value5, 2, !dbg !6108
  %bf.clear6 = and i8 %bf.load4, -13, !dbg !6108
  %bf.set7 = or i8 %bf.clear6, %bf.shl, !dbg !6108
  store i8 %bf.set7, i8* %7, align 8, !dbg !6108
  %bf.result.cast8 = zext i8 %bf.value5 to i32, !dbg !6108
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6109
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6110 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6113, metadata !DIExpression()), !dbg !6114
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6115, metadata !DIExpression()), !dbg !6116
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6117
  %1 = load i32, i32* %i.addr, align 4, !dbg !6118
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !6119
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !6120
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6121
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6122 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6125, metadata !DIExpression()), !dbg !6126
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  %0 = load i32, i32* %index.addr, align 4, !dbg !6129
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6129
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6129
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6129
  %2 = load i32, i32* %capacity, align 8, !dbg !6129
  %cmp = icmp ule i32 %0, %2, !dbg !6129
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6129

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6129
  br label %cond.end, !dbg !6129

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6129

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6129
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6130
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6131
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6132
  %4 = load i32, i32* %index.addr, align 4, !dbg !6133
  %idxprom = zext i32 %4 to i64, !dbg !6130
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6130
  ret %struct.phi_arg_d* %arrayidx, !dbg !6134
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6135 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6138, metadata !DIExpression()), !dbg !6139
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6140
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6141
  ret %union.tree_node* %1, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %stmt) #0 !dbg !6143 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6144, metadata !DIExpression()), !dbg !6145
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6146
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6147
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6148
  %bf.load = load i32, i32* %1, align 8, !dbg !6148
  %bf.lshr = lshr i32 %bf.load, 9, !dbg !6148
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6148
  %conv = trunc i32 %bf.clear to i8, !dbg !6146
  ret i8 %conv, !dbg !6149
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_plf(%union.gimple_statement_d* %stmt, i32 %plf) #0 !dbg !6150 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6153, metadata !DIExpression()), !dbg !6154
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !6155, metadata !DIExpression()), !dbg !6156
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6157
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6158
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6159
  %bf.load = load i32, i32* %1, align 8, !dbg !6159
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !6159
  %bf.clear = and i32 %bf.lshr, 3, !dbg !6159
  %2 = load i32, i32* %plf.addr, align 4, !dbg !6160
  %and = and i32 %bf.clear, %2, !dbg !6161
  ret i32 %and, !dbg !6162
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_blocks_d* @find_def_blocks_for(%union.tree_node* %var) #0 !dbg !6163 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %dm = alloca %struct.def_blocks_d, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d* %dm, metadata !6166, metadata !DIExpression()), !dbg !6167
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6168
  %var1 = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %dm, i32 0, i32 0, !dbg !6169
  store %union.tree_node* %0, %union.tree_node** %var1, align 8, !dbg !6170
  %1 = load %struct.htab*, %struct.htab** @def_blocks, align 8, !dbg !6171
  %2 = bitcast %struct.def_blocks_d* %dm to i8*, !dbg !6172
  %call = call i8* @htab_find(%struct.htab* %1, i8* %2), !dbg !6173
  %3 = bitcast i8* %call to %struct.def_blocks_d*, !dbg !6174
  ret %struct.def_blocks_d* %3, !dbg !6175
}

declare dso_local %struct.bitmap_head_def* @compute_idf(%struct.bitmap_head_def*, %struct.bitmap_head_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_phi_nodes_for(%union.tree_node* %var, %struct.bitmap_head_def* %phi_insertion_points, i8 zeroext %update_p) #0 !dbg !6176 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %phi_insertion_points.addr = alloca %struct.bitmap_head_def*, align 8
  %update_p.addr = alloca i8, align 1
  %bb_index = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %def_map = alloca %struct.def_blocks_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %new_lhs = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tracked_var = alloca %union.tree_node*, align 8
  %note = alloca %union.gimple_statement_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6179, metadata !DIExpression()), !dbg !6180
  store %struct.bitmap_head_def* %phi_insertion_points, %struct.bitmap_head_def** %phi_insertion_points.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %phi_insertion_points.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  store i8 %update_p, i8* %update_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_p.addr, metadata !6183, metadata !DIExpression()), !dbg !6184
  call void @llvm.dbg.declare(metadata i32* %bb_index, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6187, metadata !DIExpression()), !dbg !6188
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6189, metadata !DIExpression()), !dbg !6190
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6191, metadata !DIExpression()), !dbg !6192
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !6193, metadata !DIExpression()), !dbg !6194
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %def_map, metadata !6195, metadata !DIExpression()), !dbg !6196
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6197
  %call = call %struct.def_blocks_d* @find_def_blocks_for(%union.tree_node* %0), !dbg !6198
  store %struct.def_blocks_d* %call, %struct.def_blocks_d** %def_map, align 8, !dbg !6199
  %1 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map, align 8, !dbg !6200
  %tobool = icmp ne %struct.def_blocks_d* %1, null, !dbg !6200
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6200

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1082, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6200
  br label %cond.end, !dbg !6200

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6200
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_insertion_points.addr, align 8, !dbg !6201
  %3 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map, align 8, !dbg !6202
  %phi_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %3, i32 0, i32 2, !dbg !6203
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_blocks, align 8, !dbg !6203
  %call1 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %2, %struct.bitmap_head_def* %4), !dbg !6204
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_insertion_points.addr, align 8, !dbg !6205
  %6 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map, align 8, !dbg !6206
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %6, i32 0, i32 1, !dbg !6207
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !6207
  %8 = load %struct.def_blocks_d*, %struct.def_blocks_d** %def_map, align 8, !dbg !6208
  %livein_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %8, i32 0, i32 3, !dbg !6209
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %livein_blocks, align 8, !dbg !6209
  call void @prune_unused_phi_nodes(%struct.bitmap_head_def* %5, %struct.bitmap_head_def* %7, %struct.bitmap_head_def* %9), !dbg !6210
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phi_insertion_points.addr, align 8, !dbg !6211
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %10, i32 0, i32* %bb_index), !dbg !6211
  br label %for.cond, !dbg !6211

for.cond:                                         ; preds = %for.inc46, %cond.end
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !6213
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6211
  br i1 %tobool3, label %for.body, label %for.end47, !dbg !6211

for.body:                                         ; preds = %for.cond
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6215
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !6215
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6215
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6215
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 2, !dbg !6215
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6215
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %13, null, !dbg !6215
  br i1 %tobool4, label %cond.true5, label %cond.false9, !dbg !6215

cond.true5:                                       ; preds = %for.body
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6215
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6215
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !6215
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !6215
  %x_basic_block_info8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 2, !dbg !6215
  %16 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info8, align 8, !dbg !6215
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %16, i32 0, i32 0, !dbg !6215
  br label %cond.end10, !dbg !6215

cond.false9:                                      ; preds = %for.body
  br label %cond.end10, !dbg !6215

cond.end10:                                       ; preds = %cond.false9, %cond.true5
  %cond11 = phi %struct.VEC_basic_block_base* [ %base, %cond.true5 ], [ null, %cond.false9 ], !dbg !6215
  %17 = load i32, i32* %bb_index, align 4, !dbg !6215
  %call12 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond11, i32 %17), !dbg !6215
  store %struct.basic_block_def* %call12, %struct.basic_block_def** %bb, align 8, !dbg !6217
  %18 = load i8, i8* %update_p.addr, align 1, !dbg !6218
  %tobool13 = icmp ne i8 %18, 0, !dbg !6218
  br i1 %tobool13, label %if.then, label %if.end, !dbg !6220

if.then:                                          ; preds = %cond.end10
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6221
  call void @mark_block_for_update(%struct.basic_block_def* %19), !dbg !6222
  br label %if.end, !dbg !6222

if.end:                                           ; preds = %if.then, %cond.end10
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi, align 8, !dbg !6223
  %20 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6224
  %base14 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6224
  %21 = bitcast %struct.tree_base* %base14 to i64*, !dbg !6224
  %bf.load = load i64, i64* %21, align 8, !dbg !6224
  %bf.clear = and i64 %bf.load, 65535, !dbg !6224
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6224
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6226
  br i1 %cmp, label %if.then15, label %if.else, !dbg !6227

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6228, metadata !DIExpression()), !dbg !6230
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_lhs, metadata !6231, metadata !DIExpression()), !dbg !6232
  %22 = load i8, i8* %update_p.addr, align 1, !dbg !6233
  %tobool16 = icmp ne i8 %22, 0, !dbg !6233
  br i1 %tobool16, label %cond.false18, label %cond.true17, !dbg !6233

cond.true17:                                      ; preds = %if.then15
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6233
  br label %cond.end19, !dbg !6233

cond.false18:                                     ; preds = %if.then15
  br label %cond.end19, !dbg !6233

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !6233
  %23 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6234
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6235
  %call21 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %23, %struct.basic_block_def* %24), !dbg !6236
  store %union.gimple_statement_d* %call21, %union.gimple_statement_d** %phi, align 8, !dbg !6237
  %25 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6238
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6239
  %call22 = call %union.tree_node* @duplicate_ssa_name(%union.tree_node* %25, %union.gimple_statement_d* %26), !dbg !6240
  store %union.tree_node* %call22, %union.tree_node** %new_lhs, align 8, !dbg !6241
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6242
  %28 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !6243
  call void @gimple_phi_set_result(%union.gimple_statement_d* %27, %union.tree_node* %28), !dbg !6244
  %29 = load %union.tree_node*, %union.tree_node** %new_lhs, align 8, !dbg !6245
  %30 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6246
  call void @add_new_name_mapping(%union.tree_node* %29, %union.tree_node* %30), !dbg !6247
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6248
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 0, !dbg !6248
  %call23 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !6248
  %32 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6248
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 0, !dbg !6248
  %34 = extractvalue { i32, %struct.VEC_edge_gc** } %call23, 0, !dbg !6248
  store i32 %34, i32* %33, align 8, !dbg !6248
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 1, !dbg !6248
  %36 = extractvalue { i32, %struct.VEC_edge_gc** } %call23, 1, !dbg !6248
  store %struct.VEC_edge_gc** %36, %struct.VEC_edge_gc*** %35, align 8, !dbg !6248
  %37 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6248
  %38 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6248
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false), !dbg !6248
  br label %for.cond24, !dbg !6248

for.cond24:                                       ; preds = %for.inc, %cond.end19
  %39 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6250
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 0, !dbg !6250
  %41 = load i32, i32* %40, align 8, !dbg !6250
  %42 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %39, i32 0, i32 1, !dbg !6250
  %43 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %42, align 8, !dbg !6250
  %call25 = call zeroext i8 @ei_cond(i32 %41, %struct.VEC_edge_gc** %43, %struct.edge_def** %e), !dbg !6250
  %tobool26 = icmp ne i8 %call25, 0, !dbg !6248
  br i1 %tobool26, label %for.body27, label %for.end, !dbg !6248

for.body27:                                       ; preds = %for.cond24
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6252
  %45 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6253
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6254
  call void @add_phi_arg(%union.gimple_statement_d* %44, %union.tree_node* %45, %struct.edge_def* %46, i32 0), !dbg !6255
  br label %for.inc, !dbg !6255

for.inc:                                          ; preds = %for.body27
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6250
  br label %for.cond24, !dbg !6250, !llvm.loop !6256

for.end:                                          ; preds = %for.cond24
  br label %if.end45, !dbg !6258

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tracked_var, metadata !6259, metadata !DIExpression()), !dbg !6261
  %47 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6262
  %base28 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6262
  %48 = bitcast %struct.tree_base* %base28 to i64*, !dbg !6262
  %bf.load29 = load i64, i64* %48, align 8, !dbg !6262
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !6262
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !6262
  %idxprom = sext i32 %bf.cast31 to i64, !dbg !6262
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6262
  %49 = load i32, i32* %arrayidx, align 4, !dbg !6262
  %cmp32 = icmp eq i32 %49, 3, !dbg !6262
  br i1 %cmp32, label %cond.false34, label %cond.true33, !dbg !6262

cond.true33:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1129, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6262
  br label %cond.end35, !dbg !6262

cond.false34:                                     ; preds = %if.else
  br label %cond.end35, !dbg !6262

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !6262
  %50 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6263
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6264
  %call37 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %50, %struct.basic_block_def* %51), !dbg !6265
  store %union.gimple_statement_d* %call37, %union.gimple_statement_d** %phi, align 8, !dbg !6266
  %52 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6267
  %call38 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %52), !dbg !6268
  store %union.tree_node* %call38, %union.tree_node** %tracked_var, align 8, !dbg !6269
  %53 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !6270
  %tobool39 = icmp ne %union.tree_node* %53, null, !dbg !6270
  br i1 %tobool39, label %if.then40, label %if.end44, !dbg !6272

if.then40:                                        ; preds = %cond.end35
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %note, metadata !6273, metadata !DIExpression()), !dbg !6275
  %54 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !6276
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6276
  %call41 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %55), !dbg !6276
  %call42 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call41), !dbg !6276
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6276
  %call43 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %54, %union.tree_node* %call42, %union.gimple_statement_d* %56), !dbg !6276
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %note, align 8, !dbg !6275
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6277, metadata !DIExpression()), !dbg !6278
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6279
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %si, %struct.basic_block_def* %57), !dbg !6280
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !6281
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %58, i32 1), !dbg !6282
  br label %if.end44, !dbg !6283

if.end44:                                         ; preds = %if.then40, %cond.end35
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %for.end
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6284
  call void @set_register_defs(%union.gimple_statement_d* %59, i8 zeroext 1), !dbg !6285
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6286
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6287
  call void @mark_phi_for_rewrite(%struct.basic_block_def* %60, %union.gimple_statement_d* %61), !dbg !6288
  br label %for.inc46, !dbg !6289

for.inc46:                                        ; preds = %if.end45
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bb_index), !dbg !6213
  br label %for.cond, !dbg !6213, !llvm.loop !6290

for.end47:                                        ; preds = %for.cond
  ret void, !dbg !6292
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

declare dso_local zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prune_unused_phi_nodes(%struct.bitmap_head_def* %phis, %struct.bitmap_head_def* %kills, %struct.bitmap_head_def* %uses) #0 !dbg !6293 {
entry:
  %phis.addr = alloca %struct.bitmap_head_def*, align 8
  %kills.addr = alloca %struct.bitmap_head_def*, align 8
  %uses.addr = alloca %struct.bitmap_head_def*, align 8
  %worklist = alloca %struct.VEC_int_heap*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %b = alloca i32, align 4
  %p = alloca i32, align 4
  %u = alloca i32, align 4
  %top = alloca i32, align 4
  %live_phis = alloca %struct.bitmap_head_def*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %use_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %to_remove = alloca %struct.bitmap_head_def*, align 8
  %defs = alloca %struct.dom_dfsnum*, align 8
  %n_defs = alloca i32, align 4
  %adef = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.bitmap_head_def* %phis, %struct.bitmap_head_def** %phis.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %phis.addr, metadata !6296, metadata !DIExpression()), !dbg !6297
  store %struct.bitmap_head_def* %kills, %struct.bitmap_head_def** %kills.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %kills.addr, metadata !6298, metadata !DIExpression()), !dbg !6299
  store %struct.bitmap_head_def* %uses, %struct.bitmap_head_def** %uses.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %uses.addr, metadata !6300, metadata !DIExpression()), !dbg !6301
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %worklist, metadata !6302, metadata !DIExpression()), !dbg !6303
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !6304, metadata !DIExpression()), !dbg !6305
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6306, metadata !DIExpression()), !dbg !6307
  call void @llvm.dbg.declare(metadata i32* %b, metadata !6308, metadata !DIExpression()), !dbg !6309
  call void @llvm.dbg.declare(metadata i32* %p, metadata !6310, metadata !DIExpression()), !dbg !6311
  call void @llvm.dbg.declare(metadata i32* %u, metadata !6312, metadata !DIExpression()), !dbg !6313
  call void @llvm.dbg.declare(metadata i32* %top, metadata !6314, metadata !DIExpression()), !dbg !6315
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %live_phis, metadata !6316, metadata !DIExpression()), !dbg !6317
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !6318, metadata !DIExpression()), !dbg !6319
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %use_bb, metadata !6320, metadata !DIExpression()), !dbg !6321
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6322, metadata !DIExpression()), !dbg !6323
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6324, metadata !DIExpression()), !dbg !6325
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %to_remove, metadata !6326, metadata !DIExpression()), !dbg !6327
  call void @llvm.dbg.declare(metadata %struct.dom_dfsnum** %defs, metadata !6328, metadata !DIExpression()), !dbg !6329
  call void @llvm.dbg.declare(metadata i32* %n_defs, metadata !6330, metadata !DIExpression()), !dbg !6331
  call void @llvm.dbg.declare(metadata i32* %adef, metadata !6332, metadata !DIExpression()), !dbg !6333
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %uses.addr, align 8, !dbg !6334
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !6334
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !6334
  %tobool = icmp ne %struct.bitmap_element_def* %1, null, !dbg !6334
  br i1 %tobool, label %if.end, label %if.then, !dbg !6336

if.then:                                          ; preds = %entry
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6337
  call void @bitmap_clear(%struct.bitmap_head_def* %2), !dbg !6339
  br label %return, !dbg !6340

if.end:                                           ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6341
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6342
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6343
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills.addr, align 8, !dbg !6344
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %uses.addr, align 8, !dbg !6345
  %call1 = call zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %4, %struct.bitmap_head_def* %5), !dbg !6346
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6347
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6348
  %call2 = call zeroext i8 @bitmap_and_compl_into(%struct.bitmap_head_def* %6, %struct.bitmap_head_def* %7), !dbg !6349
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6350
  %first3 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %8, i32 0, i32 0, !dbg !6350
  %9 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first3, align 8, !dbg !6350
  %tobool4 = icmp ne %struct.bitmap_element_def* %9, null, !dbg !6350
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !6352

if.then5:                                         ; preds = %if.end
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6353
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %10), !dbg !6353
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6353
  br label %return, !dbg !6355

if.end6:                                          ; preds = %if.end
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6356
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills.addr, align 8, !dbg !6357
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6358
  %call7 = call zeroext i8 @bitmap_ior(%struct.bitmap_head_def* %11, %struct.bitmap_head_def* %12, %struct.bitmap_head_def* %13), !dbg !6359
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6360
  %call8 = call i64 @bitmap_count_bits(%struct.bitmap_head_def* %14), !dbg !6361
  %conv = trunc i64 %call8 to i32, !dbg !6361
  store i32 %conv, i32* %n_defs, align 4, !dbg !6362
  %15 = load i32, i32* %n_defs, align 4, !dbg !6363
  %mul = mul i32 2, %15, !dbg !6363
  %add = add i32 %mul, 1, !dbg !6363
  %conv9 = zext i32 %add to i64, !dbg !6363
  %mul10 = mul i64 8, %conv9, !dbg !6363
  %call11 = call i8* @xmalloc(i64 %mul10), !dbg !6363
  %16 = bitcast i8* %call11 to %struct.dom_dfsnum*, !dbg !6363
  store %struct.dom_dfsnum* %16, %struct.dom_dfsnum** %defs, align 8, !dbg !6364
  %17 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6365
  %arrayidx = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %17, i64 0, !dbg !6365
  %bb_index = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx, i32 0, i32 0, !dbg !6366
  store i32 1, i32* %bb_index, align 4, !dbg !6367
  %18 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6368
  %arrayidx12 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %18, i64 0, !dbg !6368
  %dfs_num = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx12, i32 0, i32 1, !dbg !6369
  store i32 0, i32* %dfs_num, align 4, !dbg !6370
  store i32 1, i32* %adef, align 4, !dbg !6371
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6372
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %19, i32 0, i32* %i), !dbg !6372
  br label %for.cond, !dbg !6372

for.cond:                                         ; preds = %for.inc, %if.end6
  %call13 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6374
  %tobool14 = icmp ne i8 %call13, 0, !dbg !6372
  br i1 %tobool14, label %for.body, label %for.end, !dbg !6372

for.body:                                         ; preds = %for.cond
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6376
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !6376
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6376
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6376
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 2, !dbg !6376
  %22 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6376
  %tobool15 = icmp ne %struct.VEC_basic_block_gc* %22, null, !dbg !6376
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !6376

cond.true:                                        ; preds = %for.body
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6376
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !6376
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !6376
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !6376
  %x_basic_block_info18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 2, !dbg !6376
  %25 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info18, align 8, !dbg !6376
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %25, i32 0, i32 0, !dbg !6376
  br label %cond.end, !dbg !6376

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6376

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6376
  %26 = load i32, i32* %i, align 4, !dbg !6376
  %call19 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %26), !dbg !6376
  store %struct.basic_block_def* %call19, %struct.basic_block_def** %def_bb, align 8, !dbg !6378
  %27 = load i32, i32* %i, align 4, !dbg !6379
  %28 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6380
  %29 = load i32, i32* %adef, align 4, !dbg !6381
  %idxprom = zext i32 %29 to i64, !dbg !6380
  %arrayidx20 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %28, i64 %idxprom, !dbg !6380
  %bb_index21 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx20, i32 0, i32 0, !dbg !6382
  store i32 %27, i32* %bb_index21, align 4, !dbg !6383
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6384
  %call22 = call i32 @bb_dom_dfs_in(i32 1, %struct.basic_block_def* %30), !dbg !6385
  %31 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6386
  %32 = load i32, i32* %adef, align 4, !dbg !6387
  %idxprom23 = zext i32 %32 to i64, !dbg !6386
  %arrayidx24 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %31, i64 %idxprom23, !dbg !6386
  %dfs_num25 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx24, i32 0, i32 1, !dbg !6388
  store i32 %call22, i32* %dfs_num25, align 4, !dbg !6389
  %33 = load i32, i32* %i, align 4, !dbg !6390
  %34 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6391
  %35 = load i32, i32* %adef, align 4, !dbg !6392
  %add26 = add i32 %35, 1, !dbg !6393
  %idxprom27 = zext i32 %add26 to i64, !dbg !6391
  %arrayidx28 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %34, i64 %idxprom27, !dbg !6391
  %bb_index29 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx28, i32 0, i32 0, !dbg !6394
  store i32 %33, i32* %bb_index29, align 4, !dbg !6395
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6396
  %call30 = call i32 @bb_dom_dfs_out(i32 1, %struct.basic_block_def* %36), !dbg !6397
  %37 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6398
  %38 = load i32, i32* %adef, align 4, !dbg !6399
  %add31 = add i32 %38, 1, !dbg !6400
  %idxprom32 = zext i32 %add31 to i64, !dbg !6398
  %arrayidx33 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %37, i64 %idxprom32, !dbg !6398
  %dfs_num34 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx33, i32 0, i32 1, !dbg !6401
  store i32 %call30, i32* %dfs_num34, align 4, !dbg !6402
  %39 = load i32, i32* %adef, align 4, !dbg !6403
  %add35 = add i32 %39, 2, !dbg !6403
  store i32 %add35, i32* %adef, align 4, !dbg !6403
  br label %for.inc, !dbg !6404

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6374
  br label %for.cond, !dbg !6374, !llvm.loop !6405

for.end:                                          ; preds = %for.cond
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6407
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %40), !dbg !6407
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %to_remove, align 8, !dbg !6407
  %41 = load i32, i32* %adef, align 4, !dbg !6408
  %42 = load i32, i32* %n_defs, align 4, !dbg !6408
  %mul36 = mul i32 2, %42, !dbg !6408
  %add37 = add i32 %mul36, 1, !dbg !6408
  %cmp = icmp eq i32 %41, %add37, !dbg !6408
  br i1 %cmp, label %cond.false40, label %cond.true39, !dbg !6408

cond.true39:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 894, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6408
  br label %cond.end41, !dbg !6408

cond.false40:                                     ; preds = %for.end
  br label %cond.end41, !dbg !6408

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !6408
  %43 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6409
  %44 = bitcast %struct.dom_dfsnum* %43 to i8*, !dbg !6409
  %45 = load i32, i32* %adef, align 4, !dbg !6410
  %conv43 = zext i32 %45 to i64, !dbg !6410
  call void @spec_qsort(i8* %44, i64 %conv43, i64 8, i32 (i8*, i8*)* @cmp_dfsnum), !dbg !6411
  %46 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6412
  %arrayidx44 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %46, i64 0, !dbg !6412
  %bb_index45 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx44, i32 0, i32 0, !dbg !6412
  %47 = load i32, i32* %bb_index45, align 4, !dbg !6412
  %cmp46 = icmp eq i32 %47, 1, !dbg !6412
  br i1 %cmp46, label %cond.false49, label %cond.true48, !dbg !6412

cond.true48:                                      ; preds = %cond.end41
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 900, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6412
  br label %cond.end50, !dbg !6412

cond.false49:                                     ; preds = %cond.end41
  br label %cond.end50, !dbg !6412

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !6412
  %48 = load i32, i32* %n_defs, align 4, !dbg !6413
  %add52 = add i32 %48, 1, !dbg !6413
  %call53 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %add52), !dbg !6413
  store %struct.VEC_int_heap* %call53, %struct.VEC_int_heap** %worklist, align 8, !dbg !6414
  %49 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6415
  %tobool54 = icmp ne %struct.VEC_int_heap* %49, null, !dbg !6415
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !6415

cond.true55:                                      ; preds = %cond.end50
  %50 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6415
  %base56 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %50, i32 0, i32 0, !dbg !6415
  br label %cond.end58, !dbg !6415

cond.false57:                                     ; preds = %cond.end50
  br label %cond.end58, !dbg !6415

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_int_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !6415
  %call60 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond59, i32 1), !dbg !6415
  store i32 1, i32* %top, align 4, !dbg !6416
  store i32 1, i32* %n_defs, align 4, !dbg !6417
  store i32 1, i32* %i, align 4, !dbg !6418
  br label %for.cond61, !dbg !6420

for.cond61:                                       ; preds = %for.inc141, %cond.end58
  %51 = load i32, i32* %i, align 4, !dbg !6421
  %52 = load i32, i32* %adef, align 4, !dbg !6423
  %cmp62 = icmp ult i32 %51, %52, !dbg !6424
  br i1 %cmp62, label %for.body64, label %for.end143, !dbg !6425

for.body64:                                       ; preds = %for.cond61
  %53 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6426
  %54 = load i32, i32* %i, align 4, !dbg !6428
  %idxprom65 = zext i32 %54 to i64, !dbg !6426
  %arrayidx66 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %53, i64 %idxprom65, !dbg !6426
  %bb_index67 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx66, i32 0, i32 0, !dbg !6429
  %55 = load i32, i32* %bb_index67, align 4, !dbg !6429
  store i32 %55, i32* %b, align 4, !dbg !6430
  %56 = load i32, i32* %b, align 4, !dbg !6431
  %57 = load i32, i32* %top, align 4, !dbg !6433
  %cmp68 = icmp eq i32 %56, %57, !dbg !6434
  br i1 %cmp68, label %if.then70, label %if.else, !dbg !6435

if.then70:                                        ; preds = %for.body64
  %58 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6436
  %tobool71 = icmp ne %struct.VEC_int_heap* %58, null, !dbg !6436
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !6436

cond.true72:                                      ; preds = %if.then70
  %59 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6436
  %base73 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %59, i32 0, i32 0, !dbg !6436
  br label %cond.end75, !dbg !6436

cond.false74:                                     ; preds = %if.then70
  br label %cond.end75, !dbg !6436

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_int_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !6436
  %call77 = call i32 @VEC_int_base_pop(%struct.VEC_int_base* %cond76), !dbg !6436
  %60 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6438
  %tobool78 = icmp ne %struct.VEC_int_heap* %60, null, !dbg !6438
  br i1 %tobool78, label %cond.true79, label %cond.false81, !dbg !6438

cond.true79:                                      ; preds = %cond.end75
  %61 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6438
  %base80 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %61, i32 0, i32 0, !dbg !6438
  br label %cond.end82, !dbg !6438

cond.false81:                                     ; preds = %cond.end75
  br label %cond.end82, !dbg !6438

cond.end82:                                       ; preds = %cond.false81, %cond.true79
  %cond83 = phi %struct.VEC_int_base* [ %base80, %cond.true79 ], [ null, %cond.false81 ], !dbg !6438
  %62 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6438
  %tobool84 = icmp ne %struct.VEC_int_heap* %62, null, !dbg !6438
  br i1 %tobool84, label %cond.true85, label %cond.false87, !dbg !6438

cond.true85:                                      ; preds = %cond.end82
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6438
  %base86 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %63, i32 0, i32 0, !dbg !6438
  br label %cond.end88, !dbg !6438

cond.false87:                                     ; preds = %cond.end82
  br label %cond.end88, !dbg !6438

cond.end88:                                       ; preds = %cond.false87, %cond.true85
  %cond89 = phi %struct.VEC_int_base* [ %base86, %cond.true85 ], [ null, %cond.false87 ], !dbg !6438
  %call90 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond89), !dbg !6438
  %sub = sub i32 %call90, 1, !dbg !6438
  %call91 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond83, i32 %sub), !dbg !6438
  store i32 %call91, i32* %top, align 4, !dbg !6439
  %64 = load i32, i32* %top, align 4, !dbg !6440
  %65 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6441
  %66 = load i32, i32* %n_defs, align 4, !dbg !6442
  %idxprom92 = zext i32 %66 to i64, !dbg !6441
  %arrayidx93 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %65, i64 %idxprom92, !dbg !6441
  %bb_index94 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx93, i32 0, i32 0, !dbg !6443
  store i32 %64, i32* %bb_index94, align 4, !dbg !6444
  %67 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6445
  %68 = load i32, i32* %i, align 4, !dbg !6446
  %idxprom95 = zext i32 %68 to i64, !dbg !6445
  %arrayidx96 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %67, i64 %idxprom95, !dbg !6445
  %dfs_num97 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx96, i32 0, i32 1, !dbg !6447
  %69 = load i32, i32* %dfs_num97, align 4, !dbg !6447
  %add98 = add i32 %69, 1, !dbg !6448
  %70 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6449
  %71 = load i32, i32* %n_defs, align 4, !dbg !6450
  %idxprom99 = zext i32 %71 to i64, !dbg !6449
  %arrayidx100 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %70, i64 %idxprom99, !dbg !6449
  %dfs_num101 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx100, i32 0, i32 1, !dbg !6451
  store i32 %add98, i32* %dfs_num101, align 4, !dbg !6452
  br label %if.end121, !dbg !6453

if.else:                                          ; preds = %for.body64
  %72 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6454
  %73 = load i32, i32* %i, align 4, !dbg !6456
  %idxprom102 = zext i32 %73 to i64, !dbg !6454
  %arrayidx103 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %72, i64 %idxprom102, !dbg !6454
  %bb_index104 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx103, i32 0, i32 0, !dbg !6457
  %74 = load i32, i32* %bb_index104, align 4, !dbg !6457
  %75 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6458
  %76 = load i32, i32* %n_defs, align 4, !dbg !6459
  %idxprom105 = zext i32 %76 to i64, !dbg !6458
  %arrayidx106 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %75, i64 %idxprom105, !dbg !6458
  %bb_index107 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx106, i32 0, i32 0, !dbg !6460
  store i32 %74, i32* %bb_index107, align 4, !dbg !6461
  %77 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6462
  %78 = load i32, i32* %i, align 4, !dbg !6463
  %idxprom108 = zext i32 %78 to i64, !dbg !6462
  %arrayidx109 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %77, i64 %idxprom108, !dbg !6462
  %dfs_num110 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx109, i32 0, i32 1, !dbg !6464
  %79 = load i32, i32* %dfs_num110, align 4, !dbg !6464
  %80 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6465
  %81 = load i32, i32* %n_defs, align 4, !dbg !6466
  %idxprom111 = zext i32 %81 to i64, !dbg !6465
  %arrayidx112 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %80, i64 %idxprom111, !dbg !6465
  %dfs_num113 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx112, i32 0, i32 1, !dbg !6467
  store i32 %79, i32* %dfs_num113, align 4, !dbg !6468
  %82 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6469
  %tobool114 = icmp ne %struct.VEC_int_heap* %82, null, !dbg !6469
  br i1 %tobool114, label %cond.true115, label %cond.false117, !dbg !6469

cond.true115:                                     ; preds = %if.else
  %83 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6469
  %base116 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %83, i32 0, i32 0, !dbg !6469
  br label %cond.end118, !dbg !6469

cond.false117:                                    ; preds = %if.else
  br label %cond.end118, !dbg !6469

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi %struct.VEC_int_base* [ %base116, %cond.true115 ], [ null, %cond.false117 ], !dbg !6469
  %84 = load i32, i32* %b, align 4, !dbg !6469
  %call120 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond119, i32 %84), !dbg !6469
  %85 = load i32, i32* %b, align 4, !dbg !6470
  store i32 %85, i32* %top, align 4, !dbg !6471
  br label %if.end121

if.end121:                                        ; preds = %cond.end118, %cond.end88
  %86 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6472
  %87 = load i32, i32* %n_defs, align 4, !dbg !6474
  %idxprom122 = zext i32 %87 to i64, !dbg !6472
  %arrayidx123 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %86, i64 %idxprom122, !dbg !6472
  %dfs_num124 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx123, i32 0, i32 1, !dbg !6475
  %88 = load i32, i32* %dfs_num124, align 4, !dbg !6475
  %89 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6476
  %90 = load i32, i32* %n_defs, align 4, !dbg !6477
  %sub125 = sub i32 %90, 1, !dbg !6478
  %idxprom126 = zext i32 %sub125 to i64, !dbg !6476
  %arrayidx127 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %89, i64 %idxprom126, !dbg !6476
  %dfs_num128 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx127, i32 0, i32 1, !dbg !6479
  %91 = load i32, i32* %dfs_num128, align 4, !dbg !6479
  %cmp129 = icmp eq i32 %88, %91, !dbg !6480
  br i1 %cmp129, label %if.then131, label %if.else139, !dbg !6481

if.then131:                                       ; preds = %if.end121
  %92 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6482
  %93 = load i32, i32* %n_defs, align 4, !dbg !6483
  %idxprom132 = zext i32 %93 to i64, !dbg !6482
  %arrayidx133 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %92, i64 %idxprom132, !dbg !6482
  %bb_index134 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx133, i32 0, i32 0, !dbg !6484
  %94 = load i32, i32* %bb_index134, align 4, !dbg !6484
  %95 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6485
  %96 = load i32, i32* %n_defs, align 4, !dbg !6486
  %sub135 = sub i32 %96, 1, !dbg !6487
  %idxprom136 = zext i32 %sub135 to i64, !dbg !6485
  %arrayidx137 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %95, i64 %idxprom136, !dbg !6485
  %bb_index138 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx137, i32 0, i32 0, !dbg !6488
  store i32 %94, i32* %bb_index138, align 4, !dbg !6489
  br label %if.end140, !dbg !6485

if.else139:                                       ; preds = %if.end121
  %97 = load i32, i32* %n_defs, align 4, !dbg !6490
  %inc = add i32 %97, 1, !dbg !6490
  store i32 %inc, i32* %n_defs, align 4, !dbg !6490
  br label %if.end140

if.end140:                                        ; preds = %if.else139, %if.then131
  br label %for.inc141, !dbg !6491

for.inc141:                                       ; preds = %if.end140
  %98 = load i32, i32* %i, align 4, !dbg !6492
  %inc142 = add i32 %98, 1, !dbg !6492
  store i32 %inc142, i32* %i, align 4, !dbg !6492
  br label %for.cond61, !dbg !6493, !llvm.loop !6494

for.end143:                                       ; preds = %for.cond61
  %99 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6496
  %tobool144 = icmp ne %struct.VEC_int_heap* %99, null, !dbg !6496
  br i1 %tobool144, label %cond.true145, label %cond.false147, !dbg !6496

cond.true145:                                     ; preds = %for.end143
  %100 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6496
  %base146 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %100, i32 0, i32 0, !dbg !6496
  br label %cond.end148, !dbg !6496

cond.false147:                                    ; preds = %for.end143
  br label %cond.end148, !dbg !6496

cond.end148:                                      ; preds = %cond.false147, %cond.true145
  %cond149 = phi %struct.VEC_int_base* [ %base146, %cond.true145 ], [ null, %cond.false147 ], !dbg !6496
  %call150 = call i32 @VEC_int_base_pop(%struct.VEC_int_base* %cond149), !dbg !6496
  %101 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6497
  %tobool151 = icmp ne %struct.VEC_int_heap* %101, null, !dbg !6497
  br i1 %tobool151, label %cond.true152, label %cond.false154, !dbg !6497

cond.true152:                                     ; preds = %cond.end148
  %102 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6497
  %base153 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %102, i32 0, i32 0, !dbg !6497
  br label %cond.end155, !dbg !6497

cond.false154:                                    ; preds = %cond.end148
  br label %cond.end155, !dbg !6497

cond.end155:                                      ; preds = %cond.false154, %cond.true152
  %cond156 = phi %struct.VEC_int_base* [ %base153, %cond.true152 ], [ null, %cond.false154 ], !dbg !6497
  %call157 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond156), !dbg !6497
  %cmp158 = icmp eq i32 %call157, 0, !dbg !6497
  br i1 %cmp158, label %cond.false161, label %cond.true160, !dbg !6497

cond.true160:                                     ; preds = %cond.end155
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 942, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6497
  br label %cond.end162, !dbg !6497

cond.false161:                                    ; preds = %cond.end155
  br label %cond.end162, !dbg !6497

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi i32 [ 0, %cond.true160 ], [ 0, %cond.false161 ], !dbg !6497
  %call164 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6498
  store %struct.bitmap_head_def* %call164, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6499
  %103 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %uses.addr, align 8, !dbg !6500
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %103, i32 0, i32* %i), !dbg !6500
  br label %for.cond165, !dbg !6500

for.cond165:                                      ; preds = %for.inc170, %cond.end162
  %call166 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6502
  %tobool167 = icmp ne i8 %call166, 0, !dbg !6500
  br i1 %tobool167, label %for.body168, label %for.end171, !dbg !6500

for.body168:                                      ; preds = %for.cond165
  %104 = load i32, i32* %i, align 4, !dbg !6504
  %call169 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %worklist, i32 %104), !dbg !6504
  br label %for.inc170, !dbg !6506

for.inc170:                                       ; preds = %for.body168
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !6502
  br label %for.cond165, !dbg !6502, !llvm.loop !6507

for.end171:                                       ; preds = %for.cond165
  br label %while.cond, !dbg !6509

while.cond:                                       ; preds = %for.end251, %if.then219, %if.then214, %if.then190, %for.end171
  %105 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6510
  %tobool172 = icmp ne %struct.VEC_int_heap* %105, null, !dbg !6510
  br i1 %tobool172, label %cond.true173, label %cond.false175, !dbg !6510

cond.true173:                                     ; preds = %while.cond
  %106 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6510
  %base174 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %106, i32 0, i32 0, !dbg !6510
  br label %cond.end176, !dbg !6510

cond.false175:                                    ; preds = %while.cond
  br label %cond.end176, !dbg !6510

cond.end176:                                      ; preds = %cond.false175, %cond.true173
  %cond177 = phi %struct.VEC_int_base* [ %base174, %cond.true173 ], [ null, %cond.false175 ], !dbg !6510
  %call178 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond177), !dbg !6510
  %cmp179 = icmp eq i32 %call178, 0, !dbg !6510
  %lnot = xor i1 %cmp179, true, !dbg !6511
  br i1 %lnot, label %while.body, label %while.end, !dbg !6509

while.body:                                       ; preds = %cond.end176
  %107 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6512
  %tobool181 = icmp ne %struct.VEC_int_heap* %107, null, !dbg !6512
  br i1 %tobool181, label %cond.true182, label %cond.false184, !dbg !6512

cond.true182:                                     ; preds = %while.body
  %108 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %worklist, align 8, !dbg !6512
  %base183 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %108, i32 0, i32 0, !dbg !6512
  br label %cond.end185, !dbg !6512

cond.false184:                                    ; preds = %while.body
  br label %cond.end185, !dbg !6512

cond.end185:                                      ; preds = %cond.false184, %cond.true182
  %cond186 = phi %struct.VEC_int_base* [ %base183, %cond.true182 ], [ null, %cond.false184 ], !dbg !6512
  %call187 = call i32 @VEC_int_base_pop(%struct.VEC_int_base* %cond186), !dbg !6512
  store i32 %call187, i32* %b, align 4, !dbg !6514
  %109 = load i32, i32* %b, align 4, !dbg !6515
  %cmp188 = icmp eq i32 %109, 0, !dbg !6517
  br i1 %cmp188, label %if.then190, label %if.end191, !dbg !6518

if.then190:                                       ; preds = %cond.end185
  br label %while.cond, !dbg !6519, !llvm.loop !6520

if.end191:                                        ; preds = %cond.end185
  %110 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6522
  %111 = load i32, i32* %b, align 4, !dbg !6524
  %call192 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %110, i32 %111), !dbg !6525
  %tobool193 = icmp ne i32 %call192, 0, !dbg !6525
  br i1 %tobool193, label %if.then194, label %if.else195, !dbg !6526

if.then194:                                       ; preds = %if.end191
  %112 = load i32, i32* %b, align 4, !dbg !6527
  store i32 %112, i32* %p, align 4, !dbg !6528
  br label %if.end216, !dbg !6529

if.else195:                                       ; preds = %if.end191
  %113 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6530
  %add.ptr196 = getelementptr inbounds %struct.function, %struct.function* %113, i64 0, !dbg !6530
  %cfg197 = getelementptr inbounds %struct.function, %struct.function* %add.ptr196, i32 0, i32 1, !dbg !6530
  %114 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg197, align 8, !dbg !6530
  %x_basic_block_info198 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %114, i32 0, i32 2, !dbg !6530
  %115 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info198, align 8, !dbg !6530
  %tobool199 = icmp ne %struct.VEC_basic_block_gc* %115, null, !dbg !6530
  br i1 %tobool199, label %cond.true200, label %cond.false205, !dbg !6530

cond.true200:                                     ; preds = %if.else195
  %116 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6530
  %add.ptr201 = getelementptr inbounds %struct.function, %struct.function* %116, i64 0, !dbg !6530
  %cfg202 = getelementptr inbounds %struct.function, %struct.function* %add.ptr201, i32 0, i32 1, !dbg !6530
  %117 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg202, align 8, !dbg !6530
  %x_basic_block_info203 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %117, i32 0, i32 2, !dbg !6530
  %118 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info203, align 8, !dbg !6530
  %base204 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %118, i32 0, i32 0, !dbg !6530
  br label %cond.end206, !dbg !6530

cond.false205:                                    ; preds = %if.else195
  br label %cond.end206, !dbg !6530

cond.end206:                                      ; preds = %cond.false205, %cond.true200
  %cond207 = phi %struct.VEC_basic_block_base* [ %base204, %cond.true200 ], [ null, %cond.false205 ], !dbg !6530
  %119 = load i32, i32* %b, align 4, !dbg !6530
  %call208 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond207, i32 %119), !dbg !6530
  %call209 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %call208), !dbg !6532
  store %struct.basic_block_def* %call209, %struct.basic_block_def** %use_bb, align 8, !dbg !6533
  %120 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6534
  %121 = load i32, i32* %n_defs, align 4, !dbg !6535
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %use_bb, align 8, !dbg !6536
  %call210 = call i32 @bb_dom_dfs_in(i32 1, %struct.basic_block_def* %122), !dbg !6537
  %call211 = call i32 @find_dfsnum_interval(%struct.dom_dfsnum* %120, i32 %121, i32 %call210), !dbg !6538
  store i32 %call211, i32* %p, align 4, !dbg !6539
  %123 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6540
  %124 = load i32, i32* %p, align 4, !dbg !6542
  %call212 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %123, i32 %124), !dbg !6543
  %tobool213 = icmp ne i32 %call212, 0, !dbg !6543
  br i1 %tobool213, label %if.end215, label %if.then214, !dbg !6544

if.then214:                                       ; preds = %cond.end206
  br label %while.cond, !dbg !6545, !llvm.loop !6520

if.end215:                                        ; preds = %cond.end206
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %if.then194
  %125 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6546
  %126 = load i32, i32* %p, align 4, !dbg !6548
  %call217 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %125, i32 %126), !dbg !6549
  %tobool218 = icmp ne i32 %call217, 0, !dbg !6549
  br i1 %tobool218, label %if.then219, label %if.end220, !dbg !6550

if.then219:                                       ; preds = %if.end216
  br label %while.cond, !dbg !6551, !llvm.loop !6520

if.end220:                                        ; preds = %if.end216
  %127 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6552
  %128 = load i32, i32* %p, align 4, !dbg !6553
  %call221 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %127, i32 %128), !dbg !6554
  %129 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6555
  %add.ptr222 = getelementptr inbounds %struct.function, %struct.function* %129, i64 0, !dbg !6555
  %cfg223 = getelementptr inbounds %struct.function, %struct.function* %add.ptr222, i32 0, i32 1, !dbg !6555
  %130 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg223, align 8, !dbg !6555
  %x_basic_block_info224 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %130, i32 0, i32 2, !dbg !6555
  %131 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info224, align 8, !dbg !6555
  %tobool225 = icmp ne %struct.VEC_basic_block_gc* %131, null, !dbg !6555
  br i1 %tobool225, label %cond.true226, label %cond.false231, !dbg !6555

cond.true226:                                     ; preds = %if.end220
  %132 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6555
  %add.ptr227 = getelementptr inbounds %struct.function, %struct.function* %132, i64 0, !dbg !6555
  %cfg228 = getelementptr inbounds %struct.function, %struct.function* %add.ptr227, i32 0, i32 1, !dbg !6555
  %133 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg228, align 8, !dbg !6555
  %x_basic_block_info229 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %133, i32 0, i32 2, !dbg !6555
  %134 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info229, align 8, !dbg !6555
  %base230 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %134, i32 0, i32 0, !dbg !6555
  br label %cond.end232, !dbg !6555

cond.false231:                                    ; preds = %if.end220
  br label %cond.end232, !dbg !6555

cond.end232:                                      ; preds = %cond.false231, %cond.true226
  %cond233 = phi %struct.VEC_basic_block_base* [ %base230, %cond.true226 ], [ null, %cond.false231 ], !dbg !6555
  %135 = load i32, i32* %p, align 4, !dbg !6555
  %call234 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond233, i32 %135), !dbg !6555
  store %struct.basic_block_def* %call234, %struct.basic_block_def** %def_bb, align 8, !dbg !6556
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6557
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 0, !dbg !6557
  %call235 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !6557
  %137 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6557
  %138 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %137, i32 0, i32 0, !dbg !6557
  %139 = extractvalue { i32, %struct.VEC_edge_gc** } %call235, 0, !dbg !6557
  store i32 %139, i32* %138, align 8, !dbg !6557
  %140 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %137, i32 0, i32 1, !dbg !6557
  %141 = extractvalue { i32, %struct.VEC_edge_gc** } %call235, 1, !dbg !6557
  store %struct.VEC_edge_gc** %141, %struct.VEC_edge_gc*** %140, align 8, !dbg !6557
  %142 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6557
  %143 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6557
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 16, i1 false), !dbg !6557
  br label %for.cond236, !dbg !6557

for.cond236:                                      ; preds = %for.inc250, %cond.end232
  %144 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6559
  %145 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %144, i32 0, i32 0, !dbg !6559
  %146 = load i32, i32* %145, align 8, !dbg !6559
  %147 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %144, i32 0, i32 1, !dbg !6559
  %148 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %147, align 8, !dbg !6559
  %call237 = call zeroext i8 @ei_cond(i32 %146, %struct.VEC_edge_gc** %148, %struct.edge_def** %e), !dbg !6559
  %tobool238 = icmp ne i8 %call237, 0, !dbg !6557
  br i1 %tobool238, label %for.body239, label %for.end251, !dbg !6557

for.body239:                                      ; preds = %for.cond236
  %149 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6561
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %149, i32 0, i32 0, !dbg !6563
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6563
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 9, !dbg !6564
  %151 = load i32, i32* %index, align 8, !dbg !6564
  store i32 %151, i32* %u, align 4, !dbg !6565
  %152 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %uses.addr, align 8, !dbg !6566
  %153 = load i32, i32* %u, align 4, !dbg !6568
  %call240 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %152, i32 %153), !dbg !6569
  %tobool241 = icmp ne i32 %call240, 0, !dbg !6569
  br i1 %tobool241, label %if.then242, label %if.end243, !dbg !6570

if.then242:                                       ; preds = %for.body239
  br label %for.inc250, !dbg !6571

if.end243:                                        ; preds = %for.body239
  %154 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %kills.addr, align 8, !dbg !6572
  %155 = load i32, i32* %u, align 4, !dbg !6574
  %call244 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %154, i32 %155), !dbg !6575
  %tobool245 = icmp ne i32 %call244, 0, !dbg !6575
  br i1 %tobool245, label %if.then246, label %if.end247, !dbg !6576

if.then246:                                       ; preds = %if.end243
  br label %for.inc250, !dbg !6577

if.end247:                                        ; preds = %if.end243
  %156 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %uses.addr, align 8, !dbg !6578
  %157 = load i32, i32* %u, align 4, !dbg !6579
  %call248 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %156, i32 %157), !dbg !6580
  %158 = load i32, i32* %u, align 4, !dbg !6581
  %call249 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %worklist, i32 %158), !dbg !6581
  br label %for.inc250, !dbg !6582

for.inc250:                                       ; preds = %if.end247, %if.then246, %if.then242
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6559
  br label %for.cond236, !dbg !6559, !llvm.loop !6583

for.end251:                                       ; preds = %for.cond236
  br label %while.cond, !dbg !6509, !llvm.loop !6520

while.end:                                        ; preds = %cond.end176
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %worklist), !dbg !6585
  %159 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %phis.addr, align 8, !dbg !6586
  %160 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6587
  call void @bitmap_copy(%struct.bitmap_head_def* %159, %struct.bitmap_head_def* %160), !dbg !6588
  %161 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6589
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %161), !dbg !6589
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %live_phis, align 8, !dbg !6589
  %162 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs, align 8, !dbg !6590
  %163 = bitcast %struct.dom_dfsnum* %162 to i8*, !dbg !6590
  call void @free(i8* %163), !dbg !6591
  br label %return, !dbg !6592

return:                                           ; preds = %while.end, %if.then5, %if.then
  ret void, !dbg !6592
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_block_for_update(%struct.basic_block_def* %bb) #0 !dbg !6593 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6596, metadata !DIExpression()), !dbg !6597
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !6598
  %cmp = icmp ne %struct.bitmap_head_def* %0, null, !dbg !6598
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6598

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 458, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6598
  br label %cond.end, !dbg !6598

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6598

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6598
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !6599
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6601
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !6602
  %3 = load i32, i32* %index, align 8, !dbg !6602
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !6603
  %tobool = icmp ne i32 %call, 0, !dbg !6603
  br i1 %tobool, label %if.then, label %if.end, !dbg !6604

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !6605

if.end:                                           ; preds = %cond.end
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !6606
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6607
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 9, !dbg !6608
  %6 = load i32, i32* %index1, align 8, !dbg !6608
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %6), !dbg !6609
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6610
  call void @initialize_flags_in_bb(%struct.basic_block_def* %7), !dbg !6611
  br label %return, !dbg !6612

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6612
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_phi_set_result(%union.gimple_statement_d* %gs, %union.tree_node* %result) #0 !dbg !6613 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  %0 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !6620
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6621
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6622
  %result1 = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6623
  store %union.tree_node* %0, %union.tree_node** %result1, align 8, !dbg !6624
  ret void, !dbg !6625
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

declare dso_local %union.tree_node* @target_for_debug_bind(%union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6626 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6631
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6632
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6633
  ret %union.tree_node** %result, !dbg !6634
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6635 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6636, metadata !DIExpression()), !dbg !6637
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6638, metadata !DIExpression()), !dbg !6639
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6640
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !6641
  br label %while.cond, !dbg !6642

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6643
  %tobool = icmp ne i8 %call, 0, !dbg !6643
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6644

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !6645
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !6646
  %cmp = icmp eq i32 %call2, 4, !dbg !6647
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !6648
  br i1 %1, label %while.body, label %while.end, !dbg !6642

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !6649
  br label %while.cond, !dbg !6642, !llvm.loop !6650

while.end:                                        ; preds = %land.end
  ret void, !dbg !6652
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_phi_for_rewrite(%struct.basic_block_def* %bb, %union.gimple_statement_d* %phi) #0 !dbg !6653 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %phis = alloca %struct.VEC_gimple_heap*, align 8
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6656, metadata !DIExpression()), !dbg !6657
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6658, metadata !DIExpression()), !dbg !6659
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %phis, metadata !6660, metadata !DIExpression()), !dbg !6661
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6662, metadata !DIExpression()), !dbg !6663
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6664, metadata !DIExpression()), !dbg !6665
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6666
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 9, !dbg !6667
  %1 = load i32, i32* %index, align 8, !dbg !6667
  store i32 %1, i32* %idx, align 4, !dbg !6665
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6668
  %call = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %2), !dbg !6670
  %tobool = icmp ne i8 %call, 0, !dbg !6670
  br i1 %tobool, label %if.then, label %if.end, !dbg !6671

if.then:                                          ; preds = %entry
  br label %return, !dbg !6672

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6673
  call void @set_rewrite_uses(%union.gimple_statement_d* %3, i8 zeroext 1), !dbg !6674
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !6675
  %tobool1 = icmp ne %struct.bitmap_head_def* %4, null, !dbg !6675
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !6677

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !6678

if.end3:                                          ; preds = %if.end
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !6679
  %6 = load i32, i32* %idx, align 4, !dbg !6680
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %6), !dbg !6681
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6682
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !6682
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6682
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6682
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !6682
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !6682
  %add = add nsw i32 %9, 1, !dbg !6682
  %call5 = call i32 @VEC_gimple_vec_heap_reserve(%struct.VEC_gimple_vec_heap** @phis_to_rewrite, i32 %add), !dbg !6682
  %10 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6683
  %tobool6 = icmp ne %struct.VEC_gimple_vec_heap* %10, null, !dbg !6683
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !6683

cond.true:                                        ; preds = %if.end3
  %11 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6683
  %base = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %11, i32 0, i32 0, !dbg !6683
  br label %cond.end, !dbg !6683

cond.false:                                       ; preds = %if.end3
  br label %cond.end, !dbg !6683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_vec_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6683
  %call7 = call i32 @VEC_gimple_vec_base_length(%struct.VEC_gimple_vec_base* %cond), !dbg !6683
  store i32 %call7, i32* %i, align 4, !dbg !6685
  br label %for.cond, !dbg !6686

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = load i32, i32* %i, align 4, !dbg !6687
  %13 = load i32, i32* %idx, align 4, !dbg !6689
  %cmp = icmp ule i32 %12, %13, !dbg !6690
  br i1 %cmp, label %for.body, label %for.end, !dbg !6691

for.body:                                         ; preds = %for.cond
  %14 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6692
  %tobool8 = icmp ne %struct.VEC_gimple_vec_heap* %14, null, !dbg !6692
  br i1 %tobool8, label %cond.true9, label %cond.false11, !dbg !6692

cond.true9:                                       ; preds = %for.body
  %15 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6692
  %base10 = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %15, i32 0, i32 0, !dbg !6692
  br label %cond.end12, !dbg !6692

cond.false11:                                     ; preds = %for.body
  br label %cond.end12, !dbg !6692

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.VEC_gimple_vec_base* [ %base10, %cond.true9 ], [ null, %cond.false11 ], !dbg !6692
  %call14 = call %struct.VEC_gimple_heap** @VEC_gimple_vec_base_quick_push(%struct.VEC_gimple_vec_base* %cond13, %struct.VEC_gimple_heap* null), !dbg !6692
  br label %for.inc, !dbg !6692

for.inc:                                          ; preds = %cond.end12
  %16 = load i32, i32* %i, align 4, !dbg !6693
  %inc = add i32 %16, 1, !dbg !6693
  store i32 %inc, i32* %i, align 4, !dbg !6693
  br label %for.cond, !dbg !6694, !llvm.loop !6695

for.end:                                          ; preds = %for.cond
  %17 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6697
  %tobool15 = icmp ne %struct.VEC_gimple_vec_heap* %17, null, !dbg !6697
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !6697

cond.true16:                                      ; preds = %for.end
  %18 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6697
  %base17 = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %18, i32 0, i32 0, !dbg !6697
  br label %cond.end19, !dbg !6697

cond.false18:                                     ; preds = %for.end
  br label %cond.end19, !dbg !6697

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_gimple_vec_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !6697
  %19 = load i32, i32* %idx, align 4, !dbg !6697
  %call21 = call %struct.VEC_gimple_heap* @VEC_gimple_vec_base_index(%struct.VEC_gimple_vec_base* %cond20, i32 %19), !dbg !6697
  store %struct.VEC_gimple_heap* %call21, %struct.VEC_gimple_heap** %phis, align 8, !dbg !6698
  %20 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %phis, align 8, !dbg !6699
  %tobool22 = icmp ne %struct.VEC_gimple_heap* %20, null, !dbg !6699
  br i1 %tobool22, label %if.end25, label %if.then23, !dbg !6701

if.then23:                                        ; preds = %cond.end19
  %call24 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 10), !dbg !6702
  store %struct.VEC_gimple_heap* %call24, %struct.VEC_gimple_heap** %phis, align 8, !dbg !6703
  br label %if.end25, !dbg !6704

if.end25:                                         ; preds = %if.then23, %cond.end19
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6705
  %call26 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %phis, %union.gimple_statement_d* %21), !dbg !6705
  %22 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6706
  %tobool27 = icmp ne %struct.VEC_gimple_vec_heap* %22, null, !dbg !6706
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !6706

cond.true28:                                      ; preds = %if.end25
  %23 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !6706
  %base29 = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %23, i32 0, i32 0, !dbg !6706
  br label %cond.end31, !dbg !6706

cond.false30:                                     ; preds = %if.end25
  br label %cond.end31, !dbg !6706

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_gimple_vec_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !6706
  %24 = load i32, i32* %idx, align 4, !dbg !6706
  %25 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %phis, align 8, !dbg !6706
  %call33 = call %struct.VEC_gimple_heap* @VEC_gimple_vec_base_replace(%struct.VEC_gimple_vec_base* %cond32, i32 %24, %struct.VEC_gimple_heap* %25), !dbg !6706
  br label %return, !dbg !6707

return:                                           ; preds = %cond.end31, %if.then2, %if.then
  ret void, !dbg !6707
}

declare dso_local zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @bitmap_ior(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local i64 @bitmap_count_bits(%struct.bitmap_head_def*) #2

declare dso_local i32 @bb_dom_dfs_in(i32, %struct.basic_block_def*) #2

declare dso_local i32 @bb_dom_dfs_out(i32, %struct.basic_block_def*) #2

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @cmp_dfsnum(i8* %a, i8* %b) #0 !dbg !6708 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %da = alloca %struct.dom_dfsnum*, align 8
  %db = alloca %struct.dom_dfsnum*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !6709, metadata !DIExpression()), !dbg !6710
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !6711, metadata !DIExpression()), !dbg !6712
  call void @llvm.dbg.declare(metadata %struct.dom_dfsnum** %da, metadata !6713, metadata !DIExpression()), !dbg !6715
  %0 = load i8*, i8** %a.addr, align 8, !dbg !6716
  %1 = bitcast i8* %0 to %struct.dom_dfsnum*, !dbg !6717
  store %struct.dom_dfsnum* %1, %struct.dom_dfsnum** %da, align 8, !dbg !6715
  call void @llvm.dbg.declare(metadata %struct.dom_dfsnum** %db, metadata !6718, metadata !DIExpression()), !dbg !6719
  %2 = load i8*, i8** %b.addr, align 8, !dbg !6720
  %3 = bitcast i8* %2 to %struct.dom_dfsnum*, !dbg !6721
  store %struct.dom_dfsnum* %3, %struct.dom_dfsnum** %db, align 8, !dbg !6719
  %4 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %da, align 8, !dbg !6722
  %dfs_num = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %4, i32 0, i32 1, !dbg !6723
  %5 = load i32, i32* %dfs_num, align 4, !dbg !6723
  %6 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %db, align 8, !dbg !6724
  %dfs_num1 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %6, i32 0, i32 1, !dbg !6725
  %7 = load i32, i32* %dfs_num1, align 4, !dbg !6725
  %sub = sub nsw i32 %5, %7, !dbg !6726
  ret i32 %sub, !dbg !6727
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !6728 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6731, metadata !DIExpression()), !dbg !6732
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6732
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !6732
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !6732
  ret %struct.VEC_int_heap* %1, !dbg !6732
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !6733 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6738, metadata !DIExpression()), !dbg !6739
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !6740, metadata !DIExpression()), !dbg !6739
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !6741, metadata !DIExpression()), !dbg !6739
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6739
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !6739
  %1 = load i32, i32* %num, align 4, !dbg !6739
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6739
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !6739
  %3 = load i32, i32* %alloc, align 4, !dbg !6739
  %cmp = icmp ult i32 %1, %3, !dbg !6739
  %conv = zext i1 %cmp to i32, !dbg !6739
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6739
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6739
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6739
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !6739
  %6 = load i32, i32* %num1, align 4, !dbg !6739
  %inc = add i32 %6, 1, !dbg !6739
  store i32 %inc, i32* %num1, align 4, !dbg !6739
  %idxprom = zext i32 %6 to i64, !dbg !6739
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6739
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !6739
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !6739
  %8 = load i32*, i32** %slot_, align 8, !dbg !6739
  store i32 %7, i32* %8, align 4, !dbg !6739
  %9 = load i32*, i32** %slot_, align 8, !dbg !6739
  ret i32* %9, !dbg !6739
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_pop(%struct.VEC_int_base* %vec_) #0 !dbg !6742 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_ = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6745, metadata !DIExpression()), !dbg !6746
  call void @llvm.dbg.declare(metadata i32* %obj_, metadata !6747, metadata !DIExpression()), !dbg !6746
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6746
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !6746
  %1 = load i32, i32* %num, align 4, !dbg !6746
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6746
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 2, !dbg !6746
  %3 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6746
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %3, i32 0, i32 0, !dbg !6746
  %4 = load i32, i32* %num1, align 4, !dbg !6746
  %dec = add i32 %4, -1, !dbg !6746
  store i32 %dec, i32* %num1, align 4, !dbg !6746
  %idxprom = zext i32 %dec to i64, !dbg !6746
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6746
  %5 = load i32, i32* %arrayidx, align 4, !dbg !6746
  store i32 %5, i32* %obj_, align 4, !dbg !6746
  %6 = load i32, i32* %obj_, align 4, !dbg !6746
  ret i32 %6, !dbg !6746
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !6748 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6755, metadata !DIExpression()), !dbg !6754
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6754
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6754
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6754

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6754
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6754
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !6754
  %3 = load i32, i32* %num, align 4, !dbg !6754
  %cmp = icmp ult i32 %1, %3, !dbg !6754
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6756
  %land.ext = zext i1 %4 to i32, !dbg !6754
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6754
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !6754
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6754
  %idxprom = zext i32 %6 to i64, !dbg !6754
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6754
  %7 = load i32, i32* %arrayidx, align 4, !dbg !6754
  ret i32 %7, !dbg !6754
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) #0 !dbg !6757 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6760, metadata !DIExpression()), !dbg !6761
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6761
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6761
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6761

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6761
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !6761
  %2 = load i32, i32* %num, align 4, !dbg !6761
  br label %cond.end, !dbg !6761

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6761

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6761
  ret i32 %cond, !dbg !6761
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !6762 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6767, metadata !DIExpression()), !dbg !6768
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !6769, metadata !DIExpression()), !dbg !6768
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6768
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !6768
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6768
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !6768
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !6768
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6768

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6768
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !6768
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !6768
  br label %cond.end, !dbg !6768

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6768

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6768
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !6768
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !6768
  ret i32* %call1, !dbg !6768
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_dfsnum_interval(%struct.dom_dfsnum* %defs, i32 %n, i32 %s) #0 !dbg !6770 {
entry:
  %defs.addr = alloca %struct.dom_dfsnum*, align 8
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %f = alloca i32, align 4
  %t = alloca i32, align 4
  %m = alloca i32, align 4
  store %struct.dom_dfsnum* %defs, %struct.dom_dfsnum** %defs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_dfsnum** %defs.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6775, metadata !DIExpression()), !dbg !6776
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !6777, metadata !DIExpression()), !dbg !6778
  call void @llvm.dbg.declare(metadata i32* %f, metadata !6779, metadata !DIExpression()), !dbg !6780
  store i32 0, i32* %f, align 4, !dbg !6780
  call void @llvm.dbg.declare(metadata i32* %t, metadata !6781, metadata !DIExpression()), !dbg !6782
  %0 = load i32, i32* %n.addr, align 4, !dbg !6783
  store i32 %0, i32* %t, align 4, !dbg !6782
  call void @llvm.dbg.declare(metadata i32* %m, metadata !6784, metadata !DIExpression()), !dbg !6785
  br label %while.cond, !dbg !6786

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i32, i32* %t, align 4, !dbg !6787
  %2 = load i32, i32* %f, align 4, !dbg !6788
  %add = add i32 %2, 1, !dbg !6789
  %cmp = icmp ugt i32 %1, %add, !dbg !6790
  br i1 %cmp, label %while.body, label %while.end, !dbg !6786

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %f, align 4, !dbg !6791
  %4 = load i32, i32* %t, align 4, !dbg !6793
  %add1 = add i32 %3, %4, !dbg !6794
  %div = udiv i32 %add1, 2, !dbg !6795
  store i32 %div, i32* %m, align 4, !dbg !6796
  %5 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs.addr, align 8, !dbg !6797
  %6 = load i32, i32* %m, align 4, !dbg !6799
  %idxprom = zext i32 %6 to i64, !dbg !6797
  %arrayidx = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %5, i64 %idxprom, !dbg !6797
  %dfs_num = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx, i32 0, i32 1, !dbg !6800
  %7 = load i32, i32* %dfs_num, align 4, !dbg !6800
  %8 = load i32, i32* %s.addr, align 4, !dbg !6801
  %cmp2 = icmp ule i32 %7, %8, !dbg !6802
  br i1 %cmp2, label %if.then, label %if.else, !dbg !6803

if.then:                                          ; preds = %while.body
  %9 = load i32, i32* %m, align 4, !dbg !6804
  store i32 %9, i32* %f, align 4, !dbg !6805
  br label %if.end, !dbg !6806

if.else:                                          ; preds = %while.body
  %10 = load i32, i32* %m, align 4, !dbg !6807
  store i32 %10, i32* %t, align 4, !dbg !6808
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond, !dbg !6786, !llvm.loop !6809

while.end:                                        ; preds = %while.cond
  %11 = load %struct.dom_dfsnum*, %struct.dom_dfsnum** %defs.addr, align 8, !dbg !6811
  %12 = load i32, i32* %f, align 4, !dbg !6812
  %idxprom3 = zext i32 %12 to i64, !dbg !6811
  %arrayidx4 = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %11, i64 %idxprom3, !dbg !6811
  %bb_index = getelementptr inbounds %struct.dom_dfsnum, %struct.dom_dfsnum* %arrayidx4, i32 0, i32 0, !dbg !6813
  %13 = load i32, i32* %bb_index, align 4, !dbg !6813
  ret i32 %13, !dbg !6814
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !6815 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6818, metadata !DIExpression()), !dbg !6819
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6820
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !6820
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6820
  br i1 %tobool, label %if.then, label %if.end, !dbg !6819

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6820
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !6820
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !6820
  call void @free(i8* %4), !dbg !6820
  br label %if.end, !dbg !6820

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6819
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !6819
  ret void, !dbg !6819
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !6822 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6827, metadata !DIExpression()), !dbg !6826
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6828, metadata !DIExpression()), !dbg !6826
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6826
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !6826
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6826
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6826

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6826
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !6826
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !6826
  br label %cond.end, !dbg !6826

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6826

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6826
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6826
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !6826
  %tobool1 = icmp ne i32 %call, 0, !dbg !6826
  %lnot = xor i1 %tobool1, true, !dbg !6826
  %lnot.ext = zext i1 %lnot to i32, !dbg !6826
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6826
  %5 = load i32, i32* %extend, align 4, !dbg !6829
  %tobool2 = icmp ne i32 %5, 0, !dbg !6829
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6826

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6829
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !6829
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !6829
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6829
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !6829
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !6829
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6829
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !6829
  br label %if.end, !dbg !6829

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6826
  ret i32 %12, !dbg !6826
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !6831 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6836, metadata !DIExpression()), !dbg !6835
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6835
  %cmp = icmp sge i32 %0, 0, !dbg !6835
  %conv = zext i1 %cmp to i32, !dbg !6835
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6835
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !6835
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6835

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6835
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !6835
  %3 = load i32, i32* %alloc, align 4, !dbg !6835
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6835
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !6835
  %5 = load i32, i32* %num, align 4, !dbg !6835
  %sub = sub i32 %3, %5, !dbg !6835
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6835
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6835
  %conv2 = zext i1 %cmp1 to i32, !dbg !6835
  br label %cond.end, !dbg !6835

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6835
  %tobool3 = icmp ne i32 %7, 0, !dbg !6835
  %lnot = xor i1 %tobool3, true, !dbg !6835
  %lnot.ext = zext i1 %lnot to i32, !dbg !6835
  br label %cond.end, !dbg !6835

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6835
  ret i32 %cond, !dbg !6835
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_flags_in_bb(%struct.basic_block_def* %bb) #0 !dbg !6837 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6840, metadata !DIExpression()), !dbg !6841
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6844
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !6846
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6846
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6846
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6846
  br label %for.cond, !dbg !6847

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6848
  %tobool = icmp ne i8 %call, 0, !dbg !6850
  %lnot = xor i1 %tobool, true, !dbg !6850
  br i1 %lnot, label %for.body, label %for.end, !dbg !6851

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6852, metadata !DIExpression()), !dbg !6854
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6855
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !6854
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6856
  call void @set_rewrite_uses(%union.gimple_statement_d* %3, i8 zeroext 0), !dbg !6857
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6858
  call void @set_register_defs(%union.gimple_statement_d* %4, i8 zeroext 0), !dbg !6859
  br label %for.inc, !dbg !6860

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6861
  br label %for.cond, !dbg !6862, !llvm.loop !6863

for.end:                                          ; preds = %for.cond
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6865
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp2, %struct.basic_block_def* %5), !dbg !6867
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6867
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !6867
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !6867
  br label %for.cond3, !dbg !6868

for.cond3:                                        ; preds = %for.inc11, %for.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6869
  %tobool5 = icmp ne i8 %call4, 0, !dbg !6871
  %lnot6 = xor i1 %tobool5, true, !dbg !6871
  br i1 %lnot6, label %for.body7, label %for.end12, !dbg !6872

for.body7:                                        ; preds = %for.cond3
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6873
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !6875
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6876
  %call9 = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %8), !dbg !6876
  %tobool10 = icmp ne i8 %call9, 0, !dbg !6876
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !6876

cond.true:                                        ; preds = %for.body7
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 447, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6876
  br label %cond.end, !dbg !6876

cond.false:                                       ; preds = %for.body7
  br label %cond.end, !dbg !6876

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6876
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6877
  call void @set_rewrite_uses(%union.gimple_statement_d* %9, i8 zeroext 0), !dbg !6878
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6879
  call void @set_register_defs(%union.gimple_statement_d* %10, i8 zeroext 0), !dbg !6880
  br label %for.inc11, !dbg !6881

for.inc11:                                        ; preds = %cond.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6882
  br label %for.cond3, !dbg !6883, !llvm.loop !6884

for.end12:                                        ; preds = %for.cond3
  ret void, !dbg !6886
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %g) #0 !dbg !6887 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6888, metadata !DIExpression()), !dbg !6889
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6890
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6891
  %conv = zext i8 %call to i32, !dbg !6892
  %tobool = icmp ne i32 %conv, 0, !dbg !6892
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6892

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6893
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6894
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6895
  %bf.load = load i32, i32* %2, align 8, !dbg !6895
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !6895
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6895
  %conv1 = trunc i32 %bf.clear to i8, !dbg !6896
  %conv2 = zext i8 %conv1 to i32, !dbg !6896
  br label %cond.end, !dbg !6892

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6892

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ 0, %cond.false ], !dbg !6892
  %conv3 = trunc i32 %cond to i8, !dbg !6892
  ret i8 %conv3, !dbg !6897
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_vec_heap_reserve(%struct.VEC_gimple_vec_heap** %vec_, i32 %alloc_) #0 !dbg !6898 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_vec_heap** %vec_, %struct.VEC_gimple_vec_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_heap*** %vec_.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6904, metadata !DIExpression()), !dbg !6903
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6905, metadata !DIExpression()), !dbg !6903
  %0 = load %struct.VEC_gimple_vec_heap**, %struct.VEC_gimple_vec_heap*** %vec_.addr, align 8, !dbg !6903
  %1 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** %0, align 8, !dbg !6903
  %tobool = icmp ne %struct.VEC_gimple_vec_heap* %1, null, !dbg !6903
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6903

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_vec_heap**, %struct.VEC_gimple_vec_heap*** %vec_.addr, align 8, !dbg !6903
  %3 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** %2, align 8, !dbg !6903
  %base = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %3, i32 0, i32 0, !dbg !6903
  br label %cond.end, !dbg !6903

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6903

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_vec_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6903
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6903
  %call = call i32 @VEC_gimple_vec_base_space(%struct.VEC_gimple_vec_base* %cond, i32 %4), !dbg !6903
  %tobool1 = icmp ne i32 %call, 0, !dbg !6903
  %lnot = xor i1 %tobool1, true, !dbg !6903
  %lnot.ext = zext i1 %lnot to i32, !dbg !6903
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6903
  %5 = load i32, i32* %extend, align 4, !dbg !6906
  %tobool2 = icmp ne i32 %5, 0, !dbg !6906
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6903

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_vec_heap**, %struct.VEC_gimple_vec_heap*** %vec_.addr, align 8, !dbg !6906
  %7 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** %6, align 8, !dbg !6906
  %8 = bitcast %struct.VEC_gimple_vec_heap* %7 to i8*, !dbg !6906
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6906
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6906
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_vec_heap*, !dbg !6906
  %11 = load %struct.VEC_gimple_vec_heap**, %struct.VEC_gimple_vec_heap*** %vec_.addr, align 8, !dbg !6906
  store %struct.VEC_gimple_vec_heap* %10, %struct.VEC_gimple_vec_heap** %11, align 8, !dbg !6906
  br label %if.end, !dbg !6906

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6903
  ret i32 %12, !dbg !6903
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_vec_base_length(%struct.VEC_gimple_vec_base* %vec_) #0 !dbg !6908 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_base*, align 8
  store %struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_vec_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_base** %vec_.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  %0 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6912
  %tobool = icmp ne %struct.VEC_gimple_vec_base* %0, null, !dbg !6912
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6912

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6912
  %num = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %1, i32 0, i32 0, !dbg !6912
  %2 = load i32, i32* %num, align 8, !dbg !6912
  br label %cond.end, !dbg !6912

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6912

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6912
  ret i32 %cond, !dbg !6912
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap** @VEC_gimple_vec_base_quick_push(%struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_heap* %obj_) #0 !dbg !6913 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_base*, align 8
  %obj_.addr = alloca %struct.VEC_gimple_heap*, align 8
  %slot_ = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_vec_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_base** %vec_.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  store %struct.VEC_gimple_heap* %obj_, %struct.VEC_gimple_heap** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %obj_.addr, metadata !6919, metadata !DIExpression()), !dbg !6918
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %slot_, metadata !6920, metadata !DIExpression()), !dbg !6918
  %0 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6918
  %num = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %0, i32 0, i32 0, !dbg !6918
  %1 = load i32, i32* %num, align 8, !dbg !6918
  %2 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6918
  %alloc = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %2, i32 0, i32 1, !dbg !6918
  %3 = load i32, i32* %alloc, align 4, !dbg !6918
  %cmp = icmp ult i32 %1, %3, !dbg !6918
  %conv = zext i1 %cmp to i32, !dbg !6918
  %4 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6918
  %vec = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %4, i32 0, i32 2, !dbg !6918
  %5 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6918
  %num1 = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %5, i32 0, i32 0, !dbg !6918
  %6 = load i32, i32* %num1, align 8, !dbg !6918
  %inc = add i32 %6, 1, !dbg !6918
  store i32 %inc, i32* %num1, align 8, !dbg !6918
  %idxprom = zext i32 %6 to i64, !dbg !6918
  %arrayidx = getelementptr inbounds [1 x %struct.VEC_gimple_heap*], [1 x %struct.VEC_gimple_heap*]* %vec, i64 0, i64 %idxprom, !dbg !6918
  store %struct.VEC_gimple_heap** %arrayidx, %struct.VEC_gimple_heap*** %slot_, align 8, !dbg !6918
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %obj_.addr, align 8, !dbg !6918
  %8 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %slot_, align 8, !dbg !6918
  store %struct.VEC_gimple_heap* %7, %struct.VEC_gimple_heap** %8, align 8, !dbg !6918
  %9 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %slot_, align 8, !dbg !6918
  ret %struct.VEC_gimple_heap** %9, !dbg !6918
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !6921 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6924, metadata !DIExpression()), !dbg !6925
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6925
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6925
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !6925
  ret %struct.VEC_gimple_heap* %1, !dbg !6925
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !6926 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6930, metadata !DIExpression()), !dbg !6931
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !6932, metadata !DIExpression()), !dbg !6931
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6931
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !6931
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6931
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !6931
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !6931
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6931

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6931
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !6931
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !6931
  br label %cond.end, !dbg !6931

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6931

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6931
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !6931
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !6931
  ret %union.gimple_statement_d** %call1, !dbg !6931
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_vec_base_space(%struct.VEC_gimple_vec_base* %vec_, i32 %alloc_) #0 !dbg !6933 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_vec_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_vec_base* %vec_, %struct.VEC_gimple_vec_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_vec_base** %vec_.addr, metadata !6936, metadata !DIExpression()), !dbg !6937
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6938, metadata !DIExpression()), !dbg !6937
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6937
  %cmp = icmp sge i32 %0, 0, !dbg !6937
  %conv = zext i1 %cmp to i32, !dbg !6937
  %1 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6937
  %tobool = icmp ne %struct.VEC_gimple_vec_base* %1, null, !dbg !6937
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6937

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6937
  %alloc = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %2, i32 0, i32 1, !dbg !6937
  %3 = load i32, i32* %alloc, align 4, !dbg !6937
  %4 = load %struct.VEC_gimple_vec_base*, %struct.VEC_gimple_vec_base** %vec_.addr, align 8, !dbg !6937
  %num = getelementptr inbounds %struct.VEC_gimple_vec_base, %struct.VEC_gimple_vec_base* %4, i32 0, i32 0, !dbg !6937
  %5 = load i32, i32* %num, align 8, !dbg !6937
  %sub = sub i32 %3, %5, !dbg !6937
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6937
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6937
  %conv2 = zext i1 %cmp1 to i32, !dbg !6937
  br label %cond.end, !dbg !6937

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6937
  %tobool3 = icmp ne i32 %7, 0, !dbg !6937
  %lnot = xor i1 %tobool3, true, !dbg !6937
  %lnot.ext = zext i1 %lnot to i32, !dbg !6937
  br label %cond.end, !dbg !6937

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6937
  ret i32 %cond, !dbg !6937
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !6939 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6944, metadata !DIExpression()), !dbg !6943
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6945, metadata !DIExpression()), !dbg !6943
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6943
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !6943
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !6943
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6943

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6943
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !6943
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !6943
  br label %cond.end, !dbg !6943

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6943
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6943
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !6943
  %tobool1 = icmp ne i32 %call, 0, !dbg !6943
  %lnot = xor i1 %tobool1, true, !dbg !6943
  %lnot.ext = zext i1 %lnot to i32, !dbg !6943
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6943
  %5 = load i32, i32* %extend, align 4, !dbg !6946
  %tobool2 = icmp ne i32 %5, 0, !dbg !6946
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6943

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6946
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !6946
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !6946
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6946
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6946
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !6946
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !6946
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !6946
  br label %if.end, !dbg !6946

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6943
  ret i32 %12, !dbg !6943
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !6948 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6952, metadata !DIExpression()), !dbg !6953
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !6954, metadata !DIExpression()), !dbg !6953
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !6955, metadata !DIExpression()), !dbg !6953
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6953
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !6953
  %1 = load i32, i32* %num, align 8, !dbg !6953
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6953
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !6953
  %3 = load i32, i32* %alloc, align 4, !dbg !6953
  %cmp = icmp ult i32 %1, %3, !dbg !6953
  %conv = zext i1 %cmp to i32, !dbg !6953
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6953
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !6953
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6953
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !6953
  %6 = load i32, i32* %num1, align 8, !dbg !6953
  %inc = add i32 %6, 1, !dbg !6953
  store i32 %inc, i32* %num1, align 8, !dbg !6953
  %idxprom = zext i32 %6 to i64, !dbg !6953
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !6953
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !6953
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !6953
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !6953
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !6953
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !6953
  ret %union.gimple_statement_d** %9, !dbg !6953
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !6956 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6961, metadata !DIExpression()), !dbg !6960
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6960
  %cmp = icmp sge i32 %0, 0, !dbg !6960
  %conv = zext i1 %cmp to i32, !dbg !6960
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6960
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !6960
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6960

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6960
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !6960
  %3 = load i32, i32* %alloc, align 4, !dbg !6960
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6960
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !6960
  %5 = load i32, i32* %num, align 8, !dbg !6960
  %sub = sub i32 %3, %5, !dbg !6960
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6960
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6960
  %conv2 = zext i1 %cmp1 to i32, !dbg !6960
  br label %cond.end, !dbg !6960

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6960
  %tobool3 = icmp ne i32 %7, 0, !dbg !6960
  %lnot = xor i1 %tobool3, true, !dbg !6960
  %lnot.ext = zext i1 %lnot to i32, !dbg !6960
  br label %cond.end, !dbg !6960

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6960
  ret i32 %cond, !dbg !6960
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @repl_map_hash(i8* %p) #0 !dbg !6962 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6963, metadata !DIExpression()), !dbg !6964
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !6965
  %1 = load i8*, i8** %p.addr, align 8, !dbg !6966
  %2 = bitcast i8* %1 to %struct.repl_map_d*, !dbg !6967
  %name = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %2, i32 0, i32 0, !dbg !6968
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6968
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !6969
  %call = call i32 %0(i8* %4), !dbg !6965
  ret i32 %call, !dbg !6970
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @repl_map_eq(i8* %p1, i8* %p2) #0 !dbg !6971 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6972, metadata !DIExpression()), !dbg !6973
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6974, metadata !DIExpression()), !dbg !6975
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6976
  %1 = bitcast i8* %0 to %struct.repl_map_d*, !dbg !6977
  %name = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %1, i32 0, i32 0, !dbg !6978
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6978
  %3 = load i8*, i8** %p2.addr, align 8, !dbg !6979
  %4 = bitcast i8* %3 to %struct.repl_map_d*, !dbg !6980
  %name1 = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %4, i32 0, i32 0, !dbg !6981
  %5 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !6981
  %cmp = icmp eq %union.tree_node* %2, %5, !dbg !6982
  %conv = zext i1 %cmp to i32, !dbg !6982
  ret i32 %conv, !dbg !6983
}

; Function Attrs: noinline nounwind uwtable
define internal void @repl_map_free(i8* %p) #0 !dbg !6984 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6985, metadata !DIExpression()), !dbg !6986
  %0 = load i8*, i8** %p.addr, align 8, !dbg !6987
  %1 = bitcast i8* %0 to %struct.repl_map_d*, !dbg !6987
  %set = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %1, i32 0, i32 1, !dbg !6987
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set, align 8, !dbg !6987
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %2), !dbg !6987
  %3 = load i8*, i8** %p.addr, align 8, !dbg !6987
  %4 = bitcast i8* %3 to %struct.repl_map_d*, !dbg !6987
  %set1 = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %4, i32 0, i32 1, !dbg !6987
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %set1, align 8, !dbg !6987
  %5 = load i8*, i8** %p.addr, align 8, !dbg !6988
  call void @free(i8* %5), !dbg !6989
  ret void, !dbg !6990
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.simple_bitmap_def* @sbitmap_resize(%struct.simple_bitmap_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_repl_tbl(%union.tree_node* %new_tree, %union.tree_node* %old) #0 !dbg !6991 {
entry:
  %new_tree.addr = alloca %union.tree_node*, align 8
  %old.addr = alloca %union.tree_node*, align 8
  %m = alloca %struct.repl_map_d, align 8
  %mp = alloca %struct.repl_map_d*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !6992, metadata !DIExpression()), !dbg !6993
  store %union.tree_node* %old, %union.tree_node** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old.addr, metadata !6994, metadata !DIExpression()), !dbg !6995
  call void @llvm.dbg.declare(metadata %struct.repl_map_d* %m, metadata !6996, metadata !DIExpression()), !dbg !6997
  call void @llvm.dbg.declare(metadata %struct.repl_map_d** %mp, metadata !6998, metadata !DIExpression()), !dbg !6999
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7000, metadata !DIExpression()), !dbg !7001
  %0 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !7002
  %name = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %m, i32 0, i32 0, !dbg !7003
  store %union.tree_node* %0, %union.tree_node** %name, align 8, !dbg !7004
  %1 = load %struct.htab*, %struct.htab** @repl_tbl, align 8, !dbg !7005
  %2 = bitcast %struct.repl_map_d* %m to i8*, !dbg !7006
  %call = call i8** @htab_find_slot(%struct.htab* %1, i8* %2, i32 1), !dbg !7007
  store i8** %call, i8*** %slot, align 8, !dbg !7008
  %3 = load i8**, i8*** %slot, align 8, !dbg !7009
  %4 = load i8*, i8** %3, align 8, !dbg !7011
  %cmp = icmp eq i8* %4, null, !dbg !7012
  br i1 %cmp, label %if.then, label %if.else, !dbg !7013

if.then:                                          ; preds = %entry
  %call1 = call i8* @xmalloc(i64 16), !dbg !7014
  %5 = bitcast i8* %call1 to %struct.repl_map_d*, !dbg !7014
  store %struct.repl_map_d* %5, %struct.repl_map_d** %mp, align 8, !dbg !7016
  %6 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !7017
  %7 = load %struct.repl_map_d*, %struct.repl_map_d** %mp, align 8, !dbg !7018
  %name2 = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %7, i32 0, i32 0, !dbg !7019
  store %union.tree_node* %6, %union.tree_node** %name2, align 8, !dbg !7020
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7021
  %8 = load %struct.repl_map_d*, %struct.repl_map_d** %mp, align 8, !dbg !7022
  %set = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %8, i32 0, i32 1, !dbg !7023
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %set, align 8, !dbg !7024
  %9 = load %struct.repl_map_d*, %struct.repl_map_d** %mp, align 8, !dbg !7025
  %10 = bitcast %struct.repl_map_d* %9 to i8*, !dbg !7026
  %11 = load i8**, i8*** %slot, align 8, !dbg !7027
  store i8* %10, i8** %11, align 8, !dbg !7028
  br label %if.end, !dbg !7029

if.else:                                          ; preds = %entry
  %12 = load i8**, i8*** %slot, align 8, !dbg !7030
  %13 = load i8*, i8** %12, align 8, !dbg !7031
  %14 = bitcast i8* %13 to %struct.repl_map_d*, !dbg !7032
  store %struct.repl_map_d* %14, %struct.repl_map_d** %mp, align 8, !dbg !7033
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load %struct.repl_map_d*, %struct.repl_map_d** %mp, align 8, !dbg !7034
  %set4 = getelementptr inbounds %struct.repl_map_d, %struct.repl_map_d* %15, i32 0, i32 1, !dbg !7035
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set4, align 8, !dbg !7035
  %17 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !7036
  %ssa_name = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !7036
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7036
  %18 = load i32, i32* %version, align 8, !dbg !7036
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %16, i32 %18), !dbg !7037
  ret void, !dbg !7038
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7039 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7042, metadata !DIExpression()), !dbg !7043
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7044
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7046
  %1 = load i8*, i8** %popcount, align 8, !dbg !7046
  %tobool = icmp ne i8* %1, null, !dbg !7044
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7047

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7048, metadata !DIExpression()), !dbg !7050
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7051
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7051
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7051
  %div = udiv i32 %3, 64, !dbg !7051
  %idxprom = zext i32 %div to i64, !dbg !7051
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7051
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7051
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7051
  %rem = urem i32 %5, 64, !dbg !7051
  %sh_prom = zext i32 %rem to i64, !dbg !7051
  %shr = lshr i64 %4, %sh_prom, !dbg !7051
  %and = and i64 %shr, 1, !dbg !7051
  %conv = trunc i64 %and to i8, !dbg !7051
  store i8 %conv, i8* %oldbit, align 1, !dbg !7052
  %6 = load i8, i8* %oldbit, align 1, !dbg !7053
  %tobool1 = icmp ne i8 %6, 0, !dbg !7053
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7055

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7056
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7057
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7057
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7058
  %div4 = udiv i32 %9, 64, !dbg !7059
  %idxprom5 = zext i32 %div4 to i64, !dbg !7056
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7056
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7060
  %dec = add i8 %10, -1, !dbg !7060
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !7060
  br label %if.end, !dbg !7056

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7061

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7062
  %rem8 = urem i32 %11, 64, !dbg !7063
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7064
  %shl = shl i64 1, %sh_prom9, !dbg !7064
  %neg = xor i64 %shl, -1, !dbg !7065
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7066
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7067
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7068
  %div11 = udiv i32 %13, 64, !dbg !7069
  %idxprom12 = zext i32 %div11 to i64, !dbg !7066
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7066
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7070
  %and14 = and i64 %14, %neg, !dbg !7070
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !7070
  ret void, !dbg !7071
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_def_site_for(%union.tree_node* %name, i8 zeroext %insert_phi_p) #0 !dbg !7072 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %insert_phi_p.addr = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7075, metadata !DIExpression()), !dbg !7076
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !7077, metadata !DIExpression()), !dbg !7078
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7079, metadata !DIExpression()), !dbg !7080
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7081, metadata !DIExpression()), !dbg !7082
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !7083
  %cmp = icmp eq %struct.bitmap_head_def* %0, null, !dbg !7083
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !7083

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @names_to_release, align 8, !dbg !7083
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7083
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !7083
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7083
  %3 = load i32, i32* %version, align 8, !dbg !7083
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !7083
  %tobool = icmp ne i32 %call, 0, !dbg !7083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7083

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2618, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7083
  br label %cond.end, !dbg !7083

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !7083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7083
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7084
  %ssa_name1 = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !7084
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 2, !dbg !7084
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7084
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %stmt, align 8, !dbg !7085
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7086
  %call2 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !7087
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %bb, align 8, !dbg !7088
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7089
  %tobool3 = icmp ne %struct.basic_block_def* %7, null, !dbg !7089
  br i1 %tobool3, label %if.then, label %if.end, !dbg !7091

if.then:                                          ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7092
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !7092
  %9 = load i32, i32* %index, align 8, !dbg !7092
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7092
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !7092
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7092
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7092
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 5, !dbg !7092
  %12 = load i32, i32* %x_last_basic_block, align 8, !dbg !7092
  %cmp4 = icmp slt i32 %9, %12, !dbg !7092
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !7092

cond.true5:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2624, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7092
  br label %cond.end7, !dbg !7092

cond.false6:                                      ; preds = %if.then
  br label %cond.end7, !dbg !7092

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !7092
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7094
  call void @mark_block_for_update(%struct.basic_block_def* %13), !dbg !7095
  %14 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7096
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7097
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7098
  %17 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !7099
  call void @mark_def_interesting(%union.tree_node* %14, %union.gimple_statement_d* %15, %struct.basic_block_def* %16, i8 zeroext %17), !dbg !7100
  br label %if.end, !dbg !7101

if.end:                                           ; preds = %cond.end7, %cond.end
  ret void, !dbg !7102
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_use_sites_for(%union.tree_node* %name, i8 zeroext %insert_phi_p) #0 !dbg !7103 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %insert_phi_p.addr = alloca i8, align 1
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ix = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !7104, metadata !DIExpression()), !dbg !7105
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7108, metadata !DIExpression()), !dbg !7109
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !7110, metadata !DIExpression()), !dbg !7118
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7119
  %call = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %0), !dbg !7119
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7119
  br label %for.cond, !dbg !7119

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %iter), !dbg !7121
  %tobool = icmp ne i8 %call1, 0, !dbg !7121
  %lnot = xor i1 %tobool, true, !dbg !7121
  br i1 %lnot, label %for.body, label %for.end, !dbg !7119

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7123, metadata !DIExpression()), !dbg !7125
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7126
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !7126
  %stmt2 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7126
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !7126
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt, align 8, !dbg !7125
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7127, metadata !DIExpression()), !dbg !7128
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7129
  %call3 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !7130
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %bb, align 8, !dbg !7128
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7131
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !7133
  %cmp = icmp eq i32 %call4, 16, !dbg !7134
  br i1 %cmp, label %if.then, label %if.else, !dbg !7135

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !7136, metadata !DIExpression()), !dbg !7138
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7139
  %call5 = call i32 @phi_arg_index_from_use(%struct.ssa_use_operand_d* %5), !dbg !7139
  store i32 %call5, i32* %ix, align 4, !dbg !7138
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7140, metadata !DIExpression()), !dbg !7141
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7142
  %7 = load i32, i32* %ix, align 4, !dbg !7143
  %conv = sext i32 %7 to i64, !dbg !7143
  %call6 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %6, i64 %conv), !dbg !7144
  store %struct.edge_def* %call6, %struct.edge_def** %e, align 8, !dbg !7141
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7145
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7146
  %10 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7147
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 0, !dbg !7148
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7148
  %12 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !7149
  call void @mark_use_interesting(%union.tree_node* %8, %union.gimple_statement_d* %9, %struct.basic_block_def* %11, i8 zeroext %12), !dbg !7150
  br label %if.end, !dbg !7151

if.else:                                          ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !7152
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7154
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7155
  %16 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !7156
  call void @mark_use_interesting(%union.tree_node* %13, %union.gimple_statement_d* %14, %struct.basic_block_def* %15, i8 zeroext %16), !dbg !7157
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !7158

for.inc:                                          ; preds = %if.end
  %call7 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %iter), !dbg !7121
  store %struct.ssa_use_operand_d* %call7, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7121
  br label %for.cond, !dbg !7121, !llvm.loop !7159

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7161
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_def_interesting(%union.tree_node* %var, %union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb, i8 zeroext %insert_phi_p) #0 !dbg !7162 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insert_phi_p.addr = alloca i8, align 1
  %is_phi_p = alloca i8, align 1
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %set = alloca %struct.bitmap_head_def*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7165, metadata !DIExpression()), !dbg !7166
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7167, metadata !DIExpression()), !dbg !7168
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !7173
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7173
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !7173
  %2 = load i32, i32* %index, align 8, !dbg !7173
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %2), !dbg !7173
  %tobool = icmp ne i32 %call, 0, !dbg !7173
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7173

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7173
  br label %cond.end, !dbg !7173

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7173
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7174
  call void @set_register_defs(%union.gimple_statement_d* %3, i8 zeroext 1), !dbg !7175
  %4 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !7176
  %tobool1 = icmp ne i8 %4, 0, !dbg !7176
  br i1 %tobool1, label %if.then, label %if.end26, !dbg !7178

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %is_phi_p, metadata !7179, metadata !DIExpression()), !dbg !7181
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7182
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !7183
  %cmp = icmp eq i32 %call2, 16, !dbg !7184
  %conv = zext i1 %cmp to i32, !dbg !7184
  %conv3 = trunc i32 %conv to i8, !dbg !7183
  store i8 %conv3, i8* %is_phi_p, align 1, !dbg !7181
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7185
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7186
  %8 = load i8, i8* %is_phi_p, align 1, !dbg !7187
  call void @set_def_block(%union.tree_node* %6, %struct.basic_block_def* %7, i8 zeroext %8), !dbg !7188
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7189
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7189
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !7189
  %bf.load = load i64, i64* %10, align 8, !dbg !7189
  %bf.clear = and i64 %bf.load, 65535, !dbg !7189
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7189
  %cmp4 = icmp eq i32 %bf.cast, 141, !dbg !7191
  br i1 %cmp4, label %land.lhs.true, label %if.end25, !dbg !7192

land.lhs.true:                                    ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7193
  %call6 = call zeroext i8 @is_new_name(%union.tree_node* %11), !dbg !7194
  %conv7 = zext i8 %call6 to i32, !dbg !7194
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !7194
  br i1 %tobool8, label %if.then9, label %if.end25, !dbg !7195

if.then9:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7196, metadata !DIExpression()), !dbg !7198
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7199, metadata !DIExpression()), !dbg !7200
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set, metadata !7201, metadata !DIExpression()), !dbg !7202
  %12 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7203
  %call10 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %12), !dbg !7204
  store %struct.bitmap_head_def* %call10, %struct.bitmap_head_def** %set, align 8, !dbg !7202
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set, align 8, !dbg !7205
  %tobool11 = icmp ne %struct.bitmap_head_def* %13, null, !dbg !7205
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !7207

if.then12:                                        ; preds = %if.then9
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set, align 8, !dbg !7208
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %14, i32 0, i32* %i), !dbg !7208
  br label %for.cond, !dbg !7208

for.cond:                                         ; preds = %for.inc, %if.then12
  %call13 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7210
  %tobool14 = icmp ne i8 %call13, 0, !dbg !7208
  br i1 %tobool14, label %for.body, label %for.end, !dbg !7208

for.body:                                         ; preds = %for.cond
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7212
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !7212
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !7212
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7212
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !7212
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !7212
  %tobool15 = icmp ne %struct.VEC_tree_gc* %17, null, !dbg !7212
  br i1 %tobool15, label %cond.true16, label %cond.false21, !dbg !7212

cond.true16:                                      ; preds = %for.body
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7212
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !7212
  %gimple_df18 = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 3, !dbg !7212
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df18, align 8, !dbg !7212
  %ssa_names19 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 2, !dbg !7212
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names19, align 8, !dbg !7212
  %base20 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %20, i32 0, i32 0, !dbg !7212
  br label %cond.end22, !dbg !7212

cond.false21:                                     ; preds = %for.body
  br label %cond.end22, !dbg !7212

cond.end22:                                       ; preds = %cond.false21, %cond.true16
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true16 ], [ null, %cond.false21 ], !dbg !7212
  %21 = load i32, i32* %i, align 4, !dbg !7212
  %call24 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond23, i32 %21), !dbg !7212
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7213
  %23 = load i8, i8* %is_phi_p, align 1, !dbg !7214
  call void @set_def_block(%union.tree_node* %call24, %struct.basic_block_def* %22, i8 zeroext %23), !dbg !7215
  br label %for.inc, !dbg !7215

for.inc:                                          ; preds = %cond.end22
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7210
  br label %for.cond, !dbg !7210, !llvm.loop !7216

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !7217

if.end:                                           ; preds = %for.end, %if.then9
  br label %if.end25, !dbg !7218

if.end25:                                         ; preds = %if.end, %land.lhs.true, %if.then
  br label %if.end26, !dbg !7219

if.end26:                                         ; preds = %if.end25, %cond.end
  ret void, !dbg !7220
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !7221 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7225, metadata !DIExpression()), !dbg !7226
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7227, metadata !DIExpression()), !dbg !7228
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7229
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !7229
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !7229
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7230
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !7231
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !7232
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7233
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !7234
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !7234
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !7235
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7235
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7236
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !7237
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7238
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7239
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !7241
  %tobool = icmp ne i8 %call, 0, !dbg !7241
  br i1 %tobool, label %if.then, label %if.end, !dbg !7242

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7243
  br label %return, !dbg !7243

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7244
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !7245
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !7245
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7246
  br label %return, !dbg !7246

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7247
  ret %struct.ssa_use_operand_d* %9, !dbg !7247
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7248 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7253, metadata !DIExpression()), !dbg !7254
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7255
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !7256
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7256
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7257
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !7258
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !7258
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !7259
  %conv = zext i1 %cmp to i32, !dbg !7259
  %conv1 = trunc i32 %conv to i8, !dbg !7260
  ret i8 %conv1, !dbg !7261
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @phi_arg_index_from_use(%struct.ssa_use_operand_d* %use) #0 !dbg !7262 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %element = alloca %struct.phi_arg_d*, align 8
  %root = alloca %struct.phi_arg_d*, align 8
  %index = alloca i64, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %element, metadata !7267, metadata !DIExpression()), !dbg !7268
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %root, metadata !7269, metadata !DIExpression()), !dbg !7270
  call void @llvm.dbg.declare(metadata i64* %index, metadata !7271, metadata !DIExpression()), !dbg !7272
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7273, metadata !DIExpression()), !dbg !7274
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7275
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 2, !dbg !7275
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7275
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7275
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %phi, align 8, !dbg !7276
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7277
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !7277
  %cmp = icmp eq i32 %call, 16, !dbg !7277
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7277

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7277
  br label %cond.end, !dbg !7277

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7277
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7278
  %4 = bitcast %struct.ssa_use_operand_d* %3 to %struct.phi_arg_d*, !dbg !7279
  store %struct.phi_arg_d* %4, %struct.phi_arg_d** %element, align 8, !dbg !7280
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7281
  %call1 = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %5, i32 0), !dbg !7282
  store %struct.phi_arg_d* %call1, %struct.phi_arg_d** %root, align 8, !dbg !7283
  %6 = load %struct.phi_arg_d*, %struct.phi_arg_d** %element, align 8, !dbg !7284
  %7 = load %struct.phi_arg_d*, %struct.phi_arg_d** %root, align 8, !dbg !7285
  %sub.ptr.lhs.cast = ptrtoint %struct.phi_arg_d* %6 to i64, !dbg !7286
  %sub.ptr.rhs.cast = ptrtoint %struct.phi_arg_d* %7 to i64, !dbg !7286
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !7286
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48, !dbg !7286
  store i64 %sub.ptr.div, i64* %index, align 8, !dbg !7287
  %8 = load i64, i64* %index, align 8, !dbg !7288
  %conv = trunc i64 %8 to i32, !dbg !7288
  ret i32 %conv, !dbg !7289
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !7290 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7293, metadata !DIExpression()), !dbg !7294
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !7295, metadata !DIExpression()), !dbg !7296
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7297
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7297
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !7297
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7297
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7297
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7297

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7297
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !7297
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !7297
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !7297
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7297
  br label %cond.end, !dbg !7297

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7297

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7297
  %4 = load i64, i64* %i.addr, align 8, !dbg !7297
  %conv = trunc i64 %4 to i32, !dbg !7297
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !7297
  ret %struct.edge_def* %call3, !dbg !7298
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_use_interesting(%union.tree_node* %var, %union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb, i8 zeroext %insert_phi_p) #0 !dbg !7299 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insert_phi_p.addr = alloca i8, align 1
  %def_bb = alloca %struct.basic_block_def*, align 8
  %db_p = alloca %struct.def_blocks_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7300, metadata !DIExpression()), !dbg !7301
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7302, metadata !DIExpression()), !dbg !7303
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7304, metadata !DIExpression()), !dbg !7305
  store i8 %insert_phi_p, i8* %insert_phi_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert_phi_p.addr, metadata !7306, metadata !DIExpression()), !dbg !7307
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !7308, metadata !DIExpression()), !dbg !7309
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7310
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7311
  store %struct.basic_block_def* %call, %struct.basic_block_def** %def_bb, align 8, !dbg !7309
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7312
  call void @mark_block_for_update(%struct.basic_block_def* %1), !dbg !7313
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7314
  call void @mark_block_for_update(%struct.basic_block_def* %2), !dbg !7315
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7316
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !7318
  %cmp = icmp eq i32 %call1, 16, !dbg !7319
  br i1 %cmp, label %if.then, label %if.else, !dbg !7320

if.then:                                          ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !7321
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7322
  call void @mark_phi_for_rewrite(%struct.basic_block_def* %4, %union.gimple_statement_d* %5), !dbg !7323
  br label %if.end4, !dbg !7323

if.else:                                          ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7324
  call void @set_rewrite_uses(%union.gimple_statement_d* %6, i8 zeroext 1), !dbg !7326
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7327
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %7), !dbg !7329
  %tobool = icmp ne i8 %call2, 0, !dbg !7329
  br i1 %tobool, label %if.then3, label %if.end, !dbg !7330

if.then3:                                         ; preds = %if.else
  br label %if.end12, !dbg !7331

if.end:                                           ; preds = %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %8 = load i8, i8* %insert_phi_p.addr, align 1, !dbg !7332
  %tobool5 = icmp ne i8 %8, 0, !dbg !7332
  br i1 %tobool5, label %if.then6, label %if.end12, !dbg !7334

if.then6:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %struct.def_blocks_d** %db_p, metadata !7335, metadata !DIExpression()), !dbg !7337
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7338
  %call7 = call %struct.def_blocks_d* @get_def_blocks_for(%union.tree_node* %9), !dbg !7339
  store %struct.def_blocks_d* %call7, %struct.def_blocks_d** %db_p, align 8, !dbg !7337
  %10 = load %struct.def_blocks_d*, %struct.def_blocks_d** %db_p, align 8, !dbg !7340
  %def_blocks = getelementptr inbounds %struct.def_blocks_d, %struct.def_blocks_d* %10, i32 0, i32 1, !dbg !7342
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %def_blocks, align 8, !dbg !7342
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7343
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !7344
  %13 = load i32, i32* %index, align 8, !dbg !7344
  %call8 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %11, i32 %13), !dbg !7345
  %tobool9 = icmp ne i32 %call8, 0, !dbg !7345
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !7346

if.then10:                                        ; preds = %if.then6
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7347
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7348
  call void @set_livein_block(%union.tree_node* %14, %struct.basic_block_def* %15), !dbg !7349
  br label %if.end11, !dbg !7349

if.end11:                                         ; preds = %if.then10, %if.then6
  br label %if.end12, !dbg !7350

if.end12:                                         ; preds = %if.then3, %if.end11, %if.end4
  ret void, !dbg !7351
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7352 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7355, metadata !DIExpression()), !dbg !7356
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !7357, metadata !DIExpression()), !dbg !7358
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7359
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !7360
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7360
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !7358
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !7361
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7362
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7362
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7363
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !7364
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !7365
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7366
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !7368
  %tobool = icmp ne i8 %call, 0, !dbg !7368
  br i1 %tobool, label %if.then, label %if.end, !dbg !7369

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7370
  br label %return, !dbg !7370

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7371
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !7372
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !7372
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7373
  br label %return, !dbg !7373

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7374
  ret %struct.ssa_use_operand_d* %8, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7375 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7376, metadata !DIExpression()), !dbg !7377
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7378
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7379
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7380
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7380
  ret %union.tree_node* %1, !dbg !7381
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %sym) #0 !dbg !7382 {
entry:
  %sym.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !7383, metadata !DIExpression()), !dbg !7384
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7385
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7385
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !7385
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7385
  %syms_to_rename = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 9, !dbg !7385
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %syms_to_rename, align 8, !dbg !7385
  %3 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7386
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !7386
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7386
  %4 = load i32, i32* %uid, align 4, !dbg !7386
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %2, i32 %4), !dbg !7387
  %conv = trunc i32 %call to i8, !dbg !7387
  ret i8 %conv, !dbg !7388
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7389 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7392, metadata !DIExpression()), !dbg !7393
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7394, metadata !DIExpression()), !dbg !7395
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7396, metadata !DIExpression()), !dbg !7397
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7398
  %and = and i32 %0, 5, !dbg !7398
  %cmp = icmp eq i32 %and, 0, !dbg !7398
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7398

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7398
  %and1 = and i32 %1, 2, !dbg !7398
  %tobool = icmp ne i32 %and1, 0, !dbg !7398
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7398

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7398
  br label %cond.end, !dbg !7398

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7398

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7398
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7399
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7400
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7401
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !7402
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7403
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !7404
  store i32 3, i32* %iter_type, align 4, !dbg !7405
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7406
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !7407
  ret %union.tree_node** %call, !dbg !7408
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7409 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7412, metadata !DIExpression()), !dbg !7413
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !7414, metadata !DIExpression()), !dbg !7415
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7416
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7418
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !7418
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !7416
  br i1 %tobool, label %if.then, label %if.end, !dbg !7419

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7420
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !7420
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !7420
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !7420
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !7420
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !7422
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7423
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !7424
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !7424
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !7425
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7425
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7426
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7427
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !7428
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !7429
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !7430
  br label %return, !dbg !7430

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7431
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !7432
  store i8 1, i8* %done, align 8, !dbg !7433
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !7434
  br label %return, !dbg !7434

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !7435
  ret %union.tree_node** %11, !dbg !7435
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_enter_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !7436 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %result = alloca %union.tree_node*, align 8
  %tmp14 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !7437, metadata !DIExpression()), !dbg !7438
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7439, metadata !DIExpression()), !dbg !7440
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7441, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7443, metadata !DIExpression()), !dbg !7444
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7445
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7445
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7447

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !7448
  %and = and i32 %1, 8, !dbg !7449
  %tobool1 = icmp ne i32 %and, 0, !dbg !7449
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7450

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7451
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7452
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !7453
  %4 = load i32, i32* %index, align 8, !dbg !7453
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.50, i64 0, i64 0), i32 %4), !dbg !7454
  br label %if.end, !dbg !7454

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call2 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @block_defs_stack, %union.tree_node* null), !dbg !7455
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7456
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %5), !dbg !7458
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7458
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !7458
  br label %for.cond, !dbg !7459

for.cond:                                         ; preds = %for.inc, %if.end
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7460
  %tobool4 = icmp ne i8 %call3, 0, !dbg !7462
  %lnot = xor i1 %tobool4, true, !dbg !7462
  br i1 %lnot, label %for.body, label %for.end, !dbg !7463

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !7464, metadata !DIExpression()), !dbg !7466
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7467
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi, align 8, !dbg !7468
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7469
  %call6 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !7470
  store %union.tree_node* %call6, %union.tree_node** %result, align 8, !dbg !7471
  %9 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7472
  %call7 = call zeroext i8 @is_gimple_reg(%union.tree_node* %9), !dbg !7472
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7472
  br i1 %tobool8, label %cond.false, label %cond.true, !dbg !7472

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1404, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7472
  br label %cond.end, !dbg !7472

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7472

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7472
  %10 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7473
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7474
  %ssa_name = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !7474
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7474
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7474
  call void @register_new_def(%union.tree_node* %10, %union.tree_node* %12), !dbg !7475
  br label %for.inc, !dbg !7476

for.inc:                                          ; preds = %cond.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7477
  br label %for.cond, !dbg !7478, !llvm.loop !7479

for.end:                                          ; preds = %for.cond
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !7481
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %13, i32 0, i32 3, !dbg !7481
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7481
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !7481
  %15 = load i32, i32* %index9, align 8, !dbg !7481
  %div = udiv i32 %15, 64, !dbg !7481
  %idxprom = zext i32 %div to i64, !dbg !7481
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7481
  %16 = load i64, i64* %arrayidx, align 8, !dbg !7481
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7481
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !7481
  %18 = load i32, i32* %index10, align 8, !dbg !7481
  %rem = urem i32 %18, 64, !dbg !7481
  %sh_prom = zext i32 %rem to i64, !dbg !7481
  %shr = lshr i64 %16, %sh_prom, !dbg !7481
  %and11 = and i64 %shr, 1, !dbg !7481
  %tobool12 = icmp ne i64 %and11, 0, !dbg !7481
  br i1 %tobool12, label %if.then13, label %if.end22, !dbg !7483

if.then13:                                        ; preds = %for.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7484
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp14, %struct.basic_block_def* %19), !dbg !7486
  %20 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7486
  %21 = bitcast %struct.gimple_stmt_iterator* %tmp14 to i8*, !dbg !7486
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false), !dbg !7486
  br label %for.cond15, !dbg !7487

for.cond15:                                       ; preds = %for.inc20, %if.then13
  %call16 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7488
  %tobool17 = icmp ne i8 %call16, 0, !dbg !7490
  %lnot18 = xor i1 %tobool17, true, !dbg !7490
  br i1 %lnot18, label %for.body19, label %for.end21, !dbg !7491

for.body19:                                       ; preds = %for.cond15
  call void @rewrite_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7492
  br label %for.inc20, !dbg !7492

for.inc20:                                        ; preds = %for.body19
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7493
  br label %for.cond15, !dbg !7494, !llvm.loop !7495

for.end21:                                        ; preds = %for.cond15
  br label %if.end22, !dbg !7496

if.end22:                                         ; preds = %for.end21, %for.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7497
  call void @rewrite_add_phi_arguments(%struct.basic_block_def* %22), !dbg !7498
  ret void, !dbg !7499
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_leave_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !7500 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %saved_def = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !7501, metadata !DIExpression()), !dbg !7502
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7503, metadata !DIExpression()), !dbg !7504
  br label %while.cond, !dbg !7505

while.cond:                                       ; preds = %if.end24, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7506
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7506
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7506

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7506
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7506
  br label %cond.end, !dbg !7506

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !7506

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7506
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !7506
  %cmp = icmp ugt i32 %call, 0, !dbg !7507
  br i1 %cmp, label %while.body, label %while.end, !dbg !7505

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !7508, metadata !DIExpression()), !dbg !7510
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7511
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7511
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7511

cond.true2:                                       ; preds = %while.body
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7511
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7511
  br label %cond.end5, !dbg !7511

cond.false4:                                      ; preds = %while.body
  br label %cond.end5, !dbg !7511

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7511
  %call7 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond6), !dbg !7511
  store %union.tree_node* %call7, %union.tree_node** %tmp, align 8, !dbg !7510
  call void @llvm.dbg.declare(metadata %union.tree_node** %saved_def, metadata !7512, metadata !DIExpression()), !dbg !7513
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7514, metadata !DIExpression()), !dbg !7515
  %4 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7516
  %cmp8 = icmp eq %union.tree_node* %4, null, !dbg !7518
  br i1 %cmp8, label %if.then, label %if.end, !dbg !7519

if.then:                                          ; preds = %cond.end5
  br label %while.end, !dbg !7520

if.end:                                           ; preds = %cond.end5
  %5 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7521
  %base9 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7521
  %6 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7521
  %bf.load = load i64, i64* %6, align 8, !dbg !7521
  %bf.clear = and i64 %bf.load, 65535, !dbg !7521
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7521
  %cmp10 = icmp eq i32 %bf.cast, 141, !dbg !7523
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !7524

if.then11:                                        ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7525
  store %union.tree_node* %7, %union.tree_node** %saved_def, align 8, !dbg !7527
  %8 = load %union.tree_node*, %union.tree_node** %saved_def, align 8, !dbg !7528
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !7528
  %var12 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7528
  %9 = load %union.tree_node*, %union.tree_node** %var12, align 8, !dbg !7528
  store %union.tree_node* %9, %union.tree_node** %var, align 8, !dbg !7529
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7530
  %call13 = call zeroext i8 @is_gimple_reg(%union.tree_node* %10), !dbg !7532
  %tobool14 = icmp ne i8 %call13, 0, !dbg !7532
  br i1 %tobool14, label %if.end23, label %if.then15, !dbg !7533

if.then15:                                        ; preds = %if.then11
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7534
  %tobool16 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !7534
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !7534

cond.true17:                                      ; preds = %if.then15
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7534
  %base18 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !7534
  br label %cond.end20, !dbg !7534

cond.false19:                                     ; preds = %if.then15
  br label %cond.end20, !dbg !7534

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_tree_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !7534
  %call22 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond21), !dbg !7534
  store %union.tree_node* %call22, %union.tree_node** %var, align 8, !dbg !7535
  br label %if.end23, !dbg !7536

if.end23:                                         ; preds = %cond.end20, %if.then11
  br label %if.end24, !dbg !7537

if.else:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %saved_def, align 8, !dbg !7538
  %13 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7540
  store %union.tree_node* %13, %union.tree_node** %var, align 8, !dbg !7541
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.end23
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7542
  %15 = load %union.tree_node*, %union.tree_node** %saved_def, align 8, !dbg !7543
  call void @set_current_def(%union.tree_node* %14, %union.tree_node* %15), !dbg !7544
  br label %while.cond, !dbg !7505, !llvm.loop !7545

while.end:                                        ; preds = %if.then, %cond.end
  ret void, !dbg !7547
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_update_enter_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !7548 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %is_abnormal_phi = alloca i8, align 1
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp15 = alloca %struct.gimple_stmt_iterator, align 8
  %lhs = alloca %union.tree_node*, align 8
  %lhs_sym = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %tmp52 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !7549, metadata !DIExpression()), !dbg !7550
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7551, metadata !DIExpression()), !dbg !7552
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7553, metadata !DIExpression()), !dbg !7554
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7555, metadata !DIExpression()), !dbg !7556
  call void @llvm.dbg.declare(metadata i8* %is_abnormal_phi, metadata !7557, metadata !DIExpression()), !dbg !7558
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7559, metadata !DIExpression()), !dbg !7560
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7561
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7561
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7563

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !7564
  %and = and i32 %1, 8, !dbg !7565
  %tobool1 = icmp ne i32 %and, 0, !dbg !7565
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7566

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7567
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7568
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !7569
  %4 = load i32, i32* %index, align 8, !dbg !7569
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.52, i64 0, i64 0), i32 %4), !dbg !7570
  br label %if.end, !dbg !7570

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call2 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @block_defs_stack, %union.tree_node* null), !dbg !7571
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !7572
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7574
  %index3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !7575
  %7 = load i32, i32* %index3, align 8, !dbg !7575
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !7576
  %tobool5 = icmp ne i32 %call4, 0, !dbg !7576
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !7577

if.then6:                                         ; preds = %if.end
  br label %return, !dbg !7578

if.end7:                                          ; preds = %if.end
  store i8 0, i8* %is_abnormal_phi, align 1, !dbg !7579
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7580
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !7580
  %call8 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7580
  %9 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7580
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7580
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 0, !dbg !7580
  store i32 %11, i32* %10, align 8, !dbg !7580
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7580
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 1, !dbg !7580
  store %struct.VEC_edge_gc** %13, %struct.VEC_edge_gc*** %12, align 8, !dbg !7580
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7580
  %15 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7580
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false), !dbg !7580
  br label %for.cond, !dbg !7580

for.cond:                                         ; preds = %for.inc, %if.end7
  %16 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7582
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !7582
  %18 = load i32, i32* %17, align 8, !dbg !7582
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !7582
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %19, align 8, !dbg !7582
  %call9 = call zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %20, %struct.edge_def** %e), !dbg !7582
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7580
  br i1 %tobool10, label %for.body, label %for.end, !dbg !7580

for.body:                                         ; preds = %for.cond
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7584
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !7586
  %22 = load i32, i32* %flags, align 8, !dbg !7586
  %and11 = and i32 %22, 2, !dbg !7587
  %tobool12 = icmp ne i32 %and11, 0, !dbg !7587
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !7588

if.then13:                                        ; preds = %for.body
  store i8 1, i8* %is_abnormal_phi, align 1, !dbg !7589
  br label %for.end, !dbg !7591

if.end14:                                         ; preds = %for.body
  br label %for.inc, !dbg !7592

for.inc:                                          ; preds = %if.end14
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7582
  br label %for.cond, !dbg !7582, !llvm.loop !7593

for.end:                                          ; preds = %if.then13, %for.cond
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7595
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp15, %struct.basic_block_def* %23), !dbg !7597
  %24 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7597
  %25 = bitcast %struct.gimple_stmt_iterator* %tmp15 to i8*, !dbg !7597
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !7597
  br label %for.cond16, !dbg !7598

for.cond16:                                       ; preds = %for.inc42, %for.end
  %call17 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7599
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7601
  %lnot = xor i1 %tobool18, true, !dbg !7601
  br i1 %lnot, label %for.body19, label %for.end43, !dbg !7602

for.body19:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !7603, metadata !DIExpression()), !dbg !7605
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_sym, metadata !7606, metadata !DIExpression()), !dbg !7607
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7608, metadata !DIExpression()), !dbg !7609
  %call20 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7610
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %phi, align 8, !dbg !7609
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7611
  %call21 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %26), !dbg !7613
  %tobool22 = icmp ne i8 %call21, 0, !dbg !7613
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !7614

if.then23:                                        ; preds = %for.body19
  br label %for.inc42, !dbg !7615

if.end24:                                         ; preds = %for.body19
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7616
  %call25 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %27), !dbg !7617
  store %union.tree_node* %call25, %union.tree_node** %lhs, align 8, !dbg !7618
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7619
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !7619
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7619
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7619
  store %union.tree_node* %29, %union.tree_node** %lhs_sym, align 8, !dbg !7620
  %30 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !7621
  %call26 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %30), !dbg !7623
  %tobool27 = icmp ne i8 %call26, 0, !dbg !7623
  br i1 %tobool27, label %if.then28, label %if.else, !dbg !7624

if.then28:                                        ; preds = %if.end24
  %31 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7625
  %32 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !7626
  call void @register_new_update_single(%union.tree_node* %31, %union.tree_node* %32), !dbg !7627
  br label %if.end38, !dbg !7627

if.else:                                          ; preds = %if.end24
  %33 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7628
  %call29 = call zeroext i8 @is_new_name(%union.tree_node* %33), !dbg !7631
  %tobool30 = icmp ne i8 %call29, 0, !dbg !7631
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !7632

if.then31:                                        ; preds = %if.else
  %34 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7633
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7634
  %call32 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %35), !dbg !7635
  call void @register_new_update_set(%union.tree_node* %34, %struct.bitmap_head_def* %call32), !dbg !7636
  br label %if.end33, !dbg !7636

if.end33:                                         ; preds = %if.then31, %if.else
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7637
  %call34 = call zeroext i8 @is_old_name(%union.tree_node* %36), !dbg !7639
  %tobool35 = icmp ne i8 %call34, 0, !dbg !7639
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !7640

if.then36:                                        ; preds = %if.end33
  %37 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7641
  %38 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7642
  call void @register_new_update_single(%union.tree_node* %37, %union.tree_node* %38), !dbg !7643
  br label %if.end37, !dbg !7643

if.end37:                                         ; preds = %if.then36, %if.end33
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then28
  %39 = load i8, i8* %is_abnormal_phi, align 1, !dbg !7644
  %tobool39 = icmp ne i8 %39, 0, !dbg !7644
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !7646

if.then40:                                        ; preds = %if.end38
  %40 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7647
  %base = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !7647
  %41 = bitcast %struct.tree_base* %base to i64*, !dbg !7647
  %bf.load = load i64, i64* %41, align 8, !dbg !7648
  %bf.clear = and i64 %bf.load, -4194305, !dbg !7648
  %bf.set = or i64 %bf.clear, 4194304, !dbg !7648
  store i64 %bf.set, i64* %41, align 8, !dbg !7648
  br label %if.end41, !dbg !7647

if.end41:                                         ; preds = %if.then40, %if.end38
  br label %for.inc42, !dbg !7649

for.inc42:                                        ; preds = %if.end41, %if.then23
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7650
  br label %for.cond16, !dbg !7651, !llvm.loop !7652

for.end43:                                        ; preds = %for.cond16
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @interesting_blocks, align 8, !dbg !7654
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %42, i32 0, i32 3, !dbg !7654
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7654
  %index44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 9, !dbg !7654
  %44 = load i32, i32* %index44, align 8, !dbg !7654
  %div = udiv i32 %44, 64, !dbg !7654
  %idxprom = zext i32 %div to i64, !dbg !7654
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7654
  %45 = load i64, i64* %arrayidx, align 8, !dbg !7654
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7654
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !7654
  %47 = load i32, i32* %index45, align 8, !dbg !7654
  %rem = urem i32 %47, 64, !dbg !7654
  %sh_prom = zext i32 %rem to i64, !dbg !7654
  %shr = lshr i64 %45, %sh_prom, !dbg !7654
  %and46 = and i64 %shr, 1, !dbg !7654
  %tobool47 = icmp ne i64 %and46, 0, !dbg !7654
  br i1 %tobool47, label %if.then48, label %if.end61, !dbg !7656

if.then48:                                        ; preds = %for.end43
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !7657
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7657
  %index49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 9, !dbg !7657
  %50 = load i32, i32* %index49, align 8, !dbg !7657
  %call50 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %48, i32 %50), !dbg !7657
  %tobool51 = icmp ne i32 %call50, 0, !dbg !7657
  br i1 %tobool51, label %cond.false, label %cond.true, !dbg !7657

cond.true:                                        ; preds = %if.then48
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7657
  br label %cond.end, !dbg !7657

cond.false:                                       ; preds = %if.then48
  br label %cond.end, !dbg !7657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7657
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7659
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp52, %struct.basic_block_def* %51), !dbg !7661
  %52 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7661
  %53 = bitcast %struct.gimple_stmt_iterator* %tmp52 to i8*, !dbg !7661
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false), !dbg !7661
  br label %for.cond53, !dbg !7662

for.cond53:                                       ; preds = %for.inc59, %cond.end
  %call54 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7663
  %tobool55 = icmp ne i8 %call54, 0, !dbg !7665
  %lnot56 = xor i1 %tobool55, true, !dbg !7665
  br i1 %lnot56, label %for.body57, label %for.end60, !dbg !7666

for.body57:                                       ; preds = %for.cond53
  %call58 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7667
  call void @rewrite_update_stmt(%union.gimple_statement_d* %call58, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7668
  br label %for.inc59, !dbg !7668

for.inc59:                                        ; preds = %for.body57
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7669
  br label %for.cond53, !dbg !7670, !llvm.loop !7671

for.end60:                                        ; preds = %for.cond53
  br label %if.end61, !dbg !7673

if.end61:                                         ; preds = %for.end60, %for.end43
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7674
  call void @rewrite_update_phi_arguments(%struct.basic_block_def* %54), !dbg !7675
  br label %return, !dbg !7676

return:                                           ; preds = %if.end61, %if.then6
  ret void, !dbg !7676
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_update_leave_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !7677 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %var = alloca %union.tree_node*, align 8
  %saved_def = alloca %union.tree_node*, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !7678, metadata !DIExpression()), !dbg !7679
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7680, metadata !DIExpression()), !dbg !7681
  br label %while.cond, !dbg !7682

while.cond:                                       ; preds = %cond.end13, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7683
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !7683
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7683

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7683
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !7683
  br label %cond.end, !dbg !7683

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !7683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7683
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !7683
  %cmp = icmp ugt i32 %call, 0, !dbg !7684
  br i1 %cmp, label %while.body, label %while.end, !dbg !7682

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7685, metadata !DIExpression()), !dbg !7687
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7688
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7688
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7688

cond.true2:                                       ; preds = %while.body
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7688
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7688
  br label %cond.end5, !dbg !7688

cond.false4:                                      ; preds = %while.body
  br label %cond.end5, !dbg !7688

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7688
  %call7 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond6), !dbg !7688
  store %union.tree_node* %call7, %union.tree_node** %var, align 8, !dbg !7687
  call void @llvm.dbg.declare(metadata %union.tree_node** %saved_def, metadata !7689, metadata !DIExpression()), !dbg !7690
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7691
  %cmp8 = icmp eq %union.tree_node* %4, null, !dbg !7693
  br i1 %cmp8, label %if.then, label %if.end, !dbg !7694

if.then:                                          ; preds = %cond.end5
  br label %while.end, !dbg !7695

if.end:                                           ; preds = %cond.end5
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7696
  %tobool9 = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !7696
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !7696

cond.true10:                                      ; preds = %if.end
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !7696
  %base11 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !7696
  br label %cond.end13, !dbg !7696

cond.false12:                                     ; preds = %if.end
  br label %cond.end13, !dbg !7696

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_tree_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !7696
  %call15 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond14), !dbg !7696
  store %union.tree_node* %call15, %union.tree_node** %saved_def, align 8, !dbg !7697
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7698
  %8 = load %union.tree_node*, %union.tree_node** %saved_def, align 8, !dbg !7699
  call void @set_current_def(%union.tree_node* %7, %union.tree_node* %8), !dbg !7700
  br label %while.cond, !dbg !7682, !llvm.loop !7701

while.end:                                        ; preds = %if.then, %cond.end
  ret void, !dbg !7703
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !7704 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7707, metadata !DIExpression()), !dbg !7708
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7708
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7708
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !7708
  ret %struct.VEC_tree_heap* %1, !dbg !7708
}

declare dso_local void @dump_dfa_stats(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !7709 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7713, metadata !DIExpression()), !dbg !7714
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7715
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7715
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7715
  br i1 %tobool, label %if.then, label %if.end, !dbg !7714

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7715
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7715
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !7715
  call void @free(i8* %4), !dbg !7715
  br label %if.end, !dbg !7715

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7714
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !7714
  ret void, !dbg !7714
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !7717 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7720, metadata !DIExpression()), !dbg !7721
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7722, metadata !DIExpression()), !dbg !7721
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7721
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !7721
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7721
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !7721
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !7721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7721

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7721
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !7721
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !7721
  br label %cond.end, !dbg !7721

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7721
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7721
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !7721
  ret %union.tree_node** %call1, !dbg !7721
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_new_def(%union.tree_node* %def, %union.tree_node* %sym) #0 !dbg !7723 {
entry:
  %def.addr = alloca %union.tree_node*, align 8
  %sym.addr = alloca %union.tree_node*, align 8
  %currdef = alloca %union.tree_node*, align 8
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !7724, metadata !DIExpression()), !dbg !7725
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !7726, metadata !DIExpression()), !dbg !7727
  call void @llvm.dbg.declare(metadata %union.tree_node** %currdef, metadata !7728, metadata !DIExpression()), !dbg !7729
  %0 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7730
  %call = call i32 @get_phi_state(%union.tree_node* %0), !dbg !7732
  %cmp = icmp eq i32 %call, 1, !dbg !7733
  br i1 %cmp, label %if.then, label %if.end, !dbg !7734

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7735
  %2 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7737
  call void @set_current_def(%union.tree_node* %1, %union.tree_node* %2), !dbg !7738
  br label %return, !dbg !7739

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7740
  %call1 = call %union.tree_node* @get_current_def(%union.tree_node* %3), !dbg !7741
  store %union.tree_node* %call1, %union.tree_node** %currdef, align 8, !dbg !7742
  %4 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7743
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !7743
  br i1 %tobool, label %land.lhs.true, label %if.end6, !dbg !7745

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7746
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %5), !dbg !7747
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7747
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !7748

if.then4:                                         ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7749
  %call5 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @block_defs_stack, %union.tree_node* %6), !dbg !7749
  br label %if.end6, !dbg !7749

if.end6:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7750
  %tobool7 = icmp ne %union.tree_node* %7, null, !dbg !7750
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !7750

cond.true:                                        ; preds = %if.end6
  %8 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7750
  br label %cond.end, !dbg !7750

cond.false:                                       ; preds = %if.end6
  %9 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7750
  br label %cond.end, !dbg !7750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %8, %cond.true ], [ %9, %cond.false ], !dbg !7750
  %call8 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @block_defs_stack, %union.tree_node* %cond), !dbg !7750
  %10 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !7751
  %11 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !7752
  call void @set_current_def(%union.tree_node* %10, %union.tree_node* %11), !dbg !7753
  br label %return, !dbg !7754

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !7754
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si) #0 !dbg !7755 {
entry:
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %var35 = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %tracked_var = alloca %union.tree_node*, align 8
  %note = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !7758, metadata !DIExpression()), !dbg !7759
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7760, metadata !DIExpression()), !dbg !7761
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !7762, metadata !DIExpression()), !dbg !7763
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !7764, metadata !DIExpression()), !dbg !7765
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7766, metadata !DIExpression()), !dbg !7767
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !7768
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7767
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_update, align 8, !dbg !7769
  %cmp = icmp eq %struct.bitmap_head_def* %0, null, !dbg !7769
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7769

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1306, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7769
  br label %cond.end, !dbg !7769

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7769
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7770
  %call1 = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %1), !dbg !7772
  %tobool = icmp ne i8 %call1, 0, !dbg !7772
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7773

land.lhs.true:                                    ; preds = %cond.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7774
  %call2 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %2), !dbg !7775
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7775
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7776

if.then:                                          ; preds = %land.lhs.true
  br label %if.end58, !dbg !7777

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7778
  %tobool4 = icmp ne %struct._IO_FILE* %3, null, !dbg !7778
  br i1 %tobool4, label %land.lhs.true5, label %if.end10, !dbg !7780

land.lhs.true5:                                   ; preds = %if.end
  %4 = load i32, i32* @dump_flags, align 4, !dbg !7781
  %and = and i32 %4, 8, !dbg !7782
  %tobool6 = icmp ne i32 %and, 0, !dbg !7782
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !7783

if.then7:                                         ; preds = %land.lhs.true5
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7784
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i64 0, i64 0)), !dbg !7786
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7787
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7788
  call void @print_gimple_stmt(%struct._IO_FILE* %6, %union.gimple_statement_d* %7, i32 0, i32 2), !dbg !7789
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7790
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7791
  br label %if.end10, !dbg !7792

if.end10:                                         ; preds = %if.then7, %land.lhs.true5, %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7793
  %call11 = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %9), !dbg !7795
  %tobool12 = icmp ne i8 %call11, 0, !dbg !7795
  br i1 %tobool12, label %if.then13, label %if.end25, !dbg !7796

if.then13:                                        ; preds = %if.end10
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7797
  %call14 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %10, i32 1), !dbg !7797
  store %struct.ssa_use_operand_d* %call14, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7797
  br label %for.cond, !dbg !7797

for.cond:                                         ; preds = %for.inc, %if.then13
  %call15 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !7799
  %tobool16 = icmp ne i8 %call15, 0, !dbg !7799
  %lnot = xor i1 %tobool16, true, !dbg !7799
  br i1 %lnot, label %for.body, label %for.end, !dbg !7797

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7801, metadata !DIExpression()), !dbg !7803
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7804
  %call17 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %11), !dbg !7804
  store %union.tree_node* %call17, %union.tree_node** %var, align 8, !dbg !7803
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7805
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7805
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !7805
  %bf.load = load i64, i64* %13, align 8, !dbg !7805
  %bf.clear = and i64 %bf.load, 65535, !dbg !7805
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7805
  %idxprom = sext i32 %bf.cast to i64, !dbg !7805
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7805
  %14 = load i32, i32* %arrayidx, align 4, !dbg !7805
  %cmp18 = icmp eq i32 %14, 3, !dbg !7805
  br i1 %cmp18, label %cond.false20, label %cond.true19, !dbg !7805

cond.true19:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1322, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7805
  br label %cond.end21, !dbg !7805

cond.false20:                                     ; preds = %for.body
  br label %cond.end21, !dbg !7805

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !7805
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7806
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7806
  %call23 = call %union.tree_node* @get_reaching_def(%union.tree_node* %16), !dbg !7806
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %15, %union.tree_node* %call23), !dbg !7806
  br label %for.inc, !dbg !7807

for.inc:                                          ; preds = %cond.end21
  %call24 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !7799
  store %struct.ssa_use_operand_d* %call24, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7799
  br label %for.cond, !dbg !7799, !llvm.loop !7808

for.end:                                          ; preds = %for.cond
  br label %if.end25, !dbg !7809

if.end25:                                         ; preds = %for.end, %if.end10
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7810
  %call26 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %17), !dbg !7812
  %tobool27 = icmp ne i8 %call26, 0, !dbg !7812
  br i1 %tobool27, label %if.then28, label %if.end58, !dbg !7813

if.then28:                                        ; preds = %if.end25
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7814
  %call29 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %18, i32 2), !dbg !7814
  store %union.tree_node** %call29, %union.tree_node*** %def_p, align 8, !dbg !7814
  br label %for.cond30, !dbg !7814

for.cond30:                                       ; preds = %for.inc55, %if.then28
  %call31 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !7816
  %tobool32 = icmp ne i8 %call31, 0, !dbg !7816
  %lnot33 = xor i1 %tobool32, true, !dbg !7816
  br i1 %lnot33, label %for.body34, label %for.end57, !dbg !7814

for.body34:                                       ; preds = %for.cond30
  call void @llvm.dbg.declare(metadata %union.tree_node** %var35, metadata !7818, metadata !DIExpression()), !dbg !7820
  %19 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !7821
  %call36 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %19), !dbg !7821
  store %union.tree_node* %call36, %union.tree_node** %var35, align 8, !dbg !7820
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !7822, metadata !DIExpression()), !dbg !7823
  %20 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !7824
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7825
  %call37 = call %union.tree_node* @make_ssa_name(%union.tree_node* %20, %union.gimple_statement_d* %21), !dbg !7826
  store %union.tree_node* %call37, %union.tree_node** %name, align 8, !dbg !7823
  call void @llvm.dbg.declare(metadata %union.tree_node** %tracked_var, metadata !7827, metadata !DIExpression()), !dbg !7828
  %22 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !7829
  %base38 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !7829
  %23 = bitcast %struct.tree_base* %base38 to i64*, !dbg !7829
  %bf.load39 = load i64, i64* %23, align 8, !dbg !7829
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !7829
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !7829
  %idxprom42 = sext i32 %bf.cast41 to i64, !dbg !7829
  %arrayidx43 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom42, !dbg !7829
  %24 = load i32, i32* %arrayidx43, align 4, !dbg !7829
  %cmp44 = icmp eq i32 %24, 3, !dbg !7829
  br i1 %cmp44, label %cond.false46, label %cond.true45, !dbg !7829

cond.true45:                                      ; preds = %for.body34
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1333, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !7829
  br label %cond.end47, !dbg !7829

cond.false46:                                     ; preds = %for.body34
  br label %cond.end47, !dbg !7829

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !7829
  %25 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7830
  %26 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !7830
  store %union.tree_node* %25, %union.tree_node** %26, align 8, !dbg !7830
  %27 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !7831
  %call49 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %27), !dbg !7831
  %28 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !7832
  call void @register_new_def(%union.tree_node* %call49, %union.tree_node* %28), !dbg !7833
  %29 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !7834
  %call50 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %29), !dbg !7835
  store %union.tree_node* %call50, %union.tree_node** %tracked_var, align 8, !dbg !7836
  %30 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !7837
  %tobool51 = icmp ne %union.tree_node* %30, null, !dbg !7837
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !7839

if.then52:                                        ; preds = %cond.end47
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %note, metadata !7840, metadata !DIExpression()), !dbg !7842
  %31 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !7843
  %32 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7843
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7843
  %call53 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %31, %union.tree_node* %32, %union.gimple_statement_d* %33), !dbg !7843
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %note, align 8, !dbg !7842
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !7844
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %si, %union.gimple_statement_d* %34, i32 1), !dbg !7845
  br label %if.end54, !dbg !7846

if.end54:                                         ; preds = %if.then52, %cond.end47
  br label %for.inc55, !dbg !7847

for.inc55:                                        ; preds = %if.end54
  %call56 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %iter), !dbg !7816
  store %union.tree_node** %call56, %union.tree_node*** %def_p, align 8, !dbg !7816
  br label %for.cond30, !dbg !7816, !llvm.loop !7848

for.end57:                                        ; preds = %for.cond30
  br label %if.end58, !dbg !7849

if.end58:                                         ; preds = %if.then, %for.end57, %if.end25
  ret void, !dbg !7850
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_add_phi_arguments(%struct.basic_block_def* %bb) #0 !dbg !7851 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  %currdef = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7852, metadata !DIExpression()), !dbg !7853
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7854, metadata !DIExpression()), !dbg !7855
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7856, metadata !DIExpression()), !dbg !7857
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7858
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7858
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7858
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7858
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !7858
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !7858
  store i32 %3, i32* %2, align 8, !dbg !7858
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !7858
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !7858
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !7858
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7858
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7858
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !7858
  br label %for.cond, !dbg !7858

for.cond:                                         ; preds = %for.inc12, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7860
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7860
  %10 = load i32, i32* %9, align 8, !dbg !7860
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7860
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7860
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !7860
  %tobool = icmp ne i8 %call1, 0, !dbg !7858
  br i1 %tobool, label %for.body, label %for.end13, !dbg !7858

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7862, metadata !DIExpression()), !dbg !7864
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7865, metadata !DIExpression()), !dbg !7866
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7867
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !7869
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7869
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp2, %struct.basic_block_def* %14), !dbg !7870
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7870
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !7870
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !7870
  br label %for.cond3, !dbg !7871

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7872
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7874
  %lnot = xor i1 %tobool5, true, !dbg !7874
  br i1 %lnot, label %for.body6, label %for.end, !dbg !7875

for.body6:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.tree_node** %currdef, metadata !7876, metadata !DIExpression()), !dbg !7878
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7879, metadata !DIExpression()), !dbg !7880
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7881
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %phi, align 8, !dbg !7882
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7883
  %call8 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %17), !dbg !7883
  %ssa_name = bitcast %union.tree_node* %call8 to %struct.tree_ssa_name*, !dbg !7883
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7883
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7883
  %call9 = call %union.tree_node* @get_reaching_def(%union.tree_node* %18), !dbg !7884
  store %union.tree_node* %call9, %union.tree_node** %currdef, align 8, !dbg !7885
  %19 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7886
  %ssa_name10 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !7886
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 2, !dbg !7886
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7886
  store %union.gimple_statement_d* %20, %union.gimple_statement_d** %stmt, align 8, !dbg !7887
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7888
  %22 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7889
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7890
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7891
  %call11 = call i32 @gimple_location(%union.gimple_statement_d* %24), !dbg !7892
  call void @add_phi_arg(%union.gimple_statement_d* %21, %union.tree_node* %22, %struct.edge_def* %23, i32 %call11), !dbg !7893
  br label %for.inc, !dbg !7894

for.inc:                                          ; preds = %for.body6
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7895
  br label %for.cond3, !dbg !7896, !llvm.loop !7897

for.end:                                          ; preds = %for.cond3
  br label %for.inc12, !dbg !7899

for.inc12:                                        ; preds = %for.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7860
  br label %for.cond, !dbg !7860, !llvm.loop !7900

for.end13:                                        ; preds = %for.cond
  ret void, !dbg !7902
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !7903 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7906, metadata !DIExpression()), !dbg !7907
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7908, metadata !DIExpression()), !dbg !7907
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7909, metadata !DIExpression()), !dbg !7907
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7907
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7907
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7907
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7907

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7907
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7907
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !7907
  br label %cond.end, !dbg !7907

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7907

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7907
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7907
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !7907
  %tobool1 = icmp ne i32 %call, 0, !dbg !7907
  %lnot = xor i1 %tobool1, true, !dbg !7907
  %lnot.ext = zext i1 %lnot to i32, !dbg !7907
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7907
  %5 = load i32, i32* %extend, align 4, !dbg !7910
  %tobool2 = icmp ne i32 %5, 0, !dbg !7910
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7907

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7910
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !7910
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !7910
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7910
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7910
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !7910
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7910
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !7910
  br label %if.end, !dbg !7910

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7907
  ret i32 %12, !dbg !7907
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !7912 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7916, metadata !DIExpression()), !dbg !7917
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !7918, metadata !DIExpression()), !dbg !7917
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !7919, metadata !DIExpression()), !dbg !7917
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7917
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !7917
  %1 = load i32, i32* %num, align 8, !dbg !7917
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7917
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7917
  %3 = load i32, i32* %alloc, align 4, !dbg !7917
  %cmp = icmp ult i32 %1, %3, !dbg !7917
  %conv = zext i1 %cmp to i32, !dbg !7917
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7917
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !7917
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7917
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !7917
  %6 = load i32, i32* %num1, align 8, !dbg !7917
  %inc = add i32 %6, 1, !dbg !7917
  store i32 %inc, i32* %num1, align 8, !dbg !7917
  %idxprom = zext i32 %6 to i64, !dbg !7917
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !7917
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !7917
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !7917
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7917
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7917
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !7917
  ret %union.tree_node** %9, !dbg !7917
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !7920 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !7923, metadata !DIExpression()), !dbg !7924
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7925, metadata !DIExpression()), !dbg !7924
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7924
  %cmp = icmp sge i32 %0, 0, !dbg !7924
  %conv = zext i1 %cmp to i32, !dbg !7924
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7924
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !7924
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7924

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7924
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !7924
  %3 = load i32, i32* %alloc, align 4, !dbg !7924
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !7924
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !7924
  %5 = load i32, i32* %num, align 8, !dbg !7924
  %sub = sub i32 %3, %5, !dbg !7924
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7924
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7924
  %conv2 = zext i1 %cmp1 to i32, !dbg !7924
  br label %cond.end, !dbg !7924

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7924
  %tobool3 = icmp ne i32 %7, 0, !dbg !7924
  %lnot = xor i1 %tobool3, true, !dbg !7924
  %lnot.ext = zext i1 %lnot to i32, !dbg !7924
  br label %cond.end, !dbg !7924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7924
  ret i32 %cond, !dbg !7924
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !7926 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7929, metadata !DIExpression()), !dbg !7930
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !7931, metadata !DIExpression()), !dbg !7932
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7933
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !7934
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !7935
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7936
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !7937
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7937
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !7938
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7939
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !7940
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !7941
  ret void, !dbg !7942
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_reaching_def(%union.tree_node* %var) #0 !dbg !7943 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %currdef = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7944, metadata !DIExpression()), !dbg !7945
  call void @llvm.dbg.declare(metadata %union.tree_node** %currdef, metadata !7946, metadata !DIExpression()), !dbg !7947
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7948
  %call = call %union.tree_node* @get_current_def(%union.tree_node* %0), !dbg !7949
  store %union.tree_node* %call, %union.tree_node** %currdef, align 8, !dbg !7950
  %1 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7951
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !7953
  br i1 %cmp, label %if.then, label %if.end, !dbg !7954

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !7955, metadata !DIExpression()), !dbg !7957
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7958
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7958
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7958
  %bf.load = load i64, i64* %3, align 8, !dbg !7958
  %bf.clear = and i64 %bf.load, 65535, !dbg !7958
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7958
  %idxprom = sext i32 %bf.cast to i64, !dbg !7958
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7958
  %4 = load i32, i32* %arrayidx, align 4, !dbg !7958
  %cmp1 = icmp eq i32 %4, 3, !dbg !7958
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !7958

cond.true:                                        ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7959
  br label %cond.end, !dbg !7958

cond.false:                                       ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7960
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7960
  %var2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7960
  %7 = load %union.tree_node*, %union.tree_node** %var2, align 8, !dbg !7960
  br label %cond.end, !dbg !7958

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %5, %cond.true ], [ %7, %cond.false ], !dbg !7958
  store %union.tree_node* %cond, %union.tree_node** %sym, align 8, !dbg !7957
  %8 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !7961
  %call3 = call %union.tree_node* @get_default_def_for(%union.tree_node* %8), !dbg !7962
  store %union.tree_node* %call3, %union.tree_node** %currdef, align 8, !dbg !7963
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7964
  %10 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7965
  call void @set_current_def(%union.tree_node* %9, %union.tree_node* %10), !dbg !7966
  br label %if.end, !dbg !7967

if.end:                                           ; preds = %cond.end, %entry
  %11 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !7968
  ret %union.tree_node* %11, !dbg !7969
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !7970 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7973, metadata !DIExpression()), !dbg !7974
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7975, metadata !DIExpression()), !dbg !7976
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7977
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7977
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7978
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7979
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !7980
  ret %union.tree_node* %call, !dbg !7981
}

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !7982 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7985, metadata !DIExpression()), !dbg !7986
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7987
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !7989
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7989
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !7990
  br i1 %cmp, label %if.then, label %if.end, !dbg !7991

if.then:                                          ; preds = %entry
  br label %return, !dbg !7992

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7993
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7994
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7994
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7995
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !7996
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !7996
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !7997
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7998
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7999
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !8000
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8000
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8001
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !8002
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8002
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !8003
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !8004
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8005
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !8006
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !8007
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8008
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !8009
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !8010
  br label %return, !dbg !8011

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8011
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !8012 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8015, metadata !DIExpression()), !dbg !8016
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !8017, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !8019, metadata !DIExpression()), !dbg !8020
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8021
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8021
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8023

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8024
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8024
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8024
  %bf.load = load i64, i64* %2, align 8, !dbg !8024
  %bf.clear = and i64 %bf.load, 65535, !dbg !8024
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8024
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !8025
  br i1 %cmp, label %if.then, label %if.else, !dbg !8026

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8027
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !8028
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8029
  br label %if.end, !dbg !8027

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8030
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !8030
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8030
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !8032
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8033
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !8034
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !8035
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !8036
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !8037 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8040, metadata !DIExpression()), !dbg !8041
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !8042, metadata !DIExpression()), !dbg !8043
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8044
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8045
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !8046
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8047
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8048
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8049
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8049
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8050
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !8051
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !8052
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8053
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8054
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !8055
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8055
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !8056
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8057
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8058
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8059
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !8060
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8061
  ret void, !dbg !8062
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_default_def_for(%union.tree_node* %sym) #0 !dbg !8063 {
entry:
  %sym.addr = alloca %union.tree_node*, align 8
  %ddef = alloca %union.tree_node*, align 8
  store %union.tree_node* %sym, %union.tree_node** %sym.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym.addr, metadata !8064, metadata !DIExpression()), !dbg !8065
  call void @llvm.dbg.declare(metadata %union.tree_node** %ddef, metadata !8066, metadata !DIExpression()), !dbg !8067
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8068
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8068
  %1 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !8069
  %call = call %union.tree_node* @gimple_default_def(%struct.function* %add.ptr, %union.tree_node* %1), !dbg !8070
  store %union.tree_node* %call, %union.tree_node** %ddef, align 8, !dbg !8067
  %2 = load %union.tree_node*, %union.tree_node** %ddef, align 8, !dbg !8071
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !8073
  br i1 %cmp, label %if.then, label %if.end, !dbg !8074

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !8075
  %call1 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !8077
  %call2 = call %union.tree_node* @make_ssa_name(%union.tree_node* %3, %union.gimple_statement_d* %call1), !dbg !8078
  store %union.tree_node* %call2, %union.tree_node** %ddef, align 8, !dbg !8079
  %4 = load %union.tree_node*, %union.tree_node** %sym.addr, align 8, !dbg !8080
  %5 = load %union.tree_node*, %union.tree_node** %ddef, align 8, !dbg !8081
  call void @set_default_def(%union.tree_node* %4, %union.tree_node* %5), !dbg !8082
  br label %if.end, !dbg !8083

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %ddef, align 8, !dbg !8084
  ret %union.tree_node* %6, !dbg !8085
}

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !8086 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8091
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8092
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !8093
  %1 = load i32, i32* %location, align 8, !dbg !8093
  ret i32 %1, !dbg !8094
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !8095 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8098, metadata !DIExpression()), !dbg !8099
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !8100, metadata !DIExpression()), !dbg !8099
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8099
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !8099
  %1 = load i32, i32* %num, align 8, !dbg !8099
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8099
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !8099
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8099
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !8099
  %4 = load i32, i32* %num1, align 8, !dbg !8099
  %dec = add i32 %4, -1, !dbg !8099
  store i32 %dec, i32* %num1, align 8, !dbg !8099
  %idxprom = zext i32 %dec to i64, !dbg !8099
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8099
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8099
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !8099
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !8099
  ret %union.tree_node* %6, !dbg !8099
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_new_update_single(%union.tree_node* %new_name, %union.tree_node* %old_name) #0 !dbg !8101 {
entry:
  %new_name.addr = alloca %union.tree_node*, align 8
  %old_name.addr = alloca %union.tree_node*, align 8
  %currdef = alloca %union.tree_node*, align 8
  store %union.tree_node* %new_name, %union.tree_node** %new_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name.addr, metadata !8102, metadata !DIExpression()), !dbg !8103
  store %union.tree_node* %old_name, %union.tree_node** %old_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_name.addr, metadata !8104, metadata !DIExpression()), !dbg !8105
  call void @llvm.dbg.declare(metadata %union.tree_node** %currdef, metadata !8106, metadata !DIExpression()), !dbg !8107
  %0 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !8108
  %call = call %union.tree_node* @get_current_def(%union.tree_node* %0), !dbg !8109
  store %union.tree_node* %call, %union.tree_node** %currdef, align 8, !dbg !8107
  %call1 = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** @block_defs_stack, i32 2), !dbg !8110
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !8111
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !8111
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8111

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !8111
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %2, i32 0, i32 0, !dbg !8111
  br label %cond.end, !dbg !8111

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8111

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8111
  %3 = load %union.tree_node*, %union.tree_node** %currdef, align 8, !dbg !8111
  %call2 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %3), !dbg !8111
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !8112
  %tobool3 = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !8112
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !8112

cond.true4:                                       ; preds = %cond.end
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @block_defs_stack, align 8, !dbg !8112
  %base5 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !8112
  br label %cond.end7, !dbg !8112

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !8112

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_tree_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !8112
  %6 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !8112
  %call9 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond8, %union.tree_node* %6), !dbg !8112
  %7 = load %union.tree_node*, %union.tree_node** %old_name.addr, align 8, !dbg !8113
  %8 = load %union.tree_node*, %union.tree_node** %new_name.addr, align 8, !dbg !8114
  call void @set_current_def(%union.tree_node* %7, %union.tree_node* %8), !dbg !8115
  ret void, !dbg !8116
}

; Function Attrs: noinline nounwind uwtable
define internal void @register_new_update_set(%union.tree_node* %new_name, %struct.bitmap_head_def* %old_names) #0 !dbg !8117 {
entry:
  %new_name.addr = alloca %union.tree_node*, align 8
  %old_names.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  store %union.tree_node* %new_name, %union.tree_node** %new_name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name.addr, metadata !8120, metadata !DIExpression()), !dbg !8121
  store %struct.bitmap_head_def* %old_names, %struct.bitmap_head_def** %old_names.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %old_names.addr, metadata !8122, metadata !DIExpression()), !dbg !8123
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !8124, metadata !DIExpression()), !dbg !8125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8126, metadata !DIExpression()), !dbg !8127
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %old_names.addr, align 8, !dbg !8128
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !8128
  br label %for.cond, !dbg !8128

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8130
  %tobool = icmp ne i8 %call, 0, !dbg !8128
  br i1 %tobool, label %for.body, label %for.end, !dbg !8128

for.body:                                         ; preds = %for.cond
  %1 = load %union.tree_node*, %union.tree_node** %new_name.addr, align 8, !dbg !8132
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8133
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !8133
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !8133
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !8133
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %3, i32 0, i32 2, !dbg !8133
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !8133
  %tobool1 = icmp ne %struct.VEC_tree_gc* %4, null, !dbg !8133
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8133

cond.true:                                        ; preds = %for.body
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8133
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !8133
  %gimple_df3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 3, !dbg !8133
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df3, align 8, !dbg !8133
  %ssa_names4 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !8133
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names4, align 8, !dbg !8133
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %7, i32 0, i32 0, !dbg !8133
  br label %cond.end, !dbg !8133

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8133

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8133
  %8 = load i32, i32* %i, align 4, !dbg !8133
  %call5 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %8), !dbg !8133
  call void @register_new_update_single(%union.tree_node* %1, %union.tree_node* %call5), !dbg !8134
  br label %for.inc, !dbg !8134

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8130
  br label %for.cond, !dbg !8130, !llvm.loop !8135

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8137
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_update_stmt(%union.gimple_statement_d* %stmt, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #0 !dbg !8138 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %failed = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8141, metadata !DIExpression()), !dbg !8142
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8143, metadata !DIExpression()), !dbg !8144
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8145, metadata !DIExpression()), !dbg !8146
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !8147, metadata !DIExpression()), !dbg !8148
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !8149, metadata !DIExpression()), !dbg !8150
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8151
  %call = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %0), !dbg !8153
  %tobool = icmp ne i8 %call, 0, !dbg !8153
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8154

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8155
  %call1 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %1), !dbg !8156
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8156
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8157

if.then:                                          ; preds = %land.lhs.true
  br label %if.end50, !dbg !8158

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8159
  %tobool3 = icmp ne %struct._IO_FILE* %2, null, !dbg !8159
  br i1 %tobool3, label %land.lhs.true4, label %if.end9, !dbg !8161

land.lhs.true4:                                   ; preds = %if.end
  %3 = load i32, i32* @dump_flags, align 4, !dbg !8162
  %and = and i32 %3, 8, !dbg !8163
  %tobool5 = icmp ne i32 %and, 0, !dbg !8163
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !8164

if.then6:                                         ; preds = %land.lhs.true4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8165
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.53, i64 0, i64 0)), !dbg !8167
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8168
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8169
  call void @print_gimple_stmt(%struct._IO_FILE* %5, %union.gimple_statement_d* %6, i32 0, i32 2), !dbg !8170
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8171
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !8172
  br label %if.end9, !dbg !8173

if.end9:                                          ; preds = %if.then6, %land.lhs.true4, %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8174
  %call10 = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %8), !dbg !8176
  %tobool11 = icmp ne i8 %call10, 0, !dbg !8176
  br i1 %tobool11, label %if.then12, label %if.end37, !dbg !8177

if.then12:                                        ; preds = %if.end9
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8178
  %call13 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %9), !dbg !8181
  %tobool14 = icmp ne i8 %call13, 0, !dbg !8181
  br i1 %tobool14, label %if.then15, label %if.else, !dbg !8182

if.then15:                                        ; preds = %if.then12
  call void @llvm.dbg.declare(metadata i8* %failed, metadata !8183, metadata !DIExpression()), !dbg !8185
  store i8 0, i8* %failed, align 1, !dbg !8185
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8186
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %10, i32 1), !dbg !8186
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8186
  br label %for.cond, !dbg !8186

for.cond:                                         ; preds = %for.inc, %if.then15
  %call17 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8188
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8188
  %lnot = xor i1 %tobool18, true, !dbg !8188
  br i1 %lnot, label %for.body, label %for.end, !dbg !8186

for.body:                                         ; preds = %for.cond
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8190
  %call19 = call zeroext i8 @maybe_replace_use_in_debug_stmt(%struct.ssa_use_operand_d* %11), !dbg !8192
  %tobool20 = icmp ne i8 %call19, 0, !dbg !8192
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !8193

if.then21:                                        ; preds = %for.body
  store i8 1, i8* %failed, align 1, !dbg !8194
  br label %for.end, !dbg !8196

if.end22:                                         ; preds = %for.body
  br label %for.inc, !dbg !8197

for.inc:                                          ; preds = %if.end22
  %call23 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !8188
  store %struct.ssa_use_operand_d* %call23, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8188
  br label %for.cond, !dbg !8188, !llvm.loop !8198

for.end:                                          ; preds = %if.then21, %for.cond
  %12 = load i8, i8* %failed, align 1, !dbg !8200
  %tobool24 = icmp ne i8 %12, 0, !dbg !8200
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !8202

if.then25:                                        ; preds = %for.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8203
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %13), !dbg !8205
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8206
  call void @update_stmt(%union.gimple_statement_d* %14), !dbg !8207
  br label %if.end26, !dbg !8208

if.end26:                                         ; preds = %if.then25, %for.end
  br label %if.end36, !dbg !8209

if.else:                                          ; preds = %if.then12
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8210
  %call27 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %15, i32 5), !dbg !8210
  store %struct.ssa_use_operand_d* %call27, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8210
  br label %for.cond28, !dbg !8210

for.cond28:                                       ; preds = %for.inc33, %if.else
  %call29 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8213
  %tobool30 = icmp ne i8 %call29, 0, !dbg !8213
  %lnot31 = xor i1 %tobool30, true, !dbg !8213
  br i1 %lnot31, label %for.body32, label %for.end35, !dbg !8210

for.body32:                                       ; preds = %for.cond28
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8215
  call void @maybe_replace_use(%struct.ssa_use_operand_d* %16), !dbg !8216
  br label %for.inc33, !dbg !8216

for.inc33:                                        ; preds = %for.body32
  %call34 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !8213
  store %struct.ssa_use_operand_d* %call34, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8213
  br label %for.cond28, !dbg !8213, !llvm.loop !8217

for.end35:                                        ; preds = %for.cond28
  br label %if.end36

if.end36:                                         ; preds = %for.end35, %if.end26
  br label %if.end37, !dbg !8219

if.end37:                                         ; preds = %if.end36, %if.end9
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8220
  %call38 = call zeroext i8 @register_defs_p(%union.gimple_statement_d* %17), !dbg !8222
  %tobool39 = icmp ne i8 %call38, 0, !dbg !8222
  br i1 %tobool39, label %if.then40, label %if.end50, !dbg !8223

if.then40:                                        ; preds = %if.end37
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8224
  %call41 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %18, i32 10), !dbg !8224
  store %union.tree_node** %call41, %union.tree_node*** %def_p, align 8, !dbg !8224
  br label %for.cond42, !dbg !8224

for.cond42:                                       ; preds = %for.inc47, %if.then40
  %call43 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8226
  %tobool44 = icmp ne i8 %call43, 0, !dbg !8226
  %lnot45 = xor i1 %tobool44, true, !dbg !8226
  br i1 %lnot45, label %for.body46, label %for.end49, !dbg !8224

for.body46:                                       ; preds = %for.cond42
  %19 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !8228
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8229
  call void @maybe_register_def(%union.tree_node** %19, %union.gimple_statement_d* %20, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8230
  br label %for.inc47, !dbg !8230

for.inc47:                                        ; preds = %for.body46
  %call48 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %iter), !dbg !8226
  store %union.tree_node** %call48, %union.tree_node*** %def_p, align 8, !dbg !8226
  br label %for.cond42, !dbg !8226, !llvm.loop !8231

for.end49:                                        ; preds = %for.cond42
  br label %if.end50, !dbg !8232

if.end50:                                         ; preds = %if.then, %for.end49, %if.end37
  ret void, !dbg !8233
}

; Function Attrs: noinline nounwind uwtable
define internal void @rewrite_update_phi_arguments(%struct.basic_block_def* %bb) #0 !dbg !8234 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %i = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %phis = alloca %struct.VEC_gimple_heap*, align 8
  %arg = alloca %union.tree_node*, align 8
  %lhs_sym = alloca %union.tree_node*, align 8
  %reaching_def = alloca %union.tree_node*, align 8
  %arg_p = alloca %struct.ssa_use_operand_d*, align 8
  %sym = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %locus = alloca i32, align 4
  %arg_i = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8235, metadata !DIExpression()), !dbg !8236
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8237, metadata !DIExpression()), !dbg !8238
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8239, metadata !DIExpression()), !dbg !8240
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8241, metadata !DIExpression()), !dbg !8242
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8243
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !8243
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8243
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8243
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !8243
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !8243
  store i32 %3, i32* %2, align 8, !dbg !8243
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !8243
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !8243
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !8243
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8243
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8243
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !8243
  br label %for.cond, !dbg !8243

for.cond:                                         ; preds = %for.inc87, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8245
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8245
  %10 = load i32, i32* %9, align 8, !dbg !8245
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8245
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8245
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !8245
  %tobool = icmp ne i8 %call1, 0, !dbg !8243
  br i1 %tobool, label %for.body, label %for.end88, !dbg !8243

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8247, metadata !DIExpression()), !dbg !8249
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %phis, metadata !8250, metadata !DIExpression()), !dbg !8251
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_with_phis_to_rewrite, align 8, !dbg !8252
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8254
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 1, !dbg !8255
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8255
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !8256
  %16 = load i32, i32* %index, align 8, !dbg !8256
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %13, i32 %16), !dbg !8257
  %tobool3 = icmp ne i32 %call2, 0, !dbg !8257
  br i1 %tobool3, label %if.end, label %if.then, !dbg !8258

if.then:                                          ; preds = %for.body
  br label %for.inc87, !dbg !8259

if.end:                                           ; preds = %for.body
  %17 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !8260
  %tobool4 = icmp ne %struct.VEC_gimple_vec_heap* %17, null, !dbg !8260
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8260

cond.true:                                        ; preds = %if.end
  %18 = load %struct.VEC_gimple_vec_heap*, %struct.VEC_gimple_vec_heap** @phis_to_rewrite, align 8, !dbg !8260
  %base = getelementptr inbounds %struct.VEC_gimple_vec_heap, %struct.VEC_gimple_vec_heap* %18, i32 0, i32 0, !dbg !8260
  br label %cond.end, !dbg !8260

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8260

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_vec_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8260
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8260
  %dest5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 1, !dbg !8260
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dest5, align 8, !dbg !8260
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 9, !dbg !8260
  %21 = load i32, i32* %index6, align 8, !dbg !8260
  %call7 = call %struct.VEC_gimple_heap* @VEC_gimple_vec_base_index(%struct.VEC_gimple_vec_base* %cond, i32 %21), !dbg !8260
  store %struct.VEC_gimple_heap* %call7, %struct.VEC_gimple_heap** %phis, align 8, !dbg !8261
  store i32 0, i32* %i, align 4, !dbg !8262
  br label %for.cond8, !dbg !8264

for.cond8:                                        ; preds = %for.inc, %cond.end
  %22 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %phis, align 8, !dbg !8265
  %tobool9 = icmp ne %struct.VEC_gimple_heap* %22, null, !dbg !8265
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !8265

cond.true10:                                      ; preds = %for.cond8
  %23 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %phis, align 8, !dbg !8265
  %base11 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %23, i32 0, i32 0, !dbg !8265
  br label %cond.end13, !dbg !8265

cond.false12:                                     ; preds = %for.cond8
  br label %cond.end13, !dbg !8265

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_gimple_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !8265
  %24 = load i32, i32* %i, align 4, !dbg !8265
  %call15 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond14, i32 %24, %union.gimple_statement_d** %phi), !dbg !8265
  %tobool16 = icmp ne i32 %call15, 0, !dbg !8267
  br i1 %tobool16, label %for.body17, label %for.end, !dbg !8267

for.body17:                                       ; preds = %cond.end13
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8268, metadata !DIExpression()), !dbg !8270
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_sym, metadata !8271, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.declare(metadata %union.tree_node** %reaching_def, metadata !8273, metadata !DIExpression()), !dbg !8274
  store %union.tree_node* null, %union.tree_node** %reaching_def, align 8, !dbg !8274
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %arg_p, metadata !8275, metadata !DIExpression()), !dbg !8276
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8277
  %call18 = call zeroext i8 @rewrite_uses_p(%union.gimple_statement_d* %25), !dbg !8277
  %tobool19 = icmp ne i8 %call18, 0, !dbg !8277
  br i1 %tobool19, label %cond.false21, label %cond.true20, !dbg !8277

cond.true20:                                      ; preds = %for.body17
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 2006, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8277
  br label %cond.end22, !dbg !8277

cond.false21:                                     ; preds = %for.body17
  br label %cond.end22, !dbg !8277

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !8277
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8278
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8278
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 6, !dbg !8278
  %28 = load i32, i32* %dest_idx, align 4, !dbg !8278
  %call24 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %26, i32 %28), !dbg !8278
  store %struct.ssa_use_operand_d* %call24, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !8279
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !8280
  %call25 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %29), !dbg !8280
  store %union.tree_node* %call25, %union.tree_node** %arg, align 8, !dbg !8281
  %30 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8282
  %tobool26 = icmp ne %union.tree_node* %30, null, !dbg !8282
  br i1 %tobool26, label %land.lhs.true, label %if.end35, !dbg !8284

land.lhs.true:                                    ; preds = %cond.end22
  %31 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8285
  %base27 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !8285
  %32 = bitcast %struct.tree_base* %base27 to i64*, !dbg !8285
  %bf.load = load i64, i64* %32, align 8, !dbg !8285
  %bf.clear = and i64 %bf.load, 65535, !dbg !8285
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8285
  %idxprom = sext i32 %bf.cast to i64, !dbg !8285
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8285
  %33 = load i32, i32* %arrayidx, align 4, !dbg !8285
  %cmp = icmp eq i32 %33, 3, !dbg !8285
  br i1 %cmp, label %if.end35, label %land.lhs.true28, !dbg !8286

land.lhs.true28:                                  ; preds = %land.lhs.true
  %34 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8287
  %base29 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !8287
  %35 = bitcast %struct.tree_base* %base29 to i64*, !dbg !8287
  %bf.load30 = load i64, i64* %35, align 8, !dbg !8287
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !8287
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !8287
  %cmp33 = icmp ne i32 %bf.cast32, 141, !dbg !8288
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !8289

if.then34:                                        ; preds = %land.lhs.true28
  br label %for.inc, !dbg !8290

if.end35:                                         ; preds = %land.lhs.true28, %land.lhs.true, %cond.end22
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8291
  %call36 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %36), !dbg !8291
  %ssa_name = bitcast %union.tree_node* %call36 to %struct.tree_ssa_name*, !dbg !8291
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8291
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8291
  store %union.tree_node* %37, %union.tree_node** %lhs_sym, align 8, !dbg !8292
  %38 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8293
  %cmp37 = icmp eq %union.tree_node* %38, null, !dbg !8295
  br i1 %cmp37, label %if.then38, label %if.else, !dbg !8296

if.then38:                                        ; preds = %if.end35
  %39 = load %union.tree_node*, %union.tree_node** %lhs_sym, align 8, !dbg !8297
  %call39 = call %union.tree_node* @get_reaching_def(%union.tree_node* %39), !dbg !8299
  store %union.tree_node* %call39, %union.tree_node** %reaching_def, align 8, !dbg !8300
  br label %if.end64, !dbg !8301

if.else:                                          ; preds = %if.end35
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !8302, metadata !DIExpression()), !dbg !8304
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8305
  %base40 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !8305
  %41 = bitcast %struct.tree_base* %base40 to i64*, !dbg !8305
  %bf.load41 = load i64, i64* %41, align 8, !dbg !8305
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !8305
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !8305
  %idxprom44 = sext i32 %bf.cast43 to i64, !dbg !8305
  %arrayidx45 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom44, !dbg !8305
  %42 = load i32, i32* %arrayidx45, align 4, !dbg !8305
  %cmp46 = icmp eq i32 %42, 3, !dbg !8305
  br i1 %cmp46, label %cond.true47, label %cond.false48, !dbg !8305

cond.true47:                                      ; preds = %if.else
  %43 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8306
  br label %cond.end51, !dbg !8305

cond.false48:                                     ; preds = %if.else
  %44 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8307
  %ssa_name49 = bitcast %union.tree_node* %44 to %struct.tree_ssa_name*, !dbg !8307
  %var50 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name49, i32 0, i32 1, !dbg !8307
  %45 = load %union.tree_node*, %union.tree_node** %var50, align 8, !dbg !8307
  br label %cond.end51, !dbg !8305

cond.end51:                                       ; preds = %cond.false48, %cond.true47
  %cond52 = phi %union.tree_node* [ %43, %cond.true47 ], [ %45, %cond.false48 ], !dbg !8305
  store %union.tree_node* %cond52, %union.tree_node** %sym, align 8, !dbg !8304
  %46 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8308
  %call53 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %46), !dbg !8310
  %tobool54 = icmp ne i8 %call53, 0, !dbg !8310
  br i1 %tobool54, label %if.then55, label %if.else57, !dbg !8311

if.then55:                                        ; preds = %cond.end51
  %47 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8312
  %call56 = call %union.tree_node* @get_reaching_def(%union.tree_node* %47), !dbg !8313
  store %union.tree_node* %call56, %union.tree_node** %reaching_def, align 8, !dbg !8314
  br label %if.end63, !dbg !8315

if.else57:                                        ; preds = %cond.end51
  %48 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8316
  %call58 = call zeroext i8 @is_old_name(%union.tree_node* %48), !dbg !8318
  %tobool59 = icmp ne i8 %call58, 0, !dbg !8318
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !8319

if.then60:                                        ; preds = %if.else57
  %49 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8320
  %call61 = call %union.tree_node* @get_reaching_def(%union.tree_node* %49), !dbg !8321
  store %union.tree_node* %call61, %union.tree_node** %reaching_def, align 8, !dbg !8322
  br label %if.end62, !dbg !8323

if.end62:                                         ; preds = %if.then60, %if.else57
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then55
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then38
  %50 = load %union.tree_node*, %union.tree_node** %reaching_def, align 8, !dbg !8324
  %tobool65 = icmp ne %union.tree_node* %50, null, !dbg !8324
  br i1 %tobool65, label %if.then66, label %if.end79, !dbg !8326

if.then66:                                        ; preds = %if.end64
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8327, metadata !DIExpression()), !dbg !8329
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !8330, metadata !DIExpression()), !dbg !8331
  call void @llvm.dbg.declare(metadata i32* %arg_i, metadata !8332, metadata !DIExpression()), !dbg !8333
  %51 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !8334
  %call67 = call i32 @phi_arg_index_from_use(%struct.ssa_use_operand_d* %51), !dbg !8334
  store i32 %call67, i32* %arg_i, align 4, !dbg !8333
  %52 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !8335
  %53 = load %union.tree_node*, %union.tree_node** %reaching_def, align 8, !dbg !8335
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %52, %union.tree_node* %53), !dbg !8335
  %54 = load %union.tree_node*, %union.tree_node** %reaching_def, align 8, !dbg !8336
  %ssa_name68 = bitcast %union.tree_node* %54 to %struct.tree_ssa_name*, !dbg !8336
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name68, i32 0, i32 2, !dbg !8336
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8336
  store %union.gimple_statement_d* %55, %union.gimple_statement_d** %stmt, align 8, !dbg !8337
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8338
  %call69 = call i32 @gimple_code(%union.gimple_statement_d* %56), !dbg !8340
  %cmp70 = icmp eq i32 %call69, 16, !dbg !8341
  br i1 %cmp70, label %land.lhs.true71, label %if.else76, !dbg !8342

land.lhs.true71:                                  ; preds = %if.then66
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8343
  %call72 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %57), !dbg !8344
  %cmp73 = icmp eq i32 %call72, 1, !dbg !8345
  br i1 %cmp73, label %if.then74, label %if.else76, !dbg !8346

if.then74:                                        ; preds = %land.lhs.true71
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8347
  %call75 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %58, i64 0), !dbg !8348
  store i32 %call75, i32* %locus, align 4, !dbg !8349
  br label %if.end78, !dbg !8350

if.else76:                                        ; preds = %land.lhs.true71, %if.then66
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8351
  %call77 = call i32 @gimple_location(%union.gimple_statement_d* %59), !dbg !8352
  store i32 %call77, i32* %locus, align 4, !dbg !8353
  br label %if.end78

if.end78:                                         ; preds = %if.else76, %if.then74
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8354
  %61 = load i32, i32* %arg_i, align 4, !dbg !8355
  %conv = sext i32 %61 to i64, !dbg !8355
  %62 = load i32, i32* %locus, align 4, !dbg !8356
  call void @gimple_phi_arg_set_location(%union.gimple_statement_d* %60, i64 %conv, i32 %62), !dbg !8357
  br label %if.end79, !dbg !8358

if.end79:                                         ; preds = %if.end78, %if.end64
  %63 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8359
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 7, !dbg !8361
  %64 = load i32, i32* %flags, align 8, !dbg !8361
  %and = and i32 %64, 2, !dbg !8362
  %tobool80 = icmp ne i32 %and, 0, !dbg !8362
  br i1 %tobool80, label %if.then81, label %if.end86, !dbg !8363

if.then81:                                        ; preds = %if.end79
  %65 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %arg_p, align 8, !dbg !8364
  %call82 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %65), !dbg !8364
  %base83 = bitcast %union.tree_node* %call82 to %struct.tree_base*, !dbg !8364
  %66 = bitcast %struct.tree_base* %base83 to i64*, !dbg !8364
  %bf.load84 = load i64, i64* %66, align 8, !dbg !8365
  %bf.clear85 = and i64 %bf.load84, -4194305, !dbg !8365
  %bf.set = or i64 %bf.clear85, 4194304, !dbg !8365
  store i64 %bf.set, i64* %66, align 8, !dbg !8365
  br label %if.end86, !dbg !8364

if.end86:                                         ; preds = %if.then81, %if.end79
  br label %for.inc, !dbg !8366

for.inc:                                          ; preds = %if.end86, %if.then34
  %67 = load i32, i32* %i, align 4, !dbg !8367
  %inc = add i32 %67, 1, !dbg !8367
  store i32 %inc, i32* %i, align 4, !dbg !8367
  br label %for.cond8, !dbg !8368, !llvm.loop !8369

for.end:                                          ; preds = %cond.end13
  br label %for.inc87, !dbg !8371

for.inc87:                                        ; preds = %for.end, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8245
  br label %for.cond, !dbg !8245, !llvm.loop !8372

for.end88:                                        ; preds = %for.cond
  ret void, !dbg !8374
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @maybe_replace_use_in_debug_stmt(%struct.ssa_use_operand_d* %use_p) #0 !dbg !8375 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %rdef = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !8378, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.declare(metadata %union.tree_node** %rdef, metadata !8380, metadata !DIExpression()), !dbg !8381
  store %union.tree_node* null, %union.tree_node** %rdef, align 8, !dbg !8381
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8382, metadata !DIExpression()), !dbg !8383
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8384
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %0), !dbg !8384
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8383
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !8385, metadata !DIExpression()), !dbg !8386
  %1 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8387
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8387
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8387
  %bf.load = load i64, i64* %2, align 8, !dbg !8387
  %bf.clear = and i64 %bf.load, 65535, !dbg !8387
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8387
  %idxprom = sext i32 %bf.cast to i64, !dbg !8387
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8387
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8387
  %cmp = icmp eq i32 %3, 3, !dbg !8387
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8387

cond.true:                                        ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8388
  br label %cond.end, !dbg !8387

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8389
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !8389
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8389
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8389
  br label %cond.end, !dbg !8387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ %6, %cond.false ], !dbg !8387
  store %union.tree_node* %cond, %union.tree_node** %sym, align 8, !dbg !8386
  %7 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8390
  %call1 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %7), !dbg !8392
  %tobool = icmp ne i8 %call1, 0, !dbg !8392
  br i1 %tobool, label %if.then, label %if.else, !dbg !8393

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8394
  %call2 = call %union.tree_node* @get_current_def(%union.tree_node* %8), !dbg !8395
  store %union.tree_node* %call2, %union.tree_node** %rdef, align 8, !dbg !8396
  br label %if.end16, !dbg !8397

if.else:                                          ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8398
  %call3 = call zeroext i8 @is_old_name(%union.tree_node* %9), !dbg !8400
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8400
  br i1 %tobool4, label %if.then5, label %if.else14, !dbg !8401

if.then5:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8402
  %call6 = call %union.tree_node* @get_current_def(%union.tree_node* %10), !dbg !8404
  store %union.tree_node* %call6, %union.tree_node** %rdef, align 8, !dbg !8405
  %11 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8406
  %tobool7 = icmp ne %union.tree_node* %11, null, !dbg !8406
  br i1 %tobool7, label %if.end, label %land.lhs.true, !dbg !8408

land.lhs.true:                                    ; preds = %if.then5
  %12 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8409
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !8409
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !8409
  %bf.load9 = load i64, i64* %13, align 8, !dbg !8409
  %bf.lshr = lshr i64 %bf.load9, 32, !dbg !8409
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !8409
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !8409
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !8409
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !8410

if.then13:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8411
  store %union.tree_node* %14, %union.tree_node** %rdef, align 8, !dbg !8412
  br label %if.end, !dbg !8413

if.end:                                           ; preds = %if.then13, %land.lhs.true, %if.then5
  br label %if.end15, !dbg !8414

if.else14:                                        ; preds = %if.else
  %15 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8415
  store %union.tree_node* %15, %union.tree_node** %rdef, align 8, !dbg !8416
  br label %if.end15

if.end15:                                         ; preds = %if.else14, %if.end
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then
  %16 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8417
  %tobool17 = icmp ne %union.tree_node* %16, null, !dbg !8417
  br i1 %tobool17, label %land.lhs.true18, label %if.end21, !dbg !8419

land.lhs.true18:                                  ; preds = %if.end16
  %17 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8420
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8421
  %cmp19 = icmp ne %union.tree_node* %17, %18, !dbg !8422
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !8423

if.then20:                                        ; preds = %land.lhs.true18
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8424
  %20 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8424
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %19, %union.tree_node* %20), !dbg !8424
  br label %if.end21, !dbg !8424

if.end21:                                         ; preds = %if.then20, %land.lhs.true18, %if.end16
  %21 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8425
  %cmp22 = icmp ne %union.tree_node* %21, null, !dbg !8426
  %conv = zext i1 %cmp22 to i32, !dbg !8426
  %conv23 = trunc i32 %conv to i8, !dbg !8425
  ret i8 %conv23, !dbg !8427
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !8428 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !8429, metadata !DIExpression()), !dbg !8430
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !8431
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !8432
  ret void, !dbg !8433
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_replace_use(%struct.ssa_use_operand_d* %use_p) #0 !dbg !8434 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %rdef = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !8437, metadata !DIExpression()), !dbg !8438
  call void @llvm.dbg.declare(metadata %union.tree_node** %rdef, metadata !8439, metadata !DIExpression()), !dbg !8440
  store %union.tree_node* null, %union.tree_node** %rdef, align 8, !dbg !8440
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8441, metadata !DIExpression()), !dbg !8442
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8443
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %0), !dbg !8443
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !8442
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !8444, metadata !DIExpression()), !dbg !8445
  %1 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8446
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8446
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8446
  %bf.load = load i64, i64* %2, align 8, !dbg !8446
  %bf.clear = and i64 %bf.load, 65535, !dbg !8446
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8446
  %idxprom = sext i32 %bf.cast to i64, !dbg !8446
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8446
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8446
  %cmp = icmp eq i32 %3, 3, !dbg !8446
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8446

cond.true:                                        ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8447
  br label %cond.end, !dbg !8446

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8448
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !8448
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8448
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8448
  br label %cond.end, !dbg !8446

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ %6, %cond.false ], !dbg !8446
  store %union.tree_node* %cond, %union.tree_node** %sym, align 8, !dbg !8445
  %7 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8449
  %call1 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %7), !dbg !8451
  %tobool = icmp ne i8 %call1, 0, !dbg !8451
  br i1 %tobool, label %if.then, label %if.else, !dbg !8452

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8453
  %call2 = call %union.tree_node* @get_reaching_def(%union.tree_node* %8), !dbg !8454
  store %union.tree_node* %call2, %union.tree_node** %rdef, align 8, !dbg !8455
  br label %if.end7, !dbg !8456

if.else:                                          ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8457
  %call3 = call zeroext i8 @is_old_name(%union.tree_node* %9), !dbg !8459
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8459
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !8460

if.then5:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8461
  %call6 = call %union.tree_node* @get_reaching_def(%union.tree_node* %10), !dbg !8462
  store %union.tree_node* %call6, %union.tree_node** %rdef, align 8, !dbg !8463
  br label %if.end, !dbg !8464

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8465
  %tobool8 = icmp ne %union.tree_node* %11, null, !dbg !8465
  br i1 %tobool8, label %land.lhs.true, label %if.end11, !dbg !8467

land.lhs.true:                                    ; preds = %if.end7
  %12 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8468
  %13 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8469
  %cmp9 = icmp ne %union.tree_node* %12, %13, !dbg !8470
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !8471

if.then10:                                        ; preds = %land.lhs.true
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8472
  %15 = load %union.tree_node*, %union.tree_node** %rdef, align 8, !dbg !8472
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %14, %union.tree_node* %15), !dbg !8472
  br label %if.end11, !dbg !8472

if.end11:                                         ; preds = %if.then10, %land.lhs.true, %if.end7
  ret void, !dbg !8473
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_register_def(%union.tree_node** %def_p, %union.gimple_statement_d* %stmt, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #0 !dbg !8474 {
entry:
  %def_p.addr = alloca %union.tree_node**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %sym = alloca %union.tree_node*, align 8
  %tracked_var = alloca %union.tree_node*, align 8
  %note = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ef = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.tree_node** %def_p, %union.tree_node*** %def_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p.addr, metadata !8477, metadata !DIExpression()), !dbg !8478
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8479, metadata !DIExpression()), !dbg !8480
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8481, metadata !DIExpression()), !dbg !8482
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8483, metadata !DIExpression()), !dbg !8484
  %0 = load %union.tree_node**, %union.tree_node*** %def_p.addr, align 8, !dbg !8485
  %call = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %0), !dbg !8485
  store %union.tree_node* %call, %union.tree_node** %def, align 8, !dbg !8484
  call void @llvm.dbg.declare(metadata %union.tree_node** %sym, metadata !8486, metadata !DIExpression()), !dbg !8487
  %1 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8488
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8488
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8488
  %bf.load = load i64, i64* %2, align 8, !dbg !8488
  %bf.clear = and i64 %bf.load, 65535, !dbg !8488
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8488
  %idxprom = sext i32 %bf.cast to i64, !dbg !8488
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8488
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8488
  %cmp = icmp eq i32 %3, 3, !dbg !8488
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8488

cond.true:                                        ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8489
  br label %cond.end, !dbg !8488

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8490
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !8490
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8490
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8490
  br label %cond.end, !dbg !8488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ %6, %cond.false ], !dbg !8488
  store %union.tree_node* %cond, %union.tree_node** %sym, align 8, !dbg !8487
  %7 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8491
  %call1 = call zeroext i8 @symbol_marked_for_renaming(%union.tree_node* %7), !dbg !8493
  %tobool = icmp ne i8 %call1, 0, !dbg !8493
  br i1 %tobool, label %if.then, label %if.else53, !dbg !8494

if.then:                                          ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8495
  %base2 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8495
  %9 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8495
  %bf.load3 = load i64, i64* %9, align 8, !dbg !8495
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8495
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8495
  %idxprom6 = sext i32 %bf.cast5 to i64, !dbg !8495
  %arrayidx7 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom6, !dbg !8495
  %10 = load i32, i32* %arrayidx7, align 4, !dbg !8495
  %cmp8 = icmp eq i32 %10, 3, !dbg !8495
  br i1 %cmp8, label %if.then9, label %if.end52, !dbg !8498

if.then9:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %tracked_var, metadata !8499, metadata !DIExpression()), !dbg !8501
  %11 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8502
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8503
  %call10 = call %union.tree_node* @make_ssa_name(%union.tree_node* %11, %union.gimple_statement_d* %12), !dbg !8504
  store %union.tree_node* %call10, %union.tree_node** %def, align 8, !dbg !8505
  %13 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8506
  %14 = load %union.tree_node**, %union.tree_node*** %def_p.addr, align 8, !dbg !8506
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !dbg !8506
  %15 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8507
  %call11 = call %union.tree_node* @target_for_debug_bind(%union.tree_node* %15), !dbg !8508
  store %union.tree_node* %call11, %union.tree_node** %tracked_var, align 8, !dbg !8509
  %16 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !8510
  %tobool12 = icmp ne %union.tree_node* %16, null, !dbg !8510
  br i1 %tobool12, label %if.then13, label %if.end51, !dbg !8512

if.then13:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %note, metadata !8513, metadata !DIExpression()), !dbg !8515
  %17 = load %union.tree_node*, %union.tree_node** %tracked_var, align 8, !dbg !8516
  %18 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8516
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8516
  %call14 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %17, %union.tree_node* %18, %union.gimple_statement_d* %19), !dbg !8516
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %note, align 8, !dbg !8515
  %call15 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8517
  %conv = zext i8 %call15 to i32, !dbg !8517
  %tobool16 = icmp ne i32 %conv, 0, !dbg !8517
  br i1 %tobool16, label %land.lhs.true, label %if.else, !dbg !8519

land.lhs.true:                                    ; preds = %if.then13
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8520
  %call17 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %20), !dbg !8521
  %conv18 = zext i8 %call17 to i32, !dbg !8521
  %tobool19 = icmp ne i32 %conv18, 0, !dbg !8521
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !8522

if.then20:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8523, metadata !DIExpression()), !dbg !8525
  %call21 = call %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8526
  store %struct.basic_block_def* %call21, %struct.basic_block_def** %bb, align 8, !dbg !8525
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8527, metadata !DIExpression()), !dbg !8528
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8529, metadata !DIExpression()), !dbg !8530
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ef, metadata !8531, metadata !DIExpression()), !dbg !8532
  store %struct.edge_def* null, %struct.edge_def** %ef, align 8, !dbg !8532
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8533
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !8533
  %call22 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8533
  %22 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8533
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 0, !dbg !8533
  %24 = extractvalue { i32, %struct.VEC_edge_gc** } %call22, 0, !dbg !8533
  store i32 %24, i32* %23, align 8, !dbg !8533
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 1, !dbg !8533
  %26 = extractvalue { i32, %struct.VEC_edge_gc** } %call22, 1, !dbg !8533
  store %struct.VEC_edge_gc** %26, %struct.VEC_edge_gc*** %25, align 8, !dbg !8533
  %27 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8533
  %28 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8533
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false), !dbg !8533
  br label %for.cond, !dbg !8533

for.cond:                                         ; preds = %for.inc, %if.then20
  %29 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8535
  %30 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %29, i32 0, i32 0, !dbg !8535
  %31 = load i32, i32* %30, align 8, !dbg !8535
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %29, i32 0, i32 1, !dbg !8535
  %33 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %32, align 8, !dbg !8535
  %call23 = call zeroext i8 @ei_cond(i32 %31, %struct.VEC_edge_gc** %33, %struct.edge_def** %e), !dbg !8535
  %tobool24 = icmp ne i8 %call23, 0, !dbg !8533
  br i1 %tobool24, label %for.body, label %for.end, !dbg !8533

for.body:                                         ; preds = %for.cond
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8537
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 7, !dbg !8539
  %35 = load i32, i32* %flags, align 8, !dbg !8539
  %and = and i32 %35, 8, !dbg !8540
  %tobool25 = icmp ne i32 %and, 0, !dbg !8540
  br i1 %tobool25, label %if.end, label %if.then26, !dbg !8541

if.then26:                                        ; preds = %for.body
  %36 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8542
  %tobool27 = icmp ne %struct.edge_def* %36, null, !dbg !8542
  br i1 %tobool27, label %cond.true28, label %cond.false29, !dbg !8542

cond.true28:                                      ; preds = %if.then26
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1875, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8542
  br label %cond.end30, !dbg !8542

cond.false29:                                     ; preds = %if.then26
  br label %cond.end30, !dbg !8542

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !8542
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8544
  store %struct.edge_def* %37, %struct.edge_def** %ef, align 8, !dbg !8545
  br label %if.end, !dbg !8546

if.end:                                           ; preds = %cond.end30, %for.body
  br label %for.inc, !dbg !8547

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8535
  br label %for.cond, !dbg !8535, !llvm.loop !8548

for.end:                                          ; preds = %for.cond
  %38 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8550
  %tobool32 = icmp ne %struct.edge_def* %38, null, !dbg !8550
  br i1 %tobool32, label %land.lhs.true33, label %cond.true45, !dbg !8550

land.lhs.true33:                                  ; preds = %for.end
  %39 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8550
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !8550
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8550
  %call34 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %40), !dbg !8550
  %conv35 = zext i8 %call34 to i32, !dbg !8550
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !8550
  br i1 %tobool36, label %land.lhs.true37, label %cond.true45, !dbg !8550

land.lhs.true37:                                  ; preds = %land.lhs.true33
  %41 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8550
  %dest38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 1, !dbg !8550
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %dest38, align 8, !dbg !8550
  %call39 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %42), !dbg !8550
  %tobool40 = icmp ne %struct.gimple_seq_d* %call39, null, !dbg !8550
  br i1 %tobool40, label %cond.true45, label %land.lhs.true41, !dbg !8550

land.lhs.true41:                                  ; preds = %land.lhs.true37
  %43 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8550
  %dest42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 1, !dbg !8550
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest42, align 8, !dbg !8550
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8550
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !8550
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8550
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8550
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 1, !dbg !8550
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8550
  %cmp43 = icmp ne %struct.basic_block_def* %44, %47, !dbg !8550
  br i1 %cmp43, label %cond.false46, label %cond.true45, !dbg !8550

cond.true45:                                      ; preds = %land.lhs.true41, %land.lhs.true37, %land.lhs.true33, %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i64 0, i64 0), i32 1881, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8550
  br label %cond.end47, !dbg !8550

cond.false46:                                     ; preds = %land.lhs.true41
  br label %cond.end47, !dbg !8550

cond.end47:                                       ; preds = %cond.false46, %cond.true45
  %cond48 = phi i32 [ 0, %cond.true45 ], [ 0, %cond.false46 ], !dbg !8550
  %48 = load %struct.edge_def*, %struct.edge_def** %ef, align 8, !dbg !8551
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !8552
  %call49 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %48, %union.gimple_statement_d* %49), !dbg !8553
  br label %if.end50, !dbg !8554

if.else:                                          ; preds = %land.lhs.true, %if.then13
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %note, align 8, !dbg !8555
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %50, i32 1), !dbg !8556
  br label %if.end50

if.end50:                                         ; preds = %if.else, %cond.end47
  br label %if.end51, !dbg !8557

if.end51:                                         ; preds = %if.end50, %if.then9
  br label %if.end52, !dbg !8558

if.end52:                                         ; preds = %if.end51, %if.then
  %51 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8559
  %52 = load %union.tree_node*, %union.tree_node** %sym, align 8, !dbg !8560
  call void @register_new_update_single(%union.tree_node* %51, %union.tree_node* %52), !dbg !8561
  br label %if.end63, !dbg !8562

if.else53:                                        ; preds = %cond.end
  %53 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8563
  %call54 = call zeroext i8 @is_new_name(%union.tree_node* %53), !dbg !8566
  %tobool55 = icmp ne i8 %call54, 0, !dbg !8566
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !8567

if.then56:                                        ; preds = %if.else53
  %54 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8568
  %55 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8569
  %call57 = call %struct.bitmap_head_def* @names_replaced_by(%union.tree_node* %55), !dbg !8570
  call void @register_new_update_set(%union.tree_node* %54, %struct.bitmap_head_def* %call57), !dbg !8571
  br label %if.end58, !dbg !8571

if.end58:                                         ; preds = %if.then56, %if.else53
  %56 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8572
  %call59 = call zeroext i8 @is_old_name(%union.tree_node* %56), !dbg !8574
  %tobool60 = icmp ne i8 %call59, 0, !dbg !8574
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !8575

if.then61:                                        ; preds = %if.end58
  %57 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8576
  %58 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8577
  call void @register_new_update_single(%union.tree_node* %57, %union.tree_node* %58), !dbg !8578
  br label %if.end62, !dbg !8578

if.end62:                                         ; preds = %if.then61, %if.end58
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end52
  ret void, !dbg !8579
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !8580 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8583, metadata !DIExpression()), !dbg !8584
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8585, metadata !DIExpression()), !dbg !8586
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !8587, metadata !DIExpression()), !dbg !8588
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8589
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8589
  %conv = zext i8 %call to i32, !dbg !8589
  %tobool = icmp ne i32 %conv, 0, !dbg !8589
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !8589

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !8589
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8589
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !8589
  %cmp = icmp ult i32 %1, %call1, !dbg !8589
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8589

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8589
  br label %cond.end, !dbg !8589

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8589
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8590
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8591
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !8592
  %5 = load i32, i32* %i.addr, align 4, !dbg !8593
  %idxprom = zext i32 %5 to i64, !dbg !8592
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !8592
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !8594
  ret void, !dbg !8595
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !8596 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8599, metadata !DIExpression()), !dbg !8600
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8601
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !8602
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !8603
  %1 = load i32, i32* %num_ops, align 4, !dbg !8603
  ret i32 %1, !dbg !8604
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !8605 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8606, metadata !DIExpression()), !dbg !8607
  call void @llvm.dbg.declare(metadata i64* %off, metadata !8608, metadata !DIExpression()), !dbg !8609
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8610
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !8611
  %idxprom = zext i32 %call to i64, !dbg !8612
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !8612
  %1 = load i64, i64* %arrayidx, align 8, !dbg !8612
  store i64 %1, i64* %off, align 8, !dbg !8613
  %2 = load i64, i64* %off, align 8, !dbg !8614
  %cmp = icmp ne i64 %2, 0, !dbg !8614
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8614

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8614
  br label %cond.end, !dbg !8614

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8614

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8614
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8615
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !8616
  %5 = load i64, i64* %off, align 8, !dbg !8617
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !8618
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !8619
  ret %union.tree_node** %6, !dbg !8620
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !8621 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8624, metadata !DIExpression()), !dbg !8625
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8626
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8627
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !8628
  ret i32 %call1, !dbg !8629
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !8630 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8633, metadata !DIExpression()), !dbg !8634
  %0 = load i32, i32* %code.addr, align 4, !dbg !8635
  %idxprom = zext i32 %0 to i64, !dbg !8636
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !8636
  %1 = load i32, i32* %arrayidx, align 4, !dbg !8636
  ret i32 %1, !dbg !8637
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !8638 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !8639, metadata !DIExpression()), !dbg !8640
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !8641
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8641
  %cmp = icmp ne %struct.gimple_seq_node_d* %0, null, !dbg !8642
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8643

land.rhs:                                         ; preds = %entry
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !8644
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !8644
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !8645
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !8645
  %cmp2 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !8646
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8647
  %land.ext = zext i1 %3 to i32, !dbg !8643
  %conv = trunc i32 %land.ext to i8, !dbg !8648
  ret i8 %conv, !dbg !8649
}

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gsi_bb(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !8650 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !8653, metadata !DIExpression()), !dbg !8654
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 2, !dbg !8655
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8655
  ret %struct.basic_block_def* %0, !dbg !8656
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !8657 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8660, metadata !DIExpression()), !dbg !8661
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8662
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !8662
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !8662
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8662
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8662

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8662
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !8662
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !8662
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8662
  br label %cond.end, !dbg !8662

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8662

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8662
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8662
  %cmp = icmp eq i32 %call, 1, !dbg !8663
  %conv = zext i1 %cmp to i32, !dbg !8663
  %conv2 = trunc i32 %conv to i8, !dbg !8662
  ret i8 %conv2, !dbg !8664
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !8665 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8666, metadata !DIExpression()), !dbg !8667
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8668
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !8668
  %1 = load i32, i32* %flags, align 8, !dbg !8668
  %and = and i32 %1, 512, !dbg !8668
  %tobool = icmp ne i32 %and, 0, !dbg !8668
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8668

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !8668
  br label %cond.end, !dbg !8668

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8668
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8669
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8671
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8672
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8672
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8669
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8673

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !8674
  br label %return, !dbg !8674

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8675
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8676
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8677
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8677
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !8678
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !8678
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !8679
  br label %return, !dbg !8679

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !8680
  ret %struct.gimple_seq_d* %7, !dbg !8680
}

declare dso_local %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !8681 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !8686, metadata !DIExpression()), !dbg !8687
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8688, metadata !DIExpression()), !dbg !8687
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !8689, metadata !DIExpression()), !dbg !8687
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8690
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !8690
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8690

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8690
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8690
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !8690
  %3 = load i32, i32* %num, align 8, !dbg !8690
  %cmp = icmp ult i32 %1, %3, !dbg !8690
  br i1 %cmp, label %if.then, label %if.else, !dbg !8687

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !8692
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !8692
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8692
  %idxprom = zext i32 %5 to i64, !dbg !8692
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !8692
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8692
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !8692
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !8692
  store i32 1, i32* %retval, align 4, !dbg !8692
  br label %return, !dbg !8692

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !8694
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !8694
  store i32 0, i32* %retval, align 4, !dbg !8694
  br label %return, !dbg !8694

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8687
  ret i32 %9, !dbg !8687
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8696 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8697, metadata !DIExpression()), !dbg !8698
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8699
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8700
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !8701
  %1 = load i32, i32* %nargs, align 4, !dbg !8701
  ret i32 %1, !dbg !8702
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !8703 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8706, metadata !DIExpression()), !dbg !8707
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !8708, metadata !DIExpression()), !dbg !8709
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8710
  %1 = load i64, i64* %i.addr, align 8, !dbg !8711
  %conv = trunc i64 %1 to i32, !dbg !8711
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !8712
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !8713
  %2 = load i32, i32* %locus, align 8, !dbg !8713
  ret i32 %2, !dbg !8714
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_phi_arg_set_location(%union.gimple_statement_d* %gs, i64 %i, i32 %loc) #0 !dbg !8715 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %loc.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8718, metadata !DIExpression()), !dbg !8719
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !8720, metadata !DIExpression()), !dbg !8721
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !8722, metadata !DIExpression()), !dbg !8723
  %0 = load i32, i32* %loc.addr, align 4, !dbg !8724
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8725
  %2 = load i64, i64* %i.addr, align 8, !dbg !8726
  %conv = trunc i64 %2 to i32, !dbg !8726
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %1, i32 %conv), !dbg !8727
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !8728
  store i32 %0, i32* %locus, align 8, !dbg !8729
  ret void, !dbg !8730
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2426, !2427, !2428}
!llvm.ident = !{!2429}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "block_defs_stack", scope: !2, file: !3, line: 104, type: !2349, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !823, globals: !2354, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-into-ssa.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !403, !410, !586, !625, !629, !633, !639, !653, !660, !664, !669, !674, !797}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402}
!392 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !404, line: 104, baseType: !7, size: 32, elements: !405)
!404 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!405 = !{!406, !407, !408, !409}
!406 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!407 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!408 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!409 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!410 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !411, line: 74, baseType: !7, size: 32, elements: !412)
!411 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!412 = !{!413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585}
!413 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!585 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!586 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !587, line: 51, baseType: !7, size: 32, elements: !588)
!587 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!588 = !{!589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624}
!589 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!624 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!625 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !343, line: 912, baseType: !7, size: 32, elements: !626)
!626 = !{!627, !628}
!627 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!628 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!629 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rewrite_mode", file: !3, line: 209, baseType: !7, size: 32, elements: !630)
!630 = !{!631, !632}
!631 = !DIEnumerator(name: "REWRITE_ALL", value: 0, isUnsigned: true)
!632 = !DIEnumerator(name: "REWRITE_UPDATE", value: 1, isUnsigned: true)
!633 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "need_phi_state", file: !634, line: 128, baseType: !7, size: 32, elements: !635)
!634 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!635 = !{!636, !637, !638}
!636 = !DIEnumerator(name: "NEED_PHI_STATE_UNKNOWN", value: 0, isUnsigned: true)
!637 = !DIEnumerator(name: "NEED_PHI_STATE_NO", value: 1, isUnsigned: true)
!638 = !DIEnumerator(name: "NEED_PHI_STATE_MAYBE", value: 2, isUnsigned: true)
!639 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !343, line: 295, baseType: !7, size: 32, elements: !640)
!640 = !{!641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652}
!641 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!642 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!643 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!644 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!645 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!646 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!647 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!648 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!649 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!650 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!651 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!652 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!653 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !654, line: 119, baseType: !7, size: 32, elements: !655)
!654 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!655 = !{!656, !657, !658, !659}
!656 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!657 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!658 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!659 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!660 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plf_mask", file: !587, line: 130, baseType: !7, size: 32, elements: !661)
!661 = !{!662, !663}
!662 = !DIEnumerator(name: "GF_PLF_1", value: 1, isUnsigned: true)
!663 = !DIEnumerator(name: "GF_PLF_2", value: 2, isUnsigned: true)
!664 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !665, line: 147, baseType: !7, size: 32, elements: !666)
!665 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!666 = !{!667, !668}
!667 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!668 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!669 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !587, line: 4603, baseType: !7, size: 32, elements: !670)
!670 = !{!671, !672, !673}
!671 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!672 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!673 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!674 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !675, line: 82, baseType: !7, size: 32, elements: !676)
!675 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!676 = !{!677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796}
!677 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!698 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!719 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!720 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!724 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!725 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!726 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!727 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!728 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!729 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!730 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!731 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!732 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!733 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!734 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!735 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!736 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!737 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!738 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!739 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!740 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!741 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!742 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!743 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!744 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!745 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!746 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!747 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!748 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!749 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!750 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!751 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!752 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!753 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!754 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!755 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!760 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!761 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!762 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!763 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!764 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!765 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!766 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!767 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!768 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!769 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!770 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!771 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!772 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!773 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!774 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!775 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!776 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!777 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!778 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!779 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!780 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!781 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!782 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!783 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!784 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!785 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!786 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!787 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!788 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!789 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!790 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!791 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!792 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!793 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!794 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!795 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!796 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!797 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !587, line: 727, baseType: !7, size: 32, elements: !798)
!798 = !{!799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822}
!799 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!800 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!801 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!802 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!803 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!804 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!805 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!806 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!807 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!808 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!809 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!810 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!811 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!812 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!813 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!814 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!815 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!816 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!817 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!818 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!819 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!820 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!821 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!822 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!823 = !{!134, !824, !984, !888, !1167, !1480, !2214, !2215, !2216, !2222, !7, !943, !2235, !2286, !2293, !2297, !883, !2300, !2305, !2307, !1007, !2320, !2333, !2338, !1237, !2343, !2345, !941, !2347, !2348, !2349, !1508, !1152, !863}
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !826, line: 111, baseType: !827)
!826 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !828, size: 64)
!828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !829)
!829 = !{!830, !2181, !2182, !2183, !2184, !2188, !2189, !2190, !2208, !2209, !2210, !2211, !2212, !2213}
!830 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !828, file: !343, line: 219, baseType: !831, size: 64)
!831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !832, size: 64)
!832 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !833)
!833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !834)
!834 = !{!835}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !833, file: !343, line: 151, baseType: !836, size: 128)
!836 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !837)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !838)
!838 = !{!839, !840, !841}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !837, file: !343, line: 150, baseType: !7, size: 32)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !837, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !837, file: !343, line: 150, baseType: !842, size: 64, offset: 64)
!842 = !DICompositeType(tag: DW_TAG_array_type, baseType: !843, size: 64, elements: !988)
!843 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !826, line: 108, baseType: !844)
!844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !845, size: 64)
!845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !846)
!846 = !{!847, !848, !849, !2173, !2174, !2175, !2176, !2177, !2178, !2179}
!847 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !845, file: !343, line: 124, baseType: !827, size: 64)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !845, file: !343, line: 125, baseType: !827, size: 64, offset: 64)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !845, file: !343, line: 131, baseType: !850, size: 64, offset: 128)
!850 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !851)
!851 = !{!852, !2172}
!852 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !850, file: !343, line: 129, baseType: !853, size: 64)
!853 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !826, line: 66, baseType: !854)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !855, size: 64)
!855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !587, line: 143, size: 192, elements: !856)
!856 = !{!857, !2170, !2171}
!857 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !855, file: !587, line: 145, baseType: !858, size: 64)
!858 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !826, line: 69, baseType: !859)
!859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !860, size: 64)
!860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !587, line: 136, size: 192, elements: !861)
!861 = !{!862, !2168, !2169}
!862 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !860, file: !587, line: 137, baseType: !863, size: 64)
!863 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !826, line: 58, baseType: !864)
!864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !865, size: 64)
!865 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !587, line: 737, size: 768, elements: !866)
!866 = !{!867, !2015, !2025, !2031, !2036, !2041, !2048, !2054, !2060, !2065, !2079, !2084, !2090, !2095, !2105, !2110, !2126, !2133, !2140, !2146, !2151, !2157, !2163}
!867 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !865, file: !587, line: 738, baseType: !868, size: 256)
!868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !587, line: 271, size: 256, elements: !869)
!869 = !{!870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !885, !886, !887}
!870 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !868, file: !587, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !868, file: !587, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !868, file: !587, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !868, file: !587, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !868, file: !587, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !868, file: !587, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !868, file: !587, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !868, file: !587, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !868, file: !587, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !868, file: !587, line: 312, baseType: !7, size: 32, offset: 32)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !868, file: !587, line: 316, baseType: !881, size: 32, offset: 64)
!881 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !882, line: 58, baseType: !883)
!882 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!883 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !884, line: 44, baseType: !7)
!884 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!885 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !868, file: !587, line: 319, baseType: !7, size: 32, offset: 96)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !868, file: !587, line: 323, baseType: !827, size: 64, offset: 128)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !868, file: !587, line: 327, baseType: !888, size: 64, offset: 192)
!888 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !826, line: 56, baseType: !889)
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !890, size: 64)
!890 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !891)
!891 = !{!892, !925, !931, !944, !963, !974, !979, !990, !996, !1010, !1018, !1056, !1268, !1296, !1312, !1313, !1318, !1327, !1333, !1338, !1342, !1346, !1666, !1713, !1719, !1725, !1732, !1745, !1759, !1776, !1788, !1810, !1825, !1997}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !890, file: !135, line: 3372, baseType: !893, size: 64)
!893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !894)
!894 = !{!895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924}
!895 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !893, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !893, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !893, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !893, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !893, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !893, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !893, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !893, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !893, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !893, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !893, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !893, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !893, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !893, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !893, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !893, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !893, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !893, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !893, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !893, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !893, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !893, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !893, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !893, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !893, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !893, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !893, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !893, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !893, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !893, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !890, file: !135, line: 3373, baseType: !926, size: 192)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !927)
!927 = !{!928, !929, !930}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !926, file: !135, line: 403, baseType: !893, size: 64)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !926, file: !135, line: 404, baseType: !888, size: 64, offset: 64)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !926, file: !135, line: 405, baseType: !888, size: 64, offset: 128)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !890, file: !135, line: 3374, baseType: !932, size: 320)
!932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !933)
!933 = !{!934, !935}
!934 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !932, file: !135, line: 1385, baseType: !926, size: 192)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !932, file: !135, line: 1386, baseType: !936, size: 128, offset: 192)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !937, line: 58, baseType: !938)
!937 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !937, line: 54, size: 128, elements: !939)
!939 = !{!940, !942}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !938, file: !937, line: 56, baseType: !941, size: 64)
!941 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !938, file: !937, line: 57, baseType: !943, size: 64, offset: 64)
!943 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !890, file: !135, line: 3375, baseType: !945, size: 256)
!945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !946)
!946 = !{!947, !948}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !945, file: !135, line: 1398, baseType: !926, size: 192)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !945, file: !135, line: 1399, baseType: !949, size: 64, offset: 192)
!949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !950, size: 64)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !951, line: 52, size: 256, elements: !952)
!951 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!952 = !{!953, !954, !955, !956, !957, !958, !959}
!953 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !950, file: !951, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !950, file: !951, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !950, file: !951, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !950, file: !951, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !950, file: !951, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !950, file: !951, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !950, file: !951, line: 62, baseType: !960, size: 192, offset: 64)
!960 = !DICompositeType(tag: DW_TAG_array_type, baseType: !941, size: 192, elements: !961)
!961 = !{!962}
!962 = !DISubrange(count: 3)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !890, file: !135, line: 3376, baseType: !964, size: 256)
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !965)
!965 = !{!966, !967}
!966 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !964, file: !135, line: 1409, baseType: !926, size: 192)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !964, file: !135, line: 1410, baseType: !968, size: 64, offset: 192)
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64)
!969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !970, line: 27, size: 192, elements: !971)
!970 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!971 = !{!972, !973}
!972 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !969, file: !970, line: 29, baseType: !936, size: 128)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !969, file: !970, line: 30, baseType: !5, size: 32, offset: 128)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !890, file: !135, line: 3377, baseType: !975, size: 256)
!975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !976)
!976 = !{!977, !978}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !975, file: !135, line: 1438, baseType: !926, size: 192)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !975, file: !135, line: 1439, baseType: !888, size: 64, offset: 192)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !890, file: !135, line: 3378, baseType: !980, size: 256)
!980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !981)
!981 = !{!982, !983, !985}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !980, file: !135, line: 1419, baseType: !926, size: 192)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !980, file: !135, line: 1420, baseType: !984, size: 32, offset: 192)
!984 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !980, file: !135, line: 1421, baseType: !986, size: 8, offset: 224)
!986 = !DICompositeType(tag: DW_TAG_array_type, baseType: !987, size: 8, elements: !988)
!987 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!988 = !{!989}
!989 = !DISubrange(count: 1)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !890, file: !135, line: 3379, baseType: !991, size: 320)
!991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !992)
!992 = !{!993, !994, !995}
!993 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !991, file: !135, line: 1429, baseType: !926, size: 192)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !991, file: !135, line: 1430, baseType: !888, size: 64, offset: 192)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !991, file: !135, line: 1431, baseType: !888, size: 64, offset: 256)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !890, file: !135, line: 3380, baseType: !997, size: 320)
!997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !998)
!998 = !{!999, !1000}
!999 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !997, file: !135, line: 1461, baseType: !926, size: 192)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !997, file: !135, line: 1462, baseType: !1001, size: 128, offset: 192)
!1001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1002, line: 31, size: 128, elements: !1003)
!1002 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1003 = !{!1004, !1008, !1009}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1001, file: !1002, line: 32, baseType: !1005, size: 64)
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!1006 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1007)
!1007 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1001, file: !1002, line: 33, baseType: !7, size: 32, offset: 64)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1001, file: !1002, line: 34, baseType: !7, size: 32, offset: 96)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !890, file: !135, line: 3381, baseType: !1011, size: 384)
!1011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1012)
!1012 = !{!1013, !1014, !1015, !1016, !1017}
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1011, file: !135, line: 2508, baseType: !926, size: 192)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1011, file: !135, line: 2509, baseType: !881, size: 32, offset: 192)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1011, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1011, file: !135, line: 2511, baseType: !888, size: 64, offset: 256)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1011, file: !135, line: 2512, baseType: !888, size: 64, offset: 320)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !890, file: !135, line: 3382, baseType: !1019, size: 896)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1020)
!1020 = !{!1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1019, file: !135, line: 2653, baseType: !1011, size: 384)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1019, file: !135, line: 2654, baseType: !888, size: 64, offset: 384)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1019, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1019, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1019, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1019, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1019, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1019, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1019, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1019, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1019, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1019, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1019, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1019, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1019, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1019, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1019, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1019, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1019, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1019, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1019, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1019, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1019, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1019, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1019, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1019, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1019, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1019, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1019, file: !135, line: 2705, baseType: !888, size: 64, offset: 576)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1019, file: !135, line: 2706, baseType: !888, size: 64, offset: 640)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1019, file: !135, line: 2707, baseType: !888, size: 64, offset: 704)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1019, file: !135, line: 2708, baseType: !888, size: 64, offset: 768)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1019, file: !135, line: 2711, baseType: !1054, size: 64, offset: 832)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !890, file: !135, line: 3383, baseType: !1057, size: 960)
!1057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1058)
!1058 = !{!1059, !1060}
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1057, file: !135, line: 2757, baseType: !1019, size: 896)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1057, file: !135, line: 2758, baseType: !1061, size: 64, offset: 896)
!1061 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !826, line: 50, baseType: !1062)
!1062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1063, size: 64)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1064, line: 240, size: 384, elements: !1065)
!1064 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1065 = !{!1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1063, file: !1064, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1063, file: !1064, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1063, file: !1064, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1063, file: !1064, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1063, file: !1064, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1063, file: !1064, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1063, file: !1064, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1063, file: !1064, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1063, file: !1064, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1063, file: !1064, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1063, file: !1064, line: 321, baseType: !1077, size: 320, offset: 64)
!1077 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1064, line: 315, size: 320, elements: !1078)
!1078 = !{!1079, !1201, !1203, !1266, !1267}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1077, file: !1064, line: 316, baseType: !1080, size: 64)
!1080 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1081, size: 64, elements: !988)
!1081 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1064, line: 183, baseType: !1082)
!1082 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1064, line: 166, size: 64, elements: !1083)
!1083 = !{!1084, !1085, !1086, !1089, !1090, !1098, !1099, !1111, !1114, !1176, !1177, !1178, !1191, !1198}
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1082, file: !1064, line: 168, baseType: !984, size: 32)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1082, file: !1064, line: 169, baseType: !7, size: 32)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1082, file: !1064, line: 170, baseType: !1087, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1088 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !987)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1082, file: !1064, line: 171, baseType: !1061, size: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1082, file: !1064, line: 172, baseType: !1091, size: 64)
!1091 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !826, line: 53, baseType: !1092)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1064, line: 359, size: 128, elements: !1094)
!1094 = !{!1095, !1096}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1093, file: !1064, line: 360, baseType: !984, size: 32)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1093, file: !1064, line: 361, baseType: !1097, size: 64, offset: 64)
!1097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1061, size: 64, elements: !988)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1082, file: !1064, line: 173, baseType: !5, size: 32)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1082, file: !1064, line: 174, baseType: !1100, size: 32)
!1100 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1064, line: 133, baseType: !1101)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1064, line: 115, size: 32, elements: !1102)
!1102 = !{!1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1101, file: !1064, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1101, file: !1064, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1101, file: !1064, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1101, file: !1064, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1101, file: !1064, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1101, file: !1064, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1101, file: !1064, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1101, file: !1064, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1082, file: !1064, line: 175, baseType: !1112, size: 64)
!1112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64)
!1113 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1064, line: 175, flags: DIFlagFwdDecl)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1082, file: !1064, line: 176, baseType: !1115, size: 64)
!1115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1116, size: 64)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1117, line: 75, size: 256, elements: !1118)
!1117 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1118 = !{!1119, !1133, !1134, !1135}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1116, file: !1117, line: 76, baseType: !1120, size: 64)
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1121, size: 64)
!1121 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1117, line: 68, baseType: !1122)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1117, line: 63, size: 320, elements: !1123)
!1123 = !{!1124, !1126, !1127, !1128}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1122, file: !1117, line: 64, baseType: !1125, size: 64)
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1122, file: !1117, line: 65, baseType: !1125, size: 64, offset: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1122, file: !1117, line: 66, baseType: !7, size: 32, offset: 128)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1122, file: !1117, line: 67, baseType: !1129, size: 128, offset: 192)
!1129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1130, size: 128, elements: !1131)
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1117, line: 29, baseType: !941)
!1131 = !{!1132}
!1132 = !DISubrange(count: 2)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1116, file: !1117, line: 77, baseType: !1120, size: 64, offset: 64)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1116, file: !1117, line: 78, baseType: !7, size: 32, offset: 128)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1116, file: !1117, line: 79, baseType: !1136, size: 64, offset: 192)
!1136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1137, size: 64)
!1137 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1117, line: 49, baseType: !1138)
!1138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1117, line: 45, size: 832, elements: !1139)
!1139 = !{!1140, !1141, !1142}
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1138, file: !1117, line: 46, baseType: !1125, size: 64)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1138, file: !1117, line: 47, baseType: !1115, size: 64, offset: 64)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1138, file: !1117, line: 48, baseType: !1143, size: 704, offset: 128)
!1143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1144, line: 164, size: 704, elements: !1145)
!1144 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1145 = !{!1146, !1147, !1158, !1159, !1160, !1161, !1162, !1163, !1168, !1172, !1173, !1174, !1175}
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1143, file: !1144, line: 166, baseType: !943, size: 64)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1143, file: !1144, line: 167, baseType: !1148, size: 64, offset: 64)
!1148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1149, size: 64)
!1149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1144, line: 157, size: 192, elements: !1150)
!1150 = !{!1151, !1153, !1154}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1149, file: !1144, line: 159, baseType: !1152, size: 64)
!1152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !987, size: 64)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1149, file: !1144, line: 160, baseType: !1148, size: 64, offset: 64)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1149, file: !1144, line: 161, baseType: !1155, size: 32, offset: 128)
!1155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !987, size: 32, elements: !1156)
!1156 = !{!1157}
!1157 = !DISubrange(count: 4)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1143, file: !1144, line: 168, baseType: !1152, size: 64, offset: 128)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1143, file: !1144, line: 169, baseType: !1152, size: 64, offset: 192)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1143, file: !1144, line: 170, baseType: !1152, size: 64, offset: 256)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1143, file: !1144, line: 171, baseType: !943, size: 64, offset: 320)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1143, file: !1144, line: 172, baseType: !984, size: 32, offset: 384)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1143, file: !1144, line: 176, baseType: !1164, size: 64, offset: 448)
!1164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1165, size: 64)
!1165 = !DISubroutineType(types: !1166)
!1166 = !{!1148, !1167, !943}
!1167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1143, file: !1144, line: 177, baseType: !1169, size: 64, offset: 512)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{null, !1167, !1148}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1143, file: !1144, line: 178, baseType: !1167, size: 64, offset: 576)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1143, file: !1144, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1143, file: !1144, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1143, file: !1144, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1082, file: !1064, line: 177, baseType: !888, size: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1082, file: !1064, line: 178, baseType: !827, size: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1082, file: !1064, line: 179, baseType: !1179, size: 64)
!1179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1180, size: 64)
!1180 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1064, line: 150, baseType: !1181)
!1181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1064, line: 142, size: 320, elements: !1182)
!1182 = !{!1183, !1184, !1185, !1186, !1189, !1190}
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1181, file: !1064, line: 144, baseType: !888, size: 64)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1181, file: !1064, line: 145, baseType: !1061, size: 64, offset: 64)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1181, file: !1064, line: 146, baseType: !1061, size: 64, offset: 128)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1181, file: !1064, line: 147, baseType: !1187, size: 32, offset: 192)
!1187 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1188, line: 31, baseType: !984)
!1188 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1181, file: !1064, line: 148, baseType: !7, size: 32, offset: 224)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1181, file: !1064, line: 149, baseType: !1007, size: 8, offset: 256)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1082, file: !1064, line: 180, baseType: !1192, size: 64)
!1192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1193, size: 64)
!1193 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1064, line: 162, baseType: !1194)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1064, line: 159, size: 128, elements: !1195)
!1195 = !{!1196, !1197}
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1194, file: !1064, line: 160, baseType: !888, size: 64)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1194, file: !1064, line: 161, baseType: !943, size: 64, offset: 64)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1082, file: !1064, line: 181, baseType: !1199, size: 64)
!1199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1200, size: 64)
!1200 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1064, line: 181, flags: DIFlagFwdDecl)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1077, file: !1064, line: 317, baseType: !1202, size: 64)
!1202 = !DICompositeType(tag: DW_TAG_array_type, baseType: !943, size: 64, elements: !988)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1077, file: !1064, line: 318, baseType: !1204, size: 320)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1064, line: 188, size: 320, elements: !1205)
!1205 = !{!1206, !1208, !1265}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1204, file: !1064, line: 190, baseType: !1207, size: 192)
!1207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1081, size: 192, elements: !961)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1204, file: !1064, line: 193, baseType: !1209, size: 64, offset: 192)
!1209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1210, size: 64)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1064, line: 206, size: 320, elements: !1211)
!1211 = !{!1212, !1250, !1251, !1252, !1264}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1210, file: !1064, line: 208, baseType: !1213, size: 64)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1214, size: 64)
!1214 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !826, line: 62, baseType: !1215)
!1215 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1216, line: 538, size: 256, elements: !1217)
!1216 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1217 = !{!1218, !1222, !1228, !1241}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1215, file: !1216, line: 539, baseType: !1219, size: 32)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1216, line: 482, size: 32, elements: !1220)
!1220 = !{!1221}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1219, file: !1216, line: 484, baseType: !7, size: 32)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1215, file: !1216, line: 540, baseType: !1223, size: 192)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1216, line: 488, size: 192, elements: !1224)
!1224 = !{!1225, !1226, !1227}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1223, file: !1216, line: 489, baseType: !1219, size: 32)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1223, file: !1216, line: 492, baseType: !1087, size: 64, offset: 64)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1223, file: !1216, line: 496, baseType: !888, size: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1215, file: !1216, line: 541, baseType: !1229, size: 256)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1216, line: 504, size: 256, elements: !1230)
!1230 = !{!1231, !1232, !1239, !1240}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1229, file: !1216, line: 505, baseType: !1219, size: 32)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1229, file: !1216, line: 509, baseType: !1233, size: 64, offset: 64)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1216, line: 501, baseType: !1234)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DISubroutineType(types: !1236)
!1236 = !{null, !1237}
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1238, size: 64)
!1238 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1229, file: !1216, line: 510, baseType: !1237, size: 64, offset: 128)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1229, file: !1216, line: 513, baseType: !1213, size: 64, offset: 192)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1215, file: !1216, line: 542, baseType: !1242, size: 128)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1216, line: 530, size: 128, elements: !1243)
!1243 = !{!1244, !1245}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1242, file: !1216, line: 531, baseType: !1219, size: 32)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1242, file: !1216, line: 534, baseType: !1246, size: 64, offset: 64)
!1246 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1216, line: 525, baseType: !1247)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = !DISubroutineType(types: !1249)
!1249 = !{!1007, !888, !1087, !941, !941}
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1210, file: !1064, line: 211, baseType: !7, size: 32, offset: 64)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1210, file: !1064, line: 214, baseType: !943, size: 64, offset: 128)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1210, file: !1064, line: 224, baseType: !1253, size: 64, offset: 192)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1064, line: 202, baseType: !1255)
!1255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1064, line: 202, size: 128, elements: !1256)
!1256 = !{!1257}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1255, file: !1064, line: 202, baseType: !1258, size: 128)
!1258 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1064, line: 200, baseType: !1259)
!1259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1064, line: 200, size: 128, elements: !1260)
!1260 = !{!1261, !1262, !1263}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1259, file: !1064, line: 200, baseType: !7, size: 32)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1259, file: !1064, line: 200, baseType: !7, size: 32, offset: 32)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1259, file: !1064, line: 200, baseType: !1097, size: 64, offset: 64)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1210, file: !1064, line: 234, baseType: !1253, size: 64, offset: 256)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1204, file: !1064, line: 197, baseType: !943, size: 64, offset: 256)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1077, file: !1064, line: 319, baseType: !950, size: 256)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1077, file: !1064, line: 320, baseType: !969, size: 192)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !890, file: !135, line: 3384, baseType: !1269, size: 1472)
!1269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1270)
!1270 = !{!1271, !1292, !1293, !1294, !1295}
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1269, file: !135, line: 3115, baseType: !1272, size: 1216)
!1272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1273)
!1273 = !{!1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1272, file: !135, line: 2985, baseType: !1057, size: 960)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1272, file: !135, line: 2986, baseType: !888, size: 64, offset: 960)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1272, file: !135, line: 2987, baseType: !888, size: 64, offset: 1024)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1272, file: !135, line: 2988, baseType: !888, size: 64, offset: 1088)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1272, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1272, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1272, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1272, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1272, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1272, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1272, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1272, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1272, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1272, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1272, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1272, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1272, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1272, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1269, file: !135, line: 3117, baseType: !888, size: 64, offset: 1216)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1269, file: !135, line: 3119, baseType: !888, size: 64, offset: 1280)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1269, file: !135, line: 3121, baseType: !888, size: 64, offset: 1344)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1269, file: !135, line: 3123, baseType: !888, size: 64, offset: 1408)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !890, file: !135, line: 3385, baseType: !1297, size: 1088)
!1297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1298)
!1298 = !{!1299, !1300, !1301}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1297, file: !135, line: 2875, baseType: !1057, size: 960)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1297, file: !135, line: 2876, baseType: !1061, size: 64, offset: 960)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1297, file: !135, line: 2877, baseType: !1302, size: 64, offset: 1024)
!1302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1303, size: 64)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !634, line: 172, size: 128, elements: !1304)
!1304 = !{!1305, !1306, !1307, !1308, !1309, !1310, !1311}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1303, file: !634, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1303, file: !634, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1303, file: !634, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1303, file: !634, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1303, file: !634, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1303, file: !634, line: 195, baseType: !7, size: 32, offset: 32)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1303, file: !634, line: 199, baseType: !888, size: 64, offset: 64)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !890, file: !135, line: 3386, baseType: !1272, size: 1216)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !890, file: !135, line: 3387, baseType: !1314, size: 1280)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1315)
!1315 = !{!1316, !1317}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1314, file: !135, line: 3094, baseType: !1272, size: 1216)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1314, file: !135, line: 3095, baseType: !1302, size: 64, offset: 1216)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !890, file: !135, line: 3388, baseType: !1319, size: 1216)
!1319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1320)
!1320 = !{!1321, !1322, !1323, !1324, !1325, !1326}
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1319, file: !135, line: 2825, baseType: !1019, size: 896)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1319, file: !135, line: 2827, baseType: !888, size: 64, offset: 896)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1319, file: !135, line: 2828, baseType: !888, size: 64, offset: 960)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1319, file: !135, line: 2829, baseType: !888, size: 64, offset: 1024)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1319, file: !135, line: 2830, baseType: !888, size: 64, offset: 1088)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1319, file: !135, line: 2831, baseType: !888, size: 64, offset: 1152)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !890, file: !135, line: 3389, baseType: !1328, size: 1024)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1329)
!1329 = !{!1330, !1331, !1332}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1328, file: !135, line: 2851, baseType: !1057, size: 960)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1328, file: !135, line: 2852, baseType: !984, size: 32, offset: 960)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1328, file: !135, line: 2853, baseType: !984, size: 32, offset: 992)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !890, file: !135, line: 3390, baseType: !1334, size: 1024)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1335)
!1335 = !{!1336, !1337}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1334, file: !135, line: 2858, baseType: !1057, size: 960)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1334, file: !135, line: 2859, baseType: !1302, size: 64, offset: 960)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !890, file: !135, line: 3391, baseType: !1339, size: 960)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1340)
!1340 = !{!1341}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1339, file: !135, line: 2863, baseType: !1057, size: 960)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !890, file: !135, line: 3392, baseType: !1343, size: 1472)
!1343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1344)
!1344 = !{!1345}
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1343, file: !135, line: 3305, baseType: !1269, size: 1472)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !890, file: !135, line: 3393, baseType: !1347, size: 1792)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1348)
!1348 = !{!1349, !1350, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1347, file: !135, line: 3249, baseType: !1269, size: 1472)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1347, file: !135, line: 3251, baseType: !1351, size: 64, offset: 1472)
!1351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1352, size: 64)
!1352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1353, line: 463, size: 1152, elements: !1354)
!1353 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1354 = !{!1355, !1358, !1388, !1389, !1526, !1589, !1590, !1591, !1592, !1593, !1594, !1618, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1352, file: !1353, line: 464, baseType: !1356, size: 64)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1353, line: 464, flags: DIFlagFwdDecl)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1352, file: !1353, line: 467, baseType: !1359, size: 64, offset: 64)
!1359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !1361)
!1361 = !{!1362, !1363, !1364, !1377, !1378, !1379, !1380, !1381, !1382, !1384, !1386, !1387}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1360, file: !343, line: 377, baseType: !825, size: 64)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1360, file: !343, line: 378, baseType: !825, size: 64, offset: 64)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1360, file: !343, line: 381, baseType: !1365, size: 64, offset: 128)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!1366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !1367)
!1367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !1368)
!1368 = !{!1369}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1367, file: !343, line: 282, baseType: !1370, size: 128)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !1371)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !1372)
!1372 = !{!1373, !1374, !1375}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1371, file: !343, line: 281, baseType: !7, size: 32)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1371, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1371, file: !343, line: 281, baseType: !1376, size: 64, offset: 64)
!1376 = !DICompositeType(tag: DW_TAG_array_type, baseType: !825, size: 64, elements: !988)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1360, file: !343, line: 384, baseType: !984, size: 32, offset: 192)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1360, file: !343, line: 387, baseType: !984, size: 32, offset: 224)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1360, file: !343, line: 390, baseType: !984, size: 32, offset: 256)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1360, file: !343, line: 394, baseType: !1365, size: 64, offset: 320)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1360, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1360, file: !343, line: 399, baseType: !1383, size: 64, offset: 416)
!1383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !1131)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1360, file: !343, line: 402, baseType: !1385, size: 64, offset: 480)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1131)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1360, file: !343, line: 406, baseType: !984, size: 32, offset: 544)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1360, file: !343, line: 409, baseType: !984, size: 32, offset: 576)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1352, file: !1353, line: 470, baseType: !854, size: 64, offset: 128)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1352, file: !1353, line: 473, baseType: !1390, size: 64, offset: 192)
!1390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1391, size: 64)
!1391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !634, line: 39, size: 1152, elements: !1392)
!1392 = !{!1393, !1442, !1455, !1468, !1469, !1481, !1482, !1486, !1487, !1488, !1489, !1490}
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1391, file: !634, line: 41, baseType: !1394, size: 64)
!1394 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !665, line: 144, baseType: !1395)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !665, line: 100, size: 896, elements: !1397)
!1397 = !{!1398, !1404, !1409, !1414, !1416, !1419, !1420, !1421, !1422, !1423, !1428, !1430, !1431, !1436, !1441}
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1396, file: !665, line: 102, baseType: !1399, size: 64)
!1399 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !665, line: 52, baseType: !1400)
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1401, size: 64)
!1401 = !DISubroutineType(types: !1402)
!1402 = !{!1403, !1237}
!1403 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !665, line: 47, baseType: !7)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1396, file: !665, line: 105, baseType: !1405, size: 64, offset: 64)
!1405 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !665, line: 59, baseType: !1406)
!1406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1407, size: 64)
!1407 = !DISubroutineType(types: !1408)
!1408 = !{!984, !1237, !1237}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1396, file: !665, line: 108, baseType: !1410, size: 64, offset: 128)
!1410 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !665, line: 63, baseType: !1411)
!1411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1412, size: 64)
!1412 = !DISubroutineType(types: !1413)
!1413 = !{null, !1167}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1396, file: !665, line: 111, baseType: !1415, size: 64, offset: 192)
!1415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1167, size: 64)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1396, file: !665, line: 114, baseType: !1417, size: 64, offset: 256)
!1417 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1418, line: 46, baseType: !941)
!1418 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1396, file: !665, line: 117, baseType: !1417, size: 64, offset: 320)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1396, file: !665, line: 120, baseType: !1417, size: 64, offset: 384)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1396, file: !665, line: 124, baseType: !7, size: 32, offset: 448)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1396, file: !665, line: 128, baseType: !7, size: 32, offset: 480)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1396, file: !665, line: 131, baseType: !1424, size: 64, offset: 512)
!1424 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !665, line: 75, baseType: !1425)
!1425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1426, size: 64)
!1426 = !DISubroutineType(types: !1427)
!1427 = !{!1167, !1417, !1417}
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1396, file: !665, line: 132, baseType: !1429, size: 64, offset: 576)
!1429 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !665, line: 78, baseType: !1411)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1396, file: !665, line: 135, baseType: !1167, size: 64, offset: 640)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1396, file: !665, line: 136, baseType: !1432, size: 64, offset: 704)
!1432 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !665, line: 82, baseType: !1433)
!1433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1434, size: 64)
!1434 = !DISubroutineType(types: !1435)
!1435 = !{!1167, !1167, !1417, !1417}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1396, file: !665, line: 137, baseType: !1437, size: 64, offset: 768)
!1437 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !665, line: 83, baseType: !1438)
!1438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1439, size: 64)
!1439 = !DISubroutineType(types: !1440)
!1440 = !{null, !1167, !1167}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1396, file: !665, line: 141, baseType: !7, size: 32, offset: 832)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1391, file: !634, line: 48, baseType: !1443, size: 64, offset: 64)
!1443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1444, size: 64)
!1444 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !587, line: 35, baseType: !1445)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !587, line: 35, size: 128, elements: !1446)
!1446 = !{!1447}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1445, file: !587, line: 35, baseType: !1448, size: 128)
!1448 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !587, line: 33, baseType: !1449)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !587, line: 33, size: 128, elements: !1450)
!1450 = !{!1451, !1452, !1453}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1449, file: !587, line: 33, baseType: !7, size: 32)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1449, file: !587, line: 33, baseType: !7, size: 32, offset: 32)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1449, file: !587, line: 33, baseType: !1454, size: 64, offset: 64)
!1454 = !DICompositeType(tag: DW_TAG_array_type, baseType: !863, size: 64, elements: !988)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1391, file: !634, line: 51, baseType: !1456, size: 64, offset: 128)
!1456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1457, size: 64)
!1457 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1458)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1459)
!1459 = !{!1460}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1458, file: !135, line: 183, baseType: !1461, size: 128)
!1461 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1462)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1463)
!1463 = !{!1464, !1465, !1466}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1462, file: !135, line: 182, baseType: !7, size: 32)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1462, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1462, file: !135, line: 182, baseType: !1467, size: 64, offset: 64)
!1467 = !DICompositeType(tag: DW_TAG_array_type, baseType: !888, size: 64, elements: !988)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1391, file: !634, line: 54, baseType: !888, size: 64, offset: 192)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1391, file: !634, line: 57, baseType: !1470, size: 128, offset: 256)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1471, line: 31, size: 128, elements: !1472)
!1471 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1472 = !{!1473, !1474, !1475, !1476, !1477, !1478, !1479}
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1470, file: !1471, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1470, file: !1471, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1470, file: !1471, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1470, file: !1471, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1470, file: !1471, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1470, file: !1471, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1470, file: !1471, line: 56, baseType: !1480, size: 64, offset: 64)
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !826, line: 47, baseType: !1115)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1391, file: !634, line: 60, baseType: !1470, size: 128, offset: 384)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1391, file: !634, line: 64, baseType: !1483, size: 64, offset: 512)
!1483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1484, size: 64)
!1484 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1485, line: 33, flags: DIFlagFwdDecl)
!1485 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1391, file: !634, line: 67, baseType: !888, size: 64, offset: 576)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1391, file: !634, line: 73, baseType: !1394, size: 64, offset: 640)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1391, file: !634, line: 77, baseType: !1480, size: 64, offset: 704)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1391, file: !634, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1391, file: !634, line: 82, baseType: !1491, size: 320, offset: 832)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !654, line: 62, size: 320, elements: !1492)
!1492 = !{!1493, !1499, !1500, !1501, !1502, !1509}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1491, file: !654, line: 63, baseType: !1494, size: 64)
!1494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1495, size: 64)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !654, line: 56, size: 128, elements: !1496)
!1496 = !{!1497, !1498}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1495, file: !654, line: 57, baseType: !1494, size: 64)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1495, file: !654, line: 58, baseType: !986, size: 8, offset: 64)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1491, file: !654, line: 64, baseType: !7, size: 32, offset: 64)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1491, file: !654, line: 66, baseType: !7, size: 32, offset: 96)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1491, file: !654, line: 68, baseType: !1007, size: 8, offset: 128)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1491, file: !654, line: 70, baseType: !1503, size: 64, offset: 192)
!1503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1504, size: 64)
!1504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !654, line: 37, size: 128, elements: !1505)
!1505 = !{!1506, !1507}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1504, file: !654, line: 39, baseType: !1503, size: 64)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1504, file: !654, line: 40, baseType: !1508, size: 64, offset: 64)
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !888, size: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1491, file: !654, line: 71, baseType: !1510, size: 64, offset: 256)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !654, line: 45, size: 320, elements: !1512)
!1512 = !{!1513, !1514}
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1511, file: !654, line: 47, baseType: !1510, size: 64)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1511, file: !654, line: 48, baseType: !1515, size: 256, offset: 64)
!1515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1516)
!1516 = !{!1517, !1519, !1520, !1525}
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1515, file: !135, line: 1884, baseType: !1518, size: 64)
!1518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1515, size: 64)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1515, file: !135, line: 1885, baseType: !1518, size: 64, offset: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1515, file: !135, line: 1891, baseType: !1521, size: 64, offset: 128)
!1521 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1515, file: !135, line: 1891, size: 64, elements: !1522)
!1522 = !{!1523, !1524}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1521, file: !135, line: 1891, baseType: !863, size: 64)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1521, file: !135, line: 1891, baseType: !888, size: 64)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1515, file: !135, line: 1892, baseType: !1508, size: 64, offset: 192)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1352, file: !1353, line: 476, baseType: !1527, size: 64, offset: 256)
!1527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1528, size: 64)
!1528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !1529)
!1529 = !{!1530, !1531, !1587, !1588}
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1528, file: !330, line: 189, baseType: !984, size: 32)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1528, file: !330, line: 192, baseType: !1532, size: 64, offset: 64)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1534)
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1535)
!1535 = !{!1536}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1534, file: !330, line: 87, baseType: !1537, size: 128)
!1537 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1538)
!1538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1539)
!1539 = !{!1540, !1541, !1542}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1538, file: !330, line: 85, baseType: !7, size: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1538, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1538, file: !330, line: 85, baseType: !1543, size: 64, offset: 64)
!1543 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1544, size: 64, elements: !988)
!1544 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1545)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1547)
!1547 = !{!1548, !1549, !1550, !1551, !1552, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1577, !1585, !1586}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1546, file: !330, line: 102, baseType: !984, size: 32)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1546, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1546, file: !330, line: 108, baseType: !827, size: 64, offset: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1546, file: !330, line: 111, baseType: !827, size: 64, offset: 128)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1546, file: !330, line: 114, baseType: !1553, size: 64, offset: 192)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1554)
!1554 = !{!1555, !1556}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1553, file: !330, line: 42, baseType: !329, size: 32)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1553, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1546, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1546, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1546, file: !330, line: 123, baseType: !1532, size: 64, offset: 320)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1546, file: !330, line: 126, baseType: !1545, size: 64, offset: 384)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1546, file: !330, line: 129, baseType: !1545, size: 64, offset: 448)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1546, file: !330, line: 132, baseType: !1167, size: 64, offset: 512)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1546, file: !330, line: 139, baseType: !888, size: 64, offset: 576)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1546, file: !330, line: 143, baseType: !936, size: 128, offset: 640)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1546, file: !330, line: 146, baseType: !936, size: 128, offset: 768)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1546, file: !330, line: 148, baseType: !1007, size: 8, offset: 896)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1546, file: !330, line: 149, baseType: !1007, size: 8, offset: 904)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1546, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1546, file: !330, line: 156, baseType: !1570, size: 64, offset: 960)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1572)
!1572 = !{!1573, !1574, !1575, !1576}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1571, file: !330, line: 50, baseType: !863, size: 64)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1571, file: !330, line: 59, baseType: !936, size: 128, offset: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1571, file: !330, line: 64, baseType: !1007, size: 8, offset: 192)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1571, file: !330, line: 67, baseType: !1570, size: 64, offset: 256)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1546, file: !330, line: 159, baseType: !1578, size: 64, offset: 1024)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1580)
!1580 = !{!1581, !1582, !1583, !1584}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1579, file: !330, line: 74, baseType: !844, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1579, file: !330, line: 77, baseType: !1578, size: 64, offset: 64)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1579, file: !330, line: 78, baseType: !1578, size: 64, offset: 128)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1579, file: !330, line: 81, baseType: !1578, size: 64, offset: 192)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1546, file: !330, line: 162, baseType: !1007, size: 8, offset: 1088)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1546, file: !330, line: 166, baseType: !888, size: 64, offset: 1152)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1528, file: !330, line: 197, baseType: !1394, size: 64, offset: 128)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1528, file: !330, line: 200, baseType: !1545, size: 64, offset: 192)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1352, file: !1353, line: 479, baseType: !1394, size: 64, offset: 320)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1352, file: !1353, line: 484, baseType: !888, size: 64, offset: 384)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1352, file: !1353, line: 488, baseType: !888, size: 64, offset: 448)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1352, file: !1353, line: 493, baseType: !888, size: 64, offset: 512)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1352, file: !1353, line: 496, baseType: !888, size: 64, offset: 576)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1352, file: !1353, line: 501, baseType: !1595, size: 64, offset: 640)
!1595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1596, size: 64)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !1597)
!1597 = !{!1598, !1601, !1602, !1603, !1604, !1606, !1607, !1612, !1613, !1614, !1615, !1616, !1617}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1596, file: !354, line: 2356, baseType: !1599, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1596, file: !354, line: 2357, baseType: !1087, size: 64, offset: 64)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1596, file: !354, line: 2358, baseType: !984, size: 32, offset: 128)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1596, file: !354, line: 2359, baseType: !984, size: 32, offset: 160)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1596, file: !354, line: 2360, baseType: !1605, size: 128, offset: 192)
!1605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !984, size: 128, elements: !1156)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1596, file: !354, line: 2364, baseType: !984, size: 32, offset: 320)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1596, file: !354, line: 2367, baseType: !1608, size: 128, offset: 384)
!1608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !1609)
!1609 = !{!1610, !1611}
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1608, file: !354, line: 2351, baseType: !1061, size: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1608, file: !354, line: 2352, baseType: !943, size: 64, offset: 64)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1596, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1596, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1596, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1596, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1596, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1596, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1352, file: !1353, line: 504, baseType: !1619, size: 64, offset: 704)
!1619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1620, size: 64)
!1620 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1353, line: 504, flags: DIFlagFwdDecl)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1352, file: !1353, line: 507, baseType: !1394, size: 64, offset: 768)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1352, file: !1353, line: 510, baseType: !984, size: 32, offset: 832)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1352, file: !1353, line: 513, baseType: !984, size: 32, offset: 864)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1352, file: !1353, line: 516, baseType: !881, size: 32, offset: 896)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1352, file: !1353, line: 519, baseType: !881, size: 32, offset: 928)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1352, file: !1353, line: 522, baseType: !7, size: 32, offset: 960)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1352, file: !1353, line: 523, baseType: !7, size: 32, offset: 992)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1352, file: !1353, line: 528, baseType: !1087, size: 64, offset: 1024)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1352, file: !1353, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1352, file: !1353, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1352, file: !1353, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1352, file: !1353, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1352, file: !1353, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1352, file: !1353, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1352, file: !1353, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1352, file: !1353, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1352, file: !1353, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1352, file: !1353, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1352, file: !1353, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1352, file: !1353, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1352, file: !1353, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1352, file: !1353, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1352, file: !1353, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1352, file: !1353, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1347, file: !135, line: 3254, baseType: !888, size: 64, offset: 1536)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1347, file: !135, line: 3257, baseType: !888, size: 64, offset: 1600)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1347, file: !135, line: 3258, baseType: !888, size: 64, offset: 1664)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1347, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1347, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1347, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1347, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1347, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1347, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1347, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1347, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1347, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1347, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1347, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1347, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1347, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1347, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1347, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1347, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1347, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1347, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !890, file: !135, line: 3394, baseType: !1667, size: 1344)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1668)
!1668 = !{!1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1667, file: !135, line: 2280, baseType: !926, size: 192)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1667, file: !135, line: 2281, baseType: !888, size: 64, offset: 192)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1667, file: !135, line: 2282, baseType: !888, size: 64, offset: 256)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1667, file: !135, line: 2283, baseType: !888, size: 64, offset: 320)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1667, file: !135, line: 2284, baseType: !888, size: 64, offset: 384)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1667, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1667, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1667, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1667, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1667, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1667, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1667, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1667, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1667, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1667, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1667, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1667, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1667, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1667, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1667, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1667, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1667, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1667, file: !135, line: 2306, baseType: !1187, size: 32, offset: 544)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1667, file: !135, line: 2307, baseType: !888, size: 64, offset: 576)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1667, file: !135, line: 2308, baseType: !888, size: 64, offset: 640)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1667, file: !135, line: 2314, baseType: !1695, size: 64, offset: 704)
!1695 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1696)
!1696 = !{!1697, !1698, !1699}
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1695, file: !135, line: 2310, baseType: !984, size: 32)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1695, file: !135, line: 2311, baseType: !1087, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1695, file: !135, line: 2312, baseType: !1700, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1701, size: 64)
!1701 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1667, file: !135, line: 2315, baseType: !888, size: 64, offset: 768)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1667, file: !135, line: 2316, baseType: !888, size: 64, offset: 832)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1667, file: !135, line: 2317, baseType: !888, size: 64, offset: 896)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1667, file: !135, line: 2318, baseType: !888, size: 64, offset: 960)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1667, file: !135, line: 2319, baseType: !888, size: 64, offset: 1024)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1667, file: !135, line: 2320, baseType: !888, size: 64, offset: 1088)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1667, file: !135, line: 2321, baseType: !888, size: 64, offset: 1152)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1667, file: !135, line: 2322, baseType: !888, size: 64, offset: 1216)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1667, file: !135, line: 2324, baseType: !1711, size: 64, offset: 1280)
!1711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!1712 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !890, file: !135, line: 3395, baseType: !1714, size: 320)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1715)
!1715 = !{!1716, !1717, !1718}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1714, file: !135, line: 1470, baseType: !926, size: 192)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1714, file: !135, line: 1471, baseType: !888, size: 64, offset: 192)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1714, file: !135, line: 1472, baseType: !888, size: 64, offset: 256)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !890, file: !135, line: 3396, baseType: !1720, size: 320)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1721)
!1721 = !{!1722, !1723, !1724}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1720, file: !135, line: 1483, baseType: !926, size: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1720, file: !135, line: 1484, baseType: !984, size: 32, offset: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1720, file: !135, line: 1485, baseType: !1467, size: 64, offset: 256)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !890, file: !135, line: 3397, baseType: !1726, size: 384)
!1726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1727)
!1727 = !{!1728, !1729, !1730, !1731}
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1726, file: !135, line: 1830, baseType: !926, size: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1726, file: !135, line: 1831, baseType: !881, size: 32, offset: 192)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1726, file: !135, line: 1832, baseType: !888, size: 64, offset: 256)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1726, file: !135, line: 1835, baseType: !1467, size: 64, offset: 320)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !890, file: !135, line: 3398, baseType: !1733, size: 704)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1734)
!1734 = !{!1735, !1736, !1737, !1738, !1739, !1744}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1733, file: !135, line: 1899, baseType: !926, size: 192)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1733, file: !135, line: 1902, baseType: !888, size: 64, offset: 192)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1733, file: !135, line: 1905, baseType: !863, size: 64, offset: 256)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1733, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1733, file: !135, line: 1911, baseType: !1740, size: 64, offset: 384)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !634, line: 117, size: 128, elements: !1742)
!1742 = !{!1743}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1741, file: !634, line: 120, baseType: !1470, size: 128)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1733, file: !135, line: 1914, baseType: !1515, size: 256, offset: 448)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !890, file: !135, line: 3399, baseType: !1746, size: 704)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1747)
!1747 = !{!1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1746, file: !135, line: 2009, baseType: !926, size: 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1746, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1746, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1746, file: !135, line: 2014, baseType: !881, size: 32, offset: 224)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1746, file: !135, line: 2016, baseType: !888, size: 64, offset: 256)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1746, file: !135, line: 2017, baseType: !1456, size: 64, offset: 320)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1746, file: !135, line: 2019, baseType: !888, size: 64, offset: 384)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1746, file: !135, line: 2020, baseType: !888, size: 64, offset: 448)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1746, file: !135, line: 2021, baseType: !888, size: 64, offset: 512)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1746, file: !135, line: 2022, baseType: !888, size: 64, offset: 576)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1746, file: !135, line: 2023, baseType: !888, size: 64, offset: 640)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !890, file: !135, line: 3400, baseType: !1760, size: 832)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1761)
!1761 = !{!1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1760, file: !135, line: 2431, baseType: !926, size: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1760, file: !135, line: 2433, baseType: !888, size: 64, offset: 192)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1760, file: !135, line: 2434, baseType: !888, size: 64, offset: 256)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1760, file: !135, line: 2435, baseType: !888, size: 64, offset: 320)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1760, file: !135, line: 2436, baseType: !888, size: 64, offset: 384)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1760, file: !135, line: 2437, baseType: !1456, size: 64, offset: 448)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1760, file: !135, line: 2438, baseType: !888, size: 64, offset: 512)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1760, file: !135, line: 2440, baseType: !888, size: 64, offset: 576)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1760, file: !135, line: 2441, baseType: !888, size: 64, offset: 640)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1760, file: !135, line: 2443, baseType: !1772, size: 128, offset: 704)
!1772 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1773)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1774)
!1774 = !{!1775}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1773, file: !135, line: 182, baseType: !1461, size: 128)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !890, file: !135, line: 3401, baseType: !1777, size: 320)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1778)
!1778 = !{!1779, !1780, !1787}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1777, file: !135, line: 3329, baseType: !926, size: 192)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1777, file: !135, line: 3330, baseType: !1781, size: 64, offset: 192)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1783)
!1783 = !{!1784, !1785, !1786}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1782, file: !135, line: 3322, baseType: !1781, size: 64)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1782, file: !135, line: 3323, baseType: !1781, size: 64, offset: 64)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1782, file: !135, line: 3324, baseType: !888, size: 64, offset: 128)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1777, file: !135, line: 3331, baseType: !1781, size: 64, offset: 256)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !890, file: !135, line: 3402, baseType: !1789, size: 256)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1790)
!1790 = !{!1791, !1792}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1789, file: !135, line: 1541, baseType: !926, size: 192)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1789, file: !135, line: 1542, baseType: !1793, size: 64, offset: 192)
!1793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !1795)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !1796)
!1796 = !{!1797}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1795, file: !135, line: 1538, baseType: !1798, size: 192)
!1798 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !1799)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1799, file: !135, line: 1537, baseType: !7, size: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1799, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1799, file: !135, line: 1537, baseType: !1804, size: 128, offset: 64)
!1804 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1805, size: 128, elements: !988)
!1805 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !1806)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !1807)
!1807 = !{!1808, !1809}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1806, file: !135, line: 1533, baseType: !888, size: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1806, file: !135, line: 1534, baseType: !888, size: 64, offset: 64)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !890, file: !135, line: 3403, baseType: !1811, size: 512)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !1812)
!1812 = !{!1813, !1814, !1815, !1816, !1822, !1823, !1824}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1811, file: !135, line: 1939, baseType: !926, size: 192)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1811, file: !135, line: 1940, baseType: !881, size: 32, offset: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1811, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1811, file: !135, line: 1946, baseType: !1817, size: 32, offset: 256)
!1817 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !1818)
!1818 = !{!1819, !1820, !1821}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1817, file: !135, line: 1943, baseType: !376, size: 32)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1817, file: !135, line: 1944, baseType: !383, size: 32)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1817, file: !135, line: 1945, baseType: !134, size: 32)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1811, file: !135, line: 1950, baseType: !853, size: 64, offset: 320)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1811, file: !135, line: 1951, baseType: !853, size: 64, offset: 384)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1811, file: !135, line: 1953, baseType: !1467, size: 64, offset: 448)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !890, file: !135, line: 3404, baseType: !1826, size: 1664)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !1827)
!1827 = !{!1828, !1829}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1826, file: !135, line: 3338, baseType: !926, size: 192)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1826, file: !135, line: 3341, baseType: !1830, size: 1472, offset: 192)
!1830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1831, line: 410, size: 1472, elements: !1832)
!1831 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1832 = !{!1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996}
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1830, file: !1831, line: 412, baseType: !984, size: 32)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1830, file: !1831, line: 413, baseType: !984, size: 32, offset: 32)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1830, file: !1831, line: 414, baseType: !984, size: 32, offset: 64)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1830, file: !1831, line: 415, baseType: !984, size: 32, offset: 96)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1830, file: !1831, line: 416, baseType: !984, size: 32, offset: 128)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1830, file: !1831, line: 417, baseType: !984, size: 32, offset: 160)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1830, file: !1831, line: 418, baseType: !1007, size: 8, offset: 192)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1830, file: !1831, line: 419, baseType: !1007, size: 8, offset: 200)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1830, file: !1831, line: 420, baseType: !1842, size: 8, offset: 208)
!1842 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1830, file: !1831, line: 421, baseType: !1842, size: 8, offset: 216)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1830, file: !1831, line: 422, baseType: !1842, size: 8, offset: 224)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1830, file: !1831, line: 423, baseType: !1842, size: 8, offset: 232)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1830, file: !1831, line: 424, baseType: !1842, size: 8, offset: 240)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1830, file: !1831, line: 425, baseType: !1842, size: 8, offset: 248)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1830, file: !1831, line: 426, baseType: !1842, size: 8, offset: 256)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1830, file: !1831, line: 427, baseType: !1842, size: 8, offset: 264)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1830, file: !1831, line: 428, baseType: !1842, size: 8, offset: 272)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1830, file: !1831, line: 429, baseType: !1842, size: 8, offset: 280)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1830, file: !1831, line: 430, baseType: !1842, size: 8, offset: 288)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1830, file: !1831, line: 431, baseType: !1842, size: 8, offset: 296)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1830, file: !1831, line: 432, baseType: !1842, size: 8, offset: 304)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1830, file: !1831, line: 433, baseType: !1842, size: 8, offset: 312)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1830, file: !1831, line: 434, baseType: !1842, size: 8, offset: 320)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1830, file: !1831, line: 435, baseType: !1842, size: 8, offset: 328)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1830, file: !1831, line: 436, baseType: !1842, size: 8, offset: 336)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1830, file: !1831, line: 437, baseType: !1842, size: 8, offset: 344)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1830, file: !1831, line: 438, baseType: !1842, size: 8, offset: 352)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1830, file: !1831, line: 439, baseType: !1842, size: 8, offset: 360)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1830, file: !1831, line: 440, baseType: !1842, size: 8, offset: 368)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1830, file: !1831, line: 441, baseType: !1842, size: 8, offset: 376)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1830, file: !1831, line: 442, baseType: !1842, size: 8, offset: 384)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1830, file: !1831, line: 443, baseType: !1842, size: 8, offset: 392)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1830, file: !1831, line: 444, baseType: !1842, size: 8, offset: 400)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1830, file: !1831, line: 445, baseType: !1842, size: 8, offset: 408)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1830, file: !1831, line: 446, baseType: !1842, size: 8, offset: 416)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1830, file: !1831, line: 447, baseType: !1842, size: 8, offset: 424)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1830, file: !1831, line: 448, baseType: !1842, size: 8, offset: 432)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1830, file: !1831, line: 449, baseType: !1842, size: 8, offset: 440)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1830, file: !1831, line: 450, baseType: !1842, size: 8, offset: 448)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1830, file: !1831, line: 451, baseType: !1842, size: 8, offset: 456)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1830, file: !1831, line: 452, baseType: !1842, size: 8, offset: 464)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1830, file: !1831, line: 453, baseType: !1842, size: 8, offset: 472)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1830, file: !1831, line: 454, baseType: !1842, size: 8, offset: 480)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1830, file: !1831, line: 455, baseType: !1842, size: 8, offset: 488)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1830, file: !1831, line: 456, baseType: !1842, size: 8, offset: 496)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1830, file: !1831, line: 457, baseType: !1842, size: 8, offset: 504)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1830, file: !1831, line: 458, baseType: !1842, size: 8, offset: 512)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1830, file: !1831, line: 459, baseType: !1842, size: 8, offset: 520)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1830, file: !1831, line: 460, baseType: !1842, size: 8, offset: 528)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1830, file: !1831, line: 461, baseType: !1842, size: 8, offset: 536)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1830, file: !1831, line: 462, baseType: !1842, size: 8, offset: 544)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1830, file: !1831, line: 463, baseType: !1842, size: 8, offset: 552)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1830, file: !1831, line: 464, baseType: !1842, size: 8, offset: 560)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1830, file: !1831, line: 465, baseType: !1842, size: 8, offset: 568)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1830, file: !1831, line: 466, baseType: !1842, size: 8, offset: 576)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1830, file: !1831, line: 467, baseType: !1842, size: 8, offset: 584)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1830, file: !1831, line: 468, baseType: !1842, size: 8, offset: 592)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1830, file: !1831, line: 469, baseType: !1842, size: 8, offset: 600)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1830, file: !1831, line: 470, baseType: !1842, size: 8, offset: 608)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1830, file: !1831, line: 471, baseType: !1842, size: 8, offset: 616)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1830, file: !1831, line: 472, baseType: !1842, size: 8, offset: 624)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1830, file: !1831, line: 473, baseType: !1842, size: 8, offset: 632)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1830, file: !1831, line: 474, baseType: !1842, size: 8, offset: 640)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1830, file: !1831, line: 475, baseType: !1842, size: 8, offset: 648)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1830, file: !1831, line: 476, baseType: !1842, size: 8, offset: 656)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1830, file: !1831, line: 477, baseType: !1842, size: 8, offset: 664)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1830, file: !1831, line: 478, baseType: !1842, size: 8, offset: 672)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1830, file: !1831, line: 479, baseType: !1842, size: 8, offset: 680)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1830, file: !1831, line: 480, baseType: !1842, size: 8, offset: 688)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1830, file: !1831, line: 481, baseType: !1842, size: 8, offset: 696)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1830, file: !1831, line: 482, baseType: !1842, size: 8, offset: 704)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1830, file: !1831, line: 483, baseType: !1842, size: 8, offset: 712)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1830, file: !1831, line: 484, baseType: !1842, size: 8, offset: 720)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1830, file: !1831, line: 485, baseType: !1842, size: 8, offset: 728)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1830, file: !1831, line: 486, baseType: !1842, size: 8, offset: 736)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1830, file: !1831, line: 487, baseType: !1842, size: 8, offset: 744)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1830, file: !1831, line: 488, baseType: !1842, size: 8, offset: 752)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1830, file: !1831, line: 489, baseType: !1842, size: 8, offset: 760)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1830, file: !1831, line: 490, baseType: !1842, size: 8, offset: 768)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1830, file: !1831, line: 491, baseType: !1842, size: 8, offset: 776)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1830, file: !1831, line: 492, baseType: !1842, size: 8, offset: 784)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1830, file: !1831, line: 493, baseType: !1842, size: 8, offset: 792)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1830, file: !1831, line: 494, baseType: !1842, size: 8, offset: 800)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1830, file: !1831, line: 495, baseType: !1842, size: 8, offset: 808)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1830, file: !1831, line: 496, baseType: !1842, size: 8, offset: 816)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1830, file: !1831, line: 497, baseType: !1842, size: 8, offset: 824)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1830, file: !1831, line: 498, baseType: !1842, size: 8, offset: 832)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1830, file: !1831, line: 499, baseType: !1842, size: 8, offset: 840)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1830, file: !1831, line: 500, baseType: !1842, size: 8, offset: 848)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1830, file: !1831, line: 501, baseType: !1842, size: 8, offset: 856)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1830, file: !1831, line: 502, baseType: !1842, size: 8, offset: 864)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1830, file: !1831, line: 503, baseType: !1842, size: 8, offset: 872)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1830, file: !1831, line: 504, baseType: !1842, size: 8, offset: 880)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1830, file: !1831, line: 505, baseType: !1842, size: 8, offset: 888)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1830, file: !1831, line: 506, baseType: !1842, size: 8, offset: 896)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1830, file: !1831, line: 507, baseType: !1842, size: 8, offset: 904)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1830, file: !1831, line: 508, baseType: !1842, size: 8, offset: 912)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1830, file: !1831, line: 509, baseType: !1842, size: 8, offset: 920)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1830, file: !1831, line: 510, baseType: !1842, size: 8, offset: 928)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1830, file: !1831, line: 511, baseType: !1842, size: 8, offset: 936)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1830, file: !1831, line: 512, baseType: !1842, size: 8, offset: 944)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1830, file: !1831, line: 513, baseType: !1842, size: 8, offset: 952)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1830, file: !1831, line: 514, baseType: !1842, size: 8, offset: 960)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1830, file: !1831, line: 515, baseType: !1842, size: 8, offset: 968)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1830, file: !1831, line: 516, baseType: !1842, size: 8, offset: 976)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1830, file: !1831, line: 517, baseType: !1842, size: 8, offset: 984)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1830, file: !1831, line: 518, baseType: !1842, size: 8, offset: 992)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1830, file: !1831, line: 519, baseType: !1842, size: 8, offset: 1000)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1830, file: !1831, line: 520, baseType: !1842, size: 8, offset: 1008)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1830, file: !1831, line: 521, baseType: !1842, size: 8, offset: 1016)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1830, file: !1831, line: 522, baseType: !1842, size: 8, offset: 1024)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1830, file: !1831, line: 523, baseType: !1842, size: 8, offset: 1032)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1830, file: !1831, line: 524, baseType: !1842, size: 8, offset: 1040)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1830, file: !1831, line: 525, baseType: !1842, size: 8, offset: 1048)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1830, file: !1831, line: 526, baseType: !1842, size: 8, offset: 1056)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1830, file: !1831, line: 527, baseType: !1842, size: 8, offset: 1064)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1830, file: !1831, line: 528, baseType: !1842, size: 8, offset: 1072)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1830, file: !1831, line: 529, baseType: !1842, size: 8, offset: 1080)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1830, file: !1831, line: 530, baseType: !1842, size: 8, offset: 1088)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1830, file: !1831, line: 531, baseType: !1842, size: 8, offset: 1096)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1830, file: !1831, line: 532, baseType: !1842, size: 8, offset: 1104)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1830, file: !1831, line: 533, baseType: !1842, size: 8, offset: 1112)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1830, file: !1831, line: 534, baseType: !1842, size: 8, offset: 1120)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1830, file: !1831, line: 535, baseType: !1842, size: 8, offset: 1128)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1830, file: !1831, line: 536, baseType: !1842, size: 8, offset: 1136)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1830, file: !1831, line: 537, baseType: !1842, size: 8, offset: 1144)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1830, file: !1831, line: 538, baseType: !1842, size: 8, offset: 1152)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1830, file: !1831, line: 539, baseType: !1842, size: 8, offset: 1160)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1830, file: !1831, line: 540, baseType: !1842, size: 8, offset: 1168)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1830, file: !1831, line: 541, baseType: !1842, size: 8, offset: 1176)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1830, file: !1831, line: 542, baseType: !1842, size: 8, offset: 1184)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1830, file: !1831, line: 543, baseType: !1842, size: 8, offset: 1192)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1830, file: !1831, line: 544, baseType: !1842, size: 8, offset: 1200)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1830, file: !1831, line: 545, baseType: !1842, size: 8, offset: 1208)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1830, file: !1831, line: 546, baseType: !1842, size: 8, offset: 1216)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1830, file: !1831, line: 547, baseType: !1842, size: 8, offset: 1224)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1830, file: !1831, line: 548, baseType: !1842, size: 8, offset: 1232)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1830, file: !1831, line: 549, baseType: !1842, size: 8, offset: 1240)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1830, file: !1831, line: 550, baseType: !1842, size: 8, offset: 1248)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1830, file: !1831, line: 551, baseType: !1842, size: 8, offset: 1256)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1830, file: !1831, line: 552, baseType: !1842, size: 8, offset: 1264)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1830, file: !1831, line: 553, baseType: !1842, size: 8, offset: 1272)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1830, file: !1831, line: 554, baseType: !1842, size: 8, offset: 1280)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1830, file: !1831, line: 555, baseType: !1842, size: 8, offset: 1288)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1830, file: !1831, line: 556, baseType: !1842, size: 8, offset: 1296)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1830, file: !1831, line: 557, baseType: !1842, size: 8, offset: 1304)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1830, file: !1831, line: 558, baseType: !1842, size: 8, offset: 1312)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1830, file: !1831, line: 559, baseType: !1842, size: 8, offset: 1320)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1830, file: !1831, line: 560, baseType: !1842, size: 8, offset: 1328)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1830, file: !1831, line: 561, baseType: !1842, size: 8, offset: 1336)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1830, file: !1831, line: 562, baseType: !1842, size: 8, offset: 1344)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1830, file: !1831, line: 563, baseType: !1842, size: 8, offset: 1352)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1830, file: !1831, line: 564, baseType: !1842, size: 8, offset: 1360)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1830, file: !1831, line: 565, baseType: !1842, size: 8, offset: 1368)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1830, file: !1831, line: 566, baseType: !1842, size: 8, offset: 1376)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1830, file: !1831, line: 567, baseType: !1842, size: 8, offset: 1384)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1830, file: !1831, line: 568, baseType: !1842, size: 8, offset: 1392)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1830, file: !1831, line: 569, baseType: !1842, size: 8, offset: 1400)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1830, file: !1831, line: 570, baseType: !1842, size: 8, offset: 1408)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1830, file: !1831, line: 571, baseType: !1842, size: 8, offset: 1416)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1830, file: !1831, line: 572, baseType: !1842, size: 8, offset: 1424)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1830, file: !1831, line: 573, baseType: !1842, size: 8, offset: 1432)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1830, file: !1831, line: 574, baseType: !1842, size: 8, offset: 1440)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !890, file: !135, line: 3405, baseType: !1998, size: 384)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !1999)
!1999 = !{!2000, !2001}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1998, file: !135, line: 3353, baseType: !926, size: 192)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1998, file: !135, line: 3356, baseType: !2002, size: 192, offset: 192)
!2002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1831, line: 578, size: 192, elements: !2003)
!2003 = !{!2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2002, file: !1831, line: 580, baseType: !984, size: 32)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2002, file: !1831, line: 581, baseType: !984, size: 32, offset: 32)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2002, file: !1831, line: 582, baseType: !984, size: 32, offset: 64)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2002, file: !1831, line: 583, baseType: !984, size: 32, offset: 96)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2002, file: !1831, line: 584, baseType: !1007, size: 8, offset: 128)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2002, file: !1831, line: 585, baseType: !1007, size: 8, offset: 136)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2002, file: !1831, line: 586, baseType: !1007, size: 8, offset: 144)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2002, file: !1831, line: 587, baseType: !1007, size: 8, offset: 152)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2002, file: !1831, line: 588, baseType: !1007, size: 8, offset: 160)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2002, file: !1831, line: 589, baseType: !1007, size: 8, offset: 168)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2002, file: !1831, line: 590, baseType: !1007, size: 8, offset: 176)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !865, file: !587, line: 739, baseType: !2016, size: 448)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !587, line: 350, size: 448, elements: !2017)
!2017 = !{!2018, !2024}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2016, file: !587, line: 353, baseType: !2019, size: 384)
!2019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !587, line: 333, size: 384, elements: !2020)
!2020 = !{!2021, !2022, !2023}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2019, file: !587, line: 336, baseType: !868, size: 256)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2019, file: !587, line: 343, baseType: !1503, size: 64, offset: 256)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2019, file: !587, line: 344, baseType: !1510, size: 64, offset: 320)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2016, file: !587, line: 359, baseType: !1467, size: 64, offset: 384)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !865, file: !587, line: 740, baseType: !2026, size: 512)
!2026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !587, line: 365, size: 512, elements: !2027)
!2027 = !{!2028, !2029, !2030}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2026, file: !587, line: 368, baseType: !2019, size: 384)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2026, file: !587, line: 373, baseType: !888, size: 64, offset: 384)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2026, file: !587, line: 374, baseType: !888, size: 64, offset: 448)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !865, file: !587, line: 741, baseType: !2032, size: 576)
!2032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !587, line: 380, size: 576, elements: !2033)
!2033 = !{!2034, !2035}
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2032, file: !587, line: 383, baseType: !2026, size: 512)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2032, file: !587, line: 389, baseType: !1467, size: 64, offset: 512)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !865, file: !587, line: 742, baseType: !2037, size: 320)
!2037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !587, line: 395, size: 320, elements: !2038)
!2038 = !{!2039, !2040}
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2037, file: !587, line: 397, baseType: !868, size: 256)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2037, file: !587, line: 400, baseType: !853, size: 64, offset: 256)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !865, file: !587, line: 743, baseType: !2042, size: 448)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !587, line: 406, size: 448, elements: !2043)
!2043 = !{!2044, !2045, !2046, !2047}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2042, file: !587, line: 408, baseType: !868, size: 256)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2042, file: !587, line: 412, baseType: !888, size: 64, offset: 256)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2042, file: !587, line: 420, baseType: !888, size: 64, offset: 320)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2042, file: !587, line: 423, baseType: !853, size: 64, offset: 384)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !865, file: !587, line: 744, baseType: !2049, size: 384)
!2049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !587, line: 429, size: 384, elements: !2050)
!2050 = !{!2051, !2052, !2053}
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2049, file: !587, line: 431, baseType: !868, size: 256)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2049, file: !587, line: 434, baseType: !888, size: 64, offset: 256)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2049, file: !587, line: 437, baseType: !853, size: 64, offset: 320)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !865, file: !587, line: 745, baseType: !2055, size: 384)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !587, line: 443, size: 384, elements: !2056)
!2056 = !{!2057, !2058, !2059}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2055, file: !587, line: 445, baseType: !868, size: 256)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2055, file: !587, line: 449, baseType: !888, size: 64, offset: 256)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2055, file: !587, line: 453, baseType: !853, size: 64, offset: 320)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !865, file: !587, line: 746, baseType: !2061, size: 320)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !587, line: 459, size: 320, elements: !2062)
!2062 = !{!2063, !2064}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2061, file: !587, line: 461, baseType: !868, size: 256)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2061, file: !587, line: 464, baseType: !888, size: 64, offset: 256)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !865, file: !587, line: 747, baseType: !2066, size: 768)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !587, line: 469, size: 768, elements: !2067)
!2067 = !{!2068, !2069, !2070, !2071, !2072}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2066, file: !587, line: 471, baseType: !868, size: 256)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2066, file: !587, line: 474, baseType: !7, size: 32, offset: 256)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2066, file: !587, line: 475, baseType: !7, size: 32, offset: 288)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2066, file: !587, line: 478, baseType: !888, size: 64, offset: 320)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2066, file: !587, line: 481, baseType: !2073, size: 384, offset: 384)
!2073 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2074, size: 384, elements: !988)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2075)
!2075 = !{!2076, !2077, !2078}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2074, file: !135, line: 1920, baseType: !1515, size: 256)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2074, file: !135, line: 1921, baseType: !888, size: 64, offset: 256)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2074, file: !135, line: 1922, baseType: !881, size: 32, offset: 320)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !865, file: !587, line: 748, baseType: !2080, size: 320)
!2080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !587, line: 487, size: 320, elements: !2081)
!2081 = !{!2082, !2083}
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2080, file: !587, line: 490, baseType: !868, size: 256)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2080, file: !587, line: 494, baseType: !984, size: 32, offset: 256)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !865, file: !587, line: 749, baseType: !2085, size: 384)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !587, line: 500, size: 384, elements: !2086)
!2086 = !{!2087, !2088, !2089}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2085, file: !587, line: 502, baseType: !868, size: 256)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2085, file: !587, line: 506, baseType: !853, size: 64, offset: 256)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2085, file: !587, line: 510, baseType: !853, size: 64, offset: 320)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !865, file: !587, line: 750, baseType: !2091, size: 320)
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !587, line: 529, size: 320, elements: !2092)
!2092 = !{!2093, !2094}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2091, file: !587, line: 531, baseType: !868, size: 256)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2091, file: !587, line: 540, baseType: !853, size: 64, offset: 256)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !865, file: !587, line: 751, baseType: !2096, size: 704)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !587, line: 546, size: 704, elements: !2097)
!2097 = !{!2098, !2099, !2100, !2101, !2102, !2103, !2104}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2096, file: !587, line: 549, baseType: !2026, size: 512)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2096, file: !587, line: 553, baseType: !1087, size: 64, offset: 512)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2096, file: !587, line: 557, baseType: !1007, size: 8, offset: 576)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2096, file: !587, line: 558, baseType: !1007, size: 8, offset: 584)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2096, file: !587, line: 559, baseType: !1007, size: 8, offset: 592)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2096, file: !587, line: 560, baseType: !1007, size: 8, offset: 600)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2096, file: !587, line: 566, baseType: !1467, size: 64, offset: 640)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !865, file: !587, line: 752, baseType: !2106, size: 384)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !587, line: 571, size: 384, elements: !2107)
!2107 = !{!2108, !2109}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2106, file: !587, line: 573, baseType: !2037, size: 320)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2106, file: !587, line: 577, baseType: !888, size: 64, offset: 320)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !865, file: !587, line: 753, baseType: !2111, size: 576)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !587, line: 600, size: 576, elements: !2112)
!2112 = !{!2113, !2114, !2115, !2116, !2125}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2111, file: !587, line: 602, baseType: !2037, size: 320)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2111, file: !587, line: 605, baseType: !888, size: 64, offset: 320)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2111, file: !587, line: 609, baseType: !1417, size: 64, offset: 384)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2111, file: !587, line: 612, baseType: !2117, size: 64, offset: 448)
!2117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2118, size: 64)
!2118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !587, line: 581, size: 320, elements: !2119)
!2119 = !{!2120, !2121, !2122, !2123, !2124}
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2118, file: !587, line: 583, baseType: !134, size: 32)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2118, file: !587, line: 586, baseType: !888, size: 64, offset: 64)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2118, file: !587, line: 589, baseType: !888, size: 64, offset: 128)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2118, file: !587, line: 592, baseType: !888, size: 64, offset: 192)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2118, file: !587, line: 595, baseType: !888, size: 64, offset: 256)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2111, file: !587, line: 616, baseType: !853, size: 64, offset: 512)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !865, file: !587, line: 754, baseType: !2127, size: 512)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !587, line: 622, size: 512, elements: !2128)
!2128 = !{!2129, !2130, !2131, !2132}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2127, file: !587, line: 624, baseType: !2037, size: 320)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2127, file: !587, line: 628, baseType: !888, size: 64, offset: 320)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2127, file: !587, line: 632, baseType: !888, size: 64, offset: 384)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2127, file: !587, line: 636, baseType: !888, size: 64, offset: 448)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !865, file: !587, line: 755, baseType: !2134, size: 704)
!2134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !587, line: 642, size: 704, elements: !2135)
!2135 = !{!2136, !2137, !2138, !2139}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2134, file: !587, line: 644, baseType: !2127, size: 512)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2134, file: !587, line: 648, baseType: !888, size: 64, offset: 512)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2134, file: !587, line: 652, baseType: !888, size: 64, offset: 576)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2134, file: !587, line: 653, baseType: !888, size: 64, offset: 640)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !865, file: !587, line: 756, baseType: !2141, size: 448)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !587, line: 663, size: 448, elements: !2142)
!2142 = !{!2143, !2144, !2145}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2141, file: !587, line: 665, baseType: !2037, size: 320)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2141, file: !587, line: 668, baseType: !888, size: 64, offset: 320)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2141, file: !587, line: 673, baseType: !888, size: 64, offset: 384)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !865, file: !587, line: 757, baseType: !2147, size: 384)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !587, line: 694, size: 384, elements: !2148)
!2148 = !{!2149, !2150}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2147, file: !587, line: 696, baseType: !2037, size: 320)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2147, file: !587, line: 699, baseType: !888, size: 64, offset: 320)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !865, file: !587, line: 758, baseType: !2152, size: 384)
!2152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !587, line: 681, size: 384, elements: !2153)
!2153 = !{!2154, !2155, !2156}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2152, file: !587, line: 683, baseType: !868, size: 256)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2152, file: !587, line: 686, baseType: !888, size: 64, offset: 256)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2152, file: !587, line: 689, baseType: !888, size: 64, offset: 320)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !865, file: !587, line: 759, baseType: !2158, size: 384)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !587, line: 707, size: 384, elements: !2159)
!2159 = !{!2160, !2161, !2162}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2158, file: !587, line: 709, baseType: !868, size: 256)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2158, file: !587, line: 712, baseType: !888, size: 64, offset: 256)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2158, file: !587, line: 712, baseType: !888, size: 64, offset: 320)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !865, file: !587, line: 760, baseType: !2164, size: 320)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !587, line: 718, size: 320, elements: !2165)
!2165 = !{!2166, !2167}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2164, file: !587, line: 720, baseType: !868, size: 256)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2164, file: !587, line: 723, baseType: !888, size: 64, offset: 256)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !860, file: !587, line: 138, baseType: !859, size: 64, offset: 64)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !860, file: !587, line: 139, baseType: !859, size: 64, offset: 128)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !855, file: !587, line: 146, baseType: !858, size: 64, offset: 64)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !855, file: !587, line: 152, baseType: !853, size: 64, offset: 128)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !850, file: !343, line: 130, baseType: !1061, size: 64)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !845, file: !343, line: 134, baseType: !1167, size: 64, offset: 192)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !845, file: !343, line: 137, baseType: !888, size: 64, offset: 256)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !845, file: !343, line: 138, baseType: !881, size: 32, offset: 320)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !845, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !845, file: !343, line: 144, baseType: !984, size: 32, offset: 384)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !845, file: !343, line: 145, baseType: !984, size: 32, offset: 416)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !845, file: !343, line: 146, baseType: !2180, size: 64, offset: 448)
!2180 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !943)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !828, file: !343, line: 220, baseType: !831, size: 64, offset: 64)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !828, file: !343, line: 223, baseType: !1167, size: 64, offset: 128)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !828, file: !343, line: 226, baseType: !1545, size: 64, offset: 192)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !828, file: !343, line: 229, baseType: !2185, size: 128, offset: 256)
!2185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2186, size: 128, elements: !1131)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !828, file: !343, line: 232, baseType: !827, size: 64, offset: 384)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !828, file: !343, line: 233, baseType: !827, size: 64, offset: 448)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !828, file: !343, line: 238, baseType: !2191, size: 64, offset: 512)
!2191 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !2192)
!2192 = !{!2193, !2199}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2191, file: !343, line: 236, baseType: !2194, size: 64)
!2194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!2195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !2196)
!2196 = !{!2197, !2198}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2195, file: !343, line: 275, baseType: !853, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2195, file: !343, line: 278, baseType: !853, size: 64, offset: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2191, file: !343, line: 237, baseType: !2200, size: 64)
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !2202)
!2202 = !{!2203, !2204, !2205, !2206, !2207}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2201, file: !343, line: 261, baseType: !1061, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2201, file: !343, line: 262, baseType: !1061, size: 64, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2201, file: !343, line: 266, baseType: !1061, size: 64, offset: 128)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2201, file: !343, line: 267, baseType: !1061, size: 64, offset: 192)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2201, file: !343, line: 270, baseType: !984, size: 32, offset: 256)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !828, file: !343, line: 241, baseType: !2180, size: 64, offset: 576)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !828, file: !343, line: 244, baseType: !984, size: 32, offset: 640)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !828, file: !343, line: 247, baseType: !984, size: 32, offset: 672)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !828, file: !343, line: 250, baseType: !984, size: 32, offset: 704)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !828, file: !343, line: 253, baseType: !984, size: 32, offset: 736)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !828, file: !343, line: 256, baseType: !984, size: 32, offset: 768)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1480, size: 64)
!2215 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!2216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2217, size: 64)
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_name_info", file: !3, line: 176, size: 128, elements: !2218)
!2218 = !{!2219, !2220, !2221}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2217, file: !3, line: 179, baseType: !888, size: 64)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2217, file: !3, line: 184, baseType: !7, size: 2, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "age", scope: !2217, file: !3, line: 189, baseType: !7, size: 32, offset: 96)
!2222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2223, size: 64)
!2223 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ssa_name_info_p_heap", file: !3, line: 195, baseType: !2224)
!2224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ssa_name_info_p_heap", file: !3, line: 195, size: 128, elements: !2225)
!2225 = !{!2226}
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2224, file: !3, line: 195, baseType: !2227, size: 128)
!2227 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ssa_name_info_p_base", file: !3, line: 194, baseType: !2228)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ssa_name_info_p_base", file: !3, line: 194, size: 128, elements: !2229)
!2229 = !{!2230, !2231, !2232}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2228, file: !3, line: 194, baseType: !7, size: 32)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2228, file: !3, line: 194, baseType: !7, size: 32, offset: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2228, file: !3, line: 194, baseType: !2233, size: 64, offset: 64)
!2233 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2234, size: 64, elements: !988)
!2234 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_name_info_p", file: !3, line: 193, baseType: !2216)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2237, line: 7, baseType: !2238)
!2237 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2239, line: 49, size: 1728, elements: !2240)
!2239 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2240 = !{!2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2256, !2258, !2259, !2260, !2263, !2265, !2266, !2267, !2270, !2272, !2275, !2278, !2279, !2280, !2281, !2282}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2238, file: !2239, line: 51, baseType: !984, size: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2238, file: !2239, line: 54, baseType: !1152, size: 64, offset: 64)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2238, file: !2239, line: 55, baseType: !1152, size: 64, offset: 128)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2238, file: !2239, line: 56, baseType: !1152, size: 64, offset: 192)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2238, file: !2239, line: 57, baseType: !1152, size: 64, offset: 256)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2238, file: !2239, line: 58, baseType: !1152, size: 64, offset: 320)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2238, file: !2239, line: 59, baseType: !1152, size: 64, offset: 384)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2238, file: !2239, line: 60, baseType: !1152, size: 64, offset: 448)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2238, file: !2239, line: 61, baseType: !1152, size: 64, offset: 512)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2238, file: !2239, line: 64, baseType: !1152, size: 64, offset: 576)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2238, file: !2239, line: 65, baseType: !1152, size: 64, offset: 640)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2238, file: !2239, line: 66, baseType: !1152, size: 64, offset: 704)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2238, file: !2239, line: 68, baseType: !2254, size: 64, offset: 768)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2239, line: 36, flags: DIFlagFwdDecl)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2238, file: !2239, line: 70, baseType: !2257, size: 64, offset: 832)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2238, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2238, file: !2239, line: 72, baseType: !984, size: 32, offset: 896)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2238, file: !2239, line: 73, baseType: !984, size: 32, offset: 928)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2238, file: !2239, line: 74, baseType: !2261, size: 64, offset: 960)
!2261 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2262, line: 152, baseType: !943)
!2262 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2238, file: !2239, line: 77, baseType: !2264, size: 16, offset: 1024)
!2264 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2238, file: !2239, line: 78, baseType: !1842, size: 8, offset: 1040)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2238, file: !2239, line: 79, baseType: !986, size: 8, offset: 1048)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2238, file: !2239, line: 81, baseType: !2268, size: 64, offset: 1088)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!2269 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2239, line: 43, baseType: null)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2238, file: !2239, line: 89, baseType: !2271, size: 64, offset: 1152)
!2271 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2262, line: 153, baseType: !943)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2238, file: !2239, line: 91, baseType: !2273, size: 64, offset: 1216)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!2274 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2239, line: 37, flags: DIFlagFwdDecl)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2238, file: !2239, line: 92, baseType: !2276, size: 64, offset: 1280)
!2276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2277 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2239, line: 38, flags: DIFlagFwdDecl)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2238, file: !2239, line: 93, baseType: !2257, size: 64, offset: 1344)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2238, file: !2239, line: 94, baseType: !1167, size: 64, offset: 1408)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2238, file: !2239, line: 95, baseType: !1417, size: 64, offset: 1472)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2238, file: !2239, line: 96, baseType: !984, size: 32, offset: 1536)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2238, file: !2239, line: 98, baseType: !2283, size: 160, offset: 1568)
!2283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !987, size: 160, elements: !2284)
!2284 = !{!2285}
!2285 = !DISubrange(count: 20)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_blocks_d", file: !3, line: 61, size: 256, elements: !2288)
!2288 = !{!2289, !2290, !2291, !2292}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2287, file: !3, line: 64, baseType: !888, size: 64)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "def_blocks", scope: !2287, file: !3, line: 68, baseType: !1480, size: 64, offset: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "phi_blocks", scope: !2287, file: !3, line: 71, baseType: !1480, size: 64, offset: 128)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "livein_blocks", scope: !2287, file: !3, line: 75, baseType: !1480, size: 64, offset: 192)
!2293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mark_def_sites_global_data", file: !3, line: 167, size: 64, elements: !2295)
!2295 = !{!2296}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "kills", scope: !2294, file: !3, line: 171, baseType: !1480, size: 64)
!2297 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !654, line: 30, baseType: !2298)
!2298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2299, size: 64)
!2299 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1515)
!2300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dom_dfsnum", file: !3, line: 785, size: 64, elements: !2302)
!2302 = !{!2303, !2304}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "bb_index", scope: !2301, file: !3, line: 788, baseType: !7, size: 32)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "dfs_num", scope: !2301, file: !3, line: 791, baseType: !7, size: 32, offset: 32)
!2305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2306, size: 64)
!2306 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2301)
!2307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2308, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2309, line: 32, baseType: !2310)
!2309 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2309, line: 32, size: 96, elements: !2311)
!2311 = !{!2312}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2310, file: !2309, line: 32, baseType: !2313, size: 96)
!2313 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2309, line: 31, baseType: !2314)
!2314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2309, line: 31, size: 96, elements: !2315)
!2315 = !{!2316, !2317, !2318}
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2314, file: !2309, line: 31, baseType: !7, size: 32)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2314, file: !2309, line: 31, baseType: !7, size: 32, offset: 32)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2314, file: !2309, line: 31, baseType: !2319, size: 32, offset: 64)
!2319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !984, size: 32, elements: !988)
!2320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2321, size: 64)
!2321 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_vec_heap", file: !587, line: 49, baseType: !2322)
!2322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_vec_heap", file: !587, line: 49, size: 128, elements: !2323)
!2323 = !{!2324}
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2322, file: !587, line: 49, baseType: !2325, size: 128)
!2325 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_vec_base", file: !587, line: 48, baseType: !2326)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_vec_base", file: !587, line: 48, size: 128, elements: !2327)
!2327 = !{!2328, !2329, !2330}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2326, file: !587, line: 48, baseType: !7, size: 32)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2326, file: !587, line: 48, baseType: !7, size: 32, offset: 32)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2326, file: !587, line: 48, baseType: !2331, size: 64, offset: 64)
!2331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2332, size: 64, elements: !988)
!2332 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_vec", file: !587, line: 47, baseType: !2333)
!2333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2334, size: 64)
!2334 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !587, line: 34, baseType: !2335)
!2335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !587, line: 34, size: 128, elements: !2336)
!2336 = !{!2337}
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2335, file: !587, line: 34, baseType: !1448, size: 128)
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!2339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "repl_map_d", file: !3, line: 135, size: 128, elements: !2340)
!2340 = !{!2341, !2342}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2339, file: !3, line: 137, baseType: !888, size: 64)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !2339, file: !3, line: 138, baseType: !1480, size: 64, offset: 64)
!2343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2344, size: 64)
!2344 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2339)
!2345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2346, size: 64)
!2346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2287)
!2347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!2348 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !654, line: 27, baseType: !1508)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2350, size: 64)
!2350 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2351)
!2351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2352)
!2352 = !{!2353}
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2351, file: !135, line: 184, baseType: !1461, size: 128)
!2354 = !{!2355, !2383, !0, !2385, !2398, !2400, !2402, !2404, !2406, !2408, !2410, !2418, !2420, !2422, !2424}
!2355 = !DIGlobalVariableExpression(var: !2356, expr: !DIExpression())
!2356 = distinct !DIGlobalVariable(name: "pass_build_ssa", scope: !2, file: !3, line: 2402, type: !2357, isLocal: false, isDefinition: true)
!2357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !404, line: 156, size: 640, elements: !2358)
!2358 = !{!2359}
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2357, file: !404, line: 158, baseType: !2360, size: 640)
!2360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !404, line: 114, size: 640, elements: !2361)
!2361 = !{!2362, !2363, !2364, !2368, !2372, !2374, !2375, !2376, !2378, !2379, !2380, !2381, !2382}
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2360, file: !404, line: 117, baseType: !403, size: 32)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2360, file: !404, line: 121, baseType: !1087, size: 64, offset: 64)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2360, file: !404, line: 125, baseType: !2365, size: 64, offset: 128)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = !DISubroutineType(types: !2367)
!2367 = !{!1007}
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2360, file: !404, line: 130, baseType: !2369, size: 64, offset: 192)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = !DISubroutineType(types: !2371)
!2371 = !{!7}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2360, file: !404, line: 133, baseType: !2373, size: 64, offset: 256)
!2373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2360, size: 64)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2360, file: !404, line: 136, baseType: !2373, size: 64, offset: 320)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2360, file: !404, line: 139, baseType: !984, size: 32, offset: 384)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2360, file: !404, line: 143, baseType: !2377, size: 32, offset: 416)
!2377 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !411, line: 80, baseType: !410)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2360, file: !404, line: 146, baseType: !7, size: 32, offset: 448)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2360, file: !404, line: 147, baseType: !7, size: 32, offset: 480)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2360, file: !404, line: 148, baseType: !7, size: 32, offset: 512)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2360, file: !404, line: 151, baseType: !7, size: 32, offset: 544)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2360, file: !404, line: 152, baseType: !7, size: 32, offset: 576)
!2383 = !DIGlobalVariableExpression(var: !2384, expr: !DIExpression())
!2384 = distinct !DIGlobalVariable(name: "def_blocks", scope: !2, file: !3, line: 86, type: !1394, isLocal: true, isDefinition: true)
!2385 = !DIGlobalVariableExpression(var: !2386, expr: !DIExpression())
!2386 = distinct !DIGlobalVariable(name: "old_ssa_names", scope: !2, file: !3, line: 108, type: !2387, isLocal: true, isDefinition: true)
!2387 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2388, line: 45, baseType: !2389)
!2388 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2390, size: 64)
!2390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2388, line: 39, size: 192, elements: !2391)
!2391 = !{!2392, !2394, !2395, !2396}
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2390, file: !2388, line: 41, baseType: !2393, size: 64)
!2393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1007, size: 64)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2390, file: !2388, line: 42, baseType: !7, size: 32, offset: 64)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2390, file: !2388, line: 43, baseType: !7, size: 32, offset: 96)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2390, file: !2388, line: 44, baseType: !2397, size: 64, offset: 128)
!2397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !941, size: 64, elements: !988)
!2398 = !DIGlobalVariableExpression(var: !2399, expr: !DIExpression())
!2399 = distinct !DIGlobalVariable(name: "new_ssa_names", scope: !2, file: !3, line: 113, type: !2387, isLocal: true, isDefinition: true)
!2400 = !DIGlobalVariableExpression(var: !2401, expr: !DIExpression())
!2401 = distinct !DIGlobalVariable(name: "interesting_blocks", scope: !2, file: !3, line: 115, type: !2387, isLocal: false, isDefinition: true)
!2402 = !DIGlobalVariableExpression(var: !2403, expr: !DIExpression())
!2403 = distinct !DIGlobalVariable(name: "names_to_release", scope: !2, file: !3, line: 120, type: !1480, isLocal: true, isDefinition: true)
!2404 = !DIGlobalVariableExpression(var: !2405, expr: !DIExpression())
!2405 = distinct !DIGlobalVariable(name: "phis_to_rewrite", scope: !2, file: !3, line: 122, type: !2320, isLocal: true, isDefinition: true)
!2406 = !DIGlobalVariableExpression(var: !2407, expr: !DIExpression())
!2407 = distinct !DIGlobalVariable(name: "blocks_with_phis_to_rewrite", scope: !2, file: !3, line: 125, type: !1480, isLocal: true, isDefinition: true)
!2408 = !DIGlobalVariableExpression(var: !2409, expr: !DIExpression())
!2409 = distinct !DIGlobalVariable(name: "repl_tbl", scope: !2, file: !3, line: 145, type: !1394, isLocal: true, isDefinition: true)
!2410 = !DIGlobalVariableExpression(var: !2411, expr: !DIExpression())
!2411 = distinct !DIGlobalVariable(name: "update_ssa_stats", scope: !2, file: !3, line: 164, type: !2412, isLocal: true, isDefinition: true)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "update_ssa_stats_d", file: !3, line: 157, size: 192, elements: !2413)
!2413 = !{!2414, !2415, !2416, !2417}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "num_virtual_mappings", scope: !2412, file: !3, line: 159, baseType: !7, size: 32)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "num_total_mappings", scope: !2412, file: !3, line: 160, baseType: !7, size: 32, offset: 32)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_symbols", scope: !2412, file: !3, line: 161, baseType: !1480, size: 64, offset: 64)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "num_virtual_symbols", scope: !2412, file: !3, line: 162, baseType: !7, size: 32, offset: 128)
!2418 = !DIGlobalVariableExpression(var: !2419, expr: !DIExpression())
!2419 = distinct !DIGlobalVariable(name: "blocks_to_update", scope: !2, file: !3, line: 201, type: !1480, isLocal: true, isDefinition: true)
!2420 = !DIGlobalVariableExpression(var: !2421, expr: !DIExpression())
!2421 = distinct !DIGlobalVariable(name: "info_for_ssa_name", scope: !2, file: !3, line: 197, type: !2222, isLocal: true, isDefinition: true)
!2422 = !DIGlobalVariableExpression(var: !2423, expr: !DIExpression())
!2423 = distinct !DIGlobalVariable(name: "current_info_for_ssa_name_age", scope: !2, file: !3, line: 198, type: !7, isLocal: true, isDefinition: true)
!2424 = !DIGlobalVariableExpression(var: !2425, expr: !DIExpression())
!2425 = distinct !DIGlobalVariable(name: "update_ssa_initialized_fn", scope: !2, file: !3, line: 149, type: !1351, isLocal: true, isDefinition: true)
!2426 = !{i32 7, !"Dwarf Version", i32 4}
!2427 = !{i32 2, !"Debug Info Version", i32 3}
!2428 = !{i32 1, !"wchar_size", i32 4}
!2429 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2430 = distinct !DISubprogram(name: "get_current_def", scope: !3, file: !3, line: 352, type: !2431, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2431 = !DISubroutineType(types: !2432)
!2432 = !{!888, !888}
!2433 = !{}
!2434 = !DILocalVariable(name: "var", arg: 1, scope: !2430, file: !3, line: 352, type: !888)
!2435 = !DILocation(line: 352, column: 23, scope: !2430)
!2436 = !DILocation(line: 354, column: 7, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2430, file: !3, line: 354, column: 7)
!2438 = !DILocation(line: 354, column: 23, scope: !2437)
!2439 = !DILocation(line: 354, column: 7, scope: !2430)
!2440 = !DILocation(line: 355, column: 30, scope: !2437)
!2441 = !DILocation(line: 355, column: 12, scope: !2437)
!2442 = !DILocation(line: 355, column: 36, scope: !2437)
!2443 = !DILocation(line: 355, column: 5, scope: !2437)
!2444 = !DILocation(line: 357, column: 21, scope: !2437)
!2445 = !DILocation(line: 357, column: 12, scope: !2437)
!2446 = !DILocation(line: 357, column: 27, scope: !2437)
!2447 = !DILocation(line: 357, column: 5, scope: !2437)
!2448 = !DILocation(line: 358, column: 1, scope: !2430)
!2449 = distinct !DISubprogram(name: "get_ssa_name_ann", scope: !3, file: !3, line: 285, type: !2450, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2450 = !DISubroutineType(types: !2451)
!2451 = !{!2234, !888}
!2452 = !DILocalVariable(name: "name", arg: 1, scope: !2449, file: !3, line: 285, type: !888)
!2453 = !DILocation(line: 285, column: 24, scope: !2449)
!2454 = !DILocalVariable(name: "ver", scope: !2449, file: !3, line: 287, type: !7)
!2455 = !DILocation(line: 287, column: 12, scope: !2449)
!2456 = !DILocation(line: 287, column: 18, scope: !2449)
!2457 = !DILocalVariable(name: "len", scope: !2449, file: !3, line: 288, type: !7)
!2458 = !DILocation(line: 288, column: 12, scope: !2449)
!2459 = !DILocation(line: 288, column: 18, scope: !2449)
!2460 = !DILocalVariable(name: "info", scope: !2449, file: !3, line: 289, type: !2216)
!2461 = !DILocation(line: 289, column: 25, scope: !2449)
!2462 = !DILocation(line: 291, column: 7, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2449, file: !3, line: 291, column: 7)
!2464 = !DILocation(line: 291, column: 14, scope: !2463)
!2465 = !DILocation(line: 291, column: 11, scope: !2463)
!2466 = !DILocation(line: 291, column: 7, scope: !2449)
!2467 = !DILocalVariable(name: "new_len", scope: !2468, file: !3, line: 293, type: !7)
!2468 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 292, column: 5)
!2469 = !DILocation(line: 293, column: 16, scope: !2468)
!2470 = !DILocation(line: 293, column: 26, scope: !2468)
!2471 = !DILocation(line: 295, column: 7, scope: !2468)
!2472 = !DILocation(line: 296, column: 7, scope: !2468)
!2473 = !DILocation(line: 296, column: 17, scope: !2468)
!2474 = !DILocation(line: 296, column: 22, scope: !2468)
!2475 = !DILocation(line: 296, column: 20, scope: !2468)
!2476 = !DILocalVariable(name: "info", scope: !2477, file: !3, line: 298, type: !2216)
!2477 = distinct !DILexicalBlock(scope: !2468, file: !3, line: 297, column: 2)
!2478 = !DILocation(line: 298, column: 26, scope: !2477)
!2479 = !DILocation(line: 298, column: 33, scope: !2477)
!2480 = !DILocation(line: 299, column: 16, scope: !2477)
!2481 = !DILocation(line: 299, column: 4, scope: !2477)
!2482 = !DILocation(line: 299, column: 10, scope: !2477)
!2483 = !DILocation(line: 299, column: 14, scope: !2477)
!2484 = !DILocation(line: 300, column: 4, scope: !2477)
!2485 = distinct !{!2485, !2472, !2486}
!2486 = !DILocation(line: 301, column: 2, scope: !2468)
!2487 = !DILocation(line: 302, column: 5, scope: !2468)
!2488 = !DILocation(line: 304, column: 10, scope: !2449)
!2489 = !DILocation(line: 304, column: 8, scope: !2449)
!2490 = !DILocation(line: 305, column: 7, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2449, file: !3, line: 305, column: 7)
!2492 = !DILocation(line: 305, column: 13, scope: !2491)
!2493 = !DILocation(line: 305, column: 19, scope: !2491)
!2494 = !DILocation(line: 305, column: 17, scope: !2491)
!2495 = !DILocation(line: 305, column: 7, scope: !2449)
!2496 = !DILocation(line: 307, column: 7, scope: !2497)
!2497 = distinct !DILexicalBlock(scope: !2491, file: !3, line: 306, column: 5)
!2498 = !DILocation(line: 307, column: 13, scope: !2497)
!2499 = !DILocation(line: 307, column: 28, scope: !2497)
!2500 = !DILocation(line: 308, column: 7, scope: !2497)
!2501 = !DILocation(line: 308, column: 13, scope: !2497)
!2502 = !DILocation(line: 308, column: 25, scope: !2497)
!2503 = !DILocation(line: 309, column: 19, scope: !2497)
!2504 = !DILocation(line: 309, column: 7, scope: !2497)
!2505 = !DILocation(line: 309, column: 13, scope: !2497)
!2506 = !DILocation(line: 309, column: 17, scope: !2497)
!2507 = !DILocation(line: 310, column: 5, scope: !2497)
!2508 = !DILocation(line: 312, column: 10, scope: !2449)
!2509 = !DILocation(line: 312, column: 3, scope: !2449)
!2510 = distinct !DISubprogram(name: "var_ann", scope: !2511, file: !2511, line: 132, type: !2512, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2511 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2512 = !DISubroutineType(types: !2513)
!2513 = !{!2514, !2515}
!2514 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !634, line: 297, baseType: !1302)
!2515 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !826, line: 59, baseType: !2516)
!2516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2517, size: 64)
!2517 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !890)
!2518 = !DILocalVariable(name: "t", arg: 1, scope: !2510, file: !2511, line: 132, type: !2515)
!2519 = !DILocation(line: 132, column: 21, scope: !2510)
!2520 = !DILocalVariable(name: "p", scope: !2510, file: !2511, line: 134, type: !2521)
!2521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2522, size: 64)
!2522 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2514)
!2523 = !DILocation(line: 134, column: 20, scope: !2510)
!2524 = !DILocation(line: 134, column: 24, scope: !2510)
!2525 = !DILocation(line: 135, column: 10, scope: !2510)
!2526 = !DILocation(line: 135, column: 15, scope: !2510)
!2527 = !DILocation(line: 135, column: 14, scope: !2510)
!2528 = !DILocation(line: 135, column: 3, scope: !2510)
!2529 = distinct !DISubprogram(name: "set_current_def", scope: !3, file: !3, line: 364, type: !2530, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2530 = !DISubroutineType(types: !2531)
!2531 = !{null, !888, !888}
!2532 = !DILocalVariable(name: "var", arg: 1, scope: !2529, file: !3, line: 364, type: !888)
!2533 = !DILocation(line: 364, column: 23, scope: !2529)
!2534 = !DILocalVariable(name: "def", arg: 2, scope: !2529, file: !3, line: 364, type: !888)
!2535 = !DILocation(line: 364, column: 33, scope: !2529)
!2536 = !DILocation(line: 366, column: 7, scope: !2537)
!2537 = distinct !DILexicalBlock(scope: !2529, file: !3, line: 366, column: 7)
!2538 = !DILocation(line: 366, column: 23, scope: !2537)
!2539 = !DILocation(line: 366, column: 7, scope: !2529)
!2540 = !DILocation(line: 367, column: 43, scope: !2537)
!2541 = !DILocation(line: 367, column: 23, scope: !2537)
!2542 = !DILocation(line: 367, column: 5, scope: !2537)
!2543 = !DILocation(line: 367, column: 29, scope: !2537)
!2544 = !DILocation(line: 367, column: 41, scope: !2537)
!2545 = !DILocation(line: 369, column: 34, scope: !2537)
!2546 = !DILocation(line: 369, column: 14, scope: !2537)
!2547 = !DILocation(line: 369, column: 5, scope: !2537)
!2548 = !DILocation(line: 369, column: 20, scope: !2537)
!2549 = !DILocation(line: 369, column: 32, scope: !2537)
!2550 = !DILocation(line: 370, column: 1, scope: !2529)
!2551 = distinct !DISubprogram(name: "compute_global_livein", scope: !3, file: !3, line: 382, type: !2552, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2552 = !DISubroutineType(types: !2553)
!2553 = !{null, !1480, !1480}
!2554 = !DILocalVariable(name: "livein", arg: 1, scope: !2551, file: !3, line: 382, type: !1480)
!2555 = !DILocation(line: 382, column: 31, scope: !2551)
!2556 = !DILocalVariable(name: "def_blocks", arg: 2, scope: !2551, file: !3, line: 382, type: !1480)
!2557 = !DILocation(line: 382, column: 63, scope: !2551)
!2558 = !DILocalVariable(name: "bb", scope: !2551, file: !3, line: 384, type: !825)
!2559 = !DILocation(line: 384, column: 15, scope: !2551)
!2560 = !DILocalVariable(name: "worklist", scope: !2551, file: !3, line: 384, type: !824)
!2561 = !DILocation(line: 384, column: 20, scope: !2551)
!2562 = !DILocalVariable(name: "tos", scope: !2551, file: !3, line: 384, type: !824)
!2563 = !DILocation(line: 384, column: 31, scope: !2551)
!2564 = !DILocalVariable(name: "i", scope: !2551, file: !3, line: 385, type: !7)
!2565 = !DILocation(line: 385, column: 12, scope: !2551)
!2566 = !DILocalVariable(name: "bi", scope: !2551, file: !3, line: 386, type: !2567)
!2567 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1117, line: 218, baseType: !2568)
!2568 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1117, line: 203, size: 256, elements: !2569)
!2569 = !{!2570, !2571, !2572, !2573}
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !2568, file: !1117, line: 206, baseType: !1120, size: 64)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !2568, file: !1117, line: 209, baseType: !1120, size: 64, offset: 64)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !2568, file: !1117, line: 212, baseType: !7, size: 32, offset: 128)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2568, file: !1117, line: 217, baseType: !1130, size: 64, offset: 192)
!2574 = !DILocation(line: 386, column: 19, scope: !2551)
!2575 = !DILocation(line: 389, column: 56, scope: !2551)
!2576 = !DILocation(line: 389, column: 73, scope: !2551)
!2577 = !DILocation(line: 389, column: 55, scope: !2551)
!2578 = !DILocation(line: 389, column: 53, scope: !2551)
!2579 = !DILocation(line: 389, column: 23, scope: !2551)
!2580 = !DILocation(line: 389, column: 7, scope: !2551)
!2581 = !DILocation(line: 389, column: 5, scope: !2551)
!2582 = !DILocation(line: 388, column: 7, scope: !2551)
!2583 = !DILocation(line: 391, column: 3, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2551, file: !3, line: 391, column: 3)
!2585 = !DILocation(line: 391, column: 3, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2584, file: !3, line: 391, column: 3)
!2587 = !DILocation(line: 392, column: 14, scope: !2586)
!2588 = !DILocation(line: 392, column: 9, scope: !2586)
!2589 = !DILocation(line: 392, column: 12, scope: !2586)
!2590 = !DILocation(line: 392, column: 5, scope: !2586)
!2591 = distinct !{!2591, !2583, !2592}
!2592 = !DILocation(line: 392, column: 14, scope: !2584)
!2593 = !DILocation(line: 395, column: 3, scope: !2551)
!2594 = !DILocation(line: 395, column: 10, scope: !2551)
!2595 = !DILocation(line: 395, column: 17, scope: !2551)
!2596 = !DILocation(line: 395, column: 14, scope: !2551)
!2597 = !DILocalVariable(name: "e", scope: !2598, file: !3, line: 397, type: !843)
!2598 = distinct !DILexicalBlock(scope: !2551, file: !3, line: 396, column: 5)
!2599 = !DILocation(line: 397, column: 12, scope: !2598)
!2600 = !DILocalVariable(name: "ei", scope: !2598, file: !3, line: 398, type: !2601)
!2601 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !2602)
!2602 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !2603)
!2603 = !{!2604, !2605}
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2602, file: !343, line: 680, baseType: !7, size: 32)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2602, file: !343, line: 681, baseType: !2606, size: 64, offset: 64)
!2606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !831, size: 64)
!2607 = !DILocation(line: 398, column: 21, scope: !2598)
!2608 = !DILocation(line: 401, column: 13, scope: !2598)
!2609 = !DILocation(line: 401, column: 12, scope: !2598)
!2610 = !DILocation(line: 401, column: 10, scope: !2598)
!2611 = !DILocation(line: 404, column: 7, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2598, file: !3, line: 404, column: 7)
!2613 = !DILocation(line: 404, column: 7, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2612, file: !3, line: 404, column: 7)
!2615 = !DILocalVariable(name: "pred", scope: !2616, file: !3, line: 406, type: !825)
!2616 = distinct !DILexicalBlock(scope: !2614, file: !3, line: 405, column: 2)
!2617 = !DILocation(line: 406, column: 16, scope: !2616)
!2618 = !DILocation(line: 406, column: 23, scope: !2616)
!2619 = !DILocation(line: 406, column: 26, scope: !2616)
!2620 = !DILocalVariable(name: "pred_index", scope: !2616, file: !3, line: 407, type: !984)
!2621 = !DILocation(line: 407, column: 8, scope: !2616)
!2622 = !DILocation(line: 407, column: 21, scope: !2616)
!2623 = !DILocation(line: 407, column: 27, scope: !2616)
!2624 = !DILocation(line: 410, column: 8, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2616, file: !3, line: 410, column: 8)
!2626 = !DILocation(line: 410, column: 16, scope: !2625)
!2627 = !DILocation(line: 410, column: 13, scope: !2625)
!2628 = !DILocation(line: 411, column: 8, scope: !2625)
!2629 = !DILocation(line: 411, column: 27, scope: !2625)
!2630 = !DILocation(line: 411, column: 35, scope: !2625)
!2631 = !DILocation(line: 411, column: 13, scope: !2625)
!2632 = !DILocation(line: 412, column: 8, scope: !2625)
!2633 = !DILocation(line: 412, column: 27, scope: !2625)
!2634 = !DILocation(line: 412, column: 39, scope: !2625)
!2635 = !DILocation(line: 412, column: 13, scope: !2625)
!2636 = !DILocation(line: 410, column: 8, scope: !2616)
!2637 = !DILocation(line: 414, column: 17, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 413, column: 6)
!2639 = !DILocation(line: 414, column: 12, scope: !2638)
!2640 = !DILocation(line: 414, column: 15, scope: !2638)
!2641 = !DILocation(line: 415, column: 24, scope: !2638)
!2642 = !DILocation(line: 415, column: 32, scope: !2638)
!2643 = !DILocation(line: 415, column: 8, scope: !2638)
!2644 = !DILocation(line: 416, column: 6, scope: !2638)
!2645 = !DILocation(line: 417, column: 2, scope: !2616)
!2646 = distinct !{!2646, !2611, !2647}
!2647 = !DILocation(line: 417, column: 2, scope: !2612)
!2648 = distinct !{!2648, !2593, !2649}
!2649 = !DILocation(line: 418, column: 5, scope: !2551)
!2650 = !DILocation(line: 420, column: 9, scope: !2551)
!2651 = !DILocation(line: 420, column: 3, scope: !2551)
!2652 = !DILocation(line: 421, column: 1, scope: !2551)
!2653 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1117, file: !1117, line: 224, type: !2654, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2654 = !DISubroutineType(types: !2655)
!2655 = !{null, !2656, !2657, !7, !2660}
!2656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2567, size: 64)
!2657 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !826, line: 48, baseType: !2658)
!2658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2659, size: 64)
!2659 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1116)
!2660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!2661 = !DILocalVariable(name: "bi", arg: 1, scope: !2653, file: !1117, line: 224, type: !2656)
!2662 = !DILocation(line: 224, column: 37, scope: !2653)
!2663 = !DILocalVariable(name: "map", arg: 2, scope: !2653, file: !1117, line: 224, type: !2657)
!2664 = !DILocation(line: 224, column: 54, scope: !2653)
!2665 = !DILocalVariable(name: "start_bit", arg: 3, scope: !2653, file: !1117, line: 225, type: !7)
!2666 = !DILocation(line: 225, column: 15, scope: !2653)
!2667 = !DILocalVariable(name: "bit_no", arg: 4, scope: !2653, file: !1117, line: 225, type: !2660)
!2668 = !DILocation(line: 225, column: 36, scope: !2653)
!2669 = !DILocation(line: 227, column: 14, scope: !2653)
!2670 = !DILocation(line: 227, column: 19, scope: !2653)
!2671 = !DILocation(line: 227, column: 3, scope: !2653)
!2672 = !DILocation(line: 227, column: 7, scope: !2653)
!2673 = !DILocation(line: 227, column: 12, scope: !2653)
!2674 = !DILocation(line: 228, column: 3, scope: !2653)
!2675 = !DILocation(line: 228, column: 7, scope: !2653)
!2676 = !DILocation(line: 228, column: 12, scope: !2653)
!2677 = !DILocation(line: 231, column: 3, scope: !2653)
!2678 = !DILocation(line: 233, column: 12, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2680, file: !1117, line: 233, column: 11)
!2680 = distinct !DILexicalBlock(scope: !2653, file: !1117, line: 232, column: 5)
!2681 = !DILocation(line: 233, column: 16, scope: !2679)
!2682 = !DILocation(line: 233, column: 11, scope: !2680)
!2683 = !DILocation(line: 235, column: 4, scope: !2684)
!2684 = distinct !DILexicalBlock(scope: !2679, file: !1117, line: 234, column: 2)
!2685 = !DILocation(line: 235, column: 8, scope: !2684)
!2686 = !DILocation(line: 235, column: 13, scope: !2684)
!2687 = !DILocation(line: 236, column: 4, scope: !2684)
!2688 = !DILocation(line: 239, column: 11, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2680, file: !1117, line: 239, column: 11)
!2690 = !DILocation(line: 239, column: 15, scope: !2689)
!2691 = !DILocation(line: 239, column: 21, scope: !2689)
!2692 = !DILocation(line: 239, column: 29, scope: !2689)
!2693 = !DILocation(line: 239, column: 39, scope: !2689)
!2694 = !DILocation(line: 239, column: 26, scope: !2689)
!2695 = !DILocation(line: 239, column: 11, scope: !2680)
!2696 = !DILocation(line: 240, column: 2, scope: !2689)
!2697 = !DILocation(line: 241, column: 18, scope: !2680)
!2698 = !DILocation(line: 241, column: 22, scope: !2680)
!2699 = !DILocation(line: 241, column: 28, scope: !2680)
!2700 = !DILocation(line: 241, column: 7, scope: !2680)
!2701 = !DILocation(line: 241, column: 11, scope: !2680)
!2702 = !DILocation(line: 241, column: 16, scope: !2680)
!2703 = distinct !{!2703, !2677, !2704}
!2704 = !DILocation(line: 242, column: 5, scope: !2653)
!2705 = !DILocation(line: 245, column: 7, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !2653, file: !1117, line: 245, column: 7)
!2707 = !DILocation(line: 245, column: 11, scope: !2706)
!2708 = !DILocation(line: 245, column: 17, scope: !2706)
!2709 = !DILocation(line: 245, column: 25, scope: !2706)
!2710 = !DILocation(line: 245, column: 35, scope: !2706)
!2711 = !DILocation(line: 245, column: 22, scope: !2706)
!2712 = !DILocation(line: 245, column: 7, scope: !2653)
!2713 = !DILocation(line: 246, column: 17, scope: !2706)
!2714 = !DILocation(line: 246, column: 21, scope: !2706)
!2715 = !DILocation(line: 246, column: 27, scope: !2706)
!2716 = !DILocation(line: 246, column: 32, scope: !2706)
!2717 = !DILocation(line: 246, column: 15, scope: !2706)
!2718 = !DILocation(line: 246, column: 5, scope: !2706)
!2719 = !DILocation(line: 249, column: 17, scope: !2653)
!2720 = !DILocation(line: 249, column: 27, scope: !2653)
!2721 = !DILocation(line: 249, column: 46, scope: !2653)
!2722 = !DILocation(line: 249, column: 3, scope: !2653)
!2723 = !DILocation(line: 249, column: 7, scope: !2653)
!2724 = !DILocation(line: 249, column: 15, scope: !2653)
!2725 = !DILocation(line: 250, column: 14, scope: !2653)
!2726 = !DILocation(line: 250, column: 18, scope: !2653)
!2727 = !DILocation(line: 250, column: 24, scope: !2653)
!2728 = !DILocation(line: 250, column: 29, scope: !2653)
!2729 = !DILocation(line: 250, column: 33, scope: !2653)
!2730 = !DILocation(line: 250, column: 3, scope: !2653)
!2731 = !DILocation(line: 250, column: 7, scope: !2653)
!2732 = !DILocation(line: 250, column: 12, scope: !2653)
!2733 = !DILocation(line: 251, column: 16, scope: !2653)
!2734 = !DILocation(line: 251, column: 26, scope: !2653)
!2735 = !DILocation(line: 251, column: 3, scope: !2653)
!2736 = !DILocation(line: 251, column: 7, scope: !2653)
!2737 = !DILocation(line: 251, column: 12, scope: !2653)
!2738 = !DILocation(line: 257, column: 17, scope: !2653)
!2739 = !DILocation(line: 257, column: 21, scope: !2653)
!2740 = !DILocation(line: 257, column: 16, scope: !2653)
!2741 = !DILocation(line: 257, column: 13, scope: !2653)
!2742 = !DILocation(line: 259, column: 13, scope: !2653)
!2743 = !DILocation(line: 259, column: 4, scope: !2653)
!2744 = !DILocation(line: 259, column: 11, scope: !2653)
!2745 = !DILocation(line: 260, column: 1, scope: !2653)
!2746 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1117, file: !1117, line: 393, type: !2747, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2747 = !DISubroutineType(types: !2748)
!2748 = !{!1007, !2656, !2660}
!2749 = !DILocalVariable(name: "bi", arg: 1, scope: !2746, file: !1117, line: 393, type: !2656)
!2750 = !DILocation(line: 393, column: 32, scope: !2746)
!2751 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2746, file: !1117, line: 393, type: !2660)
!2752 = !DILocation(line: 393, column: 46, scope: !2746)
!2753 = !DILocation(line: 396, column: 7, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2746, file: !1117, line: 396, column: 7)
!2755 = !DILocation(line: 396, column: 11, scope: !2754)
!2756 = !DILocation(line: 396, column: 7, scope: !2746)
!2757 = !DILocation(line: 397, column: 5, scope: !2754)
!2758 = !DILabel(scope: !2759, name: "next_bit", file: !1117, line: 398)
!2759 = distinct !DILexicalBlock(scope: !2754, file: !1117, line: 397, column: 5)
!2760 = !DILocation(line: 398, column: 5, scope: !2759)
!2761 = !DILocation(line: 399, column: 7, scope: !2759)
!2762 = !DILocation(line: 399, column: 16, scope: !2759)
!2763 = !DILocation(line: 399, column: 20, scope: !2759)
!2764 = !DILocation(line: 399, column: 25, scope: !2759)
!2765 = !DILocation(line: 399, column: 14, scope: !2759)
!2766 = !DILocation(line: 401, column: 4, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2759, file: !1117, line: 400, column: 2)
!2768 = !DILocation(line: 401, column: 8, scope: !2767)
!2769 = !DILocation(line: 401, column: 13, scope: !2767)
!2770 = !DILocation(line: 402, column: 5, scope: !2767)
!2771 = !DILocation(line: 402, column: 12, scope: !2767)
!2772 = distinct !{!2772, !2761, !2773}
!2773 = !DILocation(line: 403, column: 2, scope: !2759)
!2774 = !DILocation(line: 404, column: 7, scope: !2759)
!2775 = !DILocation(line: 410, column: 16, scope: !2746)
!2776 = !DILocation(line: 410, column: 15, scope: !2746)
!2777 = !DILocation(line: 410, column: 23, scope: !2746)
!2778 = !DILocation(line: 410, column: 42, scope: !2746)
!2779 = !DILocation(line: 411, column: 7, scope: !2746)
!2780 = !DILocation(line: 411, column: 26, scope: !2746)
!2781 = !DILocation(line: 410, column: 4, scope: !2746)
!2782 = !DILocation(line: 410, column: 11, scope: !2746)
!2783 = !DILocation(line: 412, column: 3, scope: !2746)
!2784 = !DILocation(line: 412, column: 7, scope: !2746)
!2785 = !DILocation(line: 412, column: 14, scope: !2746)
!2786 = !DILocation(line: 414, column: 3, scope: !2746)
!2787 = !DILocation(line: 417, column: 7, scope: !2788)
!2788 = distinct !DILexicalBlock(scope: !2746, file: !1117, line: 415, column: 5)
!2789 = !DILocation(line: 417, column: 14, scope: !2788)
!2790 = !DILocation(line: 417, column: 18, scope: !2788)
!2791 = !DILocation(line: 417, column: 26, scope: !2788)
!2792 = !DILocation(line: 419, column: 15, scope: !2793)
!2793 = distinct !DILexicalBlock(scope: !2788, file: !1117, line: 418, column: 2)
!2794 = !DILocation(line: 419, column: 19, scope: !2793)
!2795 = !DILocation(line: 419, column: 25, scope: !2793)
!2796 = !DILocation(line: 419, column: 30, scope: !2793)
!2797 = !DILocation(line: 419, column: 34, scope: !2793)
!2798 = !DILocation(line: 419, column: 4, scope: !2793)
!2799 = !DILocation(line: 419, column: 8, scope: !2793)
!2800 = !DILocation(line: 419, column: 13, scope: !2793)
!2801 = !DILocation(line: 420, column: 8, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2793, file: !1117, line: 420, column: 8)
!2803 = !DILocation(line: 420, column: 12, scope: !2802)
!2804 = !DILocation(line: 420, column: 8, scope: !2793)
!2805 = !DILocation(line: 421, column: 6, scope: !2802)
!2806 = !DILocation(line: 422, column: 5, scope: !2793)
!2807 = !DILocation(line: 422, column: 12, scope: !2793)
!2808 = !DILocation(line: 423, column: 4, scope: !2793)
!2809 = !DILocation(line: 423, column: 8, scope: !2793)
!2810 = !DILocation(line: 423, column: 15, scope: !2793)
!2811 = distinct !{!2811, !2787, !2812}
!2812 = !DILocation(line: 424, column: 2, scope: !2788)
!2813 = !DILocation(line: 427, column: 18, scope: !2788)
!2814 = !DILocation(line: 427, column: 22, scope: !2788)
!2815 = !DILocation(line: 427, column: 28, scope: !2788)
!2816 = !DILocation(line: 427, column: 7, scope: !2788)
!2817 = !DILocation(line: 427, column: 11, scope: !2788)
!2818 = !DILocation(line: 427, column: 16, scope: !2788)
!2819 = !DILocation(line: 428, column: 12, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2788, file: !1117, line: 428, column: 11)
!2821 = !DILocation(line: 428, column: 16, scope: !2820)
!2822 = !DILocation(line: 428, column: 11, scope: !2788)
!2823 = !DILocation(line: 429, column: 2, scope: !2820)
!2824 = !DILocation(line: 430, column: 17, scope: !2788)
!2825 = !DILocation(line: 430, column: 21, scope: !2788)
!2826 = !DILocation(line: 430, column: 27, scope: !2788)
!2827 = !DILocation(line: 430, column: 32, scope: !2788)
!2828 = !DILocation(line: 430, column: 8, scope: !2788)
!2829 = !DILocation(line: 430, column: 15, scope: !2788)
!2830 = !DILocation(line: 431, column: 7, scope: !2788)
!2831 = !DILocation(line: 431, column: 11, scope: !2788)
!2832 = !DILocation(line: 431, column: 19, scope: !2788)
!2833 = distinct !{!2833, !2786, !2834}
!2834 = !DILocation(line: 432, column: 5, scope: !2746)
!2835 = !DILocation(line: 433, column: 1, scope: !2746)
!2836 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !343, file: !343, line: 281, type: !2837, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2837 = !DISubroutineType(types: !2838)
!2838 = !{!825, !2839, !7}
!2839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2840, size: 64)
!2840 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1370)
!2841 = !DILocalVariable(name: "vec_", arg: 1, scope: !2836, file: !343, line: 281, type: !2839)
!2842 = !DILocation(line: 281, column: 1, scope: !2836)
!2843 = !DILocalVariable(name: "ix_", arg: 2, scope: !2836, file: !343, line: 281, type: !7)
!2844 = !DILocation(line: 0, scope: !2836)
!2845 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1117, file: !1117, line: 382, type: !2846, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2846 = !DISubroutineType(types: !2847)
!2847 = !{null, !2656, !2660}
!2848 = !DILocalVariable(name: "bi", arg: 1, scope: !2845, file: !1117, line: 382, type: !2656)
!2849 = !DILocation(line: 382, column: 33, scope: !2845)
!2850 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2845, file: !1117, line: 382, type: !2660)
!2851 = !DILocation(line: 382, column: 47, scope: !2845)
!2852 = !DILocation(line: 384, column: 3, scope: !2845)
!2853 = !DILocation(line: 384, column: 7, scope: !2845)
!2854 = !DILocation(line: 384, column: 12, scope: !2845)
!2855 = !DILocation(line: 385, column: 4, scope: !2845)
!2856 = !DILocation(line: 385, column: 11, scope: !2845)
!2857 = !DILocation(line: 386, column: 1, scope: !2845)
!2858 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !2859, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2859 = !DISubroutineType(types: !2860)
!2860 = !{!2601, !2606}
!2861 = !DILocalVariable(name: "ev", arg: 1, scope: !2858, file: !343, line: 696, type: !2606)
!2862 = !DILocation(line: 696, column: 28, scope: !2858)
!2863 = !DILocalVariable(name: "i", scope: !2858, file: !343, line: 698, type: !2601)
!2864 = !DILocation(line: 698, column: 17, scope: !2858)
!2865 = !DILocation(line: 700, column: 5, scope: !2858)
!2866 = !DILocation(line: 700, column: 11, scope: !2858)
!2867 = !DILocation(line: 701, column: 17, scope: !2858)
!2868 = !DILocation(line: 701, column: 5, scope: !2858)
!2869 = !DILocation(line: 701, column: 15, scope: !2858)
!2870 = !DILocation(line: 703, column: 3, scope: !2858)
!2871 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !2872, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2872 = !DISubroutineType(types: !2873)
!2873 = !{!1007, !2601, !2874}
!2874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !843, size: 64)
!2875 = !DILocalVariable(name: "ei", arg: 1, scope: !2871, file: !343, line: 771, type: !2601)
!2876 = !DILocation(line: 771, column: 24, scope: !2871)
!2877 = !DILocalVariable(name: "p", arg: 2, scope: !2871, file: !343, line: 771, type: !2874)
!2878 = !DILocation(line: 771, column: 34, scope: !2871)
!2879 = !DILocation(line: 773, column: 8, scope: !2880)
!2880 = distinct !DILexicalBlock(scope: !2871, file: !343, line: 773, column: 7)
!2881 = !DILocation(line: 773, column: 7, scope: !2871)
!2882 = !DILocation(line: 775, column: 12, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2880, file: !343, line: 774, column: 5)
!2884 = !DILocation(line: 775, column: 8, scope: !2883)
!2885 = !DILocation(line: 775, column: 10, scope: !2883)
!2886 = !DILocation(line: 776, column: 7, scope: !2883)
!2887 = !DILocation(line: 780, column: 8, scope: !2888)
!2888 = distinct !DILexicalBlock(scope: !2880, file: !343, line: 779, column: 5)
!2889 = !DILocation(line: 780, column: 10, scope: !2888)
!2890 = !DILocation(line: 781, column: 7, scope: !2888)
!2891 = !DILocation(line: 783, column: 1, scope: !2871)
!2892 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !2893, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2893 = !DISubroutineType(types: !2894)
!2894 = !{null, !2895}
!2895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2601, size: 64)
!2896 = !DILocalVariable(name: "i", arg: 1, scope: !2892, file: !343, line: 736, type: !2895)
!2897 = !DILocation(line: 736, column: 25, scope: !2892)
!2898 = !DILocation(line: 738, column: 3, scope: !2892)
!2899 = !DILocation(line: 739, column: 3, scope: !2892)
!2900 = !DILocation(line: 739, column: 6, scope: !2892)
!2901 = !DILocation(line: 739, column: 11, scope: !2892)
!2902 = !DILocation(line: 740, column: 1, scope: !2892)
!2903 = distinct !DISubprogram(name: "dump_decl_set", scope: !3, file: !3, line: 1471, type: !2904, scopeLine: 1472, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2904 = !DISubroutineType(types: !2905)
!2905 = !{null, !2235, !1480}
!2906 = !DILocalVariable(name: "file", arg: 1, scope: !2903, file: !3, line: 1471, type: !2235)
!2907 = !DILocation(line: 1471, column: 22, scope: !2903)
!2908 = !DILocalVariable(name: "set", arg: 2, scope: !2903, file: !3, line: 1471, type: !1480)
!2909 = !DILocation(line: 1471, column: 35, scope: !2903)
!2910 = !DILocation(line: 1473, column: 7, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2903, file: !3, line: 1473, column: 7)
!2912 = !DILocation(line: 1473, column: 7, scope: !2903)
!2913 = !DILocalVariable(name: "bi", scope: !2914, file: !3, line: 1475, type: !2567)
!2914 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 1474, column: 5)
!2915 = !DILocation(line: 1475, column: 23, scope: !2914)
!2916 = !DILocalVariable(name: "i", scope: !2914, file: !3, line: 1476, type: !7)
!2917 = !DILocation(line: 1476, column: 16, scope: !2914)
!2918 = !DILocation(line: 1478, column: 16, scope: !2914)
!2919 = !DILocation(line: 1478, column: 7, scope: !2914)
!2920 = !DILocation(line: 1480, column: 7, scope: !2921)
!2921 = distinct !DILexicalBlock(scope: !2914, file: !3, line: 1480, column: 7)
!2922 = !DILocation(line: 1480, column: 7, scope: !2923)
!2923 = distinct !DILexicalBlock(scope: !2921, file: !3, line: 1480, column: 7)
!2924 = !DILocation(line: 1482, column: 24, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2923, file: !3, line: 1481, column: 2)
!2926 = !DILocation(line: 1482, column: 30, scope: !2925)
!2927 = !DILocation(line: 1482, column: 4, scope: !2925)
!2928 = !DILocation(line: 1483, column: 13, scope: !2925)
!2929 = !DILocation(line: 1483, column: 4, scope: !2925)
!2930 = !DILocation(line: 1484, column: 2, scope: !2925)
!2931 = distinct !{!2931, !2920, !2932}
!2932 = !DILocation(line: 1484, column: 2, scope: !2921)
!2933 = !DILocation(line: 1486, column: 16, scope: !2914)
!2934 = !DILocation(line: 1486, column: 7, scope: !2914)
!2935 = !DILocation(line: 1487, column: 5, scope: !2914)
!2936 = !DILocation(line: 1489, column: 14, scope: !2911)
!2937 = !DILocation(line: 1489, column: 5, scope: !2911)
!2938 = !DILocation(line: 1490, column: 1, scope: !2903)
!2939 = distinct !DISubprogram(name: "debug_decl_set", scope: !3, file: !3, line: 1496, type: !2940, scopeLine: 1497, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2940 = !DISubroutineType(types: !2941)
!2941 = !{null, !1480}
!2942 = !DILocalVariable(name: "set", arg: 1, scope: !2939, file: !3, line: 1496, type: !1480)
!2943 = !DILocation(line: 1496, column: 24, scope: !2939)
!2944 = !DILocation(line: 1498, column: 18, scope: !2939)
!2945 = !DILocation(line: 1498, column: 26, scope: !2939)
!2946 = !DILocation(line: 1498, column: 3, scope: !2939)
!2947 = !DILocation(line: 1499, column: 12, scope: !2939)
!2948 = !DILocation(line: 1499, column: 3, scope: !2939)
!2949 = !DILocation(line: 1500, column: 1, scope: !2939)
!2950 = distinct !DISubprogram(name: "dump_defs_stack", scope: !3, file: !3, line: 1509, type: !2951, scopeLine: 1510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!2951 = !DISubroutineType(types: !2952)
!2952 = !{null, !2235, !984}
!2953 = !DILocalVariable(name: "file", arg: 1, scope: !2950, file: !3, line: 1509, type: !2235)
!2954 = !DILocation(line: 1509, column: 24, scope: !2950)
!2955 = !DILocalVariable(name: "n", arg: 2, scope: !2950, file: !3, line: 1509, type: !984)
!2956 = !DILocation(line: 1509, column: 34, scope: !2950)
!2957 = !DILocalVariable(name: "i", scope: !2950, file: !3, line: 1511, type: !984)
!2958 = !DILocation(line: 1511, column: 7, scope: !2950)
!2959 = !DILocalVariable(name: "j", scope: !2950, file: !3, line: 1511, type: !984)
!2960 = !DILocation(line: 1511, column: 10, scope: !2950)
!2961 = !DILocation(line: 1513, column: 12, scope: !2950)
!2962 = !DILocation(line: 1513, column: 3, scope: !2950)
!2963 = !DILocation(line: 1514, column: 7, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 1514, column: 7)
!2965 = !DILocation(line: 1514, column: 9, scope: !2964)
!2966 = !DILocation(line: 1514, column: 7, scope: !2950)
!2967 = !DILocation(line: 1515, column: 14, scope: !2964)
!2968 = !DILocation(line: 1515, column: 42, scope: !2964)
!2969 = !DILocation(line: 1515, column: 5, scope: !2964)
!2970 = !DILocation(line: 1516, column: 12, scope: !2950)
!2971 = !DILocation(line: 1516, column: 3, scope: !2950)
!2972 = !DILocation(line: 1518, column: 5, scope: !2950)
!2973 = !DILocation(line: 1519, column: 12, scope: !2950)
!2974 = !DILocation(line: 1519, column: 48, scope: !2950)
!2975 = !DILocation(line: 1519, column: 3, scope: !2950)
!2976 = !DILocation(line: 1520, column: 18, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 1520, column: 3)
!2978 = !DILocation(line: 1520, column: 54, scope: !2977)
!2979 = !DILocation(line: 1520, column: 10, scope: !2977)
!2980 = !DILocation(line: 1520, column: 8, scope: !2977)
!2981 = !DILocation(line: 1520, column: 59, scope: !2982)
!2982 = distinct !DILexicalBlock(scope: !2977, file: !3, line: 1520, column: 3)
!2983 = !DILocation(line: 1520, column: 61, scope: !2982)
!2984 = !DILocation(line: 1520, column: 3, scope: !2977)
!2985 = !DILocalVariable(name: "name", scope: !2986, file: !3, line: 1522, type: !888)
!2986 = distinct !DILexicalBlock(scope: !2982, file: !3, line: 1521, column: 5)
!2987 = !DILocation(line: 1522, column: 12, scope: !2986)
!2988 = !DILocalVariable(name: "var", scope: !2986, file: !3, line: 1522, type: !888)
!2989 = !DILocation(line: 1522, column: 18, scope: !2986)
!2990 = !DILocation(line: 1524, column: 14, scope: !2986)
!2991 = !DILocation(line: 1524, column: 12, scope: !2986)
!2992 = !DILocation(line: 1525, column: 11, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 1525, column: 11)
!2994 = !DILocation(line: 1525, column: 16, scope: !2993)
!2995 = !DILocation(line: 1525, column: 11, scope: !2986)
!2996 = !DILocation(line: 1527, column: 5, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2993, file: !3, line: 1526, column: 2)
!2998 = !DILocation(line: 1528, column: 8, scope: !2999)
!2999 = distinct !DILexicalBlock(scope: !2997, file: !3, line: 1528, column: 8)
!3000 = !DILocation(line: 1528, column: 10, scope: !2999)
!3001 = !DILocation(line: 1528, column: 14, scope: !2999)
!3002 = !DILocation(line: 1528, column: 17, scope: !2999)
!3003 = !DILocation(line: 1528, column: 21, scope: !2999)
!3004 = !DILocation(line: 1528, column: 19, scope: !2999)
!3005 = !DILocation(line: 1528, column: 8, scope: !2997)
!3006 = !DILocation(line: 1529, column: 6, scope: !2999)
!3007 = !DILocation(line: 1530, column: 13, scope: !2997)
!3008 = !DILocation(line: 1530, column: 35, scope: !2997)
!3009 = !DILocation(line: 1530, column: 4, scope: !2997)
!3010 = !DILocation(line: 1531, column: 4, scope: !2997)
!3011 = !DILocation(line: 1534, column: 11, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 1534, column: 11)
!3013 = !DILocation(line: 1534, column: 11, scope: !2986)
!3014 = !DILocation(line: 1536, column: 10, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3012, file: !3, line: 1535, column: 2)
!3016 = !DILocation(line: 1536, column: 8, scope: !3015)
!3017 = !DILocation(line: 1537, column: 9, scope: !3015)
!3018 = !DILocation(line: 1538, column: 2, scope: !3015)
!3019 = !DILocation(line: 1541, column: 10, scope: !3020)
!3020 = distinct !DILexicalBlock(scope: !3012, file: !3, line: 1540, column: 2)
!3021 = !DILocation(line: 1541, column: 8, scope: !3020)
!3022 = !DILocation(line: 1542, column: 24, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3020, file: !3, line: 1542, column: 8)
!3024 = !DILocation(line: 1542, column: 9, scope: !3023)
!3025 = !DILocation(line: 1542, column: 8, scope: !3020)
!3026 = !DILocation(line: 1544, column: 9, scope: !3027)
!3027 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 1543, column: 6)
!3028 = !DILocation(line: 1545, column: 14, scope: !3027)
!3029 = !DILocation(line: 1545, column: 12, scope: !3027)
!3030 = !DILocation(line: 1546, column: 6, scope: !3027)
!3031 = !DILocation(line: 1549, column: 16, scope: !2986)
!3032 = !DILocation(line: 1549, column: 7, scope: !2986)
!3033 = !DILocation(line: 1550, column: 27, scope: !2986)
!3034 = !DILocation(line: 1550, column: 33, scope: !2986)
!3035 = !DILocation(line: 1550, column: 7, scope: !2986)
!3036 = !DILocation(line: 1551, column: 16, scope: !2986)
!3037 = !DILocation(line: 1551, column: 7, scope: !2986)
!3038 = !DILocation(line: 1552, column: 11, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 1552, column: 11)
!3040 = !DILocation(line: 1552, column: 11, scope: !2986)
!3041 = !DILocation(line: 1553, column: 22, scope: !3039)
!3042 = !DILocation(line: 1553, column: 28, scope: !3039)
!3043 = !DILocation(line: 1553, column: 2, scope: !3039)
!3044 = !DILocation(line: 1555, column: 11, scope: !3039)
!3045 = !DILocation(line: 1555, column: 2, scope: !3039)
!3046 = !DILocation(line: 1556, column: 16, scope: !2986)
!3047 = !DILocation(line: 1556, column: 7, scope: !2986)
!3048 = !DILocation(line: 1557, column: 5, scope: !2986)
!3049 = !DILocation(line: 1520, column: 68, scope: !2982)
!3050 = !DILocation(line: 1520, column: 3, scope: !2982)
!3051 = distinct !{!3051, !2984, !3052}
!3052 = !DILocation(line: 1557, column: 5, scope: !2977)
!3053 = !DILocation(line: 1558, column: 1, scope: !2950)
!3054 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !3055, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3055 = !DISubroutineType(types: !3056)
!3056 = !{!7, !3057}
!3057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3058, size: 64)
!3058 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1461)
!3059 = !DILocalVariable(name: "vec_", arg: 1, scope: !3054, file: !135, line: 182, type: !3057)
!3060 = !DILocation(line: 182, column: 1, scope: !3054)
!3061 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !3062, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3062 = !DISubroutineType(types: !3063)
!3063 = !{!888, !3057, !7}
!3064 = !DILocalVariable(name: "vec_", arg: 1, scope: !3061, file: !135, line: 182, type: !3057)
!3065 = !DILocation(line: 182, column: 1, scope: !3061)
!3066 = !DILocalVariable(name: "ix_", arg: 2, scope: !3061, file: !135, line: 182, type: !7)
!3067 = !DILocation(line: 0, scope: !3061)
!3068 = distinct !DISubprogram(name: "debug_defs_stack", scope: !3, file: !3, line: 1567, type: !3069, scopeLine: 1568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{null, !984}
!3071 = !DILocalVariable(name: "n", arg: 1, scope: !3068, file: !3, line: 1567, type: !984)
!3072 = !DILocation(line: 1567, column: 23, scope: !3068)
!3073 = !DILocation(line: 1569, column: 20, scope: !3068)
!3074 = !DILocation(line: 1569, column: 28, scope: !3068)
!3075 = !DILocation(line: 1569, column: 3, scope: !3068)
!3076 = !DILocation(line: 1570, column: 1, scope: !3068)
!3077 = distinct !DISubprogram(name: "dump_currdefs", scope: !3, file: !3, line: 1576, type: !3078, scopeLine: 1577, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3078 = !DISubroutineType(types: !3079)
!3079 = !{null, !2235}
!3080 = !DILocalVariable(name: "file", arg: 1, scope: !3077, file: !3, line: 1576, type: !2235)
!3081 = !DILocation(line: 1576, column: 22, scope: !3077)
!3082 = !DILocalVariable(name: "i", scope: !3077, file: !3, line: 1578, type: !3083)
!3083 = !DIDerivedType(tag: DW_TAG_typedef, name: "referenced_var_iterator", file: !634, line: 336, baseType: !3084)
!3084 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !634, line: 333, size: 192, elements: !3085)
!3085 = !{!3086}
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "hti", scope: !3084, file: !634, line: 335, baseType: !3087, size: 192)
!3087 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_iterator", file: !634, line: 98, baseType: !3088)
!3088 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !634, line: 93, size: 192, elements: !3089)
!3089 = !{!3090, !3091, !3092}
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "htab", scope: !3088, file: !634, line: 95, baseType: !1394, size: 64)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !3088, file: !634, line: 96, baseType: !1415, size: 64, offset: 64)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3088, file: !634, line: 97, baseType: !1415, size: 64, offset: 128)
!3093 = !DILocation(line: 1578, column: 27, scope: !3077)
!3094 = !DILocalVariable(name: "var", scope: !3077, file: !3, line: 1579, type: !888)
!3095 = !DILocation(line: 1579, column: 8, scope: !3077)
!3096 = !DILocation(line: 1581, column: 12, scope: !3077)
!3097 = !DILocation(line: 1581, column: 3, scope: !3077)
!3098 = !DILocation(line: 1582, column: 3, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 1582, column: 3)
!3100 = !DILocation(line: 1582, column: 3, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 1582, column: 3)
!3102 = !DILocation(line: 1583, column: 9, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 1583, column: 9)
!3104 = !DILocation(line: 1583, column: 31, scope: !3103)
!3105 = !DILocation(line: 1584, column: 2, scope: !3103)
!3106 = !DILocation(line: 1584, column: 19, scope: !3103)
!3107 = !DILocation(line: 1584, column: 42, scope: !3103)
!3108 = !DILocation(line: 1584, column: 5, scope: !3103)
!3109 = !DILocation(line: 1583, column: 9, scope: !3101)
!3110 = !DILocation(line: 1586, column: 11, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 1585, column: 7)
!3112 = !DILocation(line: 1586, column: 2, scope: !3111)
!3113 = !DILocation(line: 1587, column: 22, scope: !3111)
!3114 = !DILocation(line: 1587, column: 28, scope: !3111)
!3115 = !DILocation(line: 1587, column: 2, scope: !3111)
!3116 = !DILocation(line: 1588, column: 11, scope: !3111)
!3117 = !DILocation(line: 1588, column: 2, scope: !3111)
!3118 = !DILocation(line: 1589, column: 23, scope: !3119)
!3119 = distinct !DILexicalBlock(scope: !3111, file: !3, line: 1589, column: 6)
!3120 = !DILocation(line: 1589, column: 6, scope: !3119)
!3121 = !DILocation(line: 1589, column: 6, scope: !3111)
!3122 = !DILocation(line: 1590, column: 24, scope: !3119)
!3123 = !DILocation(line: 1590, column: 47, scope: !3119)
!3124 = !DILocation(line: 1590, column: 30, scope: !3119)
!3125 = !DILocation(line: 1590, column: 4, scope: !3119)
!3126 = !DILocation(line: 1592, column: 13, scope: !3119)
!3127 = !DILocation(line: 1592, column: 4, scope: !3119)
!3128 = !DILocation(line: 1593, column: 11, scope: !3111)
!3129 = !DILocation(line: 1593, column: 2, scope: !3111)
!3130 = !DILocation(line: 1594, column: 7, scope: !3111)
!3131 = !DILocation(line: 1584, column: 56, scope: !3103)
!3132 = distinct !{!3132, !3098, !3133}
!3133 = !DILocation(line: 1594, column: 7, scope: !3099)
!3134 = !DILocation(line: 1595, column: 1, scope: !3077)
!3135 = distinct !DISubprogram(name: "first_referenced_var", scope: !2511, file: !2511, line: 105, type: !3136, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3136 = !DISubroutineType(types: !3137)
!3137 = !{!888, !3138}
!3138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3083, size: 64)
!3139 = !DILocalVariable(name: "iter", arg: 1, scope: !3135, file: !2511, line: 105, type: !3138)
!3140 = !DILocation(line: 105, column: 48, scope: !3135)
!3141 = !DILocation(line: 107, column: 38, scope: !3135)
!3142 = !DILocation(line: 107, column: 44, scope: !3135)
!3143 = !DILocation(line: 108, column: 33, scope: !3135)
!3144 = !DILocation(line: 108, column: 9, scope: !3135)
!3145 = !DILocation(line: 107, column: 17, scope: !3135)
!3146 = !DILocation(line: 107, column: 10, scope: !3135)
!3147 = !DILocation(line: 107, column: 3, scope: !3135)
!3148 = distinct !DISubprogram(name: "end_referenced_vars_p", scope: !2511, file: !2511, line: 115, type: !3149, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3149 = !DISubroutineType(types: !3150)
!3150 = !{!1007, !3151}
!3151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3152, size: 64)
!3152 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3083)
!3153 = !DILocalVariable(name: "iter", arg: 1, scope: !3148, file: !2511, line: 115, type: !3151)
!3154 = !DILocation(line: 115, column: 55, scope: !3148)
!3155 = !DILocation(line: 117, column: 23, scope: !3148)
!3156 = !DILocation(line: 117, column: 29, scope: !3148)
!3157 = !DILocation(line: 117, column: 10, scope: !3148)
!3158 = !DILocation(line: 117, column: 3, scope: !3148)
!3159 = distinct !DISubprogram(name: "next_referenced_var", scope: !2511, file: !2511, line: 124, type: !3136, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3160 = !DILocalVariable(name: "iter", arg: 1, scope: !3159, file: !2511, line: 124, type: !3138)
!3161 = !DILocation(line: 124, column: 47, scope: !3159)
!3162 = !DILocation(line: 126, column: 37, scope: !3159)
!3163 = !DILocation(line: 126, column: 43, scope: !3159)
!3164 = !DILocation(line: 126, column: 17, scope: !3159)
!3165 = !DILocation(line: 126, column: 10, scope: !3159)
!3166 = !DILocation(line: 126, column: 3, scope: !3159)
!3167 = distinct !DISubprogram(name: "debug_currdefs", scope: !3, file: !3, line: 1601, type: !3168, scopeLine: 1602, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3168 = !DISubroutineType(types: !3169)
!3169 = !{null}
!3170 = !DILocation(line: 1603, column: 18, scope: !3167)
!3171 = !DILocation(line: 1603, column: 3, scope: !3167)
!3172 = !DILocation(line: 1604, column: 1, scope: !3167)
!3173 = distinct !DISubprogram(name: "dump_tree_ssa", scope: !3, file: !3, line: 1610, type: !3078, scopeLine: 1611, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3174 = !DILocalVariable(name: "file", arg: 1, scope: !3173, file: !3, line: 1610, type: !2235)
!3175 = !DILocation(line: 1610, column: 22, scope: !3173)
!3176 = !DILocalVariable(name: "funcname", scope: !3173, file: !3, line: 1612, type: !1087)
!3177 = !DILocation(line: 1612, column: 15, scope: !3173)
!3178 = !DILocation(line: 1613, column: 18, scope: !3173)
!3179 = !DILocation(line: 1613, column: 39, scope: !3173)
!3180 = !DILocation(line: 1613, column: 7, scope: !3173)
!3181 = !DILocation(line: 1615, column: 12, scope: !3173)
!3182 = !DILocation(line: 1615, column: 57, scope: !3173)
!3183 = !DILocation(line: 1615, column: 3, scope: !3173)
!3184 = !DILocation(line: 1617, column: 20, scope: !3173)
!3185 = !DILocation(line: 1617, column: 3, scope: !3173)
!3186 = !DILocation(line: 1618, column: 20, scope: !3173)
!3187 = !DILocation(line: 1618, column: 3, scope: !3173)
!3188 = !DILocation(line: 1619, column: 18, scope: !3173)
!3189 = !DILocation(line: 1619, column: 3, scope: !3173)
!3190 = !DILocation(line: 1620, column: 24, scope: !3173)
!3191 = !DILocation(line: 1620, column: 3, scope: !3173)
!3192 = !DILocation(line: 1621, column: 1, scope: !3173)
!3193 = distinct !DISubprogram(name: "dump_def_blocks", scope: !3, file: !3, line: 1730, type: !3078, scopeLine: 1731, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3194 = !DILocalVariable(name: "file", arg: 1, scope: !3193, file: !3, line: 1730, type: !2235)
!3195 = !DILocation(line: 1730, column: 24, scope: !3193)
!3196 = !DILocation(line: 1732, column: 12, scope: !3193)
!3197 = !DILocation(line: 1732, column: 3, scope: !3193)
!3198 = !DILocation(line: 1733, column: 7, scope: !3199)
!3199 = distinct !DILexicalBlock(scope: !3193, file: !3, line: 1733, column: 7)
!3200 = !DILocation(line: 1733, column: 7, scope: !3193)
!3201 = !DILocation(line: 1734, column: 20, scope: !3199)
!3202 = !DILocation(line: 1734, column: 52, scope: !3199)
!3203 = !DILocation(line: 1734, column: 5, scope: !3199)
!3204 = !DILocation(line: 1735, column: 1, scope: !3193)
!3205 = distinct !DISubprogram(name: "dump_tree_ssa_stats", scope: !3, file: !3, line: 1648, type: !3078, scopeLine: 1649, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3206 = !DILocalVariable(name: "file", arg: 1, scope: !3205, file: !3, line: 1648, type: !2235)
!3207 = !DILocation(line: 1648, column: 28, scope: !3205)
!3208 = !DILocation(line: 1650, column: 7, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1650, column: 7)
!3210 = !DILocation(line: 1650, column: 18, scope: !3209)
!3211 = !DILocation(line: 1650, column: 21, scope: !3209)
!3212 = !DILocation(line: 1650, column: 7, scope: !3205)
!3213 = !DILocation(line: 1651, column: 14, scope: !3209)
!3214 = !DILocation(line: 1651, column: 5, scope: !3209)
!3215 = !DILocation(line: 1653, column: 7, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1653, column: 7)
!3217 = !DILocation(line: 1653, column: 7, scope: !3205)
!3218 = !DILocation(line: 1655, column: 16, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 1654, column: 5)
!3220 = !DILocation(line: 1655, column: 7, scope: !3219)
!3221 = !DILocation(line: 1656, column: 24, scope: !3219)
!3222 = !DILocation(line: 1656, column: 30, scope: !3219)
!3223 = !DILocation(line: 1656, column: 7, scope: !3219)
!3224 = !DILocation(line: 1657, column: 5, scope: !3219)
!3225 = !DILocation(line: 1659, column: 7, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1659, column: 7)
!3227 = !DILocation(line: 1659, column: 7, scope: !3205)
!3228 = !DILocation(line: 1661, column: 16, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3226, file: !3, line: 1660, column: 5)
!3230 = !DILocation(line: 1661, column: 7, scope: !3229)
!3231 = !DILocation(line: 1662, column: 24, scope: !3229)
!3232 = !DILocation(line: 1662, column: 30, scope: !3229)
!3233 = !DILocation(line: 1662, column: 7, scope: !3229)
!3234 = !DILocation(line: 1663, column: 5, scope: !3229)
!3235 = !DILocation(line: 1665, column: 7, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3205, file: !3, line: 1665, column: 7)
!3237 = !DILocation(line: 1665, column: 18, scope: !3236)
!3238 = !DILocation(line: 1665, column: 21, scope: !3236)
!3239 = !DILocation(line: 1665, column: 7, scope: !3205)
!3240 = !DILocation(line: 1666, column: 14, scope: !3236)
!3241 = !DILocation(line: 1666, column: 5, scope: !3236)
!3242 = !DILocation(line: 1667, column: 1, scope: !3205)
!3243 = distinct !DISubprogram(name: "debug_tree_ssa", scope: !3, file: !3, line: 1627, type: !3168, scopeLine: 1628, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3244 = !DILocation(line: 1629, column: 18, scope: !3243)
!3245 = !DILocation(line: 1629, column: 3, scope: !3243)
!3246 = !DILocation(line: 1630, column: 1, scope: !3243)
!3247 = distinct !DISubprogram(name: "htab_statistics", scope: !3, file: !3, line: 1636, type: !3248, scopeLine: 1637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3248 = !DISubroutineType(types: !3249)
!3249 = !{null, !2235, !1394}
!3250 = !DILocalVariable(name: "file", arg: 1, scope: !3247, file: !3, line: 1636, type: !2235)
!3251 = !DILocation(line: 1636, column: 24, scope: !3247)
!3252 = !DILocalVariable(name: "htab", arg: 2, scope: !3247, file: !3, line: 1636, type: !1394)
!3253 = !DILocation(line: 1636, column: 37, scope: !3247)
!3254 = !DILocation(line: 1638, column: 12, scope: !3247)
!3255 = !DILocation(line: 1639, column: 23, scope: !3247)
!3256 = !DILocation(line: 1639, column: 12, scope: !3247)
!3257 = !DILocation(line: 1640, column: 27, scope: !3247)
!3258 = !DILocation(line: 1640, column: 12, scope: !3247)
!3259 = !DILocation(line: 1641, column: 22, scope: !3247)
!3260 = !DILocation(line: 1641, column: 5, scope: !3247)
!3261 = !DILocation(line: 1638, column: 3, scope: !3247)
!3262 = !DILocation(line: 1642, column: 1, scope: !3247)
!3263 = distinct !DISubprogram(name: "debug_tree_ssa_stats", scope: !3, file: !3, line: 1673, type: !3168, scopeLine: 1674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3264 = !DILocation(line: 1675, column: 24, scope: !3263)
!3265 = !DILocation(line: 1675, column: 3, scope: !3263)
!3266 = !DILocation(line: 1676, column: 1, scope: !3263)
!3267 = distinct !DISubprogram(name: "debug_def_blocks_r", scope: !3, file: !3, line: 1712, type: !3268, scopeLine: 1713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3268 = !DISubroutineType(types: !3269)
!3269 = !{!984, !1415, !1167}
!3270 = !DILocalVariable(name: "slot", arg: 1, scope: !3267, file: !3, line: 1712, type: !1415)
!3271 = !DILocation(line: 1712, column: 28, scope: !3267)
!3272 = !DILocalVariable(name: "data", arg: 2, scope: !3267, file: !3, line: 1712, type: !1167)
!3273 = !DILocation(line: 1712, column: 40, scope: !3267)
!3274 = !DILocalVariable(name: "file", scope: !3267, file: !3, line: 1714, type: !2235)
!3275 = !DILocation(line: 1714, column: 9, scope: !3267)
!3276 = !DILocation(line: 1714, column: 25, scope: !3267)
!3277 = !DILocation(line: 1714, column: 16, scope: !3267)
!3278 = !DILocalVariable(name: "db_p", scope: !3267, file: !3, line: 1715, type: !2286)
!3279 = !DILocation(line: 1715, column: 24, scope: !3267)
!3280 = !DILocation(line: 1715, column: 56, scope: !3267)
!3281 = !DILocation(line: 1715, column: 55, scope: !3267)
!3282 = !DILocation(line: 1715, column: 31, scope: !3267)
!3283 = !DILocation(line: 1717, column: 12, scope: !3267)
!3284 = !DILocation(line: 1717, column: 3, scope: !3267)
!3285 = !DILocation(line: 1718, column: 23, scope: !3267)
!3286 = !DILocation(line: 1718, column: 29, scope: !3267)
!3287 = !DILocation(line: 1718, column: 35, scope: !3267)
!3288 = !DILocation(line: 1718, column: 40, scope: !3267)
!3289 = !DILocation(line: 1718, column: 3, scope: !3267)
!3290 = !DILocation(line: 1719, column: 17, scope: !3267)
!3291 = !DILocation(line: 1719, column: 23, scope: !3267)
!3292 = !DILocation(line: 1719, column: 29, scope: !3267)
!3293 = !DILocation(line: 1719, column: 3, scope: !3267)
!3294 = !DILocation(line: 1720, column: 17, scope: !3267)
!3295 = !DILocation(line: 1720, column: 23, scope: !3267)
!3296 = !DILocation(line: 1720, column: 29, scope: !3267)
!3297 = !DILocation(line: 1720, column: 3, scope: !3267)
!3298 = !DILocation(line: 1721, column: 17, scope: !3267)
!3299 = !DILocation(line: 1721, column: 23, scope: !3267)
!3300 = !DILocation(line: 1721, column: 29, scope: !3267)
!3301 = !DILocation(line: 1721, column: 3, scope: !3267)
!3302 = !DILocation(line: 1723, column: 3, scope: !3267)
!3303 = distinct !DISubprogram(name: "debug_def_blocks", scope: !3, file: !3, line: 1741, type: !3168, scopeLine: 1742, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3304 = !DILocation(line: 1743, column: 20, scope: !3303)
!3305 = !DILocation(line: 1743, column: 3, scope: !3303)
!3306 = !DILocation(line: 1744, column: 1, scope: !3303)
!3307 = distinct !DISubprogram(name: "rewrite_into_ssa", scope: !3, file: !3, line: 2351, type: !2370, scopeLine: 2352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3308 = !DILocalVariable(name: "dfs", scope: !3307, file: !3, line: 2353, type: !2214)
!3309 = !DILocation(line: 2353, column: 11, scope: !3307)
!3310 = !DILocalVariable(name: "bb", scope: !3307, file: !3, line: 2354, type: !825)
!3311 = !DILocation(line: 2354, column: 15, scope: !3307)
!3312 = !DILocation(line: 2356, column: 3, scope: !3307)
!3313 = !DILocation(line: 2356, column: 3, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3315, file: !3, line: 2356, column: 3)
!3315 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 2356, column: 3)
!3316 = !DILocation(line: 2356, column: 3, scope: !3315)
!3317 = !DILocation(line: 2359, column: 3, scope: !3307)
!3318 = !DILocation(line: 2362, column: 3, scope: !3307)
!3319 = !DILocation(line: 2367, column: 39, scope: !3307)
!3320 = !DILocation(line: 2367, column: 24, scope: !3307)
!3321 = !DILocation(line: 2367, column: 22, scope: !3307)
!3322 = !DILocation(line: 2368, column: 17, scope: !3307)
!3323 = !DILocation(line: 2368, column: 3, scope: !3307)
!3324 = !DILocation(line: 2371, column: 9, scope: !3307)
!3325 = !DILocation(line: 2371, column: 7, scope: !3307)
!3326 = !DILocation(line: 2372, column: 3, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 2372, column: 3)
!3328 = !DILocation(line: 2372, column: 3, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 2372, column: 3)
!3330 = !DILocation(line: 2373, column: 22, scope: !3329)
!3331 = !DILocation(line: 2373, column: 5, scope: !3329)
!3332 = !DILocation(line: 2373, column: 9, scope: !3329)
!3333 = !DILocation(line: 2373, column: 13, scope: !3329)
!3334 = !DILocation(line: 2373, column: 20, scope: !3329)
!3335 = distinct !{!3335, !3326, !3336}
!3336 = !DILocation(line: 2373, column: 22, scope: !3327)
!3337 = !DILocation(line: 2376, column: 3, scope: !3307)
!3338 = !DILocation(line: 2377, column: 32, scope: !3307)
!3339 = !DILocation(line: 2377, column: 3, scope: !3307)
!3340 = !DILocation(line: 2380, column: 3, scope: !3307)
!3341 = !DILocation(line: 2383, column: 21, scope: !3307)
!3342 = !DILocation(line: 2383, column: 3, scope: !3307)
!3343 = !DILocation(line: 2386, column: 19, scope: !3307)
!3344 = !DILocation(line: 2386, column: 3, scope: !3307)
!3345 = !DILocation(line: 2389, column: 3, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 2389, column: 3)
!3347 = !DILocation(line: 2389, column: 3, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3346, file: !3, line: 2389, column: 3)
!3349 = !DILocation(line: 2390, column: 5, scope: !3348)
!3350 = distinct !{!3350, !3345, !3351}
!3351 = !DILocation(line: 2390, column: 5, scope: !3346)
!3352 = !DILocation(line: 2391, column: 9, scope: !3307)
!3353 = !DILocation(line: 2391, column: 3, scope: !3307)
!3354 = !DILocation(line: 2393, column: 3, scope: !3307)
!3355 = !DILocation(line: 2395, column: 3, scope: !3307)
!3356 = !DILocation(line: 2397, column: 3, scope: !3307)
!3357 = !DILocation(line: 2397, column: 3, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3359, file: !3, line: 2397, column: 3)
!3359 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 2397, column: 3)
!3360 = !DILocation(line: 2397, column: 3, scope: !3359)
!3361 = !DILocation(line: 2398, column: 3, scope: !3307)
!3362 = distinct !DISubprogram(name: "dump_names_replaced_by", scope: !3, file: !3, line: 2671, type: !3363, scopeLine: 2672, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3363 = !DISubroutineType(types: !3364)
!3364 = !{null, !2235, !888}
!3365 = !DILocalVariable(name: "file", arg: 1, scope: !3362, file: !3, line: 2671, type: !2235)
!3366 = !DILocation(line: 2671, column: 31, scope: !3362)
!3367 = !DILocalVariable(name: "name", arg: 2, scope: !3362, file: !3, line: 2671, type: !888)
!3368 = !DILocation(line: 2671, column: 42, scope: !3362)
!3369 = !DILocalVariable(name: "i", scope: !3362, file: !3, line: 2673, type: !7)
!3370 = !DILocation(line: 2673, column: 12, scope: !3362)
!3371 = !DILocalVariable(name: "old_set", scope: !3362, file: !3, line: 2674, type: !1480)
!3372 = !DILocation(line: 2674, column: 10, scope: !3362)
!3373 = !DILocalVariable(name: "bi", scope: !3362, file: !3, line: 2675, type: !2567)
!3374 = !DILocation(line: 2675, column: 19, scope: !3362)
!3375 = !DILocation(line: 2677, column: 23, scope: !3362)
!3376 = !DILocation(line: 2677, column: 29, scope: !3362)
!3377 = !DILocation(line: 2677, column: 3, scope: !3362)
!3378 = !DILocation(line: 2678, column: 12, scope: !3362)
!3379 = !DILocation(line: 2678, column: 3, scope: !3362)
!3380 = !DILocation(line: 2680, column: 32, scope: !3362)
!3381 = !DILocation(line: 2680, column: 13, scope: !3362)
!3382 = !DILocation(line: 2680, column: 11, scope: !3362)
!3383 = !DILocation(line: 2681, column: 3, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !3362, file: !3, line: 2681, column: 3)
!3385 = !DILocation(line: 2681, column: 3, scope: !3386)
!3386 = distinct !DILexicalBlock(scope: !3384, file: !3, line: 2681, column: 3)
!3387 = !DILocation(line: 2683, column: 27, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 2682, column: 5)
!3389 = !DILocation(line: 2683, column: 33, scope: !3388)
!3390 = !DILocation(line: 2683, column: 7, scope: !3388)
!3391 = !DILocation(line: 2684, column: 16, scope: !3388)
!3392 = !DILocation(line: 2684, column: 7, scope: !3388)
!3393 = !DILocation(line: 2685, column: 5, scope: !3388)
!3394 = distinct !{!3394, !3383, !3395}
!3395 = !DILocation(line: 2685, column: 5, scope: !3384)
!3396 = !DILocation(line: 2687, column: 12, scope: !3362)
!3397 = !DILocation(line: 2687, column: 3, scope: !3362)
!3398 = !DILocation(line: 2688, column: 1, scope: !3362)
!3399 = distinct !DISubprogram(name: "names_replaced_by", scope: !3, file: !3, line: 621, type: !3400, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3400 = !DISubroutineType(types: !3401)
!3401 = !{!1480, !888}
!3402 = !DILocalVariable(name: "new_tree", arg: 1, scope: !3399, file: !3, line: 621, type: !888)
!3403 = !DILocation(line: 621, column: 25, scope: !3399)
!3404 = !DILocalVariable(name: "m", scope: !3399, file: !3, line: 623, type: !2339)
!3405 = !DILocation(line: 623, column: 21, scope: !3399)
!3406 = !DILocalVariable(name: "slot", scope: !3399, file: !3, line: 624, type: !1415)
!3407 = !DILocation(line: 624, column: 10, scope: !3399)
!3408 = !DILocation(line: 626, column: 12, scope: !3399)
!3409 = !DILocation(line: 626, column: 5, scope: !3399)
!3410 = !DILocation(line: 626, column: 10, scope: !3399)
!3411 = !DILocation(line: 627, column: 26, scope: !3399)
!3412 = !DILocation(line: 627, column: 36, scope: !3399)
!3413 = !DILocation(line: 627, column: 10, scope: !3399)
!3414 = !DILocation(line: 627, column: 8, scope: !3399)
!3415 = !DILocation(line: 630, column: 7, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3399, file: !3, line: 630, column: 7)
!3417 = !DILocation(line: 630, column: 12, scope: !3416)
!3418 = !DILocation(line: 630, column: 20, scope: !3416)
!3419 = !DILocation(line: 630, column: 24, scope: !3416)
!3420 = !DILocation(line: 630, column: 23, scope: !3416)
!3421 = !DILocation(line: 630, column: 29, scope: !3416)
!3422 = !DILocation(line: 630, column: 7, scope: !3399)
!3423 = !DILocation(line: 631, column: 5, scope: !3416)
!3424 = !DILocation(line: 633, column: 34, scope: !3399)
!3425 = !DILocation(line: 633, column: 33, scope: !3399)
!3426 = !DILocation(line: 633, column: 11, scope: !3399)
!3427 = !DILocation(line: 633, column: 41, scope: !3399)
!3428 = !DILocation(line: 633, column: 3, scope: !3399)
!3429 = !DILocation(line: 634, column: 1, scope: !3399)
!3430 = distinct !DISubprogram(name: "debug_names_replaced_by", scope: !3, file: !3, line: 2694, type: !3431, scopeLine: 2695, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3431 = !DISubroutineType(types: !3432)
!3432 = !{null, !888}
!3433 = !DILocalVariable(name: "name", arg: 1, scope: !3430, file: !3, line: 2694, type: !888)
!3434 = !DILocation(line: 2694, column: 31, scope: !3430)
!3435 = !DILocation(line: 2696, column: 27, scope: !3430)
!3436 = !DILocation(line: 2696, column: 35, scope: !3430)
!3437 = !DILocation(line: 2696, column: 3, scope: !3430)
!3438 = !DILocation(line: 2697, column: 1, scope: !3430)
!3439 = distinct !DISubprogram(name: "dump_update_ssa", scope: !3, file: !3, line: 2703, type: !3078, scopeLine: 2704, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3440 = !DILocalVariable(name: "file", arg: 1, scope: !3439, file: !3, line: 2703, type: !2235)
!3441 = !DILocation(line: 2703, column: 24, scope: !3439)
!3442 = !DILocalVariable(name: "i", scope: !3439, file: !3, line: 2705, type: !7)
!3443 = !DILocation(line: 2705, column: 12, scope: !3439)
!3444 = !DILocalVariable(name: "bi", scope: !3439, file: !3, line: 2706, type: !2567)
!3445 = !DILocation(line: 2706, column: 19, scope: !3439)
!3446 = !DILocation(line: 2708, column: 27, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 2708, column: 7)
!3448 = !DILocation(line: 2708, column: 8, scope: !3447)
!3449 = !DILocation(line: 2708, column: 7, scope: !3439)
!3450 = !DILocation(line: 2709, column: 5, scope: !3447)
!3451 = !DILocation(line: 2711, column: 7, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 2711, column: 7)
!3453 = !DILocation(line: 2711, column: 21, scope: !3452)
!3454 = !DILocation(line: 2711, column: 47, scope: !3452)
!3455 = !DILocation(line: 2711, column: 24, scope: !3452)
!3456 = !DILocation(line: 2711, column: 62, scope: !3452)
!3457 = !DILocation(line: 2711, column: 7, scope: !3439)
!3458 = !DILocalVariable(name: "sbi", scope: !3459, file: !3, line: 2713, type: !3460)
!3459 = distinct !DILexicalBlock(scope: !3452, file: !3, line: 2712, column: 5)
!3460 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap_iterator", file: !2388, line: 111, baseType: !3461)
!3461 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2388, line: 96, size: 256, elements: !3462)
!3462 = !{!3463, !3466, !3467, !3468, !3469}
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3461, file: !2388, line: 98, baseType: !3464, size: 64)
!3464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3465, size: 64)
!3465 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !941)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3461, file: !2388, line: 101, baseType: !7, size: 32, offset: 64)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !3461, file: !2388, line: 104, baseType: !7, size: 32, offset: 96)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !3461, file: !2388, line: 107, baseType: !7, size: 32, offset: 128)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !3461, file: !2388, line: 110, baseType: !941, size: 64, offset: 192)
!3470 = !DILocation(line: 2713, column: 24, scope: !3459)
!3471 = !DILocation(line: 2715, column: 16, scope: !3459)
!3472 = !DILocation(line: 2715, column: 7, scope: !3459)
!3473 = !DILocation(line: 2716, column: 16, scope: !3459)
!3474 = !DILocation(line: 2716, column: 7, scope: !3459)
!3475 = !DILocation(line: 2719, column: 7, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 2719, column: 7)
!3477 = !DILocation(line: 2719, column: 7, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3476, file: !3, line: 2719, column: 7)
!3479 = !DILocation(line: 2720, column: 26, scope: !3478)
!3480 = !DILocation(line: 2720, column: 32, scope: !3478)
!3481 = !DILocation(line: 2720, column: 2, scope: !3478)
!3482 = distinct !{!3482, !3475, !3483}
!3483 = !DILocation(line: 2720, column: 44, scope: !3476)
!3484 = !DILocation(line: 2722, column: 16, scope: !3459)
!3485 = !DILocation(line: 2722, column: 7, scope: !3459)
!3486 = !DILocation(line: 2723, column: 16, scope: !3459)
!3487 = !DILocation(line: 2724, column: 26, scope: !3459)
!3488 = !DILocation(line: 2723, column: 7, scope: !3459)
!3489 = !DILocation(line: 2725, column: 16, scope: !3459)
!3490 = !DILocation(line: 2726, column: 26, scope: !3459)
!3491 = !DILocation(line: 2727, column: 28, scope: !3459)
!3492 = !DILocation(line: 2727, column: 9, scope: !3459)
!3493 = !DILocation(line: 2725, column: 7, scope: !3459)
!3494 = !DILocation(line: 2728, column: 16, scope: !3459)
!3495 = !DILocation(line: 2729, column: 26, scope: !3459)
!3496 = !DILocation(line: 2728, column: 7, scope: !3459)
!3497 = !DILocation(line: 2731, column: 16, scope: !3459)
!3498 = !DILocation(line: 2732, column: 26, scope: !3459)
!3499 = !DILocation(line: 2731, column: 7, scope: !3459)
!3500 = !DILocation(line: 2733, column: 5, scope: !3459)
!3501 = !DILocation(line: 2735, column: 8, scope: !3502)
!3502 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 2735, column: 7)
!3503 = !DILocation(line: 2735, column: 7, scope: !3439)
!3504 = !DILocation(line: 2737, column: 16, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3502, file: !3, line: 2736, column: 5)
!3506 = !DILocation(line: 2737, column: 7, scope: !3505)
!3507 = !DILocation(line: 2738, column: 22, scope: !3505)
!3508 = !DILocation(line: 2738, column: 28, scope: !3505)
!3509 = !DILocation(line: 2738, column: 7, scope: !3505)
!3510 = !DILocation(line: 2739, column: 16, scope: !3505)
!3511 = !DILocation(line: 2739, column: 7, scope: !3505)
!3512 = !DILocation(line: 2740, column: 5, scope: !3505)
!3513 = !DILocation(line: 2742, column: 7, scope: !3514)
!3514 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 2742, column: 7)
!3515 = !DILocation(line: 2742, column: 24, scope: !3514)
!3516 = !DILocation(line: 2742, column: 28, scope: !3514)
!3517 = !DILocation(line: 2742, column: 7, scope: !3439)
!3518 = !DILocation(line: 2744, column: 16, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3514, file: !3, line: 2743, column: 5)
!3520 = !DILocation(line: 2744, column: 7, scope: !3519)
!3521 = !DILocation(line: 2745, column: 7, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 2745, column: 7)
!3523 = !DILocation(line: 2745, column: 7, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 2745, column: 7)
!3525 = !DILocation(line: 2747, column: 24, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 2746, column: 2)
!3527 = !DILocation(line: 2747, column: 30, scope: !3526)
!3528 = !DILocation(line: 2747, column: 4, scope: !3526)
!3529 = !DILocation(line: 2748, column: 13, scope: !3526)
!3530 = !DILocation(line: 2748, column: 4, scope: !3526)
!3531 = !DILocation(line: 2749, column: 2, scope: !3526)
!3532 = distinct !{!3532, !3521, !3533}
!3533 = !DILocation(line: 2749, column: 2, scope: !3522)
!3534 = !DILocation(line: 2750, column: 5, scope: !3519)
!3535 = !DILocation(line: 2752, column: 12, scope: !3439)
!3536 = !DILocation(line: 2752, column: 3, scope: !3439)
!3537 = !DILocation(line: 2753, column: 1, scope: !3439)
!3538 = distinct !DISubprogram(name: "need_ssa_update_p", scope: !3, file: !3, line: 2916, type: !3539, scopeLine: 2917, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3539 = !DISubroutineType(types: !3540)
!3540 = !{!1007, !1351}
!3541 = !DILocalVariable(name: "fn", arg: 1, scope: !3538, file: !3, line: 2916, type: !1351)
!3542 = !DILocation(line: 2916, column: 37, scope: !3538)
!3543 = !DILocation(line: 2918, column: 3, scope: !3538)
!3544 = !DILocation(line: 2919, column: 11, scope: !3538)
!3545 = !DILocation(line: 2919, column: 40, scope: !3538)
!3546 = !DILocation(line: 2919, column: 37, scope: !3538)
!3547 = !DILocation(line: 2920, column: 4, scope: !3538)
!3548 = !DILocation(line: 2920, column: 8, scope: !3538)
!3549 = !DILocation(line: 2920, column: 12, scope: !3538)
!3550 = !DILocation(line: 2921, column: 8, scope: !3538)
!3551 = !DILocation(line: 2921, column: 12, scope: !3538)
!3552 = !DILocation(line: 2921, column: 11, scope: !3538)
!3553 = !DILocation(line: 0, scope: !3538)
!3554 = !DILocation(line: 2919, column: 10, scope: !3538)
!3555 = !DILocation(line: 2919, column: 3, scope: !3538)
!3556 = distinct !DISubprogram(name: "sbitmap_iter_init", scope: !2388, file: !2388, line: 117, type: !3557, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3557 = !DISubroutineType(types: !3558)
!3558 = !{null, !3559, !3560, !7}
!3559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3460, size: 64)
!3560 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_sbitmap", file: !2388, line: 46, baseType: !3561)
!3561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3562, size: 64)
!3562 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2390)
!3563 = !DILocalVariable(name: "i", arg: 1, scope: !3556, file: !2388, line: 117, type: !3559)
!3564 = !DILocation(line: 117, column: 38, scope: !3556)
!3565 = !DILocalVariable(name: "bmp", arg: 2, scope: !3556, file: !2388, line: 117, type: !3560)
!3566 = !DILocation(line: 117, column: 55, scope: !3556)
!3567 = !DILocalVariable(name: "min", arg: 3, scope: !3556, file: !2388, line: 117, type: !7)
!3568 = !DILocation(line: 117, column: 73, scope: !3556)
!3569 = !DILocation(line: 119, column: 17, scope: !3556)
!3570 = !DILocation(line: 119, column: 21, scope: !3556)
!3571 = !DILocation(line: 119, column: 3, scope: !3556)
!3572 = !DILocation(line: 119, column: 6, scope: !3556)
!3573 = !DILocation(line: 119, column: 15, scope: !3556)
!3574 = !DILocation(line: 120, column: 16, scope: !3556)
!3575 = !DILocation(line: 120, column: 3, scope: !3556)
!3576 = !DILocation(line: 120, column: 6, scope: !3556)
!3577 = !DILocation(line: 120, column: 14, scope: !3556)
!3578 = !DILocation(line: 121, column: 13, scope: !3556)
!3579 = !DILocation(line: 121, column: 18, scope: !3556)
!3580 = !DILocation(line: 121, column: 3, scope: !3556)
!3581 = !DILocation(line: 121, column: 6, scope: !3556)
!3582 = !DILocation(line: 121, column: 11, scope: !3556)
!3583 = !DILocation(line: 122, column: 12, scope: !3556)
!3584 = !DILocation(line: 122, column: 17, scope: !3556)
!3585 = !DILocation(line: 122, column: 3, scope: !3556)
!3586 = !DILocation(line: 122, column: 6, scope: !3556)
!3587 = !DILocation(line: 122, column: 10, scope: !3556)
!3588 = !DILocation(line: 124, column: 7, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3556, file: !2388, line: 124, column: 7)
!3590 = !DILocation(line: 124, column: 10, scope: !3589)
!3591 = !DILocation(line: 124, column: 22, scope: !3589)
!3592 = !DILocation(line: 124, column: 25, scope: !3589)
!3593 = !DILocation(line: 124, column: 19, scope: !3589)
!3594 = !DILocation(line: 124, column: 7, scope: !3556)
!3595 = !DILocation(line: 125, column: 5, scope: !3589)
!3596 = !DILocation(line: 125, column: 8, scope: !3589)
!3597 = !DILocation(line: 125, column: 13, scope: !3589)
!3598 = !DILocation(line: 127, column: 16, scope: !3589)
!3599 = !DILocation(line: 127, column: 19, scope: !3589)
!3600 = !DILocation(line: 127, column: 23, scope: !3589)
!3601 = !DILocation(line: 127, column: 26, scope: !3589)
!3602 = !DILocation(line: 128, column: 13, scope: !3589)
!3603 = !DILocation(line: 128, column: 16, scope: !3589)
!3604 = !DILocation(line: 128, column: 24, scope: !3589)
!3605 = !DILocation(line: 128, column: 9, scope: !3589)
!3606 = !DILocation(line: 127, column: 5, scope: !3589)
!3607 = !DILocation(line: 127, column: 8, scope: !3589)
!3608 = !DILocation(line: 127, column: 13, scope: !3589)
!3609 = !DILocation(line: 129, column: 1, scope: !3556)
!3610 = distinct !DISubprogram(name: "sbitmap_iter_cond", scope: !2388, file: !2388, line: 136, type: !3611, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3611 = !DISubroutineType(types: !3612)
!3612 = !{!1007, !3559, !2660}
!3613 = !DILocalVariable(name: "i", arg: 1, scope: !3610, file: !2388, line: 136, type: !3559)
!3614 = !DILocation(line: 136, column: 38, scope: !3610)
!3615 = !DILocalVariable(name: "n", arg: 2, scope: !3610, file: !2388, line: 136, type: !2660)
!3616 = !DILocation(line: 136, column: 55, scope: !3610)
!3617 = !DILocation(line: 139, column: 3, scope: !3610)
!3618 = !DILocation(line: 139, column: 10, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3620, file: !2388, line: 139, column: 3)
!3620 = distinct !DILexicalBlock(scope: !3610, file: !2388, line: 139, column: 3)
!3621 = !DILocation(line: 139, column: 13, scope: !3619)
!3622 = !DILocation(line: 139, column: 18, scope: !3619)
!3623 = !DILocation(line: 139, column: 3, scope: !3620)
!3624 = !DILocation(line: 141, column: 7, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3619, file: !2388, line: 140, column: 5)
!3626 = !DILocation(line: 141, column: 10, scope: !3625)
!3627 = !DILocation(line: 141, column: 18, scope: !3625)
!3628 = !DILocation(line: 144, column: 11, scope: !3629)
!3629 = distinct !DILexicalBlock(scope: !3625, file: !2388, line: 144, column: 11)
!3630 = !DILocation(line: 144, column: 14, scope: !3629)
!3631 = !DILocation(line: 144, column: 26, scope: !3629)
!3632 = !DILocation(line: 144, column: 29, scope: !3629)
!3633 = !DILocation(line: 144, column: 23, scope: !3629)
!3634 = !DILocation(line: 144, column: 11, scope: !3625)
!3635 = !DILocation(line: 145, column: 2, scope: !3629)
!3636 = !DILocation(line: 147, column: 20, scope: !3625)
!3637 = !DILocation(line: 147, column: 23, scope: !3625)
!3638 = !DILocation(line: 147, column: 32, scope: !3625)
!3639 = !DILocation(line: 147, column: 7, scope: !3625)
!3640 = !DILocation(line: 147, column: 10, scope: !3625)
!3641 = !DILocation(line: 147, column: 18, scope: !3625)
!3642 = !DILocation(line: 148, column: 5, scope: !3625)
!3643 = !DILocation(line: 139, column: 34, scope: !3619)
!3644 = !DILocation(line: 139, column: 37, scope: !3619)
!3645 = !DILocation(line: 139, column: 41, scope: !3619)
!3646 = !DILocation(line: 139, column: 44, scope: !3619)
!3647 = !DILocation(line: 139, column: 24, scope: !3619)
!3648 = !DILocation(line: 139, column: 27, scope: !3619)
!3649 = !DILocation(line: 139, column: 32, scope: !3619)
!3650 = !DILocation(line: 139, column: 3, scope: !3619)
!3651 = distinct !{!3651, !3623, !3652}
!3652 = !DILocation(line: 148, column: 5, scope: !3620)
!3653 = !DILocation(line: 151, column: 3, scope: !3610)
!3654 = !DILocation(line: 151, column: 11, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3656, file: !2388, line: 151, column: 3)
!3656 = distinct !DILexicalBlock(scope: !3610, file: !2388, line: 151, column: 3)
!3657 = !DILocation(line: 151, column: 14, scope: !3655)
!3658 = !DILocation(line: 151, column: 19, scope: !3655)
!3659 = !DILocation(line: 151, column: 24, scope: !3655)
!3660 = !DILocation(line: 151, column: 3, scope: !3656)
!3661 = !DILocation(line: 152, column: 5, scope: !3655)
!3662 = !DILocation(line: 152, column: 8, scope: !3655)
!3663 = !DILocation(line: 152, column: 15, scope: !3655)
!3664 = !DILocation(line: 151, column: 30, scope: !3655)
!3665 = !DILocation(line: 151, column: 33, scope: !3655)
!3666 = !DILocation(line: 151, column: 38, scope: !3655)
!3667 = !DILocation(line: 151, column: 3, scope: !3655)
!3668 = distinct !{!3668, !3660, !3669}
!3669 = !DILocation(line: 152, column: 15, scope: !3656)
!3670 = !DILocation(line: 154, column: 8, scope: !3610)
!3671 = !DILocation(line: 154, column: 11, scope: !3610)
!3672 = !DILocation(line: 154, column: 4, scope: !3610)
!3673 = !DILocation(line: 154, column: 6, scope: !3610)
!3674 = !DILocation(line: 156, column: 3, scope: !3610)
!3675 = !DILocation(line: 157, column: 1, scope: !3610)
!3676 = distinct !DISubprogram(name: "sbitmap_iter_next", scope: !2388, file: !2388, line: 162, type: !3677, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3677 = !DISubroutineType(types: !3678)
!3678 = !{null, !3559}
!3679 = !DILocalVariable(name: "i", arg: 1, scope: !3676, file: !2388, line: 162, type: !3559)
!3680 = !DILocation(line: 162, column: 38, scope: !3676)
!3681 = !DILocation(line: 164, column: 3, scope: !3676)
!3682 = !DILocation(line: 164, column: 6, scope: !3676)
!3683 = !DILocation(line: 164, column: 11, scope: !3676)
!3684 = !DILocation(line: 165, column: 3, scope: !3676)
!3685 = !DILocation(line: 165, column: 6, scope: !3676)
!3686 = !DILocation(line: 165, column: 13, scope: !3676)
!3687 = !DILocation(line: 166, column: 1, scope: !3676)
!3688 = distinct !DISubprogram(name: "debug_update_ssa", scope: !3, file: !3, line: 2759, type: !3168, scopeLine: 2760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3689 = !DILocation(line: 2761, column: 20, scope: !3688)
!3690 = !DILocation(line: 2761, column: 3, scope: !3688)
!3691 = !DILocation(line: 2762, column: 1, scope: !3688)
!3692 = distinct !DISubprogram(name: "delete_update_ssa", scope: !3, file: !3, line: 2790, type: !3168, scopeLine: 2791, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3693 = !DILocalVariable(name: "i", scope: !3692, file: !3, line: 2792, type: !7)
!3694 = !DILocation(line: 2792, column: 12, scope: !3692)
!3695 = !DILocalVariable(name: "bi", scope: !3692, file: !3, line: 2793, type: !2567)
!3696 = !DILocation(line: 2793, column: 19, scope: !3692)
!3697 = !DILocation(line: 2795, column: 3, scope: !3692)
!3698 = !DILocation(line: 2796, column: 17, scope: !3692)
!3699 = !DILocation(line: 2798, column: 3, scope: !3692)
!3700 = !DILocation(line: 2799, column: 17, scope: !3692)
!3701 = !DILocation(line: 2801, column: 16, scope: !3692)
!3702 = !DILocation(line: 2801, column: 3, scope: !3692)
!3703 = !DILocation(line: 2802, column: 12, scope: !3692)
!3704 = !DILocation(line: 2804, column: 17, scope: !3692)
!3705 = !DILocation(line: 2804, column: 3, scope: !3692)
!3706 = !DILocation(line: 2805, column: 3, scope: !3692)
!3707 = !DILocation(line: 2807, column: 7, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 2807, column: 7)
!3709 = !DILocation(line: 2807, column: 7, scope: !3692)
!3710 = !DILocation(line: 2809, column: 7, scope: !3711)
!3711 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 2809, column: 7)
!3712 = distinct !DILexicalBlock(scope: !3708, file: !3, line: 2808, column: 5)
!3713 = !DILocation(line: 2809, column: 7, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3711, file: !3, line: 2809, column: 7)
!3715 = !DILocation(line: 2810, column: 20, scope: !3714)
!3716 = !DILocation(line: 2810, column: 2, scope: !3714)
!3717 = distinct !{!3717, !3710, !3718}
!3718 = !DILocation(line: 2810, column: 32, scope: !3711)
!3719 = !DILocation(line: 2811, column: 7, scope: !3712)
!3720 = !DILocation(line: 2812, column: 5, scope: !3712)
!3721 = !DILocation(line: 2814, column: 3, scope: !3692)
!3722 = !DILocation(line: 2816, column: 3, scope: !3692)
!3723 = !DILocation(line: 2818, column: 7, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 2818, column: 7)
!3725 = !DILocation(line: 2818, column: 7, scope: !3692)
!3726 = !DILocation(line: 2819, column: 5, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3724, file: !3, line: 2819, column: 5)
!3728 = !DILocation(line: 2819, column: 5, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 2819, column: 5)
!3730 = !DILocalVariable(name: "phis", scope: !3731, file: !3, line: 2821, type: !2332)
!3731 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 2820, column: 7)
!3732 = !DILocation(line: 2821, column: 13, scope: !3731)
!3733 = !DILocation(line: 2821, column: 20, scope: !3731)
!3734 = !DILocation(line: 2823, column: 2, scope: !3731)
!3735 = !DILocation(line: 2824, column: 2, scope: !3731)
!3736 = !DILocation(line: 2825, column: 7, scope: !3731)
!3737 = distinct !{!3737, !3726, !3738}
!3738 = !DILocation(line: 2825, column: 7, scope: !3727)
!3739 = !DILocation(line: 2827, column: 3, scope: !3692)
!3740 = !DILocation(line: 2828, column: 3, scope: !3692)
!3741 = !DILocation(line: 2829, column: 29, scope: !3692)
!3742 = !DILocation(line: 2830, column: 1, scope: !3692)
!3743 = distinct !DISubprogram(name: "clear_ssa_name_info", scope: !3, file: !3, line: 319, type: !3168, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3744 = !DILocation(line: 321, column: 32, scope: !3743)
!3745 = !DILocation(line: 322, column: 1, scope: !3743)
!3746 = distinct !DISubprogram(name: "fini_ssa_renamer", scope: !3, file: !3, line: 2322, type: !3168, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3747 = !DILocation(line: 2324, column: 7, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3746, file: !3, line: 2324, column: 7)
!3749 = !DILocation(line: 2324, column: 7, scope: !3746)
!3750 = !DILocation(line: 2326, column: 20, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 2325, column: 5)
!3752 = !DILocation(line: 2326, column: 7, scope: !3751)
!3753 = !DILocation(line: 2327, column: 18, scope: !3751)
!3754 = !DILocation(line: 2328, column: 5, scope: !3751)
!3755 = !DILocation(line: 2330, column: 3, scope: !3746)
!3756 = !DILocation(line: 2330, column: 9, scope: !3746)
!3757 = !DILocation(line: 2330, column: 20, scope: !3746)
!3758 = !DILocation(line: 2330, column: 29, scope: !3746)
!3759 = !DILocation(line: 2331, column: 1, scope: !3746)
!3760 = distinct !DISubprogram(name: "VEC_gimple_vec_base_index", scope: !587, file: !587, line: 48, type: !3761, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3761 = !DISubroutineType(types: !3762)
!3762 = !{!2332, !3763, !7}
!3763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3764, size: 64)
!3764 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2325)
!3765 = !DILocalVariable(name: "vec_", arg: 1, scope: !3760, file: !587, line: 48, type: !3763)
!3766 = !DILocation(line: 48, column: 1, scope: !3760)
!3767 = !DILocalVariable(name: "ix_", arg: 2, scope: !3760, file: !587, line: 48, type: !7)
!3768 = !DILocation(line: 0, scope: !3760)
!3769 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !587, file: !587, line: 34, type: !3770, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3770 = !DISubroutineType(types: !3771)
!3771 = !{null, !3772}
!3772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64)
!3773 = !DILocalVariable(name: "vec_", arg: 1, scope: !3769, file: !587, line: 34, type: !3772)
!3774 = !DILocation(line: 34, column: 1, scope: !3769)
!3775 = !DILocation(line: 34, column: 1, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3769, file: !587, line: 34, column: 1)
!3777 = distinct !DISubprogram(name: "VEC_gimple_vec_base_replace", scope: !587, file: !587, line: 48, type: !3778, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3778 = !DISubroutineType(types: !3779)
!3779 = !{!2332, !3780, !7, !2332}
!3780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!3781 = !DILocalVariable(name: "vec_", arg: 1, scope: !3777, file: !587, line: 48, type: !3780)
!3782 = !DILocation(line: 48, column: 1, scope: !3777)
!3783 = !DILocalVariable(name: "ix_", arg: 2, scope: !3777, file: !587, line: 48, type: !7)
!3784 = !DILocalVariable(name: "obj_", arg: 3, scope: !3777, file: !587, line: 48, type: !2332)
!3785 = !DILocalVariable(name: "old_obj_", scope: !3777, file: !587, line: 48, type: !2332)
!3786 = distinct !DISubprogram(name: "create_new_def_for", scope: !3, file: !3, line: 2839, type: !3787, scopeLine: 2840, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3787 = !DISubroutineType(types: !3788)
!3788 = !{!888, !888, !863, !2348}
!3789 = !DILocalVariable(name: "old_name", arg: 1, scope: !3786, file: !3, line: 2839, type: !888)
!3790 = !DILocation(line: 2839, column: 26, scope: !3786)
!3791 = !DILocalVariable(name: "stmt", arg: 2, scope: !3786, file: !3, line: 2839, type: !863)
!3792 = !DILocation(line: 2839, column: 43, scope: !3786)
!3793 = !DILocalVariable(name: "def", arg: 3, scope: !3786, file: !3, line: 2839, type: !2348)
!3794 = !DILocation(line: 2839, column: 63, scope: !3786)
!3795 = !DILocalVariable(name: "new_name", scope: !3786, file: !3, line: 2841, type: !888)
!3796 = !DILocation(line: 2841, column: 8, scope: !3786)
!3797 = !DILocation(line: 2841, column: 39, scope: !3786)
!3798 = !DILocation(line: 2841, column: 49, scope: !3786)
!3799 = !DILocation(line: 2841, column: 19, scope: !3786)
!3800 = !DILocation(line: 2843, column: 3, scope: !3786)
!3801 = !DILocation(line: 2845, column: 20, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 2845, column: 7)
!3803 = !DILocation(line: 2845, column: 7, scope: !3802)
!3804 = !DILocation(line: 2845, column: 26, scope: !3802)
!3805 = !DILocation(line: 2845, column: 7, scope: !3786)
!3806 = !DILocalVariable(name: "e", scope: !3807, file: !3, line: 2847, type: !843)
!3807 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 2846, column: 5)
!3808 = !DILocation(line: 2847, column: 12, scope: !3807)
!3809 = !DILocalVariable(name: "ei", scope: !3807, file: !3, line: 2848, type: !2601)
!3810 = !DILocation(line: 2848, column: 21, scope: !3807)
!3811 = !DILocalVariable(name: "bb", scope: !3807, file: !3, line: 2849, type: !825)
!3812 = !DILocation(line: 2849, column: 19, scope: !3807)
!3813 = !DILocation(line: 2849, column: 35, scope: !3807)
!3814 = !DILocation(line: 2849, column: 24, scope: !3807)
!3815 = !DILocation(line: 2852, column: 7, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 2852, column: 7)
!3817 = !DILocation(line: 2852, column: 7, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 2852, column: 7)
!3819 = !DILocation(line: 2853, column: 6, scope: !3820)
!3820 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 2853, column: 6)
!3821 = !DILocation(line: 2853, column: 9, scope: !3820)
!3822 = !DILocation(line: 2853, column: 15, scope: !3820)
!3823 = !DILocation(line: 2853, column: 6, scope: !3818)
!3824 = !DILocation(line: 2855, column: 6, scope: !3825)
!3825 = distinct !DILexicalBlock(scope: !3820, file: !3, line: 2854, column: 4)
!3826 = !DILocation(line: 2855, column: 49, scope: !3825)
!3827 = !DILocation(line: 2856, column: 6, scope: !3825)
!3828 = !DILocation(line: 2853, column: 17, scope: !3820)
!3829 = distinct !{!3829, !3815, !3830}
!3830 = !DILocation(line: 2857, column: 4, scope: !3816)
!3831 = !DILocation(line: 2858, column: 5, scope: !3807)
!3832 = !DILocation(line: 2860, column: 30, scope: !3786)
!3833 = !DILocation(line: 2860, column: 40, scope: !3786)
!3834 = !DILocation(line: 2860, column: 3, scope: !3786)
!3835 = !DILocation(line: 2865, column: 20, scope: !3786)
!3836 = !DILocation(line: 2865, column: 30, scope: !3786)
!3837 = !DILocation(line: 2865, column: 3, scope: !3786)
!3838 = !DILocation(line: 2867, column: 10, scope: !3786)
!3839 = !DILocation(line: 2867, column: 3, scope: !3786)
!3840 = distinct !DISubprogram(name: "gimple_code", scope: !587, file: !587, line: 1052, type: !3841, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3841 = !DISubroutineType(types: !3842)
!3842 = !{!586, !3843}
!3843 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !826, line: 60, baseType: !3844)
!3844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3845, size: 64)
!3845 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !865)
!3846 = !DILocalVariable(name: "g", arg: 1, scope: !3840, file: !587, line: 1052, type: !3843)
!3847 = !DILocation(line: 1052, column: 27, scope: !3840)
!3848 = !DILocation(line: 1054, column: 10, scope: !3840)
!3849 = !DILocation(line: 1054, column: 13, scope: !3840)
!3850 = !DILocation(line: 1054, column: 20, scope: !3840)
!3851 = !DILocation(line: 1054, column: 3, scope: !3840)
!3852 = distinct !DISubprogram(name: "gimple_bb", scope: !587, file: !587, line: 1112, type: !3853, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3853 = !DISubroutineType(types: !3854)
!3854 = !{!827, !3843}
!3855 = !DILocalVariable(name: "g", arg: 1, scope: !3852, file: !587, line: 1112, type: !3843)
!3856 = !DILocation(line: 1112, column: 25, scope: !3852)
!3857 = !DILocation(line: 1114, column: 10, scope: !3852)
!3858 = !DILocation(line: 1114, column: 13, scope: !3852)
!3859 = !DILocation(line: 1114, column: 20, scope: !3852)
!3860 = !DILocation(line: 1114, column: 3, scope: !3852)
!3861 = distinct !DISubprogram(name: "register_new_name_mapping", scope: !3, file: !3, line: 2876, type: !2530, scopeLine: 2877, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3862 = !DILocalVariable(name: "new_tree", arg: 1, scope: !3861, file: !3, line: 2876, type: !888)
!3863 = !DILocation(line: 2876, column: 33, scope: !3861)
!3864 = !DILocalVariable(name: "old", arg: 2, scope: !3861, file: !3, line: 2876, type: !888)
!3865 = !DILocation(line: 2876, column: 48, scope: !3861)
!3866 = !DILocation(line: 2878, column: 8, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 2878, column: 7)
!3868 = !DILocation(line: 2878, column: 7, scope: !3861)
!3869 = !DILocation(line: 2879, column: 22, scope: !3867)
!3870 = !DILocation(line: 2879, column: 5, scope: !3867)
!3871 = !DILocation(line: 2881, column: 3, scope: !3861)
!3872 = !DILocation(line: 2883, column: 25, scope: !3861)
!3873 = !DILocation(line: 2883, column: 35, scope: !3861)
!3874 = !DILocation(line: 2883, column: 3, scope: !3861)
!3875 = !DILocation(line: 2884, column: 1, scope: !3861)
!3876 = distinct !DISubprogram(name: "init_update_ssa", scope: !3, file: !3, line: 2768, type: !3877, scopeLine: 2769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3877 = !DISubroutineType(types: !3878)
!3878 = !{null, !1351}
!3879 = !DILocalVariable(name: "fn", arg: 1, scope: !3876, file: !3, line: 2768, type: !1351)
!3880 = !DILocation(line: 2768, column: 35, scope: !3876)
!3881 = !DILocation(line: 2773, column: 34, scope: !3876)
!3882 = !DILocation(line: 2773, column: 50, scope: !3876)
!3883 = !DILocation(line: 2773, column: 48, scope: !3876)
!3884 = !DILocation(line: 2773, column: 19, scope: !3876)
!3885 = !DILocation(line: 2773, column: 17, scope: !3876)
!3886 = !DILocation(line: 2774, column: 17, scope: !3876)
!3887 = !DILocation(line: 2774, column: 3, scope: !3876)
!3888 = !DILocation(line: 2776, column: 34, scope: !3876)
!3889 = !DILocation(line: 2776, column: 50, scope: !3876)
!3890 = !DILocation(line: 2776, column: 48, scope: !3876)
!3891 = !DILocation(line: 2776, column: 19, scope: !3876)
!3892 = !DILocation(line: 2776, column: 17, scope: !3876)
!3893 = !DILocation(line: 2777, column: 17, scope: !3876)
!3894 = !DILocation(line: 2777, column: 3, scope: !3876)
!3895 = !DILocation(line: 2779, column: 14, scope: !3876)
!3896 = !DILocation(line: 2779, column: 12, scope: !3876)
!3897 = !DILocation(line: 2780, column: 20, scope: !3876)
!3898 = !DILocation(line: 2781, column: 3, scope: !3876)
!3899 = !DILocation(line: 2782, column: 38, scope: !3876)
!3900 = !DILocation(line: 2782, column: 36, scope: !3876)
!3901 = !DILocation(line: 2783, column: 31, scope: !3876)
!3902 = !DILocation(line: 2783, column: 29, scope: !3876)
!3903 = !DILocation(line: 2784, column: 1, scope: !3876)
!3904 = distinct !DISubprogram(name: "add_new_name_mapping", scope: !3, file: !3, line: 667, type: !2530, scopeLine: 668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3905 = !DILocalVariable(name: "new_tree", arg: 1, scope: !3904, file: !3, line: 667, type: !888)
!3906 = !DILocation(line: 667, column: 28, scope: !3904)
!3907 = !DILocalVariable(name: "old", arg: 2, scope: !3904, file: !3, line: 667, type: !888)
!3908 = !DILocation(line: 667, column: 43, scope: !3904)
!3909 = !DILocation(line: 669, column: 3, scope: !3904)
!3910 = !DILocation(line: 669, column: 3, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 669, column: 3)
!3912 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 669, column: 3)
!3913 = !DILocation(line: 669, column: 3, scope: !3912)
!3914 = !DILocation(line: 672, column: 3, scope: !3904)
!3915 = !DILocation(line: 677, column: 23, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 677, column: 7)
!3917 = !DILocation(line: 677, column: 8, scope: !3916)
!3918 = !DILocation(line: 677, column: 7, scope: !3904)
!3919 = !DILocalVariable(name: "sym", scope: !3920, file: !3, line: 679, type: !888)
!3920 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 678, column: 5)
!3921 = !DILocation(line: 679, column: 12, scope: !3920)
!3922 = !DILocation(line: 681, column: 44, scope: !3920)
!3923 = !DILocation(line: 682, column: 43, scope: !3920)
!3924 = !DILocation(line: 690, column: 13, scope: !3920)
!3925 = !DILocation(line: 690, column: 11, scope: !3920)
!3926 = !DILocation(line: 691, column: 40, scope: !3920)
!3927 = !DILocation(line: 691, column: 57, scope: !3920)
!3928 = !DILocation(line: 691, column: 7, scope: !3920)
!3929 = !DILocation(line: 692, column: 5, scope: !3920)
!3930 = !DILocation(line: 696, column: 7, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 696, column: 7)
!3932 = !DILocation(line: 696, column: 22, scope: !3931)
!3933 = !DILocation(line: 696, column: 32, scope: !3931)
!3934 = !DILocation(line: 696, column: 46, scope: !3931)
!3935 = !DILocation(line: 696, column: 29, scope: !3931)
!3936 = !DILocation(line: 696, column: 7, scope: !3904)
!3937 = !DILocalVariable(name: "new_sz", scope: !3938, file: !3, line: 698, type: !7)
!3938 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 697, column: 5)
!3939 = !DILocation(line: 698, column: 20, scope: !3938)
!3940 = !DILocation(line: 698, column: 29, scope: !3938)
!3941 = !DILocation(line: 698, column: 45, scope: !3938)
!3942 = !DILocation(line: 698, column: 43, scope: !3938)
!3943 = !DILocation(line: 699, column: 39, scope: !3938)
!3944 = !DILocation(line: 699, column: 54, scope: !3938)
!3945 = !DILocation(line: 699, column: 23, scope: !3938)
!3946 = !DILocation(line: 699, column: 21, scope: !3938)
!3947 = !DILocation(line: 700, column: 39, scope: !3938)
!3948 = !DILocation(line: 700, column: 54, scope: !3938)
!3949 = !DILocation(line: 700, column: 23, scope: !3938)
!3950 = !DILocation(line: 700, column: 21, scope: !3938)
!3951 = !DILocation(line: 701, column: 5, scope: !3938)
!3952 = !DILocation(line: 704, column: 20, scope: !3904)
!3953 = !DILocation(line: 704, column: 30, scope: !3904)
!3954 = !DILocation(line: 704, column: 3, scope: !3904)
!3955 = !DILocation(line: 708, column: 20, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 708, column: 7)
!3957 = !DILocation(line: 708, column: 7, scope: !3956)
!3958 = !DILocation(line: 708, column: 7, scope: !3904)
!3959 = !DILocation(line: 709, column: 41, scope: !3956)
!3960 = !DILocation(line: 709, column: 22, scope: !3956)
!3961 = !DILocation(line: 709, column: 71, scope: !3956)
!3962 = !DILocation(line: 709, column: 52, scope: !3956)
!3963 = !DILocation(line: 709, column: 5, scope: !3956)
!3964 = !DILocation(line: 713, column: 12, scope: !3904)
!3965 = !DILocation(line: 713, column: 27, scope: !3904)
!3966 = !DILocation(line: 713, column: 3, scope: !3904)
!3967 = !DILocation(line: 714, column: 12, scope: !3904)
!3968 = !DILocation(line: 714, column: 27, scope: !3904)
!3969 = !DILocation(line: 714, column: 3, scope: !3904)
!3970 = !DILocation(line: 717, column: 38, scope: !3904)
!3971 = !DILocation(line: 719, column: 3, scope: !3904)
!3972 = !DILocation(line: 719, column: 3, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 719, column: 3)
!3974 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 719, column: 3)
!3975 = !DILocation(line: 719, column: 3, scope: !3974)
!3976 = !DILocation(line: 720, column: 1, scope: !3904)
!3977 = distinct !DISubprogram(name: "mark_sym_for_renaming", scope: !3, file: !3, line: 2890, type: !3431, scopeLine: 2891, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3978 = !DILocalVariable(name: "sym", arg: 1, scope: !3977, file: !3, line: 2890, type: !888)
!3979 = !DILocation(line: 2890, column: 29, scope: !3977)
!3980 = !DILocation(line: 2892, column: 19, scope: !3977)
!3981 = !DILocation(line: 2892, column: 42, scope: !3977)
!3982 = !DILocation(line: 2892, column: 3, scope: !3977)
!3983 = !DILocation(line: 2893, column: 1, scope: !3977)
!3984 = distinct !DISubprogram(name: "mark_set_for_renaming", scope: !3, file: !3, line: 2899, type: !2940, scopeLine: 2900, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!3985 = !DILocalVariable(name: "set", arg: 1, scope: !3984, file: !3, line: 2899, type: !1480)
!3986 = !DILocation(line: 2899, column: 31, scope: !3984)
!3987 = !DILocalVariable(name: "bi", scope: !3984, file: !3, line: 2901, type: !2567)
!3988 = !DILocation(line: 2901, column: 19, scope: !3984)
!3989 = !DILocalVariable(name: "i", scope: !3984, file: !3, line: 2902, type: !7)
!3990 = !DILocation(line: 2902, column: 12, scope: !3984)
!3991 = !DILocation(line: 2904, column: 7, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 2904, column: 7)
!3993 = !DILocation(line: 2904, column: 11, scope: !3992)
!3994 = !DILocation(line: 2904, column: 19, scope: !3992)
!3995 = !DILocation(line: 2904, column: 22, scope: !3992)
!3996 = !DILocation(line: 2904, column: 7, scope: !3984)
!3997 = !DILocation(line: 2905, column: 5, scope: !3992)
!3998 = !DILocation(line: 2907, column: 3, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 2907, column: 3)
!4000 = !DILocation(line: 2907, column: 3, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 2907, column: 3)
!4002 = !DILocation(line: 2908, column: 28, scope: !4001)
!4003 = !DILocation(line: 2908, column: 5, scope: !4001)
!4004 = distinct !{!4004, !3998, !4005}
!4005 = !DILocation(line: 2908, column: 46, scope: !3999)
!4006 = !DILocation(line: 2909, column: 1, scope: !3984)
!4007 = distinct !DISubprogram(name: "name_mappings_registered_p", scope: !3, file: !3, line: 2927, type: !2366, scopeLine: 2928, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4008 = !DILocation(line: 2929, column: 8, scope: !4009)
!4009 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 2929, column: 7)
!4010 = !DILocation(line: 2929, column: 7, scope: !4007)
!4011 = !DILocation(line: 2930, column: 5, scope: !4009)
!4012 = !DILocation(line: 2932, column: 3, scope: !4007)
!4013 = !DILocation(line: 2934, column: 10, scope: !4007)
!4014 = !DILocation(line: 2934, column: 19, scope: !4007)
!4015 = !DILocation(line: 2934, column: 37, scope: !4007)
!4016 = !DILocation(line: 2934, column: 22, scope: !4007)
!4017 = !DILocation(line: 2934, column: 47, scope: !4007)
!4018 = !DILocation(line: 0, scope: !4007)
!4019 = !DILocation(line: 2934, column: 3, scope: !4007)
!4020 = !DILocation(line: 2935, column: 1, scope: !4007)
!4021 = distinct !DISubprogram(name: "name_registered_for_update_p", scope: !3, file: !3, line: 2940, type: !4022, scopeLine: 2941, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4022 = !DISubroutineType(types: !4023)
!4023 = !{!1007, !888}
!4024 = !DILocalVariable(name: "n", arg: 1, scope: !4021, file: !3, line: 2940, type: !888)
!4025 = !DILocation(line: 2940, column: 36, scope: !4021)
!4026 = !DILocation(line: 2942, column: 8, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4021, file: !3, line: 2942, column: 7)
!4028 = !DILocation(line: 2942, column: 7, scope: !4021)
!4029 = !DILocation(line: 2943, column: 5, scope: !4027)
!4030 = !DILocation(line: 2945, column: 3, scope: !4021)
!4031 = !DILocation(line: 2947, column: 23, scope: !4021)
!4032 = !DILocation(line: 2947, column: 10, scope: !4021)
!4033 = !DILocation(line: 2947, column: 26, scope: !4021)
!4034 = !DILocation(line: 2947, column: 42, scope: !4021)
!4035 = !DILocation(line: 2947, column: 29, scope: !4021)
!4036 = !DILocation(line: 2947, column: 3, scope: !4021)
!4037 = !DILocation(line: 2948, column: 1, scope: !4021)
!4038 = distinct !DISubprogram(name: "is_new_name", scope: !3, file: !3, line: 586, type: !4022, scopeLine: 587, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4039 = !DILocalVariable(name: "name", arg: 1, scope: !4038, file: !3, line: 586, type: !888)
!4040 = !DILocation(line: 586, column: 19, scope: !4038)
!4041 = !DILocalVariable(name: "ver", scope: !4038, file: !3, line: 588, type: !7)
!4042 = !DILocation(line: 588, column: 12, scope: !4038)
!4043 = !DILocation(line: 588, column: 18, scope: !4038)
!4044 = !DILocation(line: 589, column: 8, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 589, column: 7)
!4046 = !DILocation(line: 589, column: 7, scope: !4038)
!4047 = !DILocation(line: 590, column: 5, scope: !4045)
!4048 = !DILocation(line: 591, column: 10, scope: !4038)
!4049 = !DILocation(line: 591, column: 16, scope: !4038)
!4050 = !DILocation(line: 591, column: 31, scope: !4038)
!4051 = !DILocation(line: 591, column: 14, scope: !4038)
!4052 = !DILocation(line: 591, column: 38, scope: !4038)
!4053 = !DILocation(line: 591, column: 41, scope: !4038)
!4054 = !DILocation(line: 0, scope: !4038)
!4055 = !DILocation(line: 591, column: 3, scope: !4038)
!4056 = !DILocation(line: 592, column: 1, scope: !4038)
!4057 = distinct !DISubprogram(name: "is_old_name", scope: !3, file: !3, line: 574, type: !4022, scopeLine: 575, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4058 = !DILocalVariable(name: "name", arg: 1, scope: !4057, file: !3, line: 574, type: !888)
!4059 = !DILocation(line: 574, column: 19, scope: !4057)
!4060 = !DILocalVariable(name: "ver", scope: !4057, file: !3, line: 576, type: !7)
!4061 = !DILocation(line: 576, column: 12, scope: !4057)
!4062 = !DILocation(line: 576, column: 18, scope: !4057)
!4063 = !DILocation(line: 577, column: 8, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 577, column: 7)
!4065 = !DILocation(line: 577, column: 7, scope: !4057)
!4066 = !DILocation(line: 578, column: 5, scope: !4064)
!4067 = !DILocation(line: 579, column: 10, scope: !4057)
!4068 = !DILocation(line: 579, column: 16, scope: !4057)
!4069 = !DILocation(line: 579, column: 31, scope: !4057)
!4070 = !DILocation(line: 579, column: 14, scope: !4057)
!4071 = !DILocation(line: 579, column: 38, scope: !4057)
!4072 = !DILocation(line: 579, column: 41, scope: !4057)
!4073 = !DILocation(line: 0, scope: !4057)
!4074 = !DILocation(line: 579, column: 3, scope: !4057)
!4075 = !DILocation(line: 580, column: 1, scope: !4057)
!4076 = distinct !DISubprogram(name: "ssa_names_to_replace", scope: !3, file: !3, line: 2954, type: !4077, scopeLine: 2955, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4077 = !DISubroutineType(types: !4078)
!4078 = !{!1480}
!4079 = !DILocalVariable(name: "i", scope: !4076, file: !3, line: 2956, type: !7)
!4080 = !DILocation(line: 2956, column: 12, scope: !4076)
!4081 = !DILocalVariable(name: "ret", scope: !4076, file: !3, line: 2957, type: !1480)
!4082 = !DILocation(line: 2957, column: 10, scope: !4076)
!4083 = !DILocalVariable(name: "sbi", scope: !4076, file: !3, line: 2958, type: !3460)
!4084 = !DILocation(line: 2958, column: 20, scope: !4076)
!4085 = !DILocation(line: 2960, column: 3, scope: !4076)
!4086 = !DILocation(line: 2963, column: 9, scope: !4076)
!4087 = !DILocation(line: 2963, column: 7, scope: !4076)
!4088 = !DILocation(line: 2964, column: 3, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !4076, file: !3, line: 2964, column: 3)
!4090 = !DILocation(line: 2964, column: 3, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4089, file: !3, line: 2964, column: 3)
!4092 = !DILocation(line: 2965, column: 21, scope: !4091)
!4093 = !DILocation(line: 2965, column: 26, scope: !4091)
!4094 = !DILocation(line: 2965, column: 5, scope: !4091)
!4095 = distinct !{!4095, !4088, !4096}
!4096 = !DILocation(line: 2965, column: 27, scope: !4089)
!4097 = !DILocation(line: 2967, column: 10, scope: !4076)
!4098 = !DILocation(line: 2967, column: 3, scope: !4076)
!4099 = distinct !DISubprogram(name: "release_ssa_name_after_update_ssa", scope: !3, file: !3, line: 2974, type: !3431, scopeLine: 2975, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4100 = !DILocalVariable(name: "name", arg: 1, scope: !4099, file: !3, line: 2974, type: !888)
!4101 = !DILocation(line: 2974, column: 41, scope: !4099)
!4102 = !DILocation(line: 2976, column: 3, scope: !4099)
!4103 = !DILocation(line: 2978, column: 7, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4099, file: !3, line: 2978, column: 7)
!4105 = !DILocation(line: 2978, column: 24, scope: !4104)
!4106 = !DILocation(line: 2978, column: 7, scope: !4099)
!4107 = !DILocation(line: 2979, column: 24, scope: !4104)
!4108 = !DILocation(line: 2979, column: 22, scope: !4104)
!4109 = !DILocation(line: 2979, column: 5, scope: !4104)
!4110 = !DILocation(line: 2981, column: 19, scope: !4099)
!4111 = !DILocation(line: 2981, column: 37, scope: !4099)
!4112 = !DILocation(line: 2981, column: 3, scope: !4099)
!4113 = !DILocation(line: 2982, column: 1, scope: !4099)
!4114 = distinct !DISubprogram(name: "update_ssa", scope: !3, file: !3, line: 3227, type: !4115, scopeLine: 3228, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4115 = !DISubroutineType(types: !4116)
!4116 = !{null, !7}
!4117 = !DILocalVariable(name: "update_flags", arg: 1, scope: !4114, file: !3, line: 3227, type: !7)
!4118 = !DILocation(line: 3227, column: 22, scope: !4114)
!4119 = !DILocalVariable(name: "bb", scope: !4114, file: !3, line: 3229, type: !825)
!4120 = !DILocation(line: 3229, column: 15, scope: !4114)
!4121 = !DILocalVariable(name: "start_bb", scope: !4114, file: !3, line: 3229, type: !825)
!4122 = !DILocation(line: 3229, column: 19, scope: !4114)
!4123 = !DILocalVariable(name: "bi", scope: !4114, file: !3, line: 3230, type: !2567)
!4124 = !DILocation(line: 3230, column: 19, scope: !4114)
!4125 = !DILocalVariable(name: "i", scope: !4114, file: !3, line: 3231, type: !7)
!4126 = !DILocation(line: 3231, column: 12, scope: !4114)
!4127 = !DILocalVariable(name: "insert_phi_p", scope: !4114, file: !3, line: 3232, type: !1007)
!4128 = !DILocation(line: 3232, column: 8, scope: !4114)
!4129 = !DILocalVariable(name: "sbi", scope: !4114, file: !3, line: 3233, type: !3460)
!4130 = !DILocation(line: 3233, column: 20, scope: !4114)
!4131 = !DILocation(line: 3235, column: 27, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3235, column: 7)
!4133 = !DILocation(line: 3235, column: 8, scope: !4132)
!4134 = !DILocation(line: 3235, column: 7, scope: !4114)
!4135 = !DILocation(line: 3236, column: 5, scope: !4132)
!4136 = !DILocation(line: 3238, column: 3, scope: !4114)
!4137 = !DILocation(line: 3238, column: 3, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 3238, column: 3)
!4139 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3238, column: 3)
!4140 = !DILocation(line: 3238, column: 3, scope: !4139)
!4141 = !DILocation(line: 3240, column: 8, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3240, column: 7)
!4143 = !DILocation(line: 3240, column: 7, scope: !4114)
!4144 = !DILocation(line: 3241, column: 22, scope: !4142)
!4145 = !DILocation(line: 3241, column: 5, scope: !4142)
!4146 = !DILocation(line: 3242, column: 3, scope: !4114)
!4147 = !DILocation(line: 3244, column: 33, scope: !4114)
!4148 = !DILocation(line: 3244, column: 31, scope: !4114)
!4149 = !DILocation(line: 3245, column: 8, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3245, column: 7)
!4151 = !DILocation(line: 3245, column: 7, scope: !4114)
!4152 = !DILocation(line: 3246, column: 23, scope: !4150)
!4153 = !DILocation(line: 3246, column: 21, scope: !4150)
!4154 = !DILocation(line: 3246, column: 5, scope: !4150)
!4155 = !DILocation(line: 3247, column: 22, scope: !4114)
!4156 = !DILocation(line: 3247, column: 20, scope: !4114)
!4157 = !DILocation(line: 3250, column: 3, scope: !4114)
!4158 = !DILocation(line: 3253, column: 3, scope: !4114)
!4159 = !DILocation(line: 3261, column: 7, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3261, column: 7)
!4161 = !DILocation(line: 3261, column: 20, scope: !4160)
!4162 = !DILocation(line: 3261, column: 7, scope: !4114)
!4163 = !DILocation(line: 3263, column: 21, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 3262, column: 5)
!4165 = !DILocation(line: 3263, column: 7, scope: !4164)
!4166 = !DILocation(line: 3264, column: 21, scope: !4164)
!4167 = !DILocation(line: 3264, column: 7, scope: !4164)
!4168 = !DILocation(line: 3265, column: 19, scope: !4164)
!4169 = !DILocation(line: 3265, column: 7, scope: !4164)
!4170 = !DILocation(line: 3266, column: 5, scope: !4164)
!4171 = !DILocation(line: 3268, column: 19, scope: !4114)
!4172 = !DILocation(line: 3268, column: 32, scope: !4114)
!4173 = !DILocation(line: 3268, column: 18, scope: !4114)
!4174 = !DILocation(line: 3268, column: 16, scope: !4114)
!4175 = !DILocation(line: 3270, column: 7, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3270, column: 7)
!4177 = !DILocation(line: 3270, column: 7, scope: !4114)
!4178 = !DILocation(line: 3279, column: 33, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 3271, column: 5)
!4180 = !DILocation(line: 3279, column: 20, scope: !4179)
!4181 = !DILocation(line: 3279, column: 18, scope: !4179)
!4182 = !DILocation(line: 3281, column: 5, scope: !4179)
!4183 = !DILocation(line: 3284, column: 18, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 3283, column: 5)
!4185 = !DILocation(line: 3289, column: 7, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3289, column: 7)
!4187 = !DILocation(line: 3289, column: 20, scope: !4186)
!4188 = !DILocation(line: 3289, column: 23, scope: !4186)
!4189 = !DILocation(line: 3289, column: 7, scope: !4114)
!4190 = !DILocation(line: 3290, column: 5, scope: !4186)
!4191 = !DILocation(line: 3295, column: 30, scope: !4192)
!4192 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3295, column: 7)
!4193 = !DILocation(line: 3295, column: 7, scope: !4192)
!4194 = !DILocation(line: 3295, column: 45, scope: !4192)
!4195 = !DILocation(line: 3295, column: 7, scope: !4114)
!4196 = !DILocation(line: 3297, column: 32, scope: !4197)
!4197 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 3296, column: 5)
!4198 = !DILocation(line: 3297, column: 7, scope: !4197)
!4199 = !DILocation(line: 3302, column: 34, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 3302, column: 11)
!4201 = !DILocation(line: 3302, column: 11, scope: !4200)
!4202 = !DILocation(line: 3302, column: 49, scope: !4200)
!4203 = !DILocation(line: 3303, column: 4, scope: !4200)
!4204 = !DILocation(line: 3303, column: 7, scope: !4200)
!4205 = !DILocation(line: 3302, column: 11, scope: !4197)
!4206 = !DILocation(line: 3304, column: 2, scope: !4200)
!4207 = !DILocation(line: 3305, column: 5, scope: !4197)
!4208 = !DILocation(line: 3308, column: 8, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3308, column: 7)
!4210 = !DILocation(line: 3308, column: 7, scope: !4114)
!4211 = !DILocation(line: 3315, column: 18, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 3309, column: 5)
!4213 = !DILocation(line: 3315, column: 16, scope: !4212)
!4214 = !DILocation(line: 3321, column: 33, scope: !4212)
!4215 = !DILocation(line: 3321, column: 43, scope: !4212)
!4216 = !DILocation(line: 3321, column: 7, scope: !4212)
!4217 = !DILocation(line: 3322, column: 5, scope: !4212)
!4218 = !DILocation(line: 3328, column: 10, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4209, file: !3, line: 3324, column: 5)
!4220 = !DILocation(line: 3327, column: 18, scope: !4219)
!4221 = !DILocation(line: 3327, column: 16, scope: !4219)
!4222 = !DILocation(line: 3334, column: 7, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3334, column: 7)
!4224 = !DILocation(line: 3334, column: 7, scope: !4114)
!4225 = !DILocalVariable(name: "dfs", scope: !4226, file: !3, line: 3336, type: !2214)
!4226 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 3335, column: 5)
!4227 = !DILocation(line: 3336, column: 15, scope: !4226)
!4228 = !DILocation(line: 3340, column: 13, scope: !4226)
!4229 = !DILocation(line: 3340, column: 11, scope: !4226)
!4230 = !DILocation(line: 3341, column: 7, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 3341, column: 7)
!4232 = !DILocation(line: 3341, column: 7, scope: !4233)
!4233 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3341, column: 7)
!4234 = !DILocation(line: 3342, column: 19, scope: !4233)
!4235 = !DILocation(line: 3342, column: 2, scope: !4233)
!4236 = !DILocation(line: 3342, column: 6, scope: !4233)
!4237 = !DILocation(line: 3342, column: 10, scope: !4233)
!4238 = !DILocation(line: 3342, column: 17, scope: !4233)
!4239 = distinct !{!4239, !4230, !4240}
!4240 = !DILocation(line: 3342, column: 19, scope: !4231)
!4241 = !DILocation(line: 3343, column: 36, scope: !4226)
!4242 = !DILocation(line: 3343, column: 7, scope: !4226)
!4243 = !DILocation(line: 3345, column: 34, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 3345, column: 11)
!4245 = !DILocation(line: 3345, column: 11, scope: !4244)
!4246 = !DILocation(line: 3345, column: 49, scope: !4244)
!4247 = !DILocation(line: 3345, column: 11, scope: !4226)
!4248 = !DILocalVariable(name: "sbi", scope: !4249, file: !3, line: 3347, type: !3460)
!4249 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 3346, column: 2)
!4250 = !DILocation(line: 3347, column: 21, scope: !4249)
!4251 = !DILocalVariable(name: "tmp", scope: !4249, file: !3, line: 3354, type: !2387)
!4252 = !DILocation(line: 3354, column: 12, scope: !4249)
!4253 = !DILocation(line: 3354, column: 33, scope: !4249)
!4254 = !DILocation(line: 3354, column: 48, scope: !4249)
!4255 = !DILocation(line: 3354, column: 18, scope: !4249)
!4256 = !DILocation(line: 3355, column: 18, scope: !4249)
!4257 = !DILocation(line: 3355, column: 23, scope: !4249)
!4258 = !DILocation(line: 3355, column: 4, scope: !4249)
!4259 = !DILocation(line: 3356, column: 4, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 3356, column: 4)
!4261 = !DILocation(line: 3356, column: 4, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 3356, column: 4)
!4263 = !DILocation(line: 3357, column: 36, scope: !4262)
!4264 = !DILocation(line: 3357, column: 50, scope: !4262)
!4265 = !DILocation(line: 3357, column: 55, scope: !4262)
!4266 = !DILocation(line: 3358, column: 36, scope: !4262)
!4267 = !DILocation(line: 3357, column: 6, scope: !4262)
!4268 = distinct !{!4268, !4259, !4269}
!4269 = !DILocation(line: 3358, column: 48, scope: !4260)
!4270 = !DILocation(line: 3359, column: 4, scope: !4249)
!4271 = !DILocation(line: 3360, column: 2, scope: !4249)
!4272 = !DILocation(line: 3362, column: 7, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 3362, column: 7)
!4274 = !DILocation(line: 3362, column: 7, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 3362, column: 7)
!4276 = !DILocation(line: 3363, column: 32, scope: !4275)
!4277 = !DILocation(line: 3363, column: 52, scope: !4275)
!4278 = !DILocation(line: 3363, column: 57, scope: !4275)
!4279 = !DILocation(line: 3364, column: 32, scope: !4275)
!4280 = !DILocation(line: 3363, column: 2, scope: !4275)
!4281 = distinct !{!4281, !4272, !4282}
!4282 = !DILocation(line: 3364, column: 44, scope: !4273)
!4283 = !DILocation(line: 3366, column: 7, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 3366, column: 7)
!4285 = !DILocation(line: 3366, column: 7, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4284, file: !3, line: 3366, column: 7)
!4287 = !DILocation(line: 3367, column: 2, scope: !4286)
!4288 = distinct !{!4288, !4283, !4289}
!4289 = !DILocation(line: 3367, column: 2, scope: !4284)
!4290 = !DILocation(line: 3368, column: 13, scope: !4226)
!4291 = !DILocation(line: 3368, column: 7, scope: !4226)
!4292 = !DILocation(line: 3373, column: 11, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 3373, column: 11)
!4294 = !DILocation(line: 3373, column: 23, scope: !4293)
!4295 = !DILocation(line: 3373, column: 20, scope: !4293)
!4296 = !DILocation(line: 3373, column: 11, scope: !4226)
!4297 = !DILocation(line: 3375, column: 12, scope: !4293)
!4298 = !DILocation(line: 3374, column: 13, scope: !4293)
!4299 = !DILocation(line: 3374, column: 11, scope: !4293)
!4300 = !DILocation(line: 3374, column: 2, scope: !4293)
!4301 = !DILocation(line: 3376, column: 5, scope: !4226)
!4302 = !DILocation(line: 3380, column: 3, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3380, column: 3)
!4304 = !DILocation(line: 3380, column: 3, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4303, file: !3, line: 3380, column: 3)
!4306 = !DILocation(line: 3381, column: 22, scope: !4305)
!4307 = !DILocation(line: 3381, column: 5, scope: !4305)
!4308 = distinct !{!4308, !4302, !4309}
!4309 = !DILocation(line: 3381, column: 45, scope: !4303)
!4310 = !DILocation(line: 3383, column: 3, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3383, column: 3)
!4312 = !DILocation(line: 3383, column: 3, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 3383, column: 3)
!4314 = !DILocation(line: 3384, column: 22, scope: !4313)
!4315 = !DILocation(line: 3384, column: 5, scope: !4313)
!4316 = distinct !{!4316, !4310, !4317}
!4317 = !DILocation(line: 3384, column: 51, scope: !4311)
!4318 = !DILocation(line: 3387, column: 39, scope: !4114)
!4319 = !DILocation(line: 3387, column: 24, scope: !4114)
!4320 = !DILocation(line: 3387, column: 22, scope: !4114)
!4321 = !DILocation(line: 3388, column: 17, scope: !4114)
!4322 = !DILocation(line: 3388, column: 3, scope: !4114)
!4323 = !DILocation(line: 3389, column: 3, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3389, column: 3)
!4325 = !DILocation(line: 3389, column: 3, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4324, file: !3, line: 3389, column: 3)
!4327 = !DILocation(line: 3390, column: 14, scope: !4326)
!4328 = !DILocation(line: 3390, column: 34, scope: !4326)
!4329 = !DILocation(line: 3390, column: 5, scope: !4326)
!4330 = distinct !{!4330, !4323, !4331}
!4331 = !DILocation(line: 3390, column: 35, scope: !4324)
!4332 = !DILocation(line: 3392, column: 19, scope: !4114)
!4333 = !DILocation(line: 3392, column: 3, scope: !4114)
!4334 = !DILocation(line: 3394, column: 3, scope: !4114)
!4335 = !DILocation(line: 3397, column: 7, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3397, column: 7)
!4337 = !DILocation(line: 3397, column: 7, scope: !4114)
!4338 = !DILocalVariable(name: "c", scope: !4339, file: !3, line: 3399, type: !984)
!4339 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 3398, column: 5)
!4340 = !DILocation(line: 3399, column: 11, scope: !4339)
!4341 = !DILocalVariable(name: "i", scope: !4339, file: !3, line: 3400, type: !7)
!4342 = !DILocation(line: 3400, column: 16, scope: !4339)
!4343 = !DILocation(line: 3402, column: 24, scope: !4339)
!4344 = !DILocation(line: 3402, column: 7, scope: !4339)
!4345 = !DILocation(line: 3404, column: 16, scope: !4339)
!4346 = !DILocation(line: 3405, column: 9, scope: !4339)
!4347 = !DILocation(line: 3405, column: 19, scope: !4339)
!4348 = !DILocation(line: 3404, column: 7, scope: !4339)
!4349 = !DILocation(line: 3407, column: 9, scope: !4339)
!4350 = !DILocation(line: 3408, column: 7, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 3408, column: 7)
!4352 = !DILocation(line: 3408, column: 7, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 3408, column: 7)
!4354 = !DILocation(line: 3409, column: 3, scope: !4353)
!4355 = !DILocation(line: 3409, column: 2, scope: !4353)
!4356 = distinct !{!4356, !4350, !4357}
!4357 = !DILocation(line: 3409, column: 3, scope: !4351)
!4358 = !DILocation(line: 3410, column: 16, scope: !4339)
!4359 = !DILocation(line: 3410, column: 60, scope: !4339)
!4360 = !DILocation(line: 3410, column: 7, scope: !4339)
!4361 = !DILocation(line: 3411, column: 16, scope: !4339)
!4362 = !DILocation(line: 3412, column: 9, scope: !4339)
!4363 = !DILocation(line: 3412, column: 12, scope: !4339)
!4364 = !DILocation(line: 3411, column: 7, scope: !4339)
!4365 = !DILocation(line: 3414, column: 11, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 3414, column: 11)
!4367 = !DILocation(line: 3414, column: 22, scope: !4366)
!4368 = !DILocation(line: 3414, column: 11, scope: !4339)
!4369 = !DILocation(line: 3416, column: 13, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 3415, column: 2)
!4371 = !DILocation(line: 3416, column: 4, scope: !4370)
!4372 = !DILocation(line: 3417, column: 4, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 3417, column: 4)
!4374 = !DILocation(line: 3417, column: 4, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 3417, column: 4)
!4376 = !DILocation(line: 3418, column: 15, scope: !4375)
!4377 = !DILocation(line: 3418, column: 33, scope: !4375)
!4378 = !DILocation(line: 3418, column: 6, scope: !4375)
!4379 = distinct !{!4379, !4372, !4380}
!4380 = !DILocation(line: 3418, column: 34, scope: !4373)
!4381 = !DILocation(line: 3419, column: 13, scope: !4370)
!4382 = !DILocation(line: 3419, column: 4, scope: !4370)
!4383 = !DILocation(line: 3420, column: 2, scope: !4370)
!4384 = !DILocation(line: 3422, column: 16, scope: !4339)
!4385 = !DILocation(line: 3422, column: 7, scope: !4339)
!4386 = !DILocation(line: 3423, column: 5, scope: !4339)
!4387 = !DILabel(scope: !4114, name: "done", file: !3, line: 3426)
!4388 = !DILocation(line: 3426, column: 1, scope: !4114)
!4389 = !DILocation(line: 3427, column: 3, scope: !4114)
!4390 = !DILocation(line: 3429, column: 3, scope: !4114)
!4391 = !DILocation(line: 3429, column: 3, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 3429, column: 3)
!4393 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 3429, column: 3)
!4394 = !DILocation(line: 3429, column: 3, scope: !4393)
!4395 = !DILocation(line: 3430, column: 1, scope: !4114)
!4396 = distinct !DISubprogram(name: "VEC_gimple_vec_heap_alloc", scope: !587, file: !587, line: 49, type: !4397, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4397 = !DISubroutineType(types: !4398)
!4398 = !{!2320, !984}
!4399 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4396, file: !587, line: 49, type: !984)
!4400 = !DILocation(line: 49, column: 1, scope: !4396)
!4401 = distinct !DISubprogram(name: "def_blocks_hash", scope: !3, file: !3, line: 1682, type: !1401, scopeLine: 1683, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4402 = !DILocalVariable(name: "p", arg: 1, scope: !4401, file: !3, line: 1682, type: !1237)
!4403 = !DILocation(line: 1682, column: 30, scope: !4401)
!4404 = !DILocation(line: 1684, column: 10, scope: !4401)
!4405 = !DILocation(line: 1685, column: 47, scope: !4401)
!4406 = !DILocation(line: 1685, column: 18, scope: !4401)
!4407 = !DILocation(line: 1685, column: 51, scope: !4401)
!4408 = !DILocation(line: 1685, column: 3, scope: !4401)
!4409 = !DILocation(line: 1684, column: 3, scope: !4401)
!4410 = distinct !DISubprogram(name: "def_blocks_eq", scope: !3, file: !3, line: 1689, type: !1407, scopeLine: 1690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4411 = !DILocalVariable(name: "p1", arg: 1, scope: !4410, file: !3, line: 1689, type: !1237)
!4412 = !DILocation(line: 1689, column: 28, scope: !4410)
!4413 = !DILocalVariable(name: "p2", arg: 2, scope: !4410, file: !3, line: 1689, type: !1237)
!4414 = !DILocation(line: 1689, column: 44, scope: !4410)
!4415 = !DILocation(line: 1691, column: 40, scope: !4410)
!4416 = !DILocation(line: 1691, column: 11, scope: !4410)
!4417 = !DILocation(line: 1691, column: 45, scope: !4410)
!4418 = !DILocation(line: 1692, column: 36, scope: !4410)
!4419 = !DILocation(line: 1692, column: 7, scope: !4410)
!4420 = !DILocation(line: 1692, column: 41, scope: !4410)
!4421 = !DILocation(line: 1692, column: 3, scope: !4410)
!4422 = !DILocation(line: 1691, column: 3, scope: !4410)
!4423 = distinct !DISubprogram(name: "def_blocks_free", scope: !3, file: !3, line: 1699, type: !1412, scopeLine: 1700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4424 = !DILocalVariable(name: "p", arg: 1, scope: !4423, file: !3, line: 1699, type: !1167)
!4425 = !DILocation(line: 1699, column: 24, scope: !4423)
!4426 = !DILocalVariable(name: "entry", scope: !4423, file: !3, line: 1701, type: !2286)
!4427 = !DILocation(line: 1701, column: 24, scope: !4423)
!4428 = !DILocation(line: 1701, column: 56, scope: !4423)
!4429 = !DILocation(line: 1701, column: 32, scope: !4423)
!4430 = !DILocation(line: 1702, column: 3, scope: !4423)
!4431 = !DILocation(line: 1703, column: 3, scope: !4423)
!4432 = !DILocation(line: 1704, column: 3, scope: !4423)
!4433 = !DILocation(line: 1705, column: 9, scope: !4423)
!4434 = !DILocation(line: 1705, column: 3, scope: !4423)
!4435 = !DILocation(line: 1706, column: 1, scope: !4423)
!4436 = distinct !DISubprogram(name: "switch_virtuals_to_full_rewrite_p", scope: !3, file: !3, line: 3113, type: !2366, scopeLine: 3114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4437 = !DILocation(line: 3115, column: 24, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 3115, column: 7)
!4439 = !DILocation(line: 3115, column: 58, scope: !4438)
!4440 = !DILocation(line: 3115, column: 45, scope: !4438)
!4441 = !DILocation(line: 3115, column: 7, scope: !4436)
!4442 = !DILocation(line: 3116, column: 5, scope: !4438)
!4443 = !DILocation(line: 3118, column: 24, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 3118, column: 7)
!4445 = !DILocation(line: 3119, column: 20, scope: !4444)
!4446 = !DILocation(line: 3120, column: 28, scope: !4444)
!4447 = !DILocation(line: 3120, column: 9, scope: !4444)
!4448 = !DILocation(line: 3119, column: 7, scope: !4444)
!4449 = !DILocation(line: 3118, column: 7, scope: !4436)
!4450 = !DILocation(line: 3121, column: 5, scope: !4444)
!4451 = !DILocation(line: 3123, column: 3, scope: !4436)
!4452 = !DILocation(line: 3124, column: 1, scope: !4436)
!4453 = distinct !DISubprogram(name: "switch_virtuals_to_full_rewrite", scope: !3, file: !3, line: 3131, type: !3168, scopeLine: 3132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4454 = !DILocalVariable(name: "i", scope: !4453, file: !3, line: 3133, type: !7)
!4455 = !DILocation(line: 3133, column: 12, scope: !4453)
!4456 = !DILocalVariable(name: "sbi", scope: !4453, file: !3, line: 3134, type: !3460)
!4457 = !DILocation(line: 3134, column: 20, scope: !4453)
!4458 = !DILocation(line: 3136, column: 7, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 3136, column: 7)
!4460 = !DILocation(line: 3136, column: 7, scope: !4453)
!4461 = !DILocation(line: 3138, column: 16, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 3137, column: 5)
!4463 = !DILocation(line: 3138, column: 7, scope: !4462)
!4464 = !DILocation(line: 3139, column: 16, scope: !4462)
!4465 = !DILocation(line: 3140, column: 26, scope: !4462)
!4466 = !DILocation(line: 3139, column: 7, scope: !4462)
!4467 = !DILocation(line: 3141, column: 16, scope: !4462)
!4468 = !DILocation(line: 3142, column: 26, scope: !4462)
!4469 = !DILocation(line: 3141, column: 7, scope: !4462)
!4470 = !DILocation(line: 3143, column: 16, scope: !4462)
!4471 = !DILocation(line: 3143, column: 7, scope: !4462)
!4472 = !DILocation(line: 3145, column: 5, scope: !4462)
!4473 = !DILocation(line: 3150, column: 3, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 3150, column: 3)
!4475 = !DILocation(line: 3150, column: 3, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 3150, column: 3)
!4477 = !DILocation(line: 3151, column: 25, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 3151, column: 9)
!4479 = !DILocation(line: 3151, column: 10, scope: !4478)
!4480 = !DILocation(line: 3151, column: 9, scope: !4476)
!4481 = !DILocation(line: 3152, column: 18, scope: !4478)
!4482 = !DILocation(line: 3152, column: 33, scope: !4478)
!4483 = !DILocation(line: 3152, column: 7, scope: !4478)
!4484 = !DILocation(line: 3151, column: 37, scope: !4478)
!4485 = distinct !{!4485, !4473, !4486}
!4486 = !DILocation(line: 3152, column: 34, scope: !4474)
!4487 = !DILocation(line: 3154, column: 3, scope: !4488)
!4488 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 3154, column: 3)
!4489 = !DILocation(line: 3154, column: 3, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 3154, column: 3)
!4491 = !DILocation(line: 3155, column: 25, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 3155, column: 9)
!4493 = !DILocation(line: 3155, column: 10, scope: !4492)
!4494 = !DILocation(line: 3155, column: 9, scope: !4490)
!4495 = !DILocation(line: 3156, column: 18, scope: !4492)
!4496 = !DILocation(line: 3156, column: 33, scope: !4492)
!4497 = !DILocation(line: 3156, column: 7, scope: !4492)
!4498 = !DILocation(line: 3155, column: 37, scope: !4492)
!4499 = distinct !{!4499, !4487, !4500}
!4500 = !DILocation(line: 3156, column: 34, scope: !4488)
!4501 = !DILocation(line: 3158, column: 43, scope: !4453)
!4502 = !DILocation(line: 3158, column: 3, scope: !4453)
!4503 = !DILocation(line: 3159, column: 1, scope: !4453)
!4504 = distinct !DISubprogram(name: "prepare_names_to_update", scope: !3, file: !3, line: 2636, type: !4505, scopeLine: 2637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4505 = !DISubroutineType(types: !4506)
!4506 = !{null, !1007}
!4507 = !DILocalVariable(name: "insert_phi_p", arg: 1, scope: !4504, file: !3, line: 2636, type: !1007)
!4508 = !DILocation(line: 2636, column: 31, scope: !4504)
!4509 = !DILocalVariable(name: "i", scope: !4504, file: !3, line: 2638, type: !7)
!4510 = !DILocation(line: 2638, column: 12, scope: !4504)
!4511 = !DILocalVariable(name: "bi", scope: !4504, file: !3, line: 2639, type: !2567)
!4512 = !DILocation(line: 2639, column: 19, scope: !4504)
!4513 = !DILocalVariable(name: "sbi", scope: !4504, file: !3, line: 2640, type: !3460)
!4514 = !DILocation(line: 2640, column: 20, scope: !4504)
!4515 = !DILocation(line: 2647, column: 7, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2647, column: 7)
!4517 = !DILocation(line: 2647, column: 7, scope: !4504)
!4518 = !DILocation(line: 2648, column: 5, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4516, file: !3, line: 2648, column: 5)
!4520 = !DILocation(line: 2648, column: 5, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 2648, column: 5)
!4522 = !DILocation(line: 2649, column: 18, scope: !4521)
!4523 = !DILocation(line: 2649, column: 33, scope: !4521)
!4524 = !DILocation(line: 2649, column: 7, scope: !4521)
!4525 = distinct !{!4525, !4518, !4526}
!4526 = !DILocation(line: 2649, column: 34, scope: !4519)
!4527 = !DILocation(line: 2654, column: 3, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2654, column: 3)
!4529 = !DILocation(line: 2654, column: 3, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 2654, column: 3)
!4531 = !DILocation(line: 2655, column: 27, scope: !4530)
!4532 = !DILocation(line: 2655, column: 41, scope: !4530)
!4533 = !DILocation(line: 2655, column: 5, scope: !4530)
!4534 = distinct !{!4534, !4527, !4535}
!4535 = !DILocation(line: 2655, column: 53, scope: !4528)
!4536 = !DILocation(line: 2659, column: 3, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2659, column: 3)
!4538 = !DILocation(line: 2659, column: 3, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 2659, column: 3)
!4540 = !DILocation(line: 2661, column: 11, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 2661, column: 11)
!4542 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 2660, column: 5)
!4543 = !DILocation(line: 2661, column: 28, scope: !4541)
!4544 = !DILocation(line: 2661, column: 36, scope: !4541)
!4545 = !DILocation(line: 2661, column: 54, scope: !4541)
!4546 = !DILocation(line: 2661, column: 72, scope: !4541)
!4547 = !DILocation(line: 2661, column: 40, scope: !4541)
!4548 = !DILocation(line: 2661, column: 11, scope: !4542)
!4549 = !DILocation(line: 2662, column: 24, scope: !4541)
!4550 = !DILocation(line: 2662, column: 38, scope: !4541)
!4551 = !DILocation(line: 2662, column: 2, scope: !4541)
!4552 = !DILocation(line: 2663, column: 30, scope: !4542)
!4553 = !DILocation(line: 2663, column: 44, scope: !4542)
!4554 = !DILocation(line: 2663, column: 7, scope: !4542)
!4555 = !DILocation(line: 2664, column: 5, scope: !4542)
!4556 = distinct !{!4556, !4536, !4557}
!4557 = !DILocation(line: 2664, column: 5, scope: !4537)
!4558 = !DILocation(line: 2665, column: 1, scope: !4504)
!4559 = distinct !DISubprogram(name: "prepare_block_for_update", scope: !3, file: !3, line: 2507, type: !4560, scopeLine: 2508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4560 = !DISubroutineType(types: !4561)
!4561 = !{null, !825, !1007}
!4562 = !DILocalVariable(name: "bb", arg: 1, scope: !4559, file: !3, line: 2507, type: !825)
!4563 = !DILocation(line: 2507, column: 39, scope: !4559)
!4564 = !DILocalVariable(name: "insert_phi_p", arg: 2, scope: !4559, file: !3, line: 2507, type: !1007)
!4565 = !DILocation(line: 2507, column: 48, scope: !4559)
!4566 = !DILocalVariable(name: "son", scope: !4559, file: !3, line: 2509, type: !825)
!4567 = !DILocation(line: 2509, column: 15, scope: !4559)
!4568 = !DILocalVariable(name: "si", scope: !4559, file: !3, line: 2510, type: !4569)
!4569 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !587, line: 265, baseType: !4570)
!4570 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !587, line: 254, size: 192, elements: !4571)
!4571 = !{!4572, !4573, !4574}
!4572 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4570, file: !587, line: 257, baseType: !858, size: 64)
!4573 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4570, file: !587, line: 263, baseType: !853, size: 64, offset: 64)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4570, file: !587, line: 264, baseType: !825, size: 64, offset: 128)
!4575 = !DILocation(line: 2510, column: 24, scope: !4559)
!4576 = !DILocalVariable(name: "e", scope: !4559, file: !3, line: 2511, type: !843)
!4577 = !DILocation(line: 2511, column: 8, scope: !4559)
!4578 = !DILocalVariable(name: "ei", scope: !4559, file: !3, line: 2512, type: !2601)
!4579 = !DILocation(line: 2512, column: 17, scope: !4559)
!4580 = !DILocation(line: 2514, column: 26, scope: !4559)
!4581 = !DILocation(line: 2514, column: 3, scope: !4559)
!4582 = !DILocation(line: 2518, column: 29, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 2518, column: 3)
!4584 = !DILocation(line: 2518, column: 13, scope: !4583)
!4585 = !DILocation(line: 2518, column: 8, scope: !4583)
!4586 = !DILocation(line: 2518, column: 35, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 2518, column: 3)
!4588 = !DILocation(line: 2518, column: 34, scope: !4587)
!4589 = !DILocation(line: 2518, column: 3, scope: !4583)
!4590 = !DILocalVariable(name: "phi", scope: !4591, file: !3, line: 2520, type: !863)
!4591 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 2519, column: 5)
!4592 = !DILocation(line: 2520, column: 14, scope: !4591)
!4593 = !DILocation(line: 2520, column: 20, scope: !4591)
!4594 = !DILocalVariable(name: "lhs_sym", scope: !4591, file: !3, line: 2521, type: !888)
!4595 = !DILocation(line: 2521, column: 12, scope: !4591)
!4596 = !DILocalVariable(name: "lhs", scope: !4591, file: !3, line: 2521, type: !888)
!4597 = !DILocation(line: 2521, column: 21, scope: !4591)
!4598 = !DILocation(line: 2521, column: 46, scope: !4591)
!4599 = !DILocation(line: 2521, column: 27, scope: !4591)
!4600 = !DILocation(line: 2523, column: 17, scope: !4591)
!4601 = !DILocation(line: 2523, column: 32, scope: !4591)
!4602 = !DILocation(line: 2523, column: 38, scope: !4591)
!4603 = !DILocation(line: 2523, column: 15, scope: !4591)
!4604 = !DILocation(line: 2525, column: 40, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 2525, column: 11)
!4606 = !DILocation(line: 2525, column: 12, scope: !4605)
!4607 = !DILocation(line: 2525, column: 11, scope: !4591)
!4608 = !DILocation(line: 2526, column: 2, scope: !4605)
!4609 = !DILocation(line: 2528, column: 29, scope: !4591)
!4610 = !DILocation(line: 2528, column: 38, scope: !4591)
!4611 = !DILocation(line: 2528, column: 43, scope: !4591)
!4612 = !DILocation(line: 2528, column: 47, scope: !4591)
!4613 = !DILocation(line: 2528, column: 7, scope: !4591)
!4614 = !DILocation(line: 2537, column: 7, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 2537, column: 7)
!4616 = !DILocation(line: 2537, column: 7, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 2537, column: 7)
!4618 = !DILocation(line: 2538, column: 24, scope: !4617)
!4619 = !DILocation(line: 2538, column: 33, scope: !4617)
!4620 = !DILocation(line: 2538, column: 38, scope: !4617)
!4621 = !DILocation(line: 2538, column: 41, scope: !4617)
!4622 = !DILocation(line: 2538, column: 46, scope: !4617)
!4623 = !DILocation(line: 2538, column: 2, scope: !4617)
!4624 = distinct !{!4624, !4614, !4625}
!4625 = !DILocation(line: 2538, column: 58, scope: !4615)
!4626 = !DILocation(line: 2539, column: 5, scope: !4591)
!4627 = !DILocation(line: 2518, column: 51, scope: !4587)
!4628 = !DILocation(line: 2518, column: 3, scope: !4587)
!4629 = distinct !{!4629, !4589, !4630}
!4630 = !DILocation(line: 2539, column: 5, scope: !4583)
!4631 = !DILocation(line: 2542, column: 27, scope: !4632)
!4632 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 2542, column: 3)
!4633 = !DILocation(line: 2542, column: 13, scope: !4632)
!4634 = !DILocation(line: 2542, column: 8, scope: !4632)
!4635 = !DILocation(line: 2542, column: 33, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2542, column: 3)
!4637 = !DILocation(line: 2542, column: 32, scope: !4636)
!4638 = !DILocation(line: 2542, column: 3, scope: !4632)
!4639 = !DILocalVariable(name: "stmt", scope: !4640, file: !3, line: 2544, type: !863)
!4640 = distinct !DILexicalBlock(scope: !4636, file: !3, line: 2543, column: 5)
!4641 = !DILocation(line: 2544, column: 14, scope: !4640)
!4642 = !DILocalVariable(name: "i", scope: !4640, file: !3, line: 2545, type: !4643)
!4643 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !654, line: 140, baseType: !4644)
!4644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !654, line: 131, size: 320, elements: !4645)
!4645 = !{!4646, !4647, !4648, !4650, !4652, !4653, !4654}
!4646 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !4644, file: !654, line: 133, baseType: !1007, size: 8)
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !4644, file: !654, line: 134, baseType: !653, size: 32, offset: 32)
!4648 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !4644, file: !654, line: 135, baseType: !4649, size: 64, offset: 64)
!4649 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !654, line: 42, baseType: !1503)
!4650 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !4644, file: !654, line: 136, baseType: !4651, size: 64, offset: 128)
!4651 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !654, line: 50, baseType: !1510)
!4652 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !4644, file: !654, line: 137, baseType: !984, size: 32, offset: 192)
!4653 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !4644, file: !654, line: 138, baseType: !984, size: 32, offset: 224)
!4654 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !4644, file: !654, line: 139, baseType: !863, size: 64, offset: 256)
!4655 = !DILocation(line: 2545, column: 19, scope: !4640)
!4656 = !DILocalVariable(name: "use_p", scope: !4640, file: !3, line: 2546, type: !2297)
!4657 = !DILocation(line: 2546, column: 21, scope: !4640)
!4658 = !DILocalVariable(name: "def_p", scope: !4640, file: !3, line: 2547, type: !2348)
!4659 = !DILocation(line: 2547, column: 21, scope: !4640)
!4660 = !DILocation(line: 2549, column: 14, scope: !4640)
!4661 = !DILocation(line: 2549, column: 12, scope: !4640)
!4662 = !DILocation(line: 2551, column: 7, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 2551, column: 7)
!4664 = !DILocation(line: 2551, column: 7, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 2551, column: 7)
!4666 = !DILocalVariable(name: "use", scope: !4667, file: !3, line: 2553, type: !888)
!4667 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 2552, column: 2)
!4668 = !DILocation(line: 2553, column: 9, scope: !4667)
!4669 = !DILocation(line: 2553, column: 15, scope: !4667)
!4670 = !DILocalVariable(name: "sym", scope: !4667, file: !3, line: 2554, type: !888)
!4671 = !DILocation(line: 2554, column: 9, scope: !4667)
!4672 = !DILocation(line: 2554, column: 15, scope: !4667)
!4673 = !DILocation(line: 2554, column: 30, scope: !4667)
!4674 = !DILocation(line: 2554, column: 36, scope: !4667)
!4675 = !DILocation(line: 2555, column: 36, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 2555, column: 8)
!4677 = !DILocation(line: 2555, column: 8, scope: !4676)
!4678 = !DILocation(line: 2555, column: 8, scope: !4667)
!4679 = !DILocation(line: 2556, column: 28, scope: !4676)
!4680 = !DILocation(line: 2556, column: 33, scope: !4676)
!4681 = !DILocation(line: 2556, column: 39, scope: !4676)
!4682 = !DILocation(line: 2556, column: 43, scope: !4676)
!4683 = !DILocation(line: 2556, column: 6, scope: !4676)
!4684 = !DILocation(line: 2557, column: 2, scope: !4667)
!4685 = distinct !{!4685, !4662, !4686}
!4686 = !DILocation(line: 2557, column: 2, scope: !4663)
!4687 = !DILocation(line: 2559, column: 7, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 2559, column: 7)
!4689 = !DILocation(line: 2559, column: 7, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4688, file: !3, line: 2559, column: 7)
!4691 = !DILocalVariable(name: "def", scope: !4692, file: !3, line: 2561, type: !888)
!4692 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 2560, column: 2)
!4693 = !DILocation(line: 2561, column: 9, scope: !4692)
!4694 = !DILocation(line: 2561, column: 15, scope: !4692)
!4695 = !DILocalVariable(name: "sym", scope: !4692, file: !3, line: 2562, type: !888)
!4696 = !DILocation(line: 2562, column: 9, scope: !4692)
!4697 = !DILocation(line: 2562, column: 15, scope: !4692)
!4698 = !DILocation(line: 2562, column: 30, scope: !4692)
!4699 = !DILocation(line: 2562, column: 36, scope: !4692)
!4700 = !DILocation(line: 2563, column: 36, scope: !4701)
!4701 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 2563, column: 8)
!4702 = !DILocation(line: 2563, column: 8, scope: !4701)
!4703 = !DILocation(line: 2563, column: 8, scope: !4692)
!4704 = !DILocation(line: 2564, column: 28, scope: !4701)
!4705 = !DILocation(line: 2564, column: 33, scope: !4701)
!4706 = !DILocation(line: 2564, column: 39, scope: !4701)
!4707 = !DILocation(line: 2564, column: 43, scope: !4701)
!4708 = !DILocation(line: 2564, column: 6, scope: !4701)
!4709 = !DILocation(line: 2565, column: 2, scope: !4692)
!4710 = distinct !{!4710, !4687, !4711}
!4711 = !DILocation(line: 2565, column: 2, scope: !4688)
!4712 = !DILocation(line: 2566, column: 5, scope: !4640)
!4713 = !DILocation(line: 2542, column: 49, scope: !4636)
!4714 = !DILocation(line: 2542, column: 3, scope: !4636)
!4715 = distinct !{!4715, !4638, !4716}
!4716 = !DILocation(line: 2566, column: 5, scope: !4632)
!4717 = !DILocation(line: 2569, column: 45, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 2569, column: 3)
!4719 = !DILocation(line: 2569, column: 14, scope: !4718)
!4720 = !DILocation(line: 2569, column: 12, scope: !4718)
!4721 = !DILocation(line: 2569, column: 8, scope: !4718)
!4722 = !DILocation(line: 2570, column: 8, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 2569, column: 3)
!4724 = !DILocation(line: 2569, column: 3, scope: !4718)
!4725 = !DILocation(line: 2572, column: 31, scope: !4723)
!4726 = !DILocation(line: 2572, column: 36, scope: !4723)
!4727 = !DILocation(line: 2572, column: 5, scope: !4723)
!4728 = !DILocation(line: 2571, column: 44, scope: !4723)
!4729 = !DILocation(line: 2571, column: 14, scope: !4723)
!4730 = !DILocation(line: 2571, column: 12, scope: !4723)
!4731 = !DILocation(line: 2569, column: 3, scope: !4723)
!4732 = distinct !{!4732, !4724, !4733}
!4733 = !DILocation(line: 2572, column: 48, scope: !4718)
!4734 = !DILocation(line: 2573, column: 1, scope: !4559)
!4735 = distinct !DISubprogram(name: "insert_updated_phi_nodes_for", scope: !3, file: !3, line: 3009, type: !4736, scopeLine: 3011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4736 = !DISubroutineType(types: !4737)
!4737 = !{null, !888, !2214, !1480, !7}
!4738 = !DILocalVariable(name: "var", arg: 1, scope: !4735, file: !3, line: 3009, type: !888)
!4739 = !DILocation(line: 3009, column: 36, scope: !4735)
!4740 = !DILocalVariable(name: "dfs", arg: 2, scope: !4735, file: !3, line: 3009, type: !2214)
!4741 = !DILocation(line: 3009, column: 49, scope: !4735)
!4742 = !DILocalVariable(name: "blocks", arg: 3, scope: !4735, file: !3, line: 3009, type: !1480)
!4743 = !DILocation(line: 3009, column: 61, scope: !4735)
!4744 = !DILocalVariable(name: "update_flags", arg: 4, scope: !4735, file: !3, line: 3010, type: !7)
!4745 = !DILocation(line: 3010, column: 40, scope: !4735)
!4746 = !DILocalVariable(name: "entry", scope: !4735, file: !3, line: 3012, type: !825)
!4747 = !DILocation(line: 3012, column: 15, scope: !4735)
!4748 = !DILocalVariable(name: "db", scope: !4735, file: !3, line: 3013, type: !2286)
!4749 = !DILocation(line: 3013, column: 24, scope: !4735)
!4750 = !DILocalVariable(name: "idf", scope: !4735, file: !3, line: 3014, type: !1480)
!4751 = !DILocation(line: 3014, column: 10, scope: !4735)
!4752 = !DILocalVariable(name: "pruned_idf", scope: !4735, file: !3, line: 3014, type: !1480)
!4753 = !DILocation(line: 3014, column: 15, scope: !4735)
!4754 = !DILocalVariable(name: "bi", scope: !4735, file: !3, line: 3015, type: !2567)
!4755 = !DILocation(line: 3015, column: 19, scope: !4735)
!4756 = !DILocalVariable(name: "i", scope: !4735, file: !3, line: 3016, type: !7)
!4757 = !DILocation(line: 3016, column: 12, scope: !4735)
!4758 = !DILocation(line: 3026, column: 29, scope: !4735)
!4759 = !DILocation(line: 3026, column: 8, scope: !4735)
!4760 = !DILocation(line: 3026, column: 6, scope: !4735)
!4761 = !DILocation(line: 3029, column: 7, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 3029, column: 7)
!4763 = !DILocation(line: 3029, column: 10, scope: !4762)
!4764 = !DILocation(line: 3029, column: 18, scope: !4762)
!4765 = !DILocation(line: 3029, column: 21, scope: !4762)
!4766 = !DILocation(line: 3029, column: 7, scope: !4735)
!4767 = !DILocation(line: 3030, column: 5, scope: !4762)
!4768 = !DILocation(line: 3033, column: 22, scope: !4735)
!4769 = !DILocation(line: 3033, column: 26, scope: !4735)
!4770 = !DILocation(line: 3033, column: 38, scope: !4735)
!4771 = !DILocation(line: 3033, column: 9, scope: !4735)
!4772 = !DILocation(line: 3033, column: 7, scope: !4735)
!4773 = !DILocation(line: 3034, column: 16, scope: !4735)
!4774 = !DILocation(line: 3034, column: 14, scope: !4735)
!4775 = !DILocation(line: 3036, column: 7, scope: !4776)
!4776 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 3036, column: 7)
!4777 = !DILocation(line: 3036, column: 23, scope: !4776)
!4778 = !DILocation(line: 3036, column: 7, scope: !4735)
!4779 = !DILocation(line: 3038, column: 11, scope: !4780)
!4780 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 3038, column: 11)
!4781 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 3037, column: 5)
!4782 = !DILocation(line: 3038, column: 24, scope: !4780)
!4783 = !DILocation(line: 3038, column: 11, scope: !4781)
!4784 = !DILocation(line: 3044, column: 11, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 3039, column: 2)
!4786 = !DILocation(line: 3044, column: 15, scope: !4785)
!4787 = !DILocation(line: 3043, column: 12, scope: !4785)
!4788 = !DILocation(line: 3043, column: 10, scope: !4785)
!4789 = !DILocation(line: 3045, column: 8, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !4785, file: !3, line: 3045, column: 8)
!4791 = !DILocation(line: 3045, column: 17, scope: !4790)
!4792 = !DILocation(line: 3045, column: 14, scope: !4790)
!4793 = !DILocation(line: 3045, column: 8, scope: !4785)
!4794 = !DILocation(line: 3046, column: 6, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !4790, file: !3, line: 3046, column: 6)
!4796 = !DILocation(line: 3046, column: 6, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 3046, column: 6)
!4798 = !DILocation(line: 3047, column: 12, scope: !4799)
!4799 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 3047, column: 12)
!4800 = !DILocation(line: 3047, column: 31, scope: !4799)
!4801 = !DILocation(line: 3047, column: 28, scope: !4799)
!4802 = !DILocation(line: 3048, column: 5, scope: !4799)
!4803 = !DILocation(line: 3048, column: 40, scope: !4799)
!4804 = !DILocation(line: 3048, column: 57, scope: !4799)
!4805 = !DILocation(line: 3048, column: 8, scope: !4799)
!4806 = !DILocation(line: 3047, column: 12, scope: !4797)
!4807 = !DILocation(line: 3049, column: 19, scope: !4799)
!4808 = !DILocation(line: 3049, column: 31, scope: !4799)
!4809 = !DILocation(line: 3049, column: 3, scope: !4799)
!4810 = !DILocation(line: 3048, column: 62, scope: !4799)
!4811 = distinct !{!4811, !4794, !4812}
!4812 = !DILocation(line: 3049, column: 32, scope: !4795)
!4813 = !DILocation(line: 3050, column: 2, scope: !4785)
!4814 = !DILocation(line: 3054, column: 4, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 3052, column: 2)
!4816 = !DILocation(line: 3055, column: 17, scope: !4815)
!4817 = !DILocation(line: 3055, column: 29, scope: !4815)
!4818 = !DILocation(line: 3055, column: 4, scope: !4815)
!4819 = !DILocation(line: 3057, column: 5, scope: !4781)
!4820 = !DILocation(line: 3063, column: 20, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4776, file: !3, line: 3059, column: 5)
!4822 = !DILocation(line: 3063, column: 32, scope: !4821)
!4823 = !DILocation(line: 3063, column: 7, scope: !4821)
!4824 = !DILocation(line: 3066, column: 8, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4735, file: !3, line: 3066, column: 7)
!4826 = !DILocation(line: 3066, column: 7, scope: !4735)
!4827 = !DILocation(line: 3075, column: 24, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 3067, column: 5)
!4829 = !DILocation(line: 3075, column: 32, scope: !4828)
!4830 = !DILocation(line: 3075, column: 7, scope: !4828)
!4831 = !DILocation(line: 3076, column: 7, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4828, file: !3, line: 3076, column: 7)
!4833 = !DILocation(line: 3076, column: 7, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 3076, column: 7)
!4835 = !DILocalVariable(name: "e", scope: !4836, file: !3, line: 3078, type: !843)
!4836 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 3077, column: 2)
!4837 = !DILocation(line: 3078, column: 9, scope: !4836)
!4838 = !DILocalVariable(name: "ei", scope: !4836, file: !3, line: 3079, type: !2601)
!4839 = !DILocation(line: 3079, column: 18, scope: !4836)
!4840 = !DILocalVariable(name: "bb", scope: !4836, file: !3, line: 3080, type: !825)
!4841 = !DILocation(line: 3080, column: 16, scope: !4836)
!4842 = !DILocation(line: 3080, column: 21, scope: !4836)
!4843 = !DILocation(line: 3082, column: 4, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 3082, column: 4)
!4845 = !DILocation(line: 3082, column: 4, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 3082, column: 4)
!4847 = !DILocation(line: 3083, column: 10, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 3083, column: 10)
!4849 = !DILocation(line: 3083, column: 13, scope: !4848)
!4850 = !DILocation(line: 3083, column: 18, scope: !4848)
!4851 = !DILocation(line: 3083, column: 24, scope: !4848)
!4852 = !DILocation(line: 3083, column: 10, scope: !4846)
!4853 = !DILocation(line: 3084, column: 24, scope: !4848)
!4854 = !DILocation(line: 3084, column: 32, scope: !4848)
!4855 = !DILocation(line: 3084, column: 35, scope: !4848)
!4856 = !DILocation(line: 3084, column: 40, scope: !4848)
!4857 = !DILocation(line: 3084, column: 8, scope: !4848)
!4858 = !DILocation(line: 3083, column: 27, scope: !4848)
!4859 = distinct !{!4859, !4843, !4860}
!4860 = !DILocation(line: 3084, column: 45, scope: !4844)
!4861 = !DILocation(line: 3085, column: 2, scope: !4836)
!4862 = distinct !{!4862, !4831, !4863}
!4863 = !DILocation(line: 3085, column: 2, scope: !4832)
!4864 = !DILocation(line: 3087, column: 29, scope: !4828)
!4865 = !DILocation(line: 3087, column: 34, scope: !4828)
!4866 = !DILocation(line: 3087, column: 7, scope: !4828)
!4867 = !DILocation(line: 3088, column: 5, scope: !4828)
!4868 = !DILocation(line: 3090, column: 3, scope: !4735)
!4869 = !DILocation(line: 3091, column: 3, scope: !4735)
!4870 = !DILocation(line: 3092, column: 1, scope: !4735)
!4871 = distinct !DISubprogram(name: "SET_BIT", scope: !2388, file: !2388, line: 63, type: !4872, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4872 = !DISubroutineType(types: !4873)
!4873 = !{null, !2387, !7}
!4874 = !DILocalVariable(name: "map", arg: 1, scope: !4871, file: !2388, line: 63, type: !2387)
!4875 = !DILocation(line: 63, column: 18, scope: !4871)
!4876 = !DILocalVariable(name: "bitno", arg: 2, scope: !4871, file: !2388, line: 63, type: !7)
!4877 = !DILocation(line: 63, column: 36, scope: !4871)
!4878 = !DILocation(line: 65, column: 7, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4871, file: !2388, line: 65, column: 7)
!4880 = !DILocation(line: 65, column: 12, scope: !4879)
!4881 = !DILocation(line: 65, column: 7, scope: !4871)
!4882 = !DILocalVariable(name: "oldbit", scope: !4883, file: !2388, line: 67, type: !1007)
!4883 = distinct !DILexicalBlock(scope: !4879, file: !2388, line: 66, column: 5)
!4884 = !DILocation(line: 67, column: 12, scope: !4883)
!4885 = !DILocation(line: 68, column: 16, scope: !4883)
!4886 = !DILocation(line: 68, column: 14, scope: !4883)
!4887 = !DILocation(line: 69, column: 12, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4883, file: !2388, line: 69, column: 11)
!4889 = !DILocation(line: 69, column: 11, scope: !4883)
!4890 = !DILocation(line: 70, column: 2, scope: !4888)
!4891 = !DILocation(line: 70, column: 7, scope: !4888)
!4892 = !DILocation(line: 70, column: 16, scope: !4888)
!4893 = !DILocation(line: 70, column: 22, scope: !4888)
!4894 = !DILocation(line: 70, column: 41, scope: !4888)
!4895 = !DILocation(line: 71, column: 5, scope: !4883)
!4896 = !DILocation(line: 73, column: 33, scope: !4871)
!4897 = !DILocation(line: 73, column: 40, scope: !4871)
!4898 = !DILocation(line: 73, column: 29, scope: !4871)
!4899 = !DILocation(line: 72, column: 3, scope: !4871)
!4900 = !DILocation(line: 72, column: 8, scope: !4871)
!4901 = !DILocation(line: 72, column: 13, scope: !4871)
!4902 = !DILocation(line: 72, column: 19, scope: !4871)
!4903 = !DILocation(line: 73, column: 5, scope: !4871)
!4904 = !DILocation(line: 74, column: 1, scope: !4871)
!4905 = distinct !DISubprogram(name: "rewrite_blocks", scope: !3, file: !3, line: 2186, type: !4906, scopeLine: 2187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!4906 = !DISubroutineType(types: !4907)
!4907 = !{null, !825, !629}
!4908 = !DILocalVariable(name: "entry", arg: 1, scope: !4905, file: !3, line: 2186, type: !825)
!4909 = !DILocation(line: 2186, column: 29, scope: !4905)
!4910 = !DILocalVariable(name: "what", arg: 2, scope: !4905, file: !3, line: 2186, type: !629)
!4911 = !DILocation(line: 2186, column: 54, scope: !4905)
!4912 = !DILocalVariable(name: "walk_data", scope: !4905, file: !3, line: 2188, type: !4913)
!4913 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dom_walk_data", file: !4914, line: 29, size: 512, elements: !4915)
!4914 = !DIFile(filename: "./domwalk.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4915 = !{!4916, !4917, !4922, !4926, !4927, !4928, !4942, !4943}
!4916 = !DIDerivedType(tag: DW_TAG_member, name: "dom_direction", scope: !4913, file: !4914, line: 35, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!4917 = !DIDerivedType(tag: DW_TAG_member, name: "initialize_block_local_data", scope: !4913, file: !4914, line: 46, baseType: !4918, size: 64, offset: 64)
!4918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4919, size: 64)
!4919 = !DISubroutineType(types: !4920)
!4920 = !{null, !4921, !825, !1007}
!4921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4913, size: 64)
!4922 = !DIDerivedType(tag: DW_TAG_member, name: "before_dom_children", scope: !4913, file: !4914, line: 50, baseType: !4923, size: 64, offset: 128)
!4923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4924, size: 64)
!4924 = !DISubroutineType(types: !4925)
!4925 = !{null, !4921, !825}
!4926 = !DIDerivedType(tag: DW_TAG_member, name: "after_dom_children", scope: !4913, file: !4914, line: 53, baseType: !4923, size: 64, offset: 192)
!4927 = !DIDerivedType(tag: DW_TAG_member, name: "global_data", scope: !4913, file: !4914, line: 56, baseType: !1167, size: 64, offset: 256)
!4928 = !DIDerivedType(tag: DW_TAG_member, name: "block_data_stack", scope: !4913, file: !4914, line: 61, baseType: !4929, size: 64, offset: 320)
!4929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4930, size: 64)
!4930 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_heap", file: !4914, line: 23, baseType: !4931)
!4931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_heap", file: !4914, line: 23, size: 128, elements: !4932)
!4932 = !{!4933}
!4933 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4931, file: !4914, line: 23, baseType: !4934, size: 128)
!4934 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_base", file: !4914, line: 22, baseType: !4935)
!4935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_base", file: !4914, line: 22, size: 128, elements: !4936)
!4936 = !{!4937, !4938, !4939}
!4937 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4935, file: !4914, line: 22, baseType: !7, size: 32)
!4938 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4935, file: !4914, line: 22, baseType: !7, size: 32, offset: 32)
!4939 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4935, file: !4914, line: 22, baseType: !4940, size: 64, offset: 64)
!4940 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4941, size: 64, elements: !988)
!4941 = !DIDerivedType(tag: DW_TAG_typedef, name: "void_p", file: !4914, line: 21, baseType: !1167)
!4942 = !DIDerivedType(tag: DW_TAG_member, name: "block_local_data_size", scope: !4913, file: !4914, line: 65, baseType: !1417, size: 64, offset: 384)
!4943 = !DIDerivedType(tag: DW_TAG_member, name: "free_block_data", scope: !4913, file: !4914, line: 71, baseType: !4929, size: 64, offset: 448)
!4944 = !DILocation(line: 2188, column: 24, scope: !4905)
!4945 = !DILocation(line: 2191, column: 3, scope: !4905)
!4946 = !DILocation(line: 2191, column: 3, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 2191, column: 3)
!4948 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2191, column: 3)
!4949 = !DILocation(line: 2191, column: 3, scope: !4948)
!4950 = !DILocation(line: 2194, column: 3, scope: !4905)
!4951 = !DILocation(line: 2196, column: 13, scope: !4905)
!4952 = !DILocation(line: 2196, column: 27, scope: !4905)
!4953 = !DILocation(line: 2198, column: 7, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2198, column: 7)
!4955 = !DILocation(line: 2198, column: 12, scope: !4954)
!4956 = !DILocation(line: 2198, column: 7, scope: !4905)
!4957 = !DILocation(line: 2200, column: 17, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4954, file: !3, line: 2199, column: 5)
!4959 = !DILocation(line: 2200, column: 37, scope: !4958)
!4960 = !DILocation(line: 2201, column: 17, scope: !4958)
!4961 = !DILocation(line: 2201, column: 36, scope: !4958)
!4962 = !DILocation(line: 2202, column: 5, scope: !4958)
!4963 = !DILocation(line: 2203, column: 12, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4954, file: !3, line: 2203, column: 12)
!4965 = !DILocation(line: 2203, column: 17, scope: !4964)
!4966 = !DILocation(line: 2203, column: 12, scope: !4954)
!4967 = !DILocation(line: 2205, column: 17, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4964, file: !3, line: 2204, column: 5)
!4969 = !DILocation(line: 2205, column: 37, scope: !4968)
!4970 = !DILocation(line: 2206, column: 17, scope: !4968)
!4971 = !DILocation(line: 2206, column: 36, scope: !4968)
!4972 = !DILocation(line: 2207, column: 5, scope: !4968)
!4973 = !DILocation(line: 2209, column: 5, scope: !4964)
!4974 = !DILocation(line: 2211, column: 22, scope: !4905)
!4975 = !DILocation(line: 2211, column: 20, scope: !4905)
!4976 = !DILocation(line: 2214, column: 3, scope: !4905)
!4977 = !DILocation(line: 2218, column: 36, scope: !4905)
!4978 = !DILocation(line: 2218, column: 3, scope: !4905)
!4979 = !DILocation(line: 2221, column: 3, scope: !4905)
!4980 = !DILocation(line: 2224, column: 7, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2224, column: 7)
!4982 = !DILocation(line: 2224, column: 17, scope: !4981)
!4983 = !DILocation(line: 2224, column: 21, scope: !4981)
!4984 = !DILocation(line: 2224, column: 32, scope: !4981)
!4985 = !DILocation(line: 2224, column: 7, scope: !4905)
!4986 = !DILocation(line: 2226, column: 23, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 2225, column: 5)
!4988 = !DILocation(line: 2226, column: 7, scope: !4987)
!4989 = !DILocation(line: 2227, column: 11, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4987, file: !3, line: 2227, column: 11)
!4991 = !DILocation(line: 2227, column: 11, scope: !4987)
!4992 = !DILocation(line: 2228, column: 23, scope: !4990)
!4993 = !DILocation(line: 2228, column: 2, scope: !4990)
!4994 = !DILocation(line: 2229, column: 5, scope: !4987)
!4995 = !DILocation(line: 2231, column: 3, scope: !4905)
!4996 = !DILocation(line: 2233, column: 3, scope: !4905)
!4997 = !DILocation(line: 2233, column: 3, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 2233, column: 3)
!4999 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2233, column: 3)
!5000 = !DILocation(line: 2233, column: 3, scope: !4999)
!5001 = !DILocation(line: 2234, column: 1, scope: !4905)
!5002 = distinct !DISubprogram(name: "VEC_ssa_name_info_p_base_length", scope: !3, file: !3, line: 194, type: !5003, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5003 = !DISubroutineType(types: !5004)
!5004 = !{!7, !5005}
!5005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5006, size: 64)
!5006 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2227)
!5007 = !DILocalVariable(name: "vec_", arg: 1, scope: !5002, file: !3, line: 194, type: !5005)
!5008 = !DILocation(line: 194, column: 1, scope: !5002)
!5009 = distinct !DISubprogram(name: "VEC_ssa_name_info_p_heap_reserve", scope: !3, file: !3, line: 195, type: !5010, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5010 = !DISubroutineType(types: !5011)
!5011 = !{!984, !5012, !984}
!5012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2222, size: 64)
!5013 = !DILocalVariable(name: "vec_", arg: 1, scope: !5009, file: !3, line: 195, type: !5012)
!5014 = !DILocation(line: 195, column: 1, scope: !5009)
!5015 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5009, file: !3, line: 195, type: !984)
!5016 = !DILocalVariable(name: "extend", scope: !5009, file: !3, line: 195, type: !984)
!5017 = !DILocation(line: 195, column: 1, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5009, file: !3, line: 195, column: 1)
!5019 = distinct !DISubprogram(name: "VEC_ssa_name_info_p_base_quick_push", scope: !3, file: !3, line: 194, type: !5020, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5020 = !DISubroutineType(types: !5021)
!5021 = !{!5022, !5023, !2234}
!5022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!5023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2227, size: 64)
!5024 = !DILocalVariable(name: "vec_", arg: 1, scope: !5019, file: !3, line: 194, type: !5023)
!5025 = !DILocation(line: 194, column: 1, scope: !5019)
!5026 = !DILocalVariable(name: "obj_", arg: 2, scope: !5019, file: !3, line: 194, type: !2234)
!5027 = !DILocalVariable(name: "slot_", scope: !5019, file: !3, line: 194, type: !5022)
!5028 = distinct !DISubprogram(name: "VEC_ssa_name_info_p_base_index", scope: !3, file: !3, line: 194, type: !5029, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5029 = !DISubroutineType(types: !5030)
!5030 = !{!2234, !5005, !7}
!5031 = !DILocalVariable(name: "vec_", arg: 1, scope: !5028, file: !3, line: 194, type: !5005)
!5032 = !DILocation(line: 194, column: 1, scope: !5028)
!5033 = !DILocalVariable(name: "ix_", arg: 2, scope: !5028, file: !3, line: 194, type: !7)
!5034 = !DILocation(line: 0, scope: !5028)
!5035 = distinct !DISubprogram(name: "VEC_ssa_name_info_p_base_space", scope: !3, file: !3, line: 194, type: !5036, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5036 = !DISubroutineType(types: !5037)
!5037 = !{!984, !5023, !984}
!5038 = !DILocalVariable(name: "vec_", arg: 1, scope: !5035, file: !3, line: 194, type: !5023)
!5039 = !DILocation(line: 194, column: 1, scope: !5035)
!5040 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5035, file: !3, line: 194, type: !984)
!5041 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !5042, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5042 = !DISubroutineType(types: !5043)
!5043 = !{!1007, !2601}
!5044 = !DILocalVariable(name: "i", arg: 1, scope: !5041, file: !343, line: 721, type: !2601)
!5045 = !DILocation(line: 721, column: 25, scope: !5041)
!5046 = !DILocation(line: 723, column: 13, scope: !5041)
!5047 = !DILocation(line: 723, column: 22, scope: !5041)
!5048 = !DILocation(line: 723, column: 19, scope: !5041)
!5049 = !DILocation(line: 723, column: 10, scope: !5041)
!5050 = !DILocation(line: 723, column: 3, scope: !5041)
!5051 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !5052, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5052 = !DISubroutineType(types: !5053)
!5053 = !{!843, !2601}
!5054 = !DILocalVariable(name: "i", arg: 1, scope: !5051, file: !343, line: 752, type: !2601)
!5055 = !DILocation(line: 752, column: 24, scope: !5051)
!5056 = !DILocation(line: 754, column: 10, scope: !5051)
!5057 = !DILocation(line: 754, column: 3, scope: !5051)
!5058 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !5059, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5059 = !DISubroutineType(types: !5060)
!5060 = !{!7, !5061}
!5061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5062, size: 64)
!5062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !836)
!5063 = !DILocalVariable(name: "vec_", arg: 1, scope: !5058, file: !343, line: 150, type: !5061)
!5064 = !DILocation(line: 150, column: 1, scope: !5058)
!5065 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !5066, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5066 = !DISubroutineType(types: !5067)
!5067 = !{!831, !2601}
!5068 = !DILocalVariable(name: "i", arg: 1, scope: !5065, file: !343, line: 685, type: !2601)
!5069 = !DILocation(line: 685, column: 29, scope: !5065)
!5070 = !DILocation(line: 687, column: 3, scope: !5065)
!5071 = !DILocation(line: 688, column: 13, scope: !5065)
!5072 = !DILocation(line: 688, column: 10, scope: !5065)
!5073 = !DILocation(line: 688, column: 3, scope: !5065)
!5074 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !5075, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5075 = !DISubroutineType(types: !5076)
!5076 = !{!843, !5061, !7}
!5077 = !DILocalVariable(name: "vec_", arg: 1, scope: !5074, file: !343, line: 150, type: !5061)
!5078 = !DILocation(line: 150, column: 1, scope: !5074)
!5079 = !DILocalVariable(name: "ix_", arg: 2, scope: !5074, file: !343, line: 150, type: !7)
!5080 = !DILocation(line: 0, scope: !5074)
!5081 = distinct !DISubprogram(name: "first_htab_element", scope: !2511, file: !2511, line: 58, type: !5082, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5082 = !DISubroutineType(types: !5083)
!5083 = !{!1167, !5084, !1394}
!5084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3087, size: 64)
!5085 = !DILocalVariable(name: "hti", arg: 1, scope: !5081, file: !2511, line: 58, type: !5084)
!5086 = !DILocation(line: 58, column: 36, scope: !5081)
!5087 = !DILocalVariable(name: "table", arg: 2, scope: !5081, file: !2511, line: 58, type: !1394)
!5088 = !DILocation(line: 58, column: 48, scope: !5081)
!5089 = !DILocation(line: 60, column: 15, scope: !5081)
!5090 = !DILocation(line: 60, column: 3, scope: !5081)
!5091 = !DILocation(line: 60, column: 8, scope: !5081)
!5092 = !DILocation(line: 60, column: 13, scope: !5081)
!5093 = !DILocation(line: 61, column: 15, scope: !5081)
!5094 = !DILocation(line: 61, column: 22, scope: !5081)
!5095 = !DILocation(line: 61, column: 3, scope: !5081)
!5096 = !DILocation(line: 61, column: 8, scope: !5081)
!5097 = !DILocation(line: 61, column: 13, scope: !5081)
!5098 = !DILocation(line: 62, column: 16, scope: !5081)
!5099 = !DILocation(line: 62, column: 21, scope: !5081)
!5100 = !DILocation(line: 62, column: 39, scope: !5081)
!5101 = !DILocation(line: 62, column: 28, scope: !5081)
!5102 = !DILocation(line: 62, column: 26, scope: !5081)
!5103 = !DILocation(line: 62, column: 3, scope: !5081)
!5104 = !DILocation(line: 62, column: 8, scope: !5081)
!5105 = !DILocation(line: 62, column: 14, scope: !5081)
!5106 = !DILocation(line: 63, column: 3, scope: !5081)
!5107 = !DILocalVariable(name: "x", scope: !5108, file: !2511, line: 65, type: !1167)
!5108 = distinct !DILexicalBlock(scope: !5081, file: !2511, line: 64, column: 5)
!5109 = !DILocation(line: 65, column: 11, scope: !5108)
!5110 = !DILocation(line: 65, column: 17, scope: !5108)
!5111 = !DILocation(line: 65, column: 22, scope: !5108)
!5112 = !DILocation(line: 65, column: 15, scope: !5108)
!5113 = !DILocation(line: 66, column: 11, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5108, file: !2511, line: 66, column: 11)
!5115 = !DILocation(line: 66, column: 13, scope: !5114)
!5116 = !DILocation(line: 66, column: 33, scope: !5114)
!5117 = !DILocation(line: 66, column: 36, scope: !5114)
!5118 = !DILocation(line: 66, column: 38, scope: !5114)
!5119 = !DILocation(line: 66, column: 11, scope: !5108)
!5120 = !DILocation(line: 67, column: 2, scope: !5114)
!5121 = !DILocation(line: 68, column: 5, scope: !5108)
!5122 = !DILocation(line: 68, column: 17, scope: !5081)
!5123 = !DILocation(line: 68, column: 22, scope: !5081)
!5124 = !DILocation(line: 68, column: 14, scope: !5081)
!5125 = !DILocation(line: 68, column: 30, scope: !5081)
!5126 = !DILocation(line: 68, column: 35, scope: !5081)
!5127 = !DILocation(line: 68, column: 28, scope: !5081)
!5128 = distinct !{!5128, !5106, !5129}
!5129 = !DILocation(line: 68, column: 40, scope: !5081)
!5130 = !DILocation(line: 70, column: 7, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5081, file: !2511, line: 70, column: 7)
!5132 = !DILocation(line: 70, column: 12, scope: !5131)
!5133 = !DILocation(line: 70, column: 19, scope: !5131)
!5134 = !DILocation(line: 70, column: 24, scope: !5131)
!5135 = !DILocation(line: 70, column: 17, scope: !5131)
!5136 = !DILocation(line: 70, column: 7, scope: !5081)
!5137 = !DILocation(line: 71, column: 14, scope: !5131)
!5138 = !DILocation(line: 71, column: 19, scope: !5131)
!5139 = !DILocation(line: 71, column: 12, scope: !5131)
!5140 = !DILocation(line: 71, column: 5, scope: !5131)
!5141 = !DILocation(line: 72, column: 3, scope: !5081)
!5142 = !DILocation(line: 73, column: 1, scope: !5081)
!5143 = distinct !DISubprogram(name: "gimple_referenced_vars", scope: !2511, file: !2511, line: 40, type: !5144, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5144 = !DISubroutineType(types: !5145)
!5145 = !{!1394, !5146}
!5146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5147, size: 64)
!5147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1352)
!5148 = !DILocalVariable(name: "fun", arg: 1, scope: !5143, file: !2511, line: 40, type: !5146)
!5149 = !DILocation(line: 40, column: 48, scope: !5143)
!5150 = !DILocation(line: 42, column: 8, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5143, file: !2511, line: 42, column: 7)
!5152 = !DILocation(line: 42, column: 13, scope: !5151)
!5153 = !DILocation(line: 42, column: 7, scope: !5143)
!5154 = !DILocation(line: 43, column: 5, scope: !5151)
!5155 = !DILocation(line: 44, column: 10, scope: !5143)
!5156 = !DILocation(line: 44, column: 15, scope: !5143)
!5157 = !DILocation(line: 44, column: 26, scope: !5143)
!5158 = !DILocation(line: 44, column: 3, scope: !5143)
!5159 = !DILocation(line: 45, column: 1, scope: !5143)
!5160 = distinct !DISubprogram(name: "end_htab_p", scope: !2511, file: !2511, line: 79, type: !5161, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5161 = !DISubroutineType(types: !5162)
!5162 = !{!1007, !5163}
!5163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5164, size: 64)
!5164 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3087)
!5165 = !DILocalVariable(name: "hti", arg: 1, scope: !5160, file: !2511, line: 79, type: !5163)
!5166 = !DILocation(line: 79, column: 34, scope: !5160)
!5167 = !DILocation(line: 81, column: 7, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5160, file: !2511, line: 81, column: 7)
!5169 = !DILocation(line: 81, column: 12, scope: !5168)
!5170 = !DILocation(line: 81, column: 20, scope: !5168)
!5171 = !DILocation(line: 81, column: 25, scope: !5168)
!5172 = !DILocation(line: 81, column: 17, scope: !5168)
!5173 = !DILocation(line: 81, column: 7, scope: !5160)
!5174 = !DILocation(line: 82, column: 5, scope: !5168)
!5175 = !DILocation(line: 83, column: 3, scope: !5160)
!5176 = !DILocation(line: 84, column: 1, scope: !5160)
!5177 = distinct !DISubprogram(name: "next_htab_element", scope: !2511, file: !2511, line: 90, type: !5178, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5178 = !DISubroutineType(types: !5179)
!5179 = !{!1167, !5084}
!5180 = !DILocalVariable(name: "hti", arg: 1, scope: !5177, file: !2511, line: 90, type: !5084)
!5181 = !DILocation(line: 90, column: 35, scope: !5177)
!5182 = !DILocation(line: 92, column: 3, scope: !5177)
!5183 = !DILocation(line: 92, column: 13, scope: !5177)
!5184 = !DILocation(line: 92, column: 18, scope: !5177)
!5185 = !DILocation(line: 92, column: 10, scope: !5177)
!5186 = !DILocation(line: 92, column: 26, scope: !5177)
!5187 = !DILocation(line: 92, column: 31, scope: !5177)
!5188 = !DILocation(line: 92, column: 24, scope: !5177)
!5189 = !DILocalVariable(name: "x", scope: !5190, file: !2511, line: 94, type: !1167)
!5190 = distinct !DILexicalBlock(scope: !5177, file: !2511, line: 93, column: 5)
!5191 = !DILocation(line: 94, column: 11, scope: !5190)
!5192 = !DILocation(line: 94, column: 17, scope: !5190)
!5193 = !DILocation(line: 94, column: 22, scope: !5190)
!5194 = !DILocation(line: 94, column: 15, scope: !5190)
!5195 = !DILocation(line: 95, column: 11, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5190, file: !2511, line: 95, column: 11)
!5197 = !DILocation(line: 95, column: 13, scope: !5196)
!5198 = !DILocation(line: 95, column: 33, scope: !5196)
!5199 = !DILocation(line: 95, column: 36, scope: !5196)
!5200 = !DILocation(line: 95, column: 38, scope: !5196)
!5201 = !DILocation(line: 95, column: 11, scope: !5190)
!5202 = !DILocation(line: 96, column: 9, scope: !5196)
!5203 = !DILocation(line: 96, column: 2, scope: !5196)
!5204 = distinct !{!5204, !5182, !5205}
!5205 = !DILocation(line: 97, column: 5, scope: !5177)
!5206 = !DILocation(line: 98, column: 3, scope: !5177)
!5207 = !DILocation(line: 99, column: 1, scope: !5177)
!5208 = distinct !DISubprogram(name: "init_ssa_renamer", scope: !3, file: !3, line: 2302, type: !3168, scopeLine: 2303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5209 = !DILocalVariable(name: "var", scope: !5208, file: !3, line: 2304, type: !888)
!5210 = !DILocation(line: 2304, column: 8, scope: !5208)
!5211 = !DILocalVariable(name: "rvi", scope: !5208, file: !3, line: 2305, type: !3083)
!5212 = !DILocation(line: 2305, column: 27, scope: !5208)
!5213 = !DILocation(line: 2307, column: 3, scope: !5208)
!5214 = !DILocation(line: 2307, column: 9, scope: !5208)
!5215 = !DILocation(line: 2307, column: 20, scope: !5208)
!5216 = !DILocation(line: 2307, column: 29, scope: !5208)
!5217 = !DILocation(line: 2310, column: 3, scope: !5208)
!5218 = !DILocation(line: 2311, column: 29, scope: !5208)
!5219 = !DILocation(line: 2311, column: 16, scope: !5208)
!5220 = !DILocation(line: 2311, column: 14, scope: !5208)
!5221 = !DILocation(line: 2314, column: 3, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5208, file: !3, line: 2314, column: 3)
!5223 = !DILocation(line: 2314, column: 3, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 2314, column: 3)
!5225 = !DILocation(line: 2315, column: 22, scope: !5224)
!5226 = !DILocation(line: 2315, column: 5, scope: !5224)
!5227 = distinct !{!5227, !5221, !5228}
!5228 = !DILocation(line: 2315, column: 36, scope: !5222)
!5229 = !DILocation(line: 2316, column: 1, scope: !5208)
!5230 = distinct !DISubprogram(name: "mark_def_site_blocks", scope: !3, file: !3, line: 2264, type: !3168, scopeLine: 2265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5231 = !DILocalVariable(name: "walk_data", scope: !5230, file: !3, line: 2266, type: !4913)
!5232 = !DILocation(line: 2266, column: 24, scope: !5230)
!5233 = !DILocalVariable(name: "mark_def_sites_global_data", scope: !5230, file: !3, line: 2267, type: !2294)
!5234 = !DILocation(line: 2267, column: 37, scope: !5230)
!5235 = !DILocation(line: 2271, column: 13, scope: !5230)
!5236 = !DILocation(line: 2271, column: 27, scope: !5230)
!5237 = !DILocation(line: 2272, column: 13, scope: !5230)
!5238 = !DILocation(line: 2272, column: 41, scope: !5230)
!5239 = !DILocation(line: 2273, column: 13, scope: !5230)
!5240 = !DILocation(line: 2273, column: 33, scope: !5230)
!5241 = !DILocation(line: 2274, column: 13, scope: !5230)
!5242 = !DILocation(line: 2274, column: 32, scope: !5230)
!5243 = !DILocation(line: 2279, column: 38, scope: !5230)
!5244 = !DILocation(line: 2279, column: 30, scope: !5230)
!5245 = !DILocation(line: 2279, column: 36, scope: !5230)
!5246 = !DILocation(line: 2280, column: 27, scope: !5230)
!5247 = !DILocation(line: 2280, column: 13, scope: !5230)
!5248 = !DILocation(line: 2280, column: 25, scope: !5230)
!5249 = !DILocation(line: 2283, column: 13, scope: !5230)
!5250 = !DILocation(line: 2283, column: 35, scope: !5230)
!5251 = !DILocation(line: 2286, column: 3, scope: !5230)
!5252 = !DILocation(line: 2289, column: 36, scope: !5230)
!5253 = !DILocation(line: 2289, column: 3, scope: !5230)
!5254 = !DILocation(line: 2292, column: 3, scope: !5230)
!5255 = !DILocation(line: 2295, column: 3, scope: !5230)
!5256 = !DILocation(line: 2296, column: 1, scope: !5230)
!5257 = distinct !DISubprogram(name: "insert_phi_nodes", scope: !3, file: !3, line: 1155, type: !5258, scopeLine: 1156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5258 = !DISubroutineType(types: !5259)
!5259 = !{null, !2214}
!5260 = !DILocalVariable(name: "dfs", arg: 1, scope: !5257, file: !3, line: 1155, type: !2214)
!5261 = !DILocation(line: 1155, column: 27, scope: !5257)
!5262 = !DILocalVariable(name: "rvi", scope: !5257, file: !3, line: 1157, type: !3083)
!5263 = !DILocation(line: 1157, column: 27, scope: !5257)
!5264 = !DILocalVariable(name: "bi", scope: !5257, file: !3, line: 1158, type: !2567)
!5265 = !DILocation(line: 1158, column: 19, scope: !5257)
!5266 = !DILocalVariable(name: "var", scope: !5257, file: !3, line: 1159, type: !888)
!5267 = !DILocation(line: 1159, column: 8, scope: !5257)
!5268 = !DILocalVariable(name: "vars", scope: !5257, file: !3, line: 1160, type: !1480)
!5269 = !DILocation(line: 1160, column: 10, scope: !5257)
!5270 = !DILocalVariable(name: "uid", scope: !5257, file: !3, line: 1161, type: !7)
!5271 = !DILocation(line: 1161, column: 12, scope: !5257)
!5272 = !DILocation(line: 1163, column: 3, scope: !5257)
!5273 = !DILocation(line: 1163, column: 3, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 1163, column: 3)
!5275 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 1163, column: 3)
!5276 = !DILocation(line: 1163, column: 3, scope: !5275)
!5277 = !DILocation(line: 1168, column: 10, scope: !5257)
!5278 = !DILocation(line: 1168, column: 8, scope: !5257)
!5279 = !DILocation(line: 1169, column: 3, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 1169, column: 3)
!5281 = !DILocation(line: 1169, column: 3, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1169, column: 3)
!5283 = !DILocalVariable(name: "def_map", scope: !5284, file: !3, line: 1171, type: !2286)
!5284 = distinct !DILexicalBlock(scope: !5282, file: !3, line: 1170, column: 5)
!5285 = !DILocation(line: 1171, column: 28, scope: !5284)
!5286 = !DILocation(line: 1173, column: 38, scope: !5284)
!5287 = !DILocation(line: 1173, column: 17, scope: !5284)
!5288 = !DILocation(line: 1173, column: 15, scope: !5284)
!5289 = !DILocation(line: 1174, column: 11, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 1174, column: 11)
!5291 = !DILocation(line: 1174, column: 19, scope: !5290)
!5292 = !DILocation(line: 1174, column: 11, scope: !5284)
!5293 = !DILocation(line: 1175, column: 2, scope: !5290)
!5294 = !DILocation(line: 1177, column: 26, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 1177, column: 11)
!5296 = !DILocation(line: 1177, column: 11, scope: !5295)
!5297 = !DILocation(line: 1177, column: 31, scope: !5295)
!5298 = !DILocation(line: 1177, column: 11, scope: !5284)
!5299 = !DILocation(line: 1178, column: 18, scope: !5295)
!5300 = !DILocation(line: 1178, column: 24, scope: !5295)
!5301 = !DILocation(line: 1178, column: 2, scope: !5295)
!5302 = !DILocation(line: 1179, column: 5, scope: !5284)
!5303 = distinct !{!5303, !5279, !5304}
!5304 = !DILocation(line: 1179, column: 5, scope: !5280)
!5305 = !DILocation(line: 1181, column: 3, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 1181, column: 3)
!5307 = !DILocation(line: 1181, column: 3, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5306, file: !3, line: 1181, column: 3)
!5309 = !DILocalVariable(name: "var", scope: !5310, file: !3, line: 1183, type: !888)
!5310 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 1182, column: 5)
!5311 = !DILocation(line: 1183, column: 12, scope: !5310)
!5312 = !DILocation(line: 1183, column: 18, scope: !5310)
!5313 = !DILocalVariable(name: "def_map", scope: !5310, file: !3, line: 1184, type: !2286)
!5314 = !DILocation(line: 1184, column: 28, scope: !5310)
!5315 = !DILocalVariable(name: "idf", scope: !5310, file: !3, line: 1185, type: !1480)
!5316 = !DILocation(line: 1185, column: 14, scope: !5310)
!5317 = !DILocation(line: 1187, column: 38, scope: !5310)
!5318 = !DILocation(line: 1187, column: 17, scope: !5310)
!5319 = !DILocation(line: 1187, column: 15, scope: !5310)
!5320 = !DILocation(line: 1188, column: 26, scope: !5310)
!5321 = !DILocation(line: 1188, column: 35, scope: !5310)
!5322 = !DILocation(line: 1188, column: 47, scope: !5310)
!5323 = !DILocation(line: 1188, column: 13, scope: !5310)
!5324 = !DILocation(line: 1188, column: 11, scope: !5310)
!5325 = !DILocation(line: 1189, column: 29, scope: !5310)
!5326 = !DILocation(line: 1189, column: 34, scope: !5310)
!5327 = !DILocation(line: 1189, column: 7, scope: !5310)
!5328 = !DILocation(line: 1190, column: 7, scope: !5310)
!5329 = !DILocation(line: 1191, column: 5, scope: !5310)
!5330 = distinct !{!5330, !5305, !5331}
!5331 = !DILocation(line: 1191, column: 5, scope: !5306)
!5332 = !DILocation(line: 1193, column: 3, scope: !5257)
!5333 = !DILocation(line: 1195, column: 3, scope: !5257)
!5334 = !DILocation(line: 1195, column: 3, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5336, file: !3, line: 1195, column: 3)
!5336 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 1195, column: 3)
!5337 = !DILocation(line: 1195, column: 3, scope: !5336)
!5338 = !DILocation(line: 1196, column: 1, scope: !5257)
!5339 = distinct !DISubprogram(name: "mark_def_sites_block", scope: !3, file: !3, line: 2241, type: !4924, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5340 = !DILocalVariable(name: "walk_data", arg: 1, scope: !5339, file: !3, line: 2241, type: !4921)
!5341 = !DILocation(line: 2241, column: 45, scope: !5339)
!5342 = !DILocalVariable(name: "bb", arg: 2, scope: !5339, file: !3, line: 2241, type: !825)
!5343 = !DILocation(line: 2241, column: 68, scope: !5339)
!5344 = !DILocalVariable(name: "gd", scope: !5339, file: !3, line: 2243, type: !2293)
!5345 = !DILocation(line: 2243, column: 38, scope: !5339)
!5346 = !DILocalVariable(name: "kills", scope: !5339, file: !3, line: 2244, type: !1480)
!5347 = !DILocation(line: 2244, column: 10, scope: !5339)
!5348 = !DILocalVariable(name: "gsi", scope: !5339, file: !3, line: 2245, type: !4569)
!5349 = !DILocation(line: 2245, column: 24, scope: !5339)
!5350 = !DILocation(line: 2247, column: 46, scope: !5339)
!5351 = !DILocation(line: 2247, column: 57, scope: !5339)
!5352 = !DILocation(line: 2247, column: 8, scope: !5339)
!5353 = !DILocation(line: 2247, column: 6, scope: !5339)
!5354 = !DILocation(line: 2248, column: 11, scope: !5339)
!5355 = !DILocation(line: 2248, column: 15, scope: !5339)
!5356 = !DILocation(line: 2248, column: 9, scope: !5339)
!5357 = !DILocation(line: 2250, column: 17, scope: !5339)
!5358 = !DILocation(line: 2250, column: 3, scope: !5339)
!5359 = !DILocation(line: 2251, column: 28, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !5339, file: !3, line: 2251, column: 3)
!5361 = !DILocation(line: 2251, column: 14, scope: !5360)
!5362 = !DILocation(line: 2251, column: 8, scope: !5360)
!5363 = !DILocation(line: 2251, column: 34, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5360, file: !3, line: 2251, column: 3)
!5365 = !DILocation(line: 2251, column: 33, scope: !5364)
!5366 = !DILocation(line: 2251, column: 3, scope: !5360)
!5367 = !DILocation(line: 2252, column: 21, scope: !5364)
!5368 = !DILocation(line: 2252, column: 25, scope: !5364)
!5369 = !DILocation(line: 2252, column: 41, scope: !5364)
!5370 = !DILocation(line: 2252, column: 5, scope: !5364)
!5371 = !DILocation(line: 2251, column: 51, scope: !5364)
!5372 = !DILocation(line: 2251, column: 3, scope: !5364)
!5373 = distinct !{!5373, !5366, !5374}
!5374 = !DILocation(line: 2252, column: 46, scope: !5360)
!5375 = !DILocation(line: 2253, column: 1, scope: !5339)
!5376 = distinct !DISubprogram(name: "gsi_start_bb", scope: !587, file: !587, line: 4418, type: !5377, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5377 = !DISubroutineType(types: !5378)
!5378 = !{!4569, !825}
!5379 = !DILocalVariable(name: "bb", arg: 1, scope: !5376, file: !587, line: 4418, type: !825)
!5380 = !DILocation(line: 4418, column: 27, scope: !5376)
!5381 = !DILocalVariable(name: "i", scope: !5376, file: !587, line: 4420, type: !4569)
!5382 = !DILocation(line: 4420, column: 24, scope: !5376)
!5383 = !DILocalVariable(name: "seq", scope: !5376, file: !587, line: 4421, type: !853)
!5384 = !DILocation(line: 4421, column: 14, scope: !5376)
!5385 = !DILocation(line: 4423, column: 17, scope: !5376)
!5386 = !DILocation(line: 4423, column: 9, scope: !5376)
!5387 = !DILocation(line: 4423, column: 7, scope: !5376)
!5388 = !DILocation(line: 4424, column: 29, scope: !5376)
!5389 = !DILocation(line: 4424, column: 11, scope: !5376)
!5390 = !DILocation(line: 4424, column: 5, scope: !5376)
!5391 = !DILocation(line: 4424, column: 9, scope: !5376)
!5392 = !DILocation(line: 4425, column: 11, scope: !5376)
!5393 = !DILocation(line: 4425, column: 5, scope: !5376)
!5394 = !DILocation(line: 4425, column: 9, scope: !5376)
!5395 = !DILocation(line: 4426, column: 10, scope: !5376)
!5396 = !DILocation(line: 4426, column: 5, scope: !5376)
!5397 = !DILocation(line: 4426, column: 8, scope: !5376)
!5398 = !DILocation(line: 4428, column: 3, scope: !5376)
!5399 = distinct !DISubprogram(name: "gsi_end_p", scope: !587, file: !587, line: 4467, type: !5400, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5400 = !DISubroutineType(types: !5401)
!5401 = !{!1007, !4569}
!5402 = !DILocalVariable(name: "i", arg: 1, scope: !5399, file: !587, line: 4467, type: !4569)
!5403 = !DILocation(line: 4467, column: 33, scope: !5399)
!5404 = !DILocation(line: 4469, column: 12, scope: !5399)
!5405 = !DILocation(line: 4469, column: 16, scope: !5399)
!5406 = !DILocation(line: 4469, column: 10, scope: !5399)
!5407 = !DILocation(line: 4469, column: 3, scope: !5399)
!5408 = distinct !DISubprogram(name: "mark_def_sites", scope: !3, file: !3, line: 738, type: !5409, scopeLine: 739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5409 = !DISubroutineType(types: !5410)
!5410 = !{null, !825, !863, !1480}
!5411 = !DILocalVariable(name: "bb", arg: 1, scope: !5408, file: !3, line: 738, type: !825)
!5412 = !DILocation(line: 738, column: 29, scope: !5408)
!5413 = !DILocalVariable(name: "stmt", arg: 2, scope: !5408, file: !3, line: 738, type: !863)
!5414 = !DILocation(line: 738, column: 40, scope: !5408)
!5415 = !DILocalVariable(name: "kills", arg: 3, scope: !5408, file: !3, line: 738, type: !1480)
!5416 = !DILocation(line: 738, column: 53, scope: !5408)
!5417 = !DILocalVariable(name: "def", scope: !5408, file: !3, line: 740, type: !888)
!5418 = !DILocation(line: 740, column: 8, scope: !5408)
!5419 = !DILocalVariable(name: "use_p", scope: !5408, file: !3, line: 741, type: !2297)
!5420 = !DILocation(line: 741, column: 17, scope: !5408)
!5421 = !DILocalVariable(name: "iter", scope: !5408, file: !3, line: 742, type: !4643)
!5422 = !DILocation(line: 742, column: 15, scope: !5408)
!5423 = !DILocation(line: 746, column: 16, scope: !5408)
!5424 = !DILocation(line: 746, column: 3, scope: !5408)
!5425 = !DILocation(line: 748, column: 3, scope: !5408)
!5426 = !DILocation(line: 749, column: 22, scope: !5408)
!5427 = !DILocation(line: 749, column: 3, scope: !5408)
!5428 = !DILocation(line: 750, column: 21, scope: !5408)
!5429 = !DILocation(line: 750, column: 3, scope: !5408)
!5430 = !DILocation(line: 752, column: 24, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 752, column: 7)
!5432 = !DILocation(line: 752, column: 7, scope: !5431)
!5433 = !DILocation(line: 752, column: 7, scope: !5408)
!5434 = !DILocation(line: 753, column: 5, scope: !5431)
!5435 = !DILocation(line: 757, column: 3, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 757, column: 3)
!5437 = !DILocation(line: 757, column: 3, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5436, file: !3, line: 757, column: 3)
!5439 = !DILocalVariable(name: "sym", scope: !5440, file: !3, line: 759, type: !888)
!5440 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 758, column: 5)
!5441 = !DILocation(line: 759, column: 12, scope: !5440)
!5442 = !DILocation(line: 759, column: 18, scope: !5440)
!5443 = !DILocation(line: 760, column: 7, scope: !5440)
!5444 = !DILocation(line: 761, column: 26, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5440, file: !3, line: 761, column: 11)
!5446 = !DILocation(line: 761, column: 33, scope: !5445)
!5447 = !DILocation(line: 761, column: 12, scope: !5445)
!5448 = !DILocation(line: 761, column: 11, scope: !5440)
!5449 = !DILocation(line: 762, column: 20, scope: !5445)
!5450 = !DILocation(line: 762, column: 25, scope: !5445)
!5451 = !DILocation(line: 762, column: 2, scope: !5445)
!5452 = !DILocation(line: 763, column: 25, scope: !5440)
!5453 = !DILocation(line: 763, column: 7, scope: !5440)
!5454 = !DILocation(line: 764, column: 5, scope: !5440)
!5455 = distinct !{!5455, !5435, !5456}
!5456 = !DILocation(line: 764, column: 5, scope: !5436)
!5457 = !DILocation(line: 768, column: 3, scope: !5458)
!5458 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 768, column: 3)
!5459 = !DILocation(line: 768, column: 3, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5458, file: !3, line: 768, column: 3)
!5461 = !DILocation(line: 770, column: 7, scope: !5462)
!5462 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 769, column: 5)
!5463 = !DILocation(line: 771, column: 22, scope: !5462)
!5464 = !DILocation(line: 771, column: 27, scope: !5462)
!5465 = !DILocation(line: 771, column: 7, scope: !5462)
!5466 = !DILocation(line: 772, column: 23, scope: !5462)
!5467 = !DILocation(line: 772, column: 30, scope: !5462)
!5468 = !DILocation(line: 772, column: 7, scope: !5462)
!5469 = !DILocation(line: 773, column: 26, scope: !5462)
!5470 = !DILocation(line: 773, column: 7, scope: !5462)
!5471 = !DILocation(line: 774, column: 5, scope: !5462)
!5472 = distinct !{!5472, !5457, !5473}
!5473 = !DILocation(line: 774, column: 5, scope: !5458)
!5474 = !DILocation(line: 778, column: 23, scope: !5475)
!5475 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 778, column: 7)
!5476 = !DILocation(line: 778, column: 7, scope: !5475)
!5477 = !DILocation(line: 778, column: 29, scope: !5475)
!5478 = !DILocation(line: 778, column: 49, scope: !5475)
!5479 = !DILocation(line: 778, column: 32, scope: !5475)
!5480 = !DILocation(line: 778, column: 7, scope: !5408)
!5481 = !DILocation(line: 779, column: 14, scope: !5475)
!5482 = !DILocation(line: 779, column: 34, scope: !5475)
!5483 = !DILocation(line: 779, column: 38, scope: !5475)
!5484 = !DILocation(line: 779, column: 5, scope: !5475)
!5485 = !DILocation(line: 780, column: 1, scope: !5408)
!5486 = distinct !DISubprogram(name: "gsi_stmt", scope: !587, file: !587, line: 4501, type: !5487, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5487 = !DISubroutineType(types: !5488)
!5488 = !{!863, !4569}
!5489 = !DILocalVariable(name: "i", arg: 1, scope: !5486, file: !587, line: 4501, type: !4569)
!5490 = !DILocation(line: 4501, column: 32, scope: !5486)
!5491 = !DILocation(line: 4503, column: 12, scope: !5486)
!5492 = !DILocation(line: 4503, column: 17, scope: !5486)
!5493 = !DILocation(line: 4503, column: 3, scope: !5486)
!5494 = distinct !DISubprogram(name: "gsi_next", scope: !587, file: !587, line: 4485, type: !5495, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5495 = !DISubroutineType(types: !5496)
!5496 = !{null, !5497}
!5497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4569, size: 64)
!5498 = !DILocalVariable(name: "i", arg: 1, scope: !5494, file: !587, line: 4485, type: !5497)
!5499 = !DILocation(line: 4485, column: 33, scope: !5494)
!5500 = !DILocation(line: 4487, column: 12, scope: !5494)
!5501 = !DILocation(line: 4487, column: 15, scope: !5494)
!5502 = !DILocation(line: 4487, column: 20, scope: !5494)
!5503 = !DILocation(line: 4487, column: 3, scope: !5494)
!5504 = !DILocation(line: 4487, column: 6, scope: !5494)
!5505 = !DILocation(line: 4487, column: 10, scope: !5494)
!5506 = !DILocation(line: 4488, column: 1, scope: !5494)
!5507 = distinct !DISubprogram(name: "bb_seq", scope: !587, file: !587, line: 237, type: !5508, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5508 = !DISubroutineType(types: !5509)
!5509 = !{!853, !5510}
!5510 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !826, line: 112, baseType: !5511)
!5511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5512, size: 64)
!5512 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !828)
!5513 = !DILocalVariable(name: "bb", arg: 1, scope: !5507, file: !587, line: 237, type: !5510)
!5514 = !DILocation(line: 237, column: 27, scope: !5507)
!5515 = !DILocation(line: 239, column: 13, scope: !5507)
!5516 = !DILocation(line: 239, column: 17, scope: !5507)
!5517 = !DILocation(line: 239, column: 23, scope: !5507)
!5518 = !DILocation(line: 239, column: 33, scope: !5507)
!5519 = !DILocation(line: 239, column: 36, scope: !5507)
!5520 = !DILocation(line: 239, column: 40, scope: !5507)
!5521 = !DILocation(line: 239, column: 43, scope: !5507)
!5522 = !DILocation(line: 239, column: 10, scope: !5507)
!5523 = !DILocation(line: 239, column: 53, scope: !5507)
!5524 = !DILocation(line: 239, column: 57, scope: !5507)
!5525 = !DILocation(line: 239, column: 60, scope: !5507)
!5526 = !DILocation(line: 239, column: 68, scope: !5507)
!5527 = !DILocation(line: 239, column: 3, scope: !5507)
!5528 = distinct !DISubprogram(name: "gimple_seq_first", scope: !587, file: !587, line: 159, type: !5529, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5529 = !DISubroutineType(types: !5530)
!5530 = !{!858, !5531}
!5531 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !826, line: 67, baseType: !5532)
!5532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5533, size: 64)
!5533 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !855)
!5534 = !DILocalVariable(name: "s", arg: 1, scope: !5528, file: !587, line: 159, type: !5531)
!5535 = !DILocation(line: 159, column: 36, scope: !5528)
!5536 = !DILocation(line: 161, column: 10, scope: !5528)
!5537 = !DILocation(line: 161, column: 14, scope: !5528)
!5538 = !DILocation(line: 161, column: 17, scope: !5528)
!5539 = !DILocation(line: 161, column: 3, scope: !5528)
!5540 = distinct !DISubprogram(name: "update_stmt", scope: !587, file: !587, line: 1456, type: !5541, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5541 = !DISubroutineType(types: !5542)
!5542 = !{null, !863}
!5543 = !DILocalVariable(name: "s", arg: 1, scope: !5540, file: !587, line: 1456, type: !863)
!5544 = !DILocation(line: 1456, column: 21, scope: !5540)
!5545 = !DILocation(line: 1458, column: 23, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5540, file: !587, line: 1458, column: 7)
!5547 = !DILocation(line: 1458, column: 7, scope: !5546)
!5548 = !DILocation(line: 1458, column: 7, scope: !5540)
!5549 = !DILocation(line: 1460, column: 28, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5546, file: !587, line: 1459, column: 5)
!5551 = !DILocation(line: 1460, column: 7, scope: !5550)
!5552 = !DILocation(line: 1461, column: 29, scope: !5550)
!5553 = !DILocation(line: 1461, column: 7, scope: !5550)
!5554 = !DILocation(line: 1462, column: 5, scope: !5550)
!5555 = !DILocation(line: 1463, column: 1, scope: !5540)
!5556 = distinct !DISubprogram(name: "set_register_defs", scope: !3, file: !3, line: 276, type: !5557, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5557 = !DISubroutineType(types: !5558)
!5558 = !{null, !863, !1007}
!5559 = !DILocalVariable(name: "stmt", arg: 1, scope: !5556, file: !3, line: 276, type: !863)
!5560 = !DILocation(line: 276, column: 27, scope: !5556)
!5561 = !DILocalVariable(name: "register_defs_p", arg: 2, scope: !5556, file: !3, line: 276, type: !1007)
!5562 = !DILocation(line: 276, column: 38, scope: !5556)
!5563 = !DILocation(line: 278, column: 19, scope: !5556)
!5564 = !DILocation(line: 278, column: 35, scope: !5556)
!5565 = !DILocation(line: 278, column: 3, scope: !5556)
!5566 = !DILocation(line: 279, column: 1, scope: !5556)
!5567 = distinct !DISubprogram(name: "set_rewrite_uses", scope: !3, file: !3, line: 252, type: !5557, scopeLine: 253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5568 = !DILocalVariable(name: "stmt", arg: 1, scope: !5567, file: !3, line: 252, type: !863)
!5569 = !DILocation(line: 252, column: 26, scope: !5567)
!5570 = !DILocalVariable(name: "rewrite_p", arg: 2, scope: !5567, file: !3, line: 252, type: !1007)
!5571 = !DILocation(line: 252, column: 37, scope: !5567)
!5572 = !DILocation(line: 254, column: 23, scope: !5567)
!5573 = !DILocation(line: 254, column: 29, scope: !5567)
!5574 = !DILocation(line: 254, column: 3, scope: !5567)
!5575 = !DILocation(line: 255, column: 1, scope: !5567)
!5576 = distinct !DISubprogram(name: "is_gimple_debug", scope: !587, file: !587, line: 3249, type: !5577, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5577 = !DISubroutineType(types: !5578)
!5578 = !{!1007, !3843}
!5579 = !DILocalVariable(name: "gs", arg: 1, scope: !5576, file: !587, line: 3249, type: !3843)
!5580 = !DILocation(line: 3249, column: 31, scope: !5576)
!5581 = !DILocation(line: 3251, column: 23, scope: !5576)
!5582 = !DILocation(line: 3251, column: 10, scope: !5576)
!5583 = !DILocation(line: 3251, column: 27, scope: !5576)
!5584 = !DILocation(line: 3251, column: 3, scope: !5576)
!5585 = distinct !DISubprogram(name: "op_iter_init_use", scope: !2511, file: !2511, line: 768, type: !5586, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5586 = !DISubroutineType(types: !5587)
!5587 = !{!2297, !5588, !863, !984}
!5588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4643, size: 64)
!5589 = !DILocalVariable(name: "ptr", arg: 1, scope: !5585, file: !2511, line: 768, type: !5588)
!5590 = !DILocation(line: 768, column: 32, scope: !5585)
!5591 = !DILocalVariable(name: "stmt", arg: 2, scope: !5585, file: !2511, line: 768, type: !863)
!5592 = !DILocation(line: 768, column: 44, scope: !5585)
!5593 = !DILocalVariable(name: "flags", arg: 3, scope: !5585, file: !2511, line: 768, type: !984)
!5594 = !DILocation(line: 768, column: 54, scope: !5585)
!5595 = !DILocation(line: 770, column: 3, scope: !5585)
!5596 = !DILocation(line: 772, column: 17, scope: !5585)
!5597 = !DILocation(line: 772, column: 22, scope: !5585)
!5598 = !DILocation(line: 772, column: 28, scope: !5585)
!5599 = !DILocation(line: 772, column: 3, scope: !5585)
!5600 = !DILocation(line: 773, column: 3, scope: !5585)
!5601 = !DILocation(line: 773, column: 8, scope: !5585)
!5602 = !DILocation(line: 773, column: 18, scope: !5585)
!5603 = !DILocation(line: 774, column: 28, scope: !5585)
!5604 = !DILocation(line: 774, column: 10, scope: !5585)
!5605 = !DILocation(line: 774, column: 3, scope: !5585)
!5606 = distinct !DISubprogram(name: "op_iter_done", scope: !2511, file: !2511, line: 652, type: !5607, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5607 = !DISubroutineType(types: !5608)
!5608 = !{!1007, !5609}
!5609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5610, size: 64)
!5610 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4643)
!5611 = !DILocalVariable(name: "ptr", arg: 1, scope: !5606, file: !2511, line: 652, type: !5609)
!5612 = !DILocation(line: 652, column: 34, scope: !5606)
!5613 = !DILocation(line: 654, column: 10, scope: !5606)
!5614 = !DILocation(line: 654, column: 15, scope: !5606)
!5615 = !DILocation(line: 654, column: 3, scope: !5606)
!5616 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2511, file: !2511, line: 427, type: !5617, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5617 = !DISubroutineType(types: !5618)
!5618 = !{!888, !2297}
!5619 = !DILocalVariable(name: "use", arg: 1, scope: !5616, file: !2511, line: 427, type: !2297)
!5620 = !DILocation(line: 427, column: 33, scope: !5616)
!5621 = !DILocation(line: 429, column: 12, scope: !5616)
!5622 = !DILocation(line: 429, column: 17, scope: !5616)
!5623 = !DILocation(line: 429, column: 10, scope: !5616)
!5624 = !DILocation(line: 429, column: 3, scope: !5616)
!5625 = distinct !DISubprogram(name: "set_livein_block", scope: !3, file: !3, line: 532, type: !5626, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5626 = !DISubroutineType(types: !5627)
!5627 = !{null, !888, !825}
!5628 = !DILocalVariable(name: "var", arg: 1, scope: !5625, file: !3, line: 532, type: !888)
!5629 = !DILocation(line: 532, column: 24, scope: !5625)
!5630 = !DILocalVariable(name: "bb", arg: 2, scope: !5625, file: !3, line: 532, type: !825)
!5631 = !DILocation(line: 532, column: 41, scope: !5625)
!5632 = !DILocalVariable(name: "db_p", scope: !5625, file: !3, line: 534, type: !2286)
!5633 = !DILocation(line: 534, column: 24, scope: !5625)
!5634 = !DILocalVariable(name: "state", scope: !5625, file: !3, line: 535, type: !633)
!5635 = !DILocation(line: 535, column: 23, scope: !5625)
!5636 = !DILocation(line: 535, column: 46, scope: !5625)
!5637 = !DILocation(line: 535, column: 31, scope: !5625)
!5638 = !DILocation(line: 537, column: 30, scope: !5625)
!5639 = !DILocation(line: 537, column: 10, scope: !5625)
!5640 = !DILocation(line: 537, column: 8, scope: !5625)
!5641 = !DILocation(line: 540, column: 19, scope: !5625)
!5642 = !DILocation(line: 540, column: 25, scope: !5625)
!5643 = !DILocation(line: 540, column: 40, scope: !5625)
!5644 = !DILocation(line: 540, column: 44, scope: !5625)
!5645 = !DILocation(line: 540, column: 3, scope: !5625)
!5646 = !DILocation(line: 548, column: 7, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 548, column: 7)
!5648 = !DILocation(line: 548, column: 13, scope: !5647)
!5649 = !DILocation(line: 548, column: 7, scope: !5625)
!5650 = !DILocalVariable(name: "def_block_index", scope: !5651, file: !3, line: 550, type: !984)
!5651 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 549, column: 5)
!5652 = !DILocation(line: 550, column: 11, scope: !5651)
!5653 = !DILocation(line: 550, column: 51, scope: !5651)
!5654 = !DILocation(line: 550, column: 57, scope: !5651)
!5655 = !DILocation(line: 550, column: 29, scope: !5651)
!5656 = !DILocation(line: 552, column: 11, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !5651, file: !3, line: 552, column: 11)
!5658 = !DILocation(line: 552, column: 27, scope: !5657)
!5659 = !DILocation(line: 553, column: 4, scope: !5657)
!5660 = !DILocation(line: 553, column: 41, scope: !5657)
!5661 = !DILocation(line: 554, column: 25, scope: !5657)
!5662 = !DILocation(line: 553, column: 9, scope: !5657)
!5663 = !DILocation(line: 552, column: 11, scope: !5651)
!5664 = !DILocation(line: 555, column: 17, scope: !5657)
!5665 = !DILocation(line: 555, column: 2, scope: !5657)
!5666 = !DILocation(line: 556, column: 5, scope: !5651)
!5667 = !DILocation(line: 558, column: 20, scope: !5647)
!5668 = !DILocation(line: 558, column: 5, scope: !5647)
!5669 = !DILocation(line: 559, column: 1, scope: !5625)
!5670 = distinct !DISubprogram(name: "op_iter_next_use", scope: !2511, file: !2511, line: 659, type: !5671, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5671 = !DISubroutineType(types: !5672)
!5672 = !{!2297, !5588}
!5673 = !DILocalVariable(name: "ptr", arg: 1, scope: !5670, file: !2511, line: 659, type: !5588)
!5674 = !DILocation(line: 659, column: 32, scope: !5670)
!5675 = !DILocalVariable(name: "use_p", scope: !5670, file: !2511, line: 661, type: !2297)
!5676 = !DILocation(line: 661, column: 17, scope: !5670)
!5677 = !DILocation(line: 665, column: 7, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !5670, file: !2511, line: 665, column: 7)
!5679 = !DILocation(line: 665, column: 12, scope: !5678)
!5680 = !DILocation(line: 665, column: 7, scope: !5670)
!5681 = !DILocation(line: 667, column: 15, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5678, file: !2511, line: 666, column: 5)
!5683 = !DILocation(line: 667, column: 13, scope: !5682)
!5684 = !DILocation(line: 668, column: 19, scope: !5682)
!5685 = !DILocation(line: 668, column: 24, scope: !5682)
!5686 = !DILocation(line: 668, column: 30, scope: !5682)
!5687 = !DILocation(line: 668, column: 7, scope: !5682)
!5688 = !DILocation(line: 668, column: 12, scope: !5682)
!5689 = !DILocation(line: 668, column: 17, scope: !5682)
!5690 = !DILocation(line: 669, column: 14, scope: !5682)
!5691 = !DILocation(line: 669, column: 7, scope: !5682)
!5692 = !DILocation(line: 671, column: 7, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5670, file: !2511, line: 671, column: 7)
!5694 = !DILocation(line: 671, column: 12, scope: !5693)
!5695 = !DILocation(line: 671, column: 20, scope: !5693)
!5696 = !DILocation(line: 671, column: 25, scope: !5693)
!5697 = !DILocation(line: 671, column: 18, scope: !5693)
!5698 = !DILocation(line: 671, column: 7, scope: !5670)
!5699 = !DILocation(line: 673, column: 14, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5693, file: !2511, line: 672, column: 5)
!5701 = !DILocation(line: 673, column: 7, scope: !5700)
!5702 = !DILocation(line: 675, column: 3, scope: !5670)
!5703 = !DILocation(line: 675, column: 8, scope: !5670)
!5704 = !DILocation(line: 675, column: 13, scope: !5670)
!5705 = !DILocation(line: 676, column: 3, scope: !5670)
!5706 = !DILocation(line: 677, column: 1, scope: !5670)
!5707 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !2511, file: !2511, line: 792, type: !5708, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5708 = !DISubroutineType(types: !5709)
!5709 = !{!888, !5588, !863, !984}
!5710 = !DILocalVariable(name: "ptr", arg: 1, scope: !5707, file: !2511, line: 792, type: !5588)
!5711 = !DILocation(line: 792, column: 33, scope: !5707)
!5712 = !DILocalVariable(name: "stmt", arg: 2, scope: !5707, file: !2511, line: 792, type: !863)
!5713 = !DILocation(line: 792, column: 45, scope: !5707)
!5714 = !DILocalVariable(name: "flags", arg: 3, scope: !5707, file: !2511, line: 792, type: !984)
!5715 = !DILocation(line: 792, column: 55, scope: !5707)
!5716 = !DILocation(line: 794, column: 17, scope: !5707)
!5717 = !DILocation(line: 794, column: 22, scope: !5707)
!5718 = !DILocation(line: 794, column: 28, scope: !5707)
!5719 = !DILocation(line: 794, column: 3, scope: !5707)
!5720 = !DILocation(line: 795, column: 3, scope: !5707)
!5721 = !DILocation(line: 795, column: 8, scope: !5707)
!5722 = !DILocation(line: 795, column: 18, scope: !5707)
!5723 = !DILocation(line: 796, column: 29, scope: !5707)
!5724 = !DILocation(line: 796, column: 10, scope: !5707)
!5725 = !DILocation(line: 796, column: 3, scope: !5707)
!5726 = distinct !DISubprogram(name: "set_def_block", scope: !3, file: !3, line: 497, type: !5727, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5727 = !DISubroutineType(types: !5728)
!5728 = !{null, !888, !825, !1007}
!5729 = !DILocalVariable(name: "var", arg: 1, scope: !5726, file: !3, line: 497, type: !888)
!5730 = !DILocation(line: 497, column: 21, scope: !5726)
!5731 = !DILocalVariable(name: "bb", arg: 2, scope: !5726, file: !3, line: 497, type: !825)
!5732 = !DILocation(line: 497, column: 38, scope: !5726)
!5733 = !DILocalVariable(name: "phi_p", arg: 3, scope: !5726, file: !3, line: 497, type: !1007)
!5734 = !DILocation(line: 497, column: 47, scope: !5726)
!5735 = !DILocalVariable(name: "db_p", scope: !5726, file: !3, line: 499, type: !2286)
!5736 = !DILocation(line: 499, column: 24, scope: !5726)
!5737 = !DILocalVariable(name: "state", scope: !5726, file: !3, line: 500, type: !633)
!5738 = !DILocation(line: 500, column: 23, scope: !5726)
!5739 = !DILocation(line: 502, column: 26, scope: !5726)
!5740 = !DILocation(line: 502, column: 11, scope: !5726)
!5741 = !DILocation(line: 502, column: 9, scope: !5726)
!5742 = !DILocation(line: 503, column: 30, scope: !5726)
!5743 = !DILocation(line: 503, column: 10, scope: !5726)
!5744 = !DILocation(line: 503, column: 8, scope: !5726)
!5745 = !DILocation(line: 506, column: 19, scope: !5726)
!5746 = !DILocation(line: 506, column: 25, scope: !5726)
!5747 = !DILocation(line: 506, column: 37, scope: !5726)
!5748 = !DILocation(line: 506, column: 41, scope: !5726)
!5749 = !DILocation(line: 506, column: 3, scope: !5726)
!5750 = !DILocation(line: 507, column: 7, scope: !5751)
!5751 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 507, column: 7)
!5752 = !DILocation(line: 507, column: 7, scope: !5726)
!5753 = !DILocation(line: 508, column: 21, scope: !5751)
!5754 = !DILocation(line: 508, column: 27, scope: !5751)
!5755 = !DILocation(line: 508, column: 39, scope: !5751)
!5756 = !DILocation(line: 508, column: 43, scope: !5751)
!5757 = !DILocation(line: 508, column: 5, scope: !5751)
!5758 = !DILocation(line: 522, column: 7, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 522, column: 7)
!5760 = !DILocation(line: 522, column: 13, scope: !5759)
!5761 = !DILocation(line: 522, column: 7, scope: !5726)
!5762 = !DILocation(line: 523, column: 20, scope: !5759)
!5763 = !DILocation(line: 523, column: 5, scope: !5759)
!5764 = !DILocation(line: 525, column: 20, scope: !5759)
!5765 = !DILocation(line: 525, column: 5, scope: !5759)
!5766 = !DILocation(line: 526, column: 1, scope: !5726)
!5767 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !2511, file: !2511, line: 699, type: !5768, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5768 = !DISubroutineType(types: !5769)
!5769 = !{!888, !5588}
!5770 = !DILocalVariable(name: "ptr", arg: 1, scope: !5767, file: !2511, line: 699, type: !5588)
!5771 = !DILocation(line: 699, column: 33, scope: !5767)
!5772 = !DILocalVariable(name: "val", scope: !5767, file: !2511, line: 701, type: !888)
!5773 = !DILocation(line: 701, column: 8, scope: !5767)
!5774 = !DILocation(line: 705, column: 7, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5767, file: !2511, line: 705, column: 7)
!5776 = !DILocation(line: 705, column: 12, scope: !5775)
!5777 = !DILocation(line: 705, column: 7, scope: !5767)
!5778 = !DILocation(line: 707, column: 13, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5775, file: !2511, line: 706, column: 5)
!5780 = !DILocation(line: 707, column: 11, scope: !5779)
!5781 = !DILocation(line: 708, column: 19, scope: !5779)
!5782 = !DILocation(line: 708, column: 24, scope: !5779)
!5783 = !DILocation(line: 708, column: 30, scope: !5779)
!5784 = !DILocation(line: 708, column: 7, scope: !5779)
!5785 = !DILocation(line: 708, column: 12, scope: !5779)
!5786 = !DILocation(line: 708, column: 17, scope: !5779)
!5787 = !DILocation(line: 709, column: 14, scope: !5779)
!5788 = !DILocation(line: 709, column: 7, scope: !5779)
!5789 = !DILocation(line: 711, column: 7, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5767, file: !2511, line: 711, column: 7)
!5791 = !DILocation(line: 711, column: 12, scope: !5790)
!5792 = !DILocation(line: 711, column: 7, scope: !5767)
!5793 = !DILocation(line: 713, column: 13, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5790, file: !2511, line: 712, column: 5)
!5795 = !DILocation(line: 713, column: 11, scope: !5794)
!5796 = !DILocation(line: 714, column: 19, scope: !5794)
!5797 = !DILocation(line: 714, column: 24, scope: !5794)
!5798 = !DILocation(line: 714, column: 30, scope: !5794)
!5799 = !DILocation(line: 714, column: 7, scope: !5794)
!5800 = !DILocation(line: 714, column: 12, scope: !5794)
!5801 = !DILocation(line: 714, column: 17, scope: !5794)
!5802 = !DILocation(line: 715, column: 14, scope: !5794)
!5803 = !DILocation(line: 715, column: 7, scope: !5794)
!5804 = !DILocation(line: 718, column: 3, scope: !5767)
!5805 = !DILocation(line: 718, column: 8, scope: !5767)
!5806 = !DILocation(line: 718, column: 13, scope: !5767)
!5807 = !DILocation(line: 719, column: 3, scope: !5767)
!5808 = !DILocation(line: 721, column: 1, scope: !5767)
!5809 = distinct !DISubprogram(name: "rewrite_uses_p", scope: !3, file: !3, line: 243, type: !5810, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5810 = !DISubroutineType(types: !5811)
!5811 = !{!1007, !863}
!5812 = !DILocalVariable(name: "stmt", arg: 1, scope: !5809, file: !3, line: 243, type: !863)
!5813 = !DILocation(line: 243, column: 24, scope: !5809)
!5814 = !DILocation(line: 245, column: 28, scope: !5809)
!5815 = !DILocation(line: 245, column: 10, scope: !5809)
!5816 = !DILocation(line: 245, column: 3, scope: !5809)
!5817 = distinct !DISubprogram(name: "register_defs_p", scope: !3, file: !3, line: 267, type: !5810, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5818 = !DILocalVariable(name: "stmt", arg: 1, scope: !5817, file: !3, line: 267, type: !863)
!5819 = !DILocation(line: 267, column: 25, scope: !5817)
!5820 = !DILocation(line: 269, column: 22, scope: !5817)
!5821 = !DILocation(line: 269, column: 10, scope: !5817)
!5822 = !DILocation(line: 269, column: 38, scope: !5817)
!5823 = !DILocation(line: 269, column: 3, scope: !5817)
!5824 = distinct !DISubprogram(name: "gimple_has_ops", scope: !587, file: !587, line: 1274, type: !5577, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5825 = !DILocalVariable(name: "g", arg: 1, scope: !5824, file: !587, line: 1274, type: !3843)
!5826 = !DILocation(line: 1274, column: 30, scope: !5824)
!5827 = !DILocation(line: 1276, column: 23, scope: !5824)
!5828 = !DILocation(line: 1276, column: 10, scope: !5824)
!5829 = !DILocation(line: 1276, column: 26, scope: !5824)
!5830 = !DILocation(line: 1276, column: 41, scope: !5824)
!5831 = !DILocation(line: 1276, column: 57, scope: !5824)
!5832 = !DILocation(line: 1276, column: 44, scope: !5824)
!5833 = !DILocation(line: 1276, column: 60, scope: !5824)
!5834 = !DILocation(line: 0, scope: !5824)
!5835 = !DILocation(line: 1276, column: 3, scope: !5824)
!5836 = distinct !DISubprogram(name: "gimple_set_plf", scope: !587, file: !587, line: 1235, type: !5837, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5837 = !DISubroutineType(types: !5838)
!5838 = !{null, !863, !660, !1007}
!5839 = !DILocalVariable(name: "stmt", arg: 1, scope: !5836, file: !587, line: 1235, type: !863)
!5840 = !DILocation(line: 1235, column: 24, scope: !5836)
!5841 = !DILocalVariable(name: "plf", arg: 2, scope: !5836, file: !587, line: 1235, type: !660)
!5842 = !DILocation(line: 1235, column: 44, scope: !5836)
!5843 = !DILocalVariable(name: "val_p", arg: 3, scope: !5836, file: !587, line: 1235, type: !1007)
!5844 = !DILocation(line: 1235, column: 54, scope: !5836)
!5845 = !DILocation(line: 1237, column: 7, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5836, file: !587, line: 1237, column: 7)
!5847 = !DILocation(line: 1237, column: 7, scope: !5836)
!5848 = !DILocation(line: 1238, column: 40, scope: !5846)
!5849 = !DILocation(line: 1238, column: 5, scope: !5846)
!5850 = !DILocation(line: 1238, column: 11, scope: !5846)
!5851 = !DILocation(line: 1238, column: 18, scope: !5846)
!5852 = !DILocation(line: 1238, column: 22, scope: !5846)
!5853 = !DILocation(line: 1240, column: 42, scope: !5846)
!5854 = !DILocation(line: 1240, column: 25, scope: !5846)
!5855 = !DILocation(line: 1240, column: 5, scope: !5846)
!5856 = !DILocation(line: 1240, column: 11, scope: !5846)
!5857 = !DILocation(line: 1240, column: 18, scope: !5846)
!5858 = !DILocation(line: 1240, column: 22, scope: !5846)
!5859 = !DILocation(line: 1241, column: 1, scope: !5836)
!5860 = distinct !DISubprogram(name: "gimple_set_visited", scope: !587, file: !587, line: 1217, type: !5557, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5861 = !DILocalVariable(name: "stmt", arg: 1, scope: !5860, file: !587, line: 1217, type: !863)
!5862 = !DILocation(line: 1217, column: 28, scope: !5860)
!5863 = !DILocalVariable(name: "visited_p", arg: 2, scope: !5860, file: !587, line: 1217, type: !1007)
!5864 = !DILocation(line: 1217, column: 39, scope: !5860)
!5865 = !DILocation(line: 1219, column: 37, scope: !5860)
!5866 = !DILocation(line: 1219, column: 26, scope: !5860)
!5867 = !DILocation(line: 1219, column: 3, scope: !5860)
!5868 = !DILocation(line: 1219, column: 9, scope: !5860)
!5869 = !DILocation(line: 1219, column: 16, scope: !5860)
!5870 = !DILocation(line: 1219, column: 24, scope: !5860)
!5871 = !DILocation(line: 1220, column: 1, scope: !5860)
!5872 = distinct !DISubprogram(name: "op_iter_init", scope: !2511, file: !2511, line: 742, type: !5873, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5873 = !DISubroutineType(types: !5874)
!5874 = !{null, !5588, !863, !984}
!5875 = !DILocalVariable(name: "ptr", arg: 1, scope: !5872, file: !2511, line: 742, type: !5588)
!5876 = !DILocation(line: 742, column: 28, scope: !5872)
!5877 = !DILocalVariable(name: "stmt", arg: 2, scope: !5872, file: !2511, line: 742, type: !863)
!5878 = !DILocation(line: 742, column: 40, scope: !5872)
!5879 = !DILocalVariable(name: "flags", arg: 3, scope: !5872, file: !2511, line: 742, type: !984)
!5880 = !DILocation(line: 742, column: 50, scope: !5872)
!5881 = !DILocation(line: 746, column: 3, scope: !5872)
!5882 = !DILocation(line: 748, column: 16, scope: !5872)
!5883 = !DILocation(line: 748, column: 22, scope: !5872)
!5884 = !DILocation(line: 748, column: 15, scope: !5872)
!5885 = !DILocation(line: 748, column: 68, scope: !5872)
!5886 = !DILocation(line: 748, column: 52, scope: !5872)
!5887 = !DILocation(line: 748, column: 3, scope: !5872)
!5888 = !DILocation(line: 748, column: 8, scope: !5872)
!5889 = !DILocation(line: 748, column: 13, scope: !5872)
!5890 = !DILocation(line: 749, column: 9, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5872, file: !2511, line: 749, column: 7)
!5892 = !DILocation(line: 749, column: 15, scope: !5891)
!5893 = !DILocation(line: 750, column: 7, scope: !5891)
!5894 = !DILocation(line: 750, column: 10, scope: !5891)
!5895 = !DILocation(line: 750, column: 15, scope: !5891)
!5896 = !DILocation(line: 751, column: 7, scope: !5891)
!5897 = !DILocation(line: 751, column: 23, scope: !5891)
!5898 = !DILocation(line: 751, column: 10, scope: !5891)
!5899 = !DILocation(line: 751, column: 29, scope: !5891)
!5900 = !DILocation(line: 749, column: 7, scope: !5872)
!5901 = !DILocation(line: 752, column: 17, scope: !5891)
!5902 = !DILocation(line: 752, column: 22, scope: !5891)
!5903 = !DILocation(line: 752, column: 28, scope: !5891)
!5904 = !DILocation(line: 752, column: 5, scope: !5891)
!5905 = !DILocation(line: 752, column: 10, scope: !5891)
!5906 = !DILocation(line: 752, column: 15, scope: !5891)
!5907 = !DILocation(line: 753, column: 16, scope: !5872)
!5908 = !DILocation(line: 753, column: 22, scope: !5872)
!5909 = !DILocation(line: 753, column: 15, scope: !5872)
!5910 = !DILocation(line: 753, column: 68, scope: !5872)
!5911 = !DILocation(line: 753, column: 52, scope: !5872)
!5912 = !DILocation(line: 753, column: 3, scope: !5872)
!5913 = !DILocation(line: 753, column: 8, scope: !5872)
!5914 = !DILocation(line: 753, column: 13, scope: !5872)
!5915 = !DILocation(line: 754, column: 9, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5872, file: !2511, line: 754, column: 7)
!5917 = !DILocation(line: 754, column: 15, scope: !5916)
!5918 = !DILocation(line: 755, column: 7, scope: !5916)
!5919 = !DILocation(line: 755, column: 10, scope: !5916)
!5920 = !DILocation(line: 755, column: 15, scope: !5916)
!5921 = !DILocation(line: 756, column: 7, scope: !5916)
!5922 = !DILocation(line: 756, column: 23, scope: !5916)
!5923 = !DILocation(line: 756, column: 10, scope: !5916)
!5924 = !DILocation(line: 756, column: 29, scope: !5916)
!5925 = !DILocation(line: 754, column: 7, scope: !5872)
!5926 = !DILocation(line: 757, column: 17, scope: !5916)
!5927 = !DILocation(line: 757, column: 22, scope: !5916)
!5928 = !DILocation(line: 757, column: 28, scope: !5916)
!5929 = !DILocation(line: 757, column: 5, scope: !5916)
!5930 = !DILocation(line: 757, column: 10, scope: !5916)
!5931 = !DILocation(line: 757, column: 15, scope: !5916)
!5932 = !DILocation(line: 758, column: 3, scope: !5872)
!5933 = !DILocation(line: 758, column: 8, scope: !5872)
!5934 = !DILocation(line: 758, column: 13, scope: !5872)
!5935 = !DILocation(line: 760, column: 3, scope: !5872)
!5936 = !DILocation(line: 760, column: 8, scope: !5872)
!5937 = !DILocation(line: 760, column: 14, scope: !5872)
!5938 = !DILocation(line: 761, column: 3, scope: !5872)
!5939 = !DILocation(line: 761, column: 8, scope: !5872)
!5940 = !DILocation(line: 761, column: 16, scope: !5872)
!5941 = !DILocation(line: 762, column: 3, scope: !5872)
!5942 = !DILocation(line: 762, column: 8, scope: !5872)
!5943 = !DILocation(line: 762, column: 17, scope: !5872)
!5944 = !DILocation(line: 763, column: 1, scope: !5872)
!5945 = distinct !DISubprogram(name: "gimple_def_ops", scope: !587, file: !587, line: 1292, type: !5946, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5946 = !DISubroutineType(types: !5947)
!5947 = !{!1503, !3843}
!5948 = !DILocalVariable(name: "g", arg: 1, scope: !5945, file: !587, line: 1292, type: !3843)
!5949 = !DILocation(line: 1292, column: 30, scope: !5945)
!5950 = !DILocation(line: 1294, column: 24, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5945, file: !587, line: 1294, column: 7)
!5952 = !DILocation(line: 1294, column: 8, scope: !5951)
!5953 = !DILocation(line: 1294, column: 7, scope: !5945)
!5954 = !DILocation(line: 1295, column: 5, scope: !5951)
!5955 = !DILocation(line: 1296, column: 10, scope: !5945)
!5956 = !DILocation(line: 1296, column: 13, scope: !5945)
!5957 = !DILocation(line: 1296, column: 19, scope: !5945)
!5958 = !DILocation(line: 1296, column: 26, scope: !5945)
!5959 = !DILocation(line: 1296, column: 3, scope: !5945)
!5960 = !DILocation(line: 1297, column: 1, scope: !5945)
!5961 = distinct !DISubprogram(name: "gimple_vdef", scope: !587, file: !587, line: 1375, type: !5962, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5962 = !DISubroutineType(types: !5963)
!5963 = !{!888, !3843}
!5964 = !DILocalVariable(name: "g", arg: 1, scope: !5961, file: !587, line: 1375, type: !3843)
!5965 = !DILocation(line: 1375, column: 27, scope: !5961)
!5966 = !DILocation(line: 1377, column: 28, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5961, file: !587, line: 1377, column: 7)
!5968 = !DILocation(line: 1377, column: 8, scope: !5967)
!5969 = !DILocation(line: 1377, column: 7, scope: !5961)
!5970 = !DILocation(line: 1378, column: 5, scope: !5967)
!5971 = !DILocation(line: 1379, column: 10, scope: !5961)
!5972 = !DILocation(line: 1379, column: 13, scope: !5961)
!5973 = !DILocation(line: 1379, column: 23, scope: !5961)
!5974 = !DILocation(line: 1379, column: 3, scope: !5961)
!5975 = !DILocation(line: 1380, column: 1, scope: !5961)
!5976 = distinct !DISubprogram(name: "gimple_use_ops", scope: !587, file: !587, line: 1313, type: !5977, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5977 = !DISubroutineType(types: !5978)
!5978 = !{!1510, !3843}
!5979 = !DILocalVariable(name: "g", arg: 1, scope: !5976, file: !587, line: 1313, type: !3843)
!5980 = !DILocation(line: 1313, column: 30, scope: !5976)
!5981 = !DILocation(line: 1315, column: 24, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5976, file: !587, line: 1315, column: 7)
!5983 = !DILocation(line: 1315, column: 8, scope: !5982)
!5984 = !DILocation(line: 1315, column: 7, scope: !5976)
!5985 = !DILocation(line: 1316, column: 5, scope: !5982)
!5986 = !DILocation(line: 1317, column: 10, scope: !5976)
!5987 = !DILocation(line: 1317, column: 13, scope: !5976)
!5988 = !DILocation(line: 1317, column: 19, scope: !5976)
!5989 = !DILocation(line: 1317, column: 26, scope: !5976)
!5990 = !DILocation(line: 1317, column: 3, scope: !5976)
!5991 = !DILocation(line: 1318, column: 1, scope: !5976)
!5992 = distinct !DISubprogram(name: "gimple_vuse", scope: !587, file: !587, line: 1365, type: !5962, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!5993 = !DILocalVariable(name: "g", arg: 1, scope: !5992, file: !587, line: 1365, type: !3843)
!5994 = !DILocation(line: 1365, column: 27, scope: !5992)
!5995 = !DILocation(line: 1367, column: 28, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5992, file: !587, line: 1367, column: 7)
!5997 = !DILocation(line: 1367, column: 8, scope: !5996)
!5998 = !DILocation(line: 1367, column: 7, scope: !5992)
!5999 = !DILocation(line: 1368, column: 5, scope: !5996)
!6000 = !DILocation(line: 1369, column: 10, scope: !5992)
!6001 = !DILocation(line: 1369, column: 13, scope: !5992)
!6002 = !DILocation(line: 1369, column: 23, scope: !5992)
!6003 = !DILocation(line: 1369, column: 3, scope: !5992)
!6004 = !DILocation(line: 1370, column: 1, scope: !5992)
!6005 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !587, file: !587, line: 1283, type: !5577, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6006 = !DILocalVariable(name: "g", arg: 1, scope: !6005, file: !587, line: 1283, type: !3843)
!6007 = !DILocation(line: 1283, column: 34, scope: !6005)
!6008 = !DILocation(line: 1285, column: 23, scope: !6005)
!6009 = !DILocation(line: 1285, column: 10, scope: !6005)
!6010 = !DILocation(line: 1285, column: 26, scope: !6005)
!6011 = !DILocation(line: 1285, column: 43, scope: !6005)
!6012 = !DILocation(line: 1285, column: 59, scope: !6005)
!6013 = !DILocation(line: 1285, column: 46, scope: !6005)
!6014 = !DILocation(line: 1285, column: 62, scope: !6005)
!6015 = !DILocation(line: 0, scope: !6005)
!6016 = !DILocation(line: 1285, column: 3, scope: !6005)
!6017 = distinct !DISubprogram(name: "get_phi_state", scope: !3, file: !3, line: 328, type: !6018, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6018 = !DISubroutineType(types: !6019)
!6019 = !{!633, !888}
!6020 = !DILocalVariable(name: "var", arg: 1, scope: !6017, file: !3, line: 328, type: !888)
!6021 = !DILocation(line: 328, column: 21, scope: !6017)
!6022 = !DILocation(line: 330, column: 7, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6017, file: !3, line: 330, column: 7)
!6024 = !DILocation(line: 330, column: 23, scope: !6023)
!6025 = !DILocation(line: 330, column: 7, scope: !6017)
!6026 = !DILocation(line: 331, column: 30, scope: !6023)
!6027 = !DILocation(line: 331, column: 12, scope: !6023)
!6028 = !DILocation(line: 331, column: 36, scope: !6023)
!6029 = !DILocation(line: 331, column: 5, scope: !6023)
!6030 = !DILocation(line: 333, column: 21, scope: !6023)
!6031 = !DILocation(line: 333, column: 12, scope: !6023)
!6032 = !DILocation(line: 333, column: 27, scope: !6023)
!6033 = !DILocation(line: 333, column: 5, scope: !6023)
!6034 = !DILocation(line: 334, column: 1, scope: !6017)
!6035 = distinct !DISubprogram(name: "get_def_blocks_for", scope: !3, file: !3, line: 470, type: !6036, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6036 = !DISubroutineType(types: !6037)
!6037 = !{!2286, !888}
!6038 = !DILocalVariable(name: "var", arg: 1, scope: !6035, file: !3, line: 470, type: !888)
!6039 = !DILocation(line: 470, column: 26, scope: !6035)
!6040 = !DILocalVariable(name: "db", scope: !6035, file: !3, line: 472, type: !2287)
!6041 = !DILocation(line: 472, column: 23, scope: !6035)
!6042 = !DILocalVariable(name: "db_p", scope: !6035, file: !3, line: 472, type: !2286)
!6043 = !DILocation(line: 472, column: 28, scope: !6035)
!6044 = !DILocalVariable(name: "slot", scope: !6035, file: !3, line: 473, type: !1415)
!6045 = !DILocation(line: 473, column: 10, scope: !6035)
!6046 = !DILocation(line: 475, column: 12, scope: !6035)
!6047 = !DILocation(line: 475, column: 6, scope: !6035)
!6048 = !DILocation(line: 475, column: 10, scope: !6035)
!6049 = !DILocation(line: 476, column: 26, scope: !6035)
!6050 = !DILocation(line: 476, column: 38, scope: !6035)
!6051 = !DILocation(line: 476, column: 10, scope: !6035)
!6052 = !DILocation(line: 476, column: 8, scope: !6035)
!6053 = !DILocation(line: 477, column: 8, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 477, column: 7)
!6055 = !DILocation(line: 477, column: 7, scope: !6054)
!6056 = !DILocation(line: 477, column: 13, scope: !6054)
!6057 = !DILocation(line: 477, column: 7, scope: !6035)
!6058 = !DILocation(line: 479, column: 14, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 478, column: 5)
!6060 = !DILocation(line: 479, column: 12, scope: !6059)
!6061 = !DILocation(line: 480, column: 19, scope: !6059)
!6062 = !DILocation(line: 480, column: 7, scope: !6059)
!6063 = !DILocation(line: 480, column: 13, scope: !6059)
!6064 = !DILocation(line: 480, column: 17, scope: !6059)
!6065 = !DILocation(line: 481, column: 26, scope: !6059)
!6066 = !DILocation(line: 481, column: 7, scope: !6059)
!6067 = !DILocation(line: 481, column: 13, scope: !6059)
!6068 = !DILocation(line: 481, column: 24, scope: !6059)
!6069 = !DILocation(line: 482, column: 26, scope: !6059)
!6070 = !DILocation(line: 482, column: 7, scope: !6059)
!6071 = !DILocation(line: 482, column: 13, scope: !6059)
!6072 = !DILocation(line: 482, column: 24, scope: !6059)
!6073 = !DILocation(line: 483, column: 29, scope: !6059)
!6074 = !DILocation(line: 483, column: 7, scope: !6059)
!6075 = !DILocation(line: 483, column: 13, scope: !6059)
!6076 = !DILocation(line: 483, column: 27, scope: !6059)
!6077 = !DILocation(line: 484, column: 24, scope: !6059)
!6078 = !DILocation(line: 484, column: 15, scope: !6059)
!6079 = !DILocation(line: 484, column: 8, scope: !6059)
!6080 = !DILocation(line: 484, column: 13, scope: !6059)
!6081 = !DILocation(line: 485, column: 5, scope: !6059)
!6082 = !DILocation(line: 487, column: 37, scope: !6054)
!6083 = !DILocation(line: 487, column: 36, scope: !6054)
!6084 = !DILocation(line: 487, column: 12, scope: !6054)
!6085 = !DILocation(line: 487, column: 10, scope: !6054)
!6086 = !DILocation(line: 489, column: 10, scope: !6035)
!6087 = !DILocation(line: 489, column: 3, scope: !6035)
!6088 = distinct !DISubprogram(name: "set_phi_state", scope: !3, file: !3, line: 340, type: !6089, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6089 = !DISubroutineType(types: !6090)
!6090 = !{null, !888, !633}
!6091 = !DILocalVariable(name: "var", arg: 1, scope: !6088, file: !3, line: 340, type: !888)
!6092 = !DILocation(line: 340, column: 21, scope: !6088)
!6093 = !DILocalVariable(name: "state", arg: 2, scope: !6088, file: !3, line: 340, type: !633)
!6094 = !DILocation(line: 340, column: 46, scope: !6088)
!6095 = !DILocation(line: 342, column: 7, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6088, file: !3, line: 342, column: 7)
!6097 = !DILocation(line: 342, column: 23, scope: !6096)
!6098 = !DILocation(line: 342, column: 7, scope: !6088)
!6099 = !DILocation(line: 343, column: 46, scope: !6096)
!6100 = !DILocation(line: 343, column: 23, scope: !6096)
!6101 = !DILocation(line: 343, column: 5, scope: !6096)
!6102 = !DILocation(line: 343, column: 29, scope: !6096)
!6103 = !DILocation(line: 343, column: 44, scope: !6096)
!6104 = !DILocation(line: 345, column: 37, scope: !6096)
!6105 = !DILocation(line: 345, column: 14, scope: !6096)
!6106 = !DILocation(line: 345, column: 5, scope: !6096)
!6107 = !DILocation(line: 345, column: 20, scope: !6096)
!6108 = !DILocation(line: 345, column: 35, scope: !6096)
!6109 = !DILocation(line: 346, column: 1, scope: !6088)
!6110 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2511, file: !2511, line: 442, type: !6111, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6111 = !DISubroutineType(types: !6112)
!6112 = !{!2297, !863, !984}
!6113 = !DILocalVariable(name: "gs", arg: 1, scope: !6110, file: !2511, line: 442, type: !863)
!6114 = !DILocation(line: 442, column: 36, scope: !6110)
!6115 = !DILocalVariable(name: "i", arg: 2, scope: !6110, file: !2511, line: 442, type: !984)
!6116 = !DILocation(line: 442, column: 44, scope: !6110)
!6117 = !DILocation(line: 444, column: 27, scope: !6110)
!6118 = !DILocation(line: 444, column: 31, scope: !6110)
!6119 = !DILocation(line: 444, column: 11, scope: !6110)
!6120 = !DILocation(line: 444, column: 35, scope: !6110)
!6121 = !DILocation(line: 444, column: 3, scope: !6110)
!6122 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !587, file: !587, line: 3100, type: !6123, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6123 = !DISubroutineType(types: !6124)
!6124 = !{!2347, !863, !7}
!6125 = !DILocalVariable(name: "gs", arg: 1, scope: !6122, file: !587, line: 3100, type: !863)
!6126 = !DILocation(line: 3100, column: 24, scope: !6122)
!6127 = !DILocalVariable(name: "index", arg: 2, scope: !6122, file: !587, line: 3100, type: !7)
!6128 = !DILocation(line: 3100, column: 37, scope: !6122)
!6129 = !DILocation(line: 3103, column: 3, scope: !6122)
!6130 = !DILocation(line: 3104, column: 12, scope: !6122)
!6131 = !DILocation(line: 3104, column: 16, scope: !6122)
!6132 = !DILocation(line: 3104, column: 27, scope: !6122)
!6133 = !DILocation(line: 3104, column: 32, scope: !6122)
!6134 = !DILocation(line: 3104, column: 3, scope: !6122)
!6135 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2511, file: !2511, line: 434, type: !6136, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6136 = !DISubroutineType(types: !6137)
!6137 = !{!888, !2348}
!6138 = !DILocalVariable(name: "def", arg: 1, scope: !6135, file: !2511, line: 434, type: !2348)
!6139 = !DILocation(line: 434, column: 33, scope: !6135)
!6140 = !DILocation(line: 436, column: 11, scope: !6135)
!6141 = !DILocation(line: 436, column: 10, scope: !6135)
!6142 = !DILocation(line: 436, column: 3, scope: !6135)
!6143 = distinct !DISubprogram(name: "gimple_visited_p", scope: !587, file: !587, line: 1226, type: !5810, scopeLine: 1227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6144 = !DILocalVariable(name: "stmt", arg: 1, scope: !6143, file: !587, line: 1226, type: !863)
!6145 = !DILocation(line: 1226, column: 26, scope: !6143)
!6146 = !DILocation(line: 1228, column: 10, scope: !6143)
!6147 = !DILocation(line: 1228, column: 16, scope: !6143)
!6148 = !DILocation(line: 1228, column: 23, scope: !6143)
!6149 = !DILocation(line: 1228, column: 3, scope: !6143)
!6150 = distinct !DISubprogram(name: "gimple_plf", scope: !587, file: !587, line: 1247, type: !6151, scopeLine: 1248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6151 = !DISubroutineType(types: !6152)
!6152 = !{!7, !863, !660}
!6153 = !DILocalVariable(name: "stmt", arg: 1, scope: !6150, file: !587, line: 1247, type: !863)
!6154 = !DILocation(line: 1247, column: 20, scope: !6150)
!6155 = !DILocalVariable(name: "plf", arg: 2, scope: !6150, file: !587, line: 1247, type: !660)
!6156 = !DILocation(line: 1247, column: 40, scope: !6150)
!6157 = !DILocation(line: 1249, column: 10, scope: !6150)
!6158 = !DILocation(line: 1249, column: 16, scope: !6150)
!6159 = !DILocation(line: 1249, column: 23, scope: !6150)
!6160 = !DILocation(line: 1249, column: 45, scope: !6150)
!6161 = !DILocation(line: 1249, column: 27, scope: !6150)
!6162 = !DILocation(line: 1249, column: 3, scope: !6150)
!6163 = distinct !DISubprogram(name: "find_def_blocks_for", scope: !3, file: !3, line: 1007, type: !6036, scopeLine: 1008, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6164 = !DILocalVariable(name: "var", arg: 1, scope: !6163, file: !3, line: 1007, type: !888)
!6165 = !DILocation(line: 1007, column: 27, scope: !6163)
!6166 = !DILocalVariable(name: "dm", scope: !6163, file: !3, line: 1009, type: !2287)
!6167 = !DILocation(line: 1009, column: 23, scope: !6163)
!6168 = !DILocation(line: 1010, column: 12, scope: !6163)
!6169 = !DILocation(line: 1010, column: 6, scope: !6163)
!6170 = !DILocation(line: 1010, column: 10, scope: !6163)
!6171 = !DILocation(line: 1011, column: 45, scope: !6163)
!6172 = !DILocation(line: 1011, column: 57, scope: !6163)
!6173 = !DILocation(line: 1011, column: 34, scope: !6163)
!6174 = !DILocation(line: 1011, column: 10, scope: !6163)
!6175 = !DILocation(line: 1011, column: 3, scope: !6163)
!6176 = distinct !DISubprogram(name: "insert_phi_nodes_for", scope: !3, file: !3, line: 1072, type: !6177, scopeLine: 1073, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6177 = !DISubroutineType(types: !6178)
!6178 = !{null, !888, !1480, !1007}
!6179 = !DILocalVariable(name: "var", arg: 1, scope: !6176, file: !3, line: 1072, type: !888)
!6180 = !DILocation(line: 1072, column: 28, scope: !6176)
!6181 = !DILocalVariable(name: "phi_insertion_points", arg: 2, scope: !6176, file: !3, line: 1072, type: !1480)
!6182 = !DILocation(line: 1072, column: 40, scope: !6176)
!6183 = !DILocalVariable(name: "update_p", arg: 3, scope: !6176, file: !3, line: 1072, type: !1007)
!6184 = !DILocation(line: 1072, column: 67, scope: !6176)
!6185 = !DILocalVariable(name: "bb_index", scope: !6176, file: !3, line: 1074, type: !7)
!6186 = !DILocation(line: 1074, column: 12, scope: !6176)
!6187 = !DILocalVariable(name: "e", scope: !6176, file: !3, line: 1075, type: !843)
!6188 = !DILocation(line: 1075, column: 8, scope: !6176)
!6189 = !DILocalVariable(name: "phi", scope: !6176, file: !3, line: 1076, type: !863)
!6190 = !DILocation(line: 1076, column: 10, scope: !6176)
!6191 = !DILocalVariable(name: "bb", scope: !6176, file: !3, line: 1077, type: !825)
!6192 = !DILocation(line: 1077, column: 15, scope: !6176)
!6193 = !DILocalVariable(name: "bi", scope: !6176, file: !3, line: 1078, type: !2567)
!6194 = !DILocation(line: 1078, column: 19, scope: !6176)
!6195 = !DILocalVariable(name: "def_map", scope: !6176, file: !3, line: 1079, type: !2286)
!6196 = !DILocation(line: 1079, column: 24, scope: !6176)
!6197 = !DILocation(line: 1081, column: 34, scope: !6176)
!6198 = !DILocation(line: 1081, column: 13, scope: !6176)
!6199 = !DILocation(line: 1081, column: 11, scope: !6176)
!6200 = !DILocation(line: 1082, column: 3, scope: !6176)
!6201 = !DILocation(line: 1085, column: 26, scope: !6176)
!6202 = !DILocation(line: 1085, column: 48, scope: !6176)
!6203 = !DILocation(line: 1085, column: 57, scope: !6176)
!6204 = !DILocation(line: 1085, column: 3, scope: !6176)
!6205 = !DILocation(line: 1088, column: 27, scope: !6176)
!6206 = !DILocation(line: 1088, column: 49, scope: !6176)
!6207 = !DILocation(line: 1088, column: 58, scope: !6176)
!6208 = !DILocation(line: 1089, column: 6, scope: !6176)
!6209 = !DILocation(line: 1089, column: 15, scope: !6176)
!6210 = !DILocation(line: 1088, column: 3, scope: !6176)
!6211 = !DILocation(line: 1092, column: 3, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6176, file: !3, line: 1092, column: 3)
!6213 = !DILocation(line: 1092, column: 3, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 1092, column: 3)
!6215 = !DILocation(line: 1094, column: 12, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 1093, column: 5)
!6217 = !DILocation(line: 1094, column: 10, scope: !6216)
!6218 = !DILocation(line: 1095, column: 11, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1095, column: 11)
!6220 = !DILocation(line: 1095, column: 11, scope: !6216)
!6221 = !DILocation(line: 1096, column: 25, scope: !6219)
!6222 = !DILocation(line: 1096, column: 2, scope: !6219)
!6223 = !DILocation(line: 1098, column: 11, scope: !6216)
!6224 = !DILocation(line: 1100, column: 11, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1100, column: 11)
!6226 = !DILocation(line: 1100, column: 27, scope: !6225)
!6227 = !DILocation(line: 1100, column: 11, scope: !6216)
!6228 = !DILocalVariable(name: "ei", scope: !6229, file: !3, line: 1106, type: !2601)
!6229 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 1101, column: 2)
!6230 = !DILocation(line: 1106, column: 18, scope: !6229)
!6231 = !DILocalVariable(name: "new_lhs", scope: !6229, file: !3, line: 1107, type: !888)
!6232 = !DILocation(line: 1107, column: 9, scope: !6229)
!6233 = !DILocation(line: 1109, column: 4, scope: !6229)
!6234 = !DILocation(line: 1110, column: 27, scope: !6229)
!6235 = !DILocation(line: 1110, column: 32, scope: !6229)
!6236 = !DILocation(line: 1110, column: 10, scope: !6229)
!6237 = !DILocation(line: 1110, column: 8, scope: !6229)
!6238 = !DILocation(line: 1112, column: 34, scope: !6229)
!6239 = !DILocation(line: 1112, column: 39, scope: !6229)
!6240 = !DILocation(line: 1112, column: 14, scope: !6229)
!6241 = !DILocation(line: 1112, column: 12, scope: !6229)
!6242 = !DILocation(line: 1113, column: 27, scope: !6229)
!6243 = !DILocation(line: 1113, column: 32, scope: !6229)
!6244 = !DILocation(line: 1113, column: 4, scope: !6229)
!6245 = !DILocation(line: 1114, column: 26, scope: !6229)
!6246 = !DILocation(line: 1114, column: 35, scope: !6229)
!6247 = !DILocation(line: 1114, column: 4, scope: !6229)
!6248 = !DILocation(line: 1122, column: 4, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 1122, column: 4)
!6250 = !DILocation(line: 1122, column: 4, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6249, file: !3, line: 1122, column: 4)
!6252 = !DILocation(line: 1123, column: 19, scope: !6251)
!6253 = !DILocation(line: 1123, column: 24, scope: !6251)
!6254 = !DILocation(line: 1123, column: 29, scope: !6251)
!6255 = !DILocation(line: 1123, column: 6, scope: !6251)
!6256 = distinct !{!6256, !6248, !6257}
!6257 = !DILocation(line: 1123, column: 48, scope: !6249)
!6258 = !DILocation(line: 1124, column: 2, scope: !6229)
!6259 = !DILocalVariable(name: "tracked_var", scope: !6260, file: !3, line: 1127, type: !888)
!6260 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 1126, column: 2)
!6261 = !DILocation(line: 1127, column: 9, scope: !6260)
!6262 = !DILocation(line: 1129, column: 4, scope: !6260)
!6263 = !DILocation(line: 1130, column: 27, scope: !6260)
!6264 = !DILocation(line: 1130, column: 32, scope: !6260)
!6265 = !DILocation(line: 1130, column: 10, scope: !6260)
!6266 = !DILocation(line: 1130, column: 8, scope: !6260)
!6267 = !DILocation(line: 1132, column: 41, scope: !6260)
!6268 = !DILocation(line: 1132, column: 18, scope: !6260)
!6269 = !DILocation(line: 1132, column: 16, scope: !6260)
!6270 = !DILocation(line: 1133, column: 8, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 1133, column: 8)
!6272 = !DILocation(line: 1133, column: 8, scope: !6260)
!6273 = !DILocalVariable(name: "note", scope: !6274, file: !3, line: 1135, type: !863)
!6274 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 1134, column: 6)
!6275 = !DILocation(line: 1135, column: 15, scope: !6274)
!6276 = !DILocation(line: 1135, column: 22, scope: !6274)
!6277 = !DILocalVariable(name: "si", scope: !6274, file: !3, line: 1138, type: !4569)
!6278 = !DILocation(line: 1138, column: 29, scope: !6274)
!6279 = !DILocation(line: 1138, column: 52, scope: !6274)
!6280 = !DILocation(line: 1138, column: 34, scope: !6274)
!6281 = !DILocation(line: 1139, column: 32, scope: !6274)
!6282 = !DILocation(line: 1139, column: 8, scope: !6274)
!6283 = !DILocation(line: 1140, column: 6, scope: !6274)
!6284 = !DILocation(line: 1144, column: 26, scope: !6216)
!6285 = !DILocation(line: 1144, column: 7, scope: !6216)
!6286 = !DILocation(line: 1145, column: 29, scope: !6216)
!6287 = !DILocation(line: 1145, column: 33, scope: !6216)
!6288 = !DILocation(line: 1145, column: 7, scope: !6216)
!6289 = !DILocation(line: 1146, column: 5, scope: !6216)
!6290 = distinct !{!6290, !6211, !6291}
!6291 = !DILocation(line: 1146, column: 5, scope: !6212)
!6292 = !DILocation(line: 1147, column: 1, scope: !6176)
!6293 = distinct !DISubprogram(name: "prune_unused_phi_nodes", scope: !3, file: !3, line: 830, type: !6294, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6294 = !DISubroutineType(types: !6295)
!6295 = !{null, !1480, !1480, !1480}
!6296 = !DILocalVariable(name: "phis", arg: 1, scope: !6293, file: !3, line: 830, type: !1480)
!6297 = !DILocation(line: 830, column: 32, scope: !6293)
!6298 = !DILocalVariable(name: "kills", arg: 2, scope: !6293, file: !3, line: 830, type: !1480)
!6299 = !DILocation(line: 830, column: 45, scope: !6293)
!6300 = !DILocalVariable(name: "uses", arg: 3, scope: !6293, file: !3, line: 830, type: !1480)
!6301 = !DILocation(line: 830, column: 59, scope: !6293)
!6302 = !DILocalVariable(name: "worklist", scope: !6293, file: !3, line: 832, type: !2307)
!6303 = !DILocation(line: 832, column: 19, scope: !6293)
!6304 = !DILocalVariable(name: "bi", scope: !6293, file: !3, line: 833, type: !2567)
!6305 = !DILocation(line: 833, column: 19, scope: !6293)
!6306 = !DILocalVariable(name: "i", scope: !6293, file: !3, line: 834, type: !7)
!6307 = !DILocation(line: 834, column: 12, scope: !6293)
!6308 = !DILocalVariable(name: "b", scope: !6293, file: !3, line: 834, type: !7)
!6309 = !DILocation(line: 834, column: 15, scope: !6293)
!6310 = !DILocalVariable(name: "p", scope: !6293, file: !3, line: 834, type: !7)
!6311 = !DILocation(line: 834, column: 18, scope: !6293)
!6312 = !DILocalVariable(name: "u", scope: !6293, file: !3, line: 834, type: !7)
!6313 = !DILocation(line: 834, column: 21, scope: !6293)
!6314 = !DILocalVariable(name: "top", scope: !6293, file: !3, line: 834, type: !7)
!6315 = !DILocation(line: 834, column: 24, scope: !6293)
!6316 = !DILocalVariable(name: "live_phis", scope: !6293, file: !3, line: 835, type: !1480)
!6317 = !DILocation(line: 835, column: 10, scope: !6293)
!6318 = !DILocalVariable(name: "def_bb", scope: !6293, file: !3, line: 836, type: !825)
!6319 = !DILocation(line: 836, column: 15, scope: !6293)
!6320 = !DILocalVariable(name: "use_bb", scope: !6293, file: !3, line: 836, type: !825)
!6321 = !DILocation(line: 836, column: 23, scope: !6293)
!6322 = !DILocalVariable(name: "e", scope: !6293, file: !3, line: 837, type: !843)
!6323 = !DILocation(line: 837, column: 8, scope: !6293)
!6324 = !DILocalVariable(name: "ei", scope: !6293, file: !3, line: 838, type: !2601)
!6325 = !DILocation(line: 838, column: 17, scope: !6293)
!6326 = !DILocalVariable(name: "to_remove", scope: !6293, file: !3, line: 839, type: !1480)
!6327 = !DILocation(line: 839, column: 10, scope: !6293)
!6328 = !DILocalVariable(name: "defs", scope: !6293, file: !3, line: 840, type: !2300)
!6329 = !DILocation(line: 840, column: 22, scope: !6293)
!6330 = !DILocalVariable(name: "n_defs", scope: !6293, file: !3, line: 841, type: !7)
!6331 = !DILocation(line: 841, column: 12, scope: !6293)
!6332 = !DILocalVariable(name: "adef", scope: !6293, file: !3, line: 841, type: !7)
!6333 = !DILocation(line: 841, column: 20, scope: !6293)
!6334 = !DILocation(line: 843, column: 7, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 843, column: 7)
!6336 = !DILocation(line: 843, column: 7, scope: !6293)
!6337 = !DILocation(line: 845, column: 21, scope: !6338)
!6338 = distinct !DILexicalBlock(scope: !6335, file: !3, line: 844, column: 5)
!6339 = !DILocation(line: 845, column: 7, scope: !6338)
!6340 = !DILocation(line: 846, column: 7, scope: !6338)
!6341 = !DILocation(line: 851, column: 15, scope: !6293)
!6342 = !DILocation(line: 851, column: 13, scope: !6293)
!6343 = !DILocation(line: 852, column: 21, scope: !6293)
!6344 = !DILocation(line: 852, column: 32, scope: !6293)
!6345 = !DILocation(line: 852, column: 39, scope: !6293)
!6346 = !DILocation(line: 852, column: 3, scope: !6293)
!6347 = !DILocation(line: 853, column: 26, scope: !6293)
!6348 = !DILocation(line: 853, column: 32, scope: !6293)
!6349 = !DILocation(line: 853, column: 3, scope: !6293)
!6350 = !DILocation(line: 854, column: 7, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 854, column: 7)
!6352 = !DILocation(line: 854, column: 7, scope: !6293)
!6353 = !DILocation(line: 856, column: 7, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 855, column: 5)
!6355 = !DILocation(line: 857, column: 7, scope: !6354)
!6356 = !DILocation(line: 878, column: 15, scope: !6293)
!6357 = !DILocation(line: 878, column: 26, scope: !6293)
!6358 = !DILocation(line: 878, column: 33, scope: !6293)
!6359 = !DILocation(line: 878, column: 3, scope: !6293)
!6360 = !DILocation(line: 879, column: 31, scope: !6293)
!6361 = !DILocation(line: 879, column: 12, scope: !6293)
!6362 = !DILocation(line: 879, column: 10, scope: !6293)
!6363 = !DILocation(line: 880, column: 10, scope: !6293)
!6364 = !DILocation(line: 880, column: 8, scope: !6293)
!6365 = !DILocation(line: 881, column: 3, scope: !6293)
!6366 = !DILocation(line: 881, column: 11, scope: !6293)
!6367 = !DILocation(line: 881, column: 20, scope: !6293)
!6368 = !DILocation(line: 882, column: 3, scope: !6293)
!6369 = !DILocation(line: 882, column: 11, scope: !6293)
!6370 = !DILocation(line: 882, column: 19, scope: !6293)
!6371 = !DILocation(line: 883, column: 8, scope: !6293)
!6372 = !DILocation(line: 884, column: 3, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 884, column: 3)
!6374 = !DILocation(line: 884, column: 3, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 884, column: 3)
!6376 = !DILocation(line: 886, column: 16, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 885, column: 5)
!6378 = !DILocation(line: 886, column: 14, scope: !6377)
!6379 = !DILocation(line: 887, column: 29, scope: !6377)
!6380 = !DILocation(line: 887, column: 7, scope: !6377)
!6381 = !DILocation(line: 887, column: 12, scope: !6377)
!6382 = !DILocation(line: 887, column: 18, scope: !6377)
!6383 = !DILocation(line: 887, column: 27, scope: !6377)
!6384 = !DILocation(line: 888, column: 59, scope: !6377)
!6385 = !DILocation(line: 888, column: 28, scope: !6377)
!6386 = !DILocation(line: 888, column: 7, scope: !6377)
!6387 = !DILocation(line: 888, column: 12, scope: !6377)
!6388 = !DILocation(line: 888, column: 18, scope: !6377)
!6389 = !DILocation(line: 888, column: 26, scope: !6377)
!6390 = !DILocation(line: 889, column: 33, scope: !6377)
!6391 = !DILocation(line: 889, column: 7, scope: !6377)
!6392 = !DILocation(line: 889, column: 12, scope: !6377)
!6393 = !DILocation(line: 889, column: 17, scope: !6377)
!6394 = !DILocation(line: 889, column: 22, scope: !6377)
!6395 = !DILocation(line: 889, column: 31, scope: !6377)
!6396 = !DILocation(line: 890, column: 64, scope: !6377)
!6397 = !DILocation(line: 890, column: 32, scope: !6377)
!6398 = !DILocation(line: 890, column: 7, scope: !6377)
!6399 = !DILocation(line: 890, column: 12, scope: !6377)
!6400 = !DILocation(line: 890, column: 17, scope: !6377)
!6401 = !DILocation(line: 890, column: 22, scope: !6377)
!6402 = !DILocation(line: 890, column: 30, scope: !6377)
!6403 = !DILocation(line: 891, column: 12, scope: !6377)
!6404 = !DILocation(line: 892, column: 5, scope: !6377)
!6405 = distinct !{!6405, !6372, !6406}
!6406 = !DILocation(line: 892, column: 5, scope: !6373)
!6407 = !DILocation(line: 893, column: 3, scope: !6293)
!6408 = !DILocation(line: 894, column: 3, scope: !6293)
!6409 = !DILocation(line: 896, column: 15, scope: !6293)
!6410 = !DILocation(line: 896, column: 21, scope: !6293)
!6411 = !DILocation(line: 896, column: 3, scope: !6293)
!6412 = !DILocation(line: 900, column: 3, scope: !6293)
!6413 = !DILocation(line: 908, column: 14, scope: !6293)
!6414 = !DILocation(line: 908, column: 12, scope: !6293)
!6415 = !DILocation(line: 909, column: 3, scope: !6293)
!6416 = !DILocation(line: 910, column: 7, scope: !6293)
!6417 = !DILocation(line: 911, column: 10, scope: !6293)
!6418 = !DILocation(line: 912, column: 10, scope: !6419)
!6419 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 912, column: 3)
!6420 = !DILocation(line: 912, column: 8, scope: !6419)
!6421 = !DILocation(line: 912, column: 15, scope: !6422)
!6422 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 912, column: 3)
!6423 = !DILocation(line: 912, column: 19, scope: !6422)
!6424 = !DILocation(line: 912, column: 17, scope: !6422)
!6425 = !DILocation(line: 912, column: 3, scope: !6419)
!6426 = !DILocation(line: 914, column: 11, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 913, column: 5)
!6428 = !DILocation(line: 914, column: 16, scope: !6427)
!6429 = !DILocation(line: 914, column: 19, scope: !6427)
!6430 = !DILocation(line: 914, column: 9, scope: !6427)
!6431 = !DILocation(line: 915, column: 11, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 915, column: 11)
!6433 = !DILocation(line: 915, column: 16, scope: !6432)
!6434 = !DILocation(line: 915, column: 13, scope: !6432)
!6435 = !DILocation(line: 915, column: 11, scope: !6427)
!6436 = !DILocation(line: 919, column: 4, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 916, column: 2)
!6438 = !DILocation(line: 920, column: 10, scope: !6437)
!6439 = !DILocation(line: 920, column: 8, scope: !6437)
!6440 = !DILocation(line: 921, column: 28, scope: !6437)
!6441 = !DILocation(line: 921, column: 4, scope: !6437)
!6442 = !DILocation(line: 921, column: 9, scope: !6437)
!6443 = !DILocation(line: 921, column: 17, scope: !6437)
!6444 = !DILocation(line: 921, column: 26, scope: !6437)
!6445 = !DILocation(line: 922, column: 27, scope: !6437)
!6446 = !DILocation(line: 922, column: 32, scope: !6437)
!6447 = !DILocation(line: 922, column: 35, scope: !6437)
!6448 = !DILocation(line: 922, column: 43, scope: !6437)
!6449 = !DILocation(line: 922, column: 4, scope: !6437)
!6450 = !DILocation(line: 922, column: 9, scope: !6437)
!6451 = !DILocation(line: 922, column: 17, scope: !6437)
!6452 = !DILocation(line: 922, column: 25, scope: !6437)
!6453 = !DILocation(line: 923, column: 2, scope: !6437)
!6454 = !DILocation(line: 928, column: 28, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 925, column: 2)
!6456 = !DILocation(line: 928, column: 33, scope: !6455)
!6457 = !DILocation(line: 928, column: 36, scope: !6455)
!6458 = !DILocation(line: 928, column: 4, scope: !6455)
!6459 = !DILocation(line: 928, column: 9, scope: !6455)
!6460 = !DILocation(line: 928, column: 17, scope: !6455)
!6461 = !DILocation(line: 928, column: 26, scope: !6455)
!6462 = !DILocation(line: 929, column: 27, scope: !6455)
!6463 = !DILocation(line: 929, column: 32, scope: !6455)
!6464 = !DILocation(line: 929, column: 35, scope: !6455)
!6465 = !DILocation(line: 929, column: 4, scope: !6455)
!6466 = !DILocation(line: 929, column: 9, scope: !6455)
!6467 = !DILocation(line: 929, column: 17, scope: !6455)
!6468 = !DILocation(line: 929, column: 25, scope: !6455)
!6469 = !DILocation(line: 930, column: 4, scope: !6455)
!6470 = !DILocation(line: 931, column: 10, scope: !6455)
!6471 = !DILocation(line: 931, column: 8, scope: !6455)
!6472 = !DILocation(line: 936, column: 11, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 936, column: 11)
!6474 = !DILocation(line: 936, column: 16, scope: !6473)
!6475 = !DILocation(line: 936, column: 24, scope: !6473)
!6476 = !DILocation(line: 936, column: 35, scope: !6473)
!6477 = !DILocation(line: 936, column: 40, scope: !6473)
!6478 = !DILocation(line: 936, column: 47, scope: !6473)
!6479 = !DILocation(line: 936, column: 52, scope: !6473)
!6480 = !DILocation(line: 936, column: 32, scope: !6473)
!6481 = !DILocation(line: 936, column: 11, scope: !6427)
!6482 = !DILocation(line: 937, column: 30, scope: !6473)
!6483 = !DILocation(line: 937, column: 35, scope: !6473)
!6484 = !DILocation(line: 937, column: 43, scope: !6473)
!6485 = !DILocation(line: 937, column: 2, scope: !6473)
!6486 = !DILocation(line: 937, column: 7, scope: !6473)
!6487 = !DILocation(line: 937, column: 14, scope: !6473)
!6488 = !DILocation(line: 937, column: 19, scope: !6473)
!6489 = !DILocation(line: 937, column: 28, scope: !6473)
!6490 = !DILocation(line: 939, column: 8, scope: !6473)
!6491 = !DILocation(line: 940, column: 5, scope: !6427)
!6492 = !DILocation(line: 912, column: 26, scope: !6422)
!6493 = !DILocation(line: 912, column: 3, scope: !6422)
!6494 = distinct !{!6494, !6425, !6495}
!6495 = !DILocation(line: 940, column: 5, scope: !6419)
!6496 = !DILocation(line: 941, column: 3, scope: !6293)
!6497 = !DILocation(line: 942, column: 3, scope: !6293)
!6498 = !DILocation(line: 945, column: 15, scope: !6293)
!6499 = !DILocation(line: 945, column: 13, scope: !6293)
!6500 = !DILocation(line: 946, column: 3, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 946, column: 3)
!6502 = !DILocation(line: 946, column: 3, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 946, column: 3)
!6504 = !DILocation(line: 948, column: 7, scope: !6505)
!6505 = distinct !DILexicalBlock(scope: !6503, file: !3, line: 947, column: 5)
!6506 = !DILocation(line: 949, column: 5, scope: !6505)
!6507 = distinct !{!6507, !6500, !6508}
!6508 = !DILocation(line: 949, column: 5, scope: !6501)
!6509 = !DILocation(line: 951, column: 3, scope: !6293)
!6510 = !DILocation(line: 951, column: 11, scope: !6293)
!6511 = !DILocation(line: 951, column: 10, scope: !6293)
!6512 = !DILocation(line: 953, column: 11, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 952, column: 5)
!6514 = !DILocation(line: 953, column: 9, scope: !6513)
!6515 = !DILocation(line: 954, column: 11, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6513, file: !3, line: 954, column: 11)
!6517 = !DILocation(line: 954, column: 13, scope: !6516)
!6518 = !DILocation(line: 954, column: 11, scope: !6513)
!6519 = !DILocation(line: 955, column: 2, scope: !6516)
!6520 = distinct !{!6520, !6509, !6521}
!6521 = !DILocation(line: 994, column: 5, scope: !6293)
!6522 = !DILocation(line: 960, column: 25, scope: !6523)
!6523 = distinct !DILexicalBlock(scope: !6513, file: !3, line: 960, column: 11)
!6524 = !DILocation(line: 960, column: 31, scope: !6523)
!6525 = !DILocation(line: 960, column: 11, scope: !6523)
!6526 = !DILocation(line: 960, column: 11, scope: !6513)
!6527 = !DILocation(line: 961, column: 6, scope: !6523)
!6528 = !DILocation(line: 961, column: 4, scope: !6523)
!6529 = !DILocation(line: 961, column: 2, scope: !6523)
!6530 = !DILocation(line: 964, column: 54, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 963, column: 2)
!6532 = !DILocation(line: 964, column: 13, scope: !6531)
!6533 = !DILocation(line: 964, column: 11, scope: !6531)
!6534 = !DILocation(line: 965, column: 30, scope: !6531)
!6535 = !DILocation(line: 965, column: 36, scope: !6531)
!6536 = !DILocation(line: 966, column: 40, scope: !6531)
!6537 = !DILocation(line: 966, column: 9, scope: !6531)
!6538 = !DILocation(line: 965, column: 8, scope: !6531)
!6539 = !DILocation(line: 965, column: 6, scope: !6531)
!6540 = !DILocation(line: 967, column: 23, scope: !6541)
!6541 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 967, column: 8)
!6542 = !DILocation(line: 967, column: 29, scope: !6541)
!6543 = !DILocation(line: 967, column: 9, scope: !6541)
!6544 = !DILocation(line: 967, column: 8, scope: !6531)
!6545 = !DILocation(line: 968, column: 6, scope: !6541)
!6546 = !DILocation(line: 972, column: 25, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6513, file: !3, line: 972, column: 11)
!6548 = !DILocation(line: 972, column: 36, scope: !6547)
!6549 = !DILocation(line: 972, column: 11, scope: !6547)
!6550 = !DILocation(line: 972, column: 11, scope: !6513)
!6551 = !DILocation(line: 973, column: 2, scope: !6547)
!6552 = !DILocation(line: 976, column: 23, scope: !6513)
!6553 = !DILocation(line: 976, column: 34, scope: !6513)
!6554 = !DILocation(line: 976, column: 7, scope: !6513)
!6555 = !DILocation(line: 977, column: 16, scope: !6513)
!6556 = !DILocation(line: 977, column: 14, scope: !6513)
!6557 = !DILocation(line: 978, column: 7, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6513, file: !3, line: 978, column: 7)
!6559 = !DILocation(line: 978, column: 7, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 978, column: 7)
!6561 = !DILocation(line: 980, column: 8, scope: !6562)
!6562 = distinct !DILexicalBlock(scope: !6560, file: !3, line: 979, column: 2)
!6563 = !DILocation(line: 980, column: 11, scope: !6562)
!6564 = !DILocation(line: 980, column: 16, scope: !6562)
!6565 = !DILocation(line: 980, column: 6, scope: !6562)
!6566 = !DILocation(line: 981, column: 22, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6562, file: !3, line: 981, column: 8)
!6568 = !DILocation(line: 981, column: 28, scope: !6567)
!6569 = !DILocation(line: 981, column: 8, scope: !6567)
!6570 = !DILocation(line: 981, column: 8, scope: !6562)
!6571 = !DILocation(line: 982, column: 6, scope: !6567)
!6572 = !DILocation(line: 988, column: 22, scope: !6573)
!6573 = distinct !DILexicalBlock(scope: !6562, file: !3, line: 988, column: 8)
!6574 = !DILocation(line: 988, column: 29, scope: !6573)
!6575 = !DILocation(line: 988, column: 8, scope: !6573)
!6576 = !DILocation(line: 988, column: 8, scope: !6562)
!6577 = !DILocation(line: 989, column: 6, scope: !6573)
!6578 = !DILocation(line: 991, column: 20, scope: !6562)
!6579 = !DILocation(line: 991, column: 26, scope: !6562)
!6580 = !DILocation(line: 991, column: 4, scope: !6562)
!6581 = !DILocation(line: 992, column: 4, scope: !6562)
!6582 = !DILocation(line: 993, column: 2, scope: !6562)
!6583 = distinct !{!6583, !6557, !6584}
!6584 = !DILocation(line: 993, column: 2, scope: !6558)
!6585 = !DILocation(line: 996, column: 3, scope: !6293)
!6586 = !DILocation(line: 997, column: 16, scope: !6293)
!6587 = !DILocation(line: 997, column: 22, scope: !6293)
!6588 = !DILocation(line: 997, column: 3, scope: !6293)
!6589 = !DILocation(line: 998, column: 3, scope: !6293)
!6590 = !DILocation(line: 999, column: 9, scope: !6293)
!6591 = !DILocation(line: 999, column: 3, scope: !6293)
!6592 = !DILocation(line: 1000, column: 1, scope: !6293)
!6593 = distinct !DISubprogram(name: "mark_block_for_update", scope: !3, file: !3, line: 456, type: !6594, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6594 = !DISubroutineType(types: !6595)
!6595 = !{null, !825}
!6596 = !DILocalVariable(name: "bb", arg: 1, scope: !6593, file: !3, line: 456, type: !825)
!6597 = !DILocation(line: 456, column: 36, scope: !6593)
!6598 = !DILocation(line: 458, column: 3, scope: !6593)
!6599 = !DILocation(line: 459, column: 21, scope: !6600)
!6600 = distinct !DILexicalBlock(scope: !6593, file: !3, line: 459, column: 7)
!6601 = !DILocation(line: 459, column: 39, scope: !6600)
!6602 = !DILocation(line: 459, column: 43, scope: !6600)
!6603 = !DILocation(line: 459, column: 7, scope: !6600)
!6604 = !DILocation(line: 459, column: 7, scope: !6593)
!6605 = !DILocation(line: 460, column: 5, scope: !6600)
!6606 = !DILocation(line: 461, column: 19, scope: !6593)
!6607 = !DILocation(line: 461, column: 37, scope: !6593)
!6608 = !DILocation(line: 461, column: 41, scope: !6593)
!6609 = !DILocation(line: 461, column: 3, scope: !6593)
!6610 = !DILocation(line: 462, column: 27, scope: !6593)
!6611 = !DILocation(line: 462, column: 3, scope: !6593)
!6612 = !DILocation(line: 463, column: 1, scope: !6593)
!6613 = distinct !DISubprogram(name: "gimple_phi_set_result", scope: !587, file: !587, line: 3089, type: !6614, scopeLine: 3090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6614 = !DISubroutineType(types: !6615)
!6615 = !{null, !863, !888}
!6616 = !DILocalVariable(name: "gs", arg: 1, scope: !6613, file: !587, line: 3089, type: !863)
!6617 = !DILocation(line: 3089, column: 31, scope: !6613)
!6618 = !DILocalVariable(name: "result", arg: 2, scope: !6613, file: !587, line: 3089, type: !888)
!6619 = !DILocation(line: 3089, column: 40, scope: !6613)
!6620 = !DILocation(line: 3092, column: 27, scope: !6613)
!6621 = !DILocation(line: 3092, column: 3, scope: !6613)
!6622 = !DILocation(line: 3092, column: 7, scope: !6613)
!6623 = !DILocation(line: 3092, column: 18, scope: !6613)
!6624 = !DILocation(line: 3092, column: 25, scope: !6613)
!6625 = !DILocation(line: 3093, column: 1, scope: !6613)
!6626 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !587, file: !587, line: 3080, type: !6627, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6627 = !DISubroutineType(types: !6628)
!6628 = !{!1508, !863}
!6629 = !DILocalVariable(name: "gs", arg: 1, scope: !6626, file: !587, line: 3080, type: !863)
!6630 = !DILocation(line: 3080, column: 31, scope: !6626)
!6631 = !DILocation(line: 3083, column: 11, scope: !6626)
!6632 = !DILocation(line: 3083, column: 15, scope: !6626)
!6633 = !DILocation(line: 3083, column: 26, scope: !6626)
!6634 = !DILocation(line: 3083, column: 3, scope: !6626)
!6635 = distinct !DISubprogram(name: "gsi_after_labels", scope: !587, file: !587, line: 4510, type: !5377, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6636 = !DILocalVariable(name: "bb", arg: 1, scope: !6635, file: !587, line: 4510, type: !825)
!6637 = !DILocation(line: 4510, column: 31, scope: !6635)
!6638 = !DILocalVariable(name: "gsi", scope: !6635, file: !587, line: 4512, type: !4569)
!6639 = !DILocation(line: 4512, column: 24, scope: !6635)
!6640 = !DILocation(line: 4512, column: 44, scope: !6635)
!6641 = !DILocation(line: 4512, column: 30, scope: !6635)
!6642 = !DILocation(line: 4514, column: 3, scope: !6635)
!6643 = !DILocation(line: 4514, column: 11, scope: !6635)
!6644 = !DILocation(line: 4514, column: 27, scope: !6635)
!6645 = !DILocation(line: 4514, column: 43, scope: !6635)
!6646 = !DILocation(line: 4514, column: 30, scope: !6635)
!6647 = !DILocation(line: 4514, column: 59, scope: !6635)
!6648 = !DILocation(line: 0, scope: !6635)
!6649 = !DILocation(line: 4515, column: 5, scope: !6635)
!6650 = distinct !{!6650, !6642, !6651}
!6651 = !DILocation(line: 4515, column: 19, scope: !6635)
!6652 = !DILocation(line: 4517, column: 3, scope: !6635)
!6653 = distinct !DISubprogram(name: "mark_phi_for_rewrite", scope: !3, file: !3, line: 1035, type: !6654, scopeLine: 1036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6654 = !DISubroutineType(types: !6655)
!6655 = !{null, !825, !863}
!6656 = !DILocalVariable(name: "bb", arg: 1, scope: !6653, file: !3, line: 1035, type: !825)
!6657 = !DILocation(line: 1035, column: 35, scope: !6653)
!6658 = !DILocalVariable(name: "phi", arg: 2, scope: !6653, file: !3, line: 1035, type: !863)
!6659 = !DILocation(line: 1035, column: 46, scope: !6653)
!6660 = !DILocalVariable(name: "phis", scope: !6653, file: !3, line: 1037, type: !2332)
!6661 = !DILocation(line: 1037, column: 14, scope: !6653)
!6662 = !DILocalVariable(name: "i", scope: !6653, file: !3, line: 1038, type: !7)
!6663 = !DILocation(line: 1038, column: 12, scope: !6653)
!6664 = !DILocalVariable(name: "idx", scope: !6653, file: !3, line: 1038, type: !7)
!6665 = !DILocation(line: 1038, column: 15, scope: !6653)
!6666 = !DILocation(line: 1038, column: 21, scope: !6653)
!6667 = !DILocation(line: 1038, column: 25, scope: !6653)
!6668 = !DILocation(line: 1040, column: 23, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1040, column: 7)
!6670 = !DILocation(line: 1040, column: 7, scope: !6669)
!6671 = !DILocation(line: 1040, column: 7, scope: !6653)
!6672 = !DILocation(line: 1041, column: 5, scope: !6669)
!6673 = !DILocation(line: 1043, column: 21, scope: !6653)
!6674 = !DILocation(line: 1043, column: 3, scope: !6653)
!6675 = !DILocation(line: 1045, column: 8, scope: !6676)
!6676 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1045, column: 7)
!6677 = !DILocation(line: 1045, column: 7, scope: !6653)
!6678 = !DILocation(line: 1046, column: 5, scope: !6676)
!6679 = !DILocation(line: 1048, column: 19, scope: !6653)
!6680 = !DILocation(line: 1048, column: 48, scope: !6653)
!6681 = !DILocation(line: 1048, column: 3, scope: !6653)
!6682 = !DILocation(line: 1049, column: 3, scope: !6653)
!6683 = !DILocation(line: 1050, column: 12, scope: !6684)
!6684 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1050, column: 3)
!6685 = !DILocation(line: 1050, column: 10, scope: !6684)
!6686 = !DILocation(line: 1050, column: 8, scope: !6684)
!6687 = !DILocation(line: 1050, column: 54, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 1050, column: 3)
!6689 = !DILocation(line: 1050, column: 59, scope: !6688)
!6690 = !DILocation(line: 1050, column: 56, scope: !6688)
!6691 = !DILocation(line: 1050, column: 3, scope: !6684)
!6692 = !DILocation(line: 1051, column: 5, scope: !6688)
!6693 = !DILocation(line: 1050, column: 65, scope: !6688)
!6694 = !DILocation(line: 1050, column: 3, scope: !6688)
!6695 = distinct !{!6695, !6691, !6696}
!6696 = !DILocation(line: 1051, column: 5, scope: !6684)
!6697 = !DILocation(line: 1053, column: 10, scope: !6653)
!6698 = !DILocation(line: 1053, column: 8, scope: !6653)
!6699 = !DILocation(line: 1054, column: 8, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6653, file: !3, line: 1054, column: 7)
!6701 = !DILocation(line: 1054, column: 7, scope: !6653)
!6702 = !DILocation(line: 1055, column: 12, scope: !6700)
!6703 = !DILocation(line: 1055, column: 10, scope: !6700)
!6704 = !DILocation(line: 1055, column: 5, scope: !6700)
!6705 = !DILocation(line: 1057, column: 3, scope: !6653)
!6706 = !DILocation(line: 1058, column: 3, scope: !6653)
!6707 = !DILocation(line: 1059, column: 1, scope: !6653)
!6708 = distinct !DISubprogram(name: "cmp_dfsnum", scope: !3, file: !3, line: 798, type: !1407, scopeLine: 799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6709 = !DILocalVariable(name: "a", arg: 1, scope: !6708, file: !3, line: 798, type: !1237)
!6710 = !DILocation(line: 798, column: 25, scope: !6708)
!6711 = !DILocalVariable(name: "b", arg: 2, scope: !6708, file: !3, line: 798, type: !1237)
!6712 = !DILocation(line: 798, column: 40, scope: !6708)
!6713 = !DILocalVariable(name: "da", scope: !6708, file: !3, line: 800, type: !6714)
!6714 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2305)
!6715 = !DILocation(line: 800, column: 34, scope: !6708)
!6716 = !DILocation(line: 800, column: 67, scope: !6708)
!6717 = !DILocation(line: 800, column: 39, scope: !6708)
!6718 = !DILocalVariable(name: "db", scope: !6708, file: !3, line: 801, type: !6714)
!6719 = !DILocation(line: 801, column: 34, scope: !6708)
!6720 = !DILocation(line: 801, column: 67, scope: !6708)
!6721 = !DILocation(line: 801, column: 39, scope: !6708)
!6722 = !DILocation(line: 803, column: 16, scope: !6708)
!6723 = !DILocation(line: 803, column: 20, scope: !6708)
!6724 = !DILocation(line: 803, column: 36, scope: !6708)
!6725 = !DILocation(line: 803, column: 40, scope: !6708)
!6726 = !DILocation(line: 803, column: 28, scope: !6708)
!6727 = !DILocation(line: 803, column: 3, scope: !6708)
!6728 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2309, file: !2309, line: 32, type: !6729, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6729 = !DISubroutineType(types: !6730)
!6730 = !{!2307, !984}
!6731 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6728, file: !2309, line: 32, type: !984)
!6732 = !DILocation(line: 32, column: 1, scope: !6728)
!6733 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2309, file: !2309, line: 31, type: !6734, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6734 = !DISubroutineType(types: !6735)
!6735 = !{!6736, !6737, !984}
!6736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!6737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!6738 = !DILocalVariable(name: "vec_", arg: 1, scope: !6733, file: !2309, line: 31, type: !6737)
!6739 = !DILocation(line: 31, column: 1, scope: !6733)
!6740 = !DILocalVariable(name: "obj_", arg: 2, scope: !6733, file: !2309, line: 31, type: !984)
!6741 = !DILocalVariable(name: "slot_", scope: !6733, file: !2309, line: 31, type: !6736)
!6742 = distinct !DISubprogram(name: "VEC_int_base_pop", scope: !2309, file: !2309, line: 31, type: !6743, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6743 = !DISubroutineType(types: !6744)
!6744 = !{!984, !6737}
!6745 = !DILocalVariable(name: "vec_", arg: 1, scope: !6742, file: !2309, line: 31, type: !6737)
!6746 = !DILocation(line: 31, column: 1, scope: !6742)
!6747 = !DILocalVariable(name: "obj_", scope: !6742, file: !2309, line: 31, type: !984)
!6748 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !2309, file: !2309, line: 31, type: !6749, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6749 = !DISubroutineType(types: !6750)
!6750 = !{!984, !6751, !7}
!6751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6752, size: 64)
!6752 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2313)
!6753 = !DILocalVariable(name: "vec_", arg: 1, scope: !6748, file: !2309, line: 31, type: !6751)
!6754 = !DILocation(line: 31, column: 1, scope: !6748)
!6755 = !DILocalVariable(name: "ix_", arg: 2, scope: !6748, file: !2309, line: 31, type: !7)
!6756 = !DILocation(line: 0, scope: !6748)
!6757 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !2309, file: !2309, line: 31, type: !6758, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6758 = !DISubroutineType(types: !6759)
!6759 = !{!7, !6751}
!6760 = !DILocalVariable(name: "vec_", arg: 1, scope: !6757, file: !2309, line: 31, type: !6751)
!6761 = !DILocation(line: 31, column: 1, scope: !6757)
!6762 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !2309, file: !2309, line: 32, type: !6763, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6763 = !DISubroutineType(types: !6764)
!6764 = !{!6736, !6765, !6766}
!6765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2307, size: 64)
!6766 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !984)
!6767 = !DILocalVariable(name: "vec_", arg: 1, scope: !6762, file: !2309, line: 32, type: !6765)
!6768 = !DILocation(line: 32, column: 1, scope: !6762)
!6769 = !DILocalVariable(name: "obj_", arg: 2, scope: !6762, file: !2309, line: 32, type: !6766)
!6770 = distinct !DISubprogram(name: "find_dfsnum_interval", scope: !3, file: !3, line: 810, type: !6771, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6771 = !DISubroutineType(types: !6772)
!6772 = !{!7, !2300, !7, !7}
!6773 = !DILocalVariable(name: "defs", arg: 1, scope: !6770, file: !3, line: 810, type: !2300)
!6774 = !DILocation(line: 810, column: 42, scope: !6770)
!6775 = !DILocalVariable(name: "n", arg: 2, scope: !6770, file: !3, line: 810, type: !7)
!6776 = !DILocation(line: 810, column: 57, scope: !6770)
!6777 = !DILocalVariable(name: "s", arg: 3, scope: !6770, file: !3, line: 810, type: !7)
!6778 = !DILocation(line: 810, column: 69, scope: !6770)
!6779 = !DILocalVariable(name: "f", scope: !6770, file: !3, line: 812, type: !7)
!6780 = !DILocation(line: 812, column: 12, scope: !6770)
!6781 = !DILocalVariable(name: "t", scope: !6770, file: !3, line: 812, type: !7)
!6782 = !DILocation(line: 812, column: 19, scope: !6770)
!6783 = !DILocation(line: 812, column: 23, scope: !6770)
!6784 = !DILocalVariable(name: "m", scope: !6770, file: !3, line: 812, type: !7)
!6785 = !DILocation(line: 812, column: 26, scope: !6770)
!6786 = !DILocation(line: 814, column: 3, scope: !6770)
!6787 = !DILocation(line: 814, column: 10, scope: !6770)
!6788 = !DILocation(line: 814, column: 14, scope: !6770)
!6789 = !DILocation(line: 814, column: 16, scope: !6770)
!6790 = !DILocation(line: 814, column: 12, scope: !6770)
!6791 = !DILocation(line: 816, column: 12, scope: !6792)
!6792 = distinct !DILexicalBlock(scope: !6770, file: !3, line: 815, column: 5)
!6793 = !DILocation(line: 816, column: 16, scope: !6792)
!6794 = !DILocation(line: 816, column: 14, scope: !6792)
!6795 = !DILocation(line: 816, column: 19, scope: !6792)
!6796 = !DILocation(line: 816, column: 9, scope: !6792)
!6797 = !DILocation(line: 817, column: 11, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6792, file: !3, line: 817, column: 11)
!6799 = !DILocation(line: 817, column: 16, scope: !6798)
!6800 = !DILocation(line: 817, column: 19, scope: !6798)
!6801 = !DILocation(line: 817, column: 30, scope: !6798)
!6802 = !DILocation(line: 817, column: 27, scope: !6798)
!6803 = !DILocation(line: 817, column: 11, scope: !6792)
!6804 = !DILocation(line: 818, column: 6, scope: !6798)
!6805 = !DILocation(line: 818, column: 4, scope: !6798)
!6806 = !DILocation(line: 818, column: 2, scope: !6798)
!6807 = !DILocation(line: 820, column: 6, scope: !6798)
!6808 = !DILocation(line: 820, column: 4, scope: !6798)
!6809 = distinct !{!6809, !6786, !6810}
!6810 = !DILocation(line: 821, column: 5, scope: !6770)
!6811 = !DILocation(line: 823, column: 10, scope: !6770)
!6812 = !DILocation(line: 823, column: 15, scope: !6770)
!6813 = !DILocation(line: 823, column: 18, scope: !6770)
!6814 = !DILocation(line: 823, column: 3, scope: !6770)
!6815 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2309, file: !2309, line: 32, type: !6816, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6816 = !DISubroutineType(types: !6817)
!6817 = !{null, !6765}
!6818 = !DILocalVariable(name: "vec_", arg: 1, scope: !6815, file: !2309, line: 32, type: !6765)
!6819 = !DILocation(line: 32, column: 1, scope: !6815)
!6820 = !DILocation(line: 32, column: 1, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6815, file: !2309, line: 32, column: 1)
!6822 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !2309, file: !2309, line: 32, type: !6823, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6823 = !DISubroutineType(types: !6824)
!6824 = !{!984, !6765, !984}
!6825 = !DILocalVariable(name: "vec_", arg: 1, scope: !6822, file: !2309, line: 32, type: !6765)
!6826 = !DILocation(line: 32, column: 1, scope: !6822)
!6827 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6822, file: !2309, line: 32, type: !984)
!6828 = !DILocalVariable(name: "extend", scope: !6822, file: !2309, line: 32, type: !984)
!6829 = !DILocation(line: 32, column: 1, scope: !6830)
!6830 = distinct !DILexicalBlock(scope: !6822, file: !2309, line: 32, column: 1)
!6831 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !2309, file: !2309, line: 31, type: !6832, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6832 = !DISubroutineType(types: !6833)
!6833 = !{!984, !6737, !984}
!6834 = !DILocalVariable(name: "vec_", arg: 1, scope: !6831, file: !2309, line: 31, type: !6737)
!6835 = !DILocation(line: 31, column: 1, scope: !6831)
!6836 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6831, file: !2309, line: 31, type: !984)
!6837 = distinct !DISubprogram(name: "initialize_flags_in_bb", scope: !3, file: !3, line: 428, type: !6594, scopeLine: 429, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6838 = !DILocalVariable(name: "bb", arg: 1, scope: !6837, file: !3, line: 428, type: !825)
!6839 = !DILocation(line: 428, column: 37, scope: !6837)
!6840 = !DILocalVariable(name: "stmt", scope: !6837, file: !3, line: 430, type: !863)
!6841 = !DILocation(line: 430, column: 10, scope: !6837)
!6842 = !DILocalVariable(name: "gsi", scope: !6837, file: !3, line: 431, type: !4569)
!6843 = !DILocation(line: 431, column: 24, scope: !6837)
!6844 = !DILocation(line: 433, column: 30, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 433, column: 3)
!6846 = !DILocation(line: 433, column: 14, scope: !6845)
!6847 = !DILocation(line: 433, column: 8, scope: !6845)
!6848 = !DILocation(line: 433, column: 36, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 433, column: 3)
!6850 = !DILocation(line: 433, column: 35, scope: !6849)
!6851 = !DILocation(line: 433, column: 3, scope: !6845)
!6852 = !DILocalVariable(name: "phi", scope: !6853, file: !3, line: 435, type: !863)
!6853 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 434, column: 5)
!6854 = !DILocation(line: 435, column: 14, scope: !6853)
!6855 = !DILocation(line: 435, column: 20, scope: !6853)
!6856 = !DILocation(line: 436, column: 25, scope: !6853)
!6857 = !DILocation(line: 436, column: 7, scope: !6853)
!6858 = !DILocation(line: 437, column: 26, scope: !6853)
!6859 = !DILocation(line: 437, column: 7, scope: !6853)
!6860 = !DILocation(line: 438, column: 5, scope: !6853)
!6861 = !DILocation(line: 433, column: 53, scope: !6849)
!6862 = !DILocation(line: 433, column: 3, scope: !6849)
!6863 = distinct !{!6863, !6851, !6864}
!6864 = !DILocation(line: 438, column: 5, scope: !6845)
!6865 = !DILocation(line: 440, column: 28, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 440, column: 3)
!6867 = !DILocation(line: 440, column: 14, scope: !6866)
!6868 = !DILocation(line: 440, column: 8, scope: !6866)
!6869 = !DILocation(line: 440, column: 34, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6866, file: !3, line: 440, column: 3)
!6871 = !DILocation(line: 440, column: 33, scope: !6870)
!6872 = !DILocation(line: 440, column: 3, scope: !6866)
!6873 = !DILocation(line: 442, column: 14, scope: !6874)
!6874 = distinct !DILexicalBlock(scope: !6870, file: !3, line: 441, column: 5)
!6875 = !DILocation(line: 442, column: 12, scope: !6874)
!6876 = !DILocation(line: 447, column: 7, scope: !6874)
!6877 = !DILocation(line: 448, column: 25, scope: !6874)
!6878 = !DILocation(line: 448, column: 7, scope: !6874)
!6879 = !DILocation(line: 449, column: 26, scope: !6874)
!6880 = !DILocation(line: 449, column: 7, scope: !6874)
!6881 = !DILocation(line: 450, column: 5, scope: !6874)
!6882 = !DILocation(line: 440, column: 51, scope: !6870)
!6883 = !DILocation(line: 440, column: 3, scope: !6870)
!6884 = distinct !{!6884, !6872, !6885}
!6885 = !DILocation(line: 450, column: 5, scope: !6866)
!6886 = !DILocation(line: 451, column: 1, scope: !6837)
!6887 = distinct !DISubprogram(name: "gimple_modified_p", scope: !587, file: !587, line: 1425, type: !5577, scopeLine: 1426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6888 = !DILocalVariable(name: "g", arg: 1, scope: !6887, file: !587, line: 1425, type: !3843)
!6889 = !DILocation(line: 1425, column: 33, scope: !6887)
!6890 = !DILocation(line: 1427, column: 27, scope: !6887)
!6891 = !DILocation(line: 1427, column: 11, scope: !6887)
!6892 = !DILocation(line: 1427, column: 10, scope: !6887)
!6893 = !DILocation(line: 1427, column: 40, scope: !6887)
!6894 = !DILocation(line: 1427, column: 43, scope: !6887)
!6895 = !DILocation(line: 1427, column: 50, scope: !6887)
!6896 = !DILocation(line: 1427, column: 33, scope: !6887)
!6897 = !DILocation(line: 1427, column: 3, scope: !6887)
!6898 = distinct !DISubprogram(name: "VEC_gimple_vec_heap_reserve", scope: !587, file: !587, line: 49, type: !6899, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6899 = !DISubroutineType(types: !6900)
!6900 = !{!984, !6901, !984}
!6901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2320, size: 64)
!6902 = !DILocalVariable(name: "vec_", arg: 1, scope: !6898, file: !587, line: 49, type: !6901)
!6903 = !DILocation(line: 49, column: 1, scope: !6898)
!6904 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6898, file: !587, line: 49, type: !984)
!6905 = !DILocalVariable(name: "extend", scope: !6898, file: !587, line: 49, type: !984)
!6906 = !DILocation(line: 49, column: 1, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6898, file: !587, line: 49, column: 1)
!6908 = distinct !DISubprogram(name: "VEC_gimple_vec_base_length", scope: !587, file: !587, line: 48, type: !6909, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6909 = !DISubroutineType(types: !6910)
!6910 = !{!7, !3763}
!6911 = !DILocalVariable(name: "vec_", arg: 1, scope: !6908, file: !587, line: 48, type: !3763)
!6912 = !DILocation(line: 48, column: 1, scope: !6908)
!6913 = distinct !DISubprogram(name: "VEC_gimple_vec_base_quick_push", scope: !587, file: !587, line: 48, type: !6914, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6914 = !DISubroutineType(types: !6915)
!6915 = !{!6916, !3780, !2332}
!6916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2332, size: 64)
!6917 = !DILocalVariable(name: "vec_", arg: 1, scope: !6913, file: !587, line: 48, type: !3780)
!6918 = !DILocation(line: 48, column: 1, scope: !6913)
!6919 = !DILocalVariable(name: "obj_", arg: 2, scope: !6913, file: !587, line: 48, type: !2332)
!6920 = !DILocalVariable(name: "slot_", scope: !6913, file: !587, line: 48, type: !6916)
!6921 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !587, file: !587, line: 34, type: !6922, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6922 = !DISubroutineType(types: !6923)
!6923 = !{!2333, !984}
!6924 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6921, file: !587, line: 34, type: !984)
!6925 = !DILocation(line: 34, column: 1, scope: !6921)
!6926 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !587, file: !587, line: 34, type: !6927, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6927 = !DISubroutineType(types: !6928)
!6928 = !{!6929, !3772, !863}
!6929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !863, size: 64)
!6930 = !DILocalVariable(name: "vec_", arg: 1, scope: !6926, file: !587, line: 34, type: !3772)
!6931 = !DILocation(line: 34, column: 1, scope: !6926)
!6932 = !DILocalVariable(name: "obj_", arg: 2, scope: !6926, file: !587, line: 34, type: !863)
!6933 = distinct !DISubprogram(name: "VEC_gimple_vec_base_space", scope: !587, file: !587, line: 48, type: !6934, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6934 = !DISubroutineType(types: !6935)
!6935 = !{!984, !3780, !984}
!6936 = !DILocalVariable(name: "vec_", arg: 1, scope: !6933, file: !587, line: 48, type: !3780)
!6937 = !DILocation(line: 48, column: 1, scope: !6933)
!6938 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6933, file: !587, line: 48, type: !984)
!6939 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !587, file: !587, line: 34, type: !6940, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6940 = !DISubroutineType(types: !6941)
!6941 = !{!984, !3772, !984}
!6942 = !DILocalVariable(name: "vec_", arg: 1, scope: !6939, file: !587, line: 34, type: !3772)
!6943 = !DILocation(line: 34, column: 1, scope: !6939)
!6944 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6939, file: !587, line: 34, type: !984)
!6945 = !DILocalVariable(name: "extend", scope: !6939, file: !587, line: 34, type: !984)
!6946 = !DILocation(line: 34, column: 1, scope: !6947)
!6947 = distinct !DILexicalBlock(scope: !6939, file: !587, line: 34, column: 1)
!6948 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !587, file: !587, line: 33, type: !6949, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6949 = !DISubroutineType(types: !6950)
!6950 = !{!6929, !6951, !863}
!6951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1448, size: 64)
!6952 = !DILocalVariable(name: "vec_", arg: 1, scope: !6948, file: !587, line: 33, type: !6951)
!6953 = !DILocation(line: 33, column: 1, scope: !6948)
!6954 = !DILocalVariable(name: "obj_", arg: 2, scope: !6948, file: !587, line: 33, type: !863)
!6955 = !DILocalVariable(name: "slot_", scope: !6948, file: !587, line: 33, type: !6929)
!6956 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !587, file: !587, line: 33, type: !6957, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6957 = !DISubroutineType(types: !6958)
!6958 = !{!984, !6951, !984}
!6959 = !DILocalVariable(name: "vec_", arg: 1, scope: !6956, file: !587, line: 33, type: !6951)
!6960 = !DILocation(line: 33, column: 1, scope: !6956)
!6961 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6956, file: !587, line: 33, type: !984)
!6962 = distinct !DISubprogram(name: "repl_map_hash", scope: !3, file: !3, line: 598, type: !1401, scopeLine: 599, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6963 = !DILocalVariable(name: "p", arg: 1, scope: !6962, file: !3, line: 598, type: !1237)
!6964 = !DILocation(line: 598, column: 28, scope: !6962)
!6965 = !DILocation(line: 600, column: 10, scope: !6962)
!6966 = !DILocation(line: 600, column: 71, scope: !6962)
!6967 = !DILocation(line: 600, column: 44, scope: !6962)
!6968 = !DILocation(line: 600, column: 75, scope: !6962)
!6969 = !DILocation(line: 600, column: 29, scope: !6962)
!6970 = !DILocation(line: 600, column: 3, scope: !6962)
!6971 = distinct !DISubprogram(name: "repl_map_eq", scope: !3, file: !3, line: 604, type: !1407, scopeLine: 605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6972 = !DILocalVariable(name: "p1", arg: 1, scope: !6971, file: !3, line: 604, type: !1237)
!6973 = !DILocation(line: 604, column: 26, scope: !6971)
!6974 = !DILocalVariable(name: "p2", arg: 2, scope: !6971, file: !3, line: 604, type: !1237)
!6975 = !DILocation(line: 604, column: 42, scope: !6971)
!6976 = !DILocation(line: 606, column: 38, scope: !6971)
!6977 = !DILocation(line: 606, column: 11, scope: !6971)
!6978 = !DILocation(line: 606, column: 43, scope: !6971)
!6979 = !DILocation(line: 607, column: 34, scope: !6971)
!6980 = !DILocation(line: 607, column: 7, scope: !6971)
!6981 = !DILocation(line: 607, column: 39, scope: !6971)
!6982 = !DILocation(line: 607, column: 3, scope: !6971)
!6983 = !DILocation(line: 606, column: 3, scope: !6971)
!6984 = distinct !DISubprogram(name: "repl_map_free", scope: !3, file: !3, line: 611, type: !1412, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6985 = !DILocalVariable(name: "p", arg: 1, scope: !6984, file: !3, line: 611, type: !1167)
!6986 = !DILocation(line: 611, column: 22, scope: !6984)
!6987 = !DILocation(line: 613, column: 3, scope: !6984)
!6988 = !DILocation(line: 614, column: 9, scope: !6984)
!6989 = !DILocation(line: 614, column: 3, scope: !6984)
!6990 = !DILocation(line: 615, column: 1, scope: !6984)
!6991 = distinct !DISubprogram(name: "add_to_repl_tbl", scope: !3, file: !3, line: 640, type: !2530, scopeLine: 641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!6992 = !DILocalVariable(name: "new_tree", arg: 1, scope: !6991, file: !3, line: 640, type: !888)
!6993 = !DILocation(line: 640, column: 23, scope: !6991)
!6994 = !DILocalVariable(name: "old", arg: 2, scope: !6991, file: !3, line: 640, type: !888)
!6995 = !DILocation(line: 640, column: 38, scope: !6991)
!6996 = !DILocalVariable(name: "m", scope: !6991, file: !3, line: 642, type: !2339)
!6997 = !DILocation(line: 642, column: 21, scope: !6991)
!6998 = !DILocalVariable(name: "mp", scope: !6991, file: !3, line: 642, type: !2338)
!6999 = !DILocation(line: 642, column: 25, scope: !6991)
!7000 = !DILocalVariable(name: "slot", scope: !6991, file: !3, line: 643, type: !1415)
!7001 = !DILocation(line: 643, column: 10, scope: !6991)
!7002 = !DILocation(line: 645, column: 12, scope: !6991)
!7003 = !DILocation(line: 645, column: 5, scope: !6991)
!7004 = !DILocation(line: 645, column: 10, scope: !6991)
!7005 = !DILocation(line: 646, column: 26, scope: !6991)
!7006 = !DILocation(line: 646, column: 36, scope: !6991)
!7007 = !DILocation(line: 646, column: 10, scope: !6991)
!7008 = !DILocation(line: 646, column: 8, scope: !6991)
!7009 = !DILocation(line: 647, column: 8, scope: !7010)
!7010 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 647, column: 7)
!7011 = !DILocation(line: 647, column: 7, scope: !7010)
!7012 = !DILocation(line: 647, column: 13, scope: !7010)
!7013 = !DILocation(line: 647, column: 7, scope: !6991)
!7014 = !DILocation(line: 649, column: 12, scope: !7015)
!7015 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 648, column: 5)
!7016 = !DILocation(line: 649, column: 10, scope: !7015)
!7017 = !DILocation(line: 650, column: 18, scope: !7015)
!7018 = !DILocation(line: 650, column: 7, scope: !7015)
!7019 = !DILocation(line: 650, column: 11, scope: !7015)
!7020 = !DILocation(line: 650, column: 16, scope: !7015)
!7021 = !DILocation(line: 651, column: 17, scope: !7015)
!7022 = !DILocation(line: 651, column: 7, scope: !7015)
!7023 = !DILocation(line: 651, column: 11, scope: !7015)
!7024 = !DILocation(line: 651, column: 15, scope: !7015)
!7025 = !DILocation(line: 652, column: 24, scope: !7015)
!7026 = !DILocation(line: 652, column: 15, scope: !7015)
!7027 = !DILocation(line: 652, column: 8, scope: !7015)
!7028 = !DILocation(line: 652, column: 13, scope: !7015)
!7029 = !DILocation(line: 653, column: 5, scope: !7015)
!7030 = !DILocation(line: 655, column: 33, scope: !7010)
!7031 = !DILocation(line: 655, column: 32, scope: !7010)
!7032 = !DILocation(line: 655, column: 10, scope: !7010)
!7033 = !DILocation(line: 655, column: 8, scope: !7010)
!7034 = !DILocation(line: 657, column: 19, scope: !6991)
!7035 = !DILocation(line: 657, column: 23, scope: !6991)
!7036 = !DILocation(line: 657, column: 28, scope: !6991)
!7037 = !DILocation(line: 657, column: 3, scope: !6991)
!7038 = !DILocation(line: 658, column: 1, scope: !6991)
!7039 = distinct !DISubprogram(name: "RESET_BIT", scope: !2388, file: !2388, line: 82, type: !4872, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7040 = !DILocalVariable(name: "map", arg: 1, scope: !7039, file: !2388, line: 82, type: !2387)
!7041 = !DILocation(line: 82, column: 20, scope: !7039)
!7042 = !DILocalVariable(name: "bitno", arg: 2, scope: !7039, file: !2388, line: 82, type: !7)
!7043 = !DILocation(line: 82, column: 39, scope: !7039)
!7044 = !DILocation(line: 84, column: 7, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7039, file: !2388, line: 84, column: 7)
!7046 = !DILocation(line: 84, column: 12, scope: !7045)
!7047 = !DILocation(line: 84, column: 7, scope: !7039)
!7048 = !DILocalVariable(name: "oldbit", scope: !7049, file: !2388, line: 86, type: !1007)
!7049 = distinct !DILexicalBlock(scope: !7045, file: !2388, line: 85, column: 5)
!7050 = !DILocation(line: 86, column: 12, scope: !7049)
!7051 = !DILocation(line: 87, column: 16, scope: !7049)
!7052 = !DILocation(line: 87, column: 14, scope: !7049)
!7053 = !DILocation(line: 88, column: 11, scope: !7054)
!7054 = distinct !DILexicalBlock(scope: !7049, file: !2388, line: 88, column: 11)
!7055 = !DILocation(line: 88, column: 11, scope: !7049)
!7056 = !DILocation(line: 89, column: 2, scope: !7054)
!7057 = !DILocation(line: 89, column: 7, scope: !7054)
!7058 = !DILocation(line: 89, column: 16, scope: !7054)
!7059 = !DILocation(line: 89, column: 22, scope: !7054)
!7060 = !DILocation(line: 89, column: 41, scope: !7054)
!7061 = !DILocation(line: 90, column: 5, scope: !7049)
!7062 = !DILocation(line: 92, column: 35, scope: !7039)
!7063 = !DILocation(line: 92, column: 42, scope: !7039)
!7064 = !DILocation(line: 92, column: 31, scope: !7039)
!7065 = !DILocation(line: 92, column: 8, scope: !7039)
!7066 = !DILocation(line: 91, column: 3, scope: !7039)
!7067 = !DILocation(line: 91, column: 8, scope: !7039)
!7068 = !DILocation(line: 91, column: 13, scope: !7039)
!7069 = !DILocation(line: 91, column: 19, scope: !7039)
!7070 = !DILocation(line: 92, column: 5, scope: !7039)
!7071 = !DILocation(line: 93, column: 1, scope: !7039)
!7072 = distinct !DISubprogram(name: "prepare_def_site_for", scope: !3, file: !3, line: 2612, type: !7073, scopeLine: 2613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7073 = !DISubroutineType(types: !7074)
!7074 = !{null, !888, !1007}
!7075 = !DILocalVariable(name: "name", arg: 1, scope: !7072, file: !3, line: 2612, type: !888)
!7076 = !DILocation(line: 2612, column: 28, scope: !7072)
!7077 = !DILocalVariable(name: "insert_phi_p", arg: 2, scope: !7072, file: !3, line: 2612, type: !1007)
!7078 = !DILocation(line: 2612, column: 39, scope: !7072)
!7079 = !DILocalVariable(name: "stmt", scope: !7072, file: !3, line: 2614, type: !863)
!7080 = !DILocation(line: 2614, column: 10, scope: !7072)
!7081 = !DILocalVariable(name: "bb", scope: !7072, file: !3, line: 2615, type: !825)
!7082 = !DILocation(line: 2615, column: 15, scope: !7072)
!7083 = !DILocation(line: 2617, column: 3, scope: !7072)
!7084 = !DILocation(line: 2620, column: 10, scope: !7072)
!7085 = !DILocation(line: 2620, column: 8, scope: !7072)
!7086 = !DILocation(line: 2621, column: 19, scope: !7072)
!7087 = !DILocation(line: 2621, column: 8, scope: !7072)
!7088 = !DILocation(line: 2621, column: 6, scope: !7072)
!7089 = !DILocation(line: 2622, column: 7, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7072, file: !3, line: 2622, column: 7)
!7091 = !DILocation(line: 2622, column: 7, scope: !7072)
!7092 = !DILocation(line: 2624, column: 7, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7090, file: !3, line: 2623, column: 5)
!7094 = !DILocation(line: 2625, column: 30, scope: !7093)
!7095 = !DILocation(line: 2625, column: 7, scope: !7093)
!7096 = !DILocation(line: 2626, column: 29, scope: !7093)
!7097 = !DILocation(line: 2626, column: 35, scope: !7093)
!7098 = !DILocation(line: 2626, column: 41, scope: !7093)
!7099 = !DILocation(line: 2626, column: 45, scope: !7093)
!7100 = !DILocation(line: 2626, column: 7, scope: !7093)
!7101 = !DILocation(line: 2627, column: 5, scope: !7093)
!7102 = !DILocation(line: 2628, column: 1, scope: !7072)
!7103 = distinct !DISubprogram(name: "prepare_use_sites_for", scope: !3, file: !3, line: 2581, type: !7073, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7104 = !DILocalVariable(name: "name", arg: 1, scope: !7103, file: !3, line: 2581, type: !888)
!7105 = !DILocation(line: 2581, column: 29, scope: !7103)
!7106 = !DILocalVariable(name: "insert_phi_p", arg: 2, scope: !7103, file: !3, line: 2581, type: !1007)
!7107 = !DILocation(line: 2581, column: 40, scope: !7103)
!7108 = !DILocalVariable(name: "use_p", scope: !7103, file: !3, line: 2583, type: !2297)
!7109 = !DILocation(line: 2583, column: 17, scope: !7103)
!7110 = !DILocalVariable(name: "iter", scope: !7103, file: !3, line: 2584, type: !7111)
!7111 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !634, line: 249, baseType: !7112)
!7112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !634, line: 238, size: 448, elements: !7113)
!7113 = !{!7114, !7115, !7116, !7117}
!7114 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !7112, file: !634, line: 241, baseType: !2298, size: 64)
!7115 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !7112, file: !634, line: 243, baseType: !2298, size: 64, offset: 64)
!7116 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !7112, file: !634, line: 245, baseType: !2299, size: 256, offset: 128)
!7117 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !7112, file: !634, line: 248, baseType: !2298, size: 64, offset: 384)
!7118 = !DILocation(line: 2584, column: 20, scope: !7103)
!7119 = !DILocation(line: 2586, column: 3, scope: !7120)
!7120 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 2586, column: 3)
!7121 = !DILocation(line: 2586, column: 3, scope: !7122)
!7122 = distinct !DILexicalBlock(scope: !7120, file: !3, line: 2586, column: 3)
!7123 = !DILocalVariable(name: "stmt", scope: !7124, file: !3, line: 2588, type: !863)
!7124 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 2587, column: 5)
!7125 = !DILocation(line: 2588, column: 14, scope: !7124)
!7126 = !DILocation(line: 2588, column: 21, scope: !7124)
!7127 = !DILocalVariable(name: "bb", scope: !7124, file: !3, line: 2589, type: !825)
!7128 = !DILocation(line: 2589, column: 19, scope: !7124)
!7129 = !DILocation(line: 2589, column: 35, scope: !7124)
!7130 = !DILocation(line: 2589, column: 24, scope: !7124)
!7131 = !DILocation(line: 2591, column: 24, scope: !7132)
!7132 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 2591, column: 11)
!7133 = !DILocation(line: 2591, column: 11, scope: !7132)
!7134 = !DILocation(line: 2591, column: 30, scope: !7132)
!7135 = !DILocation(line: 2591, column: 11, scope: !7124)
!7136 = !DILocalVariable(name: "ix", scope: !7137, file: !3, line: 2593, type: !984)
!7137 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 2592, column: 2)
!7138 = !DILocation(line: 2593, column: 8, scope: !7137)
!7139 = !DILocation(line: 2593, column: 13, scope: !7137)
!7140 = !DILocalVariable(name: "e", scope: !7137, file: !3, line: 2594, type: !843)
!7141 = !DILocation(line: 2594, column: 9, scope: !7137)
!7142 = !DILocation(line: 2594, column: 34, scope: !7137)
!7143 = !DILocation(line: 2594, column: 40, scope: !7137)
!7144 = !DILocation(line: 2594, column: 13, scope: !7137)
!7145 = !DILocation(line: 2595, column: 26, scope: !7137)
!7146 = !DILocation(line: 2595, column: 32, scope: !7137)
!7147 = !DILocation(line: 2595, column: 38, scope: !7137)
!7148 = !DILocation(line: 2595, column: 41, scope: !7137)
!7149 = !DILocation(line: 2595, column: 46, scope: !7137)
!7150 = !DILocation(line: 2595, column: 4, scope: !7137)
!7151 = !DILocation(line: 2596, column: 2, scope: !7137)
!7152 = !DILocation(line: 2601, column: 26, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7132, file: !3, line: 2598, column: 2)
!7154 = !DILocation(line: 2601, column: 32, scope: !7153)
!7155 = !DILocation(line: 2601, column: 38, scope: !7153)
!7156 = !DILocation(line: 2601, column: 42, scope: !7153)
!7157 = !DILocation(line: 2601, column: 4, scope: !7153)
!7158 = !DILocation(line: 2603, column: 5, scope: !7124)
!7159 = distinct !{!7159, !7119, !7160}
!7160 = !DILocation(line: 2603, column: 5, scope: !7120)
!7161 = !DILocation(line: 2604, column: 1, scope: !7103)
!7162 = distinct !DISubprogram(name: "mark_def_interesting", scope: !3, file: !3, line: 2429, type: !7163, scopeLine: 2430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7163 = !DISubroutineType(types: !7164)
!7164 = !{null, !888, !863, !825, !1007}
!7165 = !DILocalVariable(name: "var", arg: 1, scope: !7162, file: !3, line: 2429, type: !888)
!7166 = !DILocation(line: 2429, column: 28, scope: !7162)
!7167 = !DILocalVariable(name: "stmt", arg: 2, scope: !7162, file: !3, line: 2429, type: !863)
!7168 = !DILocation(line: 2429, column: 40, scope: !7162)
!7169 = !DILocalVariable(name: "bb", arg: 3, scope: !7162, file: !3, line: 2429, type: !825)
!7170 = !DILocation(line: 2429, column: 58, scope: !7162)
!7171 = !DILocalVariable(name: "insert_phi_p", arg: 4, scope: !7162, file: !3, line: 2429, type: !1007)
!7172 = !DILocation(line: 2429, column: 67, scope: !7162)
!7173 = !DILocation(line: 2431, column: 3, scope: !7162)
!7174 = !DILocation(line: 2432, column: 22, scope: !7162)
!7175 = !DILocation(line: 2432, column: 3, scope: !7162)
!7176 = !DILocation(line: 2434, column: 7, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 2434, column: 7)
!7178 = !DILocation(line: 2434, column: 7, scope: !7162)
!7179 = !DILocalVariable(name: "is_phi_p", scope: !7180, file: !3, line: 2436, type: !1007)
!7180 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 2435, column: 5)
!7181 = !DILocation(line: 2436, column: 12, scope: !7180)
!7182 = !DILocation(line: 2436, column: 36, scope: !7180)
!7183 = !DILocation(line: 2436, column: 23, scope: !7180)
!7184 = !DILocation(line: 2436, column: 42, scope: !7180)
!7185 = !DILocation(line: 2438, column: 22, scope: !7180)
!7186 = !DILocation(line: 2438, column: 27, scope: !7180)
!7187 = !DILocation(line: 2438, column: 31, scope: !7180)
!7188 = !DILocation(line: 2438, column: 7, scope: !7180)
!7189 = !DILocation(line: 2442, column: 11, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7180, file: !3, line: 2442, column: 11)
!7191 = !DILocation(line: 2442, column: 27, scope: !7190)
!7192 = !DILocation(line: 2442, column: 39, scope: !7190)
!7193 = !DILocation(line: 2442, column: 55, scope: !7190)
!7194 = !DILocation(line: 2442, column: 42, scope: !7190)
!7195 = !DILocation(line: 2442, column: 11, scope: !7180)
!7196 = !DILocalVariable(name: "bi", scope: !7197, file: !3, line: 2444, type: !2567)
!7197 = distinct !DILexicalBlock(scope: !7190, file: !3, line: 2443, column: 2)
!7198 = !DILocation(line: 2444, column: 20, scope: !7197)
!7199 = !DILocalVariable(name: "i", scope: !7197, file: !3, line: 2445, type: !7)
!7200 = !DILocation(line: 2445, column: 13, scope: !7197)
!7201 = !DILocalVariable(name: "set", scope: !7197, file: !3, line: 2446, type: !1480)
!7202 = !DILocation(line: 2446, column: 11, scope: !7197)
!7203 = !DILocation(line: 2446, column: 36, scope: !7197)
!7204 = !DILocation(line: 2446, column: 17, scope: !7197)
!7205 = !DILocation(line: 2447, column: 8, scope: !7206)
!7206 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 2447, column: 8)
!7207 = !DILocation(line: 2447, column: 8, scope: !7197)
!7208 = !DILocation(line: 2448, column: 6, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7206, file: !3, line: 2448, column: 6)
!7210 = !DILocation(line: 2448, column: 6, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 2448, column: 6)
!7212 = !DILocation(line: 2449, column: 23, scope: !7211)
!7213 = !DILocation(line: 2449, column: 37, scope: !7211)
!7214 = !DILocation(line: 2449, column: 41, scope: !7211)
!7215 = !DILocation(line: 2449, column: 8, scope: !7211)
!7216 = distinct !{!7216, !7208, !7217}
!7217 = !DILocation(line: 2449, column: 49, scope: !7209)
!7218 = !DILocation(line: 2450, column: 2, scope: !7197)
!7219 = !DILocation(line: 2451, column: 5, scope: !7180)
!7220 = !DILocation(line: 2452, column: 1, scope: !7162)
!7221 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !2511, file: !2511, line: 292, type: !7222, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7222 = !DISubroutineType(types: !7223)
!7223 = !{!2297, !7224, !888}
!7224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7111, size: 64)
!7225 = !DILocalVariable(name: "imm", arg: 1, scope: !7221, file: !2511, line: 292, type: !7224)
!7226 = !DILocation(line: 292, column: 43, scope: !7221)
!7227 = !DILocalVariable(name: "var", arg: 2, scope: !7221, file: !2511, line: 292, type: !888)
!7228 = !DILocation(line: 292, column: 53, scope: !7221)
!7229 = !DILocation(line: 294, column: 18, scope: !7221)
!7230 = !DILocation(line: 294, column: 3, scope: !7221)
!7231 = !DILocation(line: 294, column: 8, scope: !7221)
!7232 = !DILocation(line: 294, column: 14, scope: !7221)
!7233 = !DILocation(line: 295, column: 18, scope: !7221)
!7234 = !DILocation(line: 295, column: 23, scope: !7221)
!7235 = !DILocation(line: 295, column: 30, scope: !7221)
!7236 = !DILocation(line: 295, column: 3, scope: !7221)
!7237 = !DILocation(line: 295, column: 8, scope: !7221)
!7238 = !DILocation(line: 295, column: 16, scope: !7221)
!7239 = !DILocation(line: 299, column: 31, scope: !7240)
!7240 = distinct !DILexicalBlock(scope: !7221, file: !2511, line: 299, column: 7)
!7241 = !DILocation(line: 299, column: 7, scope: !7240)
!7242 = !DILocation(line: 299, column: 7, scope: !7221)
!7243 = !DILocation(line: 300, column: 5, scope: !7240)
!7244 = !DILocation(line: 301, column: 10, scope: !7221)
!7245 = !DILocation(line: 301, column: 15, scope: !7221)
!7246 = !DILocation(line: 301, column: 3, scope: !7221)
!7247 = !DILocation(line: 302, column: 1, scope: !7221)
!7248 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !2511, file: !2511, line: 285, type: !7249, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7249 = !DISubroutineType(types: !7250)
!7250 = !{!1007, !7251}
!7251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7252, size: 64)
!7252 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7111)
!7253 = !DILocalVariable(name: "imm", arg: 1, scope: !7248, file: !2511, line: 285, type: !7251)
!7254 = !DILocation(line: 285, column: 49, scope: !7248)
!7255 = !DILocation(line: 287, column: 11, scope: !7248)
!7256 = !DILocation(line: 287, column: 16, scope: !7248)
!7257 = !DILocation(line: 287, column: 27, scope: !7248)
!7258 = !DILocation(line: 287, column: 32, scope: !7248)
!7259 = !DILocation(line: 287, column: 24, scope: !7248)
!7260 = !DILocation(line: 287, column: 10, scope: !7248)
!7261 = !DILocation(line: 287, column: 3, scope: !7248)
!7262 = distinct !DISubprogram(name: "phi_arg_index_from_use", scope: !2511, file: !2511, line: 533, type: !7263, scopeLine: 534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7263 = !DISubroutineType(types: !7264)
!7264 = !{!984, !2297}
!7265 = !DILocalVariable(name: "use", arg: 1, scope: !7262, file: !2511, line: 533, type: !2297)
!7266 = !DILocation(line: 533, column: 39, scope: !7262)
!7267 = !DILocalVariable(name: "element", scope: !7262, file: !2511, line: 535, type: !2347)
!7268 = !DILocation(line: 535, column: 21, scope: !7262)
!7269 = !DILocalVariable(name: "root", scope: !7262, file: !2511, line: 535, type: !2347)
!7270 = !DILocation(line: 535, column: 31, scope: !7262)
!7271 = !DILocalVariable(name: "index", scope: !7262, file: !2511, line: 536, type: !1417)
!7272 = !DILocation(line: 536, column: 10, scope: !7262)
!7273 = !DILocalVariable(name: "phi", scope: !7262, file: !2511, line: 537, type: !863)
!7274 = !DILocation(line: 537, column: 10, scope: !7262)
!7275 = !DILocation(line: 543, column: 9, scope: !7262)
!7276 = !DILocation(line: 543, column: 7, scope: !7262)
!7277 = !DILocation(line: 544, column: 3, scope: !7262)
!7278 = !DILocation(line: 546, column: 33, scope: !7262)
!7279 = !DILocation(line: 546, column: 13, scope: !7262)
!7280 = !DILocation(line: 546, column: 11, scope: !7262)
!7281 = !DILocation(line: 547, column: 26, scope: !7262)
!7282 = !DILocation(line: 547, column: 10, scope: !7262)
!7283 = !DILocation(line: 547, column: 8, scope: !7262)
!7284 = !DILocation(line: 548, column: 11, scope: !7262)
!7285 = !DILocation(line: 548, column: 21, scope: !7262)
!7286 = !DILocation(line: 548, column: 19, scope: !7262)
!7287 = !DILocation(line: 548, column: 9, scope: !7262)
!7288 = !DILocation(line: 558, column: 9, scope: !7262)
!7289 = !DILocation(line: 558, column: 2, scope: !7262)
!7290 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !2511, file: !2511, line: 467, type: !7291, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7291 = !DISubroutineType(types: !7292)
!7292 = !{!843, !863, !1417}
!7293 = !DILocalVariable(name: "gs", arg: 1, scope: !7290, file: !2511, line: 467, type: !863)
!7294 = !DILocation(line: 467, column: 29, scope: !7290)
!7295 = !DILocalVariable(name: "i", arg: 2, scope: !7290, file: !2511, line: 467, type: !1417)
!7296 = !DILocation(line: 467, column: 40, scope: !7290)
!7297 = !DILocation(line: 469, column: 10, scope: !7290)
!7298 = !DILocation(line: 469, column: 3, scope: !7290)
!7299 = distinct !DISubprogram(name: "mark_use_interesting", scope: !3, file: !3, line: 2460, type: !7163, scopeLine: 2461, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7300 = !DILocalVariable(name: "var", arg: 1, scope: !7299, file: !3, line: 2460, type: !888)
!7301 = !DILocation(line: 2460, column: 28, scope: !7299)
!7302 = !DILocalVariable(name: "stmt", arg: 2, scope: !7299, file: !3, line: 2460, type: !863)
!7303 = !DILocation(line: 2460, column: 40, scope: !7299)
!7304 = !DILocalVariable(name: "bb", arg: 3, scope: !7299, file: !3, line: 2460, type: !825)
!7305 = !DILocation(line: 2460, column: 58, scope: !7299)
!7306 = !DILocalVariable(name: "insert_phi_p", arg: 4, scope: !7299, file: !3, line: 2460, type: !1007)
!7307 = !DILocation(line: 2460, column: 67, scope: !7299)
!7308 = !DILocalVariable(name: "def_bb", scope: !7299, file: !3, line: 2462, type: !825)
!7309 = !DILocation(line: 2462, column: 15, scope: !7299)
!7310 = !DILocation(line: 2462, column: 35, scope: !7299)
!7311 = !DILocation(line: 2462, column: 24, scope: !7299)
!7312 = !DILocation(line: 2464, column: 26, scope: !7299)
!7313 = !DILocation(line: 2464, column: 3, scope: !7299)
!7314 = !DILocation(line: 2465, column: 26, scope: !7299)
!7315 = !DILocation(line: 2465, column: 3, scope: !7299)
!7316 = !DILocation(line: 2467, column: 20, scope: !7317)
!7317 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2467, column: 7)
!7318 = !DILocation(line: 2467, column: 7, scope: !7317)
!7319 = !DILocation(line: 2467, column: 26, scope: !7317)
!7320 = !DILocation(line: 2467, column: 7, scope: !7299)
!7321 = !DILocation(line: 2468, column: 27, scope: !7317)
!7322 = !DILocation(line: 2468, column: 35, scope: !7317)
!7323 = !DILocation(line: 2468, column: 5, scope: !7317)
!7324 = !DILocation(line: 2471, column: 25, scope: !7325)
!7325 = distinct !DILexicalBlock(scope: !7317, file: !3, line: 2470, column: 5)
!7326 = !DILocation(line: 2471, column: 7, scope: !7325)
!7327 = !DILocation(line: 2473, column: 28, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7325, file: !3, line: 2473, column: 11)
!7329 = !DILocation(line: 2473, column: 11, scope: !7328)
!7330 = !DILocation(line: 2473, column: 11, scope: !7325)
!7331 = !DILocation(line: 2474, column: 2, scope: !7328)
!7332 = !DILocation(line: 2482, column: 7, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2482, column: 7)
!7334 = !DILocation(line: 2482, column: 7, scope: !7299)
!7335 = !DILocalVariable(name: "db_p", scope: !7336, file: !3, line: 2484, type: !2286)
!7336 = distinct !DILexicalBlock(scope: !7333, file: !3, line: 2483, column: 5)
!7337 = !DILocation(line: 2484, column: 28, scope: !7336)
!7338 = !DILocation(line: 2484, column: 55, scope: !7336)
!7339 = !DILocation(line: 2484, column: 35, scope: !7336)
!7340 = !DILocation(line: 2485, column: 26, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7336, file: !3, line: 2485, column: 11)
!7342 = !DILocation(line: 2485, column: 32, scope: !7341)
!7343 = !DILocation(line: 2485, column: 44, scope: !7341)
!7344 = !DILocation(line: 2485, column: 48, scope: !7341)
!7345 = !DILocation(line: 2485, column: 12, scope: !7341)
!7346 = !DILocation(line: 2485, column: 11, scope: !7336)
!7347 = !DILocation(line: 2486, column: 20, scope: !7341)
!7348 = !DILocation(line: 2486, column: 25, scope: !7341)
!7349 = !DILocation(line: 2486, column: 2, scope: !7341)
!7350 = !DILocation(line: 2487, column: 5, scope: !7336)
!7351 = !DILocation(line: 2488, column: 1, scope: !7299)
!7352 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !2511, file: !2511, line: 306, type: !7353, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7353 = !DISubroutineType(types: !7354)
!7354 = !{!2297, !7224}
!7355 = !DILocalVariable(name: "imm", arg: 1, scope: !7352, file: !2511, line: 306, type: !7224)
!7356 = !DILocation(line: 306, column: 42, scope: !7352)
!7357 = !DILocalVariable(name: "old", scope: !7352, file: !2511, line: 308, type: !2297)
!7358 = !DILocation(line: 308, column: 17, scope: !7352)
!7359 = !DILocation(line: 308, column: 23, scope: !7352)
!7360 = !DILocation(line: 308, column: 28, scope: !7352)
!7361 = !DILocation(line: 319, column: 18, scope: !7352)
!7362 = !DILocation(line: 319, column: 23, scope: !7352)
!7363 = !DILocation(line: 319, column: 3, scope: !7352)
!7364 = !DILocation(line: 319, column: 8, scope: !7352)
!7365 = !DILocation(line: 319, column: 16, scope: !7352)
!7366 = !DILocation(line: 320, column: 31, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7352, file: !2511, line: 320, column: 7)
!7368 = !DILocation(line: 320, column: 7, scope: !7367)
!7369 = !DILocation(line: 320, column: 7, scope: !7352)
!7370 = !DILocation(line: 321, column: 5, scope: !7367)
!7371 = !DILocation(line: 322, column: 10, scope: !7352)
!7372 = !DILocation(line: 322, column: 15, scope: !7352)
!7373 = !DILocation(line: 322, column: 3, scope: !7352)
!7374 = !DILocation(line: 323, column: 1, scope: !7352)
!7375 = distinct !DISubprogram(name: "gimple_phi_result", scope: !587, file: !587, line: 3071, type: !5962, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7376 = !DILocalVariable(name: "gs", arg: 1, scope: !7375, file: !587, line: 3071, type: !3843)
!7377 = !DILocation(line: 3071, column: 33, scope: !7375)
!7378 = !DILocation(line: 3074, column: 10, scope: !7375)
!7379 = !DILocation(line: 3074, column: 14, scope: !7375)
!7380 = !DILocation(line: 3074, column: 25, scope: !7375)
!7381 = !DILocation(line: 3074, column: 3, scope: !7375)
!7382 = distinct !DISubprogram(name: "symbol_marked_for_renaming", scope: !3, file: !3, line: 565, type: !4022, scopeLine: 566, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7383 = !DILocalVariable(name: "sym", arg: 1, scope: !7382, file: !3, line: 565, type: !888)
!7384 = !DILocation(line: 565, column: 34, scope: !7382)
!7385 = !DILocation(line: 567, column: 24, scope: !7382)
!7386 = !DILocation(line: 567, column: 47, scope: !7382)
!7387 = !DILocation(line: 567, column: 10, scope: !7382)
!7388 = !DILocation(line: 567, column: 3, scope: !7382)
!7389 = distinct !DISubprogram(name: "op_iter_init_def", scope: !2511, file: !2511, line: 780, type: !7390, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7390 = !DISubroutineType(types: !7391)
!7391 = !{!2348, !5588, !863, !984}
!7392 = !DILocalVariable(name: "ptr", arg: 1, scope: !7389, file: !2511, line: 780, type: !5588)
!7393 = !DILocation(line: 780, column: 32, scope: !7389)
!7394 = !DILocalVariable(name: "stmt", arg: 2, scope: !7389, file: !2511, line: 780, type: !863)
!7395 = !DILocation(line: 780, column: 44, scope: !7389)
!7396 = !DILocalVariable(name: "flags", arg: 3, scope: !7389, file: !2511, line: 780, type: !984)
!7397 = !DILocation(line: 780, column: 54, scope: !7389)
!7398 = !DILocation(line: 782, column: 3, scope: !7389)
!7399 = !DILocation(line: 784, column: 17, scope: !7389)
!7400 = !DILocation(line: 784, column: 22, scope: !7389)
!7401 = !DILocation(line: 784, column: 28, scope: !7389)
!7402 = !DILocation(line: 784, column: 3, scope: !7389)
!7403 = !DILocation(line: 785, column: 3, scope: !7389)
!7404 = !DILocation(line: 785, column: 8, scope: !7389)
!7405 = !DILocation(line: 785, column: 18, scope: !7389)
!7406 = !DILocation(line: 786, column: 28, scope: !7389)
!7407 = !DILocation(line: 786, column: 10, scope: !7389)
!7408 = !DILocation(line: 786, column: 3, scope: !7389)
!7409 = distinct !DISubprogram(name: "op_iter_next_def", scope: !2511, file: !2511, line: 681, type: !7410, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7410 = !DISubroutineType(types: !7411)
!7411 = !{!2348, !5588}
!7412 = !DILocalVariable(name: "ptr", arg: 1, scope: !7409, file: !2511, line: 681, type: !5588)
!7413 = !DILocation(line: 681, column: 32, scope: !7409)
!7414 = !DILocalVariable(name: "def_p", scope: !7409, file: !2511, line: 683, type: !2348)
!7415 = !DILocation(line: 683, column: 17, scope: !7409)
!7416 = !DILocation(line: 687, column: 7, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7409, file: !2511, line: 687, column: 7)
!7418 = !DILocation(line: 687, column: 12, scope: !7417)
!7419 = !DILocation(line: 687, column: 7, scope: !7409)
!7420 = !DILocation(line: 689, column: 15, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7417, file: !2511, line: 688, column: 5)
!7422 = !DILocation(line: 689, column: 13, scope: !7421)
!7423 = !DILocation(line: 690, column: 19, scope: !7421)
!7424 = !DILocation(line: 690, column: 24, scope: !7421)
!7425 = !DILocation(line: 690, column: 30, scope: !7421)
!7426 = !DILocation(line: 690, column: 7, scope: !7421)
!7427 = !DILocation(line: 690, column: 12, scope: !7421)
!7428 = !DILocation(line: 690, column: 17, scope: !7421)
!7429 = !DILocation(line: 691, column: 14, scope: !7421)
!7430 = !DILocation(line: 691, column: 7, scope: !7421)
!7431 = !DILocation(line: 693, column: 3, scope: !7409)
!7432 = !DILocation(line: 693, column: 8, scope: !7409)
!7433 = !DILocation(line: 693, column: 13, scope: !7409)
!7434 = !DILocation(line: 694, column: 3, scope: !7409)
!7435 = !DILocation(line: 695, column: 1, scope: !7409)
!7436 = distinct !DISubprogram(name: "rewrite_enter_block", scope: !3, file: !3, line: 1383, type: !4924, scopeLine: 1385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7437 = !DILocalVariable(name: "walk_data", arg: 1, scope: !7436, file: !3, line: 1383, type: !4921)
!7438 = !DILocation(line: 1383, column: 44, scope: !7436)
!7439 = !DILocalVariable(name: "bb", arg: 2, scope: !7436, file: !3, line: 1384, type: !825)
!7440 = !DILocation(line: 1384, column: 20, scope: !7436)
!7441 = !DILocalVariable(name: "phi", scope: !7436, file: !3, line: 1386, type: !863)
!7442 = !DILocation(line: 1386, column: 10, scope: !7436)
!7443 = !DILocalVariable(name: "gsi", scope: !7436, file: !3, line: 1387, type: !4569)
!7444 = !DILocation(line: 1387, column: 24, scope: !7436)
!7445 = !DILocation(line: 1389, column: 7, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 1389, column: 7)
!7447 = !DILocation(line: 1389, column: 17, scope: !7446)
!7448 = !DILocation(line: 1389, column: 21, scope: !7446)
!7449 = !DILocation(line: 1389, column: 32, scope: !7446)
!7450 = !DILocation(line: 1389, column: 7, scope: !7436)
!7451 = !DILocation(line: 1390, column: 14, scope: !7446)
!7452 = !DILocation(line: 1390, column: 55, scope: !7446)
!7453 = !DILocation(line: 1390, column: 59, scope: !7446)
!7454 = !DILocation(line: 1390, column: 5, scope: !7446)
!7455 = !DILocation(line: 1393, column: 3, scope: !7436)
!7456 = !DILocation(line: 1398, column: 30, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 1398, column: 3)
!7458 = !DILocation(line: 1398, column: 14, scope: !7457)
!7459 = !DILocation(line: 1398, column: 8, scope: !7457)
!7460 = !DILocation(line: 1398, column: 36, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 1398, column: 3)
!7462 = !DILocation(line: 1398, column: 35, scope: !7461)
!7463 = !DILocation(line: 1398, column: 3, scope: !7457)
!7464 = !DILocalVariable(name: "result", scope: !7465, file: !3, line: 1400, type: !888)
!7465 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 1399, column: 5)
!7466 = !DILocation(line: 1400, column: 12, scope: !7465)
!7467 = !DILocation(line: 1402, column: 13, scope: !7465)
!7468 = !DILocation(line: 1402, column: 11, scope: !7465)
!7469 = !DILocation(line: 1403, column: 35, scope: !7465)
!7470 = !DILocation(line: 1403, column: 16, scope: !7465)
!7471 = !DILocation(line: 1403, column: 14, scope: !7465)
!7472 = !DILocation(line: 1404, column: 7, scope: !7465)
!7473 = !DILocation(line: 1405, column: 25, scope: !7465)
!7474 = !DILocation(line: 1405, column: 33, scope: !7465)
!7475 = !DILocation(line: 1405, column: 7, scope: !7465)
!7476 = !DILocation(line: 1406, column: 5, scope: !7465)
!7477 = !DILocation(line: 1398, column: 53, scope: !7461)
!7478 = !DILocation(line: 1398, column: 3, scope: !7461)
!7479 = distinct !{!7479, !7463, !7480}
!7480 = !DILocation(line: 1406, column: 5, scope: !7457)
!7481 = !DILocation(line: 1411, column: 7, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7436, file: !3, line: 1411, column: 7)
!7483 = !DILocation(line: 1411, column: 7, scope: !7436)
!7484 = !DILocation(line: 1412, column: 30, scope: !7485)
!7485 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1412, column: 5)
!7486 = !DILocation(line: 1412, column: 16, scope: !7485)
!7487 = !DILocation(line: 1412, column: 10, scope: !7485)
!7488 = !DILocation(line: 1412, column: 36, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7485, file: !3, line: 1412, column: 5)
!7490 = !DILocation(line: 1412, column: 35, scope: !7489)
!7491 = !DILocation(line: 1412, column: 5, scope: !7485)
!7492 = !DILocation(line: 1413, column: 7, scope: !7489)
!7493 = !DILocation(line: 1412, column: 53, scope: !7489)
!7494 = !DILocation(line: 1412, column: 5, scope: !7489)
!7495 = distinct !{!7495, !7491, !7496}
!7496 = !DILocation(line: 1413, column: 24, scope: !7485)
!7497 = !DILocation(line: 1419, column: 30, scope: !7436)
!7498 = !DILocation(line: 1419, column: 3, scope: !7436)
!7499 = !DILocation(line: 1420, column: 1, scope: !7436)
!7500 = distinct !DISubprogram(name: "rewrite_leave_block", scope: !3, file: !3, line: 1428, type: !4924, scopeLine: 1430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7501 = !DILocalVariable(name: "walk_data", arg: 1, scope: !7500, file: !3, line: 1428, type: !4921)
!7502 = !DILocation(line: 1428, column: 44, scope: !7500)
!7503 = !DILocalVariable(name: "bb", arg: 2, scope: !7500, file: !3, line: 1429, type: !825)
!7504 = !DILocation(line: 1429, column: 20, scope: !7500)
!7505 = !DILocation(line: 1432, column: 3, scope: !7500)
!7506 = !DILocation(line: 1432, column: 10, scope: !7500)
!7507 = !DILocation(line: 1432, column: 46, scope: !7500)
!7508 = !DILocalVariable(name: "tmp", scope: !7509, file: !3, line: 1434, type: !888)
!7509 = distinct !DILexicalBlock(scope: !7500, file: !3, line: 1433, column: 5)
!7510 = !DILocation(line: 1434, column: 12, scope: !7509)
!7511 = !DILocation(line: 1434, column: 18, scope: !7509)
!7512 = !DILocalVariable(name: "saved_def", scope: !7509, file: !3, line: 1435, type: !888)
!7513 = !DILocation(line: 1435, column: 12, scope: !7509)
!7514 = !DILocalVariable(name: "var", scope: !7509, file: !3, line: 1435, type: !888)
!7515 = !DILocation(line: 1435, column: 23, scope: !7509)
!7516 = !DILocation(line: 1437, column: 11, scope: !7517)
!7517 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 1437, column: 11)
!7518 = !DILocation(line: 1437, column: 15, scope: !7517)
!7519 = !DILocation(line: 1437, column: 11, scope: !7509)
!7520 = !DILocation(line: 1438, column: 2, scope: !7517)
!7521 = !DILocation(line: 1440, column: 11, scope: !7522)
!7522 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 1440, column: 11)
!7523 = !DILocation(line: 1440, column: 27, scope: !7522)
!7524 = !DILocation(line: 1440, column: 11, scope: !7509)
!7525 = !DILocation(line: 1449, column: 16, scope: !7526)
!7526 = distinct !DILexicalBlock(scope: !7522, file: !3, line: 1441, column: 2)
!7527 = !DILocation(line: 1449, column: 14, scope: !7526)
!7528 = !DILocation(line: 1450, column: 10, scope: !7526)
!7529 = !DILocation(line: 1450, column: 8, scope: !7526)
!7530 = !DILocation(line: 1451, column: 24, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7526, file: !3, line: 1451, column: 8)
!7532 = !DILocation(line: 1451, column: 9, scope: !7531)
!7533 = !DILocation(line: 1451, column: 8, scope: !7526)
!7534 = !DILocation(line: 1452, column: 12, scope: !7531)
!7535 = !DILocation(line: 1452, column: 10, scope: !7531)
!7536 = !DILocation(line: 1452, column: 6, scope: !7531)
!7537 = !DILocation(line: 1453, column: 2, scope: !7526)
!7538 = !DILocation(line: 1459, column: 14, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7522, file: !3, line: 1455, column: 2)
!7540 = !DILocation(line: 1460, column: 10, scope: !7539)
!7541 = !DILocation(line: 1460, column: 8, scope: !7539)
!7542 = !DILocation(line: 1463, column: 24, scope: !7509)
!7543 = !DILocation(line: 1463, column: 29, scope: !7509)
!7544 = !DILocation(line: 1463, column: 7, scope: !7509)
!7545 = distinct !{!7545, !7505, !7546}
!7546 = !DILocation(line: 1464, column: 5, scope: !7500)
!7547 = !DILocation(line: 1465, column: 1, scope: !7500)
!7548 = distinct !DISubprogram(name: "rewrite_update_enter_block", scope: !3, file: !3, line: 2069, type: !4924, scopeLine: 2071, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7549 = !DILocalVariable(name: "walk_data", arg: 1, scope: !7548, file: !3, line: 2069, type: !4921)
!7550 = !DILocation(line: 2069, column: 51, scope: !7548)
!7551 = !DILocalVariable(name: "bb", arg: 2, scope: !7548, file: !3, line: 2070, type: !825)
!7552 = !DILocation(line: 2070, column: 27, scope: !7548)
!7553 = !DILocalVariable(name: "e", scope: !7548, file: !3, line: 2072, type: !843)
!7554 = !DILocation(line: 2072, column: 8, scope: !7548)
!7555 = !DILocalVariable(name: "ei", scope: !7548, file: !3, line: 2073, type: !2601)
!7556 = !DILocation(line: 2073, column: 17, scope: !7548)
!7557 = !DILocalVariable(name: "is_abnormal_phi", scope: !7548, file: !3, line: 2074, type: !1007)
!7558 = !DILocation(line: 2074, column: 8, scope: !7548)
!7559 = !DILocalVariable(name: "gsi", scope: !7548, file: !3, line: 2075, type: !4569)
!7560 = !DILocation(line: 2075, column: 24, scope: !7548)
!7561 = !DILocation(line: 2077, column: 7, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2077, column: 7)
!7563 = !DILocation(line: 2077, column: 17, scope: !7562)
!7564 = !DILocation(line: 2077, column: 21, scope: !7562)
!7565 = !DILocation(line: 2077, column: 32, scope: !7562)
!7566 = !DILocation(line: 2077, column: 7, scope: !7548)
!7567 = !DILocation(line: 2078, column: 14, scope: !7562)
!7568 = !DILocation(line: 2079, column: 7, scope: !7562)
!7569 = !DILocation(line: 2079, column: 11, scope: !7562)
!7570 = !DILocation(line: 2078, column: 5, scope: !7562)
!7571 = !DILocation(line: 2082, column: 3, scope: !7548)
!7572 = !DILocation(line: 2084, column: 22, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2084, column: 7)
!7574 = !DILocation(line: 2084, column: 40, scope: !7573)
!7575 = !DILocation(line: 2084, column: 44, scope: !7573)
!7576 = !DILocation(line: 2084, column: 8, scope: !7573)
!7577 = !DILocation(line: 2084, column: 7, scope: !7548)
!7578 = !DILocation(line: 2085, column: 5, scope: !7573)
!7579 = !DILocation(line: 2089, column: 19, scope: !7548)
!7580 = !DILocation(line: 2090, column: 3, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2090, column: 3)
!7582 = !DILocation(line: 2090, column: 3, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 2090, column: 3)
!7584 = !DILocation(line: 2091, column: 9, scope: !7585)
!7585 = distinct !DILexicalBlock(scope: !7583, file: !3, line: 2091, column: 9)
!7586 = !DILocation(line: 2091, column: 12, scope: !7585)
!7587 = !DILocation(line: 2091, column: 18, scope: !7585)
!7588 = !DILocation(line: 2091, column: 9, scope: !7583)
!7589 = !DILocation(line: 2093, column: 18, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7585, file: !3, line: 2092, column: 7)
!7591 = !DILocation(line: 2094, column: 2, scope: !7590)
!7592 = !DILocation(line: 2091, column: 20, scope: !7585)
!7593 = distinct !{!7593, !7580, !7594}
!7594 = !DILocation(line: 2095, column: 7, scope: !7581)
!7595 = !DILocation(line: 2102, column: 30, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2102, column: 3)
!7597 = !DILocation(line: 2102, column: 14, scope: !7596)
!7598 = !DILocation(line: 2102, column: 8, scope: !7596)
!7599 = !DILocation(line: 2102, column: 36, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 2102, column: 3)
!7601 = !DILocation(line: 2102, column: 35, scope: !7600)
!7602 = !DILocation(line: 2102, column: 3, scope: !7596)
!7603 = !DILocalVariable(name: "lhs", scope: !7604, file: !3, line: 2104, type: !888)
!7604 = distinct !DILexicalBlock(scope: !7600, file: !3, line: 2103, column: 5)
!7605 = !DILocation(line: 2104, column: 12, scope: !7604)
!7606 = !DILocalVariable(name: "lhs_sym", scope: !7604, file: !3, line: 2104, type: !888)
!7607 = !DILocation(line: 2104, column: 17, scope: !7604)
!7608 = !DILocalVariable(name: "phi", scope: !7604, file: !3, line: 2105, type: !863)
!7609 = !DILocation(line: 2105, column: 14, scope: !7604)
!7610 = !DILocation(line: 2105, column: 20, scope: !7604)
!7611 = !DILocation(line: 2107, column: 29, scope: !7612)
!7612 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 2107, column: 11)
!7613 = !DILocation(line: 2107, column: 12, scope: !7612)
!7614 = !DILocation(line: 2107, column: 11, scope: !7604)
!7615 = !DILocation(line: 2108, column: 2, scope: !7612)
!7616 = !DILocation(line: 2110, column: 32, scope: !7604)
!7617 = !DILocation(line: 2110, column: 13, scope: !7604)
!7618 = !DILocation(line: 2110, column: 11, scope: !7604)
!7619 = !DILocation(line: 2111, column: 17, scope: !7604)
!7620 = !DILocation(line: 2111, column: 15, scope: !7604)
!7621 = !DILocation(line: 2113, column: 39, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 2113, column: 11)
!7623 = !DILocation(line: 2113, column: 11, scope: !7622)
!7624 = !DILocation(line: 2113, column: 11, scope: !7604)
!7625 = !DILocation(line: 2114, column: 30, scope: !7622)
!7626 = !DILocation(line: 2114, column: 35, scope: !7622)
!7627 = !DILocation(line: 2114, column: 2, scope: !7622)
!7628 = !DILocation(line: 2120, column: 21, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7630, file: !3, line: 2120, column: 8)
!7630 = distinct !DILexicalBlock(scope: !7622, file: !3, line: 2116, column: 2)
!7631 = !DILocation(line: 2120, column: 8, scope: !7629)
!7632 = !DILocation(line: 2120, column: 8, scope: !7630)
!7633 = !DILocation(line: 2121, column: 31, scope: !7629)
!7634 = !DILocation(line: 2121, column: 55, scope: !7629)
!7635 = !DILocation(line: 2121, column: 36, scope: !7629)
!7636 = !DILocation(line: 2121, column: 6, scope: !7629)
!7637 = !DILocation(line: 2125, column: 21, scope: !7638)
!7638 = distinct !DILexicalBlock(scope: !7630, file: !3, line: 2125, column: 8)
!7639 = !DILocation(line: 2125, column: 8, scope: !7638)
!7640 = !DILocation(line: 2125, column: 8, scope: !7630)
!7641 = !DILocation(line: 2126, column: 34, scope: !7638)
!7642 = !DILocation(line: 2126, column: 39, scope: !7638)
!7643 = !DILocation(line: 2126, column: 6, scope: !7638)
!7644 = !DILocation(line: 2129, column: 11, scope: !7645)
!7645 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 2129, column: 11)
!7646 = !DILocation(line: 2129, column: 11, scope: !7604)
!7647 = !DILocation(line: 2130, column: 2, scope: !7645)
!7648 = !DILocation(line: 2130, column: 40, scope: !7645)
!7649 = !DILocation(line: 2131, column: 5, scope: !7604)
!7650 = !DILocation(line: 2102, column: 53, scope: !7600)
!7651 = !DILocation(line: 2102, column: 3, scope: !7600)
!7652 = distinct !{!7652, !7602, !7653}
!7653 = !DILocation(line: 2131, column: 5, scope: !7596)
!7654 = !DILocation(line: 2134, column: 7, scope: !7655)
!7655 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2134, column: 7)
!7656 = !DILocation(line: 2134, column: 7, scope: !7548)
!7657 = !DILocation(line: 2136, column: 7, scope: !7658)
!7658 = distinct !DILexicalBlock(scope: !7655, file: !3, line: 2135, column: 5)
!7659 = !DILocation(line: 2137, column: 32, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 2137, column: 7)
!7661 = !DILocation(line: 2137, column: 18, scope: !7660)
!7662 = !DILocation(line: 2137, column: 12, scope: !7660)
!7663 = !DILocation(line: 2137, column: 38, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 2137, column: 7)
!7665 = !DILocation(line: 2137, column: 37, scope: !7664)
!7666 = !DILocation(line: 2137, column: 7, scope: !7660)
!7667 = !DILocation(line: 2138, column: 30, scope: !7664)
!7668 = !DILocation(line: 2138, column: 9, scope: !7664)
!7669 = !DILocation(line: 2137, column: 55, scope: !7664)
!7670 = !DILocation(line: 2137, column: 7, scope: !7664)
!7671 = distinct !{!7671, !7666, !7672}
!7672 = !DILocation(line: 2138, column: 49, scope: !7660)
!7673 = !DILocation(line: 2139, column: 5, scope: !7658)
!7674 = !DILocation(line: 2142, column: 33, scope: !7548)
!7675 = !DILocation(line: 2142, column: 3, scope: !7548)
!7676 = !DILocation(line: 2143, column: 1, scope: !7548)
!7677 = distinct !DISubprogram(name: "rewrite_update_leave_block", scope: !3, file: !3, line: 2152, type: !4924, scopeLine: 2154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7678 = !DILocalVariable(name: "walk_data", arg: 1, scope: !7677, file: !3, line: 2152, type: !4921)
!7679 = !DILocation(line: 2152, column: 51, scope: !7677)
!7680 = !DILocalVariable(name: "bb", arg: 2, scope: !7677, file: !3, line: 2153, type: !825)
!7681 = !DILocation(line: 2153, column: 20, scope: !7677)
!7682 = !DILocation(line: 2155, column: 3, scope: !7677)
!7683 = !DILocation(line: 2155, column: 10, scope: !7677)
!7684 = !DILocation(line: 2155, column: 46, scope: !7677)
!7685 = !DILocalVariable(name: "var", scope: !7686, file: !3, line: 2157, type: !888)
!7686 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 2156, column: 5)
!7687 = !DILocation(line: 2157, column: 12, scope: !7686)
!7688 = !DILocation(line: 2157, column: 18, scope: !7686)
!7689 = !DILocalVariable(name: "saved_def", scope: !7686, file: !3, line: 2158, type: !888)
!7690 = !DILocation(line: 2158, column: 12, scope: !7686)
!7691 = !DILocation(line: 2162, column: 11, scope: !7692)
!7692 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 2162, column: 11)
!7693 = !DILocation(line: 2162, column: 15, scope: !7692)
!7694 = !DILocation(line: 2162, column: 11, scope: !7686)
!7695 = !DILocation(line: 2163, column: 2, scope: !7692)
!7696 = !DILocation(line: 2165, column: 19, scope: !7686)
!7697 = !DILocation(line: 2165, column: 17, scope: !7686)
!7698 = !DILocation(line: 2166, column: 24, scope: !7686)
!7699 = !DILocation(line: 2166, column: 29, scope: !7686)
!7700 = !DILocation(line: 2166, column: 7, scope: !7686)
!7701 = distinct !{!7701, !7682, !7702}
!7702 = !DILocation(line: 2167, column: 5, scope: !7677)
!7703 = !DILocation(line: 2168, column: 1, scope: !7677)
!7704 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !7705, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7705 = !DISubroutineType(types: !7706)
!7706 = !{!2349, !984}
!7707 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7704, file: !135, line: 184, type: !984)
!7708 = !DILocation(line: 184, column: 1, scope: !7704)
!7709 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !7710, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7710 = !DISubroutineType(types: !7711)
!7711 = !{null, !7712}
!7712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2349, size: 64)
!7713 = !DILocalVariable(name: "vec_", arg: 1, scope: !7709, file: !135, line: 184, type: !7712)
!7714 = !DILocation(line: 184, column: 1, scope: !7709)
!7715 = !DILocation(line: 184, column: 1, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !7709, file: !135, line: 184, column: 1)
!7717 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !135, file: !135, line: 184, type: !7718, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7718 = !DISubroutineType(types: !7719)
!7719 = !{!1508, !7712, !888}
!7720 = !DILocalVariable(name: "vec_", arg: 1, scope: !7717, file: !135, line: 184, type: !7712)
!7721 = !DILocation(line: 184, column: 1, scope: !7717)
!7722 = !DILocalVariable(name: "obj_", arg: 2, scope: !7717, file: !135, line: 184, type: !888)
!7723 = distinct !DISubprogram(name: "register_new_def", scope: !3, file: !3, line: 1203, type: !2530, scopeLine: 1204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7724 = !DILocalVariable(name: "def", arg: 1, scope: !7723, file: !3, line: 1203, type: !888)
!7725 = !DILocation(line: 1203, column: 24, scope: !7723)
!7726 = !DILocalVariable(name: "sym", arg: 2, scope: !7723, file: !3, line: 1203, type: !888)
!7727 = !DILocation(line: 1203, column: 34, scope: !7723)
!7728 = !DILocalVariable(name: "currdef", scope: !7723, file: !3, line: 1205, type: !888)
!7729 = !DILocation(line: 1205, column: 8, scope: !7723)
!7730 = !DILocation(line: 1215, column: 22, scope: !7731)
!7731 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 1215, column: 7)
!7732 = !DILocation(line: 1215, column: 7, scope: !7731)
!7733 = !DILocation(line: 1215, column: 27, scope: !7731)
!7734 = !DILocation(line: 1215, column: 7, scope: !7723)
!7735 = !DILocation(line: 1217, column: 24, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 1216, column: 5)
!7737 = !DILocation(line: 1217, column: 29, scope: !7736)
!7738 = !DILocation(line: 1217, column: 7, scope: !7736)
!7739 = !DILocation(line: 1218, column: 7, scope: !7736)
!7740 = !DILocation(line: 1221, column: 30, scope: !7723)
!7741 = !DILocation(line: 1221, column: 13, scope: !7723)
!7742 = !DILocation(line: 1221, column: 11, scope: !7723)
!7743 = !DILocation(line: 1227, column: 7, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7723, file: !3, line: 1227, column: 7)
!7745 = !DILocation(line: 1227, column: 15, scope: !7744)
!7746 = !DILocation(line: 1227, column: 34, scope: !7744)
!7747 = !DILocation(line: 1227, column: 19, scope: !7744)
!7748 = !DILocation(line: 1227, column: 7, scope: !7723)
!7749 = !DILocation(line: 1228, column: 5, scope: !7744)
!7750 = !DILocation(line: 1236, column: 3, scope: !7723)
!7751 = !DILocation(line: 1239, column: 20, scope: !7723)
!7752 = !DILocation(line: 1239, column: 25, scope: !7723)
!7753 = !DILocation(line: 1239, column: 3, scope: !7723)
!7754 = !DILocation(line: 1240, column: 1, scope: !7723)
!7755 = distinct !DISubprogram(name: "rewrite_stmt", scope: !3, file: !3, line: 1297, type: !7756, scopeLine: 1298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7756 = !DISubroutineType(types: !7757)
!7757 = !{null, !4569}
!7758 = !DILocalVariable(name: "si", arg: 1, scope: !7755, file: !3, line: 1297, type: !4569)
!7759 = !DILocation(line: 1297, column: 36, scope: !7755)
!7760 = !DILocalVariable(name: "use_p", scope: !7755, file: !3, line: 1299, type: !2297)
!7761 = !DILocation(line: 1299, column: 17, scope: !7755)
!7762 = !DILocalVariable(name: "def_p", scope: !7755, file: !3, line: 1300, type: !2348)
!7763 = !DILocation(line: 1300, column: 17, scope: !7755)
!7764 = !DILocalVariable(name: "iter", scope: !7755, file: !3, line: 1301, type: !4643)
!7765 = !DILocation(line: 1301, column: 15, scope: !7755)
!7766 = !DILocalVariable(name: "stmt", scope: !7755, file: !3, line: 1302, type: !863)
!7767 = !DILocation(line: 1302, column: 10, scope: !7755)
!7768 = !DILocation(line: 1302, column: 17, scope: !7755)
!7769 = !DILocation(line: 1306, column: 3, scope: !7755)
!7770 = !DILocation(line: 1307, column: 24, scope: !7771)
!7771 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1307, column: 7)
!7772 = !DILocation(line: 1307, column: 8, scope: !7771)
!7773 = !DILocation(line: 1307, column: 30, scope: !7771)
!7774 = !DILocation(line: 1307, column: 51, scope: !7771)
!7775 = !DILocation(line: 1307, column: 34, scope: !7771)
!7776 = !DILocation(line: 1307, column: 7, scope: !7755)
!7777 = !DILocation(line: 1308, column: 5, scope: !7771)
!7778 = !DILocation(line: 1310, column: 7, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1310, column: 7)
!7780 = !DILocation(line: 1310, column: 17, scope: !7779)
!7781 = !DILocation(line: 1310, column: 21, scope: !7779)
!7782 = !DILocation(line: 1310, column: 32, scope: !7779)
!7783 = !DILocation(line: 1310, column: 7, scope: !7755)
!7784 = !DILocation(line: 1312, column: 16, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7779, file: !3, line: 1311, column: 5)
!7786 = !DILocation(line: 1312, column: 7, scope: !7785)
!7787 = !DILocation(line: 1313, column: 26, scope: !7785)
!7788 = !DILocation(line: 1313, column: 37, scope: !7785)
!7789 = !DILocation(line: 1313, column: 7, scope: !7785)
!7790 = !DILocation(line: 1314, column: 16, scope: !7785)
!7791 = !DILocation(line: 1314, column: 7, scope: !7785)
!7792 = !DILocation(line: 1315, column: 5, scope: !7785)
!7793 = !DILocation(line: 1318, column: 23, scope: !7794)
!7794 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1318, column: 7)
!7795 = !DILocation(line: 1318, column: 7, scope: !7794)
!7796 = !DILocation(line: 1318, column: 7, scope: !7755)
!7797 = !DILocation(line: 1319, column: 5, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7794, file: !3, line: 1319, column: 5)
!7799 = !DILocation(line: 1319, column: 5, scope: !7800)
!7800 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 1319, column: 5)
!7801 = !DILocalVariable(name: "var", scope: !7802, file: !3, line: 1321, type: !888)
!7802 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 1320, column: 7)
!7803 = !DILocation(line: 1321, column: 7, scope: !7802)
!7804 = !DILocation(line: 1321, column: 13, scope: !7802)
!7805 = !DILocation(line: 1322, column: 2, scope: !7802)
!7806 = !DILocation(line: 1323, column: 2, scope: !7802)
!7807 = !DILocation(line: 1324, column: 7, scope: !7802)
!7808 = distinct !{!7808, !7797, !7809}
!7809 = !DILocation(line: 1324, column: 7, scope: !7798)
!7810 = !DILocation(line: 1327, column: 24, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1327, column: 7)
!7812 = !DILocation(line: 1327, column: 7, scope: !7811)
!7813 = !DILocation(line: 1327, column: 7, scope: !7755)
!7814 = !DILocation(line: 1328, column: 5, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7811, file: !3, line: 1328, column: 5)
!7816 = !DILocation(line: 1328, column: 5, scope: !7817)
!7817 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 1328, column: 5)
!7818 = !DILocalVariable(name: "var", scope: !7819, file: !3, line: 1330, type: !888)
!7819 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 1329, column: 7)
!7820 = !DILocation(line: 1330, column: 7, scope: !7819)
!7821 = !DILocation(line: 1330, column: 13, scope: !7819)
!7822 = !DILocalVariable(name: "name", scope: !7819, file: !3, line: 1331, type: !888)
!7823 = !DILocation(line: 1331, column: 7, scope: !7819)
!7824 = !DILocation(line: 1331, column: 29, scope: !7819)
!7825 = !DILocation(line: 1331, column: 34, scope: !7819)
!7826 = !DILocation(line: 1331, column: 14, scope: !7819)
!7827 = !DILocalVariable(name: "tracked_var", scope: !7819, file: !3, line: 1332, type: !888)
!7828 = !DILocation(line: 1332, column: 7, scope: !7819)
!7829 = !DILocation(line: 1333, column: 2, scope: !7819)
!7830 = !DILocation(line: 1334, column: 2, scope: !7819)
!7831 = !DILocation(line: 1335, column: 20, scope: !7819)
!7832 = !DILocation(line: 1335, column: 42, scope: !7819)
!7833 = !DILocation(line: 1335, column: 2, scope: !7819)
!7834 = !DILocation(line: 1337, column: 39, scope: !7819)
!7835 = !DILocation(line: 1337, column: 16, scope: !7819)
!7836 = !DILocation(line: 1337, column: 14, scope: !7819)
!7837 = !DILocation(line: 1338, column: 6, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 1338, column: 6)
!7839 = !DILocation(line: 1338, column: 6, scope: !7819)
!7840 = !DILocalVariable(name: "note", scope: !7841, file: !3, line: 1340, type: !863)
!7841 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 1339, column: 4)
!7842 = !DILocation(line: 1340, column: 13, scope: !7841)
!7843 = !DILocation(line: 1340, column: 20, scope: !7841)
!7844 = !DILocation(line: 1341, column: 29, scope: !7841)
!7845 = !DILocation(line: 1341, column: 6, scope: !7841)
!7846 = !DILocation(line: 1342, column: 4, scope: !7841)
!7847 = !DILocation(line: 1343, column: 7, scope: !7819)
!7848 = distinct !{!7848, !7814, !7849}
!7849 = !DILocation(line: 1343, column: 7, scope: !7815)
!7850 = !DILocation(line: 1344, column: 1, scope: !7755)
!7851 = distinct !DISubprogram(name: "rewrite_add_phi_arguments", scope: !3, file: !3, line: 1353, type: !6594, scopeLine: 1354, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7852 = !DILocalVariable(name: "bb", arg: 1, scope: !7851, file: !3, line: 1353, type: !825)
!7853 = !DILocation(line: 1353, column: 40, scope: !7851)
!7854 = !DILocalVariable(name: "e", scope: !7851, file: !3, line: 1355, type: !843)
!7855 = !DILocation(line: 1355, column: 8, scope: !7851)
!7856 = !DILocalVariable(name: "ei", scope: !7851, file: !3, line: 1356, type: !2601)
!7857 = !DILocation(line: 1356, column: 17, scope: !7851)
!7858 = !DILocation(line: 1358, column: 3, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7851, file: !3, line: 1358, column: 3)
!7860 = !DILocation(line: 1358, column: 3, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7859, file: !3, line: 1358, column: 3)
!7862 = !DILocalVariable(name: "phi", scope: !7863, file: !3, line: 1360, type: !863)
!7863 = distinct !DILexicalBlock(scope: !7861, file: !3, line: 1359, column: 5)
!7864 = !DILocation(line: 1360, column: 14, scope: !7863)
!7865 = !DILocalVariable(name: "gsi", scope: !7863, file: !3, line: 1361, type: !4569)
!7866 = !DILocation(line: 1361, column: 28, scope: !7863)
!7867 = !DILocation(line: 1363, column: 34, scope: !7868)
!7868 = distinct !DILexicalBlock(scope: !7863, file: !3, line: 1363, column: 7)
!7869 = !DILocation(line: 1363, column: 37, scope: !7868)
!7870 = !DILocation(line: 1363, column: 18, scope: !7868)
!7871 = !DILocation(line: 1363, column: 12, scope: !7868)
!7872 = !DILocation(line: 1363, column: 45, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7868, file: !3, line: 1363, column: 7)
!7874 = !DILocation(line: 1363, column: 44, scope: !7873)
!7875 = !DILocation(line: 1363, column: 7, scope: !7868)
!7876 = !DILocalVariable(name: "currdef", scope: !7877, file: !3, line: 1366, type: !888)
!7877 = distinct !DILexicalBlock(scope: !7873, file: !3, line: 1365, column: 2)
!7878 = !DILocation(line: 1366, column: 9, scope: !7877)
!7879 = !DILocalVariable(name: "stmt", scope: !7877, file: !3, line: 1367, type: !863)
!7880 = !DILocation(line: 1367, column: 11, scope: !7877)
!7881 = !DILocation(line: 1369, column: 10, scope: !7877)
!7882 = !DILocation(line: 1369, column: 8, scope: !7877)
!7883 = !DILocation(line: 1370, column: 32, scope: !7877)
!7884 = !DILocation(line: 1370, column: 14, scope: !7877)
!7885 = !DILocation(line: 1370, column: 12, scope: !7877)
!7886 = !DILocation(line: 1371, column: 11, scope: !7877)
!7887 = !DILocation(line: 1371, column: 9, scope: !7877)
!7888 = !DILocation(line: 1372, column: 17, scope: !7877)
!7889 = !DILocation(line: 1372, column: 22, scope: !7877)
!7890 = !DILocation(line: 1372, column: 31, scope: !7877)
!7891 = !DILocation(line: 1372, column: 51, scope: !7877)
!7892 = !DILocation(line: 1372, column: 34, scope: !7877)
!7893 = !DILocation(line: 1372, column: 4, scope: !7877)
!7894 = !DILocation(line: 1373, column: 2, scope: !7877)
!7895 = !DILocation(line: 1364, column: 5, scope: !7873)
!7896 = !DILocation(line: 1363, column: 7, scope: !7873)
!7897 = distinct !{!7897, !7875, !7898}
!7898 = !DILocation(line: 1373, column: 2, scope: !7868)
!7899 = !DILocation(line: 1374, column: 5, scope: !7863)
!7900 = distinct !{!7900, !7858, !7901}
!7901 = !DILocation(line: 1374, column: 5, scope: !7859)
!7902 = !DILocation(line: 1375, column: 1, scope: !7851)
!7903 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !135, file: !135, line: 184, type: !7904, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7904 = !DISubroutineType(types: !7905)
!7905 = !{!984, !7712, !984}
!7906 = !DILocalVariable(name: "vec_", arg: 1, scope: !7903, file: !135, line: 184, type: !7712)
!7907 = !DILocation(line: 184, column: 1, scope: !7903)
!7908 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7903, file: !135, line: 184, type: !984)
!7909 = !DILocalVariable(name: "extend", scope: !7903, file: !135, line: 184, type: !984)
!7910 = !DILocation(line: 184, column: 1, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7903, file: !135, line: 184, column: 1)
!7912 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !7913, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7913 = !DISubroutineType(types: !7914)
!7914 = !{!1508, !7915, !888}
!7915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1461, size: 64)
!7916 = !DILocalVariable(name: "vec_", arg: 1, scope: !7912, file: !135, line: 182, type: !7915)
!7917 = !DILocation(line: 182, column: 1, scope: !7912)
!7918 = !DILocalVariable(name: "obj_", arg: 2, scope: !7912, file: !135, line: 182, type: !888)
!7919 = !DILocalVariable(name: "slot_", scope: !7912, file: !135, line: 182, type: !1508)
!7920 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !7921, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7921 = !DISubroutineType(types: !7922)
!7922 = !{!984, !7915, !984}
!7923 = !DILocalVariable(name: "vec_", arg: 1, scope: !7920, file: !135, line: 182, type: !7915)
!7924 = !DILocation(line: 182, column: 1, scope: !7920)
!7925 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7920, file: !135, line: 182, type: !984)
!7926 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !2511, file: !2511, line: 233, type: !7927, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7927 = !DISubroutineType(types: !7928)
!7928 = !{null, !2297, !888}
!7929 = !DILocalVariable(name: "use", arg: 1, scope: !7926, file: !2511, line: 233, type: !2297)
!7930 = !DILocation(line: 233, column: 37, scope: !7926)
!7931 = !DILocalVariable(name: "val", arg: 2, scope: !7926, file: !2511, line: 233, type: !888)
!7932 = !DILocation(line: 233, column: 47, scope: !7926)
!7933 = !DILocation(line: 235, column: 19, scope: !7926)
!7934 = !DILocation(line: 235, column: 3, scope: !7926)
!7935 = !DILocation(line: 236, column: 17, scope: !7926)
!7936 = !DILocation(line: 236, column: 5, scope: !7926)
!7937 = !DILocation(line: 236, column: 10, scope: !7926)
!7938 = !DILocation(line: 236, column: 15, scope: !7926)
!7939 = !DILocation(line: 237, column: 17, scope: !7926)
!7940 = !DILocation(line: 237, column: 22, scope: !7926)
!7941 = !DILocation(line: 237, column: 3, scope: !7926)
!7942 = !DILocation(line: 238, column: 1, scope: !7926)
!7943 = distinct !DISubprogram(name: "get_reaching_def", scope: !3, file: !3, line: 1270, type: !2431, scopeLine: 1271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7944 = !DILocalVariable(name: "var", arg: 1, scope: !7943, file: !3, line: 1270, type: !888)
!7945 = !DILocation(line: 1270, column: 24, scope: !7943)
!7946 = !DILocalVariable(name: "currdef", scope: !7943, file: !3, line: 1272, type: !888)
!7947 = !DILocation(line: 1272, column: 8, scope: !7943)
!7948 = !DILocation(line: 1275, column: 30, scope: !7943)
!7949 = !DILocation(line: 1275, column: 13, scope: !7943)
!7950 = !DILocation(line: 1275, column: 11, scope: !7943)
!7951 = !DILocation(line: 1279, column: 7, scope: !7952)
!7952 = distinct !DILexicalBlock(scope: !7943, file: !3, line: 1279, column: 7)
!7953 = !DILocation(line: 1279, column: 15, scope: !7952)
!7954 = !DILocation(line: 1279, column: 7, scope: !7943)
!7955 = !DILocalVariable(name: "sym", scope: !7956, file: !3, line: 1281, type: !888)
!7956 = distinct !DILexicalBlock(scope: !7952, file: !3, line: 1280, column: 5)
!7957 = !DILocation(line: 1281, column: 12, scope: !7956)
!7958 = !DILocation(line: 1281, column: 18, scope: !7956)
!7959 = !DILocation(line: 1281, column: 33, scope: !7956)
!7960 = !DILocation(line: 1281, column: 39, scope: !7956)
!7961 = !DILocation(line: 1282, column: 38, scope: !7956)
!7962 = !DILocation(line: 1282, column: 17, scope: !7956)
!7963 = !DILocation(line: 1282, column: 15, scope: !7956)
!7964 = !DILocation(line: 1283, column: 24, scope: !7956)
!7965 = !DILocation(line: 1283, column: 29, scope: !7956)
!7966 = !DILocation(line: 1283, column: 7, scope: !7956)
!7967 = !DILocation(line: 1284, column: 5, scope: !7956)
!7968 = !DILocation(line: 1288, column: 10, scope: !7943)
!7969 = !DILocation(line: 1288, column: 3, scope: !7943)
!7970 = distinct !DISubprogram(name: "make_ssa_name", scope: !2511, file: !2511, line: 1245, type: !7971, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7971 = !DISubroutineType(types: !7972)
!7972 = !{!888, !888, !863}
!7973 = !DILocalVariable(name: "var", arg: 1, scope: !7970, file: !2511, line: 1245, type: !888)
!7974 = !DILocation(line: 1245, column: 21, scope: !7970)
!7975 = !DILocalVariable(name: "stmt", arg: 2, scope: !7970, file: !2511, line: 1245, type: !863)
!7976 = !DILocation(line: 1245, column: 33, scope: !7970)
!7977 = !DILocation(line: 1247, column: 28, scope: !7970)
!7978 = !DILocation(line: 1247, column: 34, scope: !7970)
!7979 = !DILocation(line: 1247, column: 39, scope: !7970)
!7980 = !DILocation(line: 1247, column: 10, scope: !7970)
!7981 = !DILocation(line: 1247, column: 3, scope: !7970)
!7982 = distinct !DISubprogram(name: "delink_imm_use", scope: !2511, file: !2511, line: 188, type: !7983, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!7983 = !DISubroutineType(types: !7984)
!7984 = !{null, !2298}
!7985 = !DILocalVariable(name: "linknode", arg: 1, scope: !7982, file: !2511, line: 188, type: !2298)
!7986 = !DILocation(line: 188, column: 36, scope: !7982)
!7987 = !DILocation(line: 191, column: 7, scope: !7988)
!7988 = distinct !DILexicalBlock(scope: !7982, file: !2511, line: 191, column: 7)
!7989 = !DILocation(line: 191, column: 17, scope: !7988)
!7990 = !DILocation(line: 191, column: 22, scope: !7988)
!7991 = !DILocation(line: 191, column: 7, scope: !7982)
!7992 = !DILocation(line: 192, column: 5, scope: !7988)
!7993 = !DILocation(line: 194, column: 26, scope: !7982)
!7994 = !DILocation(line: 194, column: 36, scope: !7982)
!7995 = !DILocation(line: 194, column: 3, scope: !7982)
!7996 = !DILocation(line: 194, column: 13, scope: !7982)
!7997 = !DILocation(line: 194, column: 19, scope: !7982)
!7998 = !DILocation(line: 194, column: 24, scope: !7982)
!7999 = !DILocation(line: 195, column: 26, scope: !7982)
!8000 = !DILocation(line: 195, column: 36, scope: !7982)
!8001 = !DILocation(line: 195, column: 3, scope: !7982)
!8002 = !DILocation(line: 195, column: 13, scope: !7982)
!8003 = !DILocation(line: 195, column: 19, scope: !7982)
!8004 = !DILocation(line: 195, column: 24, scope: !7982)
!8005 = !DILocation(line: 196, column: 3, scope: !7982)
!8006 = !DILocation(line: 196, column: 13, scope: !7982)
!8007 = !DILocation(line: 196, column: 18, scope: !7982)
!8008 = !DILocation(line: 197, column: 3, scope: !7982)
!8009 = !DILocation(line: 197, column: 13, scope: !7982)
!8010 = !DILocation(line: 197, column: 18, scope: !7982)
!8011 = !DILocation(line: 198, column: 1, scope: !7982)
!8012 = distinct !DISubprogram(name: "link_imm_use", scope: !2511, file: !2511, line: 214, type: !8013, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8013 = !DISubroutineType(types: !8014)
!8014 = !{null, !2298, !888}
!8015 = !DILocalVariable(name: "linknode", arg: 1, scope: !8012, file: !2511, line: 214, type: !2298)
!8016 = !DILocation(line: 214, column: 34, scope: !8012)
!8017 = !DILocalVariable(name: "def", arg: 2, scope: !8012, file: !2511, line: 214, type: !888)
!8018 = !DILocation(line: 214, column: 49, scope: !8012)
!8019 = !DILocalVariable(name: "root", scope: !8012, file: !2511, line: 216, type: !2298)
!8020 = !DILocation(line: 216, column: 22, scope: !8012)
!8021 = !DILocation(line: 218, column: 8, scope: !8022)
!8022 = distinct !DILexicalBlock(scope: !8012, file: !2511, line: 218, column: 7)
!8023 = !DILocation(line: 218, column: 12, scope: !8022)
!8024 = !DILocation(line: 218, column: 15, scope: !8022)
!8025 = !DILocation(line: 218, column: 31, scope: !8022)
!8026 = !DILocation(line: 218, column: 7, scope: !8012)
!8027 = !DILocation(line: 219, column: 5, scope: !8022)
!8028 = !DILocation(line: 219, column: 15, scope: !8022)
!8029 = !DILocation(line: 219, column: 20, scope: !8022)
!8030 = !DILocation(line: 222, column: 16, scope: !8031)
!8031 = distinct !DILexicalBlock(scope: !8022, file: !2511, line: 221, column: 5)
!8032 = !DILocation(line: 222, column: 12, scope: !8031)
!8033 = !DILocation(line: 227, column: 29, scope: !8031)
!8034 = !DILocation(line: 227, column: 39, scope: !8031)
!8035 = !DILocation(line: 227, column: 7, scope: !8031)
!8036 = !DILocation(line: 229, column: 1, scope: !8012)
!8037 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !2511, file: !2511, line: 202, type: !8038, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8038 = !DISubroutineType(types: !8039)
!8039 = !{null, !2298, !2298}
!8040 = !DILocalVariable(name: "linknode", arg: 1, scope: !8037, file: !2511, line: 202, type: !2298)
!8041 = !DILocation(line: 202, column: 42, scope: !8037)
!8042 = !DILocalVariable(name: "list", arg: 2, scope: !8037, file: !2511, line: 202, type: !2298)
!8043 = !DILocation(line: 202, column: 71, scope: !8037)
!8044 = !DILocation(line: 206, column: 20, scope: !8037)
!8045 = !DILocation(line: 206, column: 3, scope: !8037)
!8046 = !DILocation(line: 206, column: 13, scope: !8037)
!8047 = !DILocation(line: 206, column: 18, scope: !8037)
!8048 = !DILocation(line: 207, column: 20, scope: !8037)
!8049 = !DILocation(line: 207, column: 26, scope: !8037)
!8050 = !DILocation(line: 207, column: 3, scope: !8037)
!8051 = !DILocation(line: 207, column: 13, scope: !8037)
!8052 = !DILocation(line: 207, column: 18, scope: !8037)
!8053 = !DILocation(line: 208, column: 22, scope: !8037)
!8054 = !DILocation(line: 208, column: 3, scope: !8037)
!8055 = !DILocation(line: 208, column: 9, scope: !8037)
!8056 = !DILocation(line: 208, column: 15, scope: !8037)
!8057 = !DILocation(line: 208, column: 20, scope: !8037)
!8058 = !DILocation(line: 209, column: 16, scope: !8037)
!8059 = !DILocation(line: 209, column: 3, scope: !8037)
!8060 = !DILocation(line: 209, column: 9, scope: !8037)
!8061 = !DILocation(line: 209, column: 14, scope: !8037)
!8062 = !DILocation(line: 210, column: 1, scope: !8037)
!8063 = distinct !DISubprogram(name: "get_default_def_for", scope: !3, file: !3, line: 1018, type: !2431, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8064 = !DILocalVariable(name: "sym", arg: 1, scope: !8063, file: !3, line: 1018, type: !888)
!8065 = !DILocation(line: 1018, column: 27, scope: !8063)
!8066 = !DILocalVariable(name: "ddef", scope: !8063, file: !3, line: 1020, type: !888)
!8067 = !DILocation(line: 1020, column: 8, scope: !8063)
!8068 = !DILocation(line: 1020, column: 35, scope: !8063)
!8069 = !DILocation(line: 1020, column: 41, scope: !8063)
!8070 = !DILocation(line: 1020, column: 15, scope: !8063)
!8071 = !DILocation(line: 1022, column: 7, scope: !8072)
!8072 = distinct !DILexicalBlock(scope: !8063, file: !3, line: 1022, column: 7)
!8073 = !DILocation(line: 1022, column: 12, scope: !8072)
!8074 = !DILocation(line: 1022, column: 7, scope: !8063)
!8075 = !DILocation(line: 1024, column: 29, scope: !8076)
!8076 = distinct !DILexicalBlock(scope: !8072, file: !3, line: 1023, column: 5)
!8077 = !DILocation(line: 1024, column: 34, scope: !8076)
!8078 = !DILocation(line: 1024, column: 14, scope: !8076)
!8079 = !DILocation(line: 1024, column: 12, scope: !8076)
!8080 = !DILocation(line: 1025, column: 24, scope: !8076)
!8081 = !DILocation(line: 1025, column: 29, scope: !8076)
!8082 = !DILocation(line: 1025, column: 7, scope: !8076)
!8083 = !DILocation(line: 1026, column: 5, scope: !8076)
!8084 = !DILocation(line: 1028, column: 10, scope: !8063)
!8085 = !DILocation(line: 1028, column: 3, scope: !8063)
!8086 = distinct !DISubprogram(name: "gimple_location", scope: !587, file: !587, line: 1139, type: !8087, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8087 = !DISubroutineType(types: !8088)
!8088 = !{!881, !3843}
!8089 = !DILocalVariable(name: "g", arg: 1, scope: !8086, file: !587, line: 1139, type: !3843)
!8090 = !DILocation(line: 1139, column: 31, scope: !8086)
!8091 = !DILocation(line: 1141, column: 10, scope: !8086)
!8092 = !DILocation(line: 1141, column: 13, scope: !8086)
!8093 = !DILocation(line: 1141, column: 20, scope: !8086)
!8094 = !DILocation(line: 1141, column: 3, scope: !8086)
!8095 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !135, file: !135, line: 182, type: !8096, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8096 = !DISubroutineType(types: !8097)
!8097 = !{!888, !7915}
!8098 = !DILocalVariable(name: "vec_", arg: 1, scope: !8095, file: !135, line: 182, type: !7915)
!8099 = !DILocation(line: 182, column: 1, scope: !8095)
!8100 = !DILocalVariable(name: "obj_", scope: !8095, file: !135, line: 182, type: !888)
!8101 = distinct !DISubprogram(name: "register_new_update_single", scope: !3, file: !3, line: 1750, type: !2530, scopeLine: 1751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8102 = !DILocalVariable(name: "new_name", arg: 1, scope: !8101, file: !3, line: 1750, type: !888)
!8103 = !DILocation(line: 1750, column: 34, scope: !8101)
!8104 = !DILocalVariable(name: "old_name", arg: 2, scope: !8101, file: !3, line: 1750, type: !888)
!8105 = !DILocation(line: 1750, column: 49, scope: !8101)
!8106 = !DILocalVariable(name: "currdef", scope: !8101, file: !3, line: 1752, type: !888)
!8107 = !DILocation(line: 1752, column: 8, scope: !8101)
!8108 = !DILocation(line: 1752, column: 35, scope: !8101)
!8109 = !DILocation(line: 1752, column: 18, scope: !8101)
!8110 = !DILocation(line: 1759, column: 3, scope: !8101)
!8111 = !DILocation(line: 1760, column: 3, scope: !8101)
!8112 = !DILocation(line: 1761, column: 3, scope: !8101)
!8113 = !DILocation(line: 1765, column: 20, scope: !8101)
!8114 = !DILocation(line: 1765, column: 30, scope: !8101)
!8115 = !DILocation(line: 1765, column: 3, scope: !8101)
!8116 = !DILocation(line: 1766, column: 1, scope: !8101)
!8117 = distinct !DISubprogram(name: "register_new_update_set", scope: !3, file: !3, line: 1774, type: !8118, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8118 = !DISubroutineType(types: !8119)
!8119 = !{null, !888, !1480}
!8120 = !DILocalVariable(name: "new_name", arg: 1, scope: !8117, file: !3, line: 1774, type: !888)
!8121 = !DILocation(line: 1774, column: 31, scope: !8117)
!8122 = !DILocalVariable(name: "old_names", arg: 2, scope: !8117, file: !3, line: 1774, type: !1480)
!8123 = !DILocation(line: 1774, column: 48, scope: !8117)
!8124 = !DILocalVariable(name: "bi", scope: !8117, file: !3, line: 1776, type: !2567)
!8125 = !DILocation(line: 1776, column: 19, scope: !8117)
!8126 = !DILocalVariable(name: "i", scope: !8117, file: !3, line: 1777, type: !7)
!8127 = !DILocation(line: 1777, column: 12, scope: !8117)
!8128 = !DILocation(line: 1779, column: 3, scope: !8129)
!8129 = distinct !DILexicalBlock(scope: !8117, file: !3, line: 1779, column: 3)
!8130 = !DILocation(line: 1779, column: 3, scope: !8131)
!8131 = distinct !DILexicalBlock(scope: !8129, file: !3, line: 1779, column: 3)
!8132 = !DILocation(line: 1780, column: 33, scope: !8131)
!8133 = !DILocation(line: 1780, column: 43, scope: !8131)
!8134 = !DILocation(line: 1780, column: 5, scope: !8131)
!8135 = distinct !{!8135, !8128, !8136}
!8136 = !DILocation(line: 1780, column: 55, scope: !8129)
!8137 = !DILocation(line: 1781, column: 1, scope: !8117)
!8138 = distinct !DISubprogram(name: "rewrite_update_stmt", scope: !3, file: !3, line: 1914, type: !8139, scopeLine: 1915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8139 = !DISubroutineType(types: !8140)
!8140 = !{null, !863, !4569}
!8141 = !DILocalVariable(name: "stmt", arg: 1, scope: !8138, file: !3, line: 1914, type: !863)
!8142 = !DILocation(line: 1914, column: 29, scope: !8138)
!8143 = !DILocalVariable(name: "gsi", arg: 2, scope: !8138, file: !3, line: 1914, type: !4569)
!8144 = !DILocation(line: 1914, column: 56, scope: !8138)
!8145 = !DILocalVariable(name: "use_p", scope: !8138, file: !3, line: 1916, type: !2297)
!8146 = !DILocation(line: 1916, column: 17, scope: !8138)
!8147 = !DILocalVariable(name: "def_p", scope: !8138, file: !3, line: 1917, type: !2348)
!8148 = !DILocation(line: 1917, column: 17, scope: !8138)
!8149 = !DILocalVariable(name: "iter", scope: !8138, file: !3, line: 1918, type: !4643)
!8150 = !DILocation(line: 1918, column: 15, scope: !8138)
!8151 = !DILocation(line: 1921, column: 24, scope: !8152)
!8152 = distinct !DILexicalBlock(scope: !8138, file: !3, line: 1921, column: 7)
!8153 = !DILocation(line: 1921, column: 8, scope: !8152)
!8154 = !DILocation(line: 1921, column: 30, scope: !8152)
!8155 = !DILocation(line: 1921, column: 51, scope: !8152)
!8156 = !DILocation(line: 1921, column: 34, scope: !8152)
!8157 = !DILocation(line: 1921, column: 7, scope: !8138)
!8158 = !DILocation(line: 1922, column: 5, scope: !8152)
!8159 = !DILocation(line: 1924, column: 7, scope: !8160)
!8160 = distinct !DILexicalBlock(scope: !8138, file: !3, line: 1924, column: 7)
!8161 = !DILocation(line: 1924, column: 17, scope: !8160)
!8162 = !DILocation(line: 1924, column: 21, scope: !8160)
!8163 = !DILocation(line: 1924, column: 32, scope: !8160)
!8164 = !DILocation(line: 1924, column: 7, scope: !8138)
!8165 = !DILocation(line: 1926, column: 16, scope: !8166)
!8166 = distinct !DILexicalBlock(scope: !8160, file: !3, line: 1925, column: 5)
!8167 = !DILocation(line: 1926, column: 7, scope: !8166)
!8168 = !DILocation(line: 1927, column: 26, scope: !8166)
!8169 = !DILocation(line: 1927, column: 37, scope: !8166)
!8170 = !DILocation(line: 1927, column: 7, scope: !8166)
!8171 = !DILocation(line: 1928, column: 16, scope: !8166)
!8172 = !DILocation(line: 1928, column: 7, scope: !8166)
!8173 = !DILocation(line: 1929, column: 5, scope: !8166)
!8174 = !DILocation(line: 1933, column: 23, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8138, file: !3, line: 1933, column: 7)
!8176 = !DILocation(line: 1933, column: 7, scope: !8175)
!8177 = !DILocation(line: 1933, column: 7, scope: !8138)
!8178 = !DILocation(line: 1935, column: 28, scope: !8179)
!8179 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 1935, column: 11)
!8180 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 1934, column: 5)
!8181 = !DILocation(line: 1935, column: 11, scope: !8179)
!8182 = !DILocation(line: 1935, column: 11, scope: !8180)
!8183 = !DILocalVariable(name: "failed", scope: !8184, file: !3, line: 1937, type: !1007)
!8184 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 1936, column: 2)
!8185 = !DILocation(line: 1937, column: 9, scope: !8184)
!8186 = !DILocation(line: 1939, column: 4, scope: !8187)
!8187 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1939, column: 4)
!8188 = !DILocation(line: 1939, column: 4, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !8187, file: !3, line: 1939, column: 4)
!8190 = !DILocation(line: 1940, column: 44, scope: !8191)
!8191 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 1940, column: 10)
!8192 = !DILocation(line: 1940, column: 11, scope: !8191)
!8193 = !DILocation(line: 1940, column: 10, scope: !8189)
!8194 = !DILocation(line: 1942, column: 10, scope: !8195)
!8195 = distinct !DILexicalBlock(scope: !8191, file: !3, line: 1941, column: 8)
!8196 = !DILocation(line: 1943, column: 3, scope: !8195)
!8197 = !DILocation(line: 1940, column: 49, scope: !8191)
!8198 = distinct !{!8198, !8186, !8199}
!8199 = !DILocation(line: 1944, column: 8, scope: !8187)
!8200 = !DILocation(line: 1946, column: 8, scope: !8201)
!8201 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1946, column: 8)
!8202 = !DILocation(line: 1946, column: 8, scope: !8184)
!8203 = !DILocation(line: 1960, column: 39, scope: !8204)
!8204 = distinct !DILexicalBlock(scope: !8201, file: !3, line: 1947, column: 6)
!8205 = !DILocation(line: 1960, column: 8, scope: !8204)
!8206 = !DILocation(line: 1961, column: 21, scope: !8204)
!8207 = !DILocation(line: 1961, column: 8, scope: !8204)
!8208 = !DILocation(line: 1962, column: 6, scope: !8204)
!8209 = !DILocation(line: 1963, column: 2, scope: !8184)
!8210 = !DILocation(line: 1966, column: 4, scope: !8211)
!8211 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 1966, column: 4)
!8212 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 1965, column: 2)
!8213 = !DILocation(line: 1966, column: 4, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8211, file: !3, line: 1966, column: 4)
!8215 = !DILocation(line: 1967, column: 25, scope: !8214)
!8216 = !DILocation(line: 1967, column: 6, scope: !8214)
!8217 = distinct !{!8217, !8210, !8218}
!8218 = !DILocation(line: 1967, column: 30, scope: !8211)
!8219 = !DILocation(line: 1969, column: 5, scope: !8180)
!8220 = !DILocation(line: 1974, column: 24, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !8138, file: !3, line: 1974, column: 7)
!8222 = !DILocation(line: 1974, column: 7, scope: !8221)
!8223 = !DILocation(line: 1974, column: 7, scope: !8138)
!8224 = !DILocation(line: 1975, column: 5, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 1975, column: 5)
!8226 = !DILocation(line: 1975, column: 5, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !8225, file: !3, line: 1975, column: 5)
!8228 = !DILocation(line: 1976, column: 27, scope: !8227)
!8229 = !DILocation(line: 1976, column: 34, scope: !8227)
!8230 = !DILocation(line: 1976, column: 7, scope: !8227)
!8231 = distinct !{!8231, !8224, !8232}
!8232 = !DILocation(line: 1976, column: 43, scope: !8225)
!8233 = !DILocation(line: 1977, column: 1, scope: !8138)
!8234 = distinct !DISubprogram(name: "rewrite_update_phi_arguments", scope: !3, file: !3, line: 1986, type: !6594, scopeLine: 1987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8235 = !DILocalVariable(name: "bb", arg: 1, scope: !8234, file: !3, line: 1986, type: !825)
!8236 = !DILocation(line: 1986, column: 43, scope: !8234)
!8237 = !DILocalVariable(name: "e", scope: !8234, file: !3, line: 1988, type: !843)
!8238 = !DILocation(line: 1988, column: 8, scope: !8234)
!8239 = !DILocalVariable(name: "ei", scope: !8234, file: !3, line: 1989, type: !2601)
!8240 = !DILocation(line: 1989, column: 17, scope: !8234)
!8241 = !DILocalVariable(name: "i", scope: !8234, file: !3, line: 1990, type: !7)
!8242 = !DILocation(line: 1990, column: 12, scope: !8234)
!8243 = !DILocation(line: 1992, column: 3, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !8234, file: !3, line: 1992, column: 3)
!8245 = !DILocation(line: 1992, column: 3, scope: !8246)
!8246 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 1992, column: 3)
!8247 = !DILocalVariable(name: "phi", scope: !8248, file: !3, line: 1994, type: !863)
!8248 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 1993, column: 5)
!8249 = !DILocation(line: 1994, column: 14, scope: !8248)
!8250 = !DILocalVariable(name: "phis", scope: !8248, file: !3, line: 1995, type: !2332)
!8251 = !DILocation(line: 1995, column: 18, scope: !8248)
!8252 = !DILocation(line: 1997, column: 26, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 1997, column: 11)
!8254 = !DILocation(line: 1997, column: 55, scope: !8253)
!8255 = !DILocation(line: 1997, column: 58, scope: !8253)
!8256 = !DILocation(line: 1997, column: 64, scope: !8253)
!8257 = !DILocation(line: 1997, column: 12, scope: !8253)
!8258 = !DILocation(line: 1997, column: 11, scope: !8248)
!8259 = !DILocation(line: 1998, column: 2, scope: !8253)
!8260 = !DILocation(line: 2000, column: 14, scope: !8248)
!8261 = !DILocation(line: 2000, column: 12, scope: !8248)
!8262 = !DILocation(line: 2001, column: 14, scope: !8263)
!8263 = distinct !DILexicalBlock(scope: !8248, file: !3, line: 2001, column: 7)
!8264 = !DILocation(line: 2001, column: 12, scope: !8263)
!8265 = !DILocation(line: 2001, column: 19, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 2001, column: 7)
!8267 = !DILocation(line: 2001, column: 7, scope: !8263)
!8268 = !DILocalVariable(name: "arg", scope: !8269, file: !3, line: 2003, type: !888)
!8269 = distinct !DILexicalBlock(scope: !8266, file: !3, line: 2002, column: 2)
!8270 = !DILocation(line: 2003, column: 9, scope: !8269)
!8271 = !DILocalVariable(name: "lhs_sym", scope: !8269, file: !3, line: 2003, type: !888)
!8272 = !DILocation(line: 2003, column: 14, scope: !8269)
!8273 = !DILocalVariable(name: "reaching_def", scope: !8269, file: !3, line: 2003, type: !888)
!8274 = !DILocation(line: 2003, column: 23, scope: !8269)
!8275 = !DILocalVariable(name: "arg_p", scope: !8269, file: !3, line: 2004, type: !2297)
!8276 = !DILocation(line: 2004, column: 18, scope: !8269)
!8277 = !DILocation(line: 2006, column: 6, scope: !8269)
!8278 = !DILocation(line: 2008, column: 12, scope: !8269)
!8279 = !DILocation(line: 2008, column: 10, scope: !8269)
!8280 = !DILocation(line: 2009, column: 10, scope: !8269)
!8281 = !DILocation(line: 2009, column: 8, scope: !8269)
!8282 = !DILocation(line: 2011, column: 8, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 2011, column: 8)
!8284 = !DILocation(line: 2011, column: 12, scope: !8283)
!8285 = !DILocation(line: 2011, column: 16, scope: !8283)
!8286 = !DILocation(line: 2011, column: 29, scope: !8283)
!8287 = !DILocation(line: 2011, column: 32, scope: !8283)
!8288 = !DILocation(line: 2011, column: 48, scope: !8283)
!8289 = !DILocation(line: 2011, column: 8, scope: !8269)
!8290 = !DILocation(line: 2012, column: 6, scope: !8283)
!8291 = !DILocation(line: 2014, column: 14, scope: !8269)
!8292 = !DILocation(line: 2014, column: 12, scope: !8269)
!8293 = !DILocation(line: 2016, column: 8, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 2016, column: 8)
!8295 = !DILocation(line: 2016, column: 12, scope: !8294)
!8296 = !DILocation(line: 2016, column: 8, scope: !8269)
!8297 = !DILocation(line: 2021, column: 41, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 2017, column: 6)
!8299 = !DILocation(line: 2021, column: 23, scope: !8298)
!8300 = !DILocation(line: 2021, column: 21, scope: !8298)
!8301 = !DILocation(line: 2023, column: 6, scope: !8298)
!8302 = !DILocalVariable(name: "sym", scope: !8303, file: !3, line: 2026, type: !888)
!8303 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 2025, column: 6)
!8304 = !DILocation(line: 2026, column: 13, scope: !8303)
!8305 = !DILocation(line: 2026, column: 19, scope: !8303)
!8306 = !DILocation(line: 2026, column: 34, scope: !8303)
!8307 = !DILocation(line: 2026, column: 40, scope: !8303)
!8308 = !DILocation(line: 2028, column: 40, scope: !8309)
!8309 = distinct !DILexicalBlock(scope: !8303, file: !3, line: 2028, column: 12)
!8310 = !DILocation(line: 2028, column: 12, scope: !8309)
!8311 = !DILocation(line: 2028, column: 12, scope: !8303)
!8312 = !DILocation(line: 2029, column: 36, scope: !8309)
!8313 = !DILocation(line: 2029, column: 18, scope: !8309)
!8314 = !DILocation(line: 2029, column: 16, scope: !8309)
!8315 = !DILocation(line: 2029, column: 3, scope: !8309)
!8316 = !DILocation(line: 2030, column: 30, scope: !8317)
!8317 = distinct !DILexicalBlock(scope: !8309, file: !3, line: 2030, column: 17)
!8318 = !DILocation(line: 2030, column: 17, scope: !8317)
!8319 = !DILocation(line: 2030, column: 17, scope: !8309)
!8320 = !DILocation(line: 2031, column: 36, scope: !8317)
!8321 = !DILocation(line: 2031, column: 18, scope: !8317)
!8322 = !DILocation(line: 2031, column: 16, scope: !8317)
!8323 = !DILocation(line: 2031, column: 3, scope: !8317)
!8324 = !DILocation(line: 2035, column: 8, scope: !8325)
!8325 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 2035, column: 8)
!8326 = !DILocation(line: 2035, column: 8, scope: !8269)
!8327 = !DILocalVariable(name: "stmt", scope: !8328, file: !3, line: 2037, type: !863)
!8328 = distinct !DILexicalBlock(scope: !8325, file: !3, line: 2036, column: 6)
!8329 = !DILocation(line: 2037, column: 15, scope: !8328)
!8330 = !DILocalVariable(name: "locus", scope: !8328, file: !3, line: 2038, type: !883)
!8331 = !DILocation(line: 2038, column: 24, scope: !8328)
!8332 = !DILocalVariable(name: "arg_i", scope: !8328, file: !3, line: 2039, type: !984)
!8333 = !DILocation(line: 2039, column: 12, scope: !8328)
!8334 = !DILocation(line: 2039, column: 20, scope: !8328)
!8335 = !DILocation(line: 2041, column: 8, scope: !8328)
!8336 = !DILocation(line: 2042, column: 15, scope: !8328)
!8337 = !DILocation(line: 2042, column: 13, scope: !8328)
!8338 = !DILocation(line: 2046, column: 25, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 2046, column: 12)
!8340 = !DILocation(line: 2046, column: 12, scope: !8339)
!8341 = !DILocation(line: 2046, column: 31, scope: !8339)
!8342 = !DILocation(line: 2046, column: 45, scope: !8339)
!8343 = !DILocation(line: 2047, column: 26, scope: !8339)
!8344 = !DILocation(line: 2047, column: 5, scope: !8339)
!8345 = !DILocation(line: 2047, column: 32, scope: !8339)
!8346 = !DILocation(line: 2046, column: 12, scope: !8328)
!8347 = !DILocation(line: 2048, column: 36, scope: !8339)
!8348 = !DILocation(line: 2048, column: 11, scope: !8339)
!8349 = !DILocation(line: 2048, column: 9, scope: !8339)
!8350 = !DILocation(line: 2048, column: 3, scope: !8339)
!8351 = !DILocation(line: 2050, column: 28, scope: !8339)
!8352 = !DILocation(line: 2050, column: 11, scope: !8339)
!8353 = !DILocation(line: 2050, column: 9, scope: !8339)
!8354 = !DILocation(line: 2052, column: 37, scope: !8328)
!8355 = !DILocation(line: 2052, column: 42, scope: !8328)
!8356 = !DILocation(line: 2052, column: 49, scope: !8328)
!8357 = !DILocation(line: 2052, column: 8, scope: !8328)
!8358 = !DILocation(line: 2053, column: 6, scope: !8328)
!8359 = !DILocation(line: 2056, column: 8, scope: !8360)
!8360 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 2056, column: 8)
!8361 = !DILocation(line: 2056, column: 11, scope: !8360)
!8362 = !DILocation(line: 2056, column: 17, scope: !8360)
!8363 = !DILocation(line: 2056, column: 8, scope: !8269)
!8364 = !DILocation(line: 2057, column: 6, scope: !8360)
!8365 = !DILocation(line: 2057, column: 61, scope: !8360)
!8366 = !DILocation(line: 2058, column: 2, scope: !8269)
!8367 = !DILocation(line: 2001, column: 56, scope: !8266)
!8368 = !DILocation(line: 2001, column: 7, scope: !8266)
!8369 = distinct !{!8369, !8267, !8370}
!8370 = !DILocation(line: 2058, column: 2, scope: !8263)
!8371 = !DILocation(line: 2059, column: 5, scope: !8248)
!8372 = distinct !{!8372, !8243, !8373}
!8373 = !DILocation(line: 2059, column: 5, scope: !8244)
!8374 = !DILocation(line: 2060, column: 1, scope: !8234)
!8375 = distinct !DISubprogram(name: "maybe_replace_use_in_debug_stmt", scope: !3, file: !3, line: 1810, type: !8376, scopeLine: 1811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8376 = !DISubroutineType(types: !8377)
!8377 = !{!1007, !2297}
!8378 = !DILocalVariable(name: "use_p", arg: 1, scope: !8375, file: !3, line: 1810, type: !2297)
!8379 = !DILocation(line: 1810, column: 48, scope: !8375)
!8380 = !DILocalVariable(name: "rdef", scope: !8375, file: !3, line: 1812, type: !888)
!8381 = !DILocation(line: 1812, column: 8, scope: !8375)
!8382 = !DILocalVariable(name: "use", scope: !8375, file: !3, line: 1813, type: !888)
!8383 = !DILocation(line: 1813, column: 8, scope: !8375)
!8384 = !DILocation(line: 1813, column: 14, scope: !8375)
!8385 = !DILocalVariable(name: "sym", scope: !8375, file: !3, line: 1814, type: !888)
!8386 = !DILocation(line: 1814, column: 8, scope: !8375)
!8387 = !DILocation(line: 1814, column: 14, scope: !8375)
!8388 = !DILocation(line: 1814, column: 29, scope: !8375)
!8389 = !DILocation(line: 1814, column: 35, scope: !8375)
!8390 = !DILocation(line: 1816, column: 35, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8375, file: !3, line: 1816, column: 7)
!8392 = !DILocation(line: 1816, column: 7, scope: !8391)
!8393 = !DILocation(line: 1816, column: 7, scope: !8375)
!8394 = !DILocation(line: 1817, column: 29, scope: !8391)
!8395 = !DILocation(line: 1817, column: 12, scope: !8391)
!8396 = !DILocation(line: 1817, column: 10, scope: !8391)
!8397 = !DILocation(line: 1817, column: 5, scope: !8391)
!8398 = !DILocation(line: 1818, column: 25, scope: !8399)
!8399 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 1818, column: 12)
!8400 = !DILocation(line: 1818, column: 12, scope: !8399)
!8401 = !DILocation(line: 1818, column: 12, scope: !8391)
!8402 = !DILocation(line: 1820, column: 31, scope: !8403)
!8403 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 1819, column: 5)
!8404 = !DILocation(line: 1820, column: 14, scope: !8403)
!8405 = !DILocation(line: 1820, column: 12, scope: !8403)
!8406 = !DILocation(line: 1825, column: 12, scope: !8407)
!8407 = distinct !DILexicalBlock(scope: !8403, file: !3, line: 1825, column: 11)
!8408 = !DILocation(line: 1825, column: 17, scope: !8407)
!8409 = !DILocation(line: 1825, column: 20, scope: !8407)
!8410 = !DILocation(line: 1825, column: 11, scope: !8403)
!8411 = !DILocation(line: 1826, column: 9, scope: !8407)
!8412 = !DILocation(line: 1826, column: 7, scope: !8407)
!8413 = !DILocation(line: 1826, column: 2, scope: !8407)
!8414 = !DILocation(line: 1827, column: 5, scope: !8403)
!8415 = !DILocation(line: 1829, column: 12, scope: !8399)
!8416 = !DILocation(line: 1829, column: 10, scope: !8399)
!8417 = !DILocation(line: 1831, column: 7, scope: !8418)
!8418 = distinct !DILexicalBlock(scope: !8375, file: !3, line: 1831, column: 7)
!8419 = !DILocation(line: 1831, column: 12, scope: !8418)
!8420 = !DILocation(line: 1831, column: 15, scope: !8418)
!8421 = !DILocation(line: 1831, column: 23, scope: !8418)
!8422 = !DILocation(line: 1831, column: 20, scope: !8418)
!8423 = !DILocation(line: 1831, column: 7, scope: !8375)
!8424 = !DILocation(line: 1832, column: 5, scope: !8418)
!8425 = !DILocation(line: 1834, column: 10, scope: !8375)
!8426 = !DILocation(line: 1834, column: 15, scope: !8375)
!8427 = !DILocation(line: 1834, column: 3, scope: !8375)
!8428 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !587, file: !587, line: 3336, type: !5541, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8429 = !DILocalVariable(name: "dbg", arg: 1, scope: !8428, file: !587, line: 3336, type: !863)
!8430 = !DILocation(line: 3336, column: 39, scope: !8428)
!8431 = !DILocation(line: 3342, column: 18, scope: !8428)
!8432 = !DILocation(line: 3342, column: 3, scope: !8428)
!8433 = !DILocation(line: 3343, column: 1, scope: !8428)
!8434 = distinct !DISubprogram(name: "maybe_replace_use", scope: !3, file: !3, line: 1790, type: !8435, scopeLine: 1791, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8435 = !DISubroutineType(types: !8436)
!8436 = !{null, !2297}
!8437 = !DILocalVariable(name: "use_p", arg: 1, scope: !8434, file: !3, line: 1790, type: !2297)
!8438 = !DILocation(line: 1790, column: 34, scope: !8434)
!8439 = !DILocalVariable(name: "rdef", scope: !8434, file: !3, line: 1792, type: !888)
!8440 = !DILocation(line: 1792, column: 8, scope: !8434)
!8441 = !DILocalVariable(name: "use", scope: !8434, file: !3, line: 1793, type: !888)
!8442 = !DILocation(line: 1793, column: 8, scope: !8434)
!8443 = !DILocation(line: 1793, column: 14, scope: !8434)
!8444 = !DILocalVariable(name: "sym", scope: !8434, file: !3, line: 1794, type: !888)
!8445 = !DILocation(line: 1794, column: 8, scope: !8434)
!8446 = !DILocation(line: 1794, column: 14, scope: !8434)
!8447 = !DILocation(line: 1794, column: 29, scope: !8434)
!8448 = !DILocation(line: 1794, column: 35, scope: !8434)
!8449 = !DILocation(line: 1796, column: 35, scope: !8450)
!8450 = distinct !DILexicalBlock(scope: !8434, file: !3, line: 1796, column: 7)
!8451 = !DILocation(line: 1796, column: 7, scope: !8450)
!8452 = !DILocation(line: 1796, column: 7, scope: !8434)
!8453 = !DILocation(line: 1797, column: 30, scope: !8450)
!8454 = !DILocation(line: 1797, column: 12, scope: !8450)
!8455 = !DILocation(line: 1797, column: 10, scope: !8450)
!8456 = !DILocation(line: 1797, column: 5, scope: !8450)
!8457 = !DILocation(line: 1798, column: 25, scope: !8458)
!8458 = distinct !DILexicalBlock(scope: !8450, file: !3, line: 1798, column: 12)
!8459 = !DILocation(line: 1798, column: 12, scope: !8458)
!8460 = !DILocation(line: 1798, column: 12, scope: !8450)
!8461 = !DILocation(line: 1799, column: 30, scope: !8458)
!8462 = !DILocation(line: 1799, column: 12, scope: !8458)
!8463 = !DILocation(line: 1799, column: 10, scope: !8458)
!8464 = !DILocation(line: 1799, column: 5, scope: !8458)
!8465 = !DILocation(line: 1801, column: 7, scope: !8466)
!8466 = distinct !DILexicalBlock(scope: !8434, file: !3, line: 1801, column: 7)
!8467 = !DILocation(line: 1801, column: 12, scope: !8466)
!8468 = !DILocation(line: 1801, column: 15, scope: !8466)
!8469 = !DILocation(line: 1801, column: 23, scope: !8466)
!8470 = !DILocation(line: 1801, column: 20, scope: !8466)
!8471 = !DILocation(line: 1801, column: 7, scope: !8434)
!8472 = !DILocation(line: 1802, column: 5, scope: !8466)
!8473 = !DILocation(line: 1803, column: 1, scope: !8434)
!8474 = distinct !DISubprogram(name: "maybe_register_def", scope: !3, file: !3, line: 1844, type: !8475, scopeLine: 1846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8475 = !DISubroutineType(types: !8476)
!8476 = !{null, !2348, !863, !4569}
!8477 = !DILocalVariable(name: "def_p", arg: 1, scope: !8474, file: !3, line: 1844, type: !2348)
!8478 = !DILocation(line: 1844, column: 35, scope: !8474)
!8479 = !DILocalVariable(name: "stmt", arg: 2, scope: !8474, file: !3, line: 1844, type: !863)
!8480 = !DILocation(line: 1844, column: 49, scope: !8474)
!8481 = !DILocalVariable(name: "gsi", arg: 3, scope: !8474, file: !3, line: 1845, type: !4569)
!8482 = !DILocation(line: 1845, column: 28, scope: !8474)
!8483 = !DILocalVariable(name: "def", scope: !8474, file: !3, line: 1847, type: !888)
!8484 = !DILocation(line: 1847, column: 8, scope: !8474)
!8485 = !DILocation(line: 1847, column: 14, scope: !8474)
!8486 = !DILocalVariable(name: "sym", scope: !8474, file: !3, line: 1848, type: !888)
!8487 = !DILocation(line: 1848, column: 8, scope: !8474)
!8488 = !DILocation(line: 1848, column: 14, scope: !8474)
!8489 = !DILocation(line: 1848, column: 29, scope: !8474)
!8490 = !DILocation(line: 1848, column: 35, scope: !8474)
!8491 = !DILocation(line: 1852, column: 35, scope: !8492)
!8492 = distinct !DILexicalBlock(scope: !8474, file: !3, line: 1852, column: 7)
!8493 = !DILocation(line: 1852, column: 7, scope: !8492)
!8494 = !DILocation(line: 1852, column: 7, scope: !8474)
!8495 = !DILocation(line: 1854, column: 11, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8497, file: !3, line: 1854, column: 11)
!8497 = distinct !DILexicalBlock(scope: !8492, file: !3, line: 1853, column: 5)
!8498 = !DILocation(line: 1854, column: 11, scope: !8497)
!8499 = !DILocalVariable(name: "tracked_var", scope: !8500, file: !3, line: 1856, type: !888)
!8500 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 1855, column: 2)
!8501 = !DILocation(line: 1856, column: 9, scope: !8500)
!8502 = !DILocation(line: 1858, column: 25, scope: !8500)
!8503 = !DILocation(line: 1858, column: 30, scope: !8500)
!8504 = !DILocation(line: 1858, column: 10, scope: !8500)
!8505 = !DILocation(line: 1858, column: 8, scope: !8500)
!8506 = !DILocation(line: 1859, column: 4, scope: !8500)
!8507 = !DILocation(line: 1861, column: 41, scope: !8500)
!8508 = !DILocation(line: 1861, column: 18, scope: !8500)
!8509 = !DILocation(line: 1861, column: 16, scope: !8500)
!8510 = !DILocation(line: 1862, column: 8, scope: !8511)
!8511 = distinct !DILexicalBlock(scope: !8500, file: !3, line: 1862, column: 8)
!8512 = !DILocation(line: 1862, column: 8, scope: !8500)
!8513 = !DILocalVariable(name: "note", scope: !8514, file: !3, line: 1864, type: !863)
!8514 = distinct !DILexicalBlock(scope: !8511, file: !3, line: 1863, column: 6)
!8515 = !DILocation(line: 1864, column: 15, scope: !8514)
!8516 = !DILocation(line: 1864, column: 22, scope: !8514)
!8517 = !DILocation(line: 1867, column: 12, scope: !8518)
!8518 = distinct !DILexicalBlock(scope: !8514, file: !3, line: 1867, column: 12)
!8519 = !DILocation(line: 1867, column: 39, scope: !8518)
!8520 = !DILocation(line: 1867, column: 58, scope: !8518)
!8521 = !DILocation(line: 1867, column: 42, scope: !8518)
!8522 = !DILocation(line: 1867, column: 12, scope: !8514)
!8523 = !DILocalVariable(name: "bb", scope: !8524, file: !3, line: 1869, type: !825)
!8524 = distinct !DILexicalBlock(scope: !8518, file: !3, line: 1868, column: 3)
!8525 = !DILocation(line: 1869, column: 17, scope: !8524)
!8526 = !DILocation(line: 1869, column: 22, scope: !8524)
!8527 = !DILocalVariable(name: "ei", scope: !8524, file: !3, line: 1870, type: !2601)
!8528 = !DILocation(line: 1870, column: 19, scope: !8524)
!8529 = !DILocalVariable(name: "e", scope: !8524, file: !3, line: 1871, type: !843)
!8530 = !DILocation(line: 1871, column: 10, scope: !8524)
!8531 = !DILocalVariable(name: "ef", scope: !8524, file: !3, line: 1871, type: !843)
!8532 = !DILocation(line: 1871, column: 13, scope: !8524)
!8533 = !DILocation(line: 1872, column: 5, scope: !8534)
!8534 = distinct !DILexicalBlock(scope: !8524, file: !3, line: 1872, column: 5)
!8535 = !DILocation(line: 1872, column: 5, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8534, file: !3, line: 1872, column: 5)
!8537 = !DILocation(line: 1873, column: 13, scope: !8538)
!8538 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 1873, column: 11)
!8539 = !DILocation(line: 1873, column: 16, scope: !8538)
!8540 = !DILocation(line: 1873, column: 22, scope: !8538)
!8541 = !DILocation(line: 1873, column: 11, scope: !8536)
!8542 = !DILocation(line: 1875, column: 4, scope: !8543)
!8543 = distinct !DILexicalBlock(scope: !8538, file: !3, line: 1874, column: 9)
!8544 = !DILocation(line: 1876, column: 9, scope: !8543)
!8545 = !DILocation(line: 1876, column: 7, scope: !8543)
!8546 = !DILocation(line: 1877, column: 9, scope: !8543)
!8547 = !DILocation(line: 1873, column: 31, scope: !8538)
!8548 = distinct !{!8548, !8533, !8549}
!8549 = !DILocation(line: 1877, column: 9, scope: !8534)
!8550 = !DILocation(line: 1878, column: 5, scope: !8524)
!8551 = !DILocation(line: 1882, column: 35, scope: !8524)
!8552 = !DILocation(line: 1882, column: 39, scope: !8524)
!8553 = !DILocation(line: 1882, column: 5, scope: !8524)
!8554 = !DILocation(line: 1883, column: 3, scope: !8524)
!8555 = !DILocation(line: 1885, column: 27, scope: !8518)
!8556 = !DILocation(line: 1885, column: 3, scope: !8518)
!8557 = !DILocation(line: 1886, column: 6, scope: !8514)
!8558 = !DILocation(line: 1887, column: 2, scope: !8500)
!8559 = !DILocation(line: 1889, column: 35, scope: !8497)
!8560 = !DILocation(line: 1889, column: 40, scope: !8497)
!8561 = !DILocation(line: 1889, column: 7, scope: !8497)
!8562 = !DILocation(line: 1890, column: 5, scope: !8497)
!8563 = !DILocation(line: 1895, column: 24, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 1895, column: 11)
!8565 = distinct !DILexicalBlock(scope: !8492, file: !3, line: 1892, column: 5)
!8566 = !DILocation(line: 1895, column: 11, scope: !8564)
!8567 = !DILocation(line: 1895, column: 11, scope: !8565)
!8568 = !DILocation(line: 1896, column: 27, scope: !8564)
!8569 = !DILocation(line: 1896, column: 51, scope: !8564)
!8570 = !DILocation(line: 1896, column: 32, scope: !8564)
!8571 = !DILocation(line: 1896, column: 2, scope: !8564)
!8572 = !DILocation(line: 1900, column: 24, scope: !8573)
!8573 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 1900, column: 11)
!8574 = !DILocation(line: 1900, column: 11, scope: !8573)
!8575 = !DILocation(line: 1900, column: 11, scope: !8565)
!8576 = !DILocation(line: 1901, column: 30, scope: !8573)
!8577 = !DILocation(line: 1901, column: 35, scope: !8573)
!8578 = !DILocation(line: 1901, column: 2, scope: !8573)
!8579 = !DILocation(line: 1903, column: 1, scope: !8474)
!8580 = distinct !DISubprogram(name: "gimple_set_op", scope: !587, file: !587, line: 1663, type: !8581, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8581 = !DISubroutineType(types: !8582)
!8582 = !{null, !863, !7, !888}
!8583 = !DILocalVariable(name: "gs", arg: 1, scope: !8580, file: !587, line: 1663, type: !863)
!8584 = !DILocation(line: 1663, column: 23, scope: !8580)
!8585 = !DILocalVariable(name: "i", arg: 2, scope: !8580, file: !587, line: 1663, type: !7)
!8586 = !DILocation(line: 1663, column: 36, scope: !8580)
!8587 = !DILocalVariable(name: "op", arg: 3, scope: !8580, file: !587, line: 1663, type: !888)
!8588 = !DILocation(line: 1663, column: 44, scope: !8580)
!8589 = !DILocation(line: 1665, column: 3, scope: !8580)
!8590 = !DILocation(line: 1671, column: 24, scope: !8580)
!8591 = !DILocation(line: 1671, column: 15, scope: !8580)
!8592 = !DILocation(line: 1671, column: 3, scope: !8580)
!8593 = !DILocation(line: 1671, column: 19, scope: !8580)
!8594 = !DILocation(line: 1671, column: 22, scope: !8580)
!8595 = !DILocation(line: 1672, column: 1, scope: !8580)
!8596 = distinct !DISubprogram(name: "gimple_num_ops", scope: !587, file: !587, line: 1596, type: !8597, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8597 = !DISubroutineType(types: !8598)
!8598 = !{!7, !3843}
!8599 = !DILocalVariable(name: "gs", arg: 1, scope: !8596, file: !587, line: 1596, type: !3843)
!8600 = !DILocation(line: 1596, column: 30, scope: !8596)
!8601 = !DILocation(line: 1598, column: 10, scope: !8596)
!8602 = !DILocation(line: 1598, column: 14, scope: !8596)
!8603 = !DILocation(line: 1598, column: 21, scope: !8596)
!8604 = !DILocation(line: 1598, column: 3, scope: !8596)
!8605 = distinct !DISubprogram(name: "gimple_ops", scope: !587, file: !587, line: 1614, type: !6627, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8606 = !DILocalVariable(name: "gs", arg: 1, scope: !8605, file: !587, line: 1614, type: !863)
!8607 = !DILocation(line: 1614, column: 20, scope: !8605)
!8608 = !DILocalVariable(name: "off", scope: !8605, file: !587, line: 1616, type: !1417)
!8609 = !DILocation(line: 1616, column: 10, scope: !8605)
!8610 = !DILocation(line: 1621, column: 56, scope: !8605)
!8611 = !DILocation(line: 1621, column: 28, scope: !8605)
!8612 = !DILocation(line: 1621, column: 9, scope: !8605)
!8613 = !DILocation(line: 1621, column: 7, scope: !8605)
!8614 = !DILocation(line: 1622, column: 3, scope: !8605)
!8615 = !DILocation(line: 1624, column: 29, scope: !8605)
!8616 = !DILocation(line: 1624, column: 20, scope: !8605)
!8617 = !DILocation(line: 1624, column: 34, scope: !8605)
!8618 = !DILocation(line: 1624, column: 32, scope: !8605)
!8619 = !DILocation(line: 1624, column: 10, scope: !8605)
!8620 = !DILocation(line: 1624, column: 3, scope: !8605)
!8621 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !587, file: !587, line: 1073, type: !8622, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8622 = !DISubroutineType(types: !8623)
!8623 = !{!797, !863}
!8624 = !DILocalVariable(name: "gs", arg: 1, scope: !8621, file: !587, line: 1073, type: !863)
!8625 = !DILocation(line: 1073, column: 36, scope: !8621)
!8626 = !DILocation(line: 1075, column: 37, scope: !8621)
!8627 = !DILocation(line: 1075, column: 24, scope: !8621)
!8628 = !DILocation(line: 1075, column: 10, scope: !8621)
!8629 = !DILocation(line: 1075, column: 3, scope: !8621)
!8630 = distinct !DISubprogram(name: "gss_for_code", scope: !587, file: !587, line: 1061, type: !8631, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8631 = !DISubroutineType(types: !8632)
!8632 = !{!797, !586}
!8633 = !DILocalVariable(name: "code", arg: 1, scope: !8630, file: !587, line: 1061, type: !586)
!8634 = !DILocation(line: 1061, column: 32, scope: !8630)
!8635 = !DILocation(line: 1066, column: 24, scope: !8630)
!8636 = !DILocation(line: 1066, column: 10, scope: !8630)
!8637 = !DILocation(line: 1066, column: 3, scope: !8630)
!8638 = distinct !DISubprogram(name: "gsi_one_before_end_p", scope: !587, file: !587, line: 4476, type: !5400, scopeLine: 4477, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8639 = !DILocalVariable(name: "i", arg: 1, scope: !8638, file: !587, line: 4476, type: !4569)
!8640 = !DILocation(line: 4476, column: 44, scope: !8638)
!8641 = !DILocation(line: 4478, column: 12, scope: !8638)
!8642 = !DILocation(line: 4478, column: 16, scope: !8638)
!8643 = !DILocation(line: 4478, column: 24, scope: !8638)
!8644 = !DILocation(line: 4478, column: 29, scope: !8638)
!8645 = !DILocation(line: 4478, column: 34, scope: !8638)
!8646 = !DILocation(line: 4478, column: 39, scope: !8638)
!8647 = !DILocation(line: 0, scope: !8638)
!8648 = !DILocation(line: 4478, column: 10, scope: !8638)
!8649 = !DILocation(line: 4478, column: 3, scope: !8638)
!8650 = distinct !DISubprogram(name: "gsi_bb", scope: !587, file: !587, line: 4588, type: !8651, scopeLine: 4589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8651 = !DISubroutineType(types: !8652)
!8652 = !{!825, !4569}
!8653 = !DILocalVariable(name: "i", arg: 1, scope: !8650, file: !587, line: 4588, type: !4569)
!8654 = !DILocation(line: 4588, column: 30, scope: !8650)
!8655 = !DILocation(line: 4590, column: 12, scope: !8650)
!8656 = !DILocation(line: 4590, column: 3, scope: !8650)
!8657 = distinct !DISubprogram(name: "single_pred_p", scope: !343, file: !343, line: 634, type: !8658, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8658 = !DISubroutineType(types: !8659)
!8659 = !{!1007, !5510}
!8660 = !DILocalVariable(name: "bb", arg: 1, scope: !8657, file: !343, line: 634, type: !5510)
!8661 = !DILocation(line: 634, column: 34, scope: !8657)
!8662 = !DILocation(line: 636, column: 10, scope: !8657)
!8663 = !DILocation(line: 636, column: 33, scope: !8657)
!8664 = !DILocation(line: 636, column: 3, scope: !8657)
!8665 = distinct !DISubprogram(name: "phi_nodes", scope: !2511, file: !2511, line: 508, type: !5508, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8666 = !DILocalVariable(name: "bb", arg: 1, scope: !8665, file: !2511, line: 508, type: !5510)
!8667 = !DILocation(line: 508, column: 30, scope: !8665)
!8668 = !DILocation(line: 510, column: 3, scope: !8665)
!8669 = !DILocation(line: 511, column: 8, scope: !8670)
!8670 = distinct !DILexicalBlock(scope: !8665, file: !2511, line: 511, column: 7)
!8671 = !DILocation(line: 511, column: 12, scope: !8670)
!8672 = !DILocation(line: 511, column: 15, scope: !8670)
!8673 = !DILocation(line: 511, column: 7, scope: !8665)
!8674 = !DILocation(line: 512, column: 5, scope: !8670)
!8675 = !DILocation(line: 513, column: 10, scope: !8665)
!8676 = !DILocation(line: 513, column: 14, scope: !8665)
!8677 = !DILocation(line: 513, column: 17, scope: !8665)
!8678 = !DILocation(line: 513, column: 25, scope: !8665)
!8679 = !DILocation(line: 513, column: 3, scope: !8665)
!8680 = !DILocation(line: 514, column: 1, scope: !8665)
!8681 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !587, file: !587, line: 33, type: !8682, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8682 = !DISubroutineType(types: !8683)
!8683 = !{!984, !8684, !7, !6929}
!8684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8685, size: 64)
!8685 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1448)
!8686 = !DILocalVariable(name: "vec_", arg: 1, scope: !8681, file: !587, line: 33, type: !8684)
!8687 = !DILocation(line: 33, column: 1, scope: !8681)
!8688 = !DILocalVariable(name: "ix_", arg: 2, scope: !8681, file: !587, line: 33, type: !7)
!8689 = !DILocalVariable(name: "ptr", arg: 3, scope: !8681, file: !587, line: 33, type: !6929)
!8690 = !DILocation(line: 33, column: 1, scope: !8691)
!8691 = distinct !DILexicalBlock(scope: !8681, file: !587, line: 33, column: 1)
!8692 = !DILocation(line: 33, column: 1, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8691, file: !587, line: 33, column: 1)
!8694 = !DILocation(line: 33, column: 1, scope: !8695)
!8695 = distinct !DILexicalBlock(scope: !8691, file: !587, line: 33, column: 1)
!8696 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !587, file: !587, line: 3061, type: !8597, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8697 = !DILocalVariable(name: "gs", arg: 1, scope: !8696, file: !587, line: 3061, type: !3843)
!8698 = !DILocation(line: 3061, column: 35, scope: !8696)
!8699 = !DILocation(line: 3064, column: 10, scope: !8696)
!8700 = !DILocation(line: 3064, column: 14, scope: !8696)
!8701 = !DILocation(line: 3064, column: 25, scope: !8696)
!8702 = !DILocation(line: 3064, column: 3, scope: !8696)
!8703 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !2511, file: !2511, line: 475, type: !8704, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8704 = !DISubroutineType(types: !8705)
!8705 = !{!883, !863, !1417}
!8706 = !DILocalVariable(name: "gs", arg: 1, scope: !8703, file: !2511, line: 475, type: !863)
!8707 = !DILocation(line: 475, column: 33, scope: !8703)
!8708 = !DILocalVariable(name: "i", arg: 2, scope: !8703, file: !2511, line: 475, type: !1417)
!8709 = !DILocation(line: 475, column: 44, scope: !8703)
!8710 = !DILocation(line: 477, column: 26, scope: !8703)
!8711 = !DILocation(line: 477, column: 30, scope: !8703)
!8712 = !DILocation(line: 477, column: 10, scope: !8703)
!8713 = !DILocation(line: 477, column: 34, scope: !8703)
!8714 = !DILocation(line: 477, column: 3, scope: !8703)
!8715 = distinct !DISubprogram(name: "gimple_phi_arg_set_location", scope: !2511, file: !2511, line: 491, type: !8716, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2433)
!8716 = !DISubroutineType(types: !8717)
!8717 = !{null, !863, !1417, !883}
!8718 = !DILocalVariable(name: "gs", arg: 1, scope: !8715, file: !2511, line: 491, type: !863)
!8719 = !DILocation(line: 491, column: 37, scope: !8715)
!8720 = !DILocalVariable(name: "i", arg: 2, scope: !8715, file: !2511, line: 491, type: !1417)
!8721 = !DILocation(line: 491, column: 48, scope: !8715)
!8722 = !DILocalVariable(name: "loc", arg: 3, scope: !8715, file: !2511, line: 491, type: !883)
!8723 = !DILocation(line: 491, column: 67, scope: !8715)
!8724 = !DILocation(line: 493, column: 35, scope: !8715)
!8725 = !DILocation(line: 493, column: 19, scope: !8715)
!8726 = !DILocation(line: 493, column: 23, scope: !8715)
!8727 = !DILocation(line: 493, column: 3, scope: !8715)
!8728 = !DILocation(line: 493, column: 27, scope: !8715)
!8729 = !DILocation(line: 493, column: 33, scope: !8715)
!8730 = !DILocation(line: 494, column: 1, scope: !8715)
