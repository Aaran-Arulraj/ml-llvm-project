; ModuleID = 'tree-nested.c'
source_filename = "tree-nested.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.nesting_info = type { %struct.nesting_info*, %struct.nesting_info*, %struct.nesting_info*, %struct.pointer_map_t*, %struct.pointer_map_t*, %struct.bitmap_head_def*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8, i8, i8 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.tree_omp_clause = type { %struct.tree_common, i32, i32, %union.omp_clause_subcode, %struct.gimple_seq_d*, %struct.gimple_seq_d*, [1 x %union.tree_node*] }
%union.omp_clause_subcode = type { i32 }
%struct.gimple_statement_omp_parallel = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_statement_omp_for = type { %struct.gimple_statement_omp, %union.tree_node*, i64, %struct.gimple_omp_for_iter*, %struct.gimple_seq_d* }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_sections = type { %struct.gimple_statement_omp, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_single = type { %struct.gimple_statement_omp, %union.tree_node* }
%struct.gimple_statement_bind = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node*, %struct.gimple_seq_d* }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.nesting_copy_body_data = type { %struct.copy_body_data, %struct.nesting_info* }
%struct.copy_body_data = type { %union.tree_node*, %union.tree_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.function*, %union.tree_node*, %struct.pointer_map_t*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.pointer_map_t*, i32, i8, i8, i8, i8, i32, void (%union.tree_node*)*, %struct.pointer_set_t*, %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.pointer_map_t* }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }

@tree_code_type = external dso_local constant [0 x i32], align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@dump_flags = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [18 x i8] c"\0A;; Function %s\0A\0A\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@nesting_info_bitmap_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !0
@trampoline_type = internal global %union.tree_node* null, align 8, !dbg !3189
@gt_ggc_r_gt_tree_nested_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%union.tree_node** @trampoline_type to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3175
@optimize = external dso_local global i32, align 4
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.3 = private unnamed_addr constant [14 x i8] c"tree-nested.c\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"FRAME.\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"FRAME\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"__chain\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Setting static-chain for %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"CHAIN\00", align 1
@implicit_built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@ptr_mode = external dso_local global i32, align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@mode_size = external dso_local global [87 x i8], align 16
@.str.9 = private unnamed_addr constant [14 x i8] c"__nl_goto_buf\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"Guessing no static-chain for %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"convert_all_function_calls iterations: %d\0A\0A\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.12 = private unnamed_addr constant [7 x i8] c"__data\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"__builtin_trampoline\00", align 1
@warn_padded = external dso_local global i32, align 4
@.str.14 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_addr(%union.tree_node* %exp, %union.tree_node* %context) #0 !dbg !3195 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %context.addr = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %save_context = alloca %union.tree_node*, align 8
  %retval1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !3199, metadata !DIExpression()), !dbg !3200
  store %union.tree_node* %context, %union.tree_node** %context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %context.addr, metadata !3201, metadata !DIExpression()), !dbg !3202
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3203, metadata !DIExpression()), !dbg !3204
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3205
  store %union.tree_node* %0, %union.tree_node** %base, align 8, !dbg !3204
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_context, metadata !3206, metadata !DIExpression()), !dbg !3207
  call void @llvm.dbg.declare(metadata %union.tree_node** %retval1, metadata !3208, metadata !DIExpression()), !dbg !3209
  br label %while.cond, !dbg !3210

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3211
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %1), !dbg !3212
  %tobool = icmp ne i8 %call, 0, !dbg !3210
  br i1 %tobool, label %while.body, label %while.end, !dbg !3210

while.body:                                       ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3213
  %exp2 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !3213
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !3213
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3213
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3213
  store %union.tree_node* %3, %union.tree_node** %base, align 8, !dbg !3214
  br label %while.cond, !dbg !3210, !llvm.loop !3215

while.end:                                        ; preds = %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3216
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3216
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3216
  %bf.load = load i64, i64* %5, align 8, !dbg !3216
  %bf.clear = and i64 %bf.load, 65535, !dbg !3216
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3216
  %idxprom = sext i32 %bf.cast to i64, !dbg !3216
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3216
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !3216
  %cmp = icmp eq i32 %6, 3, !dbg !3216
  br i1 %cmp, label %if.then, label %if.end, !dbg !3218

if.then:                                          ; preds = %while.end
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3219
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3219
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !3219
  %bf.load6 = load i64, i64* %8, align 8, !dbg !3220
  %bf.clear7 = and i64 %bf.load6, -262145, !dbg !3220
  %bf.set = or i64 %bf.clear7, 262144, !dbg !3220
  store i64 %bf.set, i64* %8, align 8, !dbg !3220
  br label %if.end, !dbg !3219

if.end:                                           ; preds = %if.then, %while.end
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3221
  store %union.tree_node* %9, %union.tree_node** %save_context, align 8, !dbg !3222
  %10 = load %union.tree_node*, %union.tree_node** %context.addr, align 8, !dbg !3223
  store %union.tree_node* %10, %union.tree_node** @current_function_decl, align 8, !dbg !3224
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3225
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3225
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3225
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3225
  %call8 = call %union.tree_node* @build_pointer_type(%union.tree_node* %12), !dbg !3225
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3225
  %call9 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %call8, %union.tree_node* %13), !dbg !3225
  store %union.tree_node* %call9, %union.tree_node** %retval1, align 8, !dbg !3226
  %14 = load %union.tree_node*, %union.tree_node** %save_context, align 8, !dbg !3227
  store %union.tree_node* %14, %union.tree_node** @current_function_decl, align 8, !dbg !3228
  %15 = load %union.tree_node*, %union.tree_node** %retval1, align 8, !dbg !3229
  ret %union.tree_node* %15, !dbg !3230
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !3231 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3237, metadata !DIExpression()), !dbg !3238
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3239
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3239
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3239
  %bf.load = load i64, i64* %1, align 8, !dbg !3239
  %bf.clear = and i64 %bf.load, 65535, !dbg !3239
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3239
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !3240

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !3241
  br label %return, !dbg !3241

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3243
  br label %return, !dbg !3243

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !3244
  ret i8 %2, !dbg !3244
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_field_into_struct(%union.tree_node* %type, %union.tree_node* %field) #0 !dbg !3245 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node**, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3248, metadata !DIExpression()), !dbg !3249
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !3250, metadata !DIExpression()), !dbg !3251
  call void @llvm.dbg.declare(metadata %union.tree_node*** %p, metadata !3252, metadata !DIExpression()), !dbg !3253
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3254
  %1 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3255
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !3255
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3255
  store %union.tree_node* %0, %union.tree_node** %context, align 8, !dbg !3256
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3257
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !3257
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !3257
  store %union.tree_node** %values, %union.tree_node*** %p, align 8, !dbg !3259
  br label %for.cond, !dbg !3260

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !3261
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !3263
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3264
  br i1 %tobool, label %for.body, label %for.end, !dbg !3264

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3265
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !3265
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !3265
  %6 = load i32, i32* %align, align 8, !dbg !3265
  %7 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !3267
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !3267
  %decl_common2 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !3267
  %align3 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 3, !dbg !3267
  %9 = load i32, i32* %align3, align 8, !dbg !3267
  %cmp = icmp uge i32 %6, %9, !dbg !3268
  br i1 %cmp, label %if.then, label %if.end, !dbg !3269

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !3270

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3267

for.inc:                                          ; preds = %if.end
  %10 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !3271
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !3271
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !3271
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3271
  store %union.tree_node** %chain, %union.tree_node*** %p, align 8, !dbg !3272
  br label %for.cond, !dbg !3273, !llvm.loop !3274

for.end:                                          ; preds = %if.then, %for.cond
  %12 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !3276
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !3277
  %14 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3278
  %common4 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !3278
  %chain5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1, !dbg !3278
  store %union.tree_node* %13, %union.tree_node** %chain5, align 8, !dbg !3279
  %15 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3280
  %16 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !3281
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !dbg !3282
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3283
  %type6 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !3283
  %align7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 7, !dbg !3283
  %18 = load i32, i32* %align7, align 8, !dbg !3283
  %19 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3285
  %decl_common8 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !3285
  %align9 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common8, i32 0, i32 3, !dbg !3285
  %20 = load i32, i32* %align9, align 8, !dbg !3285
  %cmp10 = icmp ult i32 %18, %20, !dbg !3286
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !3287

if.then11:                                        ; preds = %for.end
  %21 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !3288
  %decl_common12 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !3288
  %align13 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common12, i32 0, i32 3, !dbg !3288
  %22 = load i32, i32* %align13, align 8, !dbg !3288
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3289
  %type14 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !3289
  %align15 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 7, !dbg !3289
  store i32 %22, i32* %align15, align 8, !dbg !3290
  br label %if.end16, !dbg !3289

if.end16:                                         ; preds = %if.then11, %for.end
  ret void, !dbg !3291
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @lower_nested_functions(%union.tree_node* %fndecl) #0 !dbg !3292 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %cgn = alloca %struct.cgraph_node*, align 8
  %root = alloca %struct.nesting_info*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3293, metadata !DIExpression()), !dbg !3294
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cgn, metadata !3295, metadata !DIExpression()), !dbg !3296
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root, metadata !3297, metadata !DIExpression()), !dbg !3298
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3299
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !3300
  store %struct.cgraph_node* %call, %struct.cgraph_node** %cgn, align 8, !dbg !3301
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !3302
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 6, !dbg !3304
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !3304
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !3302
  br i1 %tobool, label %if.end, label %if.then, !dbg !3305

if.then:                                          ; preds = %entry
  br label %if.end10, !dbg !3306

if.end:                                           ; preds = %entry
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !3307
  call void @gimplify_all_functions(%struct.cgraph_node* %3), !dbg !3308
  %call1 = call %struct._IO_FILE* @dump_begin(i32 6, i32* @dump_flags), !dbg !3309
  store %struct._IO_FILE* %call1, %struct._IO_FILE** @dump_file, align 8, !dbg !3310
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3311
  %tobool2 = icmp ne %struct._IO_FILE* %4, null, !dbg !3311
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !3313

if.then3:                                         ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3314
  %6 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !3315
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3316
  %call4 = call i8* %6(%union.tree_node* %7, i32 2), !dbg !3317
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %call4), !dbg !3318
  br label %if.end6, !dbg !3318

if.end6:                                          ; preds = %if.then3, %if.end
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @nesting_info_bitmap_obstack), !dbg !3319
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !3320
  %call7 = call %struct.nesting_info* @create_nesting_tree(%struct.cgraph_node* %8), !dbg !3321
  store %struct.nesting_info* %call7, %struct.nesting_info** %root, align 8, !dbg !3322
  %9 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3323
  call void @walk_all_functions(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %9), !dbg !3324
  %10 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3325
  call void @walk_all_functions(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %10), !dbg !3326
  %11 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3327
  call void @walk_all_functions(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nl_goto_reference, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %11), !dbg !3328
  %12 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3329
  call void @walk_all_functions(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nl_goto_receiver, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %12), !dbg !3330
  %13 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3331
  call void @convert_all_function_calls(%struct.nesting_info* %13), !dbg !3332
  %14 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3333
  call void @finalize_nesting_tree(%struct.nesting_info* %14), !dbg !3334
  %15 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3335
  call void @unnest_nesting_tree(%struct.nesting_info* %15), !dbg !3336
  %16 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !3337
  call void @free_nesting_tree(%struct.nesting_info* %16), !dbg !3338
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @nesting_info_bitmap_obstack), !dbg !3339
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3340
  %tobool8 = icmp ne %struct._IO_FILE* %17, null, !dbg !3340
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3342

if.then9:                                         ; preds = %if.end6
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3343
  call void @dump_end(i32 6, %struct._IO_FILE* %18), !dbg !3345
  store %struct._IO_FILE* null, %struct._IO_FILE** @dump_file, align 8, !dbg !3346
  br label %if.end10, !dbg !3347

if.end10:                                         ; preds = %if.then, %if.then9, %if.end6
  ret void, !dbg !3348
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimplify_all_functions(%struct.cgraph_node* %root) #0 !dbg !3349 {
entry:
  %root.addr = alloca %struct.cgraph_node*, align 8
  %iter = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %root, %struct.cgraph_node** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %root.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %iter, metadata !3352, metadata !DIExpression()), !dbg !3353
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %root.addr, align 8, !dbg !3354
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3356
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3356
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %1), !dbg !3357
  %tobool = icmp ne %struct.gimple_seq_d* %call, null, !dbg !3357
  br i1 %tobool, label %if.end, label %if.then, !dbg !3358

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %root.addr, align 8, !dbg !3359
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !3360
  %3 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3360
  call void @gimplify_function_tree(%union.tree_node* %3), !dbg !3361
  br label %if.end, !dbg !3361

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %root.addr, align 8, !dbg !3362
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 6, !dbg !3364
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !3364
  store %struct.cgraph_node* %5, %struct.cgraph_node** %iter, align 8, !dbg !3365
  br label %for.cond, !dbg !3366

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %iter, align 8, !dbg !3367
  %tobool2 = icmp ne %struct.cgraph_node* %6, null, !dbg !3369
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3369

for.body:                                         ; preds = %for.cond
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %iter, align 8, !dbg !3370
  call void @gimplify_all_functions(%struct.cgraph_node* %7), !dbg !3371
  br label %for.inc, !dbg !3371

for.inc:                                          ; preds = %for.body
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %iter, align 8, !dbg !3372
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 7, !dbg !3373
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !3373
  store %struct.cgraph_node* %9, %struct.cgraph_node** %iter, align 8, !dbg !3374
  br label %for.cond, !dbg !3375, !llvm.loop !3376

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3378
}

declare dso_local %struct._IO_FILE* @dump_begin(i32, i32*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.nesting_info* @create_nesting_tree(%struct.cgraph_node* %cgn) #0 !dbg !3379 {
entry:
  %cgn.addr = alloca %struct.cgraph_node*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %sub = alloca %struct.nesting_info*, align 8
  store %struct.cgraph_node* %cgn, %struct.cgraph_node** %cgn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cgn.addr, metadata !3382, metadata !DIExpression()), !dbg !3383
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !3384, metadata !DIExpression()), !dbg !3385
  %call = call i8* @xcalloc(i64 1, i64 120), !dbg !3386
  %0 = bitcast i8* %call to %struct.nesting_info*, !dbg !3386
  store %struct.nesting_info* %0, %struct.nesting_info** %info, align 8, !dbg !3385
  %call1 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !3387
  %1 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3388
  %field_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %1, i32 0, i32 3, !dbg !3389
  store %struct.pointer_map_t* %call1, %struct.pointer_map_t** %field_map, align 8, !dbg !3390
  %call2 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !3391
  %2 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3392
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 4, !dbg !3393
  store %struct.pointer_map_t* %call2, %struct.pointer_map_t** %var_map, align 8, !dbg !3394
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @nesting_info_bitmap_obstack), !dbg !3395
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3396
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 5, !dbg !3397
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !3398
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3399
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !3400
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3400
  %6 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3401
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %6, i32 0, i32 6, !dbg !3402
  store %union.tree_node* %5, %union.tree_node** %context, align 8, !dbg !3403
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3404
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 6, !dbg !3406
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !3406
  store %struct.cgraph_node* %8, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3407
  br label %for.cond, !dbg !3408

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3409
  %tobool = icmp ne %struct.cgraph_node* %9, null, !dbg !3411
  br i1 %tobool, label %for.body, label %for.end, !dbg !3411

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %sub, metadata !3412, metadata !DIExpression()), !dbg !3414
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3415
  %call4 = call %struct.nesting_info* @create_nesting_tree(%struct.cgraph_node* %10), !dbg !3416
  store %struct.nesting_info* %call4, %struct.nesting_info** %sub, align 8, !dbg !3414
  %11 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3417
  %12 = load %struct.nesting_info*, %struct.nesting_info** %sub, align 8, !dbg !3418
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %12, i32 0, i32 0, !dbg !3419
  store %struct.nesting_info* %11, %struct.nesting_info** %outer, align 8, !dbg !3420
  %13 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3421
  %inner = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %13, i32 0, i32 1, !dbg !3422
  %14 = load %struct.nesting_info*, %struct.nesting_info** %inner, align 8, !dbg !3422
  %15 = load %struct.nesting_info*, %struct.nesting_info** %sub, align 8, !dbg !3423
  %next = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 2, !dbg !3424
  store %struct.nesting_info* %14, %struct.nesting_info** %next, align 8, !dbg !3425
  %16 = load %struct.nesting_info*, %struct.nesting_info** %sub, align 8, !dbg !3426
  %17 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3427
  %inner5 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %17, i32 0, i32 1, !dbg !3428
  store %struct.nesting_info* %16, %struct.nesting_info** %inner5, align 8, !dbg !3429
  br label %for.inc, !dbg !3430

for.inc:                                          ; preds = %for.body
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3431
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 7, !dbg !3432
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !3432
  store %struct.cgraph_node* %19, %struct.cgraph_node** %cgn.addr, align 8, !dbg !3433
  br label %for.cond, !dbg !3434, !llvm.loop !3435

for.end:                                          ; preds = %for.cond
  %20 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3437
  %context6 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 6, !dbg !3439
  %21 = load %union.tree_node*, %union.tree_node** %context6, align 8, !dbg !3439
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3440
  %context7 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %22, i32 0, i32 6, !dbg !3441
  %23 = load %union.tree_node*, %union.tree_node** %context7, align 8, !dbg !3441
  %call8 = call zeroext i8 @check_for_nested_with_variably_modified(%union.tree_node* %21, %union.tree_node* %23), !dbg !3442
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3442
  br i1 %tobool9, label %if.then, label %if.end, !dbg !3443

if.then:                                          ; preds = %for.end
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3444
  %context10 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 6, !dbg !3444
  %25 = load %union.tree_node*, %union.tree_node** %context10, align 8, !dbg !3444
  %function_decl = bitcast %union.tree_node* %25 to %struct.tree_function_decl*, !dbg !3444
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3444
  %bf.load = load i32, i32* %uninlinable, align 8, !dbg !3445
  %bf.clear = and i32 %bf.load, -32769, !dbg !3445
  %bf.set = or i32 %bf.clear, 32768, !dbg !3445
  store i32 %bf.set, i32* %uninlinable, align 8, !dbg !3445
  br label %if.end, !dbg !3444

if.end:                                           ; preds = %if.then, %for.end
  %26 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3446
  ret %struct.nesting_info* %26, !dbg !3447
}

; Function Attrs: noinline nounwind uwtable
define internal void @walk_all_functions(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.nesting_info* %root) #0 !dbg !3448 {
entry:
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %root.addr = alloca %struct.nesting_info*, align 8
  %n = alloca %struct.nesting_info*, align 8
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !3462, metadata !DIExpression()), !dbg !3463
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !3464, metadata !DIExpression()), !dbg !3465
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !3466, metadata !DIExpression()), !dbg !3467
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %n, metadata !3468, metadata !DIExpression()), !dbg !3469
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !3470
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %0), !dbg !3470
  store %struct.nesting_info* %call, %struct.nesting_info** %n, align 8, !dbg !3470
  br label %for.cond, !dbg !3470

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !3472
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !3470
  br i1 %tobool, label %for.body, label %for.end, !dbg !3470

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !3474
  %3 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !3475
  %4 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !3476
  call void @walk_function(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %2, %union.tree_node* (%union.tree_node**, i32*, i8*)* %3, %struct.nesting_info* %4), !dbg !3477
  br label %for.inc, !dbg !3477

for.inc:                                          ; preds = %for.body
  %5 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !3472
  %call1 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %5), !dbg !3472
  store %struct.nesting_info* %call1, %struct.nesting_info** %n, align 8, !dbg !3472
  br label %for.cond, !dbg !3472, !llvm.loop !3478

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3480
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_nonlocal_reference_stmt(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !3481 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %save_local_var_chain = alloca %union.tree_node*, align 8
  %save_suppress = alloca %struct.bitmap_head_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %c = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !3482, metadata !DIExpression()), !dbg !3483
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !3484, metadata !DIExpression()), !dbg !3485
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !3486, metadata !DIExpression()), !dbg !3487
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !3488, metadata !DIExpression()), !dbg !3489
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3490
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !3491
  %1 = load i8*, i8** %info1, align 8, !dbg !3491
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !3492
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !3489
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_local_var_chain, metadata !3493, metadata !DIExpression()), !dbg !3494
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %save_suppress, metadata !3495, metadata !DIExpression()), !dbg !3496
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3497, metadata !DIExpression()), !dbg !3498
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3499
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !3500
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !3498
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3501
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !3502
  switch i32 %call2, label %sw.default [
    i32 3, label %sw.bb
    i32 26, label %sw.bb4
    i32 27, label %sw.bb4
    i32 23, label %sw.bb24
    i32 30, label %sw.bb30
    i32 32, label %sw.bb36
    i32 29, label %sw.bb42
    i32 24, label %sw.bb42
    i32 25, label %sw.bb42
    i32 10, label %sw.bb44
    i32 1, label %sw.bb51
  ], !dbg !3503

sw.bb:                                            ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3504
  %call3 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %5), !dbg !3504
  %base = bitcast %union.tree_node* %call3 to %struct.tree_base*, !dbg !3504
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !3504
  %bf.load = load i64, i64* %6, align 8, !dbg !3504
  %bf.clear = and i64 %bf.load, 65535, !dbg !3504
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3504
  %cmp = icmp ne i32 %bf.cast, 30, !dbg !3507
  br i1 %cmp, label %if.then, label %if.end, !dbg !3508

if.then:                                          ; preds = %sw.bb
  %7 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3509
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %7, i32 0, i32 3, !dbg !3511
  store i8 1, i8* %val_only, align 8, !dbg !3512
  %8 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3513
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %8, i32 0, i32 4, !dbg !3514
  store i8 0, i8* %is_lhs, align 1, !dbg !3515
  %9 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !3516
  store i8 1, i8* %9, align 1, !dbg !3517
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3518
  br label %return, !dbg !3518

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog, !dbg !3519

sw.bb4:                                           ; preds = %entry, %entry
  %10 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3520
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %10, i32 0, i32 5, !dbg !3521
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !3521
  store %struct.bitmap_head_def* %11, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3522
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3523
  %call5 = call %union.tree_node** @gimple_omp_taskreg_clauses_ptr(%union.gimple_statement_d* %12), !dbg !3525
  %13 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3526
  %call6 = call zeroext i8 @convert_nonlocal_omp_clauses(%union.tree_node** %call5, %struct.walk_stmt_info* %13), !dbg !3527
  %tobool = icmp ne i8 %call6, 0, !dbg !3527
  br i1 %tobool, label %if.then7, label %if.end12, !dbg !3528

if.then7:                                         ; preds = %sw.bb4
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !3529, metadata !DIExpression()), !dbg !3531
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3532, metadata !DIExpression()), !dbg !3533
  %14 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3534
  %call8 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %14), !dbg !3535
  store %union.tree_node* %call8, %union.tree_node** %decl, align 8, !dbg !3536
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3537
  %call9 = call i32 @gimple_location(%union.gimple_statement_d* %15), !dbg !3538
  %call10 = call %union.tree_node* @build_omp_clause(i32 %call9, i32 3), !dbg !3539
  store %union.tree_node* %call10, %union.tree_node** %c, align 8, !dbg !3540
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3541
  %17 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3542
  %omp_clause = bitcast %union.tree_node* %17 to %struct.tree_omp_clause*, !dbg !3542
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !3542
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !3542
  store %union.tree_node* %16, %union.tree_node** %arrayidx, align 8, !dbg !3543
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3544
  %call11 = call %union.tree_node* @gimple_omp_taskreg_clauses(%union.gimple_statement_d* %18), !dbg !3545
  %19 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3546
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !3546
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3546
  store %union.tree_node* %call11, %union.tree_node** %chain, align 8, !dbg !3547
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3548
  %21 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3549
  call void @gimple_omp_taskreg_set_clauses(%union.gimple_statement_d* %20, %union.tree_node* %21), !dbg !3550
  br label %if.end12, !dbg !3551

if.end12:                                         ; preds = %if.then7, %sw.bb4
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3552
  %new_local_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %22, i32 0, i32 7, !dbg !3553
  %23 = load %union.tree_node*, %union.tree_node** %new_local_var_chain, align 8, !dbg !3553
  store %union.tree_node* %23, %union.tree_node** %save_local_var_chain, align 8, !dbg !3554
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3555
  %new_local_var_chain13 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 7, !dbg !3556
  store %union.tree_node* null, %union.tree_node** %new_local_var_chain13, align 8, !dbg !3557
  %25 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3558
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3559
  %call14 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %26), !dbg !3560
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %25, %struct.gimple_seq_d* %call14), !dbg !3561
  %27 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3562
  %new_local_var_chain15 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %27, i32 0, i32 7, !dbg !3564
  %28 = load %union.tree_node*, %union.tree_node** %new_local_var_chain15, align 8, !dbg !3564
  %tobool16 = icmp ne %union.tree_node* %28, null, !dbg !3562
  br i1 %tobool16, label %if.then17, label %if.end21, !dbg !3565

if.then17:                                        ; preds = %if.end12
  %29 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3566
  %new_local_var_chain18 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %29, i32 0, i32 7, !dbg !3567
  %30 = load %union.tree_node*, %union.tree_node** %new_local_var_chain18, align 8, !dbg !3567
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3568
  %call19 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %31), !dbg !3569
  %call20 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call19), !dbg !3570
  call void @declare_vars(%union.tree_node* %30, %union.gimple_statement_d* %call20, i8 zeroext 0), !dbg !3571
  br label %if.end21, !dbg !3571

if.end21:                                         ; preds = %if.then17, %if.end12
  %32 = load %union.tree_node*, %union.tree_node** %save_local_var_chain, align 8, !dbg !3572
  %33 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3573
  %new_local_var_chain22 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %33, i32 0, i32 7, !dbg !3574
  store %union.tree_node* %32, %union.tree_node** %new_local_var_chain22, align 8, !dbg !3575
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3576
  %35 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3577
  %suppress_expansion23 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %35, i32 0, i32 5, !dbg !3578
  store %struct.bitmap_head_def* %34, %struct.bitmap_head_def** %suppress_expansion23, align 8, !dbg !3579
  br label %sw.epilog, !dbg !3580

sw.bb24:                                          ; preds = %entry
  %36 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3581
  %suppress_expansion25 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %36, i32 0, i32 5, !dbg !3582
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion25, align 8, !dbg !3582
  store %struct.bitmap_head_def* %37, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3583
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3584
  %call26 = call %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %38), !dbg !3585
  %39 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3586
  %call27 = call zeroext i8 @convert_nonlocal_omp_clauses(%union.tree_node** %call26, %struct.walk_stmt_info* %39), !dbg !3587
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3588
  %41 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3589
  call void @walk_gimple_omp_for(%union.gimple_statement_d* %40, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %41), !dbg !3590
  %42 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3591
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3592
  %call28 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %43), !dbg !3593
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %42, %struct.gimple_seq_d* %call28), !dbg !3594
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3595
  %45 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3596
  %suppress_expansion29 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %45, i32 0, i32 5, !dbg !3597
  store %struct.bitmap_head_def* %44, %struct.bitmap_head_def** %suppress_expansion29, align 8, !dbg !3598
  br label %sw.epilog, !dbg !3599

sw.bb30:                                          ; preds = %entry
  %46 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3600
  %suppress_expansion31 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %46, i32 0, i32 5, !dbg !3601
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion31, align 8, !dbg !3601
  store %struct.bitmap_head_def* %47, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3602
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3603
  %call32 = call %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %48), !dbg !3604
  %49 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3605
  %call33 = call zeroext i8 @convert_nonlocal_omp_clauses(%union.tree_node** %call32, %struct.walk_stmt_info* %49), !dbg !3606
  %50 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3607
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3608
  %call34 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %51), !dbg !3609
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %50, %struct.gimple_seq_d* %call34), !dbg !3610
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3611
  %53 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3612
  %suppress_expansion35 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %53, i32 0, i32 5, !dbg !3613
  store %struct.bitmap_head_def* %52, %struct.bitmap_head_def** %suppress_expansion35, align 8, !dbg !3614
  br label %sw.epilog, !dbg !3615

sw.bb36:                                          ; preds = %entry
  %54 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3616
  %suppress_expansion37 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %54, i32 0, i32 5, !dbg !3617
  %55 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion37, align 8, !dbg !3617
  store %struct.bitmap_head_def* %55, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3618
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3619
  %call38 = call %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %56), !dbg !3620
  %57 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3621
  %call39 = call zeroext i8 @convert_nonlocal_omp_clauses(%union.tree_node** %call38, %struct.walk_stmt_info* %57), !dbg !3622
  %58 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3623
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3624
  %call40 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %59), !dbg !3625
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %58, %struct.gimple_seq_d* %call40), !dbg !3626
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3627
  %61 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3628
  %suppress_expansion41 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %61, i32 0, i32 5, !dbg !3629
  store %struct.bitmap_head_def* %60, %struct.bitmap_head_def** %suppress_expansion41, align 8, !dbg !3630
  br label %sw.epilog, !dbg !3631

sw.bb42:                                          ; preds = %entry, %entry, %entry
  %62 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3632
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3633
  %call43 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %63), !dbg !3634
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %62, %struct.gimple_seq_d* %call43), !dbg !3635
  br label %sw.epilog, !dbg !3636

sw.bb44:                                          ; preds = %entry
  %64 = load i32, i32* @optimize, align 4, !dbg !3637
  %tobool45 = icmp ne i32 %64, 0, !dbg !3637
  br i1 %tobool45, label %if.end50, label %land.lhs.true, !dbg !3639

land.lhs.true:                                    ; preds = %sw.bb44
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3640
  %call46 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %65), !dbg !3641
  %tobool47 = icmp ne %union.tree_node* %call46, null, !dbg !3641
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !3642

if.then48:                                        ; preds = %land.lhs.true
  %66 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3643
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3644
  %call49 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %67), !dbg !3645
  call void @note_nonlocal_block_vlas(%struct.nesting_info* %66, %union.tree_node* %call49), !dbg !3646
  br label %if.end50, !dbg !3646

if.end50:                                         ; preds = %if.then48, %land.lhs.true, %sw.bb44
  %68 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !3647
  store i8 0, i8* %68, align 1, !dbg !3648
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3649
  br label %return, !dbg !3649

sw.bb51:                                          ; preds = %entry
  %69 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3650
  %val_only52 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %69, i32 0, i32 3, !dbg !3651
  store i8 1, i8* %val_only52, align 8, !dbg !3652
  %70 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3653
  %is_lhs53 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %70, i32 0, i32 4, !dbg !3654
  store i8 0, i8* %is_lhs53, align 1, !dbg !3655
  %71 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !3656
  store i8 0, i8* %71, align 1, !dbg !3657
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3658
  br label %return, !dbg !3658

sw.default:                                       ; preds = %entry
  %72 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !3659
  store i8 0, i8* %72, align 1, !dbg !3660
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3661
  br label %return, !dbg !3661

sw.epilog:                                        ; preds = %sw.bb42, %sw.bb36, %sw.bb30, %sw.bb24, %if.end21, %if.end
  %73 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !3662
  store i8 1, i8* %73, align 1, !dbg !3663
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3664
  br label %return, !dbg !3664

return:                                           ; preds = %sw.epilog, %sw.default, %sw.bb51, %if.end50, %if.then
  %74 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3665
  ret %union.tree_node* %74, !dbg !3665
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_nonlocal_reference_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !3666 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %t = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %target_context = alloca %union.tree_node*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %save_val_only = alloca i8, align 1
  %save_context = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !3667, metadata !DIExpression()), !dbg !3668
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !3669, metadata !DIExpression()), !dbg !3670
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3671, metadata !DIExpression()), !dbg !3672
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !3673, metadata !DIExpression()), !dbg !3674
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3675
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !3676
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !3674
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !3677, metadata !DIExpression()), !dbg !3679
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3680
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !3681
  %3 = load i8*, i8** %info1, align 8, !dbg !3681
  %4 = bitcast i8* %3 to %struct.nesting_info*, !dbg !3682
  store %struct.nesting_info* %4, %struct.nesting_info** %info, align 8, !dbg !3679
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3683, metadata !DIExpression()), !dbg !3684
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3685
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !3686
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !3684
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !3687
  store i32 0, i32* %7, align 4, !dbg !3688
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3689
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !3689
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !3689
  %bf.load = load i64, i64* %9, align 8, !dbg !3689
  %bf.clear = and i64 %bf.load, 65535, !dbg !3689
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3689
  switch i32 %bf.cast, label %sw.default [
    i32 32, label %sw.bb
    i32 34, label %sw.bb11
    i32 30, label %sw.bb44
    i32 121, label %sw.bb53
    i32 43, label %sw.bb71
    i32 44, label %sw.bb71
    i32 41, label %sw.bb71
    i32 45, label %sw.bb71
    i32 46, label %sw.bb71
    i32 42, label %sw.bb71
    i32 118, label %sw.bb138
  ], !dbg !3690

sw.bb:                                            ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3691
  %base2 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3691
  %11 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3691
  %bf.load3 = load i64, i64* %11, align 8, !dbg !3691
  %bf.lshr = lshr i64 %bf.load3, 26, !dbg !3691
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !3691
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3691
  %tobool = icmp ne i32 %bf.cast5, 0, !dbg !3691
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3694

lor.lhs.false:                                    ; preds = %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3695
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !3695
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3695
  %13 = bitcast i40* %decl_flag_1 to i64*, !dbg !3695
  %bf.load6 = load i64, i64* %13, align 8, !dbg !3695
  %bf.lshr7 = lshr i64 %bf.load6, 25, !dbg !3695
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !3695
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !3695
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !3695
  br i1 %tobool10, label %if.then, label %if.end, !dbg !3696

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  br label %sw.epilog, !dbg !3697

if.end:                                           ; preds = %lor.lhs.false
  br label %sw.bb11, !dbg !3695

sw.bb11:                                          ; preds = %entry, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3698
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %14), !dbg !3700
  %15 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3701
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 6, !dbg !3702
  %16 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3702
  %cmp = icmp ne %union.tree_node* %call, %16, !dbg !3703
  br i1 %cmp, label %if.then12, label %if.end43, !dbg !3704

if.then12:                                        ; preds = %sw.bb11
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !3705, metadata !DIExpression()), !dbg !3707
  %17 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3708
  %changed = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %17, i32 0, i32 5, !dbg !3709
  store i8 1, i8* %changed, align 2, !dbg !3710
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3711
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3712
  %call13 = call %union.tree_node* @get_nonlocal_debug_decl(%struct.nesting_info* %18, %union.tree_node* %19), !dbg !3713
  store %union.tree_node* %call13, %union.tree_node** %x, align 8, !dbg !3714
  %20 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3715
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 5, !dbg !3717
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !3717
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3718
  %decl_minimal = bitcast %union.tree_node* %22 to %struct.tree_decl_minimal*, !dbg !3718
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3718
  %23 = load i32, i32* %uid, align 4, !dbg !3718
  %call14 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %21, i32 %23), !dbg !3719
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3719
  br i1 %tobool15, label %if.end32, label %if.then16, !dbg !3720

if.then16:                                        ; preds = %if.then12
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context, metadata !3721, metadata !DIExpression()), !dbg !3723
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3724
  %call17 = call %union.tree_node* @decl_function_context(%union.tree_node* %24), !dbg !3725
  store %union.tree_node* %call17, %union.tree_node** %target_context, align 8, !dbg !3723
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !3726, metadata !DIExpression()), !dbg !3727
  %25 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3728
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %25, i32 0, i32 0, !dbg !3730
  %26 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !3730
  store %struct.nesting_info* %26, %struct.nesting_info** %i, align 8, !dbg !3731
  br label %for.cond, !dbg !3732

for.cond:                                         ; preds = %for.inc, %if.then16
  %27 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !3733
  %context18 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %27, i32 0, i32 6, !dbg !3735
  %28 = load %union.tree_node*, %union.tree_node** %context18, align 8, !dbg !3735
  %29 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !3736
  %cmp19 = icmp ne %union.tree_node* %28, %29, !dbg !3737
  br i1 %cmp19, label %for.body, label %for.end, !dbg !3738

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !3739

for.inc:                                          ; preds = %for.body
  %30 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !3740
  %outer20 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %30, i32 0, i32 0, !dbg !3741
  %31 = load %struct.nesting_info*, %struct.nesting_info** %outer20, align 8, !dbg !3741
  store %struct.nesting_info* %31, %struct.nesting_info** %i, align 8, !dbg !3742
  br label %for.cond, !dbg !3743, !llvm.loop !3744

for.end:                                          ; preds = %for.cond
  %32 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !3746
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3747
  %call21 = call %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %32, %union.tree_node* %33, i32 1), !dbg !3748
  store %union.tree_node* %call21, %union.tree_node** %x, align 8, !dbg !3749
  %34 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3750
  %35 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !3751
  %36 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3752
  %37 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3753
  %gsi = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %37, i32 0, i32 0, !dbg !3754
  %call22 = call %union.tree_node* @get_frame_field(%struct.nesting_info* %34, %union.tree_node* %35, %union.tree_node* %36, %struct.gimple_stmt_iterator* %gsi), !dbg !3755
  store %union.tree_node* %call22, %union.tree_node** %x, align 8, !dbg !3756
  %38 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3757
  %call23 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %38), !dbg !3759
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3759
  br i1 %tobool24, label %if.then25, label %if.end31, !dbg !3760

if.then25:                                        ; preds = %for.end
  %39 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3761
  %40 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3763
  %41 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3764
  %gsi26 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %41, i32 0, i32 0, !dbg !3765
  %call27 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %39, %union.tree_node* %40, %struct.gimple_stmt_iterator* %gsi26), !dbg !3766
  store %union.tree_node* %call27, %union.tree_node** %x, align 8, !dbg !3767
  %42 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3768
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3768
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3768
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3768
  %common28 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !3768
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !3768
  %44 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !3768
  %45 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3768
  %call30 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %44, %union.tree_node* %45), !dbg !3768
  store %union.tree_node* %call30, %union.tree_node** %x, align 8, !dbg !3769
  br label %if.end31, !dbg !3770

if.end31:                                         ; preds = %if.then25, %for.end
  br label %if.end32, !dbg !3771

if.end32:                                         ; preds = %if.end31, %if.then12
  %46 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3772
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %46, i32 0, i32 3, !dbg !3774
  %47 = load i8, i8* %val_only, align 8, !dbg !3774
  %tobool33 = icmp ne i8 %47, 0, !dbg !3772
  br i1 %tobool33, label %if.then34, label %if.end42, !dbg !3775

if.then34:                                        ; preds = %if.end32
  %48 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3776
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %48, i32 0, i32 4, !dbg !3779
  %49 = load i8, i8* %is_lhs, align 1, !dbg !3779
  %tobool35 = icmp ne i8 %49, 0, !dbg !3776
  br i1 %tobool35, label %if.then36, label %if.else, !dbg !3780

if.then36:                                        ; preds = %if.then34
  %50 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3781
  %51 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3782
  %52 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3783
  %gsi37 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %52, i32 0, i32 0, !dbg !3784
  %call38 = call %union.tree_node* @save_tmp_var(%struct.nesting_info* %50, %union.tree_node* %51, %struct.gimple_stmt_iterator* %gsi37), !dbg !3785
  store %union.tree_node* %call38, %union.tree_node** %x, align 8, !dbg !3786
  br label %if.end41, !dbg !3787

if.else:                                          ; preds = %if.then34
  %53 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3788
  %54 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3789
  %55 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3790
  %gsi39 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %55, i32 0, i32 0, !dbg !3791
  %call40 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %53, %union.tree_node* %54, %struct.gimple_stmt_iterator* %gsi39), !dbg !3792
  store %union.tree_node* %call40, %union.tree_node** %x, align 8, !dbg !3793
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.then36
  br label %if.end42, !dbg !3794

if.end42:                                         ; preds = %if.end41, %if.end32
  %56 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !3795
  %57 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3796
  store %union.tree_node* %56, %union.tree_node** %57, align 8, !dbg !3797
  br label %if.end43, !dbg !3798

if.end43:                                         ; preds = %if.end42, %sw.bb11
  br label %sw.epilog, !dbg !3799

sw.bb44:                                          ; preds = %entry
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3800
  %call45 = call %union.tree_node* @decl_function_context(%union.tree_node* %58), !dbg !3802
  %59 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3803
  %context46 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %59, i32 0, i32 6, !dbg !3804
  %60 = load %union.tree_node*, %union.tree_node** %context46, align 8, !dbg !3804
  %cmp47 = icmp ne %union.tree_node* %call45, %60, !dbg !3805
  br i1 %cmp47, label %if.then48, label %if.end52, !dbg !3806

if.then48:                                        ; preds = %sw.bb44
  %61 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3807
  %base49 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3807
  %62 = bitcast %struct.tree_base* %base49 to i64*, !dbg !3807
  %bf.load50 = load i64, i64* %62, align 8, !dbg !3808
  %bf.clear51 = and i64 %bf.load50, -65537, !dbg !3808
  %bf.set = or i64 %bf.clear51, 65536, !dbg !3808
  store i64 %bf.set, i64* %62, align 8, !dbg !3808
  br label %if.end52, !dbg !3807

if.end52:                                         ; preds = %if.then48, %sw.bb44
  br label %sw.epilog, !dbg !3809

sw.bb53:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %save_val_only, metadata !3810, metadata !DIExpression()), !dbg !3812
  %63 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3813
  %val_only54 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %63, i32 0, i32 3, !dbg !3814
  %64 = load i8, i8* %val_only54, align 8, !dbg !3814
  store i8 %64, i8* %save_val_only, align 1, !dbg !3812
  %65 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3815
  %val_only55 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %65, i32 0, i32 3, !dbg !3816
  store i8 0, i8* %val_only55, align 8, !dbg !3817
  %66 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3818
  %is_lhs56 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %66, i32 0, i32 4, !dbg !3819
  store i8 0, i8* %is_lhs56, align 1, !dbg !3820
  %67 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3821
  %changed57 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %67, i32 0, i32 5, !dbg !3822
  store i8 0, i8* %changed57, align 2, !dbg !3823
  %68 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3824
  %exp = bitcast %union.tree_node* %68 to %struct.tree_exp*, !dbg !3824
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3824
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3824
  %69 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3824
  %70 = bitcast %struct.walk_stmt_info* %69 to i8*, !dbg !3824
  %call58 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %70, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3824
  %71 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3825
  %val_only59 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %71, i32 0, i32 3, !dbg !3826
  store i8 1, i8* %val_only59, align 8, !dbg !3827
  %72 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3828
  %changed60 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %72, i32 0, i32 5, !dbg !3830
  %73 = load i8, i8* %changed60, align 2, !dbg !3830
  %tobool61 = icmp ne i8 %73, 0, !dbg !3828
  br i1 %tobool61, label %if.then62, label %if.end70, !dbg !3831

if.then62:                                        ; preds = %sw.bb53
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_context, metadata !3832, metadata !DIExpression()), !dbg !3834
  %74 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3835
  store %union.tree_node* %74, %union.tree_node** %save_context, align 8, !dbg !3836
  %75 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3837
  %context63 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %75, i32 0, i32 6, !dbg !3838
  %76 = load %union.tree_node*, %union.tree_node** %context63, align 8, !dbg !3838
  store %union.tree_node* %76, %union.tree_node** @current_function_decl, align 8, !dbg !3839
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3840
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %77), !dbg !3841
  %78 = load %union.tree_node*, %union.tree_node** %save_context, align 8, !dbg !3842
  store %union.tree_node* %78, %union.tree_node** @current_function_decl, align 8, !dbg !3843
  %79 = load i8, i8* %save_val_only, align 1, !dbg !3844
  %tobool64 = icmp ne i8 %79, 0, !dbg !3844
  br i1 %tobool64, label %if.then65, label %if.end69, !dbg !3846

if.then65:                                        ; preds = %if.then62
  %80 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3847
  %info66 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %80, i32 0, i32 1, !dbg !3848
  %81 = load i8*, i8** %info66, align 8, !dbg !3848
  %82 = bitcast i8* %81 to %struct.nesting_info*, !dbg !3849
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3850
  %84 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3851
  %gsi67 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %84, i32 0, i32 0, !dbg !3852
  %call68 = call %union.tree_node* @gsi_gimplify_val(%struct.nesting_info* %82, %union.tree_node* %83, %struct.gimple_stmt_iterator* %gsi67), !dbg !3853
  %85 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3854
  store %union.tree_node* %call68, %union.tree_node** %85, align 8, !dbg !3855
  br label %if.end69, !dbg !3856

if.end69:                                         ; preds = %if.then65, %if.then62
  br label %if.end70, !dbg !3857

if.end70:                                         ; preds = %if.end69, %sw.bb53
  br label %sw.epilog, !dbg !3858

sw.bb71:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %86 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3859
  %val_only72 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %86, i32 0, i32 3, !dbg !3860
  store i8 1, i8* %val_only72, align 8, !dbg !3861
  %87 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3862
  %is_lhs73 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %87, i32 0, i32 4, !dbg !3863
  store i8 0, i8* %is_lhs73, align 1, !dbg !3864
  br label %for.cond74, !dbg !3865

for.cond74:                                       ; preds = %for.inc131, %sw.bb71
  %88 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3866
  %call75 = call zeroext i8 @handled_component_p(%union.tree_node* %88), !dbg !3869
  %tobool76 = icmp ne i8 %call75, 0, !dbg !3870
  br i1 %tobool76, label %for.body77, label %for.end135, !dbg !3870

for.body77:                                       ; preds = %for.cond74
  %89 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3871
  %base78 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !3871
  %90 = bitcast %struct.tree_base* %base78 to i64*, !dbg !3871
  %bf.load79 = load i64, i64* %90, align 8, !dbg !3871
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !3871
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !3871
  %cmp82 = icmp eq i32 %bf.cast81, 41, !dbg !3874
  br i1 %cmp82, label %if.then83, label %if.else88, !dbg !3875

if.then83:                                        ; preds = %for.body77
  %91 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3876
  %exp84 = bitcast %union.tree_node* %91 to %struct.tree_exp*, !dbg !3876
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 3, !dbg !3876
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i64 0, i64 2, !dbg !3876
  %92 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3876
  %93 = bitcast %struct.walk_stmt_info* %92 to i8*, !dbg !3876
  %call87 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx86, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %93, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3876
  br label %if.end130, !dbg !3876

if.else88:                                        ; preds = %for.body77
  %94 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3877
  %base89 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !3877
  %95 = bitcast %struct.tree_base* %base89 to i64*, !dbg !3877
  %bf.load90 = load i64, i64* %95, align 8, !dbg !3877
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !3877
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !3877
  %cmp93 = icmp eq i32 %bf.cast92, 45, !dbg !3879
  br i1 %cmp93, label %if.then100, label %lor.lhs.false94, !dbg !3880

lor.lhs.false94:                                  ; preds = %if.else88
  %96 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3881
  %base95 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !3881
  %97 = bitcast %struct.tree_base* %base95 to i64*, !dbg !3881
  %bf.load96 = load i64, i64* %97, align 8, !dbg !3881
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !3881
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !3881
  %cmp99 = icmp eq i32 %bf.cast98, 46, !dbg !3882
  br i1 %cmp99, label %if.then100, label %if.else113, !dbg !3883

if.then100:                                       ; preds = %lor.lhs.false94, %if.else88
  %98 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3884
  %exp101 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !3884
  %operands102 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp101, i32 0, i32 3, !dbg !3884
  %arrayidx103 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands102, i64 0, i64 1, !dbg !3884
  %99 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3884
  %100 = bitcast %struct.walk_stmt_info* %99 to i8*, !dbg !3884
  %call104 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx103, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %100, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3884
  %101 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3886
  %exp105 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !3886
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !3886
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 2, !dbg !3886
  %102 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3886
  %103 = bitcast %struct.walk_stmt_info* %102 to i8*, !dbg !3886
  %call108 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx107, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %103, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3886
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3887
  %exp109 = bitcast %union.tree_node* %104 to %struct.tree_exp*, !dbg !3887
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 3, !dbg !3887
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i64 0, i64 3, !dbg !3887
  %105 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3887
  %106 = bitcast %struct.walk_stmt_info* %105 to i8*, !dbg !3887
  %call112 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx111, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %106, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3887
  br label %if.end129, !dbg !3888

if.else113:                                       ; preds = %lor.lhs.false94
  %107 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3889
  %base114 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !3889
  %108 = bitcast %struct.tree_base* %base114 to i64*, !dbg !3889
  %bf.load115 = load i64, i64* %108, align 8, !dbg !3889
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !3889
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !3889
  %cmp118 = icmp eq i32 %bf.cast117, 42, !dbg !3891
  br i1 %cmp118, label %if.then119, label %if.end128, !dbg !3892

if.then119:                                       ; preds = %if.else113
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3893
  %exp120 = bitcast %union.tree_node* %109 to %struct.tree_exp*, !dbg !3893
  %operands121 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp120, i32 0, i32 3, !dbg !3893
  %arrayidx122 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands121, i64 0, i64 1, !dbg !3893
  %110 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3893
  %111 = bitcast %struct.walk_stmt_info* %110 to i8*, !dbg !3893
  %call123 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx122, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %111, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3893
  %112 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3895
  %exp124 = bitcast %union.tree_node* %112 to %struct.tree_exp*, !dbg !3895
  %operands125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 3, !dbg !3895
  %arrayidx126 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands125, i64 0, i64 2, !dbg !3895
  %113 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3895
  %114 = bitcast %struct.walk_stmt_info* %113 to i8*, !dbg !3895
  %call127 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx126, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %114, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3895
  br label %if.end128, !dbg !3896

if.end128:                                        ; preds = %if.then119, %if.else113
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then100
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.then83
  br label %for.inc131, !dbg !3897

for.inc131:                                       ; preds = %if.end130
  %115 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3898
  %exp132 = bitcast %union.tree_node* %115 to %struct.tree_exp*, !dbg !3898
  %operands133 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp132, i32 0, i32 3, !dbg !3898
  %arrayidx134 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands133, i64 0, i64 0, !dbg !3898
  store %union.tree_node** %arrayidx134, %union.tree_node*** %tp.addr, align 8, !dbg !3899
  %116 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3900
  %117 = load %union.tree_node*, %union.tree_node** %116, align 8, !dbg !3901
  store %union.tree_node* %117, %union.tree_node** %t, align 8, !dbg !3902
  br label %for.cond74, !dbg !3903, !llvm.loop !3904

for.end135:                                       ; preds = %for.cond74
  %118 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3906
  %val_only136 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %118, i32 0, i32 3, !dbg !3907
  store i8 0, i8* %val_only136, align 8, !dbg !3908
  %119 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !3909
  %120 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3909
  %121 = bitcast %struct.walk_stmt_info* %120 to i8*, !dbg !3909
  %call137 = call %union.tree_node* @walk_tree_1(%union.tree_node** %119, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, i8* %121, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !3909
  br label %sw.epilog, !dbg !3910

sw.bb138:                                         ; preds = %entry
  %122 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !3911
  store i32 1, i32* %122, align 4, !dbg !3912
  br label %sw.epilog, !dbg !3913

sw.default:                                       ; preds = %entry
  %123 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3914
  %base139 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !3914
  %124 = bitcast %struct.tree_base* %base139 to i64*, !dbg !3914
  %bf.load140 = load i64, i64* %124, align 8, !dbg !3914
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !3914
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !3914
  %idxprom = sext i32 %bf.cast142 to i64, !dbg !3914
  %arrayidx143 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3914
  %125 = load i32, i32* %arrayidx143, align 4, !dbg !3914
  %cmp144 = icmp eq i32 %125, 2, !dbg !3914
  br i1 %cmp144, label %if.end156, label %lor.lhs.false145, !dbg !3914

lor.lhs.false145:                                 ; preds = %sw.default
  %126 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3914
  %base146 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !3914
  %127 = bitcast %struct.tree_base* %base146 to i64*, !dbg !3914
  %bf.load147 = load i64, i64* %127, align 8, !dbg !3914
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !3914
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !3914
  %idxprom150 = sext i32 %bf.cast149 to i64, !dbg !3914
  %arrayidx151 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom150, !dbg !3914
  %128 = load i32, i32* %arrayidx151, align 4, !dbg !3914
  %cmp152 = icmp eq i32 %128, 3, !dbg !3914
  br i1 %cmp152, label %if.end156, label %if.then153, !dbg !3916

if.then153:                                       ; preds = %lor.lhs.false145
  %129 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !3917
  store i32 1, i32* %129, align 4, !dbg !3919
  %130 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3920
  %val_only154 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %130, i32 0, i32 3, !dbg !3921
  store i8 1, i8* %val_only154, align 8, !dbg !3922
  %131 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !3923
  %is_lhs155 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %131, i32 0, i32 4, !dbg !3924
  store i8 0, i8* %is_lhs155, align 1, !dbg !3925
  br label %if.end156, !dbg !3926

if.end156:                                        ; preds = %if.then153, %lor.lhs.false145, %sw.default
  br label %sw.epilog, !dbg !3927

sw.epilog:                                        ; preds = %if.end156, %sw.bb138, %for.end135, %if.end70, %if.end52, %if.end43, %if.then
  ret %union.tree_node* null, !dbg !3928
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_local_reference_stmt(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !3929 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %save_local_var_chain = alloca %union.tree_node*, align 8
  %save_suppress = alloca %struct.bitmap_head_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %c = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !3930, metadata !DIExpression()), !dbg !3931
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !3932, metadata !DIExpression()), !dbg !3933
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !3936, metadata !DIExpression()), !dbg !3937
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3938
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !3939
  %1 = load i8*, i8** %info1, align 8, !dbg !3939
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !3940
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !3937
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_local_var_chain, metadata !3941, metadata !DIExpression()), !dbg !3942
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %save_suppress, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3945, metadata !DIExpression()), !dbg !3946
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !3947
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !3948
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !3946
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3949
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !3950
  switch i32 %call2, label %sw.default [
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 23, label %sw.bb20
    i32 30, label %sw.bb26
    i32 32, label %sw.bb32
    i32 29, label %sw.bb38
    i32 24, label %sw.bb38
    i32 25, label %sw.bb38
    i32 1, label %sw.bb40
  ], !dbg !3951

sw.bb:                                            ; preds = %entry, %entry
  %5 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3952
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %5, i32 0, i32 5, !dbg !3954
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !3954
  store %struct.bitmap_head_def* %6, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !3955
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3956
  %call3 = call %union.tree_node** @gimple_omp_taskreg_clauses_ptr(%union.gimple_statement_d* %7), !dbg !3958
  %8 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !3959
  %call4 = call zeroext i8 @convert_local_omp_clauses(%union.tree_node** %call3, %struct.walk_stmt_info* %8), !dbg !3960
  %tobool = icmp ne i8 %call4, 0, !dbg !3960
  br i1 %tobool, label %if.then, label %if.end, !dbg !3961

if.then:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !3962, metadata !DIExpression()), !dbg !3964
  %9 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3965
  %call5 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %9), !dbg !3966
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3967
  %call6 = call i32 @gimple_location(%union.gimple_statement_d* %10), !dbg !3968
  %call7 = call %union.tree_node* @build_omp_clause(i32 %call6, i32 2), !dbg !3969
  store %union.tree_node* %call7, %union.tree_node** %c, align 8, !dbg !3970
  %11 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3971
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %11, i32 0, i32 10, !dbg !3972
  %12 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !3972
  %13 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3973
  %omp_clause = bitcast %union.tree_node* %13 to %struct.tree_omp_clause*, !dbg !3973
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !3973
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !3973
  store %union.tree_node* %12, %union.tree_node** %arrayidx, align 8, !dbg !3974
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3975
  %call8 = call %union.tree_node* @gimple_omp_taskreg_clauses(%union.gimple_statement_d* %14), !dbg !3976
  %15 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3977
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !3977
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3977
  store %union.tree_node* %call8, %union.tree_node** %chain, align 8, !dbg !3978
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3979
  %17 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !3980
  call void @gimple_omp_taskreg_set_clauses(%union.gimple_statement_d* %16, %union.tree_node* %17), !dbg !3981
  br label %if.end, !dbg !3982

if.end:                                           ; preds = %if.then, %sw.bb
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3983
  %new_local_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %18, i32 0, i32 7, !dbg !3984
  %19 = load %union.tree_node*, %union.tree_node** %new_local_var_chain, align 8, !dbg !3984
  store %union.tree_node* %19, %union.tree_node** %save_local_var_chain, align 8, !dbg !3985
  %20 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3986
  %new_local_var_chain9 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 7, !dbg !3987
  store %union.tree_node* null, %union.tree_node** %new_local_var_chain9, align 8, !dbg !3988
  %21 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3989
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3990
  %call10 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %22), !dbg !3991
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %21, %struct.gimple_seq_d* %call10), !dbg !3992
  %23 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3993
  %new_local_var_chain11 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %23, i32 0, i32 7, !dbg !3995
  %24 = load %union.tree_node*, %union.tree_node** %new_local_var_chain11, align 8, !dbg !3995
  %tobool12 = icmp ne %union.tree_node* %24, null, !dbg !3993
  br i1 %tobool12, label %if.then13, label %if.end17, !dbg !3996

if.then13:                                        ; preds = %if.end
  %25 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !3997
  %new_local_var_chain14 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %25, i32 0, i32 7, !dbg !3998
  %26 = load %union.tree_node*, %union.tree_node** %new_local_var_chain14, align 8, !dbg !3998
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3999
  %call15 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %27), !dbg !4000
  %call16 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call15), !dbg !4001
  call void @declare_vars(%union.tree_node* %26, %union.gimple_statement_d* %call16, i8 zeroext 0), !dbg !4002
  br label %if.end17, !dbg !4002

if.end17:                                         ; preds = %if.then13, %if.end
  %28 = load %union.tree_node*, %union.tree_node** %save_local_var_chain, align 8, !dbg !4003
  %29 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4004
  %new_local_var_chain18 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %29, i32 0, i32 7, !dbg !4005
  store %union.tree_node* %28, %union.tree_node** %new_local_var_chain18, align 8, !dbg !4006
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4007
  %31 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4008
  %suppress_expansion19 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %31, i32 0, i32 5, !dbg !4009
  store %struct.bitmap_head_def* %30, %struct.bitmap_head_def** %suppress_expansion19, align 8, !dbg !4010
  br label %sw.epilog, !dbg !4011

sw.bb20:                                          ; preds = %entry
  %32 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4012
  %suppress_expansion21 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %32, i32 0, i32 5, !dbg !4013
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion21, align 8, !dbg !4013
  store %struct.bitmap_head_def* %33, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4014
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4015
  %call22 = call %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %34), !dbg !4016
  %35 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4017
  %call23 = call zeroext i8 @convert_local_omp_clauses(%union.tree_node** %call22, %struct.walk_stmt_info* %35), !dbg !4018
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4019
  %37 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4020
  call void @walk_gimple_omp_for(%union.gimple_statement_d* %36, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %37), !dbg !4021
  %38 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4022
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4023
  %call24 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %39), !dbg !4024
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %38, %struct.gimple_seq_d* %call24), !dbg !4025
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4026
  %41 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4027
  %suppress_expansion25 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %41, i32 0, i32 5, !dbg !4028
  store %struct.bitmap_head_def* %40, %struct.bitmap_head_def** %suppress_expansion25, align 8, !dbg !4029
  br label %sw.epilog, !dbg !4030

sw.bb26:                                          ; preds = %entry
  %42 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4031
  %suppress_expansion27 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %42, i32 0, i32 5, !dbg !4032
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion27, align 8, !dbg !4032
  store %struct.bitmap_head_def* %43, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4033
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4034
  %call28 = call %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %44), !dbg !4035
  %45 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4036
  %call29 = call zeroext i8 @convert_local_omp_clauses(%union.tree_node** %call28, %struct.walk_stmt_info* %45), !dbg !4037
  %46 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4038
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4039
  %call30 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %47), !dbg !4040
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %46, %struct.gimple_seq_d* %call30), !dbg !4041
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4042
  %49 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4043
  %suppress_expansion31 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %49, i32 0, i32 5, !dbg !4044
  store %struct.bitmap_head_def* %48, %struct.bitmap_head_def** %suppress_expansion31, align 8, !dbg !4045
  br label %sw.epilog, !dbg !4046

sw.bb32:                                          ; preds = %entry
  %50 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4047
  %suppress_expansion33 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %50, i32 0, i32 5, !dbg !4048
  %51 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion33, align 8, !dbg !4048
  store %struct.bitmap_head_def* %51, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4049
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4050
  %call34 = call %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %52), !dbg !4051
  %53 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4052
  %call35 = call zeroext i8 @convert_local_omp_clauses(%union.tree_node** %call34, %struct.walk_stmt_info* %53), !dbg !4053
  %54 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4054
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4055
  %call36 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %55), !dbg !4056
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %54, %struct.gimple_seq_d* %call36), !dbg !4057
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %save_suppress, align 8, !dbg !4058
  %57 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4059
  %suppress_expansion37 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %57, i32 0, i32 5, !dbg !4060
  store %struct.bitmap_head_def* %56, %struct.bitmap_head_def** %suppress_expansion37, align 8, !dbg !4061
  br label %sw.epilog, !dbg !4062

sw.bb38:                                          ; preds = %entry, %entry, %entry
  %58 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4063
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4064
  %call39 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %59), !dbg !4065
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %58, %struct.gimple_seq_d* %call39), !dbg !4066
  br label %sw.epilog, !dbg !4067

sw.bb40:                                          ; preds = %entry
  %60 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4068
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %60, i32 0, i32 3, !dbg !4069
  store i8 1, i8* %val_only, align 8, !dbg !4070
  %61 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4071
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %61, i32 0, i32 4, !dbg !4072
  store i8 0, i8* %is_lhs, align 1, !dbg !4073
  %62 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4074
  store i8 0, i8* %62, align 1, !dbg !4075
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4076
  br label %return, !dbg !4076

sw.default:                                       ; preds = %entry
  %63 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4077
  store i8 0, i8* %63, align 1, !dbg !4078
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4079
  br label %return, !dbg !4079

sw.epilog:                                        ; preds = %sw.bb38, %sw.bb32, %sw.bb26, %sw.bb20, %if.end17
  %64 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4080
  store i8 1, i8* %64, align 1, !dbg !4081
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4082
  br label %return, !dbg !4082

return:                                           ; preds = %sw.epilog, %sw.default, %sw.bb40
  %65 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4083
  ret %union.tree_node* %65, !dbg !4083
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_local_reference_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !4084 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %t = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %save_val_only = alloca i8, align 1
  %save_context = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !4085, metadata !DIExpression()), !dbg !4086
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4089, metadata !DIExpression()), !dbg !4090
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !4091, metadata !DIExpression()), !dbg !4092
  %0 = load i8*, i8** %data.addr, align 8, !dbg !4093
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !4094
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !4092
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !4095, metadata !DIExpression()), !dbg !4096
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4097
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !4098
  %3 = load i8*, i8** %info1, align 8, !dbg !4098
  %4 = bitcast i8* %3 to %struct.nesting_info*, !dbg !4099
  store %struct.nesting_info* %4, %struct.nesting_info** %info, align 8, !dbg !4096
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4100, metadata !DIExpression()), !dbg !4101
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4102
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !4103
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !4101
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4104, metadata !DIExpression()), !dbg !4105
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !4106, metadata !DIExpression()), !dbg !4107
  call void @llvm.dbg.declare(metadata i8* %save_val_only, metadata !4108, metadata !DIExpression()), !dbg !4109
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4110
  store i32 0, i32* %7, align 4, !dbg !4111
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4112
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4112
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4112
  %bf.load = load i64, i64* %9, align 8, !dbg !4112
  %bf.clear = and i64 %bf.load, 65535, !dbg !4112
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4112
  switch i32 %bf.cast, label %sw.default [
    i32 32, label %sw.bb
    i32 34, label %sw.bb11
    i32 121, label %sw.bb39
    i32 43, label %sw.bb60
    i32 44, label %sw.bb60
    i32 41, label %sw.bb60
    i32 45, label %sw.bb60
    i32 46, label %sw.bb60
    i32 42, label %sw.bb60
    i32 118, label %sw.bb125
  ], !dbg !4113

sw.bb:                                            ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4114
  %base2 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4114
  %11 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4114
  %bf.load3 = load i64, i64* %11, align 8, !dbg !4114
  %bf.lshr = lshr i64 %bf.load3, 26, !dbg !4114
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !4114
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4114
  %tobool = icmp ne i32 %bf.cast5, 0, !dbg !4114
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4117

lor.lhs.false:                                    ; preds = %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4118
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !4118
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4118
  %13 = bitcast i40* %decl_flag_1 to i64*, !dbg !4118
  %bf.load6 = load i64, i64* %13, align 8, !dbg !4118
  %bf.lshr7 = lshr i64 %bf.load6, 25, !dbg !4118
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !4118
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !4118
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !4118
  br i1 %tobool10, label %if.then, label %if.end, !dbg !4119

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  br label %sw.epilog, !dbg !4120

if.end:                                           ; preds = %lor.lhs.false
  br label %sw.bb11, !dbg !4118

sw.bb11:                                          ; preds = %entry, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4121
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %14), !dbg !4123
  %15 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4124
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 6, !dbg !4125
  %16 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4125
  %cmp = icmp eq %union.tree_node* %call, %16, !dbg !4126
  br i1 %cmp, label %if.then12, label %if.end38, !dbg !4127

if.then12:                                        ; preds = %sw.bb11
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4128
  %call13 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %17), !dbg !4131
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4131
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4132

if.then15:                                        ; preds = %if.then12
  br label %sw.epilog, !dbg !4133

if.end16:                                         ; preds = %if.then12
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4134
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4135
  %call17 = call %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %18, %union.tree_node* %19, i32 0), !dbg !4136
  store %union.tree_node* %call17, %union.tree_node** %field, align 8, !dbg !4137
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4138
  %tobool18 = icmp ne %union.tree_node* %20, null, !dbg !4138
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !4140

if.then19:                                        ; preds = %if.end16
  br label %sw.epilog, !dbg !4141

if.end20:                                         ; preds = %if.end16
  %21 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4142
  %changed = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %21, i32 0, i32 5, !dbg !4143
  store i8 1, i8* %changed, align 2, !dbg !4144
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4145
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4146
  %24 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4147
  %call21 = call %union.tree_node* @get_local_debug_decl(%struct.nesting_info* %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !4148
  store %union.tree_node* %call21, %union.tree_node** %x, align 8, !dbg !4149
  %25 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4150
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %25, i32 0, i32 5, !dbg !4152
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !4152
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4153
  %decl_minimal = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !4153
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4153
  %28 = load i32, i32* %uid, align 4, !dbg !4153
  %call22 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %26, i32 %28), !dbg !4154
  %tobool23 = icmp ne i32 %call22, 0, !dbg !4154
  br i1 %tobool23, label %if.end27, label %if.then24, !dbg !4155

if.then24:                                        ; preds = %if.end20
  %29 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4156
  %30 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4157
  %context25 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %30, i32 0, i32 6, !dbg !4158
  %31 = load %union.tree_node*, %union.tree_node** %context25, align 8, !dbg !4158
  %32 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4159
  %33 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4160
  %gsi = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %33, i32 0, i32 0, !dbg !4161
  %call26 = call %union.tree_node* @get_frame_field(%struct.nesting_info* %29, %union.tree_node* %31, %union.tree_node* %32, %struct.gimple_stmt_iterator* %gsi), !dbg !4162
  store %union.tree_node* %call26, %union.tree_node** %x, align 8, !dbg !4163
  br label %if.end27, !dbg !4164

if.end27:                                         ; preds = %if.then24, %if.end20
  %34 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4165
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %34, i32 0, i32 3, !dbg !4167
  %35 = load i8, i8* %val_only, align 8, !dbg !4167
  %tobool28 = icmp ne i8 %35, 0, !dbg !4165
  br i1 %tobool28, label %if.then29, label %if.end37, !dbg !4168

if.then29:                                        ; preds = %if.end27
  %36 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4169
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %36, i32 0, i32 4, !dbg !4172
  %37 = load i8, i8* %is_lhs, align 1, !dbg !4172
  %tobool30 = icmp ne i8 %37, 0, !dbg !4169
  br i1 %tobool30, label %if.then31, label %if.else, !dbg !4173

if.then31:                                        ; preds = %if.then29
  %38 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4174
  %39 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4175
  %40 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4176
  %gsi32 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %40, i32 0, i32 0, !dbg !4177
  %call33 = call %union.tree_node* @save_tmp_var(%struct.nesting_info* %38, %union.tree_node* %39, %struct.gimple_stmt_iterator* %gsi32), !dbg !4178
  store %union.tree_node* %call33, %union.tree_node** %x, align 8, !dbg !4179
  br label %if.end36, !dbg !4180

if.else:                                          ; preds = %if.then29
  %41 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4181
  %42 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4182
  %43 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4183
  %gsi34 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %43, i32 0, i32 0, !dbg !4184
  %call35 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %41, %union.tree_node* %42, %struct.gimple_stmt_iterator* %gsi34), !dbg !4185
  store %union.tree_node* %call35, %union.tree_node** %x, align 8, !dbg !4186
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then31
  br label %if.end37, !dbg !4187

if.end37:                                         ; preds = %if.end36, %if.end27
  %44 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4188
  %45 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4189
  store %union.tree_node* %44, %union.tree_node** %45, align 8, !dbg !4190
  br label %if.end38, !dbg !4191

if.end38:                                         ; preds = %if.end37, %sw.bb11
  br label %sw.epilog, !dbg !4192

sw.bb39:                                          ; preds = %entry
  %46 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4193
  %val_only40 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %46, i32 0, i32 3, !dbg !4194
  %47 = load i8, i8* %val_only40, align 8, !dbg !4194
  store i8 %47, i8* %save_val_only, align 1, !dbg !4195
  %48 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4196
  %val_only41 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %48, i32 0, i32 3, !dbg !4197
  store i8 0, i8* %val_only41, align 8, !dbg !4198
  %49 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4199
  %is_lhs42 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %49, i32 0, i32 4, !dbg !4200
  store i8 0, i8* %is_lhs42, align 1, !dbg !4201
  %50 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4202
  %changed43 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %50, i32 0, i32 5, !dbg !4203
  store i8 0, i8* %changed43, align 2, !dbg !4204
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4205
  %exp = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !4205
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4205
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4205
  %52 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4205
  %53 = bitcast %struct.walk_stmt_info* %52 to i8*, !dbg !4205
  %call44 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %53, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4205
  %54 = load i8, i8* %save_val_only, align 1, !dbg !4206
  %55 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4207
  %val_only45 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %55, i32 0, i32 3, !dbg !4208
  store i8 %54, i8* %val_only45, align 8, !dbg !4209
  %56 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4210
  %changed46 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %56, i32 0, i32 5, !dbg !4212
  %57 = load i8, i8* %changed46, align 2, !dbg !4212
  %tobool47 = icmp ne i8 %57, 0, !dbg !4210
  br i1 %tobool47, label %if.then48, label %if.end59, !dbg !4213

if.then48:                                        ; preds = %sw.bb39
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_context, metadata !4214, metadata !DIExpression()), !dbg !4216
  %58 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4217
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %58, i32 0, i32 10, !dbg !4217
  %59 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !4217
  %base49 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !4217
  %60 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4217
  %bf.load50 = load i64, i64* %60, align 8, !dbg !4218
  %bf.clear51 = and i64 %bf.load50, -262145, !dbg !4218
  %bf.set = or i64 %bf.clear51, 262144, !dbg !4218
  store i64 %bf.set, i64* %60, align 8, !dbg !4218
  %61 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4219
  store %union.tree_node* %61, %union.tree_node** %save_context, align 8, !dbg !4220
  %62 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4221
  %context52 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %62, i32 0, i32 6, !dbg !4222
  %63 = load %union.tree_node*, %union.tree_node** %context52, align 8, !dbg !4222
  store %union.tree_node* %63, %union.tree_node** @current_function_decl, align 8, !dbg !4223
  %64 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4224
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %64), !dbg !4225
  %65 = load %union.tree_node*, %union.tree_node** %save_context, align 8, !dbg !4226
  store %union.tree_node* %65, %union.tree_node** @current_function_decl, align 8, !dbg !4227
  %66 = load i8, i8* %save_val_only, align 1, !dbg !4228
  %tobool53 = icmp ne i8 %66, 0, !dbg !4228
  br i1 %tobool53, label %if.then54, label %if.end58, !dbg !4230

if.then54:                                        ; preds = %if.then48
  %67 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4231
  %info55 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %67, i32 0, i32 1, !dbg !4232
  %68 = load i8*, i8** %info55, align 8, !dbg !4232
  %69 = bitcast i8* %68 to %struct.nesting_info*, !dbg !4233
  %70 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4234
  %71 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4235
  %gsi56 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %71, i32 0, i32 0, !dbg !4236
  %call57 = call %union.tree_node* @gsi_gimplify_val(%struct.nesting_info* %69, %union.tree_node* %70, %struct.gimple_stmt_iterator* %gsi56), !dbg !4237
  %72 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4238
  store %union.tree_node* %call57, %union.tree_node** %72, align 8, !dbg !4239
  br label %if.end58, !dbg !4240

if.end58:                                         ; preds = %if.then54, %if.then48
  br label %if.end59, !dbg !4241

if.end59:                                         ; preds = %if.end58, %sw.bb39
  br label %sw.epilog, !dbg !4242

sw.bb60:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %73 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4243
  %val_only61 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %73, i32 0, i32 3, !dbg !4244
  %74 = load i8, i8* %val_only61, align 8, !dbg !4244
  store i8 %74, i8* %save_val_only, align 1, !dbg !4245
  %75 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4246
  %val_only62 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %75, i32 0, i32 3, !dbg !4247
  store i8 1, i8* %val_only62, align 8, !dbg !4248
  %76 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4249
  %is_lhs63 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %76, i32 0, i32 4, !dbg !4250
  store i8 0, i8* %is_lhs63, align 1, !dbg !4251
  br label %for.cond, !dbg !4252

for.cond:                                         ; preds = %for.inc, %sw.bb60
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4253
  %call64 = call zeroext i8 @handled_component_p(%union.tree_node* %77), !dbg !4256
  %tobool65 = icmp ne i8 %call64, 0, !dbg !4257
  br i1 %tobool65, label %for.body, label %for.end, !dbg !4257

for.body:                                         ; preds = %for.cond
  %78 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4258
  %base66 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !4258
  %79 = bitcast %struct.tree_base* %base66 to i64*, !dbg !4258
  %bf.load67 = load i64, i64* %79, align 8, !dbg !4258
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !4258
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !4258
  %cmp70 = icmp eq i32 %bf.cast69, 41, !dbg !4261
  br i1 %cmp70, label %if.then71, label %if.else76, !dbg !4262

if.then71:                                        ; preds = %for.body
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4263
  %exp72 = bitcast %union.tree_node* %80 to %struct.tree_exp*, !dbg !4263
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 3, !dbg !4263
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i64 0, i64 2, !dbg !4263
  %81 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4263
  %82 = bitcast %struct.walk_stmt_info* %81 to i8*, !dbg !4263
  %call75 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx74, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %82, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4263
  br label %if.end118, !dbg !4263

if.else76:                                        ; preds = %for.body
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4264
  %base77 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !4264
  %84 = bitcast %struct.tree_base* %base77 to i64*, !dbg !4264
  %bf.load78 = load i64, i64* %84, align 8, !dbg !4264
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !4264
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !4264
  %cmp81 = icmp eq i32 %bf.cast80, 45, !dbg !4266
  br i1 %cmp81, label %if.then88, label %lor.lhs.false82, !dbg !4267

lor.lhs.false82:                                  ; preds = %if.else76
  %85 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4268
  %base83 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !4268
  %86 = bitcast %struct.tree_base* %base83 to i64*, !dbg !4268
  %bf.load84 = load i64, i64* %86, align 8, !dbg !4268
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !4268
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !4268
  %cmp87 = icmp eq i32 %bf.cast86, 46, !dbg !4269
  br i1 %cmp87, label %if.then88, label %if.else101, !dbg !4270

if.then88:                                        ; preds = %lor.lhs.false82, %if.else76
  %87 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4271
  %exp89 = bitcast %union.tree_node* %87 to %struct.tree_exp*, !dbg !4271
  %operands90 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp89, i32 0, i32 3, !dbg !4271
  %arrayidx91 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands90, i64 0, i64 1, !dbg !4271
  %88 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4271
  %89 = bitcast %struct.walk_stmt_info* %88 to i8*, !dbg !4271
  %call92 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx91, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %89, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4271
  %90 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4273
  %exp93 = bitcast %union.tree_node* %90 to %struct.tree_exp*, !dbg !4273
  %operands94 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp93, i32 0, i32 3, !dbg !4273
  %arrayidx95 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands94, i64 0, i64 2, !dbg !4273
  %91 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4273
  %92 = bitcast %struct.walk_stmt_info* %91 to i8*, !dbg !4273
  %call96 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx95, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %92, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4273
  %93 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4274
  %exp97 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !4274
  %operands98 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp97, i32 0, i32 3, !dbg !4274
  %arrayidx99 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands98, i64 0, i64 3, !dbg !4274
  %94 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4274
  %95 = bitcast %struct.walk_stmt_info* %94 to i8*, !dbg !4274
  %call100 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx99, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %95, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4274
  br label %if.end117, !dbg !4275

if.else101:                                       ; preds = %lor.lhs.false82
  %96 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4276
  %base102 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !4276
  %97 = bitcast %struct.tree_base* %base102 to i64*, !dbg !4276
  %bf.load103 = load i64, i64* %97, align 8, !dbg !4276
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !4276
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !4276
  %cmp106 = icmp eq i32 %bf.cast105, 42, !dbg !4278
  br i1 %cmp106, label %if.then107, label %if.end116, !dbg !4279

if.then107:                                       ; preds = %if.else101
  %98 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4280
  %exp108 = bitcast %union.tree_node* %98 to %struct.tree_exp*, !dbg !4280
  %operands109 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp108, i32 0, i32 3, !dbg !4280
  %arrayidx110 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands109, i64 0, i64 1, !dbg !4280
  %99 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4280
  %100 = bitcast %struct.walk_stmt_info* %99 to i8*, !dbg !4280
  %call111 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx110, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %100, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4280
  %101 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4282
  %exp112 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !4282
  %operands113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 3, !dbg !4282
  %arrayidx114 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands113, i64 0, i64 2, !dbg !4282
  %102 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4282
  %103 = bitcast %struct.walk_stmt_info* %102 to i8*, !dbg !4282
  %call115 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx114, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %103, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4282
  br label %if.end116, !dbg !4283

if.end116:                                        ; preds = %if.then107, %if.else101
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then88
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then71
  br label %for.inc, !dbg !4284

for.inc:                                          ; preds = %if.end118
  %104 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4285
  %exp119 = bitcast %union.tree_node* %104 to %struct.tree_exp*, !dbg !4285
  %operands120 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp119, i32 0, i32 3, !dbg !4285
  %arrayidx121 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands120, i64 0, i64 0, !dbg !4285
  store %union.tree_node** %arrayidx121, %union.tree_node*** %tp.addr, align 8, !dbg !4286
  %105 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4287
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !4288
  store %union.tree_node* %106, %union.tree_node** %t, align 8, !dbg !4289
  br label %for.cond, !dbg !4290, !llvm.loop !4291

for.end:                                          ; preds = %for.cond
  %107 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4293
  %val_only122 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %107, i32 0, i32 3, !dbg !4294
  store i8 0, i8* %val_only122, align 8, !dbg !4295
  %108 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !4296
  %109 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4296
  %110 = bitcast %struct.walk_stmt_info* %109 to i8*, !dbg !4296
  %call123 = call %union.tree_node* @walk_tree_1(%union.tree_node** %108, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, i8* %110, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4296
  %111 = load i8, i8* %save_val_only, align 1, !dbg !4297
  %112 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4298
  %val_only124 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %112, i32 0, i32 3, !dbg !4299
  store i8 %111, i8* %val_only124, align 8, !dbg !4300
  br label %sw.epilog, !dbg !4301

sw.bb125:                                         ; preds = %entry
  %113 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4302
  store i32 1, i32* %113, align 4, !dbg !4303
  br label %sw.epilog, !dbg !4304

sw.default:                                       ; preds = %entry
  %114 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4305
  %base126 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !4305
  %115 = bitcast %struct.tree_base* %base126 to i64*, !dbg !4305
  %bf.load127 = load i64, i64* %115, align 8, !dbg !4305
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !4305
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !4305
  %idxprom = sext i32 %bf.cast129 to i64, !dbg !4305
  %arrayidx130 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4305
  %116 = load i32, i32* %arrayidx130, align 4, !dbg !4305
  %cmp131 = icmp eq i32 %116, 2, !dbg !4305
  br i1 %cmp131, label %if.end143, label %lor.lhs.false132, !dbg !4305

lor.lhs.false132:                                 ; preds = %sw.default
  %117 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4305
  %base133 = bitcast %union.tree_node* %117 to %struct.tree_base*, !dbg !4305
  %118 = bitcast %struct.tree_base* %base133 to i64*, !dbg !4305
  %bf.load134 = load i64, i64* %118, align 8, !dbg !4305
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !4305
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !4305
  %idxprom137 = sext i32 %bf.cast136 to i64, !dbg !4305
  %arrayidx138 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom137, !dbg !4305
  %119 = load i32, i32* %arrayidx138, align 4, !dbg !4305
  %cmp139 = icmp eq i32 %119, 3, !dbg !4305
  br i1 %cmp139, label %if.end143, label %if.then140, !dbg !4307

if.then140:                                       ; preds = %lor.lhs.false132
  %120 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !4308
  store i32 1, i32* %120, align 4, !dbg !4310
  %121 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4311
  %val_only141 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %121, i32 0, i32 3, !dbg !4312
  store i8 1, i8* %val_only141, align 8, !dbg !4313
  %122 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !4314
  %is_lhs142 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %122, i32 0, i32 4, !dbg !4315
  store i8 0, i8* %is_lhs142, align 1, !dbg !4316
  br label %if.end143, !dbg !4317

if.end143:                                        ; preds = %if.then140, %lor.lhs.false132, %sw.default
  br label %sw.epilog, !dbg !4318

sw.epilog:                                        ; preds = %if.end143, %sw.bb125, %for.end, %if.end59, %if.end38, %if.then19, %if.then15, %if.then
  ret %union.tree_node* null, !dbg !4319
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_nl_goto_reference(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !4320 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %label = alloca %union.tree_node*, align 8
  %new_label = alloca %union.tree_node*, align 8
  %target_context = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %call = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4321, metadata !DIExpression()), !dbg !4322
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !4323, metadata !DIExpression()), !dbg !4324
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !4325, metadata !DIExpression()), !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !4327, metadata !DIExpression()), !dbg !4328
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4329
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !4330
  %1 = load i8*, i8** %info1, align 8, !dbg !4330
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !4331
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !4328
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !4332, metadata !DIExpression()), !dbg !4333
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_label, metadata !4336, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context, metadata !4338, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !4340, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4342, metadata !DIExpression()), !dbg !4343
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4344, metadata !DIExpression()), !dbg !4345
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !4346, metadata !DIExpression()), !dbg !4347
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4348, metadata !DIExpression()), !dbg !4349
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4350
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !4351
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !4349
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4352
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !4354
  %cmp = icmp ne i32 %call3, 3, !dbg !4355
  br i1 %cmp, label %if.then, label %if.end, !dbg !4356

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4357
  store i8 0, i8* %5, align 1, !dbg !4359
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4360
  br label %return, !dbg !4360

if.end:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4361
  %call4 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %6), !dbg !4362
  store %union.tree_node* %call4, %union.tree_node** %label, align 8, !dbg !4363
  %7 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4364
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !4364
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !4364
  %bf.load = load i64, i64* %8, align 8, !dbg !4364
  %bf.clear = and i64 %bf.load, 65535, !dbg !4364
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4364
  %cmp5 = icmp ne i32 %bf.cast, 30, !dbg !4366
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4367

if.then6:                                         ; preds = %if.end
  %9 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4368
  store i8 0, i8* %9, align 1, !dbg !4370
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4371
  br label %return, !dbg !4371

if.end7:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4372
  %call8 = call %union.tree_node* @decl_function_context(%union.tree_node* %10), !dbg !4373
  store %union.tree_node* %call8, %union.tree_node** %target_context, align 8, !dbg !4374
  %11 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !4375
  %12 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4377
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %12, i32 0, i32 6, !dbg !4378
  %13 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4378
  %cmp9 = icmp eq %union.tree_node* %11, %13, !dbg !4379
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !4380

if.then10:                                        ; preds = %if.end7
  %14 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4381
  store i8 0, i8* %14, align 1, !dbg !4383
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4384
  br label %return, !dbg !4384

if.end11:                                         ; preds = %if.end7
  %15 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4385
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 0, !dbg !4387
  %16 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !4387
  store %struct.nesting_info* %16, %struct.nesting_info** %i, align 8, !dbg !4388
  br label %for.cond, !dbg !4389

for.cond:                                         ; preds = %for.inc, %if.end11
  %17 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !4390
  %18 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !4392
  %context12 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %18, i32 0, i32 6, !dbg !4393
  %19 = load %union.tree_node*, %union.tree_node** %context12, align 8, !dbg !4393
  %cmp13 = icmp ne %union.tree_node* %17, %19, !dbg !4394
  br i1 %cmp13, label %for.body, label %for.end, !dbg !4395

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !4396

for.inc:                                          ; preds = %for.body
  %20 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !4397
  %outer14 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 0, !dbg !4398
  %21 = load %struct.nesting_info*, %struct.nesting_info** %outer14, align 8, !dbg !4398
  store %struct.nesting_info* %21, %struct.nesting_info** %i, align 8, !dbg !4399
  br label %for.cond, !dbg !4400, !llvm.loop !4401

for.end:                                          ; preds = %for.cond
  %22 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !4403
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %22, i32 0, i32 4, !dbg !4404
  %23 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !4404
  %24 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4405
  %25 = bitcast %union.tree_node* %24 to i8*, !dbg !4405
  %call15 = call i8** @pointer_map_insert(%struct.pointer_map_t* %23, i8* %25), !dbg !4406
  store i8** %call15, i8*** %slot, align 8, !dbg !4407
  %26 = load i8**, i8*** %slot, align 8, !dbg !4408
  %27 = load i8*, i8** %26, align 8, !dbg !4410
  %cmp16 = icmp eq i8* %27, null, !dbg !4411
  br i1 %cmp16, label %if.then17, label %if.else, !dbg !4412

if.then17:                                        ; preds = %for.end
  %call18 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !4413
  store %union.tree_node* %call18, %union.tree_node** %new_label, align 8, !dbg !4415
  %28 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !4416
  %decl_common = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !4416
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4416
  %29 = bitcast i40* %nonlocal_flag to i64*, !dbg !4416
  %bf.load19 = load i64, i64* %29, align 8, !dbg !4417
  %bf.clear20 = and i64 %bf.load19, -257, !dbg !4417
  %bf.set = or i64 %bf.clear20, 256, !dbg !4417
  store i64 %bf.set, i64* %29, align 8, !dbg !4417
  %30 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !4418
  %31 = bitcast %union.tree_node* %30 to i8*, !dbg !4418
  %32 = load i8**, i8*** %slot, align 8, !dbg !4419
  store i8* %31, i8** %32, align 8, !dbg !4420
  br label %if.end21, !dbg !4421

if.else:                                          ; preds = %for.end
  %33 = load i8**, i8*** %slot, align 8, !dbg !4422
  %34 = load i8*, i8** %33, align 8, !dbg !4423
  %35 = bitcast i8* %34 to %union.tree_node*, !dbg !4424
  store %union.tree_node* %35, %union.tree_node** %new_label, align 8, !dbg !4425
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then17
  %36 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !4426
  %call22 = call %union.tree_node* @get_nl_goto_field(%struct.nesting_info* %36), !dbg !4427
  store %union.tree_node* %call22, %union.tree_node** %field, align 8, !dbg !4428
  %37 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4429
  %38 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !4430
  %39 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4431
  %40 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4432
  %gsi23 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %40, i32 0, i32 0, !dbg !4433
  %call24 = call %union.tree_node* @get_frame_field(%struct.nesting_info* %37, %union.tree_node* %38, %union.tree_node* %39, %struct.gimple_stmt_iterator* %gsi23), !dbg !4434
  store %union.tree_node* %call24, %union.tree_node** %x, align 8, !dbg !4435
  %41 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4436
  %42 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !4437
  %call25 = call %union.tree_node* @build_addr(%union.tree_node* %41, %union.tree_node* %42), !dbg !4438
  store %union.tree_node* %call25, %union.tree_node** %x, align 8, !dbg !4439
  %43 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4440
  %44 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4441
  %45 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4442
  %gsi26 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %45, i32 0, i32 0, !dbg !4443
  %call27 = call %union.tree_node* @gsi_gimplify_val(%struct.nesting_info* %43, %union.tree_node* %44, %struct.gimple_stmt_iterator* %gsi26), !dbg !4444
  store %union.tree_node* %call27, %union.tree_node** %x, align 8, !dbg !4445
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 522), align 16, !dbg !4446
  %47 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !4447
  %48 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !4448
  %call28 = call %union.tree_node* @build_addr(%union.tree_node* %47, %union.tree_node* %48), !dbg !4449
  %49 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4450
  %call29 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %46, i32 2, %union.tree_node* %call28, %union.tree_node* %49), !dbg !4451
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %call, align 8, !dbg !4452
  %50 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4453
  %gsi30 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %50, i32 0, i32 0, !dbg !4454
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !4455
  call void @gsi_replace(%struct.gimple_stmt_iterator* %gsi30, %union.gimple_statement_d* %51, i8 zeroext 0), !dbg !4456
  %52 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4457
  store i8 1, i8* %52, align 1, !dbg !4458
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4459
  br label %return, !dbg !4459

return:                                           ; preds = %if.end21, %if.then10, %if.then6, %if.then
  %53 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4460
  ret %union.tree_node* %53, !dbg !4460
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_nl_goto_receiver(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !4461 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %label = alloca %union.tree_node*, align 8
  %new_label = alloca %union.tree_node*, align 8
  %tmp_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %slot = alloca i8**, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt15 = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !4462, metadata !DIExpression()), !dbg !4463
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !4464, metadata !DIExpression()), !dbg !4465
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !4466, metadata !DIExpression()), !dbg !4467
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !4468, metadata !DIExpression()), !dbg !4469
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4470
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !4471
  %1 = load i8*, i8** %info1, align 8, !dbg !4471
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !4472
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !4469
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !4473, metadata !DIExpression()), !dbg !4474
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_label, metadata !4475, metadata !DIExpression()), !dbg !4476
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %tmp_gsi, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4479, metadata !DIExpression()), !dbg !4480
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4481, metadata !DIExpression()), !dbg !4482
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4483
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !4484
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4482
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4485
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !4487
  %cmp = icmp ne i32 %call2, 4, !dbg !4488
  br i1 %cmp, label %if.then, label %if.end, !dbg !4489

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4490
  store i8 0, i8* %5, align 1, !dbg !4492
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4493
  br label %return, !dbg !4493

if.end:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4494
  %call3 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %6), !dbg !4495
  store %union.tree_node* %call3, %union.tree_node** %label, align 8, !dbg !4496
  %7 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4497
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %7, i32 0, i32 4, !dbg !4498
  %8 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !4498
  %9 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4499
  %10 = bitcast %union.tree_node* %9 to i8*, !dbg !4499
  %call4 = call i8** @pointer_map_contains(%struct.pointer_map_t* %8, i8* %10), !dbg !4500
  store i8** %call4, i8*** %slot, align 8, !dbg !4501
  %11 = load i8**, i8*** %slot, align 8, !dbg !4502
  %tobool = icmp ne i8** %11, null, !dbg !4502
  br i1 %tobool, label %if.end6, label %if.then5, !dbg !4504

if.then5:                                         ; preds = %if.end
  %12 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4505
  store i8 0, i8* %12, align 1, !dbg !4507
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4508
  br label %return, !dbg !4508

if.end6:                                          ; preds = %if.end
  %13 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4509
  %gsi7 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %13, i32 0, i32 0, !dbg !4510
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp_gsi to i8*, !dbg !4510
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi7 to i8*, !dbg !4510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !4510
  call void @gsi_prev(%struct.gimple_stmt_iterator* %tmp_gsi), !dbg !4511
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %tmp_gsi), !dbg !4512
  %conv = zext i8 %call8 to i32, !dbg !4512
  %tobool9 = icmp ne i32 %conv, 0, !dbg !4512
  br i1 %tobool9, label %if.then14, label %lor.lhs.false, !dbg !4514

lor.lhs.false:                                    ; preds = %if.end6
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %tmp_gsi), !dbg !4515
  %call11 = call zeroext i8 @gimple_stmt_may_fallthru(%union.gimple_statement_d* %call10), !dbg !4516
  %conv12 = zext i8 %call11 to i32, !dbg !4516
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !4516
  br i1 %tobool13, label %if.then14, label %if.end17, !dbg !4517

if.then14:                                        ; preds = %lor.lhs.false, %if.end6
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt15, metadata !4518, metadata !DIExpression()), !dbg !4520
  %16 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4521
  %call16 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %16), !dbg !4522
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %stmt15, align 8, !dbg !4520
  %17 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4523
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt15, align 8, !dbg !4524
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %17, %union.gimple_statement_d* %18, i32 1), !dbg !4525
  br label %if.end17, !dbg !4526

if.end17:                                         ; preds = %if.then14, %lor.lhs.false
  %19 = load i8**, i8*** %slot, align 8, !dbg !4527
  %20 = load i8*, i8** %19, align 8, !dbg !4528
  %21 = bitcast i8* %20 to %union.tree_node*, !dbg !4529
  store %union.tree_node* %21, %union.tree_node** %new_label, align 8, !dbg !4530
  %22 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !4531
  %call18 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %22), !dbg !4532
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %stmt, align 8, !dbg !4533
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !4534
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4535
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %23, %union.gimple_statement_d* %24, i32 1), !dbg !4536
  %25 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !4537
  store i8 1, i8* %25, align 1, !dbg !4538
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4539
  br label %return, !dbg !4539

return:                                           ; preds = %if.end17, %if.then5, %if.then
  %26 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4540
  ret %union.tree_node* %26, !dbg !4540
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_all_function_calls(%struct.nesting_info* %root) #0 !dbg !4541 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %n = alloca %struct.nesting_info*, align 8
  %iter_count = alloca i32, align 4
  %any_changed = alloca i8, align 1
  %decl = alloca %union.tree_node*, align 8
  %decl27 = alloca %union.tree_node*, align 8
  %old_static_chain = alloca i8, align 1
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !4544, metadata !DIExpression()), !dbg !4545
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %n, metadata !4546, metadata !DIExpression()), !dbg !4547
  call void @llvm.dbg.declare(metadata i32* %iter_count, metadata !4548, metadata !DIExpression()), !dbg !4549
  call void @llvm.dbg.declare(metadata i8* %any_changed, metadata !4550, metadata !DIExpression()), !dbg !4551
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4552
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %0), !dbg !4552
  store %struct.nesting_info* %call, %struct.nesting_info** %n, align 8, !dbg !4552
  br label %for.cond, !dbg !4552

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4554
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !4552
  br i1 %tobool, label %for.body, label %for.end, !dbg !4552

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4556, metadata !DIExpression()), !dbg !4558
  %2 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4559
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 6, !dbg !4560
  %3 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4560
  store %union.tree_node* %3, %union.tree_node** %decl, align 8, !dbg !4558
  %4 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4561
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 0, !dbg !4563
  %5 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !4563
  %tobool1 = icmp ne %struct.nesting_info* %5, null, !dbg !4561
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !4564

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4565
  %chain_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %6, i32 0, i32 12, !dbg !4566
  %7 = load %union.tree_node*, %union.tree_node** %chain_decl, align 8, !dbg !4566
  %tobool2 = icmp ne %union.tree_node* %7, null, !dbg !4565
  br i1 %tobool2, label %if.else, label %land.lhs.true, !dbg !4567

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4568
  %chain_field = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %8, i32 0, i32 11, !dbg !4569
  %9 = load %union.tree_node*, %union.tree_node** %chain_field, align 8, !dbg !4569
  %tobool3 = icmp ne %union.tree_node* %9, null, !dbg !4568
  br i1 %tobool3, label %if.else, label %if.then, !dbg !4570

if.then:                                          ; preds = %land.lhs.true, %for.body
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4571
  %function_decl = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !4571
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4571
  %bf.load = load i32, i32* %regdecl_flag, align 8, !dbg !4573
  %bf.clear = and i32 %bf.load, -4194305, !dbg !4573
  store i32 %bf.clear, i32* %regdecl_flag, align 8, !dbg !4573
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4574
  %tobool4 = icmp ne %struct._IO_FILE* %11, null, !dbg !4574
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !4576

land.lhs.true5:                                   ; preds = %if.then
  %12 = load i32, i32* @dump_flags, align 4, !dbg !4577
  %and = and i32 %12, 8, !dbg !4578
  %tobool6 = icmp ne i32 %and, 0, !dbg !4578
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !4579

if.then7:                                         ; preds = %land.lhs.true5
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4580
  %14 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !4581
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4582
  %call8 = call i8* %14(%union.tree_node* %15, i32 2), !dbg !4583
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i64 0, i64 0), i8* %call8), !dbg !4584
  br label %if.end, !dbg !4584

if.end:                                           ; preds = %if.then7, %land.lhs.true5, %if.then
  br label %if.end14, !dbg !4585

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4586
  %function_decl10 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !4586
  %regdecl_flag11 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !4586
  %bf.load12 = load i32, i32* %regdecl_flag11, align 8, !dbg !4587
  %bf.clear13 = and i32 %bf.load12, -4194305, !dbg !4587
  %bf.set = or i32 %bf.clear13, 4194304, !dbg !4587
  store i32 %bf.set, i32* %regdecl_flag11, align 8, !dbg !4587
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.end
  br label %for.inc, !dbg !4588

for.inc:                                          ; preds = %if.end14
  %17 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4554
  %call15 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %17), !dbg !4554
  store %struct.nesting_info* %call15, %struct.nesting_info** %n, align 8, !dbg !4554
  br label %for.cond, !dbg !4554, !llvm.loop !4589

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %iter_count, align 4, !dbg !4591
  br label %do.body, !dbg !4592

do.body:                                          ; preds = %do.cond, %for.end
  store i8 0, i8* %any_changed, align 1, !dbg !4593
  %18 = load i32, i32* %iter_count, align 4, !dbg !4595
  %inc = add nsw i32 %18, 1, !dbg !4595
  store i32 %inc, i32* %iter_count, align 4, !dbg !4595
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4596
  %tobool16 = icmp ne %struct._IO_FILE* %19, null, !dbg !4596
  br i1 %tobool16, label %land.lhs.true17, label %if.end22, !dbg !4598

land.lhs.true17:                                  ; preds = %do.body
  %20 = load i32, i32* @dump_flags, align 4, !dbg !4599
  %and18 = and i32 %20, 8, !dbg !4600
  %tobool19 = icmp ne i32 %and18, 0, !dbg !4600
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !4601

if.then20:                                        ; preds = %land.lhs.true17
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4602
  %call21 = call i32 @fputc(i32 10, %struct._IO_FILE* %21), !dbg !4603
  br label %if.end22, !dbg !4603

if.end22:                                         ; preds = %if.then20, %land.lhs.true17, %do.body
  %22 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4604
  %call23 = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %22), !dbg !4604
  store %struct.nesting_info* %call23, %struct.nesting_info** %n, align 8, !dbg !4604
  br label %for.cond24, !dbg !4604

for.cond24:                                       ; preds = %for.inc43, %if.end22
  %23 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4606
  %tobool25 = icmp ne %struct.nesting_info* %23, null, !dbg !4604
  br i1 %tobool25, label %for.body26, label %for.end45, !dbg !4604

for.body26:                                       ; preds = %for.cond24
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl27, metadata !4608, metadata !DIExpression()), !dbg !4610
  %24 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4611
  %context28 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 6, !dbg !4612
  %25 = load %union.tree_node*, %union.tree_node** %context28, align 8, !dbg !4612
  store %union.tree_node* %25, %union.tree_node** %decl27, align 8, !dbg !4610
  call void @llvm.dbg.declare(metadata i8* %old_static_chain, metadata !4613, metadata !DIExpression()), !dbg !4614
  %26 = load %union.tree_node*, %union.tree_node** %decl27, align 8, !dbg !4615
  %function_decl29 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !4615
  %regdecl_flag30 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl29, i32 0, i32 5, !dbg !4615
  %bf.load31 = load i32, i32* %regdecl_flag30, align 8, !dbg !4615
  %bf.lshr = lshr i32 %bf.load31, 22, !dbg !4615
  %bf.clear32 = and i32 %bf.lshr, 1, !dbg !4615
  %conv = trunc i32 %bf.clear32 to i8, !dbg !4615
  store i8 %conv, i8* %old_static_chain, align 1, !dbg !4614
  %27 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4616
  call void @walk_function(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_tramp_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_tramp_reference_op, %struct.nesting_info* %27), !dbg !4617
  %28 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4618
  call void @walk_function(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_gimple_call, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %28), !dbg !4619
  %29 = load i8, i8* %old_static_chain, align 1, !dbg !4620
  %tobool33 = icmp ne i8 %29, 0, !dbg !4620
  br i1 %tobool33, label %if.end42, label %land.lhs.true34, !dbg !4622

land.lhs.true34:                                  ; preds = %for.body26
  %30 = load %union.tree_node*, %union.tree_node** %decl27, align 8, !dbg !4623
  %function_decl35 = bitcast %union.tree_node* %30 to %struct.tree_function_decl*, !dbg !4623
  %regdecl_flag36 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl35, i32 0, i32 5, !dbg !4623
  %bf.load37 = load i32, i32* %regdecl_flag36, align 8, !dbg !4623
  %bf.lshr38 = lshr i32 %bf.load37, 22, !dbg !4623
  %bf.clear39 = and i32 %bf.lshr38, 1, !dbg !4623
  %tobool40 = icmp ne i32 %bf.clear39, 0, !dbg !4623
  br i1 %tobool40, label %if.then41, label %if.end42, !dbg !4624

if.then41:                                        ; preds = %land.lhs.true34
  store i8 1, i8* %any_changed, align 1, !dbg !4625
  br label %if.end42, !dbg !4626

if.end42:                                         ; preds = %if.then41, %land.lhs.true34, %for.body26
  br label %for.inc43, !dbg !4627

for.inc43:                                        ; preds = %if.end42
  %31 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4606
  %call44 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %31), !dbg !4606
  store %struct.nesting_info* %call44, %struct.nesting_info** %n, align 8, !dbg !4606
  br label %for.cond24, !dbg !4606, !llvm.loop !4628

for.end45:                                        ; preds = %for.cond24
  br label %do.cond, !dbg !4630

do.cond:                                          ; preds = %for.end45
  %32 = load i8, i8* %any_changed, align 1, !dbg !4631
  %tobool46 = icmp ne i8 %32, 0, !dbg !4630
  br i1 %tobool46, label %do.body, label %do.end, !dbg !4630, !llvm.loop !4632

do.end:                                           ; preds = %do.cond
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4634
  %tobool47 = icmp ne %struct._IO_FILE* %33, null, !dbg !4634
  br i1 %tobool47, label %land.lhs.true48, label %if.end53, !dbg !4636

land.lhs.true48:                                  ; preds = %do.end
  %34 = load i32, i32* @dump_flags, align 4, !dbg !4637
  %and49 = and i32 %34, 8, !dbg !4638
  %tobool50 = icmp ne i32 %and49, 0, !dbg !4638
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !4639

if.then51:                                        ; preds = %land.lhs.true48
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4640
  %36 = load i32, i32* %iter_count, align 4, !dbg !4641
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i64 0, i64 0), i32 %36), !dbg !4642
  br label %if.end53, !dbg !4642

if.end53:                                         ; preds = %if.then51, %land.lhs.true48, %do.end
  ret void, !dbg !4643
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_nesting_tree(%struct.nesting_info* %root) #0 !dbg !4644 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %n = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !4645, metadata !DIExpression()), !dbg !4646
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %n, metadata !4647, metadata !DIExpression()), !dbg !4648
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4649
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %0), !dbg !4649
  store %struct.nesting_info* %call, %struct.nesting_info** %n, align 8, !dbg !4649
  br label %for.cond, !dbg !4649

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4651
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !4649
  br i1 %tobool, label %for.body, label %for.end, !dbg !4649

for.body:                                         ; preds = %for.cond
  %2 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4653
  call void @finalize_nesting_tree_1(%struct.nesting_info* %2), !dbg !4654
  br label %for.inc, !dbg !4654

for.inc:                                          ; preds = %for.body
  %3 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4651
  %call1 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %3), !dbg !4651
  store %struct.nesting_info* %call1, %struct.nesting_info** %n, align 8, !dbg !4651
  br label %for.cond, !dbg !4651, !llvm.loop !4655

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4657
}

; Function Attrs: noinline nounwind uwtable
define internal void @unnest_nesting_tree(%struct.nesting_info* %root) #0 !dbg !4658 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %n = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !4659, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %n, metadata !4661, metadata !DIExpression()), !dbg !4662
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4663
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %0), !dbg !4663
  store %struct.nesting_info* %call, %struct.nesting_info** %n, align 8, !dbg !4663
  br label %for.cond, !dbg !4663

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4665
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !4663
  br i1 %tobool, label %for.body, label %for.end, !dbg !4663

for.body:                                         ; preds = %for.cond
  %2 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4667
  call void @unnest_nesting_tree_1(%struct.nesting_info* %2), !dbg !4668
  br label %for.inc, !dbg !4668

for.inc:                                          ; preds = %for.body
  %3 = load %struct.nesting_info*, %struct.nesting_info** %n, align 8, !dbg !4665
  %call1 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %3), !dbg !4665
  store %struct.nesting_info* %call1, %struct.nesting_info** %n, align 8, !dbg !4665
  br label %for.cond, !dbg !4665, !llvm.loop !4669

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4671
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_nesting_tree(%struct.nesting_info* %root) #0 !dbg !4672 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %node = alloca %struct.nesting_info*, align 8
  %next = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !4673, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %node, metadata !4675, metadata !DIExpression()), !dbg !4676
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %next, metadata !4677, metadata !DIExpression()), !dbg !4678
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4679
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %0), !dbg !4680
  store %struct.nesting_info* %call, %struct.nesting_info** %node, align 8, !dbg !4681
  br label %do.body, !dbg !4682

do.body:                                          ; preds = %do.cond, %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %node, align 8, !dbg !4683
  %call1 = call %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %1), !dbg !4685
  store %struct.nesting_info* %call1, %struct.nesting_info** %next, align 8, !dbg !4686
  %2 = load %struct.nesting_info*, %struct.nesting_info** %node, align 8, !dbg !4687
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 4, !dbg !4688
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !4688
  call void @pointer_map_destroy(%struct.pointer_map_t* %3), !dbg !4689
  %4 = load %struct.nesting_info*, %struct.nesting_info** %node, align 8, !dbg !4690
  %field_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 3, !dbg !4691
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** %field_map, align 8, !dbg !4691
  call void @pointer_map_destroy(%struct.pointer_map_t* %5), !dbg !4692
  %6 = load %struct.nesting_info*, %struct.nesting_info** %node, align 8, !dbg !4693
  %7 = bitcast %struct.nesting_info* %6 to i8*, !dbg !4693
  call void @free(i8* %7), !dbg !4694
  %8 = load %struct.nesting_info*, %struct.nesting_info** %next, align 8, !dbg !4695
  store %struct.nesting_info* %8, %struct.nesting_info** %node, align 8, !dbg !4696
  br label %do.cond, !dbg !4697

do.cond:                                          ; preds = %do.body
  %9 = load %struct.nesting_info*, %struct.nesting_info** %node, align 8, !dbg !4698
  %tobool = icmp ne %struct.nesting_info* %9, null, !dbg !4697
  br i1 %tobool, label %do.body, label %do.end, !dbg !4697, !llvm.loop !4699

do.end:                                           ; preds = %do.cond
  ret void, !dbg !4701
}

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

declare dso_local void @dump_end(i32, %struct._IO_FILE*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node*) #2

declare dso_local void @gimplify_function_tree(%union.tree_node*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_for_nested_with_variably_modified(%union.tree_node* %fndecl, %union.tree_node* %orig_fndecl) #0 !dbg !4702 {
entry:
  %retval = alloca i8, align 1
  %fndecl.addr = alloca %union.tree_node*, align 8
  %orig_fndecl.addr = alloca %union.tree_node*, align 8
  %cgn = alloca %struct.cgraph_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  store %union.tree_node* %orig_fndecl, %union.tree_node** %orig_fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_fndecl.addr, metadata !4707, metadata !DIExpression()), !dbg !4708
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %cgn, metadata !4709, metadata !DIExpression()), !dbg !4710
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4711
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %0), !dbg !4712
  store %struct.cgraph_node* %call, %struct.cgraph_node** %cgn, align 8, !dbg !4710
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4713, metadata !DIExpression()), !dbg !4714
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !4715
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 6, !dbg !4717
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !4717
  store %struct.cgraph_node* %2, %struct.cgraph_node** %cgn, align 8, !dbg !4718
  br label %for.cond, !dbg !4719

for.cond:                                         ; preds = %for.inc12, %entry
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !4720
  %tobool = icmp ne %struct.cgraph_node* %3, null, !dbg !4722
  br i1 %tobool, label %for.body, label %for.end13, !dbg !4722

for.body:                                         ; preds = %for.cond
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !4723
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !4723
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4723
  %decl_non_common = bitcast %union.tree_node* %5 to %struct.tree_decl_non_common*, !dbg !4723
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4723
  %6 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4723
  store %union.tree_node* %6, %union.tree_node** %arg, align 8, !dbg !4726
  br label %for.cond1, !dbg !4727

for.cond1:                                        ; preds = %for.inc, %for.body
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4728
  %tobool2 = icmp ne %union.tree_node* %7, null, !dbg !4730
  br i1 %tobool2, label %for.body3, label %for.end, !dbg !4730

for.body3:                                        ; preds = %for.cond1
  %8 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4731
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4731
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4731
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4731
  %10 = load %union.tree_node*, %union.tree_node** %orig_fndecl.addr, align 8, !dbg !4733
  %call4 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %9, %union.tree_node* %10), !dbg !4734
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4734
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4735

if.then:                                          ; preds = %for.body3
  store i8 1, i8* %retval, align 1, !dbg !4736
  br label %return, !dbg !4736

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !4737

for.inc:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4738
  %common6 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4738
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 1, !dbg !4738
  %12 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4738
  store %union.tree_node* %12, %union.tree_node** %arg, align 8, !dbg !4739
  br label %for.cond1, !dbg !4740, !llvm.loop !4741

for.end:                                          ; preds = %for.cond1
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !4743
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 0, !dbg !4745
  %14 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !4745
  %15 = load %union.tree_node*, %union.tree_node** %orig_fndecl.addr, align 8, !dbg !4746
  %call8 = call zeroext i8 @check_for_nested_with_variably_modified(%union.tree_node* %14, %union.tree_node* %15), !dbg !4747
  %tobool9 = icmp ne i8 %call8, 0, !dbg !4747
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !4748

if.then10:                                        ; preds = %for.end
  store i8 1, i8* %retval, align 1, !dbg !4749
  br label %return, !dbg !4749

if.end11:                                         ; preds = %for.end
  br label %for.inc12, !dbg !4750

for.inc12:                                        ; preds = %if.end11
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %cgn, align 8, !dbg !4751
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 7, !dbg !4752
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !4752
  store %struct.cgraph_node* %17, %struct.cgraph_node** %cgn, align 8, !dbg !4753
  br label %for.cond, !dbg !4754, !llvm.loop !4755

for.end13:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4757
  br label %return, !dbg !4757

return:                                           ; preds = %for.end13, %if.then10, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !4758
  ret i8 %18, !dbg !4758
}

declare dso_local zeroext i8 @variably_modified_type_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %root) #0 !dbg !4759 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  br label %while.cond, !dbg !4764

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4765
  %inner = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 1, !dbg !4766
  %1 = load %struct.nesting_info*, %struct.nesting_info** %inner, align 8, !dbg !4766
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !4764
  br i1 %tobool, label %while.body, label %while.end, !dbg !4764

while.body:                                       ; preds = %while.cond
  %2 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4767
  %inner1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 1, !dbg !4768
  %3 = load %struct.nesting_info*, %struct.nesting_info** %inner1, align 8, !dbg !4768
  store %struct.nesting_info* %3, %struct.nesting_info** %root.addr, align 8, !dbg !4769
  br label %while.cond, !dbg !4764, !llvm.loop !4770

while.end:                                        ; preds = %while.cond
  %4 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !4771
  ret %struct.nesting_info* %4, !dbg !4772
}

; Function Attrs: noinline nounwind uwtable
define internal void @walk_function(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.nesting_info* %info) #0 !dbg !4773 {
entry:
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !4776, metadata !DIExpression()), !dbg !4777
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !4778, metadata !DIExpression()), !dbg !4779
  %0 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4780
  %1 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4781
  %2 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !4782
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !4783
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 6, !dbg !4784
  %4 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4784
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %4), !dbg !4785
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %0, %union.tree_node* (%union.tree_node**, i32*, i8*)* %1, %struct.nesting_info* %2, %struct.gimple_seq_d* %call), !dbg !4786
  ret void, !dbg !4787
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.nesting_info* @iter_nestinfo_next(%struct.nesting_info* %node) #0 !dbg !4788 {
entry:
  %retval = alloca %struct.nesting_info*, align 8
  %node.addr = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %node, %struct.nesting_info** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %node.addr, metadata !4789, metadata !DIExpression()), !dbg !4790
  %0 = load %struct.nesting_info*, %struct.nesting_info** %node.addr, align 8, !dbg !4791
  %next = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 2, !dbg !4793
  %1 = load %struct.nesting_info*, %struct.nesting_info** %next, align 8, !dbg !4793
  %tobool = icmp ne %struct.nesting_info* %1, null, !dbg !4791
  br i1 %tobool, label %if.then, label %if.end, !dbg !4794

if.then:                                          ; preds = %entry
  %2 = load %struct.nesting_info*, %struct.nesting_info** %node.addr, align 8, !dbg !4795
  %next1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 2, !dbg !4796
  %3 = load %struct.nesting_info*, %struct.nesting_info** %next1, align 8, !dbg !4796
  %call = call %struct.nesting_info* @iter_nestinfo_start(%struct.nesting_info* %3), !dbg !4797
  store %struct.nesting_info* %call, %struct.nesting_info** %retval, align 8, !dbg !4798
  br label %return, !dbg !4798

if.end:                                           ; preds = %entry
  %4 = load %struct.nesting_info*, %struct.nesting_info** %node.addr, align 8, !dbg !4799
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 0, !dbg !4800
  %5 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !4800
  store %struct.nesting_info* %5, %struct.nesting_info** %retval, align 8, !dbg !4801
  br label %return, !dbg !4801

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.nesting_info*, %struct.nesting_info** %retval, align 8, !dbg !4802
  ret %struct.nesting_info* %6, !dbg !4802
}

; Function Attrs: noinline nounwind uwtable
define internal void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.nesting_info* %info, %struct.gimple_seq_d* %seq) #0 !dbg !4803 {
entry:
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !4806, metadata !DIExpression()), !dbg !4807
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !4808, metadata !DIExpression()), !dbg !4809
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !4810, metadata !DIExpression()), !dbg !4811
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4812, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !4814, metadata !DIExpression()), !dbg !4815
  %0 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4816
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !4816
  %1 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !4817
  %2 = bitcast %struct.nesting_info* %1 to i8*, !dbg !4817
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !4818
  store i8* %2, i8** %info1, align 8, !dbg !4819
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !4820
  store i8 1, i8* %val_only, align 8, !dbg !4821
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4822
  %4 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !4823
  %5 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !4824
  %call = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %3, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %4, %union.tree_node* (%union.tree_node**, i32*, i8*)* %5, %struct.walk_stmt_info* %wi), !dbg !4825
  ret void, !dbg !4826
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4827 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4830, metadata !DIExpression()), !dbg !4831
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4832
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4832
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4833
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4833
  ret %union.gimple_statement_d* %1, !dbg !4834
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4835 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4839, metadata !DIExpression()), !dbg !4840
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4841
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4842
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4843
  %bf.load = load i32, i32* %1, align 8, !dbg !4843
  %bf.clear = and i32 %bf.load, 255, !dbg !4843
  ret i32 %bf.clear, !dbg !4844
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !4845 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4848, metadata !DIExpression()), !dbg !4849
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4850
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4851
  ret %union.tree_node* %call, !dbg !4852
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @convert_nonlocal_omp_clauses(%union.tree_node** %pclauses, %struct.walk_stmt_info* %wi) #0 !dbg !4853 {
entry:
  %pclauses.addr = alloca %union.tree_node**, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %need_chain = alloca i8, align 1
  %need_stmts = alloca i8, align 1
  %clause = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %dummy = alloca i32, align 4
  %new_suppress = alloca %struct.bitmap_head_def*, align 8
  %old_context = alloca %union.tree_node*, align 8
  store %union.tree_node** %pclauses, %union.tree_node*** %pclauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pclauses.addr, metadata !4856, metadata !DIExpression()), !dbg !4857
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !4858, metadata !DIExpression()), !dbg !4859
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !4860, metadata !DIExpression()), !dbg !4861
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4862
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !4863
  %1 = load i8*, i8** %info1, align 8, !dbg !4863
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !4864
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !4861
  call void @llvm.dbg.declare(metadata i8* %need_chain, metadata !4865, metadata !DIExpression()), !dbg !4866
  store i8 0, i8* %need_chain, align 1, !dbg !4866
  call void @llvm.dbg.declare(metadata i8* %need_stmts, metadata !4867, metadata !DIExpression()), !dbg !4868
  store i8 0, i8* %need_stmts, align 1, !dbg !4868
  call void @llvm.dbg.declare(metadata %union.tree_node** %clause, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4871, metadata !DIExpression()), !dbg !4872
  call void @llvm.dbg.declare(metadata i32* %dummy, metadata !4873, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %new_suppress, metadata !4875, metadata !DIExpression()), !dbg !4876
  %call = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !4877
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !4878
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !4879
  %4 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4880
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 5, !dbg !4881
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !4881
  call void @bitmap_copy(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %5), !dbg !4882
  %6 = load %union.tree_node**, %union.tree_node*** %pclauses.addr, align 8, !dbg !4883
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !4885
  store %union.tree_node* %7, %union.tree_node** %clause, align 8, !dbg !4886
  br label %for.cond, !dbg !4887

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4888
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !4890
  br i1 %tobool, label %for.body, label %for.end, !dbg !4890

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4891
  %omp_clause = bitcast %union.tree_node* %9 to %struct.tree_omp_clause*, !dbg !4891
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !4891
  %10 = load i32, i32* %code, align 4, !dbg !4891
  switch i32 %10, label %sw.default [
    i32 5, label %sw.bb
    i32 4, label %sw.bb4
    i32 1, label %sw.bb9
    i32 3, label %sw.bb9
    i32 7, label %sw.bb9
    i32 2, label %sw.bb9
    i32 10, label %sw.bb34
    i32 8, label %sw.bb41
    i32 9, label %sw.bb41
    i32 11, label %sw.bb46
    i32 12, label %sw.bb46
    i32 13, label %sw.bb46
    i32 6, label %sw.bb46
    i32 14, label %sw.bb46
    i32 15, label %sw.bb46
  ], !dbg !4893

sw.bb:                                            ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4894
  %omp_clause2 = bitcast %union.tree_node* %11 to %struct.tree_omp_clause*, !dbg !4894
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause2, i32 0, i32 6, !dbg !4894
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 3, !dbg !4894
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4894
  %tobool3 = icmp ne %union.tree_node* %12, null, !dbg !4894
  br i1 %tobool3, label %if.then, label %if.end, !dbg !4897

if.then:                                          ; preds = %sw.bb
  store i8 1, i8* %need_stmts, align 1, !dbg !4898
  br label %if.end, !dbg !4899

if.end:                                           ; preds = %if.then, %sw.bb
  br label %do_decl_clause, !dbg !4900

sw.bb4:                                           ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4901
  %omp_clause5 = bitcast %union.tree_node* %13 to %struct.tree_omp_clause*, !dbg !4901
  %gimple_reduction_init = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause5, i32 0, i32 4, !dbg !4901
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init, align 8, !dbg !4901
  %tobool6 = icmp ne %struct.gimple_seq_d* %14, null, !dbg !4901
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !4903

if.then7:                                         ; preds = %sw.bb4
  store i8 1, i8* %need_stmts, align 1, !dbg !4904
  br label %if.end8, !dbg !4905

if.end8:                                          ; preds = %if.then7, %sw.bb4
  br label %do_decl_clause, !dbg !4906

sw.bb9:                                           ; preds = %for.body, %for.body, %for.body, %for.body
  br label %do_decl_clause, !dbg !4906

do_decl_clause:                                   ; preds = %sw.bb9, %if.end8, %if.end
  call void @llvm.dbg.label(metadata !4907), !dbg !4908
  %15 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4909
  %omp_clause10 = bitcast %union.tree_node* %15 to %struct.tree_omp_clause*, !dbg !4909
  %ops11 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause10, i32 0, i32 6, !dbg !4909
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops11, i64 0, i64 0, !dbg !4909
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !4909
  store %union.tree_node* %16, %union.tree_node** %decl, align 8, !dbg !4910
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4911
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !4911
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !4911
  %bf.load = load i64, i64* %18, align 8, !dbg !4911
  %bf.clear = and i64 %bf.load, 65535, !dbg !4911
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4911
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4913
  br i1 %cmp, label %land.lhs.true, label %if.end24, !dbg !4914

land.lhs.true:                                    ; preds = %do_decl_clause
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4915
  %base13 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4915
  %20 = bitcast %struct.tree_base* %base13 to i64*, !dbg !4915
  %bf.load14 = load i64, i64* %20, align 8, !dbg !4915
  %bf.lshr = lshr i64 %bf.load14, 26, !dbg !4915
  %bf.clear15 = and i64 %bf.lshr, 1, !dbg !4915
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !4915
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !4915
  br i1 %tobool17, label %if.then23, label %lor.lhs.false, !dbg !4916

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4917
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !4917
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4917
  %22 = bitcast i40* %decl_flag_1 to i64*, !dbg !4917
  %bf.load18 = load i64, i64* %22, align 8, !dbg !4917
  %bf.lshr19 = lshr i64 %bf.load18, 25, !dbg !4917
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !4917
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !4917
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !4917
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !4918

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true
  br label %sw.epilog, !dbg !4919

if.end24:                                         ; preds = %lor.lhs.false, %do_decl_clause
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4920
  %call25 = call %union.tree_node* @decl_function_context(%union.tree_node* %23), !dbg !4922
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4923
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 6, !dbg !4924
  %25 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4924
  %cmp26 = icmp ne %union.tree_node* %call25, %25, !dbg !4925
  br i1 %cmp26, label %if.then27, label %if.end33, !dbg !4926

if.then27:                                        ; preds = %if.end24
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !4927
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4929
  %decl_minimal = bitcast %union.tree_node* %27 to %struct.tree_decl_minimal*, !dbg !4929
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4929
  %28 = load i32, i32* %uid, align 4, !dbg !4929
  %call28 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %28), !dbg !4930
  %29 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4931
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4932
  %call29 = call %union.tree_node* @get_nonlocal_debug_decl(%struct.nesting_info* %29, %union.tree_node* %30), !dbg !4933
  %31 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4934
  %omp_clause30 = bitcast %union.tree_node* %31 to %struct.tree_omp_clause*, !dbg !4934
  %ops31 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause30, i32 0, i32 6, !dbg !4934
  %arrayidx32 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops31, i64 0, i64 0, !dbg !4934
  store %union.tree_node* %call29, %union.tree_node** %arrayidx32, align 8, !dbg !4935
  store i8 1, i8* %need_chain, align 1, !dbg !4936
  br label %if.end33, !dbg !4937

if.end33:                                         ; preds = %if.then27, %if.end24
  br label %sw.epilog, !dbg !4938

sw.bb34:                                          ; preds = %for.body
  %32 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4939
  %omp_clause35 = bitcast %union.tree_node* %32 to %struct.tree_omp_clause*, !dbg !4939
  %ops36 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause35, i32 0, i32 6, !dbg !4939
  %arrayidx37 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops36, i64 0, i64 0, !dbg !4939
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx37, align 8, !dbg !4939
  %cmp38 = icmp eq %union.tree_node* %33, null, !dbg !4941
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !4942

if.then39:                                        ; preds = %sw.bb34
  br label %sw.epilog, !dbg !4943

if.end40:                                         ; preds = %sw.bb34
  br label %sw.bb41, !dbg !4944

sw.bb41:                                          ; preds = %for.body, %for.body, %if.end40
  %34 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4945
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %34, i32 0, i32 3, !dbg !4946
  store i8 1, i8* %val_only, align 8, !dbg !4947
  %35 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4948
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %35, i32 0, i32 4, !dbg !4949
  store i8 0, i8* %is_lhs, align 1, !dbg !4950
  %36 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4951
  %omp_clause42 = bitcast %union.tree_node* %36 to %struct.tree_omp_clause*, !dbg !4951
  %ops43 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause42, i32 0, i32 6, !dbg !4951
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops43, i64 0, i64 0, !dbg !4951
  %37 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !4952
  %38 = bitcast %struct.walk_stmt_info* %37 to i8*, !dbg !4952
  %call45 = call %union.tree_node* @convert_nonlocal_reference_op(%union.tree_node** %arrayidx44, i32* %dummy, i8* %38), !dbg !4953
  br label %sw.epilog, !dbg !4954

sw.bb46:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  br label %sw.epilog, !dbg !4955

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 1116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4956
  br label %sw.epilog, !dbg !4957

sw.epilog:                                        ; preds = %sw.default, %sw.bb46, %sw.bb41, %if.then39, %if.end33, %if.then23
  br label %for.inc, !dbg !4958

for.inc:                                          ; preds = %sw.epilog
  %39 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4959
  %common = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !4959
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4959
  %40 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4959
  store %union.tree_node* %40, %union.tree_node** %clause, align 8, !dbg !4960
  br label %for.cond, !dbg !4961, !llvm.loop !4962

for.end:                                          ; preds = %for.cond
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !4964
  %42 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4965
  %suppress_expansion47 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %42, i32 0, i32 5, !dbg !4966
  store %struct.bitmap_head_def* %41, %struct.bitmap_head_def** %suppress_expansion47, align 8, !dbg !4967
  %43 = load i8, i8* %need_stmts, align 1, !dbg !4968
  %tobool48 = icmp ne i8 %43, 0, !dbg !4968
  br i1 %tobool48, label %if.then49, label %if.end90, !dbg !4970

if.then49:                                        ; preds = %for.end
  %44 = load %union.tree_node**, %union.tree_node*** %pclauses.addr, align 8, !dbg !4971
  %45 = load %union.tree_node*, %union.tree_node** %44, align 8, !dbg !4973
  store %union.tree_node* %45, %union.tree_node** %clause, align 8, !dbg !4974
  br label %for.cond50, !dbg !4975

for.cond50:                                       ; preds = %for.inc86, %if.then49
  %46 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4976
  %tobool51 = icmp ne %union.tree_node* %46, null, !dbg !4978
  br i1 %tobool51, label %for.body52, label %for.end89, !dbg !4978

for.body52:                                       ; preds = %for.cond50
  %47 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4979
  %omp_clause53 = bitcast %union.tree_node* %47 to %struct.tree_omp_clause*, !dbg !4979
  %code54 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause53, i32 0, i32 2, !dbg !4979
  %48 = load i32, i32* %code54, align 4, !dbg !4979
  switch i32 %48, label %sw.default84 [
    i32 5, label %sw.bb55
    i32 4, label %sw.bb81
  ], !dbg !4980

sw.bb55:                                          ; preds = %for.body52
  %49 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4981
  %omp_clause56 = bitcast %union.tree_node* %49 to %struct.tree_omp_clause*, !dbg !4981
  %ops57 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause56, i32 0, i32 6, !dbg !4981
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops57, i64 0, i64 3, !dbg !4981
  %50 = load %union.tree_node*, %union.tree_node** %arrayidx58, align 8, !dbg !4981
  %tobool59 = icmp ne %union.tree_node* %50, null, !dbg !4981
  br i1 %tobool59, label %if.then60, label %if.end80, !dbg !4984

if.then60:                                        ; preds = %sw.bb55
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_context, metadata !4985, metadata !DIExpression()), !dbg !4987
  %51 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4988
  %omp_clause61 = bitcast %union.tree_node* %51 to %struct.tree_omp_clause*, !dbg !4988
  %ops62 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause61, i32 0, i32 6, !dbg !4988
  %arrayidx63 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops62, i64 0, i64 3, !dbg !4988
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx63, align 8, !dbg !4988
  %decl_minimal64 = bitcast %union.tree_node* %52 to %struct.tree_decl_minimal*, !dbg !4988
  %context65 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal64, i32 0, i32 4, !dbg !4988
  %53 = load %union.tree_node*, %union.tree_node** %context65, align 8, !dbg !4988
  store %union.tree_node* %53, %union.tree_node** %old_context, align 8, !dbg !4987
  %54 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4989
  %context66 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %54, i32 0, i32 6, !dbg !4990
  %55 = load %union.tree_node*, %union.tree_node** %context66, align 8, !dbg !4990
  %56 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4991
  %omp_clause67 = bitcast %union.tree_node* %56 to %struct.tree_omp_clause*, !dbg !4991
  %ops68 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause67, i32 0, i32 6, !dbg !4991
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops68, i64 0, i64 3, !dbg !4991
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !4991
  %decl_minimal70 = bitcast %union.tree_node* %57 to %struct.tree_decl_minimal*, !dbg !4991
  %context71 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal70, i32 0, i32 4, !dbg !4991
  store %union.tree_node* %55, %union.tree_node** %context71, align 8, !dbg !4992
  %58 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4993
  %59 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4994
  %omp_clause72 = bitcast %union.tree_node* %59 to %struct.tree_omp_clause*, !dbg !4994
  %gimple_reduction_init73 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause72, i32 0, i32 4, !dbg !4994
  %60 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init73, align 8, !dbg !4994
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %58, %struct.gimple_seq_d* %60), !dbg !4995
  %61 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !4996
  %62 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !4997
  %omp_clause74 = bitcast %union.tree_node* %62 to %struct.tree_omp_clause*, !dbg !4997
  %gimple_reduction_merge = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause74, i32 0, i32 5, !dbg !4997
  %63 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_merge, align 8, !dbg !4997
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %61, %struct.gimple_seq_d* %63), !dbg !4998
  %64 = load %union.tree_node*, %union.tree_node** %old_context, align 8, !dbg !4999
  %65 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !5000
  %omp_clause75 = bitcast %union.tree_node* %65 to %struct.tree_omp_clause*, !dbg !5000
  %ops76 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause75, i32 0, i32 6, !dbg !5000
  %arrayidx77 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops76, i64 0, i64 3, !dbg !5000
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx77, align 8, !dbg !5000
  %decl_minimal78 = bitcast %union.tree_node* %66 to %struct.tree_decl_minimal*, !dbg !5000
  %context79 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal78, i32 0, i32 4, !dbg !5000
  store %union.tree_node* %64, %union.tree_node** %context79, align 8, !dbg !5001
  br label %if.end80, !dbg !5002

if.end80:                                         ; preds = %if.then60, %sw.bb55
  br label %sw.epilog85, !dbg !5003

sw.bb81:                                          ; preds = %for.body52
  %67 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !5004
  %68 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !5005
  %omp_clause82 = bitcast %union.tree_node* %68 to %struct.tree_omp_clause*, !dbg !5005
  %gimple_reduction_init83 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause82, i32 0, i32 4, !dbg !5005
  %69 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init83, align 8, !dbg !5005
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_nonlocal_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_nonlocal_reference_op, %struct.nesting_info* %67, %struct.gimple_seq_d* %69), !dbg !5006
  br label %sw.epilog85, !dbg !5007

sw.default84:                                     ; preds = %for.body52
  br label %sw.epilog85, !dbg !5008

sw.epilog85:                                      ; preds = %sw.default84, %sw.bb81, %if.end80
  br label %for.inc86, !dbg !5009

for.inc86:                                        ; preds = %sw.epilog85
  %70 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !5010
  %common87 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !5010
  %chain88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 1, !dbg !5010
  %71 = load %union.tree_node*, %union.tree_node** %chain88, align 8, !dbg !5010
  store %union.tree_node* %71, %union.tree_node** %clause, align 8, !dbg !5011
  br label %for.cond50, !dbg !5012, !llvm.loop !5013

for.end89:                                        ; preds = %for.cond50
  br label %if.end90, !dbg !5014

if.end90:                                         ; preds = %for.end89, %for.end
  %72 = load i8, i8* %need_chain, align 1, !dbg !5015
  ret i8 %72, !dbg !5016
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_taskreg_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5017 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5020, metadata !DIExpression()), !dbg !5021
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5022
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5024
  %cmp = icmp ne i32 %call, 26, !dbg !5025
  br i1 %cmp, label %if.then, label %if.end, !dbg !5026

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !5027

if.end:                                           ; preds = %if.then, %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5028
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !5029
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !5030
  ret %union.tree_node** %clauses, !dbg !5031
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_chain_decl(%struct.nesting_info* %info) #0 !dbg !5032 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %decl = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5035, metadata !DIExpression()), !dbg !5036
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5037, metadata !DIExpression()), !dbg !5038
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5039
  %chain_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 12, !dbg !5040
  %1 = load %union.tree_node*, %union.tree_node** %chain_decl, align 8, !dbg !5040
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !5038
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5041
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5041
  br i1 %tobool, label %if.end37, label %if.then, !dbg !5043

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5044, metadata !DIExpression()), !dbg !5046
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5047
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 0, !dbg !5048
  %4 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !5048
  %call = call %union.tree_node* @get_frame_type(%struct.nesting_info* %4), !dbg !5049
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5050
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5051
  %call1 = call %union.tree_node* @build_pointer_type(%union.tree_node* %5), !dbg !5052
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !5053
  %6 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5054
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %6, i32 0, i32 6, !dbg !5054
  %7 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5054
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !5054
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !5054
  %8 = load i32, i32* %locus, align 8, !dbg !5054
  %call2 = call %union.tree_node* @create_tmp_var_name(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0)), !dbg !5054
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5054
  %call3 = call %union.tree_node* @build_decl_stat(i32 %8, i32 34, %union.tree_node* %call2, %union.tree_node* %9), !dbg !5054
  store %union.tree_node* %call3, %union.tree_node** %decl, align 8, !dbg !5055
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5056
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !5056
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5056
  %11 = bitcast i40* %artificial_flag to i64*, !dbg !5056
  %bf.load = load i64, i64* %11, align 8, !dbg !5057
  %bf.clear = and i64 %bf.load, -4097, !dbg !5057
  %bf.set = or i64 %bf.clear, 4096, !dbg !5057
  store i64 %bf.set, i64* %11, align 8, !dbg !5057
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5058
  %decl_common4 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !5058
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common4, i32 0, i32 2, !dbg !5058
  %13 = bitcast i40* %ignored_flag to i64*, !dbg !5058
  %bf.load5 = load i64, i64* %13, align 8, !dbg !5059
  %bf.clear6 = and i64 %bf.load5, -1025, !dbg !5059
  %bf.set7 = or i64 %bf.clear6, 1024, !dbg !5059
  store i64 %bf.set7, i64* %13, align 8, !dbg !5059
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5060
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5060
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !5060
  %bf.load8 = load i64, i64* %15, align 8, !dbg !5061
  %bf.clear9 = and i64 %bf.load8, -16777217, !dbg !5061
  %bf.set10 = or i64 %bf.clear9, 16777216, !dbg !5061
  store i64 %bf.set10, i64* %15, align 8, !dbg !5061
  %16 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5062
  %context11 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %16, i32 0, i32 6, !dbg !5063
  %17 = load %union.tree_node*, %union.tree_node** %context11, align 8, !dbg !5063
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5064
  %decl_minimal12 = bitcast %union.tree_node* %18 to %struct.tree_decl_minimal*, !dbg !5064
  %context13 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal12, i32 0, i32 4, !dbg !5064
  store %union.tree_node* %17, %union.tree_node** %context13, align 8, !dbg !5065
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5066
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5067
  %decl_common14 = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !5067
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common14, i32 0, i32 5, !dbg !5067
  store %union.tree_node* %19, %union.tree_node** %initial, align 8, !dbg !5068
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5069
  %base15 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5069
  %22 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5069
  %bf.load16 = load i64, i64* %22, align 8, !dbg !5070
  %bf.clear17 = and i64 %bf.load16, -1048577, !dbg !5070
  %bf.set18 = or i64 %bf.clear17, 1048576, !dbg !5070
  store i64 %bf.set18, i64* %22, align 8, !dbg !5070
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5071
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5072
  %chain_decl19 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 12, !dbg !5073
  store %union.tree_node* %23, %union.tree_node** %chain_decl19, align 8, !dbg !5074
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5075
  %tobool20 = icmp ne %struct._IO_FILE* %25, null, !dbg !5075
  br i1 %tobool20, label %land.lhs.true, label %if.end, !dbg !5077

land.lhs.true:                                    ; preds = %if.then
  %26 = load i32, i32* @dump_flags, align 4, !dbg !5078
  %and = and i32 %26, 8, !dbg !5079
  %tobool21 = icmp ne i32 %and, 0, !dbg !5079
  br i1 %tobool21, label %land.lhs.true22, label %if.end, !dbg !5080

land.lhs.true22:                                  ; preds = %land.lhs.true
  %27 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5081
  %context23 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %27, i32 0, i32 6, !dbg !5081
  %28 = load %union.tree_node*, %union.tree_node** %context23, align 8, !dbg !5081
  %function_decl = bitcast %union.tree_node* %28 to %struct.tree_function_decl*, !dbg !5081
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5081
  %bf.load24 = load i32, i32* %regdecl_flag, align 8, !dbg !5081
  %bf.lshr = lshr i32 %bf.load24, 22, !dbg !5081
  %bf.clear25 = and i32 %bf.lshr, 1, !dbg !5081
  %tobool26 = icmp ne i32 %bf.clear25, 0, !dbg !5081
  br i1 %tobool26, label %if.end, label %if.then27, !dbg !5082

if.then27:                                        ; preds = %land.lhs.true22
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5083
  %30 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !5084
  %31 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5085
  %context28 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %31, i32 0, i32 6, !dbg !5086
  %32 = load %union.tree_node*, %union.tree_node** %context28, align 8, !dbg !5086
  %call29 = call i8* %30(%union.tree_node* %32, i32 2), !dbg !5087
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %call29), !dbg !5088
  br label %if.end, !dbg !5088

if.end:                                           ; preds = %if.then27, %land.lhs.true22, %land.lhs.true, %if.then
  %33 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5089
  %context31 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %33, i32 0, i32 6, !dbg !5089
  %34 = load %union.tree_node*, %union.tree_node** %context31, align 8, !dbg !5089
  %function_decl32 = bitcast %union.tree_node* %34 to %struct.tree_function_decl*, !dbg !5089
  %regdecl_flag33 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl32, i32 0, i32 5, !dbg !5089
  %bf.load34 = load i32, i32* %regdecl_flag33, align 8, !dbg !5090
  %bf.clear35 = and i32 %bf.load34, -4194305, !dbg !5090
  %bf.set36 = or i32 %bf.clear35, 4194304, !dbg !5090
  store i32 %bf.set36, i32* %regdecl_flag33, align 8, !dbg !5090
  br label %if.end37, !dbg !5091

if.end37:                                         ; preds = %if.end, %entry
  %35 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5092
  ret %union.tree_node* %35, !dbg !5093
}

declare dso_local %union.tree_node* @build_omp_clause(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !5094 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5097, metadata !DIExpression()), !dbg !5098
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5099
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5100
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !5101
  %1 = load i32, i32* %location, align 8, !dbg !5101
  ret i32 %1, !dbg !5102
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_taskreg_clauses(%union.gimple_statement_d* %gs) #0 !dbg !5103 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5104, metadata !DIExpression()), !dbg !5105
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5106
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5108
  %cmp = icmp ne i32 %call, 26, !dbg !5109
  br i1 %cmp, label %if.then, label %if.end, !dbg !5110

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !5111

if.end:                                           ; preds = %if.then, %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5112
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_parallel*, !dbg !5113
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !5114
  %2 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !5114
  ret %union.tree_node* %2, !dbg !5115
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_taskreg_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) #0 !dbg !5116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !5121, metadata !DIExpression()), !dbg !5122
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5123
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5125
  %cmp = icmp ne i32 %call, 26, !dbg !5126
  br i1 %cmp, label %if.then, label %if.end, !dbg !5127

if.then:                                          ; preds = %entry
  br label %if.end, !dbg !5128

if.end:                                           ; preds = %if.then, %entry
  %1 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !5129
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5130
  %gimple_omp_parallel = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_omp_parallel*, !dbg !5131
  %clauses1 = getelementptr inbounds %struct.gimple_statement_omp_parallel, %struct.gimple_statement_omp_parallel* %gimple_omp_parallel, i32 0, i32 1, !dbg !5132
  store %union.tree_node* %1, %union.tree_node** %clauses1, align 8, !dbg !5133
  ret void, !dbg !5134
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) #0 !dbg !5135 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5138, metadata !DIExpression()), !dbg !5139
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5140
  %omp = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp*, !dbg !5141
  %body = getelementptr inbounds %struct.gimple_statement_omp, %struct.gimple_statement_omp* %omp, i32 0, i32 1, !dbg !5142
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !5142
  ret %struct.gimple_seq_d* %1, !dbg !5143
}

declare dso_local void @declare_vars(%union.tree_node*, %union.gimple_statement_d*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %s) #0 !dbg !5144 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5150, metadata !DIExpression()), !dbg !5151
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !5152, metadata !DIExpression()), !dbg !5153
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5154
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !5155
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !5153
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !5156
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !5157
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5157

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !5158
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !5159
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5159
  br label %cond.end, !dbg !5157

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5157

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !5157
  ret %union.gimple_statement_d* %cond, !dbg !5160
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5161 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5162, metadata !DIExpression()), !dbg !5163
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5164
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !5165
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 1, !dbg !5166
  ret %union.tree_node** %clauses, !dbg !5167
}

; Function Attrs: noinline nounwind uwtable
define internal void @walk_gimple_omp_for(%union.gimple_statement_d* %for_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.nesting_info* %info) #0 !dbg !5168 {
entry:
  %for_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %callback_stmt.addr = alloca %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, align 8
  %callback_op.addr = alloca %union.tree_node* (%union.tree_node**, i32*, i8*)*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %t = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %pre_body = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %for_stmt, %union.gimple_statement_d** %for_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %for_stmt.addr, metadata !5171, metadata !DIExpression()), !dbg !5172
  store %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  store %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5177, metadata !DIExpression()), !dbg !5178
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !5179, metadata !DIExpression()), !dbg !5180
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5181, metadata !DIExpression()), !dbg !5182
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5183, metadata !DIExpression()), !dbg !5184
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5185, metadata !DIExpression()), !dbg !5186
  %0 = load %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)** %callback_stmt.addr, align 8, !dbg !5187
  %1 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5188
  %2 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5189
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5190
  %call = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %3), !dbg !5191
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %0, %union.tree_node* (%union.tree_node**, i32*, i8*)* %1, %struct.nesting_info* %2, %struct.gimple_seq_d* %call), !dbg !5192
  %call1 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !5193
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %seq, align 8, !dbg !5194
  %4 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5195
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false), !dbg !5195
  %5 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5196
  %6 = bitcast %struct.nesting_info* %5 to i8*, !dbg !5196
  %info2 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !5197
  store i8* %6, i8** %info2, align 8, !dbg !5198
  %gsi = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 0, !dbg !5199
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5200
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %7), !dbg !5201
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5201
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5201
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !5201
  store i64 0, i64* %i, align 8, !dbg !5202
  br label %for.cond, !dbg !5204

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i64, i64* %i, align 8, !dbg !5205
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5207
  %call3 = call i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %11), !dbg !5208
  %cmp = icmp ult i64 %10, %call3, !dbg !5209
  br i1 %cmp, label %for.body, label %for.end, !dbg !5210

for.body:                                         ; preds = %for.cond
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !5211
  store i8 0, i8* %val_only, align 8, !dbg !5213
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5214
  %13 = load i64, i64* %i, align 8, !dbg !5214
  %call4 = call %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %12, i64 %13), !dbg !5214
  %14 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5214
  %15 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5214
  %call5 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call4, %union.tree_node* (%union.tree_node**, i32*, i8*)* %14, i8* %15, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5214
  %val_only6 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !5215
  store i8 1, i8* %val_only6, align 8, !dbg !5216
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 4, !dbg !5217
  store i8 0, i8* %is_lhs, align 1, !dbg !5218
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5219
  %17 = load i64, i64* %i, align 8, !dbg !5219
  %call7 = call %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %16, i64 %17), !dbg !5219
  %18 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5219
  %19 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5219
  %call8 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call7, %union.tree_node* (%union.tree_node**, i32*, i8*)* %18, i8* %19, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5219
  %val_only9 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !5220
  store i8 1, i8* %val_only9, align 8, !dbg !5221
  %is_lhs10 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 4, !dbg !5222
  store i8 0, i8* %is_lhs10, align 1, !dbg !5223
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5224
  %21 = load i64, i64* %i, align 8, !dbg !5224
  %call11 = call %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %20, i64 %21), !dbg !5224
  %22 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5224
  %23 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5224
  %call12 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call11, %union.tree_node* (%union.tree_node**, i32*, i8*)* %22, i8* %23, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5224
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5225
  %25 = load i64, i64* %i, align 8, !dbg !5226
  %call13 = call %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %24, i64 %25), !dbg !5227
  store %union.tree_node* %call13, %union.tree_node** %t, align 8, !dbg !5228
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5229
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5229
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !5229
  %bf.load = load i64, i64* %27, align 8, !dbg !5229
  %bf.clear = and i64 %bf.load, 65535, !dbg !5229
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5229
  %idxprom = sext i32 %bf.cast to i64, !dbg !5229
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5229
  %28 = load i32, i32* %arrayidx, align 4, !dbg !5229
  %cmp14 = icmp eq i32 %28, 7, !dbg !5229
  br i1 %cmp14, label %cond.false, label %cond.true, !dbg !5229

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 640, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5229
  br label %cond.end, !dbg !5229

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5229
  %val_only15 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !5230
  store i8 0, i8* %val_only15, align 8, !dbg !5231
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5232
  %exp = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !5232
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5232
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5232
  %30 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5232
  %31 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5232
  %call17 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx16, %union.tree_node* (%union.tree_node**, i32*, i8*)* %30, i8* %31, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5232
  %val_only18 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 3, !dbg !5233
  store i8 1, i8* %val_only18, align 8, !dbg !5234
  %is_lhs19 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 4, !dbg !5235
  store i8 0, i8* %is_lhs19, align 1, !dbg !5236
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5237
  %exp20 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !5237
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !5237
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 1, !dbg !5237
  %33 = load %union.tree_node* (%union.tree_node**, i32*, i8*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)** %callback_op.addr, align 8, !dbg !5237
  %34 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5237
  %call23 = call %union.tree_node* @walk_tree_1(%union.tree_node** %arrayidx22, %union.tree_node* (%union.tree_node**, i32*, i8*)* %33, i8* %34, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5237
  br label %for.inc, !dbg !5238

for.inc:                                          ; preds = %cond.end
  %35 = load i64, i64* %i, align 8, !dbg !5239
  %inc = add i64 %35, 1, !dbg !5239
  store i64 %inc, i64* %i, align 8, !dbg !5239
  br label %for.cond, !dbg !5240, !llvm.loop !5241

for.end:                                          ; preds = %for.cond
  %36 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5243
  %call24 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %36), !dbg !5245
  %tobool = icmp ne i8 %call24, 0, !dbg !5245
  br i1 %tobool, label %if.then, label %if.else, !dbg !5246

if.then:                                          ; preds = %for.end
  %37 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5247
  call void @gimple_seq_free(%struct.gimple_seq_d* %37), !dbg !5248
  br label %if.end, !dbg !5248

if.else:                                          ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %pre_body, metadata !5249, metadata !DIExpression()), !dbg !5251
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5252
  %call25 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %38), !dbg !5253
  store %struct.gimple_seq_d* %call25, %struct.gimple_seq_d** %pre_body, align 8, !dbg !5251
  %39 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5254
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5255
  %call26 = call i32 @gimple_location(%union.gimple_statement_d* %40), !dbg !5256
  call void @annotate_all_with_location(%struct.gimple_seq_d* %39, i32 %call26), !dbg !5257
  %41 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5258
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %pre_body, %struct.gimple_seq_d* %41), !dbg !5259
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt.addr, align 8, !dbg !5260
  %43 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body, align 8, !dbg !5261
  call void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %42, %struct.gimple_seq_d* %43), !dbg !5262
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5263
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5264 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5265, metadata !DIExpression()), !dbg !5266
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5267
  %gimple_omp_sections = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_sections*, !dbg !5268
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_sections, %struct.gimple_statement_omp_sections* %gimple_omp_sections, i32 0, i32 1, !dbg !5269
  ret %union.tree_node** %clauses, !dbg !5270
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %gs) #0 !dbg !5271 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5272, metadata !DIExpression()), !dbg !5273
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5274
  %gimple_omp_single = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_single*, !dbg !5275
  %clauses = getelementptr inbounds %struct.gimple_statement_omp_single, %struct.gimple_statement_omp_single* %gimple_omp_single, i32 0, i32 1, !dbg !5276
  ret %union.tree_node** %clauses, !dbg !5277
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) #0 !dbg !5278 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5281
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !5282
  %block = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 2, !dbg !5283
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5283
  ret %union.tree_node* %1, !dbg !5284
}

; Function Attrs: noinline nounwind uwtable
define internal void @note_nonlocal_block_vlas(%struct.nesting_info* %info, %union.tree_node* %block) #0 !dbg !5285 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5288, metadata !DIExpression()), !dbg !5289
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !5290, metadata !DIExpression()), !dbg !5291
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5292, metadata !DIExpression()), !dbg !5293
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5294
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !5294
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !5294
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !5294
  store %union.tree_node* %1, %union.tree_node** %var, align 8, !dbg !5296
  br label %for.cond, !dbg !5297

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5298
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5300
  br i1 %tobool, label %for.body, label %for.end, !dbg !5300

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5301
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5301
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5301
  %bf.load = load i64, i64* %4, align 8, !dbg !5301
  %bf.clear = and i64 %bf.load, 65535, !dbg !5301
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5301
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !5303
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5304

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5305
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5305
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5305
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5305
  %call = call zeroext i8 @variably_modified_type_p(%union.tree_node* %6, %union.tree_node* null), !dbg !5306
  %conv = zext i8 %call to i32, !dbg !5306
  %tobool2 = icmp ne i32 %conv, 0, !dbg !5306
  br i1 %tobool2, label %land.lhs.true3, label %if.end, !dbg !5307

land.lhs.true3:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5308
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !5308
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5308
  %8 = bitcast i40* %decl_flag_2 to i64*, !dbg !5308
  %bf.load4 = load i64, i64* %8, align 8, !dbg !5308
  %bf.lshr = lshr i64 %bf.load4, 26, !dbg !5308
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !5308
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5308
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !5308
  br i1 %tobool7, label %land.lhs.true8, label %if.end, !dbg !5309

land.lhs.true8:                                   ; preds = %land.lhs.true3
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5310
  %call9 = call %union.tree_node* @decl_function_context(%union.tree_node* %9), !dbg !5311
  %10 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5312
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %10, i32 0, i32 6, !dbg !5313
  %11 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5313
  %cmp10 = icmp ne %union.tree_node* %call9, %11, !dbg !5314
  br i1 %cmp10, label %if.then, label %if.end, !dbg !5315

if.then:                                          ; preds = %land.lhs.true8
  %12 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5316
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5317
  %common12 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !5317
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !5317
  %14 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !5317
  call void @note_nonlocal_vla_type(%struct.nesting_info* %12, %union.tree_node* %14), !dbg !5318
  br label %if.end, !dbg !5318

if.end:                                           ; preds = %if.then, %land.lhs.true8, %land.lhs.true3, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5313

for.inc:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5319
  %common14 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5319
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !5319
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5319
  store %union.tree_node* %16, %union.tree_node** %var, align 8, !dbg !5320
  br label %for.cond, !dbg !5321, !llvm.loop !5322

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5324
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5325 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5332
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5334
  %tobool = icmp ne i8 %call, 0, !dbg !5334
  br i1 %tobool, label %if.then, label %if.else, !dbg !5335

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5336
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5338
  %2 = load i32, i32* %i.addr, align 4, !dbg !5339
  %idxprom = zext i32 %2 to i64, !dbg !5338
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5338
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5338
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5340
  br label %return, !dbg !5340

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5341
  br label %return, !dbg !5341

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5342
  ret %union.tree_node* %4, !dbg !5342
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5343 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5346, metadata !DIExpression()), !dbg !5347
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5348
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5349
  %cmp = icmp uge i32 %call, 1, !dbg !5350
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5351

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5352
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5353
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5354
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5355
  %land.ext = zext i1 %2 to i32, !dbg !5351
  %conv = trunc i32 %land.ext to i8, !dbg !5349
  ret i8 %conv, !dbg !5356
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5357 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5358, metadata !DIExpression()), !dbg !5359
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5360, metadata !DIExpression()), !dbg !5361
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5362
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5363
  %idxprom = zext i32 %call to i64, !dbg !5364
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5364
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5364
  store i64 %1, i64* %off, align 8, !dbg !5365
  %2 = load i64, i64* %off, align 8, !dbg !5366
  %cmp = icmp ne i64 %2, 0, !dbg !5366
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5366

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5366
  br label %cond.end, !dbg !5366

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5366

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5366
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5367
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5368
  %5 = load i64, i64* %off, align 8, !dbg !5369
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5370
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5371
  ret %union.tree_node** %6, !dbg !5372
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5373 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5378
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5379
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5380
  ret i32 %call1, !dbg !5381
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5382 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5385, metadata !DIExpression()), !dbg !5386
  %0 = load i32, i32* %code.addr, align 4, !dbg !5387
  %idxprom = zext i32 %0 to i64, !dbg !5388
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5388
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5388
  ret i32 %1, !dbg !5389
}

declare dso_local %struct.bitmap_head_def* @bitmap_gc_alloc_stat() #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_nonlocal_debug_decl(%struct.nesting_info* %info, %union.tree_node* %decl) #0 !dbg !5390 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %target_context = alloca %union.tree_node*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %x = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5393, metadata !DIExpression()), !dbg !5394
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context, metadata !5397, metadata !DIExpression()), !dbg !5398
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !5399, metadata !DIExpression()), !dbg !5400
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !5401, metadata !DIExpression()), !dbg !5402
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5403, metadata !DIExpression()), !dbg !5404
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !5405, metadata !DIExpression()), !dbg !5406
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5407, metadata !DIExpression()), !dbg !5408
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5409
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 4, !dbg !5410
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !5410
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5411
  %3 = bitcast %union.tree_node* %2 to i8*, !dbg !5411
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %1, i8* %3), !dbg !5412
  store i8** %call, i8*** %slot, align 8, !dbg !5413
  %4 = load i8**, i8*** %slot, align 8, !dbg !5414
  %5 = load i8*, i8** %4, align 8, !dbg !5416
  %tobool = icmp ne i8* %5, null, !dbg !5416
  br i1 %tobool, label %if.then, label %if.end, !dbg !5417

if.then:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !5418
  %7 = load i8*, i8** %6, align 8, !dbg !5419
  %8 = bitcast i8* %7 to %union.tree_node*, !dbg !5420
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5421
  br label %return, !dbg !5421

if.end:                                           ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5422
  %call1 = call %union.tree_node* @decl_function_context(%union.tree_node* %9), !dbg !5423
  store %union.tree_node* %call1, %union.tree_node** %target_context, align 8, !dbg !5424
  %10 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5425
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %10, i32 0, i32 6, !dbg !5427
  %11 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5427
  %12 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !5428
  %cmp = icmp eq %union.tree_node* %11, %12, !dbg !5429
  br i1 %cmp, label %if.then2, label %if.else, !dbg !5430

if.then2:                                         ; preds = %if.end
  %13 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5431
  %call3 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %13), !dbg !5433
  %14 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5434
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %14, i32 0, i32 10, !dbg !5435
  %15 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !5435
  store %union.tree_node* %15, %union.tree_node** %x, align 8, !dbg !5436
  %16 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5437
  store %struct.nesting_info* %16, %struct.nesting_info** %i, align 8, !dbg !5438
  br label %if.end20, !dbg !5439

if.else:                                          ; preds = %if.end
  %17 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5440
  %call4 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %17), !dbg !5442
  store %union.tree_node* %call4, %union.tree_node** %x, align 8, !dbg !5443
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5444
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %18, i32 0, i32 0, !dbg !5446
  %19 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !5446
  store %struct.nesting_info* %19, %struct.nesting_info** %i, align 8, !dbg !5447
  br label %for.cond, !dbg !5448

for.cond:                                         ; preds = %for.inc, %if.else
  %20 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !5449
  %context5 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 6, !dbg !5451
  %21 = load %union.tree_node*, %union.tree_node** %context5, align 8, !dbg !5451
  %22 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !5452
  %cmp6 = icmp ne %union.tree_node* %21, %22, !dbg !5453
  br i1 %cmp6, label %for.body, label %for.end, !dbg !5454

for.body:                                         ; preds = %for.cond
  %23 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !5455
  %call7 = call %union.tree_node* @get_chain_field(%struct.nesting_info* %23), !dbg !5457
  store %union.tree_node* %call7, %union.tree_node** %field, align 8, !dbg !5458
  %24 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5459
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !5459
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5459
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5459
  %common8 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !5459
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !5459
  %26 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !5459
  %27 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5459
  %call10 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %26, %union.tree_node* %27), !dbg !5459
  store %union.tree_node* %call10, %union.tree_node** %x, align 8, !dbg !5460
  %28 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5461
  %common11 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5461
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !5461
  %29 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !5461
  %30 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5461
  %31 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5461
  %call13 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* null), !dbg !5461
  store %union.tree_node* %call13, %union.tree_node** %x, align 8, !dbg !5462
  br label %for.inc, !dbg !5463

for.inc:                                          ; preds = %for.body
  %32 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !5464
  %outer14 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %32, i32 0, i32 0, !dbg !5465
  %33 = load %struct.nesting_info*, %struct.nesting_info** %outer14, align 8, !dbg !5465
  store %struct.nesting_info* %33, %struct.nesting_info** %i, align 8, !dbg !5466
  br label %for.cond, !dbg !5467, !llvm.loop !5468

for.end:                                          ; preds = %for.cond
  %34 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5470
  %common15 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !5470
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !5470
  %35 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !5470
  %common17 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !5470
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !5470
  %36 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !5470
  %37 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5470
  %call19 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %36, %union.tree_node* %37), !dbg !5470
  store %union.tree_node* %call19, %union.tree_node** %x, align 8, !dbg !5471
  br label %if.end20

if.end20:                                         ; preds = %for.end, %if.then2
  %38 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !5472
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5473
  %call21 = call %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %38, %union.tree_node* %39, i32 1), !dbg !5474
  store %union.tree_node* %call21, %union.tree_node** %field, align 8, !dbg !5475
  %40 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5476
  %common22 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !5476
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !5476
  %41 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !5476
  %42 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5476
  %43 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5476
  %call24 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43, %union.tree_node* null), !dbg !5476
  store %union.tree_node* %call24, %union.tree_node** %x, align 8, !dbg !5477
  %44 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5478
  %call25 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %44), !dbg !5480
  %tobool26 = icmp ne i8 %call25, 0, !dbg !5480
  br i1 %tobool26, label %if.then27, label %if.end33, !dbg !5481

if.then27:                                        ; preds = %if.end20
  %45 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5482
  %common28 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !5482
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !5482
  %46 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !5482
  %common30 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !5482
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !5482
  %47 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !5482
  %48 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5482
  %call32 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %47, %union.tree_node* %48), !dbg !5482
  store %union.tree_node* %call32, %union.tree_node** %x, align 8, !dbg !5483
  br label %if.end33, !dbg !5484

if.end33:                                         ; preds = %if.then27, %if.end20
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5485
  %decl_minimal = bitcast %union.tree_node* %49 to %struct.tree_decl_minimal*, !dbg !5485
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !5485
  %50 = load i32, i32* %locus, align 8, !dbg !5485
  %51 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5485
  %decl_minimal34 = bitcast %union.tree_node* %51 to %struct.tree_decl_minimal*, !dbg !5485
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal34, i32 0, i32 3, !dbg !5485
  %52 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5485
  %53 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5485
  %common35 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !5485
  %type36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 2, !dbg !5485
  %54 = load %union.tree_node*, %union.tree_node** %type36, align 8, !dbg !5485
  %call37 = call %union.tree_node* @build_decl_stat(i32 %50, i32 32, %union.tree_node* %52, %union.tree_node* %54), !dbg !5485
  store %union.tree_node* %call37, %union.tree_node** %new_decl, align 8, !dbg !5486
  %55 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5487
  %context38 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %55, i32 0, i32 6, !dbg !5488
  %56 = load %union.tree_node*, %union.tree_node** %context38, align 8, !dbg !5488
  %57 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5489
  %decl_minimal39 = bitcast %union.tree_node* %57 to %struct.tree_decl_minimal*, !dbg !5489
  %context40 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal39, i32 0, i32 4, !dbg !5489
  store %union.tree_node* %56, %union.tree_node** %context40, align 8, !dbg !5490
  %58 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5491
  %decl_common = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !5491
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5491
  %59 = bitcast i40* %artificial_flag to i64*, !dbg !5491
  %bf.load = load i64, i64* %59, align 8, !dbg !5491
  %bf.lshr = lshr i64 %bf.load, 12, !dbg !5491
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5491
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5491
  %60 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5492
  %decl_common41 = bitcast %union.tree_node* %60 to %struct.tree_decl_common*, !dbg !5492
  %artificial_flag42 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common41, i32 0, i32 2, !dbg !5492
  %61 = bitcast i40* %artificial_flag42 to i64*, !dbg !5492
  %62 = zext i32 %bf.cast to i64, !dbg !5493
  %bf.load43 = load i64, i64* %61, align 8, !dbg !5493
  %bf.value = and i64 %62, 1, !dbg !5493
  %bf.shl = shl i64 %bf.value, 12, !dbg !5493
  %bf.clear44 = and i64 %bf.load43, -4097, !dbg !5493
  %bf.set = or i64 %bf.clear44, %bf.shl, !dbg !5493
  store i64 %bf.set, i64* %61, align 8, !dbg !5493
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5493
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5494
  %decl_common45 = bitcast %union.tree_node* %63 to %struct.tree_decl_common*, !dbg !5494
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common45, i32 0, i32 2, !dbg !5494
  %64 = bitcast i40* %ignored_flag to i64*, !dbg !5494
  %bf.load46 = load i64, i64* %64, align 8, !dbg !5494
  %bf.lshr47 = lshr i64 %bf.load46, 10, !dbg !5494
  %bf.clear48 = and i64 %bf.lshr47, 1, !dbg !5494
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !5494
  %65 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5495
  %decl_common50 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !5495
  %ignored_flag51 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common50, i32 0, i32 2, !dbg !5495
  %66 = bitcast i40* %ignored_flag51 to i64*, !dbg !5495
  %67 = zext i32 %bf.cast49 to i64, !dbg !5496
  %bf.load52 = load i64, i64* %66, align 8, !dbg !5496
  %bf.value53 = and i64 %67, 1, !dbg !5496
  %bf.shl54 = shl i64 %bf.value53, 10, !dbg !5496
  %bf.clear55 = and i64 %bf.load52, -1025, !dbg !5496
  %bf.set56 = or i64 %bf.clear55, %bf.shl54, !dbg !5496
  store i64 %bf.set56, i64* %66, align 8, !dbg !5496
  %bf.result.cast57 = trunc i64 %bf.value53 to i32, !dbg !5496
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5497
  %base = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !5497
  %69 = bitcast %struct.tree_base* %base to i64*, !dbg !5497
  %bf.load58 = load i64, i64* %69, align 8, !dbg !5497
  %bf.lshr59 = lshr i64 %bf.load58, 19, !dbg !5497
  %bf.clear60 = and i64 %bf.lshr59, 1, !dbg !5497
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !5497
  %70 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5498
  %base62 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !5498
  %71 = bitcast %struct.tree_base* %base62 to i64*, !dbg !5498
  %72 = zext i32 %bf.cast61 to i64, !dbg !5499
  %bf.load63 = load i64, i64* %71, align 8, !dbg !5499
  %bf.value64 = and i64 %72, 1, !dbg !5499
  %bf.shl65 = shl i64 %bf.value64, 19, !dbg !5499
  %bf.clear66 = and i64 %bf.load63, -524289, !dbg !5499
  %bf.set67 = or i64 %bf.clear66, %bf.shl65, !dbg !5499
  store i64 %bf.set67, i64* %71, align 8, !dbg !5499
  %bf.result.cast68 = trunc i64 %bf.value64 to i32, !dbg !5499
  %73 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5500
  %base69 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !5500
  %74 = bitcast %struct.tree_base* %base69 to i64*, !dbg !5500
  %bf.load70 = load i64, i64* %74, align 8, !dbg !5500
  %bf.lshr71 = lshr i64 %bf.load70, 16, !dbg !5500
  %bf.clear72 = and i64 %bf.lshr71, 1, !dbg !5500
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !5500
  %75 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5501
  %base74 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !5501
  %76 = bitcast %struct.tree_base* %base74 to i64*, !dbg !5501
  %77 = zext i32 %bf.cast73 to i64, !dbg !5502
  %bf.load75 = load i64, i64* %76, align 8, !dbg !5502
  %bf.value76 = and i64 %77, 1, !dbg !5502
  %bf.shl77 = shl i64 %bf.value76, 16, !dbg !5502
  %bf.clear78 = and i64 %bf.load75, -65537, !dbg !5502
  %bf.set79 = or i64 %bf.clear78, %bf.shl77, !dbg !5502
  store i64 %bf.set79, i64* %76, align 8, !dbg !5502
  %bf.result.cast80 = trunc i64 %bf.value76 to i32, !dbg !5502
  %78 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5503
  %base81 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !5503
  %79 = bitcast %struct.tree_base* %base81 to i64*, !dbg !5503
  %bf.load82 = load i64, i64* %79, align 8, !dbg !5503
  %bf.lshr83 = lshr i64 %bf.load82, 20, !dbg !5503
  %bf.clear84 = and i64 %bf.lshr83, 1, !dbg !5503
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !5503
  %80 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5504
  %base86 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !5504
  %81 = bitcast %struct.tree_base* %base86 to i64*, !dbg !5504
  %82 = zext i32 %bf.cast85 to i64, !dbg !5505
  %bf.load87 = load i64, i64* %81, align 8, !dbg !5505
  %bf.value88 = and i64 %82, 1, !dbg !5505
  %bf.shl89 = shl i64 %bf.value88, 20, !dbg !5505
  %bf.clear90 = and i64 %bf.load87, -1048577, !dbg !5505
  %bf.set91 = or i64 %bf.clear90, %bf.shl89, !dbg !5505
  store i64 %bf.set91, i64* %81, align 8, !dbg !5505
  %bf.result.cast92 = trunc i64 %bf.value88 to i32, !dbg !5505
  %83 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5506
  %base93 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !5506
  %84 = bitcast %struct.tree_base* %base93 to i64*, !dbg !5506
  %bf.load94 = load i64, i64* %84, align 8, !dbg !5506
  %bf.lshr95 = lshr i64 %bf.load94, 18, !dbg !5506
  %bf.clear96 = and i64 %bf.lshr95, 1, !dbg !5506
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !5506
  %85 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5507
  %base98 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !5507
  %86 = bitcast %struct.tree_base* %base98 to i64*, !dbg !5507
  %87 = zext i32 %bf.cast97 to i64, !dbg !5508
  %bf.load99 = load i64, i64* %86, align 8, !dbg !5508
  %bf.value100 = and i64 %87, 1, !dbg !5508
  %bf.shl101 = shl i64 %bf.value100, 18, !dbg !5508
  %bf.clear102 = and i64 %bf.load99, -262145, !dbg !5508
  %bf.set103 = or i64 %bf.clear102, %bf.shl101, !dbg !5508
  store i64 %bf.set103, i64* %86, align 8, !dbg !5508
  %bf.result.cast104 = trunc i64 %bf.value100 to i32, !dbg !5508
  %88 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5509
  %decl_with_vis = bitcast %union.tree_node* %88 to %struct.tree_decl_with_vis*, !dbg !5509
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !5509
  %89 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !5509
  %bf.load105 = load i32, i32* %89, align 8, !dbg !5510
  %bf.clear106 = and i32 %bf.load105, -257, !dbg !5510
  %bf.set107 = or i32 %bf.clear106, 256, !dbg !5510
  store i32 %bf.set107, i32* %89, align 8, !dbg !5510
  %90 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5511
  %base108 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !5511
  %91 = bitcast %struct.tree_base* %base108 to i64*, !dbg !5511
  %bf.load109 = load i64, i64* %91, align 8, !dbg !5511
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !5511
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !5511
  %cmp112 = icmp eq i32 %bf.cast111, 34, !dbg !5513
  br i1 %cmp112, label %land.lhs.true, label %lor.lhs.false, !dbg !5514

lor.lhs.false:                                    ; preds = %if.end33
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5515
  %base113 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !5515
  %93 = bitcast %struct.tree_base* %base113 to i64*, !dbg !5515
  %bf.load114 = load i64, i64* %93, align 8, !dbg !5515
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !5515
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !5515
  %cmp117 = icmp eq i32 %bf.cast116, 36, !dbg !5516
  br i1 %cmp117, label %land.lhs.true, label %lor.lhs.false118, !dbg !5517

lor.lhs.false118:                                 ; preds = %lor.lhs.false
  %94 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5518
  %base119 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !5518
  %95 = bitcast %struct.tree_base* %base119 to i64*, !dbg !5518
  %bf.load120 = load i64, i64* %95, align 8, !dbg !5518
  %bf.clear121 = and i64 %bf.load120, 65535, !dbg !5518
  %bf.cast122 = trunc i64 %bf.clear121 to i32, !dbg !5518
  %cmp123 = icmp eq i32 %bf.cast122, 32, !dbg !5519
  br i1 %cmp123, label %land.lhs.true, label %if.end136, !dbg !5520

land.lhs.true:                                    ; preds = %lor.lhs.false118, %lor.lhs.false, %if.end33
  %96 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5521
  %decl_common124 = bitcast %union.tree_node* %96 to %struct.tree_decl_common*, !dbg !5521
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common124, i32 0, i32 2, !dbg !5521
  %97 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !5521
  %bf.load125 = load i64, i64* %97, align 8, !dbg !5521
  %bf.lshr126 = lshr i64 %bf.load125, 28, !dbg !5521
  %bf.clear127 = and i64 %bf.lshr126, 1, !dbg !5521
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !5521
  %tobool129 = icmp ne i32 %bf.cast128, 0, !dbg !5521
  br i1 %tobool129, label %if.then130, label %if.end136, !dbg !5522

if.then130:                                       ; preds = %land.lhs.true
  %98 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5523
  %decl_common131 = bitcast %union.tree_node* %98 to %struct.tree_decl_common*, !dbg !5523
  %decl_by_reference_flag132 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common131, i32 0, i32 2, !dbg !5523
  %99 = bitcast i40* %decl_by_reference_flag132 to i64*, !dbg !5523
  %bf.load133 = load i64, i64* %99, align 8, !dbg !5524
  %bf.clear134 = and i64 %bf.load133, -268435457, !dbg !5524
  %bf.set135 = or i64 %bf.clear134, 268435456, !dbg !5524
  store i64 %bf.set135, i64* %99, align 8, !dbg !5524
  br label %if.end136, !dbg !5523

if.end136:                                        ; preds = %if.then130, %land.lhs.true, %lor.lhs.false118
  %100 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5525
  %101 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5525
  call void @decl_value_expr_insert(%union.tree_node* %100, %union.tree_node* %101), !dbg !5525
  %102 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5526
  %decl_common137 = bitcast %union.tree_node* %102 to %struct.tree_decl_common*, !dbg !5526
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common137, i32 0, i32 2, !dbg !5526
  %103 = bitcast i40* %decl_flag_2 to i64*, !dbg !5526
  %bf.load138 = load i64, i64* %103, align 8, !dbg !5527
  %bf.clear139 = and i64 %bf.load138, -67108865, !dbg !5527
  %bf.set140 = or i64 %bf.clear139, 67108864, !dbg !5527
  store i64 %bf.set140, i64* %103, align 8, !dbg !5527
  %104 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5528
  %105 = bitcast %union.tree_node* %104 to i8*, !dbg !5528
  %106 = load i8**, i8*** %slot, align 8, !dbg !5529
  store i8* %105, i8** %106, align 8, !dbg !5530
  %107 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5531
  %debug_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %107, i32 0, i32 8, !dbg !5532
  %108 = load %union.tree_node*, %union.tree_node** %debug_var_chain, align 8, !dbg !5532
  %109 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5533
  %common141 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !5533
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common141, i32 0, i32 1, !dbg !5533
  store %union.tree_node* %108, %union.tree_node** %chain, align 8, !dbg !5534
  %110 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5535
  %111 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5536
  %debug_var_chain142 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %111, i32 0, i32 8, !dbg !5537
  store %union.tree_node* %110, %union.tree_node** %debug_var_chain142, align 8, !dbg !5538
  %112 = load i32, i32* @optimize, align 4, !dbg !5539
  %tobool143 = icmp ne i32 %112, 0, !dbg !5539
  br i1 %tobool143, label %if.end155, label %land.lhs.true144, !dbg !5541

land.lhs.true144:                                 ; preds = %if.end136
  %113 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5542
  %context145 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %113, i32 0, i32 6, !dbg !5543
  %114 = load %union.tree_node*, %union.tree_node** %context145, align 8, !dbg !5543
  %115 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !5544
  %cmp146 = icmp ne %union.tree_node* %114, %115, !dbg !5545
  br i1 %cmp146, label %land.lhs.true147, label %if.end155, !dbg !5546

land.lhs.true147:                                 ; preds = %land.lhs.true144
  %116 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5547
  %common148 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !5547
  %type149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 2, !dbg !5547
  %117 = load %union.tree_node*, %union.tree_node** %type149, align 8, !dbg !5547
  %call150 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %117, %union.tree_node* null), !dbg !5548
  %conv = zext i8 %call150 to i32, !dbg !5548
  %tobool151 = icmp ne i32 %conv, 0, !dbg !5548
  br i1 %tobool151, label %if.then152, label %if.end155, !dbg !5549

if.then152:                                       ; preds = %land.lhs.true147
  %118 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5550
  %119 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5551
  %common153 = bitcast %union.tree_node* %119 to %struct.tree_common*, !dbg !5551
  %type154 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common153, i32 0, i32 2, !dbg !5551
  %120 = load %union.tree_node*, %union.tree_node** %type154, align 8, !dbg !5551
  call void @note_nonlocal_vla_type(%struct.nesting_info* %118, %union.tree_node* %120), !dbg !5552
  br label %if.end155, !dbg !5552

if.end155:                                        ; preds = %if.then152, %land.lhs.true147, %land.lhs.true144, %if.end136
  %121 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !5553
  store %union.tree_node* %121, %union.tree_node** %retval, align 8, !dbg !5554
  br label %return, !dbg !5554

return:                                           ; preds = %if.end155, %if.then
  %122 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5555
  ret %union.tree_node* %122, !dbg !5555
}

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_frame_type(%struct.nesting_info* %info) #0 !dbg !5556 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %type = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5557, metadata !DIExpression()), !dbg !5558
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5559, metadata !DIExpression()), !dbg !5560
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5561
  %frame_type = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 9, !dbg !5562
  %1 = load %union.tree_node*, %union.tree_node** %frame_type, align 8, !dbg !5562
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !5560
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5563
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5563
  br i1 %tobool, label %if.end, label %if.then, !dbg !5565

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name, metadata !5566, metadata !DIExpression()), !dbg !5568
  %call = call %union.tree_node* @make_node_stat(i32 16), !dbg !5569
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !5570
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5571
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 6, !dbg !5571
  %4 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5571
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !5571
  %name1 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5571
  %5 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !5571
  %identifier = bitcast %union.tree_node* %5 to %struct.tree_identifier*, !dbg !5571
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !5571
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !5571
  %6 = load i8*, i8** %str, align 8, !dbg !5571
  %call2 = call i8* (i8*, ...) @concat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* %6, i8* null), !dbg !5572
  store i8* %call2, i8** %name, align 8, !dbg !5573
  %7 = load i8*, i8** %name, align 8, !dbg !5574
  %call3 = call %union.tree_node* @get_identifier(i8* %7), !dbg !5575
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5576
  %type4 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !5576
  %name5 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 12, !dbg !5576
  store %union.tree_node* %call3, %union.tree_node** %name5, align 8, !dbg !5577
  %9 = load i8*, i8** %name, align 8, !dbg !5578
  call void @free(i8* %9), !dbg !5579
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5580
  %11 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5581
  %frame_type6 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %11, i32 0, i32 9, !dbg !5582
  store %union.tree_node* %10, %union.tree_node** %frame_type6, align 8, !dbg !5583
  %12 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5584
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5585
  %call7 = call %union.tree_node* @create_tmp_var_for(%struct.nesting_info* %12, %union.tree_node* %13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0)), !dbg !5586
  %14 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5587
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %14, i32 0, i32 10, !dbg !5588
  store %union.tree_node* %call7, %union.tree_node** %frame_decl, align 8, !dbg !5589
  %15 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5590
  %frame_decl8 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 10, !dbg !5590
  %16 = load %union.tree_node*, %union.tree_node** %frame_decl8, align 8, !dbg !5590
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5590
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !5590
  %bf.load = load i64, i64* %17, align 8, !dbg !5591
  %bf.clear = and i64 %bf.load, -262145, !dbg !5591
  %bf.set = or i64 %bf.clear, 262144, !dbg !5591
  store i64 %bf.set, i64* %17, align 8, !dbg !5591
  br label %if.end, !dbg !5592

if.end:                                           ; preds = %if.then, %entry
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5593
  ret %union.tree_node* %18, !dbg !5594
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_chain_field(%struct.nesting_info* %info) #0 !dbg !5595 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %field = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5596, metadata !DIExpression()), !dbg !5597
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5598, metadata !DIExpression()), !dbg !5599
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5600
  %chain_field = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 11, !dbg !5601
  %1 = load %union.tree_node*, %union.tree_node** %chain_field, align 8, !dbg !5601
  store %union.tree_node* %1, %union.tree_node** %field, align 8, !dbg !5599
  %2 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5602
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5602
  br i1 %tobool, label %if.end26, label %if.then, !dbg !5604

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5605, metadata !DIExpression()), !dbg !5607
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5608
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 0, !dbg !5609
  %4 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !5609
  %call = call %union.tree_node* @get_frame_type(%struct.nesting_info* %4), !dbg !5610
  %call1 = call %union.tree_node* @build_pointer_type(%union.tree_node* %call), !dbg !5611
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !5607
  %call2 = call %union.tree_node* @make_node_stat(i32 31), !dbg !5612
  store %union.tree_node* %call2, %union.tree_node** %field, align 8, !dbg !5613
  %call3 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0)), !dbg !5614
  %5 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5615
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !5615
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5615
  store %union.tree_node* %call3, %union.tree_node** %name, align 8, !dbg !5616
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5617
  %7 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5618
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5618
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5618
  store %union.tree_node* %6, %union.tree_node** %type4, align 8, !dbg !5619
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5620
  %type5 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !5620
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 7, !dbg !5620
  %9 = load i32, i32* %align, align 8, !dbg !5620
  %10 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5621
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !5621
  %align6 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !5621
  store i32 %9, i32* %align6, align 8, !dbg !5622
  %11 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5623
  %decl_common7 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !5623
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common7, i32 0, i32 2, !dbg !5623
  %12 = bitcast i40* %decl_flag_2 to i64*, !dbg !5623
  %bf.load = load i64, i64* %12, align 8, !dbg !5624
  %bf.clear = and i64 %bf.load, -67108865, !dbg !5624
  %bf.set = or i64 %bf.clear, 67108864, !dbg !5624
  store i64 %bf.set, i64* %12, align 8, !dbg !5624
  %13 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5625
  %call8 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %13), !dbg !5626
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5627
  call void @insert_field_into_struct(%union.tree_node* %call8, %union.tree_node* %14), !dbg !5628
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5629
  %16 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5630
  %chain_field9 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %16, i32 0, i32 11, !dbg !5631
  store %union.tree_node* %15, %union.tree_node** %chain_field9, align 8, !dbg !5632
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5633
  %tobool10 = icmp ne %struct._IO_FILE* %17, null, !dbg !5633
  br i1 %tobool10, label %land.lhs.true, label %if.end, !dbg !5635

land.lhs.true:                                    ; preds = %if.then
  %18 = load i32, i32* @dump_flags, align 4, !dbg !5636
  %and = and i32 %18, 8, !dbg !5637
  %tobool11 = icmp ne i32 %and, 0, !dbg !5637
  br i1 %tobool11, label %land.lhs.true12, label %if.end, !dbg !5638

land.lhs.true12:                                  ; preds = %land.lhs.true
  %19 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5639
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %19, i32 0, i32 6, !dbg !5639
  %20 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5639
  %function_decl = bitcast %union.tree_node* %20 to %struct.tree_function_decl*, !dbg !5639
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5639
  %bf.load13 = load i32, i32* %regdecl_flag, align 8, !dbg !5639
  %bf.lshr = lshr i32 %bf.load13, 22, !dbg !5639
  %bf.clear14 = and i32 %bf.lshr, 1, !dbg !5639
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !5639
  br i1 %tobool15, label %if.end, label %if.then16, !dbg !5640

if.then16:                                        ; preds = %land.lhs.true12
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5641
  %22 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !5642
  %23 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5643
  %context17 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %23, i32 0, i32 6, !dbg !5644
  %24 = load %union.tree_node*, %union.tree_node** %context17, align 8, !dbg !5644
  %call18 = call i8* %22(%union.tree_node* %24, i32 2), !dbg !5645
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %call18), !dbg !5646
  br label %if.end, !dbg !5646

if.end:                                           ; preds = %if.then16, %land.lhs.true12, %land.lhs.true, %if.then
  %25 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5647
  %context20 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %25, i32 0, i32 6, !dbg !5647
  %26 = load %union.tree_node*, %union.tree_node** %context20, align 8, !dbg !5647
  %function_decl21 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !5647
  %regdecl_flag22 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl21, i32 0, i32 5, !dbg !5647
  %bf.load23 = load i32, i32* %regdecl_flag22, align 8, !dbg !5648
  %bf.clear24 = and i32 %bf.load23, -4194305, !dbg !5648
  %bf.set25 = or i32 %bf.clear24, 4194304, !dbg !5648
  store i32 %bf.set25, i32* %regdecl_flag22, align 8, !dbg !5648
  br label %if.end26, !dbg !5649

if.end26:                                         ; preds = %if.end, %entry
  %27 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5650
  ret %union.tree_node* %27, !dbg !5651
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %info, %union.tree_node* %decl, i32 %insert) #0 !dbg !5652 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %insert.addr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %field = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5655, metadata !DIExpression()), !dbg !5656
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5657, metadata !DIExpression()), !dbg !5658
  store i32 %insert, i32* %insert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %insert.addr, metadata !5659, metadata !DIExpression()), !dbg !5660
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5661, metadata !DIExpression()), !dbg !5662
  %0 = load i32, i32* %insert.addr, align 4, !dbg !5663
  %cmp = icmp eq i32 %0, 0, !dbg !5665
  br i1 %cmp, label %if.then, label %if.end, !dbg !5666

if.then:                                          ; preds = %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5667
  %field_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %1, i32 0, i32 3, !dbg !5669
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %field_map, align 8, !dbg !5669
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5670
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !5670
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %4), !dbg !5671
  store i8** %call, i8*** %slot, align 8, !dbg !5672
  %5 = load i8**, i8*** %slot, align 8, !dbg !5673
  %tobool = icmp ne i8** %5, null, !dbg !5673
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5673

cond.true:                                        ; preds = %if.then
  %6 = load i8**, i8*** %slot, align 8, !dbg !5674
  %7 = load i8*, i8** %6, align 8, !dbg !5675
  %8 = bitcast i8* %7 to %union.tree_node*, !dbg !5676
  br label %cond.end, !dbg !5673

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5673

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %8, %cond.true ], [ null, %cond.false ], !dbg !5673
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !5677
  br label %return, !dbg !5677

if.end:                                           ; preds = %entry
  %9 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5678
  %field_map1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %9, i32 0, i32 3, !dbg !5679
  %10 = load %struct.pointer_map_t*, %struct.pointer_map_t** %field_map1, align 8, !dbg !5679
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5680
  %12 = bitcast %union.tree_node* %11 to i8*, !dbg !5680
  %call2 = call i8** @pointer_map_insert(%struct.pointer_map_t* %10, i8* %12), !dbg !5681
  store i8** %call2, i8*** %slot, align 8, !dbg !5682
  %13 = load i8**, i8*** %slot, align 8, !dbg !5683
  %14 = load i8*, i8** %13, align 8, !dbg !5685
  %tobool3 = icmp ne i8* %14, null, !dbg !5685
  br i1 %tobool3, label %if.end85, label %if.then4, !dbg !5686

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5687, metadata !DIExpression()), !dbg !5689
  %call5 = call %union.tree_node* @make_node_stat(i32 31), !dbg !5690
  store %union.tree_node* %call5, %union.tree_node** %field, align 8, !dbg !5689
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5691
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !5691
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5691
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5691
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5692
  %decl_minimal6 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !5692
  %name7 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal6, i32 0, i32 3, !dbg !5692
  store %union.tree_node* %16, %union.tree_node** %name7, align 8, !dbg !5693
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5694
  %call8 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %18), !dbg !5696
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5696
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !5697

if.then10:                                        ; preds = %if.then4
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5698
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5698
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5698
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5698
  %call11 = call %union.tree_node* @build_pointer_type(%union.tree_node* %20), !dbg !5700
  %21 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5701
  %common12 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !5701
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !5701
  store %union.tree_node* %call11, %union.tree_node** %type13, align 8, !dbg !5702
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5703
  %common14 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !5703
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !5703
  %23 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !5703
  %type16 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !5703
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 7, !dbg !5703
  %24 = load i32, i32* %align, align 8, !dbg !5703
  %25 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5704
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !5704
  %align17 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !5704
  store i32 %24, i32* %align17, align 8, !dbg !5705
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5706
  %decl_common18 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !5706
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !5706
  %27 = bitcast i40* %decl_flag_2 to i64*, !dbg !5706
  %bf.load = load i64, i64* %27, align 8, !dbg !5707
  %bf.clear = and i64 %bf.load, -67108865, !dbg !5707
  %bf.set = or i64 %bf.clear, 67108864, !dbg !5707
  store i64 %bf.set, i64* %27, align 8, !dbg !5707
  br label %if.end76, !dbg !5708

if.else:                                          ; preds = %if.then4
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5709
  %common19 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5709
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !5709
  %29 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !5709
  %30 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5711
  %common21 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5711
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !5711
  store %union.tree_node* %29, %union.tree_node** %type22, align 8, !dbg !5712
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5713
  %decl_minimal23 = bitcast %union.tree_node* %31 to %struct.tree_decl_minimal*, !dbg !5713
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal23, i32 0, i32 1, !dbg !5713
  %32 = load i32, i32* %locus, align 8, !dbg !5713
  %33 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5714
  %decl_minimal24 = bitcast %union.tree_node* %33 to %struct.tree_decl_minimal*, !dbg !5714
  %locus25 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal24, i32 0, i32 1, !dbg !5714
  store i32 %32, i32* %locus25, align 8, !dbg !5715
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5716
  %decl_common26 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !5716
  %align27 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 3, !dbg !5716
  %35 = load i32, i32* %align27, align 8, !dbg !5716
  %36 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5717
  %decl_common28 = bitcast %union.tree_node* %36 to %struct.tree_decl_common*, !dbg !5717
  %align29 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common28, i32 0, i32 3, !dbg !5717
  store i32 %35, i32* %align29, align 8, !dbg !5718
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5719
  %common30 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !5719
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 0, !dbg !5719
  %38 = bitcast %struct.tree_base* %base to i64*, !dbg !5719
  %bf.load31 = load i64, i64* %38, align 8, !dbg !5719
  %bf.lshr = lshr i64 %bf.load31, 42, !dbg !5719
  %bf.clear32 = and i64 %bf.lshr, 1, !dbg !5719
  %bf.cast = trunc i64 %bf.clear32 to i32, !dbg !5719
  %39 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5720
  %common33 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !5720
  %base34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 0, !dbg !5720
  %40 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5720
  %41 = zext i32 %bf.cast to i64, !dbg !5721
  %bf.load35 = load i64, i64* %40, align 8, !dbg !5721
  %bf.value = and i64 %41, 1, !dbg !5721
  %bf.shl = shl i64 %bf.value, 42, !dbg !5721
  %bf.clear36 = and i64 %bf.load35, -4398046511105, !dbg !5721
  %bf.set37 = or i64 %bf.clear36, %bf.shl, !dbg !5721
  store i64 %bf.set37, i64* %40, align 8, !dbg !5721
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5721
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5722
  %base38 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !5722
  %43 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5722
  %bf.load39 = load i64, i64* %43, align 8, !dbg !5722
  %bf.lshr40 = lshr i64 %bf.load39, 18, !dbg !5722
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !5722
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5722
  %44 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5723
  %base43 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5723
  %45 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5723
  %46 = zext i32 %bf.cast42 to i64, !dbg !5724
  %bf.load44 = load i64, i64* %45, align 8, !dbg !5724
  %bf.value45 = and i64 %46, 1, !dbg !5724
  %bf.shl46 = shl i64 %bf.value45, 18, !dbg !5724
  %bf.clear47 = and i64 %bf.load44, -262145, !dbg !5724
  %bf.set48 = or i64 %bf.clear47, %bf.shl46, !dbg !5724
  store i64 %bf.set48, i64* %45, align 8, !dbg !5724
  %bf.result.cast49 = trunc i64 %bf.value45 to i32, !dbg !5724
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5725
  %base50 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !5725
  %48 = bitcast %struct.tree_base* %base50 to i64*, !dbg !5725
  %bf.load51 = load i64, i64* %48, align 8, !dbg !5725
  %bf.lshr52 = lshr i64 %bf.load51, 18, !dbg !5725
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !5725
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !5725
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !5726
  %lnot = xor i1 %tobool55, true, !dbg !5726
  %lnot.ext = zext i1 %lnot to i32, !dbg !5726
  %49 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5727
  %decl_common56 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !5727
  %decl_flag_257 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common56, i32 0, i32 2, !dbg !5727
  %50 = bitcast i40* %decl_flag_257 to i64*, !dbg !5727
  %51 = zext i32 %lnot.ext to i64, !dbg !5728
  %bf.load58 = load i64, i64* %50, align 8, !dbg !5728
  %bf.value59 = and i64 %51, 1, !dbg !5728
  %bf.shl60 = shl i64 %bf.value59, 26, !dbg !5728
  %bf.clear61 = and i64 %bf.load58, -67108865, !dbg !5728
  %bf.set62 = or i64 %bf.clear61, %bf.shl60, !dbg !5728
  store i64 %bf.set62, i64* %50, align 8, !dbg !5728
  %bf.result.cast63 = trunc i64 %bf.value59 to i32, !dbg !5728
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5729
  %base64 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !5729
  %53 = bitcast %struct.tree_base* %base64 to i64*, !dbg !5729
  %bf.load65 = load i64, i64* %53, align 8, !dbg !5729
  %bf.lshr66 = lshr i64 %bf.load65, 19, !dbg !5729
  %bf.clear67 = and i64 %bf.lshr66, 1, !dbg !5729
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !5729
  %54 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5730
  %base69 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !5730
  %55 = bitcast %struct.tree_base* %base69 to i64*, !dbg !5730
  %56 = zext i32 %bf.cast68 to i64, !dbg !5731
  %bf.load70 = load i64, i64* %55, align 8, !dbg !5731
  %bf.value71 = and i64 %56, 1, !dbg !5731
  %bf.shl72 = shl i64 %bf.value71, 19, !dbg !5731
  %bf.clear73 = and i64 %bf.load70, -524289, !dbg !5731
  %bf.set74 = or i64 %bf.clear73, %bf.shl72, !dbg !5731
  store i64 %bf.set74, i64* %55, align 8, !dbg !5731
  %bf.result.cast75 = trunc i64 %bf.value71 to i32, !dbg !5731
  br label %if.end76

if.end76:                                         ; preds = %if.else, %if.then10
  %57 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5732
  %call77 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %57), !dbg !5733
  %58 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5734
  call void @insert_field_into_struct(%union.tree_node* %call77, %union.tree_node* %58), !dbg !5735
  %59 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5736
  %60 = bitcast %union.tree_node* %59 to i8*, !dbg !5736
  %61 = load i8**, i8*** %slot, align 8, !dbg !5737
  store i8* %60, i8** %61, align 8, !dbg !5738
  %62 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5739
  %base78 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !5739
  %63 = bitcast %struct.tree_base* %base78 to i64*, !dbg !5739
  %bf.load79 = load i64, i64* %63, align 8, !dbg !5739
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !5739
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !5739
  %cmp82 = icmp eq i32 %bf.cast81, 34, !dbg !5741
  br i1 %cmp82, label %if.then83, label %if.end84, !dbg !5742

if.then83:                                        ; preds = %if.end76
  %64 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5743
  %any_parm_remapped = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %64, i32 0, i32 14, !dbg !5744
  store i8 1, i8* %any_parm_remapped, align 8, !dbg !5745
  br label %if.end84, !dbg !5743

if.end84:                                         ; preds = %if.then83, %if.end76
  br label %if.end85, !dbg !5746

if.end85:                                         ; preds = %if.end84, %if.end
  %65 = load i8**, i8*** %slot, align 8, !dbg !5747
  %66 = load i8*, i8** %65, align 8, !dbg !5748
  %67 = bitcast i8* %66 to %union.tree_node*, !dbg !5749
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !5750
  br label %return, !dbg !5750

return:                                           ; preds = %if.end85, %cond.end
  %68 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5751
  ret %union.tree_node* %68, !dbg !5751
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @use_pointer_in_frame(%union.tree_node* %decl) #0 !dbg !5752 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5755, metadata !DIExpression()), !dbg !5756
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5757
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5757
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5757
  %bf.load = load i64, i64* %1, align 8, !dbg !5757
  %bf.clear = and i64 %bf.load, 65535, !dbg !5757
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5757
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !5759
  br i1 %cmp, label %if.then, label %if.else, !dbg !5760

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5761
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !5761
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5761
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5761
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5761
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5761
  %bf.load2 = load i64, i64* %4, align 8, !dbg !5761
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5761
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5761
  %cmp5 = icmp eq i32 %bf.cast4, 15, !dbg !5761
  br i1 %cmp5, label %lor.end28, label %lor.rhs, !dbg !5761

lor.rhs:                                          ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5761
  %common6 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5761
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !5761
  %6 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5761
  %base8 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5761
  %7 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5761
  %bf.load9 = load i64, i64* %7, align 8, !dbg !5761
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5761
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5761
  %cmp12 = icmp eq i32 %bf.cast11, 16, !dbg !5761
  br i1 %cmp12, label %lor.end, label %lor.lhs.false, !dbg !5761

lor.lhs.false:                                    ; preds = %lor.rhs
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5761
  %common13 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !5761
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !5761
  %9 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !5761
  %base15 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5761
  %10 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5761
  %bf.load16 = load i64, i64* %10, align 8, !dbg !5761
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5761
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5761
  %cmp19 = icmp eq i32 %bf.cast18, 17, !dbg !5761
  br i1 %cmp19, label %lor.end, label %lor.rhs20, !dbg !5761

lor.rhs20:                                        ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5761
  %common21 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !5761
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !5761
  %12 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !5761
  %base23 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5761
  %13 = bitcast %struct.tree_base* %base23 to i64*, !dbg !5761
  %bf.load24 = load i64, i64* %13, align 8, !dbg !5761
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !5761
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !5761
  %cmp27 = icmp eq i32 %bf.cast26, 18, !dbg !5761
  br label %lor.end, !dbg !5761

lor.end:                                          ; preds = %lor.rhs20, %lor.lhs.false, %lor.rhs
  %14 = phi i1 [ true, %lor.lhs.false ], [ true, %lor.rhs ], [ %cmp27, %lor.rhs20 ]
  br label %lor.end28, !dbg !5761

lor.end28:                                        ; preds = %lor.end, %if.then
  %15 = phi i1 [ true, %if.then ], [ %14, %lor.end ]
  %lor.ext = zext i1 %15 to i32, !dbg !5761
  %conv = trunc i32 %lor.ext to i8, !dbg !5761
  store i8 %conv, i8* %retval, align 1, !dbg !5763
  br label %return, !dbg !5763

if.else:                                          ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5764
  %decl_common = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !5764
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !5764
  %17 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5764
  %cmp29 = icmp eq %union.tree_node* %17, null, !dbg !5766
  br i1 %cmp29, label %lor.end38, label %lor.rhs31, !dbg !5767

lor.rhs31:                                        ; preds = %if.else
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5768
  %decl_common32 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !5768
  %size33 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common32, i32 0, i32 1, !dbg !5768
  %19 = load %union.tree_node*, %union.tree_node** %size33, align 8, !dbg !5768
  %base34 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5768
  %20 = bitcast %struct.tree_base* %base34 to i64*, !dbg !5768
  %bf.load35 = load i64, i64* %20, align 8, !dbg !5768
  %bf.lshr = lshr i64 %bf.load35, 17, !dbg !5768
  %bf.clear36 = and i64 %bf.lshr, 1, !dbg !5768
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !5768
  %tobool = icmp ne i32 %bf.cast37, 0, !dbg !5769
  %lnot = xor i1 %tobool, true, !dbg !5769
  br label %lor.end38, !dbg !5767

lor.end38:                                        ; preds = %lor.rhs31, %if.else
  %21 = phi i1 [ true, %if.else ], [ %lnot, %lor.rhs31 ]
  %lor.ext39 = zext i1 %21 to i32, !dbg !5767
  %conv40 = trunc i32 %lor.ext39 to i8, !dbg !5764
  store i8 %conv40, i8* %retval, align 1, !dbg !5770
  br label %return, !dbg !5770

return:                                           ; preds = %lor.end38, %lor.end28
  %22 = load i8, i8* %retval, align 1, !dbg !5771
  ret i8 %22, !dbg !5771
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @decl_value_expr_insert(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @note_nonlocal_vla_type(%struct.nesting_info* %info, %union.tree_node* %type) #0 !dbg !5772 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %domain = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5773, metadata !DIExpression()), !dbg !5774
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5775, metadata !DIExpression()), !dbg !5776
  br label %while.cond, !dbg !5777

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5778
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5778
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5778
  %bf.load = load i64, i64* %1, align 8, !dbg !5778
  %bf.clear = and i64 %bf.load, 65535, !dbg !5778
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5778
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !5778
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !5778

lor.lhs.false:                                    ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5778
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5778
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5778
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5778
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5778
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5778
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !5778
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !5779

land.rhs:                                         ; preds = %lor.lhs.false, %while.cond
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5780
  %type6 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !5780
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 12, !dbg !5780
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5780
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !5781
  %lnot = xor i1 %tobool, true, !dbg !5781
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %6 = phi i1 [ false, %lor.lhs.false ], [ %lnot, %land.rhs ], !dbg !5782
  br i1 %6, label %while.body, label %while.end, !dbg !5777

while.body:                                       ; preds = %land.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5783
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5783
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5783
  %8 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5783
  store %union.tree_node* %8, %union.tree_node** %type.addr, align 8, !dbg !5784
  br label %while.cond, !dbg !5777, !llvm.loop !5785

while.end:                                        ; preds = %land.end
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5786
  %type8 = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !5786
  %name9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 12, !dbg !5786
  %10 = load %union.tree_node*, %union.tree_node** %name9, align 8, !dbg !5786
  %tobool10 = icmp ne %union.tree_node* %10, null, !dbg !5786
  br i1 %tobool10, label %land.lhs.true, label %if.end, !dbg !5788

land.lhs.true:                                    ; preds = %while.end
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5789
  %type11 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !5789
  %name12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 12, !dbg !5789
  %12 = load %union.tree_node*, %union.tree_node** %name12, align 8, !dbg !5789
  %base13 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5789
  %13 = bitcast %struct.tree_base* %base13 to i64*, !dbg !5789
  %bf.load14 = load i64, i64* %13, align 8, !dbg !5789
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !5789
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !5789
  %cmp17 = icmp eq i32 %bf.cast16, 35, !dbg !5790
  br i1 %cmp17, label %land.lhs.true18, label %if.end, !dbg !5791

land.lhs.true18:                                  ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5792
  %type19 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !5792
  %name20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 12, !dbg !5792
  %15 = load %union.tree_node*, %union.tree_node** %name20, align 8, !dbg !5792
  %decl_non_common = bitcast %union.tree_node* %15 to %struct.tree_decl_non_common*, !dbg !5792
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !5792
  %16 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5792
  %tobool21 = icmp ne %union.tree_node* %16, null, !dbg !5792
  br i1 %tobool21, label %if.then, label %if.end, !dbg !5793

if.then:                                          ; preds = %land.lhs.true18
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5794
  %type22 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !5794
  %name23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 12, !dbg !5794
  %18 = load %union.tree_node*, %union.tree_node** %name23, align 8, !dbg !5794
  %decl_non_common24 = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !5794
  %result25 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common24, i32 0, i32 3, !dbg !5794
  %19 = load %union.tree_node*, %union.tree_node** %result25, align 8, !dbg !5794
  store %union.tree_node* %19, %union.tree_node** %type.addr, align 8, !dbg !5795
  br label %if.end, !dbg !5796

if.end:                                           ; preds = %if.then, %land.lhs.true18, %land.lhs.true, %while.end
  br label %while.cond26, !dbg !5797

while.cond26:                                     ; preds = %while.body55, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5798
  %base27 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5798
  %21 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5798
  %bf.load28 = load i64, i64* %21, align 8, !dbg !5798
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !5798
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !5798
  %cmp31 = icmp eq i32 %bf.cast30, 10, !dbg !5798
  br i1 %cmp31, label %lor.end, label %lor.lhs.false32, !dbg !5798

lor.lhs.false32:                                  ; preds = %while.cond26
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5798
  %base33 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5798
  %23 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5798
  %bf.load34 = load i64, i64* %23, align 8, !dbg !5798
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !5798
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !5798
  %cmp37 = icmp eq i32 %bf.cast36, 12, !dbg !5798
  br i1 %cmp37, label %lor.end, label %lor.lhs.false38, !dbg !5799

lor.lhs.false38:                                  ; preds = %lor.lhs.false32
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5800
  %base39 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5800
  %25 = bitcast %struct.tree_base* %base39 to i64*, !dbg !5800
  %bf.load40 = load i64, i64* %25, align 8, !dbg !5800
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !5800
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5800
  %cmp43 = icmp eq i32 %bf.cast42, 14, !dbg !5801
  br i1 %cmp43, label %lor.end, label %lor.lhs.false44, !dbg !5802

lor.lhs.false44:                                  ; preds = %lor.lhs.false38
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5803
  %base45 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !5803
  %27 = bitcast %struct.tree_base* %base45 to i64*, !dbg !5803
  %bf.load46 = load i64, i64* %27, align 8, !dbg !5803
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !5803
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !5803
  %cmp49 = icmp eq i32 %bf.cast48, 20, !dbg !5804
  br i1 %cmp49, label %lor.end, label %lor.rhs, !dbg !5805

lor.rhs:                                          ; preds = %lor.lhs.false44
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5806
  %base50 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !5806
  %29 = bitcast %struct.tree_base* %base50 to i64*, !dbg !5806
  %bf.load51 = load i64, i64* %29, align 8, !dbg !5806
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !5806
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !5806
  %cmp54 = icmp eq i32 %bf.cast53, 21, !dbg !5807
  br label %lor.end, !dbg !5805

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false44, %lor.lhs.false38, %lor.lhs.false32, %while.cond26
  %30 = phi i1 [ true, %lor.lhs.false44 ], [ true, %lor.lhs.false38 ], [ true, %lor.lhs.false32 ], [ true, %while.cond26 ], [ %cmp54, %lor.rhs ]
  br i1 %30, label %while.body55, label %while.end58, !dbg !5797

while.body55:                                     ; preds = %lor.end
  %31 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5808
  %common56 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !5808
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !5808
  %32 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !5808
  store %union.tree_node* %32, %union.tree_node** %type.addr, align 8, !dbg !5809
  br label %while.cond26, !dbg !5797, !llvm.loop !5810

while.end58:                                      ; preds = %lor.end
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5811
  %base59 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !5811
  %34 = bitcast %struct.tree_base* %base59 to i64*, !dbg !5811
  %bf.load60 = load i64, i64* %34, align 8, !dbg !5811
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !5811
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !5811
  %cmp63 = icmp eq i32 %bf.cast62, 15, !dbg !5813
  br i1 %cmp63, label %if.then64, label %if.end111, !dbg !5814

if.then64:                                        ; preds = %while.end58
  call void @llvm.dbg.declare(metadata %union.tree_node** %domain, metadata !5815, metadata !DIExpression()), !dbg !5817
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5818, metadata !DIExpression()), !dbg !5819
  %35 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5820
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5821
  %common65 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !5821
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !5821
  %37 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !5821
  call void @note_nonlocal_vla_type(%struct.nesting_info* %35, %union.tree_node* %37), !dbg !5822
  %38 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5823
  %type67 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !5823
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 1, !dbg !5823
  %39 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !5823
  store %union.tree_node* %39, %union.tree_node** %domain, align 8, !dbg !5824
  %40 = load %union.tree_node*, %union.tree_node** %domain, align 8, !dbg !5825
  %tobool68 = icmp ne %union.tree_node* %40, null, !dbg !5825
  br i1 %tobool68, label %if.then69, label %if.end110, !dbg !5827

if.then69:                                        ; preds = %if.then64
  %41 = load %union.tree_node*, %union.tree_node** %domain, align 8, !dbg !5828
  %type70 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !5828
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type70, i32 0, i32 13, !dbg !5828
  %42 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !5828
  store %union.tree_node* %42, %union.tree_node** %t, align 8, !dbg !5830
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5831
  %tobool71 = icmp ne %union.tree_node* %43, null, !dbg !5831
  br i1 %tobool71, label %land.lhs.true72, label %if.end88, !dbg !5833

land.lhs.true72:                                  ; preds = %if.then69
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5834
  %base73 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5834
  %45 = bitcast %struct.tree_base* %base73 to i64*, !dbg !5834
  %bf.load74 = load i64, i64* %45, align 8, !dbg !5834
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !5834
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !5834
  %cmp77 = icmp eq i32 %bf.cast76, 32, !dbg !5835
  br i1 %cmp77, label %land.lhs.true84, label %lor.lhs.false78, !dbg !5836

lor.lhs.false78:                                  ; preds = %land.lhs.true72
  %46 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5837
  %base79 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !5837
  %47 = bitcast %struct.tree_base* %base79 to i64*, !dbg !5837
  %bf.load80 = load i64, i64* %47, align 8, !dbg !5837
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !5837
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !5837
  %cmp83 = icmp eq i32 %bf.cast82, 34, !dbg !5838
  br i1 %cmp83, label %land.lhs.true84, label %if.end88, !dbg !5839

land.lhs.true84:                                  ; preds = %lor.lhs.false78, %land.lhs.true72
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5840
  %call = call %union.tree_node* @decl_function_context(%union.tree_node* %48), !dbg !5841
  %49 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5842
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %49, i32 0, i32 6, !dbg !5843
  %50 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5843
  %cmp85 = icmp ne %union.tree_node* %call, %50, !dbg !5844
  br i1 %cmp85, label %if.then86, label %if.end88, !dbg !5845

if.then86:                                        ; preds = %land.lhs.true84
  %51 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5846
  %52 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5847
  %call87 = call %union.tree_node* @get_nonlocal_debug_decl(%struct.nesting_info* %51, %union.tree_node* %52), !dbg !5848
  br label %if.end88, !dbg !5848

if.end88:                                         ; preds = %if.then86, %land.lhs.true84, %lor.lhs.false78, %if.then69
  %53 = load %union.tree_node*, %union.tree_node** %domain, align 8, !dbg !5849
  %type89 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !5849
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type89, i32 0, i32 14, !dbg !5849
  %54 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !5849
  store %union.tree_node* %54, %union.tree_node** %t, align 8, !dbg !5850
  %55 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5851
  %tobool90 = icmp ne %union.tree_node* %55, null, !dbg !5851
  br i1 %tobool90, label %land.lhs.true91, label %if.end109, !dbg !5853

land.lhs.true91:                                  ; preds = %if.end88
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5854
  %base92 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !5854
  %57 = bitcast %struct.tree_base* %base92 to i64*, !dbg !5854
  %bf.load93 = load i64, i64* %57, align 8, !dbg !5854
  %bf.clear94 = and i64 %bf.load93, 65535, !dbg !5854
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !5854
  %cmp96 = icmp eq i32 %bf.cast95, 32, !dbg !5855
  br i1 %cmp96, label %land.lhs.true103, label %lor.lhs.false97, !dbg !5856

lor.lhs.false97:                                  ; preds = %land.lhs.true91
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5857
  %base98 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !5857
  %59 = bitcast %struct.tree_base* %base98 to i64*, !dbg !5857
  %bf.load99 = load i64, i64* %59, align 8, !dbg !5857
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !5857
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !5857
  %cmp102 = icmp eq i32 %bf.cast101, 34, !dbg !5858
  br i1 %cmp102, label %land.lhs.true103, label %if.end109, !dbg !5859

land.lhs.true103:                                 ; preds = %lor.lhs.false97, %land.lhs.true91
  %60 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5860
  %call104 = call %union.tree_node* @decl_function_context(%union.tree_node* %60), !dbg !5861
  %61 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5862
  %context105 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %61, i32 0, i32 6, !dbg !5863
  %62 = load %union.tree_node*, %union.tree_node** %context105, align 8, !dbg !5863
  %cmp106 = icmp ne %union.tree_node* %call104, %62, !dbg !5864
  br i1 %cmp106, label %if.then107, label %if.end109, !dbg !5865

if.then107:                                       ; preds = %land.lhs.true103
  %63 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5866
  %64 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5867
  %call108 = call %union.tree_node* @get_nonlocal_debug_decl(%struct.nesting_info* %63, %union.tree_node* %64), !dbg !5868
  br label %if.end109, !dbg !5868

if.end109:                                        ; preds = %if.then107, %land.lhs.true103, %lor.lhs.false97, %if.end88
  br label %if.end110, !dbg !5869

if.end110:                                        ; preds = %if.end109, %if.then64
  br label %if.end111, !dbg !5870

if.end111:                                        ; preds = %if.end110, %while.end58
  ret void, !dbg !5871
}

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local i8* @concat(i8*, ...) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_tmp_var_for(%struct.nesting_info* %info, %union.tree_node* %type, i8* %prefix) #0 !dbg !5872 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %prefix.addr = alloca i8*, align 8
  %tmp_var = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5877, metadata !DIExpression()), !dbg !5878
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !5879, metadata !DIExpression()), !dbg !5880
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_var, metadata !5881, metadata !DIExpression()), !dbg !5882
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5883
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5883
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5883
  %bf.load = load i64, i64* %1, align 8, !dbg !5883
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !5883
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5883
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5883
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5883
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5883

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5883
  br label %cond.end, !dbg !5883

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5883

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5883
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5884
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !5884
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 3, !dbg !5884
  %3 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5884
  %tobool2 = icmp ne %union.tree_node* %3, null, !dbg !5884
  br i1 %tobool2, label %lor.lhs.false, label %cond.false10, !dbg !5884

lor.lhs.false:                                    ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5884
  %type3 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !5884
  %size_unit4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 3, !dbg !5884
  %5 = load %union.tree_node*, %union.tree_node** %size_unit4, align 8, !dbg !5884
  %base5 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5884
  %6 = bitcast %struct.tree_base* %base5 to i64*, !dbg !5884
  %bf.load6 = load i64, i64* %6, align 8, !dbg !5884
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !5884
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !5884
  %cmp = icmp eq i32 %bf.cast8, 23, !dbg !5884
  br i1 %cmp, label %cond.false10, label %cond.true9, !dbg !5884

cond.true9:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5884
  br label %cond.end11, !dbg !5884

cond.false10:                                     ; preds = %lor.lhs.false, %cond.end
  br label %cond.end11, !dbg !5884

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !5884
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5885
  %8 = load i8*, i8** %prefix.addr, align 8, !dbg !5886
  %call = call %union.tree_node* @create_tmp_var_raw(%union.tree_node* %7, i8* %8), !dbg !5887
  store %union.tree_node* %call, %union.tree_node** %tmp_var, align 8, !dbg !5888
  %9 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5889
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %9, i32 0, i32 6, !dbg !5890
  %10 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5890
  %11 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5891
  %decl_minimal = bitcast %union.tree_node* %11 to %struct.tree_decl_minimal*, !dbg !5891
  %context13 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !5891
  store %union.tree_node* %10, %union.tree_node** %context13, align 8, !dbg !5892
  %12 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5893
  %new_local_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %12, i32 0, i32 7, !dbg !5894
  %13 = load %union.tree_node*, %union.tree_node** %new_local_var_chain, align 8, !dbg !5894
  %14 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5895
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !5895
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5895
  store %union.tree_node* %13, %union.tree_node** %chain, align 8, !dbg !5896
  %15 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5897
  %decl_with_vis = bitcast %union.tree_node* %15 to %struct.tree_decl_with_vis*, !dbg !5897
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !5897
  %16 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !5897
  %bf.load14 = load i32, i32* %16, align 8, !dbg !5898
  %bf.clear15 = and i32 %bf.load14, -257, !dbg !5898
  %bf.set = or i32 %bf.clear15, 256, !dbg !5898
  store i32 %bf.set, i32* %16, align 8, !dbg !5898
  %17 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5899
  %base16 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5899
  %18 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5899
  %bf.load17 = load i64, i64* %18, align 8, !dbg !5899
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5899
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5899
  %cmp20 = icmp eq i32 %bf.cast19, 13, !dbg !5901
  br i1 %cmp20, label %if.then, label %lor.lhs.false21, !dbg !5902

lor.lhs.false21:                                  ; preds = %cond.end11
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5903
  %base22 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !5903
  %20 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5903
  %bf.load23 = load i64, i64* %20, align 8, !dbg !5903
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5903
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5903
  %cmp26 = icmp eq i32 %bf.cast25, 14, !dbg !5904
  br i1 %cmp26, label %if.then, label %if.end, !dbg !5905

if.then:                                          ; preds = %lor.lhs.false21, %cond.end11
  %21 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5906
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !5906
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5906
  %22 = bitcast i40* %gimple_reg_flag to i64*, !dbg !5906
  %bf.load27 = load i64, i64* %22, align 8, !dbg !5907
  %bf.clear28 = and i64 %bf.load27, -134217729, !dbg !5907
  %bf.set29 = or i64 %bf.clear28, 134217728, !dbg !5907
  store i64 %bf.set29, i64* %22, align 8, !dbg !5907
  br label %if.end, !dbg !5906

if.end:                                           ; preds = %if.then, %lor.lhs.false21
  %23 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5908
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !5909
  %new_local_var_chain30 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 7, !dbg !5910
  store %union.tree_node* %23, %union.tree_node** %new_local_var_chain30, align 8, !dbg !5911
  %25 = load %union.tree_node*, %union.tree_node** %tmp_var, align 8, !dbg !5912
  ret %union.tree_node* %25, !dbg !5913
}

declare dso_local %union.tree_node* @create_tmp_var_raw(%union.tree_node*, i8*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local %union.tree_node* @create_tmp_var_name(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5914 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5917, metadata !DIExpression()), !dbg !5918
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5919
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5919
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5919

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5920
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5921
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5921
  br label %cond.end, !dbg !5919

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5919

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5919
  ret %struct.gimple_seq_node_d* %cond, !dbg !5922
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %gs) #0 !dbg !5923 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5924, metadata !DIExpression()), !dbg !5925
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5926
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !5927
  %pre_body = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 4, !dbg !5928
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body, align 8, !dbg !5928
  ret %struct.gimple_seq_d* %1, !dbg !5929
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !5930 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !5933, metadata !DIExpression()), !dbg !5934
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5935, metadata !DIExpression()), !dbg !5936
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !5937
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !5938
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5939
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5940
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !5941
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5942
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !5943
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5944
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !5944
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !5945
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !5946

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5947
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !5947
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !5948
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5948
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !5949
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !5950

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5951
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !5951
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !5952
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !5952
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !5953
  br label %cond.end, !dbg !5950

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5950

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !5950
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5954
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !5955
  ret void, !dbg !5956
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %gs) #0 !dbg !5957 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5960, metadata !DIExpression()), !dbg !5961
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5962
  %gimple_omp_for = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp_for*, !dbg !5963
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5964
  %1 = load i64, i64* %collapse, align 8, !dbg !5964
  ret i64 %1, !dbg !5965
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5966 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5969, metadata !DIExpression()), !dbg !5970
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5971, metadata !DIExpression()), !dbg !5972
  %0 = load i64, i64* %i.addr, align 8, !dbg !5973
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5973
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5973
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5973
  %2 = load i64, i64* %collapse, align 8, !dbg !5973
  %cmp = icmp ult i64 %0, %2, !dbg !5973
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5973

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5973
  br label %cond.end, !dbg !5973

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5973

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5973
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5974
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5975
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5976
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5976
  %5 = load i64, i64* %i.addr, align 8, !dbg !5977
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5974
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !5978
  ret %union.tree_node** %index, !dbg !5979
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5980 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5981, metadata !DIExpression()), !dbg !5982
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  %0 = load i64, i64* %i.addr, align 8, !dbg !5985
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5985
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5985
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5985
  %2 = load i64, i64* %collapse, align 8, !dbg !5985
  %cmp = icmp ult i64 %0, %2, !dbg !5985
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5985

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3497, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5985
  br label %cond.end, !dbg !5985

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5985

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5985
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5986
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5987
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !5988
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !5988
  %5 = load i64, i64* %i.addr, align 8, !dbg !5989
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5986
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !5990
  ret %union.tree_node** %initial, !dbg !5991
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5992 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5993, metadata !DIExpression()), !dbg !5994
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5995, metadata !DIExpression()), !dbg !5996
  %0 = load i64, i64* %i.addr, align 8, !dbg !5997
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5997
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !5997
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !5997
  %2 = load i64, i64* %collapse, align 8, !dbg !5997
  %cmp = icmp ult i64 %0, %2, !dbg !5997
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5997

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5997
  br label %cond.end, !dbg !5997

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5997

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5997
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5998
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !5999
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6000
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6000
  %5 = load i64, i64* %i.addr, align 8, !dbg !6001
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !5998
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !6002
  ret %union.tree_node** %final, !dbg !6003
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6004 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6007, metadata !DIExpression()), !dbg !6008
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  %0 = load i64, i64* %i.addr, align 8, !dbg !6011
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6011
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6011
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6011
  %2 = load i64, i64* %collapse, align 8, !dbg !6011
  %cmp = icmp ult i64 %0, %2, !dbg !6011
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6011

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6011
  br label %cond.end, !dbg !6011

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6011
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6012
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6013
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6014
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6014
  %5 = load i64, i64* %i.addr, align 8, !dbg !6015
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %5, !dbg !6012
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !6016
  %6 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !6016
  ret %union.tree_node* %6, !dbg !6017
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !6018 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6021, metadata !DIExpression()), !dbg !6022
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6023
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !6024
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !6025

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6026
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6027
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6027
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !6028
  br label %lor.end, !dbg !6025

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !6025
  %conv = trunc i32 %lor.ext to i8, !dbg !6023
  ret i8 %conv, !dbg !6029
}

declare dso_local void @gimple_seq_free(%struct.gimple_seq_d*) #2

declare dso_local void @annotate_all_with_location(%struct.gimple_seq_d*, i32) #2

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %pre_body) #0 !dbg !6030 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %pre_body.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6033, metadata !DIExpression()), !dbg !6034
  store %struct.gimple_seq_d* %pre_body, %struct.gimple_seq_d** %pre_body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %pre_body.addr, metadata !6035, metadata !DIExpression()), !dbg !6036
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %pre_body.addr, align 8, !dbg !6037
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6038
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6039
  %pre_body1 = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 4, !dbg !6040
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %pre_body1, align 8, !dbg !6041
  ret void, !dbg !6042
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6043 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6044, metadata !DIExpression()), !dbg !6045
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6046
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6046
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6046

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6047
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6048
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6048
  br label %cond.end, !dbg !6046

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6046

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6046
  ret %struct.gimple_seq_node_d* %cond, !dbg !6049
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6050 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6053, metadata !DIExpression()), !dbg !6054
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6055
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6056
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6057
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6057
  ret %struct.basic_block_def* %1, !dbg !6058
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_frame_field(%struct.nesting_info* %info, %union.tree_node* %target_context, %union.tree_node* %field, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6059 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %target_context.addr = alloca %union.tree_node*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %x = alloca %union.tree_node*, align 8
  %field4 = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6062, metadata !DIExpression()), !dbg !6063
  store %union.tree_node* %target_context, %union.tree_node** %target_context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context.addr, metadata !6064, metadata !DIExpression()), !dbg !6065
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !6066, metadata !DIExpression()), !dbg !6067
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6068, metadata !DIExpression()), !dbg !6069
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !6070, metadata !DIExpression()), !dbg !6071
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !6072, metadata !DIExpression()), !dbg !6073
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6074
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 6, !dbg !6076
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6076
  %2 = load %union.tree_node*, %union.tree_node** %target_context.addr, align 8, !dbg !6077
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !6078
  br i1 %cmp, label %if.then, label %if.else, !dbg !6079

if.then:                                          ; preds = %entry
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6080
  %call = call %union.tree_node* @get_frame_type(%struct.nesting_info* %3), !dbg !6082
  %4 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6083
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 10, !dbg !6084
  %5 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !6084
  store %union.tree_node* %5, %union.tree_node** %x, align 8, !dbg !6085
  br label %if.end, !dbg !6086

if.else:                                          ; preds = %entry
  %6 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6087
  %call1 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %6), !dbg !6089
  store %union.tree_node* %call1, %union.tree_node** %x, align 8, !dbg !6090
  %7 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6091
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %7, i32 0, i32 0, !dbg !6093
  %8 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !6093
  store %struct.nesting_info* %8, %struct.nesting_info** %i, align 8, !dbg !6094
  br label %for.cond, !dbg !6095

for.cond:                                         ; preds = %for.inc, %if.else
  %9 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6096
  %context2 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %9, i32 0, i32 6, !dbg !6098
  %10 = load %union.tree_node*, %union.tree_node** %context2, align 8, !dbg !6098
  %11 = load %union.tree_node*, %union.tree_node** %target_context.addr, align 8, !dbg !6099
  %cmp3 = icmp ne %union.tree_node* %10, %11, !dbg !6100
  br i1 %cmp3, label %for.body, label %for.end, !dbg !6101

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %field4, metadata !6102, metadata !DIExpression()), !dbg !6104
  %12 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6105
  %call5 = call %union.tree_node* @get_chain_field(%struct.nesting_info* %12), !dbg !6106
  store %union.tree_node* %call5, %union.tree_node** %field4, align 8, !dbg !6104
  %13 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6107
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !6107
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6107
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6107
  %common6 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6107
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !6107
  %15 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6107
  %16 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6107
  %call8 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %15, %union.tree_node* %16), !dbg !6107
  store %union.tree_node* %call8, %union.tree_node** %x, align 8, !dbg !6108
  %17 = load %union.tree_node*, %union.tree_node** %field4, align 8, !dbg !6109
  %common9 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6109
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6109
  %18 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6109
  %19 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6109
  %20 = load %union.tree_node*, %union.tree_node** %field4, align 8, !dbg !6109
  %call11 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* null), !dbg !6109
  store %union.tree_node* %call11, %union.tree_node** %x, align 8, !dbg !6110
  %21 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6111
  %22 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6112
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6113
  %call12 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %21, %union.tree_node* %22, %struct.gimple_stmt_iterator* %23), !dbg !6114
  store %union.tree_node* %call12, %union.tree_node** %x, align 8, !dbg !6115
  br label %for.inc, !dbg !6116

for.inc:                                          ; preds = %for.body
  %24 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6117
  %outer13 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 0, !dbg !6118
  %25 = load %struct.nesting_info*, %struct.nesting_info** %outer13, align 8, !dbg !6118
  store %struct.nesting_info* %25, %struct.nesting_info** %i, align 8, !dbg !6119
  br label %for.cond, !dbg !6120, !llvm.loop !6121

for.end:                                          ; preds = %for.cond
  %26 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6123
  %common14 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !6123
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !6123
  %27 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !6123
  %common16 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !6123
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !6123
  %28 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !6123
  %29 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6123
  %call18 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %28, %union.tree_node* %29), !dbg !6123
  store %union.tree_node* %call18, %union.tree_node** %x, align 8, !dbg !6124
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %30 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6125
  %common19 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !6125
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !6125
  %31 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !6125
  %32 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6125
  %33 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6125
  %call21 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33, %union.tree_node* null), !dbg !6125
  store %union.tree_node* %call21, %union.tree_node** %x, align 8, !dbg !6126
  %34 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6127
  ret %union.tree_node* %34, !dbg !6128
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @init_tmp_var(%struct.nesting_info* %info, %union.tree_node* %exp, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6129 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6132, metadata !DIExpression()), !dbg !6133
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6136, metadata !DIExpression()), !dbg !6137
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6140, metadata !DIExpression()), !dbg !6141
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6142
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6143
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6143
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6143
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6143
  %call = call %union.tree_node* @create_tmp_var_for(%struct.nesting_info* %0, %union.tree_node* %2, i8* null), !dbg !6144
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !6145
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6146
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6146
  %call1 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %3, %union.tree_node* %4), !dbg !6146
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !6147
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6148
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %5), !dbg !6150
  %tobool = icmp ne i8 %call2, 0, !dbg !6150
  br i1 %tobool, label %if.end, label %if.then, !dbg !6151

if.then:                                          ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6152
  %7 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6153
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %7), !dbg !6154
  %call4 = call i32 @gimple_location(%union.gimple_statement_d* %call3), !dbg !6155
  call void @gimple_set_location(%union.gimple_statement_d* %6, i32 %call4), !dbg !6156
  br label %if.end, !dbg !6156

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6157
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6158
  call void @gsi_insert_before_without_update(%struct.gimple_stmt_iterator* %8, %union.gimple_statement_d* %9, i32 1), !dbg !6159
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6160
  ret %union.tree_node* %10, !dbg !6161
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @save_tmp_var(%struct.nesting_info* %info, %union.tree_node* %exp, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6162 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6165, metadata !DIExpression()), !dbg !6166
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6171, metadata !DIExpression()), !dbg !6172
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6173
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6174
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6174
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6174
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6174
  %call = call %union.tree_node* @create_tmp_var_for(%struct.nesting_info* %0, %union.tree_node* %2, i8* null), !dbg !6175
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !6176
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6177
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6177
  %call1 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %3, %union.tree_node* %4), !dbg !6177
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !6178
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6179
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %5), !dbg !6181
  %tobool = icmp ne i8 %call2, 0, !dbg !6181
  br i1 %tobool, label %if.end, label %if.then, !dbg !6182

if.then:                                          ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6183
  %7 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6184
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %7), !dbg !6185
  %call4 = call i32 @gimple_location(%union.gimple_statement_d* %call3), !dbg !6186
  call void @gimple_set_location(%union.gimple_statement_d* %6, i32 %call4), !dbg !6187
  br label %if.end, !dbg !6187

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6188
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6189
  call void @gsi_insert_after_without_update(%struct.gimple_stmt_iterator* %8, %union.gimple_statement_d* %9, i32 1), !dbg !6190
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6191
  ret %union.tree_node* %10, !dbg !6192
}

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gsi_gimplify_val(%struct.nesting_info* %info, %union.tree_node* %exp, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !6193 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6194, metadata !DIExpression()), !dbg !6195
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6196, metadata !DIExpression()), !dbg !6197
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6200
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %0), !dbg !6202
  %tobool = icmp ne i8 %call, 0, !dbg !6202
  br i1 %tobool, label %if.then, label %if.else, !dbg !6203

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6204
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !6205
  br label %return, !dbg !6205

if.else:                                          ; preds = %entry
  %2 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6206
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6207
  %4 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6208
  %call1 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %2, %union.tree_node* %3, %struct.gimple_stmt_iterator* %4), !dbg !6209
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6210
  br label %return, !dbg !6210

return:                                           ; preds = %if.else, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6211
  ret %union.tree_node* %5, !dbg !6211
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6212 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6215, metadata !DIExpression()), !dbg !6216
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6217
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6217
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6218
  %conv = zext i1 %cmp to i32, !dbg !6218
  %conv1 = trunc i32 %conv to i8, !dbg !6219
  ret i8 %conv1, !dbg !6220
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !6221 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6224, metadata !DIExpression()), !dbg !6225
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !6226, metadata !DIExpression()), !dbg !6227
  %0 = load i32, i32* %location.addr, align 4, !dbg !6228
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6229
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6230
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6231
  store i32 %0, i32* %location1, align 8, !dbg !6232
  ret void, !dbg !6233
}

declare dso_local void @gsi_insert_before_without_update(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_insert_after_without_update(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @convert_local_omp_clauses(%union.tree_node** %pclauses, %struct.walk_stmt_info* %wi) #0 !dbg !6234 {
entry:
  %pclauses.addr = alloca %union.tree_node**, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %need_frame = alloca i8, align 1
  %need_stmts = alloca i8, align 1
  %clause = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %dummy = alloca i32, align 4
  %new_suppress = alloca %struct.bitmap_head_def*, align 8
  %field = alloca %union.tree_node*, align 8
  %old_context = alloca %union.tree_node*, align 8
  store %union.tree_node** %pclauses, %union.tree_node*** %pclauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pclauses.addr, metadata !6235, metadata !DIExpression()), !dbg !6236
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !6237, metadata !DIExpression()), !dbg !6238
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !6239, metadata !DIExpression()), !dbg !6240
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6241
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !6242
  %1 = load i8*, i8** %info1, align 8, !dbg !6242
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !6243
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !6240
  call void @llvm.dbg.declare(metadata i8* %need_frame, metadata !6244, metadata !DIExpression()), !dbg !6245
  store i8 0, i8* %need_frame, align 1, !dbg !6245
  call void @llvm.dbg.declare(metadata i8* %need_stmts, metadata !6246, metadata !DIExpression()), !dbg !6247
  store i8 0, i8* %need_stmts, align 1, !dbg !6247
  call void @llvm.dbg.declare(metadata %union.tree_node** %clause, metadata !6248, metadata !DIExpression()), !dbg !6249
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6250, metadata !DIExpression()), !dbg !6251
  call void @llvm.dbg.declare(metadata i32* %dummy, metadata !6252, metadata !DIExpression()), !dbg !6253
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %new_suppress, metadata !6254, metadata !DIExpression()), !dbg !6255
  %call = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !6256
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !6257
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !6258
  %4 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6259
  %suppress_expansion = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 5, !dbg !6260
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %suppress_expansion, align 8, !dbg !6260
  call void @bitmap_copy(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %5), !dbg !6261
  %6 = load %union.tree_node**, %union.tree_node*** %pclauses.addr, align 8, !dbg !6262
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6264
  store %union.tree_node* %7, %union.tree_node** %clause, align 8, !dbg !6265
  br label %for.cond, !dbg !6266

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6267
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !6269
  br i1 %tobool, label %for.body, label %for.end, !dbg !6269

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6270
  %omp_clause = bitcast %union.tree_node* %9 to %struct.tree_omp_clause*, !dbg !6270
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !6270
  %10 = load i32, i32* %code, align 4, !dbg !6270
  switch i32 %10, label %sw.default [
    i32 5, label %sw.bb
    i32 4, label %sw.bb4
    i32 1, label %sw.bb9
    i32 3, label %sw.bb9
    i32 7, label %sw.bb9
    i32 2, label %sw.bb9
    i32 10, label %sw.bb41
    i32 8, label %sw.bb48
    i32 9, label %sw.bb48
    i32 11, label %sw.bb53
    i32 12, label %sw.bb53
    i32 13, label %sw.bb53
    i32 6, label %sw.bb53
    i32 14, label %sw.bb53
    i32 15, label %sw.bb53
  ], !dbg !6272

sw.bb:                                            ; preds = %for.body
  %11 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6273
  %omp_clause2 = bitcast %union.tree_node* %11 to %struct.tree_omp_clause*, !dbg !6273
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause2, i32 0, i32 6, !dbg !6273
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 3, !dbg !6273
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6273
  %tobool3 = icmp ne %union.tree_node* %12, null, !dbg !6273
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6276

if.then:                                          ; preds = %sw.bb
  store i8 1, i8* %need_stmts, align 1, !dbg !6277
  br label %if.end, !dbg !6278

if.end:                                           ; preds = %if.then, %sw.bb
  br label %do_decl_clause, !dbg !6279

sw.bb4:                                           ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6280
  %omp_clause5 = bitcast %union.tree_node* %13 to %struct.tree_omp_clause*, !dbg !6280
  %gimple_reduction_init = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause5, i32 0, i32 4, !dbg !6280
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init, align 8, !dbg !6280
  %tobool6 = icmp ne %struct.gimple_seq_d* %14, null, !dbg !6280
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !6282

if.then7:                                         ; preds = %sw.bb4
  store i8 1, i8* %need_stmts, align 1, !dbg !6283
  br label %if.end8, !dbg !6284

if.end8:                                          ; preds = %if.then7, %sw.bb4
  br label %do_decl_clause, !dbg !6285

sw.bb9:                                           ; preds = %for.body, %for.body, %for.body, %for.body
  br label %do_decl_clause, !dbg !6285

do_decl_clause:                                   ; preds = %sw.bb9, %if.end8, %if.end
  call void @llvm.dbg.label(metadata !6286), !dbg !6287
  %15 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6288
  %omp_clause10 = bitcast %union.tree_node* %15 to %struct.tree_omp_clause*, !dbg !6288
  %ops11 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause10, i32 0, i32 6, !dbg !6288
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops11, i64 0, i64 0, !dbg !6288
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6288
  store %union.tree_node* %16, %union.tree_node** %decl, align 8, !dbg !6289
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6290
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6290
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !6290
  %bf.load = load i64, i64* %18, align 8, !dbg !6290
  %bf.clear = and i64 %bf.load, 65535, !dbg !6290
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6290
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !6292
  br i1 %cmp, label %land.lhs.true, label %if.end24, !dbg !6293

land.lhs.true:                                    ; preds = %do_decl_clause
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6294
  %base13 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6294
  %20 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6294
  %bf.load14 = load i64, i64* %20, align 8, !dbg !6294
  %bf.lshr = lshr i64 %bf.load14, 26, !dbg !6294
  %bf.clear15 = and i64 %bf.lshr, 1, !dbg !6294
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6294
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !6294
  br i1 %tobool17, label %if.then23, label %lor.lhs.false, !dbg !6295

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6296
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !6296
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6296
  %22 = bitcast i40* %decl_flag_1 to i64*, !dbg !6296
  %bf.load18 = load i64, i64* %22, align 8, !dbg !6296
  %bf.lshr19 = lshr i64 %bf.load18, 25, !dbg !6296
  %bf.clear20 = and i64 %bf.lshr19, 1, !dbg !6296
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6296
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !6296
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !6297

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true
  br label %sw.epilog, !dbg !6298

if.end24:                                         ; preds = %lor.lhs.false, %do_decl_clause
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6299
  %call25 = call %union.tree_node* @decl_function_context(%union.tree_node* %23), !dbg !6301
  %24 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6302
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 6, !dbg !6303
  %25 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6303
  %cmp26 = icmp eq %union.tree_node* %call25, %25, !dbg !6304
  br i1 %cmp26, label %land.lhs.true27, label %if.end40, !dbg !6305

land.lhs.true27:                                  ; preds = %if.end24
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6306
  %call28 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %26), !dbg !6307
  %tobool29 = icmp ne i8 %call28, 0, !dbg !6307
  br i1 %tobool29, label %if.end40, label %if.then30, !dbg !6308

if.then30:                                        ; preds = %land.lhs.true27
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6309, metadata !DIExpression()), !dbg !6311
  %27 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6312
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6313
  %call31 = call %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %27, %union.tree_node* %28, i32 0), !dbg !6314
  store %union.tree_node* %call31, %union.tree_node** %field, align 8, !dbg !6311
  %29 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6315
  %tobool32 = icmp ne %union.tree_node* %29, null, !dbg !6315
  br i1 %tobool32, label %if.then33, label %if.end39, !dbg !6317

if.then33:                                        ; preds = %if.then30
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !6318
  %31 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6320
  %decl_minimal = bitcast %union.tree_node* %31 to %struct.tree_decl_minimal*, !dbg !6320
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !6320
  %32 = load i32, i32* %uid, align 4, !dbg !6320
  %call34 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %30, i32 %32), !dbg !6321
  %33 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6322
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6323
  %35 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6324
  %call35 = call %union.tree_node* @get_local_debug_decl(%struct.nesting_info* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !6325
  %36 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6326
  %omp_clause36 = bitcast %union.tree_node* %36 to %struct.tree_omp_clause*, !dbg !6326
  %ops37 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause36, i32 0, i32 6, !dbg !6326
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops37, i64 0, i64 0, !dbg !6326
  store %union.tree_node* %call35, %union.tree_node** %arrayidx38, align 8, !dbg !6327
  store i8 1, i8* %need_frame, align 1, !dbg !6328
  br label %if.end39, !dbg !6329

if.end39:                                         ; preds = %if.then33, %if.then30
  br label %if.end40, !dbg !6330

if.end40:                                         ; preds = %if.end39, %land.lhs.true27, %if.end24
  br label %sw.epilog, !dbg !6331

sw.bb41:                                          ; preds = %for.body
  %37 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6332
  %omp_clause42 = bitcast %union.tree_node* %37 to %struct.tree_omp_clause*, !dbg !6332
  %ops43 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause42, i32 0, i32 6, !dbg !6332
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops43, i64 0, i64 0, !dbg !6332
  %38 = load %union.tree_node*, %union.tree_node** %arrayidx44, align 8, !dbg !6332
  %cmp45 = icmp eq %union.tree_node* %38, null, !dbg !6334
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !6335

if.then46:                                        ; preds = %sw.bb41
  br label %sw.epilog, !dbg !6336

if.end47:                                         ; preds = %sw.bb41
  br label %sw.bb48, !dbg !6337

sw.bb48:                                          ; preds = %for.body, %for.body, %if.end47
  %39 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6338
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %39, i32 0, i32 3, !dbg !6339
  store i8 1, i8* %val_only, align 8, !dbg !6340
  %40 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6341
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %40, i32 0, i32 4, !dbg !6342
  store i8 0, i8* %is_lhs, align 1, !dbg !6343
  %41 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6344
  %omp_clause49 = bitcast %union.tree_node* %41 to %struct.tree_omp_clause*, !dbg !6344
  %ops50 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause49, i32 0, i32 6, !dbg !6344
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops50, i64 0, i64 0, !dbg !6344
  %42 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6345
  %43 = bitcast %struct.walk_stmt_info* %42 to i8*, !dbg !6345
  %call52 = call %union.tree_node* @convert_local_reference_op(%union.tree_node** %arrayidx51, i32* %dummy, i8* %43), !dbg !6346
  br label %sw.epilog, !dbg !6347

sw.bb53:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  br label %sw.epilog, !dbg !6348

sw.default:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 1598, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6349
  br label %sw.epilog, !dbg !6350

sw.epilog:                                        ; preds = %sw.default, %sw.bb53, %sw.bb48, %if.then46, %if.end40, %if.then23
  br label %for.inc, !dbg !6351

for.inc:                                          ; preds = %sw.epilog
  %44 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6352
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !6352
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6352
  %45 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6352
  store %union.tree_node* %45, %union.tree_node** %clause, align 8, !dbg !6353
  br label %for.cond, !dbg !6354, !llvm.loop !6355

for.end:                                          ; preds = %for.cond
  %46 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_suppress, align 8, !dbg !6357
  %47 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6358
  %suppress_expansion54 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %47, i32 0, i32 5, !dbg !6359
  store %struct.bitmap_head_def* %46, %struct.bitmap_head_def** %suppress_expansion54, align 8, !dbg !6360
  %48 = load i8, i8* %need_stmts, align 1, !dbg !6361
  %tobool55 = icmp ne i8 %48, 0, !dbg !6361
  br i1 %tobool55, label %if.then56, label %if.end97, !dbg !6363

if.then56:                                        ; preds = %for.end
  %49 = load %union.tree_node**, %union.tree_node*** %pclauses.addr, align 8, !dbg !6364
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !6366
  store %union.tree_node* %50, %union.tree_node** %clause, align 8, !dbg !6367
  br label %for.cond57, !dbg !6368

for.cond57:                                       ; preds = %for.inc93, %if.then56
  %51 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6369
  %tobool58 = icmp ne %union.tree_node* %51, null, !dbg !6371
  br i1 %tobool58, label %for.body59, label %for.end96, !dbg !6371

for.body59:                                       ; preds = %for.cond57
  %52 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6372
  %omp_clause60 = bitcast %union.tree_node* %52 to %struct.tree_omp_clause*, !dbg !6372
  %code61 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause60, i32 0, i32 2, !dbg !6372
  %53 = load i32, i32* %code61, align 4, !dbg !6372
  switch i32 %53, label %sw.default91 [
    i32 5, label %sw.bb62
    i32 4, label %sw.bb88
  ], !dbg !6373

sw.bb62:                                          ; preds = %for.body59
  %54 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6374
  %omp_clause63 = bitcast %union.tree_node* %54 to %struct.tree_omp_clause*, !dbg !6374
  %ops64 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause63, i32 0, i32 6, !dbg !6374
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops64, i64 0, i64 3, !dbg !6374
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !6374
  %tobool66 = icmp ne %union.tree_node* %55, null, !dbg !6374
  br i1 %tobool66, label %if.then67, label %if.end87, !dbg !6377

if.then67:                                        ; preds = %sw.bb62
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_context, metadata !6378, metadata !DIExpression()), !dbg !6380
  %56 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6381
  %omp_clause68 = bitcast %union.tree_node* %56 to %struct.tree_omp_clause*, !dbg !6381
  %ops69 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause68, i32 0, i32 6, !dbg !6381
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops69, i64 0, i64 3, !dbg !6381
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !6381
  %decl_minimal71 = bitcast %union.tree_node* %57 to %struct.tree_decl_minimal*, !dbg !6381
  %context72 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal71, i32 0, i32 4, !dbg !6381
  %58 = load %union.tree_node*, %union.tree_node** %context72, align 8, !dbg !6381
  store %union.tree_node* %58, %union.tree_node** %old_context, align 8, !dbg !6380
  %59 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6382
  %context73 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %59, i32 0, i32 6, !dbg !6383
  %60 = load %union.tree_node*, %union.tree_node** %context73, align 8, !dbg !6383
  %61 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6384
  %omp_clause74 = bitcast %union.tree_node* %61 to %struct.tree_omp_clause*, !dbg !6384
  %ops75 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause74, i32 0, i32 6, !dbg !6384
  %arrayidx76 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops75, i64 0, i64 3, !dbg !6384
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !6384
  %decl_minimal77 = bitcast %union.tree_node* %62 to %struct.tree_decl_minimal*, !dbg !6384
  %context78 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal77, i32 0, i32 4, !dbg !6384
  store %union.tree_node* %60, %union.tree_node** %context78, align 8, !dbg !6385
  %63 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6386
  %64 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6387
  %omp_clause79 = bitcast %union.tree_node* %64 to %struct.tree_omp_clause*, !dbg !6387
  %gimple_reduction_init80 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause79, i32 0, i32 4, !dbg !6387
  %65 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init80, align 8, !dbg !6387
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %63, %struct.gimple_seq_d* %65), !dbg !6388
  %66 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6389
  %67 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6390
  %omp_clause81 = bitcast %union.tree_node* %67 to %struct.tree_omp_clause*, !dbg !6390
  %gimple_reduction_merge = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause81, i32 0, i32 5, !dbg !6390
  %68 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_merge, align 8, !dbg !6390
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %66, %struct.gimple_seq_d* %68), !dbg !6391
  %69 = load %union.tree_node*, %union.tree_node** %old_context, align 8, !dbg !6392
  %70 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6393
  %omp_clause82 = bitcast %union.tree_node* %70 to %struct.tree_omp_clause*, !dbg !6393
  %ops83 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause82, i32 0, i32 6, !dbg !6393
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops83, i64 0, i64 3, !dbg !6393
  %71 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !6393
  %decl_minimal85 = bitcast %union.tree_node* %71 to %struct.tree_decl_minimal*, !dbg !6393
  %context86 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal85, i32 0, i32 4, !dbg !6393
  store %union.tree_node* %69, %union.tree_node** %context86, align 8, !dbg !6394
  br label %if.end87, !dbg !6395

if.end87:                                         ; preds = %if.then67, %sw.bb62
  br label %sw.epilog92, !dbg !6396

sw.bb88:                                          ; preds = %for.body59
  %72 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6397
  %73 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6398
  %omp_clause89 = bitcast %union.tree_node* %73 to %struct.tree_omp_clause*, !dbg !6398
  %gimple_reduction_init90 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause89, i32 0, i32 4, !dbg !6398
  %74 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_reduction_init90, align 8, !dbg !6398
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_local_reference_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_local_reference_op, %struct.nesting_info* %72, %struct.gimple_seq_d* %74), !dbg !6399
  br label %sw.epilog92, !dbg !6400

sw.default91:                                     ; preds = %for.body59
  br label %sw.epilog92, !dbg !6401

sw.epilog92:                                      ; preds = %sw.default91, %sw.bb88, %if.end87
  br label %for.inc93, !dbg !6402

for.inc93:                                        ; preds = %sw.epilog92
  %75 = load %union.tree_node*, %union.tree_node** %clause, align 8, !dbg !6403
  %common94 = bitcast %union.tree_node* %75 to %struct.tree_common*, !dbg !6403
  %chain95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 1, !dbg !6403
  %76 = load %union.tree_node*, %union.tree_node** %chain95, align 8, !dbg !6403
  store %union.tree_node* %76, %union.tree_node** %clause, align 8, !dbg !6404
  br label %for.cond57, !dbg !6405, !llvm.loop !6406

for.end96:                                        ; preds = %for.cond57
  br label %if.end97, !dbg !6407

if.end97:                                         ; preds = %for.end96, %for.end
  %77 = load i8, i8* %need_frame, align 1, !dbg !6408
  ret i8 %77, !dbg !6409
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_local_debug_decl(%struct.nesting_info* %info, %union.tree_node* %decl, %union.tree_node* %field) #0 !dbg !6410 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %field.addr = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6413, metadata !DIExpression()), !dbg !6414
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6415, metadata !DIExpression()), !dbg !6416
  store %union.tree_node* %field, %union.tree_node** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %field.addr, metadata !6417, metadata !DIExpression()), !dbg !6418
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !6419, metadata !DIExpression()), !dbg !6420
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !6421, metadata !DIExpression()), !dbg !6422
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6423, metadata !DIExpression()), !dbg !6424
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6425
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 4, !dbg !6426
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !6426
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6427
  %3 = bitcast %union.tree_node* %2 to i8*, !dbg !6427
  %call = call i8** @pointer_map_insert(%struct.pointer_map_t* %1, i8* %3), !dbg !6428
  store i8** %call, i8*** %slot, align 8, !dbg !6429
  %4 = load i8**, i8*** %slot, align 8, !dbg !6430
  %5 = load i8*, i8** %4, align 8, !dbg !6432
  %tobool = icmp ne i8* %5, null, !dbg !6432
  br i1 %tobool, label %if.then, label %if.end, !dbg !6433

if.then:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot, align 8, !dbg !6434
  %7 = load i8*, i8** %6, align 8, !dbg !6435
  %8 = bitcast i8* %7 to %union.tree_node*, !dbg !6436
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !6437
  br label %return, !dbg !6437

if.end:                                           ; preds = %entry
  %9 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6438
  %call1 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %9), !dbg !6439
  %10 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6440
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %10, i32 0, i32 10, !dbg !6441
  %11 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !6441
  store %union.tree_node* %11, %union.tree_node** %x, align 8, !dbg !6442
  %12 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6443
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !6443
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6443
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6443
  %14 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6443
  %15 = load %union.tree_node*, %union.tree_node** %field.addr, align 8, !dbg !6443
  %call2 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* null), !dbg !6443
  store %union.tree_node* %call2, %union.tree_node** %x, align 8, !dbg !6444
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6445
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !6445
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6445
  %17 = load i32, i32* %locus, align 8, !dbg !6445
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6445
  %decl_minimal3 = bitcast %union.tree_node* %18 to %struct.tree_decl_minimal*, !dbg !6445
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal3, i32 0, i32 3, !dbg !6445
  %19 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6445
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6445
  %common4 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !6445
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6445
  %21 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6445
  %call6 = call %union.tree_node* @build_decl_stat(i32 %17, i32 32, %union.tree_node* %19, %union.tree_node* %21), !dbg !6445
  store %union.tree_node* %call6, %union.tree_node** %new_decl, align 8, !dbg !6446
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6447
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %22, i32 0, i32 6, !dbg !6448
  %23 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6448
  %24 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6449
  %decl_minimal7 = bitcast %union.tree_node* %24 to %struct.tree_decl_minimal*, !dbg !6449
  %context8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 4, !dbg !6449
  store %union.tree_node* %23, %union.tree_node** %context8, align 8, !dbg !6450
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6451
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !6451
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6451
  %26 = bitcast i40* %artificial_flag to i64*, !dbg !6451
  %bf.load = load i64, i64* %26, align 8, !dbg !6451
  %bf.lshr = lshr i64 %bf.load, 12, !dbg !6451
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6451
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6451
  %27 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6452
  %decl_common9 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !6452
  %artificial_flag10 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 2, !dbg !6452
  %28 = bitcast i40* %artificial_flag10 to i64*, !dbg !6452
  %29 = zext i32 %bf.cast to i64, !dbg !6453
  %bf.load11 = load i64, i64* %28, align 8, !dbg !6453
  %bf.value = and i64 %29, 1, !dbg !6453
  %bf.shl = shl i64 %bf.value, 12, !dbg !6453
  %bf.clear12 = and i64 %bf.load11, -4097, !dbg !6453
  %bf.set = or i64 %bf.clear12, %bf.shl, !dbg !6453
  store i64 %bf.set, i64* %28, align 8, !dbg !6453
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !6453
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6454
  %decl_common13 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !6454
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common13, i32 0, i32 2, !dbg !6454
  %31 = bitcast i40* %ignored_flag to i64*, !dbg !6454
  %bf.load14 = load i64, i64* %31, align 8, !dbg !6454
  %bf.lshr15 = lshr i64 %bf.load14, 10, !dbg !6454
  %bf.clear16 = and i64 %bf.lshr15, 1, !dbg !6454
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !6454
  %32 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6455
  %decl_common18 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !6455
  %ignored_flag19 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !6455
  %33 = bitcast i40* %ignored_flag19 to i64*, !dbg !6455
  %34 = zext i32 %bf.cast17 to i64, !dbg !6456
  %bf.load20 = load i64, i64* %33, align 8, !dbg !6456
  %bf.value21 = and i64 %34, 1, !dbg !6456
  %bf.shl22 = shl i64 %bf.value21, 10, !dbg !6456
  %bf.clear23 = and i64 %bf.load20, -1025, !dbg !6456
  %bf.set24 = or i64 %bf.clear23, %bf.shl22, !dbg !6456
  store i64 %bf.set24, i64* %33, align 8, !dbg !6456
  %bf.result.cast25 = trunc i64 %bf.value21 to i32, !dbg !6456
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6457
  %base = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !6457
  %36 = bitcast %struct.tree_base* %base to i64*, !dbg !6457
  %bf.load26 = load i64, i64* %36, align 8, !dbg !6457
  %bf.lshr27 = lshr i64 %bf.load26, 19, !dbg !6457
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !6457
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6457
  %37 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6458
  %base30 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !6458
  %38 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6458
  %39 = zext i32 %bf.cast29 to i64, !dbg !6459
  %bf.load31 = load i64, i64* %38, align 8, !dbg !6459
  %bf.value32 = and i64 %39, 1, !dbg !6459
  %bf.shl33 = shl i64 %bf.value32, 19, !dbg !6459
  %bf.clear34 = and i64 %bf.load31, -524289, !dbg !6459
  %bf.set35 = or i64 %bf.clear34, %bf.shl33, !dbg !6459
  store i64 %bf.set35, i64* %38, align 8, !dbg !6459
  %bf.result.cast36 = trunc i64 %bf.value32 to i32, !dbg !6459
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6460
  %base37 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !6460
  %41 = bitcast %struct.tree_base* %base37 to i64*, !dbg !6460
  %bf.load38 = load i64, i64* %41, align 8, !dbg !6460
  %bf.lshr39 = lshr i64 %bf.load38, 16, !dbg !6460
  %bf.clear40 = and i64 %bf.lshr39, 1, !dbg !6460
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !6460
  %42 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6461
  %base42 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !6461
  %43 = bitcast %struct.tree_base* %base42 to i64*, !dbg !6461
  %44 = zext i32 %bf.cast41 to i64, !dbg !6462
  %bf.load43 = load i64, i64* %43, align 8, !dbg !6462
  %bf.value44 = and i64 %44, 1, !dbg !6462
  %bf.shl45 = shl i64 %bf.value44, 16, !dbg !6462
  %bf.clear46 = and i64 %bf.load43, -65537, !dbg !6462
  %bf.set47 = or i64 %bf.clear46, %bf.shl45, !dbg !6462
  store i64 %bf.set47, i64* %43, align 8, !dbg !6462
  %bf.result.cast48 = trunc i64 %bf.value44 to i32, !dbg !6462
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6463
  %base49 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !6463
  %46 = bitcast %struct.tree_base* %base49 to i64*, !dbg !6463
  %bf.load50 = load i64, i64* %46, align 8, !dbg !6463
  %bf.lshr51 = lshr i64 %bf.load50, 20, !dbg !6463
  %bf.clear52 = and i64 %bf.lshr51, 1, !dbg !6463
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !6463
  %47 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6464
  %base54 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6464
  %48 = bitcast %struct.tree_base* %base54 to i64*, !dbg !6464
  %49 = zext i32 %bf.cast53 to i64, !dbg !6465
  %bf.load55 = load i64, i64* %48, align 8, !dbg !6465
  %bf.value56 = and i64 %49, 1, !dbg !6465
  %bf.shl57 = shl i64 %bf.value56, 20, !dbg !6465
  %bf.clear58 = and i64 %bf.load55, -1048577, !dbg !6465
  %bf.set59 = or i64 %bf.clear58, %bf.shl57, !dbg !6465
  store i64 %bf.set59, i64* %48, align 8, !dbg !6465
  %bf.result.cast60 = trunc i64 %bf.value56 to i32, !dbg !6465
  %50 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6466
  %base61 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !6466
  %51 = bitcast %struct.tree_base* %base61 to i64*, !dbg !6466
  %bf.load62 = load i64, i64* %51, align 8, !dbg !6466
  %bf.lshr63 = lshr i64 %bf.load62, 18, !dbg !6466
  %bf.clear64 = and i64 %bf.lshr63, 1, !dbg !6466
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6466
  %52 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6467
  %base66 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !6467
  %53 = bitcast %struct.tree_base* %base66 to i64*, !dbg !6467
  %54 = zext i32 %bf.cast65 to i64, !dbg !6468
  %bf.load67 = load i64, i64* %53, align 8, !dbg !6468
  %bf.value68 = and i64 %54, 1, !dbg !6468
  %bf.shl69 = shl i64 %bf.value68, 18, !dbg !6468
  %bf.clear70 = and i64 %bf.load67, -262145, !dbg !6468
  %bf.set71 = or i64 %bf.clear70, %bf.shl69, !dbg !6468
  store i64 %bf.set71, i64* %53, align 8, !dbg !6468
  %bf.result.cast72 = trunc i64 %bf.value68 to i32, !dbg !6468
  %55 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6469
  %decl_with_vis = bitcast %union.tree_node* %55 to %struct.tree_decl_with_vis*, !dbg !6469
  %seen_in_bind_expr = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6469
  %56 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !6469
  %bf.load73 = load i32, i32* %56, align 8, !dbg !6470
  %bf.clear74 = and i32 %bf.load73, -257, !dbg !6470
  %bf.set75 = or i32 %bf.clear74, 256, !dbg !6470
  store i32 %bf.set75, i32* %56, align 8, !dbg !6470
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6471
  %base76 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !6471
  %58 = bitcast %struct.tree_base* %base76 to i64*, !dbg !6471
  %bf.load77 = load i64, i64* %58, align 8, !dbg !6471
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !6471
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !6471
  %cmp = icmp eq i32 %bf.cast79, 34, !dbg !6473
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6474

lor.lhs.false:                                    ; preds = %if.end
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6475
  %base80 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !6475
  %60 = bitcast %struct.tree_base* %base80 to i64*, !dbg !6475
  %bf.load81 = load i64, i64* %60, align 8, !dbg !6475
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !6475
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !6475
  %cmp84 = icmp eq i32 %bf.cast83, 36, !dbg !6476
  br i1 %cmp84, label %land.lhs.true, label %lor.lhs.false85, !dbg !6477

lor.lhs.false85:                                  ; preds = %lor.lhs.false
  %61 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6478
  %base86 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !6478
  %62 = bitcast %struct.tree_base* %base86 to i64*, !dbg !6478
  %bf.load87 = load i64, i64* %62, align 8, !dbg !6478
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !6478
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !6478
  %cmp90 = icmp eq i32 %bf.cast89, 32, !dbg !6479
  br i1 %cmp90, label %land.lhs.true, label %if.end103, !dbg !6480

land.lhs.true:                                    ; preds = %lor.lhs.false85, %lor.lhs.false, %if.end
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6481
  %decl_common91 = bitcast %union.tree_node* %63 to %struct.tree_decl_common*, !dbg !6481
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common91, i32 0, i32 2, !dbg !6481
  %64 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !6481
  %bf.load92 = load i64, i64* %64, align 8, !dbg !6481
  %bf.lshr93 = lshr i64 %bf.load92, 28, !dbg !6481
  %bf.clear94 = and i64 %bf.lshr93, 1, !dbg !6481
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !6481
  %tobool96 = icmp ne i32 %bf.cast95, 0, !dbg !6481
  br i1 %tobool96, label %if.then97, label %if.end103, !dbg !6482

if.then97:                                        ; preds = %land.lhs.true
  %65 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6483
  %decl_common98 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !6483
  %decl_by_reference_flag99 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common98, i32 0, i32 2, !dbg !6483
  %66 = bitcast i40* %decl_by_reference_flag99 to i64*, !dbg !6483
  %bf.load100 = load i64, i64* %66, align 8, !dbg !6484
  %bf.clear101 = and i64 %bf.load100, -268435457, !dbg !6484
  %bf.set102 = or i64 %bf.clear101, 268435456, !dbg !6484
  store i64 %bf.set102, i64* %66, align 8, !dbg !6484
  br label %if.end103, !dbg !6483

if.end103:                                        ; preds = %if.then97, %land.lhs.true, %lor.lhs.false85
  %67 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6485
  %68 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6485
  call void @decl_value_expr_insert(%union.tree_node* %67, %union.tree_node* %68), !dbg !6485
  %69 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6486
  %decl_common104 = bitcast %union.tree_node* %69 to %struct.tree_decl_common*, !dbg !6486
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common104, i32 0, i32 2, !dbg !6486
  %70 = bitcast i40* %decl_flag_2 to i64*, !dbg !6486
  %bf.load105 = load i64, i64* %70, align 8, !dbg !6487
  %bf.clear106 = and i64 %bf.load105, -67108865, !dbg !6487
  %bf.set107 = or i64 %bf.clear106, 67108864, !dbg !6487
  store i64 %bf.set107, i64* %70, align 8, !dbg !6487
  %71 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6488
  %72 = bitcast %union.tree_node* %71 to i8*, !dbg !6488
  %73 = load i8**, i8*** %slot, align 8, !dbg !6489
  store i8* %72, i8** %73, align 8, !dbg !6490
  %74 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6491
  %debug_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %74, i32 0, i32 8, !dbg !6492
  %75 = load %union.tree_node*, %union.tree_node** %debug_var_chain, align 8, !dbg !6492
  %76 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6493
  %common108 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !6493
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 1, !dbg !6493
  store %union.tree_node* %75, %union.tree_node** %chain, align 8, !dbg !6494
  %77 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6495
  %78 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6496
  %debug_var_chain109 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %78, i32 0, i32 8, !dbg !6497
  store %union.tree_node* %77, %union.tree_node** %debug_var_chain109, align 8, !dbg !6498
  %79 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6499
  %decl_common110 = bitcast %union.tree_node* %79 to %struct.tree_decl_common*, !dbg !6499
  %ignored_flag111 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common110, i32 0, i32 2, !dbg !6499
  %80 = bitcast i40* %ignored_flag111 to i64*, !dbg !6499
  %bf.load112 = load i64, i64* %80, align 8, !dbg !6500
  %bf.clear113 = and i64 %bf.load112, -1025, !dbg !6500
  %bf.set114 = or i64 %bf.clear113, 1024, !dbg !6500
  store i64 %bf.set114, i64* %80, align 8, !dbg !6500
  %81 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6501
  store %union.tree_node* %81, %union.tree_node** %retval, align 8, !dbg !6502
  br label %return, !dbg !6502

return:                                           ; preds = %if.end103, %if.then
  %82 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6503
  ret %union.tree_node* %82, !dbg !6503
}

declare dso_local %union.tree_node* @create_artificial_label(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_nl_goto_field(%struct.nesting_info* %info) #0 !dbg !6504 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %field = alloca %union.tree_node*, align 8
  %size = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6505, metadata !DIExpression()), !dbg !6506
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6507, metadata !DIExpression()), !dbg !6508
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6509
  %nl_goto_field = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 13, !dbg !6510
  %1 = load %union.tree_node*, %union.tree_node** %nl_goto_field, align 8, !dbg !6510
  store %union.tree_node* %1, %union.tree_node** %field, align 8, !dbg !6508
  %2 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6511
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6511
  br i1 %tobool, label %if.end16, label %if.then, !dbg !6513

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %size, metadata !6514, metadata !DIExpression()), !dbg !6516
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6517, metadata !DIExpression()), !dbg !6518
  %3 = load i32, i32* @ptr_mode, align 4, !dbg !6519
  %cmp = icmp eq i32 16, %3, !dbg !6521
  br i1 %cmp, label %if.then1, label %if.else, !dbg !6522

if.then1:                                         ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !6523
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !6524
  br label %if.end, !dbg !6525

if.else:                                          ; preds = %if.then
  %5 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !6526
  %call = call %union.tree_node* %5(i32 16, i32 1), !dbg !6527
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !6528
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  %6 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !6529
  %conv = zext i8 %6 to i16, !dbg !6529
  %conv2 = zext i16 %conv to i32, !dbg !6529
  store i32 %conv2, i32* %size, align 4, !dbg !6530
  %7 = load i32, i32* %size, align 4, !dbg !6531
  %8 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !6532
  %conv3 = zext i8 %8 to i16, !dbg !6532
  %conv4 = zext i16 %conv3 to i32, !dbg !6532
  %div = udiv i32 %7, %conv4, !dbg !6533
  store i32 %div, i32* %size, align 4, !dbg !6534
  %9 = load i32, i32* %size, align 4, !dbg !6535
  %add = add i32 %9, 1, !dbg !6536
  store i32 %add, i32* %size, align 4, !dbg !6537
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6538
  %11 = load i32, i32* %size, align 4, !dbg !6539
  %conv5 = zext i32 %11 to i64, !dbg !6539
  %call6 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv5), !dbg !6540
  %call7 = call %union.tree_node* @build_index_type(%union.tree_node* %call6), !dbg !6541
  %call8 = call %union.tree_node* @build_array_type(%union.tree_node* %10, %union.tree_node* %call7), !dbg !6542
  store %union.tree_node* %call8, %union.tree_node** %type, align 8, !dbg !6543
  %call9 = call %union.tree_node* @make_node_stat(i32 31), !dbg !6544
  store %union.tree_node* %call9, %union.tree_node** %field, align 8, !dbg !6545
  %call10 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)), !dbg !6546
  %12 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6547
  %decl_minimal = bitcast %union.tree_node* %12 to %struct.tree_decl_minimal*, !dbg !6547
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6547
  store %union.tree_node* %call10, %union.tree_node** %name, align 8, !dbg !6548
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6549
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6550
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6550
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6550
  store %union.tree_node* %13, %union.tree_node** %type11, align 8, !dbg !6551
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6552
  %type12 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !6552
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 7, !dbg !6552
  %16 = load i32, i32* %align, align 8, !dbg !6552
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6553
  %decl_common = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !6553
  %align13 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !6553
  store i32 %16, i32* %align13, align 8, !dbg !6554
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6555
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6555
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !6555
  %bf.load = load i64, i64* %19, align 8, !dbg !6556
  %bf.clear = and i64 %bf.load, -262145, !dbg !6556
  %bf.set = or i64 %bf.clear, 262144, !dbg !6556
  store i64 %bf.set, i64* %19, align 8, !dbg !6556
  %20 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6557
  %call14 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %20), !dbg !6558
  %21 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6559
  call void @insert_field_into_struct(%union.tree_node* %call14, %union.tree_node* %21), !dbg !6560
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6561
  %23 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6562
  %nl_goto_field15 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %23, i32 0, i32 13, !dbg !6563
  store %union.tree_node* %22, %union.tree_node** %nl_goto_field15, align 8, !dbg !6564
  br label %if.end16, !dbg !6565

if.end16:                                         ; preds = %if.end, %entry
  %24 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6566
  ret %union.tree_node* %24, !dbg !6567
}

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

declare dso_local %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_index_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !6568 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6569, metadata !DIExpression()), !dbg !6570
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6571
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6572
  ret %union.tree_node* %call, !dbg !6573
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !6574 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6577, metadata !DIExpression()), !dbg !6578
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6579
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6580
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6580
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !6581
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !6581
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6582
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6583
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6584
  ret void, !dbg !6585
}

declare dso_local zeroext i8 @gimple_stmt_may_fallthru(%union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node*) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_tramp_reference_stmt(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !6586 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  %nargs = alloca i64, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !6589, metadata !DIExpression()), !dbg !6590
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !6591, metadata !DIExpression()), !dbg !6592
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6593, metadata !DIExpression()), !dbg !6594
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6595
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6596
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6594
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6597
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6598
  switch i32 %call1, label %sw.default [
    i32 8, label %sw.bb
  ], !dbg !6599

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6600, metadata !DIExpression()), !dbg !6603
  call void @llvm.dbg.declare(metadata i64* %nargs, metadata !6604, metadata !DIExpression()), !dbg !6605
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6606
  %call2 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %2), !dbg !6607
  %conv = zext i32 %call2 to i64, !dbg !6607
  store i64 %conv, i64* %nargs, align 8, !dbg !6605
  store i64 0, i64* %i, align 8, !dbg !6608
  br label %for.cond, !dbg !6610

for.cond:                                         ; preds = %for.inc, %sw.bb
  %3 = load i64, i64* %i, align 8, !dbg !6611
  %4 = load i64, i64* %nargs, align 8, !dbg !6613
  %cmp = icmp ult i64 %3, %4, !dbg !6614
  br i1 %cmp, label %for.body, label %for.end, !dbg !6615

for.body:                                         ; preds = %for.cond
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6616
  %6 = load i64, i64* %i, align 8, !dbg !6616
  %conv4 = trunc i64 %6 to i32, !dbg !6616
  %call5 = call %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %5, i32 %conv4), !dbg !6616
  %7 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6616
  %8 = bitcast %struct.walk_stmt_info* %7 to i8*, !dbg !6616
  %call6 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call5, %union.tree_node* (%union.tree_node**, i32*, i8*)* @convert_tramp_reference_op, i8* %8, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !6616
  br label %for.inc, !dbg !6616

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8, !dbg !6617
  %inc = add i64 %9, 1, !dbg !6617
  store i64 %inc, i64* %i, align 8, !dbg !6617
  br label %for.cond, !dbg !6618, !llvm.loop !6619

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !6621
  store i8 1, i8* %10, align 1, !dbg !6622
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6623
  br label %return, !dbg !6623

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6624

sw.epilog:                                        ; preds = %sw.default
  %11 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !6625
  store i8 0, i8* %11, align 1, !dbg !6626
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6627
  br label %return, !dbg !6627

return:                                           ; preds = %sw.epilog, %for.end
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6628
  ret %union.tree_node* %12, !dbg !6628
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_tramp_reference_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !6629 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %t = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %target_context = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %builtin = alloca %union.tree_node*, align 8
  %call = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !6630, metadata !DIExpression()), !dbg !6631
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !6632, metadata !DIExpression()), !dbg !6633
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6634, metadata !DIExpression()), !dbg !6635
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !6636, metadata !DIExpression()), !dbg !6637
  %0 = load i8*, i8** %data.addr, align 8, !dbg !6638
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !6639
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !6637
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !6640, metadata !DIExpression()), !dbg !6641
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !6642
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !6643
  %3 = load i8*, i8** %info1, align 8, !dbg !6643
  %4 = bitcast i8* %3 to %struct.nesting_info*, !dbg !6644
  store %struct.nesting_info* %4, %struct.nesting_info** %info, align 8, !dbg !6641
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !6645, metadata !DIExpression()), !dbg !6646
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6647, metadata !DIExpression()), !dbg !6648
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6649
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !6650
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !6648
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6651, metadata !DIExpression()), !dbg !6652
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context, metadata !6653, metadata !DIExpression()), !dbg !6654
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !6655, metadata !DIExpression()), !dbg !6656
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtin, metadata !6657, metadata !DIExpression()), !dbg !6658
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !6659, metadata !DIExpression()), !dbg !6660
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6661
  store i32 0, i32* %7, align 4, !dbg !6662
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6663
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6663
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !6663
  %bf.load = load i64, i64* %9, align 8, !dbg !6663
  %bf.clear = and i64 %bf.load, 65535, !dbg !6663
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6663
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
  ], !dbg !6664

sw.bb:                                            ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6665
  %exp = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !6665
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6665
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6665
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6665
  store %union.tree_node* %11, %union.tree_node** %decl, align 8, !dbg !6667
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6668
  %base2 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6668
  %13 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6668
  %bf.load3 = load i64, i64* %13, align 8, !dbg !6668
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6668
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6668
  %cmp = icmp ne i32 %bf.cast5, 29, !dbg !6670
  br i1 %cmp, label %if.then, label %if.end, !dbg !6671

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !6672

if.end:                                           ; preds = %sw.bb
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6673
  %call6 = call %union.tree_node* @decl_function_context(%union.tree_node* %14), !dbg !6674
  store %union.tree_node* %call6, %union.tree_node** %target_context, align 8, !dbg !6675
  %15 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6676
  %tobool = icmp ne %union.tree_node* %15, null, !dbg !6676
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !6678

if.then7:                                         ; preds = %if.end
  br label %sw.epilog, !dbg !6679

if.end8:                                          ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6680
  %function_decl = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !6680
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6680
  %bf.load9 = load i32, i32* %regdecl_flag, align 8, !dbg !6680
  %bf.lshr = lshr i32 %bf.load9, 22, !dbg !6680
  %bf.clear10 = and i32 %bf.lshr, 1, !dbg !6680
  %tobool11 = icmp ne i32 %bf.clear10, 0, !dbg !6680
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !6682

if.then12:                                        ; preds = %if.end8
  br label %sw.epilog, !dbg !6683

if.end13:                                         ; preds = %if.end8
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6684
  %base14 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6684
  %18 = bitcast %struct.tree_base* %base14 to i64*, !dbg !6684
  %bf.load15 = load i64, i64* %18, align 8, !dbg !6684
  %bf.lshr16 = lshr i64 %bf.load15, 26, !dbg !6684
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !6684
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !6684
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !6684
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6686

if.then20:                                        ; preds = %if.end13
  br label %sw.epilog, !dbg !6687

if.end21:                                         ; preds = %if.end13
  %19 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6688
  store %struct.nesting_info* %19, %struct.nesting_info** %i, align 8, !dbg !6690
  br label %for.cond, !dbg !6691

for.cond:                                         ; preds = %for.inc, %if.end21
  %20 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6692
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 6, !dbg !6694
  %21 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6694
  %22 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6695
  %cmp22 = icmp ne %union.tree_node* %21, %22, !dbg !6696
  br i1 %cmp22, label %for.body, label %for.end, !dbg !6697

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !6698

for.inc:                                          ; preds = %for.body
  %23 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6699
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %23, i32 0, i32 0, !dbg !6700
  %24 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !6700
  store %struct.nesting_info* %24, %struct.nesting_info** %i, align 8, !dbg !6701
  br label %for.cond, !dbg !6702, !llvm.loop !6703

for.end:                                          ; preds = %for.cond
  %25 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !6705
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6706
  %call23 = call %union.tree_node* @lookup_tramp_for_decl(%struct.nesting_info* %25, %union.tree_node* %26, i32 1), !dbg !6707
  store %union.tree_node* %call23, %union.tree_node** %x, align 8, !dbg !6708
  %27 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6709
  %28 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6710
  %29 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6711
  %30 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !6712
  %gsi = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %30, i32 0, i32 0, !dbg !6713
  %call24 = call %union.tree_node* @get_frame_field(%struct.nesting_info* %27, %union.tree_node* %28, %union.tree_node* %29, %struct.gimple_stmt_iterator* %gsi), !dbg !6714
  store %union.tree_node* %call24, %union.tree_node** %x, align 8, !dbg !6715
  %31 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6716
  %32 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6717
  %call25 = call %union.tree_node* @build_addr(%union.tree_node* %31, %union.tree_node* %32), !dbg !6718
  store %union.tree_node* %call25, %union.tree_node** %x, align 8, !dbg !6719
  %33 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6720
  %34 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6721
  %35 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !6722
  %gsi26 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %35, i32 0, i32 0, !dbg !6723
  %call27 = call %union.tree_node* @gsi_gimplify_val(%struct.nesting_info* %33, %union.tree_node* %34, %struct.gimple_stmt_iterator* %gsi26), !dbg !6724
  store %union.tree_node* %call27, %union.tree_node** %x, align 8, !dbg !6725
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 521), align 8, !dbg !6726
  store %union.tree_node* %36, %union.tree_node** %builtin, align 8, !dbg !6727
  %37 = load %union.tree_node*, %union.tree_node** %builtin, align 8, !dbg !6728
  %38 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6729
  %call28 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %37, i32 1, %union.tree_node* %38), !dbg !6730
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %call, align 8, !dbg !6731
  %39 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6732
  %40 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !6733
  %gsi29 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %40, i32 0, i32 0, !dbg !6734
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !6735
  %call30 = call %union.tree_node* @init_tmp_var_with_call(%struct.nesting_info* %39, %struct.gimple_stmt_iterator* %gsi29, %union.gimple_statement_d* %41), !dbg !6736
  store %union.tree_node* %call30, %union.tree_node** %x, align 8, !dbg !6737
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6738
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !6738
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6738
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6738
  %44 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6738
  %call31 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %43, %union.tree_node* %44), !dbg !6738
  store %union.tree_node* %call31, %union.tree_node** %x, align 8, !dbg !6739
  %45 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6740
  %46 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6741
  %47 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !6742
  %gsi32 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %47, i32 0, i32 0, !dbg !6743
  %call33 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %45, %union.tree_node* %46, %struct.gimple_stmt_iterator* %gsi32), !dbg !6744
  store %union.tree_node* %call33, %union.tree_node** %x, align 8, !dbg !6745
  %48 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6746
  %49 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6747
  store %union.tree_node* %48, %union.tree_node** %49, align 8, !dbg !6748
  br label %sw.epilog, !dbg !6749

sw.default:                                       ; preds = %entry
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6750
  %base34 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !6750
  %51 = bitcast %struct.tree_base* %base34 to i64*, !dbg !6750
  %bf.load35 = load i64, i64* %51, align 8, !dbg !6750
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !6750
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !6750
  %idxprom = sext i32 %bf.cast37 to i64, !dbg !6750
  %arrayidx38 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6750
  %52 = load i32, i32* %arrayidx38, align 4, !dbg !6750
  %cmp39 = icmp eq i32 %52, 2, !dbg !6750
  br i1 %cmp39, label %if.end48, label %lor.lhs.false, !dbg !6750

lor.lhs.false:                                    ; preds = %sw.default
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6750
  %base40 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6750
  %54 = bitcast %struct.tree_base* %base40 to i64*, !dbg !6750
  %bf.load41 = load i64, i64* %54, align 8, !dbg !6750
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !6750
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !6750
  %idxprom44 = sext i32 %bf.cast43 to i64, !dbg !6750
  %arrayidx45 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom44, !dbg !6750
  %55 = load i32, i32* %arrayidx45, align 4, !dbg !6750
  %cmp46 = icmp eq i32 %55, 3, !dbg !6750
  br i1 %cmp46, label %if.end48, label %if.then47, !dbg !6752

if.then47:                                        ; preds = %lor.lhs.false
  %56 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6753
  store i32 1, i32* %56, align 4, !dbg !6754
  br label %if.end48, !dbg !6755

if.end48:                                         ; preds = %if.then47, %lor.lhs.false, %sw.default
  br label %sw.epilog, !dbg !6756

sw.epilog:                                        ; preds = %if.end48, %for.end, %if.then20, %if.then12, %if.then7, %if.then
  ret %union.tree_node* null, !dbg !6757
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @convert_gimple_call(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !6758 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %info = alloca %struct.nesting_info*, align 8
  %decl = alloca %union.tree_node*, align 8
  %target_context = alloca %union.tree_node*, align 8
  %save_static_chain_added = alloca i8, align 1
  %i = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %c = alloca %union.tree_node*, align 8
  %decl23 = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6759, metadata !DIExpression()), !dbg !6760
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !6761, metadata !DIExpression()), !dbg !6762
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !6763, metadata !DIExpression()), !dbg !6764
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info, metadata !6765, metadata !DIExpression()), !dbg !6766
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6767
  %info1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !6768
  %1 = load i8*, i8** %info1, align 8, !dbg !6768
  %2 = bitcast i8* %1 to %struct.nesting_info*, !dbg !6769
  store %struct.nesting_info* %2, %struct.nesting_info** %info, align 8, !dbg !6766
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6770, metadata !DIExpression()), !dbg !6771
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context, metadata !6772, metadata !DIExpression()), !dbg !6773
  call void @llvm.dbg.declare(metadata i8* %save_static_chain_added, metadata !6774, metadata !DIExpression()), !dbg !6775
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6776, metadata !DIExpression()), !dbg !6777
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6778, metadata !DIExpression()), !dbg !6779
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6780
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !6781
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6779
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6782
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %4), !dbg !6783
  switch i32 %call2, label %sw.default [
    i32 8, label %sw.bb
    i32 26, label %sw.bb17
    i32 27, label %sw.bb17
    i32 23, label %sw.bb70
    i32 30, label %sw.bb72
    i32 29, label %sw.bb72
    i32 32, label %sw.bb72
    i32 24, label %sw.bb72
    i32 25, label %sw.bb72
    i32 22, label %sw.bb72
  ], !dbg !6784

sw.bb:                                            ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6785
  %call3 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %5), !dbg !6788
  %tobool = icmp ne %union.tree_node* %call3, null, !dbg !6788
  br i1 %tobool, label %if.then, label %if.end, !dbg !6789

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !6790

if.end:                                           ; preds = %sw.bb
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6791
  %call4 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %6), !dbg !6792
  store %union.tree_node* %call4, %union.tree_node** %decl, align 8, !dbg !6793
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6794
  %tobool5 = icmp ne %union.tree_node* %7, null, !dbg !6794
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !6796

if.then6:                                         ; preds = %if.end
  br label %sw.epilog, !dbg !6797

if.end7:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6798
  %call8 = call %union.tree_node* @decl_function_context(%union.tree_node* %8), !dbg !6799
  store %union.tree_node* %call8, %union.tree_node** %target_context, align 8, !dbg !6800
  %9 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6801
  %tobool9 = icmp ne %union.tree_node* %9, null, !dbg !6801
  br i1 %tobool9, label %land.lhs.true, label %if.end16, !dbg !6803

land.lhs.true:                                    ; preds = %if.end7
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6804
  %function_decl = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !6804
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6804
  %bf.load = load i32, i32* %regdecl_flag, align 8, !dbg !6804
  %bf.lshr = lshr i32 %bf.load, 22, !dbg !6804
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6804
  %tobool10 = icmp ne i32 %bf.clear, 0, !dbg !6804
  br i1 %tobool10, label %if.then11, label %if.end16, !dbg !6805

if.then11:                                        ; preds = %land.lhs.true
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6806
  %12 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6808
  %13 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6809
  %14 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !6810
  %gsi12 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %14, i32 0, i32 0, !dbg !6811
  %call13 = call %union.tree_node* @get_static_chain(%struct.nesting_info* %12, %union.tree_node* %13, %struct.gimple_stmt_iterator* %gsi12), !dbg !6812
  call void @gimple_call_set_chain(%union.gimple_statement_d* %11, %union.tree_node* %call13), !dbg !6813
  %15 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6814
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %15, i32 0, i32 6, !dbg !6815
  %16 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6815
  %17 = load %union.tree_node*, %union.tree_node** %target_context, align 8, !dbg !6816
  %cmp = icmp ne %union.tree_node* %16, %17, !dbg !6817
  %conv = zext i1 %cmp to i32, !dbg !6817
  %shl = shl i32 1, %conv, !dbg !6818
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6819
  %static_chain_added = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %18, i32 0, i32 16, !dbg !6820
  %19 = load i8, i8* %static_chain_added, align 2, !dbg !6821
  %conv14 = sext i8 %19 to i32, !dbg !6821
  %or = or i32 %conv14, %shl, !dbg !6821
  %conv15 = trunc i32 %or to i8, !dbg !6821
  store i8 %conv15, i8* %static_chain_added, align 2, !dbg !6821
  br label %if.end16, !dbg !6822

if.end16:                                         ; preds = %if.then11, %land.lhs.true, %if.end7
  br label %sw.epilog, !dbg !6823

sw.bb17:                                          ; preds = %entry, %entry
  %20 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6824
  %static_chain_added18 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %20, i32 0, i32 16, !dbg !6825
  %21 = load i8, i8* %static_chain_added18, align 2, !dbg !6825
  store i8 %21, i8* %save_static_chain_added, align 1, !dbg !6826
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6827
  %static_chain_added19 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %22, i32 0, i32 16, !dbg !6828
  store i8 0, i8* %static_chain_added19, align 2, !dbg !6829
  %23 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6830
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6831
  %call20 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %24), !dbg !6832
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_gimple_call, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %23, %struct.gimple_seq_d* %call20), !dbg !6833
  store i32 0, i32* %i, align 4, !dbg !6834
  br label %for.cond, !dbg !6836

for.cond:                                         ; preds = %for.inc63, %sw.bb17
  %25 = load i32, i32* %i, align 4, !dbg !6837
  %cmp21 = icmp slt i32 %25, 2, !dbg !6839
  br i1 %cmp21, label %for.body, label %for.end64, !dbg !6840

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !6841, metadata !DIExpression()), !dbg !6843
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl23, metadata !6844, metadata !DIExpression()), !dbg !6845
  %26 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6846
  %static_chain_added24 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %26, i32 0, i32 16, !dbg !6848
  %27 = load i8, i8* %static_chain_added24, align 2, !dbg !6848
  %conv25 = sext i8 %27 to i32, !dbg !6846
  %28 = load i32, i32* %i, align 4, !dbg !6849
  %shl26 = shl i32 1, %28, !dbg !6850
  %and = and i32 %conv25, %shl26, !dbg !6851
  %cmp27 = icmp eq i32 %and, 0, !dbg !6852
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !6853

if.then29:                                        ; preds = %for.body
  br label %for.inc63, !dbg !6854

if.end30:                                         ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !6855
  %tobool31 = icmp ne i32 %29, 0, !dbg !6855
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !6855

cond.true:                                        ; preds = %if.end30
  %30 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6856
  %call32 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %30), !dbg !6857
  br label %cond.end, !dbg !6855

cond.false:                                       ; preds = %if.end30
  %31 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6858
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %31, i32 0, i32 10, !dbg !6859
  %32 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !6859
  br label %cond.end, !dbg !6855

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call32, %cond.true ], [ %32, %cond.false ], !dbg !6855
  store %union.tree_node* %cond, %union.tree_node** %decl23, align 8, !dbg !6860
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6861
  %call33 = call %union.tree_node* @gimple_omp_taskreg_clauses(%union.gimple_statement_d* %33), !dbg !6863
  store %union.tree_node* %call33, %union.tree_node** %c, align 8, !dbg !6864
  br label %for.cond34, !dbg !6865

for.cond34:                                       ; preds = %for.inc, %cond.end
  %34 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6866
  %tobool35 = icmp ne %union.tree_node* %34, null, !dbg !6868
  br i1 %tobool35, label %for.body36, label %for.end, !dbg !6868

for.body36:                                       ; preds = %for.cond34
  %35 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6869
  %omp_clause = bitcast %union.tree_node* %35 to %struct.tree_omp_clause*, !dbg !6869
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !6869
  %36 = load i32, i32* %code, align 4, !dbg !6869
  %cmp37 = icmp eq i32 %36, 3, !dbg !6871
  br i1 %cmp37, label %land.lhs.true43, label %lor.lhs.false, !dbg !6872

lor.lhs.false:                                    ; preds = %for.body36
  %37 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6873
  %omp_clause39 = bitcast %union.tree_node* %37 to %struct.tree_omp_clause*, !dbg !6873
  %code40 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause39, i32 0, i32 2, !dbg !6873
  %38 = load i32, i32* %code40, align 4, !dbg !6873
  %cmp41 = icmp eq i32 %38, 2, !dbg !6874
  br i1 %cmp41, label %land.lhs.true43, label %if.end48, !dbg !6875

land.lhs.true43:                                  ; preds = %lor.lhs.false, %for.body36
  %39 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6876
  %omp_clause44 = bitcast %union.tree_node* %39 to %struct.tree_omp_clause*, !dbg !6876
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause44, i32 0, i32 6, !dbg !6876
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !6876
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6876
  %41 = load %union.tree_node*, %union.tree_node** %decl23, align 8, !dbg !6877
  %cmp45 = icmp eq %union.tree_node* %40, %41, !dbg !6878
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !6879

if.then47:                                        ; preds = %land.lhs.true43
  br label %for.end, !dbg !6880

if.end48:                                         ; preds = %land.lhs.true43, %lor.lhs.false
  br label %for.inc, !dbg !6877

for.inc:                                          ; preds = %if.end48
  %42 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6881
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !6881
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6881
  %43 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6881
  store %union.tree_node* %43, %union.tree_node** %c, align 8, !dbg !6882
  br label %for.cond34, !dbg !6883, !llvm.loop !6884

for.end:                                          ; preds = %if.then47, %for.cond34
  %44 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6886
  %cmp49 = icmp eq %union.tree_node* %44, null, !dbg !6888
  br i1 %cmp49, label %if.then51, label %if.end62, !dbg !6889

if.then51:                                        ; preds = %for.end
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6890
  %call52 = call i32 @gimple_location(%union.gimple_statement_d* %45), !dbg !6892
  %46 = load i32, i32* %i, align 4, !dbg !6893
  %tobool53 = icmp ne i32 %46, 0, !dbg !6893
  %47 = zext i1 %tobool53 to i64, !dbg !6893
  %cond54 = select i1 %tobool53, i32 3, i32 2, !dbg !6893
  %call55 = call %union.tree_node* @build_omp_clause(i32 %call52, i32 %cond54), !dbg !6894
  store %union.tree_node* %call55, %union.tree_node** %c, align 8, !dbg !6895
  %48 = load %union.tree_node*, %union.tree_node** %decl23, align 8, !dbg !6896
  %49 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6897
  %omp_clause56 = bitcast %union.tree_node* %49 to %struct.tree_omp_clause*, !dbg !6897
  %ops57 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause56, i32 0, i32 6, !dbg !6897
  %arrayidx58 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops57, i64 0, i64 0, !dbg !6897
  store %union.tree_node* %48, %union.tree_node** %arrayidx58, align 8, !dbg !6898
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6899
  %call59 = call %union.tree_node* @gimple_omp_taskreg_clauses(%union.gimple_statement_d* %50), !dbg !6900
  %51 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6901
  %common60 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !6901
  %chain61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 1, !dbg !6901
  store %union.tree_node* %call59, %union.tree_node** %chain61, align 8, !dbg !6902
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6903
  %53 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6904
  call void @gimple_omp_taskreg_set_clauses(%union.gimple_statement_d* %52, %union.tree_node* %53), !dbg !6905
  br label %if.end62, !dbg !6906

if.end62:                                         ; preds = %if.then51, %for.end
  br label %for.inc63, !dbg !6907

for.inc63:                                        ; preds = %if.end62, %if.then29
  %54 = load i32, i32* %i, align 4, !dbg !6908
  %inc = add nsw i32 %54, 1, !dbg !6908
  store i32 %inc, i32* %i, align 4, !dbg !6908
  br label %for.cond, !dbg !6909, !llvm.loop !6910

for.end64:                                        ; preds = %for.cond
  %55 = load i8, i8* %save_static_chain_added, align 1, !dbg !6912
  %conv65 = sext i8 %55 to i32, !dbg !6912
  %56 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6913
  %static_chain_added66 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %56, i32 0, i32 16, !dbg !6914
  %57 = load i8, i8* %static_chain_added66, align 2, !dbg !6915
  %conv67 = sext i8 %57 to i32, !dbg !6915
  %or68 = or i32 %conv67, %conv65, !dbg !6915
  %conv69 = trunc i32 %or68 to i8, !dbg !6915
  store i8 %conv69, i8* %static_chain_added66, align 2, !dbg !6915
  br label %sw.epilog, !dbg !6916

sw.bb70:                                          ; preds = %entry
  %58 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6917
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6918
  %call71 = call %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %59), !dbg !6919
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_gimple_call, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %58, %struct.gimple_seq_d* %call71), !dbg !6920
  br label %sw.bb72, !dbg !6920

sw.bb72:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb70
  %60 = load %struct.nesting_info*, %struct.nesting_info** %info, align 8, !dbg !6921
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6922
  %call73 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %61), !dbg !6923
  call void @walk_body(%union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @convert_gimple_call, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.nesting_info* %60, %struct.gimple_seq_d* %call73), !dbg !6924
  br label %sw.epilog, !dbg !6925

sw.default:                                       ; preds = %entry
  %62 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !6926
  store i8 0, i8* %62, align 1, !dbg !6927
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6928
  br label %return, !dbg !6928

sw.epilog:                                        ; preds = %sw.bb72, %for.end64, %if.end16, %if.then6, %if.then
  %63 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !6929
  store i8 1, i8* %63, align 1, !dbg !6930
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6931
  br label %return, !dbg !6931

return:                                           ; preds = %sw.epilog, %sw.default
  %64 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6932
  ret %union.tree_node* %64, !dbg !6932
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6933 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6936, metadata !DIExpression()), !dbg !6937
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6940
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6941
  store i32 %call, i32* %num_ops, align 4, !dbg !6942
  %1 = load i32, i32* %num_ops, align 4, !dbg !6943
  %sub = sub i32 %1, 3, !dbg !6944
  ret i32 %sub, !dbg !6945
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6946 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6949, metadata !DIExpression()), !dbg !6950
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6951, metadata !DIExpression()), !dbg !6952
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6953
  %1 = load i32, i32* %index.addr, align 4, !dbg !6954
  %add = add i32 %1, 3, !dbg !6955
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 %add), !dbg !6956
  ret %union.tree_node** %call, !dbg !6957
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6958 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6959, metadata !DIExpression()), !dbg !6960
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6961
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6962
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6963
  %1 = load i32, i32* %num_ops, align 4, !dbg !6963
  ret i32 %1, !dbg !6964
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6965 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6966, metadata !DIExpression()), !dbg !6967
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6968, metadata !DIExpression()), !dbg !6969
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6970
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6972
  %tobool = icmp ne i8 %call, 0, !dbg !6972
  br i1 %tobool, label %if.then, label %if.else, !dbg !6973

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6974
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6976
  %2 = load i32, i32* %i.addr, align 4, !dbg !6977
  %idx.ext = zext i32 %2 to i64, !dbg !6978
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !6978
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !6979
  br label %return, !dbg !6979

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6980
  br label %return, !dbg !6980

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6981
  ret %union.tree_node** %3, !dbg !6981
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lookup_tramp_for_decl(%struct.nesting_info* %info, %union.tree_node* %decl, i32 %insert) #0 !dbg !6982 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %insert.addr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %field = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6985, metadata !DIExpression()), !dbg !6986
  store i32 %insert, i32* %insert.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %insert.addr, metadata !6987, metadata !DIExpression()), !dbg !6988
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6989, metadata !DIExpression()), !dbg !6990
  %0 = load i32, i32* %insert.addr, align 4, !dbg !6991
  %cmp = icmp eq i32 %0, 0, !dbg !6993
  br i1 %cmp, label %if.then, label %if.end, !dbg !6994

if.then:                                          ; preds = %entry
  %1 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !6995
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %1, i32 0, i32 4, !dbg !6997
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !6997
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6998
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !6998
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %4), !dbg !6999
  store i8** %call, i8*** %slot, align 8, !dbg !7000
  %5 = load i8**, i8*** %slot, align 8, !dbg !7001
  %tobool = icmp ne i8** %5, null, !dbg !7001
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7001

cond.true:                                        ; preds = %if.then
  %6 = load i8**, i8*** %slot, align 8, !dbg !7002
  %7 = load i8*, i8** %6, align 8, !dbg !7003
  %8 = bitcast i8* %7 to %union.tree_node*, !dbg !7004
  br label %cond.end, !dbg !7001

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %8, %cond.true ], [ null, %cond.false ], !dbg !7001
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !7005
  br label %return, !dbg !7005

if.end:                                           ; preds = %entry
  %9 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7006
  %var_map1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %9, i32 0, i32 4, !dbg !7007
  %10 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map1, align 8, !dbg !7007
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7008
  %12 = bitcast %union.tree_node* %11 to i8*, !dbg !7008
  %call2 = call i8** @pointer_map_insert(%struct.pointer_map_t* %10, i8* %12), !dbg !7009
  store i8** %call2, i8*** %slot, align 8, !dbg !7010
  %13 = load i8**, i8*** %slot, align 8, !dbg !7011
  %14 = load i8*, i8** %13, align 8, !dbg !7013
  %tobool3 = icmp ne i8* %14, null, !dbg !7013
  br i1 %tobool3, label %if.end10, label %if.then4, !dbg !7014

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !7015, metadata !DIExpression()), !dbg !7017
  %call5 = call %union.tree_node* @make_node_stat(i32 31), !dbg !7018
  store %union.tree_node* %call5, %union.tree_node** %field, align 8, !dbg !7017
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7019
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !7019
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !7019
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7019
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7020
  %decl_minimal6 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !7020
  %name7 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal6, i32 0, i32 3, !dbg !7020
  store %union.tree_node* %16, %union.tree_node** %name7, align 8, !dbg !7021
  %18 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7022
  %call8 = call %union.tree_node* @get_trampoline_type(%struct.nesting_info* %18), !dbg !7023
  %19 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7024
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7024
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7024
  store %union.tree_node* %call8, %union.tree_node** %type, align 8, !dbg !7025
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7026
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7026
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !7026
  %bf.load = load i64, i64* %21, align 8, !dbg !7027
  %bf.clear = and i64 %bf.load, -262145, !dbg !7027
  %bf.set = or i64 %bf.clear, 262144, !dbg !7027
  store i64 %bf.set, i64* %21, align 8, !dbg !7027
  %22 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7028
  %call9 = call %union.tree_node* @get_frame_type(%struct.nesting_info* %22), !dbg !7029
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7030
  call void @insert_field_into_struct(%union.tree_node* %call9, %union.tree_node* %23), !dbg !7031
  %24 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7032
  %25 = bitcast %union.tree_node* %24 to i8*, !dbg !7032
  %26 = load i8**, i8*** %slot, align 8, !dbg !7033
  store i8* %25, i8** %26, align 8, !dbg !7034
  %27 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7035
  %any_tramp_created = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %27, i32 0, i32 15, !dbg !7036
  store i8 1, i8* %any_tramp_created, align 1, !dbg !7037
  br label %if.end10, !dbg !7038

if.end10:                                         ; preds = %if.then4, %if.end
  %28 = load i8**, i8*** %slot, align 8, !dbg !7039
  %29 = load i8*, i8** %28, align 8, !dbg !7040
  %30 = bitcast i8* %29 to %union.tree_node*, !dbg !7041
  store %union.tree_node* %30, %union.tree_node** %retval, align 8, !dbg !7042
  br label %return, !dbg !7042

return:                                           ; preds = %if.end10, %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7043
  ret %union.tree_node* %31, !dbg !7043
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @init_tmp_var_with_call(%struct.nesting_info* %info, %struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call) #0 !dbg !7044 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !7051, metadata !DIExpression()), !dbg !7052
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7053, metadata !DIExpression()), !dbg !7054
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7055
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7056
  %call1 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %1), !dbg !7057
  %call2 = call %union.tree_node* @create_tmp_var_for(%struct.nesting_info* %0, %union.tree_node* %call1, i8* null), !dbg !7058
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !7059
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7060
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7061
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !7062
  %4 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7063
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %4), !dbg !7065
  %tobool = icmp ne i8 %call3, 0, !dbg !7065
  br i1 %tobool, label %if.end, label %if.then, !dbg !7066

if.then:                                          ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7067
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7068
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %6), !dbg !7069
  %call5 = call i32 @gimple_location(%union.gimple_statement_d* %call4), !dbg !7070
  call void @gimple_set_location(%union.gimple_statement_d* %5, i32 %call5), !dbg !7071
  br label %if.end, !dbg !7071

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7072
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !7073
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %7, %union.gimple_statement_d* %8, i32 1), !dbg !7074
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7075
  ret %union.tree_node* %9, !dbg !7076
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_trampoline_type(%struct.nesting_info* %info) #0 !dbg !7077 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.nesting_info*, align 8
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !7078, metadata !DIExpression()), !dbg !7079
  call void @llvm.dbg.declare(metadata i32* %align, metadata !7080, metadata !DIExpression()), !dbg !7081
  call void @llvm.dbg.declare(metadata i32* %size, metadata !7082, metadata !DIExpression()), !dbg !7083
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7084, metadata !DIExpression()), !dbg !7085
  %0 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7086
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7086
  br i1 %tobool, label %if.then, label %if.end, !dbg !7088

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7089
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !7090
  br label %return, !dbg !7090

if.end:                                           ; preds = %entry
  store i32 8, i32* %align, align 4, !dbg !7091
  store i32 10, i32* %size, align 4, !dbg !7092
  %2 = load i32, i32* %align, align 4, !dbg !7093
  %cmp = icmp ugt i32 %2, 32, !dbg !7095
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !7096

if.then1:                                         ; preds = %if.end
  %3 = load i32, i32* %align, align 4, !dbg !7097
  %div = udiv i32 %3, 8, !dbg !7099
  %sub = sub i32 %div, 1, !dbg !7100
  %and = and i32 %sub, -4, !dbg !7101
  %4 = load i32, i32* %size, align 4, !dbg !7102
  %add = add i32 %4, %and, !dbg !7102
  store i32 %add, i32* %size, align 4, !dbg !7102
  store i32 32, i32* %align, align 4, !dbg !7103
  br label %if.end2, !dbg !7104

if.end2:                                          ; preds = %if.then1, %if.end
  %5 = load i32, i32* %size, align 4, !dbg !7105
  %sub3 = sub i32 %5, 1, !dbg !7106
  %conv = zext i32 %sub3 to i64, !dbg !7105
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !7107
  %call4 = call %union.tree_node* @build_index_type(%union.tree_node* %call), !dbg !7108
  store %union.tree_node* %call4, %union.tree_node** %t, align 8, !dbg !7109
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !7110
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7111
  %call5 = call %union.tree_node* @build_array_type(%union.tree_node* %6, %union.tree_node* %7), !dbg !7112
  store %union.tree_node* %call5, %union.tree_node** %t, align 8, !dbg !7113
  %8 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7114
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %8, i32 0, i32 6, !dbg !7114
  %9 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7114
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !7114
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7114
  %10 = load i32, i32* %locus, align 8, !dbg !7114
  %call6 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12, i64 0, i64 0)), !dbg !7114
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7114
  %call7 = call %union.tree_node* @build_decl_stat(i32 %10, i32 31, %union.tree_node* %call6, %union.tree_node* %11), !dbg !7114
  store %union.tree_node* %call7, %union.tree_node** %t, align 8, !dbg !7115
  %12 = load i32, i32* %align, align 4, !dbg !7116
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7117
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !7117
  %align8 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !7117
  store i32 %12, i32* %align8, align 8, !dbg !7118
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7119
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !7119
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !7119
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !7119
  %bf.load = load i64, i64* %15, align 8, !dbg !7120
  %bf.clear = and i64 %bf.load, -4398046511105, !dbg !7120
  %bf.set = or i64 %bf.clear, 4398046511104, !dbg !7120
  store i64 %bf.set, i64* %15, align 8, !dbg !7120
  %call9 = call %union.tree_node* @make_node_stat(i32 16), !dbg !7121
  store %union.tree_node* %call9, %union.tree_node** @trampoline_type, align 8, !dbg !7122
  %call10 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0)), !dbg !7123
  %16 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7124
  %type = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !7124
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12, !dbg !7124
  store %union.tree_node* %call10, %union.tree_node** %name, align 8, !dbg !7125
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7126
  %18 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7127
  %type11 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !7127
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 1, !dbg !7127
  store %union.tree_node* %17, %union.tree_node** %values, align 8, !dbg !7128
  %19 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7129
  call void @layout_type(%union.tree_node* %19), !dbg !7130
  %20 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7131
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7132
  %decl_minimal12 = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !7132
  %context13 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal12, i32 0, i32 4, !dbg !7132
  store %union.tree_node* %20, %union.tree_node** %context13, align 8, !dbg !7133
  %22 = load %union.tree_node*, %union.tree_node** @trampoline_type, align 8, !dbg !7134
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !7135
  br label %return, !dbg !7135

return:                                           ; preds = %if.end2, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7136
  ret %union.tree_node* %23, !dbg !7136
}

declare dso_local void @layout_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7137 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7138, metadata !DIExpression()), !dbg !7139
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7140, metadata !DIExpression()), !dbg !7141
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7142
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7143
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7141
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7144, metadata !DIExpression()), !dbg !7145
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7146
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7146
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7146
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7146
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7145
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7147
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7147
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7147
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7147
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7148
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7149
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7149
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7149
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7149
  ret %union.tree_node* %6, !dbg !7150
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !7151 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7152, metadata !DIExpression()), !dbg !7153
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7154, metadata !DIExpression()), !dbg !7155
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7156
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7157
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !7158
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7159
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7159
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7161

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7162
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7162
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7162
  %bf.load = load i64, i64* %4, align 8, !dbg !7162
  %bf.clear = and i64 %bf.load, 65535, !dbg !7162
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7162
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !7163
  br i1 %cmp, label %if.then, label %if.end, !dbg !7164

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7165
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7166
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7166
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7166
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7167
  br label %if.end, !dbg !7166

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7168
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7169 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7170, metadata !DIExpression()), !dbg !7171
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7172
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7173
  ret %union.tree_node* %call, !dbg !7174
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !7175 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7178, metadata !DIExpression()), !dbg !7179
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7180, metadata !DIExpression()), !dbg !7181
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !7182, metadata !DIExpression()), !dbg !7183
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7184
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7184
  %conv = zext i8 %call to i32, !dbg !7184
  %tobool = icmp ne i32 %conv, 0, !dbg !7184
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !7184

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !7184
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7184
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !7184
  %cmp = icmp ult i32 %1, %call1, !dbg !7184
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7184

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7184
  br label %cond.end, !dbg !7184

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7184

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7184
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !7185
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7186
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !7187
  %5 = load i32, i32* %i.addr, align 4, !dbg !7188
  %idxprom = zext i32 %5 to i64, !dbg !7187
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7187
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !7189
  ret void, !dbg !7190
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !7191 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7194
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !7195
  ret %union.tree_node* %call, !dbg !7196
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !7197 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7198, metadata !DIExpression()), !dbg !7199
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7200, metadata !DIExpression()), !dbg !7201
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7202
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7203
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !7201
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7204
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7204
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7204
  %bf.load = load i64, i64* %2, align 8, !dbg !7204
  %bf.clear = and i64 %bf.load, 65535, !dbg !7204
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7204
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !7206
  br i1 %cmp, label %if.then, label %if.end, !dbg !7207

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7208
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7208
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7208
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7208
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7208
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !7209
  br label %return, !dbg !7209

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7210
  br label %return, !dbg !7210

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7211
  ret %union.tree_node* %5, !dbg !7211
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_chain(%union.gimple_statement_d* %gs, %union.tree_node* %chain) #0 !dbg !7212 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %chain.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7213, metadata !DIExpression()), !dbg !7214
  store %union.tree_node* %chain, %union.tree_node** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain.addr, metadata !7215, metadata !DIExpression()), !dbg !7216
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7217
  %1 = load %union.tree_node*, %union.tree_node** %chain.addr, align 8, !dbg !7218
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !7219
  ret void, !dbg !7220
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_static_chain(%struct.nesting_info* %info, %union.tree_node* %target_context, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !7221 {
entry:
  %info.addr = alloca %struct.nesting_info*, align 8
  %target_context.addr = alloca %union.tree_node*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %x = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %struct.nesting_info* %info, %struct.nesting_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %info.addr, metadata !7222, metadata !DIExpression()), !dbg !7223
  store %union.tree_node* %target_context, %union.tree_node** %target_context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_context.addr, metadata !7224, metadata !DIExpression()), !dbg !7225
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7226, metadata !DIExpression()), !dbg !7227
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !7228, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !7230, metadata !DIExpression()), !dbg !7231
  %0 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7232
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 6, !dbg !7234
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7234
  %2 = load %union.tree_node*, %union.tree_node** %target_context.addr, align 8, !dbg !7235
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !7236
  br i1 %cmp, label %if.then, label %if.else, !dbg !7237

if.then:                                          ; preds = %entry
  %3 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7238
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 10, !dbg !7240
  %4 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !7240
  %5 = load %union.tree_node*, %union.tree_node** %target_context.addr, align 8, !dbg !7241
  %call = call %union.tree_node* @build_addr(%union.tree_node* %4, %union.tree_node* %5), !dbg !7242
  store %union.tree_node* %call, %union.tree_node** %x, align 8, !dbg !7243
  br label %if.end, !dbg !7244

if.else:                                          ; preds = %entry
  %6 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7245
  %call1 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %6), !dbg !7247
  store %union.tree_node* %call1, %union.tree_node** %x, align 8, !dbg !7248
  %7 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7249
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %7, i32 0, i32 0, !dbg !7251
  %8 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !7251
  store %struct.nesting_info* %8, %struct.nesting_info** %i, align 8, !dbg !7252
  br label %for.cond, !dbg !7253

for.cond:                                         ; preds = %for.inc, %if.else
  %9 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7254
  %context2 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %9, i32 0, i32 6, !dbg !7256
  %10 = load %union.tree_node*, %union.tree_node** %context2, align 8, !dbg !7256
  %11 = load %union.tree_node*, %union.tree_node** %target_context.addr, align 8, !dbg !7257
  %cmp3 = icmp ne %union.tree_node* %10, %11, !dbg !7258
  br i1 %cmp3, label %for.body, label %for.end, !dbg !7259

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !7260, metadata !DIExpression()), !dbg !7262
  %12 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7263
  %call4 = call %union.tree_node* @get_chain_field(%struct.nesting_info* %12), !dbg !7264
  store %union.tree_node* %call4, %union.tree_node** %field, align 8, !dbg !7262
  %13 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7265
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !7265
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7265
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7265
  %common5 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !7265
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !7265
  %15 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !7265
  %16 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7265
  %call7 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %15, %union.tree_node* %16), !dbg !7265
  store %union.tree_node* %call7, %union.tree_node** %x, align 8, !dbg !7266
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7267
  %common8 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !7267
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !7267
  %18 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !7267
  %19 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7267
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7267
  %call10 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* null), !dbg !7267
  store %union.tree_node* %call10, %union.tree_node** %x, align 8, !dbg !7268
  %21 = load %struct.nesting_info*, %struct.nesting_info** %info.addr, align 8, !dbg !7269
  %22 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7270
  %23 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7271
  %call11 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %21, %union.tree_node* %22, %struct.gimple_stmt_iterator* %23), !dbg !7272
  store %union.tree_node* %call11, %union.tree_node** %x, align 8, !dbg !7273
  br label %for.inc, !dbg !7274

for.inc:                                          ; preds = %for.body
  %24 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7275
  %outer12 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 0, !dbg !7276
  %25 = load %struct.nesting_info*, %struct.nesting_info** %outer12, align 8, !dbg !7276
  store %struct.nesting_info* %25, %struct.nesting_info** %i, align 8, !dbg !7277
  br label %for.cond, !dbg !7278, !llvm.loop !7279

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %26 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7281
  ret %union.tree_node* %26, !dbg !7282
}

; Function Attrs: noinline nounwind uwtable
define internal void @finalize_nesting_tree_1(%struct.nesting_info* %root) #0 !dbg !7283 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %stmt_list = alloca %struct.gimple_seq_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %context = alloca %union.tree_node*, align 8
  %sf = alloca %struct.function*, align 8
  %save_warn_padded = alloca i32, align 4
  %adjust = alloca %union.tree_node**, align 8
  %p = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %y = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %x48 = alloca %union.tree_node*, align 8
  %i = alloca %struct.nesting_info*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %arg2 = alloca %union.tree_node*, align 8
  %arg3 = alloca %union.tree_node*, align 8
  %x63 = alloca %union.tree_node*, align 8
  %field64 = alloca %union.tree_node*, align 8
  %bind = alloca %union.gimple_statement_d*, align 8
  %debug_var = alloca %union.tree_node*, align 8
  %scope = alloca %union.gimple_statement_d*, align 8
  %id = alloca %struct.nesting_copy_body_data, align 8
  %type142 = alloca %union.tree_node*, align 8
  %newt = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %i145 = alloca %struct.nesting_info*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !7284, metadata !DIExpression()), !dbg !7285
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmt_list, metadata !7286, metadata !DIExpression()), !dbg !7287
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7288, metadata !DIExpression()), !dbg !7289
  call void @llvm.dbg.declare(metadata %union.tree_node** %context, metadata !7290, metadata !DIExpression()), !dbg !7291
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7292
  %context1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 6, !dbg !7293
  %1 = load %union.tree_node*, %union.tree_node** %context1, align 8, !dbg !7293
  store %union.tree_node* %1, %union.tree_node** %context, align 8, !dbg !7291
  call void @llvm.dbg.declare(metadata %struct.function** %sf, metadata !7294, metadata !DIExpression()), !dbg !7295
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !7296
  %2 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7297
  %frame_type = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %2, i32 0, i32 9, !dbg !7299
  %3 = load %union.tree_node*, %union.tree_node** %frame_type, align 8, !dbg !7299
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !7297
  br i1 %tobool, label %if.then, label %if.end, !dbg !7300

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %save_warn_padded, metadata !7301, metadata !DIExpression()), !dbg !7303
  %4 = load i32, i32* @warn_padded, align 4, !dbg !7304
  store i32 %4, i32* %save_warn_padded, align 4, !dbg !7303
  call void @llvm.dbg.declare(metadata %union.tree_node*** %adjust, metadata !7305, metadata !DIExpression()), !dbg !7306
  store i32 0, i32* @warn_padded, align 4, !dbg !7307
  %5 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7308
  %frame_type2 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %5, i32 0, i32 9, !dbg !7309
  %6 = load %union.tree_node*, %union.tree_node** %frame_type2, align 8, !dbg !7309
  call void @layout_type(%union.tree_node* %6), !dbg !7310
  %7 = load i32, i32* %save_warn_padded, align 4, !dbg !7311
  store i32 %7, i32* @warn_padded, align 4, !dbg !7312
  %8 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7313
  %frame_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %8, i32 0, i32 10, !dbg !7314
  %9 = load %union.tree_node*, %union.tree_node** %frame_decl, align 8, !dbg !7314
  call void @layout_decl(%union.tree_node* %9, i32 0), !dbg !7315
  %10 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7316
  %new_local_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %10, i32 0, i32 7, !dbg !7318
  store %union.tree_node** %new_local_var_chain, %union.tree_node*** %adjust, align 8, !dbg !7319
  br label %for.cond, !dbg !7320

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %adjust, align 8, !dbg !7321
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !7323
  %13 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7324
  %frame_decl3 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %13, i32 0, i32 10, !dbg !7325
  %14 = load %union.tree_node*, %union.tree_node** %frame_decl3, align 8, !dbg !7325
  %cmp = icmp ne %union.tree_node* %12, %14, !dbg !7326
  br i1 %cmp, label %for.body, label %for.end, !dbg !7327

for.body:                                         ; preds = %for.cond
  %15 = load %union.tree_node**, %union.tree_node*** %adjust, align 8, !dbg !7328
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !7328
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7328
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7328
  %17 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7328
  %tobool4 = icmp ne %union.tree_node* %17, null, !dbg !7328
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !7328

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 2287, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7328
  br label %cond.end, !dbg !7328

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7328
  br label %for.inc, !dbg !7328

for.inc:                                          ; preds = %cond.end
  %18 = load %union.tree_node**, %union.tree_node*** %adjust, align 8, !dbg !7329
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !7329
  %common5 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7329
  %chain6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 1, !dbg !7329
  store %union.tree_node** %chain6, %union.tree_node*** %adjust, align 8, !dbg !7330
  br label %for.cond, !dbg !7331, !llvm.loop !7332

for.end:                                          ; preds = %for.cond
  %20 = load %union.tree_node**, %union.tree_node*** %adjust, align 8, !dbg !7334
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !7334
  %common7 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7334
  %chain8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 1, !dbg !7334
  %22 = load %union.tree_node*, %union.tree_node** %chain8, align 8, !dbg !7334
  %23 = load %union.tree_node**, %union.tree_node*** %adjust, align 8, !dbg !7335
  store %union.tree_node* %22, %union.tree_node** %23, align 8, !dbg !7336
  %24 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7337
  %frame_decl9 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %24, i32 0, i32 10, !dbg !7337
  %25 = load %union.tree_node*, %union.tree_node** %frame_decl9, align 8, !dbg !7337
  %common10 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !7337
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !7337
  store %union.tree_node* null, %union.tree_node** %chain11, align 8, !dbg !7338
  %26 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7339
  %frame_decl12 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %26, i32 0, i32 10, !dbg !7340
  %27 = load %union.tree_node*, %union.tree_node** %frame_decl12, align 8, !dbg !7340
  %28 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7341
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %28), !dbg !7342
  %call13 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call), !dbg !7343
  call void @declare_vars(%union.tree_node* %27, %union.gimple_statement_d* %call13, i8 zeroext 1), !dbg !7344
  br label %if.end, !dbg !7345

if.end:                                           ; preds = %for.end, %entry
  %29 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7346
  %any_parm_remapped = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %29, i32 0, i32 14, !dbg !7348
  %30 = load i8, i8* %any_parm_remapped, align 8, !dbg !7348
  %tobool14 = icmp ne i8 %30, 0, !dbg !7346
  br i1 %tobool14, label %if.then15, label %if.end45, !dbg !7349

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !7350, metadata !DIExpression()), !dbg !7352
  %31 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7353
  %decl_non_common = bitcast %union.tree_node* %31 to %struct.tree_decl_non_common*, !dbg !7353
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !7353
  %32 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !7353
  store %union.tree_node* %32, %union.tree_node** %p, align 8, !dbg !7355
  br label %for.cond16, !dbg !7356

for.cond16:                                       ; preds = %for.inc41, %if.then15
  %33 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7357
  %tobool17 = icmp ne %union.tree_node* %33, null, !dbg !7359
  br i1 %tobool17, label %for.body18, label %for.end44, !dbg !7359

for.body18:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !7360, metadata !DIExpression()), !dbg !7362
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !7363, metadata !DIExpression()), !dbg !7364
  call void @llvm.dbg.declare(metadata %union.tree_node** %y, metadata !7365, metadata !DIExpression()), !dbg !7366
  %34 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7367
  %35 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7368
  %call19 = call %union.tree_node* @lookup_field_for_decl(%struct.nesting_info* %34, %union.tree_node* %35, i32 0), !dbg !7369
  store %union.tree_node* %call19, %union.tree_node** %field, align 8, !dbg !7370
  %36 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7371
  %tobool20 = icmp ne %union.tree_node* %36, null, !dbg !7371
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !7373

if.then21:                                        ; preds = %for.body18
  br label %for.inc41, !dbg !7374

if.end22:                                         ; preds = %for.body18
  %37 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7375
  %call23 = call zeroext i8 @use_pointer_in_frame(%union.tree_node* %37), !dbg !7377
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7377
  br i1 %tobool24, label %if.then25, label %if.else, !dbg !7378

if.then25:                                        ; preds = %if.end22
  %38 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7379
  %39 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7380
  %call26 = call %union.tree_node* @build_addr(%union.tree_node* %38, %union.tree_node* %39), !dbg !7381
  store %union.tree_node* %call26, %union.tree_node** %x, align 8, !dbg !7382
  br label %if.end27, !dbg !7383

if.else:                                          ; preds = %if.end22
  %40 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7384
  store %union.tree_node* %40, %union.tree_node** %x, align 8, !dbg !7385
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then25
  %41 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7386
  %common28 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !7386
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !7386
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7386
  %43 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7386
  %frame_decl29 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %43, i32 0, i32 10, !dbg !7386
  %44 = load %union.tree_node*, %union.tree_node** %frame_decl29, align 8, !dbg !7386
  %45 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7386
  %call30 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %42, %union.tree_node* %44, %union.tree_node* %45, %union.tree_node* null), !dbg !7386
  store %union.tree_node* %call30, %union.tree_node** %y, align 8, !dbg !7387
  %46 = load %union.tree_node*, %union.tree_node** %y, align 8, !dbg !7388
  %47 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7388
  %call31 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %46, %union.tree_node* %47), !dbg !7388
  store %union.gimple_statement_d* %call31, %union.gimple_statement_d** %stmt, align 8, !dbg !7389
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7390
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %stmt_list, %union.gimple_statement_d* %48), !dbg !7391
  %49 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7392
  %call32 = call zeroext i8 @is_gimple_reg(%union.tree_node* %49), !dbg !7394
  %tobool33 = icmp ne i8 %call32, 0, !dbg !7394
  br i1 %tobool33, label %if.end40, label %land.lhs.true, !dbg !7395

land.lhs.true:                                    ; preds = %if.end27
  %50 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7396
  %common34 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !7396
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !7396
  %51 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !7396
  %call36 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %51), !dbg !7397
  %conv = zext i8 %call36 to i32, !dbg !7397
  %tobool37 = icmp ne i32 %conv, 0, !dbg !7397
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !7398

if.then38:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7399, metadata !DIExpression()), !dbg !7401
  %52 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !7402
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %gsi, %struct.gimple_seq_d* %52), !dbg !7403
  %53 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7404
  %54 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7405
  %call39 = call %union.tree_node* @init_tmp_var(%struct.nesting_info* %53, %union.tree_node* %54, %struct.gimple_stmt_iterator* %gsi), !dbg !7406
  store %union.tree_node* %call39, %union.tree_node** %x, align 8, !dbg !7407
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7408
  %56 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7409
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %55, %union.tree_node* %56), !dbg !7410
  br label %if.end40, !dbg !7411

if.end40:                                         ; preds = %if.then38, %land.lhs.true, %if.end27
  br label %for.inc41, !dbg !7412

for.inc41:                                        ; preds = %if.end40, %if.then21
  %57 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !7413
  %common42 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !7413
  %chain43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 1, !dbg !7413
  %58 = load %union.tree_node*, %union.tree_node** %chain43, align 8, !dbg !7413
  store %union.tree_node* %58, %union.tree_node** %p, align 8, !dbg !7414
  br label %for.cond16, !dbg !7415, !llvm.loop !7416

for.end44:                                        ; preds = %for.cond16
  br label %if.end45, !dbg !7418

if.end45:                                         ; preds = %for.end44, %if.end
  %59 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7419
  %chain_field = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %59, i32 0, i32 11, !dbg !7421
  %60 = load %union.tree_node*, %union.tree_node** %chain_field, align 8, !dbg !7421
  %tobool46 = icmp ne %union.tree_node* %60, null, !dbg !7419
  br i1 %tobool46, label %if.then47, label %if.end57, !dbg !7422

if.then47:                                        ; preds = %if.end45
  call void @llvm.dbg.declare(metadata %union.tree_node** %x48, metadata !7423, metadata !DIExpression()), !dbg !7425
  %61 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7426
  %chain_field49 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %61, i32 0, i32 11, !dbg !7426
  %62 = load %union.tree_node*, %union.tree_node** %chain_field49, align 8, !dbg !7426
  %common50 = bitcast %union.tree_node* %62 to %struct.tree_common*, !dbg !7426
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !7426
  %63 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !7426
  %64 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7426
  %frame_decl52 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %64, i32 0, i32 10, !dbg !7426
  %65 = load %union.tree_node*, %union.tree_node** %frame_decl52, align 8, !dbg !7426
  %66 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7426
  %chain_field53 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %66, i32 0, i32 11, !dbg !7426
  %67 = load %union.tree_node*, %union.tree_node** %chain_field53, align 8, !dbg !7426
  %call54 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %63, %union.tree_node* %65, %union.tree_node* %67, %union.tree_node* null), !dbg !7426
  store %union.tree_node* %call54, %union.tree_node** %x48, align 8, !dbg !7425
  %68 = load %union.tree_node*, %union.tree_node** %x48, align 8, !dbg !7427
  %69 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7427
  %call55 = call %union.tree_node* @get_chain_decl(%struct.nesting_info* %69), !dbg !7427
  %call56 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %68, %union.tree_node* %call55), !dbg !7427
  store %union.gimple_statement_d* %call56, %union.gimple_statement_d** %stmt, align 8, !dbg !7428
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7429
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %stmt_list, %union.gimple_statement_d* %70), !dbg !7430
  br label %if.end57, !dbg !7431

if.end57:                                         ; preds = %if.then47, %if.end45
  %71 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7432
  %any_tramp_created = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %71, i32 0, i32 15, !dbg !7434
  %72 = load i8, i8* %any_tramp_created, align 1, !dbg !7434
  %tobool58 = icmp ne i8 %72, 0, !dbg !7432
  br i1 %tobool58, label %if.then59, label %if.end88, !dbg !7435

if.then59:                                        ; preds = %if.end57
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !7436, metadata !DIExpression()), !dbg !7438
  %73 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7439
  %inner = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %73, i32 0, i32 1, !dbg !7441
  %74 = load %struct.nesting_info*, %struct.nesting_info** %inner, align 8, !dbg !7441
  store %struct.nesting_info* %74, %struct.nesting_info** %i, align 8, !dbg !7442
  br label %for.cond60, !dbg !7443

for.cond60:                                       ; preds = %for.inc86, %if.then59
  %75 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7444
  %tobool61 = icmp ne %struct.nesting_info* %75, null, !dbg !7446
  br i1 %tobool61, label %for.body62, label %for.end87, !dbg !7446

for.body62:                                       ; preds = %for.cond60
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !7447, metadata !DIExpression()), !dbg !7449
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg2, metadata !7450, metadata !DIExpression()), !dbg !7451
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg3, metadata !7452, metadata !DIExpression()), !dbg !7453
  call void @llvm.dbg.declare(metadata %union.tree_node** %x63, metadata !7454, metadata !DIExpression()), !dbg !7455
  call void @llvm.dbg.declare(metadata %union.tree_node** %field64, metadata !7456, metadata !DIExpression()), !dbg !7457
  %76 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7458
  %77 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7459
  %context65 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %77, i32 0, i32 6, !dbg !7460
  %78 = load %union.tree_node*, %union.tree_node** %context65, align 8, !dbg !7460
  %call66 = call %union.tree_node* @lookup_tramp_for_decl(%struct.nesting_info* %76, %union.tree_node* %78, i32 0), !dbg !7461
  store %union.tree_node* %call66, %union.tree_node** %field64, align 8, !dbg !7462
  %79 = load %union.tree_node*, %union.tree_node** %field64, align 8, !dbg !7463
  %tobool67 = icmp ne %union.tree_node* %79, null, !dbg !7463
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !7465

if.then68:                                        ; preds = %for.body62
  br label %for.inc86, !dbg !7466

if.end69:                                         ; preds = %for.body62
  %80 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7467
  %context70 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %80, i32 0, i32 6, !dbg !7467
  %81 = load %union.tree_node*, %union.tree_node** %context70, align 8, !dbg !7467
  %function_decl = bitcast %union.tree_node* %81 to %struct.tree_function_decl*, !dbg !7467
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7467
  %bf.load = load i32, i32* %regdecl_flag, align 8, !dbg !7467
  %bf.lshr = lshr i32 %bf.load, 22, !dbg !7467
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7467
  %tobool71 = icmp ne i32 %bf.clear, 0, !dbg !7467
  br i1 %tobool71, label %cond.false73, label %cond.true72, !dbg !7467

cond.true72:                                      ; preds = %if.end69
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 2352, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7467
  br label %cond.end74, !dbg !7467

cond.false73:                                     ; preds = %if.end69
  br label %cond.end74, !dbg !7467

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i32 [ 0, %cond.true72 ], [ 0, %cond.false73 ], !dbg !7467
  %82 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7468
  %frame_decl76 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %82, i32 0, i32 10, !dbg !7469
  %83 = load %union.tree_node*, %union.tree_node** %frame_decl76, align 8, !dbg !7469
  %84 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7470
  %call77 = call %union.tree_node* @build_addr(%union.tree_node* %83, %union.tree_node* %84), !dbg !7471
  store %union.tree_node* %call77, %union.tree_node** %arg3, align 8, !dbg !7472
  %85 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7473
  %context78 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %85, i32 0, i32 6, !dbg !7474
  %86 = load %union.tree_node*, %union.tree_node** %context78, align 8, !dbg !7474
  %87 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7475
  %call79 = call %union.tree_node* @build_addr(%union.tree_node* %86, %union.tree_node* %87), !dbg !7476
  store %union.tree_node* %call79, %union.tree_node** %arg2, align 8, !dbg !7477
  %88 = load %union.tree_node*, %union.tree_node** %field64, align 8, !dbg !7478
  %common80 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !7478
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !7478
  %89 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !7478
  %90 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7478
  %frame_decl82 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %90, i32 0, i32 10, !dbg !7478
  %91 = load %union.tree_node*, %union.tree_node** %frame_decl82, align 8, !dbg !7478
  %92 = load %union.tree_node*, %union.tree_node** %field64, align 8, !dbg !7478
  %call83 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %89, %union.tree_node* %91, %union.tree_node* %92, %union.tree_node* null), !dbg !7478
  store %union.tree_node* %call83, %union.tree_node** %x63, align 8, !dbg !7479
  %93 = load %union.tree_node*, %union.tree_node** %x63, align 8, !dbg !7480
  %94 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7481
  %call84 = call %union.tree_node* @build_addr(%union.tree_node* %93, %union.tree_node* %94), !dbg !7482
  store %union.tree_node* %call84, %union.tree_node** %arg1, align 8, !dbg !7483
  %95 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 520), align 16, !dbg !7484
  store %union.tree_node* %95, %union.tree_node** %x63, align 8, !dbg !7485
  %96 = load %union.tree_node*, %union.tree_node** %x63, align 8, !dbg !7486
  %97 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !7487
  %98 = load %union.tree_node*, %union.tree_node** %arg2, align 8, !dbg !7488
  %99 = load %union.tree_node*, %union.tree_node** %arg3, align 8, !dbg !7489
  %call85 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %96, i32 3, %union.tree_node* %97, %union.tree_node* %98, %union.tree_node* %99), !dbg !7490
  store %union.gimple_statement_d* %call85, %union.gimple_statement_d** %stmt, align 8, !dbg !7491
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7492
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %stmt_list, %union.gimple_statement_d* %100), !dbg !7493
  br label %for.inc86, !dbg !7494

for.inc86:                                        ; preds = %cond.end74, %if.then68
  %101 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7495
  %next = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %101, i32 0, i32 2, !dbg !7496
  %102 = load %struct.nesting_info*, %struct.nesting_info** %next, align 8, !dbg !7496
  store %struct.nesting_info* %102, %struct.nesting_info** %i, align 8, !dbg !7497
  br label %for.cond60, !dbg !7498, !llvm.loop !7499

for.end87:                                        ; preds = %for.cond60
  br label %if.end88, !dbg !7501

if.end88:                                         ; preds = %for.end87, %if.end57
  %103 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !7502
  %tobool89 = icmp ne %struct.gimple_seq_d* %103, null, !dbg !7502
  br i1 %tobool89, label %if.then90, label %if.end94, !dbg !7504

if.then90:                                        ; preds = %if.end88
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %bind, metadata !7505, metadata !DIExpression()), !dbg !7507
  %104 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !7508
  %105 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7509
  %decl_minimal = bitcast %union.tree_node* %105 to %struct.tree_decl_minimal*, !dbg !7509
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7509
  %106 = load i32, i32* %locus, align 8, !dbg !7509
  call void @annotate_all_with_location(%struct.gimple_seq_d* %104, i32 %106), !dbg !7510
  %107 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7511
  %call91 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %107), !dbg !7512
  %call92 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call91), !dbg !7513
  store %union.gimple_statement_d* %call92, %union.gimple_statement_d** %bind, align 8, !dbg !7514
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bind, align 8, !dbg !7515
  %call93 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %108), !dbg !7516
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %stmt_list, %struct.gimple_seq_d* %call93), !dbg !7517
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %bind, align 8, !dbg !7518
  %110 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmt_list, align 8, !dbg !7519
  call void @gimple_bind_set_body(%union.gimple_statement_d* %109, %struct.gimple_seq_d* %110), !dbg !7520
  br label %if.end94, !dbg !7521

if.end94:                                         ; preds = %if.then90, %if.end88
  %111 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7522
  %context95 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %111, i32 0, i32 6, !dbg !7522
  %112 = load %union.tree_node*, %union.tree_node** %context95, align 8, !dbg !7522
  %function_decl96 = bitcast %union.tree_node* %112 to %struct.tree_function_decl*, !dbg !7522
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl96, i32 0, i32 1, !dbg !7522
  %113 = load %struct.function*, %struct.function** %f, align 8, !dbg !7522
  store %struct.function* %113, %struct.function** %sf, align 8, !dbg !7523
  %114 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7524
  %chain_decl = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %114, i32 0, i32 12, !dbg !7525
  %115 = load %union.tree_node*, %union.tree_node** %chain_decl, align 8, !dbg !7525
  %116 = load %struct.function*, %struct.function** %sf, align 8, !dbg !7526
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %116, i32 0, i32 7, !dbg !7527
  store %union.tree_node* %115, %union.tree_node** %static_chain_decl, align 8, !dbg !7528
  %117 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7529
  %nl_goto_field = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %117, i32 0, i32 13, !dbg !7531
  %118 = load %union.tree_node*, %union.tree_node** %nl_goto_field, align 8, !dbg !7531
  %tobool97 = icmp ne %union.tree_node* %118, null, !dbg !7529
  br i1 %tobool97, label %if.then98, label %if.end103, !dbg !7532

if.then98:                                        ; preds = %if.end94
  %119 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7533
  %120 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7535
  %121 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7536
  %nl_goto_field99 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %121, i32 0, i32 13, !dbg !7537
  %122 = load %union.tree_node*, %union.tree_node** %nl_goto_field99, align 8, !dbg !7537
  %call100 = call %union.tree_node* @get_frame_field(%struct.nesting_info* %119, %union.tree_node* %120, %union.tree_node* %122, %struct.gimple_stmt_iterator* null), !dbg !7538
  %123 = load %struct.function*, %struct.function** %sf, align 8, !dbg !7539
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %123, i32 0, i32 8, !dbg !7540
  store %union.tree_node* %call100, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !7541
  %124 = load %struct.function*, %struct.function** %sf, align 8, !dbg !7542
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %124, i32 0, i32 20, !dbg !7543
  %bf.load101 = load i32, i32* %has_nonlocal_label, align 8, !dbg !7544
  %bf.clear102 = and i32 %bf.load101, -1048577, !dbg !7544
  %bf.set = or i32 %bf.clear102, 1048576, !dbg !7544
  store i32 %bf.set, i32* %has_nonlocal_label, align 8, !dbg !7544
  br label %if.end103, !dbg !7545

if.end103:                                        ; preds = %if.then98, %if.end94
  %125 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7546
  %new_local_var_chain104 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %125, i32 0, i32 7, !dbg !7548
  %126 = load %union.tree_node*, %union.tree_node** %new_local_var_chain104, align 8, !dbg !7548
  %tobool105 = icmp ne %union.tree_node* %126, null, !dbg !7546
  br i1 %tobool105, label %if.then106, label %if.end111, !dbg !7549

if.then106:                                       ; preds = %if.end103
  %127 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7550
  %new_local_var_chain107 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %127, i32 0, i32 7, !dbg !7551
  %128 = load %union.tree_node*, %union.tree_node** %new_local_var_chain107, align 8, !dbg !7551
  %129 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7552
  %context108 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %129, i32 0, i32 6, !dbg !7553
  %130 = load %union.tree_node*, %union.tree_node** %context108, align 8, !dbg !7553
  %call109 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %130), !dbg !7554
  %call110 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call109), !dbg !7555
  call void @declare_vars(%union.tree_node* %128, %union.gimple_statement_d* %call110, i8 zeroext 0), !dbg !7556
  br label %if.end111, !dbg !7556

if.end111:                                        ; preds = %if.then106, %if.end103
  %131 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7557
  %debug_var_chain = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %131, i32 0, i32 8, !dbg !7559
  %132 = load %union.tree_node*, %union.tree_node** %debug_var_chain, align 8, !dbg !7559
  %tobool112 = icmp ne %union.tree_node* %132, null, !dbg !7557
  br i1 %tobool112, label %if.then113, label %if.end250, !dbg !7560

if.then113:                                       ; preds = %if.end111
  call void @llvm.dbg.declare(metadata %union.tree_node** %debug_var, metadata !7561, metadata !DIExpression()), !dbg !7563
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %scope, metadata !7564, metadata !DIExpression()), !dbg !7565
  %133 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7566
  %context114 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %133, i32 0, i32 6, !dbg !7566
  %134 = load %union.tree_node*, %union.tree_node** %context114, align 8, !dbg !7566
  %decl_common = bitcast %union.tree_node* %134 to %struct.tree_decl_common*, !dbg !7566
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7566
  %135 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7566
  %136 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7567
  call void @remap_vla_decls(%union.tree_node* %135, %struct.nesting_info* %136), !dbg !7568
  %137 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7569
  %debug_var_chain115 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %137, i32 0, i32 8, !dbg !7571
  %138 = load %union.tree_node*, %union.tree_node** %debug_var_chain115, align 8, !dbg !7571
  store %union.tree_node* %138, %union.tree_node** %debug_var, align 8, !dbg !7572
  br label %for.cond116, !dbg !7573

for.cond116:                                      ; preds = %for.inc125, %if.then113
  %139 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7574
  %tobool117 = icmp ne %union.tree_node* %139, null, !dbg !7576
  br i1 %tobool117, label %for.body118, label %for.end128, !dbg !7576

for.body118:                                      ; preds = %for.cond116
  %140 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7577
  %common119 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !7577
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !7577
  %141 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !7577
  %call121 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %141, %union.tree_node* null), !dbg !7579
  %tobool122 = icmp ne i8 %call121, 0, !dbg !7579
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !7580

if.then123:                                       ; preds = %for.body118
  br label %for.end128, !dbg !7581

if.end124:                                        ; preds = %for.body118
  br label %for.inc125, !dbg !7582

for.inc125:                                       ; preds = %if.end124
  %142 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7583
  %common126 = bitcast %union.tree_node* %142 to %struct.tree_common*, !dbg !7583
  %chain127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 1, !dbg !7583
  %143 = load %union.tree_node*, %union.tree_node** %chain127, align 8, !dbg !7583
  store %union.tree_node* %143, %union.tree_node** %debug_var, align 8, !dbg !7584
  br label %for.cond116, !dbg !7585, !llvm.loop !7586

for.end128:                                       ; preds = %if.then123, %for.cond116
  %144 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7588
  %tobool129 = icmp ne %union.tree_node* %144, null, !dbg !7588
  br i1 %tobool129, label %if.then130, label %if.end230, !dbg !7590

if.then130:                                       ; preds = %for.end128
  call void @llvm.dbg.declare(metadata %struct.nesting_copy_body_data* %id, metadata !7591, metadata !DIExpression()), !dbg !7593
  %145 = bitcast %struct.nesting_copy_body_data* %id to i8*, !dbg !7594
  call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 160, i1 false), !dbg !7594
  %cb = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7595
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb, i32 0, i32 7, !dbg !7596
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @nesting_copy_decl, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7597
  %call131 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7598
  %cb132 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7599
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb132, i32 0, i32 6, !dbg !7600
  store %struct.pointer_map_t* %call131, %struct.pointer_map_t** %decl_map, align 8, !dbg !7601
  %146 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7602
  %root133 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 1, !dbg !7603
  store %struct.nesting_info* %146, %struct.nesting_info** %root133, align 8, !dbg !7604
  br label %for.cond134, !dbg !7605

for.cond134:                                      ; preds = %for.inc224, %if.then130
  %147 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7606
  %tobool135 = icmp ne %union.tree_node* %147, null, !dbg !7609
  br i1 %tobool135, label %for.body136, label %for.end227, !dbg !7609

for.body136:                                      ; preds = %for.cond134
  %148 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7610
  %common137 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !7610
  %type138 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common137, i32 0, i32 2, !dbg !7610
  %149 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !7610
  %call139 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %149, %union.tree_node* null), !dbg !7612
  %tobool140 = icmp ne i8 %call139, 0, !dbg !7612
  br i1 %tobool140, label %if.then141, label %if.end223, !dbg !7613

if.then141:                                       ; preds = %for.body136
  call void @llvm.dbg.declare(metadata %union.tree_node** %type142, metadata !7614, metadata !DIExpression()), !dbg !7616
  %150 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7617
  %common143 = bitcast %union.tree_node* %150 to %struct.tree_common*, !dbg !7617
  %type144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 2, !dbg !7617
  %151 = load %union.tree_node*, %union.tree_node** %type144, align 8, !dbg !7617
  store %union.tree_node* %151, %union.tree_node** %type142, align 8, !dbg !7616
  call void @llvm.dbg.declare(metadata %union.tree_node** %newt, metadata !7618, metadata !DIExpression()), !dbg !7619
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7620, metadata !DIExpression()), !dbg !7621
  %152 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !7622
  store %union.tree_node* %152, %union.tree_node** %t, align 8, !dbg !7621
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i145, metadata !7623, metadata !DIExpression()), !dbg !7624
  %153 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7625
  store %struct.nesting_info* %153, %struct.nesting_info** %i145, align 8, !dbg !7627
  br label %for.cond146, !dbg !7628

for.cond146:                                      ; preds = %for.inc154, %if.then141
  %154 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7629
  %tobool147 = icmp ne %struct.nesting_info* %154, null, !dbg !7631
  br i1 %tobool147, label %for.body148, label %for.end155, !dbg !7631

for.body148:                                      ; preds = %for.cond146
  %155 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !7632
  %156 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7634
  %context149 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %156, i32 0, i32 6, !dbg !7635
  %157 = load %union.tree_node*, %union.tree_node** %context149, align 8, !dbg !7635
  %call150 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %155, %union.tree_node* %157), !dbg !7636
  %tobool151 = icmp ne i8 %call150, 0, !dbg !7636
  br i1 %tobool151, label %if.then152, label %if.end153, !dbg !7637

if.then152:                                       ; preds = %for.body148
  br label %for.end155, !dbg !7638

if.end153:                                        ; preds = %for.body148
  br label %for.inc154, !dbg !7639

for.inc154:                                       ; preds = %if.end153
  %158 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7640
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %158, i32 0, i32 0, !dbg !7641
  %159 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !7641
  store %struct.nesting_info* %159, %struct.nesting_info** %i145, align 8, !dbg !7642
  br label %for.cond146, !dbg !7643, !llvm.loop !7644

for.end155:                                       ; preds = %if.then152, %for.cond146
  %160 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7646
  %cmp156 = icmp eq %struct.nesting_info* %160, null, !dbg !7648
  br i1 %cmp156, label %if.then158, label %if.end159, !dbg !7649

if.then158:                                       ; preds = %for.end155
  br label %for.inc224, !dbg !7650

if.end159:                                        ; preds = %for.end155
  %161 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7651
  %context160 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %161, i32 0, i32 6, !dbg !7652
  %162 = load %union.tree_node*, %union.tree_node** %context160, align 8, !dbg !7652
  %cb161 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7653
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb161, i32 0, i32 0, !dbg !7654
  store %union.tree_node* %162, %union.tree_node** %src_fn, align 8, !dbg !7655
  %163 = load %struct.nesting_info*, %struct.nesting_info** %i145, align 8, !dbg !7656
  %context162 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %163, i32 0, i32 6, !dbg !7657
  %164 = load %union.tree_node*, %union.tree_node** %context162, align 8, !dbg !7657
  %cb163 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7658
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb163, i32 0, i32 1, !dbg !7659
  store %union.tree_node* %164, %union.tree_node** %dst_fn, align 8, !dbg !7660
  %165 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7661
  %context164 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %165, i32 0, i32 6, !dbg !7661
  %166 = load %union.tree_node*, %union.tree_node** %context164, align 8, !dbg !7661
  %function_decl165 = bitcast %union.tree_node* %166 to %struct.tree_function_decl*, !dbg !7661
  %f166 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl165, i32 0, i32 1, !dbg !7661
  %167 = load %struct.function*, %struct.function** %f166, align 8, !dbg !7661
  %cb167 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7662
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb167, i32 0, i32 4, !dbg !7663
  store %struct.function* %167, %struct.function** %src_cfun, align 8, !dbg !7664
  %168 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !7665
  %cb168 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7666
  %call169 = call %union.tree_node* @remap_type(%union.tree_node* %168, %struct.copy_body_data* %cb168), !dbg !7667
  store %union.tree_node* %call169, %union.tree_node** %newt, align 8, !dbg !7668
  %169 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7669
  %common170 = bitcast %union.tree_node* %169 to %struct.tree_common*, !dbg !7669
  %type171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common170, i32 0, i32 2, !dbg !7669
  store %union.tree_node* %call169, %union.tree_node** %type171, align 8, !dbg !7670
  br label %while.cond, !dbg !7671

while.cond:                                       ; preds = %while.body, %if.end159
  %170 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7672
  %base = bitcast %union.tree_node* %170 to %struct.tree_base*, !dbg !7672
  %171 = bitcast %struct.tree_base* %base to i64*, !dbg !7672
  %bf.load172 = load i64, i64* %171, align 8, !dbg !7672
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !7672
  %bf.cast = trunc i64 %bf.clear173 to i32, !dbg !7672
  %cmp174 = icmp eq i32 %bf.cast, 10, !dbg !7672
  br i1 %cmp174, label %land.rhs, label %lor.lhs.false, !dbg !7672

lor.lhs.false:                                    ; preds = %while.cond
  %172 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7672
  %base176 = bitcast %union.tree_node* %172 to %struct.tree_base*, !dbg !7672
  %173 = bitcast %struct.tree_base* %base176 to i64*, !dbg !7672
  %bf.load177 = load i64, i64* %173, align 8, !dbg !7672
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !7672
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !7672
  %cmp180 = icmp eq i32 %bf.cast179, 12, !dbg !7672
  br i1 %cmp180, label %land.rhs, label %land.end, !dbg !7673

land.rhs:                                         ; preds = %lor.lhs.false, %while.cond
  %174 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7674
  %type182 = bitcast %union.tree_node* %174 to %struct.tree_type*, !dbg !7674
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type182, i32 0, i32 12, !dbg !7674
  %175 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7674
  %tobool183 = icmp ne %union.tree_node* %175, null, !dbg !7675
  %lnot = xor i1 %tobool183, true, !dbg !7675
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %176 = phi i1 [ false, %lor.lhs.false ], [ %lnot, %land.rhs ], !dbg !7676
  br i1 %176, label %while.body, label %while.end, !dbg !7671

while.body:                                       ; preds = %land.end
  %177 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7677
  %common184 = bitcast %union.tree_node* %177 to %struct.tree_common*, !dbg !7677
  %type185 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common184, i32 0, i32 2, !dbg !7677
  %178 = load %union.tree_node*, %union.tree_node** %type185, align 8, !dbg !7677
  store %union.tree_node* %178, %union.tree_node** %newt, align 8, !dbg !7679
  %179 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7680
  %common186 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !7680
  %type187 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common186, i32 0, i32 2, !dbg !7680
  %180 = load %union.tree_node*, %union.tree_node** %type187, align 8, !dbg !7680
  store %union.tree_node* %180, %union.tree_node** %t, align 8, !dbg !7681
  br label %while.cond, !dbg !7671, !llvm.loop !7682

while.end:                                        ; preds = %land.end
  %181 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7684
  %type188 = bitcast %union.tree_node* %181 to %struct.tree_type*, !dbg !7684
  %name189 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type188, i32 0, i32 12, !dbg !7684
  %182 = load %union.tree_node*, %union.tree_node** %name189, align 8, !dbg !7684
  %tobool190 = icmp ne %union.tree_node* %182, null, !dbg !7684
  br i1 %tobool190, label %land.lhs.true191, label %if.end222, !dbg !7686

land.lhs.true191:                                 ; preds = %while.end
  %183 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7687
  %type192 = bitcast %union.tree_node* %183 to %struct.tree_type*, !dbg !7687
  %name193 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type192, i32 0, i32 12, !dbg !7687
  %184 = load %union.tree_node*, %union.tree_node** %name193, align 8, !dbg !7687
  %base194 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !7687
  %185 = bitcast %struct.tree_base* %base194 to i64*, !dbg !7687
  %bf.load195 = load i64, i64* %185, align 8, !dbg !7687
  %bf.clear196 = and i64 %bf.load195, 65535, !dbg !7687
  %bf.cast197 = trunc i64 %bf.clear196 to i32, !dbg !7687
  %cmp198 = icmp eq i32 %bf.cast197, 35, !dbg !7688
  br i1 %cmp198, label %land.lhs.true200, label %if.end222, !dbg !7689

land.lhs.true200:                                 ; preds = %land.lhs.true191
  %186 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7690
  %type201 = bitcast %union.tree_node* %186 to %struct.tree_type*, !dbg !7690
  %name202 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type201, i32 0, i32 12, !dbg !7690
  %187 = load %union.tree_node*, %union.tree_node** %name202, align 8, !dbg !7690
  %decl_non_common203 = bitcast %union.tree_node* %187 to %struct.tree_decl_non_common*, !dbg !7690
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common203, i32 0, i32 3, !dbg !7690
  %188 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7690
  %tobool204 = icmp ne %union.tree_node* %188, null, !dbg !7690
  br i1 %tobool204, label %land.lhs.true205, label %if.end222, !dbg !7691

land.lhs.true205:                                 ; preds = %land.lhs.true200
  %189 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7692
  %190 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7693
  %cmp206 = icmp ne %union.tree_node* %189, %190, !dbg !7694
  br i1 %cmp206, label %land.lhs.true208, label %if.end222, !dbg !7695

land.lhs.true208:                                 ; preds = %land.lhs.true205
  %191 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7696
  %type209 = bitcast %union.tree_node* %191 to %struct.tree_type*, !dbg !7696
  %name210 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type209, i32 0, i32 12, !dbg !7696
  %192 = load %union.tree_node*, %union.tree_node** %name210, align 8, !dbg !7696
  %193 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7697
  %type211 = bitcast %union.tree_node* %193 to %struct.tree_type*, !dbg !7697
  %name212 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type211, i32 0, i32 12, !dbg !7697
  %194 = load %union.tree_node*, %union.tree_node** %name212, align 8, !dbg !7697
  %cmp213 = icmp eq %union.tree_node* %192, %194, !dbg !7698
  br i1 %cmp213, label %if.then215, label %if.end222, !dbg !7699

if.then215:                                       ; preds = %land.lhs.true208
  %195 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7700
  %type216 = bitcast %union.tree_node* %195 to %struct.tree_type*, !dbg !7700
  %name217 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type216, i32 0, i32 12, !dbg !7700
  %196 = load %union.tree_node*, %union.tree_node** %name217, align 8, !dbg !7700
  %cb218 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7701
  %call219 = call %union.tree_node* @remap_decl(%union.tree_node* %196, %struct.copy_body_data* %cb218), !dbg !7702
  %197 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7703
  %type220 = bitcast %union.tree_node* %197 to %struct.tree_type*, !dbg !7703
  %name221 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type220, i32 0, i32 12, !dbg !7703
  store %union.tree_node* %call219, %union.tree_node** %name221, align 8, !dbg !7704
  br label %if.end222, !dbg !7703

if.end222:                                        ; preds = %if.then215, %land.lhs.true208, %land.lhs.true205, %land.lhs.true200, %land.lhs.true191, %while.end
  br label %if.end223, !dbg !7705

if.end223:                                        ; preds = %if.end222, %for.body136
  br label %for.inc224, !dbg !7706

for.inc224:                                       ; preds = %if.end223, %if.then158
  %198 = load %union.tree_node*, %union.tree_node** %debug_var, align 8, !dbg !7707
  %common225 = bitcast %union.tree_node* %198 to %struct.tree_common*, !dbg !7707
  %chain226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 1, !dbg !7707
  %199 = load %union.tree_node*, %union.tree_node** %chain226, align 8, !dbg !7707
  store %union.tree_node* %199, %union.tree_node** %debug_var, align 8, !dbg !7708
  br label %for.cond134, !dbg !7709, !llvm.loop !7710

for.end227:                                       ; preds = %for.cond134
  %cb228 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7712
  %decl_map229 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb228, i32 0, i32 6, !dbg !7713
  %200 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map229, align 8, !dbg !7713
  call void @pointer_map_destroy(%struct.pointer_map_t* %200), !dbg !7714
  br label %if.end230, !dbg !7715

if.end230:                                        ; preds = %for.end227, %for.end128
  %201 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7716
  %context231 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %201, i32 0, i32 6, !dbg !7717
  %202 = load %union.tree_node*, %union.tree_node** %context231, align 8, !dbg !7717
  %call232 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %202), !dbg !7718
  %call233 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call232), !dbg !7719
  store %union.gimple_statement_d* %call233, %union.gimple_statement_d** %scope, align 8, !dbg !7720
  %203 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope, align 8, !dbg !7721
  %call234 = call %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %203), !dbg !7723
  %tobool235 = icmp ne %union.tree_node* %call234, null, !dbg !7723
  br i1 %tobool235, label %if.then236, label %if.else238, !dbg !7724

if.then236:                                       ; preds = %if.end230
  %204 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7725
  %debug_var_chain237 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %204, i32 0, i32 8, !dbg !7726
  %205 = load %union.tree_node*, %union.tree_node** %debug_var_chain237, align 8, !dbg !7726
  %206 = load %union.gimple_statement_d*, %union.gimple_statement_d** %scope, align 8, !dbg !7727
  call void @declare_vars(%union.tree_node* %205, %union.gimple_statement_d* %206, i8 zeroext 1), !dbg !7728
  br label %if.end249, !dbg !7728

if.else238:                                       ; preds = %if.end230
  %207 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7729
  %context239 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %207, i32 0, i32 6, !dbg !7729
  %208 = load %union.tree_node*, %union.tree_node** %context239, align 8, !dbg !7729
  %decl_common240 = bitcast %union.tree_node* %208 to %struct.tree_decl_common*, !dbg !7729
  %initial241 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common240, i32 0, i32 5, !dbg !7729
  %209 = load %union.tree_node*, %union.tree_node** %initial241, align 8, !dbg !7729
  %block = bitcast %union.tree_node* %209 to %struct.tree_block*, !dbg !7729
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 3, !dbg !7729
  %210 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !7729
  %211 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7730
  %debug_var_chain242 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %211, i32 0, i32 8, !dbg !7731
  %212 = load %union.tree_node*, %union.tree_node** %debug_var_chain242, align 8, !dbg !7731
  %call243 = call %union.tree_node* @chainon(%union.tree_node* %210, %union.tree_node* %212), !dbg !7732
  %213 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7733
  %context244 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %213, i32 0, i32 6, !dbg !7733
  %214 = load %union.tree_node*, %union.tree_node** %context244, align 8, !dbg !7733
  %decl_common245 = bitcast %union.tree_node* %214 to %struct.tree_decl_common*, !dbg !7733
  %initial246 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common245, i32 0, i32 5, !dbg !7733
  %215 = load %union.tree_node*, %union.tree_node** %initial246, align 8, !dbg !7733
  %block247 = bitcast %union.tree_node* %215 to %struct.tree_block*, !dbg !7733
  %vars248 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block247, i32 0, i32 3, !dbg !7733
  store %union.tree_node* %call243, %union.tree_node** %vars248, align 8, !dbg !7734
  br label %if.end249

if.end249:                                        ; preds = %if.else238, %if.then236
  br label %if.end250, !dbg !7735

if.end250:                                        ; preds = %if.end249, %if.end111
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7736
  %tobool251 = icmp ne %struct._IO_FILE* %216, null, !dbg !7736
  br i1 %tobool251, label %if.then252, label %if.end255, !dbg !7738

if.then252:                                       ; preds = %if.end250
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7739
  %call253 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), %struct._IO_FILE* %217), !dbg !7741
  %218 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7742
  %context254 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %218, i32 0, i32 6, !dbg !7743
  %219 = load %union.tree_node*, %union.tree_node** %context254, align 8, !dbg !7743
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7744
  %221 = load i32, i32* @dump_flags, align 4, !dbg !7745
  call void @dump_function_to_file(%union.tree_node* %219, %struct._IO_FILE* %220, i32 %221), !dbg !7746
  br label %if.end255, !dbg !7747

if.end255:                                        ; preds = %if.then252, %if.end250
  ret void, !dbg !7748
}

declare dso_local void @layout_decl(%union.tree_node*, i32) #2

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !7749 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7750, metadata !DIExpression()), !dbg !7751
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !7752, metadata !DIExpression()), !dbg !7753
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7754
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !7755
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !7756
  ret void, !dbg !7757
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) #0 !dbg !7758 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7759, metadata !DIExpression()), !dbg !7760
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7761
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !7762
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !7763
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !7763
  ret %struct.gimple_seq_d* %1, !dbg !7764
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_bind_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %seq) #0 !dbg !7765 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7768, metadata !DIExpression()), !dbg !7769
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7770
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7771
  %gimple_bind = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_bind*, !dbg !7772
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !7773
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %body, align 8, !dbg !7774
  ret void, !dbg !7775
}

; Function Attrs: noinline nounwind uwtable
define internal void @remap_vla_decls(%union.tree_node* %block, %struct.nesting_info* %root) #0 !dbg !7776 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %root.addr = alloca %struct.nesting_info*, align 8
  %var = alloca %union.tree_node*, align 8
  %subblock = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %id = alloca %struct.nesting_copy_body_data, align 8
  %i = alloca %struct.nesting_info*, align 8
  %newt = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %context = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !7779, metadata !DIExpression()), !dbg !7780
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !7781, metadata !DIExpression()), !dbg !7782
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7783, metadata !DIExpression()), !dbg !7784
  call void @llvm.dbg.declare(metadata %union.tree_node** %subblock, metadata !7785, metadata !DIExpression()), !dbg !7786
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7787, metadata !DIExpression()), !dbg !7788
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7789, metadata !DIExpression()), !dbg !7790
  call void @llvm.dbg.declare(metadata %struct.nesting_copy_body_data* %id, metadata !7791, metadata !DIExpression()), !dbg !7792
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7793
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !7793
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5, !dbg !7793
  %1 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !7793
  store %union.tree_node* %1, %union.tree_node** %subblock, align 8, !dbg !7795
  br label %for.cond, !dbg !7796

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %subblock, align 8, !dbg !7797
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7799
  br i1 %tobool, label %for.body, label %for.end, !dbg !7799

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %subblock, align 8, !dbg !7800
  %4 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7801
  call void @remap_vla_decls(%union.tree_node* %3, %struct.nesting_info* %4), !dbg !7802
  br label %for.inc, !dbg !7802

for.inc:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %subblock, align 8, !dbg !7803
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7803
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7803
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7803
  store %union.tree_node* %6, %union.tree_node** %subblock, align 8, !dbg !7804
  br label %for.cond, !dbg !7805, !llvm.loop !7806

for.end:                                          ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7808
  %block2 = bitcast %union.tree_node* %7 to %struct.tree_block*, !dbg !7808
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 3, !dbg !7808
  %8 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !7808
  store %union.tree_node* %8, %union.tree_node** %var, align 8, !dbg !7810
  br label %for.cond3, !dbg !7811

for.cond3:                                        ; preds = %for.inc25, %for.end
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7812
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !7814
  br i1 %tobool4, label %for.body5, label %for.end28, !dbg !7814

for.body5:                                        ; preds = %for.cond3
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7815
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7815
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !7815
  %bf.load = load i64, i64* %11, align 8, !dbg !7815
  %bf.clear = and i64 %bf.load, 65535, !dbg !7815
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7815
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7818
  br i1 %cmp, label %land.lhs.true, label %if.end24, !dbg !7819

land.lhs.true:                                    ; preds = %for.body5
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7820
  %common6 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !7820
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !7820
  %13 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7820
  %call = call zeroext i8 @variably_modified_type_p(%union.tree_node* %13, %union.tree_node* null), !dbg !7821
  %conv = zext i8 %call to i32, !dbg !7821
  %tobool8 = icmp ne i32 %conv, 0, !dbg !7821
  br i1 %tobool8, label %land.lhs.true9, label %if.end24, !dbg !7822

land.lhs.true9:                                   ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7823
  %decl_common = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !7823
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7823
  %15 = bitcast i40* %decl_flag_2 to i64*, !dbg !7823
  %bf.load10 = load i64, i64* %15, align 8, !dbg !7823
  %bf.lshr = lshr i64 %bf.load10, 26, !dbg !7823
  %bf.clear11 = and i64 %bf.lshr, 1, !dbg !7823
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7823
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !7823
  br i1 %tobool13, label %if.then, label %if.end24, !dbg !7824

if.then:                                          ; preds = %land.lhs.true9
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7825
  %common14 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7825
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !7825
  %17 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !7825
  store %union.tree_node* %17, %union.tree_node** %type, align 8, !dbg !7827
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7828
  %call16 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %18), !dbg !7828
  store %union.tree_node* %call16, %union.tree_node** %val, align 8, !dbg !7829
  %19 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7830
  %20 = bitcast %struct.nesting_info* %19 to i8*, !dbg !7830
  %call17 = call %union.tree_node* @walk_tree_1(%union.tree_node** %type, %union.tree_node* (%union.tree_node**, i32*, i8*)* @contains_remapped_vars, i8* %20, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7830
  %cmp18 = icmp ne %union.tree_node* %call17, null, !dbg !7832
  br i1 %cmp18, label %if.then23, label %lor.lhs.false, !dbg !7833

lor.lhs.false:                                    ; preds = %if.then
  %21 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7834
  %22 = bitcast %struct.nesting_info* %21 to i8*, !dbg !7834
  %call20 = call %union.tree_node* @walk_tree_1(%union.tree_node** %val, %union.tree_node* (%union.tree_node**, i32*, i8*)* @contains_remapped_vars, i8* %22, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7834
  %cmp21 = icmp ne %union.tree_node* %call20, null, !dbg !7835
  br i1 %cmp21, label %if.then23, label %if.end, !dbg !7836

if.then23:                                        ; preds = %lor.lhs.false, %if.then
  br label %for.end28, !dbg !7837

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end24, !dbg !7838

if.end24:                                         ; preds = %if.end, %land.lhs.true9, %land.lhs.true, %for.body5
  br label %for.inc25, !dbg !7839

for.inc25:                                        ; preds = %if.end24
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7840
  %common26 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !7840
  %chain27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 1, !dbg !7840
  %24 = load %union.tree_node*, %union.tree_node** %chain27, align 8, !dbg !7840
  store %union.tree_node* %24, %union.tree_node** %var, align 8, !dbg !7841
  br label %for.cond3, !dbg !7842, !llvm.loop !7843

for.end28:                                        ; preds = %if.then23, %for.cond3
  %25 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7845
  %cmp29 = icmp eq %union.tree_node* %25, null, !dbg !7847
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !7848

if.then31:                                        ; preds = %for.end28
  br label %return, !dbg !7849

if.end32:                                         ; preds = %for.end28
  %26 = bitcast %struct.nesting_copy_body_data* %id to i8*, !dbg !7850
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 160, i1 false), !dbg !7850
  %cb = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7851
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb, i32 0, i32 7, !dbg !7852
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @nesting_copy_decl, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !7853
  %call33 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7854
  %cb34 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7855
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb34, i32 0, i32 6, !dbg !7856
  store %struct.pointer_map_t* %call33, %struct.pointer_map_t** %decl_map, align 8, !dbg !7857
  %27 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7858
  %root35 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 1, !dbg !7859
  store %struct.nesting_info* %27, %struct.nesting_info** %root35, align 8, !dbg !7860
  br label %for.cond36, !dbg !7861

for.cond36:                                       ; preds = %for.inc158, %if.end32
  %28 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7862
  %tobool37 = icmp ne %union.tree_node* %28, null, !dbg !7865
  br i1 %tobool37, label %for.body38, label %for.end161, !dbg !7865

for.body38:                                       ; preds = %for.cond36
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7866
  %base39 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !7866
  %30 = bitcast %struct.tree_base* %base39 to i64*, !dbg !7866
  %bf.load40 = load i64, i64* %30, align 8, !dbg !7866
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !7866
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !7866
  %cmp43 = icmp eq i32 %bf.cast42, 32, !dbg !7868
  br i1 %cmp43, label %land.lhs.true45, label %if.end157, !dbg !7869

land.lhs.true45:                                  ; preds = %for.body38
  %31 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7870
  %common46 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !7870
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !7870
  %32 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !7870
  %call48 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %32, %union.tree_node* null), !dbg !7871
  %conv49 = zext i8 %call48 to i32, !dbg !7871
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !7871
  br i1 %tobool50, label %land.lhs.true51, label %if.end157, !dbg !7872

land.lhs.true51:                                  ; preds = %land.lhs.true45
  %33 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7873
  %decl_common52 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !7873
  %decl_flag_253 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common52, i32 0, i32 2, !dbg !7873
  %34 = bitcast i40* %decl_flag_253 to i64*, !dbg !7873
  %bf.load54 = load i64, i64* %34, align 8, !dbg !7873
  %bf.lshr55 = lshr i64 %bf.load54, 26, !dbg !7873
  %bf.clear56 = and i64 %bf.lshr55, 1, !dbg !7873
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !7873
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !7873
  br i1 %tobool58, label %if.then59, label %if.end157, !dbg !7874

if.then59:                                        ; preds = %land.lhs.true51
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %i, metadata !7875, metadata !DIExpression()), !dbg !7877
  call void @llvm.dbg.declare(metadata %union.tree_node** %newt, metadata !7878, metadata !DIExpression()), !dbg !7879
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7880, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.declare(metadata %union.tree_node** %context, metadata !7882, metadata !DIExpression()), !dbg !7883
  %35 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7884
  %common60 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !7884
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !7884
  %36 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !7884
  store %union.tree_node* %36, %union.tree_node** %type, align 8, !dbg !7885
  store %union.tree_node* %36, %union.tree_node** %t, align 8, !dbg !7886
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7887
  %call62 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %37), !dbg !7887
  store %union.tree_node* %call62, %union.tree_node** %val, align 8, !dbg !7888
  %38 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7889
  %39 = bitcast %struct.nesting_info* %38 to i8*, !dbg !7889
  %call63 = call %union.tree_node* @walk_tree_1(%union.tree_node** %type, %union.tree_node* (%union.tree_node**, i32*, i8*)* @contains_remapped_vars, i8* %39, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7889
  %cmp64 = icmp eq %union.tree_node* %call63, null, !dbg !7891
  br i1 %cmp64, label %land.lhs.true66, label %if.end71, !dbg !7892

land.lhs.true66:                                  ; preds = %if.then59
  %40 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7893
  %41 = bitcast %struct.nesting_info* %40 to i8*, !dbg !7893
  %call67 = call %union.tree_node* @walk_tree_1(%union.tree_node** %val, %union.tree_node* (%union.tree_node**, i32*, i8*)* @contains_remapped_vars, i8* %41, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7893
  %cmp68 = icmp eq %union.tree_node* %call67, null, !dbg !7894
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !7895

if.then70:                                        ; preds = %land.lhs.true66
  br label %for.inc158, !dbg !7896

if.end71:                                         ; preds = %land.lhs.true66, %if.then59
  %42 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7897
  %call72 = call %union.tree_node* @decl_function_context(%union.tree_node* %42), !dbg !7898
  store %union.tree_node* %call72, %union.tree_node** %context, align 8, !dbg !7899
  %43 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7900
  store %struct.nesting_info* %43, %struct.nesting_info** %i, align 8, !dbg !7902
  br label %for.cond73, !dbg !7903

for.cond73:                                       ; preds = %for.inc81, %if.end71
  %44 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7904
  %tobool74 = icmp ne %struct.nesting_info* %44, null, !dbg !7906
  br i1 %tobool74, label %for.body75, label %for.end82, !dbg !7906

for.body75:                                       ; preds = %for.cond73
  %45 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7907
  %context76 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %45, i32 0, i32 6, !dbg !7909
  %46 = load %union.tree_node*, %union.tree_node** %context76, align 8, !dbg !7909
  %47 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !7910
  %cmp77 = icmp eq %union.tree_node* %46, %47, !dbg !7911
  br i1 %cmp77, label %if.then79, label %if.end80, !dbg !7912

if.then79:                                        ; preds = %for.body75
  br label %for.end82, !dbg !7913

if.end80:                                         ; preds = %for.body75
  br label %for.inc81, !dbg !7910

for.inc81:                                        ; preds = %if.end80
  %48 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7914
  %outer = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %48, i32 0, i32 0, !dbg !7915
  %49 = load %struct.nesting_info*, %struct.nesting_info** %outer, align 8, !dbg !7915
  store %struct.nesting_info* %49, %struct.nesting_info** %i, align 8, !dbg !7916
  br label %for.cond73, !dbg !7917, !llvm.loop !7918

for.end82:                                        ; preds = %if.then79, %for.cond73
  %50 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7920
  %cmp83 = icmp eq %struct.nesting_info* %50, null, !dbg !7922
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !7923

if.then85:                                        ; preds = %for.end82
  br label %for.inc158, !dbg !7924

if.end86:                                         ; preds = %for.end82
  %51 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7925
  %context87 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %51, i32 0, i32 6, !dbg !7926
  %52 = load %union.tree_node*, %union.tree_node** %context87, align 8, !dbg !7926
  %cb88 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7927
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb88, i32 0, i32 0, !dbg !7928
  store %union.tree_node* %52, %union.tree_node** %src_fn, align 8, !dbg !7929
  %53 = load %struct.nesting_info*, %struct.nesting_info** %i, align 8, !dbg !7930
  %context89 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %53, i32 0, i32 6, !dbg !7931
  %54 = load %union.tree_node*, %union.tree_node** %context89, align 8, !dbg !7931
  %cb90 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7932
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb90, i32 0, i32 1, !dbg !7933
  store %union.tree_node* %54, %union.tree_node** %dst_fn, align 8, !dbg !7934
  %55 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !7935
  %context91 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %55, i32 0, i32 6, !dbg !7935
  %56 = load %union.tree_node*, %union.tree_node** %context91, align 8, !dbg !7935
  %function_decl = bitcast %union.tree_node* %56 to %struct.tree_function_decl*, !dbg !7935
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7935
  %57 = load %struct.function*, %struct.function** %f, align 8, !dbg !7935
  %cb92 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7936
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb92, i32 0, i32 4, !dbg !7937
  store %struct.function* %57, %struct.function** %src_cfun, align 8, !dbg !7938
  %58 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7939
  %cb93 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7940
  %call94 = call %union.tree_node* @remap_type(%union.tree_node* %58, %struct.copy_body_data* %cb93), !dbg !7941
  store %union.tree_node* %call94, %union.tree_node** %newt, align 8, !dbg !7942
  %59 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7943
  %common95 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !7943
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !7943
  store %union.tree_node* %call94, %union.tree_node** %type96, align 8, !dbg !7944
  br label %while.cond, !dbg !7945

while.cond:                                       ; preds = %while.body, %if.end86
  %60 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7946
  %base97 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !7946
  %61 = bitcast %struct.tree_base* %base97 to i64*, !dbg !7946
  %bf.load98 = load i64, i64* %61, align 8, !dbg !7946
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !7946
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !7946
  %cmp101 = icmp eq i32 %bf.cast100, 10, !dbg !7946
  br i1 %cmp101, label %land.rhs, label %lor.lhs.false103, !dbg !7946

lor.lhs.false103:                                 ; preds = %while.cond
  %62 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7946
  %base104 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !7946
  %63 = bitcast %struct.tree_base* %base104 to i64*, !dbg !7946
  %bf.load105 = load i64, i64* %63, align 8, !dbg !7946
  %bf.clear106 = and i64 %bf.load105, 65535, !dbg !7946
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !7946
  %cmp108 = icmp eq i32 %bf.cast107, 12, !dbg !7946
  br i1 %cmp108, label %land.rhs, label %land.end, !dbg !7947

land.rhs:                                         ; preds = %lor.lhs.false103, %while.cond
  %64 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7948
  %type110 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !7948
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type110, i32 0, i32 12, !dbg !7948
  %65 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7948
  %tobool111 = icmp ne %union.tree_node* %65, null, !dbg !7949
  %lnot = xor i1 %tobool111, true, !dbg !7949
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false103
  %66 = phi i1 [ false, %lor.lhs.false103 ], [ %lnot, %land.rhs ], !dbg !7950
  br i1 %66, label %while.body, label %while.end, !dbg !7945

while.body:                                       ; preds = %land.end
  %67 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7951
  %common112 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !7951
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !7951
  %68 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !7951
  store %union.tree_node* %68, %union.tree_node** %newt, align 8, !dbg !7953
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7954
  %common114 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !7954
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !7954
  %70 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !7954
  store %union.tree_node* %70, %union.tree_node** %t, align 8, !dbg !7955
  br label %while.cond, !dbg !7945, !llvm.loop !7956

while.end:                                        ; preds = %land.end
  %71 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7958
  %type116 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !7958
  %name117 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type116, i32 0, i32 12, !dbg !7958
  %72 = load %union.tree_node*, %union.tree_node** %name117, align 8, !dbg !7958
  %tobool118 = icmp ne %union.tree_node* %72, null, !dbg !7958
  br i1 %tobool118, label %land.lhs.true119, label %if.end149, !dbg !7960

land.lhs.true119:                                 ; preds = %while.end
  %73 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7961
  %type120 = bitcast %union.tree_node* %73 to %struct.tree_type*, !dbg !7961
  %name121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type120, i32 0, i32 12, !dbg !7961
  %74 = load %union.tree_node*, %union.tree_node** %name121, align 8, !dbg !7961
  %base122 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !7961
  %75 = bitcast %struct.tree_base* %base122 to i64*, !dbg !7961
  %bf.load123 = load i64, i64* %75, align 8, !dbg !7961
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !7961
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !7961
  %cmp126 = icmp eq i32 %bf.cast125, 35, !dbg !7962
  br i1 %cmp126, label %land.lhs.true128, label %if.end149, !dbg !7963

land.lhs.true128:                                 ; preds = %land.lhs.true119
  %76 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7964
  %type129 = bitcast %union.tree_node* %76 to %struct.tree_type*, !dbg !7964
  %name130 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type129, i32 0, i32 12, !dbg !7964
  %77 = load %union.tree_node*, %union.tree_node** %name130, align 8, !dbg !7964
  %decl_non_common = bitcast %union.tree_node* %77 to %struct.tree_decl_non_common*, !dbg !7964
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !7964
  %78 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7964
  %tobool131 = icmp ne %union.tree_node* %78, null, !dbg !7964
  br i1 %tobool131, label %land.lhs.true132, label %if.end149, !dbg !7965

land.lhs.true132:                                 ; preds = %land.lhs.true128
  %79 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7966
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7967
  %cmp133 = icmp ne %union.tree_node* %79, %80, !dbg !7968
  br i1 %cmp133, label %land.lhs.true135, label %if.end149, !dbg !7969

land.lhs.true135:                                 ; preds = %land.lhs.true132
  %81 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7970
  %type136 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !7970
  %name137 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type136, i32 0, i32 12, !dbg !7970
  %82 = load %union.tree_node*, %union.tree_node** %name137, align 8, !dbg !7970
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7971
  %type138 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !7971
  %name139 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 12, !dbg !7971
  %84 = load %union.tree_node*, %union.tree_node** %name139, align 8, !dbg !7971
  %cmp140 = icmp eq %union.tree_node* %82, %84, !dbg !7972
  br i1 %cmp140, label %if.then142, label %if.end149, !dbg !7973

if.then142:                                       ; preds = %land.lhs.true135
  %85 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7974
  %type143 = bitcast %union.tree_node* %85 to %struct.tree_type*, !dbg !7974
  %name144 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type143, i32 0, i32 12, !dbg !7974
  %86 = load %union.tree_node*, %union.tree_node** %name144, align 8, !dbg !7974
  %cb145 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7975
  %call146 = call %union.tree_node* @remap_decl(%union.tree_node* %86, %struct.copy_body_data* %cb145), !dbg !7976
  %87 = load %union.tree_node*, %union.tree_node** %newt, align 8, !dbg !7977
  %type147 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !7977
  %name148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type147, i32 0, i32 12, !dbg !7977
  store %union.tree_node* %call146, %union.tree_node** %name148, align 8, !dbg !7978
  br label %if.end149, !dbg !7977

if.end149:                                        ; preds = %if.then142, %land.lhs.true135, %land.lhs.true132, %land.lhs.true128, %land.lhs.true119, %while.end
  %cb150 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7979
  %88 = bitcast %struct.copy_body_data* %cb150 to i8*, !dbg !7979
  %call151 = call %union.tree_node* @walk_tree_1(%union.tree_node** %val, %union.tree_node* (%union.tree_node**, i32*, i8*)* @copy_tree_body_r, i8* %88, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7979
  %89 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7980
  %90 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7982
  %call152 = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %90), !dbg !7982
  %cmp153 = icmp ne %union.tree_node* %89, %call152, !dbg !7983
  br i1 %cmp153, label %if.then155, label %if.end156, !dbg !7984

if.then155:                                       ; preds = %if.end149
  %91 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7985
  %92 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7985
  call void @decl_value_expr_insert(%union.tree_node* %91, %union.tree_node* %92), !dbg !7985
  br label %if.end156, !dbg !7985

if.end156:                                        ; preds = %if.then155, %if.end149
  br label %if.end157, !dbg !7986

if.end157:                                        ; preds = %if.end156, %land.lhs.true51, %land.lhs.true45, %for.body38
  br label %for.inc158, !dbg !7873

for.inc158:                                       ; preds = %if.end157, %if.then85, %if.then70
  %93 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7987
  %common159 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !7987
  %chain160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 1, !dbg !7987
  %94 = load %union.tree_node*, %union.tree_node** %chain160, align 8, !dbg !7987
  store %union.tree_node* %94, %union.tree_node** %var, align 8, !dbg !7988
  br label %for.cond36, !dbg !7989, !llvm.loop !7990

for.end161:                                       ; preds = %for.cond36
  %cb162 = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %id, i32 0, i32 0, !dbg !7992
  %decl_map163 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %cb162, i32 0, i32 6, !dbg !7993
  %95 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map163, align 8, !dbg !7993
  call void @pointer_map_destroy(%struct.pointer_map_t* %95), !dbg !7994
  br label %return, !dbg !7995

return:                                           ; preds = %for.end161, %if.then31
  ret void, !dbg !7995
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @nesting_copy_decl(%union.tree_node* %decl, %struct.copy_body_data* %id) #0 !dbg !7996 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %id.addr = alloca %struct.copy_body_data*, align 8
  %nid = alloca %struct.nesting_copy_body_data*, align 8
  %slot = alloca i8**, align 8
  %new_decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !8000, metadata !DIExpression()), !dbg !8001
  store %struct.copy_body_data* %id, %struct.copy_body_data** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.copy_body_data** %id.addr, metadata !8002, metadata !DIExpression()), !dbg !8003
  call void @llvm.dbg.declare(metadata %struct.nesting_copy_body_data** %nid, metadata !8004, metadata !DIExpression()), !dbg !8005
  %0 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8006
  %1 = bitcast %struct.copy_body_data* %0 to %struct.nesting_copy_body_data*, !dbg !8007
  store %struct.nesting_copy_body_data* %1, %struct.nesting_copy_body_data** %nid, align 8, !dbg !8005
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8008, metadata !DIExpression()), !dbg !8009
  %2 = load %struct.nesting_copy_body_data*, %struct.nesting_copy_body_data** %nid, align 8, !dbg !8010
  %root = getelementptr inbounds %struct.nesting_copy_body_data, %struct.nesting_copy_body_data* %2, i32 0, i32 1, !dbg !8011
  %3 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !8011
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %3, i32 0, i32 4, !dbg !8012
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !8012
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8013
  %6 = bitcast %union.tree_node* %5 to i8*, !dbg !8013
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %6), !dbg !8014
  store i8** %call, i8*** %slot, align 8, !dbg !8009
  %7 = load i8**, i8*** %slot, align 8, !dbg !8015
  %tobool = icmp ne i8** %7, null, !dbg !8015
  br i1 %tobool, label %if.then, label %if.end, !dbg !8017

if.then:                                          ; preds = %entry
  %8 = load i8**, i8*** %slot, align 8, !dbg !8018
  %9 = load i8*, i8** %8, align 8, !dbg !8019
  %10 = bitcast i8* %9 to %union.tree_node*, !dbg !8020
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !8021
  br label %return, !dbg !8021

if.end:                                           ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8022
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8022
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !8022
  %bf.load = load i64, i64* %12, align 8, !dbg !8022
  %bf.clear = and i64 %bf.load, 65535, !dbg !8022
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8022
  %cmp = icmp eq i32 %bf.cast, 35, !dbg !8024
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !8025

land.lhs.true:                                    ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8026
  %decl_non_common = bitcast %union.tree_node* %13 to %struct.tree_decl_non_common*, !dbg !8026
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !8026
  %14 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8026
  %tobool1 = icmp ne %union.tree_node* %14, null, !dbg !8026
  br i1 %tobool1, label %if.then2, label %if.end9, !dbg !8027

if.then2:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !8028, metadata !DIExpression()), !dbg !8030
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8031
  %16 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8032
  %call3 = call %union.tree_node* @copy_decl_no_change(%union.tree_node* %15, %struct.copy_body_data* %16), !dbg !8033
  store %union.tree_node* %call3, %union.tree_node** %new_decl, align 8, !dbg !8030
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8034
  %decl_non_common4 = bitcast %union.tree_node* %17 to %struct.tree_decl_non_common*, !dbg !8034
  %result5 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 3, !dbg !8034
  %18 = load %union.tree_node*, %union.tree_node** %result5, align 8, !dbg !8034
  %19 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8035
  %call6 = call %union.tree_node* @remap_type(%union.tree_node* %18, %struct.copy_body_data* %19), !dbg !8036
  %20 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8037
  %decl_non_common7 = bitcast %union.tree_node* %20 to %struct.tree_decl_non_common*, !dbg !8037
  %result8 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common7, i32 0, i32 3, !dbg !8037
  store %union.tree_node* %call6, %union.tree_node** %result8, align 8, !dbg !8038
  %21 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !8039
  store %union.tree_node* %21, %union.tree_node** %retval, align 8, !dbg !8040
  br label %return, !dbg !8040

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8041
  %base10 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !8041
  %23 = bitcast %struct.tree_base* %base10 to i64*, !dbg !8041
  %bf.load11 = load i64, i64* %23, align 8, !dbg !8041
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !8041
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !8041
  %cmp14 = icmp eq i32 %bf.cast13, 32, !dbg !8043
  br i1 %cmp14, label %if.then26, label %lor.lhs.false, !dbg !8044

lor.lhs.false:                                    ; preds = %if.end9
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8045
  %base15 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !8045
  %25 = bitcast %struct.tree_base* %base15 to i64*, !dbg !8045
  %bf.load16 = load i64, i64* %25, align 8, !dbg !8045
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !8045
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !8045
  %cmp19 = icmp eq i32 %bf.cast18, 34, !dbg !8046
  br i1 %cmp19, label %if.then26, label %lor.lhs.false20, !dbg !8047

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8048
  %base21 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !8048
  %27 = bitcast %struct.tree_base* %base21 to i64*, !dbg !8048
  %bf.load22 = load i64, i64* %27, align 8, !dbg !8048
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !8048
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !8048
  %cmp25 = icmp eq i32 %bf.cast24, 36, !dbg !8049
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !8050

if.then26:                                        ; preds = %lor.lhs.false20, %lor.lhs.false, %if.end9
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8051
  store %union.tree_node* %28, %union.tree_node** %retval, align 8, !dbg !8052
  br label %return, !dbg !8052

if.end27:                                         ; preds = %lor.lhs.false20
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !8053
  %30 = load %struct.copy_body_data*, %struct.copy_body_data** %id.addr, align 8, !dbg !8054
  %call28 = call %union.tree_node* @copy_decl_no_change(%union.tree_node* %29, %struct.copy_body_data* %30), !dbg !8055
  store %union.tree_node* %call28, %union.tree_node** %retval, align 8, !dbg !8056
  br label %return, !dbg !8056

return:                                           ; preds = %if.end27, %if.then26, %if.then2, %if.then
  %31 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8057
  ret %union.tree_node* %31, !dbg !8057
}

declare dso_local %union.tree_node* @remap_type(%union.tree_node*, %struct.copy_body_data*) #2

declare dso_local %union.tree_node* @remap_decl(%union.tree_node*, %struct.copy_body_data*) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

declare dso_local void @dump_function_to_file(%union.tree_node*, %struct._IO_FILE*, i32) #2

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @contains_remapped_vars(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !8058 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %root = alloca %struct.nesting_info*, align 8
  %t = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !8059, metadata !DIExpression()), !dbg !8060
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !8061, metadata !DIExpression()), !dbg !8062
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8063, metadata !DIExpression()), !dbg !8064
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root, metadata !8065, metadata !DIExpression()), !dbg !8066
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8067
  %1 = bitcast i8* %0 to %struct.nesting_info*, !dbg !8068
  store %struct.nesting_info* %1, %struct.nesting_info** %root, align 8, !dbg !8066
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !8069, metadata !DIExpression()), !dbg !8070
  %2 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !8071
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !8072
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !8070
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8073, metadata !DIExpression()), !dbg !8074
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8075
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8075
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !8075
  %bf.load = load i64, i64* %5, align 8, !dbg !8075
  %bf.clear = and i64 %bf.load, 65535, !dbg !8075
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8075
  %idxprom = sext i32 %bf.cast to i64, !dbg !8075
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8075
  %6 = load i32, i32* %arrayidx, align 4, !dbg !8075
  %cmp = icmp eq i32 %6, 3, !dbg !8075
  br i1 %cmp, label %if.then, label %if.end2, !dbg !8077

if.then:                                          ; preds = %entry
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !8078
  store i32 0, i32* %7, align 4, !dbg !8080
  %8 = load %struct.nesting_info*, %struct.nesting_info** %root, align 8, !dbg !8081
  %var_map = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %8, i32 0, i32 4, !dbg !8082
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %var_map, align 8, !dbg !8082
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !8083
  %11 = bitcast %union.tree_node* %10 to i8*, !dbg !8083
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %9, i8* %11), !dbg !8084
  store i8** %call, i8*** %slot, align 8, !dbg !8085
  %12 = load i8**, i8*** %slot, align 8, !dbg !8086
  %tobool = icmp ne i8** %12, null, !dbg !8086
  br i1 %tobool, label %if.then1, label %if.end, !dbg !8088

if.then1:                                         ; preds = %if.then
  %13 = load i8**, i8*** %slot, align 8, !dbg !8089
  %14 = load i8*, i8** %13, align 8, !dbg !8090
  %15 = bitcast i8* %14 to %union.tree_node*, !dbg !8091
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !8092
  br label %return, !dbg !8092

if.end:                                           ; preds = %if.then
  br label %if.end2, !dbg !8093

if.end2:                                          ; preds = %if.end, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8094
  br label %return, !dbg !8094

return:                                           ; preds = %if.end2, %if.then1
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8095
  ret %union.tree_node* %16, !dbg !8095
}

declare dso_local %union.tree_node* @copy_tree_body_r(%union.tree_node**, i32*, i8*) #2

declare dso_local %union.tree_node* @copy_decl_no_change(%union.tree_node*, %struct.copy_body_data*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @unnest_nesting_tree_1(%struct.nesting_info* %root) #0 !dbg !8096 {
entry:
  %root.addr = alloca %struct.nesting_info*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct.nesting_info* %root, %struct.nesting_info** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nesting_info** %root.addr, metadata !8097, metadata !DIExpression()), !dbg !8098
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !8099, metadata !DIExpression()), !dbg !8100
  %0 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !8101
  %context = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %0, i32 0, i32 6, !dbg !8102
  %1 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !8102
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %1), !dbg !8103
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !8100
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !8104
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 5, !dbg !8106
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !8106
  %tobool = icmp ne %struct.cgraph_node* %3, null, !dbg !8104
  br i1 %tobool, label %if.then, label %if.end, !dbg !8107

if.then:                                          ; preds = %entry
  %4 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !8108
  %context1 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %4, i32 0, i32 6, !dbg !8110
  %5 = load %union.tree_node*, %union.tree_node** %context1, align 8, !dbg !8110
  %call2 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %5), !dbg !8111
  call void @cgraph_unnest_node(%struct.cgraph_node* %call2), !dbg !8112
  %6 = load %struct.nesting_info*, %struct.nesting_info** %root.addr, align 8, !dbg !8113
  %context3 = getelementptr inbounds %struct.nesting_info, %struct.nesting_info* %6, i32 0, i32 6, !dbg !8114
  %7 = load %union.tree_node*, %union.tree_node** %context3, align 8, !dbg !8114
  call void @cgraph_finalize_function(%union.tree_node* %7, i8 zeroext 1), !dbg !8115
  br label %if.end, !dbg !8116

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8117
}

declare dso_local void @cgraph_unnest_node(%struct.cgraph_node*) #2

declare dso_local void @cgraph_finalize_function(%union.tree_node*, i8 zeroext) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3191, !3192, !3193}
!llvm.ident = !{!3194}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "nesting_info_bitmap_obstack", scope: !2, file: !3, line: 128, type: !1599, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1559, globals: !3174, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-nested.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !335, !340, !345, !363, !370, !377, !390, !413, !420, !596, !610, !649, !675, !680, !685, !1405, !1539, !1553}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !330, line: 363, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334}
!332 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !330, line: 355, baseType: !7, size: 32, elements: !336)
!336 = !{!337, !338, !339}
!337 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!338 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!339 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !341, line: 474, baseType: !7, size: 32, elements: !342)
!341 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344}
!343 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362}
!347 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !364)
!364 = !{!365, !366, !367, !368, !369}
!365 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!379 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !391, line: 309, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412}
!393 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!404 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!405 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!406 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!407 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!408 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!409 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!410 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!411 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!412 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!413 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !414, line: 104, baseType: !7, size: 32, elements: !415)
!414 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!415 = !{!416, !417, !418, !419}
!416 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!417 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!418 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!419 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!420 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !421, line: 74, baseType: !7, size: 32, elements: !422)
!421 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!422 = !{!423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595}
!423 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!595 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_dump_index", file: !414, line: 30, baseType: !7, size: 32, elements: !597)
!597 = !{!598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609}
!598 = !DIEnumerator(name: "TDI_none", value: 0, isUnsigned: true)
!599 = !DIEnumerator(name: "TDI_cgraph", value: 1, isUnsigned: true)
!600 = !DIEnumerator(name: "TDI_tu", value: 2, isUnsigned: true)
!601 = !DIEnumerator(name: "TDI_class", value: 3, isUnsigned: true)
!602 = !DIEnumerator(name: "TDI_original", value: 4, isUnsigned: true)
!603 = !DIEnumerator(name: "TDI_generic", value: 5, isUnsigned: true)
!604 = !DIEnumerator(name: "TDI_nested", value: 6, isUnsigned: true)
!605 = !DIEnumerator(name: "TDI_vcg", value: 7, isUnsigned: true)
!606 = !DIEnumerator(name: "TDI_tree_all", value: 8, isUnsigned: true)
!607 = !DIEnumerator(name: "TDI_rtl_all", value: 9, isUnsigned: true)
!608 = !DIEnumerator(name: "TDI_ipa_all", value: 10, isUnsigned: true)
!609 = !DIEnumerator(name: "TDI_end", value: 11, isUnsigned: true)
!610 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !611, line: 51, baseType: !7, size: 32, elements: !612)
!611 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!612 = !{!613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648}
!613 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!634 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!635 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!636 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!637 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!638 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!639 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!640 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!641 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!642 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!646 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!647 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!648 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!649 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !611, line: 727, baseType: !7, size: 32, elements: !650)
!650 = !{!651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674}
!651 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!652 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!653 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!654 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!655 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!656 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!657 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!658 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!659 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!660 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!661 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!662 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!663 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!664 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!665 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!666 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!667 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!668 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!669 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!670 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!671 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!672 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!673 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!674 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!675 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !676, line: 147, baseType: !7, size: 32, elements: !677)
!676 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!677 = !{!678, !679}
!678 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!679 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!680 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !611, line: 4603, baseType: !7, size: 32, elements: !681)
!681 = !{!682, !683, !684}
!682 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!683 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!684 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!685 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !135, line: 220, baseType: !7, size: 32, elements: !686)
!686 = !{!687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404}
!687 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1404 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1405 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !1406)
!1406 = !{!1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538}
!1407 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1408 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1409 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1410 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1411 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1412 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1413 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1414 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1415 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1416 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1417 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1418 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1419 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1420 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1421 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1422 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1423 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1424 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1427 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1428 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1429 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1430 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1431 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1432 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1433 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1434 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1435 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1436 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1437 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1438 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1439 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1440 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1441 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1442 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1443 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1444 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1445 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1446 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1447 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1448 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1449 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1450 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1451 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1452 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1453 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1454 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1455 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1456 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1457 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1458 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1459 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1460 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1461 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1462 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1463 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1464 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1465 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1466 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1467 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1468 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1469 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1470 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1471 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1472 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1473 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1474 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1475 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1476 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1477 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1478 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1479 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1480 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1481 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1482 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1483 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1484 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1485 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1486 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1487 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1488 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1489 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1535 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1536 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1537 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1538 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1539 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !1540)
!1540 = !{!1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552}
!1541 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1542 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1543 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1544 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1545 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1546 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1547 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1548 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1549 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1550 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1551 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1552 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1553 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "copy_body_cge_which", file: !1554, line: 33, baseType: !7, size: 32, elements: !1555)
!1554 = !DIFile(filename: "./tree-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1555 = !{!1556, !1557, !1558}
!1556 = !DIEnumerator(name: "CB_CGE_DUPLICATE", value: 0, isUnsigned: true)
!1557 = !DIEnumerator(name: "CB_CGE_MOVE", value: 1, isUnsigned: true)
!1558 = !DIEnumerator(name: "CB_CGE_MOVE_CLONES", value: 2, isUnsigned: true)
!1559 = !{!1560, !134, !1561, !1640, !1630, !1906, !2881, !1940, !1614, !1839, !2883, !1765, !2902, !2903}
!1560 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1562, size: 64)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nesting_info", file: !3, line: 81, size: 960, elements: !1563)
!1563 = !{!1564, !1565, !1566, !1567, !1571, !1572, !1639, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1562, file: !3, line: 83, baseType: !1561, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1562, file: !3, line: 84, baseType: !1561, size: 64, offset: 64)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1562, file: !3, line: 85, baseType: !1561, size: 64, offset: 128)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "field_map", scope: !1562, file: !3, line: 87, baseType: !1568, size: 64, offset: 192)
!1568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1569, size: 64)
!1569 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1570, line: 33, flags: DIFlagFwdDecl)
!1570 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "var_map", scope: !1562, file: !3, line: 88, baseType: !1568, size: 64, offset: 256)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "suppress_expansion", scope: !1562, file: !3, line: 89, baseType: !1573, size: 64, offset: 320)
!1573 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1574, line: 47, baseType: !1575)
!1574 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1576, size: 64)
!1576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1577, line: 75, size: 256, elements: !1578)
!1577 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1578 = !{!1579, !1594, !1595, !1596}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1576, file: !1577, line: 76, baseType: !1580, size: 64)
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1581 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1577, line: 68, baseType: !1582)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1577, line: 63, size: 320, elements: !1583)
!1583 = !{!1584, !1586, !1587, !1588}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1582, file: !1577, line: 64, baseType: !1585, size: 64)
!1585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1582, size: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1582, file: !1577, line: 65, baseType: !1585, size: 64, offset: 64)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1582, file: !1577, line: 66, baseType: !7, size: 32, offset: 128)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1582, file: !1577, line: 67, baseType: !1589, size: 128, offset: 192)
!1589 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1590, size: 128, elements: !1592)
!1590 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1577, line: 29, baseType: !1591)
!1591 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1592 = !{!1593}
!1593 = !DISubrange(count: 2)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1576, file: !1577, line: 77, baseType: !1580, size: 64, offset: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1576, file: !1577, line: 78, baseType: !7, size: 32, offset: 128)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1576, file: !1577, line: 79, baseType: !1597, size: 64, offset: 192)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1577, line: 49, baseType: !1599)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1577, line: 45, size: 832, elements: !1600)
!1600 = !{!1601, !1602, !1603}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1599, file: !1577, line: 46, baseType: !1585, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1599, file: !1577, line: 47, baseType: !1575, size: 64, offset: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1599, file: !1577, line: 48, baseType: !1604, size: 704, offset: 128)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1605, line: 164, size: 704, elements: !1606)
!1605 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1606 = !{!1607, !1609, !1621, !1622, !1623, !1624, !1625, !1626, !1631, !1635, !1636, !1637, !1638}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1604, file: !1605, line: 166, baseType: !1608, size: 64)
!1608 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1604, file: !1605, line: 167, baseType: !1610, size: 64, offset: 64)
!1610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1611, size: 64)
!1611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1605, line: 157, size: 192, elements: !1612)
!1612 = !{!1613, !1616, !1617}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1611, file: !1605, line: 159, baseType: !1614, size: 64)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1611, file: !1605, line: 160, baseType: !1610, size: 64, offset: 64)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1611, file: !1605, line: 161, baseType: !1618, size: 32, offset: 128)
!1618 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1615, size: 32, elements: !1619)
!1619 = !{!1620}
!1620 = !DISubrange(count: 4)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1604, file: !1605, line: 168, baseType: !1614, size: 64, offset: 128)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1604, file: !1605, line: 169, baseType: !1614, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1604, file: !1605, line: 170, baseType: !1614, size: 64, offset: 256)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1604, file: !1605, line: 171, baseType: !1608, size: 64, offset: 320)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1604, file: !1605, line: 172, baseType: !1560, size: 32, offset: 384)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1604, file: !1605, line: 176, baseType: !1627, size: 64, offset: 448)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = !DISubroutineType(types: !1629)
!1629 = !{!1610, !1630, !1608}
!1630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1604, file: !1605, line: 177, baseType: !1632, size: 64, offset: 512)
!1632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1633, size: 64)
!1633 = !DISubroutineType(types: !1634)
!1634 = !{null, !1630, !1610}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1604, file: !1605, line: 178, baseType: !1630, size: 64, offset: 576)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1604, file: !1605, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1604, file: !1605, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1604, file: !1605, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1562, file: !3, line: 91, baseType: !1640, size: 64, offset: 384)
!1640 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1574, line: 56, baseType: !1641)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !1643)
!1643 = !{!1644, !1677, !1683, !1694, !1713, !1724, !1729, !1738, !1744, !1758, !1770, !1808, !2209, !2237, !2254, !2255, !2260, !2269, !2275, !2280, !2284, !2288, !2522, !2569, !2575, !2581, !2588, !2601, !2615, !2632, !2644, !2666, !2681, !2853}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1642, file: !135, line: 3372, baseType: !1645, size: 64)
!1645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !1646)
!1646 = !{!1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1645, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1645, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1645, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1645, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1645, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1645, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1645, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1645, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1645, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1645, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1645, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1645, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1645, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1645, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1645, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1645, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1645, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1645, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1645, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1645, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1645, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1645, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1645, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1645, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1645, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1645, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1645, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1645, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1645, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1645, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1642, file: !135, line: 3373, baseType: !1678, size: 192)
!1678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !1679)
!1679 = !{!1680, !1681, !1682}
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1678, file: !135, line: 403, baseType: !1645, size: 64)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1678, file: !135, line: 404, baseType: !1640, size: 64, offset: 64)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1678, file: !135, line: 405, baseType: !1640, size: 64, offset: 128)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1642, file: !135, line: 3374, baseType: !1684, size: 320)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !1685)
!1685 = !{!1686, !1687}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1684, file: !135, line: 1385, baseType: !1678, size: 192)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1684, file: !135, line: 1386, baseType: !1688, size: 128, offset: 192)
!1688 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1689, line: 58, baseType: !1690)
!1689 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1689, line: 54, size: 128, elements: !1691)
!1691 = !{!1692, !1693}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1690, file: !1689, line: 56, baseType: !1591, size: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1690, file: !1689, line: 57, baseType: !1608, size: 64, offset: 64)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1642, file: !135, line: 3375, baseType: !1695, size: 256)
!1695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !1696)
!1696 = !{!1697, !1698}
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1695, file: !135, line: 1398, baseType: !1678, size: 192)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1695, file: !135, line: 1399, baseType: !1699, size: 64, offset: 192)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1701, line: 52, size: 256, elements: !1702)
!1701 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1702 = !{!1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1700, file: !1701, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1700, file: !1701, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1700, file: !1701, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1700, file: !1701, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1700, file: !1701, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1700, file: !1701, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1700, file: !1701, line: 62, baseType: !1710, size: 192, offset: 64)
!1710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1591, size: 192, elements: !1711)
!1711 = !{!1712}
!1712 = !DISubrange(count: 3)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1642, file: !135, line: 3376, baseType: !1714, size: 256)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !1715)
!1715 = !{!1716, !1717}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1714, file: !135, line: 1409, baseType: !1678, size: 192)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1714, file: !135, line: 1410, baseType: !1718, size: 64, offset: 192)
!1718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1719, size: 64)
!1719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1720, line: 27, size: 192, elements: !1721)
!1720 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1721 = !{!1722, !1723}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1719, file: !1720, line: 29, baseType: !1688, size: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1719, file: !1720, line: 30, baseType: !5, size: 32, offset: 128)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1642, file: !135, line: 3377, baseType: !1725, size: 256)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !1726)
!1726 = !{!1727, !1728}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1725, file: !135, line: 1438, baseType: !1678, size: 192)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1725, file: !135, line: 1439, baseType: !1640, size: 64, offset: 192)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1642, file: !135, line: 3378, baseType: !1730, size: 256)
!1730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !1731)
!1731 = !{!1732, !1733, !1734}
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1730, file: !135, line: 1419, baseType: !1678, size: 192)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1730, file: !135, line: 1420, baseType: !1560, size: 32, offset: 192)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1730, file: !135, line: 1421, baseType: !1735, size: 8, offset: 224)
!1735 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1615, size: 8, elements: !1736)
!1736 = !{!1737}
!1737 = !DISubrange(count: 1)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1642, file: !135, line: 3379, baseType: !1739, size: 320)
!1739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !1740)
!1740 = !{!1741, !1742, !1743}
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1739, file: !135, line: 1429, baseType: !1678, size: 192)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1739, file: !135, line: 1430, baseType: !1640, size: 64, offset: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1739, file: !135, line: 1431, baseType: !1640, size: 64, offset: 256)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1642, file: !135, line: 3380, baseType: !1745, size: 320)
!1745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !1746)
!1746 = !{!1747, !1748}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1745, file: !135, line: 1461, baseType: !1678, size: 192)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1745, file: !135, line: 1462, baseType: !1749, size: 128, offset: 192)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1750, line: 31, size: 128, elements: !1751)
!1750 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1751 = !{!1752, !1756, !1757}
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1749, file: !1750, line: 32, baseType: !1753, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1754, size: 64)
!1754 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1755)
!1755 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1749, file: !1750, line: 33, baseType: !7, size: 32, offset: 64)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1749, file: !1750, line: 34, baseType: !7, size: 32, offset: 96)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1642, file: !135, line: 3381, baseType: !1759, size: 384)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !1760)
!1760 = !{!1761, !1762, !1767, !1768, !1769}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !135, line: 2508, baseType: !1678, size: 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1759, file: !135, line: 2509, baseType: !1763, size: 32, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1764, line: 58, baseType: !1765)
!1764 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1765 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1766, line: 44, baseType: !7)
!1766 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1759, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1759, file: !135, line: 2511, baseType: !1640, size: 64, offset: 256)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1759, file: !135, line: 2512, baseType: !1640, size: 64, offset: 320)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1642, file: !135, line: 3382, baseType: !1771, size: 896)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !1772)
!1772 = !{!1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1771, file: !135, line: 2653, baseType: !1759, size: 384)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1771, file: !135, line: 2654, baseType: !1640, size: 64, offset: 384)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1771, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1771, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1771, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1771, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1771, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1771, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1771, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1771, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1771, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1771, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1771, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1771, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1771, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1771, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1771, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1771, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1771, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1771, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1771, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1771, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1771, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1771, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1771, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1771, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1771, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1771, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1771, file: !135, line: 2705, baseType: !1640, size: 64, offset: 576)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1771, file: !135, line: 2706, baseType: !1640, size: 64, offset: 640)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1771, file: !135, line: 2707, baseType: !1640, size: 64, offset: 704)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1771, file: !135, line: 2708, baseType: !1640, size: 64, offset: 768)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1771, file: !135, line: 2711, baseType: !1806, size: 64, offset: 832)
!1806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1807, size: 64)
!1807 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1642, file: !135, line: 3383, baseType: !1809, size: 960)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !1810)
!1810 = !{!1811, !1812}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1809, file: !135, line: 2757, baseType: !1771, size: 896)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1809, file: !135, line: 2758, baseType: !1813, size: 64, offset: 896)
!1813 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1574, line: 50, baseType: !1814)
!1814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1815, size: 64)
!1815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1816, line: 240, size: 384, elements: !1817)
!1816 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1817 = !{!1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828}
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1815, file: !1816, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1815, file: !1816, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1815, file: !1816, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1815, file: !1816, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1815, file: !1816, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1815, file: !1816, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1815, file: !1816, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1815, file: !1816, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1815, file: !1816, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1815, file: !1816, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1815, file: !1816, line: 321, baseType: !1829, size: 320, offset: 64)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1816, line: 315, size: 320, elements: !1830)
!1830 = !{!1831, !2176, !2178, !2207, !2208}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1829, file: !1816, line: 316, baseType: !1832, size: 64)
!1832 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1833, size: 64, elements: !1736)
!1833 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1816, line: 183, baseType: !1834)
!1834 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1816, line: 166, size: 64, elements: !1835)
!1835 = !{!1836, !1837, !1838, !1841, !1842, !1850, !1851, !1863, !1866, !1867, !1868, !2153, !2166, !2173}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1834, file: !1816, line: 168, baseType: !1560, size: 32)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1834, file: !1816, line: 169, baseType: !7, size: 32)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1834, file: !1816, line: 170, baseType: !1839, size: 64)
!1839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1840, size: 64)
!1840 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1615)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1834, file: !1816, line: 171, baseType: !1813, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1834, file: !1816, line: 172, baseType: !1843, size: 64)
!1843 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1574, line: 53, baseType: !1844)
!1844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1845, size: 64)
!1845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1816, line: 359, size: 128, elements: !1846)
!1846 = !{!1847, !1848}
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1845, file: !1816, line: 360, baseType: !1560, size: 32)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1845, file: !1816, line: 361, baseType: !1849, size: 64, offset: 64)
!1849 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1813, size: 64, elements: !1736)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1834, file: !1816, line: 173, baseType: !5, size: 32)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1834, file: !1816, line: 174, baseType: !1852, size: 32)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1816, line: 133, baseType: !1853)
!1853 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1816, line: 115, size: 32, elements: !1854)
!1854 = !{!1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862}
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1853, file: !1816, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1853, file: !1816, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1853, file: !1816, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1853, file: !1816, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1853, file: !1816, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1853, file: !1816, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1853, file: !1816, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1853, file: !1816, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1834, file: !1816, line: 175, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1865, size: 64)
!1865 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1816, line: 175, flags: DIFlagFwdDecl)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1834, file: !1816, line: 176, baseType: !1575, size: 64)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1834, file: !1816, line: 177, baseType: !1640, size: 64)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1834, file: !1816, line: 178, baseType: !1869, size: 64)
!1869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1870, size: 64)
!1870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !330, line: 217, size: 832, elements: !1871)
!1871 = !{!1872, !2118, !2119, !2120, !2123, !2127, !2128, !2129, !2147, !2148, !2149, !2150, !2151, !2152}
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1870, file: !330, line: 219, baseType: !1873, size: 64)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !330, line: 151, baseType: !1875)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !330, line: 151, size: 128, elements: !1876)
!1876 = !{!1877}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1875, file: !330, line: 151, baseType: !1878, size: 128)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !330, line: 150, baseType: !1879)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !330, line: 150, size: 128, elements: !1880)
!1880 = !{!1881, !1882, !1883}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1879, file: !330, line: 150, baseType: !7, size: 32)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1879, file: !330, line: 150, baseType: !7, size: 32, offset: 32)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1879, file: !330, line: 150, baseType: !1884, size: 64, offset: 64)
!1884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1885, size: 64, elements: !1736)
!1885 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1574, line: 108, baseType: !1886)
!1886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !330, line: 122, size: 512, elements: !1888)
!1888 = !{!1889, !1890, !1891, !2110, !2111, !2112, !2113, !2114, !2115, !2116}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1887, file: !330, line: 124, baseType: !1869, size: 64)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1887, file: !330, line: 125, baseType: !1869, size: 64, offset: 64)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1887, file: !330, line: 131, baseType: !1892, size: 64, offset: 128)
!1892 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !330, line: 128, size: 64, elements: !1893)
!1893 = !{!1894, !2109}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1892, file: !330, line: 129, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1574, line: 66, baseType: !1896)
!1896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1897, size: 64)
!1897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !611, line: 143, size: 192, elements: !1898)
!1898 = !{!1899, !2107, !2108}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1897, file: !611, line: 145, baseType: !1900, size: 64)
!1900 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1574, line: 69, baseType: !1901)
!1901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1902, size: 64)
!1902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !611, line: 136, size: 192, elements: !1903)
!1903 = !{!1904, !2105, !2106}
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1902, file: !611, line: 137, baseType: !1905, size: 64)
!1905 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1574, line: 58, baseType: !1906)
!1906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1907, size: 64)
!1907 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !611, line: 737, size: 768, elements: !1908)
!1908 = !{!1909, !1926, !1960, !1966, !1971, !1976, !1983, !1989, !1995, !2000, !2014, !2019, !2025, !2030, !2040, !2045, !2063, !2070, !2077, !2083, !2088, !2094, !2100}
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1907, file: !611, line: 738, baseType: !1910, size: 256)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !611, line: 271, size: 256, elements: !1911)
!1911 = !{!1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1910, file: !611, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1910, file: !611, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1910, file: !611, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1910, file: !611, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1910, file: !611, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1910, file: !611, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1910, file: !611, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1910, file: !611, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1910, file: !611, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1910, file: !611, line: 312, baseType: !7, size: 32, offset: 32)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1910, file: !611, line: 316, baseType: !1763, size: 32, offset: 64)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1910, file: !611, line: 319, baseType: !7, size: 32, offset: 96)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1910, file: !611, line: 323, baseType: !1869, size: 64, offset: 128)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1910, file: !611, line: 327, baseType: !1640, size: 64, offset: 192)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1907, file: !611, line: 739, baseType: !1927, size: 448)
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !611, line: 350, size: 448, elements: !1928)
!1928 = !{!1929, !1958}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1927, file: !611, line: 353, baseType: !1930, size: 384)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !611, line: 333, size: 384, elements: !1931)
!1931 = !{!1932, !1933, !1941}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1930, file: !611, line: 336, baseType: !1910, size: 256)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1930, file: !611, line: 343, baseType: !1934, size: 64, offset: 256)
!1934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1935, size: 64)
!1935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1936, line: 37, size: 128, elements: !1937)
!1936 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1937 = !{!1938, !1939}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1935, file: !1936, line: 39, baseType: !1934, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1935, file: !1936, line: 40, baseType: !1940, size: 64, offset: 64)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1640, size: 64)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1930, file: !611, line: 344, baseType: !1942, size: 64, offset: 320)
!1942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1943, size: 64)
!1943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1936, line: 45, size: 320, elements: !1944)
!1944 = !{!1945, !1946}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1943, file: !1936, line: 47, baseType: !1942, size: 64)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1943, file: !1936, line: 48, baseType: !1947, size: 256, offset: 64)
!1947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1948)
!1948 = !{!1949, !1951, !1952, !1957}
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1947, file: !135, line: 1884, baseType: !1950, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1947, size: 64)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1947, file: !135, line: 1885, baseType: !1950, size: 64, offset: 64)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1947, file: !135, line: 1891, baseType: !1953, size: 64, offset: 128)
!1953 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1947, file: !135, line: 1891, size: 64, elements: !1954)
!1954 = !{!1955, !1956}
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1953, file: !135, line: 1891, baseType: !1905, size: 64)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1953, file: !135, line: 1891, baseType: !1640, size: 64)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1947, file: !135, line: 1892, baseType: !1940, size: 64, offset: 192)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1927, file: !611, line: 359, baseType: !1959, size: 64, offset: 384)
!1959 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1640, size: 64, elements: !1736)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1907, file: !611, line: 740, baseType: !1961, size: 512)
!1961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !611, line: 365, size: 512, elements: !1962)
!1962 = !{!1963, !1964, !1965}
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1961, file: !611, line: 368, baseType: !1930, size: 384)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1961, file: !611, line: 373, baseType: !1640, size: 64, offset: 384)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1961, file: !611, line: 374, baseType: !1640, size: 64, offset: 448)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1907, file: !611, line: 741, baseType: !1967, size: 576)
!1967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !611, line: 380, size: 576, elements: !1968)
!1968 = !{!1969, !1970}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1967, file: !611, line: 383, baseType: !1961, size: 512)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1967, file: !611, line: 389, baseType: !1959, size: 64, offset: 512)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1907, file: !611, line: 742, baseType: !1972, size: 320)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !611, line: 395, size: 320, elements: !1973)
!1973 = !{!1974, !1975}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1972, file: !611, line: 397, baseType: !1910, size: 256)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1972, file: !611, line: 400, baseType: !1895, size: 64, offset: 256)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1907, file: !611, line: 743, baseType: !1977, size: 448)
!1977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !611, line: 406, size: 448, elements: !1978)
!1978 = !{!1979, !1980, !1981, !1982}
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1977, file: !611, line: 408, baseType: !1910, size: 256)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1977, file: !611, line: 412, baseType: !1640, size: 64, offset: 256)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1977, file: !611, line: 420, baseType: !1640, size: 64, offset: 320)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1977, file: !611, line: 423, baseType: !1895, size: 64, offset: 384)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1907, file: !611, line: 744, baseType: !1984, size: 384)
!1984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !611, line: 429, size: 384, elements: !1985)
!1985 = !{!1986, !1987, !1988}
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1984, file: !611, line: 431, baseType: !1910, size: 256)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1984, file: !611, line: 434, baseType: !1640, size: 64, offset: 256)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1984, file: !611, line: 437, baseType: !1895, size: 64, offset: 320)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1907, file: !611, line: 745, baseType: !1990, size: 384)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !611, line: 443, size: 384, elements: !1991)
!1991 = !{!1992, !1993, !1994}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1990, file: !611, line: 445, baseType: !1910, size: 256)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1990, file: !611, line: 449, baseType: !1640, size: 64, offset: 256)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1990, file: !611, line: 453, baseType: !1895, size: 64, offset: 320)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1907, file: !611, line: 746, baseType: !1996, size: 320)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !611, line: 459, size: 320, elements: !1997)
!1997 = !{!1998, !1999}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1996, file: !611, line: 461, baseType: !1910, size: 256)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1996, file: !611, line: 464, baseType: !1640, size: 64, offset: 256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1907, file: !611, line: 747, baseType: !2001, size: 768)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !611, line: 469, size: 768, elements: !2002)
!2002 = !{!2003, !2004, !2005, !2006, !2007}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2001, file: !611, line: 471, baseType: !1910, size: 256)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2001, file: !611, line: 474, baseType: !7, size: 32, offset: 256)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2001, file: !611, line: 475, baseType: !7, size: 32, offset: 288)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2001, file: !611, line: 478, baseType: !1640, size: 64, offset: 320)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2001, file: !611, line: 481, baseType: !2008, size: 384, offset: 384)
!2008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2009, size: 384, elements: !1736)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !2010)
!2010 = !{!2011, !2012, !2013}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2009, file: !135, line: 1920, baseType: !1947, size: 256)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2009, file: !135, line: 1921, baseType: !1640, size: 64, offset: 256)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2009, file: !135, line: 1922, baseType: !1763, size: 32, offset: 320)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1907, file: !611, line: 748, baseType: !2015, size: 320)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !611, line: 487, size: 320, elements: !2016)
!2016 = !{!2017, !2018}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2015, file: !611, line: 490, baseType: !1910, size: 256)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2015, file: !611, line: 494, baseType: !1560, size: 32, offset: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1907, file: !611, line: 749, baseType: !2020, size: 384)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !611, line: 500, size: 384, elements: !2021)
!2021 = !{!2022, !2023, !2024}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2020, file: !611, line: 502, baseType: !1910, size: 256)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2020, file: !611, line: 506, baseType: !1895, size: 64, offset: 256)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2020, file: !611, line: 510, baseType: !1895, size: 64, offset: 320)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1907, file: !611, line: 750, baseType: !2026, size: 320)
!2026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !611, line: 529, size: 320, elements: !2027)
!2027 = !{!2028, !2029}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2026, file: !611, line: 531, baseType: !1910, size: 256)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2026, file: !611, line: 540, baseType: !1895, size: 64, offset: 256)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1907, file: !611, line: 751, baseType: !2031, size: 704)
!2031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !611, line: 546, size: 704, elements: !2032)
!2032 = !{!2033, !2034, !2035, !2036, !2037, !2038, !2039}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2031, file: !611, line: 549, baseType: !1961, size: 512)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2031, file: !611, line: 553, baseType: !1839, size: 64, offset: 512)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2031, file: !611, line: 557, baseType: !1755, size: 8, offset: 576)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2031, file: !611, line: 558, baseType: !1755, size: 8, offset: 584)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2031, file: !611, line: 559, baseType: !1755, size: 8, offset: 592)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2031, file: !611, line: 560, baseType: !1755, size: 8, offset: 600)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2031, file: !611, line: 566, baseType: !1959, size: 64, offset: 640)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1907, file: !611, line: 752, baseType: !2041, size: 384)
!2041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !611, line: 571, size: 384, elements: !2042)
!2042 = !{!2043, !2044}
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2041, file: !611, line: 573, baseType: !1972, size: 320)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2041, file: !611, line: 577, baseType: !1640, size: 64, offset: 320)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1907, file: !611, line: 753, baseType: !2046, size: 576)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !611, line: 600, size: 576, elements: !2047)
!2047 = !{!2048, !2049, !2050, !2053, !2062}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2046, file: !611, line: 602, baseType: !1972, size: 320)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2046, file: !611, line: 605, baseType: !1640, size: 64, offset: 320)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2046, file: !611, line: 609, baseType: !2051, size: 64, offset: 384)
!2051 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2052, line: 46, baseType: !1591)
!2052 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2046, file: !611, line: 612, baseType: !2054, size: 64, offset: 448)
!2054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !611, line: 581, size: 320, elements: !2056)
!2056 = !{!2057, !2058, !2059, !2060, !2061}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2055, file: !611, line: 583, baseType: !134, size: 32)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2055, file: !611, line: 586, baseType: !1640, size: 64, offset: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2055, file: !611, line: 589, baseType: !1640, size: 64, offset: 128)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2055, file: !611, line: 592, baseType: !1640, size: 64, offset: 192)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2055, file: !611, line: 595, baseType: !1640, size: 64, offset: 256)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2046, file: !611, line: 616, baseType: !1895, size: 64, offset: 512)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1907, file: !611, line: 754, baseType: !2064, size: 512)
!2064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !611, line: 622, size: 512, elements: !2065)
!2065 = !{!2066, !2067, !2068, !2069}
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2064, file: !611, line: 624, baseType: !1972, size: 320)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2064, file: !611, line: 628, baseType: !1640, size: 64, offset: 320)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2064, file: !611, line: 632, baseType: !1640, size: 64, offset: 384)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2064, file: !611, line: 636, baseType: !1640, size: 64, offset: 448)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1907, file: !611, line: 755, baseType: !2071, size: 704)
!2071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !611, line: 642, size: 704, elements: !2072)
!2072 = !{!2073, !2074, !2075, !2076}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2071, file: !611, line: 644, baseType: !2064, size: 512)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2071, file: !611, line: 648, baseType: !1640, size: 64, offset: 512)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2071, file: !611, line: 652, baseType: !1640, size: 64, offset: 576)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2071, file: !611, line: 653, baseType: !1640, size: 64, offset: 640)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1907, file: !611, line: 756, baseType: !2078, size: 448)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !611, line: 663, size: 448, elements: !2079)
!2079 = !{!2080, !2081, !2082}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2078, file: !611, line: 665, baseType: !1972, size: 320)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2078, file: !611, line: 668, baseType: !1640, size: 64, offset: 320)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2078, file: !611, line: 673, baseType: !1640, size: 64, offset: 384)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1907, file: !611, line: 757, baseType: !2084, size: 384)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !611, line: 694, size: 384, elements: !2085)
!2085 = !{!2086, !2087}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2084, file: !611, line: 696, baseType: !1972, size: 320)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2084, file: !611, line: 699, baseType: !1640, size: 64, offset: 320)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1907, file: !611, line: 758, baseType: !2089, size: 384)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !611, line: 681, size: 384, elements: !2090)
!2090 = !{!2091, !2092, !2093}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2089, file: !611, line: 683, baseType: !1910, size: 256)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2089, file: !611, line: 686, baseType: !1640, size: 64, offset: 256)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2089, file: !611, line: 689, baseType: !1640, size: 64, offset: 320)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1907, file: !611, line: 759, baseType: !2095, size: 384)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !611, line: 707, size: 384, elements: !2096)
!2096 = !{!2097, !2098, !2099}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2095, file: !611, line: 709, baseType: !1910, size: 256)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2095, file: !611, line: 712, baseType: !1640, size: 64, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2095, file: !611, line: 712, baseType: !1640, size: 64, offset: 320)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1907, file: !611, line: 760, baseType: !2101, size: 320)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !611, line: 718, size: 320, elements: !2102)
!2102 = !{!2103, !2104}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2101, file: !611, line: 720, baseType: !1910, size: 256)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2101, file: !611, line: 723, baseType: !1640, size: 64, offset: 256)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1902, file: !611, line: 138, baseType: !1901, size: 64, offset: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1902, file: !611, line: 139, baseType: !1901, size: 64, offset: 128)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1897, file: !611, line: 146, baseType: !1900, size: 64, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1897, file: !611, line: 152, baseType: !1895, size: 64, offset: 128)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1892, file: !330, line: 130, baseType: !1813, size: 64)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1887, file: !330, line: 134, baseType: !1630, size: 64, offset: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1887, file: !330, line: 137, baseType: !1640, size: 64, offset: 256)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1887, file: !330, line: 138, baseType: !1763, size: 32, offset: 320)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1887, file: !330, line: 142, baseType: !7, size: 32, offset: 352)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1887, file: !330, line: 144, baseType: !1560, size: 32, offset: 384)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1887, file: !330, line: 145, baseType: !1560, size: 32, offset: 416)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1887, file: !330, line: 146, baseType: !2117, size: 64, offset: 448)
!2117 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !330, line: 119, baseType: !1608)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1870, file: !330, line: 220, baseType: !1873, size: 64, offset: 64)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1870, file: !330, line: 223, baseType: !1630, size: 64, offset: 128)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1870, file: !330, line: 226, baseType: !2121, size: 64, offset: 192)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 185, flags: DIFlagFwdDecl)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1870, file: !330, line: 229, baseType: !2124, size: 128, offset: 256)
!2124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2125, size: 128, elements: !1592)
!2125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2126, size: 64)
!2126 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !330, line: 229, flags: DIFlagFwdDecl)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1870, file: !330, line: 232, baseType: !1869, size: 64, offset: 384)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1870, file: !330, line: 233, baseType: !1869, size: 64, offset: 448)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1870, file: !330, line: 238, baseType: !2130, size: 64, offset: 512)
!2130 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !330, line: 235, size: 64, elements: !2131)
!2131 = !{!2132, !2138}
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2130, file: !330, line: 236, baseType: !2133, size: 64)
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2134, size: 64)
!2134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !330, line: 273, size: 128, elements: !2135)
!2135 = !{!2136, !2137}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2134, file: !330, line: 275, baseType: !1895, size: 64)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2134, file: !330, line: 278, baseType: !1895, size: 64, offset: 64)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2130, file: !330, line: 237, baseType: !2139, size: 64)
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !330, line: 259, size: 320, elements: !2141)
!2141 = !{!2142, !2143, !2144, !2145, !2146}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2140, file: !330, line: 261, baseType: !1813, size: 64)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2140, file: !330, line: 262, baseType: !1813, size: 64, offset: 64)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2140, file: !330, line: 266, baseType: !1813, size: 64, offset: 128)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2140, file: !330, line: 267, baseType: !1813, size: 64, offset: 192)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2140, file: !330, line: 270, baseType: !1560, size: 32, offset: 256)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1870, file: !330, line: 241, baseType: !2117, size: 64, offset: 576)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1870, file: !330, line: 244, baseType: !1560, size: 32, offset: 640)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1870, file: !330, line: 247, baseType: !1560, size: 32, offset: 672)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1870, file: !330, line: 250, baseType: !1560, size: 32, offset: 704)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1870, file: !330, line: 253, baseType: !1560, size: 32, offset: 736)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1870, file: !330, line: 256, baseType: !1560, size: 32, offset: 768)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1834, file: !1816, line: 179, baseType: !2154, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1816, line: 150, baseType: !2156)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1816, line: 142, size: 320, elements: !2157)
!2157 = !{!2158, !2159, !2160, !2161, !2164, !2165}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2156, file: !1816, line: 144, baseType: !1640, size: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2156, file: !1816, line: 145, baseType: !1813, size: 64, offset: 64)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2156, file: !1816, line: 146, baseType: !1813, size: 64, offset: 128)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2156, file: !1816, line: 147, baseType: !2162, size: 32, offset: 192)
!2162 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2163, line: 31, baseType: !1560)
!2163 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2156, file: !1816, line: 148, baseType: !7, size: 32, offset: 224)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2156, file: !1816, line: 149, baseType: !1755, size: 8, offset: 256)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1834, file: !1816, line: 180, baseType: !2167, size: 64)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1816, line: 162, baseType: !2169)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1816, line: 159, size: 128, elements: !2170)
!2170 = !{!2171, !2172}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2169, file: !1816, line: 160, baseType: !1640, size: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2169, file: !1816, line: 161, baseType: !1608, size: 64, offset: 64)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1834, file: !1816, line: 181, baseType: !2174, size: 64)
!2174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2175, size: 64)
!2175 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1816, line: 181, flags: DIFlagFwdDecl)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1829, file: !1816, line: 317, baseType: !2177, size: 64)
!2177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1608, size: 64, elements: !1736)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1829, file: !1816, line: 318, baseType: !2179, size: 320)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1816, line: 188, size: 320, elements: !2180)
!2180 = !{!2181, !2183, !2206}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2179, file: !1816, line: 190, baseType: !2182, size: 192)
!2182 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1833, size: 192, elements: !1711)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2179, file: !1816, line: 193, baseType: !2184, size: 64, offset: 192)
!2184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2185, size: 64)
!2185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1816, line: 206, size: 320, elements: !2186)
!2186 = !{!2187, !2191, !2192, !2193, !2205}
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2185, file: !1816, line: 208, baseType: !2188, size: 64)
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1574, line: 62, baseType: !2190)
!2190 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1574, line: 61, flags: DIFlagFwdDecl)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2185, file: !1816, line: 211, baseType: !7, size: 32, offset: 64)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2185, file: !1816, line: 214, baseType: !1608, size: 64, offset: 128)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2185, file: !1816, line: 224, baseType: !2194, size: 64, offset: 192)
!2194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!2195 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1816, line: 202, baseType: !2196)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1816, line: 202, size: 128, elements: !2197)
!2197 = !{!2198}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2196, file: !1816, line: 202, baseType: !2199, size: 128)
!2199 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1816, line: 200, baseType: !2200)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1816, line: 200, size: 128, elements: !2201)
!2201 = !{!2202, !2203, !2204}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2200, file: !1816, line: 200, baseType: !7, size: 32)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2200, file: !1816, line: 200, baseType: !7, size: 32, offset: 32)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2200, file: !1816, line: 200, baseType: !1849, size: 64, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2185, file: !1816, line: 234, baseType: !2194, size: 64, offset: 256)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2179, file: !1816, line: 197, baseType: !1608, size: 64, offset: 256)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1829, file: !1816, line: 319, baseType: !1700, size: 256)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1829, file: !1816, line: 320, baseType: !1719, size: 192)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1642, file: !135, line: 3384, baseType: !2210, size: 1472)
!2210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2211)
!2211 = !{!2212, !2233, !2234, !2235, !2236}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2210, file: !135, line: 3115, baseType: !2213, size: 1216)
!2213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2214)
!2214 = !{!2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2213, file: !135, line: 2985, baseType: !1809, size: 960)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2213, file: !135, line: 2986, baseType: !1640, size: 64, offset: 960)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2213, file: !135, line: 2987, baseType: !1640, size: 64, offset: 1024)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2213, file: !135, line: 2988, baseType: !1640, size: 64, offset: 1088)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2213, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2213, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2213, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2213, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2213, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2213, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2213, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2213, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2213, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2213, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2213, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2213, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2213, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2213, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2210, file: !135, line: 3117, baseType: !1640, size: 64, offset: 1216)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2210, file: !135, line: 3119, baseType: !1640, size: 64, offset: 1280)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2210, file: !135, line: 3121, baseType: !1640, size: 64, offset: 1344)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2210, file: !135, line: 3123, baseType: !1640, size: 64, offset: 1408)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1642, file: !135, line: 3385, baseType: !2238, size: 1088)
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2239)
!2239 = !{!2240, !2241, !2242}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2238, file: !135, line: 2875, baseType: !1809, size: 960)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2238, file: !135, line: 2876, baseType: !1813, size: 64, offset: 960)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2238, file: !135, line: 2877, baseType: !2243, size: 64, offset: 1024)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2245, line: 172, size: 128, elements: !2246)
!2245 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2246 = !{!2247, !2248, !2249, !2250, !2251, !2252, !2253}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2244, file: !2245, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2244, file: !2245, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2244, file: !2245, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2244, file: !2245, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2244, file: !2245, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2244, file: !2245, line: 195, baseType: !7, size: 32, offset: 32)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2244, file: !2245, line: 199, baseType: !1640, size: 64, offset: 64)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1642, file: !135, line: 3386, baseType: !2213, size: 1216)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1642, file: !135, line: 3387, baseType: !2256, size: 1280)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2257)
!2257 = !{!2258, !2259}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2256, file: !135, line: 3094, baseType: !2213, size: 1216)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2256, file: !135, line: 3095, baseType: !2243, size: 64, offset: 1216)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1642, file: !135, line: 3388, baseType: !2261, size: 1216)
!2261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2262)
!2262 = !{!2263, !2264, !2265, !2266, !2267, !2268}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2261, file: !135, line: 2825, baseType: !1771, size: 896)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2261, file: !135, line: 2827, baseType: !1640, size: 64, offset: 896)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2261, file: !135, line: 2828, baseType: !1640, size: 64, offset: 960)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2261, file: !135, line: 2829, baseType: !1640, size: 64, offset: 1024)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2261, file: !135, line: 2830, baseType: !1640, size: 64, offset: 1088)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2261, file: !135, line: 2831, baseType: !1640, size: 64, offset: 1152)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1642, file: !135, line: 3389, baseType: !2270, size: 1024)
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2271)
!2271 = !{!2272, !2273, !2274}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2270, file: !135, line: 2851, baseType: !1809, size: 960)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2270, file: !135, line: 2852, baseType: !1560, size: 32, offset: 960)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2270, file: !135, line: 2853, baseType: !1560, size: 32, offset: 992)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1642, file: !135, line: 3390, baseType: !2276, size: 1024)
!2276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2277)
!2277 = !{!2278, !2279}
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2276, file: !135, line: 2858, baseType: !1809, size: 960)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2276, file: !135, line: 2859, baseType: !2243, size: 64, offset: 960)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1642, file: !135, line: 3391, baseType: !2281, size: 960)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2282)
!2282 = !{!2283}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2281, file: !135, line: 2863, baseType: !1809, size: 960)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1642, file: !135, line: 3392, baseType: !2285, size: 1472)
!2285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2286)
!2286 = !{!2287}
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2285, file: !135, line: 3305, baseType: !2210, size: 1472)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1642, file: !135, line: 3393, baseType: !2289, size: 1792)
!2289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2290)
!2290 = !{!2291, !2292, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521}
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2289, file: !135, line: 3249, baseType: !2210, size: 1472)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2289, file: !135, line: 3251, baseType: !2293, size: 64, offset: 1472)
!2293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2295, line: 463, size: 1152, elements: !2296)
!2295 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2296 = !{!2297, !2300, !2331, !2332, !2442, !2445, !2446, !2447, !2448, !2449, !2450, !2474, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2294, file: !2295, line: 464, baseType: !2298, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2299, size: 64)
!2299 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2295, line: 464, flags: DIFlagFwdDecl)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2294, file: !2295, line: 467, baseType: !2301, size: 64, offset: 64)
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2302, size: 64)
!2302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !330, line: 374, size: 640, elements: !2303)
!2303 = !{!2304, !2306, !2307, !2320, !2321, !2322, !2323, !2324, !2325, !2327, !2329, !2330}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2302, file: !330, line: 377, baseType: !2305, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1574, line: 111, baseType: !1869)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2302, file: !330, line: 378, baseType: !2305, size: 64, offset: 64)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2302, file: !330, line: 381, baseType: !2308, size: 64, offset: 128)
!2308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2309, size: 64)
!2309 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !330, line: 282, baseType: !2310)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !330, line: 282, size: 128, elements: !2311)
!2311 = !{!2312}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2310, file: !330, line: 282, baseType: !2313, size: 128)
!2313 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !330, line: 281, baseType: !2314)
!2314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !330, line: 281, size: 128, elements: !2315)
!2315 = !{!2316, !2317, !2318}
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2314, file: !330, line: 281, baseType: !7, size: 32)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2314, file: !330, line: 281, baseType: !7, size: 32, offset: 32)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2314, file: !330, line: 281, baseType: !2319, size: 64, offset: 64)
!2319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2305, size: 64, elements: !1736)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2302, file: !330, line: 384, baseType: !1560, size: 32, offset: 192)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2302, file: !330, line: 387, baseType: !1560, size: 32, offset: 224)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2302, file: !330, line: 390, baseType: !1560, size: 32, offset: 256)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2302, file: !330, line: 394, baseType: !2308, size: 64, offset: 320)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2302, file: !330, line: 396, baseType: !329, size: 32, offset: 384)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2302, file: !330, line: 399, baseType: !2326, size: 64, offset: 416)
!2326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !335, size: 64, elements: !1592)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2302, file: !330, line: 402, baseType: !2328, size: 64, offset: 480)
!2328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1592)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2302, file: !330, line: 406, baseType: !1560, size: 32, offset: 544)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2302, file: !330, line: 409, baseType: !1560, size: 32, offset: 576)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2294, file: !2295, line: 470, baseType: !1896, size: 64, offset: 128)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2294, file: !2295, line: 473, baseType: !2333, size: 64, offset: 192)
!2333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2334, size: 64)
!2334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2245, line: 39, size: 1152, elements: !2335)
!2335 = !{!2336, !2385, !2398, !2410, !2411, !2422, !2423, !2424, !2425, !2426, !2427, !2428}
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2334, file: !2245, line: 41, baseType: !2337, size: 64)
!2337 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !676, line: 144, baseType: !2338)
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!2339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !676, line: 100, size: 896, elements: !2340)
!2340 = !{!2341, !2349, !2354, !2359, !2361, !2362, !2363, !2364, !2365, !2366, !2371, !2373, !2374, !2379, !2384}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2339, file: !676, line: 102, baseType: !2342, size: 64)
!2342 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !676, line: 52, baseType: !2343)
!2343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2344, size: 64)
!2344 = !DISubroutineType(types: !2345)
!2345 = !{!2346, !2347}
!2346 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !676, line: 47, baseType: !7)
!2347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2348, size: 64)
!2348 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2339, file: !676, line: 105, baseType: !2350, size: 64, offset: 64)
!2350 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !676, line: 59, baseType: !2351)
!2351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2352, size: 64)
!2352 = !DISubroutineType(types: !2353)
!2353 = !{!1560, !2347, !2347}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2339, file: !676, line: 108, baseType: !2355, size: 64, offset: 128)
!2355 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !676, line: 63, baseType: !2356)
!2356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2357 = !DISubroutineType(types: !2358)
!2358 = !{null, !1630}
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2339, file: !676, line: 111, baseType: !2360, size: 64, offset: 192)
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1630, size: 64)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2339, file: !676, line: 114, baseType: !2051, size: 64, offset: 256)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2339, file: !676, line: 117, baseType: !2051, size: 64, offset: 320)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2339, file: !676, line: 120, baseType: !2051, size: 64, offset: 384)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2339, file: !676, line: 124, baseType: !7, size: 32, offset: 448)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2339, file: !676, line: 128, baseType: !7, size: 32, offset: 480)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2339, file: !676, line: 131, baseType: !2367, size: 64, offset: 512)
!2367 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !676, line: 75, baseType: !2368)
!2368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2369, size: 64)
!2369 = !DISubroutineType(types: !2370)
!2370 = !{!1630, !2051, !2051}
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2339, file: !676, line: 132, baseType: !2372, size: 64, offset: 576)
!2372 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !676, line: 78, baseType: !2356)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2339, file: !676, line: 135, baseType: !1630, size: 64, offset: 640)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2339, file: !676, line: 136, baseType: !2375, size: 64, offset: 704)
!2375 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !676, line: 82, baseType: !2376)
!2376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2377, size: 64)
!2377 = !DISubroutineType(types: !2378)
!2378 = !{!1630, !1630, !2051, !2051}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2339, file: !676, line: 137, baseType: !2380, size: 64, offset: 768)
!2380 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !676, line: 83, baseType: !2381)
!2381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2382, size: 64)
!2382 = !DISubroutineType(types: !2383)
!2383 = !{null, !1630, !1630}
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2339, file: !676, line: 141, baseType: !7, size: 32, offset: 832)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2334, file: !2245, line: 48, baseType: !2386, size: 64, offset: 64)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !611, line: 35, baseType: !2388)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !611, line: 35, size: 128, elements: !2389)
!2389 = !{!2390}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2388, file: !611, line: 35, baseType: !2391, size: 128)
!2391 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !611, line: 33, baseType: !2392)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !611, line: 33, size: 128, elements: !2393)
!2393 = !{!2394, !2395, !2396}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2392, file: !611, line: 33, baseType: !7, size: 32)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2392, file: !611, line: 33, baseType: !7, size: 32, offset: 32)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2392, file: !611, line: 33, baseType: !2397, size: 64, offset: 64)
!2397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1905, size: 64, elements: !1736)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2334, file: !2245, line: 51, baseType: !2399, size: 64, offset: 128)
!2399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2400, size: 64)
!2400 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2401)
!2401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2402)
!2402 = !{!2403}
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2401, file: !135, line: 183, baseType: !2404, size: 128)
!2404 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2405)
!2405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2406)
!2406 = !{!2407, !2408, !2409}
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2405, file: !135, line: 182, baseType: !7, size: 32)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2405, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2405, file: !135, line: 182, baseType: !1959, size: 64, offset: 64)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2334, file: !2245, line: 54, baseType: !1640, size: 64, offset: 192)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2334, file: !2245, line: 57, baseType: !2412, size: 128, offset: 256)
!2412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2413, line: 31, size: 128, elements: !2414)
!2413 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2414 = !{!2415, !2416, !2417, !2418, !2419, !2420, !2421}
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2412, file: !2413, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2412, file: !2413, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2412, file: !2413, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2412, file: !2413, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2412, file: !2413, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2412, file: !2413, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2412, file: !2413, line: 56, baseType: !1573, size: 64, offset: 64)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2334, file: !2245, line: 60, baseType: !2412, size: 128, offset: 384)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2334, file: !2245, line: 64, baseType: !1568, size: 64, offset: 512)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2334, file: !2245, line: 67, baseType: !1640, size: 64, offset: 576)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2334, file: !2245, line: 73, baseType: !2337, size: 64, offset: 640)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2334, file: !2245, line: 77, baseType: !1573, size: 64, offset: 704)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2334, file: !2245, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2334, file: !2245, line: 82, baseType: !2429, size: 320, offset: 832)
!2429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1936, line: 62, size: 320, elements: !2430)
!2430 = !{!2431, !2437, !2438, !2439, !2440, !2441}
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2429, file: !1936, line: 63, baseType: !2432, size: 64)
!2432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2433, size: 64)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1936, line: 56, size: 128, elements: !2434)
!2434 = !{!2435, !2436}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2433, file: !1936, line: 57, baseType: !2432, size: 64)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2433, file: !1936, line: 58, baseType: !1735, size: 8, offset: 64)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2429, file: !1936, line: 64, baseType: !7, size: 32, offset: 64)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2429, file: !1936, line: 66, baseType: !7, size: 32, offset: 96)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2429, file: !1936, line: 68, baseType: !1755, size: 8, offset: 128)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2429, file: !1936, line: 70, baseType: !1934, size: 64, offset: 192)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2429, file: !1936, line: 71, baseType: !1942, size: 64, offset: 256)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2294, file: !2295, line: 476, baseType: !2443, size: 64, offset: 256)
!2443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!2444 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2295, line: 476, flags: DIFlagFwdDecl)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2294, file: !2295, line: 479, baseType: !2337, size: 64, offset: 320)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2294, file: !2295, line: 484, baseType: !1640, size: 64, offset: 384)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2294, file: !2295, line: 488, baseType: !1640, size: 64, offset: 448)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2294, file: !2295, line: 493, baseType: !1640, size: 64, offset: 512)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2294, file: !2295, line: 496, baseType: !1640, size: 64, offset: 576)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2294, file: !2295, line: 501, baseType: !2451, size: 64, offset: 640)
!2451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2452, size: 64)
!2452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !341, line: 2355, size: 576, elements: !2453)
!2453 = !{!2454, !2457, !2458, !2459, !2460, !2462, !2463, !2468, !2469, !2470, !2471, !2472, !2473}
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2452, file: !341, line: 2356, baseType: !2455, size: 64)
!2455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2456, size: 64)
!2456 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !341, line: 2356, flags: DIFlagFwdDecl)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2452, file: !341, line: 2357, baseType: !1839, size: 64, offset: 64)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2452, file: !341, line: 2358, baseType: !1560, size: 32, offset: 128)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2452, file: !341, line: 2359, baseType: !1560, size: 32, offset: 160)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2452, file: !341, line: 2360, baseType: !2461, size: 128, offset: 192)
!2461 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1560, size: 128, elements: !1619)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2452, file: !341, line: 2364, baseType: !1560, size: 32, offset: 320)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2452, file: !341, line: 2367, baseType: !2464, size: 128, offset: 384)
!2464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !341, line: 2349, size: 128, elements: !2465)
!2465 = !{!2466, !2467}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2464, file: !341, line: 2351, baseType: !1813, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2464, file: !341, line: 2352, baseType: !1608, size: 64, offset: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2452, file: !341, line: 2371, baseType: !340, size: 32, offset: 512)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2452, file: !341, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2452, file: !341, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2452, file: !341, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2452, file: !341, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2452, file: !341, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2294, file: !2295, line: 504, baseType: !2475, size: 64, offset: 704)
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2476 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2295, line: 504, flags: DIFlagFwdDecl)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2294, file: !2295, line: 507, baseType: !2337, size: 64, offset: 768)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2294, file: !2295, line: 510, baseType: !1560, size: 32, offset: 832)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2294, file: !2295, line: 513, baseType: !1560, size: 32, offset: 864)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2294, file: !2295, line: 516, baseType: !1763, size: 32, offset: 896)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2294, file: !2295, line: 519, baseType: !1763, size: 32, offset: 928)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2294, file: !2295, line: 522, baseType: !7, size: 32, offset: 960)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2294, file: !2295, line: 523, baseType: !7, size: 32, offset: 992)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2294, file: !2295, line: 528, baseType: !1839, size: 64, offset: 1024)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2294, file: !2295, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2294, file: !2295, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2294, file: !2295, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2294, file: !2295, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2294, file: !2295, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2294, file: !2295, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2294, file: !2295, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2294, file: !2295, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2294, file: !2295, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2294, file: !2295, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2294, file: !2295, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2294, file: !2295, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2294, file: !2295, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2294, file: !2295, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2294, file: !2295, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2294, file: !2295, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2289, file: !135, line: 3254, baseType: !1640, size: 64, offset: 1536)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2289, file: !135, line: 3257, baseType: !1640, size: 64, offset: 1600)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2289, file: !135, line: 3258, baseType: !1640, size: 64, offset: 1664)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2289, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2289, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2289, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2289, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2289, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2289, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2289, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2289, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2289, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2289, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2289, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2289, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2289, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2289, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2289, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2289, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2289, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2289, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1642, file: !135, line: 3394, baseType: !2523, size: 1344)
!2523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2524)
!2524 = !{!2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2523, file: !135, line: 2280, baseType: !1678, size: 192)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2523, file: !135, line: 2281, baseType: !1640, size: 64, offset: 192)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2523, file: !135, line: 2282, baseType: !1640, size: 64, offset: 256)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2523, file: !135, line: 2283, baseType: !1640, size: 64, offset: 320)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2523, file: !135, line: 2284, baseType: !1640, size: 64, offset: 384)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2523, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2523, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2523, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2523, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2523, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2523, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2523, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2523, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2523, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2523, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2523, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2523, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2523, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2523, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2523, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2523, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2523, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2523, file: !135, line: 2306, baseType: !2162, size: 32, offset: 544)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2523, file: !135, line: 2307, baseType: !1640, size: 64, offset: 576)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2523, file: !135, line: 2308, baseType: !1640, size: 64, offset: 640)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2523, file: !135, line: 2314, baseType: !2551, size: 64, offset: 704)
!2551 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2552)
!2552 = !{!2553, !2554, !2555}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2551, file: !135, line: 2310, baseType: !1560, size: 32)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2551, file: !135, line: 2311, baseType: !1839, size: 64)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2551, file: !135, line: 2312, baseType: !2556, size: 64)
!2556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2557, size: 64)
!2557 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2523, file: !135, line: 2315, baseType: !1640, size: 64, offset: 768)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2523, file: !135, line: 2316, baseType: !1640, size: 64, offset: 832)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2523, file: !135, line: 2317, baseType: !1640, size: 64, offset: 896)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2523, file: !135, line: 2318, baseType: !1640, size: 64, offset: 960)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2523, file: !135, line: 2319, baseType: !1640, size: 64, offset: 1024)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2523, file: !135, line: 2320, baseType: !1640, size: 64, offset: 1088)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2523, file: !135, line: 2321, baseType: !1640, size: 64, offset: 1152)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2523, file: !135, line: 2322, baseType: !1640, size: 64, offset: 1216)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2523, file: !135, line: 2324, baseType: !2567, size: 64, offset: 1280)
!2567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!2568 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1642, file: !135, line: 3395, baseType: !2570, size: 320)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2571)
!2571 = !{!2572, !2573, !2574}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2570, file: !135, line: 1470, baseType: !1678, size: 192)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2570, file: !135, line: 1471, baseType: !1640, size: 64, offset: 192)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2570, file: !135, line: 1472, baseType: !1640, size: 64, offset: 256)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1642, file: !135, line: 3396, baseType: !2576, size: 320)
!2576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2577)
!2577 = !{!2578, !2579, !2580}
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2576, file: !135, line: 1483, baseType: !1678, size: 192)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2576, file: !135, line: 1484, baseType: !1560, size: 32, offset: 192)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2576, file: !135, line: 1485, baseType: !1959, size: 64, offset: 256)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1642, file: !135, line: 3397, baseType: !2582, size: 384)
!2582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2583)
!2583 = !{!2584, !2585, !2586, !2587}
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2582, file: !135, line: 1830, baseType: !1678, size: 192)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2582, file: !135, line: 1831, baseType: !1763, size: 32, offset: 192)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2582, file: !135, line: 1832, baseType: !1640, size: 64, offset: 256)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2582, file: !135, line: 1835, baseType: !1959, size: 64, offset: 320)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1642, file: !135, line: 3398, baseType: !2589, size: 704)
!2589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !2590)
!2590 = !{!2591, !2592, !2593, !2594, !2595, !2600}
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2589, file: !135, line: 1899, baseType: !1678, size: 192)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2589, file: !135, line: 1902, baseType: !1640, size: 64, offset: 192)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2589, file: !135, line: 1905, baseType: !1905, size: 64, offset: 256)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2589, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2589, file: !135, line: 1911, baseType: !2596, size: 64, offset: 384)
!2596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2597, size: 64)
!2597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2245, line: 117, size: 128, elements: !2598)
!2598 = !{!2599}
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2597, file: !2245, line: 120, baseType: !2412, size: 128)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2589, file: !135, line: 1914, baseType: !1947, size: 256, offset: 448)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1642, file: !135, line: 3399, baseType: !2602, size: 704)
!2602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !2603)
!2603 = !{!2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614}
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2602, file: !135, line: 2009, baseType: !1678, size: 192)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2602, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2602, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2602, file: !135, line: 2014, baseType: !1763, size: 32, offset: 224)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2602, file: !135, line: 2016, baseType: !1640, size: 64, offset: 256)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2602, file: !135, line: 2017, baseType: !2399, size: 64, offset: 320)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2602, file: !135, line: 2019, baseType: !1640, size: 64, offset: 384)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2602, file: !135, line: 2020, baseType: !1640, size: 64, offset: 448)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2602, file: !135, line: 2021, baseType: !1640, size: 64, offset: 512)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2602, file: !135, line: 2022, baseType: !1640, size: 64, offset: 576)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2602, file: !135, line: 2023, baseType: !1640, size: 64, offset: 640)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1642, file: !135, line: 3400, baseType: !2616, size: 832)
!2616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !2617)
!2617 = !{!2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627}
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2616, file: !135, line: 2431, baseType: !1678, size: 192)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2616, file: !135, line: 2433, baseType: !1640, size: 64, offset: 192)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2616, file: !135, line: 2434, baseType: !1640, size: 64, offset: 256)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2616, file: !135, line: 2435, baseType: !1640, size: 64, offset: 320)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2616, file: !135, line: 2436, baseType: !1640, size: 64, offset: 384)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2616, file: !135, line: 2437, baseType: !2399, size: 64, offset: 448)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2616, file: !135, line: 2438, baseType: !1640, size: 64, offset: 512)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2616, file: !135, line: 2440, baseType: !1640, size: 64, offset: 576)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2616, file: !135, line: 2441, baseType: !1640, size: 64, offset: 640)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2616, file: !135, line: 2443, baseType: !2628, size: 128, offset: 704)
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !2629)
!2629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !2630)
!2630 = !{!2631}
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2629, file: !135, line: 182, baseType: !2404, size: 128)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1642, file: !135, line: 3401, baseType: !2633, size: 320)
!2633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !2634)
!2634 = !{!2635, !2636, !2643}
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2633, file: !135, line: 3329, baseType: !1678, size: 192)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2633, file: !135, line: 3330, baseType: !2637, size: 64, offset: 192)
!2637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2638, size: 64)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !2639)
!2639 = !{!2640, !2641, !2642}
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2638, file: !135, line: 3322, baseType: !2637, size: 64)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2638, file: !135, line: 3323, baseType: !2637, size: 64, offset: 64)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2638, file: !135, line: 3324, baseType: !1640, size: 64, offset: 128)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2633, file: !135, line: 3331, baseType: !2637, size: 64, offset: 256)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1642, file: !135, line: 3402, baseType: !2645, size: 256)
!2645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !2646)
!2646 = !{!2647, !2648}
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2645, file: !135, line: 1541, baseType: !1678, size: 192)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2645, file: !135, line: 1542, baseType: !2649, size: 64, offset: 192)
!2649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2650, size: 64)
!2650 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !2651)
!2651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !2652)
!2652 = !{!2653}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2651, file: !135, line: 1538, baseType: !2654, size: 192)
!2654 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !2655)
!2655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !2656)
!2656 = !{!2657, !2658, !2659}
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2655, file: !135, line: 1537, baseType: !7, size: 32)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2655, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2655, file: !135, line: 1537, baseType: !2660, size: 128, offset: 64)
!2660 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2661, size: 128, elements: !1736)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !2662)
!2662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !2663)
!2663 = !{!2664, !2665}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2662, file: !135, line: 1533, baseType: !1640, size: 64)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2662, file: !135, line: 1534, baseType: !1640, size: 64, offset: 64)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1642, file: !135, line: 3403, baseType: !2667, size: 512)
!2667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !2668)
!2668 = !{!2669, !2670, !2671, !2672, !2678, !2679, !2680}
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2667, file: !135, line: 1939, baseType: !1678, size: 192)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2667, file: !135, line: 1940, baseType: !1763, size: 32, offset: 192)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2667, file: !135, line: 1941, baseType: !345, size: 32, offset: 224)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2667, file: !135, line: 1946, baseType: !2673, size: 32, offset: 256)
!2673 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !2674)
!2674 = !{!2675, !2676, !2677}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2673, file: !135, line: 1943, baseType: !363, size: 32)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2673, file: !135, line: 1944, baseType: !370, size: 32)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2673, file: !135, line: 1945, baseType: !134, size: 32)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2667, file: !135, line: 1950, baseType: !1895, size: 64, offset: 320)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2667, file: !135, line: 1951, baseType: !1895, size: 64, offset: 384)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2667, file: !135, line: 1953, baseType: !1959, size: 64, offset: 448)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1642, file: !135, line: 3404, baseType: !2682, size: 1664)
!2682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !2683)
!2683 = !{!2684, !2685}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2682, file: !135, line: 3338, baseType: !1678, size: 192)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2682, file: !135, line: 3341, baseType: !2686, size: 1472, offset: 192)
!2686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2687, line: 410, size: 1472, elements: !2688)
!2687 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2688 = !{!2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2686, file: !2687, line: 412, baseType: !1560, size: 32)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2686, file: !2687, line: 413, baseType: !1560, size: 32, offset: 32)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2686, file: !2687, line: 414, baseType: !1560, size: 32, offset: 64)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2686, file: !2687, line: 415, baseType: !1560, size: 32, offset: 96)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2686, file: !2687, line: 416, baseType: !1560, size: 32, offset: 128)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2686, file: !2687, line: 417, baseType: !1560, size: 32, offset: 160)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2686, file: !2687, line: 418, baseType: !1755, size: 8, offset: 192)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2686, file: !2687, line: 419, baseType: !1755, size: 8, offset: 200)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2686, file: !2687, line: 420, baseType: !2698, size: 8, offset: 208)
!2698 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2686, file: !2687, line: 421, baseType: !2698, size: 8, offset: 216)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2686, file: !2687, line: 422, baseType: !2698, size: 8, offset: 224)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2686, file: !2687, line: 423, baseType: !2698, size: 8, offset: 232)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2686, file: !2687, line: 424, baseType: !2698, size: 8, offset: 240)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2686, file: !2687, line: 425, baseType: !2698, size: 8, offset: 248)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2686, file: !2687, line: 426, baseType: !2698, size: 8, offset: 256)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2686, file: !2687, line: 427, baseType: !2698, size: 8, offset: 264)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2686, file: !2687, line: 428, baseType: !2698, size: 8, offset: 272)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2686, file: !2687, line: 429, baseType: !2698, size: 8, offset: 280)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2686, file: !2687, line: 430, baseType: !2698, size: 8, offset: 288)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2686, file: !2687, line: 431, baseType: !2698, size: 8, offset: 296)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2686, file: !2687, line: 432, baseType: !2698, size: 8, offset: 304)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2686, file: !2687, line: 433, baseType: !2698, size: 8, offset: 312)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2686, file: !2687, line: 434, baseType: !2698, size: 8, offset: 320)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2686, file: !2687, line: 435, baseType: !2698, size: 8, offset: 328)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2686, file: !2687, line: 436, baseType: !2698, size: 8, offset: 336)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2686, file: !2687, line: 437, baseType: !2698, size: 8, offset: 344)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2686, file: !2687, line: 438, baseType: !2698, size: 8, offset: 352)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2686, file: !2687, line: 439, baseType: !2698, size: 8, offset: 360)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2686, file: !2687, line: 440, baseType: !2698, size: 8, offset: 368)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2686, file: !2687, line: 441, baseType: !2698, size: 8, offset: 376)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2686, file: !2687, line: 442, baseType: !2698, size: 8, offset: 384)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2686, file: !2687, line: 443, baseType: !2698, size: 8, offset: 392)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2686, file: !2687, line: 444, baseType: !2698, size: 8, offset: 400)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2686, file: !2687, line: 445, baseType: !2698, size: 8, offset: 408)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2686, file: !2687, line: 446, baseType: !2698, size: 8, offset: 416)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2686, file: !2687, line: 447, baseType: !2698, size: 8, offset: 424)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2686, file: !2687, line: 448, baseType: !2698, size: 8, offset: 432)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2686, file: !2687, line: 449, baseType: !2698, size: 8, offset: 440)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2686, file: !2687, line: 450, baseType: !2698, size: 8, offset: 448)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2686, file: !2687, line: 451, baseType: !2698, size: 8, offset: 456)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2686, file: !2687, line: 452, baseType: !2698, size: 8, offset: 464)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2686, file: !2687, line: 453, baseType: !2698, size: 8, offset: 472)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2686, file: !2687, line: 454, baseType: !2698, size: 8, offset: 480)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2686, file: !2687, line: 455, baseType: !2698, size: 8, offset: 488)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2686, file: !2687, line: 456, baseType: !2698, size: 8, offset: 496)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2686, file: !2687, line: 457, baseType: !2698, size: 8, offset: 504)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2686, file: !2687, line: 458, baseType: !2698, size: 8, offset: 512)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2686, file: !2687, line: 459, baseType: !2698, size: 8, offset: 520)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2686, file: !2687, line: 460, baseType: !2698, size: 8, offset: 528)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2686, file: !2687, line: 461, baseType: !2698, size: 8, offset: 536)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2686, file: !2687, line: 462, baseType: !2698, size: 8, offset: 544)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2686, file: !2687, line: 463, baseType: !2698, size: 8, offset: 552)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2686, file: !2687, line: 464, baseType: !2698, size: 8, offset: 560)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2686, file: !2687, line: 465, baseType: !2698, size: 8, offset: 568)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2686, file: !2687, line: 466, baseType: !2698, size: 8, offset: 576)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2686, file: !2687, line: 467, baseType: !2698, size: 8, offset: 584)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2686, file: !2687, line: 468, baseType: !2698, size: 8, offset: 592)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2686, file: !2687, line: 469, baseType: !2698, size: 8, offset: 600)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2686, file: !2687, line: 470, baseType: !2698, size: 8, offset: 608)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2686, file: !2687, line: 471, baseType: !2698, size: 8, offset: 616)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2686, file: !2687, line: 472, baseType: !2698, size: 8, offset: 624)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2686, file: !2687, line: 473, baseType: !2698, size: 8, offset: 632)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2686, file: !2687, line: 474, baseType: !2698, size: 8, offset: 640)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2686, file: !2687, line: 475, baseType: !2698, size: 8, offset: 648)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2686, file: !2687, line: 476, baseType: !2698, size: 8, offset: 656)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2686, file: !2687, line: 477, baseType: !2698, size: 8, offset: 664)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2686, file: !2687, line: 478, baseType: !2698, size: 8, offset: 672)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2686, file: !2687, line: 479, baseType: !2698, size: 8, offset: 680)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2686, file: !2687, line: 480, baseType: !2698, size: 8, offset: 688)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2686, file: !2687, line: 481, baseType: !2698, size: 8, offset: 696)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2686, file: !2687, line: 482, baseType: !2698, size: 8, offset: 704)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2686, file: !2687, line: 483, baseType: !2698, size: 8, offset: 712)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2686, file: !2687, line: 484, baseType: !2698, size: 8, offset: 720)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2686, file: !2687, line: 485, baseType: !2698, size: 8, offset: 728)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2686, file: !2687, line: 486, baseType: !2698, size: 8, offset: 736)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2686, file: !2687, line: 487, baseType: !2698, size: 8, offset: 744)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2686, file: !2687, line: 488, baseType: !2698, size: 8, offset: 752)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2686, file: !2687, line: 489, baseType: !2698, size: 8, offset: 760)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2686, file: !2687, line: 490, baseType: !2698, size: 8, offset: 768)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2686, file: !2687, line: 491, baseType: !2698, size: 8, offset: 776)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2686, file: !2687, line: 492, baseType: !2698, size: 8, offset: 784)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2686, file: !2687, line: 493, baseType: !2698, size: 8, offset: 792)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2686, file: !2687, line: 494, baseType: !2698, size: 8, offset: 800)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2686, file: !2687, line: 495, baseType: !2698, size: 8, offset: 808)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2686, file: !2687, line: 496, baseType: !2698, size: 8, offset: 816)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2686, file: !2687, line: 497, baseType: !2698, size: 8, offset: 824)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2686, file: !2687, line: 498, baseType: !2698, size: 8, offset: 832)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2686, file: !2687, line: 499, baseType: !2698, size: 8, offset: 840)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2686, file: !2687, line: 500, baseType: !2698, size: 8, offset: 848)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2686, file: !2687, line: 501, baseType: !2698, size: 8, offset: 856)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2686, file: !2687, line: 502, baseType: !2698, size: 8, offset: 864)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2686, file: !2687, line: 503, baseType: !2698, size: 8, offset: 872)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2686, file: !2687, line: 504, baseType: !2698, size: 8, offset: 880)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2686, file: !2687, line: 505, baseType: !2698, size: 8, offset: 888)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2686, file: !2687, line: 506, baseType: !2698, size: 8, offset: 896)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2686, file: !2687, line: 507, baseType: !2698, size: 8, offset: 904)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2686, file: !2687, line: 508, baseType: !2698, size: 8, offset: 912)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2686, file: !2687, line: 509, baseType: !2698, size: 8, offset: 920)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2686, file: !2687, line: 510, baseType: !2698, size: 8, offset: 928)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2686, file: !2687, line: 511, baseType: !2698, size: 8, offset: 936)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2686, file: !2687, line: 512, baseType: !2698, size: 8, offset: 944)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2686, file: !2687, line: 513, baseType: !2698, size: 8, offset: 952)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2686, file: !2687, line: 514, baseType: !2698, size: 8, offset: 960)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2686, file: !2687, line: 515, baseType: !2698, size: 8, offset: 968)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2686, file: !2687, line: 516, baseType: !2698, size: 8, offset: 976)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2686, file: !2687, line: 517, baseType: !2698, size: 8, offset: 984)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2686, file: !2687, line: 518, baseType: !2698, size: 8, offset: 992)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2686, file: !2687, line: 519, baseType: !2698, size: 8, offset: 1000)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2686, file: !2687, line: 520, baseType: !2698, size: 8, offset: 1008)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2686, file: !2687, line: 521, baseType: !2698, size: 8, offset: 1016)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2686, file: !2687, line: 522, baseType: !2698, size: 8, offset: 1024)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2686, file: !2687, line: 523, baseType: !2698, size: 8, offset: 1032)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2686, file: !2687, line: 524, baseType: !2698, size: 8, offset: 1040)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2686, file: !2687, line: 525, baseType: !2698, size: 8, offset: 1048)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2686, file: !2687, line: 526, baseType: !2698, size: 8, offset: 1056)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2686, file: !2687, line: 527, baseType: !2698, size: 8, offset: 1064)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2686, file: !2687, line: 528, baseType: !2698, size: 8, offset: 1072)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2686, file: !2687, line: 529, baseType: !2698, size: 8, offset: 1080)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2686, file: !2687, line: 530, baseType: !2698, size: 8, offset: 1088)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2686, file: !2687, line: 531, baseType: !2698, size: 8, offset: 1096)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2686, file: !2687, line: 532, baseType: !2698, size: 8, offset: 1104)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2686, file: !2687, line: 533, baseType: !2698, size: 8, offset: 1112)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2686, file: !2687, line: 534, baseType: !2698, size: 8, offset: 1120)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2686, file: !2687, line: 535, baseType: !2698, size: 8, offset: 1128)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2686, file: !2687, line: 536, baseType: !2698, size: 8, offset: 1136)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2686, file: !2687, line: 537, baseType: !2698, size: 8, offset: 1144)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2686, file: !2687, line: 538, baseType: !2698, size: 8, offset: 1152)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2686, file: !2687, line: 539, baseType: !2698, size: 8, offset: 1160)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2686, file: !2687, line: 540, baseType: !2698, size: 8, offset: 1168)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2686, file: !2687, line: 541, baseType: !2698, size: 8, offset: 1176)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2686, file: !2687, line: 542, baseType: !2698, size: 8, offset: 1184)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2686, file: !2687, line: 543, baseType: !2698, size: 8, offset: 1192)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2686, file: !2687, line: 544, baseType: !2698, size: 8, offset: 1200)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2686, file: !2687, line: 545, baseType: !2698, size: 8, offset: 1208)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2686, file: !2687, line: 546, baseType: !2698, size: 8, offset: 1216)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2686, file: !2687, line: 547, baseType: !2698, size: 8, offset: 1224)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2686, file: !2687, line: 548, baseType: !2698, size: 8, offset: 1232)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2686, file: !2687, line: 549, baseType: !2698, size: 8, offset: 1240)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2686, file: !2687, line: 550, baseType: !2698, size: 8, offset: 1248)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2686, file: !2687, line: 551, baseType: !2698, size: 8, offset: 1256)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2686, file: !2687, line: 552, baseType: !2698, size: 8, offset: 1264)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2686, file: !2687, line: 553, baseType: !2698, size: 8, offset: 1272)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2686, file: !2687, line: 554, baseType: !2698, size: 8, offset: 1280)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2686, file: !2687, line: 555, baseType: !2698, size: 8, offset: 1288)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2686, file: !2687, line: 556, baseType: !2698, size: 8, offset: 1296)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2686, file: !2687, line: 557, baseType: !2698, size: 8, offset: 1304)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2686, file: !2687, line: 558, baseType: !2698, size: 8, offset: 1312)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2686, file: !2687, line: 559, baseType: !2698, size: 8, offset: 1320)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2686, file: !2687, line: 560, baseType: !2698, size: 8, offset: 1328)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2686, file: !2687, line: 561, baseType: !2698, size: 8, offset: 1336)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2686, file: !2687, line: 562, baseType: !2698, size: 8, offset: 1344)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2686, file: !2687, line: 563, baseType: !2698, size: 8, offset: 1352)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2686, file: !2687, line: 564, baseType: !2698, size: 8, offset: 1360)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2686, file: !2687, line: 565, baseType: !2698, size: 8, offset: 1368)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2686, file: !2687, line: 566, baseType: !2698, size: 8, offset: 1376)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2686, file: !2687, line: 567, baseType: !2698, size: 8, offset: 1384)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2686, file: !2687, line: 568, baseType: !2698, size: 8, offset: 1392)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2686, file: !2687, line: 569, baseType: !2698, size: 8, offset: 1400)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2686, file: !2687, line: 570, baseType: !2698, size: 8, offset: 1408)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2686, file: !2687, line: 571, baseType: !2698, size: 8, offset: 1416)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2686, file: !2687, line: 572, baseType: !2698, size: 8, offset: 1424)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2686, file: !2687, line: 573, baseType: !2698, size: 8, offset: 1432)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2686, file: !2687, line: 574, baseType: !2698, size: 8, offset: 1440)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1642, file: !135, line: 3405, baseType: !2854, size: 384)
!2854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2855)
!2855 = !{!2856, !2857}
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2854, file: !135, line: 3353, baseType: !1678, size: 192)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2854, file: !135, line: 3356, baseType: !2858, size: 192, offset: 192)
!2858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2687, line: 578, size: 192, elements: !2859)
!2859 = !{!2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870}
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2858, file: !2687, line: 580, baseType: !1560, size: 32)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2858, file: !2687, line: 581, baseType: !1560, size: 32, offset: 32)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2858, file: !2687, line: 582, baseType: !1560, size: 32, offset: 64)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2858, file: !2687, line: 583, baseType: !1560, size: 32, offset: 96)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2858, file: !2687, line: 584, baseType: !1755, size: 8, offset: 128)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2858, file: !2687, line: 585, baseType: !1755, size: 8, offset: 136)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2858, file: !2687, line: 586, baseType: !1755, size: 8, offset: 144)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2858, file: !2687, line: 587, baseType: !1755, size: 8, offset: 152)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2858, file: !2687, line: 588, baseType: !1755, size: 8, offset: 160)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2858, file: !2687, line: 589, baseType: !1755, size: 8, offset: 168)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2858, file: !2687, line: 590, baseType: !1755, size: 8, offset: 176)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "new_local_var_chain", scope: !1562, file: !3, line: 92, baseType: !1640, size: 64, offset: 448)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "debug_var_chain", scope: !1562, file: !3, line: 93, baseType: !1640, size: 64, offset: 512)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "frame_type", scope: !1562, file: !3, line: 94, baseType: !1640, size: 64, offset: 576)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "frame_decl", scope: !1562, file: !3, line: 95, baseType: !1640, size: 64, offset: 640)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "chain_field", scope: !1562, file: !3, line: 96, baseType: !1640, size: 64, offset: 704)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "chain_decl", scope: !1562, file: !3, line: 97, baseType: !1640, size: 64, offset: 768)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "nl_goto_field", scope: !1562, file: !3, line: 98, baseType: !1640, size: 64, offset: 832)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "any_parm_remapped", scope: !1562, file: !3, line: 100, baseType: !1755, size: 8, offset: 896)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "any_tramp_created", scope: !1562, file: !3, line: 101, baseType: !1755, size: 8, offset: 904)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_added", scope: !1562, file: !3, line: 102, baseType: !1615, size: 8, offset: 912)
!2881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!2882 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1907)
!2883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2884, size: 64)
!2884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !611, line: 4652, size: 448, elements: !2885)
!2885 = !{!2886, !2893, !2894, !2897, !2898, !2899, !2900, !2901}
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !2884, file: !611, line: 4655, baseType: !2887, size: 192)
!2887 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !611, line: 265, baseType: !2888)
!2888 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !611, line: 254, size: 192, elements: !2889)
!2889 = !{!2890, !2891, !2892}
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2888, file: !611, line: 257, baseType: !1900, size: 64)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2888, file: !611, line: 263, baseType: !1895, size: 64, offset: 64)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2888, file: !611, line: 264, baseType: !2305, size: 64, offset: 128)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2884, file: !611, line: 4659, baseType: !1630, size: 64, offset: 192)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !2884, file: !611, line: 4664, baseType: !2895, size: 64, offset: 256)
!2895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2896, size: 64)
!2896 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !2884, file: !611, line: 4678, baseType: !1755, size: 8, offset: 320)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !2884, file: !611, line: 4681, baseType: !1755, size: 8, offset: 328)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2884, file: !611, line: 4685, baseType: !1755, size: 8, offset: 336)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !2884, file: !611, line: 4688, baseType: !1755, size: 8, offset: 344)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !2884, file: !611, line: 4694, baseType: !1640, size: 64, offset: 384)
!2902 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2904, size: 64)
!2904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nesting_copy_body_data", file: !3, line: 2115, size: 1280, elements: !2905)
!2905 = !{!2906, !3173}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2904, file: !3, line: 2117, baseType: !2907, size: 1216)
!2907 = !DIDerivedType(tag: DW_TAG_typedef, name: "copy_body_data", file: !1554, line: 129, baseType: !2908)
!2908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "copy_body_data", file: !1554, line: 42, size: 1216, elements: !2909)
!2909 = !{!2910, !2911, !2912, !3141, !3142, !3143, !3144, !3145, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3164, !3165, !3166, !3172}
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "src_fn", scope: !2908, file: !1554, line: 46, baseType: !1640, size: 64)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "dst_fn", scope: !2908, file: !1554, line: 50, baseType: !1640, size: 64, offset: 64)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "src_node", scope: !2908, file: !1554, line: 53, baseType: !2913, size: 64, offset: 128)
!2913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2914, size: 64)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !391, line: 181, size: 2496, elements: !2915)
!2915 = !{!2916, !2917, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !3056, !3078, !3088, !3092, !3118, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2914, file: !391, line: 182, baseType: !1640, size: 64)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2914, file: !391, line: 183, baseType: !2918, size: 64, offset: 64)
!2918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2919, size: 64)
!2919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !391, line: 314, size: 768, elements: !2920)
!2920 = !{!2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2932, !2933, !2934, !2935, !2936, !2937, !2938}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2919, file: !391, line: 316, baseType: !2117, size: 64)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2919, file: !391, line: 317, baseType: !2913, size: 64, offset: 64)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2919, file: !391, line: 318, baseType: !2913, size: 64, offset: 128)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2919, file: !391, line: 319, baseType: !2918, size: 64, offset: 192)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2919, file: !391, line: 320, baseType: !2918, size: 64, offset: 256)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2919, file: !391, line: 321, baseType: !2918, size: 64, offset: 320)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2919, file: !391, line: 322, baseType: !2918, size: 64, offset: 384)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2919, file: !391, line: 323, baseType: !1905, size: 64, offset: 448)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2919, file: !391, line: 324, baseType: !1630, size: 64, offset: 512)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2919, file: !391, line: 327, baseType: !2931, size: 32, offset: 576)
!2931 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !391, line: 312, baseType: !390)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2919, file: !391, line: 330, baseType: !7, size: 32, offset: 608)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2919, file: !391, line: 334, baseType: !1560, size: 32, offset: 640)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2919, file: !391, line: 336, baseType: !1560, size: 32, offset: 672)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2919, file: !391, line: 338, baseType: !2902, size: 16, offset: 704)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2919, file: !391, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2919, file: !391, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2919, file: !391, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2914, file: !391, line: 184, baseType: !2918, size: 64, offset: 128)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2914, file: !391, line: 185, baseType: !2913, size: 64, offset: 192)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2914, file: !391, line: 186, baseType: !2913, size: 64, offset: 256)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2914, file: !391, line: 188, baseType: !2913, size: 64, offset: 320)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2914, file: !391, line: 190, baseType: !2913, size: 64, offset: 384)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2914, file: !391, line: 192, baseType: !2913, size: 64, offset: 448)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2914, file: !391, line: 194, baseType: !2913, size: 64, offset: 512)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2914, file: !391, line: 196, baseType: !2913, size: 64, offset: 576)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2914, file: !391, line: 197, baseType: !2913, size: 64, offset: 640)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2914, file: !391, line: 198, baseType: !2913, size: 64, offset: 704)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2914, file: !391, line: 199, baseType: !2913, size: 64, offset: 768)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2914, file: !391, line: 202, baseType: !2913, size: 64, offset: 832)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2914, file: !391, line: 204, baseType: !2913, size: 64, offset: 896)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2914, file: !391, line: 207, baseType: !2337, size: 64, offset: 960)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2914, file: !391, line: 209, baseType: !1630, size: 64, offset: 1024)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2914, file: !391, line: 214, baseType: !2955, size: 64, offset: 1088)
!2955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2956, size: 64)
!2956 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2295, line: 177, baseType: !2957)
!2957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2295, line: 177, size: 128, elements: !2958)
!2958 = !{!2959}
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2957, file: !2295, line: 177, baseType: !2960, size: 128)
!2960 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2295, line: 176, baseType: !2961)
!2961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2295, line: 176, size: 128, elements: !2962)
!2962 = !{!2963, !2964, !2965}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2961, file: !2295, line: 176, baseType: !7, size: 32)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2961, file: !2295, line: 176, baseType: !7, size: 32, offset: 32)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2961, file: !2295, line: 176, baseType: !2966, size: 64, offset: 64)
!2966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2967, size: 64, elements: !1736)
!2967 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2295, line: 174, baseType: !2968)
!2968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2969, size: 64)
!2969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !414, line: 173, size: 1152, elements: !2970)
!2970 = !{!2971, !2995, !2999, !3022, !3023, !3027, !3032, !3033, !3037}
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2969, file: !414, line: 175, baseType: !2972, size: 640)
!2972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !414, line: 114, size: 640, elements: !2973)
!2973 = !{!2974, !2975, !2976, !2980, !2984, !2986, !2987, !2988, !2990, !2991, !2992, !2993, !2994}
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2972, file: !414, line: 117, baseType: !413, size: 32)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2972, file: !414, line: 121, baseType: !1839, size: 64, offset: 64)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2972, file: !414, line: 125, baseType: !2977, size: 64, offset: 128)
!2977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2978, size: 64)
!2978 = !DISubroutineType(types: !2979)
!2979 = !{!1755}
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2972, file: !414, line: 130, baseType: !2981, size: 64, offset: 192)
!2981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2982, size: 64)
!2982 = !DISubroutineType(types: !2983)
!2983 = !{!7}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2972, file: !414, line: 133, baseType: !2985, size: 64, offset: 256)
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2972, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2972, file: !414, line: 136, baseType: !2985, size: 64, offset: 320)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2972, file: !414, line: 139, baseType: !1560, size: 32, offset: 384)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2972, file: !414, line: 143, baseType: !2989, size: 32, offset: 416)
!2989 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !421, line: 80, baseType: !420)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2972, file: !414, line: 146, baseType: !7, size: 32, offset: 448)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2972, file: !414, line: 147, baseType: !7, size: 32, offset: 480)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2972, file: !414, line: 148, baseType: !7, size: 32, offset: 512)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2972, file: !414, line: 151, baseType: !7, size: 32, offset: 544)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2972, file: !414, line: 152, baseType: !7, size: 32, offset: 576)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2969, file: !414, line: 179, baseType: !2996, size: 64, offset: 640)
!2996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!2997 = !DISubroutineType(types: !2998)
!2998 = !{null}
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2969, file: !414, line: 182, baseType: !3000, size: 64, offset: 704)
!3000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3001, size: 64)
!3001 = !DISubroutineType(types: !3002)
!3002 = !{null, !3003}
!3003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3004, size: 64)
!3004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !391, line: 276, size: 192, elements: !3005)
!3005 = !{!3006, !3007, !3021}
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3004, file: !391, line: 278, baseType: !2337, size: 64)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3004, file: !391, line: 279, baseType: !3008, size: 64, offset: 64)
!3008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3009, size: 64)
!3009 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !391, line: 272, baseType: !3010)
!3010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !391, line: 272, size: 128, elements: !3011)
!3011 = !{!3012}
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3010, file: !391, line: 272, baseType: !3013, size: 128)
!3013 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !391, line: 270, baseType: !3014)
!3014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !391, line: 270, size: 128, elements: !3015)
!3015 = !{!3016, !3017, !3018}
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3014, file: !391, line: 270, baseType: !7, size: 32)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3014, file: !391, line: 270, baseType: !7, size: 32, offset: 32)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3014, file: !391, line: 270, baseType: !3019, size: 64, offset: 64)
!3019 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3020, size: 64, elements: !1736)
!3020 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !391, line: 268, baseType: !2913)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3004, file: !391, line: 280, baseType: !1630, size: 64, offset: 128)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2969, file: !414, line: 187, baseType: !2996, size: 64, offset: 768)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2969, file: !414, line: 188, baseType: !3024, size: 64, offset: 832)
!3024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3025, size: 64)
!3025 = !DISubroutineType(types: !3026)
!3026 = !{null, !2913}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2969, file: !414, line: 191, baseType: !3028, size: 64, offset: 896)
!3028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3029, size: 64)
!3029 = !DISubroutineType(types: !3030)
!3030 = !{null, !2913, !3031}
!3031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1905, size: 64)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2969, file: !414, line: 195, baseType: !7, size: 32, offset: 960)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2969, file: !414, line: 196, baseType: !3034, size: 64, offset: 1024)
!3034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3035 = !DISubroutineType(types: !3036)
!3036 = !{!7, !2913}
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2969, file: !414, line: 197, baseType: !3038, size: 64, offset: 1088)
!3038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3039, size: 64)
!3039 = !DISubroutineType(types: !3040)
!3040 = !{null, !3041}
!3041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3042, size: 64)
!3042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !391, line: 358, size: 320, elements: !3043)
!3043 = !{!3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055}
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3042, file: !391, line: 359, baseType: !1640, size: 64)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3042, file: !391, line: 361, baseType: !3041, size: 64, offset: 64)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3042, file: !391, line: 363, baseType: !3041, size: 64, offset: 128)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3042, file: !391, line: 366, baseType: !3041, size: 64, offset: 192)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3042, file: !391, line: 368, baseType: !1560, size: 32, offset: 256)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3042, file: !391, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3042, file: !391, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3042, file: !391, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3042, file: !391, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3042, file: !391, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3042, file: !391, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3042, file: !391, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2914, file: !391, line: 216, baseType: !3057, size: 320, offset: 1152)
!3057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !391, line: 88, size: 320, elements: !3058)
!3058 = !{!3059, !3062, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077}
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3057, file: !391, line: 90, baseType: !3060, size: 64)
!3060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!3061 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !391, line: 51, flags: DIFlagFwdDecl)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3057, file: !391, line: 92, baseType: !3063, size: 192, offset: 64)
!3063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !391, line: 57, size: 192, elements: !3064)
!3064 = !{!3065, !3066, !3067, !3068, !3069}
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3063, file: !391, line: 60, baseType: !1608, size: 64)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3063, file: !391, line: 63, baseType: !1560, size: 32, offset: 64)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3063, file: !391, line: 65, baseType: !1560, size: 32, offset: 96)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3063, file: !391, line: 67, baseType: !1560, size: 32, offset: 128)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3063, file: !391, line: 69, baseType: !1560, size: 32, offset: 160)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3057, file: !391, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3057, file: !391, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3057, file: !391, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3057, file: !391, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3057, file: !391, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3057, file: !391, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3057, file: !391, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3057, file: !391, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2914, file: !391, line: 217, baseType: !3079, size: 320, offset: 1472)
!3079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !391, line: 126, size: 320, elements: !3080)
!3080 = !{!3081, !3082, !3083, !3084, !3085, !3086, !3087}
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3079, file: !391, line: 128, baseType: !1608, size: 64)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3079, file: !391, line: 130, baseType: !1608, size: 64, offset: 64)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3079, file: !391, line: 134, baseType: !2913, size: 64, offset: 128)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3079, file: !391, line: 137, baseType: !1560, size: 32, offset: 192)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3079, file: !391, line: 138, baseType: !1560, size: 32, offset: 224)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3079, file: !391, line: 141, baseType: !1560, size: 32, offset: 256)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3079, file: !391, line: 144, baseType: !1755, size: 8, offset: 288)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2914, file: !391, line: 218, baseType: !3089, size: 32, offset: 1792)
!3089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !391, line: 150, size: 32, elements: !3090)
!3090 = !{!3091}
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3089, file: !391, line: 151, baseType: !7, size: 32)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2914, file: !391, line: 219, baseType: !3093, size: 192, offset: 1856)
!3093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !391, line: 171, size: 192, elements: !3094)
!3094 = !{!3095, !3116, !3117}
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3093, file: !391, line: 173, baseType: !3096, size: 64)
!3096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3097, size: 64)
!3097 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !391, line: 169, baseType: !3098)
!3098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !391, line: 169, size: 128, elements: !3099)
!3099 = !{!3100}
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3098, file: !391, line: 169, baseType: !3101, size: 128)
!3101 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !391, line: 168, baseType: !3102)
!3102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !391, line: 168, size: 128, elements: !3103)
!3103 = !{!3104, !3105, !3106}
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3102, file: !391, line: 168, baseType: !7, size: 32)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3102, file: !391, line: 168, baseType: !7, size: 32, offset: 32)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3102, file: !391, line: 168, baseType: !3107, size: 64, offset: 64)
!3107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3108, size: 64, elements: !1736)
!3108 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !391, line: 167, baseType: !3109)
!3109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3110, size: 64)
!3110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !391, line: 156, size: 192, elements: !3111)
!3111 = !{!3112, !3113, !3114, !3115}
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3110, file: !391, line: 159, baseType: !1640, size: 64)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3110, file: !391, line: 161, baseType: !1640, size: 64, offset: 64)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3110, file: !391, line: 163, baseType: !1755, size: 8, offset: 128)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3110, file: !391, line: 165, baseType: !1755, size: 8, offset: 136)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3093, file: !391, line: 174, baseType: !1573, size: 64, offset: 64)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3093, file: !391, line: 175, baseType: !1573, size: 64, offset: 128)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2914, file: !391, line: 220, baseType: !3119, size: 256, offset: 2048)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !391, line: 74, size: 256, elements: !3120)
!3120 = !{!3121, !3122, !3123, !3124, !3125, !3126}
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3119, file: !391, line: 76, baseType: !1608, size: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3119, file: !391, line: 77, baseType: !1608, size: 64, offset: 64)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3119, file: !391, line: 78, baseType: !1640, size: 64, offset: 128)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3119, file: !391, line: 79, baseType: !1755, size: 8, offset: 192)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3119, file: !391, line: 80, baseType: !1755, size: 8, offset: 200)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3119, file: !391, line: 82, baseType: !1755, size: 8, offset: 208)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2914, file: !391, line: 223, baseType: !2117, size: 64, offset: 2304)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2914, file: !391, line: 225, baseType: !1560, size: 32, offset: 2368)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2914, file: !391, line: 227, baseType: !1560, size: 32, offset: 2400)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2914, file: !391, line: 231, baseType: !1560, size: 32, offset: 2432)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2914, file: !391, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2914, file: !391, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2914, file: !391, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2914, file: !391, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2914, file: !391, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2914, file: !391, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2914, file: !391, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2914, file: !391, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2914, file: !391, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2914, file: !391, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "dst_node", scope: !2908, file: !1554, line: 56, baseType: !2913, size: 64, offset: 192)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "src_cfun", scope: !2908, file: !1554, line: 61, baseType: !2293, size: 64, offset: 256)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "retvar", scope: !2908, file: !1554, line: 64, baseType: !1640, size: 64, offset: 320)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "decl_map", scope: !2908, file: !1554, line: 68, baseType: !1568, size: 64, offset: 384)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "copy_decl", scope: !2908, file: !1554, line: 71, baseType: !3146, size: 64, offset: 448)
!3146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3147, size: 64)
!3147 = !DISubroutineType(types: !3148)
!3148 = !{!1640, !1640, !3149}
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2908, size: 64)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2908, file: !1554, line: 74, baseType: !1640, size: 64, offset: 512)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_call", scope: !2908, file: !1554, line: 78, baseType: !1905, size: 64, offset: 576)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "eh_lp_nr", scope: !2908, file: !1554, line: 81, baseType: !1560, size: 32, offset: 640)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "eh_map", scope: !2908, file: !1554, line: 85, baseType: !1568, size: 64, offset: 704)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "transform_call_graph_edges", scope: !2908, file: !1554, line: 92, baseType: !1553, size: 32, offset: 768)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "transform_new_cfg", scope: !2908, file: !1554, line: 96, baseType: !1755, size: 8, offset: 800)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "transform_return_to_modify", scope: !2908, file: !1554, line: 101, baseType: !1755, size: 8, offset: 808)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "regimplify", scope: !2908, file: !1554, line: 104, baseType: !1755, size: 8, offset: 816)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "do_not_unshare", scope: !2908, file: !1554, line: 107, baseType: !1755, size: 8, offset: 824)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "remapping_type_depth", scope: !2908, file: !1554, line: 110, baseType: !1560, size: 32, offset: 832)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "transform_lang_insert_block", scope: !2908, file: !1554, line: 113, baseType: !3161, size: 64, offset: 896)
!3161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3162, size: 64)
!3162 = !DISubroutineType(types: !3163)
!3163 = !{null, !1640}
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "statements_to_fold", scope: !2908, file: !1554, line: 116, baseType: !2895, size: 64, offset: 960)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "entry_bb", scope: !2908, file: !1554, line: 119, baseType: !1869, size: 64, offset: 1024)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "debug_stmts", scope: !2908, file: !1554, line: 122, baseType: !3167, size: 64, offset: 1088)
!3167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3168, size: 64)
!3168 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !611, line: 34, baseType: !3169)
!3169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !611, line: 34, size: 128, elements: !3170)
!3170 = !{!3171}
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3169, file: !611, line: 34, baseType: !2391, size: 128)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "debug_map", scope: !2908, file: !1554, line: 128, baseType: !1568, size: 64, offset: 1152)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !2904, file: !3, line: 2118, baseType: !1561, size: 64, offset: 1216)
!3174 = !{!3175, !0, !3189}
!3175 = !DIGlobalVariableExpression(var: !3176, expr: !DIExpression())
!3176 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_tree_nested_h", scope: !2, file: !3177, line: 24, type: !3178, isLocal: false, isDefinition: true)
!3177 = !DIFile(filename: "./gt-tree-nested.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3178 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3179, size: 640, elements: !1592)
!3179 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3180)
!3180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3181, line: 69, size: 320, elements: !3182)
!3181 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3182 = !{!3183, !3184, !3185, !3186, !3188}
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3180, file: !3181, line: 70, baseType: !1630, size: 64)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3180, file: !3181, line: 71, baseType: !2051, size: 64, offset: 64)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3180, file: !3181, line: 72, baseType: !2051, size: 64, offset: 128)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3180, file: !3181, line: 73, baseType: !3187, size: 64, offset: 192)
!3187 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3181, line: 65, baseType: !2356)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3180, file: !3181, line: 74, baseType: !3187, size: 64, offset: 256)
!3189 = !DIGlobalVariableExpression(var: !3190, expr: !DIExpression())
!3190 = distinct !DIGlobalVariable(name: "trampoline_type", scope: !2, file: !3, line: 468, type: !1640, isLocal: true, isDefinition: true)
!3191 = !{i32 7, !"Dwarf Version", i32 4}
!3192 = !{i32 2, !"Debug Info Version", i32 3}
!3193 = !{i32 1, !"wchar_size", i32 4}
!3194 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3195 = distinct !DISubprogram(name: "build_addr", scope: !3, file: !3, line: 167, type: !3196, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{!1640, !1640, !1640}
!3198 = !{}
!3199 = !DILocalVariable(name: "exp", arg: 1, scope: !3195, file: !3, line: 167, type: !1640)
!3200 = !DILocation(line: 167, column: 18, scope: !3195)
!3201 = !DILocalVariable(name: "context", arg: 2, scope: !3195, file: !3, line: 167, type: !1640)
!3202 = !DILocation(line: 167, column: 28, scope: !3195)
!3203 = !DILocalVariable(name: "base", scope: !3195, file: !3, line: 169, type: !1640)
!3204 = !DILocation(line: 169, column: 8, scope: !3195)
!3205 = !DILocation(line: 169, column: 15, scope: !3195)
!3206 = !DILocalVariable(name: "save_context", scope: !3195, file: !3, line: 170, type: !1640)
!3207 = !DILocation(line: 170, column: 8, scope: !3195)
!3208 = !DILocalVariable(name: "retval", scope: !3195, file: !3, line: 171, type: !1640)
!3209 = !DILocation(line: 171, column: 8, scope: !3195)
!3210 = !DILocation(line: 173, column: 3, scope: !3195)
!3211 = !DILocation(line: 173, column: 31, scope: !3195)
!3212 = !DILocation(line: 173, column: 10, scope: !3195)
!3213 = !DILocation(line: 174, column: 12, scope: !3195)
!3214 = !DILocation(line: 174, column: 10, scope: !3195)
!3215 = distinct !{!3215, !3210, !3213}
!3216 = !DILocation(line: 176, column: 7, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 176, column: 7)
!3218 = !DILocation(line: 176, column: 7, scope: !3195)
!3219 = !DILocation(line: 177, column: 5, scope: !3217)
!3220 = !DILocation(line: 177, column: 29, scope: !3217)
!3221 = !DILocation(line: 186, column: 18, scope: !3195)
!3222 = !DILocation(line: 186, column: 16, scope: !3195)
!3223 = !DILocation(line: 187, column: 27, scope: !3195)
!3224 = !DILocation(line: 187, column: 25, scope: !3195)
!3225 = !DILocation(line: 188, column: 12, scope: !3195)
!3226 = !DILocation(line: 188, column: 10, scope: !3195)
!3227 = !DILocation(line: 189, column: 27, scope: !3195)
!3228 = !DILocation(line: 189, column: 25, scope: !3195)
!3229 = !DILocation(line: 190, column: 10, scope: !3195)
!3230 = !DILocation(line: 190, column: 3, scope: !3195)
!3231 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !3232, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3232 = !DISubroutineType(types: !3233)
!3233 = !{!1755, !3234}
!3234 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1574, line: 59, baseType: !3235)
!3235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3236, size: 64)
!3236 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1642)
!3237 = !DILocalVariable(name: "t", arg: 1, scope: !3231, file: !135, line: 4551, type: !3234)
!3238 = !DILocation(line: 4551, column: 33, scope: !3231)
!3239 = !DILocation(line: 4553, column: 11, scope: !3231)
!3240 = !DILocation(line: 4553, column: 3, scope: !3231)
!3241 = !DILocation(line: 4562, column: 7, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3231, file: !135, line: 4554, column: 5)
!3243 = !DILocation(line: 4565, column: 7, scope: !3242)
!3244 = !DILocation(line: 4567, column: 1, scope: !3231)
!3245 = distinct !DISubprogram(name: "insert_field_into_struct", scope: !3, file: !3, line: 196, type: !3246, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{null, !1640, !1640}
!3248 = !DILocalVariable(name: "type", arg: 1, scope: !3245, file: !3, line: 196, type: !1640)
!3249 = !DILocation(line: 196, column: 32, scope: !3245)
!3250 = !DILocalVariable(name: "field", arg: 2, scope: !3245, file: !3, line: 196, type: !1640)
!3251 = !DILocation(line: 196, column: 43, scope: !3245)
!3252 = !DILocalVariable(name: "p", scope: !3245, file: !3, line: 198, type: !1940)
!3253 = !DILocation(line: 198, column: 9, scope: !3245)
!3254 = !DILocation(line: 200, column: 26, scope: !3245)
!3255 = !DILocation(line: 200, column: 3, scope: !3245)
!3256 = !DILocation(line: 200, column: 24, scope: !3245)
!3257 = !DILocation(line: 202, column: 13, scope: !3258)
!3258 = distinct !DILexicalBlock(scope: !3245, file: !3, line: 202, column: 3)
!3259 = !DILocation(line: 202, column: 10, scope: !3258)
!3260 = !DILocation(line: 202, column: 8, scope: !3258)
!3261 = !DILocation(line: 202, column: 34, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3258, file: !3, line: 202, column: 3)
!3263 = !DILocation(line: 202, column: 33, scope: !3262)
!3264 = !DILocation(line: 202, column: 3, scope: !3258)
!3265 = !DILocation(line: 203, column: 9, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 203, column: 9)
!3267 = !DILocation(line: 203, column: 31, scope: !3266)
!3268 = !DILocation(line: 203, column: 28, scope: !3266)
!3269 = !DILocation(line: 203, column: 9, scope: !3262)
!3270 = !DILocation(line: 204, column: 7, scope: !3266)
!3271 = !DILocation(line: 202, column: 43, scope: !3262)
!3272 = !DILocation(line: 202, column: 40, scope: !3262)
!3273 = !DILocation(line: 202, column: 3, scope: !3262)
!3274 = distinct !{!3274, !3264, !3275}
!3275 = !DILocation(line: 204, column: 7, scope: !3258)
!3276 = !DILocation(line: 206, column: 25, scope: !3245)
!3277 = !DILocation(line: 206, column: 24, scope: !3245)
!3278 = !DILocation(line: 206, column: 3, scope: !3245)
!3279 = !DILocation(line: 206, column: 22, scope: !3245)
!3280 = !DILocation(line: 207, column: 8, scope: !3245)
!3281 = !DILocation(line: 207, column: 4, scope: !3245)
!3282 = !DILocation(line: 207, column: 6, scope: !3245)
!3283 = !DILocation(line: 210, column: 7, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3245, file: !3, line: 210, column: 7)
!3285 = !DILocation(line: 210, column: 27, scope: !3284)
!3286 = !DILocation(line: 210, column: 25, scope: !3284)
!3287 = !DILocation(line: 210, column: 7, scope: !3245)
!3288 = !DILocation(line: 211, column: 25, scope: !3284)
!3289 = !DILocation(line: 211, column: 5, scope: !3284)
!3290 = !DILocation(line: 211, column: 23, scope: !3284)
!3291 = !DILocation(line: 212, column: 1, scope: !3245)
!3292 = distinct !DISubprogram(name: "lower_nested_functions", scope: !3, file: !3, line: 2539, type: !3162, scopeLine: 2540, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3293 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3292, file: !3, line: 2539, type: !1640)
!3294 = !DILocation(line: 2539, column: 30, scope: !3292)
!3295 = !DILocalVariable(name: "cgn", scope: !3292, file: !3, line: 2541, type: !2913)
!3296 = !DILocation(line: 2541, column: 23, scope: !3292)
!3297 = !DILocalVariable(name: "root", scope: !3292, file: !3, line: 2542, type: !1561)
!3298 = !DILocation(line: 2542, column: 24, scope: !3292)
!3299 = !DILocation(line: 2545, column: 22, scope: !3292)
!3300 = !DILocation(line: 2545, column: 9, scope: !3292)
!3301 = !DILocation(line: 2545, column: 7, scope: !3292)
!3302 = !DILocation(line: 2546, column: 8, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 2546, column: 7)
!3304 = !DILocation(line: 2546, column: 13, scope: !3303)
!3305 = !DILocation(line: 2546, column: 7, scope: !3292)
!3306 = !DILocation(line: 2547, column: 5, scope: !3303)
!3307 = !DILocation(line: 2549, column: 27, scope: !3292)
!3308 = !DILocation(line: 2549, column: 3, scope: !3292)
!3309 = !DILocation(line: 2551, column: 15, scope: !3292)
!3310 = !DILocation(line: 2551, column: 13, scope: !3292)
!3311 = !DILocation(line: 2552, column: 7, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 2552, column: 7)
!3313 = !DILocation(line: 2552, column: 7, scope: !3292)
!3314 = !DILocation(line: 2553, column: 14, scope: !3312)
!3315 = !DILocation(line: 2554, column: 18, scope: !3312)
!3316 = !DILocation(line: 2554, column: 39, scope: !3312)
!3317 = !DILocation(line: 2554, column: 7, scope: !3312)
!3318 = !DILocation(line: 2553, column: 5, scope: !3312)
!3319 = !DILocation(line: 2556, column: 3, scope: !3292)
!3320 = !DILocation(line: 2557, column: 31, scope: !3292)
!3321 = !DILocation(line: 2557, column: 10, scope: !3292)
!3322 = !DILocation(line: 2557, column: 8, scope: !3292)
!3323 = !DILocation(line: 2561, column: 9, scope: !3292)
!3324 = !DILocation(line: 2559, column: 3, scope: !3292)
!3325 = !DILocation(line: 2564, column: 9, scope: !3292)
!3326 = !DILocation(line: 2562, column: 3, scope: !3292)
!3327 = !DILocation(line: 2565, column: 56, scope: !3292)
!3328 = !DILocation(line: 2565, column: 3, scope: !3292)
!3329 = !DILocation(line: 2566, column: 55, scope: !3292)
!3330 = !DILocation(line: 2566, column: 3, scope: !3292)
!3331 = !DILocation(line: 2568, column: 31, scope: !3292)
!3332 = !DILocation(line: 2568, column: 3, scope: !3292)
!3333 = !DILocation(line: 2569, column: 26, scope: !3292)
!3334 = !DILocation(line: 2569, column: 3, scope: !3292)
!3335 = !DILocation(line: 2570, column: 24, scope: !3292)
!3336 = !DILocation(line: 2570, column: 3, scope: !3292)
!3337 = !DILocation(line: 2572, column: 22, scope: !3292)
!3338 = !DILocation(line: 2572, column: 3, scope: !3292)
!3339 = !DILocation(line: 2573, column: 3, scope: !3292)
!3340 = !DILocation(line: 2575, column: 7, scope: !3341)
!3341 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 2575, column: 7)
!3342 = !DILocation(line: 2575, column: 7, scope: !3292)
!3343 = !DILocation(line: 2577, column: 29, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3341, file: !3, line: 2576, column: 5)
!3345 = !DILocation(line: 2577, column: 7, scope: !3344)
!3346 = !DILocation(line: 2578, column: 17, scope: !3344)
!3347 = !DILocation(line: 2579, column: 5, scope: !3344)
!3348 = !DILocation(line: 2580, column: 1, scope: !3292)
!3349 = distinct !DISubprogram(name: "gimplify_all_functions", scope: !3, file: !3, line: 2526, type: !3025, scopeLine: 2527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3350 = !DILocalVariable(name: "root", arg: 1, scope: !3349, file: !3, line: 2526, type: !2913)
!3351 = !DILocation(line: 2526, column: 45, scope: !3349)
!3352 = !DILocalVariable(name: "iter", scope: !3349, file: !3, line: 2528, type: !2913)
!3353 = !DILocation(line: 2528, column: 23, scope: !3349)
!3354 = !DILocation(line: 2529, column: 21, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3349, file: !3, line: 2529, column: 7)
!3356 = !DILocation(line: 2529, column: 27, scope: !3355)
!3357 = !DILocation(line: 2529, column: 8, scope: !3355)
!3358 = !DILocation(line: 2529, column: 7, scope: !3349)
!3359 = !DILocation(line: 2530, column: 29, scope: !3355)
!3360 = !DILocation(line: 2530, column: 35, scope: !3355)
!3361 = !DILocation(line: 2530, column: 5, scope: !3355)
!3362 = !DILocation(line: 2531, column: 15, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3349, file: !3, line: 2531, column: 3)
!3364 = !DILocation(line: 2531, column: 21, scope: !3363)
!3365 = !DILocation(line: 2531, column: 13, scope: !3363)
!3366 = !DILocation(line: 2531, column: 8, scope: !3363)
!3367 = !DILocation(line: 2531, column: 29, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !3363, file: !3, line: 2531, column: 3)
!3369 = !DILocation(line: 2531, column: 3, scope: !3363)
!3370 = !DILocation(line: 2532, column: 29, scope: !3368)
!3371 = !DILocation(line: 2532, column: 5, scope: !3368)
!3372 = !DILocation(line: 2531, column: 42, scope: !3368)
!3373 = !DILocation(line: 2531, column: 48, scope: !3368)
!3374 = !DILocation(line: 2531, column: 40, scope: !3368)
!3375 = !DILocation(line: 2531, column: 3, scope: !3368)
!3376 = distinct !{!3376, !3369, !3377}
!3377 = !DILocation(line: 2532, column: 33, scope: !3363)
!3378 = !DILocation(line: 2533, column: 1, scope: !3349)
!3379 = distinct !DISubprogram(name: "create_nesting_tree", scope: !3, file: !3, line: 717, type: !3380, scopeLine: 718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3380 = !DISubroutineType(types: !3381)
!3381 = !{!1561, !2913}
!3382 = !DILocalVariable(name: "cgn", arg: 1, scope: !3379, file: !3, line: 717, type: !2913)
!3383 = !DILocation(line: 717, column: 42, scope: !3379)
!3384 = !DILocalVariable(name: "info", scope: !3379, file: !3, line: 719, type: !1561)
!3385 = !DILocation(line: 719, column: 24, scope: !3379)
!3386 = !DILocation(line: 719, column: 31, scope: !3379)
!3387 = !DILocation(line: 720, column: 21, scope: !3379)
!3388 = !DILocation(line: 720, column: 3, scope: !3379)
!3389 = !DILocation(line: 720, column: 9, scope: !3379)
!3390 = !DILocation(line: 720, column: 19, scope: !3379)
!3391 = !DILocation(line: 721, column: 19, scope: !3379)
!3392 = !DILocation(line: 721, column: 3, scope: !3379)
!3393 = !DILocation(line: 721, column: 9, scope: !3379)
!3394 = !DILocation(line: 721, column: 17, scope: !3379)
!3395 = !DILocation(line: 722, column: 30, scope: !3379)
!3396 = !DILocation(line: 722, column: 3, scope: !3379)
!3397 = !DILocation(line: 722, column: 9, scope: !3379)
!3398 = !DILocation(line: 722, column: 28, scope: !3379)
!3399 = !DILocation(line: 723, column: 19, scope: !3379)
!3400 = !DILocation(line: 723, column: 24, scope: !3379)
!3401 = !DILocation(line: 723, column: 3, scope: !3379)
!3402 = !DILocation(line: 723, column: 9, scope: !3379)
!3403 = !DILocation(line: 723, column: 17, scope: !3379)
!3404 = !DILocation(line: 725, column: 14, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 725, column: 3)
!3406 = !DILocation(line: 725, column: 19, scope: !3405)
!3407 = !DILocation(line: 725, column: 12, scope: !3405)
!3408 = !DILocation(line: 725, column: 8, scope: !3405)
!3409 = !DILocation(line: 725, column: 27, scope: !3410)
!3410 = distinct !DILexicalBlock(scope: !3405, file: !3, line: 725, column: 3)
!3411 = !DILocation(line: 725, column: 3, scope: !3405)
!3412 = !DILocalVariable(name: "sub", scope: !3413, file: !3, line: 727, type: !1561)
!3413 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 726, column: 5)
!3414 = !DILocation(line: 727, column: 28, scope: !3413)
!3415 = !DILocation(line: 727, column: 55, scope: !3413)
!3416 = !DILocation(line: 727, column: 34, scope: !3413)
!3417 = !DILocation(line: 728, column: 20, scope: !3413)
!3418 = !DILocation(line: 728, column: 7, scope: !3413)
!3419 = !DILocation(line: 728, column: 12, scope: !3413)
!3420 = !DILocation(line: 728, column: 18, scope: !3413)
!3421 = !DILocation(line: 729, column: 19, scope: !3413)
!3422 = !DILocation(line: 729, column: 25, scope: !3413)
!3423 = !DILocation(line: 729, column: 7, scope: !3413)
!3424 = !DILocation(line: 729, column: 12, scope: !3413)
!3425 = !DILocation(line: 729, column: 17, scope: !3413)
!3426 = !DILocation(line: 730, column: 21, scope: !3413)
!3427 = !DILocation(line: 730, column: 7, scope: !3413)
!3428 = !DILocation(line: 730, column: 13, scope: !3413)
!3429 = !DILocation(line: 730, column: 19, scope: !3413)
!3430 = !DILocation(line: 731, column: 5, scope: !3413)
!3431 = !DILocation(line: 725, column: 39, scope: !3410)
!3432 = !DILocation(line: 725, column: 44, scope: !3410)
!3433 = !DILocation(line: 725, column: 37, scope: !3410)
!3434 = !DILocation(line: 725, column: 3, scope: !3410)
!3435 = distinct !{!3435, !3411, !3436}
!3436 = !DILocation(line: 731, column: 5, scope: !3405)
!3437 = !DILocation(line: 735, column: 48, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 735, column: 7)
!3439 = !DILocation(line: 735, column: 54, scope: !3438)
!3440 = !DILocation(line: 735, column: 63, scope: !3438)
!3441 = !DILocation(line: 735, column: 69, scope: !3438)
!3442 = !DILocation(line: 735, column: 7, scope: !3438)
!3443 = !DILocation(line: 735, column: 7, scope: !3379)
!3444 = !DILocation(line: 736, column: 5, scope: !3438)
!3445 = !DILocation(line: 736, column: 38, scope: !3438)
!3446 = !DILocation(line: 738, column: 10, scope: !3379)
!3447 = !DILocation(line: 738, column: 3, scope: !3379)
!3448 = distinct !DISubprogram(name: "walk_all_functions", scope: !3, file: !3, line: 662, type: !3449, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3449 = !DISubroutineType(types: !3450)
!3450 = !{null, !3451, !3457, !1561}
!3451 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_stmt_fn", file: !611, line: 4704, baseType: !3452)
!3452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3453 = !DISubroutineType(types: !3454)
!3454 = !{!1640, !3455, !3456, !2883}
!3455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2887, size: 64)
!3456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1755, size: 64)
!3457 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_tree_fn", file: !135, line: 5203, baseType: !3458)
!3458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3459, size: 64)
!3459 = !DISubroutineType(types: !3460)
!3460 = !{!1640, !1940, !3461, !1630}
!3461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!3462 = !DILocalVariable(name: "callback_stmt", arg: 1, scope: !3448, file: !3, line: 662, type: !3451)
!3463 = !DILocation(line: 662, column: 34, scope: !3448)
!3464 = !DILocalVariable(name: "callback_op", arg: 2, scope: !3448, file: !3, line: 662, type: !3457)
!3465 = !DILocation(line: 662, column: 62, scope: !3448)
!3466 = !DILocalVariable(name: "root", arg: 3, scope: !3448, file: !3, line: 663, type: !1561)
!3467 = !DILocation(line: 663, column: 28, scope: !3448)
!3468 = !DILocalVariable(name: "n", scope: !3448, file: !3, line: 665, type: !1561)
!3469 = !DILocation(line: 665, column: 24, scope: !3448)
!3470 = !DILocation(line: 666, column: 3, scope: !3471)
!3471 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 666, column: 3)
!3472 = !DILocation(line: 666, column: 3, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3471, file: !3, line: 666, column: 3)
!3474 = !DILocation(line: 667, column: 20, scope: !3473)
!3475 = !DILocation(line: 667, column: 35, scope: !3473)
!3476 = !DILocation(line: 667, column: 48, scope: !3473)
!3477 = !DILocation(line: 667, column: 5, scope: !3473)
!3478 = distinct !{!3478, !3470, !3479}
!3479 = !DILocation(line: 667, column: 49, scope: !3471)
!3480 = !DILocation(line: 668, column: 1, scope: !3448)
!3481 = distinct !DISubprogram(name: "convert_nonlocal_reference_stmt", scope: !3, file: !3, line: 1220, type: !3453, scopeLine: 1222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3482 = !DILocalVariable(name: "gsi", arg: 1, scope: !3481, file: !3, line: 1220, type: !3455)
!3483 = !DILocation(line: 1220, column: 56, scope: !3481)
!3484 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !3481, file: !3, line: 1220, type: !3456)
!3485 = !DILocation(line: 1220, column: 67, scope: !3481)
!3486 = !DILocalVariable(name: "wi", arg: 3, scope: !3481, file: !3, line: 1221, type: !2883)
!3487 = !DILocation(line: 1221, column: 29, scope: !3481)
!3488 = !DILocalVariable(name: "info", scope: !3481, file: !3, line: 1223, type: !1561)
!3489 = !DILocation(line: 1223, column: 24, scope: !3481)
!3490 = !DILocation(line: 1223, column: 55, scope: !3481)
!3491 = !DILocation(line: 1223, column: 59, scope: !3481)
!3492 = !DILocation(line: 1223, column: 31, scope: !3481)
!3493 = !DILocalVariable(name: "save_local_var_chain", scope: !3481, file: !3, line: 1224, type: !1640)
!3494 = !DILocation(line: 1224, column: 8, scope: !3481)
!3495 = !DILocalVariable(name: "save_suppress", scope: !3481, file: !3, line: 1225, type: !1573)
!3496 = !DILocation(line: 1225, column: 10, scope: !3481)
!3497 = !DILocalVariable(name: "stmt", scope: !3481, file: !3, line: 1226, type: !1905)
!3498 = !DILocation(line: 1226, column: 10, scope: !3481)
!3499 = !DILocation(line: 1226, column: 28, scope: !3481)
!3500 = !DILocation(line: 1226, column: 17, scope: !3481)
!3501 = !DILocation(line: 1228, column: 24, scope: !3481)
!3502 = !DILocation(line: 1228, column: 11, scope: !3481)
!3503 = !DILocation(line: 1228, column: 3, scope: !3481)
!3504 = !DILocation(line: 1232, column: 11, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1232, column: 11)
!3506 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 1229, column: 5)
!3507 = !DILocation(line: 1232, column: 47, scope: !3505)
!3508 = !DILocation(line: 1232, column: 11, scope: !3506)
!3509 = !DILocation(line: 1234, column: 4, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3505, file: !3, line: 1233, column: 2)
!3511 = !DILocation(line: 1234, column: 8, scope: !3510)
!3512 = !DILocation(line: 1234, column: 17, scope: !3510)
!3513 = !DILocation(line: 1235, column: 4, scope: !3510)
!3514 = !DILocation(line: 1235, column: 8, scope: !3510)
!3515 = !DILocation(line: 1235, column: 15, scope: !3510)
!3516 = !DILocation(line: 1236, column: 5, scope: !3510)
!3517 = !DILocation(line: 1236, column: 19, scope: !3510)
!3518 = !DILocation(line: 1237, column: 4, scope: !3510)
!3519 = !DILocation(line: 1239, column: 7, scope: !3506)
!3520 = !DILocation(line: 1243, column: 23, scope: !3506)
!3521 = !DILocation(line: 1243, column: 29, scope: !3506)
!3522 = !DILocation(line: 1243, column: 21, scope: !3506)
!3523 = !DILocation(line: 1244, column: 73, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1244, column: 11)
!3525 = !DILocation(line: 1244, column: 41, scope: !3524)
!3526 = !DILocation(line: 1245, column: 34, scope: !3524)
!3527 = !DILocation(line: 1244, column: 11, scope: !3524)
!3528 = !DILocation(line: 1244, column: 11, scope: !3506)
!3529 = !DILocalVariable(name: "c", scope: !3530, file: !3, line: 1247, type: !1640)
!3530 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 1246, column: 2)
!3531 = !DILocation(line: 1247, column: 9, scope: !3530)
!3532 = !DILocalVariable(name: "decl", scope: !3530, file: !3, line: 1247, type: !1640)
!3533 = !DILocation(line: 1247, column: 12, scope: !3530)
!3534 = !DILocation(line: 1248, column: 27, scope: !3530)
!3535 = !DILocation(line: 1248, column: 11, scope: !3530)
!3536 = !DILocation(line: 1248, column: 9, scope: !3530)
!3537 = !DILocation(line: 1249, column: 43, scope: !3530)
!3538 = !DILocation(line: 1249, column: 26, scope: !3530)
!3539 = !DILocation(line: 1249, column: 8, scope: !3530)
!3540 = !DILocation(line: 1249, column: 6, scope: !3530)
!3541 = !DILocation(line: 1251, column: 26, scope: !3530)
!3542 = !DILocation(line: 1251, column: 4, scope: !3530)
!3543 = !DILocation(line: 1251, column: 24, scope: !3530)
!3544 = !DILocation(line: 1252, column: 55, scope: !3530)
!3545 = !DILocation(line: 1252, column: 27, scope: !3530)
!3546 = !DILocation(line: 1252, column: 4, scope: !3530)
!3547 = !DILocation(line: 1252, column: 25, scope: !3530)
!3548 = !DILocation(line: 1253, column: 36, scope: !3530)
!3549 = !DILocation(line: 1253, column: 42, scope: !3530)
!3550 = !DILocation(line: 1253, column: 4, scope: !3530)
!3551 = !DILocation(line: 1254, column: 2, scope: !3530)
!3552 = !DILocation(line: 1256, column: 30, scope: !3506)
!3553 = !DILocation(line: 1256, column: 36, scope: !3506)
!3554 = !DILocation(line: 1256, column: 28, scope: !3506)
!3555 = !DILocation(line: 1257, column: 7, scope: !3506)
!3556 = !DILocation(line: 1257, column: 13, scope: !3506)
!3557 = !DILocation(line: 1257, column: 33, scope: !3506)
!3558 = !DILocation(line: 1260, column: 11, scope: !3506)
!3559 = !DILocation(line: 1260, column: 34, scope: !3506)
!3560 = !DILocation(line: 1260, column: 17, scope: !3506)
!3561 = !DILocation(line: 1259, column: 7, scope: !3506)
!3562 = !DILocation(line: 1262, column: 11, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1262, column: 11)
!3564 = !DILocation(line: 1262, column: 17, scope: !3563)
!3565 = !DILocation(line: 1262, column: 11, scope: !3506)
!3566 = !DILocation(line: 1263, column: 16, scope: !3563)
!3567 = !DILocation(line: 1263, column: 22, scope: !3563)
!3568 = !DILocation(line: 1264, column: 56, scope: !3563)
!3569 = !DILocation(line: 1264, column: 39, scope: !3563)
!3570 = !DILocation(line: 1264, column: 16, scope: !3563)
!3571 = !DILocation(line: 1263, column: 2, scope: !3563)
!3572 = !DILocation(line: 1266, column: 35, scope: !3506)
!3573 = !DILocation(line: 1266, column: 7, scope: !3506)
!3574 = !DILocation(line: 1266, column: 13, scope: !3506)
!3575 = !DILocation(line: 1266, column: 33, scope: !3506)
!3576 = !DILocation(line: 1267, column: 34, scope: !3506)
!3577 = !DILocation(line: 1267, column: 7, scope: !3506)
!3578 = !DILocation(line: 1267, column: 13, scope: !3506)
!3579 = !DILocation(line: 1267, column: 32, scope: !3506)
!3580 = !DILocation(line: 1268, column: 7, scope: !3506)
!3581 = !DILocation(line: 1271, column: 23, scope: !3506)
!3582 = !DILocation(line: 1271, column: 29, scope: !3506)
!3583 = !DILocation(line: 1271, column: 21, scope: !3506)
!3584 = !DILocation(line: 1272, column: 65, scope: !3506)
!3585 = !DILocation(line: 1272, column: 37, scope: !3506)
!3586 = !DILocation(line: 1272, column: 72, scope: !3506)
!3587 = !DILocation(line: 1272, column: 7, scope: !3506)
!3588 = !DILocation(line: 1273, column: 28, scope: !3506)
!3589 = !DILocation(line: 1274, column: 40, scope: !3506)
!3590 = !DILocation(line: 1273, column: 7, scope: !3506)
!3591 = !DILocation(line: 1276, column: 37, scope: !3506)
!3592 = !DILocation(line: 1276, column: 60, scope: !3506)
!3593 = !DILocation(line: 1276, column: 43, scope: !3506)
!3594 = !DILocation(line: 1275, column: 7, scope: !3506)
!3595 = !DILocation(line: 1277, column: 34, scope: !3506)
!3596 = !DILocation(line: 1277, column: 7, scope: !3506)
!3597 = !DILocation(line: 1277, column: 13, scope: !3506)
!3598 = !DILocation(line: 1277, column: 32, scope: !3506)
!3599 = !DILocation(line: 1278, column: 7, scope: !3506)
!3600 = !DILocation(line: 1281, column: 23, scope: !3506)
!3601 = !DILocation(line: 1281, column: 29, scope: !3506)
!3602 = !DILocation(line: 1281, column: 21, scope: !3506)
!3603 = !DILocation(line: 1282, column: 70, scope: !3506)
!3604 = !DILocation(line: 1282, column: 37, scope: !3506)
!3605 = !DILocation(line: 1282, column: 77, scope: !3506)
!3606 = !DILocation(line: 1282, column: 7, scope: !3506)
!3607 = !DILocation(line: 1284, column: 11, scope: !3506)
!3608 = !DILocation(line: 1284, column: 34, scope: !3506)
!3609 = !DILocation(line: 1284, column: 17, scope: !3506)
!3610 = !DILocation(line: 1283, column: 7, scope: !3506)
!3611 = !DILocation(line: 1285, column: 34, scope: !3506)
!3612 = !DILocation(line: 1285, column: 7, scope: !3506)
!3613 = !DILocation(line: 1285, column: 13, scope: !3506)
!3614 = !DILocation(line: 1285, column: 32, scope: !3506)
!3615 = !DILocation(line: 1286, column: 7, scope: !3506)
!3616 = !DILocation(line: 1289, column: 23, scope: !3506)
!3617 = !DILocation(line: 1289, column: 29, scope: !3506)
!3618 = !DILocation(line: 1289, column: 21, scope: !3506)
!3619 = !DILocation(line: 1290, column: 68, scope: !3506)
!3620 = !DILocation(line: 1290, column: 37, scope: !3506)
!3621 = !DILocation(line: 1290, column: 75, scope: !3506)
!3622 = !DILocation(line: 1290, column: 7, scope: !3506)
!3623 = !DILocation(line: 1292, column: 11, scope: !3506)
!3624 = !DILocation(line: 1292, column: 34, scope: !3506)
!3625 = !DILocation(line: 1292, column: 17, scope: !3506)
!3626 = !DILocation(line: 1291, column: 7, scope: !3506)
!3627 = !DILocation(line: 1293, column: 34, scope: !3506)
!3628 = !DILocation(line: 1293, column: 7, scope: !3506)
!3629 = !DILocation(line: 1293, column: 13, scope: !3506)
!3630 = !DILocation(line: 1293, column: 32, scope: !3506)
!3631 = !DILocation(line: 1294, column: 7, scope: !3506)
!3632 = !DILocation(line: 1300, column: 11, scope: !3506)
!3633 = !DILocation(line: 1300, column: 34, scope: !3506)
!3634 = !DILocation(line: 1300, column: 17, scope: !3506)
!3635 = !DILocation(line: 1299, column: 7, scope: !3506)
!3636 = !DILocation(line: 1301, column: 7, scope: !3506)
!3637 = !DILocation(line: 1304, column: 12, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 1304, column: 11)
!3639 = !DILocation(line: 1304, column: 21, scope: !3638)
!3640 = !DILocation(line: 1304, column: 43, scope: !3638)
!3641 = !DILocation(line: 1304, column: 24, scope: !3638)
!3642 = !DILocation(line: 1304, column: 11, scope: !3506)
!3643 = !DILocation(line: 1305, column: 28, scope: !3638)
!3644 = !DILocation(line: 1305, column: 53, scope: !3638)
!3645 = !DILocation(line: 1305, column: 34, scope: !3638)
!3646 = !DILocation(line: 1305, column: 2, scope: !3638)
!3647 = !DILocation(line: 1307, column: 8, scope: !3506)
!3648 = !DILocation(line: 1307, column: 22, scope: !3506)
!3649 = !DILocation(line: 1308, column: 7, scope: !3506)
!3650 = !DILocation(line: 1311, column: 7, scope: !3506)
!3651 = !DILocation(line: 1311, column: 11, scope: !3506)
!3652 = !DILocation(line: 1311, column: 20, scope: !3506)
!3653 = !DILocation(line: 1312, column: 7, scope: !3506)
!3654 = !DILocation(line: 1312, column: 11, scope: !3506)
!3655 = !DILocation(line: 1312, column: 18, scope: !3506)
!3656 = !DILocation(line: 1313, column: 8, scope: !3506)
!3657 = !DILocation(line: 1313, column: 22, scope: !3506)
!3658 = !DILocation(line: 1314, column: 7, scope: !3506)
!3659 = !DILocation(line: 1319, column: 8, scope: !3506)
!3660 = !DILocation(line: 1319, column: 22, scope: !3506)
!3661 = !DILocation(line: 1320, column: 7, scope: !3506)
!3662 = !DILocation(line: 1324, column: 4, scope: !3481)
!3663 = !DILocation(line: 1324, column: 18, scope: !3481)
!3664 = !DILocation(line: 1325, column: 3, scope: !3481)
!3665 = !DILocation(line: 1326, column: 1, scope: !3481)
!3666 = distinct !DISubprogram(name: "convert_nonlocal_reference_op", scope: !3, file: !3, line: 899, type: !3459, scopeLine: 900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3667 = !DILocalVariable(name: "tp", arg: 1, scope: !3666, file: !3, line: 899, type: !1940)
!3668 = !DILocation(line: 899, column: 38, scope: !3666)
!3669 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !3666, file: !3, line: 899, type: !3461)
!3670 = !DILocation(line: 899, column: 47, scope: !3666)
!3671 = !DILocalVariable(name: "data", arg: 3, scope: !3666, file: !3, line: 899, type: !1630)
!3672 = !DILocation(line: 899, column: 68, scope: !3666)
!3673 = !DILocalVariable(name: "wi", scope: !3666, file: !3, line: 901, type: !2883)
!3674 = !DILocation(line: 901, column: 26, scope: !3666)
!3675 = !DILocation(line: 901, column: 57, scope: !3666)
!3676 = !DILocation(line: 901, column: 31, scope: !3666)
!3677 = !DILocalVariable(name: "info", scope: !3666, file: !3, line: 902, type: !3678)
!3678 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1561)
!3679 = !DILocation(line: 902, column: 30, scope: !3666)
!3680 = !DILocation(line: 902, column: 61, scope: !3666)
!3681 = !DILocation(line: 902, column: 65, scope: !3666)
!3682 = !DILocation(line: 902, column: 37, scope: !3666)
!3683 = !DILocalVariable(name: "t", scope: !3666, file: !3, line: 903, type: !1640)
!3684 = !DILocation(line: 903, column: 8, scope: !3666)
!3685 = !DILocation(line: 903, column: 13, scope: !3666)
!3686 = !DILocation(line: 903, column: 12, scope: !3666)
!3687 = !DILocation(line: 905, column: 4, scope: !3666)
!3688 = !DILocation(line: 905, column: 18, scope: !3666)
!3689 = !DILocation(line: 906, column: 11, scope: !3666)
!3690 = !DILocation(line: 906, column: 3, scope: !3666)
!3691 = !DILocation(line: 910, column: 11, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 910, column: 11)
!3693 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 907, column: 5)
!3694 = !DILocation(line: 910, column: 27, scope: !3692)
!3695 = !DILocation(line: 910, column: 30, scope: !3692)
!3696 = !DILocation(line: 910, column: 11, scope: !3693)
!3697 = !DILocation(line: 911, column: 2, scope: !3692)
!3698 = !DILocation(line: 915, column: 34, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 915, column: 11)
!3700 = !DILocation(line: 915, column: 11, scope: !3699)
!3701 = !DILocation(line: 915, column: 40, scope: !3699)
!3702 = !DILocation(line: 915, column: 46, scope: !3699)
!3703 = !DILocation(line: 915, column: 37, scope: !3699)
!3704 = !DILocation(line: 915, column: 11, scope: !3693)
!3705 = !DILocalVariable(name: "x", scope: !3706, file: !3, line: 917, type: !1640)
!3706 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 916, column: 2)
!3707 = !DILocation(line: 917, column: 9, scope: !3706)
!3708 = !DILocation(line: 918, column: 4, scope: !3706)
!3709 = !DILocation(line: 918, column: 8, scope: !3706)
!3710 = !DILocation(line: 918, column: 16, scope: !3706)
!3711 = !DILocation(line: 920, column: 33, scope: !3706)
!3712 = !DILocation(line: 920, column: 39, scope: !3706)
!3713 = !DILocation(line: 920, column: 8, scope: !3706)
!3714 = !DILocation(line: 920, column: 6, scope: !3706)
!3715 = !DILocation(line: 921, column: 23, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3706, file: !3, line: 921, column: 8)
!3717 = !DILocation(line: 921, column: 29, scope: !3716)
!3718 = !DILocation(line: 921, column: 49, scope: !3716)
!3719 = !DILocation(line: 921, column: 9, scope: !3716)
!3720 = !DILocation(line: 921, column: 8, scope: !3706)
!3721 = !DILocalVariable(name: "target_context", scope: !3722, file: !3, line: 923, type: !1640)
!3722 = distinct !DILexicalBlock(scope: !3716, file: !3, line: 922, column: 6)
!3723 = !DILocation(line: 923, column: 13, scope: !3722)
!3724 = !DILocation(line: 923, column: 53, scope: !3722)
!3725 = !DILocation(line: 923, column: 30, scope: !3722)
!3726 = !DILocalVariable(name: "i", scope: !3722, file: !3, line: 924, type: !1561)
!3727 = !DILocation(line: 924, column: 29, scope: !3722)
!3728 = !DILocation(line: 925, column: 17, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3722, file: !3, line: 925, column: 8)
!3730 = !DILocation(line: 925, column: 23, scope: !3729)
!3731 = !DILocation(line: 925, column: 15, scope: !3729)
!3732 = !DILocation(line: 925, column: 13, scope: !3729)
!3733 = !DILocation(line: 925, column: 30, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 925, column: 8)
!3735 = !DILocation(line: 925, column: 33, scope: !3734)
!3736 = !DILocation(line: 925, column: 44, scope: !3734)
!3737 = !DILocation(line: 925, column: 41, scope: !3734)
!3738 = !DILocation(line: 925, column: 8, scope: !3729)
!3739 = !DILocation(line: 926, column: 3, scope: !3734)
!3740 = !DILocation(line: 925, column: 64, scope: !3734)
!3741 = !DILocation(line: 925, column: 67, scope: !3734)
!3742 = !DILocation(line: 925, column: 62, scope: !3734)
!3743 = !DILocation(line: 925, column: 8, scope: !3734)
!3744 = distinct !{!3744, !3738, !3745}
!3745 = !DILocation(line: 926, column: 3, scope: !3729)
!3746 = !DILocation(line: 927, column: 35, scope: !3722)
!3747 = !DILocation(line: 927, column: 38, scope: !3722)
!3748 = !DILocation(line: 927, column: 12, scope: !3722)
!3749 = !DILocation(line: 927, column: 10, scope: !3722)
!3750 = !DILocation(line: 928, column: 29, scope: !3722)
!3751 = !DILocation(line: 928, column: 35, scope: !3722)
!3752 = !DILocation(line: 928, column: 51, scope: !3722)
!3753 = !DILocation(line: 928, column: 55, scope: !3722)
!3754 = !DILocation(line: 928, column: 59, scope: !3722)
!3755 = !DILocation(line: 928, column: 12, scope: !3722)
!3756 = !DILocation(line: 928, column: 10, scope: !3722)
!3757 = !DILocation(line: 929, column: 34, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3722, file: !3, line: 929, column: 12)
!3759 = !DILocation(line: 929, column: 12, scope: !3758)
!3760 = !DILocation(line: 929, column: 12, scope: !3722)
!3761 = !DILocation(line: 931, column: 23, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3758, file: !3, line: 930, column: 3)
!3763 = !DILocation(line: 931, column: 29, scope: !3762)
!3764 = !DILocation(line: 931, column: 33, scope: !3762)
!3765 = !DILocation(line: 931, column: 37, scope: !3762)
!3766 = !DILocation(line: 931, column: 9, scope: !3762)
!3767 = !DILocation(line: 931, column: 7, scope: !3762)
!3768 = !DILocation(line: 932, column: 9, scope: !3762)
!3769 = !DILocation(line: 932, column: 7, scope: !3762)
!3770 = !DILocation(line: 933, column: 3, scope: !3762)
!3771 = !DILocation(line: 934, column: 6, scope: !3722)
!3772 = !DILocation(line: 936, column: 8, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3706, file: !3, line: 936, column: 8)
!3774 = !DILocation(line: 936, column: 12, scope: !3773)
!3775 = !DILocation(line: 936, column: 8, scope: !3706)
!3776 = !DILocation(line: 938, column: 12, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3778, file: !3, line: 938, column: 12)
!3778 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 937, column: 6)
!3779 = !DILocation(line: 938, column: 16, scope: !3777)
!3780 = !DILocation(line: 938, column: 12, scope: !3778)
!3781 = !DILocation(line: 939, column: 21, scope: !3777)
!3782 = !DILocation(line: 939, column: 27, scope: !3777)
!3783 = !DILocation(line: 939, column: 31, scope: !3777)
!3784 = !DILocation(line: 939, column: 35, scope: !3777)
!3785 = !DILocation(line: 939, column: 7, scope: !3777)
!3786 = !DILocation(line: 939, column: 5, scope: !3777)
!3787 = !DILocation(line: 939, column: 3, scope: !3777)
!3788 = !DILocation(line: 941, column: 21, scope: !3777)
!3789 = !DILocation(line: 941, column: 27, scope: !3777)
!3790 = !DILocation(line: 941, column: 31, scope: !3777)
!3791 = !DILocation(line: 941, column: 35, scope: !3777)
!3792 = !DILocation(line: 941, column: 7, scope: !3777)
!3793 = !DILocation(line: 941, column: 5, scope: !3777)
!3794 = !DILocation(line: 942, column: 6, scope: !3778)
!3795 = !DILocation(line: 944, column: 10, scope: !3706)
!3796 = !DILocation(line: 944, column: 5, scope: !3706)
!3797 = !DILocation(line: 944, column: 8, scope: !3706)
!3798 = !DILocation(line: 945, column: 2, scope: !3706)
!3799 = !DILocation(line: 946, column: 7, scope: !3693)
!3800 = !DILocation(line: 953, column: 34, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 953, column: 11)
!3802 = !DILocation(line: 953, column: 11, scope: !3801)
!3803 = !DILocation(line: 953, column: 40, scope: !3801)
!3804 = !DILocation(line: 953, column: 46, scope: !3801)
!3805 = !DILocation(line: 953, column: 37, scope: !3801)
!3806 = !DILocation(line: 953, column: 11, scope: !3693)
!3807 = !DILocation(line: 954, column: 9, scope: !3801)
!3808 = !DILocation(line: 954, column: 26, scope: !3801)
!3809 = !DILocation(line: 955, column: 7, scope: !3693)
!3810 = !DILocalVariable(name: "save_val_only", scope: !3811, file: !3, line: 959, type: !1755)
!3811 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 958, column: 7)
!3812 = !DILocation(line: 959, column: 7, scope: !3811)
!3813 = !DILocation(line: 959, column: 23, scope: !3811)
!3814 = !DILocation(line: 959, column: 27, scope: !3811)
!3815 = !DILocation(line: 961, column: 2, scope: !3811)
!3816 = !DILocation(line: 961, column: 6, scope: !3811)
!3817 = !DILocation(line: 961, column: 15, scope: !3811)
!3818 = !DILocation(line: 962, column: 2, scope: !3811)
!3819 = !DILocation(line: 962, column: 6, scope: !3811)
!3820 = !DILocation(line: 962, column: 13, scope: !3811)
!3821 = !DILocation(line: 963, column: 2, scope: !3811)
!3822 = !DILocation(line: 963, column: 6, scope: !3811)
!3823 = !DILocation(line: 963, column: 14, scope: !3811)
!3824 = !DILocation(line: 964, column: 2, scope: !3811)
!3825 = !DILocation(line: 965, column: 2, scope: !3811)
!3826 = !DILocation(line: 965, column: 6, scope: !3811)
!3827 = !DILocation(line: 965, column: 15, scope: !3811)
!3828 = !DILocation(line: 967, column: 6, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3811, file: !3, line: 967, column: 6)
!3830 = !DILocation(line: 967, column: 10, scope: !3829)
!3831 = !DILocation(line: 967, column: 6, scope: !3811)
!3832 = !DILocalVariable(name: "save_context", scope: !3833, file: !3, line: 969, type: !1640)
!3833 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 968, column: 4)
!3834 = !DILocation(line: 969, column: 11, scope: !3833)
!3835 = !DILocation(line: 973, column: 21, scope: !3833)
!3836 = !DILocation(line: 973, column: 19, scope: !3833)
!3837 = !DILocation(line: 974, column: 30, scope: !3833)
!3838 = !DILocation(line: 974, column: 36, scope: !3833)
!3839 = !DILocation(line: 974, column: 28, scope: !3833)
!3840 = !DILocation(line: 975, column: 46, scope: !3833)
!3841 = !DILocation(line: 975, column: 6, scope: !3833)
!3842 = !DILocation(line: 976, column: 30, scope: !3833)
!3843 = !DILocation(line: 976, column: 28, scope: !3833)
!3844 = !DILocation(line: 981, column: 10, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 981, column: 10)
!3846 = !DILocation(line: 981, column: 10, scope: !3833)
!3847 = !DILocation(line: 982, column: 56, scope: !3845)
!3848 = !DILocation(line: 982, column: 60, scope: !3845)
!3849 = !DILocation(line: 982, column: 32, scope: !3845)
!3850 = !DILocation(line: 983, column: 11, scope: !3845)
!3851 = !DILocation(line: 983, column: 15, scope: !3845)
!3852 = !DILocation(line: 983, column: 19, scope: !3845)
!3853 = !DILocation(line: 982, column: 14, scope: !3845)
!3854 = !DILocation(line: 982, column: 9, scope: !3845)
!3855 = !DILocation(line: 982, column: 12, scope: !3845)
!3856 = !DILocation(line: 982, column: 8, scope: !3845)
!3857 = !DILocation(line: 984, column: 4, scope: !3833)
!3858 = !DILocation(line: 986, column: 7, scope: !3693)
!3859 = !DILocation(line: 997, column: 7, scope: !3693)
!3860 = !DILocation(line: 997, column: 11, scope: !3693)
!3861 = !DILocation(line: 997, column: 20, scope: !3693)
!3862 = !DILocation(line: 998, column: 7, scope: !3693)
!3863 = !DILocation(line: 998, column: 11, scope: !3693)
!3864 = !DILocation(line: 998, column: 18, scope: !3693)
!3865 = !DILocation(line: 999, column: 7, scope: !3693)
!3866 = !DILocation(line: 999, column: 35, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3868, file: !3, line: 999, column: 7)
!3868 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 999, column: 7)
!3869 = !DILocation(line: 999, column: 14, scope: !3867)
!3870 = !DILocation(line: 999, column: 7, scope: !3868)
!3871 = !DILocation(line: 1001, column: 8, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3873, file: !3, line: 1001, column: 8)
!3873 = distinct !DILexicalBlock(scope: !3867, file: !3, line: 1000, column: 2)
!3874 = !DILocation(line: 1001, column: 22, scope: !3872)
!3875 = !DILocation(line: 1001, column: 8, scope: !3873)
!3876 = !DILocation(line: 1002, column: 6, scope: !3872)
!3877 = !DILocation(line: 1004, column: 13, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 1004, column: 13)
!3879 = !DILocation(line: 1004, column: 27, scope: !3878)
!3880 = !DILocation(line: 1005, column: 6, scope: !3878)
!3881 = !DILocation(line: 1005, column: 9, scope: !3878)
!3882 = !DILocation(line: 1005, column: 23, scope: !3878)
!3883 = !DILocation(line: 1004, column: 13, scope: !3872)
!3884 = !DILocation(line: 1007, column: 8, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1006, column: 6)
!3886 = !DILocation(line: 1009, column: 8, scope: !3885)
!3887 = !DILocation(line: 1011, column: 8, scope: !3885)
!3888 = !DILocation(line: 1013, column: 6, scope: !3885)
!3889 = !DILocation(line: 1014, column: 13, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3878, file: !3, line: 1014, column: 13)
!3891 = !DILocation(line: 1014, column: 27, scope: !3890)
!3892 = !DILocation(line: 1014, column: 13, scope: !3878)
!3893 = !DILocation(line: 1016, column: 8, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1015, column: 6)
!3895 = !DILocation(line: 1018, column: 8, scope: !3894)
!3896 = !DILocation(line: 1020, column: 6, scope: !3894)
!3897 = !DILocation(line: 1021, column: 2, scope: !3873)
!3898 = !DILocation(line: 999, column: 45, scope: !3867)
!3899 = !DILocation(line: 999, column: 42, scope: !3867)
!3900 = !DILocation(line: 999, column: 71, scope: !3867)
!3901 = !DILocation(line: 999, column: 70, scope: !3867)
!3902 = !DILocation(line: 999, column: 68, scope: !3867)
!3903 = !DILocation(line: 999, column: 7, scope: !3867)
!3904 = distinct !{!3904, !3870, !3905}
!3905 = !DILocation(line: 1021, column: 2, scope: !3868)
!3906 = !DILocation(line: 1022, column: 7, scope: !3693)
!3907 = !DILocation(line: 1022, column: 11, scope: !3693)
!3908 = !DILocation(line: 1022, column: 20, scope: !3693)
!3909 = !DILocation(line: 1023, column: 7, scope: !3693)
!3910 = !DILocation(line: 1024, column: 7, scope: !3693)
!3911 = !DILocation(line: 1030, column: 8, scope: !3693)
!3912 = !DILocation(line: 1030, column: 22, scope: !3693)
!3913 = !DILocation(line: 1031, column: 7, scope: !3693)
!3914 = !DILocation(line: 1034, column: 12, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 1034, column: 11)
!3916 = !DILocation(line: 1034, column: 11, scope: !3693)
!3917 = !DILocation(line: 1036, column: 5, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 1035, column: 2)
!3919 = !DILocation(line: 1036, column: 19, scope: !3918)
!3920 = !DILocation(line: 1037, column: 11, scope: !3918)
!3921 = !DILocation(line: 1037, column: 15, scope: !3918)
!3922 = !DILocation(line: 1037, column: 24, scope: !3918)
!3923 = !DILocation(line: 1038, column: 4, scope: !3918)
!3924 = !DILocation(line: 1038, column: 8, scope: !3918)
!3925 = !DILocation(line: 1038, column: 15, scope: !3918)
!3926 = !DILocation(line: 1039, column: 2, scope: !3918)
!3927 = !DILocation(line: 1040, column: 7, scope: !3693)
!3928 = !DILocation(line: 1043, column: 3, scope: !3666)
!3929 = distinct !DISubprogram(name: "convert_local_reference_stmt", scope: !3, file: !3, line: 1645, type: !3453, scopeLine: 1647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!3930 = !DILocalVariable(name: "gsi", arg: 1, scope: !3929, file: !3, line: 1645, type: !3455)
!3931 = !DILocation(line: 1645, column: 53, scope: !3929)
!3932 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !3929, file: !3, line: 1645, type: !3456)
!3933 = !DILocation(line: 1645, column: 64, scope: !3929)
!3934 = !DILocalVariable(name: "wi", arg: 3, scope: !3929, file: !3, line: 1646, type: !2883)
!3935 = !DILocation(line: 1646, column: 33, scope: !3929)
!3936 = !DILocalVariable(name: "info", scope: !3929, file: !3, line: 1648, type: !1561)
!3937 = !DILocation(line: 1648, column: 24, scope: !3929)
!3938 = !DILocation(line: 1648, column: 55, scope: !3929)
!3939 = !DILocation(line: 1648, column: 59, scope: !3929)
!3940 = !DILocation(line: 1648, column: 31, scope: !3929)
!3941 = !DILocalVariable(name: "save_local_var_chain", scope: !3929, file: !3, line: 1649, type: !1640)
!3942 = !DILocation(line: 1649, column: 8, scope: !3929)
!3943 = !DILocalVariable(name: "save_suppress", scope: !3929, file: !3, line: 1650, type: !1573)
!3944 = !DILocation(line: 1650, column: 10, scope: !3929)
!3945 = !DILocalVariable(name: "stmt", scope: !3929, file: !3, line: 1651, type: !1905)
!3946 = !DILocation(line: 1651, column: 10, scope: !3929)
!3947 = !DILocation(line: 1651, column: 28, scope: !3929)
!3948 = !DILocation(line: 1651, column: 17, scope: !3929)
!3949 = !DILocation(line: 1653, column: 24, scope: !3929)
!3950 = !DILocation(line: 1653, column: 11, scope: !3929)
!3951 = !DILocation(line: 1653, column: 3, scope: !3929)
!3952 = !DILocation(line: 1657, column: 23, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 1654, column: 5)
!3954 = !DILocation(line: 1657, column: 29, scope: !3953)
!3955 = !DILocation(line: 1657, column: 21, scope: !3953)
!3956 = !DILocation(line: 1658, column: 70, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 1658, column: 11)
!3958 = !DILocation(line: 1658, column: 38, scope: !3957)
!3959 = !DILocation(line: 1659, column: 31, scope: !3957)
!3960 = !DILocation(line: 1658, column: 11, scope: !3957)
!3961 = !DILocation(line: 1658, column: 11, scope: !3953)
!3962 = !DILocalVariable(name: "c", scope: !3963, file: !3, line: 1661, type: !1640)
!3963 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 1660, column: 2)
!3964 = !DILocation(line: 1661, column: 9, scope: !3963)
!3965 = !DILocation(line: 1662, column: 27, scope: !3963)
!3966 = !DILocation(line: 1662, column: 11, scope: !3963)
!3967 = !DILocation(line: 1663, column: 43, scope: !3963)
!3968 = !DILocation(line: 1663, column: 26, scope: !3963)
!3969 = !DILocation(line: 1663, column: 8, scope: !3963)
!3970 = !DILocation(line: 1663, column: 6, scope: !3963)
!3971 = !DILocation(line: 1665, column: 26, scope: !3963)
!3972 = !DILocation(line: 1665, column: 32, scope: !3963)
!3973 = !DILocation(line: 1665, column: 4, scope: !3963)
!3974 = !DILocation(line: 1665, column: 24, scope: !3963)
!3975 = !DILocation(line: 1666, column: 55, scope: !3963)
!3976 = !DILocation(line: 1666, column: 27, scope: !3963)
!3977 = !DILocation(line: 1666, column: 4, scope: !3963)
!3978 = !DILocation(line: 1666, column: 25, scope: !3963)
!3979 = !DILocation(line: 1667, column: 36, scope: !3963)
!3980 = !DILocation(line: 1667, column: 42, scope: !3963)
!3981 = !DILocation(line: 1667, column: 4, scope: !3963)
!3982 = !DILocation(line: 1668, column: 2, scope: !3963)
!3983 = !DILocation(line: 1670, column: 30, scope: !3953)
!3984 = !DILocation(line: 1670, column: 36, scope: !3953)
!3985 = !DILocation(line: 1670, column: 28, scope: !3953)
!3986 = !DILocation(line: 1671, column: 7, scope: !3953)
!3987 = !DILocation(line: 1671, column: 13, scope: !3953)
!3988 = !DILocation(line: 1671, column: 33, scope: !3953)
!3989 = !DILocation(line: 1673, column: 76, scope: !3953)
!3990 = !DILocation(line: 1674, column: 28, scope: !3953)
!3991 = !DILocation(line: 1674, column: 11, scope: !3953)
!3992 = !DILocation(line: 1673, column: 7, scope: !3953)
!3993 = !DILocation(line: 1676, column: 11, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 1676, column: 11)
!3995 = !DILocation(line: 1676, column: 17, scope: !3994)
!3996 = !DILocation(line: 1676, column: 11, scope: !3953)
!3997 = !DILocation(line: 1677, column: 16, scope: !3994)
!3998 = !DILocation(line: 1677, column: 22, scope: !3994)
!3999 = !DILocation(line: 1678, column: 49, scope: !3994)
!4000 = !DILocation(line: 1678, column: 32, scope: !3994)
!4001 = !DILocation(line: 1678, column: 9, scope: !3994)
!4002 = !DILocation(line: 1677, column: 2, scope: !3994)
!4003 = !DILocation(line: 1679, column: 35, scope: !3953)
!4004 = !DILocation(line: 1679, column: 7, scope: !3953)
!4005 = !DILocation(line: 1679, column: 13, scope: !3953)
!4006 = !DILocation(line: 1679, column: 33, scope: !3953)
!4007 = !DILocation(line: 1680, column: 34, scope: !3953)
!4008 = !DILocation(line: 1680, column: 7, scope: !3953)
!4009 = !DILocation(line: 1680, column: 13, scope: !3953)
!4010 = !DILocation(line: 1680, column: 32, scope: !3953)
!4011 = !DILocation(line: 1681, column: 7, scope: !3953)
!4012 = !DILocation(line: 1684, column: 23, scope: !3953)
!4013 = !DILocation(line: 1684, column: 29, scope: !3953)
!4014 = !DILocation(line: 1684, column: 21, scope: !3953)
!4015 = !DILocation(line: 1685, column: 62, scope: !3953)
!4016 = !DILocation(line: 1685, column: 34, scope: !3953)
!4017 = !DILocation(line: 1685, column: 69, scope: !3953)
!4018 = !DILocation(line: 1685, column: 7, scope: !3953)
!4019 = !DILocation(line: 1686, column: 28, scope: !3953)
!4020 = !DILocation(line: 1687, column: 35, scope: !3953)
!4021 = !DILocation(line: 1686, column: 7, scope: !3953)
!4022 = !DILocation(line: 1689, column: 4, scope: !3953)
!4023 = !DILocation(line: 1689, column: 27, scope: !3953)
!4024 = !DILocation(line: 1689, column: 10, scope: !3953)
!4025 = !DILocation(line: 1688, column: 7, scope: !3953)
!4026 = !DILocation(line: 1690, column: 34, scope: !3953)
!4027 = !DILocation(line: 1690, column: 7, scope: !3953)
!4028 = !DILocation(line: 1690, column: 13, scope: !3953)
!4029 = !DILocation(line: 1690, column: 32, scope: !3953)
!4030 = !DILocation(line: 1691, column: 7, scope: !3953)
!4031 = !DILocation(line: 1694, column: 23, scope: !3953)
!4032 = !DILocation(line: 1694, column: 29, scope: !3953)
!4033 = !DILocation(line: 1694, column: 21, scope: !3953)
!4034 = !DILocation(line: 1695, column: 67, scope: !3953)
!4035 = !DILocation(line: 1695, column: 34, scope: !3953)
!4036 = !DILocation(line: 1695, column: 74, scope: !3953)
!4037 = !DILocation(line: 1695, column: 7, scope: !3953)
!4038 = !DILocation(line: 1697, column: 4, scope: !3953)
!4039 = !DILocation(line: 1697, column: 27, scope: !3953)
!4040 = !DILocation(line: 1697, column: 10, scope: !3953)
!4041 = !DILocation(line: 1696, column: 7, scope: !3953)
!4042 = !DILocation(line: 1698, column: 34, scope: !3953)
!4043 = !DILocation(line: 1698, column: 7, scope: !3953)
!4044 = !DILocation(line: 1698, column: 13, scope: !3953)
!4045 = !DILocation(line: 1698, column: 32, scope: !3953)
!4046 = !DILocation(line: 1699, column: 7, scope: !3953)
!4047 = !DILocation(line: 1702, column: 23, scope: !3953)
!4048 = !DILocation(line: 1702, column: 29, scope: !3953)
!4049 = !DILocation(line: 1702, column: 21, scope: !3953)
!4050 = !DILocation(line: 1703, column: 65, scope: !3953)
!4051 = !DILocation(line: 1703, column: 34, scope: !3953)
!4052 = !DILocation(line: 1703, column: 72, scope: !3953)
!4053 = !DILocation(line: 1703, column: 7, scope: !3953)
!4054 = !DILocation(line: 1705, column: 4, scope: !3953)
!4055 = !DILocation(line: 1705, column: 27, scope: !3953)
!4056 = !DILocation(line: 1705, column: 10, scope: !3953)
!4057 = !DILocation(line: 1704, column: 7, scope: !3953)
!4058 = !DILocation(line: 1706, column: 34, scope: !3953)
!4059 = !DILocation(line: 1706, column: 7, scope: !3953)
!4060 = !DILocation(line: 1706, column: 13, scope: !3953)
!4061 = !DILocation(line: 1706, column: 32, scope: !3953)
!4062 = !DILocation(line: 1707, column: 7, scope: !3953)
!4063 = !DILocation(line: 1713, column: 4, scope: !3953)
!4064 = !DILocation(line: 1713, column: 27, scope: !3953)
!4065 = !DILocation(line: 1713, column: 10, scope: !3953)
!4066 = !DILocation(line: 1712, column: 7, scope: !3953)
!4067 = !DILocation(line: 1714, column: 7, scope: !3953)
!4068 = !DILocation(line: 1717, column: 7, scope: !3953)
!4069 = !DILocation(line: 1717, column: 11, scope: !3953)
!4070 = !DILocation(line: 1717, column: 20, scope: !3953)
!4071 = !DILocation(line: 1718, column: 7, scope: !3953)
!4072 = !DILocation(line: 1718, column: 11, scope: !3953)
!4073 = !DILocation(line: 1718, column: 18, scope: !3953)
!4074 = !DILocation(line: 1719, column: 8, scope: !3953)
!4075 = !DILocation(line: 1719, column: 22, scope: !3953)
!4076 = !DILocation(line: 1720, column: 7, scope: !3953)
!4077 = !DILocation(line: 1725, column: 8, scope: !3953)
!4078 = !DILocation(line: 1725, column: 22, scope: !3953)
!4079 = !DILocation(line: 1726, column: 7, scope: !3953)
!4080 = !DILocation(line: 1730, column: 4, scope: !3929)
!4081 = !DILocation(line: 1730, column: 18, scope: !3929)
!4082 = !DILocation(line: 1731, column: 3, scope: !3929)
!4083 = !DILocation(line: 1732, column: 1, scope: !3929)
!4084 = distinct !DISubprogram(name: "convert_local_reference_op", scope: !3, file: !3, line: 1386, type: !3459, scopeLine: 1387, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4085 = !DILocalVariable(name: "tp", arg: 1, scope: !4084, file: !3, line: 1386, type: !1940)
!4086 = !DILocation(line: 1386, column: 35, scope: !4084)
!4087 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !4084, file: !3, line: 1386, type: !3461)
!4088 = !DILocation(line: 1386, column: 44, scope: !4084)
!4089 = !DILocalVariable(name: "data", arg: 3, scope: !4084, file: !3, line: 1386, type: !1630)
!4090 = !DILocation(line: 1386, column: 65, scope: !4084)
!4091 = !DILocalVariable(name: "wi", scope: !4084, file: !3, line: 1388, type: !2883)
!4092 = !DILocation(line: 1388, column: 26, scope: !4084)
!4093 = !DILocation(line: 1388, column: 57, scope: !4084)
!4094 = !DILocation(line: 1388, column: 31, scope: !4084)
!4095 = !DILocalVariable(name: "info", scope: !4084, file: !3, line: 1389, type: !3678)
!4096 = !DILocation(line: 1389, column: 30, scope: !4084)
!4097 = !DILocation(line: 1389, column: 61, scope: !4084)
!4098 = !DILocation(line: 1389, column: 65, scope: !4084)
!4099 = !DILocation(line: 1389, column: 37, scope: !4084)
!4100 = !DILocalVariable(name: "t", scope: !4084, file: !3, line: 1390, type: !1640)
!4101 = !DILocation(line: 1390, column: 8, scope: !4084)
!4102 = !DILocation(line: 1390, column: 13, scope: !4084)
!4103 = !DILocation(line: 1390, column: 12, scope: !4084)
!4104 = !DILocalVariable(name: "field", scope: !4084, file: !3, line: 1390, type: !1640)
!4105 = !DILocation(line: 1390, column: 17, scope: !4084)
!4106 = !DILocalVariable(name: "x", scope: !4084, file: !3, line: 1390, type: !1640)
!4107 = !DILocation(line: 1390, column: 24, scope: !4084)
!4108 = !DILocalVariable(name: "save_val_only", scope: !4084, file: !3, line: 1391, type: !1755)
!4109 = !DILocation(line: 1391, column: 8, scope: !4084)
!4110 = !DILocation(line: 1393, column: 4, scope: !4084)
!4111 = !DILocation(line: 1393, column: 18, scope: !4084)
!4112 = !DILocation(line: 1394, column: 11, scope: !4084)
!4113 = !DILocation(line: 1394, column: 3, scope: !4084)
!4114 = !DILocation(line: 1398, column: 11, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4116, file: !3, line: 1398, column: 11)
!4116 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 1395, column: 5)
!4117 = !DILocation(line: 1398, column: 27, scope: !4115)
!4118 = !DILocation(line: 1398, column: 30, scope: !4115)
!4119 = !DILocation(line: 1398, column: 11, scope: !4116)
!4120 = !DILocation(line: 1399, column: 2, scope: !4115)
!4121 = !DILocation(line: 1403, column: 34, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4116, file: !3, line: 1403, column: 11)
!4123 = !DILocation(line: 1403, column: 11, scope: !4122)
!4124 = !DILocation(line: 1403, column: 40, scope: !4122)
!4125 = !DILocation(line: 1403, column: 46, scope: !4122)
!4126 = !DILocation(line: 1403, column: 37, scope: !4122)
!4127 = !DILocation(line: 1403, column: 11, scope: !4116)
!4128 = !DILocation(line: 1407, column: 30, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1407, column: 8)
!4130 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 1404, column: 2)
!4131 = !DILocation(line: 1407, column: 8, scope: !4129)
!4132 = !DILocation(line: 1407, column: 8, scope: !4130)
!4133 = !DILocation(line: 1408, column: 6, scope: !4129)
!4134 = !DILocation(line: 1412, column: 35, scope: !4130)
!4135 = !DILocation(line: 1412, column: 41, scope: !4130)
!4136 = !DILocation(line: 1412, column: 12, scope: !4130)
!4137 = !DILocation(line: 1412, column: 10, scope: !4130)
!4138 = !DILocation(line: 1413, column: 9, scope: !4139)
!4139 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1413, column: 8)
!4140 = !DILocation(line: 1413, column: 8, scope: !4130)
!4141 = !DILocation(line: 1414, column: 6, scope: !4139)
!4142 = !DILocation(line: 1415, column: 4, scope: !4130)
!4143 = !DILocation(line: 1415, column: 8, scope: !4130)
!4144 = !DILocation(line: 1415, column: 16, scope: !4130)
!4145 = !DILocation(line: 1417, column: 30, scope: !4130)
!4146 = !DILocation(line: 1417, column: 36, scope: !4130)
!4147 = !DILocation(line: 1417, column: 39, scope: !4130)
!4148 = !DILocation(line: 1417, column: 8, scope: !4130)
!4149 = !DILocation(line: 1417, column: 6, scope: !4130)
!4150 = !DILocation(line: 1418, column: 23, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1418, column: 8)
!4152 = !DILocation(line: 1418, column: 29, scope: !4151)
!4153 = !DILocation(line: 1418, column: 49, scope: !4151)
!4154 = !DILocation(line: 1418, column: 9, scope: !4151)
!4155 = !DILocation(line: 1418, column: 8, scope: !4130)
!4156 = !DILocation(line: 1419, column: 27, scope: !4151)
!4157 = !DILocation(line: 1419, column: 33, scope: !4151)
!4158 = !DILocation(line: 1419, column: 39, scope: !4151)
!4159 = !DILocation(line: 1419, column: 48, scope: !4151)
!4160 = !DILocation(line: 1419, column: 56, scope: !4151)
!4161 = !DILocation(line: 1419, column: 60, scope: !4151)
!4162 = !DILocation(line: 1419, column: 10, scope: !4151)
!4163 = !DILocation(line: 1419, column: 8, scope: !4151)
!4164 = !DILocation(line: 1419, column: 6, scope: !4151)
!4165 = !DILocation(line: 1421, column: 8, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1421, column: 8)
!4167 = !DILocation(line: 1421, column: 12, scope: !4166)
!4168 = !DILocation(line: 1421, column: 8, scope: !4130)
!4169 = !DILocation(line: 1423, column: 12, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 1423, column: 12)
!4171 = distinct !DILexicalBlock(scope: !4166, file: !3, line: 1422, column: 6)
!4172 = !DILocation(line: 1423, column: 16, scope: !4170)
!4173 = !DILocation(line: 1423, column: 12, scope: !4171)
!4174 = !DILocation(line: 1424, column: 21, scope: !4170)
!4175 = !DILocation(line: 1424, column: 27, scope: !4170)
!4176 = !DILocation(line: 1424, column: 31, scope: !4170)
!4177 = !DILocation(line: 1424, column: 35, scope: !4170)
!4178 = !DILocation(line: 1424, column: 7, scope: !4170)
!4179 = !DILocation(line: 1424, column: 5, scope: !4170)
!4180 = !DILocation(line: 1424, column: 3, scope: !4170)
!4181 = !DILocation(line: 1426, column: 21, scope: !4170)
!4182 = !DILocation(line: 1426, column: 27, scope: !4170)
!4183 = !DILocation(line: 1426, column: 31, scope: !4170)
!4184 = !DILocation(line: 1426, column: 35, scope: !4170)
!4185 = !DILocation(line: 1426, column: 7, scope: !4170)
!4186 = !DILocation(line: 1426, column: 5, scope: !4170)
!4187 = !DILocation(line: 1427, column: 6, scope: !4171)
!4188 = !DILocation(line: 1429, column: 10, scope: !4130)
!4189 = !DILocation(line: 1429, column: 5, scope: !4130)
!4190 = !DILocation(line: 1429, column: 8, scope: !4130)
!4191 = !DILocation(line: 1430, column: 2, scope: !4130)
!4192 = !DILocation(line: 1431, column: 7, scope: !4116)
!4193 = !DILocation(line: 1434, column: 23, scope: !4116)
!4194 = !DILocation(line: 1434, column: 27, scope: !4116)
!4195 = !DILocation(line: 1434, column: 21, scope: !4116)
!4196 = !DILocation(line: 1435, column: 7, scope: !4116)
!4197 = !DILocation(line: 1435, column: 11, scope: !4116)
!4198 = !DILocation(line: 1435, column: 20, scope: !4116)
!4199 = !DILocation(line: 1436, column: 7, scope: !4116)
!4200 = !DILocation(line: 1436, column: 11, scope: !4116)
!4201 = !DILocation(line: 1436, column: 18, scope: !4116)
!4202 = !DILocation(line: 1437, column: 7, scope: !4116)
!4203 = !DILocation(line: 1437, column: 11, scope: !4116)
!4204 = !DILocation(line: 1437, column: 19, scope: !4116)
!4205 = !DILocation(line: 1438, column: 7, scope: !4116)
!4206 = !DILocation(line: 1439, column: 22, scope: !4116)
!4207 = !DILocation(line: 1439, column: 7, scope: !4116)
!4208 = !DILocation(line: 1439, column: 11, scope: !4116)
!4209 = !DILocation(line: 1439, column: 20, scope: !4116)
!4210 = !DILocation(line: 1442, column: 11, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4116, file: !3, line: 1442, column: 11)
!4212 = !DILocation(line: 1442, column: 15, scope: !4211)
!4213 = !DILocation(line: 1442, column: 11, scope: !4116)
!4214 = !DILocalVariable(name: "save_context", scope: !4215, file: !3, line: 1444, type: !1640)
!4215 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 1443, column: 2)
!4216 = !DILocation(line: 1444, column: 9, scope: !4215)
!4217 = !DILocation(line: 1447, column: 4, scope: !4215)
!4218 = !DILocation(line: 1447, column: 40, scope: !4215)
!4219 = !DILocation(line: 1449, column: 19, scope: !4215)
!4220 = !DILocation(line: 1449, column: 17, scope: !4215)
!4221 = !DILocation(line: 1450, column: 28, scope: !4215)
!4222 = !DILocation(line: 1450, column: 34, scope: !4215)
!4223 = !DILocation(line: 1450, column: 26, scope: !4215)
!4224 = !DILocation(line: 1451, column: 44, scope: !4215)
!4225 = !DILocation(line: 1451, column: 4, scope: !4215)
!4226 = !DILocation(line: 1452, column: 28, scope: !4215)
!4227 = !DILocation(line: 1452, column: 26, scope: !4215)
!4228 = !DILocation(line: 1456, column: 8, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4215, file: !3, line: 1456, column: 8)
!4230 = !DILocation(line: 1456, column: 8, scope: !4215)
!4231 = !DILocation(line: 1457, column: 54, scope: !4229)
!4232 = !DILocation(line: 1457, column: 58, scope: !4229)
!4233 = !DILocation(line: 1457, column: 30, scope: !4229)
!4234 = !DILocation(line: 1458, column: 9, scope: !4229)
!4235 = !DILocation(line: 1458, column: 13, scope: !4229)
!4236 = !DILocation(line: 1458, column: 17, scope: !4229)
!4237 = !DILocation(line: 1457, column: 12, scope: !4229)
!4238 = !DILocation(line: 1457, column: 7, scope: !4229)
!4239 = !DILocation(line: 1457, column: 10, scope: !4229)
!4240 = !DILocation(line: 1457, column: 6, scope: !4229)
!4241 = !DILocation(line: 1459, column: 2, scope: !4215)
!4242 = !DILocation(line: 1460, column: 7, scope: !4116)
!4243 = !DILocation(line: 1471, column: 23, scope: !4116)
!4244 = !DILocation(line: 1471, column: 27, scope: !4116)
!4245 = !DILocation(line: 1471, column: 21, scope: !4116)
!4246 = !DILocation(line: 1472, column: 7, scope: !4116)
!4247 = !DILocation(line: 1472, column: 11, scope: !4116)
!4248 = !DILocation(line: 1472, column: 20, scope: !4116)
!4249 = !DILocation(line: 1473, column: 7, scope: !4116)
!4250 = !DILocation(line: 1473, column: 11, scope: !4116)
!4251 = !DILocation(line: 1473, column: 18, scope: !4116)
!4252 = !DILocation(line: 1474, column: 7, scope: !4116)
!4253 = !DILocation(line: 1474, column: 35, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4255, file: !3, line: 1474, column: 7)
!4255 = distinct !DILexicalBlock(scope: !4116, file: !3, line: 1474, column: 7)
!4256 = !DILocation(line: 1474, column: 14, scope: !4254)
!4257 = !DILocation(line: 1474, column: 7, scope: !4255)
!4258 = !DILocation(line: 1476, column: 8, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 1476, column: 8)
!4260 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 1475, column: 2)
!4261 = !DILocation(line: 1476, column: 22, scope: !4259)
!4262 = !DILocation(line: 1476, column: 8, scope: !4260)
!4263 = !DILocation(line: 1477, column: 6, scope: !4259)
!4264 = !DILocation(line: 1479, column: 13, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4259, file: !3, line: 1479, column: 13)
!4266 = !DILocation(line: 1479, column: 27, scope: !4265)
!4267 = !DILocation(line: 1480, column: 6, scope: !4265)
!4268 = !DILocation(line: 1480, column: 9, scope: !4265)
!4269 = !DILocation(line: 1480, column: 23, scope: !4265)
!4270 = !DILocation(line: 1479, column: 13, scope: !4259)
!4271 = !DILocation(line: 1482, column: 8, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 1481, column: 6)
!4273 = !DILocation(line: 1484, column: 8, scope: !4272)
!4274 = !DILocation(line: 1486, column: 8, scope: !4272)
!4275 = !DILocation(line: 1488, column: 6, scope: !4272)
!4276 = !DILocation(line: 1489, column: 13, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 1489, column: 13)
!4278 = !DILocation(line: 1489, column: 27, scope: !4277)
!4279 = !DILocation(line: 1489, column: 13, scope: !4265)
!4280 = !DILocation(line: 1491, column: 8, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 1490, column: 6)
!4282 = !DILocation(line: 1493, column: 8, scope: !4281)
!4283 = !DILocation(line: 1495, column: 6, scope: !4281)
!4284 = !DILocation(line: 1496, column: 2, scope: !4260)
!4285 = !DILocation(line: 1474, column: 45, scope: !4254)
!4286 = !DILocation(line: 1474, column: 42, scope: !4254)
!4287 = !DILocation(line: 1474, column: 71, scope: !4254)
!4288 = !DILocation(line: 1474, column: 70, scope: !4254)
!4289 = !DILocation(line: 1474, column: 68, scope: !4254)
!4290 = !DILocation(line: 1474, column: 7, scope: !4254)
!4291 = distinct !{!4291, !4257, !4292}
!4292 = !DILocation(line: 1496, column: 2, scope: !4255)
!4293 = !DILocation(line: 1497, column: 7, scope: !4116)
!4294 = !DILocation(line: 1497, column: 11, scope: !4116)
!4295 = !DILocation(line: 1497, column: 20, scope: !4116)
!4296 = !DILocation(line: 1498, column: 7, scope: !4116)
!4297 = !DILocation(line: 1499, column: 22, scope: !4116)
!4298 = !DILocation(line: 1499, column: 7, scope: !4116)
!4299 = !DILocation(line: 1499, column: 11, scope: !4116)
!4300 = !DILocation(line: 1499, column: 20, scope: !4116)
!4301 = !DILocation(line: 1500, column: 7, scope: !4116)
!4302 = !DILocation(line: 1506, column: 8, scope: !4116)
!4303 = !DILocation(line: 1506, column: 22, scope: !4116)
!4304 = !DILocation(line: 1507, column: 7, scope: !4116)
!4305 = !DILocation(line: 1510, column: 12, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4116, file: !3, line: 1510, column: 11)
!4307 = !DILocation(line: 1510, column: 11, scope: !4116)
!4308 = !DILocation(line: 1512, column: 5, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4306, file: !3, line: 1511, column: 2)
!4310 = !DILocation(line: 1512, column: 19, scope: !4309)
!4311 = !DILocation(line: 1513, column: 4, scope: !4309)
!4312 = !DILocation(line: 1513, column: 8, scope: !4309)
!4313 = !DILocation(line: 1513, column: 17, scope: !4309)
!4314 = !DILocation(line: 1514, column: 4, scope: !4309)
!4315 = !DILocation(line: 1514, column: 8, scope: !4309)
!4316 = !DILocation(line: 1514, column: 15, scope: !4309)
!4317 = !DILocation(line: 1515, column: 2, scope: !4309)
!4318 = !DILocation(line: 1516, column: 7, scope: !4116)
!4319 = !DILocation(line: 1519, column: 3, scope: !4084)
!4320 = distinct !DISubprogram(name: "convert_nl_goto_reference", scope: !3, file: !3, line: 1740, type: !3453, scopeLine: 1742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4321 = !DILocalVariable(name: "gsi", arg: 1, scope: !4320, file: !3, line: 1740, type: !3455)
!4322 = !DILocation(line: 1740, column: 50, scope: !4320)
!4323 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !4320, file: !3, line: 1740, type: !3456)
!4324 = !DILocation(line: 1740, column: 61, scope: !4320)
!4325 = !DILocalVariable(name: "wi", arg: 3, scope: !4320, file: !3, line: 1741, type: !2883)
!4326 = !DILocation(line: 1741, column: 30, scope: !4320)
!4327 = !DILocalVariable(name: "info", scope: !4320, file: !3, line: 1743, type: !3678)
!4328 = !DILocation(line: 1743, column: 30, scope: !4320)
!4329 = !DILocation(line: 1743, column: 61, scope: !4320)
!4330 = !DILocation(line: 1743, column: 65, scope: !4320)
!4331 = !DILocation(line: 1743, column: 37, scope: !4320)
!4332 = !DILocalVariable(name: "i", scope: !4320, file: !3, line: 1743, type: !1561)
!4333 = !DILocation(line: 1743, column: 72, scope: !4320)
!4334 = !DILocalVariable(name: "label", scope: !4320, file: !3, line: 1744, type: !1640)
!4335 = !DILocation(line: 1744, column: 8, scope: !4320)
!4336 = !DILocalVariable(name: "new_label", scope: !4320, file: !3, line: 1744, type: !1640)
!4337 = !DILocation(line: 1744, column: 15, scope: !4320)
!4338 = !DILocalVariable(name: "target_context", scope: !4320, file: !3, line: 1744, type: !1640)
!4339 = !DILocation(line: 1744, column: 26, scope: !4320)
!4340 = !DILocalVariable(name: "x", scope: !4320, file: !3, line: 1744, type: !1640)
!4341 = !DILocation(line: 1744, column: 42, scope: !4320)
!4342 = !DILocalVariable(name: "field", scope: !4320, file: !3, line: 1744, type: !1640)
!4343 = !DILocation(line: 1744, column: 45, scope: !4320)
!4344 = !DILocalVariable(name: "slot", scope: !4320, file: !3, line: 1745, type: !2360)
!4345 = !DILocation(line: 1745, column: 10, scope: !4320)
!4346 = !DILocalVariable(name: "call", scope: !4320, file: !3, line: 1746, type: !1905)
!4347 = !DILocation(line: 1746, column: 10, scope: !4320)
!4348 = !DILocalVariable(name: "stmt", scope: !4320, file: !3, line: 1747, type: !1905)
!4349 = !DILocation(line: 1747, column: 10, scope: !4320)
!4350 = !DILocation(line: 1747, column: 28, scope: !4320)
!4351 = !DILocation(line: 1747, column: 17, scope: !4320)
!4352 = !DILocation(line: 1749, column: 20, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1749, column: 7)
!4354 = !DILocation(line: 1749, column: 7, scope: !4353)
!4355 = !DILocation(line: 1749, column: 26, scope: !4353)
!4356 = !DILocation(line: 1749, column: 7, scope: !4320)
!4357 = !DILocation(line: 1751, column: 8, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1750, column: 5)
!4359 = !DILocation(line: 1751, column: 22, scope: !4358)
!4360 = !DILocation(line: 1752, column: 7, scope: !4358)
!4361 = !DILocation(line: 1755, column: 29, scope: !4320)
!4362 = !DILocation(line: 1755, column: 11, scope: !4320)
!4363 = !DILocation(line: 1755, column: 9, scope: !4320)
!4364 = !DILocation(line: 1756, column: 7, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1756, column: 7)
!4366 = !DILocation(line: 1756, column: 25, scope: !4365)
!4367 = !DILocation(line: 1756, column: 7, scope: !4320)
!4368 = !DILocation(line: 1758, column: 8, scope: !4369)
!4369 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 1757, column: 5)
!4370 = !DILocation(line: 1758, column: 22, scope: !4369)
!4371 = !DILocation(line: 1759, column: 7, scope: !4369)
!4372 = !DILocation(line: 1762, column: 43, scope: !4320)
!4373 = !DILocation(line: 1762, column: 20, scope: !4320)
!4374 = !DILocation(line: 1762, column: 18, scope: !4320)
!4375 = !DILocation(line: 1763, column: 7, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1763, column: 7)
!4377 = !DILocation(line: 1763, column: 25, scope: !4376)
!4378 = !DILocation(line: 1763, column: 31, scope: !4376)
!4379 = !DILocation(line: 1763, column: 22, scope: !4376)
!4380 = !DILocation(line: 1763, column: 7, scope: !4320)
!4381 = !DILocation(line: 1765, column: 8, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1764, column: 5)
!4383 = !DILocation(line: 1765, column: 22, scope: !4382)
!4384 = !DILocation(line: 1766, column: 7, scope: !4382)
!4385 = !DILocation(line: 1769, column: 12, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1769, column: 3)
!4387 = !DILocation(line: 1769, column: 18, scope: !4386)
!4388 = !DILocation(line: 1769, column: 10, scope: !4386)
!4389 = !DILocation(line: 1769, column: 8, scope: !4386)
!4390 = !DILocation(line: 1769, column: 25, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1769, column: 3)
!4392 = !DILocation(line: 1769, column: 43, scope: !4391)
!4393 = !DILocation(line: 1769, column: 46, scope: !4391)
!4394 = !DILocation(line: 1769, column: 40, scope: !4391)
!4395 = !DILocation(line: 1769, column: 3, scope: !4386)
!4396 = !DILocation(line: 1770, column: 5, scope: !4391)
!4397 = !DILocation(line: 1769, column: 59, scope: !4391)
!4398 = !DILocation(line: 1769, column: 62, scope: !4391)
!4399 = !DILocation(line: 1769, column: 57, scope: !4391)
!4400 = !DILocation(line: 1769, column: 3, scope: !4391)
!4401 = distinct !{!4401, !4395, !4402}
!4402 = !DILocation(line: 1770, column: 5, scope: !4386)
!4403 = !DILocation(line: 1779, column: 30, scope: !4320)
!4404 = !DILocation(line: 1779, column: 33, scope: !4320)
!4405 = !DILocation(line: 1779, column: 42, scope: !4320)
!4406 = !DILocation(line: 1779, column: 10, scope: !4320)
!4407 = !DILocation(line: 1779, column: 8, scope: !4320)
!4408 = !DILocation(line: 1780, column: 8, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 1780, column: 7)
!4410 = !DILocation(line: 1780, column: 7, scope: !4409)
!4411 = !DILocation(line: 1780, column: 13, scope: !4409)
!4412 = !DILocation(line: 1780, column: 7, scope: !4320)
!4413 = !DILocation(line: 1782, column: 19, scope: !4414)
!4414 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 1781, column: 5)
!4415 = !DILocation(line: 1782, column: 17, scope: !4414)
!4416 = !DILocation(line: 1783, column: 7, scope: !4414)
!4417 = !DILocation(line: 1783, column: 33, scope: !4414)
!4418 = !DILocation(line: 1784, column: 15, scope: !4414)
!4419 = !DILocation(line: 1784, column: 8, scope: !4414)
!4420 = !DILocation(line: 1784, column: 13, scope: !4414)
!4421 = !DILocation(line: 1785, column: 5, scope: !4414)
!4422 = !DILocation(line: 1787, column: 25, scope: !4409)
!4423 = !DILocation(line: 1787, column: 24, scope: !4409)
!4424 = !DILocation(line: 1787, column: 17, scope: !4409)
!4425 = !DILocation(line: 1787, column: 15, scope: !4409)
!4426 = !DILocation(line: 1790, column: 30, scope: !4320)
!4427 = !DILocation(line: 1790, column: 11, scope: !4320)
!4428 = !DILocation(line: 1790, column: 9, scope: !4320)
!4429 = !DILocation(line: 1791, column: 24, scope: !4320)
!4430 = !DILocation(line: 1791, column: 30, scope: !4320)
!4431 = !DILocation(line: 1791, column: 46, scope: !4320)
!4432 = !DILocation(line: 1791, column: 54, scope: !4320)
!4433 = !DILocation(line: 1791, column: 58, scope: !4320)
!4434 = !DILocation(line: 1791, column: 7, scope: !4320)
!4435 = !DILocation(line: 1791, column: 5, scope: !4320)
!4436 = !DILocation(line: 1792, column: 19, scope: !4320)
!4437 = !DILocation(line: 1792, column: 22, scope: !4320)
!4438 = !DILocation(line: 1792, column: 7, scope: !4320)
!4439 = !DILocation(line: 1792, column: 5, scope: !4320)
!4440 = !DILocation(line: 1793, column: 25, scope: !4320)
!4441 = !DILocation(line: 1793, column: 31, scope: !4320)
!4442 = !DILocation(line: 1793, column: 35, scope: !4320)
!4443 = !DILocation(line: 1793, column: 39, scope: !4320)
!4444 = !DILocation(line: 1793, column: 7, scope: !4320)
!4445 = !DILocation(line: 1793, column: 5, scope: !4320)
!4446 = !DILocation(line: 1794, column: 29, scope: !4320)
!4447 = !DILocation(line: 1795, column: 20, scope: !4320)
!4448 = !DILocation(line: 1795, column: 31, scope: !4320)
!4449 = !DILocation(line: 1795, column: 8, scope: !4320)
!4450 = !DILocation(line: 1795, column: 48, scope: !4320)
!4451 = !DILocation(line: 1794, column: 10, scope: !4320)
!4452 = !DILocation(line: 1794, column: 8, scope: !4320)
!4453 = !DILocation(line: 1796, column: 17, scope: !4320)
!4454 = !DILocation(line: 1796, column: 21, scope: !4320)
!4455 = !DILocation(line: 1796, column: 26, scope: !4320)
!4456 = !DILocation(line: 1796, column: 3, scope: !4320)
!4457 = !DILocation(line: 1799, column: 4, scope: !4320)
!4458 = !DILocation(line: 1799, column: 18, scope: !4320)
!4459 = !DILocation(line: 1800, column: 3, scope: !4320)
!4460 = !DILocation(line: 1801, column: 1, scope: !4320)
!4461 = distinct !DISubprogram(name: "convert_nl_goto_receiver", scope: !3, file: !3, line: 1811, type: !3453, scopeLine: 1813, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4462 = !DILocalVariable(name: "gsi", arg: 1, scope: !4461, file: !3, line: 1811, type: !3455)
!4463 = !DILocation(line: 1811, column: 49, scope: !4461)
!4464 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !4461, file: !3, line: 1811, type: !3456)
!4465 = !DILocation(line: 1811, column: 60, scope: !4461)
!4466 = !DILocalVariable(name: "wi", arg: 3, scope: !4461, file: !3, line: 1812, type: !2883)
!4467 = !DILocation(line: 1812, column: 29, scope: !4461)
!4468 = !DILocalVariable(name: "info", scope: !4461, file: !3, line: 1814, type: !3678)
!4469 = !DILocation(line: 1814, column: 30, scope: !4461)
!4470 = !DILocation(line: 1814, column: 61, scope: !4461)
!4471 = !DILocation(line: 1814, column: 65, scope: !4461)
!4472 = !DILocation(line: 1814, column: 37, scope: !4461)
!4473 = !DILocalVariable(name: "label", scope: !4461, file: !3, line: 1815, type: !1640)
!4474 = !DILocation(line: 1815, column: 8, scope: !4461)
!4475 = !DILocalVariable(name: "new_label", scope: !4461, file: !3, line: 1815, type: !1640)
!4476 = !DILocation(line: 1815, column: 15, scope: !4461)
!4477 = !DILocalVariable(name: "tmp_gsi", scope: !4461, file: !3, line: 1816, type: !2887)
!4478 = !DILocation(line: 1816, column: 24, scope: !4461)
!4479 = !DILocalVariable(name: "slot", scope: !4461, file: !3, line: 1817, type: !2360)
!4480 = !DILocation(line: 1817, column: 10, scope: !4461)
!4481 = !DILocalVariable(name: "stmt", scope: !4461, file: !3, line: 1818, type: !1905)
!4482 = !DILocation(line: 1818, column: 10, scope: !4461)
!4483 = !DILocation(line: 1818, column: 28, scope: !4461)
!4484 = !DILocation(line: 1818, column: 17, scope: !4461)
!4485 = !DILocation(line: 1820, column: 20, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1820, column: 7)
!4487 = !DILocation(line: 1820, column: 7, scope: !4486)
!4488 = !DILocation(line: 1820, column: 26, scope: !4486)
!4489 = !DILocation(line: 1820, column: 7, scope: !4461)
!4490 = !DILocation(line: 1822, column: 8, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 1821, column: 5)
!4492 = !DILocation(line: 1822, column: 22, scope: !4491)
!4493 = !DILocation(line: 1823, column: 7, scope: !4491)
!4494 = !DILocation(line: 1826, column: 31, scope: !4461)
!4495 = !DILocation(line: 1826, column: 11, scope: !4461)
!4496 = !DILocation(line: 1826, column: 9, scope: !4461)
!4497 = !DILocation(line: 1828, column: 32, scope: !4461)
!4498 = !DILocation(line: 1828, column: 38, scope: !4461)
!4499 = !DILocation(line: 1828, column: 47, scope: !4461)
!4500 = !DILocation(line: 1828, column: 10, scope: !4461)
!4501 = !DILocation(line: 1828, column: 8, scope: !4461)
!4502 = !DILocation(line: 1829, column: 8, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1829, column: 7)
!4504 = !DILocation(line: 1829, column: 7, scope: !4461)
!4505 = !DILocation(line: 1831, column: 8, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4503, file: !3, line: 1830, column: 5)
!4507 = !DILocation(line: 1831, column: 22, scope: !4506)
!4508 = !DILocation(line: 1832, column: 7, scope: !4506)
!4509 = !DILocation(line: 1837, column: 13, scope: !4461)
!4510 = !DILocation(line: 1837, column: 17, scope: !4461)
!4511 = !DILocation(line: 1838, column: 3, scope: !4461)
!4512 = !DILocation(line: 1839, column: 7, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1839, column: 7)
!4514 = !DILocation(line: 1839, column: 27, scope: !4513)
!4515 = !DILocation(line: 1839, column: 56, scope: !4513)
!4516 = !DILocation(line: 1839, column: 30, scope: !4513)
!4517 = !DILocation(line: 1839, column: 7, scope: !4461)
!4518 = !DILocalVariable(name: "stmt", scope: !4519, file: !3, line: 1841, type: !1905)
!4519 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 1840, column: 5)
!4520 = !DILocation(line: 1841, column: 14, scope: !4519)
!4521 = !DILocation(line: 1841, column: 40, scope: !4519)
!4522 = !DILocation(line: 1841, column: 21, scope: !4519)
!4523 = !DILocation(line: 1842, column: 26, scope: !4519)
!4524 = !DILocation(line: 1842, column: 31, scope: !4519)
!4525 = !DILocation(line: 1842, column: 7, scope: !4519)
!4526 = !DILocation(line: 1843, column: 5, scope: !4519)
!4527 = !DILocation(line: 1845, column: 23, scope: !4461)
!4528 = !DILocation(line: 1845, column: 22, scope: !4461)
!4529 = !DILocation(line: 1845, column: 15, scope: !4461)
!4530 = !DILocation(line: 1845, column: 13, scope: !4461)
!4531 = !DILocation(line: 1846, column: 30, scope: !4461)
!4532 = !DILocation(line: 1846, column: 10, scope: !4461)
!4533 = !DILocation(line: 1846, column: 8, scope: !4461)
!4534 = !DILocation(line: 1847, column: 22, scope: !4461)
!4535 = !DILocation(line: 1847, column: 27, scope: !4461)
!4536 = !DILocation(line: 1847, column: 3, scope: !4461)
!4537 = !DILocation(line: 1849, column: 4, scope: !4461)
!4538 = !DILocation(line: 1849, column: 18, scope: !4461)
!4539 = !DILocation(line: 1850, column: 3, scope: !4461)
!4540 = !DILocation(line: 1851, column: 1, scope: !4461)
!4541 = distinct !DISubprogram(name: "convert_all_function_calls", scope: !3, file: !3, line: 2055, type: !4542, scopeLine: 2056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4542 = !DISubroutineType(types: !4543)
!4543 = !{null, !1561}
!4544 = !DILocalVariable(name: "root", arg: 1, scope: !4541, file: !3, line: 2055, type: !1561)
!4545 = !DILocation(line: 2055, column: 50, scope: !4541)
!4546 = !DILocalVariable(name: "n", scope: !4541, file: !3, line: 2057, type: !1561)
!4547 = !DILocation(line: 2057, column: 24, scope: !4541)
!4548 = !DILocalVariable(name: "iter_count", scope: !4541, file: !3, line: 2058, type: !1560)
!4549 = !DILocation(line: 2058, column: 7, scope: !4541)
!4550 = !DILocalVariable(name: "any_changed", scope: !4541, file: !3, line: 2059, type: !1755)
!4551 = !DILocation(line: 2059, column: 8, scope: !4541)
!4552 = !DILocation(line: 2063, column: 3, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 2063, column: 3)
!4554 = !DILocation(line: 2063, column: 3, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 2063, column: 3)
!4556 = !DILocalVariable(name: "decl", scope: !4557, file: !3, line: 2065, type: !1640)
!4557 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 2064, column: 5)
!4558 = !DILocation(line: 2065, column: 12, scope: !4557)
!4559 = !DILocation(line: 2065, column: 19, scope: !4557)
!4560 = !DILocation(line: 2065, column: 22, scope: !4557)
!4561 = !DILocation(line: 2066, column: 12, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4557, file: !3, line: 2066, column: 11)
!4563 = !DILocation(line: 2066, column: 15, scope: !4562)
!4564 = !DILocation(line: 2066, column: 21, scope: !4562)
!4565 = !DILocation(line: 2066, column: 26, scope: !4562)
!4566 = !DILocation(line: 2066, column: 29, scope: !4562)
!4567 = !DILocation(line: 2066, column: 40, scope: !4562)
!4568 = !DILocation(line: 2066, column: 44, scope: !4562)
!4569 = !DILocation(line: 2066, column: 47, scope: !4562)
!4570 = !DILocation(line: 2066, column: 11, scope: !4557)
!4571 = !DILocation(line: 2068, column: 4, scope: !4572)
!4572 = distinct !DILexicalBlock(scope: !4562, file: !3, line: 2067, column: 2)
!4573 = !DILocation(line: 2068, column: 29, scope: !4572)
!4574 = !DILocation(line: 2069, column: 8, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4572, file: !3, line: 2069, column: 8)
!4576 = !DILocation(line: 2069, column: 18, scope: !4575)
!4577 = !DILocation(line: 2069, column: 22, scope: !4575)
!4578 = !DILocation(line: 2069, column: 33, scope: !4575)
!4579 = !DILocation(line: 2069, column: 8, scope: !4572)
!4580 = !DILocation(line: 2070, column: 15, scope: !4575)
!4581 = !DILocation(line: 2071, column: 19, scope: !4575)
!4582 = !DILocation(line: 2071, column: 40, scope: !4575)
!4583 = !DILocation(line: 2071, column: 8, scope: !4575)
!4584 = !DILocation(line: 2070, column: 6, scope: !4575)
!4585 = !DILocation(line: 2072, column: 2, scope: !4572)
!4586 = !DILocation(line: 2074, column: 2, scope: !4562)
!4587 = !DILocation(line: 2074, column: 27, scope: !4562)
!4588 = !DILocation(line: 2075, column: 5, scope: !4557)
!4589 = distinct !{!4589, !4552, !4590}
!4590 = !DILocation(line: 2075, column: 5, scope: !4553)
!4591 = !DILocation(line: 2084, column: 14, scope: !4541)
!4592 = !DILocation(line: 2085, column: 3, scope: !4541)
!4593 = !DILocation(line: 2087, column: 19, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 2086, column: 5)
!4595 = !DILocation(line: 2088, column: 17, scope: !4594)
!4596 = !DILocation(line: 2090, column: 11, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2090, column: 11)
!4598 = !DILocation(line: 2090, column: 21, scope: !4597)
!4599 = !DILocation(line: 2090, column: 25, scope: !4597)
!4600 = !DILocation(line: 2090, column: 36, scope: !4597)
!4601 = !DILocation(line: 2090, column: 11, scope: !4594)
!4602 = !DILocation(line: 2091, column: 15, scope: !4597)
!4603 = !DILocation(line: 2091, column: 2, scope: !4597)
!4604 = !DILocation(line: 2093, column: 7, scope: !4605)
!4605 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 2093, column: 7)
!4606 = !DILocation(line: 2093, column: 7, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4605, file: !3, line: 2093, column: 7)
!4608 = !DILocalVariable(name: "decl", scope: !4609, file: !3, line: 2095, type: !1640)
!4609 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 2094, column: 2)
!4610 = !DILocation(line: 2095, column: 9, scope: !4609)
!4611 = !DILocation(line: 2095, column: 16, scope: !4609)
!4612 = !DILocation(line: 2095, column: 19, scope: !4609)
!4613 = !DILocalVariable(name: "old_static_chain", scope: !4609, file: !3, line: 2096, type: !1755)
!4614 = !DILocation(line: 2096, column: 9, scope: !4609)
!4615 = !DILocation(line: 2096, column: 28, scope: !4609)
!4616 = !DILocation(line: 2099, column: 33, scope: !4609)
!4617 = !DILocation(line: 2098, column: 4, scope: !4609)
!4618 = !DILocation(line: 2100, column: 46, scope: !4609)
!4619 = !DILocation(line: 2100, column: 4, scope: !4609)
!4620 = !DILocation(line: 2104, column: 9, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 2104, column: 8)
!4622 = !DILocation(line: 2104, column: 26, scope: !4621)
!4623 = !DILocation(line: 2104, column: 29, scope: !4621)
!4624 = !DILocation(line: 2104, column: 8, scope: !4609)
!4625 = !DILocation(line: 2105, column: 18, scope: !4621)
!4626 = !DILocation(line: 2105, column: 6, scope: !4621)
!4627 = !DILocation(line: 2106, column: 2, scope: !4609)
!4628 = distinct !{!4628, !4604, !4629}
!4629 = !DILocation(line: 2106, column: 2, scope: !4605)
!4630 = !DILocation(line: 2107, column: 5, scope: !4594)
!4631 = !DILocation(line: 2108, column: 10, scope: !4541)
!4632 = distinct !{!4632, !4592, !4633}
!4633 = !DILocation(line: 2108, column: 21, scope: !4541)
!4634 = !DILocation(line: 2110, column: 7, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 2110, column: 7)
!4636 = !DILocation(line: 2110, column: 17, scope: !4635)
!4637 = !DILocation(line: 2110, column: 21, scope: !4635)
!4638 = !DILocation(line: 2110, column: 32, scope: !4635)
!4639 = !DILocation(line: 2110, column: 7, scope: !4541)
!4640 = !DILocation(line: 2111, column: 14, scope: !4635)
!4641 = !DILocation(line: 2112, column: 7, scope: !4635)
!4642 = !DILocation(line: 2111, column: 5, scope: !4635)
!4643 = !DILocation(line: 2113, column: 1, scope: !4541)
!4644 = distinct !DISubprogram(name: "finalize_nesting_tree", scope: !3, file: !3, line: 2474, type: !4542, scopeLine: 2475, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4645 = !DILocalVariable(name: "root", arg: 1, scope: !4644, file: !3, line: 2474, type: !1561)
!4646 = !DILocation(line: 2474, column: 45, scope: !4644)
!4647 = !DILocalVariable(name: "n", scope: !4644, file: !3, line: 2476, type: !1561)
!4648 = !DILocation(line: 2476, column: 24, scope: !4644)
!4649 = !DILocation(line: 2477, column: 3, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4644, file: !3, line: 2477, column: 3)
!4651 = !DILocation(line: 2477, column: 3, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 2477, column: 3)
!4653 = !DILocation(line: 2478, column: 30, scope: !4652)
!4654 = !DILocation(line: 2478, column: 5, scope: !4652)
!4655 = distinct !{!4655, !4649, !4656}
!4656 = !DILocation(line: 2478, column: 31, scope: !4650)
!4657 = !DILocation(line: 2479, column: 1, scope: !4644)
!4658 = distinct !DISubprogram(name: "unnest_nesting_tree", scope: !3, file: !3, line: 2498, type: !4542, scopeLine: 2499, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4659 = !DILocalVariable(name: "root", arg: 1, scope: !4658, file: !3, line: 2498, type: !1561)
!4660 = !DILocation(line: 2498, column: 43, scope: !4658)
!4661 = !DILocalVariable(name: "n", scope: !4658, file: !3, line: 2500, type: !1561)
!4662 = !DILocation(line: 2500, column: 24, scope: !4658)
!4663 = !DILocation(line: 2501, column: 3, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 2501, column: 3)
!4665 = !DILocation(line: 2501, column: 3, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4664, file: !3, line: 2501, column: 3)
!4667 = !DILocation(line: 2502, column: 28, scope: !4666)
!4668 = !DILocation(line: 2502, column: 5, scope: !4666)
!4669 = distinct !{!4669, !4663, !4670}
!4670 = !DILocation(line: 2502, column: 29, scope: !4664)
!4671 = !DILocation(line: 2503, column: 1, scope: !4658)
!4672 = distinct !DISubprogram(name: "free_nesting_tree", scope: !3, file: !3, line: 2508, type: !4542, scopeLine: 2509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4673 = !DILocalVariable(name: "root", arg: 1, scope: !4672, file: !3, line: 2508, type: !1561)
!4674 = !DILocation(line: 2508, column: 41, scope: !4672)
!4675 = !DILocalVariable(name: "node", scope: !4672, file: !3, line: 2510, type: !1561)
!4676 = !DILocation(line: 2510, column: 24, scope: !4672)
!4677 = !DILocalVariable(name: "next", scope: !4672, file: !3, line: 2510, type: !1561)
!4678 = !DILocation(line: 2510, column: 31, scope: !4672)
!4679 = !DILocation(line: 2512, column: 31, scope: !4672)
!4680 = !DILocation(line: 2512, column: 10, scope: !4672)
!4681 = !DILocation(line: 2512, column: 8, scope: !4672)
!4682 = !DILocation(line: 2513, column: 3, scope: !4672)
!4683 = !DILocation(line: 2515, column: 34, scope: !4684)
!4684 = distinct !DILexicalBlock(scope: !4672, file: !3, line: 2514, column: 5)
!4685 = !DILocation(line: 2515, column: 14, scope: !4684)
!4686 = !DILocation(line: 2515, column: 12, scope: !4684)
!4687 = !DILocation(line: 2516, column: 28, scope: !4684)
!4688 = !DILocation(line: 2516, column: 34, scope: !4684)
!4689 = !DILocation(line: 2516, column: 7, scope: !4684)
!4690 = !DILocation(line: 2517, column: 28, scope: !4684)
!4691 = !DILocation(line: 2517, column: 34, scope: !4684)
!4692 = !DILocation(line: 2517, column: 7, scope: !4684)
!4693 = !DILocation(line: 2518, column: 13, scope: !4684)
!4694 = !DILocation(line: 2518, column: 7, scope: !4684)
!4695 = !DILocation(line: 2519, column: 14, scope: !4684)
!4696 = !DILocation(line: 2519, column: 12, scope: !4684)
!4697 = !DILocation(line: 2520, column: 5, scope: !4684)
!4698 = !DILocation(line: 2521, column: 10, scope: !4672)
!4699 = distinct !{!4699, !4682, !4700}
!4700 = !DILocation(line: 2521, column: 14, scope: !4672)
!4701 = !DILocation(line: 2522, column: 1, scope: !4672)
!4702 = distinct !DISubprogram(name: "check_for_nested_with_variably_modified", scope: !3, file: !3, line: 695, type: !4703, scopeLine: 696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4703 = !DISubroutineType(types: !4704)
!4704 = !{!1755, !1640, !1640}
!4705 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4702, file: !3, line: 695, type: !1640)
!4706 = !DILocation(line: 695, column: 47, scope: !4702)
!4707 = !DILocalVariable(name: "orig_fndecl", arg: 2, scope: !4702, file: !3, line: 695, type: !1640)
!4708 = !DILocation(line: 695, column: 60, scope: !4702)
!4709 = !DILocalVariable(name: "cgn", scope: !4702, file: !3, line: 697, type: !2913)
!4710 = !DILocation(line: 697, column: 23, scope: !4702)
!4711 = !DILocation(line: 697, column: 42, scope: !4702)
!4712 = !DILocation(line: 697, column: 29, scope: !4702)
!4713 = !DILocalVariable(name: "arg", scope: !4702, file: !3, line: 698, type: !1640)
!4714 = !DILocation(line: 698, column: 8, scope: !4702)
!4715 = !DILocation(line: 700, column: 14, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 700, column: 3)
!4717 = !DILocation(line: 700, column: 19, scope: !4716)
!4718 = !DILocation(line: 700, column: 12, scope: !4716)
!4719 = !DILocation(line: 700, column: 8, scope: !4716)
!4720 = !DILocation(line: 700, column: 27, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4716, file: !3, line: 700, column: 3)
!4722 = !DILocation(line: 700, column: 3, scope: !4716)
!4723 = !DILocation(line: 702, column: 18, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 702, column: 7)
!4725 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 701, column: 5)
!4726 = !DILocation(line: 702, column: 16, scope: !4724)
!4727 = !DILocation(line: 702, column: 12, scope: !4724)
!4728 = !DILocation(line: 702, column: 46, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 702, column: 7)
!4730 = !DILocation(line: 702, column: 7, scope: !4724)
!4731 = !DILocation(line: 703, column: 32, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 703, column: 6)
!4733 = !DILocation(line: 703, column: 49, scope: !4732)
!4734 = !DILocation(line: 703, column: 6, scope: !4732)
!4735 = !DILocation(line: 703, column: 6, scope: !4729)
!4736 = !DILocation(line: 704, column: 4, scope: !4732)
!4737 = !DILocation(line: 703, column: 60, scope: !4732)
!4738 = !DILocation(line: 702, column: 57, scope: !4729)
!4739 = !DILocation(line: 702, column: 55, scope: !4729)
!4740 = !DILocation(line: 702, column: 7, scope: !4729)
!4741 = distinct !{!4741, !4730, !4742}
!4742 = !DILocation(line: 704, column: 11, scope: !4724)
!4743 = !DILocation(line: 706, column: 52, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 706, column: 11)
!4745 = !DILocation(line: 706, column: 57, scope: !4744)
!4746 = !DILocation(line: 706, column: 63, scope: !4744)
!4747 = !DILocation(line: 706, column: 11, scope: !4744)
!4748 = !DILocation(line: 706, column: 11, scope: !4725)
!4749 = !DILocation(line: 707, column: 2, scope: !4744)
!4750 = !DILocation(line: 708, column: 5, scope: !4725)
!4751 = !DILocation(line: 700, column: 39, scope: !4721)
!4752 = !DILocation(line: 700, column: 44, scope: !4721)
!4753 = !DILocation(line: 700, column: 37, scope: !4721)
!4754 = !DILocation(line: 700, column: 3, scope: !4721)
!4755 = distinct !{!4755, !4722, !4756}
!4756 = !DILocation(line: 708, column: 5, scope: !4716)
!4757 = !DILocation(line: 710, column: 3, scope: !4702)
!4758 = !DILocation(line: 711, column: 1, scope: !4702)
!4759 = distinct !DISubprogram(name: "iter_nestinfo_start", scope: !3, file: !3, line: 109, type: !4760, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{!1561, !1561}
!4762 = !DILocalVariable(name: "root", arg: 1, scope: !4759, file: !3, line: 109, type: !1561)
!4763 = !DILocation(line: 109, column: 43, scope: !4759)
!4764 = !DILocation(line: 111, column: 3, scope: !4759)
!4765 = !DILocation(line: 111, column: 10, scope: !4759)
!4766 = !DILocation(line: 111, column: 16, scope: !4759)
!4767 = !DILocation(line: 112, column: 12, scope: !4759)
!4768 = !DILocation(line: 112, column: 18, scope: !4759)
!4769 = !DILocation(line: 112, column: 10, scope: !4759)
!4770 = distinct !{!4770, !4764, !4768}
!4771 = !DILocation(line: 113, column: 10, scope: !4759)
!4772 = !DILocation(line: 113, column: 3, scope: !4759)
!4773 = distinct !DISubprogram(name: "walk_function", scope: !3, file: !3, line: 599, type: !3449, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4774 = !DILocalVariable(name: "callback_stmt", arg: 1, scope: !4773, file: !3, line: 599, type: !3451)
!4775 = !DILocation(line: 599, column: 29, scope: !4773)
!4776 = !DILocalVariable(name: "callback_op", arg: 2, scope: !4773, file: !3, line: 599, type: !3457)
!4777 = !DILocation(line: 599, column: 57, scope: !4773)
!4778 = !DILocalVariable(name: "info", arg: 3, scope: !4773, file: !3, line: 600, type: !1561)
!4779 = !DILocation(line: 600, column: 30, scope: !4773)
!4780 = !DILocation(line: 602, column: 14, scope: !4773)
!4781 = !DILocation(line: 602, column: 29, scope: !4773)
!4782 = !DILocation(line: 602, column: 42, scope: !4773)
!4783 = !DILocation(line: 602, column: 61, scope: !4773)
!4784 = !DILocation(line: 602, column: 67, scope: !4773)
!4785 = !DILocation(line: 602, column: 48, scope: !4773)
!4786 = !DILocation(line: 602, column: 3, scope: !4773)
!4787 = !DILocation(line: 603, column: 1, scope: !4773)
!4788 = distinct !DISubprogram(name: "iter_nestinfo_next", scope: !3, file: !3, line: 117, type: !4760, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4789 = !DILocalVariable(name: "node", arg: 1, scope: !4788, file: !3, line: 117, type: !1561)
!4790 = !DILocation(line: 117, column: 42, scope: !4788)
!4791 = !DILocation(line: 119, column: 7, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 119, column: 7)
!4793 = !DILocation(line: 119, column: 13, scope: !4792)
!4794 = !DILocation(line: 119, column: 7, scope: !4788)
!4795 = !DILocation(line: 120, column: 33, scope: !4792)
!4796 = !DILocation(line: 120, column: 39, scope: !4792)
!4797 = !DILocation(line: 120, column: 12, scope: !4792)
!4798 = !DILocation(line: 120, column: 5, scope: !4792)
!4799 = !DILocation(line: 121, column: 10, scope: !4788)
!4800 = !DILocation(line: 121, column: 16, scope: !4788)
!4801 = !DILocation(line: 121, column: 3, scope: !4788)
!4802 = !DILocation(line: 122, column: 1, scope: !4788)
!4803 = distinct !DISubprogram(name: "walk_body", scope: !3, file: !3, line: 584, type: !4804, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4804 = !DISubroutineType(types: !4805)
!4805 = !{null, !3451, !3457, !1561, !1895}
!4806 = !DILocalVariable(name: "callback_stmt", arg: 1, scope: !4803, file: !3, line: 584, type: !3451)
!4807 = !DILocation(line: 584, column: 25, scope: !4803)
!4808 = !DILocalVariable(name: "callback_op", arg: 2, scope: !4803, file: !3, line: 584, type: !3457)
!4809 = !DILocation(line: 584, column: 53, scope: !4803)
!4810 = !DILocalVariable(name: "info", arg: 3, scope: !4803, file: !3, line: 585, type: !1561)
!4811 = !DILocation(line: 585, column: 26, scope: !4803)
!4812 = !DILocalVariable(name: "seq", arg: 4, scope: !4803, file: !3, line: 585, type: !1895)
!4813 = !DILocation(line: 585, column: 43, scope: !4803)
!4814 = !DILocalVariable(name: "wi", scope: !4803, file: !3, line: 587, type: !2884)
!4815 = !DILocation(line: 587, column: 25, scope: !4803)
!4816 = !DILocation(line: 589, column: 3, scope: !4803)
!4817 = !DILocation(line: 590, column: 13, scope: !4803)
!4818 = !DILocation(line: 590, column: 6, scope: !4803)
!4819 = !DILocation(line: 590, column: 11, scope: !4803)
!4820 = !DILocation(line: 591, column: 6, scope: !4803)
!4821 = !DILocation(line: 591, column: 15, scope: !4803)
!4822 = !DILocation(line: 592, column: 20, scope: !4803)
!4823 = !DILocation(line: 592, column: 25, scope: !4803)
!4824 = !DILocation(line: 592, column: 40, scope: !4803)
!4825 = !DILocation(line: 592, column: 3, scope: !4803)
!4826 = !DILocation(line: 593, column: 1, scope: !4803)
!4827 = distinct !DISubprogram(name: "gsi_stmt", scope: !611, file: !611, line: 4501, type: !4828, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4828 = !DISubroutineType(types: !4829)
!4829 = !{!1905, !2887}
!4830 = !DILocalVariable(name: "i", arg: 1, scope: !4827, file: !611, line: 4501, type: !2887)
!4831 = !DILocation(line: 4501, column: 32, scope: !4827)
!4832 = !DILocation(line: 4503, column: 12, scope: !4827)
!4833 = !DILocation(line: 4503, column: 17, scope: !4827)
!4834 = !DILocation(line: 4503, column: 3, scope: !4827)
!4835 = distinct !DISubprogram(name: "gimple_code", scope: !611, file: !611, line: 1052, type: !4836, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4836 = !DISubroutineType(types: !4837)
!4837 = !{!610, !4838}
!4838 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1574, line: 60, baseType: !2881)
!4839 = !DILocalVariable(name: "g", arg: 1, scope: !4835, file: !611, line: 1052, type: !4838)
!4840 = !DILocation(line: 1052, column: 27, scope: !4835)
!4841 = !DILocation(line: 1054, column: 10, scope: !4835)
!4842 = !DILocation(line: 1054, column: 13, scope: !4835)
!4843 = !DILocation(line: 1054, column: 20, scope: !4835)
!4844 = !DILocation(line: 1054, column: 3, scope: !4835)
!4845 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !611, file: !611, line: 2465, type: !4846, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4846 = !DISubroutineType(types: !4847)
!4847 = !{!1640, !4838}
!4848 = !DILocalVariable(name: "gs", arg: 1, scope: !4845, file: !611, line: 2465, type: !4838)
!4849 = !DILocation(line: 2465, column: 32, scope: !4845)
!4850 = !DILocation(line: 2468, column: 21, scope: !4845)
!4851 = !DILocation(line: 2468, column: 10, scope: !4845)
!4852 = !DILocation(line: 2468, column: 3, scope: !4845)
!4853 = distinct !DISubprogram(name: "convert_nonlocal_omp_clauses", scope: !3, file: !3, line: 1053, type: !4854, scopeLine: 1054, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!4854 = !DISubroutineType(types: !4855)
!4855 = !{!1755, !1940, !2883}
!4856 = !DILocalVariable(name: "pclauses", arg: 1, scope: !4853, file: !3, line: 1053, type: !1940)
!4857 = !DILocation(line: 1053, column: 37, scope: !4853)
!4858 = !DILocalVariable(name: "wi", arg: 2, scope: !4853, file: !3, line: 1053, type: !2883)
!4859 = !DILocation(line: 1053, column: 70, scope: !4853)
!4860 = !DILocalVariable(name: "info", scope: !4853, file: !3, line: 1055, type: !3678)
!4861 = !DILocation(line: 1055, column: 30, scope: !4853)
!4862 = !DILocation(line: 1055, column: 61, scope: !4853)
!4863 = !DILocation(line: 1055, column: 65, scope: !4853)
!4864 = !DILocation(line: 1055, column: 37, scope: !4853)
!4865 = !DILocalVariable(name: "need_chain", scope: !4853, file: !3, line: 1056, type: !1755)
!4866 = !DILocation(line: 1056, column: 8, scope: !4853)
!4867 = !DILocalVariable(name: "need_stmts", scope: !4853, file: !3, line: 1056, type: !1755)
!4868 = !DILocation(line: 1056, column: 28, scope: !4853)
!4869 = !DILocalVariable(name: "clause", scope: !4853, file: !3, line: 1057, type: !1640)
!4870 = !DILocation(line: 1057, column: 8, scope: !4853)
!4871 = !DILocalVariable(name: "decl", scope: !4853, file: !3, line: 1057, type: !1640)
!4872 = !DILocation(line: 1057, column: 16, scope: !4853)
!4873 = !DILocalVariable(name: "dummy", scope: !4853, file: !3, line: 1058, type: !1560)
!4874 = !DILocation(line: 1058, column: 7, scope: !4853)
!4875 = !DILocalVariable(name: "new_suppress", scope: !4853, file: !3, line: 1059, type: !1573)
!4876 = !DILocation(line: 1059, column: 10, scope: !4853)
!4877 = !DILocation(line: 1061, column: 18, scope: !4853)
!4878 = !DILocation(line: 1061, column: 16, scope: !4853)
!4879 = !DILocation(line: 1062, column: 16, scope: !4853)
!4880 = !DILocation(line: 1062, column: 30, scope: !4853)
!4881 = !DILocation(line: 1062, column: 36, scope: !4853)
!4882 = !DILocation(line: 1062, column: 3, scope: !4853)
!4883 = !DILocation(line: 1064, column: 18, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4853, file: !3, line: 1064, column: 3)
!4885 = !DILocation(line: 1064, column: 17, scope: !4884)
!4886 = !DILocation(line: 1064, column: 15, scope: !4884)
!4887 = !DILocation(line: 1064, column: 8, scope: !4884)
!4888 = !DILocation(line: 1064, column: 28, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 1064, column: 3)
!4890 = !DILocation(line: 1064, column: 3, scope: !4884)
!4891 = !DILocation(line: 1066, column: 15, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 1065, column: 5)
!4893 = !DILocation(line: 1066, column: 7, scope: !4892)
!4894 = !DILocation(line: 1069, column: 8, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1069, column: 8)
!4896 = distinct !DILexicalBlock(scope: !4892, file: !3, line: 1067, column: 2)
!4897 = !DILocation(line: 1069, column: 8, scope: !4896)
!4898 = !DILocation(line: 1070, column: 17, scope: !4895)
!4899 = !DILocation(line: 1070, column: 6, scope: !4895)
!4900 = !DILocation(line: 1071, column: 4, scope: !4896)
!4901 = !DILocation(line: 1074, column: 8, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1074, column: 8)
!4903 = !DILocation(line: 1074, column: 8, scope: !4896)
!4904 = !DILocation(line: 1075, column: 17, scope: !4902)
!4905 = !DILocation(line: 1075, column: 6, scope: !4902)
!4906 = !DILocation(line: 1076, column: 4, scope: !4896)
!4907 = !DILabel(scope: !4896, name: "do_decl_clause", file: !3, line: 1082)
!4908 = !DILocation(line: 1082, column: 2, scope: !4896)
!4909 = !DILocation(line: 1083, column: 11, scope: !4896)
!4910 = !DILocation(line: 1083, column: 9, scope: !4896)
!4911 = !DILocation(line: 1084, column: 8, scope: !4912)
!4912 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1084, column: 8)
!4913 = !DILocation(line: 1084, column: 25, scope: !4912)
!4914 = !DILocation(line: 1085, column: 8, scope: !4912)
!4915 = !DILocation(line: 1085, column: 12, scope: !4912)
!4916 = !DILocation(line: 1085, column: 31, scope: !4912)
!4917 = !DILocation(line: 1085, column: 34, scope: !4912)
!4918 = !DILocation(line: 1084, column: 8, scope: !4896)
!4919 = !DILocation(line: 1086, column: 6, scope: !4912)
!4920 = !DILocation(line: 1087, column: 31, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1087, column: 8)
!4922 = !DILocation(line: 1087, column: 8, scope: !4921)
!4923 = !DILocation(line: 1087, column: 40, scope: !4921)
!4924 = !DILocation(line: 1087, column: 46, scope: !4921)
!4925 = !DILocation(line: 1087, column: 37, scope: !4921)
!4926 = !DILocation(line: 1087, column: 8, scope: !4896)
!4927 = !DILocation(line: 1089, column: 24, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 1088, column: 6)
!4929 = !DILocation(line: 1089, column: 38, scope: !4928)
!4930 = !DILocation(line: 1089, column: 8, scope: !4928)
!4931 = !DILocation(line: 1090, column: 60, scope: !4928)
!4932 = !DILocation(line: 1090, column: 66, scope: !4928)
!4933 = !DILocation(line: 1090, column: 35, scope: !4928)
!4934 = !DILocation(line: 1090, column: 8, scope: !4928)
!4935 = !DILocation(line: 1090, column: 33, scope: !4928)
!4936 = !DILocation(line: 1091, column: 19, scope: !4928)
!4937 = !DILocation(line: 1092, column: 6, scope: !4928)
!4938 = !DILocation(line: 1093, column: 4, scope: !4896)
!4939 = !DILocation(line: 1096, column: 8, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 1096, column: 8)
!4941 = !DILocation(line: 1096, column: 48, scope: !4940)
!4942 = !DILocation(line: 1096, column: 8, scope: !4896)
!4943 = !DILocation(line: 1097, column: 6, scope: !4940)
!4944 = !DILocation(line: 1096, column: 51, scope: !4940)
!4945 = !DILocation(line: 1101, column: 4, scope: !4896)
!4946 = !DILocation(line: 1101, column: 8, scope: !4896)
!4947 = !DILocation(line: 1101, column: 17, scope: !4896)
!4948 = !DILocation(line: 1102, column: 4, scope: !4896)
!4949 = !DILocation(line: 1102, column: 8, scope: !4896)
!4950 = !DILocation(line: 1102, column: 15, scope: !4896)
!4951 = !DILocation(line: 1103, column: 36, scope: !4896)
!4952 = !DILocation(line: 1104, column: 43, scope: !4896)
!4953 = !DILocation(line: 1103, column: 4, scope: !4896)
!4954 = !DILocation(line: 1105, column: 4, scope: !4896)
!4955 = !DILocation(line: 1113, column: 4, scope: !4896)
!4956 = !DILocation(line: 1116, column: 4, scope: !4896)
!4957 = !DILocation(line: 1117, column: 2, scope: !4896)
!4958 = !DILocation(line: 1118, column: 5, scope: !4892)
!4959 = !DILocation(line: 1064, column: 46, scope: !4889)
!4960 = !DILocation(line: 1064, column: 44, scope: !4889)
!4961 = !DILocation(line: 1064, column: 3, scope: !4889)
!4962 = distinct !{!4962, !4890, !4963}
!4963 = !DILocation(line: 1118, column: 5, scope: !4884)
!4964 = !DILocation(line: 1120, column: 30, scope: !4853)
!4965 = !DILocation(line: 1120, column: 3, scope: !4853)
!4966 = !DILocation(line: 1120, column: 9, scope: !4853)
!4967 = !DILocation(line: 1120, column: 28, scope: !4853)
!4968 = !DILocation(line: 1122, column: 7, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4853, file: !3, line: 1122, column: 7)
!4970 = !DILocation(line: 1122, column: 7, scope: !4853)
!4971 = !DILocation(line: 1123, column: 20, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 1123, column: 5)
!4973 = !DILocation(line: 1123, column: 19, scope: !4972)
!4974 = !DILocation(line: 1123, column: 17, scope: !4972)
!4975 = !DILocation(line: 1123, column: 10, scope: !4972)
!4976 = !DILocation(line: 1123, column: 30, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4972, file: !3, line: 1123, column: 5)
!4978 = !DILocation(line: 1123, column: 5, scope: !4972)
!4979 = !DILocation(line: 1124, column: 15, scope: !4977)
!4980 = !DILocation(line: 1124, column: 7, scope: !4977)
!4981 = !DILocation(line: 1127, column: 8, scope: !4982)
!4982 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 1127, column: 8)
!4983 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 1125, column: 2)
!4984 = !DILocation(line: 1127, column: 8, scope: !4983)
!4985 = !DILocalVariable(name: "old_context", scope: !4986, file: !3, line: 1129, type: !1640)
!4986 = distinct !DILexicalBlock(scope: !4982, file: !3, line: 1128, column: 6)
!4987 = !DILocation(line: 1129, column: 13, scope: !4986)
!4988 = !DILocation(line: 1130, column: 5, scope: !4986)
!4989 = !DILocation(line: 1132, column: 5, scope: !4986)
!4990 = !DILocation(line: 1132, column: 11, scope: !4986)
!4991 = !DILocation(line: 1131, column: 8, scope: !4986)
!4992 = !DILocation(line: 1132, column: 3, scope: !4986)
!4993 = !DILocation(line: 1134, column: 36, scope: !4986)
!4994 = !DILocation(line: 1135, column: 5, scope: !4986)
!4995 = !DILocation(line: 1133, column: 8, scope: !4986)
!4996 = !DILocation(line: 1137, column: 36, scope: !4986)
!4997 = !DILocation(line: 1138, column: 5, scope: !4986)
!4998 = !DILocation(line: 1136, column: 8, scope: !4986)
!4999 = !DILocation(line: 1140, column: 5, scope: !4986)
!5000 = !DILocation(line: 1139, column: 8, scope: !4986)
!5001 = !DILocation(line: 1140, column: 3, scope: !4986)
!5002 = !DILocation(line: 1141, column: 6, scope: !4986)
!5003 = !DILocation(line: 1142, column: 4, scope: !4983)
!5004 = !DILocation(line: 1146, column: 39, scope: !4983)
!5005 = !DILocation(line: 1147, column: 8, scope: !4983)
!5006 = !DILocation(line: 1145, column: 4, scope: !4983)
!5007 = !DILocation(line: 1148, column: 4, scope: !4983)
!5008 = !DILocation(line: 1151, column: 4, scope: !4983)
!5009 = !DILocation(line: 1152, column: 2, scope: !4983)
!5010 = !DILocation(line: 1123, column: 48, scope: !4977)
!5011 = !DILocation(line: 1123, column: 46, scope: !4977)
!5012 = !DILocation(line: 1123, column: 5, scope: !4977)
!5013 = distinct !{!5013, !4978, !5014}
!5014 = !DILocation(line: 1152, column: 2, scope: !4972)
!5015 = !DILocation(line: 1154, column: 10, scope: !4853)
!5016 = !DILocation(line: 1154, column: 3, scope: !4853)
!5017 = distinct !DISubprogram(name: "gimple_omp_taskreg_clauses_ptr", scope: !611, file: !611, line: 3799, type: !5018, scopeLine: 3800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5018 = !DISubroutineType(types: !5019)
!5019 = !{!1940, !1905}
!5020 = !DILocalVariable(name: "gs", arg: 1, scope: !5017, file: !611, line: 3799, type: !1905)
!5021 = !DILocation(line: 3799, column: 40, scope: !5017)
!5022 = !DILocation(line: 3801, column: 20, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5017, file: !611, line: 3801, column: 7)
!5024 = !DILocation(line: 3801, column: 7, scope: !5023)
!5025 = !DILocation(line: 3801, column: 24, scope: !5023)
!5026 = !DILocation(line: 3801, column: 7, scope: !5017)
!5027 = !DILocation(line: 3802, column: 5, scope: !5023)
!5028 = !DILocation(line: 3803, column: 11, scope: !5017)
!5029 = !DILocation(line: 3803, column: 15, scope: !5017)
!5030 = !DILocation(line: 3803, column: 35, scope: !5017)
!5031 = !DILocation(line: 3803, column: 3, scope: !5017)
!5032 = distinct !DISubprogram(name: "get_chain_decl", scope: !3, file: !3, line: 323, type: !5033, scopeLine: 324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5033 = !DISubroutineType(types: !5034)
!5034 = !{!1640, !1561}
!5035 = !DILocalVariable(name: "info", arg: 1, scope: !5032, file: !3, line: 323, type: !1561)
!5036 = !DILocation(line: 323, column: 38, scope: !5032)
!5037 = !DILocalVariable(name: "decl", scope: !5032, file: !3, line: 325, type: !1640)
!5038 = !DILocation(line: 325, column: 8, scope: !5032)
!5039 = !DILocation(line: 325, column: 15, scope: !5032)
!5040 = !DILocation(line: 325, column: 21, scope: !5032)
!5041 = !DILocation(line: 327, column: 8, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5032, file: !3, line: 327, column: 7)
!5043 = !DILocation(line: 327, column: 7, scope: !5032)
!5044 = !DILocalVariable(name: "type", scope: !5045, file: !3, line: 329, type: !1640)
!5045 = distinct !DILexicalBlock(scope: !5042, file: !3, line: 328, column: 5)
!5046 = !DILocation(line: 329, column: 12, scope: !5045)
!5047 = !DILocation(line: 331, column: 30, scope: !5045)
!5048 = !DILocation(line: 331, column: 36, scope: !5045)
!5049 = !DILocation(line: 331, column: 14, scope: !5045)
!5050 = !DILocation(line: 331, column: 12, scope: !5045)
!5051 = !DILocation(line: 332, column: 34, scope: !5045)
!5052 = !DILocation(line: 332, column: 14, scope: !5045)
!5053 = !DILocation(line: 332, column: 12, scope: !5045)
!5054 = !DILocation(line: 340, column: 14, scope: !5045)
!5055 = !DILocation(line: 340, column: 12, scope: !5045)
!5056 = !DILocation(line: 342, column: 7, scope: !5045)
!5057 = !DILocation(line: 342, column: 30, scope: !5045)
!5058 = !DILocation(line: 343, column: 7, scope: !5045)
!5059 = !DILocation(line: 343, column: 29, scope: !5045)
!5060 = !DILocation(line: 344, column: 7, scope: !5045)
!5061 = !DILocation(line: 344, column: 24, scope: !5045)
!5062 = !DILocation(line: 345, column: 29, scope: !5045)
!5063 = !DILocation(line: 345, column: 35, scope: !5045)
!5064 = !DILocation(line: 345, column: 7, scope: !5045)
!5065 = !DILocation(line: 345, column: 27, scope: !5045)
!5066 = !DILocation(line: 346, column: 30, scope: !5045)
!5067 = !DILocation(line: 346, column: 7, scope: !5045)
!5068 = !DILocation(line: 346, column: 28, scope: !5045)
!5069 = !DILocation(line: 350, column: 7, scope: !5045)
!5070 = !DILocation(line: 350, column: 28, scope: !5045)
!5071 = !DILocation(line: 352, column: 26, scope: !5045)
!5072 = !DILocation(line: 352, column: 7, scope: !5045)
!5073 = !DILocation(line: 352, column: 13, scope: !5045)
!5074 = !DILocation(line: 352, column: 24, scope: !5045)
!5075 = !DILocation(line: 354, column: 11, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5045, file: !3, line: 354, column: 11)
!5077 = !DILocation(line: 355, column: 11, scope: !5076)
!5078 = !DILocation(line: 355, column: 15, scope: !5076)
!5079 = !DILocation(line: 355, column: 26, scope: !5076)
!5080 = !DILocation(line: 356, column: 4, scope: !5076)
!5081 = !DILocation(line: 356, column: 8, scope: !5076)
!5082 = !DILocation(line: 354, column: 11, scope: !5045)
!5083 = !DILocation(line: 357, column: 11, scope: !5076)
!5084 = !DILocation(line: 358, column: 15, scope: !5076)
!5085 = !DILocation(line: 358, column: 36, scope: !5076)
!5086 = !DILocation(line: 358, column: 42, scope: !5076)
!5087 = !DILocation(line: 358, column: 4, scope: !5076)
!5088 = !DILocation(line: 357, column: 2, scope: !5076)
!5089 = !DILocation(line: 360, column: 7, scope: !5045)
!5090 = !DILocation(line: 360, column: 41, scope: !5045)
!5091 = !DILocation(line: 361, column: 5, scope: !5045)
!5092 = !DILocation(line: 362, column: 10, scope: !5032)
!5093 = !DILocation(line: 362, column: 3, scope: !5032)
!5094 = distinct !DISubprogram(name: "gimple_location", scope: !611, file: !611, line: 1139, type: !5095, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5095 = !DISubroutineType(types: !5096)
!5096 = !{!1763, !4838}
!5097 = !DILocalVariable(name: "g", arg: 1, scope: !5094, file: !611, line: 1139, type: !4838)
!5098 = !DILocation(line: 1139, column: 31, scope: !5094)
!5099 = !DILocation(line: 1141, column: 10, scope: !5094)
!5100 = !DILocation(line: 1141, column: 13, scope: !5094)
!5101 = !DILocation(line: 1141, column: 20, scope: !5094)
!5102 = !DILocation(line: 1141, column: 3, scope: !5094)
!5103 = distinct !DISubprogram(name: "gimple_omp_taskreg_clauses", scope: !611, file: !611, line: 3788, type: !4846, scopeLine: 3789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5104 = !DILocalVariable(name: "gs", arg: 1, scope: !5103, file: !611, line: 3788, type: !4838)
!5105 = !DILocation(line: 3788, column: 42, scope: !5103)
!5106 = !DILocation(line: 3790, column: 20, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5103, file: !611, line: 3790, column: 7)
!5108 = !DILocation(line: 3790, column: 7, scope: !5107)
!5109 = !DILocation(line: 3790, column: 24, scope: !5107)
!5110 = !DILocation(line: 3790, column: 7, scope: !5103)
!5111 = !DILocation(line: 3791, column: 5, scope: !5107)
!5112 = !DILocation(line: 3792, column: 10, scope: !5103)
!5113 = !DILocation(line: 3792, column: 14, scope: !5103)
!5114 = !DILocation(line: 3792, column: 34, scope: !5103)
!5115 = !DILocation(line: 3792, column: 3, scope: !5103)
!5116 = distinct !DISubprogram(name: "gimple_omp_taskreg_set_clauses", scope: !611, file: !611, line: 3811, type: !5117, scopeLine: 3812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{null, !1905, !1640}
!5119 = !DILocalVariable(name: "gs", arg: 1, scope: !5116, file: !611, line: 3811, type: !1905)
!5120 = !DILocation(line: 3811, column: 40, scope: !5116)
!5121 = !DILocalVariable(name: "clauses", arg: 2, scope: !5116, file: !611, line: 3811, type: !1640)
!5122 = !DILocation(line: 3811, column: 49, scope: !5116)
!5123 = !DILocation(line: 3813, column: 20, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !5116, file: !611, line: 3813, column: 7)
!5125 = !DILocation(line: 3813, column: 7, scope: !5124)
!5126 = !DILocation(line: 3813, column: 24, scope: !5124)
!5127 = !DILocation(line: 3813, column: 7, scope: !5116)
!5128 = !DILocation(line: 3814, column: 5, scope: !5124)
!5129 = !DILocation(line: 3815, column: 37, scope: !5116)
!5130 = !DILocation(line: 3815, column: 3, scope: !5116)
!5131 = !DILocation(line: 3815, column: 7, scope: !5116)
!5132 = !DILocation(line: 3815, column: 27, scope: !5116)
!5133 = !DILocation(line: 3815, column: 35, scope: !5116)
!5134 = !DILocation(line: 3816, column: 1, scope: !5116)
!5135 = distinct !DISubprogram(name: "gimple_omp_body", scope: !611, file: !611, line: 3363, type: !5136, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5136 = !DISubroutineType(types: !5137)
!5137 = !{!1895, !1905}
!5138 = !DILocalVariable(name: "gs", arg: 1, scope: !5135, file: !611, line: 3363, type: !1905)
!5139 = !DILocation(line: 3363, column: 25, scope: !5135)
!5140 = !DILocation(line: 3365, column: 10, scope: !5135)
!5141 = !DILocation(line: 3365, column: 14, scope: !5135)
!5142 = !DILocation(line: 3365, column: 18, scope: !5135)
!5143 = !DILocation(line: 3365, column: 3, scope: !5135)
!5144 = distinct !DISubprogram(name: "gimple_seq_first_stmt", scope: !611, file: !611, line: 168, type: !5145, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5145 = !DISubroutineType(types: !5146)
!5146 = !{!1905, !5147}
!5147 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1574, line: 67, baseType: !5148)
!5148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5149, size: 64)
!5149 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1897)
!5150 = !DILocalVariable(name: "s", arg: 1, scope: !5144, file: !611, line: 168, type: !5147)
!5151 = !DILocation(line: 168, column: 41, scope: !5144)
!5152 = !DILocalVariable(name: "n", scope: !5144, file: !611, line: 170, type: !1900)
!5153 = !DILocation(line: 170, column: 19, scope: !5144)
!5154 = !DILocation(line: 170, column: 41, scope: !5144)
!5155 = !DILocation(line: 170, column: 23, scope: !5144)
!5156 = !DILocation(line: 171, column: 11, scope: !5144)
!5157 = !DILocation(line: 171, column: 10, scope: !5144)
!5158 = !DILocation(line: 171, column: 16, scope: !5144)
!5159 = !DILocation(line: 171, column: 19, scope: !5144)
!5160 = !DILocation(line: 171, column: 3, scope: !5144)
!5161 = distinct !DISubprogram(name: "gimple_omp_for_clauses_ptr", scope: !611, file: !611, line: 3420, type: !5018, scopeLine: 3421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5162 = !DILocalVariable(name: "gs", arg: 1, scope: !5161, file: !611, line: 3420, type: !1905)
!5163 = !DILocation(line: 3420, column: 36, scope: !5161)
!5164 = !DILocation(line: 3423, column: 11, scope: !5161)
!5165 = !DILocation(line: 3423, column: 15, scope: !5161)
!5166 = !DILocation(line: 3423, column: 30, scope: !5161)
!5167 = !DILocation(line: 3423, column: 3, scope: !5161)
!5168 = distinct !DISubprogram(name: "walk_gimple_omp_for", scope: !3, file: !3, line: 608, type: !5169, scopeLine: 611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{null, !1905, !3451, !3457, !1561}
!5171 = !DILocalVariable(name: "for_stmt", arg: 1, scope: !5168, file: !3, line: 608, type: !1905)
!5172 = !DILocation(line: 608, column: 29, scope: !5168)
!5173 = !DILocalVariable(name: "callback_stmt", arg: 2, scope: !5168, file: !3, line: 609, type: !3451)
!5174 = !DILocation(line: 609, column: 25, scope: !5168)
!5175 = !DILocalVariable(name: "callback_op", arg: 3, scope: !5168, file: !3, line: 609, type: !3457)
!5176 = !DILocation(line: 609, column: 53, scope: !5168)
!5177 = !DILocalVariable(name: "info", arg: 4, scope: !5168, file: !3, line: 610, type: !1561)
!5178 = !DILocation(line: 610, column: 33, scope: !5168)
!5179 = !DILocalVariable(name: "wi", scope: !5168, file: !3, line: 612, type: !2884)
!5180 = !DILocation(line: 612, column: 25, scope: !5168)
!5181 = !DILocalVariable(name: "seq", scope: !5168, file: !3, line: 613, type: !1895)
!5182 = !DILocation(line: 613, column: 14, scope: !5168)
!5183 = !DILocalVariable(name: "t", scope: !5168, file: !3, line: 614, type: !1640)
!5184 = !DILocation(line: 614, column: 8, scope: !5168)
!5185 = !DILocalVariable(name: "i", scope: !5168, file: !3, line: 615, type: !2051)
!5186 = !DILocation(line: 615, column: 10, scope: !5168)
!5187 = !DILocation(line: 617, column: 14, scope: !5168)
!5188 = !DILocation(line: 617, column: 29, scope: !5168)
!5189 = !DILocation(line: 617, column: 42, scope: !5168)
!5190 = !DILocation(line: 617, column: 73, scope: !5168)
!5191 = !DILocation(line: 617, column: 48, scope: !5168)
!5192 = !DILocation(line: 617, column: 3, scope: !5168)
!5193 = !DILocation(line: 619, column: 9, scope: !5168)
!5194 = !DILocation(line: 619, column: 7, scope: !5168)
!5195 = !DILocation(line: 620, column: 3, scope: !5168)
!5196 = !DILocation(line: 621, column: 13, scope: !5168)
!5197 = !DILocation(line: 621, column: 6, scope: !5168)
!5198 = !DILocation(line: 621, column: 11, scope: !5168)
!5199 = !DILocation(line: 622, column: 6, scope: !5168)
!5200 = !DILocation(line: 622, column: 22, scope: !5168)
!5201 = !DILocation(line: 622, column: 12, scope: !5168)
!5202 = !DILocation(line: 624, column: 10, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 624, column: 3)
!5204 = !DILocation(line: 624, column: 8, scope: !5203)
!5205 = !DILocation(line: 624, column: 15, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 624, column: 3)
!5207 = !DILocation(line: 624, column: 44, scope: !5206)
!5208 = !DILocation(line: 624, column: 19, scope: !5206)
!5209 = !DILocation(line: 624, column: 17, scope: !5206)
!5210 = !DILocation(line: 624, column: 3, scope: !5203)
!5211 = !DILocation(line: 626, column: 10, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 625, column: 5)
!5213 = !DILocation(line: 626, column: 19, scope: !5212)
!5214 = !DILocation(line: 627, column: 7, scope: !5212)
!5215 = !DILocation(line: 629, column: 10, scope: !5212)
!5216 = !DILocation(line: 629, column: 19, scope: !5212)
!5217 = !DILocation(line: 630, column: 10, scope: !5212)
!5218 = !DILocation(line: 630, column: 17, scope: !5212)
!5219 = !DILocation(line: 631, column: 7, scope: !5212)
!5220 = !DILocation(line: 634, column: 10, scope: !5212)
!5221 = !DILocation(line: 634, column: 19, scope: !5212)
!5222 = !DILocation(line: 635, column: 10, scope: !5212)
!5223 = !DILocation(line: 635, column: 17, scope: !5212)
!5224 = !DILocation(line: 636, column: 7, scope: !5212)
!5225 = !DILocation(line: 639, column: 32, scope: !5212)
!5226 = !DILocation(line: 639, column: 42, scope: !5212)
!5227 = !DILocation(line: 639, column: 11, scope: !5212)
!5228 = !DILocation(line: 639, column: 9, scope: !5212)
!5229 = !DILocation(line: 640, column: 7, scope: !5212)
!5230 = !DILocation(line: 641, column: 10, scope: !5212)
!5231 = !DILocation(line: 641, column: 19, scope: !5212)
!5232 = !DILocation(line: 642, column: 7, scope: !5212)
!5233 = !DILocation(line: 643, column: 10, scope: !5212)
!5234 = !DILocation(line: 643, column: 19, scope: !5212)
!5235 = !DILocation(line: 644, column: 10, scope: !5212)
!5236 = !DILocation(line: 644, column: 17, scope: !5212)
!5237 = !DILocation(line: 645, column: 7, scope: !5212)
!5238 = !DILocation(line: 646, column: 5, scope: !5212)
!5239 = !DILocation(line: 624, column: 56, scope: !5206)
!5240 = !DILocation(line: 624, column: 3, scope: !5206)
!5241 = distinct !{!5241, !5210, !5242}
!5242 = !DILocation(line: 646, column: 5, scope: !5203)
!5243 = !DILocation(line: 648, column: 27, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 648, column: 7)
!5245 = !DILocation(line: 648, column: 7, scope: !5244)
!5246 = !DILocation(line: 648, column: 7, scope: !5168)
!5247 = !DILocation(line: 649, column: 22, scope: !5244)
!5248 = !DILocation(line: 649, column: 5, scope: !5244)
!5249 = !DILocalVariable(name: "pre_body", scope: !5250, file: !3, line: 652, type: !1895)
!5250 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 651, column: 5)
!5251 = !DILocation(line: 652, column: 18, scope: !5250)
!5252 = !DILocation(line: 652, column: 54, scope: !5250)
!5253 = !DILocation(line: 652, column: 29, scope: !5250)
!5254 = !DILocation(line: 653, column: 35, scope: !5250)
!5255 = !DILocation(line: 653, column: 57, scope: !5250)
!5256 = !DILocation(line: 653, column: 40, scope: !5250)
!5257 = !DILocation(line: 653, column: 7, scope: !5250)
!5258 = !DILocation(line: 654, column: 38, scope: !5250)
!5259 = !DILocation(line: 654, column: 7, scope: !5250)
!5260 = !DILocation(line: 655, column: 36, scope: !5250)
!5261 = !DILocation(line: 655, column: 46, scope: !5250)
!5262 = !DILocation(line: 655, column: 7, scope: !5250)
!5263 = !DILocation(line: 657, column: 1, scope: !5168)
!5264 = distinct !DISubprogram(name: "gimple_omp_sections_clauses_ptr", scope: !611, file: !611, line: 4019, type: !5018, scopeLine: 4020, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5265 = !DILocalVariable(name: "gs", arg: 1, scope: !5264, file: !611, line: 4019, type: !1905)
!5266 = !DILocation(line: 4019, column: 41, scope: !5264)
!5267 = !DILocation(line: 4022, column: 11, scope: !5264)
!5268 = !DILocation(line: 4022, column: 15, scope: !5264)
!5269 = !DILocation(line: 4022, column: 35, scope: !5264)
!5270 = !DILocation(line: 4022, column: 3, scope: !5264)
!5271 = distinct !DISubprogram(name: "gimple_omp_single_clauses_ptr", scope: !611, file: !611, line: 3989, type: !5018, scopeLine: 3990, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5272 = !DILocalVariable(name: "gs", arg: 1, scope: !5271, file: !611, line: 3989, type: !1905)
!5273 = !DILocation(line: 3989, column: 39, scope: !5271)
!5274 = !DILocation(line: 3992, column: 11, scope: !5271)
!5275 = !DILocation(line: 3992, column: 15, scope: !5271)
!5276 = !DILocation(line: 3992, column: 33, scope: !5271)
!5277 = !DILocation(line: 3992, column: 3, scope: !5271)
!5278 = distinct !DISubprogram(name: "gimple_bind_block", scope: !611, file: !611, line: 2559, type: !4846, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5279 = !DILocalVariable(name: "gs", arg: 1, scope: !5278, file: !611, line: 2559, type: !4838)
!5280 = !DILocation(line: 2559, column: 33, scope: !5278)
!5281 = !DILocation(line: 2562, column: 10, scope: !5278)
!5282 = !DILocation(line: 2562, column: 14, scope: !5278)
!5283 = !DILocation(line: 2562, column: 26, scope: !5278)
!5284 = !DILocation(line: 2562, column: 3, scope: !5278)
!5285 = distinct !DISubprogram(name: "note_nonlocal_block_vlas", scope: !3, file: !3, line: 1200, type: !5286, scopeLine: 1201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5286 = !DISubroutineType(types: !5287)
!5287 = !{null, !1561, !1640}
!5288 = !DILocalVariable(name: "info", arg: 1, scope: !5285, file: !3, line: 1200, type: !1561)
!5289 = !DILocation(line: 1200, column: 48, scope: !5285)
!5290 = !DILocalVariable(name: "block", arg: 2, scope: !5285, file: !3, line: 1200, type: !1640)
!5291 = !DILocation(line: 1200, column: 59, scope: !5285)
!5292 = !DILocalVariable(name: "var", scope: !5285, file: !3, line: 1202, type: !1640)
!5293 = !DILocation(line: 1202, column: 8, scope: !5285)
!5294 = !DILocation(line: 1204, column: 14, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 1204, column: 3)
!5296 = !DILocation(line: 1204, column: 12, scope: !5295)
!5297 = !DILocation(line: 1204, column: 8, scope: !5295)
!5298 = !DILocation(line: 1204, column: 34, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 1204, column: 3)
!5300 = !DILocation(line: 1204, column: 3, scope: !5295)
!5301 = !DILocation(line: 1205, column: 9, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1205, column: 9)
!5303 = !DILocation(line: 1205, column: 25, scope: !5302)
!5304 = !DILocation(line: 1206, column: 2, scope: !5302)
!5305 = !DILocation(line: 1206, column: 31, scope: !5302)
!5306 = !DILocation(line: 1206, column: 5, scope: !5302)
!5307 = !DILocation(line: 1207, column: 2, scope: !5302)
!5308 = !DILocation(line: 1207, column: 5, scope: !5302)
!5309 = !DILocation(line: 1208, column: 2, scope: !5302)
!5310 = !DILocation(line: 1208, column: 28, scope: !5302)
!5311 = !DILocation(line: 1208, column: 5, scope: !5302)
!5312 = !DILocation(line: 1208, column: 36, scope: !5302)
!5313 = !DILocation(line: 1208, column: 42, scope: !5302)
!5314 = !DILocation(line: 1208, column: 33, scope: !5302)
!5315 = !DILocation(line: 1205, column: 9, scope: !5299)
!5316 = !DILocation(line: 1209, column: 31, scope: !5302)
!5317 = !DILocation(line: 1209, column: 37, scope: !5302)
!5318 = !DILocation(line: 1209, column: 7, scope: !5302)
!5319 = !DILocation(line: 1204, column: 45, scope: !5299)
!5320 = !DILocation(line: 1204, column: 43, scope: !5299)
!5321 = !DILocation(line: 1204, column: 3, scope: !5299)
!5322 = distinct !{!5322, !5300, !5323}
!5323 = !DILocation(line: 1209, column: 52, scope: !5295)
!5324 = !DILocation(line: 1210, column: 1, scope: !5285)
!5325 = distinct !DISubprogram(name: "gimple_op", scope: !611, file: !611, line: 1631, type: !5326, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5326 = !DISubroutineType(types: !5327)
!5327 = !{!1640, !4838, !7}
!5328 = !DILocalVariable(name: "gs", arg: 1, scope: !5325, file: !611, line: 1631, type: !4838)
!5329 = !DILocation(line: 1631, column: 25, scope: !5325)
!5330 = !DILocalVariable(name: "i", arg: 2, scope: !5325, file: !611, line: 1631, type: !7)
!5331 = !DILocation(line: 1631, column: 38, scope: !5325)
!5332 = !DILocation(line: 1633, column: 23, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5325, file: !611, line: 1633, column: 7)
!5334 = !DILocation(line: 1633, column: 7, scope: !5333)
!5335 = !DILocation(line: 1633, column: 7, scope: !5325)
!5336 = !DILocation(line: 1638, column: 26, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5333, file: !611, line: 1634, column: 5)
!5338 = !DILocation(line: 1638, column: 14, scope: !5337)
!5339 = !DILocation(line: 1638, column: 50, scope: !5337)
!5340 = !DILocation(line: 1638, column: 7, scope: !5337)
!5341 = !DILocation(line: 1641, column: 5, scope: !5333)
!5342 = !DILocation(line: 1642, column: 1, scope: !5325)
!5343 = distinct !DISubprogram(name: "gimple_has_ops", scope: !611, file: !611, line: 1274, type: !5344, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5344 = !DISubroutineType(types: !5345)
!5345 = !{!1755, !4838}
!5346 = !DILocalVariable(name: "g", arg: 1, scope: !5343, file: !611, line: 1274, type: !4838)
!5347 = !DILocation(line: 1274, column: 30, scope: !5343)
!5348 = !DILocation(line: 1276, column: 23, scope: !5343)
!5349 = !DILocation(line: 1276, column: 10, scope: !5343)
!5350 = !DILocation(line: 1276, column: 26, scope: !5343)
!5351 = !DILocation(line: 1276, column: 41, scope: !5343)
!5352 = !DILocation(line: 1276, column: 57, scope: !5343)
!5353 = !DILocation(line: 1276, column: 44, scope: !5343)
!5354 = !DILocation(line: 1276, column: 60, scope: !5343)
!5355 = !DILocation(line: 0, scope: !5343)
!5356 = !DILocation(line: 1276, column: 3, scope: !5343)
!5357 = distinct !DISubprogram(name: "gimple_ops", scope: !611, file: !611, line: 1614, type: !5018, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5358 = !DILocalVariable(name: "gs", arg: 1, scope: !5357, file: !611, line: 1614, type: !1905)
!5359 = !DILocation(line: 1614, column: 20, scope: !5357)
!5360 = !DILocalVariable(name: "off", scope: !5357, file: !611, line: 1616, type: !2051)
!5361 = !DILocation(line: 1616, column: 10, scope: !5357)
!5362 = !DILocation(line: 1621, column: 56, scope: !5357)
!5363 = !DILocation(line: 1621, column: 28, scope: !5357)
!5364 = !DILocation(line: 1621, column: 9, scope: !5357)
!5365 = !DILocation(line: 1621, column: 7, scope: !5357)
!5366 = !DILocation(line: 1622, column: 3, scope: !5357)
!5367 = !DILocation(line: 1624, column: 29, scope: !5357)
!5368 = !DILocation(line: 1624, column: 20, scope: !5357)
!5369 = !DILocation(line: 1624, column: 34, scope: !5357)
!5370 = !DILocation(line: 1624, column: 32, scope: !5357)
!5371 = !DILocation(line: 1624, column: 10, scope: !5357)
!5372 = !DILocation(line: 1624, column: 3, scope: !5357)
!5373 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !611, file: !611, line: 1073, type: !5374, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5374 = !DISubroutineType(types: !5375)
!5375 = !{!649, !1905}
!5376 = !DILocalVariable(name: "gs", arg: 1, scope: !5373, file: !611, line: 1073, type: !1905)
!5377 = !DILocation(line: 1073, column: 36, scope: !5373)
!5378 = !DILocation(line: 1075, column: 37, scope: !5373)
!5379 = !DILocation(line: 1075, column: 24, scope: !5373)
!5380 = !DILocation(line: 1075, column: 10, scope: !5373)
!5381 = !DILocation(line: 1075, column: 3, scope: !5373)
!5382 = distinct !DISubprogram(name: "gss_for_code", scope: !611, file: !611, line: 1061, type: !5383, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5383 = !DISubroutineType(types: !5384)
!5384 = !{!649, !610}
!5385 = !DILocalVariable(name: "code", arg: 1, scope: !5382, file: !611, line: 1061, type: !610)
!5386 = !DILocation(line: 1061, column: 32, scope: !5382)
!5387 = !DILocation(line: 1066, column: 24, scope: !5382)
!5388 = !DILocation(line: 1066, column: 10, scope: !5382)
!5389 = !DILocation(line: 1066, column: 3, scope: !5382)
!5390 = distinct !DISubprogram(name: "get_nonlocal_debug_decl", scope: !3, file: !3, line: 818, type: !5391, scopeLine: 819, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5391 = !DISubroutineType(types: !5392)
!5392 = !{!1640, !1561, !1640}
!5393 = !DILocalVariable(name: "info", arg: 1, scope: !5390, file: !3, line: 818, type: !1561)
!5394 = !DILocation(line: 818, column: 47, scope: !5390)
!5395 = !DILocalVariable(name: "decl", arg: 2, scope: !5390, file: !3, line: 818, type: !1640)
!5396 = !DILocation(line: 818, column: 58, scope: !5390)
!5397 = !DILocalVariable(name: "target_context", scope: !5390, file: !3, line: 820, type: !1640)
!5398 = !DILocation(line: 820, column: 8, scope: !5390)
!5399 = !DILocalVariable(name: "i", scope: !5390, file: !3, line: 821, type: !1561)
!5400 = !DILocation(line: 821, column: 24, scope: !5390)
!5401 = !DILocalVariable(name: "x", scope: !5390, file: !3, line: 822, type: !1640)
!5402 = !DILocation(line: 822, column: 8, scope: !5390)
!5403 = !DILocalVariable(name: "field", scope: !5390, file: !3, line: 822, type: !1640)
!5404 = !DILocation(line: 822, column: 11, scope: !5390)
!5405 = !DILocalVariable(name: "new_decl", scope: !5390, file: !3, line: 822, type: !1640)
!5406 = !DILocation(line: 822, column: 18, scope: !5390)
!5407 = !DILocalVariable(name: "slot", scope: !5390, file: !3, line: 823, type: !2360)
!5408 = !DILocation(line: 823, column: 10, scope: !5390)
!5409 = !DILocation(line: 825, column: 30, scope: !5390)
!5410 = !DILocation(line: 825, column: 36, scope: !5390)
!5411 = !DILocation(line: 825, column: 45, scope: !5390)
!5412 = !DILocation(line: 825, column: 10, scope: !5390)
!5413 = !DILocation(line: 825, column: 8, scope: !5390)
!5414 = !DILocation(line: 827, column: 8, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 827, column: 7)
!5416 = !DILocation(line: 827, column: 7, scope: !5415)
!5417 = !DILocation(line: 827, column: 7, scope: !5390)
!5418 = !DILocation(line: 828, column: 20, scope: !5415)
!5419 = !DILocation(line: 828, column: 19, scope: !5415)
!5420 = !DILocation(line: 828, column: 12, scope: !5415)
!5421 = !DILocation(line: 828, column: 5, scope: !5415)
!5422 = !DILocation(line: 830, column: 43, scope: !5390)
!5423 = !DILocation(line: 830, column: 20, scope: !5390)
!5424 = !DILocation(line: 830, column: 18, scope: !5390)
!5425 = !DILocation(line: 833, column: 7, scope: !5426)
!5426 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 833, column: 7)
!5427 = !DILocation(line: 833, column: 13, scope: !5426)
!5428 = !DILocation(line: 833, column: 24, scope: !5426)
!5429 = !DILocation(line: 833, column: 21, scope: !5426)
!5430 = !DILocation(line: 833, column: 7, scope: !5390)
!5431 = !DILocation(line: 836, column: 30, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5426, file: !3, line: 834, column: 5)
!5433 = !DILocation(line: 836, column: 14, scope: !5432)
!5434 = !DILocation(line: 837, column: 11, scope: !5432)
!5435 = !DILocation(line: 837, column: 17, scope: !5432)
!5436 = !DILocation(line: 837, column: 9, scope: !5432)
!5437 = !DILocation(line: 838, column: 11, scope: !5432)
!5438 = !DILocation(line: 838, column: 9, scope: !5432)
!5439 = !DILocation(line: 839, column: 5, scope: !5432)
!5440 = !DILocation(line: 842, column: 27, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5426, file: !3, line: 841, column: 5)
!5442 = !DILocation(line: 842, column: 11, scope: !5441)
!5443 = !DILocation(line: 842, column: 9, scope: !5441)
!5444 = !DILocation(line: 843, column: 16, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5441, file: !3, line: 843, column: 7)
!5446 = !DILocation(line: 843, column: 22, scope: !5445)
!5447 = !DILocation(line: 843, column: 14, scope: !5445)
!5448 = !DILocation(line: 843, column: 12, scope: !5445)
!5449 = !DILocation(line: 843, column: 29, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 843, column: 7)
!5451 = !DILocation(line: 843, column: 32, scope: !5450)
!5452 = !DILocation(line: 843, column: 43, scope: !5450)
!5453 = !DILocation(line: 843, column: 40, scope: !5450)
!5454 = !DILocation(line: 843, column: 7, scope: !5445)
!5455 = !DILocation(line: 845, column: 29, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 844, column: 2)
!5457 = !DILocation(line: 845, column: 12, scope: !5456)
!5458 = !DILocation(line: 845, column: 10, scope: !5456)
!5459 = !DILocation(line: 846, column: 8, scope: !5456)
!5460 = !DILocation(line: 846, column: 6, scope: !5456)
!5461 = !DILocation(line: 847, column: 8, scope: !5456)
!5462 = !DILocation(line: 847, column: 6, scope: !5456)
!5463 = !DILocation(line: 848, column: 2, scope: !5456)
!5464 = !DILocation(line: 843, column: 63, scope: !5450)
!5465 = !DILocation(line: 843, column: 66, scope: !5450)
!5466 = !DILocation(line: 843, column: 61, scope: !5450)
!5467 = !DILocation(line: 843, column: 7, scope: !5450)
!5468 = distinct !{!5468, !5454, !5469}
!5469 = !DILocation(line: 848, column: 2, scope: !5445)
!5470 = !DILocation(line: 849, column: 11, scope: !5441)
!5471 = !DILocation(line: 849, column: 9, scope: !5441)
!5472 = !DILocation(line: 852, column: 34, scope: !5390)
!5473 = !DILocation(line: 852, column: 37, scope: !5390)
!5474 = !DILocation(line: 852, column: 11, scope: !5390)
!5475 = !DILocation(line: 852, column: 9, scope: !5390)
!5476 = !DILocation(line: 853, column: 7, scope: !5390)
!5477 = !DILocation(line: 853, column: 5, scope: !5390)
!5478 = !DILocation(line: 854, column: 29, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 854, column: 7)
!5480 = !DILocation(line: 854, column: 7, scope: !5479)
!5481 = !DILocation(line: 854, column: 7, scope: !5390)
!5482 = !DILocation(line: 855, column: 9, scope: !5479)
!5483 = !DILocation(line: 855, column: 7, scope: !5479)
!5484 = !DILocation(line: 855, column: 5, scope: !5479)
!5485 = !DILocation(line: 858, column: 14, scope: !5390)
!5486 = !DILocation(line: 858, column: 12, scope: !5390)
!5487 = !DILocation(line: 860, column: 29, scope: !5390)
!5488 = !DILocation(line: 860, column: 35, scope: !5390)
!5489 = !DILocation(line: 860, column: 3, scope: !5390)
!5490 = !DILocation(line: 860, column: 27, scope: !5390)
!5491 = !DILocation(line: 861, column: 32, scope: !5390)
!5492 = !DILocation(line: 861, column: 3, scope: !5390)
!5493 = !DILocation(line: 861, column: 30, scope: !5390)
!5494 = !DILocation(line: 862, column: 31, scope: !5390)
!5495 = !DILocation(line: 862, column: 3, scope: !5390)
!5496 = !DILocation(line: 862, column: 29, scope: !5390)
!5497 = !DILocation(line: 863, column: 35, scope: !5390)
!5498 = !DILocation(line: 863, column: 3, scope: !5390)
!5499 = !DILocation(line: 863, column: 33, scope: !5390)
!5500 = !DILocation(line: 864, column: 34, scope: !5390)
!5501 = !DILocation(line: 864, column: 3, scope: !5390)
!5502 = !DILocation(line: 864, column: 32, scope: !5390)
!5503 = !DILocation(line: 865, column: 30, scope: !5390)
!5504 = !DILocation(line: 865, column: 3, scope: !5390)
!5505 = !DILocation(line: 865, column: 28, scope: !5390)
!5506 = !DILocation(line: 866, column: 33, scope: !5390)
!5507 = !DILocation(line: 866, column: 3, scope: !5390)
!5508 = !DILocation(line: 866, column: 31, scope: !5390)
!5509 = !DILocation(line: 867, column: 3, scope: !5390)
!5510 = !DILocation(line: 867, column: 39, scope: !5390)
!5511 = !DILocation(line: 868, column: 8, scope: !5512)
!5512 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 868, column: 7)
!5513 = !DILocation(line: 868, column: 25, scope: !5512)
!5514 = !DILocation(line: 869, column: 8, scope: !5512)
!5515 = !DILocation(line: 869, column: 11, scope: !5512)
!5516 = !DILocation(line: 869, column: 28, scope: !5512)
!5517 = !DILocation(line: 870, column: 8, scope: !5512)
!5518 = !DILocation(line: 870, column: 11, scope: !5512)
!5519 = !DILocation(line: 870, column: 28, scope: !5512)
!5520 = !DILocation(line: 871, column: 7, scope: !5512)
!5521 = !DILocation(line: 871, column: 10, scope: !5512)
!5522 = !DILocation(line: 868, column: 7, scope: !5390)
!5523 = !DILocation(line: 872, column: 5, scope: !5512)
!5524 = !DILocation(line: 872, column: 34, scope: !5512)
!5525 = !DILocation(line: 874, column: 3, scope: !5390)
!5526 = !DILocation(line: 875, column: 3, scope: !5390)
!5527 = !DILocation(line: 875, column: 36, scope: !5390)
!5528 = !DILocation(line: 877, column: 11, scope: !5390)
!5529 = !DILocation(line: 877, column: 4, scope: !5390)
!5530 = !DILocation(line: 877, column: 9, scope: !5390)
!5531 = !DILocation(line: 878, column: 27, scope: !5390)
!5532 = !DILocation(line: 878, column: 33, scope: !5390)
!5533 = !DILocation(line: 878, column: 3, scope: !5390)
!5534 = !DILocation(line: 878, column: 25, scope: !5390)
!5535 = !DILocation(line: 879, column: 27, scope: !5390)
!5536 = !DILocation(line: 879, column: 3, scope: !5390)
!5537 = !DILocation(line: 879, column: 9, scope: !5390)
!5538 = !DILocation(line: 879, column: 25, scope: !5390)
!5539 = !DILocation(line: 881, column: 8, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 881, column: 7)
!5541 = !DILocation(line: 882, column: 7, scope: !5540)
!5542 = !DILocation(line: 882, column: 10, scope: !5540)
!5543 = !DILocation(line: 882, column: 16, scope: !5540)
!5544 = !DILocation(line: 882, column: 27, scope: !5540)
!5545 = !DILocation(line: 882, column: 24, scope: !5540)
!5546 = !DILocation(line: 883, column: 7, scope: !5540)
!5547 = !DILocation(line: 883, column: 36, scope: !5540)
!5548 = !DILocation(line: 883, column: 10, scope: !5540)
!5549 = !DILocation(line: 881, column: 7, scope: !5390)
!5550 = !DILocation(line: 884, column: 29, scope: !5540)
!5551 = !DILocation(line: 884, column: 35, scope: !5540)
!5552 = !DILocation(line: 884, column: 5, scope: !5540)
!5553 = !DILocation(line: 886, column: 10, scope: !5390)
!5554 = !DILocation(line: 886, column: 3, scope: !5390)
!5555 = !DILocation(line: 887, column: 1, scope: !5390)
!5556 = distinct !DISubprogram(name: "get_frame_type", scope: !3, file: !3, line: 222, type: !5033, scopeLine: 223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5557 = !DILocalVariable(name: "info", arg: 1, scope: !5556, file: !3, line: 222, type: !1561)
!5558 = !DILocation(line: 222, column: 38, scope: !5556)
!5559 = !DILocalVariable(name: "type", scope: !5556, file: !3, line: 224, type: !1640)
!5560 = !DILocation(line: 224, column: 8, scope: !5556)
!5561 = !DILocation(line: 224, column: 15, scope: !5556)
!5562 = !DILocation(line: 224, column: 21, scope: !5556)
!5563 = !DILocation(line: 225, column: 8, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 225, column: 7)
!5565 = !DILocation(line: 225, column: 7, scope: !5556)
!5566 = !DILocalVariable(name: "name", scope: !5567, file: !3, line: 227, type: !1614)
!5567 = distinct !DILexicalBlock(scope: !5564, file: !3, line: 226, column: 5)
!5568 = !DILocation(line: 227, column: 13, scope: !5567)
!5569 = !DILocation(line: 229, column: 14, scope: !5567)
!5570 = !DILocation(line: 229, column: 12, scope: !5567)
!5571 = !DILocation(line: 232, column: 8, scope: !5567)
!5572 = !DILocation(line: 231, column: 14, scope: !5567)
!5573 = !DILocation(line: 231, column: 12, scope: !5567)
!5574 = !DILocation(line: 234, column: 42, scope: !5567)
!5575 = !DILocation(line: 234, column: 26, scope: !5567)
!5576 = !DILocation(line: 234, column: 7, scope: !5567)
!5577 = !DILocation(line: 234, column: 24, scope: !5567)
!5578 = !DILocation(line: 235, column: 13, scope: !5567)
!5579 = !DILocation(line: 235, column: 7, scope: !5567)
!5580 = !DILocation(line: 237, column: 26, scope: !5567)
!5581 = !DILocation(line: 237, column: 7, scope: !5567)
!5582 = !DILocation(line: 237, column: 13, scope: !5567)
!5583 = !DILocation(line: 237, column: 24, scope: !5567)
!5584 = !DILocation(line: 238, column: 46, scope: !5567)
!5585 = !DILocation(line: 238, column: 52, scope: !5567)
!5586 = !DILocation(line: 238, column: 26, scope: !5567)
!5587 = !DILocation(line: 238, column: 7, scope: !5567)
!5588 = !DILocation(line: 238, column: 13, scope: !5567)
!5589 = !DILocation(line: 238, column: 24, scope: !5567)
!5590 = !DILocation(line: 246, column: 7, scope: !5567)
!5591 = !DILocation(line: 246, column: 43, scope: !5567)
!5592 = !DILocation(line: 247, column: 5, scope: !5567)
!5593 = !DILocation(line: 248, column: 10, scope: !5556)
!5594 = !DILocation(line: 248, column: 3, scope: !5556)
!5595 = distinct !DISubprogram(name: "get_chain_field", scope: !3, file: !3, line: 370, type: !5033, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5596 = !DILocalVariable(name: "info", arg: 1, scope: !5595, file: !3, line: 370, type: !1561)
!5597 = !DILocation(line: 370, column: 39, scope: !5595)
!5598 = !DILocalVariable(name: "field", scope: !5595, file: !3, line: 372, type: !1640)
!5599 = !DILocation(line: 372, column: 8, scope: !5595)
!5600 = !DILocation(line: 372, column: 16, scope: !5595)
!5601 = !DILocation(line: 372, column: 22, scope: !5595)
!5602 = !DILocation(line: 374, column: 8, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 374, column: 7)
!5604 = !DILocation(line: 374, column: 7, scope: !5595)
!5605 = !DILocalVariable(name: "type", scope: !5606, file: !3, line: 376, type: !1640)
!5606 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 375, column: 5)
!5607 = !DILocation(line: 376, column: 12, scope: !5606)
!5608 = !DILocation(line: 376, column: 55, scope: !5606)
!5609 = !DILocation(line: 376, column: 61, scope: !5606)
!5610 = !DILocation(line: 376, column: 39, scope: !5606)
!5611 = !DILocation(line: 376, column: 19, scope: !5606)
!5612 = !DILocation(line: 378, column: 15, scope: !5606)
!5613 = !DILocation(line: 378, column: 13, scope: !5606)
!5614 = !DILocation(line: 379, column: 27, scope: !5606)
!5615 = !DILocation(line: 379, column: 7, scope: !5606)
!5616 = !DILocation(line: 379, column: 25, scope: !5606)
!5617 = !DILocation(line: 380, column: 27, scope: !5606)
!5618 = !DILocation(line: 380, column: 7, scope: !5606)
!5619 = !DILocation(line: 380, column: 25, scope: !5606)
!5620 = !DILocation(line: 381, column: 28, scope: !5606)
!5621 = !DILocation(line: 381, column: 7, scope: !5606)
!5622 = !DILocation(line: 381, column: 26, scope: !5606)
!5623 = !DILocation(line: 382, column: 7, scope: !5606)
!5624 = !DILocation(line: 382, column: 37, scope: !5606)
!5625 = !DILocation(line: 384, column: 49, scope: !5606)
!5626 = !DILocation(line: 384, column: 33, scope: !5606)
!5627 = !DILocation(line: 384, column: 56, scope: !5606)
!5628 = !DILocation(line: 384, column: 7, scope: !5606)
!5629 = !DILocation(line: 386, column: 27, scope: !5606)
!5630 = !DILocation(line: 386, column: 7, scope: !5606)
!5631 = !DILocation(line: 386, column: 13, scope: !5606)
!5632 = !DILocation(line: 386, column: 25, scope: !5606)
!5633 = !DILocation(line: 388, column: 11, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 388, column: 11)
!5635 = !DILocation(line: 389, column: 11, scope: !5634)
!5636 = !DILocation(line: 389, column: 15, scope: !5634)
!5637 = !DILocation(line: 389, column: 26, scope: !5634)
!5638 = !DILocation(line: 390, column: 4, scope: !5634)
!5639 = !DILocation(line: 390, column: 8, scope: !5634)
!5640 = !DILocation(line: 388, column: 11, scope: !5606)
!5641 = !DILocation(line: 391, column: 11, scope: !5634)
!5642 = !DILocation(line: 392, column: 15, scope: !5634)
!5643 = !DILocation(line: 392, column: 36, scope: !5634)
!5644 = !DILocation(line: 392, column: 42, scope: !5634)
!5645 = !DILocation(line: 392, column: 4, scope: !5634)
!5646 = !DILocation(line: 391, column: 2, scope: !5634)
!5647 = !DILocation(line: 394, column: 7, scope: !5606)
!5648 = !DILocation(line: 394, column: 41, scope: !5606)
!5649 = !DILocation(line: 395, column: 5, scope: !5606)
!5650 = !DILocation(line: 396, column: 10, scope: !5595)
!5651 = !DILocation(line: 396, column: 3, scope: !5595)
!5652 = distinct !DISubprogram(name: "lookup_field_for_decl", scope: !3, file: !3, line: 275, type: !5653, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5653 = !DISubroutineType(types: !5654)
!5654 = !{!1640, !1561, !1640, !675}
!5655 = !DILocalVariable(name: "info", arg: 1, scope: !5652, file: !3, line: 275, type: !1561)
!5656 = !DILocation(line: 275, column: 45, scope: !5652)
!5657 = !DILocalVariable(name: "decl", arg: 2, scope: !5652, file: !3, line: 275, type: !1640)
!5658 = !DILocation(line: 275, column: 56, scope: !5652)
!5659 = !DILocalVariable(name: "insert", arg: 3, scope: !5652, file: !3, line: 276, type: !675)
!5660 = !DILocation(line: 276, column: 29, scope: !5652)
!5661 = !DILocalVariable(name: "slot", scope: !5652, file: !3, line: 278, type: !2360)
!5662 = !DILocation(line: 278, column: 10, scope: !5652)
!5663 = !DILocation(line: 280, column: 7, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 280, column: 7)
!5665 = !DILocation(line: 280, column: 14, scope: !5664)
!5666 = !DILocation(line: 280, column: 7, scope: !5652)
!5667 = !DILocation(line: 282, column: 36, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5664, file: !3, line: 281, column: 5)
!5669 = !DILocation(line: 282, column: 42, scope: !5668)
!5670 = !DILocation(line: 282, column: 53, scope: !5668)
!5671 = !DILocation(line: 282, column: 14, scope: !5668)
!5672 = !DILocation(line: 282, column: 12, scope: !5668)
!5673 = !DILocation(line: 283, column: 14, scope: !5668)
!5674 = !DILocation(line: 283, column: 29, scope: !5668)
!5675 = !DILocation(line: 283, column: 28, scope: !5668)
!5676 = !DILocation(line: 283, column: 21, scope: !5668)
!5677 = !DILocation(line: 283, column: 7, scope: !5668)
!5678 = !DILocation(line: 286, column: 30, scope: !5652)
!5679 = !DILocation(line: 286, column: 36, scope: !5652)
!5680 = !DILocation(line: 286, column: 47, scope: !5652)
!5681 = !DILocation(line: 286, column: 10, scope: !5652)
!5682 = !DILocation(line: 286, column: 8, scope: !5652)
!5683 = !DILocation(line: 287, column: 9, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5652, file: !3, line: 287, column: 7)
!5685 = !DILocation(line: 287, column: 8, scope: !5684)
!5686 = !DILocation(line: 287, column: 7, scope: !5652)
!5687 = !DILocalVariable(name: "field", scope: !5688, file: !3, line: 289, type: !1640)
!5688 = distinct !DILexicalBlock(scope: !5684, file: !3, line: 288, column: 5)
!5689 = !DILocation(line: 289, column: 12, scope: !5688)
!5690 = !DILocation(line: 289, column: 20, scope: !5688)
!5691 = !DILocation(line: 290, column: 27, scope: !5688)
!5692 = !DILocation(line: 290, column: 7, scope: !5688)
!5693 = !DILocation(line: 290, column: 25, scope: !5688)
!5694 = !DILocation(line: 292, column: 33, scope: !5695)
!5695 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 292, column: 11)
!5696 = !DILocation(line: 292, column: 11, scope: !5695)
!5697 = !DILocation(line: 292, column: 11, scope: !5688)
!5698 = !DILocation(line: 294, column: 44, scope: !5699)
!5699 = distinct !DILexicalBlock(scope: !5695, file: !3, line: 293, column: 2)
!5700 = !DILocation(line: 294, column: 24, scope: !5699)
!5701 = !DILocation(line: 294, column: 4, scope: !5699)
!5702 = !DILocation(line: 294, column: 22, scope: !5699)
!5703 = !DILocation(line: 295, column: 25, scope: !5699)
!5704 = !DILocation(line: 295, column: 4, scope: !5699)
!5705 = !DILocation(line: 295, column: 23, scope: !5699)
!5706 = !DILocation(line: 296, column: 4, scope: !5699)
!5707 = !DILocation(line: 296, column: 34, scope: !5699)
!5708 = !DILocation(line: 297, column: 2, scope: !5699)
!5709 = !DILocation(line: 300, column: 31, scope: !5710)
!5710 = distinct !DILexicalBlock(scope: !5695, file: !3, line: 299, column: 2)
!5711 = !DILocation(line: 300, column: 11, scope: !5710)
!5712 = !DILocation(line: 300, column: 29, scope: !5710)
!5713 = !DILocation(line: 301, column: 42, scope: !5710)
!5714 = !DILocation(line: 301, column: 11, scope: !5710)
!5715 = !DILocation(line: 301, column: 40, scope: !5710)
!5716 = !DILocation(line: 302, column: 32, scope: !5710)
!5717 = !DILocation(line: 302, column: 11, scope: !5710)
!5718 = !DILocation(line: 302, column: 30, scope: !5710)
!5719 = !DILocation(line: 303, column: 37, scope: !5710)
!5720 = !DILocation(line: 303, column: 11, scope: !5710)
!5721 = !DILocation(line: 303, column: 35, scope: !5710)
!5722 = !DILocation(line: 304, column: 38, scope: !5710)
!5723 = !DILocation(line: 304, column: 11, scope: !5710)
!5724 = !DILocation(line: 304, column: 36, scope: !5710)
!5725 = !DILocation(line: 305, column: 44, scope: !5710)
!5726 = !DILocation(line: 305, column: 43, scope: !5710)
!5727 = !DILocation(line: 305, column: 11, scope: !5710)
!5728 = !DILocation(line: 305, column: 41, scope: !5710)
!5729 = !DILocation(line: 306, column: 40, scope: !5710)
!5730 = !DILocation(line: 306, column: 11, scope: !5710)
!5731 = !DILocation(line: 306, column: 38, scope: !5710)
!5732 = !DILocation(line: 309, column: 49, scope: !5688)
!5733 = !DILocation(line: 309, column: 33, scope: !5688)
!5734 = !DILocation(line: 309, column: 56, scope: !5688)
!5735 = !DILocation(line: 309, column: 7, scope: !5688)
!5736 = !DILocation(line: 310, column: 15, scope: !5688)
!5737 = !DILocation(line: 310, column: 8, scope: !5688)
!5738 = !DILocation(line: 310, column: 13, scope: !5688)
!5739 = !DILocation(line: 312, column: 11, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5688, file: !3, line: 312, column: 11)
!5741 = !DILocation(line: 312, column: 28, scope: !5740)
!5742 = !DILocation(line: 312, column: 11, scope: !5688)
!5743 = !DILocation(line: 313, column: 2, scope: !5740)
!5744 = !DILocation(line: 313, column: 8, scope: !5740)
!5745 = !DILocation(line: 313, column: 26, scope: !5740)
!5746 = !DILocation(line: 314, column: 5, scope: !5688)
!5747 = !DILocation(line: 316, column: 18, scope: !5652)
!5748 = !DILocation(line: 316, column: 17, scope: !5652)
!5749 = !DILocation(line: 316, column: 10, scope: !5652)
!5750 = !DILocation(line: 316, column: 3, scope: !5652)
!5751 = !DILocation(line: 317, column: 1, scope: !5652)
!5752 = distinct !DISubprogram(name: "use_pointer_in_frame", scope: !3, file: !3, line: 255, type: !5753, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5753 = !DISubroutineType(types: !5754)
!5754 = !{!1755, !1640}
!5755 = !DILocalVariable(name: "decl", arg: 1, scope: !5752, file: !3, line: 255, type: !1640)
!5756 = !DILocation(line: 255, column: 28, scope: !5752)
!5757 = !DILocation(line: 257, column: 7, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5752, file: !3, line: 257, column: 7)
!5759 = !DILocation(line: 257, column: 24, scope: !5758)
!5760 = !DILocation(line: 257, column: 7, scope: !5752)
!5761 = !DILocation(line: 262, column: 14, scope: !5762)
!5762 = distinct !DILexicalBlock(scope: !5758, file: !3, line: 258, column: 5)
!5763 = !DILocation(line: 262, column: 7, scope: !5762)
!5764 = !DILocation(line: 267, column: 14, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5758, file: !3, line: 265, column: 5)
!5766 = !DILocation(line: 267, column: 31, scope: !5765)
!5767 = !DILocation(line: 267, column: 39, scope: !5765)
!5768 = !DILocation(line: 267, column: 43, scope: !5765)
!5769 = !DILocation(line: 267, column: 42, scope: !5765)
!5770 = !DILocation(line: 267, column: 7, scope: !5765)
!5771 = !DILocation(line: 269, column: 1, scope: !5752)
!5772 = distinct !DISubprogram(name: "note_nonlocal_vla_type", scope: !3, file: !3, line: 1160, type: !5286, scopeLine: 1161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5773 = !DILocalVariable(name: "info", arg: 1, scope: !5772, file: !3, line: 1160, type: !1561)
!5774 = !DILocation(line: 1160, column: 46, scope: !5772)
!5775 = !DILocalVariable(name: "type", arg: 2, scope: !5772, file: !3, line: 1160, type: !1640)
!5776 = !DILocation(line: 1160, column: 57, scope: !5772)
!5777 = !DILocation(line: 1162, column: 3, scope: !5772)
!5778 = !DILocation(line: 1162, column: 10, scope: !5772)
!5779 = !DILocation(line: 1162, column: 32, scope: !5772)
!5780 = !DILocation(line: 1162, column: 36, scope: !5772)
!5781 = !DILocation(line: 1162, column: 35, scope: !5772)
!5782 = !DILocation(line: 0, scope: !5772)
!5783 = !DILocation(line: 1163, column: 12, scope: !5772)
!5784 = !DILocation(line: 1163, column: 10, scope: !5772)
!5785 = distinct !{!5785, !5777, !5783}
!5786 = !DILocation(line: 1165, column: 7, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5772, file: !3, line: 1165, column: 7)
!5788 = !DILocation(line: 1166, column: 7, scope: !5787)
!5789 = !DILocation(line: 1166, column: 10, scope: !5787)
!5790 = !DILocation(line: 1166, column: 39, scope: !5787)
!5791 = !DILocation(line: 1167, column: 7, scope: !5787)
!5792 = !DILocation(line: 1167, column: 10, scope: !5787)
!5793 = !DILocation(line: 1165, column: 7, scope: !5772)
!5794 = !DILocation(line: 1168, column: 12, scope: !5787)
!5795 = !DILocation(line: 1168, column: 10, scope: !5787)
!5796 = !DILocation(line: 1168, column: 5, scope: !5787)
!5797 = !DILocation(line: 1170, column: 3, scope: !5772)
!5798 = !DILocation(line: 1170, column: 10, scope: !5772)
!5799 = !DILocation(line: 1171, column: 3, scope: !5772)
!5800 = !DILocation(line: 1171, column: 6, scope: !5772)
!5801 = !DILocation(line: 1171, column: 23, scope: !5772)
!5802 = !DILocation(line: 1172, column: 3, scope: !5772)
!5803 = !DILocation(line: 1172, column: 6, scope: !5772)
!5804 = !DILocation(line: 1172, column: 23, scope: !5772)
!5805 = !DILocation(line: 1173, column: 3, scope: !5772)
!5806 = !DILocation(line: 1173, column: 6, scope: !5772)
!5807 = !DILocation(line: 1173, column: 23, scope: !5772)
!5808 = !DILocation(line: 1174, column: 12, scope: !5772)
!5809 = !DILocation(line: 1174, column: 10, scope: !5772)
!5810 = distinct !{!5810, !5797, !5808}
!5811 = !DILocation(line: 1176, column: 7, scope: !5812)
!5812 = distinct !DILexicalBlock(scope: !5772, file: !3, line: 1176, column: 7)
!5813 = !DILocation(line: 1176, column: 24, scope: !5812)
!5814 = !DILocation(line: 1176, column: 7, scope: !5772)
!5815 = !DILocalVariable(name: "domain", scope: !5816, file: !3, line: 1178, type: !1640)
!5816 = distinct !DILexicalBlock(scope: !5812, file: !3, line: 1177, column: 5)
!5817 = !DILocation(line: 1178, column: 12, scope: !5816)
!5818 = !DILocalVariable(name: "t", scope: !5816, file: !3, line: 1178, type: !1640)
!5819 = !DILocation(line: 1178, column: 20, scope: !5816)
!5820 = !DILocation(line: 1180, column: 31, scope: !5816)
!5821 = !DILocation(line: 1180, column: 37, scope: !5816)
!5822 = !DILocation(line: 1180, column: 7, scope: !5816)
!5823 = !DILocation(line: 1181, column: 16, scope: !5816)
!5824 = !DILocation(line: 1181, column: 14, scope: !5816)
!5825 = !DILocation(line: 1182, column: 11, scope: !5826)
!5826 = distinct !DILexicalBlock(scope: !5816, file: !3, line: 1182, column: 11)
!5827 = !DILocation(line: 1182, column: 11, scope: !5816)
!5828 = !DILocation(line: 1184, column: 8, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5826, file: !3, line: 1183, column: 2)
!5830 = !DILocation(line: 1184, column: 6, scope: !5829)
!5831 = !DILocation(line: 1185, column: 8, scope: !5832)
!5832 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 1185, column: 8)
!5833 = !DILocation(line: 1185, column: 10, scope: !5832)
!5834 = !DILocation(line: 1185, column: 14, scope: !5832)
!5835 = !DILocation(line: 1185, column: 28, scope: !5832)
!5836 = !DILocation(line: 1185, column: 40, scope: !5832)
!5837 = !DILocation(line: 1185, column: 43, scope: !5832)
!5838 = !DILocation(line: 1185, column: 57, scope: !5832)
!5839 = !DILocation(line: 1186, column: 8, scope: !5832)
!5840 = !DILocation(line: 1186, column: 34, scope: !5832)
!5841 = !DILocation(line: 1186, column: 11, scope: !5832)
!5842 = !DILocation(line: 1186, column: 40, scope: !5832)
!5843 = !DILocation(line: 1186, column: 46, scope: !5832)
!5844 = !DILocation(line: 1186, column: 37, scope: !5832)
!5845 = !DILocation(line: 1185, column: 8, scope: !5829)
!5846 = !DILocation(line: 1187, column: 31, scope: !5832)
!5847 = !DILocation(line: 1187, column: 37, scope: !5832)
!5848 = !DILocation(line: 1187, column: 6, scope: !5832)
!5849 = !DILocation(line: 1188, column: 8, scope: !5829)
!5850 = !DILocation(line: 1188, column: 6, scope: !5829)
!5851 = !DILocation(line: 1189, column: 8, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5829, file: !3, line: 1189, column: 8)
!5853 = !DILocation(line: 1189, column: 10, scope: !5852)
!5854 = !DILocation(line: 1189, column: 14, scope: !5852)
!5855 = !DILocation(line: 1189, column: 28, scope: !5852)
!5856 = !DILocation(line: 1189, column: 40, scope: !5852)
!5857 = !DILocation(line: 1189, column: 43, scope: !5852)
!5858 = !DILocation(line: 1189, column: 57, scope: !5852)
!5859 = !DILocation(line: 1190, column: 8, scope: !5852)
!5860 = !DILocation(line: 1190, column: 34, scope: !5852)
!5861 = !DILocation(line: 1190, column: 11, scope: !5852)
!5862 = !DILocation(line: 1190, column: 40, scope: !5852)
!5863 = !DILocation(line: 1190, column: 46, scope: !5852)
!5864 = !DILocation(line: 1190, column: 37, scope: !5852)
!5865 = !DILocation(line: 1189, column: 8, scope: !5829)
!5866 = !DILocation(line: 1191, column: 31, scope: !5852)
!5867 = !DILocation(line: 1191, column: 37, scope: !5852)
!5868 = !DILocation(line: 1191, column: 6, scope: !5852)
!5869 = !DILocation(line: 1192, column: 2, scope: !5829)
!5870 = !DILocation(line: 1193, column: 5, scope: !5816)
!5871 = !DILocation(line: 1194, column: 1, scope: !5772)
!5872 = distinct !DISubprogram(name: "create_tmp_var_for", scope: !3, file: !3, line: 139, type: !5873, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5873 = !DISubroutineType(types: !5874)
!5874 = !{!1640, !1561, !1640, !1839}
!5875 = !DILocalVariable(name: "info", arg: 1, scope: !5872, file: !3, line: 139, type: !1561)
!5876 = !DILocation(line: 139, column: 42, scope: !5872)
!5877 = !DILocalVariable(name: "type", arg: 2, scope: !5872, file: !3, line: 139, type: !1640)
!5878 = !DILocation(line: 139, column: 53, scope: !5872)
!5879 = !DILocalVariable(name: "prefix", arg: 3, scope: !5872, file: !3, line: 139, type: !1839)
!5880 = !DILocation(line: 139, column: 71, scope: !5872)
!5881 = !DILocalVariable(name: "tmp_var", scope: !5872, file: !3, line: 141, type: !1640)
!5882 = !DILocation(line: 141, column: 8, scope: !5872)
!5883 = !DILocation(line: 146, column: 3, scope: !5872)
!5884 = !DILocation(line: 147, column: 3, scope: !5872)
!5885 = !DILocation(line: 150, column: 33, scope: !5872)
!5886 = !DILocation(line: 150, column: 39, scope: !5872)
!5887 = !DILocation(line: 150, column: 13, scope: !5872)
!5888 = !DILocation(line: 150, column: 11, scope: !5872)
!5889 = !DILocation(line: 151, column: 28, scope: !5872)
!5890 = !DILocation(line: 151, column: 34, scope: !5872)
!5891 = !DILocation(line: 151, column: 3, scope: !5872)
!5892 = !DILocation(line: 151, column: 26, scope: !5872)
!5893 = !DILocation(line: 152, column: 26, scope: !5872)
!5894 = !DILocation(line: 152, column: 32, scope: !5872)
!5895 = !DILocation(line: 152, column: 3, scope: !5872)
!5896 = !DILocation(line: 152, column: 24, scope: !5872)
!5897 = !DILocation(line: 153, column: 3, scope: !5872)
!5898 = !DILocation(line: 153, column: 38, scope: !5872)
!5899 = !DILocation(line: 154, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 154, column: 7)
!5901 = !DILocation(line: 154, column: 24, scope: !5900)
!5902 = !DILocation(line: 155, column: 7, scope: !5900)
!5903 = !DILocation(line: 155, column: 10, scope: !5900)
!5904 = !DILocation(line: 155, column: 27, scope: !5900)
!5905 = !DILocation(line: 154, column: 7, scope: !5872)
!5906 = !DILocation(line: 156, column: 5, scope: !5900)
!5907 = !DILocation(line: 156, column: 33, scope: !5900)
!5908 = !DILocation(line: 158, column: 31, scope: !5872)
!5909 = !DILocation(line: 158, column: 3, scope: !5872)
!5910 = !DILocation(line: 158, column: 9, scope: !5872)
!5911 = !DILocation(line: 158, column: 29, scope: !5872)
!5912 = !DILocation(line: 160, column: 10, scope: !5872)
!5913 = !DILocation(line: 160, column: 3, scope: !5872)
!5914 = distinct !DISubprogram(name: "gimple_seq_first", scope: !611, file: !611, line: 159, type: !5915, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5915 = !DISubroutineType(types: !5916)
!5916 = !{!1900, !5147}
!5917 = !DILocalVariable(name: "s", arg: 1, scope: !5914, file: !611, line: 159, type: !5147)
!5918 = !DILocation(line: 159, column: 36, scope: !5914)
!5919 = !DILocation(line: 161, column: 10, scope: !5914)
!5920 = !DILocation(line: 161, column: 14, scope: !5914)
!5921 = !DILocation(line: 161, column: 17, scope: !5914)
!5922 = !DILocation(line: 161, column: 3, scope: !5914)
!5923 = distinct !DISubprogram(name: "gimple_omp_for_pre_body", scope: !611, file: !611, line: 3583, type: !5136, scopeLine: 3584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5924 = !DILocalVariable(name: "gs", arg: 1, scope: !5923, file: !611, line: 3583, type: !1905)
!5925 = !DILocation(line: 3583, column: 33, scope: !5923)
!5926 = !DILocation(line: 3586, column: 10, scope: !5923)
!5927 = !DILocation(line: 3586, column: 14, scope: !5923)
!5928 = !DILocation(line: 3586, column: 29, scope: !5923)
!5929 = !DILocation(line: 3586, column: 3, scope: !5923)
!5930 = distinct !DISubprogram(name: "gsi_last", scope: !611, file: !611, line: 4435, type: !5931, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5931 = !DISubroutineType(types: !5932)
!5932 = !{!2887, !1895}
!5933 = !DILocalVariable(name: "seq", arg: 1, scope: !5930, file: !611, line: 4435, type: !1895)
!5934 = !DILocation(line: 4435, column: 22, scope: !5930)
!5935 = !DILocalVariable(name: "i", scope: !5930, file: !611, line: 4437, type: !2887)
!5936 = !DILocation(line: 4437, column: 24, scope: !5930)
!5937 = !DILocation(line: 4439, column: 28, scope: !5930)
!5938 = !DILocation(line: 4439, column: 11, scope: !5930)
!5939 = !DILocation(line: 4439, column: 5, scope: !5930)
!5940 = !DILocation(line: 4439, column: 9, scope: !5930)
!5941 = !DILocation(line: 4440, column: 11, scope: !5930)
!5942 = !DILocation(line: 4440, column: 5, scope: !5930)
!5943 = !DILocation(line: 4440, column: 9, scope: !5930)
!5944 = !DILocation(line: 4441, column: 13, scope: !5930)
!5945 = !DILocation(line: 4441, column: 11, scope: !5930)
!5946 = !DILocation(line: 4441, column: 17, scope: !5930)
!5947 = !DILocation(line: 4441, column: 22, scope: !5930)
!5948 = !DILocation(line: 4441, column: 27, scope: !5930)
!5949 = !DILocation(line: 4441, column: 20, scope: !5930)
!5950 = !DILocation(line: 4441, column: 10, scope: !5930)
!5951 = !DILocation(line: 4441, column: 48, scope: !5930)
!5952 = !DILocation(line: 4441, column: 53, scope: !5930)
!5953 = !DILocation(line: 4441, column: 35, scope: !5930)
!5954 = !DILocation(line: 4441, column: 5, scope: !5930)
!5955 = !DILocation(line: 4441, column: 8, scope: !5930)
!5956 = !DILocation(line: 4443, column: 3, scope: !5930)
!5957 = distinct !DISubprogram(name: "gimple_omp_for_collapse", scope: !611, file: !611, line: 3440, type: !5958, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5958 = !DISubroutineType(types: !5959)
!5959 = !{!2051, !1905}
!5960 = !DILocalVariable(name: "gs", arg: 1, scope: !5957, file: !611, line: 3440, type: !1905)
!5961 = !DILocation(line: 3440, column: 33, scope: !5957)
!5962 = !DILocation(line: 3443, column: 10, scope: !5957)
!5963 = !DILocation(line: 3443, column: 14, scope: !5957)
!5964 = !DILocation(line: 3443, column: 29, scope: !5957)
!5965 = !DILocation(line: 3443, column: 3, scope: !5957)
!5966 = distinct !DISubprogram(name: "gimple_omp_for_index_ptr", scope: !611, file: !611, line: 3461, type: !5967, scopeLine: 3462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5967 = !DISubroutineType(types: !5968)
!5968 = !{!1940, !1905, !2051}
!5969 = !DILocalVariable(name: "gs", arg: 1, scope: !5966, file: !611, line: 3461, type: !1905)
!5970 = !DILocation(line: 3461, column: 34, scope: !5966)
!5971 = !DILocalVariable(name: "i", arg: 2, scope: !5966, file: !611, line: 3461, type: !2051)
!5972 = !DILocation(line: 3461, column: 45, scope: !5966)
!5973 = !DILocation(line: 3464, column: 3, scope: !5966)
!5974 = !DILocation(line: 3465, column: 11, scope: !5966)
!5975 = !DILocation(line: 3465, column: 15, scope: !5966)
!5976 = !DILocation(line: 3465, column: 30, scope: !5966)
!5977 = !DILocation(line: 3465, column: 35, scope: !5966)
!5978 = !DILocation(line: 3465, column: 38, scope: !5966)
!5979 = !DILocation(line: 3465, column: 3, scope: !5966)
!5980 = distinct !DISubprogram(name: "gimple_omp_for_initial_ptr", scope: !611, file: !611, line: 3494, type: !5967, scopeLine: 3495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5981 = !DILocalVariable(name: "gs", arg: 1, scope: !5980, file: !611, line: 3494, type: !1905)
!5982 = !DILocation(line: 3494, column: 36, scope: !5980)
!5983 = !DILocalVariable(name: "i", arg: 2, scope: !5980, file: !611, line: 3494, type: !2051)
!5984 = !DILocation(line: 3494, column: 47, scope: !5980)
!5985 = !DILocation(line: 3497, column: 3, scope: !5980)
!5986 = !DILocation(line: 3498, column: 11, scope: !5980)
!5987 = !DILocation(line: 3498, column: 15, scope: !5980)
!5988 = !DILocation(line: 3498, column: 30, scope: !5980)
!5989 = !DILocation(line: 3498, column: 35, scope: !5980)
!5990 = !DILocation(line: 3498, column: 38, scope: !5980)
!5991 = !DILocation(line: 3498, column: 3, scope: !5980)
!5992 = distinct !DISubprogram(name: "gimple_omp_for_final_ptr", scope: !611, file: !611, line: 3527, type: !5967, scopeLine: 3528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!5993 = !DILocalVariable(name: "gs", arg: 1, scope: !5992, file: !611, line: 3527, type: !1905)
!5994 = !DILocation(line: 3527, column: 34, scope: !5992)
!5995 = !DILocalVariable(name: "i", arg: 2, scope: !5992, file: !611, line: 3527, type: !2051)
!5996 = !DILocation(line: 3527, column: 45, scope: !5992)
!5997 = !DILocation(line: 3530, column: 3, scope: !5992)
!5998 = !DILocation(line: 3531, column: 11, scope: !5992)
!5999 = !DILocation(line: 3531, column: 15, scope: !5992)
!6000 = !DILocation(line: 3531, column: 30, scope: !5992)
!6001 = !DILocation(line: 3531, column: 35, scope: !5992)
!6002 = !DILocation(line: 3531, column: 38, scope: !5992)
!6003 = !DILocation(line: 3531, column: 3, scope: !5992)
!6004 = distinct !DISubprogram(name: "gimple_omp_for_incr", scope: !611, file: !611, line: 3549, type: !6005, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6005 = !DISubroutineType(types: !6006)
!6006 = !{!1640, !4838, !2051}
!6007 = !DILocalVariable(name: "gs", arg: 1, scope: !6004, file: !611, line: 3549, type: !4838)
!6008 = !DILocation(line: 3549, column: 35, scope: !6004)
!6009 = !DILocalVariable(name: "i", arg: 2, scope: !6004, file: !611, line: 3549, type: !2051)
!6010 = !DILocation(line: 3549, column: 46, scope: !6004)
!6011 = !DILocation(line: 3552, column: 3, scope: !6004)
!6012 = !DILocation(line: 3553, column: 10, scope: !6004)
!6013 = !DILocation(line: 3553, column: 14, scope: !6004)
!6014 = !DILocation(line: 3553, column: 29, scope: !6004)
!6015 = !DILocation(line: 3553, column: 34, scope: !6004)
!6016 = !DILocation(line: 3553, column: 37, scope: !6004)
!6017 = !DILocation(line: 3553, column: 3, scope: !6004)
!6018 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !611, file: !611, line: 215, type: !6019, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6019 = !DISubroutineType(types: !6020)
!6020 = !{!1755, !5147}
!6021 = !DILocalVariable(name: "s", arg: 1, scope: !6018, file: !611, line: 215, type: !5147)
!6022 = !DILocation(line: 215, column: 38, scope: !6018)
!6023 = !DILocation(line: 217, column: 10, scope: !6018)
!6024 = !DILocation(line: 217, column: 12, scope: !6018)
!6025 = !DILocation(line: 217, column: 20, scope: !6018)
!6026 = !DILocation(line: 217, column: 23, scope: !6018)
!6027 = !DILocation(line: 217, column: 26, scope: !6018)
!6028 = !DILocation(line: 217, column: 32, scope: !6018)
!6029 = !DILocation(line: 217, column: 3, scope: !6018)
!6030 = distinct !DISubprogram(name: "gimple_omp_for_set_pre_body", scope: !611, file: !611, line: 3594, type: !6031, scopeLine: 3595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6031 = !DISubroutineType(types: !6032)
!6032 = !{null, !1905, !1895}
!6033 = !DILocalVariable(name: "gs", arg: 1, scope: !6030, file: !611, line: 3594, type: !1905)
!6034 = !DILocation(line: 3594, column: 37, scope: !6030)
!6035 = !DILocalVariable(name: "pre_body", arg: 2, scope: !6030, file: !611, line: 3594, type: !1895)
!6036 = !DILocation(line: 3594, column: 52, scope: !6030)
!6037 = !DILocation(line: 3597, column: 33, scope: !6030)
!6038 = !DILocation(line: 3597, column: 3, scope: !6030)
!6039 = !DILocation(line: 3597, column: 7, scope: !6030)
!6040 = !DILocation(line: 3597, column: 22, scope: !6030)
!6041 = !DILocation(line: 3597, column: 31, scope: !6030)
!6042 = !DILocation(line: 3598, column: 1, scope: !6030)
!6043 = distinct !DISubprogram(name: "gimple_seq_last", scope: !611, file: !611, line: 178, type: !5915, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6044 = !DILocalVariable(name: "s", arg: 1, scope: !6043, file: !611, line: 178, type: !5147)
!6045 = !DILocation(line: 178, column: 35, scope: !6043)
!6046 = !DILocation(line: 180, column: 10, scope: !6043)
!6047 = !DILocation(line: 180, column: 14, scope: !6043)
!6048 = !DILocation(line: 180, column: 17, scope: !6043)
!6049 = !DILocation(line: 180, column: 3, scope: !6043)
!6050 = distinct !DISubprogram(name: "gimple_bb", scope: !611, file: !611, line: 1112, type: !6051, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6051 = !DISubroutineType(types: !6052)
!6052 = !{!1869, !4838}
!6053 = !DILocalVariable(name: "g", arg: 1, scope: !6050, file: !611, line: 1112, type: !4838)
!6054 = !DILocation(line: 1112, column: 25, scope: !6050)
!6055 = !DILocation(line: 1114, column: 10, scope: !6050)
!6056 = !DILocation(line: 1114, column: 13, scope: !6050)
!6057 = !DILocation(line: 1114, column: 20, scope: !6050)
!6058 = !DILocation(line: 1114, column: 3, scope: !6050)
!6059 = distinct !DISubprogram(name: "get_frame_field", scope: !3, file: !3, line: 778, type: !6060, scopeLine: 780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6060 = !DISubroutineType(types: !6061)
!6061 = !{!1640, !1561, !1640, !1640, !3455}
!6062 = !DILocalVariable(name: "info", arg: 1, scope: !6059, file: !3, line: 778, type: !1561)
!6063 = !DILocation(line: 778, column: 39, scope: !6059)
!6064 = !DILocalVariable(name: "target_context", arg: 2, scope: !6059, file: !3, line: 778, type: !1640)
!6065 = !DILocation(line: 778, column: 50, scope: !6059)
!6066 = !DILocalVariable(name: "field", arg: 3, scope: !6059, file: !3, line: 779, type: !1640)
!6067 = !DILocation(line: 779, column: 9, scope: !6059)
!6068 = !DILocalVariable(name: "gsi", arg: 4, scope: !6059, file: !3, line: 779, type: !3455)
!6069 = !DILocation(line: 779, column: 38, scope: !6059)
!6070 = !DILocalVariable(name: "i", scope: !6059, file: !3, line: 781, type: !1561)
!6071 = !DILocation(line: 781, column: 24, scope: !6059)
!6072 = !DILocalVariable(name: "x", scope: !6059, file: !3, line: 782, type: !1640)
!6073 = !DILocation(line: 782, column: 8, scope: !6059)
!6074 = !DILocation(line: 784, column: 7, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6059, file: !3, line: 784, column: 7)
!6076 = !DILocation(line: 784, column: 13, scope: !6075)
!6077 = !DILocation(line: 784, column: 24, scope: !6075)
!6078 = !DILocation(line: 784, column: 21, scope: !6075)
!6079 = !DILocation(line: 784, column: 7, scope: !6059)
!6080 = !DILocation(line: 787, column: 30, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 785, column: 5)
!6082 = !DILocation(line: 787, column: 14, scope: !6081)
!6083 = !DILocation(line: 788, column: 11, scope: !6081)
!6084 = !DILocation(line: 788, column: 17, scope: !6081)
!6085 = !DILocation(line: 788, column: 9, scope: !6081)
!6086 = !DILocation(line: 789, column: 5, scope: !6081)
!6087 = !DILocation(line: 792, column: 27, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6075, file: !3, line: 791, column: 5)
!6089 = !DILocation(line: 792, column: 11, scope: !6088)
!6090 = !DILocation(line: 792, column: 9, scope: !6088)
!6091 = !DILocation(line: 794, column: 16, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6088, file: !3, line: 794, column: 7)
!6093 = !DILocation(line: 794, column: 22, scope: !6092)
!6094 = !DILocation(line: 794, column: 14, scope: !6092)
!6095 = !DILocation(line: 794, column: 12, scope: !6092)
!6096 = !DILocation(line: 794, column: 29, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 794, column: 7)
!6098 = !DILocation(line: 794, column: 32, scope: !6097)
!6099 = !DILocation(line: 794, column: 43, scope: !6097)
!6100 = !DILocation(line: 794, column: 40, scope: !6097)
!6101 = !DILocation(line: 794, column: 7, scope: !6092)
!6102 = !DILocalVariable(name: "field", scope: !6103, file: !3, line: 796, type: !1640)
!6103 = distinct !DILexicalBlock(scope: !6097, file: !3, line: 795, column: 2)
!6104 = !DILocation(line: 796, column: 9, scope: !6103)
!6105 = !DILocation(line: 796, column: 34, scope: !6103)
!6106 = !DILocation(line: 796, column: 17, scope: !6103)
!6107 = !DILocation(line: 798, column: 8, scope: !6103)
!6108 = !DILocation(line: 798, column: 6, scope: !6103)
!6109 = !DILocation(line: 799, column: 8, scope: !6103)
!6110 = !DILocation(line: 799, column: 6, scope: !6103)
!6111 = !DILocation(line: 800, column: 22, scope: !6103)
!6112 = !DILocation(line: 800, column: 28, scope: !6103)
!6113 = !DILocation(line: 800, column: 31, scope: !6103)
!6114 = !DILocation(line: 800, column: 8, scope: !6103)
!6115 = !DILocation(line: 800, column: 6, scope: !6103)
!6116 = !DILocation(line: 801, column: 2, scope: !6103)
!6117 = !DILocation(line: 794, column: 63, scope: !6097)
!6118 = !DILocation(line: 794, column: 66, scope: !6097)
!6119 = !DILocation(line: 794, column: 61, scope: !6097)
!6120 = !DILocation(line: 794, column: 7, scope: !6097)
!6121 = distinct !{!6121, !6101, !6122}
!6122 = !DILocation(line: 801, column: 2, scope: !6092)
!6123 = !DILocation(line: 803, column: 11, scope: !6088)
!6124 = !DILocation(line: 803, column: 9, scope: !6088)
!6125 = !DILocation(line: 806, column: 7, scope: !6059)
!6126 = !DILocation(line: 806, column: 5, scope: !6059)
!6127 = !DILocation(line: 807, column: 10, scope: !6059)
!6128 = !DILocation(line: 807, column: 3, scope: !6059)
!6129 = distinct !DISubprogram(name: "init_tmp_var", scope: !3, file: !3, line: 421, type: !6130, scopeLine: 422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6130 = !DISubroutineType(types: !6131)
!6131 = !{!1640, !1561, !1640, !3455}
!6132 = !DILocalVariable(name: "info", arg: 1, scope: !6129, file: !3, line: 421, type: !1561)
!6133 = !DILocation(line: 421, column: 36, scope: !6129)
!6134 = !DILocalVariable(name: "exp", arg: 2, scope: !6129, file: !3, line: 421, type: !1640)
!6135 = !DILocation(line: 421, column: 47, scope: !6129)
!6136 = !DILocalVariable(name: "gsi", arg: 3, scope: !6129, file: !3, line: 421, type: !3455)
!6137 = !DILocation(line: 421, column: 74, scope: !6129)
!6138 = !DILocalVariable(name: "t", scope: !6129, file: !3, line: 423, type: !1640)
!6139 = !DILocation(line: 423, column: 8, scope: !6129)
!6140 = !DILocalVariable(name: "stmt", scope: !6129, file: !3, line: 424, type: !1905)
!6141 = !DILocation(line: 424, column: 10, scope: !6129)
!6142 = !DILocation(line: 426, column: 27, scope: !6129)
!6143 = !DILocation(line: 426, column: 33, scope: !6129)
!6144 = !DILocation(line: 426, column: 7, scope: !6129)
!6145 = !DILocation(line: 426, column: 5, scope: !6129)
!6146 = !DILocation(line: 427, column: 10, scope: !6129)
!6147 = !DILocation(line: 427, column: 8, scope: !6129)
!6148 = !DILocation(line: 428, column: 21, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 428, column: 7)
!6150 = !DILocation(line: 428, column: 9, scope: !6149)
!6151 = !DILocation(line: 428, column: 7, scope: !6129)
!6152 = !DILocation(line: 429, column: 26, scope: !6149)
!6153 = !DILocation(line: 429, column: 60, scope: !6149)
!6154 = !DILocation(line: 429, column: 49, scope: !6149)
!6155 = !DILocation(line: 429, column: 32, scope: !6149)
!6156 = !DILocation(line: 429, column: 5, scope: !6149)
!6157 = !DILocation(line: 430, column: 37, scope: !6129)
!6158 = !DILocation(line: 430, column: 42, scope: !6129)
!6159 = !DILocation(line: 430, column: 3, scope: !6129)
!6160 = !DILocation(line: 432, column: 10, scope: !6129)
!6161 = !DILocation(line: 432, column: 3, scope: !6129)
!6162 = distinct !DISubprogram(name: "save_tmp_var", scope: !3, file: !3, line: 452, type: !6130, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6163 = !DILocalVariable(name: "info", arg: 1, scope: !6162, file: !3, line: 452, type: !1561)
!6164 = !DILocation(line: 452, column: 36, scope: !6162)
!6165 = !DILocalVariable(name: "exp", arg: 2, scope: !6162, file: !3, line: 452, type: !1640)
!6166 = !DILocation(line: 452, column: 47, scope: !6162)
!6167 = !DILocalVariable(name: "gsi", arg: 3, scope: !6162, file: !3, line: 452, type: !3455)
!6168 = !DILocation(line: 452, column: 74, scope: !6162)
!6169 = !DILocalVariable(name: "t", scope: !6162, file: !3, line: 454, type: !1640)
!6170 = !DILocation(line: 454, column: 8, scope: !6162)
!6171 = !DILocalVariable(name: "stmt", scope: !6162, file: !3, line: 455, type: !1905)
!6172 = !DILocation(line: 455, column: 10, scope: !6162)
!6173 = !DILocation(line: 457, column: 27, scope: !6162)
!6174 = !DILocation(line: 457, column: 33, scope: !6162)
!6175 = !DILocation(line: 457, column: 7, scope: !6162)
!6176 = !DILocation(line: 457, column: 5, scope: !6162)
!6177 = !DILocation(line: 458, column: 10, scope: !6162)
!6178 = !DILocation(line: 458, column: 8, scope: !6162)
!6179 = !DILocation(line: 459, column: 21, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6162, file: !3, line: 459, column: 7)
!6181 = !DILocation(line: 459, column: 9, scope: !6180)
!6182 = !DILocation(line: 459, column: 7, scope: !6162)
!6183 = !DILocation(line: 460, column: 26, scope: !6180)
!6184 = !DILocation(line: 460, column: 60, scope: !6180)
!6185 = !DILocation(line: 460, column: 49, scope: !6180)
!6186 = !DILocation(line: 460, column: 32, scope: !6180)
!6187 = !DILocation(line: 460, column: 5, scope: !6180)
!6188 = !DILocation(line: 461, column: 36, scope: !6162)
!6189 = !DILocation(line: 461, column: 41, scope: !6162)
!6190 = !DILocation(line: 461, column: 3, scope: !6162)
!6191 = !DILocation(line: 463, column: 10, scope: !6162)
!6192 = !DILocation(line: 463, column: 3, scope: !6162)
!6193 = distinct !DISubprogram(name: "gsi_gimplify_val", scope: !3, file: !3, line: 439, type: !6130, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6194 = !DILocalVariable(name: "info", arg: 1, scope: !6193, file: !3, line: 439, type: !1561)
!6195 = !DILocation(line: 439, column: 40, scope: !6193)
!6196 = !DILocalVariable(name: "exp", arg: 2, scope: !6193, file: !3, line: 439, type: !1640)
!6197 = !DILocation(line: 439, column: 51, scope: !6193)
!6198 = !DILocalVariable(name: "gsi", arg: 3, scope: !6193, file: !3, line: 440, type: !3455)
!6199 = !DILocation(line: 440, column: 27, scope: !6193)
!6200 = !DILocation(line: 442, column: 22, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 442, column: 7)
!6202 = !DILocation(line: 442, column: 7, scope: !6201)
!6203 = !DILocation(line: 442, column: 7, scope: !6193)
!6204 = !DILocation(line: 443, column: 12, scope: !6201)
!6205 = !DILocation(line: 443, column: 5, scope: !6201)
!6206 = !DILocation(line: 445, column: 26, scope: !6201)
!6207 = !DILocation(line: 445, column: 32, scope: !6201)
!6208 = !DILocation(line: 445, column: 37, scope: !6201)
!6209 = !DILocation(line: 445, column: 12, scope: !6201)
!6210 = !DILocation(line: 445, column: 5, scope: !6201)
!6211 = !DILocation(line: 446, column: 1, scope: !6193)
!6212 = distinct !DISubprogram(name: "gsi_end_p", scope: !611, file: !611, line: 4467, type: !6213, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6213 = !DISubroutineType(types: !6214)
!6214 = !{!1755, !2887}
!6215 = !DILocalVariable(name: "i", arg: 1, scope: !6212, file: !611, line: 4467, type: !2887)
!6216 = !DILocation(line: 4467, column: 33, scope: !6212)
!6217 = !DILocation(line: 4469, column: 12, scope: !6212)
!6218 = !DILocation(line: 4469, column: 16, scope: !6212)
!6219 = !DILocation(line: 4469, column: 10, scope: !6212)
!6220 = !DILocation(line: 4469, column: 3, scope: !6212)
!6221 = distinct !DISubprogram(name: "gimple_set_location", scope: !611, file: !611, line: 1156, type: !6222, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6222 = !DISubroutineType(types: !6223)
!6223 = !{null, !1905, !1763}
!6224 = !DILocalVariable(name: "g", arg: 1, scope: !6221, file: !611, line: 1156, type: !1905)
!6225 = !DILocation(line: 1156, column: 29, scope: !6221)
!6226 = !DILocalVariable(name: "location", arg: 2, scope: !6221, file: !611, line: 1156, type: !1763)
!6227 = !DILocation(line: 1156, column: 43, scope: !6221)
!6228 = !DILocation(line: 1158, column: 24, scope: !6221)
!6229 = !DILocation(line: 1158, column: 3, scope: !6221)
!6230 = !DILocation(line: 1158, column: 6, scope: !6221)
!6231 = !DILocation(line: 1158, column: 13, scope: !6221)
!6232 = !DILocation(line: 1158, column: 22, scope: !6221)
!6233 = !DILocation(line: 1159, column: 1, scope: !6221)
!6234 = distinct !DISubprogram(name: "convert_local_omp_clauses", scope: !3, file: !3, line: 1529, type: !4854, scopeLine: 1530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6235 = !DILocalVariable(name: "pclauses", arg: 1, scope: !6234, file: !3, line: 1529, type: !1940)
!6236 = !DILocation(line: 1529, column: 34, scope: !6234)
!6237 = !DILocalVariable(name: "wi", arg: 2, scope: !6234, file: !3, line: 1529, type: !2883)
!6238 = !DILocation(line: 1529, column: 67, scope: !6234)
!6239 = !DILocalVariable(name: "info", scope: !6234, file: !3, line: 1531, type: !3678)
!6240 = !DILocation(line: 1531, column: 30, scope: !6234)
!6241 = !DILocation(line: 1531, column: 61, scope: !6234)
!6242 = !DILocation(line: 1531, column: 65, scope: !6234)
!6243 = !DILocation(line: 1531, column: 37, scope: !6234)
!6244 = !DILocalVariable(name: "need_frame", scope: !6234, file: !3, line: 1532, type: !1755)
!6245 = !DILocation(line: 1532, column: 8, scope: !6234)
!6246 = !DILocalVariable(name: "need_stmts", scope: !6234, file: !3, line: 1532, type: !1755)
!6247 = !DILocation(line: 1532, column: 28, scope: !6234)
!6248 = !DILocalVariable(name: "clause", scope: !6234, file: !3, line: 1533, type: !1640)
!6249 = !DILocation(line: 1533, column: 8, scope: !6234)
!6250 = !DILocalVariable(name: "decl", scope: !6234, file: !3, line: 1533, type: !1640)
!6251 = !DILocation(line: 1533, column: 16, scope: !6234)
!6252 = !DILocalVariable(name: "dummy", scope: !6234, file: !3, line: 1534, type: !1560)
!6253 = !DILocation(line: 1534, column: 7, scope: !6234)
!6254 = !DILocalVariable(name: "new_suppress", scope: !6234, file: !3, line: 1535, type: !1573)
!6255 = !DILocation(line: 1535, column: 10, scope: !6234)
!6256 = !DILocation(line: 1537, column: 18, scope: !6234)
!6257 = !DILocation(line: 1537, column: 16, scope: !6234)
!6258 = !DILocation(line: 1538, column: 16, scope: !6234)
!6259 = !DILocation(line: 1538, column: 30, scope: !6234)
!6260 = !DILocation(line: 1538, column: 36, scope: !6234)
!6261 = !DILocation(line: 1538, column: 3, scope: !6234)
!6262 = !DILocation(line: 1540, column: 18, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 1540, column: 3)
!6264 = !DILocation(line: 1540, column: 17, scope: !6263)
!6265 = !DILocation(line: 1540, column: 15, scope: !6263)
!6266 = !DILocation(line: 1540, column: 8, scope: !6263)
!6267 = !DILocation(line: 1540, column: 28, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 1540, column: 3)
!6269 = !DILocation(line: 1540, column: 3, scope: !6263)
!6270 = !DILocation(line: 1542, column: 15, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1541, column: 5)
!6272 = !DILocation(line: 1542, column: 7, scope: !6271)
!6273 = !DILocation(line: 1545, column: 8, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1545, column: 8)
!6275 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 1543, column: 2)
!6276 = !DILocation(line: 1545, column: 8, scope: !6275)
!6277 = !DILocation(line: 1546, column: 17, scope: !6274)
!6278 = !DILocation(line: 1546, column: 6, scope: !6274)
!6279 = !DILocation(line: 1547, column: 4, scope: !6275)
!6280 = !DILocation(line: 1550, column: 8, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1550, column: 8)
!6282 = !DILocation(line: 1550, column: 8, scope: !6275)
!6283 = !DILocation(line: 1551, column: 17, scope: !6281)
!6284 = !DILocation(line: 1551, column: 6, scope: !6281)
!6285 = !DILocation(line: 1552, column: 4, scope: !6275)
!6286 = !DILabel(scope: !6275, name: "do_decl_clause", file: !3, line: 1558)
!6287 = !DILocation(line: 1558, column: 2, scope: !6275)
!6288 = !DILocation(line: 1559, column: 11, scope: !6275)
!6289 = !DILocation(line: 1559, column: 9, scope: !6275)
!6290 = !DILocation(line: 1560, column: 8, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1560, column: 8)
!6292 = !DILocation(line: 1560, column: 25, scope: !6291)
!6293 = !DILocation(line: 1561, column: 8, scope: !6291)
!6294 = !DILocation(line: 1561, column: 12, scope: !6291)
!6295 = !DILocation(line: 1561, column: 31, scope: !6291)
!6296 = !DILocation(line: 1561, column: 34, scope: !6291)
!6297 = !DILocation(line: 1560, column: 8, scope: !6275)
!6298 = !DILocation(line: 1562, column: 6, scope: !6291)
!6299 = !DILocation(line: 1563, column: 31, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1563, column: 8)
!6301 = !DILocation(line: 1563, column: 8, scope: !6300)
!6302 = !DILocation(line: 1563, column: 40, scope: !6300)
!6303 = !DILocation(line: 1563, column: 46, scope: !6300)
!6304 = !DILocation(line: 1563, column: 37, scope: !6300)
!6305 = !DILocation(line: 1564, column: 8, scope: !6300)
!6306 = !DILocation(line: 1564, column: 34, scope: !6300)
!6307 = !DILocation(line: 1564, column: 12, scope: !6300)
!6308 = !DILocation(line: 1563, column: 8, scope: !6275)
!6309 = !DILocalVariable(name: "field", scope: !6310, file: !3, line: 1566, type: !1640)
!6310 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 1565, column: 6)
!6311 = !DILocation(line: 1566, column: 13, scope: !6310)
!6312 = !DILocation(line: 1566, column: 44, scope: !6310)
!6313 = !DILocation(line: 1566, column: 50, scope: !6310)
!6314 = !DILocation(line: 1566, column: 21, scope: !6310)
!6315 = !DILocation(line: 1567, column: 12, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6310, file: !3, line: 1567, column: 12)
!6317 = !DILocation(line: 1567, column: 12, scope: !6310)
!6318 = !DILocation(line: 1569, column: 21, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6316, file: !3, line: 1568, column: 3)
!6320 = !DILocation(line: 1569, column: 35, scope: !6319)
!6321 = !DILocation(line: 1569, column: 5, scope: !6319)
!6322 = !DILocation(line: 1571, column: 31, scope: !6319)
!6323 = !DILocation(line: 1571, column: 37, scope: !6319)
!6324 = !DILocation(line: 1571, column: 43, scope: !6319)
!6325 = !DILocation(line: 1571, column: 9, scope: !6319)
!6326 = !DILocation(line: 1570, column: 5, scope: !6319)
!6327 = !DILocation(line: 1571, column: 7, scope: !6319)
!6328 = !DILocation(line: 1572, column: 16, scope: !6319)
!6329 = !DILocation(line: 1573, column: 3, scope: !6319)
!6330 = !DILocation(line: 1574, column: 6, scope: !6310)
!6331 = !DILocation(line: 1575, column: 4, scope: !6275)
!6332 = !DILocation(line: 1578, column: 8, scope: !6333)
!6333 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1578, column: 8)
!6334 = !DILocation(line: 1578, column: 48, scope: !6333)
!6335 = !DILocation(line: 1578, column: 8, scope: !6275)
!6336 = !DILocation(line: 1579, column: 6, scope: !6333)
!6337 = !DILocation(line: 1578, column: 51, scope: !6333)
!6338 = !DILocation(line: 1583, column: 4, scope: !6275)
!6339 = !DILocation(line: 1583, column: 8, scope: !6275)
!6340 = !DILocation(line: 1583, column: 17, scope: !6275)
!6341 = !DILocation(line: 1584, column: 4, scope: !6275)
!6342 = !DILocation(line: 1584, column: 8, scope: !6275)
!6343 = !DILocation(line: 1584, column: 15, scope: !6275)
!6344 = !DILocation(line: 1585, column: 33, scope: !6275)
!6345 = !DILocation(line: 1586, column: 11, scope: !6275)
!6346 = !DILocation(line: 1585, column: 4, scope: !6275)
!6347 = !DILocation(line: 1587, column: 4, scope: !6275)
!6348 = !DILocation(line: 1595, column: 4, scope: !6275)
!6349 = !DILocation(line: 1598, column: 4, scope: !6275)
!6350 = !DILocation(line: 1599, column: 2, scope: !6275)
!6351 = !DILocation(line: 1600, column: 5, scope: !6271)
!6352 = !DILocation(line: 1540, column: 46, scope: !6268)
!6353 = !DILocation(line: 1540, column: 44, scope: !6268)
!6354 = !DILocation(line: 1540, column: 3, scope: !6268)
!6355 = distinct !{!6355, !6269, !6356}
!6356 = !DILocation(line: 1600, column: 5, scope: !6263)
!6357 = !DILocation(line: 1602, column: 30, scope: !6234)
!6358 = !DILocation(line: 1602, column: 3, scope: !6234)
!6359 = !DILocation(line: 1602, column: 9, scope: !6234)
!6360 = !DILocation(line: 1602, column: 28, scope: !6234)
!6361 = !DILocation(line: 1604, column: 7, scope: !6362)
!6362 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 1604, column: 7)
!6363 = !DILocation(line: 1604, column: 7, scope: !6234)
!6364 = !DILocation(line: 1605, column: 20, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 1605, column: 5)
!6366 = !DILocation(line: 1605, column: 19, scope: !6365)
!6367 = !DILocation(line: 1605, column: 17, scope: !6365)
!6368 = !DILocation(line: 1605, column: 10, scope: !6365)
!6369 = !DILocation(line: 1605, column: 30, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 1605, column: 5)
!6371 = !DILocation(line: 1605, column: 5, scope: !6365)
!6372 = !DILocation(line: 1606, column: 15, scope: !6370)
!6373 = !DILocation(line: 1606, column: 7, scope: !6370)
!6374 = !DILocation(line: 1609, column: 8, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6376, file: !3, line: 1609, column: 8)
!6376 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1607, column: 2)
!6377 = !DILocation(line: 1609, column: 8, scope: !6376)
!6378 = !DILocalVariable(name: "old_context", scope: !6379, file: !3, line: 1611, type: !1640)
!6379 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 1610, column: 6)
!6380 = !DILocation(line: 1611, column: 13, scope: !6379)
!6381 = !DILocation(line: 1612, column: 5, scope: !6379)
!6382 = !DILocation(line: 1614, column: 5, scope: !6379)
!6383 = !DILocation(line: 1614, column: 11, scope: !6379)
!6384 = !DILocation(line: 1613, column: 8, scope: !6379)
!6385 = !DILocation(line: 1614, column: 3, scope: !6379)
!6386 = !DILocation(line: 1616, column: 33, scope: !6379)
!6387 = !DILocation(line: 1617, column: 5, scope: !6379)
!6388 = !DILocation(line: 1615, column: 8, scope: !6379)
!6389 = !DILocation(line: 1619, column: 33, scope: !6379)
!6390 = !DILocation(line: 1620, column: 5, scope: !6379)
!6391 = !DILocation(line: 1618, column: 8, scope: !6379)
!6392 = !DILocation(line: 1622, column: 5, scope: !6379)
!6393 = !DILocation(line: 1621, column: 8, scope: !6379)
!6394 = !DILocation(line: 1622, column: 3, scope: !6379)
!6395 = !DILocation(line: 1623, column: 6, scope: !6379)
!6396 = !DILocation(line: 1624, column: 4, scope: !6376)
!6397 = !DILocation(line: 1628, column: 36, scope: !6376)
!6398 = !DILocation(line: 1629, column: 8, scope: !6376)
!6399 = !DILocation(line: 1627, column: 4, scope: !6376)
!6400 = !DILocation(line: 1630, column: 4, scope: !6376)
!6401 = !DILocation(line: 1633, column: 4, scope: !6376)
!6402 = !DILocation(line: 1634, column: 2, scope: !6376)
!6403 = !DILocation(line: 1605, column: 48, scope: !6370)
!6404 = !DILocation(line: 1605, column: 46, scope: !6370)
!6405 = !DILocation(line: 1605, column: 5, scope: !6370)
!6406 = distinct !{!6406, !6371, !6407}
!6407 = !DILocation(line: 1634, column: 2, scope: !6365)
!6408 = !DILocation(line: 1636, column: 10, scope: !6234)
!6409 = !DILocation(line: 1636, column: 3, scope: !6234)
!6410 = distinct !DISubprogram(name: "get_local_debug_decl", scope: !3, file: !3, line: 1335, type: !6411, scopeLine: 1336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6411 = !DISubroutineType(types: !6412)
!6412 = !{!1640, !1561, !1640, !1640}
!6413 = !DILocalVariable(name: "info", arg: 1, scope: !6410, file: !3, line: 1335, type: !1561)
!6414 = !DILocation(line: 1335, column: 44, scope: !6410)
!6415 = !DILocalVariable(name: "decl", arg: 2, scope: !6410, file: !3, line: 1335, type: !1640)
!6416 = !DILocation(line: 1335, column: 55, scope: !6410)
!6417 = !DILocalVariable(name: "field", arg: 3, scope: !6410, file: !3, line: 1335, type: !1640)
!6418 = !DILocation(line: 1335, column: 66, scope: !6410)
!6419 = !DILocalVariable(name: "x", scope: !6410, file: !3, line: 1337, type: !1640)
!6420 = !DILocation(line: 1337, column: 8, scope: !6410)
!6421 = !DILocalVariable(name: "new_decl", scope: !6410, file: !3, line: 1337, type: !1640)
!6422 = !DILocation(line: 1337, column: 11, scope: !6410)
!6423 = !DILocalVariable(name: "slot", scope: !6410, file: !3, line: 1338, type: !2360)
!6424 = !DILocation(line: 1338, column: 10, scope: !6410)
!6425 = !DILocation(line: 1340, column: 30, scope: !6410)
!6426 = !DILocation(line: 1340, column: 36, scope: !6410)
!6427 = !DILocation(line: 1340, column: 45, scope: !6410)
!6428 = !DILocation(line: 1340, column: 10, scope: !6410)
!6429 = !DILocation(line: 1340, column: 8, scope: !6410)
!6430 = !DILocation(line: 1341, column: 8, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6410, file: !3, line: 1341, column: 7)
!6432 = !DILocation(line: 1341, column: 7, scope: !6431)
!6433 = !DILocation(line: 1341, column: 7, scope: !6410)
!6434 = !DILocation(line: 1342, column: 20, scope: !6431)
!6435 = !DILocation(line: 1342, column: 19, scope: !6431)
!6436 = !DILocation(line: 1342, column: 12, scope: !6431)
!6437 = !DILocation(line: 1342, column: 5, scope: !6431)
!6438 = !DILocation(line: 1345, column: 26, scope: !6410)
!6439 = !DILocation(line: 1345, column: 10, scope: !6410)
!6440 = !DILocation(line: 1346, column: 7, scope: !6410)
!6441 = !DILocation(line: 1346, column: 13, scope: !6410)
!6442 = !DILocation(line: 1346, column: 5, scope: !6410)
!6443 = !DILocation(line: 1347, column: 7, scope: !6410)
!6444 = !DILocation(line: 1347, column: 5, scope: !6410)
!6445 = !DILocation(line: 1349, column: 14, scope: !6410)
!6446 = !DILocation(line: 1349, column: 12, scope: !6410)
!6447 = !DILocation(line: 1351, column: 29, scope: !6410)
!6448 = !DILocation(line: 1351, column: 35, scope: !6410)
!6449 = !DILocation(line: 1351, column: 3, scope: !6410)
!6450 = !DILocation(line: 1351, column: 27, scope: !6410)
!6451 = !DILocation(line: 1352, column: 32, scope: !6410)
!6452 = !DILocation(line: 1352, column: 3, scope: !6410)
!6453 = !DILocation(line: 1352, column: 30, scope: !6410)
!6454 = !DILocation(line: 1353, column: 31, scope: !6410)
!6455 = !DILocation(line: 1353, column: 3, scope: !6410)
!6456 = !DILocation(line: 1353, column: 29, scope: !6410)
!6457 = !DILocation(line: 1354, column: 35, scope: !6410)
!6458 = !DILocation(line: 1354, column: 3, scope: !6410)
!6459 = !DILocation(line: 1354, column: 33, scope: !6410)
!6460 = !DILocation(line: 1355, column: 34, scope: !6410)
!6461 = !DILocation(line: 1355, column: 3, scope: !6410)
!6462 = !DILocation(line: 1355, column: 32, scope: !6410)
!6463 = !DILocation(line: 1356, column: 30, scope: !6410)
!6464 = !DILocation(line: 1356, column: 3, scope: !6410)
!6465 = !DILocation(line: 1356, column: 28, scope: !6410)
!6466 = !DILocation(line: 1357, column: 33, scope: !6410)
!6467 = !DILocation(line: 1357, column: 3, scope: !6410)
!6468 = !DILocation(line: 1357, column: 31, scope: !6410)
!6469 = !DILocation(line: 1358, column: 3, scope: !6410)
!6470 = !DILocation(line: 1358, column: 39, scope: !6410)
!6471 = !DILocation(line: 1359, column: 8, scope: !6472)
!6472 = distinct !DILexicalBlock(scope: !6410, file: !3, line: 1359, column: 7)
!6473 = !DILocation(line: 1359, column: 25, scope: !6472)
!6474 = !DILocation(line: 1360, column: 8, scope: !6472)
!6475 = !DILocation(line: 1360, column: 11, scope: !6472)
!6476 = !DILocation(line: 1360, column: 28, scope: !6472)
!6477 = !DILocation(line: 1361, column: 8, scope: !6472)
!6478 = !DILocation(line: 1361, column: 11, scope: !6472)
!6479 = !DILocation(line: 1361, column: 28, scope: !6472)
!6480 = !DILocation(line: 1362, column: 7, scope: !6472)
!6481 = !DILocation(line: 1362, column: 10, scope: !6472)
!6482 = !DILocation(line: 1359, column: 7, scope: !6410)
!6483 = !DILocation(line: 1363, column: 5, scope: !6472)
!6484 = !DILocation(line: 1363, column: 34, scope: !6472)
!6485 = !DILocation(line: 1365, column: 3, scope: !6410)
!6486 = !DILocation(line: 1366, column: 3, scope: !6410)
!6487 = !DILocation(line: 1366, column: 36, scope: !6410)
!6488 = !DILocation(line: 1367, column: 11, scope: !6410)
!6489 = !DILocation(line: 1367, column: 4, scope: !6410)
!6490 = !DILocation(line: 1367, column: 9, scope: !6410)
!6491 = !DILocation(line: 1369, column: 27, scope: !6410)
!6492 = !DILocation(line: 1369, column: 33, scope: !6410)
!6493 = !DILocation(line: 1369, column: 3, scope: !6410)
!6494 = !DILocation(line: 1369, column: 25, scope: !6410)
!6495 = !DILocation(line: 1370, column: 27, scope: !6410)
!6496 = !DILocation(line: 1370, column: 3, scope: !6410)
!6497 = !DILocation(line: 1370, column: 9, scope: !6410)
!6498 = !DILocation(line: 1370, column: 25, scope: !6410)
!6499 = !DILocation(line: 1373, column: 3, scope: !6410)
!6500 = !DILocation(line: 1373, column: 25, scope: !6410)
!6501 = !DILocation(line: 1375, column: 10, scope: !6410)
!6502 = !DILocation(line: 1375, column: 3, scope: !6410)
!6503 = !DILocation(line: 1376, column: 1, scope: !6410)
!6504 = distinct !DISubprogram(name: "get_nl_goto_field", scope: !3, file: !3, line: 543, type: !5033, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6505 = !DILocalVariable(name: "info", arg: 1, scope: !6504, file: !3, line: 543, type: !1561)
!6506 = !DILocation(line: 543, column: 41, scope: !6504)
!6507 = !DILocalVariable(name: "field", scope: !6504, file: !3, line: 545, type: !1640)
!6508 = !DILocation(line: 545, column: 8, scope: !6504)
!6509 = !DILocation(line: 545, column: 16, scope: !6504)
!6510 = !DILocation(line: 545, column: 22, scope: !6504)
!6511 = !DILocation(line: 546, column: 8, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6504, file: !3, line: 546, column: 7)
!6513 = !DILocation(line: 546, column: 7, scope: !6504)
!6514 = !DILocalVariable(name: "size", scope: !6515, file: !3, line: 548, type: !7)
!6515 = distinct !DILexicalBlock(scope: !6512, file: !3, line: 547, column: 5)
!6516 = !DILocation(line: 548, column: 16, scope: !6515)
!6517 = !DILocalVariable(name: "type", scope: !6515, file: !3, line: 549, type: !1640)
!6518 = !DILocation(line: 549, column: 12, scope: !6515)
!6519 = !DILocation(line: 555, column: 20, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6515, file: !3, line: 555, column: 11)
!6521 = !DILocation(line: 555, column: 17, scope: !6520)
!6522 = !DILocation(line: 555, column: 11, scope: !6515)
!6523 = !DILocation(line: 556, column: 9, scope: !6520)
!6524 = !DILocation(line: 556, column: 7, scope: !6520)
!6525 = !DILocation(line: 556, column: 2, scope: !6520)
!6526 = !DILocation(line: 558, column: 26, scope: !6520)
!6527 = !DILocation(line: 558, column: 9, scope: !6520)
!6528 = !DILocation(line: 558, column: 7, scope: !6520)
!6529 = !DILocation(line: 560, column: 14, scope: !6515)
!6530 = !DILocation(line: 560, column: 12, scope: !6515)
!6531 = !DILocation(line: 561, column: 14, scope: !6515)
!6532 = !DILocation(line: 561, column: 21, scope: !6515)
!6533 = !DILocation(line: 561, column: 19, scope: !6515)
!6534 = !DILocation(line: 561, column: 12, scope: !6515)
!6535 = !DILocation(line: 562, column: 14, scope: !6515)
!6536 = !DILocation(line: 562, column: 19, scope: !6515)
!6537 = !DILocation(line: 562, column: 12, scope: !6515)
!6538 = !DILocation(line: 565, column: 3, scope: !6515)
!6539 = !DILocation(line: 565, column: 53, scope: !6515)
!6540 = !DILocation(line: 565, column: 27, scope: !6515)
!6541 = !DILocation(line: 565, column: 9, scope: !6515)
!6542 = !DILocation(line: 564, column: 14, scope: !6515)
!6543 = !DILocation(line: 564, column: 12, scope: !6515)
!6544 = !DILocation(line: 567, column: 15, scope: !6515)
!6545 = !DILocation(line: 567, column: 13, scope: !6515)
!6546 = !DILocation(line: 568, column: 27, scope: !6515)
!6547 = !DILocation(line: 568, column: 7, scope: !6515)
!6548 = !DILocation(line: 568, column: 25, scope: !6515)
!6549 = !DILocation(line: 569, column: 27, scope: !6515)
!6550 = !DILocation(line: 569, column: 7, scope: !6515)
!6551 = !DILocation(line: 569, column: 25, scope: !6515)
!6552 = !DILocation(line: 570, column: 28, scope: !6515)
!6553 = !DILocation(line: 570, column: 7, scope: !6515)
!6554 = !DILocation(line: 570, column: 26, scope: !6515)
!6555 = !DILocation(line: 571, column: 7, scope: !6515)
!6556 = !DILocation(line: 571, column: 32, scope: !6515)
!6557 = !DILocation(line: 573, column: 49, scope: !6515)
!6558 = !DILocation(line: 573, column: 33, scope: !6515)
!6559 = !DILocation(line: 573, column: 56, scope: !6515)
!6560 = !DILocation(line: 573, column: 7, scope: !6515)
!6561 = !DILocation(line: 575, column: 29, scope: !6515)
!6562 = !DILocation(line: 575, column: 7, scope: !6515)
!6563 = !DILocation(line: 575, column: 13, scope: !6515)
!6564 = !DILocation(line: 575, column: 27, scope: !6515)
!6565 = !DILocation(line: 576, column: 5, scope: !6515)
!6566 = !DILocation(line: 578, column: 10, scope: !6504)
!6567 = !DILocation(line: 578, column: 3, scope: !6504)
!6568 = distinct !DISubprogram(name: "gimple_label_label", scope: !611, file: !611, line: 2444, type: !4846, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6569 = !DILocalVariable(name: "gs", arg: 1, scope: !6568, file: !611, line: 2444, type: !4838)
!6570 = !DILocation(line: 2444, column: 34, scope: !6568)
!6571 = !DILocation(line: 2447, column: 21, scope: !6568)
!6572 = !DILocation(line: 2447, column: 10, scope: !6568)
!6573 = !DILocation(line: 2447, column: 3, scope: !6568)
!6574 = distinct !DISubprogram(name: "gsi_prev", scope: !611, file: !611, line: 4493, type: !6575, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6575 = !DISubroutineType(types: !6576)
!6576 = !{null, !3455}
!6577 = !DILocalVariable(name: "i", arg: 1, scope: !6574, file: !611, line: 4493, type: !3455)
!6578 = !DILocation(line: 4493, column: 33, scope: !6574)
!6579 = !DILocation(line: 4495, column: 12, scope: !6574)
!6580 = !DILocation(line: 4495, column: 15, scope: !6574)
!6581 = !DILocation(line: 4495, column: 20, scope: !6574)
!6582 = !DILocation(line: 4495, column: 3, scope: !6574)
!6583 = !DILocation(line: 4495, column: 6, scope: !6574)
!6584 = !DILocation(line: 4495, column: 10, scope: !6574)
!6585 = !DILocation(line: 4496, column: 1, scope: !6574)
!6586 = distinct !DISubprogram(name: "convert_tramp_reference_stmt", scope: !3, file: !3, line: 1934, type: !3453, scopeLine: 1936, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6587 = !DILocalVariable(name: "gsi", arg: 1, scope: !6586, file: !3, line: 1934, type: !3455)
!6588 = !DILocation(line: 1934, column: 53, scope: !6586)
!6589 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !6586, file: !3, line: 1934, type: !3456)
!6590 = !DILocation(line: 1934, column: 64, scope: !6586)
!6591 = !DILocalVariable(name: "wi", arg: 3, scope: !6586, file: !3, line: 1935, type: !2883)
!6592 = !DILocation(line: 1935, column: 33, scope: !6586)
!6593 = !DILocalVariable(name: "stmt", scope: !6586, file: !3, line: 1937, type: !1905)
!6594 = !DILocation(line: 1937, column: 10, scope: !6586)
!6595 = !DILocation(line: 1937, column: 28, scope: !6586)
!6596 = !DILocation(line: 1937, column: 17, scope: !6586)
!6597 = !DILocation(line: 1939, column: 24, scope: !6586)
!6598 = !DILocation(line: 1939, column: 11, scope: !6586)
!6599 = !DILocation(line: 1939, column: 3, scope: !6586)
!6600 = !DILocalVariable(name: "i", scope: !6601, file: !3, line: 1945, type: !1591)
!6601 = distinct !DILexicalBlock(scope: !6602, file: !3, line: 1942, column: 7)
!6602 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 1940, column: 5)
!6603 = !DILocation(line: 1945, column: 16, scope: !6601)
!6604 = !DILocalVariable(name: "nargs", scope: !6601, file: !3, line: 1945, type: !1591)
!6605 = !DILocation(line: 1945, column: 19, scope: !6601)
!6606 = !DILocation(line: 1945, column: 49, scope: !6601)
!6607 = !DILocation(line: 1945, column: 27, scope: !6601)
!6608 = !DILocation(line: 1946, column: 9, scope: !6609)
!6609 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 1946, column: 2)
!6610 = !DILocation(line: 1946, column: 7, scope: !6609)
!6611 = !DILocation(line: 1946, column: 14, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 1946, column: 2)
!6613 = !DILocation(line: 1946, column: 18, scope: !6612)
!6614 = !DILocation(line: 1946, column: 16, scope: !6612)
!6615 = !DILocation(line: 1946, column: 2, scope: !6609)
!6616 = !DILocation(line: 1947, column: 4, scope: !6612)
!6617 = !DILocation(line: 1946, column: 26, scope: !6612)
!6618 = !DILocation(line: 1946, column: 2, scope: !6612)
!6619 = distinct !{!6619, !6615, !6620}
!6620 = !DILocation(line: 1947, column: 4, scope: !6609)
!6621 = !DILocation(line: 1950, column: 3, scope: !6601)
!6622 = !DILocation(line: 1950, column: 17, scope: !6601)
!6623 = !DILocation(line: 1951, column: 2, scope: !6601)
!6624 = !DILocation(line: 1955, column: 7, scope: !6602)
!6625 = !DILocation(line: 1958, column: 4, scope: !6586)
!6626 = !DILocation(line: 1958, column: 18, scope: !6586)
!6627 = !DILocation(line: 1959, column: 3, scope: !6586)
!6628 = !DILocation(line: 1960, column: 1, scope: !6586)
!6629 = distinct !DISubprogram(name: "convert_tramp_reference_op", scope: !3, file: !3, line: 1859, type: !3459, scopeLine: 1860, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6630 = !DILocalVariable(name: "tp", arg: 1, scope: !6629, file: !3, line: 1859, type: !1940)
!6631 = !DILocation(line: 1859, column: 35, scope: !6629)
!6632 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !6629, file: !3, line: 1859, type: !3461)
!6633 = !DILocation(line: 1859, column: 44, scope: !6629)
!6634 = !DILocalVariable(name: "data", arg: 3, scope: !6629, file: !3, line: 1859, type: !1630)
!6635 = !DILocation(line: 1859, column: 65, scope: !6629)
!6636 = !DILocalVariable(name: "wi", scope: !6629, file: !3, line: 1861, type: !2883)
!6637 = !DILocation(line: 1861, column: 26, scope: !6629)
!6638 = !DILocation(line: 1861, column: 57, scope: !6629)
!6639 = !DILocation(line: 1861, column: 31, scope: !6629)
!6640 = !DILocalVariable(name: "info", scope: !6629, file: !3, line: 1862, type: !3678)
!6641 = !DILocation(line: 1862, column: 30, scope: !6629)
!6642 = !DILocation(line: 1862, column: 61, scope: !6629)
!6643 = !DILocation(line: 1862, column: 65, scope: !6629)
!6644 = !DILocation(line: 1862, column: 37, scope: !6629)
!6645 = !DILocalVariable(name: "i", scope: !6629, file: !3, line: 1862, type: !1561)
!6646 = !DILocation(line: 1862, column: 72, scope: !6629)
!6647 = !DILocalVariable(name: "t", scope: !6629, file: !3, line: 1863, type: !1640)
!6648 = !DILocation(line: 1863, column: 8, scope: !6629)
!6649 = !DILocation(line: 1863, column: 13, scope: !6629)
!6650 = !DILocation(line: 1863, column: 12, scope: !6629)
!6651 = !DILocalVariable(name: "decl", scope: !6629, file: !3, line: 1863, type: !1640)
!6652 = !DILocation(line: 1863, column: 17, scope: !6629)
!6653 = !DILocalVariable(name: "target_context", scope: !6629, file: !3, line: 1863, type: !1640)
!6654 = !DILocation(line: 1863, column: 23, scope: !6629)
!6655 = !DILocalVariable(name: "x", scope: !6629, file: !3, line: 1863, type: !1640)
!6656 = !DILocation(line: 1863, column: 39, scope: !6629)
!6657 = !DILocalVariable(name: "builtin", scope: !6629, file: !3, line: 1863, type: !1640)
!6658 = !DILocation(line: 1863, column: 42, scope: !6629)
!6659 = !DILocalVariable(name: "call", scope: !6629, file: !3, line: 1864, type: !1905)
!6660 = !DILocation(line: 1864, column: 10, scope: !6629)
!6661 = !DILocation(line: 1866, column: 4, scope: !6629)
!6662 = !DILocation(line: 1866, column: 18, scope: !6629)
!6663 = !DILocation(line: 1867, column: 11, scope: !6629)
!6664 = !DILocation(line: 1867, column: 3, scope: !6629)
!6665 = !DILocation(line: 1876, column: 14, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6629, file: !3, line: 1868, column: 5)
!6667 = !DILocation(line: 1876, column: 12, scope: !6666)
!6668 = !DILocation(line: 1877, column: 11, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1877, column: 11)
!6670 = !DILocation(line: 1877, column: 28, scope: !6669)
!6671 = !DILocation(line: 1877, column: 11, scope: !6666)
!6672 = !DILocation(line: 1878, column: 2, scope: !6669)
!6673 = !DILocation(line: 1881, column: 47, scope: !6666)
!6674 = !DILocation(line: 1881, column: 24, scope: !6666)
!6675 = !DILocation(line: 1881, column: 22, scope: !6666)
!6676 = !DILocation(line: 1882, column: 12, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1882, column: 11)
!6678 = !DILocation(line: 1882, column: 11, scope: !6666)
!6679 = !DILocation(line: 1883, column: 2, scope: !6677)
!6680 = !DILocation(line: 1887, column: 12, scope: !6681)
!6681 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1887, column: 11)
!6682 = !DILocation(line: 1887, column: 11, scope: !6666)
!6683 = !DILocation(line: 1888, column: 2, scope: !6681)
!6684 = !DILocation(line: 1891, column: 11, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1891, column: 11)
!6686 = !DILocation(line: 1891, column: 11, scope: !6666)
!6687 = !DILocation(line: 1892, column: 2, scope: !6685)
!6688 = !DILocation(line: 1896, column: 16, scope: !6689)
!6689 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1896, column: 7)
!6690 = !DILocation(line: 1896, column: 14, scope: !6689)
!6691 = !DILocation(line: 1896, column: 12, scope: !6689)
!6692 = !DILocation(line: 1896, column: 22, scope: !6693)
!6693 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 1896, column: 7)
!6694 = !DILocation(line: 1896, column: 25, scope: !6693)
!6695 = !DILocation(line: 1896, column: 36, scope: !6693)
!6696 = !DILocation(line: 1896, column: 33, scope: !6693)
!6697 = !DILocation(line: 1896, column: 7, scope: !6689)
!6698 = !DILocation(line: 1897, column: 2, scope: !6693)
!6699 = !DILocation(line: 1896, column: 56, scope: !6693)
!6700 = !DILocation(line: 1896, column: 59, scope: !6693)
!6701 = !DILocation(line: 1896, column: 54, scope: !6693)
!6702 = !DILocation(line: 1896, column: 7, scope: !6693)
!6703 = distinct !{!6703, !6697, !6704}
!6704 = !DILocation(line: 1897, column: 2, scope: !6689)
!6705 = !DILocation(line: 1898, column: 34, scope: !6666)
!6706 = !DILocation(line: 1898, column: 37, scope: !6666)
!6707 = !DILocation(line: 1898, column: 11, scope: !6666)
!6708 = !DILocation(line: 1898, column: 9, scope: !6666)
!6709 = !DILocation(line: 1901, column: 28, scope: !6666)
!6710 = !DILocation(line: 1901, column: 34, scope: !6666)
!6711 = !DILocation(line: 1901, column: 50, scope: !6666)
!6712 = !DILocation(line: 1901, column: 54, scope: !6666)
!6713 = !DILocation(line: 1901, column: 58, scope: !6666)
!6714 = !DILocation(line: 1901, column: 11, scope: !6666)
!6715 = !DILocation(line: 1901, column: 9, scope: !6666)
!6716 = !DILocation(line: 1902, column: 23, scope: !6666)
!6717 = !DILocation(line: 1902, column: 26, scope: !6666)
!6718 = !DILocation(line: 1902, column: 11, scope: !6666)
!6719 = !DILocation(line: 1902, column: 9, scope: !6666)
!6720 = !DILocation(line: 1903, column: 29, scope: !6666)
!6721 = !DILocation(line: 1903, column: 35, scope: !6666)
!6722 = !DILocation(line: 1903, column: 39, scope: !6666)
!6723 = !DILocation(line: 1903, column: 43, scope: !6666)
!6724 = !DILocation(line: 1903, column: 11, scope: !6666)
!6725 = !DILocation(line: 1903, column: 9, scope: !6666)
!6726 = !DILocation(line: 1907, column: 17, scope: !6666)
!6727 = !DILocation(line: 1907, column: 15, scope: !6666)
!6728 = !DILocation(line: 1908, column: 33, scope: !6666)
!6729 = !DILocation(line: 1908, column: 45, scope: !6666)
!6730 = !DILocation(line: 1908, column: 14, scope: !6666)
!6731 = !DILocation(line: 1908, column: 12, scope: !6666)
!6732 = !DILocation(line: 1909, column: 35, scope: !6666)
!6733 = !DILocation(line: 1909, column: 42, scope: !6666)
!6734 = !DILocation(line: 1909, column: 46, scope: !6666)
!6735 = !DILocation(line: 1909, column: 51, scope: !6666)
!6736 = !DILocation(line: 1909, column: 11, scope: !6666)
!6737 = !DILocation(line: 1909, column: 9, scope: !6666)
!6738 = !DILocation(line: 1912, column: 11, scope: !6666)
!6739 = !DILocation(line: 1912, column: 9, scope: !6666)
!6740 = !DILocation(line: 1913, column: 25, scope: !6666)
!6741 = !DILocation(line: 1913, column: 31, scope: !6666)
!6742 = !DILocation(line: 1913, column: 35, scope: !6666)
!6743 = !DILocation(line: 1913, column: 39, scope: !6666)
!6744 = !DILocation(line: 1913, column: 11, scope: !6666)
!6745 = !DILocation(line: 1913, column: 9, scope: !6666)
!6746 = !DILocation(line: 1915, column: 13, scope: !6666)
!6747 = !DILocation(line: 1915, column: 8, scope: !6666)
!6748 = !DILocation(line: 1915, column: 11, scope: !6666)
!6749 = !DILocation(line: 1916, column: 7, scope: !6666)
!6750 = !DILocation(line: 1919, column: 12, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6666, file: !3, line: 1919, column: 11)
!6752 = !DILocation(line: 1919, column: 11, scope: !6666)
!6753 = !DILocation(line: 1920, column: 3, scope: !6751)
!6754 = !DILocation(line: 1920, column: 17, scope: !6751)
!6755 = !DILocation(line: 1920, column: 2, scope: !6751)
!6756 = !DILocation(line: 1921, column: 7, scope: !6666)
!6757 = !DILocation(line: 1924, column: 3, scope: !6629)
!6758 = distinct !DISubprogram(name: "convert_gimple_call", scope: !3, file: !3, line: 1969, type: !3453, scopeLine: 1971, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6759 = !DILocalVariable(name: "gsi", arg: 1, scope: !6758, file: !3, line: 1969, type: !3455)
!6760 = !DILocation(line: 1969, column: 44, scope: !6758)
!6761 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !6758, file: !3, line: 1969, type: !3456)
!6762 = !DILocation(line: 1969, column: 55, scope: !6758)
!6763 = !DILocalVariable(name: "wi", arg: 3, scope: !6758, file: !3, line: 1970, type: !2883)
!6764 = !DILocation(line: 1970, column: 45, scope: !6758)
!6765 = !DILocalVariable(name: "info", scope: !6758, file: !3, line: 1972, type: !3678)
!6766 = !DILocation(line: 1972, column: 30, scope: !6758)
!6767 = !DILocation(line: 1972, column: 61, scope: !6758)
!6768 = !DILocation(line: 1972, column: 65, scope: !6758)
!6769 = !DILocation(line: 1972, column: 37, scope: !6758)
!6770 = !DILocalVariable(name: "decl", scope: !6758, file: !3, line: 1973, type: !1640)
!6771 = !DILocation(line: 1973, column: 8, scope: !6758)
!6772 = !DILocalVariable(name: "target_context", scope: !6758, file: !3, line: 1973, type: !1640)
!6773 = !DILocation(line: 1973, column: 14, scope: !6758)
!6774 = !DILocalVariable(name: "save_static_chain_added", scope: !6758, file: !3, line: 1974, type: !1615)
!6775 = !DILocation(line: 1974, column: 8, scope: !6758)
!6776 = !DILocalVariable(name: "i", scope: !6758, file: !3, line: 1975, type: !1560)
!6777 = !DILocation(line: 1975, column: 7, scope: !6758)
!6778 = !DILocalVariable(name: "stmt", scope: !6758, file: !3, line: 1976, type: !1905)
!6779 = !DILocation(line: 1976, column: 10, scope: !6758)
!6780 = !DILocation(line: 1976, column: 28, scope: !6758)
!6781 = !DILocation(line: 1976, column: 17, scope: !6758)
!6782 = !DILocation(line: 1978, column: 24, scope: !6758)
!6783 = !DILocation(line: 1978, column: 11, scope: !6758)
!6784 = !DILocation(line: 1978, column: 3, scope: !6758)
!6785 = !DILocation(line: 1981, column: 30, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 1981, column: 11)
!6787 = distinct !DILexicalBlock(scope: !6758, file: !3, line: 1979, column: 5)
!6788 = !DILocation(line: 1981, column: 11, scope: !6786)
!6789 = !DILocation(line: 1981, column: 11, scope: !6787)
!6790 = !DILocation(line: 1982, column: 2, scope: !6786)
!6791 = !DILocation(line: 1983, column: 34, scope: !6787)
!6792 = !DILocation(line: 1983, column: 14, scope: !6787)
!6793 = !DILocation(line: 1983, column: 12, scope: !6787)
!6794 = !DILocation(line: 1984, column: 12, scope: !6795)
!6795 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 1984, column: 11)
!6796 = !DILocation(line: 1984, column: 11, scope: !6787)
!6797 = !DILocation(line: 1985, column: 2, scope: !6795)
!6798 = !DILocation(line: 1986, column: 47, scope: !6787)
!6799 = !DILocation(line: 1986, column: 24, scope: !6787)
!6800 = !DILocation(line: 1986, column: 22, scope: !6787)
!6801 = !DILocation(line: 1987, column: 11, scope: !6802)
!6802 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 1987, column: 11)
!6803 = !DILocation(line: 1987, column: 26, scope: !6802)
!6804 = !DILocation(line: 1987, column: 29, scope: !6802)
!6805 = !DILocation(line: 1987, column: 11, scope: !6787)
!6806 = !DILocation(line: 1989, column: 27, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6802, file: !3, line: 1988, column: 2)
!6808 = !DILocation(line: 1989, column: 51, scope: !6807)
!6809 = !DILocation(line: 1989, column: 57, scope: !6807)
!6810 = !DILocation(line: 1990, column: 10, scope: !6807)
!6811 = !DILocation(line: 1990, column: 14, scope: !6807)
!6812 = !DILocation(line: 1989, column: 33, scope: !6807)
!6813 = !DILocation(line: 1989, column: 4, scope: !6807)
!6814 = !DILocation(line: 1991, column: 39, scope: !6807)
!6815 = !DILocation(line: 1991, column: 45, scope: !6807)
!6816 = !DILocation(line: 1991, column: 56, scope: !6807)
!6817 = !DILocation(line: 1991, column: 53, scope: !6807)
!6818 = !DILocation(line: 1991, column: 35, scope: !6807)
!6819 = !DILocation(line: 1991, column: 4, scope: !6807)
!6820 = !DILocation(line: 1991, column: 10, scope: !6807)
!6821 = !DILocation(line: 1991, column: 29, scope: !6807)
!6822 = !DILocation(line: 1992, column: 2, scope: !6807)
!6823 = !DILocation(line: 1993, column: 7, scope: !6787)
!6824 = !DILocation(line: 1997, column: 33, scope: !6787)
!6825 = !DILocation(line: 1997, column: 39, scope: !6787)
!6826 = !DILocation(line: 1997, column: 31, scope: !6787)
!6827 = !DILocation(line: 1998, column: 7, scope: !6787)
!6828 = !DILocation(line: 1998, column: 13, scope: !6787)
!6829 = !DILocation(line: 1998, column: 32, scope: !6787)
!6830 = !DILocation(line: 1999, column: 45, scope: !6787)
!6831 = !DILocation(line: 1999, column: 68, scope: !6787)
!6832 = !DILocation(line: 1999, column: 51, scope: !6787)
!6833 = !DILocation(line: 1999, column: 7, scope: !6787)
!6834 = !DILocation(line: 2000, column: 14, scope: !6835)
!6835 = distinct !DILexicalBlock(scope: !6787, file: !3, line: 2000, column: 7)
!6836 = !DILocation(line: 2000, column: 12, scope: !6835)
!6837 = !DILocation(line: 2000, column: 19, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6835, file: !3, line: 2000, column: 7)
!6839 = !DILocation(line: 2000, column: 21, scope: !6838)
!6840 = !DILocation(line: 2000, column: 7, scope: !6835)
!6841 = !DILocalVariable(name: "c", scope: !6842, file: !3, line: 2002, type: !1640)
!6842 = distinct !DILexicalBlock(scope: !6838, file: !3, line: 2001, column: 2)
!6843 = !DILocation(line: 2002, column: 9, scope: !6842)
!6844 = !DILocalVariable(name: "decl", scope: !6842, file: !3, line: 2002, type: !1640)
!6845 = !DILocation(line: 2002, column: 12, scope: !6842)
!6846 = !DILocation(line: 2003, column: 9, scope: !6847)
!6847 = distinct !DILexicalBlock(scope: !6842, file: !3, line: 2003, column: 8)
!6848 = !DILocation(line: 2003, column: 15, scope: !6847)
!6849 = !DILocation(line: 2003, column: 42, scope: !6847)
!6850 = !DILocation(line: 2003, column: 39, scope: !6847)
!6851 = !DILocation(line: 2003, column: 34, scope: !6847)
!6852 = !DILocation(line: 2003, column: 46, scope: !6847)
!6853 = !DILocation(line: 2003, column: 8, scope: !6842)
!6854 = !DILocation(line: 2004, column: 6, scope: !6847)
!6855 = !DILocation(line: 2005, column: 11, scope: !6842)
!6856 = !DILocation(line: 2005, column: 31, scope: !6842)
!6857 = !DILocation(line: 2005, column: 15, scope: !6842)
!6858 = !DILocation(line: 2005, column: 39, scope: !6842)
!6859 = !DILocation(line: 2005, column: 45, scope: !6842)
!6860 = !DILocation(line: 2005, column: 9, scope: !6842)
!6861 = !DILocation(line: 2007, column: 41, scope: !6862)
!6862 = distinct !DILexicalBlock(scope: !6842, file: !3, line: 2007, column: 4)
!6863 = !DILocation(line: 2007, column: 13, scope: !6862)
!6864 = !DILocation(line: 2007, column: 11, scope: !6862)
!6865 = !DILocation(line: 2007, column: 9, scope: !6862)
!6866 = !DILocation(line: 2008, column: 9, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6862, file: !3, line: 2007, column: 4)
!6868 = !DILocation(line: 2007, column: 4, scope: !6862)
!6869 = !DILocation(line: 2010, column: 11, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 2010, column: 10)
!6871 = !DILocation(line: 2010, column: 31, scope: !6870)
!6872 = !DILocation(line: 2011, column: 4, scope: !6870)
!6873 = !DILocation(line: 2011, column: 7, scope: !6870)
!6874 = !DILocation(line: 2011, column: 27, scope: !6870)
!6875 = !DILocation(line: 2012, column: 3, scope: !6870)
!6876 = !DILocation(line: 2012, column: 6, scope: !6870)
!6877 = !DILocation(line: 2012, column: 29, scope: !6870)
!6878 = !DILocation(line: 2012, column: 26, scope: !6870)
!6879 = !DILocation(line: 2010, column: 10, scope: !6867)
!6880 = !DILocation(line: 2013, column: 8, scope: !6870)
!6881 = !DILocation(line: 2009, column: 13, scope: !6867)
!6882 = !DILocation(line: 2009, column: 11, scope: !6867)
!6883 = !DILocation(line: 2007, column: 4, scope: !6867)
!6884 = distinct !{!6884, !6868, !6885}
!6885 = !DILocation(line: 2013, column: 8, scope: !6862)
!6886 = !DILocation(line: 2014, column: 8, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6842, file: !3, line: 2014, column: 8)
!6888 = !DILocation(line: 2014, column: 10, scope: !6887)
!6889 = !DILocation(line: 2014, column: 8, scope: !6842)
!6890 = !DILocation(line: 2016, column: 47, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 2015, column: 6)
!6892 = !DILocation(line: 2016, column: 30, scope: !6891)
!6893 = !DILocation(line: 2017, column: 9, scope: !6891)
!6894 = !DILocation(line: 2016, column: 12, scope: !6891)
!6895 = !DILocation(line: 2016, column: 10, scope: !6891)
!6896 = !DILocation(line: 2019, column: 30, scope: !6891)
!6897 = !DILocation(line: 2019, column: 8, scope: !6891)
!6898 = !DILocation(line: 2019, column: 28, scope: !6891)
!6899 = !DILocation(line: 2020, column: 59, scope: !6891)
!6900 = !DILocation(line: 2020, column: 31, scope: !6891)
!6901 = !DILocation(line: 2020, column: 8, scope: !6891)
!6902 = !DILocation(line: 2020, column: 29, scope: !6891)
!6903 = !DILocation(line: 2021, column: 40, scope: !6891)
!6904 = !DILocation(line: 2021, column: 46, scope: !6891)
!6905 = !DILocation(line: 2021, column: 8, scope: !6891)
!6906 = !DILocation(line: 2022, column: 6, scope: !6891)
!6907 = !DILocation(line: 2023, column: 2, scope: !6842)
!6908 = !DILocation(line: 2000, column: 27, scope: !6838)
!6909 = !DILocation(line: 2000, column: 7, scope: !6838)
!6910 = distinct !{!6910, !6840, !6911}
!6911 = !DILocation(line: 2023, column: 2, scope: !6835)
!6912 = !DILocation(line: 2024, column: 35, scope: !6787)
!6913 = !DILocation(line: 2024, column: 7, scope: !6787)
!6914 = !DILocation(line: 2024, column: 13, scope: !6787)
!6915 = !DILocation(line: 2024, column: 32, scope: !6787)
!6916 = !DILocation(line: 2025, column: 7, scope: !6787)
!6917 = !DILocation(line: 2028, column: 45, scope: !6787)
!6918 = !DILocation(line: 2029, column: 31, scope: !6787)
!6919 = !DILocation(line: 2029, column: 6, scope: !6787)
!6920 = !DILocation(line: 2028, column: 7, scope: !6787)
!6921 = !DILocation(line: 2037, column: 45, scope: !6787)
!6922 = !DILocation(line: 2037, column: 68, scope: !6787)
!6923 = !DILocation(line: 2037, column: 51, scope: !6787)
!6924 = !DILocation(line: 2037, column: 7, scope: !6787)
!6925 = !DILocation(line: 2038, column: 7, scope: !6787)
!6926 = !DILocation(line: 2042, column: 8, scope: !6787)
!6927 = !DILocation(line: 2042, column: 22, scope: !6787)
!6928 = !DILocation(line: 2043, column: 7, scope: !6787)
!6929 = !DILocation(line: 2046, column: 4, scope: !6758)
!6930 = !DILocation(line: 2046, column: 18, scope: !6758)
!6931 = !DILocation(line: 2047, column: 3, scope: !6758)
!6932 = !DILocation(line: 2048, column: 1, scope: !6758)
!6933 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !611, file: !611, line: 2013, type: !6934, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6934 = !DISubroutineType(types: !6935)
!6935 = !{!7, !4838}
!6936 = !DILocalVariable(name: "gs", arg: 1, scope: !6933, file: !611, line: 2013, type: !4838)
!6937 = !DILocation(line: 2013, column: 36, scope: !6933)
!6938 = !DILocalVariable(name: "num_ops", scope: !6933, file: !611, line: 2015, type: !7)
!6939 = !DILocation(line: 2015, column: 12, scope: !6933)
!6940 = !DILocation(line: 2017, column: 29, scope: !6933)
!6941 = !DILocation(line: 2017, column: 13, scope: !6933)
!6942 = !DILocation(line: 2017, column: 11, scope: !6933)
!6943 = !DILocation(line: 2018, column: 10, scope: !6933)
!6944 = !DILocation(line: 2018, column: 18, scope: !6933)
!6945 = !DILocation(line: 2018, column: 3, scope: !6933)
!6946 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !611, file: !611, line: 2036, type: !6947, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6947 = !DISubroutineType(types: !6948)
!6948 = !{!1940, !4838, !7}
!6949 = !DILocalVariable(name: "gs", arg: 1, scope: !6946, file: !611, line: 2036, type: !4838)
!6950 = !DILocation(line: 2036, column: 35, scope: !6946)
!6951 = !DILocalVariable(name: "index", arg: 2, scope: !6946, file: !611, line: 2036, type: !7)
!6952 = !DILocation(line: 2036, column: 48, scope: !6946)
!6953 = !DILocation(line: 2039, column: 25, scope: !6946)
!6954 = !DILocation(line: 2039, column: 29, scope: !6946)
!6955 = !DILocation(line: 2039, column: 35, scope: !6946)
!6956 = !DILocation(line: 2039, column: 10, scope: !6946)
!6957 = !DILocation(line: 2039, column: 3, scope: !6946)
!6958 = distinct !DISubprogram(name: "gimple_num_ops", scope: !611, file: !611, line: 1596, type: !6934, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6959 = !DILocalVariable(name: "gs", arg: 1, scope: !6958, file: !611, line: 1596, type: !4838)
!6960 = !DILocation(line: 1596, column: 30, scope: !6958)
!6961 = !DILocation(line: 1598, column: 10, scope: !6958)
!6962 = !DILocation(line: 1598, column: 14, scope: !6958)
!6963 = !DILocation(line: 1598, column: 21, scope: !6958)
!6964 = !DILocation(line: 1598, column: 3, scope: !6958)
!6965 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !611, file: !611, line: 1647, type: !6947, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6966 = !DILocalVariable(name: "gs", arg: 1, scope: !6965, file: !611, line: 1647, type: !4838)
!6967 = !DILocation(line: 1647, column: 29, scope: !6965)
!6968 = !DILocalVariable(name: "i", arg: 2, scope: !6965, file: !611, line: 1647, type: !7)
!6969 = !DILocation(line: 1647, column: 42, scope: !6965)
!6970 = !DILocation(line: 1649, column: 23, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6965, file: !611, line: 1649, column: 7)
!6972 = !DILocation(line: 1649, column: 7, scope: !6971)
!6973 = !DILocation(line: 1649, column: 7, scope: !6965)
!6974 = !DILocation(line: 1654, column: 26, scope: !6975)
!6975 = distinct !DILexicalBlock(scope: !6971, file: !611, line: 1650, column: 5)
!6976 = !DILocation(line: 1654, column: 14, scope: !6975)
!6977 = !DILocation(line: 1654, column: 52, scope: !6975)
!6978 = !DILocation(line: 1654, column: 50, scope: !6975)
!6979 = !DILocation(line: 1654, column: 7, scope: !6975)
!6980 = !DILocation(line: 1657, column: 5, scope: !6971)
!6981 = !DILocation(line: 1658, column: 1, scope: !6965)
!6982 = distinct !DISubprogram(name: "lookup_tramp_for_decl", scope: !3, file: !3, line: 510, type: !5653, scopeLine: 512, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!6983 = !DILocalVariable(name: "info", arg: 1, scope: !6982, file: !3, line: 510, type: !1561)
!6984 = !DILocation(line: 510, column: 45, scope: !6982)
!6985 = !DILocalVariable(name: "decl", arg: 2, scope: !6982, file: !3, line: 510, type: !1640)
!6986 = !DILocation(line: 510, column: 56, scope: !6982)
!6987 = !DILocalVariable(name: "insert", arg: 3, scope: !6982, file: !3, line: 511, type: !675)
!6988 = !DILocation(line: 511, column: 29, scope: !6982)
!6989 = !DILocalVariable(name: "slot", scope: !6982, file: !3, line: 513, type: !2360)
!6990 = !DILocation(line: 513, column: 10, scope: !6982)
!6991 = !DILocation(line: 515, column: 7, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6982, file: !3, line: 515, column: 7)
!6993 = !DILocation(line: 515, column: 14, scope: !6992)
!6994 = !DILocation(line: 515, column: 7, scope: !6982)
!6995 = !DILocation(line: 517, column: 36, scope: !6996)
!6996 = distinct !DILexicalBlock(scope: !6992, file: !3, line: 516, column: 5)
!6997 = !DILocation(line: 517, column: 42, scope: !6996)
!6998 = !DILocation(line: 517, column: 51, scope: !6996)
!6999 = !DILocation(line: 517, column: 14, scope: !6996)
!7000 = !DILocation(line: 517, column: 12, scope: !6996)
!7001 = !DILocation(line: 518, column: 14, scope: !6996)
!7002 = !DILocation(line: 518, column: 29, scope: !6996)
!7003 = !DILocation(line: 518, column: 28, scope: !6996)
!7004 = !DILocation(line: 518, column: 21, scope: !6996)
!7005 = !DILocation(line: 518, column: 7, scope: !6996)
!7006 = !DILocation(line: 521, column: 30, scope: !6982)
!7007 = !DILocation(line: 521, column: 36, scope: !6982)
!7008 = !DILocation(line: 521, column: 45, scope: !6982)
!7009 = !DILocation(line: 521, column: 10, scope: !6982)
!7010 = !DILocation(line: 521, column: 8, scope: !6982)
!7011 = !DILocation(line: 522, column: 9, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !6982, file: !3, line: 522, column: 7)
!7013 = !DILocation(line: 522, column: 8, scope: !7012)
!7014 = !DILocation(line: 522, column: 7, scope: !6982)
!7015 = !DILocalVariable(name: "field", scope: !7016, file: !3, line: 524, type: !1640)
!7016 = distinct !DILexicalBlock(scope: !7012, file: !3, line: 523, column: 5)
!7017 = !DILocation(line: 524, column: 12, scope: !7016)
!7018 = !DILocation(line: 524, column: 20, scope: !7016)
!7019 = !DILocation(line: 525, column: 27, scope: !7016)
!7020 = !DILocation(line: 525, column: 7, scope: !7016)
!7021 = !DILocation(line: 525, column: 25, scope: !7016)
!7022 = !DILocation(line: 526, column: 48, scope: !7016)
!7023 = !DILocation(line: 526, column: 27, scope: !7016)
!7024 = !DILocation(line: 526, column: 7, scope: !7016)
!7025 = !DILocation(line: 526, column: 25, scope: !7016)
!7026 = !DILocation(line: 527, column: 7, scope: !7016)
!7027 = !DILocation(line: 527, column: 32, scope: !7016)
!7028 = !DILocation(line: 529, column: 49, scope: !7016)
!7029 = !DILocation(line: 529, column: 33, scope: !7016)
!7030 = !DILocation(line: 529, column: 56, scope: !7016)
!7031 = !DILocation(line: 529, column: 7, scope: !7016)
!7032 = !DILocation(line: 530, column: 15, scope: !7016)
!7033 = !DILocation(line: 530, column: 8, scope: !7016)
!7034 = !DILocation(line: 530, column: 13, scope: !7016)
!7035 = !DILocation(line: 532, column: 7, scope: !7016)
!7036 = !DILocation(line: 532, column: 13, scope: !7016)
!7037 = !DILocation(line: 532, column: 31, scope: !7016)
!7038 = !DILocation(line: 533, column: 5, scope: !7016)
!7039 = !DILocation(line: 535, column: 18, scope: !6982)
!7040 = !DILocation(line: 535, column: 17, scope: !6982)
!7041 = !DILocation(line: 535, column: 10, scope: !6982)
!7042 = !DILocation(line: 535, column: 3, scope: !6982)
!7043 = !DILocation(line: 536, column: 1, scope: !6982)
!7044 = distinct !DISubprogram(name: "init_tmp_var_with_call", scope: !3, file: !3, line: 402, type: !7045, scopeLine: 404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7045 = !DISubroutineType(types: !7046)
!7046 = !{!1640, !1561, !3455, !1905}
!7047 = !DILocalVariable(name: "info", arg: 1, scope: !7044, file: !3, line: 402, type: !1561)
!7048 = !DILocation(line: 402, column: 46, scope: !7044)
!7049 = !DILocalVariable(name: "gsi", arg: 2, scope: !7044, file: !3, line: 402, type: !3455)
!7050 = !DILocation(line: 402, column: 74, scope: !7044)
!7051 = !DILocalVariable(name: "call", arg: 3, scope: !7044, file: !3, line: 403, type: !1905)
!7052 = !DILocation(line: 403, column: 18, scope: !7044)
!7053 = !DILocalVariable(name: "t", scope: !7044, file: !3, line: 405, type: !1640)
!7054 = !DILocation(line: 405, column: 8, scope: !7044)
!7055 = !DILocation(line: 407, column: 27, scope: !7044)
!7056 = !DILocation(line: 407, column: 58, scope: !7044)
!7057 = !DILocation(line: 407, column: 33, scope: !7044)
!7058 = !DILocation(line: 407, column: 7, scope: !7044)
!7059 = !DILocation(line: 407, column: 5, scope: !7044)
!7060 = !DILocation(line: 408, column: 24, scope: !7044)
!7061 = !DILocation(line: 408, column: 30, scope: !7044)
!7062 = !DILocation(line: 408, column: 3, scope: !7044)
!7063 = !DILocation(line: 409, column: 21, scope: !7064)
!7064 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 409, column: 7)
!7065 = !DILocation(line: 409, column: 9, scope: !7064)
!7066 = !DILocation(line: 409, column: 7, scope: !7044)
!7067 = !DILocation(line: 410, column: 26, scope: !7064)
!7068 = !DILocation(line: 410, column: 60, scope: !7064)
!7069 = !DILocation(line: 410, column: 49, scope: !7064)
!7070 = !DILocation(line: 410, column: 32, scope: !7064)
!7071 = !DILocation(line: 410, column: 5, scope: !7064)
!7072 = !DILocation(line: 411, column: 22, scope: !7044)
!7073 = !DILocation(line: 411, column: 27, scope: !7044)
!7074 = !DILocation(line: 411, column: 3, scope: !7044)
!7075 = !DILocation(line: 413, column: 10, scope: !7044)
!7076 = !DILocation(line: 413, column: 3, scope: !7044)
!7077 = distinct !DISubprogram(name: "get_trampoline_type", scope: !3, file: !3, line: 471, type: !5033, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7078 = !DILocalVariable(name: "info", arg: 1, scope: !7077, file: !3, line: 471, type: !1561)
!7079 = !DILocation(line: 471, column: 43, scope: !7077)
!7080 = !DILocalVariable(name: "align", scope: !7077, file: !3, line: 473, type: !7)
!7081 = !DILocation(line: 473, column: 12, scope: !7077)
!7082 = !DILocalVariable(name: "size", scope: !7077, file: !3, line: 473, type: !7)
!7083 = !DILocation(line: 473, column: 19, scope: !7077)
!7084 = !DILocalVariable(name: "t", scope: !7077, file: !3, line: 474, type: !1640)
!7085 = !DILocation(line: 474, column: 8, scope: !7077)
!7086 = !DILocation(line: 476, column: 7, scope: !7087)
!7087 = distinct !DILexicalBlock(scope: !7077, file: !3, line: 476, column: 7)
!7088 = !DILocation(line: 476, column: 7, scope: !7077)
!7089 = !DILocation(line: 477, column: 12, scope: !7087)
!7090 = !DILocation(line: 477, column: 5, scope: !7087)
!7091 = !DILocation(line: 479, column: 9, scope: !7077)
!7092 = !DILocation(line: 480, column: 8, scope: !7077)
!7093 = !DILocation(line: 484, column: 7, scope: !7094)
!7094 = distinct !DILexicalBlock(scope: !7077, file: !3, line: 484, column: 7)
!7095 = !DILocation(line: 484, column: 13, scope: !7094)
!7096 = !DILocation(line: 484, column: 7, scope: !7077)
!7097 = !DILocation(line: 486, column: 17, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7094, file: !3, line: 485, column: 5)
!7099 = !DILocation(line: 486, column: 22, scope: !7098)
!7100 = !DILocation(line: 486, column: 38, scope: !7098)
!7101 = !DILocation(line: 486, column: 43, scope: !7098)
!7102 = !DILocation(line: 486, column: 12, scope: !7098)
!7103 = !DILocation(line: 487, column: 13, scope: !7098)
!7104 = !DILocation(line: 488, column: 5, scope: !7098)
!7105 = !DILocation(line: 490, column: 51, scope: !7077)
!7106 = !DILocation(line: 490, column: 56, scope: !7077)
!7107 = !DILocation(line: 490, column: 25, scope: !7077)
!7108 = !DILocation(line: 490, column: 7, scope: !7077)
!7109 = !DILocation(line: 490, column: 5, scope: !7077)
!7110 = !DILocation(line: 491, column: 25, scope: !7077)
!7111 = !DILocation(line: 491, column: 41, scope: !7077)
!7112 = !DILocation(line: 491, column: 7, scope: !7077)
!7113 = !DILocation(line: 491, column: 5, scope: !7077)
!7114 = !DILocation(line: 492, column: 7, scope: !7077)
!7115 = !DILocation(line: 492, column: 5, scope: !7077)
!7116 = !DILocation(line: 494, column: 20, scope: !7077)
!7117 = !DILocation(line: 494, column: 3, scope: !7077)
!7118 = !DILocation(line: 494, column: 18, scope: !7077)
!7119 = !DILocation(line: 495, column: 3, scope: !7077)
!7120 = !DILocation(line: 495, column: 23, scope: !7077)
!7121 = !DILocation(line: 497, column: 21, scope: !7077)
!7122 = !DILocation(line: 497, column: 19, scope: !7077)
!7123 = !DILocation(line: 498, column: 33, scope: !7077)
!7124 = !DILocation(line: 498, column: 3, scope: !7077)
!7125 = !DILocation(line: 498, column: 31, scope: !7077)
!7126 = !DILocation(line: 499, column: 35, scope: !7077)
!7127 = !DILocation(line: 499, column: 3, scope: !7077)
!7128 = !DILocation(line: 499, column: 33, scope: !7077)
!7129 = !DILocation(line: 500, column: 16, scope: !7077)
!7130 = !DILocation(line: 500, column: 3, scope: !7077)
!7131 = !DILocation(line: 501, column: 22, scope: !7077)
!7132 = !DILocation(line: 501, column: 3, scope: !7077)
!7133 = !DILocation(line: 501, column: 20, scope: !7077)
!7134 = !DILocation(line: 503, column: 10, scope: !7077)
!7135 = !DILocation(line: 503, column: 3, scope: !7077)
!7136 = !DILocation(line: 504, column: 1, scope: !7077)
!7137 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !611, file: !611, line: 1966, type: !4846, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7138 = !DILocalVariable(name: "gs", arg: 1, scope: !7137, file: !611, line: 1966, type: !4838)
!7139 = !DILocation(line: 1966, column: 39, scope: !7137)
!7140 = !DILocalVariable(name: "fn", scope: !7137, file: !611, line: 1968, type: !1640)
!7141 = !DILocation(line: 1968, column: 8, scope: !7137)
!7142 = !DILocation(line: 1968, column: 29, scope: !7137)
!7143 = !DILocation(line: 1968, column: 13, scope: !7137)
!7144 = !DILocalVariable(name: "type", scope: !7137, file: !611, line: 1969, type: !1640)
!7145 = !DILocation(line: 1969, column: 8, scope: !7137)
!7146 = !DILocation(line: 1969, column: 15, scope: !7137)
!7147 = !DILocation(line: 1972, column: 10, scope: !7137)
!7148 = !DILocation(line: 1972, column: 8, scope: !7137)
!7149 = !DILocation(line: 1976, column: 10, scope: !7137)
!7150 = !DILocation(line: 1976, column: 3, scope: !7137)
!7151 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !611, file: !611, line: 1898, type: !5117, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7152 = !DILocalVariable(name: "gs", arg: 1, scope: !7151, file: !611, line: 1898, type: !1905)
!7153 = !DILocation(line: 1898, column: 29, scope: !7151)
!7154 = !DILocalVariable(name: "lhs", arg: 2, scope: !7151, file: !611, line: 1898, type: !1640)
!7155 = !DILocation(line: 1898, column: 38, scope: !7151)
!7156 = !DILocation(line: 1901, column: 18, scope: !7151)
!7157 = !DILocation(line: 1901, column: 25, scope: !7151)
!7158 = !DILocation(line: 1901, column: 3, scope: !7151)
!7159 = !DILocation(line: 1902, column: 7, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7151, file: !611, line: 1902, column: 7)
!7161 = !DILocation(line: 1902, column: 11, scope: !7160)
!7162 = !DILocation(line: 1902, column: 14, scope: !7160)
!7163 = !DILocation(line: 1902, column: 30, scope: !7160)
!7164 = !DILocation(line: 1902, column: 7, scope: !7151)
!7165 = !DILocation(line: 1903, column: 31, scope: !7160)
!7166 = !DILocation(line: 1903, column: 5, scope: !7160)
!7167 = !DILocation(line: 1903, column: 29, scope: !7160)
!7168 = !DILocation(line: 1904, column: 1, scope: !7151)
!7169 = distinct !DISubprogram(name: "gimple_call_fn", scope: !611, file: !611, line: 1911, type: !4846, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7170 = !DILocalVariable(name: "gs", arg: 1, scope: !7169, file: !611, line: 1911, type: !4838)
!7171 = !DILocation(line: 1911, column: 30, scope: !7169)
!7172 = !DILocation(line: 1914, column: 21, scope: !7169)
!7173 = !DILocation(line: 1914, column: 10, scope: !7169)
!7174 = !DILocation(line: 1914, column: 3, scope: !7169)
!7175 = distinct !DISubprogram(name: "gimple_set_op", scope: !611, file: !611, line: 1663, type: !7176, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7176 = !DISubroutineType(types: !7177)
!7177 = !{null, !1905, !7, !1640}
!7178 = !DILocalVariable(name: "gs", arg: 1, scope: !7175, file: !611, line: 1663, type: !1905)
!7179 = !DILocation(line: 1663, column: 23, scope: !7175)
!7180 = !DILocalVariable(name: "i", arg: 2, scope: !7175, file: !611, line: 1663, type: !7)
!7181 = !DILocation(line: 1663, column: 36, scope: !7175)
!7182 = !DILocalVariable(name: "op", arg: 3, scope: !7175, file: !611, line: 1663, type: !1640)
!7183 = !DILocation(line: 1663, column: 44, scope: !7175)
!7184 = !DILocation(line: 1665, column: 3, scope: !7175)
!7185 = !DILocation(line: 1671, column: 24, scope: !7175)
!7186 = !DILocation(line: 1671, column: 15, scope: !7175)
!7187 = !DILocation(line: 1671, column: 3, scope: !7175)
!7188 = !DILocation(line: 1671, column: 19, scope: !7175)
!7189 = !DILocation(line: 1671, column: 22, scope: !7175)
!7190 = !DILocation(line: 1672, column: 1, scope: !7175)
!7191 = distinct !DISubprogram(name: "gimple_call_chain", scope: !611, file: !611, line: 1983, type: !4846, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7192 = !DILocalVariable(name: "gs", arg: 1, scope: !7191, file: !611, line: 1983, type: !4838)
!7193 = !DILocation(line: 1983, column: 33, scope: !7191)
!7194 = !DILocation(line: 1986, column: 21, scope: !7191)
!7195 = !DILocation(line: 1986, column: 10, scope: !7191)
!7196 = !DILocation(line: 1986, column: 3, scope: !7191)
!7197 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !611, file: !611, line: 1954, type: !4846, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7198 = !DILocalVariable(name: "gs", arg: 1, scope: !7197, file: !611, line: 1954, type: !4838)
!7199 = !DILocation(line: 1954, column: 34, scope: !7197)
!7200 = !DILocalVariable(name: "addr", scope: !7197, file: !611, line: 1956, type: !1640)
!7201 = !DILocation(line: 1956, column: 8, scope: !7197)
!7202 = !DILocation(line: 1956, column: 31, scope: !7197)
!7203 = !DILocation(line: 1956, column: 15, scope: !7197)
!7204 = !DILocation(line: 1957, column: 7, scope: !7205)
!7205 = distinct !DILexicalBlock(scope: !7197, file: !611, line: 1957, column: 7)
!7206 = !DILocation(line: 1957, column: 24, scope: !7205)
!7207 = !DILocation(line: 1957, column: 7, scope: !7197)
!7208 = !DILocation(line: 1958, column: 12, scope: !7205)
!7209 = !DILocation(line: 1958, column: 5, scope: !7205)
!7210 = !DILocation(line: 1959, column: 3, scope: !7197)
!7211 = !DILocation(line: 1960, column: 1, scope: !7197)
!7212 = distinct !DISubprogram(name: "gimple_call_set_chain", scope: !611, file: !611, line: 2002, type: !5117, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7213 = !DILocalVariable(name: "gs", arg: 1, scope: !7212, file: !611, line: 2002, type: !1905)
!7214 = !DILocation(line: 2002, column: 31, scope: !7212)
!7215 = !DILocalVariable(name: "chain", arg: 2, scope: !7212, file: !611, line: 2002, type: !1640)
!7216 = !DILocation(line: 2002, column: 40, scope: !7212)
!7217 = !DILocation(line: 2006, column: 18, scope: !7212)
!7218 = !DILocation(line: 2006, column: 25, scope: !7212)
!7219 = !DILocation(line: 2006, column: 3, scope: !7212)
!7220 = !DILocation(line: 2007, column: 1, scope: !7212)
!7221 = distinct !DISubprogram(name: "get_static_chain", scope: !3, file: !3, line: 745, type: !6130, scopeLine: 747, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7222 = !DILocalVariable(name: "info", arg: 1, scope: !7221, file: !3, line: 745, type: !1561)
!7223 = !DILocation(line: 745, column: 40, scope: !7221)
!7224 = !DILocalVariable(name: "target_context", arg: 2, scope: !7221, file: !3, line: 745, type: !1640)
!7225 = !DILocation(line: 745, column: 51, scope: !7221)
!7226 = !DILocalVariable(name: "gsi", arg: 3, scope: !7221, file: !3, line: 746, type: !3455)
!7227 = !DILocation(line: 746, column: 27, scope: !7221)
!7228 = !DILocalVariable(name: "i", scope: !7221, file: !3, line: 748, type: !1561)
!7229 = !DILocation(line: 748, column: 24, scope: !7221)
!7230 = !DILocalVariable(name: "x", scope: !7221, file: !3, line: 749, type: !1640)
!7231 = !DILocation(line: 749, column: 8, scope: !7221)
!7232 = !DILocation(line: 751, column: 7, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 751, column: 7)
!7234 = !DILocation(line: 751, column: 13, scope: !7233)
!7235 = !DILocation(line: 751, column: 24, scope: !7233)
!7236 = !DILocation(line: 751, column: 21, scope: !7233)
!7237 = !DILocation(line: 751, column: 7, scope: !7221)
!7238 = !DILocation(line: 753, column: 23, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 752, column: 5)
!7240 = !DILocation(line: 753, column: 29, scope: !7239)
!7241 = !DILocation(line: 753, column: 41, scope: !7239)
!7242 = !DILocation(line: 753, column: 11, scope: !7239)
!7243 = !DILocation(line: 753, column: 9, scope: !7239)
!7244 = !DILocation(line: 754, column: 5, scope: !7239)
!7245 = !DILocation(line: 757, column: 27, scope: !7246)
!7246 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 756, column: 5)
!7247 = !DILocation(line: 757, column: 11, scope: !7246)
!7248 = !DILocation(line: 757, column: 9, scope: !7246)
!7249 = !DILocation(line: 759, column: 16, scope: !7250)
!7250 = distinct !DILexicalBlock(scope: !7246, file: !3, line: 759, column: 7)
!7251 = !DILocation(line: 759, column: 22, scope: !7250)
!7252 = !DILocation(line: 759, column: 14, scope: !7250)
!7253 = !DILocation(line: 759, column: 12, scope: !7250)
!7254 = !DILocation(line: 759, column: 29, scope: !7255)
!7255 = distinct !DILexicalBlock(scope: !7250, file: !3, line: 759, column: 7)
!7256 = !DILocation(line: 759, column: 32, scope: !7255)
!7257 = !DILocation(line: 759, column: 43, scope: !7255)
!7258 = !DILocation(line: 759, column: 40, scope: !7255)
!7259 = !DILocation(line: 759, column: 7, scope: !7250)
!7260 = !DILocalVariable(name: "field", scope: !7261, file: !3, line: 761, type: !1640)
!7261 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 760, column: 2)
!7262 = !DILocation(line: 761, column: 9, scope: !7261)
!7263 = !DILocation(line: 761, column: 34, scope: !7261)
!7264 = !DILocation(line: 761, column: 17, scope: !7261)
!7265 = !DILocation(line: 763, column: 8, scope: !7261)
!7266 = !DILocation(line: 763, column: 6, scope: !7261)
!7267 = !DILocation(line: 764, column: 8, scope: !7261)
!7268 = !DILocation(line: 764, column: 6, scope: !7261)
!7269 = !DILocation(line: 765, column: 22, scope: !7261)
!7270 = !DILocation(line: 765, column: 28, scope: !7261)
!7271 = !DILocation(line: 765, column: 31, scope: !7261)
!7272 = !DILocation(line: 765, column: 8, scope: !7261)
!7273 = !DILocation(line: 765, column: 6, scope: !7261)
!7274 = !DILocation(line: 766, column: 2, scope: !7261)
!7275 = !DILocation(line: 759, column: 63, scope: !7255)
!7276 = !DILocation(line: 759, column: 66, scope: !7255)
!7277 = !DILocation(line: 759, column: 61, scope: !7255)
!7278 = !DILocation(line: 759, column: 7, scope: !7255)
!7279 = distinct !{!7279, !7259, !7280}
!7280 = !DILocation(line: 766, column: 2, scope: !7250)
!7281 = !DILocation(line: 769, column: 10, scope: !7221)
!7282 = !DILocation(line: 769, column: 3, scope: !7221)
!7283 = distinct !DISubprogram(name: "finalize_nesting_tree_1", scope: !3, file: !3, line: 2257, type: !4542, scopeLine: 2258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7284 = !DILocalVariable(name: "root", arg: 1, scope: !7283, file: !3, line: 2257, type: !1561)
!7285 = !DILocation(line: 2257, column: 47, scope: !7283)
!7286 = !DILocalVariable(name: "stmt_list", scope: !7283, file: !3, line: 2259, type: !1895)
!7287 = !DILocation(line: 2259, column: 14, scope: !7283)
!7288 = !DILocalVariable(name: "stmt", scope: !7283, file: !3, line: 2260, type: !1905)
!7289 = !DILocation(line: 2260, column: 10, scope: !7283)
!7290 = !DILocalVariable(name: "context", scope: !7283, file: !3, line: 2261, type: !1640)
!7291 = !DILocation(line: 2261, column: 8, scope: !7283)
!7292 = !DILocation(line: 2261, column: 18, scope: !7283)
!7293 = !DILocation(line: 2261, column: 24, scope: !7283)
!7294 = !DILocalVariable(name: "sf", scope: !7283, file: !3, line: 2262, type: !2293)
!7295 = !DILocation(line: 2262, column: 20, scope: !7283)
!7296 = !DILocation(line: 2264, column: 13, scope: !7283)
!7297 = !DILocation(line: 2268, column: 7, scope: !7298)
!7298 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2268, column: 7)
!7299 = !DILocation(line: 2268, column: 13, scope: !7298)
!7300 = !DILocation(line: 2268, column: 7, scope: !7283)
!7301 = !DILocalVariable(name: "save_warn_padded", scope: !7302, file: !3, line: 2272, type: !1560)
!7302 = distinct !DILexicalBlock(scope: !7298, file: !3, line: 2269, column: 5)
!7303 = !DILocation(line: 2272, column: 11, scope: !7302)
!7304 = !DILocation(line: 2272, column: 30, scope: !7302)
!7305 = !DILocalVariable(name: "adjust", scope: !7302, file: !3, line: 2273, type: !1940)
!7306 = !DILocation(line: 2273, column: 13, scope: !7302)
!7307 = !DILocation(line: 2275, column: 19, scope: !7302)
!7308 = !DILocation(line: 2276, column: 20, scope: !7302)
!7309 = !DILocation(line: 2276, column: 26, scope: !7302)
!7310 = !DILocation(line: 2276, column: 7, scope: !7302)
!7311 = !DILocation(line: 2277, column: 21, scope: !7302)
!7312 = !DILocation(line: 2277, column: 19, scope: !7302)
!7313 = !DILocation(line: 2278, column: 20, scope: !7302)
!7314 = !DILocation(line: 2278, column: 26, scope: !7302)
!7315 = !DILocation(line: 2278, column: 7, scope: !7302)
!7316 = !DILocation(line: 2284, column: 22, scope: !7317)
!7317 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 2284, column: 7)
!7318 = !DILocation(line: 2284, column: 28, scope: !7317)
!7319 = !DILocation(line: 2284, column: 19, scope: !7317)
!7320 = !DILocation(line: 2284, column: 12, scope: !7317)
!7321 = !DILocation(line: 2285, column: 6, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7317, file: !3, line: 2284, column: 7)
!7323 = !DILocation(line: 2285, column: 5, scope: !7322)
!7324 = !DILocation(line: 2285, column: 16, scope: !7322)
!7325 = !DILocation(line: 2285, column: 22, scope: !7322)
!7326 = !DILocation(line: 2285, column: 13, scope: !7322)
!7327 = !DILocation(line: 2284, column: 7, scope: !7317)
!7328 = !DILocation(line: 2287, column: 2, scope: !7322)
!7329 = !DILocation(line: 2286, column: 15, scope: !7322)
!7330 = !DILocation(line: 2286, column: 12, scope: !7322)
!7331 = !DILocation(line: 2284, column: 7, scope: !7322)
!7332 = distinct !{!7332, !7327, !7333}
!7333 = !DILocation(line: 2287, column: 2, scope: !7317)
!7334 = !DILocation(line: 2288, column: 17, scope: !7302)
!7335 = !DILocation(line: 2288, column: 8, scope: !7302)
!7336 = !DILocation(line: 2288, column: 15, scope: !7302)
!7337 = !DILocation(line: 2290, column: 7, scope: !7302)
!7338 = !DILocation(line: 2290, column: 37, scope: !7302)
!7339 = !DILocation(line: 2291, column: 21, scope: !7302)
!7340 = !DILocation(line: 2291, column: 27, scope: !7302)
!7341 = !DILocation(line: 2292, column: 43, scope: !7302)
!7342 = !DILocation(line: 2292, column: 30, scope: !7302)
!7343 = !DILocation(line: 2292, column: 7, scope: !7302)
!7344 = !DILocation(line: 2291, column: 7, scope: !7302)
!7345 = !DILocation(line: 2293, column: 5, scope: !7302)
!7346 = !DILocation(line: 2298, column: 7, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2298, column: 7)
!7348 = !DILocation(line: 2298, column: 13, scope: !7347)
!7349 = !DILocation(line: 2298, column: 7, scope: !7283)
!7350 = !DILocalVariable(name: "p", scope: !7351, file: !3, line: 2300, type: !1640)
!7351 = distinct !DILexicalBlock(scope: !7347, file: !3, line: 2299, column: 5)
!7352 = !DILocation(line: 2300, column: 12, scope: !7351)
!7353 = !DILocation(line: 2301, column: 16, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7351, file: !3, line: 2301, column: 7)
!7355 = !DILocation(line: 2301, column: 14, scope: !7354)
!7356 = !DILocation(line: 2301, column: 12, scope: !7354)
!7357 = !DILocation(line: 2301, column: 42, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 2301, column: 7)
!7359 = !DILocation(line: 2301, column: 7, scope: !7354)
!7360 = !DILocalVariable(name: "field", scope: !7361, file: !3, line: 2303, type: !1640)
!7361 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 2302, column: 2)
!7362 = !DILocation(line: 2303, column: 9, scope: !7361)
!7363 = !DILocalVariable(name: "x", scope: !7361, file: !3, line: 2303, type: !1640)
!7364 = !DILocation(line: 2303, column: 16, scope: !7361)
!7365 = !DILocalVariable(name: "y", scope: !7361, file: !3, line: 2303, type: !1640)
!7366 = !DILocation(line: 2303, column: 19, scope: !7361)
!7367 = !DILocation(line: 2305, column: 35, scope: !7361)
!7368 = !DILocation(line: 2305, column: 41, scope: !7361)
!7369 = !DILocation(line: 2305, column: 12, scope: !7361)
!7370 = !DILocation(line: 2305, column: 10, scope: !7361)
!7371 = !DILocation(line: 2306, column: 9, scope: !7372)
!7372 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 2306, column: 8)
!7373 = !DILocation(line: 2306, column: 8, scope: !7361)
!7374 = !DILocation(line: 2307, column: 6, scope: !7372)
!7375 = !DILocation(line: 2309, column: 30, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 2309, column: 8)
!7377 = !DILocation(line: 2309, column: 8, scope: !7376)
!7378 = !DILocation(line: 2309, column: 8, scope: !7361)
!7379 = !DILocation(line: 2310, column: 22, scope: !7376)
!7380 = !DILocation(line: 2310, column: 25, scope: !7376)
!7381 = !DILocation(line: 2310, column: 10, scope: !7376)
!7382 = !DILocation(line: 2310, column: 8, scope: !7376)
!7383 = !DILocation(line: 2310, column: 6, scope: !7376)
!7384 = !DILocation(line: 2312, column: 10, scope: !7376)
!7385 = !DILocation(line: 2312, column: 8, scope: !7376)
!7386 = !DILocation(line: 2314, column: 8, scope: !7361)
!7387 = !DILocation(line: 2314, column: 6, scope: !7361)
!7388 = !DILocation(line: 2316, column: 11, scope: !7361)
!7389 = !DILocation(line: 2316, column: 9, scope: !7361)
!7390 = !DILocation(line: 2317, column: 37, scope: !7361)
!7391 = !DILocation(line: 2317, column: 4, scope: !7361)
!7392 = !DILocation(line: 2320, column: 24, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 2320, column: 8)
!7394 = !DILocation(line: 2320, column: 9, scope: !7393)
!7395 = !DILocation(line: 2321, column: 8, scope: !7393)
!7396 = !DILocation(line: 2321, column: 31, scope: !7393)
!7397 = !DILocation(line: 2321, column: 11, scope: !7393)
!7398 = !DILocation(line: 2320, column: 8, scope: !7361)
!7399 = !DILocalVariable(name: "gsi", scope: !7400, file: !3, line: 2323, type: !2887)
!7400 = distinct !DILexicalBlock(scope: !7393, file: !3, line: 2322, column: 6)
!7401 = !DILocation(line: 2323, column: 29, scope: !7400)
!7402 = !DILocation(line: 2323, column: 45, scope: !7400)
!7403 = !DILocation(line: 2323, column: 35, scope: !7400)
!7404 = !DILocation(line: 2324, column: 26, scope: !7400)
!7405 = !DILocation(line: 2324, column: 32, scope: !7400)
!7406 = !DILocation(line: 2324, column: 12, scope: !7400)
!7407 = !DILocation(line: 2324, column: 10, scope: !7400)
!7408 = !DILocation(line: 2325, column: 32, scope: !7400)
!7409 = !DILocation(line: 2325, column: 38, scope: !7400)
!7410 = !DILocation(line: 2325, column: 8, scope: !7400)
!7411 = !DILocation(line: 2326, column: 6, scope: !7400)
!7412 = !DILocation(line: 2327, column: 2, scope: !7361)
!7413 = !DILocation(line: 2301, column: 50, scope: !7358)
!7414 = !DILocation(line: 2301, column: 48, scope: !7358)
!7415 = !DILocation(line: 2301, column: 7, scope: !7358)
!7416 = distinct !{!7416, !7359, !7417}
!7417 = !DILocation(line: 2327, column: 2, scope: !7354)
!7418 = !DILocation(line: 2328, column: 5, scope: !7351)
!7419 = !DILocation(line: 2332, column: 7, scope: !7420)
!7420 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2332, column: 7)
!7421 = !DILocation(line: 2332, column: 13, scope: !7420)
!7422 = !DILocation(line: 2332, column: 7, scope: !7283)
!7423 = !DILocalVariable(name: "x", scope: !7424, file: !3, line: 2334, type: !1640)
!7424 = distinct !DILexicalBlock(scope: !7420, file: !3, line: 2333, column: 5)
!7425 = !DILocation(line: 2334, column: 12, scope: !7424)
!7426 = !DILocation(line: 2334, column: 16, scope: !7424)
!7427 = !DILocation(line: 2336, column: 14, scope: !7424)
!7428 = !DILocation(line: 2336, column: 12, scope: !7424)
!7429 = !DILocation(line: 2337, column: 40, scope: !7424)
!7430 = !DILocation(line: 2337, column: 7, scope: !7424)
!7431 = !DILocation(line: 2338, column: 5, scope: !7424)
!7432 = !DILocation(line: 2341, column: 7, scope: !7433)
!7433 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2341, column: 7)
!7434 = !DILocation(line: 2341, column: 13, scope: !7433)
!7435 = !DILocation(line: 2341, column: 7, scope: !7283)
!7436 = !DILocalVariable(name: "i", scope: !7437, file: !3, line: 2343, type: !1561)
!7437 = distinct !DILexicalBlock(scope: !7433, file: !3, line: 2342, column: 5)
!7438 = !DILocation(line: 2343, column: 28, scope: !7437)
!7439 = !DILocation(line: 2344, column: 16, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 2344, column: 7)
!7441 = !DILocation(line: 2344, column: 22, scope: !7440)
!7442 = !DILocation(line: 2344, column: 14, scope: !7440)
!7443 = !DILocation(line: 2344, column: 12, scope: !7440)
!7444 = !DILocation(line: 2344, column: 29, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 2344, column: 7)
!7446 = !DILocation(line: 2344, column: 7, scope: !7440)
!7447 = !DILocalVariable(name: "arg1", scope: !7448, file: !3, line: 2346, type: !1640)
!7448 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 2345, column: 2)
!7449 = !DILocation(line: 2346, column: 9, scope: !7448)
!7450 = !DILocalVariable(name: "arg2", scope: !7448, file: !3, line: 2346, type: !1640)
!7451 = !DILocation(line: 2346, column: 15, scope: !7448)
!7452 = !DILocalVariable(name: "arg3", scope: !7448, file: !3, line: 2346, type: !1640)
!7453 = !DILocation(line: 2346, column: 21, scope: !7448)
!7454 = !DILocalVariable(name: "x", scope: !7448, file: !3, line: 2346, type: !1640)
!7455 = !DILocation(line: 2346, column: 27, scope: !7448)
!7456 = !DILocalVariable(name: "field", scope: !7448, file: !3, line: 2346, type: !1640)
!7457 = !DILocation(line: 2346, column: 30, scope: !7448)
!7458 = !DILocation(line: 2348, column: 35, scope: !7448)
!7459 = !DILocation(line: 2348, column: 41, scope: !7448)
!7460 = !DILocation(line: 2348, column: 44, scope: !7448)
!7461 = !DILocation(line: 2348, column: 12, scope: !7448)
!7462 = !DILocation(line: 2348, column: 10, scope: !7448)
!7463 = !DILocation(line: 2349, column: 9, scope: !7464)
!7464 = distinct !DILexicalBlock(scope: !7448, file: !3, line: 2349, column: 8)
!7465 = !DILocation(line: 2349, column: 8, scope: !7448)
!7466 = !DILocation(line: 2350, column: 6, scope: !7464)
!7467 = !DILocation(line: 2352, column: 4, scope: !7448)
!7468 = !DILocation(line: 2353, column: 23, scope: !7448)
!7469 = !DILocation(line: 2353, column: 29, scope: !7448)
!7470 = !DILocation(line: 2353, column: 41, scope: !7448)
!7471 = !DILocation(line: 2353, column: 11, scope: !7448)
!7472 = !DILocation(line: 2353, column: 9, scope: !7448)
!7473 = !DILocation(line: 2355, column: 23, scope: !7448)
!7474 = !DILocation(line: 2355, column: 26, scope: !7448)
!7475 = !DILocation(line: 2355, column: 35, scope: !7448)
!7476 = !DILocation(line: 2355, column: 11, scope: !7448)
!7477 = !DILocation(line: 2355, column: 9, scope: !7448)
!7478 = !DILocation(line: 2357, column: 8, scope: !7448)
!7479 = !DILocation(line: 2357, column: 6, scope: !7448)
!7480 = !DILocation(line: 2359, column: 23, scope: !7448)
!7481 = !DILocation(line: 2359, column: 26, scope: !7448)
!7482 = !DILocation(line: 2359, column: 11, scope: !7448)
!7483 = !DILocation(line: 2359, column: 9, scope: !7448)
!7484 = !DILocation(line: 2361, column: 8, scope: !7448)
!7485 = !DILocation(line: 2361, column: 6, scope: !7448)
!7486 = !DILocation(line: 2362, column: 30, scope: !7448)
!7487 = !DILocation(line: 2362, column: 36, scope: !7448)
!7488 = !DILocation(line: 2362, column: 42, scope: !7448)
!7489 = !DILocation(line: 2362, column: 48, scope: !7448)
!7490 = !DILocation(line: 2362, column: 11, scope: !7448)
!7491 = !DILocation(line: 2362, column: 9, scope: !7448)
!7492 = !DILocation(line: 2363, column: 37, scope: !7448)
!7493 = !DILocation(line: 2363, column: 4, scope: !7448)
!7494 = !DILocation(line: 2364, column: 2, scope: !7448)
!7495 = !DILocation(line: 2344, column: 37, scope: !7445)
!7496 = !DILocation(line: 2344, column: 40, scope: !7445)
!7497 = !DILocation(line: 2344, column: 35, scope: !7445)
!7498 = !DILocation(line: 2344, column: 7, scope: !7445)
!7499 = distinct !{!7499, !7446, !7500}
!7500 = !DILocation(line: 2364, column: 2, scope: !7440)
!7501 = !DILocation(line: 2365, column: 5, scope: !7437)
!7502 = !DILocation(line: 2368, column: 7, scope: !7503)
!7503 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2368, column: 7)
!7504 = !DILocation(line: 2368, column: 7, scope: !7283)
!7505 = !DILocalVariable(name: "bind", scope: !7506, file: !3, line: 2370, type: !1905)
!7506 = distinct !DILexicalBlock(scope: !7503, file: !3, line: 2369, column: 5)
!7507 = !DILocation(line: 2370, column: 14, scope: !7506)
!7508 = !DILocation(line: 2371, column: 35, scope: !7506)
!7509 = !DILocation(line: 2371, column: 46, scope: !7506)
!7510 = !DILocation(line: 2371, column: 7, scope: !7506)
!7511 = !DILocation(line: 2372, column: 50, scope: !7506)
!7512 = !DILocation(line: 2372, column: 37, scope: !7506)
!7513 = !DILocation(line: 2372, column: 14, scope: !7506)
!7514 = !DILocation(line: 2372, column: 12, scope: !7506)
!7515 = !DILocation(line: 2373, column: 57, scope: !7506)
!7516 = !DILocation(line: 2373, column: 39, scope: !7506)
!7517 = !DILocation(line: 2373, column: 7, scope: !7506)
!7518 = !DILocation(line: 2374, column: 29, scope: !7506)
!7519 = !DILocation(line: 2374, column: 35, scope: !7506)
!7520 = !DILocation(line: 2374, column: 7, scope: !7506)
!7521 = !DILocation(line: 2375, column: 5, scope: !7506)
!7522 = !DILocation(line: 2380, column: 8, scope: !7283)
!7523 = !DILocation(line: 2380, column: 6, scope: !7283)
!7524 = !DILocation(line: 2381, column: 27, scope: !7283)
!7525 = !DILocation(line: 2381, column: 33, scope: !7283)
!7526 = !DILocation(line: 2381, column: 3, scope: !7283)
!7527 = !DILocation(line: 2381, column: 7, scope: !7283)
!7528 = !DILocation(line: 2381, column: 25, scope: !7283)
!7529 = !DILocation(line: 2384, column: 7, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2384, column: 7)
!7531 = !DILocation(line: 2384, column: 13, scope: !7530)
!7532 = !DILocation(line: 2384, column: 7, scope: !7283)
!7533 = !DILocation(line: 2387, column: 21, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7530, file: !3, line: 2385, column: 5)
!7535 = !DILocation(line: 2387, column: 27, scope: !7534)
!7536 = !DILocation(line: 2387, column: 36, scope: !7534)
!7537 = !DILocation(line: 2387, column: 42, scope: !7534)
!7538 = !DILocation(line: 2387, column: 4, scope: !7534)
!7539 = !DILocation(line: 2386, column: 7, scope: !7534)
!7540 = !DILocation(line: 2386, column: 11, scope: !7534)
!7541 = !DILocation(line: 2387, column: 2, scope: !7534)
!7542 = !DILocation(line: 2388, column: 7, scope: !7534)
!7543 = !DILocation(line: 2388, column: 11, scope: !7534)
!7544 = !DILocation(line: 2388, column: 30, scope: !7534)
!7545 = !DILocation(line: 2389, column: 5, scope: !7534)
!7546 = !DILocation(line: 2393, column: 7, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2393, column: 7)
!7548 = !DILocation(line: 2393, column: 13, scope: !7547)
!7549 = !DILocation(line: 2393, column: 7, scope: !7283)
!7550 = !DILocation(line: 2394, column: 19, scope: !7547)
!7551 = !DILocation(line: 2394, column: 25, scope: !7547)
!7552 = !DILocation(line: 2395, column: 41, scope: !7547)
!7553 = !DILocation(line: 2395, column: 47, scope: !7547)
!7554 = !DILocation(line: 2395, column: 28, scope: !7547)
!7555 = !DILocation(line: 2395, column: 5, scope: !7547)
!7556 = !DILocation(line: 2394, column: 5, scope: !7547)
!7557 = !DILocation(line: 2398, column: 7, scope: !7558)
!7558 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2398, column: 7)
!7559 = !DILocation(line: 2398, column: 13, scope: !7558)
!7560 = !DILocation(line: 2398, column: 7, scope: !7283)
!7561 = !DILocalVariable(name: "debug_var", scope: !7562, file: !3, line: 2400, type: !1640)
!7562 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 2399, column: 5)
!7563 = !DILocation(line: 2400, column: 12, scope: !7562)
!7564 = !DILocalVariable(name: "scope", scope: !7562, file: !3, line: 2401, type: !1905)
!7565 = !DILocation(line: 2401, column: 14, scope: !7562)
!7566 = !DILocation(line: 2403, column: 24, scope: !7562)
!7567 = !DILocation(line: 2403, column: 54, scope: !7562)
!7568 = !DILocation(line: 2403, column: 7, scope: !7562)
!7569 = !DILocation(line: 2405, column: 24, scope: !7570)
!7570 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2405, column: 7)
!7571 = !DILocation(line: 2405, column: 30, scope: !7570)
!7572 = !DILocation(line: 2405, column: 22, scope: !7570)
!7573 = !DILocation(line: 2405, column: 12, scope: !7570)
!7574 = !DILocation(line: 2405, column: 47, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7570, file: !3, line: 2405, column: 7)
!7576 = !DILocation(line: 2405, column: 7, scope: !7570)
!7577 = !DILocation(line: 2407, column: 32, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7575, file: !3, line: 2407, column: 6)
!7579 = !DILocation(line: 2407, column: 6, scope: !7578)
!7580 = !DILocation(line: 2407, column: 6, scope: !7575)
!7581 = !DILocation(line: 2408, column: 4, scope: !7578)
!7582 = !DILocation(line: 2407, column: 59, scope: !7578)
!7583 = !DILocation(line: 2406, column: 17, scope: !7575)
!7584 = !DILocation(line: 2406, column: 15, scope: !7575)
!7585 = !DILocation(line: 2405, column: 7, scope: !7575)
!7586 = distinct !{!7586, !7576, !7587}
!7587 = !DILocation(line: 2408, column: 4, scope: !7570)
!7588 = !DILocation(line: 2412, column: 11, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2412, column: 11)
!7590 = !DILocation(line: 2412, column: 11, scope: !7562)
!7591 = !DILocalVariable(name: "id", scope: !7592, file: !3, line: 2414, type: !2904)
!7592 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 2413, column: 2)
!7593 = !DILocation(line: 2414, column: 34, scope: !7592)
!7594 = !DILocation(line: 2416, column: 4, scope: !7592)
!7595 = !DILocation(line: 2417, column: 7, scope: !7592)
!7596 = !DILocation(line: 2417, column: 10, scope: !7592)
!7597 = !DILocation(line: 2417, column: 20, scope: !7592)
!7598 = !DILocation(line: 2418, column: 21, scope: !7592)
!7599 = !DILocation(line: 2418, column: 7, scope: !7592)
!7600 = !DILocation(line: 2418, column: 10, scope: !7592)
!7601 = !DILocation(line: 2418, column: 19, scope: !7592)
!7602 = !DILocation(line: 2419, column: 14, scope: !7592)
!7603 = !DILocation(line: 2419, column: 7, scope: !7592)
!7604 = !DILocation(line: 2419, column: 12, scope: !7592)
!7605 = !DILocation(line: 2421, column: 4, scope: !7592)
!7606 = !DILocation(line: 2421, column: 11, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 2421, column: 4)
!7608 = distinct !DILexicalBlock(scope: !7592, file: !3, line: 2421, column: 4)
!7609 = !DILocation(line: 2421, column: 4, scope: !7608)
!7610 = !DILocation(line: 2422, column: 36, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 2422, column: 10)
!7612 = !DILocation(line: 2422, column: 10, scope: !7611)
!7613 = !DILocation(line: 2422, column: 10, scope: !7607)
!7614 = !DILocalVariable(name: "type", scope: !7615, file: !3, line: 2424, type: !1640)
!7615 = distinct !DILexicalBlock(scope: !7611, file: !3, line: 2423, column: 8)
!7616 = !DILocation(line: 2424, column: 8, scope: !7615)
!7617 = !DILocation(line: 2424, column: 15, scope: !7615)
!7618 = !DILocalVariable(name: "newt", scope: !7615, file: !3, line: 2425, type: !1640)
!7619 = !DILocation(line: 2425, column: 8, scope: !7615)
!7620 = !DILocalVariable(name: "t", scope: !7615, file: !3, line: 2425, type: !1640)
!7621 = !DILocation(line: 2425, column: 14, scope: !7615)
!7622 = !DILocation(line: 2425, column: 18, scope: !7615)
!7623 = !DILocalVariable(name: "i", scope: !7615, file: !3, line: 2426, type: !1561)
!7624 = !DILocation(line: 2426, column: 24, scope: !7615)
!7625 = !DILocation(line: 2428, column: 12, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2428, column: 3)
!7627 = !DILocation(line: 2428, column: 10, scope: !7626)
!7628 = !DILocation(line: 2428, column: 8, scope: !7626)
!7629 = !DILocation(line: 2428, column: 18, scope: !7630)
!7630 = distinct !DILexicalBlock(scope: !7626, file: !3, line: 2428, column: 3)
!7631 = !DILocation(line: 2428, column: 3, scope: !7626)
!7632 = !DILocation(line: 2429, column: 35, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7630, file: !3, line: 2429, column: 9)
!7634 = !DILocation(line: 2429, column: 41, scope: !7633)
!7635 = !DILocation(line: 2429, column: 44, scope: !7633)
!7636 = !DILocation(line: 2429, column: 9, scope: !7633)
!7637 = !DILocation(line: 2429, column: 9, scope: !7630)
!7638 = !DILocation(line: 2430, column: 7, scope: !7633)
!7639 = !DILocation(line: 2429, column: 51, scope: !7633)
!7640 = !DILocation(line: 2428, column: 25, scope: !7630)
!7641 = !DILocation(line: 2428, column: 28, scope: !7630)
!7642 = !DILocation(line: 2428, column: 23, scope: !7630)
!7643 = !DILocation(line: 2428, column: 3, scope: !7630)
!7644 = distinct !{!7644, !7631, !7645}
!7645 = !DILocation(line: 2430, column: 7, scope: !7626)
!7646 = !DILocation(line: 2432, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2432, column: 7)
!7648 = !DILocation(line: 2432, column: 9, scope: !7647)
!7649 = !DILocation(line: 2432, column: 7, scope: !7615)
!7650 = !DILocation(line: 2433, column: 5, scope: !7647)
!7651 = !DILocation(line: 2435, column: 18, scope: !7615)
!7652 = !DILocation(line: 2435, column: 21, scope: !7615)
!7653 = !DILocation(line: 2435, column: 6, scope: !7615)
!7654 = !DILocation(line: 2435, column: 9, scope: !7615)
!7655 = !DILocation(line: 2435, column: 16, scope: !7615)
!7656 = !DILocation(line: 2436, column: 18, scope: !7615)
!7657 = !DILocation(line: 2436, column: 21, scope: !7615)
!7658 = !DILocation(line: 2436, column: 6, scope: !7615)
!7659 = !DILocation(line: 2436, column: 9, scope: !7615)
!7660 = !DILocation(line: 2436, column: 16, scope: !7615)
!7661 = !DILocation(line: 2437, column: 20, scope: !7615)
!7662 = !DILocation(line: 2437, column: 6, scope: !7615)
!7663 = !DILocation(line: 2437, column: 9, scope: !7615)
!7664 = !DILocation(line: 2437, column: 18, scope: !7615)
!7665 = !DILocation(line: 2439, column: 46, scope: !7615)
!7666 = !DILocation(line: 2439, column: 56, scope: !7615)
!7667 = !DILocation(line: 2439, column: 34, scope: !7615)
!7668 = !DILocation(line: 2439, column: 32, scope: !7615)
!7669 = !DILocation(line: 2439, column: 3, scope: !7615)
!7670 = !DILocation(line: 2439, column: 25, scope: !7615)
!7671 = !DILocation(line: 2440, column: 3, scope: !7615)
!7672 = !DILocation(line: 2440, column: 10, scope: !7615)
!7673 = !DILocation(line: 2440, column: 32, scope: !7615)
!7674 = !DILocation(line: 2440, column: 36, scope: !7615)
!7675 = !DILocation(line: 2440, column: 35, scope: !7615)
!7676 = !DILocation(line: 0, scope: !7615)
!7677 = !DILocation(line: 2442, column: 14, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2441, column: 5)
!7679 = !DILocation(line: 2442, column: 12, scope: !7678)
!7680 = !DILocation(line: 2443, column: 11, scope: !7678)
!7681 = !DILocation(line: 2443, column: 9, scope: !7678)
!7682 = distinct !{!7682, !7671, !7683}
!7683 = !DILocation(line: 2444, column: 5, scope: !7615)
!7684 = !DILocation(line: 2445, column: 7, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2445, column: 7)
!7686 = !DILocation(line: 2446, column: 7, scope: !7685)
!7687 = !DILocation(line: 2446, column: 10, scope: !7685)
!7688 = !DILocation(line: 2446, column: 39, scope: !7685)
!7689 = !DILocation(line: 2447, column: 7, scope: !7685)
!7690 = !DILocation(line: 2447, column: 10, scope: !7685)
!7691 = !DILocation(line: 2448, column: 7, scope: !7685)
!7692 = !DILocation(line: 2448, column: 10, scope: !7685)
!7693 = !DILocation(line: 2448, column: 18, scope: !7685)
!7694 = !DILocation(line: 2448, column: 15, scope: !7685)
!7695 = !DILocation(line: 2449, column: 7, scope: !7685)
!7696 = !DILocation(line: 2449, column: 10, scope: !7685)
!7697 = !DILocation(line: 2449, column: 30, scope: !7685)
!7698 = !DILocation(line: 2449, column: 27, scope: !7685)
!7699 = !DILocation(line: 2445, column: 7, scope: !7615)
!7700 = !DILocation(line: 2450, column: 36, scope: !7685)
!7701 = !DILocation(line: 2450, column: 58, scope: !7685)
!7702 = !DILocation(line: 2450, column: 24, scope: !7685)
!7703 = !DILocation(line: 2450, column: 5, scope: !7685)
!7704 = !DILocation(line: 2450, column: 22, scope: !7685)
!7705 = !DILocation(line: 2451, column: 8, scope: !7615)
!7706 = !DILocation(line: 2422, column: 63, scope: !7611)
!7707 = !DILocation(line: 2421, column: 34, scope: !7607)
!7708 = !DILocation(line: 2421, column: 32, scope: !7607)
!7709 = !DILocation(line: 2421, column: 4, scope: !7607)
!7710 = distinct !{!7710, !7609, !7711}
!7711 = !DILocation(line: 2451, column: 8, scope: !7608)
!7712 = !DILocation(line: 2453, column: 28, scope: !7592)
!7713 = !DILocation(line: 2453, column: 31, scope: !7592)
!7714 = !DILocation(line: 2453, column: 4, scope: !7592)
!7715 = !DILocation(line: 2454, column: 2, scope: !7592)
!7716 = !DILocation(line: 2456, column: 51, scope: !7562)
!7717 = !DILocation(line: 2456, column: 57, scope: !7562)
!7718 = !DILocation(line: 2456, column: 38, scope: !7562)
!7719 = !DILocation(line: 2456, column: 15, scope: !7562)
!7720 = !DILocation(line: 2456, column: 13, scope: !7562)
!7721 = !DILocation(line: 2457, column: 30, scope: !7722)
!7722 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2457, column: 11)
!7723 = !DILocation(line: 2457, column: 11, scope: !7722)
!7724 = !DILocation(line: 2457, column: 11, scope: !7562)
!7725 = !DILocation(line: 2458, column: 16, scope: !7722)
!7726 = !DILocation(line: 2458, column: 22, scope: !7722)
!7727 = !DILocation(line: 2458, column: 39, scope: !7722)
!7728 = !DILocation(line: 2458, column: 2, scope: !7722)
!7729 = !DILocation(line: 2461, column: 15, scope: !7722)
!7730 = !DILocation(line: 2462, column: 8, scope: !7722)
!7731 = !DILocation(line: 2462, column: 14, scope: !7722)
!7732 = !DILocation(line: 2461, column: 6, scope: !7722)
!7733 = !DILocation(line: 2460, column: 2, scope: !7722)
!7734 = !DILocation(line: 2461, column: 4, scope: !7722)
!7735 = !DILocation(line: 2463, column: 5, scope: !7562)
!7736 = !DILocation(line: 2466, column: 7, scope: !7737)
!7737 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2466, column: 7)
!7738 = !DILocation(line: 2466, column: 7, scope: !7283)
!7739 = !DILocation(line: 2468, column: 22, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7737, file: !3, line: 2467, column: 5)
!7741 = !DILocation(line: 2468, column: 7, scope: !7740)
!7742 = !DILocation(line: 2469, column: 30, scope: !7740)
!7743 = !DILocation(line: 2469, column: 36, scope: !7740)
!7744 = !DILocation(line: 2469, column: 45, scope: !7740)
!7745 = !DILocation(line: 2469, column: 56, scope: !7740)
!7746 = !DILocation(line: 2469, column: 7, scope: !7740)
!7747 = !DILocation(line: 2470, column: 5, scope: !7740)
!7748 = !DILocation(line: 2471, column: 1, scope: !7283)
!7749 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !611, file: !611, line: 1747, type: !5117, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7750 = !DILocalVariable(name: "gs", arg: 1, scope: !7749, file: !611, line: 1747, type: !1905)
!7751 = !DILocation(line: 1747, column: 32, scope: !7749)
!7752 = !DILocalVariable(name: "rhs", arg: 2, scope: !7749, file: !611, line: 1747, type: !1640)
!7753 = !DILocation(line: 1747, column: 41, scope: !7749)
!7754 = !DILocation(line: 1751, column: 18, scope: !7749)
!7755 = !DILocation(line: 1751, column: 25, scope: !7749)
!7756 = !DILocation(line: 1751, column: 3, scope: !7749)
!7757 = !DILocation(line: 1752, column: 1, scope: !7749)
!7758 = distinct !DISubprogram(name: "gimple_bind_body", scope: !611, file: !611, line: 2517, type: !5136, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7759 = !DILocalVariable(name: "gs", arg: 1, scope: !7758, file: !611, line: 2517, type: !1905)
!7760 = !DILocation(line: 2517, column: 26, scope: !7758)
!7761 = !DILocation(line: 2520, column: 10, scope: !7758)
!7762 = !DILocation(line: 2520, column: 14, scope: !7758)
!7763 = !DILocation(line: 2520, column: 26, scope: !7758)
!7764 = !DILocation(line: 2520, column: 3, scope: !7758)
!7765 = distinct !DISubprogram(name: "gimple_bind_set_body", scope: !611, file: !611, line: 2528, type: !6031, scopeLine: 2529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7766 = !DILocalVariable(name: "gs", arg: 1, scope: !7765, file: !611, line: 2528, type: !1905)
!7767 = !DILocation(line: 2528, column: 30, scope: !7765)
!7768 = !DILocalVariable(name: "seq", arg: 2, scope: !7765, file: !611, line: 2528, type: !1895)
!7769 = !DILocation(line: 2528, column: 45, scope: !7765)
!7770 = !DILocation(line: 2531, column: 26, scope: !7765)
!7771 = !DILocation(line: 2531, column: 3, scope: !7765)
!7772 = !DILocation(line: 2531, column: 7, scope: !7765)
!7773 = !DILocation(line: 2531, column: 19, scope: !7765)
!7774 = !DILocation(line: 2531, column: 24, scope: !7765)
!7775 = !DILocation(line: 2532, column: 1, scope: !7765)
!7776 = distinct !DISubprogram(name: "remap_vla_decls", scope: !3, file: !3, line: 2173, type: !7777, scopeLine: 2174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7777 = !DISubroutineType(types: !7778)
!7778 = !{null, !1640, !1561}
!7779 = !DILocalVariable(name: "block", arg: 1, scope: !7776, file: !3, line: 2173, type: !1640)
!7780 = !DILocation(line: 2173, column: 23, scope: !7776)
!7781 = !DILocalVariable(name: "root", arg: 2, scope: !7776, file: !3, line: 2173, type: !1561)
!7782 = !DILocation(line: 2173, column: 51, scope: !7776)
!7783 = !DILocalVariable(name: "var", scope: !7776, file: !3, line: 2175, type: !1640)
!7784 = !DILocation(line: 2175, column: 8, scope: !7776)
!7785 = !DILocalVariable(name: "subblock", scope: !7776, file: !3, line: 2175, type: !1640)
!7786 = !DILocation(line: 2175, column: 13, scope: !7776)
!7787 = !DILocalVariable(name: "val", scope: !7776, file: !3, line: 2175, type: !1640)
!7788 = !DILocation(line: 2175, column: 23, scope: !7776)
!7789 = !DILocalVariable(name: "type", scope: !7776, file: !3, line: 2175, type: !1640)
!7790 = !DILocation(line: 2175, column: 28, scope: !7776)
!7791 = !DILocalVariable(name: "id", scope: !7776, file: !3, line: 2176, type: !2904)
!7792 = !DILocation(line: 2176, column: 33, scope: !7776)
!7793 = !DILocation(line: 2178, column: 19, scope: !7794)
!7794 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 2178, column: 3)
!7795 = !DILocation(line: 2178, column: 17, scope: !7794)
!7796 = !DILocation(line: 2178, column: 8, scope: !7794)
!7797 = !DILocation(line: 2179, column: 8, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7794, file: !3, line: 2178, column: 3)
!7799 = !DILocation(line: 2178, column: 3, scope: !7794)
!7800 = !DILocation(line: 2181, column: 22, scope: !7798)
!7801 = !DILocation(line: 2181, column: 32, scope: !7798)
!7802 = !DILocation(line: 2181, column: 5, scope: !7798)
!7803 = !DILocation(line: 2180, column: 19, scope: !7798)
!7804 = !DILocation(line: 2180, column: 17, scope: !7798)
!7805 = !DILocation(line: 2178, column: 3, scope: !7798)
!7806 = distinct !{!7806, !7799, !7807}
!7807 = !DILocation(line: 2181, column: 36, scope: !7794)
!7808 = !DILocation(line: 2183, column: 14, scope: !7809)
!7809 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 2183, column: 3)
!7810 = !DILocation(line: 2183, column: 12, scope: !7809)
!7811 = !DILocation(line: 2183, column: 8, scope: !7809)
!7812 = !DILocation(line: 2183, column: 34, scope: !7813)
!7813 = distinct !DILexicalBlock(scope: !7809, file: !3, line: 2183, column: 3)
!7814 = !DILocation(line: 2183, column: 3, scope: !7809)
!7815 = !DILocation(line: 2185, column: 11, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7817, file: !3, line: 2185, column: 11)
!7817 = distinct !DILexicalBlock(scope: !7813, file: !3, line: 2184, column: 5)
!7818 = !DILocation(line: 2185, column: 27, scope: !7816)
!7819 = !DILocation(line: 2186, column: 4, scope: !7816)
!7820 = !DILocation(line: 2186, column: 33, scope: !7816)
!7821 = !DILocation(line: 2186, column: 7, scope: !7816)
!7822 = !DILocation(line: 2187, column: 4, scope: !7816)
!7823 = !DILocation(line: 2187, column: 7, scope: !7816)
!7824 = !DILocation(line: 2185, column: 11, scope: !7817)
!7825 = !DILocation(line: 2189, column: 11, scope: !7826)
!7826 = distinct !DILexicalBlock(scope: !7816, file: !3, line: 2188, column: 2)
!7827 = !DILocation(line: 2189, column: 9, scope: !7826)
!7828 = !DILocation(line: 2190, column: 10, scope: !7826)
!7829 = !DILocation(line: 2190, column: 8, scope: !7826)
!7830 = !DILocation(line: 2191, column: 8, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7826, file: !3, line: 2191, column: 8)
!7832 = !DILocation(line: 2191, column: 62, scope: !7831)
!7833 = !DILocation(line: 2192, column: 8, scope: !7831)
!7834 = !DILocation(line: 2192, column: 12, scope: !7831)
!7835 = !DILocation(line: 2192, column: 65, scope: !7831)
!7836 = !DILocation(line: 2191, column: 8, scope: !7826)
!7837 = !DILocation(line: 2193, column: 6, scope: !7831)
!7838 = !DILocation(line: 2194, column: 2, scope: !7826)
!7839 = !DILocation(line: 2195, column: 5, scope: !7817)
!7840 = !DILocation(line: 2183, column: 45, scope: !7813)
!7841 = !DILocation(line: 2183, column: 43, scope: !7813)
!7842 = !DILocation(line: 2183, column: 3, scope: !7813)
!7843 = distinct !{!7843, !7814, !7844}
!7844 = !DILocation(line: 2195, column: 5, scope: !7809)
!7845 = !DILocation(line: 2196, column: 7, scope: !7846)
!7846 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 2196, column: 7)
!7847 = !DILocation(line: 2196, column: 11, scope: !7846)
!7848 = !DILocation(line: 2196, column: 7, scope: !7776)
!7849 = !DILocation(line: 2197, column: 5, scope: !7846)
!7850 = !DILocation(line: 2199, column: 3, scope: !7776)
!7851 = !DILocation(line: 2200, column: 6, scope: !7776)
!7852 = !DILocation(line: 2200, column: 9, scope: !7776)
!7853 = !DILocation(line: 2200, column: 19, scope: !7776)
!7854 = !DILocation(line: 2201, column: 20, scope: !7776)
!7855 = !DILocation(line: 2201, column: 6, scope: !7776)
!7856 = !DILocation(line: 2201, column: 9, scope: !7776)
!7857 = !DILocation(line: 2201, column: 18, scope: !7776)
!7858 = !DILocation(line: 2202, column: 13, scope: !7776)
!7859 = !DILocation(line: 2202, column: 6, scope: !7776)
!7860 = !DILocation(line: 2202, column: 11, scope: !7776)
!7861 = !DILocation(line: 2204, column: 3, scope: !7776)
!7862 = !DILocation(line: 2204, column: 10, scope: !7863)
!7863 = distinct !DILexicalBlock(scope: !7864, file: !3, line: 2204, column: 3)
!7864 = distinct !DILexicalBlock(scope: !7776, file: !3, line: 2204, column: 3)
!7865 = !DILocation(line: 2204, column: 3, scope: !7864)
!7866 = !DILocation(line: 2205, column: 9, scope: !7867)
!7867 = distinct !DILexicalBlock(scope: !7863, file: !3, line: 2205, column: 9)
!7868 = !DILocation(line: 2205, column: 25, scope: !7867)
!7869 = !DILocation(line: 2206, column: 2, scope: !7867)
!7870 = !DILocation(line: 2206, column: 31, scope: !7867)
!7871 = !DILocation(line: 2206, column: 5, scope: !7867)
!7872 = !DILocation(line: 2207, column: 2, scope: !7867)
!7873 = !DILocation(line: 2207, column: 5, scope: !7867)
!7874 = !DILocation(line: 2205, column: 9, scope: !7863)
!7875 = !DILocalVariable(name: "i", scope: !7876, file: !3, line: 2209, type: !1561)
!7876 = distinct !DILexicalBlock(scope: !7867, file: !3, line: 2208, column: 7)
!7877 = !DILocation(line: 2209, column: 23, scope: !7876)
!7878 = !DILocalVariable(name: "newt", scope: !7876, file: !3, line: 2210, type: !1640)
!7879 = !DILocation(line: 2210, column: 7, scope: !7876)
!7880 = !DILocalVariable(name: "t", scope: !7876, file: !3, line: 2210, type: !1640)
!7881 = !DILocation(line: 2210, column: 13, scope: !7876)
!7882 = !DILocalVariable(name: "context", scope: !7876, file: !3, line: 2210, type: !1640)
!7883 = !DILocation(line: 2210, column: 16, scope: !7876)
!7884 = !DILocation(line: 2212, column: 13, scope: !7876)
!7885 = !DILocation(line: 2212, column: 11, scope: !7876)
!7886 = !DILocation(line: 2212, column: 4, scope: !7876)
!7887 = !DILocation(line: 2213, column: 8, scope: !7876)
!7888 = !DILocation(line: 2213, column: 6, scope: !7876)
!7889 = !DILocation(line: 2214, column: 6, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2214, column: 6)
!7891 = !DILocation(line: 2214, column: 60, scope: !7890)
!7892 = !DILocation(line: 2215, column: 6, scope: !7890)
!7893 = !DILocation(line: 2215, column: 9, scope: !7890)
!7894 = !DILocation(line: 2215, column: 62, scope: !7890)
!7895 = !DILocation(line: 2214, column: 6, scope: !7876)
!7896 = !DILocation(line: 2216, column: 4, scope: !7890)
!7897 = !DILocation(line: 2218, column: 35, scope: !7876)
!7898 = !DILocation(line: 2218, column: 12, scope: !7876)
!7899 = !DILocation(line: 2218, column: 10, scope: !7876)
!7900 = !DILocation(line: 2219, column: 11, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2219, column: 2)
!7902 = !DILocation(line: 2219, column: 9, scope: !7901)
!7903 = !DILocation(line: 2219, column: 7, scope: !7901)
!7904 = !DILocation(line: 2219, column: 17, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7901, file: !3, line: 2219, column: 2)
!7906 = !DILocation(line: 2219, column: 2, scope: !7901)
!7907 = !DILocation(line: 2220, column: 8, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 2220, column: 8)
!7909 = !DILocation(line: 2220, column: 11, scope: !7908)
!7910 = !DILocation(line: 2220, column: 22, scope: !7908)
!7911 = !DILocation(line: 2220, column: 19, scope: !7908)
!7912 = !DILocation(line: 2220, column: 8, scope: !7905)
!7913 = !DILocation(line: 2221, column: 6, scope: !7908)
!7914 = !DILocation(line: 2219, column: 24, scope: !7905)
!7915 = !DILocation(line: 2219, column: 27, scope: !7905)
!7916 = !DILocation(line: 2219, column: 22, scope: !7905)
!7917 = !DILocation(line: 2219, column: 2, scope: !7905)
!7918 = distinct !{!7918, !7906, !7919}
!7919 = !DILocation(line: 2221, column: 6, scope: !7901)
!7920 = !DILocation(line: 2223, column: 6, scope: !7921)
!7921 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2223, column: 6)
!7922 = !DILocation(line: 2223, column: 8, scope: !7921)
!7923 = !DILocation(line: 2223, column: 6, scope: !7876)
!7924 = !DILocation(line: 2224, column: 4, scope: !7921)
!7925 = !DILocation(line: 2226, column: 17, scope: !7876)
!7926 = !DILocation(line: 2226, column: 20, scope: !7876)
!7927 = !DILocation(line: 2226, column: 5, scope: !7876)
!7928 = !DILocation(line: 2226, column: 8, scope: !7876)
!7929 = !DILocation(line: 2226, column: 15, scope: !7876)
!7930 = !DILocation(line: 2227, column: 17, scope: !7876)
!7931 = !DILocation(line: 2227, column: 20, scope: !7876)
!7932 = !DILocation(line: 2227, column: 5, scope: !7876)
!7933 = !DILocation(line: 2227, column: 8, scope: !7876)
!7934 = !DILocation(line: 2227, column: 15, scope: !7876)
!7935 = !DILocation(line: 2228, column: 19, scope: !7876)
!7936 = !DILocation(line: 2228, column: 5, scope: !7876)
!7937 = !DILocation(line: 2228, column: 8, scope: !7876)
!7938 = !DILocation(line: 2228, column: 17, scope: !7876)
!7939 = !DILocation(line: 2230, column: 39, scope: !7876)
!7940 = !DILocation(line: 2230, column: 49, scope: !7876)
!7941 = !DILocation(line: 2230, column: 27, scope: !7876)
!7942 = !DILocation(line: 2230, column: 25, scope: !7876)
!7943 = !DILocation(line: 2230, column: 2, scope: !7876)
!7944 = !DILocation(line: 2230, column: 18, scope: !7876)
!7945 = !DILocation(line: 2231, column: 2, scope: !7876)
!7946 = !DILocation(line: 2231, column: 9, scope: !7876)
!7947 = !DILocation(line: 2231, column: 31, scope: !7876)
!7948 = !DILocation(line: 2231, column: 35, scope: !7876)
!7949 = !DILocation(line: 2231, column: 34, scope: !7876)
!7950 = !DILocation(line: 0, scope: !7876)
!7951 = !DILocation(line: 2233, column: 13, scope: !7952)
!7952 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2232, column: 4)
!7953 = !DILocation(line: 2233, column: 11, scope: !7952)
!7954 = !DILocation(line: 2234, column: 10, scope: !7952)
!7955 = !DILocation(line: 2234, column: 8, scope: !7952)
!7956 = distinct !{!7956, !7945, !7957}
!7957 = !DILocation(line: 2235, column: 4, scope: !7876)
!7958 = !DILocation(line: 2236, column: 6, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2236, column: 6)
!7960 = !DILocation(line: 2237, column: 6, scope: !7959)
!7961 = !DILocation(line: 2237, column: 9, scope: !7959)
!7962 = !DILocation(line: 2237, column: 38, scope: !7959)
!7963 = !DILocation(line: 2238, column: 6, scope: !7959)
!7964 = !DILocation(line: 2238, column: 9, scope: !7959)
!7965 = !DILocation(line: 2239, column: 6, scope: !7959)
!7966 = !DILocation(line: 2239, column: 9, scope: !7959)
!7967 = !DILocation(line: 2239, column: 17, scope: !7959)
!7968 = !DILocation(line: 2239, column: 14, scope: !7959)
!7969 = !DILocation(line: 2240, column: 6, scope: !7959)
!7970 = !DILocation(line: 2240, column: 9, scope: !7959)
!7971 = !DILocation(line: 2240, column: 29, scope: !7959)
!7972 = !DILocation(line: 2240, column: 26, scope: !7959)
!7973 = !DILocation(line: 2236, column: 6, scope: !7876)
!7974 = !DILocation(line: 2241, column: 35, scope: !7959)
!7975 = !DILocation(line: 2241, column: 57, scope: !7959)
!7976 = !DILocation(line: 2241, column: 23, scope: !7959)
!7977 = !DILocation(line: 2241, column: 4, scope: !7959)
!7978 = !DILocation(line: 2241, column: 21, scope: !7959)
!7979 = !DILocation(line: 2243, column: 2, scope: !7876)
!7980 = !DILocation(line: 2244, column: 6, scope: !7981)
!7981 = distinct !DILexicalBlock(scope: !7876, file: !3, line: 2244, column: 6)
!7982 = !DILocation(line: 2244, column: 13, scope: !7981)
!7983 = !DILocation(line: 2244, column: 10, scope: !7981)
!7984 = !DILocation(line: 2244, column: 6, scope: !7876)
!7985 = !DILocation(line: 2245, column: 4, scope: !7981)
!7986 = !DILocation(line: 2246, column: 7, scope: !7876)
!7987 = !DILocation(line: 2204, column: 21, scope: !7863)
!7988 = !DILocation(line: 2204, column: 19, scope: !7863)
!7989 = !DILocation(line: 2204, column: 3, scope: !7863)
!7990 = distinct !{!7990, !7865, !7991}
!7991 = !DILocation(line: 2246, column: 7, scope: !7864)
!7992 = !DILocation(line: 2248, column: 27, scope: !7776)
!7993 = !DILocation(line: 2248, column: 30, scope: !7776)
!7994 = !DILocation(line: 2248, column: 3, scope: !7776)
!7995 = !DILocation(line: 2249, column: 1, scope: !7776)
!7996 = distinct !DISubprogram(name: "nesting_copy_decl", scope: !3, file: !3, line: 2124, type: !7997, scopeLine: 2125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!7997 = !DISubroutineType(types: !7998)
!7998 = !{!1640, !1640, !7999}
!7999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2907, size: 64)
!8000 = !DILocalVariable(name: "decl", arg: 1, scope: !7996, file: !3, line: 2124, type: !1640)
!8001 = !DILocation(line: 2124, column: 25, scope: !7996)
!8002 = !DILocalVariable(name: "id", arg: 2, scope: !7996, file: !3, line: 2124, type: !7999)
!8003 = !DILocation(line: 2124, column: 47, scope: !7996)
!8004 = !DILocalVariable(name: "nid", scope: !7996, file: !3, line: 2126, type: !2903)
!8005 = !DILocation(line: 2126, column: 34, scope: !7996)
!8006 = !DILocation(line: 2126, column: 74, scope: !7996)
!8007 = !DILocation(line: 2126, column: 40, scope: !7996)
!8008 = !DILocalVariable(name: "slot", scope: !7996, file: !3, line: 2127, type: !2360)
!8009 = !DILocation(line: 2127, column: 10, scope: !7996)
!8010 = !DILocation(line: 2127, column: 39, scope: !7996)
!8011 = !DILocation(line: 2127, column: 44, scope: !7996)
!8012 = !DILocation(line: 2127, column: 50, scope: !7996)
!8013 = !DILocation(line: 2127, column: 59, scope: !7996)
!8014 = !DILocation(line: 2127, column: 17, scope: !7996)
!8015 = !DILocation(line: 2129, column: 7, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !7996, file: !3, line: 2129, column: 7)
!8017 = !DILocation(line: 2129, column: 7, scope: !7996)
!8018 = !DILocation(line: 2130, column: 20, scope: !8016)
!8019 = !DILocation(line: 2130, column: 19, scope: !8016)
!8020 = !DILocation(line: 2130, column: 12, scope: !8016)
!8021 = !DILocation(line: 2130, column: 5, scope: !8016)
!8022 = !DILocation(line: 2132, column: 7, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !7996, file: !3, line: 2132, column: 7)
!8024 = !DILocation(line: 2132, column: 24, scope: !8023)
!8025 = !DILocation(line: 2132, column: 37, scope: !8023)
!8026 = !DILocation(line: 2132, column: 40, scope: !8023)
!8027 = !DILocation(line: 2132, column: 7, scope: !7996)
!8028 = !DILocalVariable(name: "new_decl", scope: !8029, file: !3, line: 2134, type: !1640)
!8029 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 2133, column: 5)
!8030 = !DILocation(line: 2134, column: 12, scope: !8029)
!8031 = !DILocation(line: 2134, column: 44, scope: !8029)
!8032 = !DILocation(line: 2134, column: 50, scope: !8029)
!8033 = !DILocation(line: 2134, column: 23, scope: !8029)
!8034 = !DILocation(line: 2136, column: 16, scope: !8029)
!8035 = !DILocation(line: 2136, column: 43, scope: !8029)
!8036 = !DILocation(line: 2136, column: 4, scope: !8029)
!8037 = !DILocation(line: 2135, column: 7, scope: !8029)
!8038 = !DILocation(line: 2136, column: 2, scope: !8029)
!8039 = !DILocation(line: 2137, column: 14, scope: !8029)
!8040 = !DILocation(line: 2137, column: 7, scope: !8029)
!8041 = !DILocation(line: 2140, column: 7, scope: !8042)
!8042 = distinct !DILexicalBlock(scope: !7996, file: !3, line: 2140, column: 7)
!8043 = !DILocation(line: 2140, column: 24, scope: !8042)
!8044 = !DILocation(line: 2141, column: 7, scope: !8042)
!8045 = !DILocation(line: 2141, column: 10, scope: !8042)
!8046 = !DILocation(line: 2141, column: 27, scope: !8042)
!8047 = !DILocation(line: 2142, column: 7, scope: !8042)
!8048 = !DILocation(line: 2142, column: 10, scope: !8042)
!8049 = !DILocation(line: 2142, column: 27, scope: !8042)
!8050 = !DILocation(line: 2140, column: 7, scope: !7996)
!8051 = !DILocation(line: 2143, column: 12, scope: !8042)
!8052 = !DILocation(line: 2143, column: 5, scope: !8042)
!8053 = !DILocation(line: 2145, column: 31, scope: !7996)
!8054 = !DILocation(line: 2145, column: 37, scope: !7996)
!8055 = !DILocation(line: 2145, column: 10, scope: !7996)
!8056 = !DILocation(line: 2145, column: 3, scope: !7996)
!8057 = !DILocation(line: 2146, column: 1, scope: !7996)
!8058 = distinct !DISubprogram(name: "contains_remapped_vars", scope: !3, file: !3, line: 2152, type: !3459, scopeLine: 2153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!8059 = !DILocalVariable(name: "tp", arg: 1, scope: !8058, file: !3, line: 2152, type: !1940)
!8060 = !DILocation(line: 2152, column: 31, scope: !8058)
!8061 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !8058, file: !3, line: 2152, type: !3461)
!8062 = !DILocation(line: 2152, column: 40, scope: !8058)
!8063 = !DILocalVariable(name: "data", arg: 3, scope: !8058, file: !3, line: 2152, type: !1630)
!8064 = !DILocation(line: 2152, column: 61, scope: !8058)
!8065 = !DILocalVariable(name: "root", scope: !8058, file: !3, line: 2154, type: !1561)
!8066 = !DILocation(line: 2154, column: 24, scope: !8058)
!8067 = !DILocation(line: 2154, column: 55, scope: !8058)
!8068 = !DILocation(line: 2154, column: 31, scope: !8058)
!8069 = !DILocalVariable(name: "t", scope: !8058, file: !3, line: 2155, type: !1640)
!8070 = !DILocation(line: 2155, column: 8, scope: !8058)
!8071 = !DILocation(line: 2155, column: 13, scope: !8058)
!8072 = !DILocation(line: 2155, column: 12, scope: !8058)
!8073 = !DILocalVariable(name: "slot", scope: !8058, file: !3, line: 2156, type: !2360)
!8074 = !DILocation(line: 2156, column: 10, scope: !8058)
!8075 = !DILocation(line: 2158, column: 7, scope: !8076)
!8076 = distinct !DILexicalBlock(scope: !8058, file: !3, line: 2158, column: 7)
!8077 = !DILocation(line: 2158, column: 7, scope: !8058)
!8078 = !DILocation(line: 2160, column: 8, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !8076, file: !3, line: 2159, column: 5)
!8080 = !DILocation(line: 2160, column: 22, scope: !8079)
!8081 = !DILocation(line: 2161, column: 36, scope: !8079)
!8082 = !DILocation(line: 2161, column: 42, scope: !8079)
!8083 = !DILocation(line: 2161, column: 51, scope: !8079)
!8084 = !DILocation(line: 2161, column: 14, scope: !8079)
!8085 = !DILocation(line: 2161, column: 12, scope: !8079)
!8086 = !DILocation(line: 2163, column: 11, scope: !8087)
!8087 = distinct !DILexicalBlock(scope: !8079, file: !3, line: 2163, column: 11)
!8088 = !DILocation(line: 2163, column: 11, scope: !8079)
!8089 = !DILocation(line: 2164, column: 17, scope: !8087)
!8090 = !DILocation(line: 2164, column: 16, scope: !8087)
!8091 = !DILocation(line: 2164, column: 9, scope: !8087)
!8092 = !DILocation(line: 2164, column: 2, scope: !8087)
!8093 = !DILocation(line: 2165, column: 5, scope: !8079)
!8094 = !DILocation(line: 2166, column: 3, scope: !8058)
!8095 = !DILocation(line: 2167, column: 1, scope: !8058)
!8096 = distinct !DISubprogram(name: "unnest_nesting_tree_1", scope: !3, file: !3, line: 2484, type: !4542, scopeLine: 2485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3198)
!8097 = !DILocalVariable(name: "root", arg: 1, scope: !8096, file: !3, line: 2484, type: !1561)
!8098 = !DILocation(line: 2484, column: 45, scope: !8096)
!8099 = !DILocalVariable(name: "node", scope: !8096, file: !3, line: 2486, type: !2913)
!8100 = !DILocation(line: 2486, column: 23, scope: !8096)
!8101 = !DILocation(line: 2486, column: 43, scope: !8096)
!8102 = !DILocation(line: 2486, column: 49, scope: !8096)
!8103 = !DILocation(line: 2486, column: 30, scope: !8096)
!8104 = !DILocation(line: 2490, column: 7, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2490, column: 7)
!8106 = !DILocation(line: 2490, column: 13, scope: !8105)
!8107 = !DILocation(line: 2490, column: 7, scope: !8096)
!8108 = !DILocation(line: 2492, column: 41, scope: !8109)
!8109 = distinct !DILexicalBlock(scope: !8105, file: !3, line: 2491, column: 5)
!8110 = !DILocation(line: 2492, column: 47, scope: !8109)
!8111 = !DILocation(line: 2492, column: 28, scope: !8109)
!8112 = !DILocation(line: 2492, column: 8, scope: !8109)
!8113 = !DILocation(line: 2493, column: 34, scope: !8109)
!8114 = !DILocation(line: 2493, column: 40, scope: !8109)
!8115 = !DILocation(line: 2493, column: 8, scope: !8109)
!8116 = !DILocation(line: 2494, column: 5, scope: !8109)
!8117 = !DILocation(line: 2495, column: 1, scope: !8096)
