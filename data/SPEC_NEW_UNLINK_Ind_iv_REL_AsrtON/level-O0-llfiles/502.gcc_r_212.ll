; ModuleID = 'loop-invariant.c'
source_filename = "loop-invariant.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.gimple_seq_d = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.invariant = type { i32, i32, %struct.rtx_def*, i32, %struct.def*, %struct.rtx_def*, i8, i8, i8, i32, %struct.bitmap_head_def*, i32 }
%struct.def = type { %struct.use*, i32, i32, i32 }
%struct.use = type { %struct.rtx_def**, %struct.rtx_def*, i32, %struct.use* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.VEC_invariant_p_heap = type { %struct.VEC_invariant_p_base }
%struct.VEC_invariant_p_base = type { i32, i32, [1 x %struct.invariant*] }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.loop_data = type { %struct.loop*, i8, [27 x i32], %struct.bitmap_head_def, %struct.bitmap_head_def }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.df_artificial_ref = type { %struct.df_base_ref, %struct.basic_block_def* }
%struct.invariant_expr_entry = type { %struct.invariant*, %struct.rtx_def*, i32, i32 }

@flag_ira_loop_pressure = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@curr_loop = internal global %struct.loop* null, align 8, !dbg !0
@compiler_params = external dso_local global %struct.param_info*, align 8
@invariant_table = internal global %struct.invariant** null, align 8, !dbg !2116
@invariant_table_size = internal global i32 0, align 4, !dbg !2133
@reg_obstack = external dso_local global %struct.bitmap_obstack, align 8
@curr_regs_live = internal global %struct.bitmap_head_def zeroinitializer, align 8, !dbg !2118
@cfun = external dso_local global %struct.function*, align 8
@ira_reg_class_cover_size = external dso_local global i32, align 4
@curr_reg_pressure = internal global [27 x i32] zeroinitializer, align 16, !dbg !2120
@ira_reg_class_cover = external dso_local global [27 x i32], align 16
@n_regs_set = internal global i32 0, align 4, !dbg !2122
@regs_set = internal global [106 x %struct.rtx_def*] zeroinitializer, align 16, !dbg !2124
@flag_ira_region = external dso_local global i32, align 4
@.str = private unnamed_addr constant [47 x i8] c"\0A  Loop %d (parent %d, header bb%d, depth %d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"\0A    ref. regnos:\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"\0A    live regnos:\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"\0A    Pressure:\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c" %s=%d\00", align 1
@reg_class_names = external dso_local global [0 x i8*], align 8
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@df = external dso_local global %struct.df*, align 8
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@ira_reg_class_nregs = external dso_local global [27 x [87 x i32]], align 16
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@ira_no_alloc_regs = external dso_local global i64, align 8
@eliminable_regset = external dso_local global i64, align 8
@ira_class_translate = external dso_local global [27 x i32], align 16
@regclass_map = external dso_local constant [53 x i32], align 16
@actual_stamp = internal global i32 0, align 4, !dbg !2129
@invariants = internal global %struct.VEC_invariant_p_heap* null, align 8, !dbg !2131
@.str.7 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.9 = private unnamed_addr constant [42 x i8] c"*****starting processing of loop  ******\0A\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"*****ending processing of loop  ******\0A\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"loop-invariant.c\00", align 1
@word_mode = external dso_local global i32, align 4
@.str.12 = private unnamed_addr constant [55 x i8] c"Set in insn %d is invariant (%d), cost %d, depends on \00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [45 x i8] c"Invariant %d is equivalent to invariant %d.\0A\00", align 1
@ira_available_class_regs = external dso_local global [27 x i32], align 16
@ix86_isa_flags = external dso_local global i32, align 4
@ix86_fpmath = external dso_local global i32, align 4
@.str.15 = private unnamed_addr constant [41 x i8] c"Decided to move invariant %d -- gain %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [40 x i8] c"Decided to move dependent invariant %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [29 x i8] c"Failed to move invariant %d\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @move_loop_invariants() #0 !dbg !2139 {
entry:
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2143, metadata !DIExpression()), !dbg !2144
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2145, metadata !DIExpression()), !dbg !2151
  %0 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !2152
  %tobool = icmp ne i32 %0, 0, !dbg !2152
  br i1 %tobool, label %if.then, label %if.end, !dbg !2154

if.then:                                          ; preds = %entry
  call void @df_analyze(), !dbg !2155
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2157
  call void @ira_set_pseudo_classes(%struct._IO_FILE* %1), !dbg !2158
  call void @calculate_loop_reg_pressure(), !dbg !2159
  br label %if.end, !dbg !2160

if.end:                                           ; preds = %if.then, %entry
  %call = call i32 @df_set_flags(i32 36), !dbg !2161
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !2162
  br label %for.cond, !dbg !2162

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2164
  %tobool1 = icmp ne %struct.loop* %2, null, !dbg !2162
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2162

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2166
  store %struct.loop* %3, %struct.loop** @curr_loop, align 8, !dbg !2168
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2169
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 6, !dbg !2171
  %5 = load i32, i32* %num_nodes, align 4, !dbg !2171
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !2172
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 112, !dbg !2172
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !2172
  %7 = load i32, i32* %value, align 8, !dbg !2172
  %cmp = icmp ule i32 %5, %7, !dbg !2173
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !2174

if.then2:                                         ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2175
  call void @move_single_loop_invariants(%struct.loop* %8), !dbg !2176
  br label %if.end3, !dbg !2176

if.end3:                                          ; preds = %if.then2, %for.body
  br label %for.inc, !dbg !2177

for.inc:                                          ; preds = %if.end3
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2164
  br label %for.cond, !dbg !2164, !llvm.loop !2178

for.end:                                          ; preds = %for.cond
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2180
  br label %for.cond4, !dbg !2180

for.cond4:                                        ; preds = %for.inc7, %for.end
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2182
  %tobool5 = icmp ne %struct.loop* %9, null, !dbg !2180
  br i1 %tobool5, label %for.body6, label %for.end8, !dbg !2180

for.body6:                                        ; preds = %for.cond4
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2184
  call void @free_loop_data(%struct.loop* %10), !dbg !2186
  br label %for.inc7, !dbg !2187

for.inc7:                                         ; preds = %for.body6
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2182
  br label %for.cond4, !dbg !2182, !llvm.loop !2188

for.end8:                                         ; preds = %for.cond4
  %11 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !2190
  %tobool9 = icmp ne i32 %11, 0, !dbg !2190
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !2192

if.then10:                                        ; preds = %for.end8
  call void @free_reg_info(), !dbg !2193
  br label %if.end11, !dbg !2193

if.end11:                                         ; preds = %if.then10, %for.end8
  %12 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !2194
  %13 = bitcast %struct.invariant** %12 to i8*, !dbg !2194
  call void @free(i8* %13), !dbg !2195
  store %struct.invariant** null, %struct.invariant*** @invariant_table, align 8, !dbg !2196
  store i32 0, i32* @invariant_table_size, align 4, !dbg !2197
  ret void, !dbg !2198
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @df_analyze() #2

declare dso_local void @ira_set_pseudo_classes(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @calculate_loop_reg_pressure() #0 !dbg !2199 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %parent = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %note = alloca %struct.rtx_def*, align 8
  %cover_class = alloca i32, align 4
  %nregs = alloca i32, align 4
  %cover_class185 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2200, metadata !DIExpression()), !dbg !2201
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2202, metadata !DIExpression()), !dbg !2203
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !2204, metadata !DIExpression()), !dbg !2212
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2213, metadata !DIExpression()), !dbg !2214
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2215, metadata !DIExpression()), !dbg !2216
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !2217, metadata !DIExpression()), !dbg !2218
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2219, metadata !DIExpression()), !dbg !2220
  call void @llvm.dbg.declare(metadata %struct.loop** %parent, metadata !2221, metadata !DIExpression()), !dbg !2222
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2223, metadata !DIExpression()), !dbg !2224
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2225
  br label %for.cond, !dbg !2225

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2227
  %tobool = icmp ne %struct.loop* %0, null, !dbg !2225
  br i1 %tobool, label %for.body, label %for.end, !dbg !2225

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2229
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 10, !dbg !2231
  %2 = load i8*, i8** %aux, align 8, !dbg !2231
  %cmp = icmp eq i8* %2, null, !dbg !2232
  br i1 %cmp, label %if.then, label %if.end, !dbg !2233

if.then:                                          ; preds = %for.body
  %call = call i8* @xcalloc(i64 1, i64 184), !dbg !2234
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2236
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 10, !dbg !2237
  store i8* %call, i8** %aux1, align 8, !dbg !2238
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2239
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 10, !dbg !2239
  %5 = load i8*, i8** %aux2, align 8, !dbg !2239
  %6 = bitcast i8* %5 to %struct.loop_data*, !dbg !2239
  %regs_ref = getelementptr inbounds %struct.loop_data, %struct.loop_data* %6, i32 0, i32 3, !dbg !2239
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %regs_ref, %struct.bitmap_obstack* @reg_obstack), !dbg !2239
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2240
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 10, !dbg !2240
  %8 = load i8*, i8** %aux3, align 8, !dbg !2240
  %9 = bitcast i8* %8 to %struct.loop_data*, !dbg !2240
  %regs_live = getelementptr inbounds %struct.loop_data, %struct.loop_data* %9, i32 0, i32 4, !dbg !2240
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %regs_live, %struct.bitmap_obstack* @reg_obstack), !dbg !2240
  br label %if.end, !dbg !2241

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2242

for.inc:                                          ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2227
  br label %for.cond, !dbg !2227, !llvm.loop !2243

for.end:                                          ; preds = %for.cond
  call void @ira_setup_eliminable_regset(), !dbg !2245
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* @curr_regs_live, %struct.bitmap_obstack* @reg_obstack), !dbg !2246
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2247
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !2247
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2247
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2247
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !2247
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2247
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !2247
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2247
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !2247
  br label %for.cond4, !dbg !2247

for.cond4:                                        ; preds = %for.inc118, %for.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2249
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2249
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !2249
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !2249
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !2249
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !2249
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2249
  %cmp7 = icmp ne %struct.basic_block_def* %14, %17, !dbg !2249
  br i1 %cmp7, label %for.body8, label %for.end120, !dbg !2247

for.body8:                                        ; preds = %for.cond4
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2251
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 3, !dbg !2253
  %19 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2253
  store %struct.loop* %19, %struct.loop** @curr_loop, align 8, !dbg !2254
  %20 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !2255
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2257
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !2257
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 4, !dbg !2257
  %22 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2257
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %22, i32 0, i32 3, !dbg !2258
  %23 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2258
  %cmp10 = icmp eq %struct.loop* %20, %23, !dbg !2259
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !2260

if.then11:                                        ; preds = %for.body8
  br label %for.inc118, !dbg !2261

if.end12:                                         ; preds = %for.body8
  %24 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !2262
  store %struct.loop* %24, %struct.loop** %loop, align 8, !dbg !2264
  br label %for.cond13, !dbg !2265

for.cond13:                                       ; preds = %for.inc23, %if.end12
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2266
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2268
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !2268
  %x_current_loops15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 4, !dbg !2268
  %27 = load %struct.loops*, %struct.loops** %x_current_loops15, align 8, !dbg !2268
  %tree_root16 = getelementptr inbounds %struct.loops, %struct.loops* %27, i32 0, i32 3, !dbg !2269
  %28 = load %struct.loop*, %struct.loop** %tree_root16, align 8, !dbg !2269
  %cmp17 = icmp ne %struct.loop* %25, %28, !dbg !2270
  br i1 %cmp17, label %for.body18, label %for.end25, !dbg !2271

for.body18:                                       ; preds = %for.cond13
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2272
  %aux19 = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 10, !dbg !2272
  %30 = load i8*, i8** %aux19, align 8, !dbg !2272
  %31 = bitcast i8* %30 to %struct.loop_data*, !dbg !2272
  %regs_live20 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %31, i32 0, i32 4, !dbg !2273
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2274
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !2274
  %33 = load i32, i32* %index, align 8, !dbg !2274
  %call21 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %33), !dbg !2274
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call21, i32 0, i32 2, !dbg !2274
  %34 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !2274
  %call22 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %regs_live20, %struct.bitmap_head_def* %34), !dbg !2275
  br label %for.inc23, !dbg !2275

for.inc23:                                        ; preds = %for.body18
  %35 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2276
  %call24 = call %struct.loop* @loop_outer(%struct.loop* %35), !dbg !2277
  store %struct.loop* %call24, %struct.loop** %loop, align 8, !dbg !2278
  br label %for.cond13, !dbg !2279, !llvm.loop !2280

for.end25:                                        ; preds = %for.cond13
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2282
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !2282
  %37 = load i32, i32* %index26, align 8, !dbg !2282
  %call27 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %37), !dbg !2282
  %in28 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call27, i32 0, i32 2, !dbg !2282
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in28, align 8, !dbg !2282
  call void @bitmap_copy(%struct.bitmap_head_def* @curr_regs_live, %struct.bitmap_head_def* %38), !dbg !2283
  store i32 0, i32* %i, align 4, !dbg !2284
  br label %for.cond29, !dbg !2286

for.cond29:                                       ; preds = %for.inc34, %for.end25
  %39 = load i32, i32* %i, align 4, !dbg !2287
  %40 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !2289
  %cmp30 = icmp slt i32 %39, %40, !dbg !2290
  br i1 %cmp30, label %for.body31, label %for.end35, !dbg !2291

for.body31:                                       ; preds = %for.cond29
  %41 = load i32, i32* %i, align 4, !dbg !2292
  %idxprom = sext i32 %41 to i64, !dbg !2293
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !2293
  %42 = load i32, i32* %arrayidx, align 4, !dbg !2293
  %idxprom32 = zext i32 %42 to i64, !dbg !2294
  %arrayidx33 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom32, !dbg !2294
  store i32 0, i32* %arrayidx33, align 4, !dbg !2295
  br label %for.inc34, !dbg !2294

for.inc34:                                        ; preds = %for.body31
  %43 = load i32, i32* %i, align 4, !dbg !2296
  %inc = add nsw i32 %43, 1, !dbg !2296
  store i32 %inc, i32* %i, align 4, !dbg !2296
  br label %for.cond29, !dbg !2297, !llvm.loop !2298

for.end35:                                        ; preds = %for.cond29
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* @curr_regs_live, i32 0, i32* %j), !dbg !2300
  br label %for.cond36, !dbg !2300

for.cond36:                                       ; preds = %for.inc40, %for.end35
  %call37 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2302
  %tobool38 = icmp ne i8 %call37, 0, !dbg !2300
  br i1 %tobool38, label %for.body39, label %for.end41, !dbg !2300

for.body39:                                       ; preds = %for.cond36
  %44 = load i32, i32* %j, align 4, !dbg !2304
  call void @change_pressure(i32 %44, i8 zeroext 1), !dbg !2305
  br label %for.inc40, !dbg !2305

for.inc40:                                        ; preds = %for.body39
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2302
  br label %for.cond36, !dbg !2302, !llvm.loop !2306

for.end41:                                        ; preds = %for.cond36
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2308
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !2308
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2308
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2308
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 0, !dbg !2308
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !2308
  store %struct.rtx_def* %47, %struct.rtx_def** %insn, align 8, !dbg !2308
  br label %for.cond42, !dbg !2308

for.cond42:                                       ; preds = %for.inc112, %for.end41
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2310
  %tobool43 = icmp ne %struct.rtx_def* %48, null, !dbg !2310
  br i1 %tobool43, label %land.rhs, label %land.end, !dbg !2310

land.rhs:                                         ; preds = %for.cond42
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2310
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2310
  %il44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 7, !dbg !2310
  %rtl45 = bitcast %union.basic_block_il_dependent* %il44 to %struct.rtl_bb_info**, !dbg !2310
  %51 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl45, align 8, !dbg !2310
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %51, i32 0, i32 1, !dbg !2310
  %52 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2310
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !2310
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2310
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2310
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !2310
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2310
  %cmp47 = icmp ne %struct.rtx_def* %49, %53, !dbg !2310
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond42
  %54 = phi i1 [ false, %for.cond42 ], [ %cmp47, %land.rhs ], !dbg !2312
  br i1 %54, label %for.body48, label %for.end117, !dbg !2308

for.body48:                                       ; preds = %land.end
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2313
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !2313
  %bf.load = load i32, i32* %56, align 8, !dbg !2313
  %bf.clear = and i32 %bf.load, 65535, !dbg !2313
  %cmp49 = icmp eq i32 %bf.clear, 8, !dbg !2313
  br i1 %cmp49, label %land.lhs.true, label %lor.lhs.false, !dbg !2313

lor.lhs.false:                                    ; preds = %for.body48
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2313
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !2313
  %bf.load50 = load i32, i32* %58, align 8, !dbg !2313
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !2313
  %cmp52 = icmp eq i32 %bf.clear51, 7, !dbg !2313
  br i1 %cmp52, label %land.lhs.true, label %lor.lhs.false53, !dbg !2313

lor.lhs.false53:                                  ; preds = %lor.lhs.false
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2313
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !2313
  %bf.load54 = load i32, i32* %60, align 8, !dbg !2313
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !2313
  %cmp56 = icmp eq i32 %bf.clear55, 9, !dbg !2313
  br i1 %cmp56, label %land.lhs.true, label %lor.lhs.false57, !dbg !2313

lor.lhs.false57:                                  ; preds = %lor.lhs.false53
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2313
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !2313
  %bf.load58 = load i32, i32* %62, align 8, !dbg !2313
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !2313
  %cmp60 = icmp eq i32 %bf.clear59, 10, !dbg !2313
  br i1 %cmp60, label %land.lhs.true, label %if.then64, !dbg !2313

land.lhs.true:                                    ; preds = %lor.lhs.false57, %lor.lhs.false53, %lor.lhs.false, %for.body48
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2313
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !2313
  %bf.load61 = load i32, i32* %64, align 8, !dbg !2313
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !2313
  %cmp63 = icmp eq i32 %bf.clear62, 7, !dbg !2313
  br i1 %cmp63, label %if.then64, label %if.end65, !dbg !2316

if.then64:                                        ; preds = %land.lhs.true, %lor.lhs.false57
  br label %for.inc112, !dbg !2317

if.end65:                                         ; preds = %land.lhs.true
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2318
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !2318
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !2318
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 5, !dbg !2318
  %rt_rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !2318
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx69, align 8, !dbg !2318
  call void @mark_ref_regs(%struct.rtx_def* %66), !dbg !2319
  store i32 0, i32* @n_regs_set, align 4, !dbg !2320
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2321
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !2321
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !2321
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 5, !dbg !2321
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !2321
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx73, align 8, !dbg !2321
  call void @note_stores(%struct.rtx_def* %68, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @mark_reg_clobber, i8* null), !dbg !2322
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2323
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !2323
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !2323
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 7, !dbg !2323
  %rt_rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**, !dbg !2323
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx77, align 8, !dbg !2323
  store %struct.rtx_def* %70, %struct.rtx_def** %link, align 8, !dbg !2325
  br label %for.cond78, !dbg !2326

for.cond78:                                       ; preds = %for.inc90, %if.end65
  %71 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !2327
  %tobool79 = icmp ne %struct.rtx_def* %71, null, !dbg !2329
  br i1 %tobool79, label %for.body80, label %for.end95, !dbg !2329

for.body80:                                       ; preds = %for.cond78
  %72 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !2330
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !2330
  %bf.load81 = load i32, i32* %73, align 8, !dbg !2330
  %bf.lshr = lshr i32 %bf.load81, 16, !dbg !2330
  %bf.clear82 = and i32 %bf.lshr, 255, !dbg !2330
  %cmp83 = icmp eq i32 %bf.clear82, 1, !dbg !2332
  br i1 %cmp83, label %if.then84, label %if.end89, !dbg !2333

if.then84:                                        ; preds = %for.body80
  %74 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !2334
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !2334
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !2334
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !2334
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !2334
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !2334
  call void @mark_reg_death(%struct.rtx_def* %75), !dbg !2335
  br label %if.end89, !dbg !2335

if.end89:                                         ; preds = %if.then84, %for.body80
  br label %for.inc90, !dbg !2336

for.inc90:                                        ; preds = %if.end89
  %76 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !2337
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !2337
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !2337
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !2337
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !2337
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !2337
  store %struct.rtx_def* %77, %struct.rtx_def** %link, align 8, !dbg !2338
  br label %for.cond78, !dbg !2339, !llvm.loop !2340

for.end95:                                        ; preds = %for.cond78
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2342
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !2342
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !2342
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 5, !dbg !2342
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !2342
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !2342
  call void @note_stores(%struct.rtx_def* %79, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @mark_reg_store, i8* null), !dbg !2343
  br label %while.cond, !dbg !2344

while.cond:                                       ; preds = %if.end107, %if.then106, %for.end95
  %80 = load i32, i32* @n_regs_set, align 4, !dbg !2345
  %dec = add nsw i32 %80, -1, !dbg !2345
  store i32 %dec, i32* @n_regs_set, align 4, !dbg !2345
  %cmp100 = icmp sgt i32 %80, 0, !dbg !2346
  br i1 %cmp100, label %while.body, label %while.end, !dbg !2344

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !2347, metadata !DIExpression()), !dbg !2349
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2350
  %82 = load i32, i32* @n_regs_set, align 4, !dbg !2351
  %idxprom101 = sext i32 %82 to i64, !dbg !2351
  %arrayidx102 = getelementptr inbounds [106 x %struct.rtx_def*], [106 x %struct.rtx_def*]* @regs_set, i64 0, i64 %idxprom101, !dbg !2351
  %83 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx102, align 8, !dbg !2351
  %call103 = call i32 @rhs_regno(%struct.rtx_def* %83), !dbg !2351
  %call104 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %81, i32 6, i32 %call103), !dbg !2352
  store %struct.rtx_def* %call104, %struct.rtx_def** %note, align 8, !dbg !2349
  %84 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2353
  %tobool105 = icmp ne %struct.rtx_def* %84, null, !dbg !2353
  br i1 %tobool105, label %if.end107, label %if.then106, !dbg !2355

if.then106:                                       ; preds = %while.body
  br label %while.cond, !dbg !2356, !llvm.loop !2357

if.end107:                                        ; preds = %while.body
  %85 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !2359
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !2359
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !2359
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 0, !dbg !2359
  %rt_rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**, !dbg !2359
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx111, align 8, !dbg !2359
  call void @mark_reg_death(%struct.rtx_def* %86), !dbg !2360
  br label %while.cond, !dbg !2344, !llvm.loop !2357

while.end:                                        ; preds = %while.cond
  br label %for.inc112, !dbg !2361

for.inc112:                                       ; preds = %while.end, %if.then64
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2310
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !2310
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !2310
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 2, !dbg !2310
  %rt_rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**, !dbg !2310
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx116, align 8, !dbg !2310
  store %struct.rtx_def* %88, %struct.rtx_def** %insn, align 8, !dbg !2310
  br label %for.cond42, !dbg !2310, !llvm.loop !2362

for.end117:                                       ; preds = %land.end
  br label %for.inc118, !dbg !2364

for.inc118:                                       ; preds = %for.end117, %if.then11
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2249
  %next_bb119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 6, !dbg !2249
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb119, align 8, !dbg !2249
  store %struct.basic_block_def* %90, %struct.basic_block_def** %bb, align 8, !dbg !2249
  br label %for.cond4, !dbg !2249, !llvm.loop !2365

for.end120:                                       ; preds = %for.cond4
  call void @bitmap_clear(%struct.bitmap_head_def* @curr_regs_live), !dbg !2367
  %91 = load i32, i32* @flag_ira_region, align 4, !dbg !2368
  %cmp121 = icmp eq i32 %91, 2, !dbg !2370
  br i1 %cmp121, label %if.then124, label %lor.lhs.false122, !dbg !2371

lor.lhs.false122:                                 ; preds = %for.end120
  %92 = load i32, i32* @flag_ira_region, align 4, !dbg !2372
  %cmp123 = icmp eq i32 %92, 1, !dbg !2373
  br i1 %cmp123, label %if.then124, label %if.end148, !dbg !2374

if.then124:                                       ; preds = %lor.lhs.false122, %for.end120
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2375
  br label %for.cond125, !dbg !2375

for.cond125:                                      ; preds = %for.inc146, %if.then124
  %93 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2377
  %tobool126 = icmp ne %struct.loop* %93, null, !dbg !2375
  br i1 %tobool126, label %for.body127, label %for.end147, !dbg !2375

for.body127:                                      ; preds = %for.cond125
  %94 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2379
  %aux128 = getelementptr inbounds %struct.loop, %struct.loop* %94, i32 0, i32 10, !dbg !2379
  %95 = load i8*, i8** %aux128, align 8, !dbg !2379
  %96 = bitcast i8* %95 to %struct.loop_data*, !dbg !2379
  %regs_live129 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %96, i32 0, i32 4, !dbg !2379
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %regs_live129, i32 0, i32* %j), !dbg !2379
  br label %for.cond130, !dbg !2379

for.cond130:                                      ; preds = %for.inc144, %for.body127
  %call131 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2382
  %tobool132 = icmp ne i8 %call131, 0, !dbg !2379
  br i1 %tobool132, label %for.body133, label %for.end145, !dbg !2379

for.body133:                                      ; preds = %for.cond130
  %97 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2384
  %aux134 = getelementptr inbounds %struct.loop, %struct.loop* %97, i32 0, i32 10, !dbg !2384
  %98 = load i8*, i8** %aux134, align 8, !dbg !2384
  %99 = bitcast i8* %98 to %struct.loop_data*, !dbg !2384
  %regs_ref135 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %99, i32 0, i32 3, !dbg !2386
  %100 = load i32, i32* %j, align 4, !dbg !2387
  %call136 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %regs_ref135, i32 %100), !dbg !2388
  %tobool137 = icmp ne i32 %call136, 0, !dbg !2388
  br i1 %tobool137, label %if.end143, label %if.then138, !dbg !2389

if.then138:                                       ; preds = %for.body133
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !2390, metadata !DIExpression()), !dbg !2392
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !2393, metadata !DIExpression()), !dbg !2394
  %101 = load i32, i32* %j, align 4, !dbg !2395
  %call139 = call i32 @get_regno_cover_class(i32 %101, i32* %nregs), !dbg !2396
  store i32 %call139, i32* %cover_class, align 4, !dbg !2397
  %102 = load i32, i32* %nregs, align 4, !dbg !2398
  %103 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2399
  %aux140 = getelementptr inbounds %struct.loop, %struct.loop* %103, i32 0, i32 10, !dbg !2399
  %104 = load i8*, i8** %aux140, align 8, !dbg !2399
  %105 = bitcast i8* %104 to %struct.loop_data*, !dbg !2399
  %max_reg_pressure = getelementptr inbounds %struct.loop_data, %struct.loop_data* %105, i32 0, i32 2, !dbg !2400
  %106 = load i32, i32* %cover_class, align 4, !dbg !2401
  %idxprom141 = zext i32 %106 to i64, !dbg !2399
  %arrayidx142 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure, i64 0, i64 %idxprom141, !dbg !2399
  %107 = load i32, i32* %arrayidx142, align 4, !dbg !2402
  %sub = sub nsw i32 %107, %102, !dbg !2402
  store i32 %sub, i32* %arrayidx142, align 4, !dbg !2402
  br label %if.end143, !dbg !2403

if.end143:                                        ; preds = %if.then138, %for.body133
  br label %for.inc144, !dbg !2404

for.inc144:                                       ; preds = %if.end143
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2382
  br label %for.cond130, !dbg !2382, !llvm.loop !2405

for.end145:                                       ; preds = %for.cond130
  br label %for.inc146, !dbg !2407

for.inc146:                                       ; preds = %for.end145
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2377
  br label %for.cond125, !dbg !2377, !llvm.loop !2408

for.end147:                                       ; preds = %for.cond125
  br label %if.end148, !dbg !2409

if.end148:                                        ; preds = %for.end147, %lor.lhs.false122
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2410
  %cmp149 = icmp eq %struct._IO_FILE* %108, null, !dbg !2412
  br i1 %cmp149, label %if.then150, label %if.end151, !dbg !2413

if.then150:                                       ; preds = %if.end148
  br label %for.end207, !dbg !2414

if.end151:                                        ; preds = %if.end148
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2415
  br label %for.cond152, !dbg !2415

for.cond152:                                      ; preds = %for.inc206, %if.end151
  %109 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2417
  %tobool153 = icmp ne %struct.loop* %109, null, !dbg !2415
  br i1 %tobool153, label %for.body154, label %for.end207, !dbg !2415

for.body154:                                      ; preds = %for.cond152
  %110 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2419
  %call155 = call %struct.loop* @loop_outer(%struct.loop* %110), !dbg !2421
  store %struct.loop* %call155, %struct.loop** %parent, align 8, !dbg !2422
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2423
  %112 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2424
  %num = getelementptr inbounds %struct.loop, %struct.loop* %112, i32 0, i32 0, !dbg !2425
  %113 = load i32, i32* %num, align 8, !dbg !2425
  %114 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !2426
  %cmp156 = icmp eq %struct.loop* %114, null, !dbg !2427
  br i1 %cmp156, label %cond.true, label %cond.false, !dbg !2426

cond.true:                                        ; preds = %for.body154
  br label %cond.end, !dbg !2426

cond.false:                                       ; preds = %for.body154
  %115 = load %struct.loop*, %struct.loop** %parent, align 8, !dbg !2428
  %num157 = getelementptr inbounds %struct.loop, %struct.loop* %115, i32 0, i32 0, !dbg !2429
  %116 = load i32, i32* %num157, align 8, !dbg !2429
  br label %cond.end, !dbg !2426

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %116, %cond.false ], !dbg !2426
  %117 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2430
  %header = getelementptr inbounds %struct.loop, %struct.loop* %117, i32 0, i32 2, !dbg !2431
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2431
  %index158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 9, !dbg !2432
  %119 = load i32, i32* %index158, align 8, !dbg !2432
  %120 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2433
  %call159 = call i32 @loop_depth(%struct.loop* %120), !dbg !2434
  %call160 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 %113, i32 %cond, i32 %119, i32 %call159), !dbg !2435
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2436
  %call161 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0)), !dbg !2437
  %122 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2438
  %aux162 = getelementptr inbounds %struct.loop, %struct.loop* %122, i32 0, i32 10, !dbg !2438
  %123 = load i8*, i8** %aux162, align 8, !dbg !2438
  %124 = bitcast i8* %123 to %struct.loop_data*, !dbg !2438
  %regs_ref163 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %124, i32 0, i32 3, !dbg !2438
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %regs_ref163, i32 0, i32* %j), !dbg !2438
  br label %for.cond164, !dbg !2438

for.cond164:                                      ; preds = %for.inc169, %cond.end
  %call165 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2440
  %tobool166 = icmp ne i8 %call165, 0, !dbg !2438
  br i1 %tobool166, label %for.body167, label %for.end170, !dbg !2438

for.body167:                                      ; preds = %for.cond164
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2442
  %126 = load i32, i32* %j, align 4, !dbg !2443
  %call168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %126), !dbg !2444
  br label %for.inc169, !dbg !2444

for.inc169:                                       ; preds = %for.body167
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2440
  br label %for.cond164, !dbg !2440, !llvm.loop !2445

for.end170:                                       ; preds = %for.cond164
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2447
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0)), !dbg !2448
  %128 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2449
  %aux172 = getelementptr inbounds %struct.loop, %struct.loop* %128, i32 0, i32 10, !dbg !2449
  %129 = load i8*, i8** %aux172, align 8, !dbg !2449
  %130 = bitcast i8* %129 to %struct.loop_data*, !dbg !2449
  %regs_live173 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %130, i32 0, i32 4, !dbg !2449
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %regs_live173, i32 0, i32* %j), !dbg !2449
  br label %for.cond174, !dbg !2449

for.cond174:                                      ; preds = %for.inc179, %for.end170
  %call175 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2451
  %tobool176 = icmp ne i8 %call175, 0, !dbg !2449
  br i1 %tobool176, label %for.body177, label %for.end180, !dbg !2449

for.body177:                                      ; preds = %for.cond174
  %131 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2453
  %132 = load i32, i32* %j, align 4, !dbg !2454
  %call178 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %131, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i32 %132), !dbg !2455
  br label %for.inc179, !dbg !2455

for.inc179:                                       ; preds = %for.body177
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !2451
  br label %for.cond174, !dbg !2451, !llvm.loop !2456

for.end180:                                       ; preds = %for.cond174
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2458
  %call181 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0)), !dbg !2459
  store i32 0, i32* %i, align 4, !dbg !2460
  br label %for.cond182, !dbg !2462

for.cond182:                                      ; preds = %for.inc202, %for.end180
  %134 = load i32, i32* %i, align 4, !dbg !2463
  %135 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !2465
  %cmp183 = icmp slt i32 %134, %135, !dbg !2466
  br i1 %cmp183, label %for.body184, label %for.end204, !dbg !2467

for.body184:                                      ; preds = %for.cond182
  call void @llvm.dbg.declare(metadata i32* %cover_class185, metadata !2468, metadata !DIExpression()), !dbg !2470
  %136 = load i32, i32* %i, align 4, !dbg !2471
  %idxprom186 = sext i32 %136 to i64, !dbg !2472
  %arrayidx187 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom186, !dbg !2472
  %137 = load i32, i32* %arrayidx187, align 4, !dbg !2472
  store i32 %137, i32* %cover_class185, align 4, !dbg !2473
  %138 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2474
  %aux188 = getelementptr inbounds %struct.loop, %struct.loop* %138, i32 0, i32 10, !dbg !2474
  %139 = load i8*, i8** %aux188, align 8, !dbg !2474
  %140 = bitcast i8* %139 to %struct.loop_data*, !dbg !2474
  %max_reg_pressure189 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %140, i32 0, i32 2, !dbg !2476
  %141 = load i32, i32* %cover_class185, align 4, !dbg !2477
  %idxprom190 = zext i32 %141 to i64, !dbg !2474
  %arrayidx191 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure189, i64 0, i64 %idxprom190, !dbg !2474
  %142 = load i32, i32* %arrayidx191, align 4, !dbg !2474
  %cmp192 = icmp eq i32 %142, 0, !dbg !2478
  br i1 %cmp192, label %if.then193, label %if.end194, !dbg !2479

if.then193:                                       ; preds = %for.body184
  br label %for.inc202, !dbg !2480

if.end194:                                        ; preds = %for.body184
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2481
  %144 = load i32, i32* %cover_class185, align 4, !dbg !2482
  %idxprom195 = zext i32 %144 to i64, !dbg !2483
  %arrayidx196 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom195, !dbg !2483
  %145 = load i8*, i8** %arrayidx196, align 8, !dbg !2483
  %146 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2484
  %aux197 = getelementptr inbounds %struct.loop, %struct.loop* %146, i32 0, i32 10, !dbg !2484
  %147 = load i8*, i8** %aux197, align 8, !dbg !2484
  %148 = bitcast i8* %147 to %struct.loop_data*, !dbg !2484
  %max_reg_pressure198 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %148, i32 0, i32 2, !dbg !2485
  %149 = load i32, i32* %cover_class185, align 4, !dbg !2486
  %idxprom199 = zext i32 %149 to i64, !dbg !2484
  %arrayidx200 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure198, i64 0, i64 %idxprom199, !dbg !2484
  %150 = load i32, i32* %arrayidx200, align 4, !dbg !2484
  %call201 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %143, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* %145, i32 %150), !dbg !2487
  br label %for.inc202, !dbg !2488

for.inc202:                                       ; preds = %if.end194, %if.then193
  %151 = load i32, i32* %i, align 4, !dbg !2489
  %inc203 = add nsw i32 %151, 1, !dbg !2489
  store i32 %inc203, i32* %i, align 4, !dbg !2489
  br label %for.cond182, !dbg !2490, !llvm.loop !2491

for.end204:                                       ; preds = %for.cond182
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2493
  %call205 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %152, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !2494
  br label %for.inc206, !dbg !2495

for.inc206:                                       ; preds = %for.end204
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2417
  br label %for.cond152, !dbg !2417, !llvm.loop !2496

for.end207:                                       ; preds = %if.then150, %for.cond152
  ret void, !dbg !2498
}

declare dso_local i32 @df_set_flags(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2499 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2504, metadata !DIExpression()), !dbg !2505
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2506, metadata !DIExpression()), !dbg !2507
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2508, metadata !DIExpression()), !dbg !2509
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2510, metadata !DIExpression()), !dbg !2511
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2512, metadata !DIExpression()), !dbg !2513
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2514, metadata !DIExpression()), !dbg !2515
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2516
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2517
  store i32 0, i32* %idx, align 8, !dbg !2518
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2519
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2519
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2519
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2519
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2519
  br i1 %tobool, label %if.end, label %if.then, !dbg !2521

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2522
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2524
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2525
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2526
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2527
  br label %return, !dbg !2528

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2529
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2529
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2530
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2531
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2532
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2533
  %and = and i32 %6, 1, !dbg !2534
  %tobool3 = icmp ne i32 %and, 0, !dbg !2535
  %7 = zext i1 %tobool3 to i64, !dbg !2535
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2535
  store i32 %cond, i32* %mn, align 4, !dbg !2536
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2537
  %and4 = and i32 %8, 4, !dbg !2539
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2539
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2540

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2541
  br label %for.cond, !dbg !2544

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2545
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2545
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2545
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2545
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2545
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2545
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2545
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2545

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2545
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2545
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2545
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2545
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2545
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2545
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2545
  br label %cond.end, !dbg !2545

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2545

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2545
  %15 = load i32, i32* %i, align 4, !dbg !2545
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2545
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2547
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2547

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2548
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2550
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2551

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2552
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2553
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2553
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2554
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2555

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2556
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2557
  %20 = load i32, i32* %num, align 8, !dbg !2557
  %21 = load i32, i32* %mn, align 4, !dbg !2558
  %cmp18 = icmp sge i32 %20, %21, !dbg !2559
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2560

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2561
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2561
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2561
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2561
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2561

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2561
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2561
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2561
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2561
  br label %cond.end26, !dbg !2561

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2561

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2561
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2561
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2561
  %27 = load i32, i32* %num28, align 8, !dbg !2561
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2561
  br label %if.end30, !dbg !2561

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2558

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2562
  %inc = add i32 %28, 1, !dbg !2562
  store i32 %inc, i32* %i, align 4, !dbg !2562
  br label %for.cond, !dbg !2563, !llvm.loop !2564

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2566

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2567
  %and31 = and i32 %29, 2, !dbg !2569
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2569
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2570

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2571
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2571
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2571
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2571
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2574
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2574
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2575
  br label %for.cond36, !dbg !2576

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2577
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2579
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2579
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2580
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2581

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2582

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2583
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2584
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2584
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2585
  br label %for.cond36, !dbg !2586, !llvm.loop !2587

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2589

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2590
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2593
  %38 = load i32, i32* %num43, align 8, !dbg !2593
  %39 = load i32, i32* %mn, align 4, !dbg !2594
  %cmp44 = icmp sge i32 %38, %39, !dbg !2595
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2596

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2597
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2597
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2597
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2597
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2597

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2597
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2597
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2597
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2597
  br label %cond.end52, !dbg !2597

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2597

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2597
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2597
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2597
  %45 = load i32, i32* %num54, align 8, !dbg !2597
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2597
  br label %if.end56, !dbg !2597

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2598
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2600
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2600
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2598
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2601

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2602
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2605
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2605
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2606
  br label %for.cond60, !dbg !2607

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2608
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2610
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2610
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2611
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2612

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2613

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2614
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2615
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2615
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2616
  br label %for.cond60, !dbg !2617, !llvm.loop !2618

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2620

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2621
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2623
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2623
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2624

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2625

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2626
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2627
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2628
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2589, !llvm.loop !2629

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2631

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2632
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2632
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2632
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2632
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2634
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2634
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2635
  br label %while.body79, !dbg !2636

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2637
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2640
  %60 = load i32, i32* %num80, align 8, !dbg !2640
  %61 = load i32, i32* %mn, align 4, !dbg !2641
  %cmp81 = icmp sge i32 %60, %61, !dbg !2642
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2643

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2644
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2644
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2644
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2644
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2644

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2644
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2644
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2644
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2644
  br label %cond.end89, !dbg !2644

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2644

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2644
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2644
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2644
  %67 = load i32, i32* %num91, align 8, !dbg !2644
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2644
  br label %if.end93, !dbg !2644

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2645
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2647
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2647
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2648
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2649

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2650
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2651
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2651
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2652
  br label %if.end110, !dbg !2653

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2654

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2656
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2657
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2658

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2659
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2660
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2660
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2661
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2662
  br i1 %75, label %while.body103, label %while.end105, !dbg !2654

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2663
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2664
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2665
  br label %while.cond99, !dbg !2654, !llvm.loop !2666

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2668
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2670
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2671

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2672

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2673
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2674
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2674
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2675
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2636, !llvm.loop !2676

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2678
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2679
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2680
  br label %return, !dbg !2681

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2681
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_single_loop_invariants(%struct.loop* %loop) #0 !dbg !2682 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2685, metadata !DIExpression()), !dbg !2686
  call void @init_inv_motion_data(), !dbg !2687
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2688
  call void @find_invariants(%struct.loop* %0), !dbg !2689
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2690
  %call = call zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %1), !dbg !2691
  call void @find_invariants_to_move(i8 zeroext %call), !dbg !2692
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2693
  call void @move_invariants(%struct.loop* %2), !dbg !2694
  call void @free_inv_motion_data(), !dbg !2695
  ret void, !dbg !2696
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !2697 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2700, metadata !DIExpression()), !dbg !2701
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2702, metadata !DIExpression()), !dbg !2703
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !2704, metadata !DIExpression()), !dbg !2705
  br label %while.cond, !dbg !2706

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2707
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !2707
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2707
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !2707
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2707

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2707
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !2707
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !2707
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !2707
  br label %cond.end, !dbg !2707

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !2707

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2707
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2707
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !2707
  %5 = load i32, i32* %idx, align 8, !dbg !2707
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !2707
  %tobool2 = icmp ne i32 %call, 0, !dbg !2706
  br i1 %tobool2, label %while.body, label %while.end, !dbg !2706

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2708
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !2710
  %7 = load i32, i32* %idx3, align 8, !dbg !2711
  %inc = add i32 %7, 1, !dbg !2711
  store i32 %inc, i32* %idx3, align 8, !dbg !2711
  %8 = load i32, i32* %anum, align 4, !dbg !2712
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !2713
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2714
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !2715
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2716
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !2718
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !2718
  br i1 %tobool5, label %if.then, label %if.end, !dbg !2719

if.then:                                          ; preds = %while.body
  br label %return, !dbg !2720

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !2706, !llvm.loop !2721

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2723
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !2723
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !2723
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2724
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !2725
  br label %return, !dbg !2726

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !2726
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_loop_data(%struct.loop* %loop) #0 !dbg !2727 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %data = alloca %struct.loop_data*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2728, metadata !DIExpression()), !dbg !2729
  call void @llvm.dbg.declare(metadata %struct.loop_data** %data, metadata !2730, metadata !DIExpression()), !dbg !2731
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2732
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 10, !dbg !2732
  %1 = load i8*, i8** %aux, align 8, !dbg !2732
  %2 = bitcast i8* %1 to %struct.loop_data*, !dbg !2732
  store %struct.loop_data* %2, %struct.loop_data** %data, align 8, !dbg !2731
  %3 = load %struct.loop_data*, %struct.loop_data** %data, align 8, !dbg !2733
  %tobool = icmp ne %struct.loop_data* %3, null, !dbg !2733
  br i1 %tobool, label %if.end, label %if.then, !dbg !2735

if.then:                                          ; preds = %entry
  br label %return, !dbg !2736

if.end:                                           ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2737
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 10, !dbg !2737
  %5 = load i8*, i8** %aux1, align 8, !dbg !2737
  %6 = bitcast i8* %5 to %struct.loop_data*, !dbg !2737
  %regs_ref = getelementptr inbounds %struct.loop_data, %struct.loop_data* %6, i32 0, i32 3, !dbg !2738
  call void @bitmap_clear(%struct.bitmap_head_def* %regs_ref), !dbg !2739
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2740
  %aux2 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 10, !dbg !2740
  %8 = load i8*, i8** %aux2, align 8, !dbg !2740
  %9 = bitcast i8* %8 to %struct.loop_data*, !dbg !2740
  %regs_live = getelementptr inbounds %struct.loop_data, %struct.loop_data* %9, i32 0, i32 4, !dbg !2741
  call void @bitmap_clear(%struct.bitmap_head_def* %regs_live), !dbg !2742
  %10 = load %struct.loop_data*, %struct.loop_data** %data, align 8, !dbg !2743
  %11 = bitcast %struct.loop_data* %10 to i8*, !dbg !2743
  call void @free(i8* %11), !dbg !2744
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2745
  %aux3 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 10, !dbg !2746
  store i8* null, i8** %aux3, align 8, !dbg !2747
  br label %return, !dbg !2748

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !2748
}

declare dso_local void @free_reg_info() #2

declare dso_local void @free(i8*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_initialize_stat(%struct.bitmap_head_def* %head, %struct.bitmap_obstack* %obstack) #0 !dbg !2749 {
entry:
  %head.addr = alloca %struct.bitmap_head_def*, align 8
  %obstack.addr = alloca %struct.bitmap_obstack*, align 8
  store %struct.bitmap_head_def* %head, %struct.bitmap_head_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %head.addr, metadata !2752, metadata !DIExpression()), !dbg !2753
  store %struct.bitmap_obstack* %obstack, %struct.bitmap_obstack** %obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_obstack** %obstack.addr, metadata !2754, metadata !DIExpression()), !dbg !2755
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !2756
  %current = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 1, !dbg !2757
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %current, align 8, !dbg !2758
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !2759
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !2760
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %first, align 8, !dbg !2761
  %2 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** %obstack.addr, align 8, !dbg !2762
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !2763
  %obstack1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 3, !dbg !2764
  store %struct.bitmap_obstack* %2, %struct.bitmap_obstack** %obstack1, align 8, !dbg !2765
  ret void, !dbg !2766
}

declare dso_local void @ira_setup_eliminable_regset() #2

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !2767 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2770, metadata !DIExpression()), !dbg !2771
  %0 = load i32, i32* %index.addr, align 4, !dbg !2772
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !2774
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !2774
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !2774
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !2774
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !2775
  %3 = load i32, i32* %block_info_size, align 8, !dbg !2775
  %cmp = icmp ult i32 %0, %3, !dbg !2776
  br i1 %cmp, label %if.then, label %if.else, !dbg !2777

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !2778
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !2778
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !2778
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !2778
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !2779
  %6 = load i8**, i8*** %block_info, align 8, !dbg !2779
  %7 = load i32, i32* %index.addr, align 4, !dbg !2780
  %idxprom = zext i32 %7 to i64, !dbg !2778
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !2778
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !2778
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !2781
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !2782
  br label %return, !dbg !2782

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !2783
  br label %return, !dbg !2783

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !2784
  ret %struct.df_lr_bb_info* %10, !dbg !2784
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !2785 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2790, metadata !DIExpression()), !dbg !2791
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2792, metadata !DIExpression()), !dbg !2793
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2794
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !2794
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !2794
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !2794
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2794

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2794
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !2794
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !2794
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !2794
  br label %cond.end, !dbg !2794

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2794
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !2794
  store i32 %call, i32* %n, align 4, !dbg !2793
  %4 = load i32, i32* %n, align 4, !dbg !2795
  %cmp = icmp eq i32 %4, 0, !dbg !2797
  br i1 %cmp, label %if.then, label %if.end, !dbg !2798

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !2799
  br label %return, !dbg !2799

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2800
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !2800
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !2800
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !2800
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !2800

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2800
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !2800
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !2800
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !2800
  br label %cond.end8, !dbg !2800

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !2800

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !2800
  %9 = load i32, i32* %n, align 4, !dbg !2800
  %sub = sub i32 %9, 1, !dbg !2800
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !2800
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !2801
  br label %return, !dbg !2801

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !2802
  ret %struct.loop* %10, !dbg !2802
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !2803 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2811, metadata !DIExpression()), !dbg !2812
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !2813, metadata !DIExpression()), !dbg !2814
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !2815, metadata !DIExpression()), !dbg !2816
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2817, metadata !DIExpression()), !dbg !2818
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !2819
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !2820
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !2820
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2821
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !2822
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !2823
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2824
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !2825
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !2826
  br label %while.body, !dbg !2827

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2828
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !2831
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !2831
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !2828
  br i1 %tobool, label %if.end, label %if.then, !dbg !2832

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2833
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !2835
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !2836
  br label %while.end, !dbg !2837

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2838
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !2840
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !2840
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !2841
  %9 = load i32, i32* %indx, align 8, !dbg !2841
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !2842
  %div = udiv i32 %10, 128, !dbg !2843
  %cmp = icmp uge i32 %9, %div, !dbg !2844
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !2845

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !2846

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2847
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !2848
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !2848
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !2849
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2849
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2850
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !2851
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !2852
  br label %while.body, !dbg !2827, !llvm.loop !2853

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2855
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2857
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !2857
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !2858
  %17 = load i32, i32* %indx9, align 8, !dbg !2858
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !2859
  %div10 = udiv i32 %18, 128, !dbg !2860
  %cmp11 = icmp ne i32 %17, %div10, !dbg !2861
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !2862

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2863
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !2864
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !2864
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !2865
  %21 = load i32, i32* %indx14, align 8, !dbg !2865
  %mul = mul i32 %21, 128, !dbg !2866
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !2867
  br label %if.end15, !dbg !2868

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !2869
  %div16 = udiv i32 %22, 64, !dbg !2870
  %rem = urem i32 %div16, 2, !dbg !2871
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2872
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !2873
  store i32 %rem, i32* %word_no, align 8, !dbg !2874
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2875
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !2876
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !2876
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !2877
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2878
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !2879
  %27 = load i32, i32* %word_no18, align 8, !dbg !2879
  %idxprom = zext i32 %27 to i64, !dbg !2875
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !2875
  %28 = load i64, i64* %arrayidx, align 8, !dbg !2875
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2880
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !2881
  store i64 %28, i64* %bits19, align 8, !dbg !2882
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !2883
  %rem20 = urem i32 %30, 64, !dbg !2884
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2885
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !2886
  %32 = load i64, i64* %bits21, align 8, !dbg !2887
  %sh_prom = zext i32 %rem20 to i64, !dbg !2887
  %shr = lshr i64 %32, %sh_prom, !dbg !2887
  store i64 %shr, i64* %bits21, align 8, !dbg !2887
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2888
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !2889
  %34 = load i64, i64* %bits22, align 8, !dbg !2889
  %tobool23 = icmp ne i64 %34, 0, !dbg !2890
  %lnot = xor i1 %tobool23, true, !dbg !2890
  %lnot.ext = zext i1 %lnot to i32, !dbg !2890
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !2891
  %add = add i32 %35, %lnot.ext, !dbg !2891
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !2891
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !2892
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !2893
  store i32 %36, i32* %37, align 4, !dbg !2894
  ret void, !dbg !2895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !2896 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !2899, metadata !DIExpression()), !dbg !2900
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !2901, metadata !DIExpression()), !dbg !2902
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2903
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !2905
  %1 = load i64, i64* %bits, align 8, !dbg !2905
  %tobool = icmp ne i64 %1, 0, !dbg !2903
  br i1 %tobool, label %if.then, label %if.end, !dbg !2906

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !2907

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !2908), !dbg !2910
  br label %while.cond, !dbg !2911

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2912
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !2913
  %3 = load i64, i64* %bits1, align 8, !dbg !2913
  %and = and i64 %3, 1, !dbg !2914
  %tobool2 = icmp ne i64 %and, 0, !dbg !2915
  %lnot = xor i1 %tobool2, true, !dbg !2915
  br i1 %lnot, label %while.body, label %while.end, !dbg !2911

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2916
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !2918
  %5 = load i64, i64* %bits3, align 8, !dbg !2919
  %shr = lshr i64 %5, 1, !dbg !2919
  store i64 %shr, i64* %bits3, align 8, !dbg !2919
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !2920
  %7 = load i32, i32* %6, align 4, !dbg !2921
  %add = add i32 %7, 1, !dbg !2921
  store i32 %add, i32* %6, align 4, !dbg !2921
  br label %while.cond, !dbg !2911, !llvm.loop !2922

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !2924
  br label %return, !dbg !2924

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !2925
  %9 = load i32, i32* %8, align 4, !dbg !2926
  %add4 = add i32 %9, 64, !dbg !2927
  %sub = sub i32 %add4, 1, !dbg !2928
  %div = udiv i32 %sub, 64, !dbg !2929
  %mul = mul i32 %div, 64, !dbg !2930
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !2931
  store i32 %mul, i32* %10, align 4, !dbg !2932
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2933
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !2934
  %12 = load i32, i32* %word_no, align 8, !dbg !2935
  %inc = add i32 %12, 1, !dbg !2935
  store i32 %inc, i32* %word_no, align 8, !dbg !2935
  br label %while.body6, !dbg !2936

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !2937

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2939
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !2940
  %14 = load i32, i32* %word_no8, align 8, !dbg !2940
  %cmp = icmp ne i32 %14, 2, !dbg !2941
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !2937

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2942
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !2944
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !2944
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !2945
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2946
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !2947
  %18 = load i32, i32* %word_no11, align 8, !dbg !2947
  %idxprom = zext i32 %18 to i64, !dbg !2942
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !2942
  %19 = load i64, i64* %arrayidx, align 8, !dbg !2942
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2948
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !2949
  store i64 %19, i64* %bits12, align 8, !dbg !2950
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2951
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !2953
  %22 = load i64, i64* %bits13, align 8, !dbg !2953
  %tobool14 = icmp ne i64 %22, 0, !dbg !2951
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !2954

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !2955

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !2956
  %24 = load i32, i32* %23, align 4, !dbg !2957
  %add17 = add i32 %24, 64, !dbg !2957
  store i32 %add17, i32* %23, align 4, !dbg !2957
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2958
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !2959
  %26 = load i32, i32* %word_no18, align 8, !dbg !2960
  %inc19 = add i32 %26, 1, !dbg !2960
  store i32 %inc19, i32* %word_no18, align 8, !dbg !2960
  br label %while.cond7, !dbg !2937, !llvm.loop !2961

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2963
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !2964
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !2964
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !2965
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !2965
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2966
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !2967
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !2968
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2969
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !2971
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !2971
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !2969
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !2972

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !2973
  br label %return, !dbg !2973

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2974
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !2975
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !2975
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !2976
  %35 = load i32, i32* %indx, align 8, !dbg !2976
  %mul28 = mul i32 %35, 128, !dbg !2977
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !2978
  store i32 %mul28, i32* %36, align 4, !dbg !2979
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !2980
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !2981
  store i32 0, i32* %word_no29, align 8, !dbg !2982
  br label %while.body6, !dbg !2936, !llvm.loop !2983

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !2985
  ret i8 %38, !dbg !2985
}

; Function Attrs: noinline nounwind uwtable
define internal void @change_pressure(i32 %regno, i8 zeroext %incr_p) #0 !dbg !2986 {
entry:
  %regno.addr = alloca i32, align 4
  %incr_p.addr = alloca i8, align 1
  %nregs = alloca i32, align 4
  %cover_class = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !2989, metadata !DIExpression()), !dbg !2990
  store i8 %incr_p, i8* %incr_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %incr_p.addr, metadata !2991, metadata !DIExpression()), !dbg !2992
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !2993, metadata !DIExpression()), !dbg !2994
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !2995, metadata !DIExpression()), !dbg !2996
  %0 = load i32, i32* %regno.addr, align 4, !dbg !2997
  %call = call i32 @get_regno_cover_class(i32 %0, i32* %nregs), !dbg !2998
  store i32 %call, i32* %cover_class, align 4, !dbg !2999
  %1 = load i8, i8* %incr_p.addr, align 1, !dbg !3000
  %tobool = icmp ne i8 %1, 0, !dbg !3000
  br i1 %tobool, label %if.else, label %if.then, !dbg !3002

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %nregs, align 4, !dbg !3003
  %3 = load i32, i32* %cover_class, align 4, !dbg !3004
  %idxprom = zext i32 %3 to i64, !dbg !3005
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom, !dbg !3005
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3006
  %sub = sub nsw i32 %4, %2, !dbg !3006
  store i32 %sub, i32* %arrayidx, align 4, !dbg !3006
  br label %if.end14, !dbg !3005

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %nregs, align 4, !dbg !3007
  %6 = load i32, i32* %cover_class, align 4, !dbg !3009
  %idxprom1 = zext i32 %6 to i64, !dbg !3010
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom1, !dbg !3010
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !3011
  %add = add nsw i32 %7, %5, !dbg !3011
  store i32 %add, i32* %arrayidx2, align 4, !dbg !3011
  %8 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !3012
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 10, !dbg !3012
  %9 = load i8*, i8** %aux, align 8, !dbg !3012
  %10 = bitcast i8* %9 to %struct.loop_data*, !dbg !3012
  %max_reg_pressure = getelementptr inbounds %struct.loop_data, %struct.loop_data* %10, i32 0, i32 2, !dbg !3014
  %11 = load i32, i32* %cover_class, align 4, !dbg !3015
  %idxprom3 = zext i32 %11 to i64, !dbg !3012
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure, i64 0, i64 %idxprom3, !dbg !3012
  %12 = load i32, i32* %arrayidx4, align 4, !dbg !3012
  %13 = load i32, i32* %cover_class, align 4, !dbg !3016
  %idxprom5 = zext i32 %13 to i64, !dbg !3017
  %arrayidx6 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom5, !dbg !3017
  %14 = load i32, i32* %arrayidx6, align 4, !dbg !3017
  %cmp = icmp slt i32 %12, %14, !dbg !3018
  br i1 %cmp, label %if.then7, label %if.end, !dbg !3019

if.then7:                                         ; preds = %if.else
  %15 = load i32, i32* %cover_class, align 4, !dbg !3020
  %idxprom8 = zext i32 %15 to i64, !dbg !3021
  %arrayidx9 = getelementptr inbounds [27 x i32], [27 x i32]* @curr_reg_pressure, i64 0, i64 %idxprom8, !dbg !3021
  %16 = load i32, i32* %arrayidx9, align 4, !dbg !3021
  %17 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !3022
  %aux10 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 10, !dbg !3022
  %18 = load i8*, i8** %aux10, align 8, !dbg !3022
  %19 = bitcast i8* %18 to %struct.loop_data*, !dbg !3022
  %max_reg_pressure11 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %19, i32 0, i32 2, !dbg !3023
  %20 = load i32, i32* %cover_class, align 4, !dbg !3024
  %idxprom12 = zext i32 %20 to i64, !dbg !3022
  %arrayidx13 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure11, i64 0, i64 %idxprom12, !dbg !3022
  store i32 %16, i32* %arrayidx13, align 4, !dbg !3025
  br label %if.end, !dbg !3022

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then
  ret void, !dbg !3026
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3027 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3030, metadata !DIExpression()), !dbg !3031
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3032, metadata !DIExpression()), !dbg !3033
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3034
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3035
  %1 = load i64, i64* %bits, align 8, !dbg !3036
  %shr = lshr i64 %1, 1, !dbg !3036
  store i64 %shr, i64* %bits, align 8, !dbg !3036
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !3037
  %3 = load i32, i32* %2, align 4, !dbg !3038
  %add = add i32 %3, 1, !dbg !3038
  store i32 %add, i32* %2, align 4, !dbg !3038
  ret void, !dbg !3039
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_ref_regs(%struct.rtx_def* %x) #0 !dbg !3040 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %loop = alloca %struct.loop*, align 8
  %j = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3043, metadata !DIExpression()), !dbg !3044
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3045, metadata !DIExpression()), !dbg !3046
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3047, metadata !DIExpression()), !dbg !3048
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !3049, metadata !DIExpression()), !dbg !3050
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3051
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !3051
  br i1 %tobool, label %if.end, label %if.then, !dbg !3053

if.then:                                          ; preds = %entry
  br label %for.end46, !dbg !3054

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3055
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3055
  %bf.load = load i32, i32* %2, align 8, !dbg !3055
  %bf.clear = and i32 %bf.load, 65535, !dbg !3055
  store i32 %bf.clear, i32* %code, align 4, !dbg !3056
  %3 = load i32, i32* %code, align 4, !dbg !3057
  %cmp = icmp eq i32 %3, 37, !dbg !3059
  br i1 %cmp, label %if.then1, label %if.end5, !dbg !3060

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3061, metadata !DIExpression()), !dbg !3063
  %4 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !3064
  store %struct.loop* %4, %struct.loop** %loop, align 8, !dbg !3066
  br label %for.cond, !dbg !3067

for.cond:                                         ; preds = %for.inc, %if.then1
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3068
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3070
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3070
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3070
  %7 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3070
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %7, i32 0, i32 3, !dbg !3071
  %8 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3071
  %cmp2 = icmp ne %struct.loop* %5, %8, !dbg !3072
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3073

for.body:                                         ; preds = %for.cond
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3074
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 10, !dbg !3074
  %10 = load i8*, i8** %aux, align 8, !dbg !3074
  %11 = bitcast i8* %10 to %struct.loop_data*, !dbg !3074
  %regs_ref = getelementptr inbounds %struct.loop_data, %struct.loop_data* %11, i32 0, i32 3, !dbg !3075
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3076
  %call = call i32 @rhs_regno(%struct.rtx_def* %12), !dbg !3076
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %regs_ref, i32 %call), !dbg !3077
  br label %for.inc, !dbg !3077

for.inc:                                          ; preds = %for.body
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3078
  %call4 = call %struct.loop* @loop_outer(%struct.loop* %13), !dbg !3079
  store %struct.loop* %call4, %struct.loop** %loop, align 8, !dbg !3080
  br label %for.cond, !dbg !3081, !llvm.loop !3082

for.end:                                          ; preds = %for.cond
  br label %for.end46, !dbg !3084

if.end5:                                          ; preds = %if.end
  %14 = load i32, i32* %code, align 4, !dbg !3085
  %idxprom = sext i32 %14 to i64, !dbg !3085
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !3085
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !3085
  store i8* %15, i8** %fmt, align 8, !dbg !3086
  %16 = load i32, i32* %code, align 4, !dbg !3087
  %idxprom6 = sext i32 %16 to i64, !dbg !3087
  %arrayidx7 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom6, !dbg !3087
  %17 = load i8, i8* %arrayidx7, align 1, !dbg !3087
  %conv = zext i8 %17 to i32, !dbg !3087
  %sub = sub nsw i32 %conv, 1, !dbg !3089
  store i32 %sub, i32* %i, align 4, !dbg !3090
  br label %for.cond8, !dbg !3091

for.cond8:                                        ; preds = %for.inc45, %if.end5
  %18 = load i32, i32* %i, align 4, !dbg !3092
  %cmp9 = icmp sge i32 %18, 0, !dbg !3094
  br i1 %cmp9, label %for.body11, label %for.end46, !dbg !3095

for.body11:                                       ; preds = %for.cond8
  %19 = load i8*, i8** %fmt, align 8, !dbg !3096
  %20 = load i32, i32* %i, align 4, !dbg !3098
  %idxprom12 = sext i32 %20 to i64, !dbg !3096
  %arrayidx13 = getelementptr inbounds i8, i8* %19, i64 %idxprom12, !dbg !3096
  %21 = load i8, i8* %arrayidx13, align 1, !dbg !3096
  %conv14 = sext i8 %21 to i32, !dbg !3096
  %cmp15 = icmp eq i32 %conv14, 101, !dbg !3099
  br i1 %cmp15, label %if.then17, label %if.else, !dbg !3100

if.then17:                                        ; preds = %for.body11
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3101
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3101
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3101
  %23 = load i32, i32* %i, align 4, !dbg !3101
  %idxprom18 = sext i32 %23 to i64, !dbg !3101
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom18, !dbg !3101
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !3101
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3101
  call void @mark_ref_regs(%struct.rtx_def* %24), !dbg !3102
  br label %if.end44, !dbg !3102

if.else:                                          ; preds = %for.body11
  %25 = load i8*, i8** %fmt, align 8, !dbg !3103
  %26 = load i32, i32* %i, align 4, !dbg !3105
  %idxprom20 = sext i32 %26 to i64, !dbg !3103
  %arrayidx21 = getelementptr inbounds i8, i8* %25, i64 %idxprom20, !dbg !3103
  %27 = load i8, i8* %arrayidx21, align 1, !dbg !3103
  %conv22 = sext i8 %27 to i32, !dbg !3103
  %cmp23 = icmp eq i32 %conv22, 69, !dbg !3106
  br i1 %cmp23, label %if.then25, label %if.end43, !dbg !3107

if.then25:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3108, metadata !DIExpression()), !dbg !3110
  store i32 0, i32* %j, align 4, !dbg !3111
  br label %for.cond26, !dbg !3113

for.cond26:                                       ; preds = %for.inc41, %if.then25
  %28 = load i32, i32* %j, align 4, !dbg !3114
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3116
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !3116
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !3116
  %30 = load i32, i32* %i, align 4, !dbg !3116
  %idxprom29 = sext i32 %30 to i64, !dbg !3116
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 %idxprom29, !dbg !3116
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtvec_def**, !dbg !3116
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3116
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 0, !dbg !3116
  %32 = load i32, i32* %num_elem, align 8, !dbg !3116
  %cmp31 = icmp slt i32 %28, %32, !dbg !3117
  br i1 %cmp31, label %for.body33, label %for.end42, !dbg !3118

for.body33:                                       ; preds = %for.cond26
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3119
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3119
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !3119
  %34 = load i32, i32* %i, align 4, !dbg !3119
  %idxprom36 = sext i32 %34 to i64, !dbg !3119
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 %idxprom36, !dbg !3119
  %rt_rtvec38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtvec_def**, !dbg !3119
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec38, align 8, !dbg !3119
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 1, !dbg !3119
  %36 = load i32, i32* %j, align 4, !dbg !3119
  %idxprom39 = sext i32 %36 to i64, !dbg !3119
  %arrayidx40 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom39, !dbg !3119
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8, !dbg !3119
  call void @mark_ref_regs(%struct.rtx_def* %37), !dbg !3120
  br label %for.inc41, !dbg !3120

for.inc41:                                        ; preds = %for.body33
  %38 = load i32, i32* %j, align 4, !dbg !3121
  %inc = add nsw i32 %38, 1, !dbg !3121
  store i32 %inc, i32* %j, align 4, !dbg !3121
  br label %for.cond26, !dbg !3122, !llvm.loop !3123

for.end42:                                        ; preds = %for.cond26
  br label %if.end43, !dbg !3125

if.end43:                                         ; preds = %for.end42, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then17
  br label %for.inc45, !dbg !3126

for.inc45:                                        ; preds = %if.end44
  %39 = load i32, i32* %i, align 4, !dbg !3127
  %dec = add nsw i32 %39, -1, !dbg !3127
  store i32 %dec, i32* %i, align 4, !dbg !3127
  br label %for.cond8, !dbg !3128, !llvm.loop !3129

for.end46:                                        ; preds = %if.then, %for.end, %for.cond8
  ret void, !dbg !3131
}

declare dso_local void @note_stores(%struct.rtx_def*, void (%struct.rtx_def*, %struct.rtx_def*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_reg_clobber(%struct.rtx_def* %reg, %struct.rtx_def* %setter, i8* %data) #0 !dbg !3132 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %setter.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3138, metadata !DIExpression()), !dbg !3139
  store %struct.rtx_def* %setter, %struct.rtx_def** %setter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setter.addr, metadata !3140, metadata !DIExpression()), !dbg !3141
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3142, metadata !DIExpression()), !dbg !3143
  %0 = load %struct.rtx_def*, %struct.rtx_def** %setter.addr, align 8, !dbg !3144
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3144
  %bf.load = load i32, i32* %1, align 8, !dbg !3144
  %bf.clear = and i32 %bf.load, 65535, !dbg !3144
  %cmp = icmp eq i32 %bf.clear, 25, !dbg !3146
  br i1 %cmp, label %if.then, label %if.end, !dbg !3147

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3148
  %3 = load %struct.rtx_def*, %struct.rtx_def** %setter.addr, align 8, !dbg !3149
  %4 = load i8*, i8** %data.addr, align 8, !dbg !3150
  call void @mark_reg_store(%struct.rtx_def* %2, %struct.rtx_def* %3, i8* %4), !dbg !3151
  br label %if.end, !dbg !3151

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3152
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_reg_death(%struct.rtx_def* %reg) #0 !dbg !3153 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %last = alloca i32, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3154, metadata !DIExpression()), !dbg !3155
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3156, metadata !DIExpression()), !dbg !3157
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3158
  %call = call i32 @rhs_regno(%struct.rtx_def* %0), !dbg !3158
  store i32 %call, i32* %regno, align 4, !dbg !3157
  %1 = load i32, i32* %regno, align 4, !dbg !3159
  %cmp = icmp sge i32 %1, 53, !dbg !3161
  br i1 %cmp, label %if.then, label %if.else, !dbg !3162

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %regno, align 4, !dbg !3163
  call void @mark_regno_death(i32 %2), !dbg !3164
  br label %if.end, !dbg !3164

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %last, metadata !3165, metadata !DIExpression()), !dbg !3167
  %3 = load i32, i32* %regno, align 4, !dbg !3168
  %4 = load i32, i32* %regno, align 4, !dbg !3169
  %idxprom = sext i32 %4 to i64, !dbg !3170
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !3170
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3171
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3171
  %bf.load = load i32, i32* %6, align 8, !dbg !3171
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3171
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3171
  %idxprom1 = zext i32 %bf.clear to i64, !dbg !3170
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom1, !dbg !3170
  %7 = load i8, i8* %arrayidx2, align 1, !dbg !3170
  %conv = zext i8 %7 to i32, !dbg !3170
  %add = add nsw i32 %3, %conv, !dbg !3172
  store i32 %add, i32* %last, align 4, !dbg !3167
  br label %while.cond, !dbg !3173

while.cond:                                       ; preds = %while.body, %if.else
  %8 = load i32, i32* %regno, align 4, !dbg !3174
  %9 = load i32, i32* %last, align 4, !dbg !3175
  %cmp3 = icmp slt i32 %8, %9, !dbg !3176
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3173

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %regno, align 4, !dbg !3177
  call void @mark_regno_death(i32 %10), !dbg !3179
  %11 = load i32, i32* %regno, align 4, !dbg !3180
  %inc = add nsw i32 %11, 1, !dbg !3180
  store i32 %inc, i32* %regno, align 4, !dbg !3180
  br label %while.cond, !dbg !3173, !llvm.loop !3181

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3183
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_reg_store(%struct.rtx_def* %reg, %struct.rtx_def* %setter, i8* %data) #0 !dbg !3184 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %setter.addr = alloca %struct.rtx_def*, align 8
  %data.addr = alloca i8*, align 8
  %regno = alloca i32, align 4
  %last = alloca i32, align 4
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3185, metadata !DIExpression()), !dbg !3186
  store %struct.rtx_def* %setter, %struct.rtx_def** %setter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %setter.addr, metadata !3187, metadata !DIExpression()), !dbg !3188
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3189, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3191, metadata !DIExpression()), !dbg !3192
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3193
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3193
  %bf.load = load i32, i32* %1, align 8, !dbg !3193
  %bf.clear = and i32 %bf.load, 65535, !dbg !3193
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !3195
  br i1 %cmp, label %if.then, label %if.end, !dbg !3196

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3197
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !3197
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3197
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3197
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3197
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3197
  store %struct.rtx_def* %3, %struct.rtx_def** %reg.addr, align 8, !dbg !3198
  br label %if.end, !dbg !3199

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3200
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3200
  %bf.load1 = load i32, i32* %5, align 8, !dbg !3200
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3200
  %cmp3 = icmp eq i32 %bf.clear2, 37, !dbg !3200
  br i1 %cmp3, label %if.end5, label %if.then4, !dbg !3202

if.then4:                                         ; preds = %if.end
  br label %if.end18, !dbg !3203

if.end5:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3204
  %7 = load i32, i32* @n_regs_set, align 4, !dbg !3205
  %inc = add nsw i32 %7, 1, !dbg !3205
  store i32 %inc, i32* @n_regs_set, align 4, !dbg !3205
  %idxprom = sext i32 %7 to i64, !dbg !3206
  %arrayidx6 = getelementptr inbounds [106 x %struct.rtx_def*], [106 x %struct.rtx_def*]* @regs_set, i64 0, i64 %idxprom, !dbg !3206
  store %struct.rtx_def* %6, %struct.rtx_def** %arrayidx6, align 8, !dbg !3207
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3208
  %call = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !3208
  store i32 %call, i32* %regno, align 4, !dbg !3209
  %9 = load i32, i32* %regno, align 4, !dbg !3210
  %cmp7 = icmp sge i32 %9, 53, !dbg !3212
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !3213

if.then8:                                         ; preds = %if.end5
  %10 = load i32, i32* %regno, align 4, !dbg !3214
  call void @mark_regno_live(i32 %10), !dbg !3215
  br label %if.end18, !dbg !3215

if.else:                                          ; preds = %if.end5
  call void @llvm.dbg.declare(metadata i32* %last, metadata !3216, metadata !DIExpression()), !dbg !3218
  %11 = load i32, i32* %regno, align 4, !dbg !3219
  %12 = load i32, i32* %regno, align 4, !dbg !3220
  %idxprom9 = sext i32 %12 to i64, !dbg !3221
  %arrayidx10 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom9, !dbg !3221
  %13 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3222
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !3222
  %bf.load11 = load i32, i32* %14, align 8, !dbg !3222
  %bf.lshr = lshr i32 %bf.load11, 16, !dbg !3222
  %bf.clear12 = and i32 %bf.lshr, 255, !dbg !3222
  %idxprom13 = zext i32 %bf.clear12 to i64, !dbg !3221
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx10, i64 0, i64 %idxprom13, !dbg !3221
  %15 = load i8, i8* %arrayidx14, align 1, !dbg !3221
  %conv = zext i8 %15 to i32, !dbg !3221
  %add = add nsw i32 %11, %conv, !dbg !3223
  store i32 %add, i32* %last, align 4, !dbg !3218
  br label %while.cond, !dbg !3224

while.cond:                                       ; preds = %while.body, %if.else
  %16 = load i32, i32* %regno, align 4, !dbg !3225
  %17 = load i32, i32* %last, align 4, !dbg !3226
  %cmp15 = icmp slt i32 %16, %17, !dbg !3227
  br i1 %cmp15, label %while.body, label %while.end, !dbg !3224

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %regno, align 4, !dbg !3228
  call void @mark_regno_live(i32 %18), !dbg !3230
  %19 = load i32, i32* %regno, align 4, !dbg !3231
  %inc17 = add nsw i32 %19, 1, !dbg !3231
  store i32 %inc17, i32* %regno, align 4, !dbg !3231
  br label %while.cond, !dbg !3224, !llvm.loop !3232

while.end:                                        ; preds = %while.cond
  br label %if.end18

if.end18:                                         ; preds = %if.then4, %while.end, %if.then8
  ret void, !dbg !3234
}

declare dso_local %struct.rtx_def* @find_regno_note(%struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !3235 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3238, metadata !DIExpression()), !dbg !3239
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3240
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3240
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3240
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3240
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3240
  %1 = load i32, i32* %rt_uint, align 8, !dbg !3240
  ret i32 %1, !dbg !3241
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_regno_cover_class(i32 %regno, i32* %nregs) #0 !dbg !3242 {
entry:
  %retval = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %nregs.addr = alloca i32*, align 8
  %cover_class = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  store i32* %nregs, i32** %nregs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nregs.addr, metadata !3248, metadata !DIExpression()), !dbg !3249
  %0 = load i32, i32* %regno.addr, align 4, !dbg !3250
  %cmp = icmp sge i32 %0, 53, !dbg !3252
  br i1 %cmp, label %if.then, label %if.else, !dbg !3253

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !3254, metadata !DIExpression()), !dbg !3256
  %1 = load i32, i32* %regno.addr, align 4, !dbg !3257
  %call = call i32 @reg_cover_class(i32 %1), !dbg !3258
  store i32 %call, i32* %cover_class, align 4, !dbg !3256
  %2 = load i32, i32* %cover_class, align 4, !dbg !3259
  %idxprom = zext i32 %2 to i64, !dbg !3260
  %arrayidx = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !3260
  %3 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3261
  %4 = load i32, i32* %regno.addr, align 4, !dbg !3261
  %idxprom1 = sext i32 %4 to i64, !dbg !3261
  %arrayidx2 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idxprom1, !dbg !3261
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8, !dbg !3261
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3261
  %bf.load = load i32, i32* %6, align 8, !dbg !3261
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3261
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3261
  %idxprom3 = zext i32 %bf.clear to i64, !dbg !3260
  %arrayidx4 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx, i64 0, i64 %idxprom3, !dbg !3260
  %7 = load i32, i32* %arrayidx4, align 4, !dbg !3260
  %8 = load i32*, i32** %nregs.addr, align 8, !dbg !3262
  store i32 %7, i32* %8, align 4, !dbg !3263
  %9 = load i32, i32* %cover_class, align 4, !dbg !3264
  store i32 %9, i32* %retval, align 4, !dbg !3265
  br label %return, !dbg !3265

if.else:                                          ; preds = %entry
  %10 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !3266
  %11 = load i32, i32* %regno.addr, align 4, !dbg !3266
  %sh_prom = zext i32 %11 to i64, !dbg !3266
  %shl = shl i64 1, %sh_prom, !dbg !3266
  %and = and i64 %10, %shl, !dbg !3266
  %tobool = icmp ne i64 %and, 0, !dbg !3266
  br i1 %tobool, label %if.else14, label %land.lhs.true, !dbg !3268

land.lhs.true:                                    ; preds = %if.else
  %12 = load i64, i64* @eliminable_regset, align 8, !dbg !3269
  %13 = load i32, i32* %regno.addr, align 4, !dbg !3269
  %sh_prom5 = zext i32 %13 to i64, !dbg !3269
  %shl6 = shl i64 1, %sh_prom5, !dbg !3269
  %and7 = and i64 %12, %shl6, !dbg !3269
  %tobool8 = icmp ne i64 %and7, 0, !dbg !3269
  br i1 %tobool8, label %if.else14, label %if.then9, !dbg !3270

if.then9:                                         ; preds = %land.lhs.true
  %14 = load i32*, i32** %nregs.addr, align 8, !dbg !3271
  store i32 1, i32* %14, align 4, !dbg !3273
  %15 = load i32, i32* %regno.addr, align 4, !dbg !3274
  %idxprom10 = sext i32 %15 to i64, !dbg !3274
  %arrayidx11 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom10, !dbg !3274
  %16 = load i32, i32* %arrayidx11, align 4, !dbg !3274
  %idxprom12 = zext i32 %16 to i64, !dbg !3275
  %arrayidx13 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_translate, i64 0, i64 %idxprom12, !dbg !3275
  %17 = load i32, i32* %arrayidx13, align 4, !dbg !3275
  store i32 %17, i32* %retval, align 4, !dbg !3276
  br label %return, !dbg !3276

if.else14:                                        ; preds = %land.lhs.true, %if.else
  %18 = load i32*, i32** %nregs.addr, align 8, !dbg !3277
  store i32 0, i32* %18, align 4, !dbg !3279
  store i32 0, i32* %retval, align 4, !dbg !3280
  br label %return, !dbg !3280

return:                                           ; preds = %if.else14, %if.then9, %if.then
  %19 = load i32, i32* %retval, align 4, !dbg !3281
  ret i32 %19, !dbg !3281
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !3282 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3285, metadata !DIExpression()), !dbg !3286
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3287
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3287
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3287
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3287
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3287

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3287
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3287
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3287
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3287
  br label %cond.end, !dbg !3287

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3287

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3287
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3287
  ret i32 %call, !dbg !3288
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3289 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3294, metadata !DIExpression()), !dbg !3295
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3295
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3295
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3295

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3295
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3295
  %2 = load i32, i32* %num, align 8, !dbg !3295
  br label %cond.end, !dbg !3295

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3295

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3295
  ret i32 %cond, !dbg !3295
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !3296 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3299, metadata !DIExpression()), !dbg !3300
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3301, metadata !DIExpression()), !dbg !3300
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3300
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3300
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3300

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3300
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3300
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3300
  %3 = load i32, i32* %num, align 8, !dbg !3300
  %cmp = icmp ult i32 %1, %3, !dbg !3300
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3302
  %land.ext = zext i1 %4 to i32, !dbg !3300
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3300
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !3300
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3300
  %idxprom = zext i32 %6 to i64, !dbg !3300
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3300
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3300
  ret %struct.loop* %7, !dbg !3300
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_regno_death(i32 %regno) #0 !dbg !3303 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3306, metadata !DIExpression()), !dbg !3307
  %0 = load i32, i32* %regno.addr, align 4, !dbg !3308
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* @curr_regs_live, i32 %0), !dbg !3310
  %tobool = icmp ne i32 %call, 0, !dbg !3310
  br i1 %tobool, label %if.end, label %if.then, !dbg !3311

if.then:                                          ; preds = %entry
  br label %return, !dbg !3312

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !3313
  %call1 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* @curr_regs_live, i32 %1), !dbg !3314
  %2 = load i32, i32* %regno.addr, align 4, !dbg !3315
  call void @change_pressure(i32 %2, i8 zeroext 0), !dbg !3316
  br label %return, !dbg !3317

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3317
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_regno_live(i32 %regno) #0 !dbg !3318 {
entry:
  %regno.addr = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3319, metadata !DIExpression()), !dbg !3320
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3321, metadata !DIExpression()), !dbg !3322
  %0 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !3323
  store %struct.loop* %0, %struct.loop** %loop, align 8, !dbg !3325
  br label %for.cond, !dbg !3326

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3327
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3329
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3329
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3329
  %3 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3329
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 3, !dbg !3330
  %4 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !3330
  %cmp = icmp ne %struct.loop* %1, %4, !dbg !3331
  br i1 %cmp, label %for.body, label %for.end, !dbg !3332

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3333
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 10, !dbg !3333
  %6 = load i8*, i8** %aux, align 8, !dbg !3333
  %7 = bitcast i8* %6 to %struct.loop_data*, !dbg !3333
  %regs_live = getelementptr inbounds %struct.loop_data, %struct.loop_data* %7, i32 0, i32 4, !dbg !3334
  %8 = load i32, i32* %regno.addr, align 4, !dbg !3335
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %regs_live, i32 %8), !dbg !3336
  br label %for.inc, !dbg !3336

for.inc:                                          ; preds = %for.body
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3337
  %call1 = call %struct.loop* @loop_outer(%struct.loop* %9), !dbg !3338
  store %struct.loop* %call1, %struct.loop** %loop, align 8, !dbg !3339
  br label %for.cond, !dbg !3340, !llvm.loop !3341

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %regno.addr, align 4, !dbg !3343
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* @curr_regs_live, i32 %10), !dbg !3345
  %tobool = icmp ne i32 %call2, 0, !dbg !3345
  br i1 %tobool, label %if.then, label %if.end, !dbg !3346

if.then:                                          ; preds = %for.end
  br label %return, !dbg !3347

if.end:                                           ; preds = %for.end
  %11 = load i32, i32* %regno.addr, align 4, !dbg !3348
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* @curr_regs_live, i32 %11), !dbg !3349
  %12 = load i32, i32* %regno.addr, align 4, !dbg !3350
  call void @change_pressure(i32 %12, i8 zeroext 1), !dbg !3351
  br label %return, !dbg !3352

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3352
}

declare dso_local i32 @reg_cover_class(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !3353 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3356, metadata !DIExpression()), !dbg !3357
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3357
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3357
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !3357
  ret %struct.VEC_int_heap* %1, !dbg !3357
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3358 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3361
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3361
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3361
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3361
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3361
  br i1 %tobool, label %if.end, label %if.then, !dbg !3363

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3364
  br label %return, !dbg !3364

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3365
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3365
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3365
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3365
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3365
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3365
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3365
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3365

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3365
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3365
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3365
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3365
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3365
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3365
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3365
  br label %cond.end, !dbg !3365

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3365

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3365
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3365
  store i32 %call, i32* %retval, align 4, !dbg !3366
  br label %return, !dbg !3366

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3367
  ret i32 %8, !dbg !3367
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3368 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3371, metadata !DIExpression()), !dbg !3372
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3373, metadata !DIExpression()), !dbg !3372
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3374, metadata !DIExpression()), !dbg !3372
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3375
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3375
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3375

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3375
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3375
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3375
  %3 = load i32, i32* %num, align 8, !dbg !3375
  %cmp = icmp ult i32 %1, %3, !dbg !3375
  br i1 %cmp, label %if.then, label %if.else, !dbg !3372

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3377
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3377
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3377
  %idxprom = zext i32 %5 to i64, !dbg !3377
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3377
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3377
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3377
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3377
  store i32 1, i32* %retval, align 4, !dbg !3377
  br label %return, !dbg !3377

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3379
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3379
  store i32 0, i32* %retval, align 4, !dbg !3379
  br label %return, !dbg !3379

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3372
  ret i32 %9, !dbg !3372
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !3381 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3385, metadata !DIExpression()), !dbg !3386
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3387, metadata !DIExpression()), !dbg !3386
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !3388, metadata !DIExpression()), !dbg !3386
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3386
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !3386
  %1 = load i32, i32* %num, align 4, !dbg !3386
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3386
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3386
  %3 = load i32, i32* %alloc, align 4, !dbg !3386
  %cmp = icmp ult i32 %1, %3, !dbg !3386
  %conv = zext i1 %cmp to i32, !dbg !3386
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3386
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3386
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3386
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !3386
  %6 = load i32, i32* %num1, align 4, !dbg !3386
  %inc = add i32 %6, 1, !dbg !3386
  store i32 %inc, i32* %num1, align 4, !dbg !3386
  %idxprom = zext i32 %6 to i64, !dbg !3386
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3386
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !3386
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !3386
  %8 = load i32*, i32** %slot_, align 8, !dbg !3386
  store i32 %7, i32* %8, align 4, !dbg !3386
  %9 = load i32*, i32** %slot_, align 8, !dbg !3386
  ret i32* %9, !dbg !3386
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_inv_motion_data() #0 !dbg !3389 {
entry:
  store i32 1, i32* @actual_stamp, align 4, !dbg !3390
  %call = call %struct.VEC_invariant_p_heap* @VEC_invariant_p_heap_alloc(i32 100), !dbg !3391
  store %struct.VEC_invariant_p_heap* %call, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3392
  ret void, !dbg !3393
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants(%struct.loop* %loop) #0 !dbg !3394 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %may_exit = alloca %struct.bitmap_head_def*, align 8
  %always_reached = alloca %struct.bitmap_head_def*, align 8
  %has_exit = alloca %struct.bitmap_head_def*, align 8
  %always_executed = alloca %struct.bitmap_head_def*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3395, metadata !DIExpression()), !dbg !3396
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %may_exit, metadata !3397, metadata !DIExpression()), !dbg !3398
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3399
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %may_exit, align 8, !dbg !3398
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %always_reached, metadata !3400, metadata !DIExpression()), !dbg !3401
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3402
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %always_reached, align 8, !dbg !3401
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %has_exit, metadata !3403, metadata !DIExpression()), !dbg !3404
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3405
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %has_exit, align 8, !dbg !3404
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %always_executed, metadata !3406, metadata !DIExpression()), !dbg !3407
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3408
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %always_executed, align 8, !dbg !3407
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !3409, metadata !DIExpression()), !dbg !3411
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3412
  %call4 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !3413
  store %struct.basic_block_def** %call4, %struct.basic_block_def*** %body, align 8, !dbg !3411
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3414
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3415
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit, align 8, !dbg !3416
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %has_exit, align 8, !dbg !3417
  call void @find_exits(%struct.loop* %1, %struct.basic_block_def** %2, %struct.bitmap_head_def* %3, %struct.bitmap_head_def* %4), !dbg !3418
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3419
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3420
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit, align 8, !dbg !3421
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_reached, align 8, !dbg !3422
  call void @compute_always_reached(%struct.loop* %5, %struct.basic_block_def** %6, %struct.bitmap_head_def* %7, %struct.bitmap_head_def* %8), !dbg !3423
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3424
  %10 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3425
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %has_exit, align 8, !dbg !3426
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_executed, align 8, !dbg !3427
  call void @compute_always_reached(%struct.loop* %9, %struct.basic_block_def** %10, %struct.bitmap_head_def* %11, %struct.bitmap_head_def* %12), !dbg !3428
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3429
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3430
  call void @find_defs(%struct.loop* %13, %struct.basic_block_def** %14), !dbg !3431
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3432
  %16 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3433
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_reached, align 8, !dbg !3434
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_executed, align 8, !dbg !3435
  call void @find_invariants_body(%struct.loop* %15, %struct.basic_block_def** %16, %struct.bitmap_head_def* %17, %struct.bitmap_head_def* %18), !dbg !3436
  call void @merge_identical_invariants(), !dbg !3437
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_reached, align 8, !dbg !3438
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %19), !dbg !3438
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %always_reached, align 8, !dbg !3438
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_executed, align 8, !dbg !3439
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %20), !dbg !3439
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %always_executed, align 8, !dbg !3439
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit, align 8, !dbg !3440
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %21), !dbg !3440
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %may_exit, align 8, !dbg !3440
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %has_exit, align 8, !dbg !3441
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %22), !dbg !3441
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %has_exit, align 8, !dbg !3441
  %23 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3442
  %24 = bitcast %struct.basic_block_def** %23 to i8*, !dbg !3442
  call void @free(i8* %24), !dbg !3443
  ret void, !dbg !3444
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants_to_move(i8 zeroext %speed) #0 !dbg !3445 {
entry:
  %speed.addr = alloca i8, align 1
  %gain = alloca i32, align 4
  %i = alloca i32, align 4
  %regs_used = alloca i32, align 4
  %regs_needed = alloca [27 x i32], align 16
  %new_regs = alloca [27 x i32], align 16
  %inv = alloca %struct.invariant*, align 8
  %n_regs = alloca i32, align 4
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !3448, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata i32* %gain, metadata !3450, metadata !DIExpression()), !dbg !3451
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3452, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.declare(metadata i32* %regs_used, metadata !3454, metadata !DIExpression()), !dbg !3455
  call void @llvm.dbg.declare(metadata [27 x i32]* %regs_needed, metadata !3456, metadata !DIExpression()), !dbg !3458
  call void @llvm.dbg.declare(metadata [27 x i32]* %new_regs, metadata !3459, metadata !DIExpression()), !dbg !3460
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !3461, metadata !DIExpression()), !dbg !3462
  store %struct.invariant* null, %struct.invariant** %inv, align 8, !dbg !3462
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3463
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !3463
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3463

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3463
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !3463
  br label %cond.end, !dbg !3463

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3463

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3463
  %call = call i32 @VEC_invariant_p_base_length(%struct.VEC_invariant_p_base* %cond), !dbg !3463
  %tobool1 = icmp ne i32 %call, 0, !dbg !3463
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3465

if.then:                                          ; preds = %cond.end
  br label %while.end, !dbg !3466

if.end:                                           ; preds = %cond.end
  %2 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !3467
  %tobool2 = icmp ne i32 %2, 0, !dbg !3467
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !3469

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %regs_used, align 4, !dbg !3470
  br label %if.end23, !dbg !3471

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %n_regs, metadata !3472, metadata !DIExpression()), !dbg !3474
  %3 = load %struct.df*, %struct.df** @df, align 8, !dbg !3475
  %regs_inited = getelementptr inbounds %struct.df, %struct.df* %3, i32 0, i32 9, !dbg !3475
  %4 = load i32, i32* %regs_inited, align 4, !dbg !3475
  store i32 %4, i32* %n_regs, align 4, !dbg !3474
  store i32 2, i32* %regs_used, align 4, !dbg !3476
  store i32 0, i32* %i, align 4, !dbg !3477
  br label %for.cond, !dbg !3479

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4, !dbg !3480
  %6 = load i32, i32* %n_regs, align 4, !dbg !3482
  %cmp = icmp ult i32 %5, %6, !dbg !3483
  br i1 %cmp, label %for.body, label %for.end, !dbg !3484

for.body:                                         ; preds = %for.cond
  %7 = load %struct.df*, %struct.df** @df, align 8, !dbg !3485
  %def_regs = getelementptr inbounds %struct.df, %struct.df* %7, i32 0, i32 5, !dbg !3485
  %8 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs, align 8, !dbg !3485
  %9 = load i32, i32* %i, align 4, !dbg !3485
  %idxprom = zext i32 %9 to i64, !dbg !3485
  %arrayidx = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %8, i64 %idxprom, !dbg !3485
  %10 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx, align 8, !dbg !3485
  %tobool4 = icmp ne %struct.df_reg_info* %10, null, !dbg !3485
  br i1 %tobool4, label %cond.true5, label %cond.false10, !dbg !3488

cond.true5:                                       ; preds = %for.body
  %11 = load %struct.df*, %struct.df** @df, align 8, !dbg !3485
  %def_regs6 = getelementptr inbounds %struct.df, %struct.df* %11, i32 0, i32 5, !dbg !3485
  %12 = load %struct.df_reg_info**, %struct.df_reg_info*** %def_regs6, align 8, !dbg !3485
  %13 = load i32, i32* %i, align 4, !dbg !3485
  %idxprom7 = zext i32 %13 to i64, !dbg !3485
  %arrayidx8 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %12, i64 %idxprom7, !dbg !3485
  %14 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx8, align 8, !dbg !3485
  %tobool9 = icmp ne %struct.df_reg_info* %14, null, !dbg !3485
  br i1 %tobool9, label %if.end21, label %land.lhs.true, !dbg !3485

cond.false10:                                     ; preds = %for.body
  br i1 false, label %if.end21, label %land.lhs.true, !dbg !3488

land.lhs.true:                                    ; preds = %cond.false10, %cond.true5
  %15 = load %struct.df*, %struct.df** @df, align 8, !dbg !3489
  %use_regs = getelementptr inbounds %struct.df, %struct.df* %15, i32 0, i32 6, !dbg !3489
  %16 = load %struct.df_reg_info**, %struct.df_reg_info*** %use_regs, align 8, !dbg !3489
  %17 = load i32, i32* %i, align 4, !dbg !3489
  %idxprom11 = zext i32 %17 to i64, !dbg !3489
  %arrayidx12 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %16, i64 %idxprom11, !dbg !3489
  %18 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx12, align 8, !dbg !3489
  %tobool13 = icmp ne %struct.df_reg_info* %18, null, !dbg !3489
  br i1 %tobool13, label %cond.true14, label %cond.false19, !dbg !3490

cond.true14:                                      ; preds = %land.lhs.true
  %19 = load %struct.df*, %struct.df** @df, align 8, !dbg !3489
  %use_regs15 = getelementptr inbounds %struct.df, %struct.df* %19, i32 0, i32 6, !dbg !3489
  %20 = load %struct.df_reg_info**, %struct.df_reg_info*** %use_regs15, align 8, !dbg !3489
  %21 = load i32, i32* %i, align 4, !dbg !3489
  %idxprom16 = zext i32 %21 to i64, !dbg !3489
  %arrayidx17 = getelementptr inbounds %struct.df_reg_info*, %struct.df_reg_info** %20, i64 %idxprom16, !dbg !3489
  %22 = load %struct.df_reg_info*, %struct.df_reg_info** %arrayidx17, align 8, !dbg !3489
  %tobool18 = icmp ne %struct.df_reg_info* %22, null, !dbg !3489
  br i1 %tobool18, label %if.then20, label %if.end21, !dbg !3489

cond.false19:                                     ; preds = %land.lhs.true
  br i1 false, label %if.then20, label %if.end21, !dbg !3490

if.then20:                                        ; preds = %cond.false19, %cond.true14
  %23 = load i32, i32* %regs_used, align 4, !dbg !3491
  %inc = add i32 %23, 1, !dbg !3491
  store i32 %inc, i32* %regs_used, align 4, !dbg !3491
  br label %if.end21, !dbg !3493

if.end21:                                         ; preds = %if.then20, %cond.false19, %cond.true14, %cond.false10, %cond.true5
  br label %for.inc, !dbg !3494

for.inc:                                          ; preds = %if.end21
  %24 = load i32, i32* %i, align 4, !dbg !3495
  %inc22 = add i32 %24, 1, !dbg !3495
  store i32 %inc22, i32* %i, align 4, !dbg !3495
  br label %for.cond, !dbg !3496, !llvm.loop !3497

for.end:                                          ; preds = %for.cond
  br label %if.end23

if.end23:                                         ; preds = %for.end, %if.then3
  %25 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !3499
  %tobool24 = icmp ne i32 %25, 0, !dbg !3499
  br i1 %tobool24, label %if.else28, label %if.then25, !dbg !3501

if.then25:                                        ; preds = %if.end23
  %arrayidx26 = getelementptr inbounds [27 x i32], [27 x i32]* %regs_needed, i64 0, i64 0, !dbg !3502
  store i32 0, i32* %arrayidx26, align 16, !dbg !3503
  %arrayidx27 = getelementptr inbounds [27 x i32], [27 x i32]* %new_regs, i64 0, i64 0, !dbg !3504
  store i32 0, i32* %arrayidx27, align 16, !dbg !3505
  br label %if.end39, !dbg !3504

if.else28:                                        ; preds = %if.end23
  store i32 0, i32* %i, align 4, !dbg !3506
  br label %for.cond29, !dbg !3509

for.cond29:                                       ; preds = %for.inc36, %if.else28
  %26 = load i32, i32* %i, align 4, !dbg !3510
  %27 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3512
  %cmp30 = icmp slt i32 %26, %27, !dbg !3513
  br i1 %cmp30, label %for.body31, label %for.end38, !dbg !3514

for.body31:                                       ; preds = %for.cond29
  %28 = load i32, i32* %i, align 4, !dbg !3515
  %idxprom32 = zext i32 %28 to i64, !dbg !3516
  %arrayidx33 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom32, !dbg !3516
  %29 = load i32, i32* %arrayidx33, align 4, !dbg !3516
  %idxprom34 = zext i32 %29 to i64, !dbg !3517
  %arrayidx35 = getelementptr inbounds [27 x i32], [27 x i32]* %new_regs, i64 0, i64 %idxprom34, !dbg !3517
  store i32 0, i32* %arrayidx35, align 4, !dbg !3518
  br label %for.inc36, !dbg !3517

for.inc36:                                        ; preds = %for.body31
  %30 = load i32, i32* %i, align 4, !dbg !3519
  %inc37 = add i32 %30, 1, !dbg !3519
  store i32 %inc37, i32* %i, align 4, !dbg !3519
  br label %for.cond29, !dbg !3520, !llvm.loop !3521

for.end38:                                        ; preds = %for.cond29
  br label %if.end39

if.end39:                                         ; preds = %for.end38, %if.then25
  br label %while.cond, !dbg !3523

while.cond:                                       ; preds = %if.end63, %if.end39
  %arraydecay = getelementptr inbounds [27 x i32], [27 x i32]* %regs_needed, i64 0, i64 0, !dbg !3524
  %arraydecay40 = getelementptr inbounds [27 x i32], [27 x i32]* %new_regs, i64 0, i64 0, !dbg !3525
  %31 = load i32, i32* %regs_used, align 4, !dbg !3526
  %32 = load i8, i8* %speed.addr, align 1, !dbg !3527
  %call41 = call i32 @best_gain_for_invariant(%struct.invariant** %inv, i32* %arraydecay, i32* %arraydecay40, i32 %31, i8 zeroext %32), !dbg !3528
  store i32 %call41, i32* %gain, align 4, !dbg !3529
  %cmp42 = icmp sgt i32 %call41, 0, !dbg !3530
  br i1 %cmp42, label %while.body, label %while.end, !dbg !3523

while.body:                                       ; preds = %while.cond
  %33 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3531
  %invno = getelementptr inbounds %struct.invariant, %struct.invariant* %33, i32 0, i32 0, !dbg !3533
  %34 = load i32, i32* %invno, align 8, !dbg !3533
  %35 = load i32, i32* %gain, align 4, !dbg !3534
  call void @set_move_mark(i32 %34, i32 %35), !dbg !3535
  %36 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !3536
  %tobool43 = icmp ne i32 %36, 0, !dbg !3536
  br i1 %tobool43, label %if.else47, label %if.then44, !dbg !3538

if.then44:                                        ; preds = %while.body
  %arrayidx45 = getelementptr inbounds [27 x i32], [27 x i32]* %regs_needed, i64 0, i64 0, !dbg !3539
  %37 = load i32, i32* %arrayidx45, align 16, !dbg !3539
  %arrayidx46 = getelementptr inbounds [27 x i32], [27 x i32]* %new_regs, i64 0, i64 0, !dbg !3540
  %38 = load i32, i32* %arrayidx46, align 16, !dbg !3541
  %add = add i32 %38, %37, !dbg !3541
  store i32 %add, i32* %arrayidx46, align 16, !dbg !3541
  br label %if.end63, !dbg !3540

if.else47:                                        ; preds = %while.body
  store i32 0, i32* %i, align 4, !dbg !3542
  br label %for.cond48, !dbg !3545

for.cond48:                                       ; preds = %for.inc60, %if.else47
  %39 = load i32, i32* %i, align 4, !dbg !3546
  %40 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !3548
  %cmp49 = icmp slt i32 %39, %40, !dbg !3549
  br i1 %cmp49, label %for.body50, label %for.end62, !dbg !3550

for.body50:                                       ; preds = %for.cond48
  %41 = load i32, i32* %i, align 4, !dbg !3551
  %idxprom51 = zext i32 %41 to i64, !dbg !3552
  %arrayidx52 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom51, !dbg !3552
  %42 = load i32, i32* %arrayidx52, align 4, !dbg !3552
  %idxprom53 = zext i32 %42 to i64, !dbg !3553
  %arrayidx54 = getelementptr inbounds [27 x i32], [27 x i32]* %regs_needed, i64 0, i64 %idxprom53, !dbg !3553
  %43 = load i32, i32* %arrayidx54, align 4, !dbg !3553
  %44 = load i32, i32* %i, align 4, !dbg !3554
  %idxprom55 = zext i32 %44 to i64, !dbg !3555
  %arrayidx56 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom55, !dbg !3555
  %45 = load i32, i32* %arrayidx56, align 4, !dbg !3555
  %idxprom57 = zext i32 %45 to i64, !dbg !3556
  %arrayidx58 = getelementptr inbounds [27 x i32], [27 x i32]* %new_regs, i64 0, i64 %idxprom57, !dbg !3556
  %46 = load i32, i32* %arrayidx58, align 4, !dbg !3557
  %add59 = add i32 %46, %43, !dbg !3557
  store i32 %add59, i32* %arrayidx58, align 4, !dbg !3557
  br label %for.inc60, !dbg !3556

for.inc60:                                        ; preds = %for.body50
  %47 = load i32, i32* %i, align 4, !dbg !3558
  %inc61 = add i32 %47, 1, !dbg !3558
  store i32 %inc61, i32* %i, align 4, !dbg !3558
  br label %for.cond48, !dbg !3559, !llvm.loop !3560

for.end62:                                        ; preds = %for.cond48
  br label %if.end63

if.end63:                                         ; preds = %for.end62, %if.then44
  br label %while.cond, !dbg !3523, !llvm.loop !3562

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !3564
}

declare dso_local zeroext i8 @optimize_loop_for_speed_p(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @move_invariants(%struct.loop* %loop) #0 !dbg !3565 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %inv = alloca %struct.invariant*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3566, metadata !DIExpression()), !dbg !3567
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !3568, metadata !DIExpression()), !dbg !3569
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3570, metadata !DIExpression()), !dbg !3571
  store i32 0, i32* %i, align 4, !dbg !3572
  br label %for.cond, !dbg !3574

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3575
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !3575
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3575

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3575
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !3575
  br label %cond.end, !dbg !3575

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3575

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3575
  %2 = load i32, i32* %i, align 4, !dbg !3575
  %call = call i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %cond, i32 %2, %struct.invariant** %inv), !dbg !3575
  %tobool1 = icmp ne i32 %call, 0, !dbg !3577
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3577

for.body:                                         ; preds = %cond.end
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3578
  %4 = load i32, i32* %i, align 4, !dbg !3579
  %call2 = call zeroext i8 @move_invariant_reg(%struct.loop* %3, i32 %4), !dbg !3580
  br label %for.inc, !dbg !3580

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !3581
  %inc = add i32 %5, 1, !dbg !3581
  store i32 %inc, i32* %i, align 4, !dbg !3581
  br label %for.cond, !dbg !3582, !llvm.loop !3583

for.end:                                          ; preds = %cond.end
  %6 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !3585
  %tobool3 = icmp ne i32 %6, 0, !dbg !3585
  br i1 %tobool3, label %land.lhs.true, label %if.end35, !dbg !3587

land.lhs.true:                                    ; preds = %for.end
  %call4 = call zeroext i8 @resize_reg_info(), !dbg !3588
  %conv = zext i8 %call4 to i32, !dbg !3588
  %tobool5 = icmp ne i32 %conv, 0, !dbg !3588
  br i1 %tobool5, label %if.then, label %if.end35, !dbg !3589

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !3590
  br label %for.cond6, !dbg !3593

for.cond6:                                        ; preds = %for.inc32, %if.then
  %7 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3594
  %tobool7 = icmp ne %struct.VEC_invariant_p_heap* %7, null, !dbg !3594
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !3594

cond.true8:                                       ; preds = %for.cond6
  %8 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3594
  %base9 = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %8, i32 0, i32 0, !dbg !3594
  br label %cond.end11, !dbg !3594

cond.false10:                                     ; preds = %for.cond6
  br label %cond.end11, !dbg !3594

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_invariant_p_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !3594
  %9 = load i32, i32* %i, align 4, !dbg !3594
  %call13 = call i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %cond12, i32 %9, %struct.invariant** %inv), !dbg !3594
  %tobool14 = icmp ne i32 %call13, 0, !dbg !3596
  br i1 %tobool14, label %for.body15, label %for.end34, !dbg !3596

for.body15:                                       ; preds = %cond.end11
  %10 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3597
  %reg = getelementptr inbounds %struct.invariant, %struct.invariant* %10, i32 0, i32 2, !dbg !3599
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3599
  %cmp = icmp ne %struct.rtx_def* %11, null, !dbg !3600
  br i1 %cmp, label %if.then17, label %if.end31, !dbg !3601

if.then17:                                        ; preds = %for.body15
  %12 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3602
  %orig_regno = getelementptr inbounds %struct.invariant, %struct.invariant* %12, i32 0, i32 3, !dbg !3605
  %13 = load i32, i32* %orig_regno, align 8, !dbg !3605
  %cmp18 = icmp sge i32 %13, 0, !dbg !3606
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !3607

if.then20:                                        ; preds = %if.then17
  %14 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3608
  %reg21 = getelementptr inbounds %struct.invariant, %struct.invariant* %14, i32 0, i32 2, !dbg !3608
  %15 = load %struct.rtx_def*, %struct.rtx_def** %reg21, align 8, !dbg !3608
  %call22 = call i32 @rhs_regno(%struct.rtx_def* %15), !dbg !3608
  %16 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3609
  %orig_regno23 = getelementptr inbounds %struct.invariant, %struct.invariant* %16, i32 0, i32 3, !dbg !3610
  %17 = load i32, i32* %orig_regno23, align 8, !dbg !3610
  %call24 = call i32 @reg_preferred_class(i32 %17), !dbg !3611
  %18 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3612
  %orig_regno25 = getelementptr inbounds %struct.invariant, %struct.invariant* %18, i32 0, i32 3, !dbg !3613
  %19 = load i32, i32* %orig_regno25, align 8, !dbg !3613
  %call26 = call i32 @reg_alternate_class(i32 %19), !dbg !3614
  %20 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3615
  %orig_regno27 = getelementptr inbounds %struct.invariant, %struct.invariant* %20, i32 0, i32 3, !dbg !3616
  %21 = load i32, i32* %orig_regno27, align 8, !dbg !3616
  %call28 = call i32 @reg_cover_class(i32 %21), !dbg !3617
  call void @setup_reg_classes(i32 %call22, i32 %call24, i32 %call26, i32 %call28), !dbg !3618
  br label %if.end, !dbg !3618

if.else:                                          ; preds = %if.then17
  %22 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3619
  %reg29 = getelementptr inbounds %struct.invariant, %struct.invariant* %22, i32 0, i32 2, !dbg !3619
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg29, align 8, !dbg !3619
  %call30 = call i32 @rhs_regno(%struct.rtx_def* %23), !dbg !3619
  call void @setup_reg_classes(i32 %call30, i32 13, i32 0, i32 13), !dbg !3620
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then20
  br label %if.end31, !dbg !3621

if.end31:                                         ; preds = %if.end, %for.body15
  br label %for.inc32, !dbg !3622

for.inc32:                                        ; preds = %if.end31
  %24 = load i32, i32* %i, align 4, !dbg !3623
  %inc33 = add i32 %24, 1, !dbg !3623
  store i32 %inc33, i32* %i, align 4, !dbg !3623
  br label %for.cond6, !dbg !3624, !llvm.loop !3625

for.end34:                                        ; preds = %cond.end11
  br label %if.end35, !dbg !3627

if.end35:                                         ; preds = %for.end34, %land.lhs.true, %for.end
  ret void, !dbg !3628
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_inv_motion_data() #0 !dbg !3629 {
entry:
  %i = alloca i32, align 4
  %def = alloca %struct.def*, align 8
  %inv = alloca %struct.invariant*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3630, metadata !DIExpression()), !dbg !3631
  call void @llvm.dbg.declare(metadata %struct.def** %def, metadata !3632, metadata !DIExpression()), !dbg !3633
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !3634, metadata !DIExpression()), !dbg !3635
  call void @check_invariant_table_size(), !dbg !3636
  store i32 0, i32* %i, align 4, !dbg !3637
  br label %for.cond, !dbg !3639

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3640
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !3642
  %def_info = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 3, !dbg !3642
  %table_size = getelementptr inbounds %struct.df_ref_info, %struct.df_ref_info* %def_info, i32 0, i32 4, !dbg !3642
  %2 = load i32, i32* %table_size, align 4, !dbg !3642
  %cmp = icmp ult i32 %0, %2, !dbg !3643
  br i1 %cmp, label %for.body, label %for.end, !dbg !3644

for.body:                                         ; preds = %for.cond
  %3 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !3645
  %4 = load i32, i32* %i, align 4, !dbg !3647
  %idxprom = zext i32 %4 to i64, !dbg !3645
  %arrayidx = getelementptr inbounds %struct.invariant*, %struct.invariant** %3, i64 %idxprom, !dbg !3645
  %5 = load %struct.invariant*, %struct.invariant** %arrayidx, align 8, !dbg !3645
  store %struct.invariant* %5, %struct.invariant** %inv, align 8, !dbg !3648
  %6 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3649
  %tobool = icmp ne %struct.invariant* %6, null, !dbg !3649
  br i1 %tobool, label %if.then, label %if.end, !dbg !3651

if.then:                                          ; preds = %for.body
  %7 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3652
  %def1 = getelementptr inbounds %struct.invariant, %struct.invariant* %7, i32 0, i32 4, !dbg !3654
  %8 = load %struct.def*, %struct.def** %def1, align 8, !dbg !3654
  store %struct.def* %8, %struct.def** %def, align 8, !dbg !3655
  %9 = load %struct.def*, %struct.def** %def, align 8, !dbg !3656
  %cmp2 = icmp ne %struct.def* %9, null, !dbg !3656
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !3656

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 1533, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3656
  br label %cond.end, !dbg !3656

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3656

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3656
  %10 = load %struct.def*, %struct.def** %def, align 8, !dbg !3657
  %uses = getelementptr inbounds %struct.def, %struct.def* %10, i32 0, i32 0, !dbg !3658
  %11 = load %struct.use*, %struct.use** %uses, align 8, !dbg !3658
  call void @free_use_list(%struct.use* %11), !dbg !3659
  %12 = load %struct.def*, %struct.def** %def, align 8, !dbg !3660
  %13 = bitcast %struct.def* %12 to i8*, !dbg !3660
  call void @free(i8* %13), !dbg !3661
  %14 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !3662
  %15 = load i32, i32* %i, align 4, !dbg !3663
  %idxprom3 = zext i32 %15 to i64, !dbg !3662
  %arrayidx4 = getelementptr inbounds %struct.invariant*, %struct.invariant** %14, i64 %idxprom3, !dbg !3662
  store %struct.invariant* null, %struct.invariant** %arrayidx4, align 8, !dbg !3664
  br label %if.end, !dbg !3665

if.end:                                           ; preds = %cond.end, %for.body
  br label %for.inc, !dbg !3666

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !3667
  %inc = add i32 %16, 1, !dbg !3667
  store i32 %inc, i32* %i, align 4, !dbg !3667
  br label %for.cond, !dbg !3668, !llvm.loop !3669

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3671
  br label %for.cond5, !dbg !3673

for.cond5:                                        ; preds = %for.inc14, %for.end
  %17 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3674
  %tobool6 = icmp ne %struct.VEC_invariant_p_heap* %17, null, !dbg !3674
  br i1 %tobool6, label %cond.true7, label %cond.false8, !dbg !3674

cond.true7:                                       ; preds = %for.cond5
  %18 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !3674
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %18, i32 0, i32 0, !dbg !3674
  br label %cond.end9, !dbg !3674

cond.false8:                                      ; preds = %for.cond5
  br label %cond.end9, !dbg !3674

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi %struct.VEC_invariant_p_base* [ %base, %cond.true7 ], [ null, %cond.false8 ], !dbg !3674
  %19 = load i32, i32* %i, align 4, !dbg !3674
  %call = call i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %cond10, i32 %19, %struct.invariant** %inv), !dbg !3674
  %tobool11 = icmp ne i32 %call, 0, !dbg !3676
  br i1 %tobool11, label %for.body12, label %for.end16, !dbg !3676

for.body12:                                       ; preds = %cond.end9
  %20 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3677
  %depends_on = getelementptr inbounds %struct.invariant, %struct.invariant* %20, i32 0, i32 10, !dbg !3677
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !3677
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %21), !dbg !3677
  %22 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3677
  %depends_on13 = getelementptr inbounds %struct.invariant, %struct.invariant* %22, i32 0, i32 10, !dbg !3677
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on13, align 8, !dbg !3677
  %23 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !3679
  %24 = bitcast %struct.invariant* %23 to i8*, !dbg !3679
  call void @free(i8* %24), !dbg !3680
  br label %for.inc14, !dbg !3681

for.inc14:                                        ; preds = %for.body12
  %25 = load i32, i32* %i, align 4, !dbg !3682
  %inc15 = add i32 %25, 1, !dbg !3682
  store i32 %inc15, i32* %i, align 4, !dbg !3682
  br label %for.cond5, !dbg !3683, !llvm.loop !3684

for.end16:                                        ; preds = %cond.end9
  call void @VEC_invariant_p_heap_free(%struct.VEC_invariant_p_heap** @invariants), !dbg !3686
  ret void, !dbg !3687
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_invariant_p_heap* @VEC_invariant_p_heap_alloc(i32 %alloc_) #0 !dbg !3688 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3691, metadata !DIExpression()), !dbg !3692
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3692
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3692
  %1 = bitcast i8* %call to %struct.VEC_invariant_p_heap*, !dbg !3692
  ret %struct.VEC_invariant_p_heap* %1, !dbg !3692
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_exits(%struct.loop* %loop, %struct.basic_block_def** %body, %struct.bitmap_head_def* %may_exit, %struct.bitmap_head_def* %has_exit) #0 !dbg !3693 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body.addr = alloca %struct.basic_block_def**, align 8
  %may_exit.addr = alloca %struct.bitmap_head_def*, align 8
  %has_exit.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %outermost_exit = alloca %struct.loop*, align 8
  %aexit = alloca %struct.loop*, align 8
  %has_call = alloca i8, align 1
  %insn = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3696, metadata !DIExpression()), !dbg !3697
  store %struct.basic_block_def** %body, %struct.basic_block_def*** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body.addr, metadata !3698, metadata !DIExpression()), !dbg !3699
  store %struct.bitmap_head_def* %may_exit, %struct.bitmap_head_def** %may_exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %may_exit.addr, metadata !3700, metadata !DIExpression()), !dbg !3701
  store %struct.bitmap_head_def* %has_exit, %struct.bitmap_head_def** %has_exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %has_exit.addr, metadata !3702, metadata !DIExpression()), !dbg !3703
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3704, metadata !DIExpression()), !dbg !3705
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3706, metadata !DIExpression()), !dbg !3713
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3714, metadata !DIExpression()), !dbg !3715
  call void @llvm.dbg.declare(metadata %struct.loop** %outermost_exit, metadata !3716, metadata !DIExpression()), !dbg !3717
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3718
  store %struct.loop* %0, %struct.loop** %outermost_exit, align 8, !dbg !3717
  call void @llvm.dbg.declare(metadata %struct.loop** %aexit, metadata !3719, metadata !DIExpression()), !dbg !3720
  call void @llvm.dbg.declare(metadata i8* %has_call, metadata !3721, metadata !DIExpression()), !dbg !3722
  store i8 0, i8* %has_call, align 1, !dbg !3722
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !3723, metadata !DIExpression()), !dbg !3724
  store i32 0, i32* %i, align 4, !dbg !3725
  br label %for.cond, !dbg !3727

for.cond:                                         ; preds = %for.inc78, %entry
  %1 = load i32, i32* %i, align 4, !dbg !3728
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3730
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !3731
  %3 = load i32, i32* %num_nodes, align 4, !dbg !3731
  %cmp = icmp ult i32 %1, %3, !dbg !3732
  br i1 %cmp, label %for.body, label %for.end79, !dbg !3733

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3734
  %5 = load i32, i32* %i, align 4, !dbg !3737
  %idxprom = zext i32 %5 to i64, !dbg !3734
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !3734
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3734
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 3, !dbg !3738
  %7 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3738
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3739
  %cmp1 = icmp eq %struct.loop* %7, %8, !dbg !3740
  br i1 %cmp1, label %if.then, label %if.end47, !dbg !3741

if.then:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3742
  %10 = load i32, i32* %i, align 4, !dbg !3742
  %idxprom2 = zext i32 %10 to i64, !dbg !3742
  %arrayidx3 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom2, !dbg !3742
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx3, align 8, !dbg !3742
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !3742
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3742
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3742
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 0, !dbg !3742
  %13 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3742
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !3742
  br label %for.cond4, !dbg !3742

for.cond4:                                        ; preds = %for.inc, %if.then
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3745
  %tobool = icmp ne %struct.rtx_def* %14, null, !dbg !3745
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3745

land.rhs:                                         ; preds = %for.cond4
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3745
  %16 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3745
  %17 = load i32, i32* %i, align 4, !dbg !3745
  %idxprom5 = zext i32 %17 to i64, !dbg !3745
  %arrayidx6 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %16, i64 %idxprom5, !dbg !3745
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx6, align 8, !dbg !3745
  %il7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !3745
  %rtl8 = bitcast %union.basic_block_il_dependent* %il7 to %struct.rtl_bb_info**, !dbg !3745
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl8, align 8, !dbg !3745
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 1, !dbg !3745
  %20 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3745
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3745
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3745
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3745
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !3745
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3745
  %cmp10 = icmp ne %struct.rtx_def* %15, %21, !dbg !3745
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond4
  %22 = phi i1 [ false, %for.cond4 ], [ %cmp10, %land.rhs ], !dbg !3747
  br i1 %22, label %for.body11, label %for.end, !dbg !3742

for.body11:                                       ; preds = %land.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3748
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !3748
  %bf.load = load i32, i32* %24, align 8, !dbg !3748
  %bf.clear = and i32 %bf.load, 65535, !dbg !3748
  %cmp12 = icmp eq i32 %bf.clear, 10, !dbg !3748
  br i1 %cmp12, label %land.lhs.true, label %if.end, !dbg !3751

land.lhs.true:                                    ; preds = %for.body11
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3752
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !3752
  %bf.load13 = load i32, i32* %26, align 8, !dbg !3752
  %bf.lshr = lshr i32 %bf.load13, 25, !dbg !3752
  %bf.clear14 = and i32 %bf.lshr, 1, !dbg !3752
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !3752
  br i1 %tobool15, label %if.then24, label %lor.lhs.false, !dbg !3753

lor.lhs.false:                                    ; preds = %land.lhs.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3754
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !3754
  %bf.load16 = load i32, i32* %28, align 8, !dbg !3754
  %bf.lshr17 = lshr i32 %bf.load16, 26, !dbg !3754
  %bf.clear18 = and i32 %bf.lshr17, 1, !dbg !3754
  %tobool19 = icmp ne i32 %bf.clear18, 0, !dbg !3754
  br i1 %tobool19, label %if.end, label %lor.lhs.false20, !dbg !3754

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3754
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !3754
  %bf.load21 = load i32, i32* %30, align 8, !dbg !3754
  %bf.lshr22 = lshr i32 %bf.load21, 31, !dbg !3754
  %tobool23 = icmp ne i32 %bf.lshr22, 0, !dbg !3754
  br i1 %tobool23, label %if.end, label %if.then24, !dbg !3755

if.then24:                                        ; preds = %lor.lhs.false20, %land.lhs.true
  store i8 1, i8* %has_call, align 1, !dbg !3756
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit.addr, align 8, !dbg !3758
  %32 = load i32, i32* %i, align 4, !dbg !3759
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %31, i32 %32), !dbg !3760
  br label %for.end, !dbg !3761

if.end:                                           ; preds = %lor.lhs.false20, %lor.lhs.false, %for.body11
  br label %for.inc, !dbg !3762

for.inc:                                          ; preds = %if.end
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3745
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !3745
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !3745
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 2, !dbg !3745
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !3745
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !3745
  store %struct.rtx_def* %34, %struct.rtx_def** %insn, align 8, !dbg !3745
  br label %for.cond4, !dbg !3745, !llvm.loop !3763

for.end:                                          ; preds = %if.then24, %land.end
  %35 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3765
  %36 = load i32, i32* %i, align 4, !dbg !3765
  %idxprom29 = zext i32 %36 to i64, !dbg !3765
  %arrayidx30 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %35, i64 %idxprom29, !dbg !3765
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx30, align 8, !dbg !3765
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 1, !dbg !3765
  %call31 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3765
  %38 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3765
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !3765
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 0, !dbg !3765
  store i32 %40, i32* %39, align 8, !dbg !3765
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !3765
  %42 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 1, !dbg !3765
  store %struct.VEC_edge_gc** %42, %struct.VEC_edge_gc*** %41, align 8, !dbg !3765
  %43 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3765
  %44 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3765
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false), !dbg !3765
  br label %for.cond32, !dbg !3765

for.cond32:                                       ; preds = %for.inc45, %for.end
  %45 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3767
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 0, !dbg !3767
  %47 = load i32, i32* %46, align 8, !dbg !3767
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 1, !dbg !3767
  %49 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %48, align 8, !dbg !3767
  %call33 = call zeroext i8 @ei_cond(i32 %47, %struct.VEC_edge_gc** %49, %struct.edge_def** %e), !dbg !3767
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3765
  br i1 %tobool34, label %for.body35, label %for.end46, !dbg !3765

for.body35:                                       ; preds = %for.cond32
  %50 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3769
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3772
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !3773
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3773
  %call36 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %50, %struct.basic_block_def* %52), !dbg !3774
  %tobool37 = icmp ne i8 %call36, 0, !dbg !3774
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !3775

if.then38:                                        ; preds = %for.body35
  br label %for.inc45, !dbg !3776

if.end39:                                         ; preds = %for.body35
  %53 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit.addr, align 8, !dbg !3777
  %54 = load i32, i32* %i, align 4, !dbg !3778
  %call40 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %53, i32 %54), !dbg !3779
  %55 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %has_exit.addr, align 8, !dbg !3780
  %56 = load i32, i32* %i, align 4, !dbg !3781
  %call41 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %55, i32 %56), !dbg !3782
  %57 = load %struct.loop*, %struct.loop** %outermost_exit, align 8, !dbg !3783
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3784
  %dest42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 1, !dbg !3785
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %dest42, align 8, !dbg !3785
  %loop_father43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 3, !dbg !3786
  %60 = load %struct.loop*, %struct.loop** %loop_father43, align 8, !dbg !3786
  %call44 = call %struct.loop* @find_common_loop(%struct.loop* %57, %struct.loop* %60), !dbg !3787
  store %struct.loop* %call44, %struct.loop** %outermost_exit, align 8, !dbg !3788
  br label %for.inc45, !dbg !3789

for.inc45:                                        ; preds = %if.end39, %if.then38
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3767
  br label %for.cond32, !dbg !3767, !llvm.loop !3790

for.end46:                                        ; preds = %for.cond32
  br label %for.inc78, !dbg !3792

if.end47:                                         ; preds = %for.body
  %61 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3793
  %62 = load i32, i32* %i, align 4, !dbg !3795
  %idxprom48 = zext i32 %62 to i64, !dbg !3793
  %arrayidx49 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %61, i64 %idxprom48, !dbg !3793
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx49, align 8, !dbg !3793
  %loop_father50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 3, !dbg !3796
  %64 = load %struct.loop*, %struct.loop** %loop_father50, align 8, !dbg !3796
  %header = getelementptr inbounds %struct.loop, %struct.loop* %64, i32 0, i32 2, !dbg !3797
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3797
  %66 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3798
  %67 = load i32, i32* %i, align 4, !dbg !3799
  %idxprom51 = zext i32 %67 to i64, !dbg !3798
  %arrayidx52 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %66, i64 %idxprom51, !dbg !3798
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx52, align 8, !dbg !3798
  %cmp53 = icmp ne %struct.basic_block_def* %65, %68, !dbg !3800
  br i1 %cmp53, label %if.then54, label %if.end55, !dbg !3801

if.then54:                                        ; preds = %if.end47
  br label %for.inc78, !dbg !3802

if.end55:                                         ; preds = %if.end47
  %69 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3803
  %70 = load i32, i32* %i, align 4, !dbg !3803
  %idxprom56 = zext i32 %70 to i64, !dbg !3803
  %arrayidx57 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %69, i64 %idxprom56, !dbg !3803
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx57, align 8, !dbg !3803
  %loop_father58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 3, !dbg !3803
  %72 = load %struct.loop*, %struct.loop** %loop_father58, align 8, !dbg !3803
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %72, i32 0, i32 10, !dbg !3803
  %73 = load i8*, i8** %aux, align 8, !dbg !3803
  %74 = bitcast i8* %73 to %struct.loop_data*, !dbg !3803
  %has_call59 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %74, i32 0, i32 1, !dbg !3805
  %75 = load i8, i8* %has_call59, align 8, !dbg !3805
  %tobool60 = icmp ne i8 %75, 0, !dbg !3803
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !3806

if.then61:                                        ; preds = %if.end55
  store i8 1, i8* %has_call, align 1, !dbg !3807
  %76 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit.addr, align 8, !dbg !3809
  %77 = load i32, i32* %i, align 4, !dbg !3810
  %call62 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %76, i32 %77), !dbg !3811
  br label %if.end63, !dbg !3812

if.end63:                                         ; preds = %if.then61, %if.end55
  %78 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3813
  %79 = load i32, i32* %i, align 4, !dbg !3813
  %idxprom64 = zext i32 %79 to i64, !dbg !3813
  %arrayidx65 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %78, i64 %idxprom64, !dbg !3813
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx65, align 8, !dbg !3813
  %loop_father66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 3, !dbg !3813
  %81 = load %struct.loop*, %struct.loop** %loop_father66, align 8, !dbg !3813
  %aux67 = getelementptr inbounds %struct.loop, %struct.loop* %81, i32 0, i32 10, !dbg !3813
  %82 = load i8*, i8** %aux67, align 8, !dbg !3813
  %83 = bitcast i8* %82 to %struct.loop_data*, !dbg !3813
  %outermost_exit68 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %83, i32 0, i32 0, !dbg !3814
  %84 = load %struct.loop*, %struct.loop** %outermost_exit68, align 8, !dbg !3814
  store %struct.loop* %84, %struct.loop** %aexit, align 8, !dbg !3815
  %85 = load %struct.loop*, %struct.loop** %aexit, align 8, !dbg !3816
  %86 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3818
  %cmp69 = icmp ne %struct.loop* %85, %86, !dbg !3819
  br i1 %cmp69, label %if.then70, label %if.end77, !dbg !3820

if.then70:                                        ; preds = %if.end63
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit.addr, align 8, !dbg !3821
  %88 = load i32, i32* %i, align 4, !dbg !3823
  %call71 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %87, i32 %88), !dbg !3824
  %89 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %has_exit.addr, align 8, !dbg !3825
  %90 = load i32, i32* %i, align 4, !dbg !3826
  %call72 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %89, i32 %90), !dbg !3827
  %91 = load %struct.loop*, %struct.loop** %aexit, align 8, !dbg !3828
  %92 = load %struct.loop*, %struct.loop** %outermost_exit, align 8, !dbg !3830
  %call73 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %91, %struct.loop* %92), !dbg !3831
  %tobool74 = icmp ne i8 %call73, 0, !dbg !3831
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !3832

if.then75:                                        ; preds = %if.then70
  %93 = load %struct.loop*, %struct.loop** %aexit, align 8, !dbg !3833
  store %struct.loop* %93, %struct.loop** %outermost_exit, align 8, !dbg !3834
  br label %if.end76, !dbg !3835

if.end76:                                         ; preds = %if.then75, %if.then70
  br label %if.end77, !dbg !3836

if.end77:                                         ; preds = %if.end76, %if.end63
  br label %for.inc78, !dbg !3837

for.inc78:                                        ; preds = %if.end77, %if.then54, %for.end46
  %94 = load i32, i32* %i, align 4, !dbg !3838
  %inc = add i32 %94, 1, !dbg !3838
  store i32 %inc, i32* %i, align 4, !dbg !3838
  br label %for.cond, !dbg !3839, !llvm.loop !3840

for.end79:                                        ; preds = %for.cond
  %95 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3842
  %aux80 = getelementptr inbounds %struct.loop, %struct.loop* %95, i32 0, i32 10, !dbg !3844
  %96 = load i8*, i8** %aux80, align 8, !dbg !3844
  %cmp81 = icmp eq i8* %96, null, !dbg !3845
  br i1 %cmp81, label %if.then82, label %if.end87, !dbg !3846

if.then82:                                        ; preds = %for.end79
  %call83 = call i8* @xcalloc(i64 1, i64 184), !dbg !3847
  %97 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3849
  %aux84 = getelementptr inbounds %struct.loop, %struct.loop* %97, i32 0, i32 10, !dbg !3850
  store i8* %call83, i8** %aux84, align 8, !dbg !3851
  %98 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3852
  %aux85 = getelementptr inbounds %struct.loop, %struct.loop* %98, i32 0, i32 10, !dbg !3852
  %99 = load i8*, i8** %aux85, align 8, !dbg !3852
  %100 = bitcast i8* %99 to %struct.loop_data*, !dbg !3852
  %regs_ref = getelementptr inbounds %struct.loop_data, %struct.loop_data* %100, i32 0, i32 3, !dbg !3852
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %regs_ref, %struct.bitmap_obstack* @reg_obstack), !dbg !3852
  %101 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3853
  %aux86 = getelementptr inbounds %struct.loop, %struct.loop* %101, i32 0, i32 10, !dbg !3853
  %102 = load i8*, i8** %aux86, align 8, !dbg !3853
  %103 = bitcast i8* %102 to %struct.loop_data*, !dbg !3853
  %regs_live = getelementptr inbounds %struct.loop_data, %struct.loop_data* %103, i32 0, i32 4, !dbg !3853
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %regs_live, %struct.bitmap_obstack* @reg_obstack), !dbg !3853
  br label %if.end87, !dbg !3854

if.end87:                                         ; preds = %if.then82, %for.end79
  %104 = load %struct.loop*, %struct.loop** %outermost_exit, align 8, !dbg !3855
  %105 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3856
  %aux88 = getelementptr inbounds %struct.loop, %struct.loop* %105, i32 0, i32 10, !dbg !3856
  %106 = load i8*, i8** %aux88, align 8, !dbg !3856
  %107 = bitcast i8* %106 to %struct.loop_data*, !dbg !3856
  %outermost_exit89 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %107, i32 0, i32 0, !dbg !3857
  store %struct.loop* %104, %struct.loop** %outermost_exit89, align 8, !dbg !3858
  %108 = load i8, i8* %has_call, align 1, !dbg !3859
  %109 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3860
  %aux90 = getelementptr inbounds %struct.loop, %struct.loop* %109, i32 0, i32 10, !dbg !3860
  %110 = load i8*, i8** %aux90, align 8, !dbg !3860
  %111 = bitcast i8* %110 to %struct.loop_data*, !dbg !3860
  %has_call91 = getelementptr inbounds %struct.loop_data, %struct.loop_data* %111, i32 0, i32 1, !dbg !3861
  store i8 %108, i8* %has_call91, align 8, !dbg !3862
  ret void, !dbg !3863
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_always_reached(%struct.loop* %loop, %struct.basic_block_def** %body, %struct.bitmap_head_def* %may_exit, %struct.bitmap_head_def* %always_reached) #0 !dbg !3864 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body.addr = alloca %struct.basic_block_def**, align 8
  %may_exit.addr = alloca %struct.bitmap_head_def*, align 8
  %always_reached.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3865, metadata !DIExpression()), !dbg !3866
  store %struct.basic_block_def** %body, %struct.basic_block_def*** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body.addr, metadata !3867, metadata !DIExpression()), !dbg !3868
  store %struct.bitmap_head_def* %may_exit, %struct.bitmap_head_def** %may_exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %may_exit.addr, metadata !3869, metadata !DIExpression()), !dbg !3870
  store %struct.bitmap_head_def* %always_reached, %struct.bitmap_head_def** %always_reached.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %always_reached.addr, metadata !3871, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3873, metadata !DIExpression()), !dbg !3874
  store i32 0, i32* %i, align 4, !dbg !3875
  br label %for.cond, !dbg !3877

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3878
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3880
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 6, !dbg !3881
  %2 = load i32, i32* %num_nodes, align 4, !dbg !3881
  %cmp = icmp ult i32 %0, %2, !dbg !3882
  br i1 %cmp, label %for.body, label %for.end, !dbg !3883

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3884
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 3, !dbg !3887
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3887
  %5 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3888
  %6 = load i32, i32* %i, align 4, !dbg !3889
  %idxprom = zext i32 %6 to i64, !dbg !3888
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %5, i64 %idxprom, !dbg !3888
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3888
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %4, %struct.basic_block_def* %7), !dbg !3890
  %tobool = icmp ne i8 %call, 0, !dbg !3890
  br i1 %tobool, label %if.then, label %if.end, !dbg !3891

if.then:                                          ; preds = %for.body
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_reached.addr, align 8, !dbg !3892
  %9 = load i32, i32* %i, align 4, !dbg !3893
  %call1 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %9), !dbg !3894
  br label %if.end, !dbg !3894

if.end:                                           ; preds = %if.then, %for.body
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %may_exit.addr, align 8, !dbg !3895
  %11 = load i32, i32* %i, align 4, !dbg !3897
  %call2 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %10, i32 %11), !dbg !3898
  %tobool3 = icmp ne i32 %call2, 0, !dbg !3898
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !3899

if.then4:                                         ; preds = %if.end
  br label %for.end, !dbg !3900

if.end5:                                          ; preds = %if.end
  br label %for.inc, !dbg !3901

for.inc:                                          ; preds = %if.end5
  %12 = load i32, i32* %i, align 4, !dbg !3902
  %inc = add i32 %12, 1, !dbg !3902
  store i32 %inc, i32* %i, align 4, !dbg !3902
  br label %for.cond, !dbg !3903, !llvm.loop !3904

for.end:                                          ; preds = %if.then4, %for.cond
  ret void, !dbg !3906
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_defs(%struct.loop* %loop, %struct.basic_block_def** %body) #0 !dbg !3907 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body.addr = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %blocks = alloca %struct.bitmap_head_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3910, metadata !DIExpression()), !dbg !3911
  store %struct.basic_block_def** %body, %struct.basic_block_def*** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body.addr, metadata !3912, metadata !DIExpression()), !dbg !3913
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3914, metadata !DIExpression()), !dbg !3915
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %blocks, metadata !3916, metadata !DIExpression()), !dbg !3917
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3918
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %blocks, align 8, !dbg !3917
  store i32 0, i32* %i, align 4, !dbg !3919
  br label %for.cond, !dbg !3921

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3922
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3924
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 6, !dbg !3925
  %2 = load i32, i32* %num_nodes, align 4, !dbg !3925
  %cmp = icmp ult i32 %0, %2, !dbg !3926
  br i1 %cmp, label %for.body, label %for.end, !dbg !3927

for.body:                                         ; preds = %for.cond
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks, align 8, !dbg !3928
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3929
  %5 = load i32, i32* %i, align 4, !dbg !3930
  %idxprom = zext i32 %5 to i64, !dbg !3929
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !3929
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3929
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !3931
  %7 = load i32, i32* %index, align 8, !dbg !3931
  %call1 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %7), !dbg !3932
  br label %for.inc, !dbg !3932

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !3933
  %inc = add i32 %8, 1, !dbg !3933
  store i32 %inc, i32* %i, align 4, !dbg !3933
  br label %for.cond, !dbg !3934, !llvm.loop !3935

for.end:                                          ; preds = %for.cond
  %9 = load %struct.df*, %struct.df** @df, align 8, !dbg !3937
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %9, i32 0, i32 1, !dbg !3937
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 4, !dbg !3937
  %10 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !3937
  call void @df_remove_problem(%struct.dataflow* %10), !dbg !3938
  call void @df_process_deferred_rescans(), !dbg !3939
  call void @df_chain_add_problem(i32 2), !dbg !3940
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks, align 8, !dbg !3941
  call void @df_set_blocks(%struct.bitmap_head_def* %11), !dbg !3942
  call void @df_analyze(), !dbg !3943
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3944
  %tobool = icmp ne %struct._IO_FILE* %12, null, !dbg !3944
  br i1 %tobool, label %if.then, label %if.end, !dbg !3946

if.then:                                          ; preds = %for.end
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3947
  call void @df_dump_region(%struct._IO_FILE* %13), !dbg !3949
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3950
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.9, i64 0, i64 0)), !dbg !3951
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3952
  %call4 = call %struct.rtx_def* @get_insns(), !dbg !3953
  call void @print_rtl_with_bb(%struct._IO_FILE* %15, %struct.rtx_def* %call4), !dbg !3954
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3955
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0)), !dbg !3956
  br label %if.end, !dbg !3957

if.end:                                           ; preds = %if.then, %for.end
  call void @check_invariant_table_size(), !dbg !3958
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks, align 8, !dbg !3959
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %17), !dbg !3959
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %blocks, align 8, !dbg !3959
  ret void, !dbg !3960
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants_body(%struct.loop* %loop, %struct.basic_block_def** %body, %struct.bitmap_head_def* %always_reached, %struct.bitmap_head_def* %always_executed) #0 !dbg !3961 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %body.addr = alloca %struct.basic_block_def**, align 8
  %always_reached.addr = alloca %struct.bitmap_head_def*, align 8
  %always_executed.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3962, metadata !DIExpression()), !dbg !3963
  store %struct.basic_block_def** %body, %struct.basic_block_def*** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body.addr, metadata !3964, metadata !DIExpression()), !dbg !3965
  store %struct.bitmap_head_def* %always_reached, %struct.bitmap_head_def** %always_reached.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %always_reached.addr, metadata !3966, metadata !DIExpression()), !dbg !3967
  store %struct.bitmap_head_def* %always_executed, %struct.bitmap_head_def** %always_executed.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %always_executed.addr, metadata !3968, metadata !DIExpression()), !dbg !3969
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3970, metadata !DIExpression()), !dbg !3971
  store i32 0, i32* %i, align 4, !dbg !3972
  br label %for.cond, !dbg !3974

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3975
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3977
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 6, !dbg !3978
  %2 = load i32, i32* %num_nodes, align 4, !dbg !3978
  %cmp = icmp ult i32 %0, %2, !dbg !3979
  br i1 %cmp, label %for.body, label %for.end, !dbg !3980

for.body:                                         ; preds = %for.cond
  %3 = load %struct.basic_block_def**, %struct.basic_block_def*** %body.addr, align 8, !dbg !3981
  %4 = load i32, i32* %i, align 4, !dbg !3982
  %idxprom = zext i32 %4 to i64, !dbg !3981
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %3, i64 %idxprom, !dbg !3981
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3981
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_reached.addr, align 8, !dbg !3983
  %7 = load i32, i32* %i, align 4, !dbg !3984
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %7), !dbg !3985
  %conv = trunc i32 %call to i8, !dbg !3985
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %always_executed.addr, align 8, !dbg !3986
  %9 = load i32, i32* %i, align 4, !dbg !3987
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %9), !dbg !3988
  %conv2 = trunc i32 %call1 to i8, !dbg !3988
  call void @find_invariants_bb(%struct.basic_block_def* %5, i8 zeroext %conv, i8 zeroext %conv2), !dbg !3989
  br label %for.inc, !dbg !3989

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !3990
  %inc = add i32 %10, 1, !dbg !3990
  store i32 %inc, i32* %i, align 4, !dbg !3990
  br label %for.cond, !dbg !3991, !llvm.loop !3992

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3994
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_identical_invariants() #0 !dbg !3995 {
entry:
  %i = alloca i32, align 4
  %inv = alloca %struct.invariant*, align 8
  %eq = alloca %struct.htab*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3996, metadata !DIExpression()), !dbg !3997
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !3998, metadata !DIExpression()), !dbg !3999
  call void @llvm.dbg.declare(metadata %struct.htab** %eq, metadata !4000, metadata !DIExpression()), !dbg !4001
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4002
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !4002
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4002

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4002
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !4002
  br label %cond.end, !dbg !4002

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4002
  %call = call i32 @VEC_invariant_p_base_length(%struct.VEC_invariant_p_base* %cond), !dbg !4002
  %conv = zext i32 %call to i64, !dbg !4002
  %call1 = call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @hash_invariant_expr, i32 (i8*, i8*)* @eq_invariant_expr, void (i8*)* @free), !dbg !4003
  store %struct.htab* %call1, %struct.htab** %eq, align 8, !dbg !4001
  store i32 0, i32* %i, align 4, !dbg !4004
  br label %for.cond, !dbg !4006

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4007
  %tobool2 = icmp ne %struct.VEC_invariant_p_heap* %2, null, !dbg !4007
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !4007

cond.true3:                                       ; preds = %for.cond
  %3 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4007
  %base4 = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %3, i32 0, i32 0, !dbg !4007
  br label %cond.end6, !dbg !4007

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !4007

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_invariant_p_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !4007
  %4 = load i32, i32* %i, align 4, !dbg !4007
  %call8 = call i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %cond7, i32 %4, %struct.invariant** %inv), !dbg !4007
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4009
  br i1 %tobool9, label %for.body, label %for.end, !dbg !4009

for.body:                                         ; preds = %cond.end6
  %5 = load %struct.htab*, %struct.htab** %eq, align 8, !dbg !4010
  %6 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4011
  call void @find_identical_invariants(%struct.htab* %5, %struct.invariant* %6), !dbg !4012
  br label %for.inc, !dbg !4012

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !4013
  %inc = add i32 %7, 1, !dbg !4013
  store i32 %inc, i32* %i, align 4, !dbg !4013
  br label %for.cond, !dbg !4014, !llvm.loop !4015

for.end:                                          ; preds = %cond.end6
  %8 = load %struct.htab*, %struct.htab** %eq, align 8, !dbg !4017
  call void @htab_delete(%struct.htab* %8), !dbg !4018
  ret void, !dbg !4019
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !4020 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !4023, metadata !DIExpression()), !dbg !4024
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !4025, metadata !DIExpression()), !dbg !4026
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !4027
  store i32 0, i32* %index, align 8, !dbg !4028
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !4029
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !4030
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !4031
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !4032
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !4032
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !4032
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !4033 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4037, metadata !DIExpression()), !dbg !4038
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !4039, metadata !DIExpression()), !dbg !4040
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4041
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4041
  %5 = load i32, i32* %4, align 8, !dbg !4041
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4041
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4041
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4041
  %tobool = icmp ne i8 %call, 0, !dbg !4041
  br i1 %tobool, label %if.else, label %if.then, !dbg !4043

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4044
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4044
  %10 = load i32, i32* %9, align 8, !dbg !4044
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4044
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4044
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4044
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4046
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !4047
  store i8 1, i8* %retval, align 1, !dbg !4048
  br label %return, !dbg !4048

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4049
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !4051
  store i8 0, i8* %retval, align 1, !dbg !4052
  br label %return, !dbg !4052

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4053
  ret i8 %15, !dbg !4053
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

declare dso_local %struct.loop* @find_common_loop(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !4054 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !4058, metadata !DIExpression()), !dbg !4059
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4060
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !4060
  %1 = load i32, i32* %index, align 8, !dbg !4060
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4060
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !4060
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4060
  %5 = load i32, i32* %4, align 8, !dbg !4060
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4060
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4060
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4060
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4060
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4060

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4060
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !4060
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4060
  %11 = load i32, i32* %10, align 8, !dbg !4060
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4060
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4060
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4060
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4060
  br label %cond.end, !dbg !4060

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4060
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4060
  %cmp = icmp ult i32 %1, %call2, !dbg !4060
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !4060

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !4060
  br label %cond.end5, !dbg !4060

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4060

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !4060
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4061
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !4062
  %15 = load i32, i32* %index7, align 8, !dbg !4063
  %inc = add i32 %15, 1, !dbg !4063
  store i32 %inc, i32* %index7, align 8, !dbg !4063
  ret void, !dbg !4064
}

declare dso_local zeroext i8 @flow_loop_nested_p(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4065 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4068, metadata !DIExpression()), !dbg !4069
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4070
  %3 = load i32, i32* %index, align 8, !dbg !4070
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4071
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !4071
  %6 = load i32, i32* %5, align 8, !dbg !4071
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !4071
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !4071
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !4071
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4071
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4071

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4071
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4071
  %11 = load i32, i32* %10, align 8, !dbg !4071
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4071
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4071
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4071
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4071
  br label %cond.end, !dbg !4071

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4071

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4071
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4071
  %cmp = icmp eq i32 %3, %call2, !dbg !4072
  %conv = zext i1 %cmp to i32, !dbg !4072
  %conv3 = trunc i32 %conv to i8, !dbg !4073
  ret i8 %conv3, !dbg !4074
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4075 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4078, metadata !DIExpression()), !dbg !4079
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4080
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4080
  %5 = load i32, i32* %4, align 8, !dbg !4080
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4080
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4080
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4080
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4080
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4080

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4080
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4080
  %10 = load i32, i32* %9, align 8, !dbg !4080
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4080
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4080
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4080
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4080
  br label %cond.end, !dbg !4080

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4080
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4080
  %13 = load i32, i32* %index, align 8, !dbg !4080
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !4080
  ret %struct.edge_def* %call2, !dbg !4081
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4082 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4088
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4088
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4088

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4088
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4088
  %2 = load i32, i32* %num, align 8, !dbg !4088
  br label %cond.end, !dbg !4088

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4088

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4088
  ret i32 %cond, !dbg !4088
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4089 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4092, metadata !DIExpression()), !dbg !4093
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4094
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !4094
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !4094
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4094

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !4094
  br label %cond.end, !dbg !4094

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4094

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4094
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4095
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !4095
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !4096
  ret %struct.VEC_edge_gc* %5, !dbg !4097
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4098 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4101, metadata !DIExpression()), !dbg !4102
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4103, metadata !DIExpression()), !dbg !4102
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4102
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4102
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4102

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4102
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4102
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4102
  %3 = load i32, i32* %num, align 8, !dbg !4102
  %cmp = icmp ult i32 %1, %3, !dbg !4102
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4104
  %land.ext = zext i1 %4 to i32, !dbg !4102
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4102
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4102
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4102
  %idxprom = zext i32 %6 to i64, !dbg !4102
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4102
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4102
  ret %struct.edge_def* %7, !dbg !4102
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local void @df_remove_problem(%struct.dataflow*) #2

declare dso_local void @df_process_deferred_rescans() #2

declare dso_local void @df_chain_add_problem(i32) #2

declare dso_local void @df_set_blocks(%struct.bitmap_head_def*) #2

declare dso_local void @df_dump_region(%struct._IO_FILE*) #2

declare dso_local void @print_rtl_with_bb(%struct._IO_FILE*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_invariant_table_size() #0 !dbg !4105 {
entry:
  %new_size = alloca i32, align 4
  %0 = load i32, i32* @invariant_table_size, align 4, !dbg !4106
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !4108
  %def_info = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 3, !dbg !4108
  %table_size = getelementptr inbounds %struct.df_ref_info, %struct.df_ref_info* %def_info, i32 0, i32 4, !dbg !4108
  %2 = load i32, i32* %table_size, align 4, !dbg !4108
  %cmp = icmp ult i32 %0, %2, !dbg !4109
  br i1 %cmp, label %if.then, label %if.end, !dbg !4110

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %new_size, metadata !4111, metadata !DIExpression()), !dbg !4113
  %3 = load %struct.df*, %struct.df** @df, align 8, !dbg !4114
  %def_info1 = getelementptr inbounds %struct.df, %struct.df* %3, i32 0, i32 3, !dbg !4114
  %table_size2 = getelementptr inbounds %struct.df_ref_info, %struct.df_ref_info* %def_info1, i32 0, i32 4, !dbg !4114
  %4 = load i32, i32* %table_size2, align 4, !dbg !4114
  %5 = load %struct.df*, %struct.df** @df, align 8, !dbg !4115
  %def_info3 = getelementptr inbounds %struct.df, %struct.df* %5, i32 0, i32 3, !dbg !4115
  %table_size4 = getelementptr inbounds %struct.df_ref_info, %struct.df_ref_info* %def_info3, i32 0, i32 4, !dbg !4115
  %6 = load i32, i32* %table_size4, align 4, !dbg !4115
  %div = udiv i32 %6, 4, !dbg !4116
  %add = add i32 %4, %div, !dbg !4117
  store i32 %add, i32* %new_size, align 4, !dbg !4113
  %7 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4118
  %8 = bitcast %struct.invariant** %7 to i8*, !dbg !4118
  %9 = load i32, i32* %new_size, align 4, !dbg !4118
  %conv = zext i32 %9 to i64, !dbg !4118
  %mul = mul i64 8, %conv, !dbg !4118
  %call = call i8* @xrealloc(i8* %8, i64 %mul), !dbg !4118
  %10 = bitcast i8* %call to %struct.invariant**, !dbg !4118
  store %struct.invariant** %10, %struct.invariant*** @invariant_table, align 8, !dbg !4119
  %11 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4120
  %12 = load i32, i32* @invariant_table_size, align 4, !dbg !4121
  %idxprom = zext i32 %12 to i64, !dbg !4120
  %arrayidx = getelementptr inbounds %struct.invariant*, %struct.invariant** %11, i64 %idxprom, !dbg !4120
  %13 = bitcast %struct.invariant** %arrayidx to i8*, !dbg !4122
  %14 = load i32, i32* %new_size, align 4, !dbg !4123
  %15 = load i32, i32* @invariant_table_size, align 4, !dbg !4124
  %sub = sub i32 %14, %15, !dbg !4125
  %conv5 = zext i32 %sub to i64, !dbg !4126
  %mul6 = mul i64 %conv5, 8, !dbg !4127
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 %mul6, i1 false), !dbg !4122
  %16 = load i32, i32* %new_size, align 4, !dbg !4128
  store i32 %16, i32* @invariant_table_size, align 4, !dbg !4129
  br label %if.end, !dbg !4130

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4131
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants_bb(%struct.basic_block_def* %bb, i8 zeroext %always_reached, i8 zeroext %always_executed) #0 !dbg !4132 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %always_reached.addr = alloca i8, align 1
  %always_executed.addr = alloca i8, align 1
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4135, metadata !DIExpression()), !dbg !4136
  store i8 %always_reached, i8* %always_reached.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_reached.addr, metadata !4137, metadata !DIExpression()), !dbg !4138
  store i8 %always_executed, i8* %always_executed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_executed.addr, metadata !4139, metadata !DIExpression()), !dbg !4140
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4141, metadata !DIExpression()), !dbg !4142
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4143
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4143
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4143
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4143
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !4143
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4143
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !4143
  br label %for.cond, !dbg !4143

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4145
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !4145
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4145

land.rhs:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4145
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4145
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !4145
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !4145
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !4145
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 1, !dbg !4145
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4145
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !4145
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4145
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4145
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4145
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4145
  %cmp = icmp ne %struct.rtx_def* %4, %8, !dbg !4145
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !4147
  br i1 %9, label %for.body, label %for.end, !dbg !4143

for.body:                                         ; preds = %land.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4148
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4148
  %bf.load = load i32, i32* %11, align 8, !dbg !4148
  %bf.clear = and i32 %bf.load, 65535, !dbg !4148
  %cmp3 = icmp eq i32 %bf.clear, 8, !dbg !4148
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false, !dbg !4148

lor.lhs.false:                                    ; preds = %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4148
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4148
  %bf.load4 = load i32, i32* %13, align 8, !dbg !4148
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !4148
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !4148
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false7, !dbg !4148

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4148
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4148
  %bf.load8 = load i32, i32* %15, align 8, !dbg !4148
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !4148
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !4148
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !4148

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4148
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4148
  %bf.load12 = load i32, i32* %17, align 8, !dbg !4148
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4148
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !4148
  br i1 %cmp14, label %land.lhs.true, label %if.then, !dbg !4148

land.lhs.true:                                    ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4148
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !4148
  %bf.load15 = load i32, i32* %19, align 8, !dbg !4148
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !4148
  %cmp17 = icmp eq i32 %bf.clear16, 7, !dbg !4148
  br i1 %cmp17, label %if.then, label %if.end, !dbg !4151

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false11
  br label %for.inc, !dbg !4152

if.end:                                           ; preds = %land.lhs.true
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4153
  %21 = load i8, i8* %always_reached.addr, align 1, !dbg !4154
  %22 = load i8, i8* %always_executed.addr, align 1, !dbg !4155
  call void @find_invariants_insn(%struct.rtx_def* %20, i8 zeroext %21, i8 zeroext %22), !dbg !4156
  %23 = load i8, i8* %always_reached.addr, align 1, !dbg !4157
  %conv = zext i8 %23 to i32, !dbg !4157
  %tobool18 = icmp ne i32 %conv, 0, !dbg !4157
  br i1 %tobool18, label %land.lhs.true19, label %if.end38, !dbg !4159

land.lhs.true19:                                  ; preds = %if.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4160
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4160
  %bf.load20 = load i32, i32* %25, align 8, !dbg !4160
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !4160
  %cmp22 = icmp eq i32 %bf.clear21, 10, !dbg !4160
  br i1 %cmp22, label %land.lhs.true24, label %if.end38, !dbg !4161

land.lhs.true24:                                  ; preds = %land.lhs.true19
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4162
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !4162
  %bf.load25 = load i32, i32* %27, align 8, !dbg !4162
  %bf.lshr = lshr i32 %bf.load25, 25, !dbg !4162
  %bf.clear26 = and i32 %bf.lshr, 1, !dbg !4162
  %tobool27 = icmp ne i32 %bf.clear26, 0, !dbg !4162
  br i1 %tobool27, label %if.then37, label %lor.lhs.false28, !dbg !4163

lor.lhs.false28:                                  ; preds = %land.lhs.true24
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4164
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !4164
  %bf.load29 = load i32, i32* %29, align 8, !dbg !4164
  %bf.lshr30 = lshr i32 %bf.load29, 26, !dbg !4164
  %bf.clear31 = and i32 %bf.lshr30, 1, !dbg !4164
  %tobool32 = icmp ne i32 %bf.clear31, 0, !dbg !4164
  br i1 %tobool32, label %if.end38, label %lor.lhs.false33, !dbg !4164

lor.lhs.false33:                                  ; preds = %lor.lhs.false28
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4164
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !4164
  %bf.load34 = load i32, i32* %31, align 8, !dbg !4164
  %bf.lshr35 = lshr i32 %bf.load34, 31, !dbg !4164
  %tobool36 = icmp ne i32 %bf.lshr35, 0, !dbg !4164
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !4165

if.then37:                                        ; preds = %lor.lhs.false33, %land.lhs.true24
  store i8 0, i8* %always_reached.addr, align 1, !dbg !4166
  br label %if.end38, !dbg !4167

if.end38:                                         ; preds = %if.then37, %lor.lhs.false33, %lor.lhs.false28, %land.lhs.true19, %if.end
  br label %for.inc, !dbg !4168

for.inc:                                          ; preds = %if.end38, %if.then
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4145
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !4145
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !4145
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 2, !dbg !4145
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !4145
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !4145
  store %struct.rtx_def* %33, %struct.rtx_def** %insn, align 8, !dbg !4145
  br label %for.cond, !dbg !4145, !llvm.loop !4169

for.end:                                          ; preds = %land.end
  ret void, !dbg !4171
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariants_insn(%struct.rtx_def* %insn, i8 zeroext %always_reached, i8 zeroext %always_executed) #0 !dbg !4172 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %always_reached.addr = alloca i8, align 1
  %always_executed.addr = alloca i8, align 1
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4175, metadata !DIExpression()), !dbg !4176
  store i8 %always_reached, i8* %always_reached.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_reached.addr, metadata !4177, metadata !DIExpression()), !dbg !4178
  store i8 %always_executed, i8* %always_executed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_executed.addr, metadata !4179, metadata !DIExpression()), !dbg !4180
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4181
  %1 = load i8, i8* %always_reached.addr, align 1, !dbg !4182
  %2 = load i8, i8* %always_executed.addr, align 1, !dbg !4183
  call void @find_invariant_insn(%struct.rtx_def* %0, i8 zeroext %1, i8 zeroext %2), !dbg !4184
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4185
  call void @record_uses(%struct.rtx_def* %3), !dbg !4186
  ret void, !dbg !4187
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_invariant_insn(%struct.rtx_def* %insn, i8 zeroext %always_reached, i8 zeroext %always_executed) #0 !dbg !4188 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %always_reached.addr = alloca i8, align 1
  %always_executed.addr = alloca i8, align 1
  %ref = alloca %union.df_ref_d*, align 8
  %def = alloca %struct.def*, align 8
  %depends_on = alloca %struct.bitmap_head_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %simple = alloca i8, align 1
  %inv = alloca %struct.invariant*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4189, metadata !DIExpression()), !dbg !4190
  store i8 %always_reached, i8* %always_reached.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_reached.addr, metadata !4191, metadata !DIExpression()), !dbg !4192
  store i8 %always_executed, i8* %always_executed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_executed.addr, metadata !4193, metadata !DIExpression()), !dbg !4194
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %ref, metadata !4195, metadata !DIExpression()), !dbg !4256
  call void @llvm.dbg.declare(metadata %struct.def** %def, metadata !4257, metadata !DIExpression()), !dbg !4258
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on, metadata !4259, metadata !DIExpression()), !dbg !4260
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4261, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4263, metadata !DIExpression()), !dbg !4264
  call void @llvm.dbg.declare(metadata i8* %simple, metadata !4265, metadata !DIExpression()), !dbg !4266
  store i8 1, i8* %simple, align 1, !dbg !4266
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !4267, metadata !DIExpression()), !dbg !4268
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4269
  %bf.load = load i32, i32* %1, align 8, !dbg !4269
  %bf.clear = and i32 %bf.load, 65535, !dbg !4269
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4269
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4269

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4269
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4269
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4269
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4269
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4269

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4269
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4269
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4269
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4269
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4269

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4269
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4269
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4269
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4269
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !4269

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4269
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4269
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4269
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4269
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4269
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4269
  %bf.load12 = load i32, i32* %10, align 8, !dbg !4269
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4269
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4269
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4269

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4269
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4269
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4269
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4269
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4269
  br label %cond.end, !dbg !4269

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4269
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !4269
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4269
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4269
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4269
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4269
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !4269
  br label %cond.end, !dbg !4269

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !4269
  br label %cond.end25, !dbg !4269

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !4269

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !4269
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !4270
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4271
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !4271
  br i1 %tobool, label %if.end, label %if.then, !dbg !4273

if.then:                                          ; preds = %cond.end25
  br label %if.end81, !dbg !4274

if.end:                                           ; preds = %cond.end25
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4275
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4275
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4275
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4275
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4275
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4275
  store %struct.rtx_def* %18, %struct.rtx_def** %dest, align 8, !dbg !4276
  %19 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4277
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4277
  %bf.load31 = load i32, i32* %20, align 8, !dbg !4277
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !4277
  %cmp33 = icmp eq i32 %bf.clear32, 37, !dbg !4277
  br i1 %cmp33, label %lor.lhs.false34, label %if.then37, !dbg !4279

lor.lhs.false34:                                  ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4280
  %call35 = call i32 @rhs_regno(%struct.rtx_def* %21), !dbg !4280
  %cmp36 = icmp ult i32 %call35, 53, !dbg !4280
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !4281

if.then37:                                        ; preds = %lor.lhs.false34, %if.end
  store i8 0, i8* %simple, align 1, !dbg !4282
  br label %if.end38, !dbg !4283

if.end38:                                         ; preds = %if.then37, %lor.lhs.false34
  %22 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4284
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4284
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !4284
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 0, !dbg !4284
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !4284
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !4284
  %call43 = call zeroext i8 @may_assign_reg_p(%struct.rtx_def* %23), !dbg !4286
  %tobool44 = icmp ne i8 %call43, 0, !dbg !4286
  br i1 %tobool44, label %lor.lhs.false45, label %if.then52, !dbg !4287

lor.lhs.false45:                                  ; preds = %if.end38
  %24 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4288
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4288
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !4288
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !4288
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !4288
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !4288
  %call50 = call zeroext i8 @check_maybe_invariant(%struct.rtx_def* %25), !dbg !4289
  %tobool51 = icmp ne i8 %call50, 0, !dbg !4289
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !4290

if.then52:                                        ; preds = %lor.lhs.false45, %if.end38
  br label %if.end81, !dbg !4291

if.end53:                                         ; preds = %lor.lhs.false45
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4292
  %call54 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %26), !dbg !4294
  %tobool55 = icmp ne i8 %call54, 0, !dbg !4294
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !4295

if.then56:                                        ; preds = %if.end53
  br label %if.end81, !dbg !4296

if.end57:                                         ; preds = %if.end53
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4297
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4297
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !4297
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !4297
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !4297
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !4297
  %call62 = call i32 @may_trap_or_fault_p(%struct.rtx_def* %28), !dbg !4299
  %tobool63 = icmp ne i32 %call62, 0, !dbg !4299
  br i1 %tobool63, label %land.lhs.true, label %if.end66, !dbg !4300

land.lhs.true:                                    ; preds = %if.end57
  %29 = load i8, i8* %always_reached.addr, align 1, !dbg !4301
  %tobool64 = icmp ne i8 %29, 0, !dbg !4301
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !4302

if.then65:                                        ; preds = %land.lhs.true
  br label %if.end81, !dbg !4303

if.end66:                                         ; preds = %land.lhs.true, %if.end57
  %call67 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4304
  store %struct.bitmap_head_def* %call67, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4305
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4306
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4308
  %call68 = call zeroext i8 @check_dependencies(%struct.rtx_def* %30, %struct.bitmap_head_def* %31), !dbg !4309
  %tobool69 = icmp ne i8 %call68, 0, !dbg !4309
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !4310

if.then70:                                        ; preds = %if.end66
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4311
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %32), !dbg !4311
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4311
  br label %if.end81, !dbg !4313

if.end71:                                         ; preds = %if.end66
  %33 = load i8, i8* %simple, align 1, !dbg !4314
  %tobool72 = icmp ne i8 %33, 0, !dbg !4314
  br i1 %tobool72, label %if.then73, label %if.else, !dbg !4316

if.then73:                                        ; preds = %if.end71
  %call74 = call i8* @xcalloc(i64 1, i64 24), !dbg !4317
  %34 = bitcast i8* %call74 to %struct.def*, !dbg !4317
  store %struct.def* %34, %struct.def** %def, align 8, !dbg !4318
  br label %if.end75, !dbg !4319

if.else:                                          ; preds = %if.end71
  store %struct.def* null, %struct.def** %def, align 8, !dbg !4320
  br label %if.end75

if.end75:                                         ; preds = %if.else, %if.then73
  %35 = load %struct.def*, %struct.def** %def, align 8, !dbg !4321
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4322
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4323
  %38 = load i8, i8* %always_executed.addr, align 1, !dbg !4324
  %call76 = call %struct.invariant* @create_new_invariant(%struct.def* %35, %struct.rtx_def* %36, %struct.bitmap_head_def* %37, i8 zeroext %38), !dbg !4325
  store %struct.invariant* %call76, %struct.invariant** %inv, align 8, !dbg !4326
  %39 = load i8, i8* %simple, align 1, !dbg !4327
  %tobool77 = icmp ne i8 %39, 0, !dbg !4327
  br i1 %tobool77, label %if.then78, label %if.end81, !dbg !4329

if.then78:                                        ; preds = %if.end75
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4330
  %41 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4332
  %call79 = call %union.df_ref_d* @df_find_def(%struct.rtx_def* %40, %struct.rtx_def* %41), !dbg !4333
  store %union.df_ref_d* %call79, %union.df_ref_d** %ref, align 8, !dbg !4334
  call void @check_invariant_table_size(), !dbg !4335
  %42 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4336
  %43 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4337
  %44 = load %union.df_ref_d*, %union.df_ref_d** %ref, align 8, !dbg !4338
  %base = bitcast %union.df_ref_d* %44 to %struct.df_base_ref*, !dbg !4338
  %id = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 7, !dbg !4338
  %45 = load i32, i32* %id, align 4, !dbg !4338
  %idxprom = sext i32 %45 to i64, !dbg !4337
  %arrayidx80 = getelementptr inbounds %struct.invariant*, %struct.invariant** %43, i64 %idxprom, !dbg !4337
  store %struct.invariant* %42, %struct.invariant** %arrayidx80, align 8, !dbg !4339
  br label %if.end81, !dbg !4340

if.end81:                                         ; preds = %if.then, %if.then52, %if.then56, %if.then65, %if.then70, %if.then78, %if.end75
  ret void, !dbg !4341
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_uses(%struct.rtx_def* %insn) #0 !dbg !4342 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %insn_info = alloca %struct.df_insn_info*, align 8
  %use_rec = alloca %union.df_ref_d**, align 8
  %inv = alloca %struct.invariant*, align 8
  %use = alloca %union.df_ref_d*, align 8
  %use6 = alloca %union.df_ref_d*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4343, metadata !DIExpression()), !dbg !4344
  call void @llvm.dbg.declare(metadata %struct.df_insn_info** %insn_info, metadata !4345, metadata !DIExpression()), !dbg !4346
  %0 = load %struct.df*, %struct.df** @df, align 8, !dbg !4347
  %insns = getelementptr inbounds %struct.df, %struct.df* %0, i32 0, i32 10, !dbg !4347
  %1 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !4347
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4347
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4347
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4347
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4347
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4347
  %3 = load i32, i32* %rt_int, align 8, !dbg !4347
  %idxprom = sext i32 %3 to i64, !dbg !4347
  %arrayidx1 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %1, i64 %idxprom, !dbg !4347
  %4 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx1, align 8, !dbg !4347
  store %struct.df_insn_info* %4, %struct.df_insn_info** %insn_info, align 8, !dbg !4346
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %use_rec, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !4350, metadata !DIExpression()), !dbg !4351
  %5 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4352
  %uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %5, i32 0, i32 2, !dbg !4352
  %6 = load %union.df_ref_d**, %union.df_ref_d*** %uses, align 8, !dbg !4352
  store %union.df_ref_d** %6, %union.df_ref_d*** %use_rec, align 8, !dbg !4354
  br label %for.cond, !dbg !4355

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4356
  %8 = load %union.df_ref_d*, %union.df_ref_d** %7, align 8, !dbg !4358
  %tobool = icmp ne %union.df_ref_d* %8, null, !dbg !4359
  br i1 %tobool, label %for.body, label %for.end, !dbg !4359

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use, metadata !4360, metadata !DIExpression()), !dbg !4362
  %9 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4363
  %10 = load %union.df_ref_d*, %union.df_ref_d** %9, align 8, !dbg !4364
  store %union.df_ref_d* %10, %union.df_ref_d** %use, align 8, !dbg !4362
  %11 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !4365
  %call = call %struct.invariant* @invariant_for_use(%union.df_ref_d* %11), !dbg !4366
  store %struct.invariant* %call, %struct.invariant** %inv, align 8, !dbg !4367
  %12 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4368
  %tobool2 = icmp ne %struct.invariant* %12, null, !dbg !4368
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4370

if.then:                                          ; preds = %for.body
  %13 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4371
  %def = getelementptr inbounds %struct.invariant, %struct.invariant* %13, i32 0, i32 4, !dbg !4372
  %14 = load %struct.def*, %struct.def** %def, align 8, !dbg !4372
  %15 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !4373
  call void @record_use(%struct.def* %14, %union.df_ref_d* %15), !dbg !4374
  br label %if.end, !dbg !4374

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4375

for.inc:                                          ; preds = %if.end
  %16 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4376
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %16, i32 1, !dbg !4376
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %use_rec, align 8, !dbg !4376
  br label %for.cond, !dbg !4377, !llvm.loop !4378

for.end:                                          ; preds = %for.cond
  %17 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4380
  %eq_uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %17, i32 0, i32 3, !dbg !4380
  %18 = load %union.df_ref_d**, %union.df_ref_d*** %eq_uses, align 8, !dbg !4380
  store %union.df_ref_d** %18, %union.df_ref_d*** %use_rec, align 8, !dbg !4382
  br label %for.cond3, !dbg !4383

for.cond3:                                        ; preds = %for.inc12, %for.end
  %19 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4384
  %20 = load %union.df_ref_d*, %union.df_ref_d** %19, align 8, !dbg !4386
  %tobool4 = icmp ne %union.df_ref_d* %20, null, !dbg !4387
  br i1 %tobool4, label %for.body5, label %for.end14, !dbg !4387

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use6, metadata !4388, metadata !DIExpression()), !dbg !4390
  %21 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4391
  %22 = load %union.df_ref_d*, %union.df_ref_d** %21, align 8, !dbg !4392
  store %union.df_ref_d* %22, %union.df_ref_d** %use6, align 8, !dbg !4390
  %23 = load %union.df_ref_d*, %union.df_ref_d** %use6, align 8, !dbg !4393
  %call7 = call %struct.invariant* @invariant_for_use(%union.df_ref_d* %23), !dbg !4394
  store %struct.invariant* %call7, %struct.invariant** %inv, align 8, !dbg !4395
  %24 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4396
  %tobool8 = icmp ne %struct.invariant* %24, null, !dbg !4396
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !4398

if.then9:                                         ; preds = %for.body5
  %25 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4399
  %def10 = getelementptr inbounds %struct.invariant, %struct.invariant* %25, i32 0, i32 4, !dbg !4400
  %26 = load %struct.def*, %struct.def** %def10, align 8, !dbg !4400
  %27 = load %union.df_ref_d*, %union.df_ref_d** %use6, align 8, !dbg !4401
  call void @record_use(%struct.def* %26, %union.df_ref_d* %27), !dbg !4402
  br label %if.end11, !dbg !4402

if.end11:                                         ; preds = %if.then9, %for.body5
  br label %for.inc12, !dbg !4403

for.inc12:                                        ; preds = %if.end11
  %28 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4404
  %incdec.ptr13 = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %28, i32 1, !dbg !4404
  store %union.df_ref_d** %incdec.ptr13, %union.df_ref_d*** %use_rec, align 8, !dbg !4404
  br label %for.cond3, !dbg !4405, !llvm.loop !4406

for.end14:                                        ; preds = %for.cond3
  ret void, !dbg !4408
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_assign_reg_p(%struct.rtx_def* %x) #0 !dbg !4409 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4412, metadata !DIExpression()), !dbg !4413
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4414
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4414
  %bf.load = load i32, i32* %1, align 8, !dbg !4414
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4414
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4414
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !4415
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !4416

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4417
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4417
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4417
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !4417
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !4417
  %cmp4 = icmp ne i32 %bf.clear3, 1, !dbg !4418
  br i1 %cmp4, label %land.lhs.true5, label %land.end, !dbg !4419

land.lhs.true5:                                   ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4420
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4420
  %bf.load6 = load i32, i32* %5, align 8, !dbg !4420
  %bf.lshr7 = lshr i32 %bf.load6, 16, !dbg !4420
  %bf.clear8 = and i32 %bf.lshr7, 255, !dbg !4420
  %call = call zeroext i8 @can_copy_p(i32 %bf.clear8), !dbg !4421
  %conv = zext i8 %call to i32, !dbg !4421
  %tobool = icmp ne i32 %conv, 0, !dbg !4421
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4422

land.rhs:                                         ; preds = %land.lhs.true5
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4423
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4423
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4423
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4423
  %cmp11 = icmp eq i32 %bf.clear10, 37, !dbg !4423
  br i1 %cmp11, label %lor.lhs.false, label %lor.end, !dbg !4424

lor.lhs.false:                                    ; preds = %land.rhs
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4425
  %call13 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !4425
  %cmp14 = icmp ult i32 %call13, 53, !dbg !4425
  br i1 %cmp14, label %lor.rhs, label %lor.end, !dbg !4426

lor.rhs:                                          ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4427
  %call16 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !4427
  %idxprom = zext i32 %call16 to i64, !dbg !4427
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom, !dbg !4427
  %10 = load i32, i32* %arrayidx, align 4, !dbg !4427
  %cmp17 = icmp ne i32 %10, 0, !dbg !4428
  br label %lor.end, !dbg !4426

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %land.rhs
  %11 = phi i1 [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp17, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true5, %land.lhs.true, %entry
  %12 = phi i1 [ false, %land.lhs.true5 ], [ false, %land.lhs.true ], [ false, %entry ], [ %11, %lor.end ], !dbg !4429
  %land.ext = zext i1 %12 to i32, !dbg !4422
  %conv19 = trunc i32 %land.ext to i8, !dbg !4430
  ret i8 %conv19, !dbg !4431
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_maybe_invariant(%struct.rtx_def* %x) #0 !dbg !4432 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4433, metadata !DIExpression()), !dbg !4434
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4435, metadata !DIExpression()), !dbg !4436
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4437
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4437
  %bf.load = load i32, i32* %1, align 8, !dbg !4437
  %bf.clear = and i32 %bf.load, 65535, !dbg !4437
  store i32 %bf.clear, i32* %code, align 4, !dbg !4436
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4438, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4440, metadata !DIExpression()), !dbg !4441
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !4442, metadata !DIExpression()), !dbg !4443
  %2 = load i32, i32* %code, align 4, !dbg !4444
  switch i32 %2, label %sw.default [
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 45, label %sw.bb
    i32 35, label %sw.bb
    i32 44, label %sw.bb
    i32 36, label %sw.bb1
    i32 46, label %sw.bb1
    i32 19, label %sw.bb1
    i32 26, label %sw.bb1
    i32 37, label %sw.bb2
    i32 43, label %sw.bb3
    i32 17, label %sw.bb10
  ], !dbg !4445

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !4446
  br label %return, !dbg !4446

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry
  store i8 0, i8* %retval, align 1, !dbg !4448
  br label %return, !dbg !4448

sw.bb2:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4449
  br label %return, !dbg !4449

sw.bb3:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4450
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4450
  %bf.load4 = load i32, i32* %4, align 8, !dbg !4450
  %bf.lshr = lshr i32 %bf.load4, 26, !dbg !4450
  %bf.clear5 = and i32 %bf.lshr, 1, !dbg !4450
  %tobool = icmp ne i32 %bf.clear5, 0, !dbg !4450
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4452

land.lhs.true:                                    ; preds = %sw.bb3
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4453
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4453
  %bf.load6 = load i32, i32* %6, align 8, !dbg !4453
  %bf.lshr7 = lshr i32 %bf.load6, 27, !dbg !4453
  %bf.clear8 = and i32 %bf.lshr7, 1, !dbg !4453
  %tobool9 = icmp ne i32 %bf.clear8, 0, !dbg !4453
  br i1 %tobool9, label %if.end, label %if.then, !dbg !4454

if.then:                                          ; preds = %land.lhs.true
  br label %sw.epilog, !dbg !4455

if.end:                                           ; preds = %land.lhs.true, %sw.bb3
  store i8 0, i8* %retval, align 1, !dbg !4456
  br label %return, !dbg !4456

sw.bb10:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4457
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4457
  %bf.load11 = load i32, i32* %8, align 8, !dbg !4457
  %bf.lshr12 = lshr i32 %bf.load11, 27, !dbg !4457
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !4457
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !4457
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4459

if.then15:                                        ; preds = %sw.bb10
  store i8 0, i8* %retval, align 1, !dbg !4460
  br label %return, !dbg !4460

if.end16:                                         ; preds = %sw.bb10
  br label %sw.epilog, !dbg !4461

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !4462

sw.epilog:                                        ; preds = %sw.default, %if.end16, %if.then
  %9 = load i32, i32* %code, align 4, !dbg !4463
  %idxprom = sext i32 %9 to i64, !dbg !4463
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !4463
  %10 = load i8*, i8** %arrayidx, align 8, !dbg !4463
  store i8* %10, i8** %fmt, align 8, !dbg !4464
  %11 = load i32, i32* %code, align 4, !dbg !4465
  %idxprom17 = sext i32 %11 to i64, !dbg !4465
  %arrayidx18 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom17, !dbg !4465
  %12 = load i8, i8* %arrayidx18, align 1, !dbg !4465
  %conv = zext i8 %12 to i32, !dbg !4465
  %sub = sub nsw i32 %conv, 1, !dbg !4467
  store i32 %sub, i32* %i, align 4, !dbg !4468
  br label %for.cond, !dbg !4469

for.cond:                                         ; preds = %for.inc58, %sw.epilog
  %13 = load i32, i32* %i, align 4, !dbg !4470
  %cmp = icmp sge i32 %13, 0, !dbg !4472
  br i1 %cmp, label %for.body, label %for.end59, !dbg !4473

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %fmt, align 8, !dbg !4474
  %15 = load i32, i32* %i, align 4, !dbg !4477
  %idxprom20 = sext i32 %15 to i64, !dbg !4474
  %arrayidx21 = getelementptr inbounds i8, i8* %14, i64 %idxprom20, !dbg !4474
  %16 = load i8, i8* %arrayidx21, align 1, !dbg !4474
  %conv22 = sext i8 %16 to i32, !dbg !4474
  %cmp23 = icmp eq i32 %conv22, 101, !dbg !4478
  br i1 %cmp23, label %if.then25, label %if.else, !dbg !4479

if.then25:                                        ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4480
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4480
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4480
  %18 = load i32, i32* %i, align 4, !dbg !4480
  %idxprom26 = sext i32 %18 to i64, !dbg !4480
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom26, !dbg !4480
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4480
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4480
  %call = call zeroext i8 @check_maybe_invariant(%struct.rtx_def* %19), !dbg !4483
  %tobool28 = icmp ne i8 %call, 0, !dbg !4483
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !4484

if.then29:                                        ; preds = %if.then25
  store i8 0, i8* %retval, align 1, !dbg !4485
  br label %return, !dbg !4485

if.end30:                                         ; preds = %if.then25
  br label %if.end57, !dbg !4486

if.else:                                          ; preds = %for.body
  %20 = load i8*, i8** %fmt, align 8, !dbg !4487
  %21 = load i32, i32* %i, align 4, !dbg !4489
  %idxprom31 = sext i32 %21 to i64, !dbg !4487
  %arrayidx32 = getelementptr inbounds i8, i8* %20, i64 %idxprom31, !dbg !4487
  %22 = load i8, i8* %arrayidx32, align 1, !dbg !4487
  %conv33 = sext i8 %22 to i32, !dbg !4487
  %cmp34 = icmp eq i32 %conv33, 69, !dbg !4490
  br i1 %cmp34, label %if.then36, label %if.end56, !dbg !4491

if.then36:                                        ; preds = %if.else
  store i32 0, i32* %j, align 4, !dbg !4492
  br label %for.cond37, !dbg !4495

for.cond37:                                       ; preds = %for.inc, %if.then36
  %23 = load i32, i32* %j, align 4, !dbg !4496
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4498
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4498
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !4498
  %25 = load i32, i32* %i, align 4, !dbg !4498
  %idxprom40 = sext i32 %25 to i64, !dbg !4498
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 %idxprom40, !dbg !4498
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**, !dbg !4498
  %26 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4498
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %26, i32 0, i32 0, !dbg !4498
  %27 = load i32, i32* %num_elem, align 8, !dbg !4498
  %cmp42 = icmp slt i32 %23, %27, !dbg !4499
  br i1 %cmp42, label %for.body44, label %for.end, !dbg !4500

for.body44:                                       ; preds = %for.cond37
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4501
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4501
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !4501
  %29 = load i32, i32* %i, align 4, !dbg !4501
  %idxprom47 = sext i32 %29 to i64, !dbg !4501
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 %idxprom47, !dbg !4501
  %rt_rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**, !dbg !4501
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec49, align 8, !dbg !4501
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 1, !dbg !4501
  %31 = load i32, i32* %j, align 4, !dbg !4501
  %idxprom50 = sext i32 %31 to i64, !dbg !4501
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom50, !dbg !4501
  %32 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !4501
  %call52 = call zeroext i8 @check_maybe_invariant(%struct.rtx_def* %32), !dbg !4503
  %tobool53 = icmp ne i8 %call52, 0, !dbg !4503
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !4504

if.then54:                                        ; preds = %for.body44
  store i8 0, i8* %retval, align 1, !dbg !4505
  br label %return, !dbg !4505

if.end55:                                         ; preds = %for.body44
  br label %for.inc, !dbg !4506

for.inc:                                          ; preds = %if.end55
  %33 = load i32, i32* %j, align 4, !dbg !4507
  %inc = add nsw i32 %33, 1, !dbg !4507
  store i32 %inc, i32* %j, align 4, !dbg !4507
  br label %for.cond37, !dbg !4508, !llvm.loop !4509

for.end:                                          ; preds = %for.cond37
  br label %if.end56, !dbg !4511

if.end56:                                         ; preds = %for.end, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end30
  br label %for.inc58, !dbg !4512

for.inc58:                                        ; preds = %if.end57
  %34 = load i32, i32* %i, align 4, !dbg !4513
  %dec = add nsw i32 %34, -1, !dbg !4513
  store i32 %dec, i32* %i, align 4, !dbg !4513
  br label %for.cond, !dbg !4514, !llvm.loop !4515

for.end59:                                        ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4517
  br label %return, !dbg !4517

return:                                           ; preds = %for.end59, %if.then54, %if.then29, %if.then15, %if.end, %sw.bb2, %sw.bb1, %sw.bb
  %35 = load i8, i8* %retval, align 1, !dbg !4518
  ret i8 %35, !dbg !4518
}

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

declare dso_local i32 @may_trap_or_fault_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_dependencies(%struct.rtx_def* %insn, %struct.bitmap_head_def* %depends_on) #0 !dbg !4519 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def*, align 8
  %insn_info = alloca %struct.df_insn_info*, align 8
  %use_rec = alloca %union.df_ref_d**, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4522, metadata !DIExpression()), !dbg !4523
  store %struct.bitmap_head_def* %depends_on, %struct.bitmap_head_def** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on.addr, metadata !4524, metadata !DIExpression()), !dbg !4525
  call void @llvm.dbg.declare(metadata %struct.df_insn_info** %insn_info, metadata !4526, metadata !DIExpression()), !dbg !4527
  %0 = load %struct.df*, %struct.df** @df, align 8, !dbg !4528
  %insns = getelementptr inbounds %struct.df, %struct.df* %0, i32 0, i32 10, !dbg !4528
  %1 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !4528
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4528
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4528
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4528
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4528
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4528
  %3 = load i32, i32* %rt_int, align 8, !dbg !4528
  %idxprom = sext i32 %3 to i64, !dbg !4528
  %arrayidx1 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %1, i64 %idxprom, !dbg !4528
  %4 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx1, align 8, !dbg !4528
  store %struct.df_insn_info* %4, %struct.df_insn_info** %insn_info, align 8, !dbg !4527
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %use_rec, metadata !4529, metadata !DIExpression()), !dbg !4530
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4531, metadata !DIExpression()), !dbg !4532
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4533
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4533
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !4533
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !4533
  %rt_bb = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !4533
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4533
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !4532
  %7 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4534
  %uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %7, i32 0, i32 2, !dbg !4534
  %8 = load %union.df_ref_d**, %union.df_ref_d*** %uses, align 8, !dbg !4534
  store %union.df_ref_d** %8, %union.df_ref_d*** %use_rec, align 8, !dbg !4536
  br label %for.cond, !dbg !4537

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4538
  %10 = load %union.df_ref_d*, %union.df_ref_d** %9, align 8, !dbg !4540
  %tobool = icmp ne %union.df_ref_d* %10, null, !dbg !4541
  br i1 %tobool, label %for.body, label %for.end, !dbg !4541

for.body:                                         ; preds = %for.cond
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4542
  %12 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4544
  %13 = load %union.df_ref_d*, %union.df_ref_d** %12, align 8, !dbg !4545
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !4546
  %call = call zeroext i8 @check_dependency(%struct.basic_block_def* %11, %union.df_ref_d* %13, %struct.bitmap_head_def* %14), !dbg !4547
  %tobool5 = icmp ne i8 %call, 0, !dbg !4547
  br i1 %tobool5, label %if.end, label %if.then, !dbg !4548

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4549
  br label %return, !dbg !4549

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4550

for.inc:                                          ; preds = %if.end
  %15 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4551
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %15, i32 1, !dbg !4551
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %use_rec, align 8, !dbg !4551
  br label %for.cond, !dbg !4552, !llvm.loop !4553

for.end:                                          ; preds = %for.cond
  %16 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4555
  %eq_uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %16, i32 0, i32 3, !dbg !4555
  %17 = load %union.df_ref_d**, %union.df_ref_d*** %eq_uses, align 8, !dbg !4555
  store %union.df_ref_d** %17, %union.df_ref_d*** %use_rec, align 8, !dbg !4557
  br label %for.cond6, !dbg !4558

for.cond6:                                        ; preds = %for.inc13, %for.end
  %18 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4559
  %19 = load %union.df_ref_d*, %union.df_ref_d** %18, align 8, !dbg !4561
  %tobool7 = icmp ne %union.df_ref_d* %19, null, !dbg !4562
  br i1 %tobool7, label %for.body8, label %for.end15, !dbg !4562

for.body8:                                        ; preds = %for.cond6
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4563
  %21 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4565
  %22 = load %union.df_ref_d*, %union.df_ref_d** %21, align 8, !dbg !4566
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !4567
  %call9 = call zeroext i8 @check_dependency(%struct.basic_block_def* %20, %union.df_ref_d* %22, %struct.bitmap_head_def* %23), !dbg !4568
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4568
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !4569

if.then11:                                        ; preds = %for.body8
  store i8 0, i8* %retval, align 1, !dbg !4570
  br label %return, !dbg !4570

if.end12:                                         ; preds = %for.body8
  br label %for.inc13, !dbg !4571

for.inc13:                                        ; preds = %if.end12
  %24 = load %union.df_ref_d**, %union.df_ref_d*** %use_rec, align 8, !dbg !4572
  %incdec.ptr14 = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %24, i32 1, !dbg !4572
  store %union.df_ref_d** %incdec.ptr14, %union.df_ref_d*** %use_rec, align 8, !dbg !4572
  br label %for.cond6, !dbg !4573, !llvm.loop !4574

for.end15:                                        ; preds = %for.cond6
  store i8 1, i8* %retval, align 1, !dbg !4576
  br label %return, !dbg !4576

return:                                           ; preds = %for.end15, %if.then11, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !4577
  ret i8 %25, !dbg !4577
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant* @create_new_invariant(%struct.def* %def, %struct.rtx_def* %insn, %struct.bitmap_head_def* %depends_on, i8 zeroext %always_executed) #0 !dbg !4578 {
entry:
  %def.addr = alloca %struct.def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def*, align 8
  %always_executed.addr = alloca i8, align 1
  %inv = alloca %struct.invariant*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %speed = alloca i8, align 1
  store %struct.def* %def, %struct.def** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.def** %def.addr, metadata !4581, metadata !DIExpression()), !dbg !4582
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4583, metadata !DIExpression()), !dbg !4584
  store %struct.bitmap_head_def* %depends_on, %struct.bitmap_head_def** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  store i8 %always_executed, i8* %always_executed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %always_executed.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !4589, metadata !DIExpression()), !dbg !4590
  %call = call i8* @xmalloc(i64 64), !dbg !4591
  %0 = bitcast i8* %call to %struct.invariant*, !dbg !4591
  store %struct.invariant* %0, %struct.invariant** %inv, align 8, !dbg !4590
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4592, metadata !DIExpression()), !dbg !4593
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !4594
  %bf.load = load i32, i32* %2, align 8, !dbg !4594
  %bf.clear = and i32 %bf.load, 65535, !dbg !4594
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4594
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !4594

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4594
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4594
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4594
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4594
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !4594

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4594
  %bf.load5 = load i32, i32* %6, align 8, !dbg !4594
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4594
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4594
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !4594

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4594
  %bf.load9 = load i32, i32* %8, align 8, !dbg !4594
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4594
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4594
  br i1 %cmp11, label %cond.true, label %cond.false25, !dbg !4594

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4594
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4594
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4594
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4594
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4594
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4594
  %bf.load12 = load i32, i32* %11, align 8, !dbg !4594
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !4594
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !4594
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !4594

cond.true15:                                      ; preds = %cond.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4594
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4594
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !4594
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4594
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4594
  br label %cond.end, !dbg !4594

cond.false:                                       ; preds = %cond.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4594
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4594
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4594
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !4594
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4594
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4594
  %call24 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %14, %struct.rtx_def* %16), !dbg !4594
  br label %cond.end, !dbg !4594

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %13, %cond.true15 ], [ %call24, %cond.false ], !dbg !4594
  br label %cond.end26, !dbg !4594

cond.false25:                                     ; preds = %lor.lhs.false8
  br label %cond.end26, !dbg !4594

cond.end26:                                       ; preds = %cond.false25, %cond.end
  %cond27 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false25 ], !dbg !4594
  store %struct.rtx_def* %cond27, %struct.rtx_def** %set, align 8, !dbg !4593
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !4595, metadata !DIExpression()), !dbg !4596
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4597
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4597
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4597
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 3, !dbg !4597
  %rt_bb = bitcast %union.rtunion_def* %arrayidx30 to %struct.basic_block_def**, !dbg !4597
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4597
  %call31 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %18), !dbg !4598
  store i8 %call31, i8* %speed, align 1, !dbg !4596
  %19 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4599
  %20 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4600
  %def32 = getelementptr inbounds %struct.invariant, %struct.invariant* %20, i32 0, i32 4, !dbg !4601
  store %struct.def* %19, %struct.def** %def32, align 8, !dbg !4602
  %21 = load i8, i8* %always_executed.addr, align 1, !dbg !4603
  %22 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4604
  %always_executed33 = getelementptr inbounds %struct.invariant, %struct.invariant* %22, i32 0, i32 6, !dbg !4605
  store i8 %21, i8* %always_executed33, align 8, !dbg !4606
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !4607
  %24 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4608
  %depends_on34 = getelementptr inbounds %struct.invariant, %struct.invariant* %24, i32 0, i32 10, !dbg !4609
  store %struct.bitmap_head_def* %23, %struct.bitmap_head_def** %depends_on34, align 8, !dbg !4610
  %25 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4611
  %tobool = icmp ne %struct.def* %25, null, !dbg !4611
  br i1 %tobool, label %if.then, label %if.else, !dbg !4613

if.then:                                          ; preds = %cond.end26
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4614
  %27 = load i8, i8* %speed, align 1, !dbg !4616
  %call35 = call i32 @rtx_cost(%struct.rtx_def* %26, i32 23, i8 zeroext %27), !dbg !4617
  %28 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4618
  %cost = getelementptr inbounds %struct.invariant, %struct.invariant* %28, i32 0, i32 9, !dbg !4619
  store i32 %call35, i32* %cost, align 4, !dbg !4620
  %29 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4621
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4621
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !4621
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !4621
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !4621
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !4621
  %31 = load i32, i32* @word_mode, align 4, !dbg !4622
  %32 = load i8, i8* %speed, align 1, !dbg !4623
  %call40 = call i32 @address_cost(%struct.rtx_def* %30, i32 %31, i8 zeroext 0, i8 zeroext %32), !dbg !4624
  %cmp41 = icmp slt i32 %call40, 3, !dbg !4625
  %conv = zext i1 %cmp41 to i32, !dbg !4625
  %conv42 = trunc i32 %conv to i8, !dbg !4624
  %33 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4626
  %cheap_address = getelementptr inbounds %struct.invariant, %struct.invariant* %33, i32 0, i32 8, !dbg !4627
  store i8 %conv42, i8* %cheap_address, align 2, !dbg !4628
  br label %if.end, !dbg !4629

if.else:                                          ; preds = %cond.end26
  %34 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4630
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !4630
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !4630
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 1, !dbg !4630
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !4630
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !4630
  %36 = load i8, i8* %speed, align 1, !dbg !4632
  %call47 = call i32 @rtx_cost(%struct.rtx_def* %35, i32 23, i8 zeroext %36), !dbg !4633
  %37 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4634
  %cost48 = getelementptr inbounds %struct.invariant, %struct.invariant* %37, i32 0, i32 9, !dbg !4635
  store i32 %call47, i32* %cost48, align 4, !dbg !4636
  %38 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4637
  %cheap_address49 = getelementptr inbounds %struct.invariant, %struct.invariant* %38, i32 0, i32 8, !dbg !4638
  store i8 0, i8* %cheap_address49, align 2, !dbg !4639
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %39 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4640
  %move = getelementptr inbounds %struct.invariant, %struct.invariant* %39, i32 0, i32 7, !dbg !4641
  store i8 0, i8* %move, align 1, !dbg !4642
  %40 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4643
  %reg = getelementptr inbounds %struct.invariant, %struct.invariant* %40, i32 0, i32 2, !dbg !4644
  store %struct.rtx_def* null, %struct.rtx_def** %reg, align 8, !dbg !4645
  %41 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4646
  %orig_regno = getelementptr inbounds %struct.invariant, %struct.invariant* %41, i32 0, i32 3, !dbg !4647
  store i32 -1, i32* %orig_regno, align 8, !dbg !4648
  %42 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4649
  %stamp = getelementptr inbounds %struct.invariant, %struct.invariant* %42, i32 0, i32 11, !dbg !4650
  store i32 0, i32* %stamp, align 8, !dbg !4651
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4652
  %44 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4653
  %insn50 = getelementptr inbounds %struct.invariant, %struct.invariant* %44, i32 0, i32 5, !dbg !4654
  store %struct.rtx_def* %43, %struct.rtx_def** %insn50, align 8, !dbg !4655
  %45 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4656
  %tobool51 = icmp ne %struct.VEC_invariant_p_heap* %45, null, !dbg !4656
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !4656

cond.true52:                                      ; preds = %if.end
  %46 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4656
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %46, i32 0, i32 0, !dbg !4656
  br label %cond.end54, !dbg !4656

cond.false53:                                     ; preds = %if.end
  br label %cond.end54, !dbg !4656

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi %struct.VEC_invariant_p_base* [ %base, %cond.true52 ], [ null, %cond.false53 ], !dbg !4656
  %call56 = call i32 @VEC_invariant_p_base_length(%struct.VEC_invariant_p_base* %cond55), !dbg !4656
  %47 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4657
  %invno = getelementptr inbounds %struct.invariant, %struct.invariant* %47, i32 0, i32 0, !dbg !4658
  store i32 %call56, i32* %invno, align 8, !dbg !4659
  %48 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4660
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %48, i32 0, i32 1, !dbg !4661
  store i32 -1, i32* %eqto, align 4, !dbg !4662
  %49 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4663
  %tobool57 = icmp ne %struct.def* %49, null, !dbg !4663
  br i1 %tobool57, label %if.then58, label %if.end61, !dbg !4665

if.then58:                                        ; preds = %cond.end54
  %50 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4666
  %invno59 = getelementptr inbounds %struct.invariant, %struct.invariant* %50, i32 0, i32 0, !dbg !4667
  %51 = load i32, i32* %invno59, align 8, !dbg !4667
  %52 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4668
  %invno60 = getelementptr inbounds %struct.def, %struct.def* %52, i32 0, i32 3, !dbg !4669
  store i32 %51, i32* %invno60, align 8, !dbg !4670
  br label %if.end61, !dbg !4668

if.end61:                                         ; preds = %if.then58, %cond.end54
  %53 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4671
  %call62 = call %struct.invariant** @VEC_invariant_p_heap_safe_push(%struct.VEC_invariant_p_heap** @invariants, %struct.invariant* %53), !dbg !4671
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4672
  %tobool63 = icmp ne %struct._IO_FILE* %54, null, !dbg !4672
  br i1 %tobool63, label %if.then64, label %if.end72, !dbg !4674

if.then64:                                        ; preds = %if.end61
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4675
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4677
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !4677
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !4677
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !4677
  %rt_int = bitcast %union.rtunion_def* %arrayidx67 to i32*, !dbg !4677
  %57 = load i32, i32* %rt_int, align 8, !dbg !4677
  %58 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4678
  %invno68 = getelementptr inbounds %struct.invariant, %struct.invariant* %58, i32 0, i32 0, !dbg !4679
  %59 = load i32, i32* %invno68, align 8, !dbg !4679
  %60 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4680
  %cost69 = getelementptr inbounds %struct.invariant, %struct.invariant* %60, i32 0, i32 9, !dbg !4681
  %61 = load i32, i32* %cost69, align 4, !dbg !4681
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0), i32 %57, i32 %59, i32 %61), !dbg !4682
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4683
  %63 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4683
  %depends_on71 = getelementptr inbounds %struct.invariant, %struct.invariant* %63, i32 0, i32 10, !dbg !4683
  %64 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on71, align 8, !dbg !4683
  call void @bitmap_print(%struct._IO_FILE* %62, %struct.bitmap_head_def* %64, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)), !dbg !4683
  br label %if.end72, !dbg !4684

if.end72:                                         ; preds = %if.then64, %if.end61
  %65 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4685
  ret %struct.invariant* %65, !dbg !4686
}

declare dso_local %union.df_ref_d* @df_find_def(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @can_copy_p(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_dependency(%struct.basic_block_def* %bb, %union.df_ref_d* %use, %struct.bitmap_head_def* %depends_on) #0 !dbg !4687 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %use.addr = alloca %union.df_ref_d*, align 8
  %depends_on.addr = alloca %struct.bitmap_head_def*, align 8
  %def = alloca %union.df_ref_d*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  %defs = alloca %struct.df_link*, align 8
  %def_data = alloca %struct.def*, align 8
  %inv = alloca %struct.invariant*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4690, metadata !DIExpression()), !dbg !4691
  store %union.df_ref_d* %use, %union.df_ref_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use.addr, metadata !4692, metadata !DIExpression()), !dbg !4693
  store %struct.bitmap_head_def* %depends_on, %struct.bitmap_head_def** %depends_on.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %depends_on.addr, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !4696, metadata !DIExpression()), !dbg !4697
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !4698, metadata !DIExpression()), !dbg !4699
  call void @llvm.dbg.declare(metadata %struct.df_link** %defs, metadata !4700, metadata !DIExpression()), !dbg !4701
  call void @llvm.dbg.declare(metadata %struct.def** %def_data, metadata !4702, metadata !DIExpression()), !dbg !4703
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !4704, metadata !DIExpression()), !dbg !4705
  %0 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4706
  %base = bitcast %union.df_ref_d* %0 to %struct.df_base_ref*, !dbg !4706
  %1 = bitcast %struct.df_base_ref* %base to i32*, !dbg !4706
  %bf.load = load i32, i32* %1, align 8, !dbg !4706
  %bf.ashr = ashr i32 %bf.load, 16, !dbg !4706
  %and = and i32 %bf.ashr, 32, !dbg !4708
  %tobool = icmp ne i32 %and, 0, !dbg !4708
  br i1 %tobool, label %if.then, label %if.end, !dbg !4709

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4710
  br label %return, !dbg !4710

if.end:                                           ; preds = %entry
  %2 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4711
  %base1 = bitcast %union.df_ref_d* %2 to %struct.df_base_ref*, !dbg !4711
  %chain = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base1, i32 0, i32 2, !dbg !4711
  %3 = load %struct.df_link*, %struct.df_link** %chain, align 8, !dbg !4711
  store %struct.df_link* %3, %struct.df_link** %defs, align 8, !dbg !4712
  %4 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4713
  %tobool2 = icmp ne %struct.df_link* %4, null, !dbg !4713
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !4715

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !4716
  br label %return, !dbg !4716

if.end4:                                          ; preds = %if.end
  %5 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4717
  %next = getelementptr inbounds %struct.df_link, %struct.df_link* %5, i32 0, i32 1, !dbg !4719
  %6 = load %struct.df_link*, %struct.df_link** %next, align 8, !dbg !4719
  %tobool5 = icmp ne %struct.df_link* %6, null, !dbg !4717
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4720

if.then6:                                         ; preds = %if.end4
  store i8 0, i8* %retval, align 1, !dbg !4721
  br label %return, !dbg !4721

if.end7:                                          ; preds = %if.end4
  %7 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4722
  %ref = getelementptr inbounds %struct.df_link, %struct.df_link* %7, i32 0, i32 0, !dbg !4723
  %8 = load %union.df_ref_d*, %union.df_ref_d** %ref, align 8, !dbg !4723
  store %union.df_ref_d* %8, %union.df_ref_d** %def, align 8, !dbg !4724
  call void @check_invariant_table_size(), !dbg !4725
  %9 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4726
  %10 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4727
  %base8 = bitcast %union.df_ref_d* %10 to %struct.df_base_ref*, !dbg !4727
  %id = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base8, i32 0, i32 7, !dbg !4727
  %11 = load i32, i32* %id, align 4, !dbg !4727
  %idxprom = sext i32 %11 to i64, !dbg !4726
  %arrayidx = getelementptr inbounds %struct.invariant*, %struct.invariant** %9, i64 %idxprom, !dbg !4726
  %12 = load %struct.invariant*, %struct.invariant** %arrayidx, align 8, !dbg !4726
  store %struct.invariant* %12, %struct.invariant** %inv, align 8, !dbg !4728
  %13 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4729
  %tobool9 = icmp ne %struct.invariant* %13, null, !dbg !4729
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !4731

if.then10:                                        ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !4732
  br label %return, !dbg !4732

if.end11:                                         ; preds = %if.end7
  %14 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4733
  %def12 = getelementptr inbounds %struct.invariant, %struct.invariant* %14, i32 0, i32 4, !dbg !4734
  %15 = load %struct.def*, %struct.def** %def12, align 8, !dbg !4734
  store %struct.def* %15, %struct.def** %def_data, align 8, !dbg !4735
  %16 = load %struct.def*, %struct.def** %def_data, align 8, !dbg !4736
  %cmp = icmp ne %struct.def* %16, null, !dbg !4736
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4736

cond.true:                                        ; preds = %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 797, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !4736
  br label %cond.end, !dbg !4736

cond.false:                                       ; preds = %if.end11
  br label %cond.end, !dbg !4736

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4736
  %17 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4737
  %base13 = bitcast %union.df_ref_d* %17 to %struct.df_base_ref*, !dbg !4737
  %18 = bitcast %struct.df_base_ref* %base13 to i32*, !dbg !4737
  %bf.load14 = load i32, i32* %18, align 8, !dbg !4737
  %bf.clear = and i32 %bf.load14, 255, !dbg !4737
  %cmp15 = icmp eq i32 %bf.clear, 1, !dbg !4737
  br i1 %cmp15, label %cond.true16, label %cond.false18, !dbg !4737

cond.true16:                                      ; preds = %cond.end
  %19 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4737
  %artificial_ref = bitcast %union.df_ref_d* %19 to %struct.df_artificial_ref*, !dbg !4737
  %bb17 = getelementptr inbounds %struct.df_artificial_ref, %struct.df_artificial_ref* %artificial_ref, i32 0, i32 1, !dbg !4737
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb17, align 8, !dbg !4737
  br label %cond.end21, !dbg !4737

cond.false18:                                     ; preds = %cond.end
  %21 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4737
  %base19 = bitcast %union.df_ref_d* %21 to %struct.df_base_ref*, !dbg !4737
  %insn_info = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base19, i32 0, i32 3, !dbg !4737
  %22 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4737
  %insn = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %22, i32 0, i32 0, !dbg !4737
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4737
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4737
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4737
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4737
  %rt_bb = bitcast %union.rtunion_def* %arrayidx20 to %struct.basic_block_def**, !dbg !4737
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4737
  br label %cond.end21, !dbg !4737

cond.end21:                                       ; preds = %cond.false18, %cond.true16
  %cond22 = phi %struct.basic_block_def* [ %20, %cond.true16 ], [ %24, %cond.false18 ], !dbg !4737
  store %struct.basic_block_def* %cond22, %struct.basic_block_def** %def_bb, align 8, !dbg !4738
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4739
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !4741
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %25, %struct.basic_block_def* %26), !dbg !4742
  %tobool23 = icmp ne i8 %call, 0, !dbg !4742
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !4743

if.then24:                                        ; preds = %cond.end21
  store i8 0, i8* %retval, align 1, !dbg !4744
  br label %return, !dbg !4744

if.end25:                                         ; preds = %cond.end21
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on.addr, align 8, !dbg !4745
  %28 = load %struct.def*, %struct.def** %def_data, align 8, !dbg !4746
  %invno = getelementptr inbounds %struct.def, %struct.def* %28, i32 0, i32 3, !dbg !4747
  %29 = load i32, i32* %invno, align 8, !dbg !4747
  %call26 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %27, i32 %29), !dbg !4748
  store i8 1, i8* %retval, align 1, !dbg !4749
  br label %return, !dbg !4749

return:                                           ; preds = %if.end25, %if.then24, %if.then10, %if.then6, %if.then3, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !4750
  ret i8 %30, !dbg !4750
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def*) #2

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local i32 @address_cost(%struct.rtx_def*, i32, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_invariant_p_base_length(%struct.VEC_invariant_p_base* %vec_) #0 !dbg !4751 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_base*, align 8
  store %struct.VEC_invariant_p_base* %vec_, %struct.VEC_invariant_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_base** %vec_.addr, metadata !4756, metadata !DIExpression()), !dbg !4757
  %0 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4757
  %tobool = icmp ne %struct.VEC_invariant_p_base* %0, null, !dbg !4757
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4757

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4757
  %num = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %1, i32 0, i32 0, !dbg !4757
  %2 = load i32, i32* %num, align 8, !dbg !4757
  br label %cond.end, !dbg !4757

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4757

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4757
  ret i32 %cond, !dbg !4757
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant** @VEC_invariant_p_heap_safe_push(%struct.VEC_invariant_p_heap** %vec_, %struct.invariant* %obj_) #0 !dbg !4758 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_heap**, align 8
  %obj_.addr = alloca %struct.invariant*, align 8
  store %struct.VEC_invariant_p_heap** %vec_, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_heap*** %vec_.addr, metadata !4763, metadata !DIExpression()), !dbg !4764
  store %struct.invariant* %obj_, %struct.invariant** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %obj_.addr, metadata !4765, metadata !DIExpression()), !dbg !4764
  %0 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4764
  %call = call i32 @VEC_invariant_p_heap_reserve(%struct.VEC_invariant_p_heap** %0, i32 1), !dbg !4764
  %1 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4764
  %2 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %1, align 8, !dbg !4764
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %2, null, !dbg !4764
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4764

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4764
  %4 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %3, align 8, !dbg !4764
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %4, i32 0, i32 0, !dbg !4764
  br label %cond.end, !dbg !4764

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4764
  %5 = load %struct.invariant*, %struct.invariant** %obj_.addr, align 8, !dbg !4764
  %call1 = call %struct.invariant** @VEC_invariant_p_base_quick_push(%struct.VEC_invariant_p_base* %cond, %struct.invariant* %5), !dbg !4764
  ret %struct.invariant** %call1, !dbg !4764
}

declare dso_local void @bitmap_print(%struct._IO_FILE*, %struct.bitmap_head_def*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_invariant_p_heap_reserve(%struct.VEC_invariant_p_heap** %vec_, i32 %alloc_) #0 !dbg !4766 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_invariant_p_heap** %vec_, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_heap*** %vec_.addr, metadata !4769, metadata !DIExpression()), !dbg !4770
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4771, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !4772, metadata !DIExpression()), !dbg !4770
  %0 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4770
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %0, align 8, !dbg !4770
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %1, null, !dbg !4770
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4770

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4770
  %3 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %2, align 8, !dbg !4770
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %3, i32 0, i32 0, !dbg !4770
  br label %cond.end, !dbg !4770

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4770
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !4770
  %call = call i32 @VEC_invariant_p_base_space(%struct.VEC_invariant_p_base* %cond, i32 %4), !dbg !4770
  %tobool1 = icmp ne i32 %call, 0, !dbg !4770
  %lnot = xor i1 %tobool1, true, !dbg !4770
  %lnot.ext = zext i1 %lnot to i32, !dbg !4770
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !4770
  %5 = load i32, i32* %extend, align 4, !dbg !4773
  %tobool2 = icmp ne i32 %5, 0, !dbg !4773
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4770

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4773
  %7 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %6, align 8, !dbg !4773
  %8 = bitcast %struct.VEC_invariant_p_heap* %7 to i8*, !dbg !4773
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !4773
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !4773
  %10 = bitcast i8* %call3 to %struct.VEC_invariant_p_heap*, !dbg !4773
  %11 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !4773
  store %struct.VEC_invariant_p_heap* %10, %struct.VEC_invariant_p_heap** %11, align 8, !dbg !4773
  br label %if.end, !dbg !4773

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !4770
  ret i32 %12, !dbg !4770
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant** @VEC_invariant_p_base_quick_push(%struct.VEC_invariant_p_base* %vec_, %struct.invariant* %obj_) #0 !dbg !4775 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_base*, align 8
  %obj_.addr = alloca %struct.invariant*, align 8
  %slot_ = alloca %struct.invariant**, align 8
  store %struct.VEC_invariant_p_base* %vec_, %struct.VEC_invariant_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_base** %vec_.addr, metadata !4779, metadata !DIExpression()), !dbg !4780
  store %struct.invariant* %obj_, %struct.invariant** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %obj_.addr, metadata !4781, metadata !DIExpression()), !dbg !4780
  call void @llvm.dbg.declare(metadata %struct.invariant*** %slot_, metadata !4782, metadata !DIExpression()), !dbg !4780
  %0 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4780
  %num = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %0, i32 0, i32 0, !dbg !4780
  %1 = load i32, i32* %num, align 8, !dbg !4780
  %2 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4780
  %alloc = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %2, i32 0, i32 1, !dbg !4780
  %3 = load i32, i32* %alloc, align 4, !dbg !4780
  %cmp = icmp ult i32 %1, %3, !dbg !4780
  %conv = zext i1 %cmp to i32, !dbg !4780
  %4 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4780
  %vec = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %4, i32 0, i32 2, !dbg !4780
  %5 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4780
  %num1 = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %5, i32 0, i32 0, !dbg !4780
  %6 = load i32, i32* %num1, align 8, !dbg !4780
  %inc = add i32 %6, 1, !dbg !4780
  store i32 %inc, i32* %num1, align 8, !dbg !4780
  %idxprom = zext i32 %6 to i64, !dbg !4780
  %arrayidx = getelementptr inbounds [1 x %struct.invariant*], [1 x %struct.invariant*]* %vec, i64 0, i64 %idxprom, !dbg !4780
  store %struct.invariant** %arrayidx, %struct.invariant*** %slot_, align 8, !dbg !4780
  %7 = load %struct.invariant*, %struct.invariant** %obj_.addr, align 8, !dbg !4780
  %8 = load %struct.invariant**, %struct.invariant*** %slot_, align 8, !dbg !4780
  store %struct.invariant* %7, %struct.invariant** %8, align 8, !dbg !4780
  %9 = load %struct.invariant**, %struct.invariant*** %slot_, align 8, !dbg !4780
  ret %struct.invariant** %9, !dbg !4780
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_invariant_p_base_space(%struct.VEC_invariant_p_base* %vec_, i32 %alloc_) #0 !dbg !4783 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_invariant_p_base* %vec_, %struct.VEC_invariant_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_base** %vec_.addr, metadata !4786, metadata !DIExpression()), !dbg !4787
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4788, metadata !DIExpression()), !dbg !4787
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4787
  %cmp = icmp sge i32 %0, 0, !dbg !4787
  %conv = zext i1 %cmp to i32, !dbg !4787
  %1 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4787
  %tobool = icmp ne %struct.VEC_invariant_p_base* %1, null, !dbg !4787
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4787

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4787
  %alloc = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %2, i32 0, i32 1, !dbg !4787
  %3 = load i32, i32* %alloc, align 4, !dbg !4787
  %4 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4787
  %num = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %4, i32 0, i32 0, !dbg !4787
  %5 = load i32, i32* %num, align 8, !dbg !4787
  %sub = sub i32 %3, %5, !dbg !4787
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !4787
  %cmp1 = icmp uge i32 %sub, %6, !dbg !4787
  %conv2 = zext i1 %cmp1 to i32, !dbg !4787
  br label %cond.end, !dbg !4787

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !4787
  %tobool3 = icmp ne i32 %7, 0, !dbg !4787
  %lnot = xor i1 %tobool3, true, !dbg !4787
  %lnot.ext = zext i1 %lnot to i32, !dbg !4787
  br label %cond.end, !dbg !4787

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !4787
  ret i32 %cond, !dbg !4787
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant* @invariant_for_use(%union.df_ref_d* %use) #0 !dbg !4789 {
entry:
  %retval = alloca %struct.invariant*, align 8
  %use.addr = alloca %union.df_ref_d*, align 8
  %defs = alloca %struct.df_link*, align 8
  %def = alloca %union.df_ref_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  store %union.df_ref_d* %use, %union.df_ref_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use.addr, metadata !4792, metadata !DIExpression()), !dbg !4793
  call void @llvm.dbg.declare(metadata %struct.df_link** %defs, metadata !4794, metadata !DIExpression()), !dbg !4795
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4798, metadata !DIExpression()), !dbg !4799
  %0 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4800
  %base = bitcast %union.df_ref_d* %0 to %struct.df_base_ref*, !dbg !4800
  %1 = bitcast %struct.df_base_ref* %base to i32*, !dbg !4800
  %bf.load = load i32, i32* %1, align 8, !dbg !4800
  %bf.clear = and i32 %bf.load, 255, !dbg !4800
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !4800
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4800

cond.true:                                        ; preds = %entry
  %2 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4800
  %artificial_ref = bitcast %union.df_ref_d* %2 to %struct.df_artificial_ref*, !dbg !4800
  %bb1 = getelementptr inbounds %struct.df_artificial_ref, %struct.df_artificial_ref* %artificial_ref, i32 0, i32 1, !dbg !4800
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !4800
  br label %cond.end, !dbg !4800

cond.false:                                       ; preds = %entry
  %4 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4800
  %base2 = bitcast %union.df_ref_d* %4 to %struct.df_base_ref*, !dbg !4800
  %insn_info = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base2, i32 0, i32 3, !dbg !4800
  %5 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4800
  %insn = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %5, i32 0, i32 0, !dbg !4800
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4800
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4800
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4800
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4800
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4800
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4800
  br label %cond.end, !dbg !4800

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %7, %cond.false ], !dbg !4800
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !4799
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !4801, metadata !DIExpression()), !dbg !4802
  %8 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4803
  %base3 = bitcast %union.df_ref_d* %8 to %struct.df_base_ref*, !dbg !4803
  %9 = bitcast %struct.df_base_ref* %base3 to i32*, !dbg !4803
  %bf.load4 = load i32, i32* %9, align 8, !dbg !4803
  %bf.ashr = ashr i32 %bf.load4, 16, !dbg !4803
  %and = and i32 %bf.ashr, 32, !dbg !4805
  %tobool = icmp ne i32 %and, 0, !dbg !4805
  br i1 %tobool, label %if.then, label %if.end, !dbg !4806

if.then:                                          ; preds = %cond.end
  store %struct.invariant* null, %struct.invariant** %retval, align 8, !dbg !4807
  br label %return, !dbg !4807

if.end:                                           ; preds = %cond.end
  %10 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4808
  %base5 = bitcast %union.df_ref_d* %10 to %struct.df_base_ref*, !dbg !4808
  %chain = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base5, i32 0, i32 2, !dbg !4808
  %11 = load %struct.df_link*, %struct.df_link** %chain, align 8, !dbg !4808
  store %struct.df_link* %11, %struct.df_link** %defs, align 8, !dbg !4809
  %12 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4810
  %tobool6 = icmp ne %struct.df_link* %12, null, !dbg !4810
  br i1 %tobool6, label %lor.lhs.false, label %if.then8, !dbg !4812

lor.lhs.false:                                    ; preds = %if.end
  %13 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4813
  %next = getelementptr inbounds %struct.df_link, %struct.df_link* %13, i32 0, i32 1, !dbg !4814
  %14 = load %struct.df_link*, %struct.df_link** %next, align 8, !dbg !4814
  %tobool7 = icmp ne %struct.df_link* %14, null, !dbg !4813
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !4815

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  store %struct.invariant* null, %struct.invariant** %retval, align 8, !dbg !4816
  br label %return, !dbg !4816

if.end9:                                          ; preds = %lor.lhs.false
  %15 = load %struct.df_link*, %struct.df_link** %defs, align 8, !dbg !4817
  %ref = getelementptr inbounds %struct.df_link, %struct.df_link* %15, i32 0, i32 0, !dbg !4818
  %16 = load %union.df_ref_d*, %union.df_ref_d** %ref, align 8, !dbg !4818
  store %union.df_ref_d* %16, %union.df_ref_d** %def, align 8, !dbg !4819
  call void @check_invariant_table_size(), !dbg !4820
  %17 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4821
  %18 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4823
  %base10 = bitcast %union.df_ref_d* %18 to %struct.df_base_ref*, !dbg !4823
  %id = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base10, i32 0, i32 7, !dbg !4823
  %19 = load i32, i32* %id, align 4, !dbg !4823
  %idxprom = sext i32 %19 to i64, !dbg !4821
  %arrayidx11 = getelementptr inbounds %struct.invariant*, %struct.invariant** %17, i64 %idxprom, !dbg !4821
  %20 = load %struct.invariant*, %struct.invariant** %arrayidx11, align 8, !dbg !4821
  %tobool12 = icmp ne %struct.invariant* %20, null, !dbg !4821
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4824

if.then13:                                        ; preds = %if.end9
  store %struct.invariant* null, %struct.invariant** %retval, align 8, !dbg !4825
  br label %return, !dbg !4825

if.end14:                                         ; preds = %if.end9
  %21 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4826
  %base15 = bitcast %union.df_ref_d* %21 to %struct.df_base_ref*, !dbg !4826
  %22 = bitcast %struct.df_base_ref* %base15 to i32*, !dbg !4826
  %bf.load16 = load i32, i32* %22, align 8, !dbg !4826
  %bf.clear17 = and i32 %bf.load16, 255, !dbg !4826
  %cmp18 = icmp eq i32 %bf.clear17, 1, !dbg !4826
  br i1 %cmp18, label %cond.true19, label %cond.false22, !dbg !4826

cond.true19:                                      ; preds = %if.end14
  %23 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4826
  %artificial_ref20 = bitcast %union.df_ref_d* %23 to %struct.df_artificial_ref*, !dbg !4826
  %bb21 = getelementptr inbounds %struct.df_artificial_ref, %struct.df_artificial_ref* %artificial_ref20, i32 0, i32 1, !dbg !4826
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb21, align 8, !dbg !4826
  br label %cond.end30, !dbg !4826

cond.false22:                                     ; preds = %if.end14
  %25 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4826
  %base23 = bitcast %union.df_ref_d* %25 to %struct.df_base_ref*, !dbg !4826
  %insn_info24 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base23, i32 0, i32 3, !dbg !4826
  %26 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info24, align 8, !dbg !4826
  %insn25 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %26, i32 0, i32 0, !dbg !4826
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn25, align 8, !dbg !4826
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4826
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !4826
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 3, !dbg !4826
  %rt_bb29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.basic_block_def**, !dbg !4826
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb29, align 8, !dbg !4826
  br label %cond.end30, !dbg !4826

cond.end30:                                       ; preds = %cond.false22, %cond.true19
  %cond31 = phi %struct.basic_block_def* [ %24, %cond.true19 ], [ %28, %cond.false22 ], !dbg !4826
  store %struct.basic_block_def* %cond31, %struct.basic_block_def** %def_bb, align 8, !dbg !4827
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4828
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !4830
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %29, %struct.basic_block_def* %30), !dbg !4831
  %tobool32 = icmp ne i8 %call, 0, !dbg !4831
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !4832

if.then33:                                        ; preds = %cond.end30
  store %struct.invariant* null, %struct.invariant** %retval, align 8, !dbg !4833
  br label %return, !dbg !4833

if.end34:                                         ; preds = %cond.end30
  %31 = load %struct.invariant**, %struct.invariant*** @invariant_table, align 8, !dbg !4834
  %32 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !4835
  %base35 = bitcast %union.df_ref_d* %32 to %struct.df_base_ref*, !dbg !4835
  %id36 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base35, i32 0, i32 7, !dbg !4835
  %33 = load i32, i32* %id36, align 4, !dbg !4835
  %idxprom37 = sext i32 %33 to i64, !dbg !4834
  %arrayidx38 = getelementptr inbounds %struct.invariant*, %struct.invariant** %31, i64 %idxprom37, !dbg !4834
  %34 = load %struct.invariant*, %struct.invariant** %arrayidx38, align 8, !dbg !4834
  store %struct.invariant* %34, %struct.invariant** %retval, align 8, !dbg !4836
  br label %return, !dbg !4836

return:                                           ; preds = %if.end34, %if.then33, %if.then13, %if.then8, %if.then
  %35 = load %struct.invariant*, %struct.invariant** %retval, align 8, !dbg !4837
  ret %struct.invariant* %35, !dbg !4837
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_use(%struct.def* %def, %union.df_ref_d* %use) #0 !dbg !4838 {
entry:
  %def.addr = alloca %struct.def*, align 8
  %use.addr = alloca %union.df_ref_d*, align 8
  %u = alloca %struct.use*, align 8
  store %struct.def* %def, %struct.def** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.def** %def.addr, metadata !4841, metadata !DIExpression()), !dbg !4842
  store %union.df_ref_d* %use, %union.df_ref_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use.addr, metadata !4843, metadata !DIExpression()), !dbg !4844
  call void @llvm.dbg.declare(metadata %struct.use** %u, metadata !4845, metadata !DIExpression()), !dbg !4846
  %call = call i8* @xmalloc(i64 32), !dbg !4847
  %0 = bitcast i8* %call to %struct.use*, !dbg !4847
  store %struct.use* %0, %struct.use** %u, align 8, !dbg !4846
  %1 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4848
  %regular_ref = bitcast %union.df_ref_d* %1 to %struct.df_regular_ref*, !dbg !4848
  %loc = getelementptr inbounds %struct.df_regular_ref, %struct.df_regular_ref* %regular_ref, i32 0, i32 1, !dbg !4848
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !4848
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !4848
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4848
  %bf.load = load i32, i32* %4, align 8, !dbg !4848
  %bf.clear = and i32 %bf.load, 65535, !dbg !4848
  %cmp = icmp eq i32 %bf.clear, 39, !dbg !4848
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4848

cond.true:                                        ; preds = %entry
  %5 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4848
  %regular_ref1 = bitcast %union.df_ref_d* %5 to %struct.df_regular_ref*, !dbg !4848
  %loc2 = getelementptr inbounds %struct.df_regular_ref, %struct.df_regular_ref* %regular_ref1, i32 0, i32 1, !dbg !4848
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %loc2, align 8, !dbg !4848
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8, !dbg !4848
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !4848
  %fld = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !4848
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4848
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4848
  br label %cond.end, !dbg !4848

cond.false:                                       ; preds = %entry
  %8 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4848
  %regular_ref4 = bitcast %union.df_ref_d* %8 to %struct.df_regular_ref*, !dbg !4848
  %loc5 = getelementptr inbounds %struct.df_regular_ref, %struct.df_regular_ref* %regular_ref4, i32 0, i32 1, !dbg !4848
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %loc5, align 8, !dbg !4848
  br label %cond.end, !dbg !4848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def** [ %rt_rtx, %cond.true ], [ %9, %cond.false ], !dbg !4848
  %10 = load %struct.use*, %struct.use** %u, align 8, !dbg !4849
  %pos = getelementptr inbounds %struct.use, %struct.use* %10, i32 0, i32 0, !dbg !4850
  store %struct.rtx_def** %cond, %struct.rtx_def*** %pos, align 8, !dbg !4851
  %11 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4852
  %base = bitcast %union.df_ref_d* %11 to %struct.df_base_ref*, !dbg !4852
  %insn_info = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 3, !dbg !4852
  %12 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !4852
  %insn = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %12, i32 0, i32 0, !dbg !4852
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4852
  %14 = load %struct.use*, %struct.use** %u, align 8, !dbg !4853
  %insn6 = getelementptr inbounds %struct.use, %struct.use* %14, i32 0, i32 1, !dbg !4854
  store %struct.rtx_def* %13, %struct.rtx_def** %insn6, align 8, !dbg !4855
  %15 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4856
  %base7 = bitcast %union.df_ref_d* %15 to %struct.df_base_ref*, !dbg !4856
  %16 = bitcast %struct.df_base_ref* %base7 to i32*, !dbg !4856
  %bf.load8 = load i32, i32* %16, align 8, !dbg !4856
  %bf.lshr = lshr i32 %bf.load8, 8, !dbg !4856
  %bf.clear9 = and i32 %bf.lshr, 255, !dbg !4856
  %cmp10 = icmp eq i32 %bf.clear9, 2, !dbg !4857
  br i1 %cmp10, label %lor.end, label %lor.rhs, !dbg !4858

lor.rhs:                                          ; preds = %cond.end
  %17 = load %union.df_ref_d*, %union.df_ref_d** %use.addr, align 8, !dbg !4859
  %base11 = bitcast %union.df_ref_d* %17 to %struct.df_base_ref*, !dbg !4859
  %18 = bitcast %struct.df_base_ref* %base11 to i32*, !dbg !4859
  %bf.load12 = load i32, i32* %18, align 8, !dbg !4859
  %bf.lshr13 = lshr i32 %bf.load12, 8, !dbg !4859
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !4859
  %cmp15 = icmp eq i32 %bf.clear14, 3, !dbg !4860
  br label %lor.end, !dbg !4858

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %19 = phi i1 [ true, %cond.end ], [ %cmp15, %lor.rhs ]
  %lor.ext = zext i1 %19 to i32, !dbg !4858
  %20 = load %struct.use*, %struct.use** %u, align 8, !dbg !4861
  %addr_use_p = getelementptr inbounds %struct.use, %struct.use* %20, i32 0, i32 2, !dbg !4862
  store i32 %lor.ext, i32* %addr_use_p, align 8, !dbg !4863
  %21 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4864
  %uses = getelementptr inbounds %struct.def, %struct.def* %21, i32 0, i32 0, !dbg !4865
  %22 = load %struct.use*, %struct.use** %uses, align 8, !dbg !4865
  %23 = load %struct.use*, %struct.use** %u, align 8, !dbg !4866
  %next = getelementptr inbounds %struct.use, %struct.use* %23, i32 0, i32 3, !dbg !4867
  store %struct.use* %22, %struct.use** %next, align 8, !dbg !4868
  %24 = load %struct.use*, %struct.use** %u, align 8, !dbg !4869
  %25 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4870
  %uses16 = getelementptr inbounds %struct.def, %struct.def* %25, i32 0, i32 0, !dbg !4871
  store %struct.use* %24, %struct.use** %uses16, align 8, !dbg !4872
  %26 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4873
  %n_uses = getelementptr inbounds %struct.def, %struct.def* %26, i32 0, i32 1, !dbg !4874
  %27 = load i32, i32* %n_uses, align 8, !dbg !4875
  %inc = add i32 %27, 1, !dbg !4875
  store i32 %inc, i32* %n_uses, align 8, !dbg !4875
  %28 = load %struct.use*, %struct.use** %u, align 8, !dbg !4876
  %addr_use_p17 = getelementptr inbounds %struct.use, %struct.use* %28, i32 0, i32 2, !dbg !4878
  %29 = load i32, i32* %addr_use_p17, align 8, !dbg !4878
  %tobool = icmp ne i32 %29, 0, !dbg !4876
  br i1 %tobool, label %if.then, label %if.end, !dbg !4879

if.then:                                          ; preds = %lor.end
  %30 = load %struct.def*, %struct.def** %def.addr, align 8, !dbg !4880
  %n_addr_uses = getelementptr inbounds %struct.def, %struct.def* %30, i32 0, i32 2, !dbg !4881
  %31 = load i32, i32* %n_addr_uses, align 4, !dbg !4882
  %inc18 = add i32 %31, 1, !dbg !4882
  store i32 %inc18, i32* %n_addr_uses, align 4, !dbg !4882
  br label %if.end, !dbg !4880

if.end:                                           ; preds = %if.then, %lor.end
  ret void, !dbg !4883
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_invariant_expr(i8* %e) #0 !dbg !4884 {
entry:
  %e.addr = alloca i8*, align 8
  %entry1 = alloca %struct.invariant_expr_entry*, align 8
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !4885, metadata !DIExpression()), !dbg !4886
  call void @llvm.dbg.declare(metadata %struct.invariant_expr_entry** %entry1, metadata !4887, metadata !DIExpression()), !dbg !4889
  %0 = load i8*, i8** %e.addr, align 8, !dbg !4890
  %1 = bitcast i8* %0 to %struct.invariant_expr_entry*, !dbg !4891
  store %struct.invariant_expr_entry* %1, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4889
  %2 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4892
  %hash = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %2, i32 0, i32 3, !dbg !4893
  %3 = load i32, i32* %hash, align 4, !dbg !4893
  ret i32 %3, !dbg !4894
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_invariant_expr(i8* %e1, i8* %e2) #0 !dbg !4895 {
entry:
  %retval = alloca i32, align 4
  %e1.addr = alloca i8*, align 8
  %e2.addr = alloca i8*, align 8
  %entry1 = alloca %struct.invariant_expr_entry*, align 8
  %entry2 = alloca %struct.invariant_expr_entry*, align 8
  store i8* %e1, i8** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e1.addr, metadata !4896, metadata !DIExpression()), !dbg !4897
  store i8* %e2, i8** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e2.addr, metadata !4898, metadata !DIExpression()), !dbg !4899
  call void @llvm.dbg.declare(metadata %struct.invariant_expr_entry** %entry1, metadata !4900, metadata !DIExpression()), !dbg !4901
  %0 = load i8*, i8** %e1.addr, align 8, !dbg !4902
  %1 = bitcast i8* %0 to %struct.invariant_expr_entry*, !dbg !4903
  store %struct.invariant_expr_entry* %1, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4901
  call void @llvm.dbg.declare(metadata %struct.invariant_expr_entry** %entry2, metadata !4904, metadata !DIExpression()), !dbg !4905
  %2 = load i8*, i8** %e2.addr, align 8, !dbg !4906
  %3 = bitcast i8* %2 to %struct.invariant_expr_entry*, !dbg !4907
  store %struct.invariant_expr_entry* %3, %struct.invariant_expr_entry** %entry2, align 8, !dbg !4905
  %4 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4908
  %mode = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %4, i32 0, i32 2, !dbg !4910
  %5 = load i32, i32* %mode, align 8, !dbg !4910
  %6 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry2, align 8, !dbg !4911
  %mode1 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %6, i32 0, i32 2, !dbg !4912
  %7 = load i32, i32* %mode1, align 8, !dbg !4912
  %cmp = icmp ne i32 %5, %7, !dbg !4913
  br i1 %cmp, label %if.then, label %if.end, !dbg !4914

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4915
  br label %return, !dbg !4915

if.end:                                           ; preds = %entry
  %8 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4916
  %inv = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %8, i32 0, i32 0, !dbg !4917
  %9 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !4917
  %insn = getelementptr inbounds %struct.invariant, %struct.invariant* %9, i32 0, i32 5, !dbg !4918
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4918
  %11 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !4919
  %expr = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %11, i32 0, i32 1, !dbg !4920
  %12 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4920
  %13 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry2, align 8, !dbg !4921
  %inv2 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %13, i32 0, i32 0, !dbg !4922
  %14 = load %struct.invariant*, %struct.invariant** %inv2, align 8, !dbg !4922
  %insn3 = getelementptr inbounds %struct.invariant, %struct.invariant* %14, i32 0, i32 5, !dbg !4923
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn3, align 8, !dbg !4923
  %16 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry2, align 8, !dbg !4924
  %expr4 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %16, i32 0, i32 1, !dbg !4925
  %17 = load %struct.rtx_def*, %struct.rtx_def** %expr4, align 8, !dbg !4925
  %call = call zeroext i8 @invariant_expr_equal_p(%struct.rtx_def* %10, %struct.rtx_def* %12, %struct.rtx_def* %15, %struct.rtx_def* %17), !dbg !4926
  %conv = zext i8 %call to i32, !dbg !4926
  store i32 %conv, i32* %retval, align 4, !dbg !4927
  br label %return, !dbg !4927

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !4928
  ret i32 %18, !dbg !4928
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %vec_, i32 %ix_, %struct.invariant** %ptr) #0 !dbg !4929 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_invariant_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.invariant**, align 8
  store %struct.VEC_invariant_p_base* %vec_, %struct.VEC_invariant_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_base** %vec_.addr, metadata !4932, metadata !DIExpression()), !dbg !4933
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4934, metadata !DIExpression()), !dbg !4933
  store %struct.invariant** %ptr, %struct.invariant*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant*** %ptr.addr, metadata !4935, metadata !DIExpression()), !dbg !4933
  %0 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4936
  %tobool = icmp ne %struct.VEC_invariant_p_base* %0, null, !dbg !4936
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4936

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4936
  %2 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4936
  %num = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %2, i32 0, i32 0, !dbg !4936
  %3 = load i32, i32* %num, align 8, !dbg !4936
  %cmp = icmp ult i32 %1, %3, !dbg !4936
  br i1 %cmp, label %if.then, label %if.else, !dbg !4933

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !4938
  %vec = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %4, i32 0, i32 2, !dbg !4938
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4938
  %idxprom = zext i32 %5 to i64, !dbg !4938
  %arrayidx = getelementptr inbounds [1 x %struct.invariant*], [1 x %struct.invariant*]* %vec, i64 0, i64 %idxprom, !dbg !4938
  %6 = load %struct.invariant*, %struct.invariant** %arrayidx, align 8, !dbg !4938
  %7 = load %struct.invariant**, %struct.invariant*** %ptr.addr, align 8, !dbg !4938
  store %struct.invariant* %6, %struct.invariant** %7, align 8, !dbg !4938
  store i32 1, i32* %retval, align 4, !dbg !4938
  br label %return, !dbg !4938

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.invariant**, %struct.invariant*** %ptr.addr, align 8, !dbg !4940
  store %struct.invariant* null, %struct.invariant** %8, align 8, !dbg !4940
  store i32 0, i32* %retval, align 4, !dbg !4940
  br label %return, !dbg !4940

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4933
  ret i32 %9, !dbg !4933
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_identical_invariants(%struct.htab* %eq, %struct.invariant* %inv) #0 !dbg !4942 {
entry:
  %eq.addr = alloca %struct.htab*, align 8
  %inv.addr = alloca %struct.invariant*, align 8
  %depno = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %dep = alloca %struct.invariant*, align 8
  %expr = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  store %struct.htab* %eq, %struct.htab** %eq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %eq.addr, metadata !4945, metadata !DIExpression()), !dbg !4946
  store %struct.invariant* %inv, %struct.invariant** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv.addr, metadata !4947, metadata !DIExpression()), !dbg !4948
  call void @llvm.dbg.declare(metadata i32* %depno, metadata !4949, metadata !DIExpression()), !dbg !4950
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4951, metadata !DIExpression()), !dbg !4952
  call void @llvm.dbg.declare(metadata %struct.invariant** %dep, metadata !4953, metadata !DIExpression()), !dbg !4954
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr, metadata !4955, metadata !DIExpression()), !dbg !4956
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !4957, metadata !DIExpression()), !dbg !4958
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4959, metadata !DIExpression()), !dbg !4960
  %0 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4961
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %0, i32 0, i32 1, !dbg !4963
  %1 = load i32, i32* %eqto, align 4, !dbg !4963
  %cmp = icmp ne i32 %1, -1, !dbg !4964
  br i1 %cmp, label %if.then, label %if.end, !dbg !4965

if.then:                                          ; preds = %entry
  br label %if.end68, !dbg !4966

if.end:                                           ; preds = %entry
  %2 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4967
  %depends_on = getelementptr inbounds %struct.invariant, %struct.invariant* %2, i32 0, i32 10, !dbg !4967
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !4967
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %depno), !dbg !4967
  br label %for.cond, !dbg !4967

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %depno), !dbg !4969
  %tobool = icmp ne i8 %call, 0, !dbg !4967
  br i1 %tobool, label %for.body, label %for.end, !dbg !4967

for.body:                                         ; preds = %for.cond
  %4 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4971
  %tobool1 = icmp ne %struct.VEC_invariant_p_heap* %4, null, !dbg !4971
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4971

cond.true:                                        ; preds = %for.body
  %5 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !4971
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %5, i32 0, i32 0, !dbg !4971
  br label %cond.end, !dbg !4971

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4971

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4971
  %6 = load i32, i32* %depno, align 4, !dbg !4971
  %call2 = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond, i32 %6), !dbg !4971
  store %struct.invariant* %call2, %struct.invariant** %dep, align 8, !dbg !4973
  %7 = load %struct.htab*, %struct.htab** %eq.addr, align 8, !dbg !4974
  %8 = load %struct.invariant*, %struct.invariant** %dep, align 8, !dbg !4975
  call void @find_identical_invariants(%struct.htab* %7, %struct.invariant* %8), !dbg !4976
  br label %for.inc, !dbg !4977

for.inc:                                          ; preds = %cond.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %depno), !dbg !4969
  br label %for.cond, !dbg !4969, !llvm.loop !4978

for.end:                                          ; preds = %for.cond
  %9 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn = getelementptr inbounds %struct.invariant, %struct.invariant* %9, i32 0, i32 5, !dbg !4980
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4980
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4980
  %bf.load = load i32, i32* %11, align 8, !dbg !4980
  %bf.clear = and i32 %bf.load, 65535, !dbg !4980
  %cmp3 = icmp eq i32 %bf.clear, 8, !dbg !4980
  br i1 %cmp3, label %cond.true18, label %lor.lhs.false, !dbg !4980

lor.lhs.false:                                    ; preds = %for.end
  %12 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn4 = getelementptr inbounds %struct.invariant, %struct.invariant* %12, i32 0, i32 5, !dbg !4980
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn4, align 8, !dbg !4980
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !4980
  %bf.load5 = load i32, i32* %14, align 8, !dbg !4980
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4980
  %cmp7 = icmp eq i32 %bf.clear6, 7, !dbg !4980
  br i1 %cmp7, label %cond.true18, label %lor.lhs.false8, !dbg !4980

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %15 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn9 = getelementptr inbounds %struct.invariant, %struct.invariant* %15, i32 0, i32 5, !dbg !4980
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn9, align 8, !dbg !4980
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4980
  %bf.load10 = load i32, i32* %17, align 8, !dbg !4980
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !4980
  %cmp12 = icmp eq i32 %bf.clear11, 9, !dbg !4980
  br i1 %cmp12, label %cond.true18, label %lor.lhs.false13, !dbg !4980

lor.lhs.false13:                                  ; preds = %lor.lhs.false8
  %18 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn14 = getelementptr inbounds %struct.invariant, %struct.invariant* %18, i32 0, i32 5, !dbg !4980
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn14, align 8, !dbg !4980
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4980
  %bf.load15 = load i32, i32* %20, align 8, !dbg !4980
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !4980
  %cmp17 = icmp eq i32 %bf.clear16, 10, !dbg !4980
  br i1 %cmp17, label %cond.true18, label %cond.false39, !dbg !4980

cond.true18:                                      ; preds = %lor.lhs.false13, %lor.lhs.false8, %lor.lhs.false, %for.end
  %21 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn19 = getelementptr inbounds %struct.invariant, %struct.invariant* %21, i32 0, i32 5, !dbg !4980
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn19, align 8, !dbg !4980
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4980
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4980
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4980
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4980
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4980
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4980
  %bf.load20 = load i32, i32* %24, align 8, !dbg !4980
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !4980
  %cmp22 = icmp eq i32 %bf.clear21, 23, !dbg !4980
  br i1 %cmp22, label %cond.true23, label %cond.false29, !dbg !4980

cond.true23:                                      ; preds = %cond.true18
  %25 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn24 = getelementptr inbounds %struct.invariant, %struct.invariant* %25, i32 0, i32 5, !dbg !4980
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn24, align 8, !dbg !4980
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !4980
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !4980
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 5, !dbg !4980
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4980
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !4980
  br label %cond.end37, !dbg !4980

cond.false29:                                     ; preds = %cond.true18
  %28 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn30 = getelementptr inbounds %struct.invariant, %struct.invariant* %28, i32 0, i32 5, !dbg !4980
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn30, align 8, !dbg !4980
  %30 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4980
  %insn31 = getelementptr inbounds %struct.invariant, %struct.invariant* %30, i32 0, i32 5, !dbg !4980
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn31, align 8, !dbg !4980
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !4980
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4980
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 5, !dbg !4980
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !4980
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !4980
  %call36 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %29, %struct.rtx_def* %32), !dbg !4980
  br label %cond.end37, !dbg !4980

cond.end37:                                       ; preds = %cond.false29, %cond.true23
  %cond38 = phi %struct.rtx_def* [ %27, %cond.true23 ], [ %call36, %cond.false29 ], !dbg !4980
  br label %cond.end40, !dbg !4980

cond.false39:                                     ; preds = %lor.lhs.false13
  br label %cond.end40, !dbg !4980

cond.end40:                                       ; preds = %cond.false39, %cond.end37
  %cond41 = phi %struct.rtx_def* [ %cond38, %cond.end37 ], [ null, %cond.false39 ], !dbg !4980
  store %struct.rtx_def* %cond41, %struct.rtx_def** %set, align 8, !dbg !4981
  %33 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4982
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4982
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !4982
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !4982
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !4982
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !4982
  store %struct.rtx_def* %34, %struct.rtx_def** %expr, align 8, !dbg !4983
  %35 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4984
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !4984
  %bf.load46 = load i32, i32* %36, align 8, !dbg !4984
  %bf.lshr = lshr i32 %bf.load46, 16, !dbg !4984
  %bf.clear47 = and i32 %bf.lshr, 255, !dbg !4984
  store i32 %bf.clear47, i32* %mode, align 4, !dbg !4985
  %37 = load i32, i32* %mode, align 4, !dbg !4986
  %cmp48 = icmp eq i32 %37, 0, !dbg !4988
  br i1 %cmp48, label %if.then49, label %if.end57, !dbg !4989

if.then49:                                        ; preds = %cond.end40
  %38 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !4990
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4990
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !4990
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !4990
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !4990
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !4990
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !4990
  %bf.load54 = load i32, i32* %40, align 8, !dbg !4990
  %bf.lshr55 = lshr i32 %bf.load54, 16, !dbg !4990
  %bf.clear56 = and i32 %bf.lshr55, 255, !dbg !4990
  store i32 %bf.clear56, i32* %mode, align 4, !dbg !4991
  br label %if.end57, !dbg !4992

if.end57:                                         ; preds = %if.then49, %cond.end40
  %41 = load %struct.htab*, %struct.htab** %eq.addr, align 8, !dbg !4993
  %42 = load %struct.rtx_def*, %struct.rtx_def** %expr, align 8, !dbg !4994
  %43 = load i32, i32* %mode, align 4, !dbg !4995
  %44 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4996
  %call58 = call %struct.invariant* @find_or_insert_inv(%struct.htab* %41, %struct.rtx_def* %42, i32 %43, %struct.invariant* %44), !dbg !4997
  %invno = getelementptr inbounds %struct.invariant, %struct.invariant* %call58, i32 0, i32 0, !dbg !4998
  %45 = load i32, i32* %invno, align 8, !dbg !4998
  %46 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !4999
  %eqto59 = getelementptr inbounds %struct.invariant, %struct.invariant* %46, i32 0, i32 1, !dbg !5000
  store i32 %45, i32* %eqto59, align 4, !dbg !5001
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5002
  %tobool60 = icmp ne %struct._IO_FILE* %47, null, !dbg !5002
  br i1 %tobool60, label %land.lhs.true, label %if.end68, !dbg !5004

land.lhs.true:                                    ; preds = %if.end57
  %48 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5005
  %eqto61 = getelementptr inbounds %struct.invariant, %struct.invariant* %48, i32 0, i32 1, !dbg !5006
  %49 = load i32, i32* %eqto61, align 4, !dbg !5006
  %50 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5007
  %invno62 = getelementptr inbounds %struct.invariant, %struct.invariant* %50, i32 0, i32 0, !dbg !5008
  %51 = load i32, i32* %invno62, align 8, !dbg !5008
  %cmp63 = icmp ne i32 %49, %51, !dbg !5009
  br i1 %cmp63, label %if.then64, label %if.end68, !dbg !5010

if.then64:                                        ; preds = %land.lhs.true
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5011
  %53 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5012
  %invno65 = getelementptr inbounds %struct.invariant, %struct.invariant* %53, i32 0, i32 0, !dbg !5013
  %54 = load i32, i32* %invno65, align 8, !dbg !5013
  %55 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5014
  %eqto66 = getelementptr inbounds %struct.invariant, %struct.invariant* %55, i32 0, i32 1, !dbg !5015
  %56 = load i32, i32* %eqto66, align 4, !dbg !5015
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.14, i64 0, i64 0), i32 %54, i32 %56), !dbg !5016
  br label %if.end68, !dbg !5016

if.end68:                                         ; preds = %if.then, %if.then64, %land.lhs.true, %if.end57
  ret void, !dbg !5017
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @invariant_expr_equal_p(%struct.rtx_def* %insn1, %struct.rtx_def* %e1, %struct.rtx_def* %insn2, %struct.rtx_def* %e2) #0 !dbg !5018 {
entry:
  %retval = alloca i8, align 1
  %insn1.addr = alloca %struct.rtx_def*, align 8
  %e1.addr = alloca %struct.rtx_def*, align 8
  %insn2.addr = alloca %struct.rtx_def*, align 8
  %e2.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %use1 = alloca %union.df_ref_d*, align 8
  %use2 = alloca %union.df_ref_d*, align 8
  %inv1 = alloca %struct.invariant*, align 8
  %inv2 = alloca %struct.invariant*, align 8
  %sub1 = alloca %struct.rtx_def*, align 8
  %sub2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn1, %struct.rtx_def** %insn1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn1.addr, metadata !5021, metadata !DIExpression()), !dbg !5022
  store %struct.rtx_def* %e1, %struct.rtx_def** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %e1.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  store %struct.rtx_def* %insn2, %struct.rtx_def** %insn2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2.addr, metadata !5025, metadata !DIExpression()), !dbg !5026
  store %struct.rtx_def* %e2, %struct.rtx_def** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %e2.addr, metadata !5027, metadata !DIExpression()), !dbg !5028
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5029, metadata !DIExpression()), !dbg !5030
  %0 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5031
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5031
  %bf.load = load i32, i32* %1, align 8, !dbg !5031
  %bf.clear = and i32 %bf.load, 65535, !dbg !5031
  store i32 %bf.clear, i32* %code, align 4, !dbg !5030
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5032, metadata !DIExpression()), !dbg !5033
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5034, metadata !DIExpression()), !dbg !5035
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !5036, metadata !DIExpression()), !dbg !5037
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use1, metadata !5038, metadata !DIExpression()), !dbg !5039
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use2, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv1, metadata !5042, metadata !DIExpression()), !dbg !5043
  store %struct.invariant* null, %struct.invariant** %inv1, align 8, !dbg !5043
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv2, metadata !5044, metadata !DIExpression()), !dbg !5045
  store %struct.invariant* null, %struct.invariant** %inv2, align 8, !dbg !5045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sub1, metadata !5046, metadata !DIExpression()), !dbg !5047
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sub2, metadata !5048, metadata !DIExpression()), !dbg !5049
  %2 = load i32, i32* %code, align 4, !dbg !5050
  %3 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5052
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5052
  %bf.load1 = load i32, i32* %4, align 8, !dbg !5052
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5052
  %cmp = icmp ne i32 %2, %bf.clear2, !dbg !5053
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5054

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5055
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5055
  %bf.load3 = load i32, i32* %6, align 8, !dbg !5055
  %bf.lshr = lshr i32 %bf.load3, 16, !dbg !5055
  %bf.clear4 = and i32 %bf.lshr, 255, !dbg !5055
  %7 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5056
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5056
  %bf.load5 = load i32, i32* %8, align 8, !dbg !5056
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !5056
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !5056
  %cmp8 = icmp ne i32 %bf.clear4, %bf.clear7, !dbg !5057
  br i1 %cmp8, label %if.then, label %if.end, !dbg !5058

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !5059
  br label %return, !dbg !5059

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i32, i32* %code, align 4, !dbg !5060
  switch i32 %9, label %sw.default [
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 45, label %sw.bb
    i32 35, label %sw.bb
    i32 44, label %sw.bb
    i32 37, label %sw.bb9
  ], !dbg !5061

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5062
  %11 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5064
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !5065
  %conv = trunc i32 %call to i8, !dbg !5065
  store i8 %conv, i8* %retval, align 1, !dbg !5066
  br label %return, !dbg !5066

sw.bb9:                                           ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !5067
  %13 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5068
  %call10 = call %union.df_ref_d* @df_find_use(%struct.rtx_def* %12, %struct.rtx_def* %13), !dbg !5069
  store %union.df_ref_d* %call10, %union.df_ref_d** %use1, align 8, !dbg !5070
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !5071
  %15 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5072
  %call11 = call %union.df_ref_d* @df_find_use(%struct.rtx_def* %14, %struct.rtx_def* %15), !dbg !5073
  store %union.df_ref_d* %call11, %union.df_ref_d** %use2, align 8, !dbg !5074
  %16 = load %union.df_ref_d*, %union.df_ref_d** %use1, align 8, !dbg !5075
  %tobool = icmp ne %union.df_ref_d* %16, null, !dbg !5075
  br i1 %tobool, label %if.then12, label %if.end14, !dbg !5077

if.then12:                                        ; preds = %sw.bb9
  %17 = load %union.df_ref_d*, %union.df_ref_d** %use1, align 8, !dbg !5078
  %call13 = call %struct.invariant* @invariant_for_use(%union.df_ref_d* %17), !dbg !5079
  store %struct.invariant* %call13, %struct.invariant** %inv1, align 8, !dbg !5080
  br label %if.end14, !dbg !5081

if.end14:                                         ; preds = %if.then12, %sw.bb9
  %18 = load %union.df_ref_d*, %union.df_ref_d** %use2, align 8, !dbg !5082
  %tobool15 = icmp ne %union.df_ref_d* %18, null, !dbg !5082
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !5084

if.then16:                                        ; preds = %if.end14
  %19 = load %union.df_ref_d*, %union.df_ref_d** %use2, align 8, !dbg !5085
  %call17 = call %struct.invariant* @invariant_for_use(%union.df_ref_d* %19), !dbg !5086
  store %struct.invariant* %call17, %struct.invariant** %inv2, align 8, !dbg !5087
  br label %if.end18, !dbg !5088

if.end18:                                         ; preds = %if.then16, %if.end14
  %20 = load %struct.invariant*, %struct.invariant** %inv1, align 8, !dbg !5089
  %tobool19 = icmp ne %struct.invariant* %20, null, !dbg !5089
  br i1 %tobool19, label %if.end24, label %land.lhs.true, !dbg !5091

land.lhs.true:                                    ; preds = %if.end18
  %21 = load %struct.invariant*, %struct.invariant** %inv2, align 8, !dbg !5092
  %tobool20 = icmp ne %struct.invariant* %21, null, !dbg !5092
  br i1 %tobool20, label %if.end24, label %if.then21, !dbg !5093

if.then21:                                        ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5094
  %23 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5095
  %call22 = call i32 @rtx_equal_p(%struct.rtx_def* %22, %struct.rtx_def* %23), !dbg !5096
  %conv23 = trunc i32 %call22 to i8, !dbg !5096
  store i8 %conv23, i8* %retval, align 1, !dbg !5097
  br label %return, !dbg !5097

if.end24:                                         ; preds = %land.lhs.true, %if.end18
  %24 = load %struct.invariant*, %struct.invariant** %inv1, align 8, !dbg !5098
  %tobool25 = icmp ne %struct.invariant* %24, null, !dbg !5098
  br i1 %tobool25, label %lor.lhs.false26, label %if.then28, !dbg !5100

lor.lhs.false26:                                  ; preds = %if.end24
  %25 = load %struct.invariant*, %struct.invariant** %inv2, align 8, !dbg !5101
  %tobool27 = icmp ne %struct.invariant* %25, null, !dbg !5101
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !5102

if.then28:                                        ; preds = %lor.lhs.false26, %if.end24
  store i8 0, i8* %retval, align 1, !dbg !5103
  br label %return, !dbg !5103

if.end29:                                         ; preds = %lor.lhs.false26
  %26 = load %struct.invariant*, %struct.invariant** %inv1, align 8, !dbg !5104
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %26, i32 0, i32 1, !dbg !5104
  %27 = load i32, i32* %eqto, align 4, !dbg !5104
  %cmp30 = icmp ne i32 %27, -1, !dbg !5104
  br i1 %cmp30, label %cond.false, label %cond.true, !dbg !5104

cond.true:                                        ; preds = %if.end29
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 388, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !5104
  br label %cond.end, !dbg !5104

cond.false:                                       ; preds = %if.end29
  br label %cond.end, !dbg !5104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5104
  %28 = load %struct.invariant*, %struct.invariant** %inv2, align 8, !dbg !5105
  %eqto32 = getelementptr inbounds %struct.invariant, %struct.invariant* %28, i32 0, i32 1, !dbg !5105
  %29 = load i32, i32* %eqto32, align 4, !dbg !5105
  %cmp33 = icmp ne i32 %29, -1, !dbg !5105
  br i1 %cmp33, label %cond.false36, label %cond.true35, !dbg !5105

cond.true35:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 389, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !5105
  br label %cond.end37, !dbg !5105

cond.false36:                                     ; preds = %cond.end
  br label %cond.end37, !dbg !5105

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ], !dbg !5105
  %30 = load %struct.invariant*, %struct.invariant** %inv1, align 8, !dbg !5106
  %eqto39 = getelementptr inbounds %struct.invariant, %struct.invariant* %30, i32 0, i32 1, !dbg !5107
  %31 = load i32, i32* %eqto39, align 4, !dbg !5107
  %32 = load %struct.invariant*, %struct.invariant** %inv2, align 8, !dbg !5108
  %eqto40 = getelementptr inbounds %struct.invariant, %struct.invariant* %32, i32 0, i32 1, !dbg !5109
  %33 = load i32, i32* %eqto40, align 4, !dbg !5109
  %cmp41 = icmp eq i32 %31, %33, !dbg !5110
  %conv42 = zext i1 %cmp41 to i32, !dbg !5110
  %conv43 = trunc i32 %conv42 to i8, !dbg !5106
  store i8 %conv43, i8* %retval, align 1, !dbg !5111
  br label %return, !dbg !5111

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !5112

sw.epilog:                                        ; preds = %sw.default
  %34 = load i32, i32* %code, align 4, !dbg !5113
  %idxprom = sext i32 %34 to i64, !dbg !5113
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !5113
  %35 = load i8*, i8** %arrayidx, align 8, !dbg !5113
  store i8* %35, i8** %fmt, align 8, !dbg !5114
  %36 = load i32, i32* %code, align 4, !dbg !5115
  %idxprom44 = sext i32 %36 to i64, !dbg !5115
  %arrayidx45 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom44, !dbg !5115
  %37 = load i8, i8* %arrayidx45, align 1, !dbg !5115
  %conv46 = zext i8 %37 to i32, !dbg !5115
  %sub = sub nsw i32 %conv46, 1, !dbg !5117
  store i32 %sub, i32* %i, align 4, !dbg !5118
  br label %for.cond, !dbg !5119

for.cond:                                         ; preds = %for.inc145, %sw.epilog
  %38 = load i32, i32* %i, align 4, !dbg !5120
  %cmp47 = icmp sge i32 %38, 0, !dbg !5122
  br i1 %cmp47, label %for.body, label %for.end146, !dbg !5123

for.body:                                         ; preds = %for.cond
  %39 = load i8*, i8** %fmt, align 8, !dbg !5124
  %40 = load i32, i32* %i, align 4, !dbg !5127
  %idxprom49 = sext i32 %40 to i64, !dbg !5124
  %arrayidx50 = getelementptr inbounds i8, i8* %39, i64 %idxprom49, !dbg !5124
  %41 = load i8, i8* %arrayidx50, align 1, !dbg !5124
  %conv51 = sext i8 %41 to i32, !dbg !5124
  %cmp52 = icmp eq i32 %conv51, 101, !dbg !5128
  br i1 %cmp52, label %if.then54, label %if.else, !dbg !5129

if.then54:                                        ; preds = %for.body
  %42 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5130
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5130
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5130
  %43 = load i32, i32* %i, align 4, !dbg !5130
  %idxprom55 = sext i32 %43 to i64, !dbg !5130
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom55, !dbg !5130
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !5130
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5130
  store %struct.rtx_def* %44, %struct.rtx_def** %sub1, align 8, !dbg !5132
  %45 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5133
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !5133
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !5133
  %46 = load i32, i32* %i, align 4, !dbg !5133
  %idxprom59 = sext i32 %46 to i64, !dbg !5133
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 %idxprom59, !dbg !5133
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !5133
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !5133
  store %struct.rtx_def* %47, %struct.rtx_def** %sub2, align 8, !dbg !5134
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !5135
  %49 = load %struct.rtx_def*, %struct.rtx_def** %sub1, align 8, !dbg !5137
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !5138
  %51 = load %struct.rtx_def*, %struct.rtx_def** %sub2, align 8, !dbg !5139
  %call62 = call zeroext i8 @invariant_expr_equal_p(%struct.rtx_def* %48, %struct.rtx_def* %49, %struct.rtx_def* %50, %struct.rtx_def* %51), !dbg !5140
  %tobool63 = icmp ne i8 %call62, 0, !dbg !5140
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !5141

if.then64:                                        ; preds = %if.then54
  store i8 0, i8* %retval, align 1, !dbg !5142
  br label %return, !dbg !5142

if.end65:                                         ; preds = %if.then54
  br label %if.end144, !dbg !5143

if.else:                                          ; preds = %for.body
  %52 = load i8*, i8** %fmt, align 8, !dbg !5144
  %53 = load i32, i32* %i, align 4, !dbg !5146
  %idxprom66 = sext i32 %53 to i64, !dbg !5144
  %arrayidx67 = getelementptr inbounds i8, i8* %52, i64 %idxprom66, !dbg !5144
  %54 = load i8, i8* %arrayidx67, align 1, !dbg !5144
  %conv68 = sext i8 %54 to i32, !dbg !5144
  %cmp69 = icmp eq i32 %conv68, 69, !dbg !5147
  br i1 %cmp69, label %if.then71, label %if.else115, !dbg !5148

if.then71:                                        ; preds = %if.else
  %55 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5149
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !5149
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !5149
  %56 = load i32, i32* %i, align 4, !dbg !5149
  %idxprom74 = sext i32 %56 to i64, !dbg !5149
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 %idxprom74, !dbg !5149
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtvec_def**, !dbg !5149
  %57 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5149
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %57, i32 0, i32 0, !dbg !5149
  %58 = load i32, i32* %num_elem, align 8, !dbg !5149
  %59 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5152
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !5152
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !5152
  %60 = load i32, i32* %i, align 4, !dbg !5152
  %idxprom78 = sext i32 %60 to i64, !dbg !5152
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 %idxprom78, !dbg !5152
  %rt_rtvec80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtvec_def**, !dbg !5152
  %61 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec80, align 8, !dbg !5152
  %num_elem81 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %61, i32 0, i32 0, !dbg !5152
  %62 = load i32, i32* %num_elem81, align 8, !dbg !5152
  %cmp82 = icmp ne i32 %58, %62, !dbg !5153
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !5154

if.then84:                                        ; preds = %if.then71
  store i8 0, i8* %retval, align 1, !dbg !5155
  br label %return, !dbg !5155

if.end85:                                         ; preds = %if.then71
  store i32 0, i32* %j, align 4, !dbg !5156
  br label %for.cond86, !dbg !5158

for.cond86:                                       ; preds = %for.inc, %if.end85
  %63 = load i32, i32* %j, align 4, !dbg !5159
  %64 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5161
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !5161
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !5161
  %65 = load i32, i32* %i, align 4, !dbg !5161
  %idxprom89 = sext i32 %65 to i64, !dbg !5161
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 %idxprom89, !dbg !5161
  %rt_rtvec91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtvec_def**, !dbg !5161
  %66 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec91, align 8, !dbg !5161
  %num_elem92 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %66, i32 0, i32 0, !dbg !5161
  %67 = load i32, i32* %num_elem92, align 8, !dbg !5161
  %cmp93 = icmp slt i32 %63, %67, !dbg !5162
  br i1 %cmp93, label %for.body95, label %for.end, !dbg !5163

for.body95:                                       ; preds = %for.cond86
  %68 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5164
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5164
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !5164
  %69 = load i32, i32* %i, align 4, !dbg !5164
  %idxprom98 = sext i32 %69 to i64, !dbg !5164
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 %idxprom98, !dbg !5164
  %rt_rtvec100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtvec_def**, !dbg !5164
  %70 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec100, align 8, !dbg !5164
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %70, i32 0, i32 1, !dbg !5164
  %71 = load i32, i32* %j, align 4, !dbg !5164
  %idxprom101 = sext i32 %71 to i64, !dbg !5164
  %arrayidx102 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom101, !dbg !5164
  %72 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx102, align 8, !dbg !5164
  store %struct.rtx_def* %72, %struct.rtx_def** %sub1, align 8, !dbg !5166
  %73 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5167
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !5167
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !5167
  %74 = load i32, i32* %i, align 4, !dbg !5167
  %idxprom105 = sext i32 %74 to i64, !dbg !5167
  %arrayidx106 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 %idxprom105, !dbg !5167
  %rt_rtvec107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtvec_def**, !dbg !5167
  %75 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec107, align 8, !dbg !5167
  %elem108 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %75, i32 0, i32 1, !dbg !5167
  %76 = load i32, i32* %j, align 4, !dbg !5167
  %idxprom109 = sext i32 %76 to i64, !dbg !5167
  %arrayidx110 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem108, i64 0, i64 %idxprom109, !dbg !5167
  %77 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx110, align 8, !dbg !5167
  store %struct.rtx_def* %77, %struct.rtx_def** %sub2, align 8, !dbg !5168
  %78 = load %struct.rtx_def*, %struct.rtx_def** %insn1.addr, align 8, !dbg !5169
  %79 = load %struct.rtx_def*, %struct.rtx_def** %sub1, align 8, !dbg !5171
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn2.addr, align 8, !dbg !5172
  %81 = load %struct.rtx_def*, %struct.rtx_def** %sub2, align 8, !dbg !5173
  %call111 = call zeroext i8 @invariant_expr_equal_p(%struct.rtx_def* %78, %struct.rtx_def* %79, %struct.rtx_def* %80, %struct.rtx_def* %81), !dbg !5174
  %tobool112 = icmp ne i8 %call111, 0, !dbg !5174
  br i1 %tobool112, label %if.end114, label %if.then113, !dbg !5175

if.then113:                                       ; preds = %for.body95
  store i8 0, i8* %retval, align 1, !dbg !5176
  br label %return, !dbg !5176

if.end114:                                        ; preds = %for.body95
  br label %for.inc, !dbg !5177

for.inc:                                          ; preds = %if.end114
  %82 = load i32, i32* %j, align 4, !dbg !5178
  %inc = add nsw i32 %82, 1, !dbg !5178
  store i32 %inc, i32* %j, align 4, !dbg !5178
  br label %for.cond86, !dbg !5179, !llvm.loop !5180

for.end:                                          ; preds = %for.cond86
  br label %if.end143, !dbg !5182

if.else115:                                       ; preds = %if.else
  %83 = load i8*, i8** %fmt, align 8, !dbg !5183
  %84 = load i32, i32* %i, align 4, !dbg !5185
  %idxprom116 = sext i32 %84 to i64, !dbg !5183
  %arrayidx117 = getelementptr inbounds i8, i8* %83, i64 %idxprom116, !dbg !5183
  %85 = load i8, i8* %arrayidx117, align 1, !dbg !5183
  %conv118 = sext i8 %85 to i32, !dbg !5183
  %cmp119 = icmp eq i32 %conv118, 105, !dbg !5186
  br i1 %cmp119, label %if.then127, label %lor.lhs.false121, !dbg !5187

lor.lhs.false121:                                 ; preds = %if.else115
  %86 = load i8*, i8** %fmt, align 8, !dbg !5188
  %87 = load i32, i32* %i, align 4, !dbg !5189
  %idxprom122 = sext i32 %87 to i64, !dbg !5188
  %arrayidx123 = getelementptr inbounds i8, i8* %86, i64 %idxprom122, !dbg !5188
  %88 = load i8, i8* %arrayidx123, align 1, !dbg !5188
  %conv124 = sext i8 %88 to i32, !dbg !5188
  %cmp125 = icmp eq i32 %conv124, 110, !dbg !5190
  br i1 %cmp125, label %if.then127, label %if.else141, !dbg !5191

if.then127:                                       ; preds = %lor.lhs.false121, %if.else115
  %89 = load %struct.rtx_def*, %struct.rtx_def** %e1.addr, align 8, !dbg !5192
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !5192
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !5192
  %90 = load i32, i32* %i, align 4, !dbg !5192
  %idxprom130 = sext i32 %90 to i64, !dbg !5192
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 %idxprom130, !dbg !5192
  %rt_int = bitcast %union.rtunion_def* %arrayidx131 to i32*, !dbg !5192
  %91 = load i32, i32* %rt_int, align 8, !dbg !5192
  %92 = load %struct.rtx_def*, %struct.rtx_def** %e2.addr, align 8, !dbg !5195
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !5195
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !5195
  %93 = load i32, i32* %i, align 4, !dbg !5195
  %idxprom134 = sext i32 %93 to i64, !dbg !5195
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 %idxprom134, !dbg !5195
  %rt_int136 = bitcast %union.rtunion_def* %arrayidx135 to i32*, !dbg !5195
  %94 = load i32, i32* %rt_int136, align 8, !dbg !5195
  %cmp137 = icmp ne i32 %91, %94, !dbg !5196
  br i1 %cmp137, label %if.then139, label %if.end140, !dbg !5197

if.then139:                                       ; preds = %if.then127
  store i8 0, i8* %retval, align 1, !dbg !5198
  br label %return, !dbg !5198

if.end140:                                        ; preds = %if.then127
  br label %if.end142, !dbg !5199

if.else141:                                       ; preds = %lor.lhs.false121
  store i8 0, i8* %retval, align 1, !dbg !5200
  br label %return, !dbg !5200

if.end142:                                        ; preds = %if.end140
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %for.end
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.end65
  br label %for.inc145, !dbg !5201

for.inc145:                                       ; preds = %if.end144
  %95 = load i32, i32* %i, align 4, !dbg !5202
  %dec = add nsw i32 %95, -1, !dbg !5202
  store i32 %dec, i32* %i, align 4, !dbg !5202
  br label %for.cond, !dbg !5203, !llvm.loop !5204

for.end146:                                       ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !5206
  br label %return, !dbg !5206

return:                                           ; preds = %for.end146, %if.else141, %if.then139, %if.then113, %if.then84, %if.then64, %cond.end37, %if.then28, %if.then21, %sw.bb, %if.then
  %96 = load i8, i8* %retval, align 1, !dbg !5207
  ret i8 %96, !dbg !5207
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %union.df_ref_d* @df_find_use(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %vec_, i32 %ix_) #0 !dbg !5208 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_invariant_p_base* %vec_, %struct.VEC_invariant_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_base** %vec_.addr, metadata !5211, metadata !DIExpression()), !dbg !5212
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5213, metadata !DIExpression()), !dbg !5212
  %0 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !5212
  %tobool = icmp ne %struct.VEC_invariant_p_base* %0, null, !dbg !5212
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5212

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5212
  %2 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !5212
  %num = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %2, i32 0, i32 0, !dbg !5212
  %3 = load i32, i32* %num, align 8, !dbg !5212
  %cmp = icmp ult i32 %1, %3, !dbg !5212
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5214
  %land.ext = zext i1 %4 to i32, !dbg !5212
  %5 = load %struct.VEC_invariant_p_base*, %struct.VEC_invariant_p_base** %vec_.addr, align 8, !dbg !5212
  %vec = getelementptr inbounds %struct.VEC_invariant_p_base, %struct.VEC_invariant_p_base* %5, i32 0, i32 2, !dbg !5212
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5212
  %idxprom = zext i32 %6 to i64, !dbg !5212
  %arrayidx = getelementptr inbounds [1 x %struct.invariant*], [1 x %struct.invariant*]* %vec, i64 0, i64 %idxprom, !dbg !5212
  %7 = load %struct.invariant*, %struct.invariant** %arrayidx, align 8, !dbg !5212
  ret %struct.invariant* %7, !dbg !5212
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.invariant* @find_or_insert_inv(%struct.htab* %eq, %struct.rtx_def* %expr, i32 %mode, %struct.invariant* %inv) #0 !dbg !5215 {
entry:
  %retval = alloca %struct.invariant*, align 8
  %eq.addr = alloca %struct.htab*, align 8
  %expr.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %inv.addr = alloca %struct.invariant*, align 8
  %hash = alloca i32, align 4
  %entry1 = alloca %struct.invariant_expr_entry*, align 8
  %pentry = alloca %struct.invariant_expr_entry, align 8
  %slot = alloca i8**, align 8
  store %struct.htab* %eq, %struct.htab** %eq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %eq.addr, metadata !5218, metadata !DIExpression()), !dbg !5219
  store %struct.rtx_def* %expr, %struct.rtx_def** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %expr.addr, metadata !5220, metadata !DIExpression()), !dbg !5221
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5222, metadata !DIExpression()), !dbg !5223
  store %struct.invariant* %inv, %struct.invariant** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv.addr, metadata !5224, metadata !DIExpression()), !dbg !5225
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !5226, metadata !DIExpression()), !dbg !5227
  %0 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5228
  %insn = getelementptr inbounds %struct.invariant, %struct.invariant* %0, i32 0, i32 5, !dbg !5229
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5229
  %2 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8, !dbg !5230
  %call = call i32 @hash_invariant_expr_1(%struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !5231
  store i32 %call, i32* %hash, align 4, !dbg !5227
  call void @llvm.dbg.declare(metadata %struct.invariant_expr_entry** %entry1, metadata !5232, metadata !DIExpression()), !dbg !5233
  call void @llvm.dbg.declare(metadata %struct.invariant_expr_entry* %pentry, metadata !5234, metadata !DIExpression()), !dbg !5235
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5236, metadata !DIExpression()), !dbg !5237
  %3 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8, !dbg !5238
  %expr2 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %pentry, i32 0, i32 1, !dbg !5239
  store %struct.rtx_def* %3, %struct.rtx_def** %expr2, align 8, !dbg !5240
  %4 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5241
  %inv3 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %pentry, i32 0, i32 0, !dbg !5242
  store %struct.invariant* %4, %struct.invariant** %inv3, align 8, !dbg !5243
  %5 = load i32, i32* %mode.addr, align 4, !dbg !5244
  %mode4 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %pentry, i32 0, i32 2, !dbg !5245
  store i32 %5, i32* %mode4, align 8, !dbg !5246
  %6 = load %struct.htab*, %struct.htab** %eq.addr, align 8, !dbg !5247
  %7 = bitcast %struct.invariant_expr_entry* %pentry to i8*, !dbg !5248
  %8 = load i32, i32* %hash, align 4, !dbg !5249
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %6, i8* %7, i32 %8, i32 1), !dbg !5250
  store i8** %call5, i8*** %slot, align 8, !dbg !5251
  %9 = load i8**, i8*** %slot, align 8, !dbg !5252
  %10 = load i8*, i8** %9, align 8, !dbg !5253
  %11 = bitcast i8* %10 to %struct.invariant_expr_entry*, !dbg !5254
  store %struct.invariant_expr_entry* %11, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5255
  %12 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5256
  %tobool = icmp ne %struct.invariant_expr_entry* %12, null, !dbg !5256
  br i1 %tobool, label %if.then, label %if.end, !dbg !5258

if.then:                                          ; preds = %entry
  %13 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5259
  %inv6 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %13, i32 0, i32 0, !dbg !5260
  %14 = load %struct.invariant*, %struct.invariant** %inv6, align 8, !dbg !5260
  store %struct.invariant* %14, %struct.invariant** %retval, align 8, !dbg !5261
  br label %return, !dbg !5261

if.end:                                           ; preds = %entry
  %call7 = call i8* @xmalloc(i64 24), !dbg !5262
  %15 = bitcast i8* %call7 to %struct.invariant_expr_entry*, !dbg !5262
  store %struct.invariant_expr_entry* %15, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5263
  %16 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5264
  %17 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5265
  %inv8 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %17, i32 0, i32 0, !dbg !5266
  store %struct.invariant* %16, %struct.invariant** %inv8, align 8, !dbg !5267
  %18 = load %struct.rtx_def*, %struct.rtx_def** %expr.addr, align 8, !dbg !5268
  %19 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5269
  %expr9 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %19, i32 0, i32 1, !dbg !5270
  store %struct.rtx_def* %18, %struct.rtx_def** %expr9, align 8, !dbg !5271
  %20 = load i32, i32* %mode.addr, align 4, !dbg !5272
  %21 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5273
  %mode10 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %21, i32 0, i32 2, !dbg !5274
  store i32 %20, i32* %mode10, align 8, !dbg !5275
  %22 = load i32, i32* %hash, align 4, !dbg !5276
  %23 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5277
  %hash11 = getelementptr inbounds %struct.invariant_expr_entry, %struct.invariant_expr_entry* %23, i32 0, i32 3, !dbg !5278
  store i32 %22, i32* %hash11, align 4, !dbg !5279
  %24 = load %struct.invariant_expr_entry*, %struct.invariant_expr_entry** %entry1, align 8, !dbg !5280
  %25 = bitcast %struct.invariant_expr_entry* %24 to i8*, !dbg !5280
  %26 = load i8**, i8*** %slot, align 8, !dbg !5281
  store i8* %25, i8** %26, align 8, !dbg !5282
  %27 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5283
  store %struct.invariant* %27, %struct.invariant** %retval, align 8, !dbg !5284
  br label %return, !dbg !5284

return:                                           ; preds = %if.end, %if.then
  %28 = load %struct.invariant*, %struct.invariant** %retval, align 8, !dbg !5285
  ret %struct.invariant* %28, !dbg !5285
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_invariant_expr_1(%struct.rtx_def* %insn, %struct.rtx_def* %x) #0 !dbg !5286 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %val = alloca i32, align 4
  %do_not_record_p = alloca i32, align 4
  %use = alloca %union.df_ref_d*, align 8
  %inv = alloca %struct.invariant*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5289, metadata !DIExpression()), !dbg !5290
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5291, metadata !DIExpression()), !dbg !5292
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5293, metadata !DIExpression()), !dbg !5294
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5295
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5295
  %bf.load = load i32, i32* %1, align 8, !dbg !5295
  %bf.clear = and i32 %bf.load, 65535, !dbg !5295
  store i32 %bf.clear, i32* %code, align 4, !dbg !5294
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5296, metadata !DIExpression()), !dbg !5297
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5298, metadata !DIExpression()), !dbg !5299
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !5300, metadata !DIExpression()), !dbg !5301
  call void @llvm.dbg.declare(metadata i32* %val, metadata !5302, metadata !DIExpression()), !dbg !5303
  %2 = load i32, i32* %code, align 4, !dbg !5304
  store i32 %2, i32* %val, align 4, !dbg !5303
  call void @llvm.dbg.declare(metadata i32* %do_not_record_p, metadata !5305, metadata !DIExpression()), !dbg !5306
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use, metadata !5307, metadata !DIExpression()), !dbg !5308
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !5309, metadata !DIExpression()), !dbg !5310
  %3 = load i32, i32* %code, align 4, !dbg !5311
  switch i32 %3, label %sw.default [
    i32 30, label %sw.bb
    i32 32, label %sw.bb
    i32 31, label %sw.bb
    i32 45, label %sw.bb
    i32 35, label %sw.bb
    i32 44, label %sw.bb
    i32 37, label %sw.bb3
  ], !dbg !5312

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5313
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5315
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5315
  %bf.load1 = load i32, i32* %6, align 8, !dbg !5315
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !5315
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !5315
  %call = call i32 @hash_rtx(%struct.rtx_def* %4, i32 %bf.clear2, i32* %do_not_record_p, i32* null, i8 zeroext 0), !dbg !5316
  store i32 %call, i32* %retval, align 4, !dbg !5317
  br label %return, !dbg !5317

sw.bb3:                                           ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5318
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5319
  %call4 = call %union.df_ref_d* @df_find_use(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !5320
  store %union.df_ref_d* %call4, %union.df_ref_d** %use, align 8, !dbg !5321
  %9 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !5322
  %tobool = icmp ne %union.df_ref_d* %9, null, !dbg !5322
  br i1 %tobool, label %if.end, label %if.then, !dbg !5324

if.then:                                          ; preds = %sw.bb3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5325
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5326
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !5326
  %bf.load5 = load i32, i32* %12, align 8, !dbg !5326
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !5326
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !5326
  %call8 = call i32 @hash_rtx(%struct.rtx_def* %10, i32 %bf.clear7, i32* %do_not_record_p, i32* null, i8 zeroext 0), !dbg !5327
  store i32 %call8, i32* %retval, align 4, !dbg !5328
  br label %return, !dbg !5328

if.end:                                           ; preds = %sw.bb3
  %13 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !5329
  %call9 = call %struct.invariant* @invariant_for_use(%union.df_ref_d* %13), !dbg !5330
  store %struct.invariant* %call9, %struct.invariant** %inv, align 8, !dbg !5331
  %14 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5332
  %tobool10 = icmp ne %struct.invariant* %14, null, !dbg !5332
  br i1 %tobool10, label %if.end16, label %if.then11, !dbg !5334

if.then11:                                        ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5335
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5336
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5336
  %bf.load12 = load i32, i32* %17, align 8, !dbg !5336
  %bf.lshr13 = lshr i32 %bf.load12, 16, !dbg !5336
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !5336
  %call15 = call i32 @hash_rtx(%struct.rtx_def* %15, i32 %bf.clear14, i32* %do_not_record_p, i32* null, i8 zeroext 0), !dbg !5337
  store i32 %call15, i32* %retval, align 4, !dbg !5338
  br label %return, !dbg !5338

if.end16:                                         ; preds = %if.end
  %18 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5339
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %18, i32 0, i32 1, !dbg !5339
  %19 = load i32, i32* %eqto, align 4, !dbg !5339
  %cmp = icmp ne i32 %19, -1, !dbg !5339
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5339

cond.true:                                        ; preds = %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 321, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !5339
  br label %cond.end, !dbg !5339

cond.false:                                       ; preds = %if.end16
  br label %cond.end, !dbg !5339

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5339
  %20 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5340
  %eqto17 = getelementptr inbounds %struct.invariant, %struct.invariant* %20, i32 0, i32 1, !dbg !5341
  %21 = load i32, i32* %eqto17, align 4, !dbg !5341
  store i32 %21, i32* %retval, align 4, !dbg !5342
  br label %return, !dbg !5342

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !5343

sw.epilog:                                        ; preds = %sw.default
  %22 = load i32, i32* %code, align 4, !dbg !5344
  %idxprom = sext i32 %22 to i64, !dbg !5344
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !5344
  %23 = load i8*, i8** %arrayidx, align 8, !dbg !5344
  store i8* %23, i8** %fmt, align 8, !dbg !5345
  %24 = load i32, i32* %code, align 4, !dbg !5346
  %idxprom18 = sext i32 %24 to i64, !dbg !5346
  %arrayidx19 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom18, !dbg !5346
  %25 = load i8, i8* %arrayidx19, align 1, !dbg !5346
  %conv = zext i8 %25 to i32, !dbg !5346
  %sub = sub nsw i32 %conv, 1, !dbg !5348
  store i32 %sub, i32* %i, align 4, !dbg !5349
  br label %for.cond, !dbg !5350

for.cond:                                         ; preds = %for.inc74, %sw.epilog
  %26 = load i32, i32* %i, align 4, !dbg !5351
  %cmp20 = icmp sge i32 %26, 0, !dbg !5353
  br i1 %cmp20, label %for.body, label %for.end75, !dbg !5354

for.body:                                         ; preds = %for.cond
  %27 = load i8*, i8** %fmt, align 8, !dbg !5355
  %28 = load i32, i32* %i, align 4, !dbg !5358
  %idxprom22 = sext i32 %28 to i64, !dbg !5355
  %arrayidx23 = getelementptr inbounds i8, i8* %27, i64 %idxprom22, !dbg !5355
  %29 = load i8, i8* %arrayidx23, align 1, !dbg !5355
  %conv24 = sext i8 %29 to i32, !dbg !5355
  %cmp25 = icmp eq i32 %conv24, 101, !dbg !5359
  br i1 %cmp25, label %if.then27, label %if.else, !dbg !5360

if.then27:                                        ; preds = %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5361
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5362
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !5362
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5362
  %32 = load i32, i32* %i, align 4, !dbg !5362
  %idxprom28 = sext i32 %32 to i64, !dbg !5362
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom28, !dbg !5362
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5362
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5362
  %call30 = call i32 @hash_invariant_expr_1(%struct.rtx_def* %30, %struct.rtx_def* %33), !dbg !5363
  %34 = load i32, i32* %val, align 4, !dbg !5364
  %xor = xor i32 %34, %call30, !dbg !5364
  store i32 %xor, i32* %val, align 4, !dbg !5364
  br label %if.end73, !dbg !5365

if.else:                                          ; preds = %for.body
  %35 = load i8*, i8** %fmt, align 8, !dbg !5366
  %36 = load i32, i32* %i, align 4, !dbg !5368
  %idxprom31 = sext i32 %36 to i64, !dbg !5366
  %arrayidx32 = getelementptr inbounds i8, i8* %35, i64 %idxprom31, !dbg !5366
  %37 = load i8, i8* %arrayidx32, align 1, !dbg !5366
  %conv33 = sext i8 %37 to i32, !dbg !5366
  %cmp34 = icmp eq i32 %conv33, 69, !dbg !5369
  br i1 %cmp34, label %if.then36, label %if.else54, !dbg !5370

if.then36:                                        ; preds = %if.else
  store i32 0, i32* %j, align 4, !dbg !5371
  br label %for.cond37, !dbg !5374

for.cond37:                                       ; preds = %for.inc, %if.then36
  %38 = load i32, i32* %j, align 4, !dbg !5375
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5377
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5377
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !5377
  %40 = load i32, i32* %i, align 4, !dbg !5377
  %idxprom40 = sext i32 %40 to i64, !dbg !5377
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 %idxprom40, !dbg !5377
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**, !dbg !5377
  %41 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5377
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %41, i32 0, i32 0, !dbg !5377
  %42 = load i32, i32* %num_elem, align 8, !dbg !5377
  %cmp42 = icmp slt i32 %38, %42, !dbg !5378
  br i1 %cmp42, label %for.body44, label %for.end, !dbg !5379

for.body44:                                       ; preds = %for.cond37
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5380
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5381
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !5381
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !5381
  %45 = load i32, i32* %i, align 4, !dbg !5381
  %idxprom47 = sext i32 %45 to i64, !dbg !5381
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 %idxprom47, !dbg !5381
  %rt_rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**, !dbg !5381
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec49, align 8, !dbg !5381
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1, !dbg !5381
  %47 = load i32, i32* %j, align 4, !dbg !5381
  %idxprom50 = sext i32 %47 to i64, !dbg !5381
  %arrayidx51 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom50, !dbg !5381
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !5381
  %call52 = call i32 @hash_invariant_expr_1(%struct.rtx_def* %43, %struct.rtx_def* %48), !dbg !5382
  %49 = load i32, i32* %val, align 4, !dbg !5383
  %xor53 = xor i32 %49, %call52, !dbg !5383
  store i32 %xor53, i32* %val, align 4, !dbg !5383
  br label %for.inc, !dbg !5384

for.inc:                                          ; preds = %for.body44
  %50 = load i32, i32* %j, align 4, !dbg !5385
  %inc = add nsw i32 %50, 1, !dbg !5385
  store i32 %inc, i32* %j, align 4, !dbg !5385
  br label %for.cond37, !dbg !5386, !llvm.loop !5387

for.end:                                          ; preds = %for.cond37
  br label %if.end72, !dbg !5389

if.else54:                                        ; preds = %if.else
  %51 = load i8*, i8** %fmt, align 8, !dbg !5390
  %52 = load i32, i32* %i, align 4, !dbg !5392
  %idxprom55 = sext i32 %52 to i64, !dbg !5390
  %arrayidx56 = getelementptr inbounds i8, i8* %51, i64 %idxprom55, !dbg !5390
  %53 = load i8, i8* %arrayidx56, align 1, !dbg !5390
  %conv57 = sext i8 %53 to i32, !dbg !5390
  %cmp58 = icmp eq i32 %conv57, 105, !dbg !5393
  br i1 %cmp58, label %if.then65, label %lor.lhs.false, !dbg !5394

lor.lhs.false:                                    ; preds = %if.else54
  %54 = load i8*, i8** %fmt, align 8, !dbg !5395
  %55 = load i32, i32* %i, align 4, !dbg !5396
  %idxprom60 = sext i32 %55 to i64, !dbg !5395
  %arrayidx61 = getelementptr inbounds i8, i8* %54, i64 %idxprom60, !dbg !5395
  %56 = load i8, i8* %arrayidx61, align 1, !dbg !5395
  %conv62 = sext i8 %56 to i32, !dbg !5395
  %cmp63 = icmp eq i32 %conv62, 110, !dbg !5397
  br i1 %cmp63, label %if.then65, label %if.end71, !dbg !5398

if.then65:                                        ; preds = %lor.lhs.false, %if.else54
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5399
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !5399
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !5399
  %58 = load i32, i32* %i, align 4, !dbg !5399
  %idxprom68 = sext i32 %58 to i64, !dbg !5399
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 %idxprom68, !dbg !5399
  %rt_int = bitcast %union.rtunion_def* %arrayidx69 to i32*, !dbg !5399
  %59 = load i32, i32* %rt_int, align 8, !dbg !5399
  %60 = load i32, i32* %val, align 4, !dbg !5400
  %xor70 = xor i32 %60, %59, !dbg !5400
  store i32 %xor70, i32* %val, align 4, !dbg !5400
  br label %if.end71, !dbg !5401

if.end71:                                         ; preds = %if.then65, %lor.lhs.false
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %for.end
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then27
  br label %for.inc74, !dbg !5402

for.inc74:                                        ; preds = %if.end73
  %61 = load i32, i32* %i, align 4, !dbg !5403
  %dec = add nsw i32 %61, -1, !dbg !5403
  store i32 %dec, i32* %i, align 4, !dbg !5403
  br label %for.cond, !dbg !5404, !llvm.loop !5405

for.end75:                                        ; preds = %for.cond
  %62 = load i32, i32* %val, align 4, !dbg !5407
  store i32 %62, i32* %retval, align 4, !dbg !5408
  br label %return, !dbg !5408

return:                                           ; preds = %for.end75, %cond.end, %if.then11, %if.then, %sw.bb
  %63 = load i32, i32* %retval, align 4, !dbg !5409
  ret i32 %63, !dbg !5409
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local i32 @hash_rtx(%struct.rtx_def*, i32, i32*, i32*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @best_gain_for_invariant(%struct.invariant** %best, i32* %regs_needed, i32* %new_regs, i32 %regs_used, i8 zeroext %speed) #0 !dbg !5410 {
entry:
  %best.addr = alloca %struct.invariant**, align 8
  %regs_needed.addr = alloca i32*, align 8
  %new_regs.addr = alloca i32*, align 8
  %regs_used.addr = alloca i32, align 4
  %speed.addr = alloca i8, align 1
  %inv = alloca %struct.invariant*, align 8
  %i = alloca i32, align 4
  %gain = alloca i32, align 4
  %again = alloca i32, align 4
  %aregs_needed = alloca [27 x i32], align 16
  %invno = alloca i32, align 4
  store %struct.invariant** %best, %struct.invariant*** %best.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant*** %best.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  store i32* %regs_needed, i32** %regs_needed.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regs_needed.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  store i32* %new_regs, i32** %new_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %new_regs.addr, metadata !5417, metadata !DIExpression()), !dbg !5418
  store i32 %regs_used, i32* %regs_used.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regs_used.addr, metadata !5419, metadata !DIExpression()), !dbg !5420
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !5421, metadata !DIExpression()), !dbg !5422
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !5423, metadata !DIExpression()), !dbg !5424
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5425, metadata !DIExpression()), !dbg !5426
  call void @llvm.dbg.declare(metadata i32* %gain, metadata !5427, metadata !DIExpression()), !dbg !5428
  store i32 0, i32* %gain, align 4, !dbg !5428
  call void @llvm.dbg.declare(metadata i32* %again, metadata !5429, metadata !DIExpression()), !dbg !5430
  call void @llvm.dbg.declare(metadata [27 x i32]* %aregs_needed, metadata !5431, metadata !DIExpression()), !dbg !5432
  call void @llvm.dbg.declare(metadata i32* %invno, metadata !5433, metadata !DIExpression()), !dbg !5434
  store i32 0, i32* %invno, align 4, !dbg !5435
  br label %for.cond, !dbg !5437

for.cond:                                         ; preds = %for.inc24, %entry
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5438
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !5438
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5438

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5438
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !5438
  br label %cond.end, !dbg !5438

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5438

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5438
  %2 = load i32, i32* %invno, align 4, !dbg !5438
  %call = call i32 @VEC_invariant_p_base_iterate(%struct.VEC_invariant_p_base* %cond, i32 %2, %struct.invariant** %inv), !dbg !5438
  %tobool1 = icmp ne i32 %call, 0, !dbg !5440
  br i1 %tobool1, label %for.body, label %for.end26, !dbg !5440

for.body:                                         ; preds = %cond.end
  %3 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5441
  %move = getelementptr inbounds %struct.invariant, %struct.invariant* %3, i32 0, i32 7, !dbg !5444
  %4 = load i8, i8* %move, align 1, !dbg !5444
  %tobool2 = icmp ne i8 %4, 0, !dbg !5441
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5445

if.then:                                          ; preds = %for.body
  br label %for.inc24, !dbg !5446

if.end:                                           ; preds = %for.body
  %5 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5447
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %5, i32 0, i32 1, !dbg !5449
  %6 = load i32, i32* %eqto, align 4, !dbg !5449
  %7 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5450
  %invno3 = getelementptr inbounds %struct.invariant, %struct.invariant* %7, i32 0, i32 0, !dbg !5451
  %8 = load i32, i32* %invno3, align 8, !dbg !5451
  %cmp = icmp ne i32 %6, %8, !dbg !5452
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5453

if.then4:                                         ; preds = %if.end
  br label %for.inc24, !dbg !5454

if.end5:                                          ; preds = %if.end
  %9 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5455
  %arraydecay = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5456
  %10 = load i32*, i32** %new_regs.addr, align 8, !dbg !5457
  %11 = load i32, i32* %regs_used.addr, align 4, !dbg !5458
  %12 = load i8, i8* %speed.addr, align 1, !dbg !5459
  %call6 = call i32 @gain_for_invariant(%struct.invariant* %9, i32* %arraydecay, i32* %10, i32 %11, i8 zeroext %12), !dbg !5460
  store i32 %call6, i32* %again, align 4, !dbg !5461
  %13 = load i32, i32* %again, align 4, !dbg !5462
  %14 = load i32, i32* %gain, align 4, !dbg !5464
  %cmp7 = icmp sgt i32 %13, %14, !dbg !5465
  br i1 %cmp7, label %if.then8, label %if.end23, !dbg !5466

if.then8:                                         ; preds = %if.end5
  %15 = load i32, i32* %again, align 4, !dbg !5467
  store i32 %15, i32* %gain, align 4, !dbg !5469
  %16 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5470
  %17 = load %struct.invariant**, %struct.invariant*** %best.addr, align 8, !dbg !5471
  store %struct.invariant* %16, %struct.invariant** %17, align 8, !dbg !5472
  %18 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5473
  %tobool9 = icmp ne i32 %18, 0, !dbg !5473
  br i1 %tobool9, label %if.else, label %if.then10, !dbg !5475

if.then10:                                        ; preds = %if.then8
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5476
  %19 = load i32, i32* %arrayidx, align 16, !dbg !5476
  %20 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5477
  %arrayidx11 = getelementptr inbounds i32, i32* %20, i64 0, !dbg !5477
  store i32 %19, i32* %arrayidx11, align 4, !dbg !5478
  br label %if.end22, !dbg !5477

if.else:                                          ; preds = %if.then8
  store i32 0, i32* %i, align 4, !dbg !5479
  br label %for.cond12, !dbg !5482

for.cond12:                                       ; preds = %for.inc, %if.else
  %21 = load i32, i32* %i, align 4, !dbg !5483
  %22 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5485
  %cmp13 = icmp slt i32 %21, %22, !dbg !5486
  br i1 %cmp13, label %for.body14, label %for.end, !dbg !5487

for.body14:                                       ; preds = %for.cond12
  %23 = load i32, i32* %i, align 4, !dbg !5488
  %idxprom = sext i32 %23 to i64, !dbg !5489
  %arrayidx15 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5489
  %24 = load i32, i32* %arrayidx15, align 4, !dbg !5489
  %idxprom16 = zext i32 %24 to i64, !dbg !5490
  %arrayidx17 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 %idxprom16, !dbg !5490
  %25 = load i32, i32* %arrayidx17, align 4, !dbg !5490
  %26 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5491
  %27 = load i32, i32* %i, align 4, !dbg !5492
  %idxprom18 = sext i32 %27 to i64, !dbg !5493
  %arrayidx19 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom18, !dbg !5493
  %28 = load i32, i32* %arrayidx19, align 4, !dbg !5493
  %idxprom20 = zext i32 %28 to i64, !dbg !5491
  %arrayidx21 = getelementptr inbounds i32, i32* %26, i64 %idxprom20, !dbg !5491
  store i32 %25, i32* %arrayidx21, align 4, !dbg !5494
  br label %for.inc, !dbg !5491

for.inc:                                          ; preds = %for.body14
  %29 = load i32, i32* %i, align 4, !dbg !5495
  %inc = add nsw i32 %29, 1, !dbg !5495
  store i32 %inc, i32* %i, align 4, !dbg !5495
  br label %for.cond12, !dbg !5496, !llvm.loop !5497

for.end:                                          ; preds = %for.cond12
  br label %if.end22

if.end22:                                         ; preds = %for.end, %if.then10
  br label %if.end23, !dbg !5499

if.end23:                                         ; preds = %if.end22, %if.end5
  br label %for.inc24, !dbg !5500

for.inc24:                                        ; preds = %if.end23, %if.then4, %if.then
  %30 = load i32, i32* %invno, align 4, !dbg !5501
  %inc25 = add i32 %30, 1, !dbg !5501
  store i32 %inc25, i32* %invno, align 4, !dbg !5501
  br label %for.cond, !dbg !5502, !llvm.loop !5503

for.end26:                                        ; preds = %cond.end
  %31 = load i32, i32* %gain, align 4, !dbg !5505
  ret i32 %31, !dbg !5506
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_move_mark(i32 %invno, i32 %gain) #0 !dbg !5507 {
entry:
  %invno.addr = alloca i32, align 4
  %gain.addr = alloca i32, align 4
  %inv = alloca %struct.invariant*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  store i32 %invno, i32* %invno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invno.addr, metadata !5510, metadata !DIExpression()), !dbg !5511
  store i32 %gain, i32* %gain.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gain.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !5514, metadata !DIExpression()), !dbg !5515
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5516
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !5516
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5516

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5516
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !5516
  br label %cond.end, !dbg !5516

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5516

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5516
  %2 = load i32, i32* %invno.addr, align 4, !dbg !5516
  %call = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond, i32 %2), !dbg !5516
  store %struct.invariant* %call, %struct.invariant** %inv, align 8, !dbg !5515
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5517, metadata !DIExpression()), !dbg !5518
  %3 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5519
  %tobool1 = icmp ne %struct.VEC_invariant_p_heap* %3, null, !dbg !5519
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5519

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5519
  %base3 = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %4, i32 0, i32 0, !dbg !5519
  br label %cond.end5, !dbg !5519

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5519

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_invariant_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5519
  %5 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5519
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %5, i32 0, i32 1, !dbg !5519
  %6 = load i32, i32* %eqto, align 4, !dbg !5519
  %call7 = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond6, i32 %6), !dbg !5519
  store %struct.invariant* %call7, %struct.invariant** %inv, align 8, !dbg !5520
  %7 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5521
  %move = getelementptr inbounds %struct.invariant, %struct.invariant* %7, i32 0, i32 7, !dbg !5523
  %8 = load i8, i8* %move, align 1, !dbg !5523
  %tobool8 = icmp ne i8 %8, 0, !dbg !5521
  br i1 %tobool8, label %if.then, label %if.end, !dbg !5524

if.then:                                          ; preds = %cond.end5
  br label %for.end, !dbg !5525

if.end:                                           ; preds = %cond.end5
  %9 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5526
  %move9 = getelementptr inbounds %struct.invariant, %struct.invariant* %9, i32 0, i32 7, !dbg !5527
  store i8 1, i8* %move9, align 1, !dbg !5528
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5529
  %tobool10 = icmp ne %struct._IO_FILE* %10, null, !dbg !5529
  br i1 %tobool10, label %if.then11, label %if.end16, !dbg !5531

if.then11:                                        ; preds = %if.end
  %11 = load i32, i32* %gain.addr, align 4, !dbg !5532
  %cmp = icmp sge i32 %11, 0, !dbg !5535
  br i1 %cmp, label %if.then12, label %if.else, !dbg !5536

if.then12:                                        ; preds = %if.then11
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5537
  %13 = load i32, i32* %invno.addr, align 4, !dbg !5538
  %14 = load i32, i32* %gain.addr, align 4, !dbg !5539
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.15, i64 0, i64 0), i32 %13, i32 %14), !dbg !5540
  br label %if.end15, !dbg !5540

if.else:                                          ; preds = %if.then11
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5541
  %16 = load i32, i32* %invno.addr, align 4, !dbg !5542
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.16, i64 0, i64 0), i32 %16), !dbg !5543
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then12
  br label %if.end16, !dbg !5544

if.end16:                                         ; preds = %if.end15, %if.end
  %17 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5545
  %depends_on = getelementptr inbounds %struct.invariant, %struct.invariant* %17, i32 0, i32 10, !dbg !5545
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !5545
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %18, i32 0, i32* %invno.addr), !dbg !5545
  br label %for.cond, !dbg !5545

for.cond:                                         ; preds = %for.inc, %if.end16
  %call17 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %invno.addr), !dbg !5547
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5545
  br i1 %tobool18, label %for.body, label %for.end, !dbg !5545

for.body:                                         ; preds = %for.cond
  %19 = load i32, i32* %invno.addr, align 4, !dbg !5549
  call void @set_move_mark(i32 %19, i32 -1), !dbg !5551
  br label %for.inc, !dbg !5552

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %invno.addr), !dbg !5547
  br label %for.cond, !dbg !5547, !llvm.loop !5553

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5555
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gain_for_invariant(%struct.invariant* %inv, i32* %regs_needed, i32* %new_regs, i32 %regs_used, i8 zeroext %speed) #0 !dbg !5556 {
entry:
  %retval = alloca i32, align 4
  %inv.addr = alloca %struct.invariant*, align 8
  %regs_needed.addr = alloca i32*, align 8
  %new_regs.addr = alloca i32*, align 8
  %regs_used.addr = alloca i32, align 4
  %speed.addr = alloca i8, align 1
  %comp_cost = alloca i32, align 4
  %size_cost = alloca i32, align 4
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  store %struct.invariant* %inv, %struct.invariant** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv.addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  store i32* %regs_needed, i32** %regs_needed.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regs_needed.addr, metadata !5561, metadata !DIExpression()), !dbg !5562
  store i32* %new_regs, i32** %new_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %new_regs.addr, metadata !5563, metadata !DIExpression()), !dbg !5564
  store i32 %regs_used, i32* %regs_used.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regs_used.addr, metadata !5565, metadata !DIExpression()), !dbg !5566
  store i8 %speed, i8* %speed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %speed.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  call void @llvm.dbg.declare(metadata i32* %comp_cost, metadata !5569, metadata !DIExpression()), !dbg !5570
  call void @llvm.dbg.declare(metadata i32* %size_cost, metadata !5571, metadata !DIExpression()), !dbg !5572
  %0 = load i32, i32* @actual_stamp, align 4, !dbg !5573
  %inc = add i32 %0, 1, !dbg !5573
  store i32 %inc, i32* @actual_stamp, align 4, !dbg !5573
  %1 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5574
  %2 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5575
  call void @get_inv_cost(%struct.invariant* %1, i32* %comp_cost, i32* %2), !dbg !5576
  %3 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5577
  %tobool = icmp ne i32 %3, 0, !dbg !5577
  br i1 %tobool, label %if.else, label %if.then, !dbg !5579

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %new_regs.addr, align 8, !dbg !5580
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 0, !dbg !5580
  %5 = load i32, i32* %arrayidx, align 4, !dbg !5580
  %6 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5582
  %arrayidx1 = getelementptr inbounds i32, i32* %6, i64 0, !dbg !5582
  %7 = load i32, i32* %arrayidx1, align 4, !dbg !5582
  %add = add i32 %5, %7, !dbg !5583
  %8 = load i32, i32* %regs_used.addr, align 4, !dbg !5584
  %9 = load i8, i8* %speed.addr, align 1, !dbg !5585
  %call = call i32 @estimate_reg_pressure_cost(i32 %add, i32 %8, i8 zeroext %9), !dbg !5586
  %10 = load i32*, i32** %new_regs.addr, align 8, !dbg !5587
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i64 0, !dbg !5587
  %11 = load i32, i32* %arrayidx2, align 4, !dbg !5587
  %12 = load i32, i32* %regs_used.addr, align 4, !dbg !5588
  %13 = load i8, i8* %speed.addr, align 1, !dbg !5589
  %call3 = call i32 @estimate_reg_pressure_cost(i32 %11, i32 %12, i8 zeroext %13), !dbg !5590
  %sub = sub i32 %call, %call3, !dbg !5591
  store i32 %sub, i32* %size_cost, align 4, !dbg !5592
  br label %if.end24, !dbg !5593

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5594, metadata !DIExpression()), !dbg !5596
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5597, metadata !DIExpression()), !dbg !5598
  store i32 0, i32* %i, align 4, !dbg !5599
  br label %for.cond, !dbg !5601

for.cond:                                         ; preds = %for.inc, %if.else
  %14 = load i32, i32* %i, align 4, !dbg !5602
  %15 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5604
  %cmp = icmp slt i32 %14, %15, !dbg !5605
  br i1 %cmp, label %for.body, label %for.end, !dbg !5606

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4, !dbg !5607
  %idxprom = sext i32 %16 to i64, !dbg !5609
  %arrayidx4 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5609
  %17 = load i32, i32* %arrayidx4, align 4, !dbg !5609
  store i32 %17, i32* %cover_class, align 4, !dbg !5610
  %18 = load i32*, i32** %new_regs.addr, align 8, !dbg !5611
  %19 = load i32, i32* %cover_class, align 4, !dbg !5613
  %idxprom5 = zext i32 %19 to i64, !dbg !5611
  %arrayidx6 = getelementptr inbounds i32, i32* %18, i64 %idxprom5, !dbg !5611
  %20 = load i32, i32* %arrayidx6, align 4, !dbg !5611
  %21 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5614
  %22 = load i32, i32* %cover_class, align 4, !dbg !5615
  %idxprom7 = zext i32 %22 to i64, !dbg !5614
  %arrayidx8 = getelementptr inbounds i32, i32* %21, i64 %idxprom7, !dbg !5614
  %23 = load i32, i32* %arrayidx8, align 4, !dbg !5614
  %add9 = add nsw i32 %20, %23, !dbg !5616
  %24 = load %struct.loop*, %struct.loop** @curr_loop, align 8, !dbg !5617
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 10, !dbg !5617
  %25 = load i8*, i8** %aux, align 8, !dbg !5617
  %26 = bitcast i8* %25 to %struct.loop_data*, !dbg !5617
  %max_reg_pressure = getelementptr inbounds %struct.loop_data, %struct.loop_data* %26, i32 0, i32 2, !dbg !5618
  %27 = load i32, i32* %cover_class, align 4, !dbg !5619
  %idxprom10 = zext i32 %27 to i64, !dbg !5617
  %arrayidx11 = getelementptr inbounds [27 x i32], [27 x i32]* %max_reg_pressure, i64 0, i64 %idxprom10, !dbg !5617
  %28 = load i32, i32* %arrayidx11, align 4, !dbg !5617
  %add12 = add nsw i32 %add9, %28, !dbg !5620
  %29 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5621
  %arrayidx13 = getelementptr inbounds %struct.param_info, %struct.param_info* %29, i64 107, !dbg !5621
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx13, i32 0, i32 1, !dbg !5621
  %30 = load i32, i32* %value, align 8, !dbg !5621
  %add14 = add nsw i32 %add12, %30, !dbg !5622
  %31 = load i32, i32* %cover_class, align 4, !dbg !5623
  %idxprom15 = zext i32 %31 to i64, !dbg !5624
  %arrayidx16 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom15, !dbg !5624
  %32 = load i32, i32* %arrayidx16, align 4, !dbg !5624
  %cmp17 = icmp sgt i32 %add14, %32, !dbg !5625
  br i1 %cmp17, label %if.then18, label %if.end, !dbg !5626

if.then18:                                        ; preds = %for.body
  br label %for.end, !dbg !5627

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5628

for.inc:                                          ; preds = %if.end
  %33 = load i32, i32* %i, align 4, !dbg !5629
  %inc19 = add nsw i32 %33, 1, !dbg !5629
  store i32 %inc19, i32* %i, align 4, !dbg !5629
  br label %for.cond, !dbg !5630, !llvm.loop !5631

for.end:                                          ; preds = %if.then18, %for.cond
  %34 = load i32, i32* %i, align 4, !dbg !5633
  %35 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5635
  %cmp20 = icmp slt i32 %34, %35, !dbg !5636
  br i1 %cmp20, label %if.then21, label %if.else22, !dbg !5637

if.then21:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !5638
  br label %return, !dbg !5638

if.else22:                                        ; preds = %for.end
  store i32 0, i32* %size_cost, align 4, !dbg !5639
  br label %if.end23

if.end23:                                         ; preds = %if.else22
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then
  %36 = load i32, i32* %comp_cost, align 4, !dbg !5640
  %37 = load i32, i32* %size_cost, align 4, !dbg !5641
  %sub25 = sub nsw i32 %36, %37, !dbg !5642
  store i32 %sub25, i32* %retval, align 4, !dbg !5643
  br label %return, !dbg !5643

return:                                           ; preds = %if.end24, %if.then21
  %38 = load i32, i32* %retval, align 4, !dbg !5644
  ret i32 %38, !dbg !5644
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_inv_cost(%struct.invariant* %inv, i32* %comp_cost, i32* %regs_needed) #0 !dbg !5645 {
entry:
  %inv.addr = alloca %struct.invariant*, align 8
  %comp_cost.addr = alloca i32*, align 8
  %regs_needed.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %acomp_cost = alloca i32, align 4
  %aregs_needed = alloca [27 x i32], align 16
  %depno = alloca i32, align 4
  %dep = alloca %struct.invariant*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %nregs = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %check_p = alloca i8, align 1
  %nregs187 = alloca i32, align 4
  %cover_class188 = alloca i32, align 4
  store %struct.invariant* %inv, %struct.invariant** %inv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv.addr, metadata !5648, metadata !DIExpression()), !dbg !5649
  store i32* %comp_cost, i32** %comp_cost.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %comp_cost.addr, metadata !5650, metadata !DIExpression()), !dbg !5651
  store i32* %regs_needed, i32** %regs_needed.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regs_needed.addr, metadata !5652, metadata !DIExpression()), !dbg !5653
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5654, metadata !DIExpression()), !dbg !5655
  call void @llvm.dbg.declare(metadata i32* %acomp_cost, metadata !5656, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.declare(metadata [27 x i32]* %aregs_needed, metadata !5658, metadata !DIExpression()), !dbg !5659
  call void @llvm.dbg.declare(metadata i32* %depno, metadata !5660, metadata !DIExpression()), !dbg !5661
  call void @llvm.dbg.declare(metadata %struct.invariant** %dep, metadata !5662, metadata !DIExpression()), !dbg !5663
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5664, metadata !DIExpression()), !dbg !5665
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5666
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !5666
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5666

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5666
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !5666
  br label %cond.end, !dbg !5666

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5666

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5666
  %2 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5666
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %2, i32 0, i32 1, !dbg !5666
  %3 = load i32, i32* %eqto, align 4, !dbg !5666
  %call = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond, i32 %3), !dbg !5666
  store %struct.invariant* %call, %struct.invariant** %inv.addr, align 8, !dbg !5667
  %4 = load i32*, i32** %comp_cost.addr, align 8, !dbg !5668
  store i32 0, i32* %4, align 4, !dbg !5669
  %5 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5670
  %tobool1 = icmp ne i32 %5, 0, !dbg !5670
  br i1 %tobool1, label %if.else, label %if.then, !dbg !5672

if.then:                                          ; preds = %cond.end
  %6 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5673
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 0, !dbg !5673
  store i32 0, i32* %arrayidx, align 4, !dbg !5674
  br label %if.end, !dbg !5673

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !5675
  br label %for.cond, !dbg !5678

for.cond:                                         ; preds = %for.inc, %if.else
  %7 = load i32, i32* %i, align 4, !dbg !5679
  %8 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5681
  %cmp = icmp slt i32 %7, %8, !dbg !5682
  br i1 %cmp, label %for.body, label %for.end, !dbg !5683

for.body:                                         ; preds = %for.cond
  %9 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5684
  %10 = load i32, i32* %i, align 4, !dbg !5685
  %idxprom = sext i32 %10 to i64, !dbg !5686
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !5686
  %11 = load i32, i32* %arrayidx2, align 4, !dbg !5686
  %idxprom3 = zext i32 %11 to i64, !dbg !5684
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3, !dbg !5684
  store i32 0, i32* %arrayidx4, align 4, !dbg !5687
  br label %for.inc, !dbg !5684

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !5688
  %inc = add nsw i32 %12, 1, !dbg !5688
  store i32 %inc, i32* %i, align 4, !dbg !5688
  br label %for.cond, !dbg !5689, !llvm.loop !5690

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %13 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5692
  %move = getelementptr inbounds %struct.invariant, %struct.invariant* %13, i32 0, i32 7, !dbg !5694
  %14 = load i8, i8* %move, align 1, !dbg !5694
  %conv = zext i8 %14 to i32, !dbg !5692
  %tobool5 = icmp ne i32 %conv, 0, !dbg !5692
  br i1 %tobool5, label %if.then8, label %lor.lhs.false, !dbg !5695

lor.lhs.false:                                    ; preds = %if.end
  %15 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5696
  %stamp = getelementptr inbounds %struct.invariant, %struct.invariant* %15, i32 0, i32 11, !dbg !5697
  %16 = load i32, i32* %stamp, align 8, !dbg !5697
  %17 = load i32, i32* @actual_stamp, align 4, !dbg !5698
  %cmp6 = icmp eq i32 %16, %17, !dbg !5699
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !5700

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  br label %for.end220, !dbg !5701

if.end9:                                          ; preds = %lor.lhs.false
  %18 = load i32, i32* @actual_stamp, align 4, !dbg !5702
  %19 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5703
  %stamp10 = getelementptr inbounds %struct.invariant, %struct.invariant* %19, i32 0, i32 11, !dbg !5704
  store i32 %18, i32* %stamp10, align 8, !dbg !5705
  %20 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5706
  %tobool11 = icmp ne i32 %20, 0, !dbg !5706
  br i1 %tobool11, label %if.else15, label %if.then12, !dbg !5708

if.then12:                                        ; preds = %if.end9
  %21 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5709
  %arrayidx13 = getelementptr inbounds i32, i32* %21, i64 0, !dbg !5709
  %22 = load i32, i32* %arrayidx13, align 4, !dbg !5710
  %inc14 = add i32 %22, 1, !dbg !5710
  store i32 %inc14, i32* %arrayidx13, align 4, !dbg !5710
  br label %if.end19, !dbg !5709

if.else15:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !5711, metadata !DIExpression()), !dbg !5713
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5714, metadata !DIExpression()), !dbg !5715
  %23 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5716
  %insn = getelementptr inbounds %struct.invariant, %struct.invariant* %23, i32 0, i32 5, !dbg !5717
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5717
  %call16 = call i32 @get_cover_class_and_nregs(%struct.rtx_def* %24, i32* %nregs), !dbg !5718
  store i32 %call16, i32* %cover_class, align 4, !dbg !5719
  %25 = load i32, i32* %nregs, align 4, !dbg !5720
  %26 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5721
  %27 = load i32, i32* %cover_class, align 4, !dbg !5722
  %idxprom17 = zext i32 %27 to i64, !dbg !5721
  %arrayidx18 = getelementptr inbounds i32, i32* %26, i64 %idxprom17, !dbg !5721
  %28 = load i32, i32* %arrayidx18, align 4, !dbg !5723
  %add = add i32 %28, %25, !dbg !5723
  store i32 %add, i32* %arrayidx18, align 4, !dbg !5723
  br label %if.end19

if.end19:                                         ; preds = %if.else15, %if.then12
  %29 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5724
  %cheap_address = getelementptr inbounds %struct.invariant, %struct.invariant* %29, i32 0, i32 8, !dbg !5726
  %30 = load i8, i8* %cheap_address, align 2, !dbg !5726
  %tobool20 = icmp ne i8 %30, 0, !dbg !5724
  br i1 %tobool20, label %lor.lhs.false21, label %if.then25, !dbg !5727

lor.lhs.false21:                                  ; preds = %if.end19
  %31 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5728
  %def = getelementptr inbounds %struct.invariant, %struct.invariant* %31, i32 0, i32 4, !dbg !5729
  %32 = load %struct.def*, %struct.def** %def, align 8, !dbg !5729
  %n_addr_uses = getelementptr inbounds %struct.def, %struct.def* %32, i32 0, i32 2, !dbg !5730
  %33 = load i32, i32* %n_addr_uses, align 4, !dbg !5730
  %34 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5731
  %def22 = getelementptr inbounds %struct.invariant, %struct.invariant* %34, i32 0, i32 4, !dbg !5732
  %35 = load %struct.def*, %struct.def** %def22, align 8, !dbg !5732
  %n_uses = getelementptr inbounds %struct.def, %struct.def* %35, i32 0, i32 1, !dbg !5733
  %36 = load i32, i32* %n_uses, align 8, !dbg !5733
  %cmp23 = icmp ult i32 %33, %36, !dbg !5734
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !5735

if.then25:                                        ; preds = %lor.lhs.false21, %if.end19
  %37 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5736
  %cost = getelementptr inbounds %struct.invariant, %struct.invariant* %37, i32 0, i32 9, !dbg !5737
  %38 = load i32, i32* %cost, align 4, !dbg !5737
  %39 = load i32*, i32** %comp_cost.addr, align 8, !dbg !5738
  %40 = load i32, i32* %39, align 4, !dbg !5739
  %add26 = add i32 %40, %38, !dbg !5739
  store i32 %add26, i32* %39, align 4, !dbg !5739
  br label %if.end27, !dbg !5740

if.end27:                                         ; preds = %if.then25, %lor.lhs.false21
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5741, metadata !DIExpression()), !dbg !5743
  %41 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn28 = getelementptr inbounds %struct.invariant, %struct.invariant* %41, i32 0, i32 5, !dbg !5744
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn28, align 8, !dbg !5744
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !5744
  %bf.load = load i32, i32* %43, align 8, !dbg !5744
  %bf.clear = and i32 %bf.load, 65535, !dbg !5744
  %cmp29 = icmp eq i32 %bf.clear, 8, !dbg !5744
  br i1 %cmp29, label %cond.true49, label %lor.lhs.false31, !dbg !5744

lor.lhs.false31:                                  ; preds = %if.end27
  %44 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn32 = getelementptr inbounds %struct.invariant, %struct.invariant* %44, i32 0, i32 5, !dbg !5744
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn32, align 8, !dbg !5744
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5744
  %bf.load33 = load i32, i32* %46, align 8, !dbg !5744
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !5744
  %cmp35 = icmp eq i32 %bf.clear34, 7, !dbg !5744
  br i1 %cmp35, label %cond.true49, label %lor.lhs.false37, !dbg !5744

lor.lhs.false37:                                  ; preds = %lor.lhs.false31
  %47 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn38 = getelementptr inbounds %struct.invariant, %struct.invariant* %47, i32 0, i32 5, !dbg !5744
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn38, align 8, !dbg !5744
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5744
  %bf.load39 = load i32, i32* %49, align 8, !dbg !5744
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !5744
  %cmp41 = icmp eq i32 %bf.clear40, 9, !dbg !5744
  br i1 %cmp41, label %cond.true49, label %lor.lhs.false43, !dbg !5744

lor.lhs.false43:                                  ; preds = %lor.lhs.false37
  %50 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn44 = getelementptr inbounds %struct.invariant, %struct.invariant* %50, i32 0, i32 5, !dbg !5744
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn44, align 8, !dbg !5744
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !5744
  %bf.load45 = load i32, i32* %52, align 8, !dbg !5744
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !5744
  %cmp47 = icmp eq i32 %bf.clear46, 10, !dbg !5744
  br i1 %cmp47, label %cond.true49, label %cond.false72, !dbg !5744

cond.true49:                                      ; preds = %lor.lhs.false43, %lor.lhs.false37, %lor.lhs.false31, %if.end27
  %53 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn50 = getelementptr inbounds %struct.invariant, %struct.invariant* %53, i32 0, i32 5, !dbg !5744
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn50, align 8, !dbg !5744
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !5744
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5744
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5744
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !5744
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5744
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !5744
  %bf.load52 = load i32, i32* %56, align 8, !dbg !5744
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !5744
  %cmp54 = icmp eq i32 %bf.clear53, 23, !dbg !5744
  br i1 %cmp54, label %cond.true56, label %cond.false62, !dbg !5744

cond.true56:                                      ; preds = %cond.true49
  %57 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn57 = getelementptr inbounds %struct.invariant, %struct.invariant* %57, i32 0, i32 5, !dbg !5744
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn57, align 8, !dbg !5744
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !5744
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !5744
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !5744
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !5744
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !5744
  br label %cond.end70, !dbg !5744

cond.false62:                                     ; preds = %cond.true49
  %60 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn63 = getelementptr inbounds %struct.invariant, %struct.invariant* %60, i32 0, i32 5, !dbg !5744
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn63, align 8, !dbg !5744
  %62 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5744
  %insn64 = getelementptr inbounds %struct.invariant, %struct.invariant* %62, i32 0, i32 5, !dbg !5744
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn64, align 8, !dbg !5744
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5744
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !5744
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 5, !dbg !5744
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !5744
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !5744
  %call69 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %61, %struct.rtx_def* %64), !dbg !5744
  br label %cond.end70, !dbg !5744

cond.end70:                                       ; preds = %cond.false62, %cond.true56
  %cond71 = phi %struct.rtx_def* [ %59, %cond.true56 ], [ %call69, %cond.false62 ], !dbg !5744
  br label %cond.end73, !dbg !5744

cond.false72:                                     ; preds = %lor.lhs.false43
  br label %cond.end73, !dbg !5744

cond.end73:                                       ; preds = %cond.false72, %cond.end70
  %cond74 = phi %struct.rtx_def* [ %cond71, %cond.end70 ], [ null, %cond.false72 ], !dbg !5744
  store %struct.rtx_def* %cond74, %struct.rtx_def** %set, align 8, !dbg !5743
  %65 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5745
  %tobool75 = icmp ne %struct.rtx_def* %65, null, !dbg !5745
  br i1 %tobool75, label %land.lhs.true, label %if.end136, !dbg !5747

land.lhs.true:                                    ; preds = %cond.end73
  %66 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5748
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !5748
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !5748
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 1, !dbg !5748
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !5748
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !5748
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !5748
  %bf.load80 = load i32, i32* %68, align 8, !dbg !5748
  %bf.lshr = lshr i32 %bf.load80, 16, !dbg !5748
  %bf.clear81 = and i32 %bf.lshr, 255, !dbg !5748
  %cmp82 = icmp eq i32 %bf.clear81, 38, !dbg !5748
  br i1 %cmp82, label %land.lhs.true84, label %lor.lhs.false91, !dbg !5748

land.lhs.true84:                                  ; preds = %land.lhs.true
  %69 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5748
  %and = and i32 %69, 65536, !dbg !5748
  %cmp85 = icmp ne i32 %and, 0, !dbg !5748
  br i1 %cmp85, label %lor.lhs.false87, label %land.lhs.true119, !dbg !5748

lor.lhs.false87:                                  ; preds = %land.lhs.true84
  %70 = load i32, i32* @ix86_fpmath, align 4, !dbg !5748
  %and88 = and i32 %70, 2, !dbg !5748
  %cmp89 = icmp ne i32 %and88, 0, !dbg !5748
  br i1 %cmp89, label %lor.lhs.false91, label %land.lhs.true119, !dbg !5748

lor.lhs.false91:                                  ; preds = %lor.lhs.false87, %land.lhs.true
  %71 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5748
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !5748
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !5748
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 1, !dbg !5748
  %rt_rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !5748
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx95, align 8, !dbg !5748
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !5748
  %bf.load96 = load i32, i32* %73, align 8, !dbg !5748
  %bf.lshr97 = lshr i32 %bf.load96, 16, !dbg !5748
  %bf.clear98 = and i32 %bf.lshr97, 255, !dbg !5748
  %cmp99 = icmp eq i32 %bf.clear98, 39, !dbg !5748
  br i1 %cmp99, label %land.lhs.true101, label %lor.lhs.false109, !dbg !5748

land.lhs.true101:                                 ; preds = %lor.lhs.false91
  %74 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5748
  %and102 = and i32 %74, 131072, !dbg !5748
  %cmp103 = icmp ne i32 %and102, 0, !dbg !5748
  br i1 %cmp103, label %lor.lhs.false105, label %land.lhs.true119, !dbg !5748

lor.lhs.false105:                                 ; preds = %land.lhs.true101
  %75 = load i32, i32* @ix86_fpmath, align 4, !dbg !5748
  %and106 = and i32 %75, 2, !dbg !5748
  %cmp107 = icmp ne i32 %and106, 0, !dbg !5748
  br i1 %cmp107, label %lor.lhs.false109, label %land.lhs.true119, !dbg !5748

lor.lhs.false109:                                 ; preds = %lor.lhs.false105, %lor.lhs.false91
  %76 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5748
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !5748
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !5748
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 1, !dbg !5748
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !5748
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !5748
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !5748
  %bf.load114 = load i32, i32* %78, align 8, !dbg !5748
  %bf.lshr115 = lshr i32 %bf.load114, 16, !dbg !5748
  %bf.clear116 = and i32 %bf.lshr115, 255, !dbg !5748
  %cmp117 = icmp eq i32 %bf.clear116, 40, !dbg !5748
  br i1 %cmp117, label %land.lhs.true119, label %if.end136, !dbg !5749

land.lhs.true119:                                 ; preds = %lor.lhs.false109, %lor.lhs.false105, %land.lhs.true101, %lor.lhs.false87, %land.lhs.true84
  %79 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5750
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %79, i32 0, i32 1, !dbg !5750
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !5750
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 1, !dbg !5750
  %rt_rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**, !dbg !5750
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx123, align 8, !dbg !5750
  %call124 = call zeroext i8 @constant_pool_constant_p(%struct.rtx_def* %80), !dbg !5751
  %conv125 = zext i8 %call124 to i32, !dbg !5751
  %tobool126 = icmp ne i32 %conv125, 0, !dbg !5751
  br i1 %tobool126, label %if.then127, label %if.end136, !dbg !5752

if.then127:                                       ; preds = %land.lhs.true119
  %81 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5753
  %tobool128 = icmp ne i32 %81, 0, !dbg !5753
  br i1 %tobool128, label %if.then129, label %if.else132, !dbg !5756

if.then129:                                       ; preds = %if.then127
  %82 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5757
  %arrayidx130 = getelementptr inbounds i32, i32* %82, i64 16, !dbg !5757
  %83 = load i32, i32* %arrayidx130, align 4, !dbg !5758
  %add131 = add i32 %83, 2, !dbg !5758
  store i32 %add131, i32* %arrayidx130, align 4, !dbg !5758
  br label %if.end135, !dbg !5757

if.else132:                                       ; preds = %if.then127
  %84 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5759
  %arrayidx133 = getelementptr inbounds i32, i32* %84, i64 0, !dbg !5759
  %85 = load i32, i32* %arrayidx133, align 4, !dbg !5760
  %add134 = add i32 %85, 2, !dbg !5760
  store i32 %add134, i32* %arrayidx133, align 4, !dbg !5760
  br label %if.end135

if.end135:                                        ; preds = %if.else132, %if.then129
  br label %if.end136, !dbg !5761

if.end136:                                        ; preds = %if.end135, %land.lhs.true119, %lor.lhs.false109, %cond.end73
  %86 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5762
  %depends_on = getelementptr inbounds %struct.invariant, %struct.invariant* %86, i32 0, i32 10, !dbg !5762
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !5762
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %87, i32 0, i32* %depno), !dbg !5762
  br label %for.cond137, !dbg !5762

for.cond137:                                      ; preds = %for.inc219, %if.end136
  %call138 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %depno), !dbg !5764
  %tobool139 = icmp ne i8 %call138, 0, !dbg !5762
  br i1 %tobool139, label %for.body140, label %for.end220, !dbg !5762

for.body140:                                      ; preds = %for.cond137
  call void @llvm.dbg.declare(metadata i8* %check_p, metadata !5766, metadata !DIExpression()), !dbg !5768
  %88 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5769
  %tobool141 = icmp ne %struct.VEC_invariant_p_heap* %88, null, !dbg !5769
  br i1 %tobool141, label %cond.true142, label %cond.false144, !dbg !5769

cond.true142:                                     ; preds = %for.body140
  %89 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5769
  %base143 = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %89, i32 0, i32 0, !dbg !5769
  br label %cond.end145, !dbg !5769

cond.false144:                                    ; preds = %for.body140
  br label %cond.end145, !dbg !5769

cond.end145:                                      ; preds = %cond.false144, %cond.true142
  %cond146 = phi %struct.VEC_invariant_p_base* [ %base143, %cond.true142 ], [ null, %cond.false144 ], !dbg !5769
  %90 = load i32, i32* %depno, align 4, !dbg !5769
  %call147 = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond146, i32 %90), !dbg !5769
  store %struct.invariant* %call147, %struct.invariant** %dep, align 8, !dbg !5770
  %91 = load %struct.invariant*, %struct.invariant** %dep, align 8, !dbg !5771
  %arraydecay = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5772
  call void @get_inv_cost(%struct.invariant* %91, i32* %acomp_cost, i32* %arraydecay), !dbg !5773
  %92 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5774
  %tobool148 = icmp ne i32 %92, 0, !dbg !5774
  br i1 %tobool148, label %if.else154, label %if.then149, !dbg !5776

if.then149:                                       ; preds = %cond.end145
  %arrayidx150 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5777
  %93 = load i32, i32* %arrayidx150, align 16, !dbg !5777
  %cmp151 = icmp ne i32 %93, 0, !dbg !5778
  %conv152 = zext i1 %cmp151 to i32, !dbg !5778
  %conv153 = trunc i32 %conv152 to i8, !dbg !5777
  store i8 %conv153, i8* %check_p, align 1, !dbg !5779
  br label %if.end173, !dbg !5780

if.else154:                                       ; preds = %cond.end145
  store i32 0, i32* %i, align 4, !dbg !5781
  br label %for.cond155, !dbg !5784

for.cond155:                                      ; preds = %for.inc167, %if.else154
  %94 = load i32, i32* %i, align 4, !dbg !5785
  %95 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5787
  %cmp156 = icmp slt i32 %94, %95, !dbg !5788
  br i1 %cmp156, label %for.body158, label %for.end169, !dbg !5789

for.body158:                                      ; preds = %for.cond155
  %96 = load i32, i32* %i, align 4, !dbg !5790
  %idxprom159 = sext i32 %96 to i64, !dbg !5792
  %arrayidx160 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom159, !dbg !5792
  %97 = load i32, i32* %arrayidx160, align 4, !dbg !5792
  %idxprom161 = zext i32 %97 to i64, !dbg !5793
  %arrayidx162 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 %idxprom161, !dbg !5793
  %98 = load i32, i32* %arrayidx162, align 4, !dbg !5793
  %cmp163 = icmp ne i32 %98, 0, !dbg !5794
  br i1 %cmp163, label %if.then165, label %if.end166, !dbg !5795

if.then165:                                       ; preds = %for.body158
  br label %for.end169, !dbg !5796

if.end166:                                        ; preds = %for.body158
  br label %for.inc167, !dbg !5797

for.inc167:                                       ; preds = %if.end166
  %99 = load i32, i32* %i, align 4, !dbg !5798
  %inc168 = add nsw i32 %99, 1, !dbg !5798
  store i32 %inc168, i32* %i, align 4, !dbg !5798
  br label %for.cond155, !dbg !5799, !llvm.loop !5800

for.end169:                                       ; preds = %if.then165, %for.cond155
  %100 = load i32, i32* %i, align 4, !dbg !5802
  %101 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5803
  %cmp170 = icmp slt i32 %100, %101, !dbg !5804
  %conv171 = zext i1 %cmp170 to i32, !dbg !5804
  %conv172 = trunc i32 %conv171 to i8, !dbg !5802
  store i8 %conv172, i8* %check_p, align 1, !dbg !5805
  br label %if.end173

if.end173:                                        ; preds = %for.end169, %if.then149
  %102 = load i8, i8* %check_p, align 1, !dbg !5806
  %conv174 = zext i8 %102 to i32, !dbg !5806
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !5806
  br i1 %tobool175, label %land.lhs.true176, label %if.end194, !dbg !5808

land.lhs.true176:                                 ; preds = %if.end173
  %103 = load %struct.invariant*, %struct.invariant** %dep, align 8, !dbg !5809
  %always_executed = getelementptr inbounds %struct.invariant, %struct.invariant* %103, i32 0, i32 6, !dbg !5810
  %104 = load i8, i8* %always_executed, align 8, !dbg !5810
  %conv177 = zext i8 %104 to i32, !dbg !5809
  %tobool178 = icmp ne i32 %conv177, 0, !dbg !5809
  br i1 %tobool178, label %land.lhs.true179, label %if.end194, !dbg !5811

land.lhs.true179:                                 ; preds = %land.lhs.true176
  %105 = load %struct.invariant*, %struct.invariant** %dep, align 8, !dbg !5812
  %def180 = getelementptr inbounds %struct.invariant, %struct.invariant* %105, i32 0, i32 4, !dbg !5813
  %106 = load %struct.def*, %struct.def** %def180, align 8, !dbg !5813
  %uses = getelementptr inbounds %struct.def, %struct.def* %106, i32 0, i32 0, !dbg !5814
  %107 = load %struct.use*, %struct.use** %uses, align 8, !dbg !5814
  %next = getelementptr inbounds %struct.use, %struct.use* %107, i32 0, i32 3, !dbg !5815
  %108 = load %struct.use*, %struct.use** %next, align 8, !dbg !5815
  %tobool181 = icmp ne %struct.use* %108, null, !dbg !5812
  br i1 %tobool181, label %if.end194, label %if.then182, !dbg !5816

if.then182:                                       ; preds = %land.lhs.true179
  %109 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5817
  %tobool183 = icmp ne i32 %109, 0, !dbg !5817
  br i1 %tobool183, label %if.else186, label %if.then184, !dbg !5820

if.then184:                                       ; preds = %if.then182
  %arrayidx185 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5821
  %110 = load i32, i32* %arrayidx185, align 16, !dbg !5822
  %dec = add i32 %110, -1, !dbg !5822
  store i32 %dec, i32* %arrayidx185, align 16, !dbg !5822
  br label %if.end193, !dbg !5821

if.else186:                                       ; preds = %if.then182
  call void @llvm.dbg.declare(metadata i32* %nregs187, metadata !5823, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata i32* %cover_class188, metadata !5826, metadata !DIExpression()), !dbg !5827
  %111 = load %struct.invariant*, %struct.invariant** %inv.addr, align 8, !dbg !5828
  %insn189 = getelementptr inbounds %struct.invariant, %struct.invariant* %111, i32 0, i32 5, !dbg !5829
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn189, align 8, !dbg !5829
  %call190 = call i32 @get_cover_class_and_nregs(%struct.rtx_def* %112, i32* %nregs187), !dbg !5830
  store i32 %call190, i32* %cover_class188, align 4, !dbg !5831
  %113 = load i32, i32* %nregs187, align 4, !dbg !5832
  %114 = load i32, i32* %cover_class188, align 4, !dbg !5833
  %idxprom191 = zext i32 %114 to i64, !dbg !5834
  %arrayidx192 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 %idxprom191, !dbg !5834
  %115 = load i32, i32* %arrayidx192, align 4, !dbg !5835
  %sub = sub i32 %115, %113, !dbg !5835
  store i32 %sub, i32* %arrayidx192, align 4, !dbg !5835
  br label %if.end193

if.end193:                                        ; preds = %if.else186, %if.then184
  br label %if.end194, !dbg !5836

if.end194:                                        ; preds = %if.end193, %land.lhs.true179, %land.lhs.true176, %if.end173
  %116 = load i32, i32* @flag_ira_loop_pressure, align 4, !dbg !5837
  %tobool195 = icmp ne i32 %116, 0, !dbg !5837
  br i1 %tobool195, label %if.else200, label %if.then196, !dbg !5839

if.then196:                                       ; preds = %if.end194
  %arrayidx197 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 0, !dbg !5840
  %117 = load i32, i32* %arrayidx197, align 16, !dbg !5840
  %118 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5841
  %arrayidx198 = getelementptr inbounds i32, i32* %118, i64 0, !dbg !5841
  %119 = load i32, i32* %arrayidx198, align 4, !dbg !5842
  %add199 = add i32 %119, %117, !dbg !5842
  store i32 %add199, i32* %arrayidx198, align 4, !dbg !5842
  br label %if.end217, !dbg !5841

if.else200:                                       ; preds = %if.end194
  store i32 0, i32* %i, align 4, !dbg !5843
  br label %for.cond201, !dbg !5846

for.cond201:                                      ; preds = %for.inc214, %if.else200
  %120 = load i32, i32* %i, align 4, !dbg !5847
  %121 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !5849
  %cmp202 = icmp slt i32 %120, %121, !dbg !5850
  br i1 %cmp202, label %for.body204, label %for.end216, !dbg !5851

for.body204:                                      ; preds = %for.cond201
  %122 = load i32, i32* %i, align 4, !dbg !5852
  %idxprom205 = sext i32 %122 to i64, !dbg !5853
  %arrayidx206 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom205, !dbg !5853
  %123 = load i32, i32* %arrayidx206, align 4, !dbg !5853
  %idxprom207 = zext i32 %123 to i64, !dbg !5854
  %arrayidx208 = getelementptr inbounds [27 x i32], [27 x i32]* %aregs_needed, i64 0, i64 %idxprom207, !dbg !5854
  %124 = load i32, i32* %arrayidx208, align 4, !dbg !5854
  %125 = load i32*, i32** %regs_needed.addr, align 8, !dbg !5855
  %126 = load i32, i32* %i, align 4, !dbg !5856
  %idxprom209 = sext i32 %126 to i64, !dbg !5857
  %arrayidx210 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom209, !dbg !5857
  %127 = load i32, i32* %arrayidx210, align 4, !dbg !5857
  %idxprom211 = zext i32 %127 to i64, !dbg !5855
  %arrayidx212 = getelementptr inbounds i32, i32* %125, i64 %idxprom211, !dbg !5855
  %128 = load i32, i32* %arrayidx212, align 4, !dbg !5858
  %add213 = add i32 %128, %124, !dbg !5858
  store i32 %add213, i32* %arrayidx212, align 4, !dbg !5858
  br label %for.inc214, !dbg !5855

for.inc214:                                       ; preds = %for.body204
  %129 = load i32, i32* %i, align 4, !dbg !5859
  %inc215 = add nsw i32 %129, 1, !dbg !5859
  store i32 %inc215, i32* %i, align 4, !dbg !5859
  br label %for.cond201, !dbg !5860, !llvm.loop !5861

for.end216:                                       ; preds = %for.cond201
  br label %if.end217

if.end217:                                        ; preds = %for.end216, %if.then196
  %130 = load i32, i32* %acomp_cost, align 4, !dbg !5863
  %131 = load i32*, i32** %comp_cost.addr, align 8, !dbg !5864
  %132 = load i32, i32* %131, align 4, !dbg !5865
  %add218 = add nsw i32 %132, %130, !dbg !5865
  store i32 %add218, i32* %131, align 4, !dbg !5865
  br label %for.inc219, !dbg !5866

for.inc219:                                       ; preds = %if.end217
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %depno), !dbg !5764
  br label %for.cond137, !dbg !5764, !llvm.loop !5867

for.end220:                                       ; preds = %if.then8, %for.cond137
  ret void, !dbg !5869
}

declare dso_local i32 @estimate_reg_pressure_cost(i32, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_cover_class_and_nregs(%struct.rtx_def* %insn, i32* %nregs) #0 !dbg !5870 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %nregs.addr = alloca i32*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %cover_class = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5873, metadata !DIExpression()), !dbg !5874
  store i32* %nregs, i32** %nregs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nregs.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !5877, metadata !DIExpression()), !dbg !5878
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5879, metadata !DIExpression()), !dbg !5880
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5881, metadata !DIExpression()), !dbg !5882
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5883
  %bf.load = load i32, i32* %1, align 8, !dbg !5883
  %bf.clear = and i32 %bf.load, 65535, !dbg !5883
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5883
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !5883

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !5883
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5883
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !5883
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !5883
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !5883

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5883
  %bf.load5 = load i32, i32* %5, align 8, !dbg !5883
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !5883
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !5883
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !5883

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5883
  %bf.load9 = load i32, i32* %7, align 8, !dbg !5883
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !5883
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !5883
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !5883

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5883
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5883
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5883
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5883
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5883
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !5883
  %bf.load12 = load i32, i32* %10, align 8, !dbg !5883
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !5883
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !5883
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !5883

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5883
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !5883
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !5883
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !5883
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !5883
  br label %cond.end, !dbg !5883

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5883
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !5883
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !5883
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !5883
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !5883
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !5883
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !5883
  br label %cond.end, !dbg !5883

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !5883
  br label %cond.end25, !dbg !5883

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !5883

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !5883
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !5882
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5884
  %cmp27 = icmp ne %struct.rtx_def* %16, null, !dbg !5884
  br i1 %cmp27, label %cond.false29, label %cond.true28, !dbg !5884

cond.true28:                                      ; preds = %cond.end25
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0), i32 1025, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !5884
  br label %cond.end30, !dbg !5884

cond.false29:                                     ; preds = %cond.end25
  br label %cond.end30, !dbg !5884

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !5884
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5885
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !5885
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5885
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !5885
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !5885
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !5885
  store %struct.rtx_def* %18, %struct.rtx_def** %reg, align 8, !dbg !5886
  %19 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5887
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !5887
  %bf.load36 = load i32, i32* %20, align 8, !dbg !5887
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !5887
  %cmp38 = icmp eq i32 %bf.clear37, 39, !dbg !5889
  br i1 %cmp38, label %if.then, label %if.end, !dbg !5890

if.then:                                          ; preds = %cond.end30
  %21 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5891
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5891
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !5891
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 0, !dbg !5891
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !5891
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !5891
  store %struct.rtx_def* %22, %struct.rtx_def** %reg, align 8, !dbg !5892
  br label %if.end, !dbg !5893

if.end:                                           ; preds = %if.then, %cond.end30
  %23 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5894
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5894
  %bf.load43 = load i32, i32* %24, align 8, !dbg !5894
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !5894
  %cmp45 = icmp eq i32 %bf.clear44, 43, !dbg !5894
  br i1 %cmp45, label %if.then46, label %if.else, !dbg !5896

if.then46:                                        ; preds = %if.end
  %25 = load i32*, i32** %nregs.addr, align 8, !dbg !5897
  store i32 0, i32* %25, align 4, !dbg !5899
  store i32 0, i32* %cover_class, align 4, !dbg !5900
  br label %if.end67, !dbg !5901

if.else:                                          ; preds = %if.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5902
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !5902
  %bf.load47 = load i32, i32* %27, align 8, !dbg !5902
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !5902
  %cmp49 = icmp eq i32 %bf.clear48, 37, !dbg !5902
  br i1 %cmp49, label %if.end51, label %if.then50, !dbg !5905

if.then50:                                        ; preds = %if.else
  store %struct.rtx_def* null, %struct.rtx_def** %reg, align 8, !dbg !5906
  br label %if.end51, !dbg !5907

if.end51:                                         ; preds = %if.then50, %if.else
  %28 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5908
  %cmp52 = icmp eq %struct.rtx_def* %28, null, !dbg !5910
  br i1 %cmp52, label %if.then53, label %if.else54, !dbg !5911

if.then53:                                        ; preds = %if.end51
  store i32 13, i32* %cover_class, align 4, !dbg !5912
  br label %if.end57, !dbg !5913

if.else54:                                        ; preds = %if.end51
  %29 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5914
  %call55 = call i32 @rhs_regno(%struct.rtx_def* %29), !dbg !5914
  %call56 = call i32 @reg_cover_class(i32 %call55), !dbg !5915
  store i32 %call56, i32* %cover_class, align 4, !dbg !5916
  br label %if.end57

if.end57:                                         ; preds = %if.else54, %if.then53
  %30 = load i32, i32* %cover_class, align 4, !dbg !5917
  %idxprom = zext i32 %30 to i64, !dbg !5918
  %arrayidx58 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !5918
  %31 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5919
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !5919
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !5919
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !5919
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !5919
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !5919
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !5919
  %bf.load63 = load i32, i32* %33, align 8, !dbg !5919
  %bf.lshr = lshr i32 %bf.load63, 16, !dbg !5919
  %bf.clear64 = and i32 %bf.lshr, 255, !dbg !5919
  %idxprom65 = zext i32 %bf.clear64 to i64, !dbg !5918
  %arrayidx66 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx58, i64 0, i64 %idxprom65, !dbg !5918
  %34 = load i32, i32* %arrayidx66, align 4, !dbg !5918
  %35 = load i32*, i32** %nregs.addr, align 8, !dbg !5920
  store i32 %34, i32* %35, align 4, !dbg !5921
  br label %if.end67

if.end67:                                         ; preds = %if.end57, %if.then46
  %36 = load i32, i32* %cover_class, align 4, !dbg !5922
  ret i32 %36, !dbg !5923
}

declare dso_local zeroext i8 @constant_pool_constant_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @move_invariant_reg(%struct.loop* %loop, i32 %invno) #0 !dbg !5924 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %invno.addr = alloca i32, align 4
  %inv = alloca %struct.invariant*, align 8
  %repr = alloca %struct.invariant*, align 8
  %i = alloca i32, align 4
  %preheader = alloca %struct.basic_block_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %use = alloca %struct.use*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %regno = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  store i32 %invno, i32* %invno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %invno.addr, metadata !5929, metadata !DIExpression()), !dbg !5930
  call void @llvm.dbg.declare(metadata %struct.invariant** %inv, metadata !5931, metadata !DIExpression()), !dbg !5932
  %0 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5933
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %0, null, !dbg !5933
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5933

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5933
  %base = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %1, i32 0, i32 0, !dbg !5933
  br label %cond.end, !dbg !5933

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5933

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_invariant_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5933
  %2 = load i32, i32* %invno.addr, align 4, !dbg !5933
  %call = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond, i32 %2), !dbg !5933
  store %struct.invariant* %call, %struct.invariant** %inv, align 8, !dbg !5932
  call void @llvm.dbg.declare(metadata %struct.invariant** %repr, metadata !5934, metadata !DIExpression()), !dbg !5935
  %3 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5936
  %tobool1 = icmp ne %struct.VEC_invariant_p_heap* %3, null, !dbg !5936
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5936

cond.true2:                                       ; preds = %cond.end
  %4 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** @invariants, align 8, !dbg !5936
  %base3 = getelementptr inbounds %struct.VEC_invariant_p_heap, %struct.VEC_invariant_p_heap* %4, i32 0, i32 0, !dbg !5936
  br label %cond.end5, !dbg !5936

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5936

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_invariant_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5936
  %5 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5936
  %eqto = getelementptr inbounds %struct.invariant, %struct.invariant* %5, i32 0, i32 1, !dbg !5936
  %6 = load i32, i32* %eqto, align 4, !dbg !5936
  %call7 = call %struct.invariant* @VEC_invariant_p_base_index(%struct.VEC_invariant_p_base* %cond6, i32 %6), !dbg !5936
  store %struct.invariant* %call7, %struct.invariant** %repr, align 8, !dbg !5935
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5937, metadata !DIExpression()), !dbg !5938
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheader, metadata !5939, metadata !DIExpression()), !dbg !5940
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5941
  %call8 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %7), !dbg !5942
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 0, !dbg !5943
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5943
  store %struct.basic_block_def* %8, %struct.basic_block_def** %preheader, align 8, !dbg !5940
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !5944, metadata !DIExpression()), !dbg !5945
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5946, metadata !DIExpression()), !dbg !5947
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !5948, metadata !DIExpression()), !dbg !5949
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5950, metadata !DIExpression()), !dbg !5951
  call void @llvm.dbg.declare(metadata %struct.use** %use, metadata !5952, metadata !DIExpression()), !dbg !5953
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5954, metadata !DIExpression()), !dbg !5955
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5956, metadata !DIExpression()), !dbg !5957
  %9 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5958
  %reg9 = getelementptr inbounds %struct.invariant, %struct.invariant* %9, i32 0, i32 2, !dbg !5960
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg9, align 8, !dbg !5960
  %tobool10 = icmp ne %struct.rtx_def* %10, null, !dbg !5958
  br i1 %tobool10, label %if.then, label %if.end, !dbg !5961

if.then:                                          ; preds = %cond.end5
  store i8 1, i8* %retval, align 1, !dbg !5962
  br label %return, !dbg !5962

if.end:                                           ; preds = %cond.end5
  %11 = load %struct.invariant*, %struct.invariant** %repr, align 8, !dbg !5963
  %move = getelementptr inbounds %struct.invariant, %struct.invariant* %11, i32 0, i32 7, !dbg !5965
  %12 = load i8, i8* %move, align 1, !dbg !5965
  %tobool11 = icmp ne i8 %12, 0, !dbg !5963
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !5966

if.then12:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5967
  br label %return, !dbg !5967

if.end13:                                         ; preds = %if.end
  store i32 -1, i32* %regno, align 4, !dbg !5968
  %13 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5969
  %14 = load %struct.invariant*, %struct.invariant** %repr, align 8, !dbg !5971
  %cmp = icmp eq %struct.invariant* %13, %14, !dbg !5972
  br i1 %cmp, label %if.then14, label %if.else, !dbg !5973

if.then14:                                        ; preds = %if.end13
  %15 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5974
  %depends_on = getelementptr inbounds %struct.invariant, %struct.invariant* %15, i32 0, i32 10, !dbg !5977
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on, align 8, !dbg !5977
  %tobool15 = icmp ne %struct.bitmap_head_def* %16, null, !dbg !5974
  br i1 %tobool15, label %if.then16, label %if.end24, !dbg !5978

if.then16:                                        ; preds = %if.then14
  %17 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5979
  %depends_on17 = getelementptr inbounds %struct.invariant, %struct.invariant* %17, i32 0, i32 10, !dbg !5979
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %depends_on17, align 8, !dbg !5979
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %18, i32 0, i32* %i), !dbg !5979
  br label %for.cond, !dbg !5979

for.cond:                                         ; preds = %for.inc, %if.then16
  %call18 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5982
  %tobool19 = icmp ne i8 %call18, 0, !dbg !5979
  br i1 %tobool19, label %for.body, label %for.end, !dbg !5979

for.body:                                         ; preds = %for.cond
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5984
  %20 = load i32, i32* %i, align 4, !dbg !5987
  %call20 = call zeroext i8 @move_invariant_reg(%struct.loop* %19, i32 %20), !dbg !5988
  %tobool21 = icmp ne i8 %call20, 0, !dbg !5988
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !5989

if.then22:                                        ; preds = %for.body
  br label %fail, !dbg !5990

if.end23:                                         ; preds = %for.body
  br label %for.inc, !dbg !5991

for.inc:                                          ; preds = %if.end23
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5982
  br label %for.cond, !dbg !5982, !llvm.loop !5992

for.end:                                          ; preds = %for.cond
  br label %if.end24, !dbg !5994

if.end24:                                         ; preds = %for.end, %if.then14
  %21 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn = getelementptr inbounds %struct.invariant, %struct.invariant* %21, i32 0, i32 5, !dbg !5995
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5995
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5995
  %bf.load = load i32, i32* %23, align 8, !dbg !5995
  %bf.clear = and i32 %bf.load, 65535, !dbg !5995
  %cmp25 = icmp eq i32 %bf.clear, 8, !dbg !5995
  br i1 %cmp25, label %cond.true40, label %lor.lhs.false, !dbg !5995

lor.lhs.false:                                    ; preds = %if.end24
  %24 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn26 = getelementptr inbounds %struct.invariant, %struct.invariant* %24, i32 0, i32 5, !dbg !5995
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn26, align 8, !dbg !5995
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5995
  %bf.load27 = load i32, i32* %26, align 8, !dbg !5995
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !5995
  %cmp29 = icmp eq i32 %bf.clear28, 7, !dbg !5995
  br i1 %cmp29, label %cond.true40, label %lor.lhs.false30, !dbg !5995

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %27 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn31 = getelementptr inbounds %struct.invariant, %struct.invariant* %27, i32 0, i32 5, !dbg !5995
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn31, align 8, !dbg !5995
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5995
  %bf.load32 = load i32, i32* %29, align 8, !dbg !5995
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !5995
  %cmp34 = icmp eq i32 %bf.clear33, 9, !dbg !5995
  br i1 %cmp34, label %cond.true40, label %lor.lhs.false35, !dbg !5995

lor.lhs.false35:                                  ; preds = %lor.lhs.false30
  %30 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn36 = getelementptr inbounds %struct.invariant, %struct.invariant* %30, i32 0, i32 5, !dbg !5995
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn36, align 8, !dbg !5995
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !5995
  %bf.load37 = load i32, i32* %32, align 8, !dbg !5995
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !5995
  %cmp39 = icmp eq i32 %bf.clear38, 10, !dbg !5995
  br i1 %cmp39, label %cond.true40, label %cond.false61, !dbg !5995

cond.true40:                                      ; preds = %lor.lhs.false35, %lor.lhs.false30, %lor.lhs.false, %if.end24
  %33 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn41 = getelementptr inbounds %struct.invariant, %struct.invariant* %33, i32 0, i32 5, !dbg !5995
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn41, align 8, !dbg !5995
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5995
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5995
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5995
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5995
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5995
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !5995
  %bf.load42 = load i32, i32* %36, align 8, !dbg !5995
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !5995
  %cmp44 = icmp eq i32 %bf.clear43, 23, !dbg !5995
  br i1 %cmp44, label %cond.true45, label %cond.false51, !dbg !5995

cond.true45:                                      ; preds = %cond.true40
  %37 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn46 = getelementptr inbounds %struct.invariant, %struct.invariant* %37, i32 0, i32 5, !dbg !5995
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn46, align 8, !dbg !5995
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5995
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !5995
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 5, !dbg !5995
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !5995
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !5995
  br label %cond.end59, !dbg !5995

cond.false51:                                     ; preds = %cond.true40
  %40 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn52 = getelementptr inbounds %struct.invariant, %struct.invariant* %40, i32 0, i32 5, !dbg !5995
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn52, align 8, !dbg !5995
  %42 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !5995
  %insn53 = getelementptr inbounds %struct.invariant, %struct.invariant* %42, i32 0, i32 5, !dbg !5995
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn53, align 8, !dbg !5995
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !5995
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !5995
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 5, !dbg !5995
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !5995
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !5995
  %call58 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %41, %struct.rtx_def* %44), !dbg !5995
  br label %cond.end59, !dbg !5995

cond.end59:                                       ; preds = %cond.false51, %cond.true45
  %cond60 = phi %struct.rtx_def* [ %39, %cond.true45 ], [ %call58, %cond.false51 ], !dbg !5995
  br label %cond.end62, !dbg !5995

cond.false61:                                     ; preds = %lor.lhs.false35
  br label %cond.end62, !dbg !5995

cond.end62:                                       ; preds = %cond.false61, %cond.end59
  %cond63 = phi %struct.rtx_def* [ %cond60, %cond.end59 ], [ null, %cond.false61 ], !dbg !5995
  store %struct.rtx_def* %cond63, %struct.rtx_def** %set, align 8, !dbg !5996
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5997
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !5997
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5997
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 0, !dbg !5997
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !5997
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !5997
  store %struct.rtx_def* %46, %struct.rtx_def** %dest, align 8, !dbg !5998
  store %struct.rtx_def* %46, %struct.rtx_def** %reg, align 8, !dbg !5999
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6000
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !6000
  %bf.load68 = load i32, i32* %48, align 8, !dbg !6000
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !6000
  %cmp70 = icmp eq i32 %bf.clear69, 39, !dbg !6002
  br i1 %cmp70, label %if.then71, label %if.end76, !dbg !6003

if.then71:                                        ; preds = %cond.end62
  %49 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6004
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !6004
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !6004
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 0, !dbg !6004
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !6004
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !6004
  store %struct.rtx_def* %50, %struct.rtx_def** %reg, align 8, !dbg !6005
  br label %if.end76, !dbg !6006

if.end76:                                         ; preds = %if.then71, %cond.end62
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6007
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !6007
  %bf.load77 = load i32, i32* %52, align 8, !dbg !6007
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !6007
  %cmp79 = icmp eq i32 %bf.clear78, 37, !dbg !6007
  br i1 %cmp79, label %if.then80, label %if.end82, !dbg !6009

if.then80:                                        ; preds = %if.end76
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6010
  %call81 = call i32 @rhs_regno(%struct.rtx_def* %53), !dbg !6010
  store i32 %call81, i32* %regno, align 4, !dbg !6011
  br label %if.end82, !dbg !6012

if.end82:                                         ; preds = %if.then80, %if.end76
  %54 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6013
  %call83 = call %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def* %54), !dbg !6014
  store %struct.rtx_def* %call83, %struct.rtx_def** %reg, align 8, !dbg !6015
  %55 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6016
  %insn84 = getelementptr inbounds %struct.invariant, %struct.invariant* %55, i32 0, i32 5, !dbg !6018
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn84, align 8, !dbg !6018
  %57 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6019
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !6019
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !6019
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !6019
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !6019
  %58 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6020
  %call89 = call zeroext i8 @validate_change(%struct.rtx_def* %56, %struct.rtx_def** %rt_rtx88, %struct.rtx_def* %58, i8 zeroext 0), !dbg !6021
  %tobool90 = icmp ne i8 %call89, 0, !dbg !6021
  br i1 %tobool90, label %if.end92, label %if.then91, !dbg !6022

if.then91:                                        ; preds = %if.end82
  br label %fail, !dbg !6023

if.end92:                                         ; preds = %if.end82
  %59 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6024
  %insn93 = getelementptr inbounds %struct.invariant, %struct.invariant* %59, i32 0, i32 5, !dbg !6025
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn93, align 8, !dbg !6025
  %call94 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %60), !dbg !6026
  %61 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6027
  %62 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6028
  %call95 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %61, %struct.rtx_def* %62), !dbg !6029
  %63 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6030
  %insn96 = getelementptr inbounds %struct.invariant, %struct.invariant* %63, i32 0, i32 5, !dbg !6031
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn96, align 8, !dbg !6031
  %call97 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call95, %struct.rtx_def* %64), !dbg !6032
  %65 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6033
  %insn98 = getelementptr inbounds %struct.invariant, %struct.invariant* %65, i32 0, i32 5, !dbg !6034
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn98, align 8, !dbg !6034
  %67 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6035
  %insn99 = getelementptr inbounds %struct.invariant, %struct.invariant* %67, i32 0, i32 5, !dbg !6036
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn99, align 8, !dbg !6036
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !6037
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 7, !dbg !6037
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6037
  %70 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6037
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %70, i32 0, i32 1, !dbg !6037
  %71 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6037
  call void @reorder_insns(%struct.rtx_def* %66, %struct.rtx_def* %68, %struct.rtx_def* %71), !dbg !6038
  %72 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6039
  %insn100 = getelementptr inbounds %struct.invariant, %struct.invariant* %72, i32 0, i32 5, !dbg !6041
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn100, align 8, !dbg !6041
  %call101 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %73, i32 4, %struct.rtx_def* null), !dbg !6042
  store %struct.rtx_def* %call101, %struct.rtx_def** %note, align 8, !dbg !6043
  %tobool102 = icmp ne %struct.rtx_def* %call101, null, !dbg !6043
  br i1 %tobool102, label %land.lhs.true, label %if.end113, !dbg !6044

land.lhs.true:                                    ; preds = %if.end92
  %74 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6045
  %always_executed = getelementptr inbounds %struct.invariant, %struct.invariant* %74, i32 0, i32 6, !dbg !6046
  %75 = load i8, i8* %always_executed, align 8, !dbg !6046
  %tobool103 = icmp ne i8 %75, 0, !dbg !6045
  br i1 %tobool103, label %lor.lhs.false104, label %if.then111, !dbg !6047

lor.lhs.false104:                                 ; preds = %land.lhs.true
  %76 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6048
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6048
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 0, !dbg !6048
  %rt_rtx108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtx_def**, !dbg !6048
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx108, align 8, !dbg !6048
  %call109 = call zeroext i8 @check_maybe_invariant(%struct.rtx_def* %77), !dbg !6049
  %tobool110 = icmp ne i8 %call109, 0, !dbg !6049
  br i1 %tobool110, label %if.end113, label %if.then111, !dbg !6050

if.then111:                                       ; preds = %lor.lhs.false104, %land.lhs.true
  %78 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6051
  %insn112 = getelementptr inbounds %struct.invariant, %struct.invariant* %78, i32 0, i32 5, !dbg !6052
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn112, align 8, !dbg !6052
  %80 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6053
  call void @remove_note(%struct.rtx_def* %79, %struct.rtx_def* %80), !dbg !6054
  br label %if.end113, !dbg !6054

if.end113:                                        ; preds = %if.then111, %lor.lhs.false104, %if.end92
  br label %if.end176, !dbg !6055

if.else:                                          ; preds = %if.end13
  %81 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6056
  %82 = load %struct.invariant*, %struct.invariant** %repr, align 8, !dbg !6059
  %invno114 = getelementptr inbounds %struct.invariant, %struct.invariant* %82, i32 0, i32 0, !dbg !6060
  %83 = load i32, i32* %invno114, align 8, !dbg !6060
  %call115 = call zeroext i8 @move_invariant_reg(%struct.loop* %81, i32 %83), !dbg !6061
  %tobool116 = icmp ne i8 %call115, 0, !dbg !6061
  br i1 %tobool116, label %if.end118, label %if.then117, !dbg !6062

if.then117:                                       ; preds = %if.else
  br label %fail, !dbg !6063

if.end118:                                        ; preds = %if.else
  %84 = load %struct.invariant*, %struct.invariant** %repr, align 8, !dbg !6064
  %reg119 = getelementptr inbounds %struct.invariant, %struct.invariant* %84, i32 0, i32 2, !dbg !6065
  %85 = load %struct.rtx_def*, %struct.rtx_def** %reg119, align 8, !dbg !6065
  store %struct.rtx_def* %85, %struct.rtx_def** %reg, align 8, !dbg !6066
  %86 = load %struct.invariant*, %struct.invariant** %repr, align 8, !dbg !6067
  %orig_regno = getelementptr inbounds %struct.invariant, %struct.invariant* %86, i32 0, i32 3, !dbg !6068
  %87 = load i32, i32* %orig_regno, align 8, !dbg !6068
  store i32 %87, i32* %regno, align 4, !dbg !6069
  %88 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn120 = getelementptr inbounds %struct.invariant, %struct.invariant* %88, i32 0, i32 5, !dbg !6070
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn120, align 8, !dbg !6070
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !6070
  %bf.load121 = load i32, i32* %90, align 8, !dbg !6070
  %bf.clear122 = and i32 %bf.load121, 65535, !dbg !6070
  %cmp123 = icmp eq i32 %bf.clear122, 8, !dbg !6070
  br i1 %cmp123, label %cond.true139, label %lor.lhs.false124, !dbg !6070

lor.lhs.false124:                                 ; preds = %if.end118
  %91 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn125 = getelementptr inbounds %struct.invariant, %struct.invariant* %91, i32 0, i32 5, !dbg !6070
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn125, align 8, !dbg !6070
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !6070
  %bf.load126 = load i32, i32* %93, align 8, !dbg !6070
  %bf.clear127 = and i32 %bf.load126, 65535, !dbg !6070
  %cmp128 = icmp eq i32 %bf.clear127, 7, !dbg !6070
  br i1 %cmp128, label %cond.true139, label %lor.lhs.false129, !dbg !6070

lor.lhs.false129:                                 ; preds = %lor.lhs.false124
  %94 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn130 = getelementptr inbounds %struct.invariant, %struct.invariant* %94, i32 0, i32 5, !dbg !6070
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn130, align 8, !dbg !6070
  %96 = bitcast %struct.rtx_def* %95 to i32*, !dbg !6070
  %bf.load131 = load i32, i32* %96, align 8, !dbg !6070
  %bf.clear132 = and i32 %bf.load131, 65535, !dbg !6070
  %cmp133 = icmp eq i32 %bf.clear132, 9, !dbg !6070
  br i1 %cmp133, label %cond.true139, label %lor.lhs.false134, !dbg !6070

lor.lhs.false134:                                 ; preds = %lor.lhs.false129
  %97 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn135 = getelementptr inbounds %struct.invariant, %struct.invariant* %97, i32 0, i32 5, !dbg !6070
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn135, align 8, !dbg !6070
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !6070
  %bf.load136 = load i32, i32* %99, align 8, !dbg !6070
  %bf.clear137 = and i32 %bf.load136, 65535, !dbg !6070
  %cmp138 = icmp eq i32 %bf.clear137, 10, !dbg !6070
  br i1 %cmp138, label %cond.true139, label %cond.false164, !dbg !6070

cond.true139:                                     ; preds = %lor.lhs.false134, %lor.lhs.false129, %lor.lhs.false124, %if.end118
  %100 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn140 = getelementptr inbounds %struct.invariant, %struct.invariant* %100, i32 0, i32 5, !dbg !6070
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn140, align 8, !dbg !6070
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !6070
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !6070
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 5, !dbg !6070
  %rt_rtx144 = bitcast %union.rtunion_def* %arrayidx143 to %struct.rtx_def**, !dbg !6070
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx144, align 8, !dbg !6070
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !6070
  %bf.load145 = load i32, i32* %103, align 8, !dbg !6070
  %bf.clear146 = and i32 %bf.load145, 65535, !dbg !6070
  %cmp147 = icmp eq i32 %bf.clear146, 23, !dbg !6070
  br i1 %cmp147, label %cond.true148, label %cond.false154, !dbg !6070

cond.true148:                                     ; preds = %cond.true139
  %104 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn149 = getelementptr inbounds %struct.invariant, %struct.invariant* %104, i32 0, i32 5, !dbg !6070
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn149, align 8, !dbg !6070
  %u150 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !6070
  %fld151 = bitcast %union.u* %u150 to [1 x %union.rtunion_def]*, !dbg !6070
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld151, i64 0, i64 5, !dbg !6070
  %rt_rtx153 = bitcast %union.rtunion_def* %arrayidx152 to %struct.rtx_def**, !dbg !6070
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx153, align 8, !dbg !6070
  br label %cond.end162, !dbg !6070

cond.false154:                                    ; preds = %cond.true139
  %107 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn155 = getelementptr inbounds %struct.invariant, %struct.invariant* %107, i32 0, i32 5, !dbg !6070
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn155, align 8, !dbg !6070
  %109 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6070
  %insn156 = getelementptr inbounds %struct.invariant, %struct.invariant* %109, i32 0, i32 5, !dbg !6070
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn156, align 8, !dbg !6070
  %u157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !6070
  %fld158 = bitcast %union.u* %u157 to [1 x %union.rtunion_def]*, !dbg !6070
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i64 0, i64 5, !dbg !6070
  %rt_rtx160 = bitcast %union.rtunion_def* %arrayidx159 to %struct.rtx_def**, !dbg !6070
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx160, align 8, !dbg !6070
  %call161 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %108, %struct.rtx_def* %111), !dbg !6070
  br label %cond.end162, !dbg !6070

cond.end162:                                      ; preds = %cond.false154, %cond.true148
  %cond163 = phi %struct.rtx_def* [ %106, %cond.true148 ], [ %call161, %cond.false154 ], !dbg !6070
  br label %cond.end165, !dbg !6070

cond.false164:                                    ; preds = %lor.lhs.false134
  br label %cond.end165, !dbg !6070

cond.end165:                                      ; preds = %cond.false164, %cond.end162
  %cond166 = phi %struct.rtx_def* [ %cond163, %cond.end162 ], [ null, %cond.false164 ], !dbg !6070
  store %struct.rtx_def* %cond166, %struct.rtx_def** %set, align 8, !dbg !6071
  %112 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6072
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !6072
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !6072
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 0, !dbg !6072
  %rt_rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**, !dbg !6072
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx170, align 8, !dbg !6072
  %114 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6073
  %call171 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %113, %struct.rtx_def* %114), !dbg !6074
  %115 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6075
  %insn172 = getelementptr inbounds %struct.invariant, %struct.invariant* %115, i32 0, i32 5, !dbg !6076
  %116 = load %struct.rtx_def*, %struct.rtx_def** %insn172, align 8, !dbg !6076
  %call173 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call171, %struct.rtx_def* %116), !dbg !6077
  %117 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6078
  %insn174 = getelementptr inbounds %struct.invariant, %struct.invariant* %117, i32 0, i32 5, !dbg !6079
  %118 = load %struct.rtx_def*, %struct.rtx_def** %insn174, align 8, !dbg !6079
  %call175 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %118), !dbg !6080
  br label %if.end176

if.end176:                                        ; preds = %cond.end165, %if.end113
  %119 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6081
  %120 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6082
  %reg177 = getelementptr inbounds %struct.invariant, %struct.invariant* %120, i32 0, i32 2, !dbg !6083
  store %struct.rtx_def* %119, %struct.rtx_def** %reg177, align 8, !dbg !6084
  %121 = load i32, i32* %regno, align 4, !dbg !6085
  %122 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6086
  %orig_regno178 = getelementptr inbounds %struct.invariant, %struct.invariant* %122, i32 0, i32 3, !dbg !6087
  store i32 %121, i32* %orig_regno178, align 8, !dbg !6088
  %123 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6089
  %def = getelementptr inbounds %struct.invariant, %struct.invariant* %123, i32 0, i32 4, !dbg !6091
  %124 = load %struct.def*, %struct.def** %def, align 8, !dbg !6091
  %tobool179 = icmp ne %struct.def* %124, null, !dbg !6089
  br i1 %tobool179, label %if.then180, label %if.end189, !dbg !6092

if.then180:                                       ; preds = %if.end176
  %125 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6093
  %def181 = getelementptr inbounds %struct.invariant, %struct.invariant* %125, i32 0, i32 4, !dbg !6096
  %126 = load %struct.def*, %struct.def** %def181, align 8, !dbg !6096
  %uses = getelementptr inbounds %struct.def, %struct.def* %126, i32 0, i32 0, !dbg !6097
  %127 = load %struct.use*, %struct.use** %uses, align 8, !dbg !6097
  store %struct.use* %127, %struct.use** %use, align 8, !dbg !6098
  br label %for.cond182, !dbg !6099

for.cond182:                                      ; preds = %for.inc187, %if.then180
  %128 = load %struct.use*, %struct.use** %use, align 8, !dbg !6100
  %tobool183 = icmp ne %struct.use* %128, null, !dbg !6102
  br i1 %tobool183, label %for.body184, label %for.end188, !dbg !6102

for.body184:                                      ; preds = %for.cond182
  %129 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6103
  %130 = load %struct.use*, %struct.use** %use, align 8, !dbg !6105
  %pos = getelementptr inbounds %struct.use, %struct.use* %130, i32 0, i32 0, !dbg !6106
  %131 = load %struct.rtx_def**, %struct.rtx_def*** %pos, align 8, !dbg !6106
  store %struct.rtx_def* %129, %struct.rtx_def** %131, align 8, !dbg !6107
  %132 = load %struct.use*, %struct.use** %use, align 8, !dbg !6108
  %insn185 = getelementptr inbounds %struct.use, %struct.use* %132, i32 0, i32 1, !dbg !6109
  %133 = load %struct.rtx_def*, %struct.rtx_def** %insn185, align 8, !dbg !6109
  %call186 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %133), !dbg !6110
  br label %for.inc187, !dbg !6111

for.inc187:                                       ; preds = %for.body184
  %134 = load %struct.use*, %struct.use** %use, align 8, !dbg !6112
  %next = getelementptr inbounds %struct.use, %struct.use* %134, i32 0, i32 3, !dbg !6113
  %135 = load %struct.use*, %struct.use** %next, align 8, !dbg !6113
  store %struct.use* %135, %struct.use** %use, align 8, !dbg !6114
  br label %for.cond182, !dbg !6115, !llvm.loop !6116

for.end188:                                       ; preds = %for.cond182
  br label %if.end189, !dbg !6118

if.end189:                                        ; preds = %for.end188, %if.end176
  store i8 1, i8* %retval, align 1, !dbg !6119
  br label %return, !dbg !6119

fail:                                             ; preds = %if.then117, %if.then91, %if.then22
  call void @llvm.dbg.label(metadata !6120), !dbg !6121
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6122
  %tobool190 = icmp ne %struct._IO_FILE* %136, null, !dbg !6122
  br i1 %tobool190, label %if.then191, label %if.end193, !dbg !6124

if.then191:                                       ; preds = %fail
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6125
  %138 = load i32, i32* %invno.addr, align 4, !dbg !6126
  %call192 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17, i64 0, i64 0), i32 %138), !dbg !6127
  br label %if.end193, !dbg !6127

if.end193:                                        ; preds = %if.then191, %fail
  %139 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6128
  %move194 = getelementptr inbounds %struct.invariant, %struct.invariant* %139, i32 0, i32 7, !dbg !6129
  store i8 0, i8* %move194, align 1, !dbg !6130
  %140 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6131
  %reg195 = getelementptr inbounds %struct.invariant, %struct.invariant* %140, i32 0, i32 2, !dbg !6132
  store %struct.rtx_def* null, %struct.rtx_def** %reg195, align 8, !dbg !6133
  %141 = load %struct.invariant*, %struct.invariant** %inv, align 8, !dbg !6134
  %orig_regno196 = getelementptr inbounds %struct.invariant, %struct.invariant* %141, i32 0, i32 3, !dbg !6135
  store i32 -1, i32* %orig_regno196, align 8, !dbg !6136
  store i8 0, i8* %retval, align 1, !dbg !6137
  br label %return, !dbg !6137

return:                                           ; preds = %if.end193, %if.end189, %if.then12, %if.then
  %142 = load i8, i8* %retval, align 1, !dbg !6138
  ret i8 %142, !dbg !6138
}

declare dso_local zeroext i8 @resize_reg_info() #2

declare dso_local void @setup_reg_classes(i32, i32, i32, i32) #2

declare dso_local i32 @reg_preferred_class(i32) #2

declare dso_local i32 @reg_alternate_class(i32) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx_and_attrs(%struct.rtx_def*) #2

declare dso_local zeroext i8 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_use_list(%struct.use* %use) #0 !dbg !6139 {
entry:
  %use.addr = alloca %struct.use*, align 8
  %next = alloca %struct.use*, align 8
  store %struct.use* %use, %struct.use** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.use** %use.addr, metadata !6142, metadata !DIExpression()), !dbg !6143
  call void @llvm.dbg.declare(metadata %struct.use** %next, metadata !6144, metadata !DIExpression()), !dbg !6145
  br label %for.cond, !dbg !6146

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.use*, %struct.use** %use.addr, align 8, !dbg !6147
  %tobool = icmp ne %struct.use* %0, null, !dbg !6150
  br i1 %tobool, label %for.body, label %for.end, !dbg !6150

for.body:                                         ; preds = %for.cond
  %1 = load %struct.use*, %struct.use** %use.addr, align 8, !dbg !6151
  %next1 = getelementptr inbounds %struct.use, %struct.use* %1, i32 0, i32 3, !dbg !6153
  %2 = load %struct.use*, %struct.use** %next1, align 8, !dbg !6153
  store %struct.use* %2, %struct.use** %next, align 8, !dbg !6154
  %3 = load %struct.use*, %struct.use** %use.addr, align 8, !dbg !6155
  %4 = bitcast %struct.use* %3 to i8*, !dbg !6155
  call void @free(i8* %4), !dbg !6156
  br label %for.inc, !dbg !6157

for.inc:                                          ; preds = %for.body
  %5 = load %struct.use*, %struct.use** %next, align 8, !dbg !6158
  store %struct.use* %5, %struct.use** %use.addr, align 8, !dbg !6159
  br label %for.cond, !dbg !6160, !llvm.loop !6161

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6163
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_invariant_p_heap_free(%struct.VEC_invariant_p_heap** %vec_) #0 !dbg !6164 {
entry:
  %vec_.addr = alloca %struct.VEC_invariant_p_heap**, align 8
  store %struct.VEC_invariant_p_heap** %vec_, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_invariant_p_heap*** %vec_.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  %0 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !6169
  %1 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %0, align 8, !dbg !6169
  %tobool = icmp ne %struct.VEC_invariant_p_heap* %1, null, !dbg !6169
  br i1 %tobool, label %if.then, label %if.end, !dbg !6168

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !6169
  %3 = load %struct.VEC_invariant_p_heap*, %struct.VEC_invariant_p_heap** %2, align 8, !dbg !6169
  %4 = bitcast %struct.VEC_invariant_p_heap* %3 to i8*, !dbg !6169
  call void @free(i8* %4), !dbg !6169
  br label %if.end, !dbg !6169

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_invariant_p_heap**, %struct.VEC_invariant_p_heap*** %vec_.addr, align 8, !dbg !6168
  store %struct.VEC_invariant_p_heap* null, %struct.VEC_invariant_p_heap** %5, align 8, !dbg !6168
  ret void, !dbg !6168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !6171 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6176, metadata !DIExpression()), !dbg !6177
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6178, metadata !DIExpression()), !dbg !6177
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !6179, metadata !DIExpression()), !dbg !6177
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6180
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6180
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6180

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6180
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6180
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !6180
  %3 = load i32, i32* %num, align 4, !dbg !6180
  %cmp = icmp ult i32 %1, %3, !dbg !6180
  br i1 %cmp, label %if.then, label %if.else, !dbg !6177

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6182
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6182
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6182
  %idxprom = zext i32 %5 to i64, !dbg !6182
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6182
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6182
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !6182
  store i32 %6, i32* %7, align 4, !dbg !6182
  store i32 1, i32* %retval, align 4, !dbg !6182
  br label %return, !dbg !6182

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !6184
  store i32 0, i32* %8, align 4, !dbg !6184
  store i32 0, i32* %retval, align 4, !dbg !6184
  br label %return, !dbg !6184

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6177
  ret i32 %9, !dbg !6177
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !6186 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !6189, metadata !DIExpression()), !dbg !6190
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6191
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6191
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !6191
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6191
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !6191
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6191
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !6191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6191

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6191
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6191
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !6191
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !6191
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !6191
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !6191
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !6191
  br label %cond.end, !dbg !6191

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6191
  %6 = load i32, i32* %num.addr, align 4, !dbg !6191
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !6191
  ret %struct.loop* %call, !dbg !6192
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !6193 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6197, metadata !DIExpression()), !dbg !6198
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6199
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !6199
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6199
  br i1 %tobool, label %if.then, label %if.end, !dbg !6198

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6199
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !6199
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !6199
  call void @free(i8* %4), !dbg !6199
  br label %if.end, !dbg !6199

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6198
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !6198
  ret void, !dbg !6198
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2135, !2136, !2137}
!llvm.ident = !{!2138}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "curr_loop", scope: !2, file: !3, line: 142, type: !802, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !795, globals: !2115, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "loop-invariant.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !147, !152, !157, !176, !183, !190, !384, !393, !397, !407, !412, !535, !678, !712, !718, !748, !752, !756, !774, !780, !786, !791}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !142, line: 363, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146}
!144 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !142, line: 355, baseType: !7, size: 32, elements: !148)
!148 = !{!149, !150, !151}
!149 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!150 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!151 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!152 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !153, line: 474, baseType: !7, size: 32, elements: !154)
!153 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!154 = !{!155, !156}
!155 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !158, line: 280, baseType: !7, size: 32, elements: !159)
!158 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!159 = !{!160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175}
!160 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !158, line: 1817, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !158, line: 1805, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189}
!185 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!190 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !158, line: 39, baseType: !7, size: 32, elements: !191)
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383}
!192 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!281 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!282 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!283 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!284 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!285 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!286 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!287 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!288 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!289 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!290 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!291 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!292 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!293 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!294 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!295 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!296 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!297 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!298 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!299 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!300 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!301 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!302 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!303 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!304 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!305 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!307 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!308 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!309 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!310 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!311 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!312 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!313 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!314 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!315 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!316 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!317 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!318 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!319 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!320 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!321 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!322 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!323 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!324 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!325 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!326 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!327 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!328 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!329 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!330 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!331 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!332 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!333 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!334 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!335 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!336 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!337 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!338 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!339 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!340 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!341 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!342 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!343 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!344 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!356 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!357 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!358 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!359 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!360 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!361 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!377 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!378 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!379 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!380 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!381 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!382 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!383 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !385, line: 31, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392}
!387 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!393 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !385, line: 91, baseType: !7, size: 32, elements: !394)
!394 = !{!395, !396}
!395 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!396 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !398, line: 463, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403, !404, !405, !406}
!400 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!403 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!404 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!405 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!406 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !385, line: 498, baseType: !7, size: 32, elements: !408)
!408 = !{!409, !410, !411}
!409 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!410 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!411 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!412 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !413, line: 82, baseType: !7, size: 32, elements: !414)
!413 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!414 = !{!415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534}
!415 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!416 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!417 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!418 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!419 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!420 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!421 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!422 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!423 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!424 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!425 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!426 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!427 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!428 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!429 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!430 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!431 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!432 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!433 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!434 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!435 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!436 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!437 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!438 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!439 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!440 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!441 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!442 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!443 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!444 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!445 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!446 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!447 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!448 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!449 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!450 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!451 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!452 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!453 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!454 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!455 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!456 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!457 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!458 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!459 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!460 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!461 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!462 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!463 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!464 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!465 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!466 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!467 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!468 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!469 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!470 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!471 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!472 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!473 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!474 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!475 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!476 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!477 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!478 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!479 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!480 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!481 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!482 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!483 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!484 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!485 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!486 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!487 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!488 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!489 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!490 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!491 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!492 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!493 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!494 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!495 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!496 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!497 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!498 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!499 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!500 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!501 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!502 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!503 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!504 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!505 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!506 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!507 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!508 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!509 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!510 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!511 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!512 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!513 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!514 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!515 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!516 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!517 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!518 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!519 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!520 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!521 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!522 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!523 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!524 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!525 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!526 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!527 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!528 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!529 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!530 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!531 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!532 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!533 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!534 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!535 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !536, line: 45, baseType: !7, size: 32, elements: !537)
!536 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!537 = !{!538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677}
!538 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!539 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!540 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!541 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!542 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!543 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!544 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!545 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!546 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!547 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!548 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!549 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!550 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!551 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!552 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!553 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!554 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!555 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!556 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!557 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!558 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!559 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!560 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!561 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!562 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!563 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!564 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!565 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!566 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!567 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!568 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!569 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!570 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!571 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!572 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!573 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!574 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!575 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!576 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!577 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!578 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!579 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!580 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!581 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!582 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!583 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!584 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!585 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!586 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!587 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!588 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!589 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!590 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!591 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!592 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!593 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!594 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!595 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!596 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!597 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!598 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!599 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!600 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!601 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!602 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!603 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!604 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!605 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!606 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!607 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!608 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!609 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!610 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!611 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!612 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!613 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!614 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!615 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!616 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!617 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!618 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!619 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!620 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!621 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!622 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!623 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!624 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!625 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!626 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!627 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!628 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!629 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!630 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!631 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!632 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!633 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!634 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!635 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!636 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!637 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!638 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!639 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!640 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!641 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!642 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!643 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!644 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!645 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!646 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!647 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!648 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!649 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!650 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!651 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!652 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!653 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!654 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!655 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!656 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!657 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!658 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!659 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!660 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!661 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!662 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!663 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!664 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!665 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!666 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!667 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!668 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!669 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!670 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!671 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!672 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!673 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!674 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!675 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!676 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!677 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!678 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !536, line: 836, baseType: !7, size: 32, elements: !679)
!679 = !{!680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711}
!680 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!681 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!682 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!683 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!684 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!685 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!686 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!687 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!688 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!689 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!690 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!691 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!692 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!693 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!694 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!695 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!696 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!697 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!698 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!699 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!700 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!701 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!702 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!703 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!704 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!705 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!706 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!707 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!708 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!709 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!710 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!711 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!712 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_region", file: !713, line: 228, baseType: !7, size: 32, elements: !714)
!713 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!714 = !{!715, !716, !717}
!715 = !DIEnumerator(name: "IRA_REGION_ONE", value: 0, isUnsigned: true)
!716 = !DIEnumerator(name: "IRA_REGION_ALL", value: 1, isUnsigned: true)
!717 = !DIEnumerator(name: "IRA_REGION_MIXED", value: 2, isUnsigned: true)
!718 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !153, line: 1188, baseType: !7, size: 32, elements: !719)
!719 = !{!720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747}
!720 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!721 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!722 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!723 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!724 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!725 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!726 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!727 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!728 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!729 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!730 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!731 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!732 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!733 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!734 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!735 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!736 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!737 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!738 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!739 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!740 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!741 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!742 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!743 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!744 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!745 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!746 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!747 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!748 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !142, line: 912, baseType: !7, size: 32, elements: !749)
!749 = !{!750, !751}
!750 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!751 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!752 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_chain_flags", file: !398, line: 456, baseType: !7, size: 32, elements: !753)
!753 = !{!754, !755}
!754 = !DIEnumerator(name: "DF_DU_CHAIN", value: 1, isUnsigned: true)
!755 = !DIEnumerator(name: "DF_UD_CHAIN", value: 2, isUnsigned: true)
!756 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_flags", file: !398, line: 84, baseType: !7, size: 32, elements: !757)
!757 = !{!758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773}
!758 = !DIEnumerator(name: "DF_REF_CONDITIONAL", value: 1, isUnsigned: true)
!759 = !DIEnumerator(name: "DF_REF_AT_TOP", value: 2, isUnsigned: true)
!760 = !DIEnumerator(name: "DF_REF_IN_NOTE", value: 4, isUnsigned: true)
!761 = !DIEnumerator(name: "DF_HARD_REG_LIVE", value: 8, isUnsigned: true)
!762 = !DIEnumerator(name: "DF_REF_PARTIAL", value: 16, isUnsigned: true)
!763 = !DIEnumerator(name: "DF_REF_READ_WRITE", value: 32, isUnsigned: true)
!764 = !DIEnumerator(name: "DF_REF_MAY_CLOBBER", value: 64, isUnsigned: true)
!765 = !DIEnumerator(name: "DF_REF_MUST_CLOBBER", value: 128, isUnsigned: true)
!766 = !DIEnumerator(name: "DF_REF_SIGN_EXTRACT", value: 256, isUnsigned: true)
!767 = !DIEnumerator(name: "DF_REF_ZERO_EXTRACT", value: 512, isUnsigned: true)
!768 = !DIEnumerator(name: "DF_REF_STRICT_LOW_PART", value: 1024, isUnsigned: true)
!769 = !DIEnumerator(name: "DF_REF_SUBREG", value: 2048, isUnsigned: true)
!770 = !DIEnumerator(name: "DF_REF_MW_HARDREG", value: 4096, isUnsigned: true)
!771 = !DIEnumerator(name: "DF_REF_CALL_STACK_USAGE", value: 8192, isUnsigned: true)
!772 = !DIEnumerator(name: "DF_REF_REG_MARKER", value: 16384, isUnsigned: true)
!773 = !DIEnumerator(name: "DF_REF_PRE_POST_MODIFY", value: 32768, isUnsigned: true)
!774 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_class", file: !398, line: 76, baseType: !7, size: 32, elements: !775)
!775 = !{!776, !777, !778, !779}
!776 = !DIEnumerator(name: "DF_REF_BASE", value: 0, isUnsigned: true)
!777 = !DIEnumerator(name: "DF_REF_ARTIFICIAL", value: 1, isUnsigned: true)
!778 = !DIEnumerator(name: "DF_REF_REGULAR", value: 2, isUnsigned: true)
!779 = !DIEnumerator(name: "DF_REF_EXTRACT", value: 3, isUnsigned: true)
!780 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_type", file: !398, line: 81, baseType: !7, size: 32, elements: !781)
!781 = !{!782, !783, !784, !785}
!782 = !DIEnumerator(name: "DF_REF_REG_DEF", value: 0, isUnsigned: true)
!783 = !DIEnumerator(name: "DF_REF_REG_USE", value: 1, isUnsigned: true)
!784 = !DIEnumerator(name: "DF_REF_REG_MEM_LOAD", value: 2, isUnsigned: true)
!785 = !DIEnumerator(name: "DF_REF_REG_MEM_STORE", value: 3, isUnsigned: true)
!786 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !787, line: 147, baseType: !7, size: 32, elements: !788)
!787 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!788 = !{!789, !790}
!789 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!790 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!791 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fpmath_unit", file: !153, line: 2201, baseType: !7, size: 32, elements: !792)
!792 = !{!793, !794}
!793 = !DIEnumerator(name: "FPMATH_387", value: 1, isUnsigned: true)
!794 = !DIEnumerator(name: "FPMATH_SSE", value: 2, isUnsigned: true)
!795 = !{!7, !796, !797, !798, !535, !678, !5, !2040, !2048, !2050, !1424, !2062, !2044, !2105, !839, !2083, !2075, !2087, !2106, !2074, !2114}
!796 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !799, size: 64)
!799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_data", file: !3, line: 62, size: 1472, elements: !800)
!800 = !{!801, !2032, !2033, !2037, !2039}
!801 = !DIDerivedType(tag: DW_TAG_member, name: "outermost_exit", scope: !799, file: !3, line: 64, baseType: !802, size: 64)
!802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !803, size: 64)
!803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !385, line: 100, size: 1216, elements: !804)
!804 = !{!805, !806, !807, !1996, !1997, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2022, !2030, !2031}
!805 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !803, file: !385, line: 102, baseType: !796, size: 32)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !803, file: !385, line: 105, baseType: !7, size: 32, offset: 32)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !803, file: !385, line: 108, baseType: !808, size: 64, offset: 64)
!808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !809, size: 64)
!809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !142, line: 217, size: 832, elements: !810)
!810 = !{!811, !1963, !1964, !1965, !1966, !1970, !1971, !1972, !1990, !1991, !1992, !1993, !1994, !1995}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !809, file: !142, line: 219, baseType: !812, size: 64)
!812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !813, size: 64)
!813 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !142, line: 151, baseType: !814)
!814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !142, line: 151, size: 128, elements: !815)
!815 = !{!816}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !814, file: !142, line: 151, baseType: !817, size: 128)
!817 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !142, line: 150, baseType: !818)
!818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !142, line: 150, size: 128, elements: !819)
!819 = !{!820, !821, !822}
!820 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !818, file: !142, line: 150, baseType: !7, size: 32)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !818, file: !142, line: 150, baseType: !7, size: 32, offset: 32)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !818, file: !142, line: 150, baseType: !823, size: 64, offset: 64)
!823 = !DICompositeType(tag: DW_TAG_array_type, baseType: !824, size: 64, elements: !876)
!824 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !825, line: 108, baseType: !826)
!825 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !827, size: 64)
!827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !142, line: 122, size: 512, elements: !828)
!828 = !{!829, !830, !831, !1955, !1956, !1957, !1958, !1959, !1960, !1961}
!829 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !827, file: !142, line: 124, baseType: !808, size: 64)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !827, file: !142, line: 125, baseType: !808, size: 64, offset: 64)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !827, file: !142, line: 131, baseType: !832, size: 64, offset: 128)
!832 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !142, line: 128, size: 64, elements: !833)
!833 = !{!834, !838}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !832, file: !142, line: 129, baseType: !835, size: 64)
!835 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !825, line: 66, baseType: !836)
!836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !837, size: 64)
!837 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !825, line: 65, flags: DIFlagFwdDecl)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !832, file: !142, line: 130, baseType: !839, size: 64)
!839 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !825, line: 50, baseType: !840)
!840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !841, size: 64)
!841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !536, line: 240, size: 384, elements: !842)
!842 = !{!843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853}
!843 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !841, file: !536, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !841, file: !536, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !841, file: !536, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !841, file: !536, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !841, file: !536, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !841, file: !536, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !841, file: !536, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !841, file: !536, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !841, file: !536, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !841, file: !536, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !841, file: !536, line: 321, baseType: !854, size: 320, offset: 64)
!854 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !536, line: 315, size: 320, elements: !855)
!855 = !{!856, !1890, !1892, !1953, !1954}
!856 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !854, file: !536, line: 316, baseType: !857, size: 64)
!857 = !DICompositeType(tag: DW_TAG_array_type, baseType: !858, size: 64, elements: !876)
!858 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !536, line: 183, baseType: !859)
!859 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !536, line: 166, size: 64, elements: !860)
!860 = !{!861, !862, !863, !867, !868, !878, !879, !891, !894, !957, !1868, !1869, !1880, !1887}
!861 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !859, file: !536, line: 168, baseType: !796, size: 32)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !859, file: !536, line: 169, baseType: !7, size: 32)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !859, file: !536, line: 170, baseType: !864, size: 64)
!864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !865, size: 64)
!865 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !866)
!866 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !859, file: !536, line: 171, baseType: !839, size: 64)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !859, file: !536, line: 172, baseType: !869, size: 64)
!869 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !825, line: 53, baseType: !870)
!870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !871, size: 64)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !536, line: 359, size: 128, elements: !872)
!872 = !{!873, !874}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !871, file: !536, line: 360, baseType: !796, size: 32)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !871, file: !536, line: 361, baseType: !875, size: 64, offset: 64)
!875 = !DICompositeType(tag: DW_TAG_array_type, baseType: !839, size: 64, elements: !876)
!876 = !{!877}
!877 = !DISubrange(count: 1)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !859, file: !536, line: 173, baseType: !5, size: 32)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !859, file: !536, line: 174, baseType: !880, size: 32)
!880 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !536, line: 133, baseType: !881)
!881 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !536, line: 115, size: 32, elements: !882)
!882 = !{!883, !884, !885, !886, !887, !888, !889, !890}
!883 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !881, file: !536, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !881, file: !536, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !881, file: !536, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !881, file: !536, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !881, file: !536, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !881, file: !536, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !881, file: !536, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !881, file: !536, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !859, file: !536, line: 175, baseType: !892, size: 64)
!892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !893, size: 64)
!893 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !536, line: 175, flags: DIFlagFwdDecl)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !859, file: !536, line: 176, baseType: !895, size: 64)
!895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !896, size: 64)
!896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !897, line: 75, size: 256, elements: !898)
!897 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!898 = !{!899, !914, !915, !916}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !896, file: !897, line: 76, baseType: !900, size: 64)
!900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !901, size: 64)
!901 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !897, line: 68, baseType: !902)
!902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !897, line: 63, size: 320, elements: !903)
!903 = !{!904, !906, !907, !908}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !902, file: !897, line: 64, baseType: !905, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !902, size: 64)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !902, file: !897, line: 65, baseType: !905, size: 64, offset: 64)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !902, file: !897, line: 66, baseType: !7, size: 32, offset: 128)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !902, file: !897, line: 67, baseType: !909, size: 128, offset: 192)
!909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !910, size: 128, elements: !912)
!910 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !897, line: 29, baseType: !911)
!911 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!912 = !{!913}
!913 = !DISubrange(count: 2)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !896, file: !897, line: 77, baseType: !900, size: 64, offset: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !896, file: !897, line: 78, baseType: !7, size: 32, offset: 128)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !896, file: !897, line: 79, baseType: !917, size: 64, offset: 192)
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!918 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !897, line: 49, baseType: !919)
!919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !897, line: 45, size: 832, elements: !920)
!920 = !{!921, !922, !923}
!921 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !919, file: !897, line: 46, baseType: !905, size: 64)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !919, file: !897, line: 47, baseType: !895, size: 64, offset: 64)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !919, file: !897, line: 48, baseType: !924, size: 704, offset: 128)
!924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !925, line: 164, size: 704, elements: !926)
!925 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!926 = !{!927, !929, !940, !941, !942, !943, !944, !945, !949, !953, !954, !955, !956}
!927 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !924, file: !925, line: 166, baseType: !928, size: 64)
!928 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !924, file: !925, line: 167, baseType: !930, size: 64, offset: 64)
!930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !931, size: 64)
!931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !925, line: 157, size: 192, elements: !932)
!932 = !{!933, !935, !936}
!933 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !931, file: !925, line: 159, baseType: !934, size: 64)
!934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !866, size: 64)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !931, file: !925, line: 160, baseType: !930, size: 64, offset: 64)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !931, file: !925, line: 161, baseType: !937, size: 32, offset: 128)
!937 = !DICompositeType(tag: DW_TAG_array_type, baseType: !866, size: 32, elements: !938)
!938 = !{!939}
!939 = !DISubrange(count: 4)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !924, file: !925, line: 168, baseType: !934, size: 64, offset: 128)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !924, file: !925, line: 169, baseType: !934, size: 64, offset: 192)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !924, file: !925, line: 170, baseType: !934, size: 64, offset: 256)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !924, file: !925, line: 171, baseType: !928, size: 64, offset: 320)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !924, file: !925, line: 172, baseType: !796, size: 32, offset: 384)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !924, file: !925, line: 176, baseType: !946, size: 64, offset: 448)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!947 = !DISubroutineType(types: !948)
!948 = !{!930, !797, !928}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !924, file: !925, line: 177, baseType: !950, size: 64, offset: 512)
!950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !951, size: 64)
!951 = !DISubroutineType(types: !952)
!952 = !{null, !797, !930}
!953 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !924, file: !925, line: 178, baseType: !797, size: 64, offset: 576)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !924, file: !925, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !924, file: !925, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !924, file: !925, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !859, file: !536, line: 177, baseType: !958, size: 64)
!958 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !825, line: 56, baseType: !959)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !158, line: 3371, size: 1792, elements: !961)
!961 = !{!962, !995, !1001, !1012, !1031, !1042, !1047, !1054, !1060, !1074, !1086, !1124, !1129, !1157, !1165, !1166, !1171, !1180, !1186, !1191, !1195, !1199, !1504, !1553, !1559, !1565, !1572, !1598, !1612, !1629, !1641, !1663, !1678, !1850}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !960, file: !158, line: 3372, baseType: !963, size: 64)
!963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !158, line: 360, size: 64, elements: !964)
!964 = !{!965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994}
!965 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !963, file: !158, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !963, file: !158, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !963, file: !158, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !963, file: !158, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !963, file: !158, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !963, file: !158, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !963, file: !158, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !963, file: !158, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !963, file: !158, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !963, file: !158, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !963, file: !158, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !963, file: !158, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !963, file: !158, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !963, file: !158, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !963, file: !158, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !963, file: !158, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !963, file: !158, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !963, file: !158, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !963, file: !158, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !963, file: !158, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !963, file: !158, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !963, file: !158, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !963, file: !158, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !963, file: !158, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !963, file: !158, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !963, file: !158, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !963, file: !158, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !963, file: !158, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !963, file: !158, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !963, file: !158, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !960, file: !158, line: 3373, baseType: !996, size: 192)
!996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !158, line: 402, size: 192, elements: !997)
!997 = !{!998, !999, !1000}
!998 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !996, file: !158, line: 403, baseType: !963, size: 64)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !996, file: !158, line: 404, baseType: !958, size: 64, offset: 64)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !996, file: !158, line: 405, baseType: !958, size: 64, offset: 128)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !960, file: !158, line: 3374, baseType: !1002, size: 320)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !158, line: 1384, size: 320, elements: !1003)
!1003 = !{!1004, !1005}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1002, file: !158, line: 1385, baseType: !996, size: 192)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1002, file: !158, line: 1386, baseType: !1006, size: 128, offset: 192)
!1006 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1007, line: 58, baseType: !1008)
!1007 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1007, line: 54, size: 128, elements: !1009)
!1009 = !{!1010, !1011}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1008, file: !1007, line: 56, baseType: !911, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1008, file: !1007, line: 57, baseType: !928, size: 64, offset: 64)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !960, file: !158, line: 3375, baseType: !1013, size: 256)
!1013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !158, line: 1397, size: 256, elements: !1014)
!1014 = !{!1015, !1016}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1013, file: !158, line: 1398, baseType: !996, size: 192)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1013, file: !158, line: 1399, baseType: !1017, size: 64, offset: 192)
!1017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1018, size: 64)
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1019, line: 52, size: 256, elements: !1020)
!1019 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1020 = !{!1021, !1022, !1023, !1024, !1025, !1026, !1027}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1018, file: !1019, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1018, file: !1019, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1018, file: !1019, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1018, file: !1019, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1018, file: !1019, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1018, file: !1019, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1018, file: !1019, line: 62, baseType: !1028, size: 192, offset: 64)
!1028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !911, size: 192, elements: !1029)
!1029 = !{!1030}
!1030 = !DISubrange(count: 3)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !960, file: !158, line: 3376, baseType: !1032, size: 256)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !158, line: 1408, size: 256, elements: !1033)
!1033 = !{!1034, !1035}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1032, file: !158, line: 1409, baseType: !996, size: 192)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1032, file: !158, line: 1410, baseType: !1036, size: 64, offset: 192)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1037, size: 64)
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1038, line: 27, size: 192, elements: !1039)
!1038 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1039 = !{!1040, !1041}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1037, file: !1038, line: 29, baseType: !1006, size: 128)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1037, file: !1038, line: 30, baseType: !5, size: 32, offset: 128)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !960, file: !158, line: 3377, baseType: !1043, size: 256)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !158, line: 1437, size: 256, elements: !1044)
!1044 = !{!1045, !1046}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1043, file: !158, line: 1438, baseType: !996, size: 192)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1043, file: !158, line: 1439, baseType: !958, size: 64, offset: 192)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !960, file: !158, line: 3378, baseType: !1048, size: 256)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !158, line: 1418, size: 256, elements: !1049)
!1049 = !{!1050, !1051, !1052}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1048, file: !158, line: 1419, baseType: !996, size: 192)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1048, file: !158, line: 1420, baseType: !796, size: 32, offset: 192)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1048, file: !158, line: 1421, baseType: !1053, size: 8, offset: 224)
!1053 = !DICompositeType(tag: DW_TAG_array_type, baseType: !866, size: 8, elements: !876)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !960, file: !158, line: 3379, baseType: !1055, size: 320)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !158, line: 1428, size: 320, elements: !1056)
!1056 = !{!1057, !1058, !1059}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1055, file: !158, line: 1429, baseType: !996, size: 192)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1055, file: !158, line: 1430, baseType: !958, size: 64, offset: 192)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1055, file: !158, line: 1431, baseType: !958, size: 64, offset: 256)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !960, file: !158, line: 3380, baseType: !1061, size: 320)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !158, line: 1460, size: 320, elements: !1062)
!1062 = !{!1063, !1064}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1061, file: !158, line: 1461, baseType: !996, size: 192)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1061, file: !158, line: 1462, baseType: !1065, size: 128, offset: 192)
!1065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1066, line: 31, size: 128, elements: !1067)
!1066 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1067 = !{!1068, !1072, !1073}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1065, file: !1066, line: 32, baseType: !1069, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1071)
!1071 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1065, file: !1066, line: 33, baseType: !7, size: 32, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1065, file: !1066, line: 34, baseType: !7, size: 32, offset: 96)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !960, file: !158, line: 3381, baseType: !1075, size: 384)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !158, line: 2507, size: 384, elements: !1076)
!1076 = !{!1077, !1078, !1083, !1084, !1085}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1075, file: !158, line: 2508, baseType: !996, size: 192)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1075, file: !158, line: 2509, baseType: !1079, size: 32, offset: 192)
!1079 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1080, line: 58, baseType: !1081)
!1080 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1081 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1082, line: 44, baseType: !7)
!1082 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1075, file: !158, line: 2510, baseType: !7, size: 32, offset: 224)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1075, file: !158, line: 2511, baseType: !958, size: 64, offset: 256)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1075, file: !158, line: 2512, baseType: !958, size: 64, offset: 320)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !960, file: !158, line: 3382, baseType: !1087, size: 896)
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !158, line: 2652, size: 896, elements: !1088)
!1088 = !{!1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1087, file: !158, line: 2653, baseType: !1075, size: 384)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1087, file: !158, line: 2654, baseType: !958, size: 64, offset: 384)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1087, file: !158, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1087, file: !158, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1087, file: !158, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1087, file: !158, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1087, file: !158, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1087, file: !158, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1087, file: !158, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1087, file: !158, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1087, file: !158, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1087, file: !158, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1087, file: !158, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1087, file: !158, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1087, file: !158, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1087, file: !158, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1087, file: !158, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1087, file: !158, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1087, file: !158, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1087, file: !158, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1087, file: !158, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1087, file: !158, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1087, file: !158, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1087, file: !158, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1087, file: !158, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1087, file: !158, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1087, file: !158, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1087, file: !158, line: 2703, baseType: !7, size: 32, offset: 512)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1087, file: !158, line: 2705, baseType: !958, size: 64, offset: 576)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1087, file: !158, line: 2706, baseType: !958, size: 64, offset: 640)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1087, file: !158, line: 2707, baseType: !958, size: 64, offset: 704)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1087, file: !158, line: 2708, baseType: !958, size: 64, offset: 768)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1087, file: !158, line: 2711, baseType: !1122, size: 64, offset: 832)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1123, size: 64)
!1123 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !158, line: 2711, flags: DIFlagFwdDecl)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !960, file: !158, line: 3383, baseType: !1125, size: 960)
!1125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !158, line: 2756, size: 960, elements: !1126)
!1126 = !{!1127, !1128}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1125, file: !158, line: 2757, baseType: !1087, size: 896)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1125, file: !158, line: 2758, baseType: !839, size: 64, offset: 896)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !960, file: !158, line: 3384, baseType: !1130, size: 1472)
!1130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !158, line: 3114, size: 1472, elements: !1131)
!1131 = !{!1132, !1153, !1154, !1155, !1156}
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1130, file: !158, line: 3115, baseType: !1133, size: 1216)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !158, line: 2984, size: 1216, elements: !1134)
!1134 = !{!1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1133, file: !158, line: 2985, baseType: !1125, size: 960)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1133, file: !158, line: 2986, baseType: !958, size: 64, offset: 960)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1133, file: !158, line: 2987, baseType: !958, size: 64, offset: 1024)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1133, file: !158, line: 2988, baseType: !958, size: 64, offset: 1088)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1133, file: !158, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1133, file: !158, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1133, file: !158, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1133, file: !158, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1133, file: !158, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1133, file: !158, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1133, file: !158, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1133, file: !158, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1133, file: !158, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1133, file: !158, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1133, file: !158, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1133, file: !158, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1133, file: !158, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1133, file: !158, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1130, file: !158, line: 3117, baseType: !958, size: 64, offset: 1216)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1130, file: !158, line: 3119, baseType: !958, size: 64, offset: 1280)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1130, file: !158, line: 3121, baseType: !958, size: 64, offset: 1344)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1130, file: !158, line: 3123, baseType: !958, size: 64, offset: 1408)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !960, file: !158, line: 3385, baseType: !1158, size: 1088)
!1158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !158, line: 2874, size: 1088, elements: !1159)
!1159 = !{!1160, !1161, !1162}
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1158, file: !158, line: 2875, baseType: !1125, size: 960)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1158, file: !158, line: 2876, baseType: !839, size: 64, offset: 960)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1158, file: !158, line: 2877, baseType: !1163, size: 64, offset: 1024)
!1163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1164, size: 64)
!1164 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !158, line: 2856, flags: DIFlagFwdDecl)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !960, file: !158, line: 3386, baseType: !1133, size: 1216)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !960, file: !158, line: 3387, baseType: !1167, size: 1280)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !158, line: 3093, size: 1280, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1167, file: !158, line: 3094, baseType: !1133, size: 1216)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1167, file: !158, line: 3095, baseType: !1163, size: 64, offset: 1216)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !960, file: !158, line: 3388, baseType: !1172, size: 1216)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !158, line: 2824, size: 1216, elements: !1173)
!1173 = !{!1174, !1175, !1176, !1177, !1178, !1179}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1172, file: !158, line: 2825, baseType: !1087, size: 896)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1172, file: !158, line: 2827, baseType: !958, size: 64, offset: 896)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1172, file: !158, line: 2828, baseType: !958, size: 64, offset: 960)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1172, file: !158, line: 2829, baseType: !958, size: 64, offset: 1024)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1172, file: !158, line: 2830, baseType: !958, size: 64, offset: 1088)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1172, file: !158, line: 2831, baseType: !958, size: 64, offset: 1152)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !960, file: !158, line: 3389, baseType: !1181, size: 1024)
!1181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !158, line: 2850, size: 1024, elements: !1182)
!1182 = !{!1183, !1184, !1185}
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1181, file: !158, line: 2851, baseType: !1125, size: 960)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1181, file: !158, line: 2852, baseType: !796, size: 32, offset: 960)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1181, file: !158, line: 2853, baseType: !796, size: 32, offset: 992)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !960, file: !158, line: 3390, baseType: !1187, size: 1024)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !158, line: 2857, size: 1024, elements: !1188)
!1188 = !{!1189, !1190}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1187, file: !158, line: 2858, baseType: !1125, size: 960)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1187, file: !158, line: 2859, baseType: !1163, size: 64, offset: 960)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !960, file: !158, line: 3391, baseType: !1192, size: 960)
!1192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !158, line: 2862, size: 960, elements: !1193)
!1193 = !{!1194}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1192, file: !158, line: 2863, baseType: !1125, size: 960)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !960, file: !158, line: 3392, baseType: !1196, size: 1472)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !158, line: 3304, size: 1472, elements: !1197)
!1197 = !{!1198}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1196, file: !158, line: 3305, baseType: !1130, size: 1472)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !960, file: !158, line: 3393, baseType: !1200, size: 1792)
!1200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !158, line: 3248, size: 1792, elements: !1201)
!1201 = !{!1202, !1203, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503}
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1200, file: !158, line: 3249, baseType: !1130, size: 1472)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1200, file: !158, line: 3251, baseType: !1204, size: 64, offset: 1472)
!1204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1205, size: 64)
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1206, line: 463, size: 1152, elements: !1207)
!1206 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1207 = !{!1208, !1371, !1402, !1403, !1406, !1427, !1428, !1429, !1430, !1431, !1432, !1456, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482}
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1205, file: !1206, line: 464, baseType: !1209, size: 64)
!1209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1210, size: 64)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1211)
!1211 = !{!1212, !1261, !1274, !1288, !1339, !1352}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1210, file: !135, line: 197, baseType: !1213, size: 64)
!1213 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1214)
!1214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1215, size: 64)
!1215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1216)
!1216 = !{!1217, !1218, !1219, !1220, !1221, !1222, !1249, !1258, !1259, !1260}
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1215, file: !135, line: 119, baseType: !1214, size: 64)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1215, file: !135, line: 122, baseType: !1214, size: 64, offset: 64)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1215, file: !135, line: 123, baseType: !1214, size: 64, offset: 128)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1215, file: !135, line: 126, baseType: !796, size: 32, offset: 192)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1215, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1215, file: !135, line: 165, baseType: !1223, size: 192, offset: 256)
!1223 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1224)
!1224 = !{!1225, !1238, !1244}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1223, file: !135, line: 137, baseType: !1226, size: 128)
!1226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1227)
!1227 = !{!1228, !1237}
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1226, file: !135, line: 135, baseType: !1229, size: 64)
!1229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1230, size: 64)
!1230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1231)
!1231 = !{!1232, !1233, !1234, !1235, !1236}
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1230, file: !135, line: 96, baseType: !1229, size: 64)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1230, file: !135, line: 97, baseType: !1229, size: 64, offset: 64)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1230, file: !135, line: 101, baseType: !958, size: 64, offset: 128)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1230, file: !135, line: 106, baseType: !958, size: 64, offset: 192)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1230, file: !135, line: 111, baseType: !958, size: 64, offset: 256)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1226, file: !135, line: 136, baseType: !1229, size: 64, offset: 64)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1223, file: !135, line: 151, baseType: !1239, size: 192)
!1239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1240)
!1240 = !{!1241, !1242, !1243}
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1239, file: !135, line: 141, baseType: !958, size: 64)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1239, file: !135, line: 145, baseType: !958, size: 64, offset: 64)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1239, file: !135, line: 150, baseType: !796, size: 32, offset: 128)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1223, file: !135, line: 164, baseType: !1245, size: 128)
!1245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1246)
!1246 = !{!1247, !1248}
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1245, file: !135, line: 161, baseType: !958, size: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1245, file: !135, line: 163, baseType: !1079, size: 32, offset: 64)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1215, file: !135, line: 168, baseType: !1250, size: 64, offset: 448)
!1250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1251, size: 64)
!1251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1252)
!1252 = !{!1253, !1254, !1255, !1256, !1257}
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1251, file: !135, line: 70, baseType: !1250, size: 64)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1251, file: !135, line: 73, baseType: !1214, size: 64, offset: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1251, file: !135, line: 78, baseType: !958, size: 64, offset: 128)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1251, file: !135, line: 85, baseType: !839, size: 64, offset: 192)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1251, file: !135, line: 88, baseType: !796, size: 32, offset: 256)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1215, file: !135, line: 173, baseType: !839, size: 64, offset: 512)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1215, file: !135, line: 173, baseType: !839, size: 64, offset: 576)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1215, file: !135, line: 177, baseType: !1071, size: 8, offset: 640)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1210, file: !135, line: 200, baseType: !1262, size: 64, offset: 64)
!1262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1263, size: 64)
!1263 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1264)
!1264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1265)
!1265 = !{!1266}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1264, file: !135, line: 185, baseType: !1267, size: 128)
!1267 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1268)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1269)
!1269 = !{!1270, !1271, !1272}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1268, file: !135, line: 184, baseType: !7, size: 32)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1268, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !135, line: 184, baseType: !1273, size: 64, offset: 64)
!1273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1213, size: 64, elements: !876)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1210, file: !135, line: 203, baseType: !1275, size: 64, offset: 128)
!1275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1276, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1277)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1278)
!1278 = !{!1279}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1277, file: !135, line: 189, baseType: !1280, size: 128)
!1280 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1281)
!1281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1282)
!1282 = !{!1283, !1284, !1285}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1281, file: !135, line: 188, baseType: !7, size: 32)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1281, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1281, file: !135, line: 188, baseType: !1286, size: 64, offset: 64)
!1286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 64, elements: !876)
!1287 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1250)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1210, file: !135, line: 207, baseType: !1289, size: 64, offset: 192)
!1289 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !787, line: 144, baseType: !1290)
!1290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1291, size: 64)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !787, line: 100, size: 896, elements: !1292)
!1292 = !{!1293, !1301, !1306, !1311, !1313, !1316, !1317, !1318, !1319, !1320, !1325, !1327, !1328, !1333, !1338}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1291, file: !787, line: 102, baseType: !1294, size: 64)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !787, line: 52, baseType: !1295)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{!1298, !1299}
!1298 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !787, line: 47, baseType: !7)
!1299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1300, size: 64)
!1300 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1291, file: !787, line: 105, baseType: !1302, size: 64, offset: 64)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !787, line: 59, baseType: !1303)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = !DISubroutineType(types: !1305)
!1305 = !{!796, !1299, !1299}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1291, file: !787, line: 108, baseType: !1307, size: 64, offset: 128)
!1307 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !787, line: 63, baseType: !1308)
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1309, size: 64)
!1309 = !DISubroutineType(types: !1310)
!1310 = !{null, !797}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1291, file: !787, line: 111, baseType: !1312, size: 64, offset: 192)
!1312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !797, size: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1291, file: !787, line: 114, baseType: !1314, size: 64, offset: 256)
!1314 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1315, line: 46, baseType: !911)
!1315 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1291, file: !787, line: 117, baseType: !1314, size: 64, offset: 320)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1291, file: !787, line: 120, baseType: !1314, size: 64, offset: 384)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1291, file: !787, line: 124, baseType: !7, size: 32, offset: 448)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1291, file: !787, line: 128, baseType: !7, size: 32, offset: 480)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1291, file: !787, line: 131, baseType: !1321, size: 64, offset: 512)
!1321 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !787, line: 75, baseType: !1322)
!1322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1323, size: 64)
!1323 = !DISubroutineType(types: !1324)
!1324 = !{!797, !1314, !1314}
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1291, file: !787, line: 132, baseType: !1326, size: 64, offset: 576)
!1326 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !787, line: 78, baseType: !1308)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1291, file: !787, line: 135, baseType: !797, size: 64, offset: 640)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1291, file: !787, line: 136, baseType: !1329, size: 64, offset: 704)
!1329 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !787, line: 82, baseType: !1330)
!1330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1331, size: 64)
!1331 = !DISubroutineType(types: !1332)
!1332 = !{!797, !797, !1314, !1314}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1291, file: !787, line: 137, baseType: !1334, size: 64, offset: 768)
!1334 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !787, line: 83, baseType: !1335)
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1336, size: 64)
!1336 = !DISubroutineType(types: !1337)
!1337 = !{null, !797, !797}
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1291, file: !787, line: 141, baseType: !7, size: 32, offset: 832)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1210, file: !135, line: 211, baseType: !1340, size: 64, offset: 256)
!1340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1341, size: 64)
!1341 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !158, line: 183, baseType: !1342)
!1342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !158, line: 183, size: 128, elements: !1343)
!1343 = !{!1344}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1342, file: !158, line: 183, baseType: !1345, size: 128)
!1345 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !158, line: 182, baseType: !1346)
!1346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !158, line: 182, size: 128, elements: !1347)
!1347 = !{!1348, !1349, !1350}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1346, file: !158, line: 182, baseType: !7, size: 32)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1346, file: !158, line: 182, baseType: !7, size: 32, offset: 32)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1346, file: !158, line: 182, baseType: !1351, size: 64, offset: 64)
!1351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !958, size: 64, elements: !876)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1210, file: !135, line: 220, baseType: !1353, size: 64, offset: 320)
!1353 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1354)
!1354 = !{!1355, !1356}
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1353, file: !135, line: 218, baseType: !1340, size: 64)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1353, file: !135, line: 219, baseType: !1357, size: 64)
!1357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1358, size: 64)
!1358 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1359, line: 29, baseType: !1360)
!1359 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1359, line: 29, size: 96, elements: !1361)
!1361 = !{!1362}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1360, file: !1359, line: 29, baseType: !1363, size: 96)
!1363 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1359, line: 27, baseType: !1364)
!1364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1359, line: 27, size: 96, elements: !1365)
!1365 = !{!1366, !1367, !1368}
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1364, file: !1359, line: 27, baseType: !7, size: 32)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1364, file: !1359, line: 27, baseType: !7, size: 32, offset: 32)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1364, file: !1359, line: 27, baseType: !1369, size: 8, offset: 64)
!1369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1370, size: 8, elements: !876)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1359, line: 26, baseType: !1071)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1205, file: !1206, line: 467, baseType: !1372, size: 64, offset: 64)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !142, line: 374, size: 640, elements: !1374)
!1374 = !{!1375, !1377, !1378, !1391, !1392, !1393, !1394, !1395, !1396, !1398, !1400, !1401}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1373, file: !142, line: 377, baseType: !1376, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !825, line: 111, baseType: !808)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1373, file: !142, line: 378, baseType: !1376, size: 64, offset: 64)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1373, file: !142, line: 381, baseType: !1379, size: 64, offset: 128)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !142, line: 282, baseType: !1381)
!1381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !142, line: 282, size: 128, elements: !1382)
!1382 = !{!1383}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1381, file: !142, line: 282, baseType: !1384, size: 128)
!1384 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !142, line: 281, baseType: !1385)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !142, line: 281, size: 128, elements: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1385, file: !142, line: 281, baseType: !7, size: 32)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1385, file: !142, line: 281, baseType: !7, size: 32, offset: 32)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1385, file: !142, line: 281, baseType: !1390, size: 64, offset: 64)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1376, size: 64, elements: !876)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1373, file: !142, line: 384, baseType: !796, size: 32, offset: 192)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1373, file: !142, line: 387, baseType: !796, size: 32, offset: 224)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1373, file: !142, line: 390, baseType: !796, size: 32, offset: 256)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1373, file: !142, line: 394, baseType: !1379, size: 64, offset: 320)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1373, file: !142, line: 396, baseType: !141, size: 32, offset: 384)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1373, file: !142, line: 399, baseType: !1397, size: 64, offset: 416)
!1397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 64, elements: !912)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1373, file: !142, line: 402, baseType: !1399, size: 64, offset: 480)
!1399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !912)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1373, file: !142, line: 406, baseType: !796, size: 32, offset: 544)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1373, file: !142, line: 409, baseType: !796, size: 32, offset: 576)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1205, file: !1206, line: 470, baseType: !836, size: 64, offset: 128)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1205, file: !1206, line: 473, baseType: !1404, size: 64, offset: 192)
!1404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1405, size: 64)
!1405 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1206, line: 166, flags: DIFlagFwdDecl)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1205, file: !1206, line: 476, baseType: !1407, size: 64, offset: 256)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !385, line: 187, size: 256, elements: !1409)
!1409 = !{!1410, !1411, !1425, !1426}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1408, file: !385, line: 189, baseType: !796, size: 32)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1408, file: !385, line: 192, baseType: !1412, size: 64, offset: 64)
!1412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1413, size: 64)
!1413 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !385, line: 87, baseType: !1414)
!1414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !385, line: 87, size: 128, elements: !1415)
!1415 = !{!1416}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1414, file: !385, line: 87, baseType: !1417, size: 128)
!1417 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !385, line: 85, baseType: !1418)
!1418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !385, line: 85, size: 128, elements: !1419)
!1419 = !{!1420, !1421, !1422}
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1418, file: !385, line: 85, baseType: !7, size: 32)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1418, file: !385, line: 85, baseType: !7, size: 32, offset: 32)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1418, file: !385, line: 85, baseType: !1423, size: 64, offset: 64)
!1423 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1424, size: 64, elements: !876)
!1424 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !385, line: 84, baseType: !802)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1408, file: !385, line: 197, baseType: !1289, size: 64, offset: 128)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1408, file: !385, line: 200, baseType: !802, size: 64, offset: 192)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1205, file: !1206, line: 479, baseType: !1289, size: 64, offset: 320)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1205, file: !1206, line: 484, baseType: !958, size: 64, offset: 384)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1205, file: !1206, line: 488, baseType: !958, size: 64, offset: 448)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1205, file: !1206, line: 493, baseType: !958, size: 64, offset: 512)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1205, file: !1206, line: 496, baseType: !958, size: 64, offset: 576)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1205, file: !1206, line: 501, baseType: !1433, size: 64, offset: 640)
!1433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1434, size: 64)
!1434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !153, line: 2355, size: 576, elements: !1435)
!1435 = !{!1436, !1439, !1440, !1441, !1442, !1444, !1445, !1450, !1451, !1452, !1453, !1454, !1455}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1434, file: !153, line: 2356, baseType: !1437, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!1438 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !153, line: 2356, flags: DIFlagFwdDecl)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1434, file: !153, line: 2357, baseType: !864, size: 64, offset: 64)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1434, file: !153, line: 2358, baseType: !796, size: 32, offset: 128)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1434, file: !153, line: 2359, baseType: !796, size: 32, offset: 160)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1434, file: !153, line: 2360, baseType: !1443, size: 128, offset: 192)
!1443 = !DICompositeType(tag: DW_TAG_array_type, baseType: !796, size: 128, elements: !938)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1434, file: !153, line: 2364, baseType: !796, size: 32, offset: 320)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1434, file: !153, line: 2367, baseType: !1446, size: 128, offset: 384)
!1446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !153, line: 2349, size: 128, elements: !1447)
!1447 = !{!1448, !1449}
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1446, file: !153, line: 2351, baseType: !839, size: 64)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1446, file: !153, line: 2352, baseType: !928, size: 64, offset: 64)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1434, file: !153, line: 2371, baseType: !152, size: 32, offset: 512)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1434, file: !153, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1434, file: !153, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1434, file: !153, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1434, file: !153, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1434, file: !153, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1205, file: !1206, line: 504, baseType: !1457, size: 64, offset: 704)
!1457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1458, size: 64)
!1458 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1206, line: 504, flags: DIFlagFwdDecl)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1205, file: !1206, line: 507, baseType: !1289, size: 64, offset: 768)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1205, file: !1206, line: 510, baseType: !796, size: 32, offset: 832)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1205, file: !1206, line: 513, baseType: !796, size: 32, offset: 864)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1205, file: !1206, line: 516, baseType: !1079, size: 32, offset: 896)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1205, file: !1206, line: 519, baseType: !1079, size: 32, offset: 928)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1205, file: !1206, line: 522, baseType: !7, size: 32, offset: 960)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1205, file: !1206, line: 523, baseType: !7, size: 32, offset: 992)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1205, file: !1206, line: 528, baseType: !864, size: 64, offset: 1024)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1205, file: !1206, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1205, file: !1206, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1205, file: !1206, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1205, file: !1206, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1205, file: !1206, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1205, file: !1206, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1205, file: !1206, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1205, file: !1206, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1205, file: !1206, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1205, file: !1206, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1205, file: !1206, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1205, file: !1206, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1205, file: !1206, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1205, file: !1206, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1205, file: !1206, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1205, file: !1206, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1200, file: !158, line: 3254, baseType: !958, size: 64, offset: 1536)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1200, file: !158, line: 3257, baseType: !958, size: 64, offset: 1600)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1200, file: !158, line: 3258, baseType: !958, size: 64, offset: 1664)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1200, file: !158, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1200, file: !158, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1200, file: !158, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1200, file: !158, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1200, file: !158, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1200, file: !158, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1200, file: !158, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1200, file: !158, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1200, file: !158, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1200, file: !158, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1200, file: !158, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1200, file: !158, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1200, file: !158, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1200, file: !158, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1200, file: !158, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1200, file: !158, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1200, file: !158, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1200, file: !158, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !960, file: !158, line: 3394, baseType: !1505, size: 1344)
!1505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !158, line: 2279, size: 1344, elements: !1506)
!1506 = !{!1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1532, !1533, !1534, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1505, file: !158, line: 2280, baseType: !996, size: 192)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1505, file: !158, line: 2281, baseType: !958, size: 64, offset: 192)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1505, file: !158, line: 2282, baseType: !958, size: 64, offset: 256)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1505, file: !158, line: 2283, baseType: !958, size: 64, offset: 320)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1505, file: !158, line: 2284, baseType: !958, size: 64, offset: 384)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1505, file: !158, line: 2285, baseType: !7, size: 32, offset: 448)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1505, file: !158, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1505, file: !158, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1505, file: !158, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1505, file: !158, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1505, file: !158, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1505, file: !158, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1505, file: !158, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1505, file: !158, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1505, file: !158, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1505, file: !158, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1505, file: !158, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1505, file: !158, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1505, file: !158, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1505, file: !158, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1505, file: !158, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1505, file: !158, line: 2305, baseType: !7, size: 32, offset: 512)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1505, file: !158, line: 2306, baseType: !1530, size: 32, offset: 544)
!1530 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1531, line: 31, baseType: !796)
!1531 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1505, file: !158, line: 2307, baseType: !958, size: 64, offset: 576)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1505, file: !158, line: 2308, baseType: !958, size: 64, offset: 640)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1505, file: !158, line: 2314, baseType: !1535, size: 64, offset: 704)
!1535 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !158, line: 2309, size: 64, elements: !1536)
!1536 = !{!1537, !1538, !1539}
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1535, file: !158, line: 2310, baseType: !796, size: 32)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1535, file: !158, line: 2311, baseType: !864, size: 64)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1535, file: !158, line: 2312, baseType: !1540, size: 64)
!1540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1541, size: 64)
!1541 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !158, line: 2277, flags: DIFlagFwdDecl)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1505, file: !158, line: 2315, baseType: !958, size: 64, offset: 768)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1505, file: !158, line: 2316, baseType: !958, size: 64, offset: 832)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1505, file: !158, line: 2317, baseType: !958, size: 64, offset: 896)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1505, file: !158, line: 2318, baseType: !958, size: 64, offset: 960)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1505, file: !158, line: 2319, baseType: !958, size: 64, offset: 1024)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1505, file: !158, line: 2320, baseType: !958, size: 64, offset: 1088)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1505, file: !158, line: 2321, baseType: !958, size: 64, offset: 1152)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1505, file: !158, line: 2322, baseType: !958, size: 64, offset: 1216)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1505, file: !158, line: 2324, baseType: !1551, size: 64, offset: 1280)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !158, line: 2324, flags: DIFlagFwdDecl)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !960, file: !158, line: 3395, baseType: !1554, size: 320)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !158, line: 1469, size: 320, elements: !1555)
!1555 = !{!1556, !1557, !1558}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1554, file: !158, line: 1470, baseType: !996, size: 192)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1554, file: !158, line: 1471, baseType: !958, size: 64, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1554, file: !158, line: 1472, baseType: !958, size: 64, offset: 256)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !960, file: !158, line: 3396, baseType: !1560, size: 320)
!1560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !158, line: 1482, size: 320, elements: !1561)
!1561 = !{!1562, !1563, !1564}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1560, file: !158, line: 1483, baseType: !996, size: 192)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1560, file: !158, line: 1484, baseType: !796, size: 32, offset: 192)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1560, file: !158, line: 1485, baseType: !1351, size: 64, offset: 256)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !960, file: !158, line: 3397, baseType: !1566, size: 384)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !158, line: 1829, size: 384, elements: !1567)
!1567 = !{!1568, !1569, !1570, !1571}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1566, file: !158, line: 1830, baseType: !996, size: 192)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1566, file: !158, line: 1831, baseType: !1079, size: 32, offset: 192)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1566, file: !158, line: 1832, baseType: !958, size: 64, offset: 256)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1566, file: !158, line: 1835, baseType: !1351, size: 64, offset: 320)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !960, file: !158, line: 3398, baseType: !1573, size: 704)
!1573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !158, line: 1898, size: 704, elements: !1574)
!1574 = !{!1575, !1576, !1577, !1581, !1582, !1585}
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1573, file: !158, line: 1899, baseType: !996, size: 192)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1573, file: !158, line: 1902, baseType: !958, size: 64, offset: 192)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1573, file: !158, line: 1905, baseType: !1578, size: 64, offset: 256)
!1578 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !825, line: 58, baseType: !1579)
!1579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1580, size: 64)
!1580 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !825, line: 57, flags: DIFlagFwdDecl)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1573, file: !158, line: 1908, baseType: !7, size: 32, offset: 320)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1573, file: !158, line: 1911, baseType: !1583, size: 64, offset: 384)
!1583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1584, size: 64)
!1584 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !158, line: 1876, flags: DIFlagFwdDecl)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1573, file: !158, line: 1914, baseType: !1586, size: 256, offset: 448)
!1586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !158, line: 1883, size: 256, elements: !1587)
!1587 = !{!1588, !1590, !1591, !1596}
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1586, file: !158, line: 1884, baseType: !1589, size: 64)
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1586, file: !158, line: 1885, baseType: !1589, size: 64, offset: 64)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1586, file: !158, line: 1891, baseType: !1592, size: 64, offset: 128)
!1592 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1586, file: !158, line: 1891, size: 64, elements: !1593)
!1593 = !{!1594, !1595}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1592, file: !158, line: 1891, baseType: !1578, size: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1592, file: !158, line: 1891, baseType: !958, size: 64)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1586, file: !158, line: 1892, baseType: !1597, size: 64, offset: 192)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !958, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !960, file: !158, line: 3399, baseType: !1599, size: 704)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !158, line: 2008, size: 704, elements: !1600)
!1600 = !{!1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1599, file: !158, line: 2009, baseType: !996, size: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1599, file: !158, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1599, file: !158, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1599, file: !158, line: 2014, baseType: !1079, size: 32, offset: 224)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1599, file: !158, line: 2016, baseType: !958, size: 64, offset: 256)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1599, file: !158, line: 2017, baseType: !1340, size: 64, offset: 320)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1599, file: !158, line: 2019, baseType: !958, size: 64, offset: 384)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1599, file: !158, line: 2020, baseType: !958, size: 64, offset: 448)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1599, file: !158, line: 2021, baseType: !958, size: 64, offset: 512)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1599, file: !158, line: 2022, baseType: !958, size: 64, offset: 576)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1599, file: !158, line: 2023, baseType: !958, size: 64, offset: 640)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !960, file: !158, line: 3400, baseType: !1613, size: 832)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !158, line: 2430, size: 832, elements: !1614)
!1614 = !{!1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1613, file: !158, line: 2431, baseType: !996, size: 192)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1613, file: !158, line: 2433, baseType: !958, size: 64, offset: 192)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1613, file: !158, line: 2434, baseType: !958, size: 64, offset: 256)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1613, file: !158, line: 2435, baseType: !958, size: 64, offset: 320)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1613, file: !158, line: 2436, baseType: !958, size: 64, offset: 384)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1613, file: !158, line: 2437, baseType: !1340, size: 64, offset: 448)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1613, file: !158, line: 2438, baseType: !958, size: 64, offset: 512)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1613, file: !158, line: 2440, baseType: !958, size: 64, offset: 576)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1613, file: !158, line: 2441, baseType: !958, size: 64, offset: 640)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1613, file: !158, line: 2443, baseType: !1625, size: 128, offset: 704)
!1625 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !158, line: 182, baseType: !1626)
!1626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !158, line: 182, size: 128, elements: !1627)
!1627 = !{!1628}
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1626, file: !158, line: 182, baseType: !1345, size: 128)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !960, file: !158, line: 3401, baseType: !1630, size: 320)
!1630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !158, line: 3327, size: 320, elements: !1631)
!1631 = !{!1632, !1633, !1640}
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1630, file: !158, line: 3329, baseType: !996, size: 192)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1630, file: !158, line: 3330, baseType: !1634, size: 64, offset: 192)
!1634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1635, size: 64)
!1635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !158, line: 3320, size: 192, elements: !1636)
!1636 = !{!1637, !1638, !1639}
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1635, file: !158, line: 3322, baseType: !1634, size: 64)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1635, file: !158, line: 3323, baseType: !1634, size: 64, offset: 64)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1635, file: !158, line: 3324, baseType: !958, size: 64, offset: 128)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1630, file: !158, line: 3331, baseType: !1634, size: 64, offset: 256)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !960, file: !158, line: 3402, baseType: !1642, size: 256)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !158, line: 1540, size: 256, elements: !1643)
!1643 = !{!1644, !1645}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1642, file: !158, line: 1541, baseType: !996, size: 192)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1642, file: !158, line: 1542, baseType: !1646, size: 64, offset: 192)
!1646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1647, size: 64)
!1647 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !158, line: 1538, baseType: !1648)
!1648 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !158, line: 1538, size: 192, elements: !1649)
!1649 = !{!1650}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1648, file: !158, line: 1538, baseType: !1651, size: 192)
!1651 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !158, line: 1537, baseType: !1652)
!1652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !158, line: 1537, size: 192, elements: !1653)
!1653 = !{!1654, !1655, !1656}
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1652, file: !158, line: 1537, baseType: !7, size: 32)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1652, file: !158, line: 1537, baseType: !7, size: 32, offset: 32)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1652, file: !158, line: 1537, baseType: !1657, size: 128, offset: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 128, elements: !876)
!1658 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !158, line: 1535, baseType: !1659)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !158, line: 1532, size: 128, elements: !1660)
!1660 = !{!1661, !1662}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1659, file: !158, line: 1533, baseType: !958, size: 64)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1659, file: !158, line: 1534, baseType: !958, size: 64, offset: 64)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !960, file: !158, line: 3403, baseType: !1664, size: 512)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !158, line: 1938, size: 512, elements: !1665)
!1665 = !{!1666, !1667, !1668, !1669, !1675, !1676, !1677}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1664, file: !158, line: 1939, baseType: !996, size: 192)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1664, file: !158, line: 1940, baseType: !1079, size: 32, offset: 192)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1664, file: !158, line: 1941, baseType: !157, size: 32, offset: 224)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1664, file: !158, line: 1946, baseType: !1670, size: 32, offset: 256)
!1670 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !158, line: 1942, size: 32, elements: !1671)
!1671 = !{!1672, !1673, !1674}
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1670, file: !158, line: 1943, baseType: !176, size: 32)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1670, file: !158, line: 1944, baseType: !183, size: 32)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1670, file: !158, line: 1945, baseType: !190, size: 32)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1664, file: !158, line: 1950, baseType: !835, size: 64, offset: 320)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1664, file: !158, line: 1951, baseType: !835, size: 64, offset: 384)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1664, file: !158, line: 1953, baseType: !1351, size: 64, offset: 448)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !960, file: !158, line: 3404, baseType: !1679, size: 1664)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !158, line: 3337, size: 1664, elements: !1680)
!1680 = !{!1681, !1682}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1679, file: !158, line: 3338, baseType: !996, size: 192)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1679, file: !158, line: 3341, baseType: !1683, size: 1472, offset: 192)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1684, line: 410, size: 1472, elements: !1685)
!1684 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1685 = !{!1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1683, file: !1684, line: 412, baseType: !796, size: 32)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1683, file: !1684, line: 413, baseType: !796, size: 32, offset: 32)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1683, file: !1684, line: 414, baseType: !796, size: 32, offset: 64)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1683, file: !1684, line: 415, baseType: !796, size: 32, offset: 96)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1683, file: !1684, line: 416, baseType: !796, size: 32, offset: 128)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1683, file: !1684, line: 417, baseType: !796, size: 32, offset: 160)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1683, file: !1684, line: 418, baseType: !1071, size: 8, offset: 192)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1683, file: !1684, line: 419, baseType: !1071, size: 8, offset: 200)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1683, file: !1684, line: 420, baseType: !1695, size: 8, offset: 208)
!1695 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1683, file: !1684, line: 421, baseType: !1695, size: 8, offset: 216)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1683, file: !1684, line: 422, baseType: !1695, size: 8, offset: 224)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1683, file: !1684, line: 423, baseType: !1695, size: 8, offset: 232)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1683, file: !1684, line: 424, baseType: !1695, size: 8, offset: 240)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1683, file: !1684, line: 425, baseType: !1695, size: 8, offset: 248)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1683, file: !1684, line: 426, baseType: !1695, size: 8, offset: 256)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1683, file: !1684, line: 427, baseType: !1695, size: 8, offset: 264)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1683, file: !1684, line: 428, baseType: !1695, size: 8, offset: 272)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1683, file: !1684, line: 429, baseType: !1695, size: 8, offset: 280)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1683, file: !1684, line: 430, baseType: !1695, size: 8, offset: 288)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1683, file: !1684, line: 431, baseType: !1695, size: 8, offset: 296)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1683, file: !1684, line: 432, baseType: !1695, size: 8, offset: 304)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1683, file: !1684, line: 433, baseType: !1695, size: 8, offset: 312)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1683, file: !1684, line: 434, baseType: !1695, size: 8, offset: 320)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1683, file: !1684, line: 435, baseType: !1695, size: 8, offset: 328)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1683, file: !1684, line: 436, baseType: !1695, size: 8, offset: 336)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1683, file: !1684, line: 437, baseType: !1695, size: 8, offset: 344)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1683, file: !1684, line: 438, baseType: !1695, size: 8, offset: 352)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1683, file: !1684, line: 439, baseType: !1695, size: 8, offset: 360)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1683, file: !1684, line: 440, baseType: !1695, size: 8, offset: 368)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1683, file: !1684, line: 441, baseType: !1695, size: 8, offset: 376)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1683, file: !1684, line: 442, baseType: !1695, size: 8, offset: 384)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1683, file: !1684, line: 443, baseType: !1695, size: 8, offset: 392)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1683, file: !1684, line: 444, baseType: !1695, size: 8, offset: 400)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1683, file: !1684, line: 445, baseType: !1695, size: 8, offset: 408)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1683, file: !1684, line: 446, baseType: !1695, size: 8, offset: 416)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1683, file: !1684, line: 447, baseType: !1695, size: 8, offset: 424)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1683, file: !1684, line: 448, baseType: !1695, size: 8, offset: 432)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1683, file: !1684, line: 449, baseType: !1695, size: 8, offset: 440)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1683, file: !1684, line: 450, baseType: !1695, size: 8, offset: 448)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1683, file: !1684, line: 451, baseType: !1695, size: 8, offset: 456)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1683, file: !1684, line: 452, baseType: !1695, size: 8, offset: 464)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1683, file: !1684, line: 453, baseType: !1695, size: 8, offset: 472)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1683, file: !1684, line: 454, baseType: !1695, size: 8, offset: 480)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1683, file: !1684, line: 455, baseType: !1695, size: 8, offset: 488)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1683, file: !1684, line: 456, baseType: !1695, size: 8, offset: 496)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1683, file: !1684, line: 457, baseType: !1695, size: 8, offset: 504)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1683, file: !1684, line: 458, baseType: !1695, size: 8, offset: 512)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1683, file: !1684, line: 459, baseType: !1695, size: 8, offset: 520)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1683, file: !1684, line: 460, baseType: !1695, size: 8, offset: 528)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1683, file: !1684, line: 461, baseType: !1695, size: 8, offset: 536)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1683, file: !1684, line: 462, baseType: !1695, size: 8, offset: 544)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1683, file: !1684, line: 463, baseType: !1695, size: 8, offset: 552)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1683, file: !1684, line: 464, baseType: !1695, size: 8, offset: 560)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1683, file: !1684, line: 465, baseType: !1695, size: 8, offset: 568)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1683, file: !1684, line: 466, baseType: !1695, size: 8, offset: 576)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1683, file: !1684, line: 467, baseType: !1695, size: 8, offset: 584)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1683, file: !1684, line: 468, baseType: !1695, size: 8, offset: 592)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1683, file: !1684, line: 469, baseType: !1695, size: 8, offset: 600)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1683, file: !1684, line: 470, baseType: !1695, size: 8, offset: 608)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1683, file: !1684, line: 471, baseType: !1695, size: 8, offset: 616)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1683, file: !1684, line: 472, baseType: !1695, size: 8, offset: 624)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1683, file: !1684, line: 473, baseType: !1695, size: 8, offset: 632)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1683, file: !1684, line: 474, baseType: !1695, size: 8, offset: 640)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1683, file: !1684, line: 475, baseType: !1695, size: 8, offset: 648)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1683, file: !1684, line: 476, baseType: !1695, size: 8, offset: 656)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1683, file: !1684, line: 477, baseType: !1695, size: 8, offset: 664)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1683, file: !1684, line: 478, baseType: !1695, size: 8, offset: 672)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1683, file: !1684, line: 479, baseType: !1695, size: 8, offset: 680)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1683, file: !1684, line: 480, baseType: !1695, size: 8, offset: 688)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1683, file: !1684, line: 481, baseType: !1695, size: 8, offset: 696)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1683, file: !1684, line: 482, baseType: !1695, size: 8, offset: 704)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1683, file: !1684, line: 483, baseType: !1695, size: 8, offset: 712)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1683, file: !1684, line: 484, baseType: !1695, size: 8, offset: 720)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1683, file: !1684, line: 485, baseType: !1695, size: 8, offset: 728)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1683, file: !1684, line: 486, baseType: !1695, size: 8, offset: 736)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1683, file: !1684, line: 487, baseType: !1695, size: 8, offset: 744)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1683, file: !1684, line: 488, baseType: !1695, size: 8, offset: 752)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1683, file: !1684, line: 489, baseType: !1695, size: 8, offset: 760)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1683, file: !1684, line: 490, baseType: !1695, size: 8, offset: 768)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1683, file: !1684, line: 491, baseType: !1695, size: 8, offset: 776)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1683, file: !1684, line: 492, baseType: !1695, size: 8, offset: 784)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1683, file: !1684, line: 493, baseType: !1695, size: 8, offset: 792)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1683, file: !1684, line: 494, baseType: !1695, size: 8, offset: 800)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1683, file: !1684, line: 495, baseType: !1695, size: 8, offset: 808)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1683, file: !1684, line: 496, baseType: !1695, size: 8, offset: 816)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1683, file: !1684, line: 497, baseType: !1695, size: 8, offset: 824)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1683, file: !1684, line: 498, baseType: !1695, size: 8, offset: 832)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1683, file: !1684, line: 499, baseType: !1695, size: 8, offset: 840)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1683, file: !1684, line: 500, baseType: !1695, size: 8, offset: 848)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1683, file: !1684, line: 501, baseType: !1695, size: 8, offset: 856)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1683, file: !1684, line: 502, baseType: !1695, size: 8, offset: 864)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1683, file: !1684, line: 503, baseType: !1695, size: 8, offset: 872)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1683, file: !1684, line: 504, baseType: !1695, size: 8, offset: 880)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1683, file: !1684, line: 505, baseType: !1695, size: 8, offset: 888)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1683, file: !1684, line: 506, baseType: !1695, size: 8, offset: 896)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1683, file: !1684, line: 507, baseType: !1695, size: 8, offset: 904)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1683, file: !1684, line: 508, baseType: !1695, size: 8, offset: 912)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1683, file: !1684, line: 509, baseType: !1695, size: 8, offset: 920)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1683, file: !1684, line: 510, baseType: !1695, size: 8, offset: 928)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1683, file: !1684, line: 511, baseType: !1695, size: 8, offset: 936)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1683, file: !1684, line: 512, baseType: !1695, size: 8, offset: 944)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1683, file: !1684, line: 513, baseType: !1695, size: 8, offset: 952)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1683, file: !1684, line: 514, baseType: !1695, size: 8, offset: 960)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1683, file: !1684, line: 515, baseType: !1695, size: 8, offset: 968)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1683, file: !1684, line: 516, baseType: !1695, size: 8, offset: 976)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1683, file: !1684, line: 517, baseType: !1695, size: 8, offset: 984)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1683, file: !1684, line: 518, baseType: !1695, size: 8, offset: 992)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1683, file: !1684, line: 519, baseType: !1695, size: 8, offset: 1000)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1683, file: !1684, line: 520, baseType: !1695, size: 8, offset: 1008)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1683, file: !1684, line: 521, baseType: !1695, size: 8, offset: 1016)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1683, file: !1684, line: 522, baseType: !1695, size: 8, offset: 1024)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1683, file: !1684, line: 523, baseType: !1695, size: 8, offset: 1032)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1683, file: !1684, line: 524, baseType: !1695, size: 8, offset: 1040)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1683, file: !1684, line: 525, baseType: !1695, size: 8, offset: 1048)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1683, file: !1684, line: 526, baseType: !1695, size: 8, offset: 1056)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1683, file: !1684, line: 527, baseType: !1695, size: 8, offset: 1064)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1683, file: !1684, line: 528, baseType: !1695, size: 8, offset: 1072)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1683, file: !1684, line: 529, baseType: !1695, size: 8, offset: 1080)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1683, file: !1684, line: 530, baseType: !1695, size: 8, offset: 1088)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1683, file: !1684, line: 531, baseType: !1695, size: 8, offset: 1096)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1683, file: !1684, line: 532, baseType: !1695, size: 8, offset: 1104)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1683, file: !1684, line: 533, baseType: !1695, size: 8, offset: 1112)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1683, file: !1684, line: 534, baseType: !1695, size: 8, offset: 1120)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1683, file: !1684, line: 535, baseType: !1695, size: 8, offset: 1128)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1683, file: !1684, line: 536, baseType: !1695, size: 8, offset: 1136)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1683, file: !1684, line: 537, baseType: !1695, size: 8, offset: 1144)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1683, file: !1684, line: 538, baseType: !1695, size: 8, offset: 1152)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1683, file: !1684, line: 539, baseType: !1695, size: 8, offset: 1160)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1683, file: !1684, line: 540, baseType: !1695, size: 8, offset: 1168)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1683, file: !1684, line: 541, baseType: !1695, size: 8, offset: 1176)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1683, file: !1684, line: 542, baseType: !1695, size: 8, offset: 1184)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1683, file: !1684, line: 543, baseType: !1695, size: 8, offset: 1192)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1683, file: !1684, line: 544, baseType: !1695, size: 8, offset: 1200)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1683, file: !1684, line: 545, baseType: !1695, size: 8, offset: 1208)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1683, file: !1684, line: 546, baseType: !1695, size: 8, offset: 1216)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1683, file: !1684, line: 547, baseType: !1695, size: 8, offset: 1224)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1683, file: !1684, line: 548, baseType: !1695, size: 8, offset: 1232)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1683, file: !1684, line: 549, baseType: !1695, size: 8, offset: 1240)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1683, file: !1684, line: 550, baseType: !1695, size: 8, offset: 1248)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1683, file: !1684, line: 551, baseType: !1695, size: 8, offset: 1256)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1683, file: !1684, line: 552, baseType: !1695, size: 8, offset: 1264)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1683, file: !1684, line: 553, baseType: !1695, size: 8, offset: 1272)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1683, file: !1684, line: 554, baseType: !1695, size: 8, offset: 1280)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1683, file: !1684, line: 555, baseType: !1695, size: 8, offset: 1288)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1683, file: !1684, line: 556, baseType: !1695, size: 8, offset: 1296)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1683, file: !1684, line: 557, baseType: !1695, size: 8, offset: 1304)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1683, file: !1684, line: 558, baseType: !1695, size: 8, offset: 1312)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1683, file: !1684, line: 559, baseType: !1695, size: 8, offset: 1320)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1683, file: !1684, line: 560, baseType: !1695, size: 8, offset: 1328)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1683, file: !1684, line: 561, baseType: !1695, size: 8, offset: 1336)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1683, file: !1684, line: 562, baseType: !1695, size: 8, offset: 1344)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1683, file: !1684, line: 563, baseType: !1695, size: 8, offset: 1352)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1683, file: !1684, line: 564, baseType: !1695, size: 8, offset: 1360)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1683, file: !1684, line: 565, baseType: !1695, size: 8, offset: 1368)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1683, file: !1684, line: 566, baseType: !1695, size: 8, offset: 1376)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1683, file: !1684, line: 567, baseType: !1695, size: 8, offset: 1384)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1683, file: !1684, line: 568, baseType: !1695, size: 8, offset: 1392)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1683, file: !1684, line: 569, baseType: !1695, size: 8, offset: 1400)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1683, file: !1684, line: 570, baseType: !1695, size: 8, offset: 1408)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1683, file: !1684, line: 571, baseType: !1695, size: 8, offset: 1416)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1683, file: !1684, line: 572, baseType: !1695, size: 8, offset: 1424)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1683, file: !1684, line: 573, baseType: !1695, size: 8, offset: 1432)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1683, file: !1684, line: 574, baseType: !1695, size: 8, offset: 1440)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !960, file: !158, line: 3405, baseType: !1851, size: 384)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !158, line: 3352, size: 384, elements: !1852)
!1852 = !{!1853, !1854}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1851, file: !158, line: 3353, baseType: !996, size: 192)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1851, file: !158, line: 3356, baseType: !1855, size: 192, offset: 192)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1684, line: 578, size: 192, elements: !1856)
!1856 = !{!1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1855, file: !1684, line: 580, baseType: !796, size: 32)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1855, file: !1684, line: 581, baseType: !796, size: 32, offset: 32)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1855, file: !1684, line: 582, baseType: !796, size: 32, offset: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1855, file: !1684, line: 583, baseType: !796, size: 32, offset: 96)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1855, file: !1684, line: 584, baseType: !1071, size: 8, offset: 128)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1855, file: !1684, line: 585, baseType: !1071, size: 8, offset: 136)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1855, file: !1684, line: 586, baseType: !1071, size: 8, offset: 144)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1855, file: !1684, line: 587, baseType: !1071, size: 8, offset: 152)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1855, file: !1684, line: 588, baseType: !1071, size: 8, offset: 160)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1855, file: !1684, line: 589, baseType: !1071, size: 8, offset: 168)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1855, file: !1684, line: 590, baseType: !1071, size: 8, offset: 176)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !859, file: !536, line: 178, baseType: !808, size: 64)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !859, file: !536, line: 179, baseType: !1870, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1871, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !536, line: 150, baseType: !1872)
!1872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !536, line: 142, size: 320, elements: !1873)
!1873 = !{!1874, !1875, !1876, !1877, !1878, !1879}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1872, file: !536, line: 144, baseType: !958, size: 64)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1872, file: !536, line: 145, baseType: !839, size: 64, offset: 64)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1872, file: !536, line: 146, baseType: !839, size: 64, offset: 128)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1872, file: !536, line: 147, baseType: !1530, size: 32, offset: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1872, file: !536, line: 148, baseType: !7, size: 32, offset: 224)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1872, file: !536, line: 149, baseType: !1071, size: 8, offset: 256)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !859, file: !536, line: 180, baseType: !1881, size: 64)
!1881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1882, size: 64)
!1882 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !536, line: 162, baseType: !1883)
!1883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !536, line: 159, size: 128, elements: !1884)
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1883, file: !536, line: 160, baseType: !958, size: 64)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1883, file: !536, line: 161, baseType: !928, size: 64, offset: 64)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !859, file: !536, line: 181, baseType: !1888, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !536, line: 181, flags: DIFlagFwdDecl)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !854, file: !536, line: 317, baseType: !1891, size: 64)
!1891 = !DICompositeType(tag: DW_TAG_array_type, baseType: !928, size: 64, elements: !876)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !854, file: !536, line: 318, baseType: !1893, size: 320)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !536, line: 188, size: 320, elements: !1894)
!1894 = !{!1895, !1897, !1952}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1893, file: !536, line: 190, baseType: !1896, size: 192)
!1896 = !DICompositeType(tag: DW_TAG_array_type, baseType: !858, size: 192, elements: !1029)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1893, file: !536, line: 193, baseType: !1898, size: 64, offset: 192)
!1898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !536, line: 206, size: 320, elements: !1900)
!1900 = !{!1901, !1937, !1938, !1939, !1951}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1899, file: !536, line: 208, baseType: !1902, size: 64)
!1902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1903, size: 64)
!1903 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !825, line: 62, baseType: !1904)
!1904 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1905, line: 538, size: 256, elements: !1906)
!1905 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1906 = !{!1907, !1911, !1917, !1928}
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1904, file: !1905, line: 539, baseType: !1908, size: 32)
!1908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1905, line: 482, size: 32, elements: !1909)
!1909 = !{!1910}
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1908, file: !1905, line: 484, baseType: !7, size: 32)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1904, file: !1905, line: 540, baseType: !1912, size: 192)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1905, line: 488, size: 192, elements: !1913)
!1913 = !{!1914, !1915, !1916}
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1912, file: !1905, line: 489, baseType: !1908, size: 32)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1912, file: !1905, line: 492, baseType: !864, size: 64, offset: 64)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1912, file: !1905, line: 496, baseType: !958, size: 64, offset: 128)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1904, file: !1905, line: 541, baseType: !1918, size: 256)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1905, line: 504, size: 256, elements: !1919)
!1919 = !{!1920, !1921, !1926, !1927}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1918, file: !1905, line: 505, baseType: !1908, size: 32)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1918, file: !1905, line: 509, baseType: !1922, size: 64, offset: 64)
!1922 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1905, line: 501, baseType: !1923)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{null, !1299}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1918, file: !1905, line: 510, baseType: !1299, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1918, file: !1905, line: 513, baseType: !1902, size: 64, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1904, file: !1905, line: 542, baseType: !1929, size: 128)
!1929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1905, line: 530, size: 128, elements: !1930)
!1930 = !{!1931, !1932}
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1929, file: !1905, line: 531, baseType: !1908, size: 32)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1929, file: !1905, line: 534, baseType: !1933, size: 64, offset: 64)
!1933 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1905, line: 525, baseType: !1934)
!1934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1935, size: 64)
!1935 = !DISubroutineType(types: !1936)
!1936 = !{!1071, !958, !864, !911, !911}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1899, file: !536, line: 211, baseType: !7, size: 32, offset: 64)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1899, file: !536, line: 214, baseType: !928, size: 64, offset: 128)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1899, file: !536, line: 224, baseType: !1940, size: 64, offset: 192)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1941, size: 64)
!1941 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !536, line: 202, baseType: !1942)
!1942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !536, line: 202, size: 128, elements: !1943)
!1943 = !{!1944}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1942, file: !536, line: 202, baseType: !1945, size: 128)
!1945 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !536, line: 200, baseType: !1946)
!1946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !536, line: 200, size: 128, elements: !1947)
!1947 = !{!1948, !1949, !1950}
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1946, file: !536, line: 200, baseType: !7, size: 32)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1946, file: !536, line: 200, baseType: !7, size: 32, offset: 32)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1946, file: !536, line: 200, baseType: !875, size: 64, offset: 64)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1899, file: !536, line: 234, baseType: !1940, size: 64, offset: 256)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1893, file: !536, line: 197, baseType: !928, size: 64, offset: 256)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !854, file: !536, line: 319, baseType: !1018, size: 256)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !854, file: !536, line: 320, baseType: !1037, size: 192)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !827, file: !142, line: 134, baseType: !797, size: 64, offset: 192)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !827, file: !142, line: 137, baseType: !958, size: 64, offset: 256)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !827, file: !142, line: 138, baseType: !1079, size: 32, offset: 320)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !827, file: !142, line: 142, baseType: !7, size: 32, offset: 352)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !827, file: !142, line: 144, baseType: !796, size: 32, offset: 384)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !827, file: !142, line: 145, baseType: !796, size: 32, offset: 416)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !827, file: !142, line: 146, baseType: !1962, size: 64, offset: 448)
!1962 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !142, line: 119, baseType: !928)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !809, file: !142, line: 220, baseType: !812, size: 64, offset: 64)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !809, file: !142, line: 223, baseType: !797, size: 64, offset: 128)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !809, file: !142, line: 226, baseType: !802, size: 64, offset: 192)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !809, file: !142, line: 229, baseType: !1967, size: 128, offset: 256)
!1967 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1968, size: 128, elements: !912)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !142, line: 229, flags: DIFlagFwdDecl)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !809, file: !142, line: 232, baseType: !808, size: 64, offset: 384)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !809, file: !142, line: 233, baseType: !808, size: 64, offset: 448)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !809, file: !142, line: 238, baseType: !1973, size: 64, offset: 512)
!1973 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !142, line: 235, size: 64, elements: !1974)
!1974 = !{!1975, !1981}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1973, file: !142, line: 236, baseType: !1976, size: 64)
!1976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1977, size: 64)
!1977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !142, line: 273, size: 128, elements: !1978)
!1978 = !{!1979, !1980}
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1977, file: !142, line: 275, baseType: !835, size: 64)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1977, file: !142, line: 278, baseType: !835, size: 64, offset: 64)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1973, file: !142, line: 237, baseType: !1982, size: 64)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1983, size: 64)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !142, line: 259, size: 320, elements: !1984)
!1984 = !{!1985, !1986, !1987, !1988, !1989}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1983, file: !142, line: 261, baseType: !839, size: 64)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1983, file: !142, line: 262, baseType: !839, size: 64, offset: 64)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1983, file: !142, line: 266, baseType: !839, size: 64, offset: 128)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1983, file: !142, line: 267, baseType: !839, size: 64, offset: 192)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1983, file: !142, line: 270, baseType: !796, size: 32, offset: 256)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !809, file: !142, line: 241, baseType: !1962, size: 64, offset: 576)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !809, file: !142, line: 244, baseType: !796, size: 32, offset: 640)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !809, file: !142, line: 247, baseType: !796, size: 32, offset: 672)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !809, file: !142, line: 250, baseType: !796, size: 32, offset: 704)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !809, file: !142, line: 253, baseType: !796, size: 32, offset: 736)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !809, file: !142, line: 256, baseType: !796, size: 32, offset: 768)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !803, file: !385, line: 111, baseType: !808, size: 64, offset: 128)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !803, file: !385, line: 114, baseType: !1998, size: 64, offset: 192)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !385, line: 41, size: 64, elements: !1999)
!1999 = !{!2000, !2001}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1998, file: !385, line: 42, baseType: !384, size: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1998, file: !385, line: 43, baseType: !7, size: 32, offset: 32)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !803, file: !385, line: 117, baseType: !7, size: 32, offset: 256)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !803, file: !385, line: 120, baseType: !7, size: 32, offset: 288)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !803, file: !385, line: 123, baseType: !1412, size: 64, offset: 320)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !803, file: !385, line: 126, baseType: !802, size: 64, offset: 384)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !803, file: !385, line: 129, baseType: !802, size: 64, offset: 448)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !803, file: !385, line: 132, baseType: !797, size: 64, offset: 512)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !803, file: !385, line: 139, baseType: !958, size: 64, offset: 576)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !803, file: !385, line: 143, baseType: !1006, size: 128, offset: 640)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !803, file: !385, line: 146, baseType: !1006, size: 128, offset: 768)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !803, file: !385, line: 148, baseType: !1071, size: 8, offset: 896)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !803, file: !385, line: 149, baseType: !1071, size: 8, offset: 904)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !803, file: !385, line: 153, baseType: !393, size: 32, offset: 928)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !803, file: !385, line: 156, baseType: !2015, size: 64, offset: 960)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !385, line: 48, size: 320, elements: !2017)
!2017 = !{!2018, !2019, !2020, !2021}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2016, file: !385, line: 50, baseType: !1578, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2016, file: !385, line: 59, baseType: !1006, size: 128, offset: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2016, file: !385, line: 64, baseType: !1071, size: 8, offset: 192)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2016, file: !385, line: 67, baseType: !2015, size: 64, offset: 256)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !803, file: !385, line: 159, baseType: !2023, size: 64, offset: 1024)
!2023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2024, size: 64)
!2024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !385, line: 72, size: 256, elements: !2025)
!2025 = !{!2026, !2027, !2028, !2029}
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2024, file: !385, line: 74, baseType: !826, size: 64)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2024, file: !385, line: 77, baseType: !2023, size: 64, offset: 64)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2024, file: !385, line: 78, baseType: !2023, size: 64, offset: 128)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2024, file: !385, line: 81, baseType: !2023, size: 64, offset: 192)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !803, file: !385, line: 162, baseType: !1071, size: 8, offset: 1088)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !803, file: !385, line: 166, baseType: !958, size: 64, offset: 1152)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "has_call", scope: !799, file: !3, line: 65, baseType: !1071, size: 8, offset: 64)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg_pressure", scope: !799, file: !3, line: 68, baseType: !2034, size: 864, offset: 96)
!2034 = !DICompositeType(tag: DW_TAG_array_type, baseType: !796, size: 864, elements: !2035)
!2035 = !{!2036}
!2036 = !DISubrange(count: 27)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "regs_ref", scope: !799, file: !3, line: 70, baseType: !2038, size: 256, offset: 960)
!2038 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !897, line: 84, baseType: !896)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "regs_live", scope: !799, file: !3, line: 71, baseType: !2038, size: 256, offset: 1216)
!2040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2041, size: 64)
!2041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !398, line: 826, size: 256, elements: !2042)
!2042 = !{!2043, !2045, !2046, !2047}
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2041, file: !398, line: 829, baseType: !2044, size: 64)
!2044 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !825, line: 47, baseType: !895)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2041, file: !398, line: 831, baseType: !2044, size: 64, offset: 64)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !2041, file: !398, line: 834, baseType: !2044, size: 64, offset: 128)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !2041, file: !398, line: 835, baseType: !2044, size: 64, offset: 192)
!2048 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !2049, line: 42, baseType: !911)
!2049 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1359, line: 32, baseType: !2052)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1359, line: 32, size: 96, elements: !2053)
!2053 = !{!2054}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2052, file: !1359, line: 32, baseType: !2055, size: 96)
!2055 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1359, line: 31, baseType: !2056)
!2056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1359, line: 31, size: 96, elements: !2057)
!2057 = !{!2058, !2059, !2060}
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2056, file: !1359, line: 31, baseType: !7, size: 32)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2056, file: !1359, line: 31, baseType: !7, size: 32, offset: 32)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2056, file: !1359, line: 31, baseType: !2061, size: 32, offset: 64)
!2061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !796, size: 32, elements: !876)
!2062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2063, size: 64)
!2063 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_invariant_p_heap", file: !3, line: 174, baseType: !2064)
!2064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_invariant_p_heap", file: !3, line: 174, size: 128, elements: !2065)
!2065 = !{!2066}
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2064, file: !3, line: 174, baseType: !2067, size: 128)
!2067 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_invariant_p_base", file: !3, line: 173, baseType: !2068)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_invariant_p_base", file: !3, line: 173, size: 128, elements: !2069)
!2069 = !{!2070, !2071, !2072}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2068, file: !3, line: 173, baseType: !7, size: 32)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2068, file: !3, line: 173, baseType: !7, size: 32, offset: 32)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2068, file: !3, line: 173, baseType: !2073, size: 64, offset: 64)
!2073 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2074, size: 64, elements: !876)
!2074 = !DIDerivedType(tag: DW_TAG_typedef, name: "invariant_p", file: !3, line: 171, baseType: !2075)
!2075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2076, size: 64)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "invariant", file: !3, line: 99, size: 512, elements: !2077)
!2077 = !{!2078, !2079, !2080, !2081, !2082, !2098, !2099, !2100, !2101, !2102, !2103, !2104}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "invno", scope: !2076, file: !3, line: 102, baseType: !7, size: 32)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "eqto", scope: !2076, file: !3, line: 105, baseType: !7, size: 32, offset: 32)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2076, file: !3, line: 109, baseType: !839, size: 64, offset: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "orig_regno", scope: !2076, file: !3, line: 113, baseType: !796, size: 32, offset: 128)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2076, file: !3, line: 116, baseType: !2083, size: 64, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2084, size: 64)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def", file: !3, line: 88, size: 192, elements: !2085)
!2085 = !{!2086, !2095, !2096, !2097}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2084, file: !3, line: 90, baseType: !2087, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2088, size: 64)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use", file: !3, line: 78, size: 256, elements: !2089)
!2089 = !{!2090, !2092, !2093, !2094}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !2088, file: !3, line: 80, baseType: !2091, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !839, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2088, file: !3, line: 81, baseType: !839, size: 64, offset: 64)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "addr_use_p", scope: !2088, file: !3, line: 82, baseType: !7, size: 32, offset: 128)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2088, file: !3, line: 83, baseType: !2087, size: 64, offset: 192)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "n_uses", scope: !2084, file: !3, line: 92, baseType: !7, size: 32, offset: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "n_addr_uses", scope: !2084, file: !3, line: 93, baseType: !7, size: 32, offset: 96)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "invno", scope: !2084, file: !3, line: 94, baseType: !7, size: 32, offset: 128)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2076, file: !3, line: 119, baseType: !839, size: 64, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "always_executed", scope: !2076, file: !3, line: 122, baseType: !1071, size: 8, offset: 320)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "move", scope: !2076, file: !3, line: 125, baseType: !1071, size: 8, offset: 328)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "cheap_address", scope: !2076, file: !3, line: 128, baseType: !1071, size: 8, offset: 336)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2076, file: !3, line: 131, baseType: !7, size: 32, offset: 352)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "depends_on", scope: !2076, file: !3, line: 134, baseType: !2044, size: 64, offset: 384)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "stamp", scope: !2076, file: !3, line: 138, baseType: !7, size: 32, offset: 448)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2107, size: 64)
!2107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2108)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "invariant_expr_entry", file: !3, line: 151, size: 192, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "inv", scope: !2108, file: !3, line: 154, baseType: !2075, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2108, file: !3, line: 157, baseType: !839, size: 64, offset: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2108, file: !3, line: 160, baseType: !5, size: 32, offset: 128)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2108, file: !3, line: 163, baseType: !1298, size: 32, offset: 160)
!2114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!2115 = !{!0, !2116, !2118, !2120, !2122, !2124, !2129, !2131, !2133}
!2116 = !DIGlobalVariableExpression(var: !2117, expr: !DIExpression())
!2117 = distinct !DIGlobalVariable(name: "invariant_table", scope: !2, file: !3, line: 147, type: !2105, isLocal: true, isDefinition: true)
!2118 = !DIGlobalVariableExpression(var: !2119, expr: !DIExpression())
!2119 = distinct !DIGlobalVariable(name: "curr_regs_live", scope: !2, file: !3, line: 1581, type: !2038, isLocal: true, isDefinition: true)
!2120 = !DIGlobalVariableExpression(var: !2121, expr: !DIExpression())
!2121 = distinct !DIGlobalVariable(name: "curr_reg_pressure", scope: !2, file: !3, line: 1584, type: !2034, isLocal: true, isDefinition: true)
!2122 = !DIGlobalVariableExpression(var: !2123, expr: !DIExpression())
!2123 = distinct !DIGlobalVariable(name: "n_regs_set", scope: !2, file: !3, line: 1592, type: !796, isLocal: true, isDefinition: true)
!2124 = !DIGlobalVariableExpression(var: !2125, expr: !DIExpression())
!2125 = distinct !DIGlobalVariable(name: "regs_set", scope: !2, file: !3, line: 1589, type: !2126, isLocal: true, isDefinition: true)
!2126 = !DICompositeType(tag: DW_TAG_array_type, baseType: !839, size: 6784, elements: !2127)
!2127 = !{!2128}
!2128 = !DISubrange(count: 106)
!2129 = !DIGlobalVariableExpression(var: !2130, expr: !DIExpression())
!2130 = distinct !DIGlobalVariable(name: "actual_stamp", scope: !2, file: !3, line: 169, type: !7, isLocal: true, isDefinition: true)
!2131 = !DIGlobalVariableExpression(var: !2132, expr: !DIExpression())
!2132 = distinct !DIGlobalVariable(name: "invariants", scope: !2, file: !3, line: 178, type: !2062, isLocal: true, isDefinition: true)
!2133 = !DIGlobalVariableExpression(var: !2134, expr: !DIExpression())
!2134 = distinct !DIGlobalVariable(name: "invariant_table_size", scope: !2, file: !3, line: 146, type: !7, isLocal: true, isDefinition: true)
!2135 = !{i32 7, !"Dwarf Version", i32 4}
!2136 = !{i32 2, !"Debug Info Version", i32 3}
!2137 = !{i32 1, !"wchar_size", i32 4}
!2138 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2139 = distinct !DISubprogram(name: "move_loop_invariants", scope: !3, file: !3, line: 1886, type: !2140, scopeLine: 1887, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2140 = !DISubroutineType(types: !2141)
!2141 = !{null}
!2142 = !{}
!2143 = !DILocalVariable(name: "loop", scope: !2139, file: !3, line: 1888, type: !802)
!2144 = !DILocation(line: 1888, column: 16, scope: !2139)
!2145 = !DILocalVariable(name: "li", scope: !2139, file: !3, line: 1889, type: !2146)
!2146 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !385, line: 515, baseType: !2147)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !385, line: 508, size: 128, elements: !2148)
!2148 = !{!2149, !2150}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2147, file: !385, line: 511, baseType: !2050, size: 64)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2147, file: !385, line: 514, baseType: !7, size: 32, offset: 64)
!2151 = !DILocation(line: 1889, column: 17, scope: !2139)
!2152 = !DILocation(line: 1891, column: 7, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !2139, file: !3, line: 1891, column: 7)
!2154 = !DILocation(line: 1891, column: 7, scope: !2139)
!2155 = !DILocation(line: 1893, column: 7, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !2153, file: !3, line: 1892, column: 5)
!2157 = !DILocation(line: 1894, column: 31, scope: !2156)
!2158 = !DILocation(line: 1894, column: 7, scope: !2156)
!2159 = !DILocation(line: 1895, column: 7, scope: !2156)
!2160 = !DILocation(line: 1896, column: 5, scope: !2156)
!2161 = !DILocation(line: 1897, column: 3, scope: !2139)
!2162 = !DILocation(line: 1899, column: 3, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !2139, file: !3, line: 1899, column: 3)
!2164 = !DILocation(line: 1899, column: 3, scope: !2165)
!2165 = distinct !DILexicalBlock(scope: !2163, file: !3, line: 1899, column: 3)
!2166 = !DILocation(line: 1901, column: 19, scope: !2167)
!2167 = distinct !DILexicalBlock(scope: !2165, file: !3, line: 1900, column: 5)
!2168 = !DILocation(line: 1901, column: 17, scope: !2167)
!2169 = !DILocation(line: 1904, column: 11, scope: !2170)
!2170 = distinct !DILexicalBlock(scope: !2167, file: !3, line: 1904, column: 11)
!2171 = !DILocation(line: 1904, column: 17, scope: !2170)
!2172 = !DILocation(line: 1904, column: 41, scope: !2170)
!2173 = !DILocation(line: 1904, column: 27, scope: !2170)
!2174 = !DILocation(line: 1904, column: 11, scope: !2167)
!2175 = !DILocation(line: 1905, column: 31, scope: !2170)
!2176 = !DILocation(line: 1905, column: 2, scope: !2170)
!2177 = !DILocation(line: 1906, column: 5, scope: !2167)
!2178 = distinct !{!2178, !2162, !2179}
!2179 = !DILocation(line: 1906, column: 5, scope: !2163)
!2180 = !DILocation(line: 1908, column: 3, scope: !2181)
!2181 = distinct !DILexicalBlock(scope: !2139, file: !3, line: 1908, column: 3)
!2182 = !DILocation(line: 1908, column: 3, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2181, file: !3, line: 1908, column: 3)
!2184 = !DILocation(line: 1910, column: 23, scope: !2185)
!2185 = distinct !DILexicalBlock(scope: !2183, file: !3, line: 1909, column: 5)
!2186 = !DILocation(line: 1910, column: 7, scope: !2185)
!2187 = !DILocation(line: 1911, column: 5, scope: !2185)
!2188 = distinct !{!2188, !2180, !2189}
!2189 = !DILocation(line: 1911, column: 5, scope: !2181)
!2190 = !DILocation(line: 1913, column: 7, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !2139, file: !3, line: 1913, column: 7)
!2192 = !DILocation(line: 1913, column: 7, scope: !2139)
!2193 = !DILocation(line: 1916, column: 5, scope: !2191)
!2194 = !DILocation(line: 1917, column: 9, scope: !2139)
!2195 = !DILocation(line: 1917, column: 3, scope: !2139)
!2196 = !DILocation(line: 1918, column: 19, scope: !2139)
!2197 = !DILocation(line: 1919, column: 24, scope: !2139)
!2198 = !DILocation(line: 1924, column: 1, scope: !2139)
!2199 = distinct !DISubprogram(name: "calculate_loop_reg_pressure", scope: !3, file: !3, line: 1763, type: !2140, scopeLine: 1764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2200 = !DILocalVariable(name: "i", scope: !2199, file: !3, line: 1765, type: !796)
!2201 = !DILocation(line: 1765, column: 7, scope: !2199)
!2202 = !DILocalVariable(name: "j", scope: !2199, file: !3, line: 1766, type: !7)
!2203 = !DILocation(line: 1766, column: 16, scope: !2199)
!2204 = !DILocalVariable(name: "bi", scope: !2199, file: !3, line: 1767, type: !2205)
!2205 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !897, line: 218, baseType: !2206)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !897, line: 203, size: 256, elements: !2207)
!2207 = !{!2208, !2209, !2210, !2211}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !2206, file: !897, line: 206, baseType: !900, size: 64)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !2206, file: !897, line: 209, baseType: !900, size: 64, offset: 64)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !2206, file: !897, line: 212, baseType: !7, size: 32, offset: 128)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2206, file: !897, line: 217, baseType: !910, size: 64, offset: 192)
!2212 = !DILocation(line: 1767, column: 19, scope: !2199)
!2213 = !DILocalVariable(name: "bb", scope: !2199, file: !3, line: 1768, type: !1376)
!2214 = !DILocation(line: 1768, column: 15, scope: !2199)
!2215 = !DILocalVariable(name: "insn", scope: !2199, file: !3, line: 1769, type: !839)
!2216 = !DILocation(line: 1769, column: 7, scope: !2199)
!2217 = !DILocalVariable(name: "link", scope: !2199, file: !3, line: 1769, type: !839)
!2218 = !DILocation(line: 1769, column: 13, scope: !2199)
!2219 = !DILocalVariable(name: "loop", scope: !2199, file: !3, line: 1770, type: !802)
!2220 = !DILocation(line: 1770, column: 16, scope: !2199)
!2221 = !DILocalVariable(name: "parent", scope: !2199, file: !3, line: 1770, type: !802)
!2222 = !DILocation(line: 1770, column: 23, scope: !2199)
!2223 = !DILocalVariable(name: "li", scope: !2199, file: !3, line: 1771, type: !2146)
!2224 = !DILocation(line: 1771, column: 17, scope: !2199)
!2225 = !DILocation(line: 1773, column: 3, scope: !2226)
!2226 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1773, column: 3)
!2227 = !DILocation(line: 1773, column: 3, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2226, file: !3, line: 1773, column: 3)
!2229 = !DILocation(line: 1774, column: 9, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2228, file: !3, line: 1774, column: 9)
!2231 = !DILocation(line: 1774, column: 15, scope: !2230)
!2232 = !DILocation(line: 1774, column: 19, scope: !2230)
!2233 = !DILocation(line: 1774, column: 9, scope: !2228)
!2234 = !DILocation(line: 1776, column: 14, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2230, file: !3, line: 1775, column: 7)
!2236 = !DILocation(line: 1776, column: 2, scope: !2235)
!2237 = !DILocation(line: 1776, column: 8, scope: !2235)
!2238 = !DILocation(line: 1776, column: 12, scope: !2235)
!2239 = !DILocation(line: 1777, column: 2, scope: !2235)
!2240 = !DILocation(line: 1778, column: 2, scope: !2235)
!2241 = !DILocation(line: 1779, column: 7, scope: !2235)
!2242 = !DILocation(line: 1774, column: 22, scope: !2230)
!2243 = distinct !{!2243, !2225, !2244}
!2244 = !DILocation(line: 1779, column: 7, scope: !2226)
!2245 = !DILocation(line: 1780, column: 3, scope: !2199)
!2246 = !DILocation(line: 1781, column: 3, scope: !2199)
!2247 = !DILocation(line: 1782, column: 3, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1782, column: 3)
!2249 = !DILocation(line: 1782, column: 3, scope: !2250)
!2250 = distinct !DILexicalBlock(scope: !2248, file: !3, line: 1782, column: 3)
!2251 = !DILocation(line: 1784, column: 19, scope: !2252)
!2252 = distinct !DILexicalBlock(scope: !2250, file: !3, line: 1783, column: 5)
!2253 = !DILocation(line: 1784, column: 23, scope: !2252)
!2254 = !DILocation(line: 1784, column: 17, scope: !2252)
!2255 = !DILocation(line: 1785, column: 11, scope: !2256)
!2256 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 1785, column: 11)
!2257 = !DILocation(line: 1785, column: 24, scope: !2256)
!2258 = !DILocation(line: 1785, column: 39, scope: !2256)
!2259 = !DILocation(line: 1785, column: 21, scope: !2256)
!2260 = !DILocation(line: 1785, column: 11, scope: !2252)
!2261 = !DILocation(line: 1786, column: 2, scope: !2256)
!2262 = !DILocation(line: 1788, column: 19, scope: !2263)
!2263 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 1788, column: 7)
!2264 = !DILocation(line: 1788, column: 17, scope: !2263)
!2265 = !DILocation(line: 1788, column: 12, scope: !2263)
!2266 = !DILocation(line: 1789, column: 5, scope: !2267)
!2267 = distinct !DILexicalBlock(scope: !2263, file: !3, line: 1788, column: 7)
!2268 = !DILocation(line: 1789, column: 13, scope: !2267)
!2269 = !DILocation(line: 1789, column: 28, scope: !2267)
!2270 = !DILocation(line: 1789, column: 10, scope: !2267)
!2271 = !DILocation(line: 1788, column: 7, scope: !2263)
!2272 = !DILocation(line: 1791, column: 20, scope: !2267)
!2273 = !DILocation(line: 1791, column: 38, scope: !2267)
!2274 = !DILocation(line: 1791, column: 49, scope: !2267)
!2275 = !DILocation(line: 1791, column: 2, scope: !2267)
!2276 = !DILocation(line: 1790, column: 24, scope: !2267)
!2277 = !DILocation(line: 1790, column: 12, scope: !2267)
!2278 = !DILocation(line: 1790, column: 10, scope: !2267)
!2279 = !DILocation(line: 1788, column: 7, scope: !2267)
!2280 = distinct !{!2280, !2271, !2281}
!2281 = !DILocation(line: 1791, column: 62, scope: !2263)
!2282 = !DILocation(line: 1793, column: 37, scope: !2252)
!2283 = !DILocation(line: 1793, column: 7, scope: !2252)
!2284 = !DILocation(line: 1794, column: 14, scope: !2285)
!2285 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 1794, column: 7)
!2286 = !DILocation(line: 1794, column: 12, scope: !2285)
!2287 = !DILocation(line: 1794, column: 19, scope: !2288)
!2288 = distinct !DILexicalBlock(scope: !2285, file: !3, line: 1794, column: 7)
!2289 = !DILocation(line: 1794, column: 23, scope: !2288)
!2290 = !DILocation(line: 1794, column: 21, scope: !2288)
!2291 = !DILocation(line: 1794, column: 7, scope: !2285)
!2292 = !DILocation(line: 1795, column: 40, scope: !2288)
!2293 = !DILocation(line: 1795, column: 20, scope: !2288)
!2294 = !DILocation(line: 1795, column: 2, scope: !2288)
!2295 = !DILocation(line: 1795, column: 44, scope: !2288)
!2296 = !DILocation(line: 1794, column: 50, scope: !2288)
!2297 = !DILocation(line: 1794, column: 7, scope: !2288)
!2298 = distinct !{!2298, !2291, !2299}
!2299 = !DILocation(line: 1795, column: 46, scope: !2285)
!2300 = !DILocation(line: 1796, column: 7, scope: !2301)
!2301 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 1796, column: 7)
!2302 = !DILocation(line: 1796, column: 7, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2301, file: !3, line: 1796, column: 7)
!2304 = !DILocation(line: 1797, column: 19, scope: !2303)
!2305 = !DILocation(line: 1797, column: 2, scope: !2303)
!2306 = distinct !{!2306, !2300, !2307}
!2307 = !DILocation(line: 1797, column: 26, scope: !2301)
!2308 = !DILocation(line: 1799, column: 7, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 1799, column: 7)
!2310 = !DILocation(line: 1799, column: 7, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2309, file: !3, line: 1799, column: 7)
!2312 = !DILocation(line: 0, scope: !2311)
!2313 = !DILocation(line: 1801, column: 10, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 1801, column: 8)
!2315 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 1800, column: 2)
!2316 = !DILocation(line: 1801, column: 8, scope: !2315)
!2317 = !DILocation(line: 1802, column: 6, scope: !2314)
!2318 = !DILocation(line: 1804, column: 19, scope: !2315)
!2319 = !DILocation(line: 1804, column: 4, scope: !2315)
!2320 = !DILocation(line: 1805, column: 15, scope: !2315)
!2321 = !DILocation(line: 1806, column: 17, scope: !2315)
!2322 = !DILocation(line: 1806, column: 4, scope: !2315)
!2323 = !DILocation(line: 1810, column: 16, scope: !2324)
!2324 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 1810, column: 4)
!2325 = !DILocation(line: 1810, column: 14, scope: !2324)
!2326 = !DILocation(line: 1810, column: 9, scope: !2324)
!2327 = !DILocation(line: 1810, column: 34, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !2324, file: !3, line: 1810, column: 4)
!2329 = !DILocation(line: 1810, column: 4, scope: !2324)
!2330 = !DILocation(line: 1811, column: 10, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2328, file: !3, line: 1811, column: 10)
!2332 = !DILocation(line: 1811, column: 31, scope: !2331)
!2333 = !DILocation(line: 1811, column: 10, scope: !2328)
!2334 = !DILocation(line: 1812, column: 24, scope: !2331)
!2335 = !DILocation(line: 1812, column: 8, scope: !2331)
!2336 = !DILocation(line: 1811, column: 34, scope: !2331)
!2337 = !DILocation(line: 1810, column: 47, scope: !2328)
!2338 = !DILocation(line: 1810, column: 45, scope: !2328)
!2339 = !DILocation(line: 1810, column: 4, scope: !2328)
!2340 = distinct !{!2340, !2329, !2341}
!2341 = !DILocation(line: 1812, column: 38, scope: !2324)
!2342 = !DILocation(line: 1819, column: 17, scope: !2315)
!2343 = !DILocation(line: 1819, column: 4, scope: !2315)
!2344 = !DILocation(line: 1826, column: 4, scope: !2315)
!2345 = !DILocation(line: 1826, column: 21, scope: !2315)
!2346 = !DILocation(line: 1826, column: 24, scope: !2315)
!2347 = !DILocalVariable(name: "note", scope: !2348, file: !3, line: 1828, type: !839)
!2348 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 1827, column: 6)
!2349 = !DILocation(line: 1828, column: 12, scope: !2348)
!2350 = !DILocation(line: 1828, column: 36, scope: !2348)
!2351 = !DILocation(line: 1829, column: 8, scope: !2348)
!2352 = !DILocation(line: 1828, column: 19, scope: !2348)
!2353 = !DILocation(line: 1830, column: 14, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 1830, column: 12)
!2355 = !DILocation(line: 1830, column: 12, scope: !2348)
!2356 = !DILocation(line: 1831, column: 3, scope: !2354)
!2357 = distinct !{!2357, !2344, !2358}
!2358 = !DILocation(line: 1834, column: 6, scope: !2315)
!2359 = !DILocation(line: 1833, column: 24, scope: !2348)
!2360 = !DILocation(line: 1833, column: 8, scope: !2348)
!2361 = !DILocation(line: 1835, column: 2, scope: !2315)
!2362 = distinct !{!2362, !2308, !2363}
!2363 = !DILocation(line: 1835, column: 2, scope: !2309)
!2364 = !DILocation(line: 1836, column: 5, scope: !2252)
!2365 = distinct !{!2365, !2247, !2366}
!2366 = !DILocation(line: 1836, column: 5, scope: !2248)
!2367 = !DILocation(line: 1837, column: 3, scope: !2199)
!2368 = !DILocation(line: 1838, column: 7, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1838, column: 7)
!2370 = !DILocation(line: 1838, column: 23, scope: !2369)
!2371 = !DILocation(line: 1839, column: 7, scope: !2369)
!2372 = !DILocation(line: 1839, column: 10, scope: !2369)
!2373 = !DILocation(line: 1839, column: 26, scope: !2369)
!2374 = !DILocation(line: 1838, column: 7, scope: !2199)
!2375 = !DILocation(line: 1840, column: 5, scope: !2376)
!2376 = distinct !DILexicalBlock(scope: !2369, file: !3, line: 1840, column: 5)
!2377 = !DILocation(line: 1840, column: 5, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2376, file: !3, line: 1840, column: 5)
!2379 = !DILocation(line: 1842, column: 2, scope: !2380)
!2380 = distinct !DILexicalBlock(scope: !2381, file: !3, line: 1842, column: 2)
!2381 = distinct !DILexicalBlock(scope: !2378, file: !3, line: 1841, column: 7)
!2382 = !DILocation(line: 1842, column: 2, scope: !2383)
!2383 = distinct !DILexicalBlock(scope: !2380, file: !3, line: 1842, column: 2)
!2384 = !DILocation(line: 1843, column: 25, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2383, file: !3, line: 1843, column: 8)
!2386 = !DILocation(line: 1843, column: 43, scope: !2385)
!2387 = !DILocation(line: 1843, column: 53, scope: !2385)
!2388 = !DILocation(line: 1843, column: 10, scope: !2385)
!2389 = !DILocation(line: 1843, column: 8, scope: !2383)
!2390 = !DILocalVariable(name: "cover_class", scope: !2391, file: !3, line: 1845, type: !718)
!2391 = distinct !DILexicalBlock(scope: !2385, file: !3, line: 1844, column: 6)
!2392 = !DILocation(line: 1845, column: 23, scope: !2391)
!2393 = !DILocalVariable(name: "nregs", scope: !2391, file: !3, line: 1846, type: !796)
!2394 = !DILocation(line: 1846, column: 12, scope: !2391)
!2395 = !DILocation(line: 1848, column: 45, scope: !2391)
!2396 = !DILocation(line: 1848, column: 22, scope: !2391)
!2397 = !DILocation(line: 1848, column: 20, scope: !2391)
!2398 = !DILocation(line: 1849, column: 59, scope: !2391)
!2399 = !DILocation(line: 1849, column: 8, scope: !2391)
!2400 = !DILocation(line: 1849, column: 26, scope: !2391)
!2401 = !DILocation(line: 1849, column: 43, scope: !2391)
!2402 = !DILocation(line: 1849, column: 56, scope: !2391)
!2403 = !DILocation(line: 1850, column: 6, scope: !2391)
!2404 = !DILocation(line: 1843, column: 54, scope: !2385)
!2405 = distinct !{!2405, !2379, !2406}
!2406 = !DILocation(line: 1850, column: 6, scope: !2380)
!2407 = !DILocation(line: 1851, column: 7, scope: !2381)
!2408 = distinct !{!2408, !2375, !2409}
!2409 = !DILocation(line: 1851, column: 7, scope: !2376)
!2410 = !DILocation(line: 1852, column: 7, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1852, column: 7)
!2412 = !DILocation(line: 1852, column: 17, scope: !2411)
!2413 = !DILocation(line: 1852, column: 7, scope: !2199)
!2414 = !DILocation(line: 1853, column: 5, scope: !2411)
!2415 = !DILocation(line: 1854, column: 3, scope: !2416)
!2416 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 1854, column: 3)
!2417 = !DILocation(line: 1854, column: 3, scope: !2418)
!2418 = distinct !DILexicalBlock(scope: !2416, file: !3, line: 1854, column: 3)
!2419 = !DILocation(line: 1856, column: 28, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2418, file: !3, line: 1855, column: 5)
!2421 = !DILocation(line: 1856, column: 16, scope: !2420)
!2422 = !DILocation(line: 1856, column: 14, scope: !2420)
!2423 = !DILocation(line: 1857, column: 16, scope: !2420)
!2424 = !DILocation(line: 1858, column: 9, scope: !2420)
!2425 = !DILocation(line: 1858, column: 15, scope: !2420)
!2426 = !DILocation(line: 1858, column: 21, scope: !2420)
!2427 = !DILocation(line: 1858, column: 28, scope: !2420)
!2428 = !DILocation(line: 1858, column: 43, scope: !2420)
!2429 = !DILocation(line: 1858, column: 51, scope: !2420)
!2430 = !DILocation(line: 1859, column: 9, scope: !2420)
!2431 = !DILocation(line: 1859, column: 15, scope: !2420)
!2432 = !DILocation(line: 1859, column: 23, scope: !2420)
!2433 = !DILocation(line: 1859, column: 42, scope: !2420)
!2434 = !DILocation(line: 1859, column: 30, scope: !2420)
!2435 = !DILocation(line: 1857, column: 7, scope: !2420)
!2436 = !DILocation(line: 1860, column: 16, scope: !2420)
!2437 = !DILocation(line: 1860, column: 7, scope: !2420)
!2438 = !DILocation(line: 1861, column: 7, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2420, file: !3, line: 1861, column: 7)
!2440 = !DILocation(line: 1861, column: 7, scope: !2441)
!2441 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 1861, column: 7)
!2442 = !DILocation(line: 1862, column: 11, scope: !2441)
!2443 = !DILocation(line: 1862, column: 29, scope: !2441)
!2444 = !DILocation(line: 1862, column: 2, scope: !2441)
!2445 = distinct !{!2445, !2438, !2446}
!2446 = !DILocation(line: 1862, column: 30, scope: !2439)
!2447 = !DILocation(line: 1863, column: 16, scope: !2420)
!2448 = !DILocation(line: 1863, column: 7, scope: !2420)
!2449 = !DILocation(line: 1864, column: 7, scope: !2450)
!2450 = distinct !DILexicalBlock(scope: !2420, file: !3, line: 1864, column: 7)
!2451 = !DILocation(line: 1864, column: 7, scope: !2452)
!2452 = distinct !DILexicalBlock(scope: !2450, file: !3, line: 1864, column: 7)
!2453 = !DILocation(line: 1865, column: 11, scope: !2452)
!2454 = !DILocation(line: 1865, column: 29, scope: !2452)
!2455 = !DILocation(line: 1865, column: 2, scope: !2452)
!2456 = distinct !{!2456, !2449, !2457}
!2457 = !DILocation(line: 1865, column: 30, scope: !2450)
!2458 = !DILocation(line: 1866, column: 16, scope: !2420)
!2459 = !DILocation(line: 1866, column: 7, scope: !2420)
!2460 = !DILocation(line: 1867, column: 14, scope: !2461)
!2461 = distinct !DILexicalBlock(scope: !2420, file: !3, line: 1867, column: 7)
!2462 = !DILocation(line: 1867, column: 12, scope: !2461)
!2463 = !DILocation(line: 1867, column: 25, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2461, file: !3, line: 1867, column: 7)
!2465 = !DILocation(line: 1867, column: 29, scope: !2464)
!2466 = !DILocation(line: 1867, column: 27, scope: !2464)
!2467 = !DILocation(line: 1867, column: 7, scope: !2461)
!2468 = !DILocalVariable(name: "cover_class", scope: !2469, file: !3, line: 1869, type: !718)
!2469 = distinct !DILexicalBlock(scope: !2464, file: !3, line: 1868, column: 2)
!2470 = !DILocation(line: 1869, column: 19, scope: !2469)
!2471 = !DILocation(line: 1871, column: 38, scope: !2469)
!2472 = !DILocation(line: 1871, column: 18, scope: !2469)
!2473 = !DILocation(line: 1871, column: 16, scope: !2469)
!2474 = !DILocation(line: 1872, column: 8, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2469, file: !3, line: 1872, column: 8)
!2476 = !DILocation(line: 1872, column: 26, scope: !2475)
!2477 = !DILocation(line: 1872, column: 43, scope: !2475)
!2478 = !DILocation(line: 1872, column: 56, scope: !2475)
!2479 = !DILocation(line: 1872, column: 8, scope: !2469)
!2480 = !DILocation(line: 1873, column: 6, scope: !2475)
!2481 = !DILocation(line: 1874, column: 13, scope: !2469)
!2482 = !DILocation(line: 1874, column: 50, scope: !2469)
!2483 = !DILocation(line: 1874, column: 34, scope: !2469)
!2484 = !DILocation(line: 1875, column: 6, scope: !2469)
!2485 = !DILocation(line: 1875, column: 24, scope: !2469)
!2486 = !DILocation(line: 1875, column: 41, scope: !2469)
!2487 = !DILocation(line: 1874, column: 4, scope: !2469)
!2488 = !DILocation(line: 1876, column: 2, scope: !2469)
!2489 = !DILocation(line: 1867, column: 56, scope: !2464)
!2490 = !DILocation(line: 1867, column: 7, scope: !2464)
!2491 = distinct !{!2491, !2467, !2492}
!2492 = !DILocation(line: 1876, column: 2, scope: !2461)
!2493 = !DILocation(line: 1877, column: 16, scope: !2420)
!2494 = !DILocation(line: 1877, column: 7, scope: !2420)
!2495 = !DILocation(line: 1878, column: 5, scope: !2420)
!2496 = distinct !{!2496, !2415, !2497}
!2497 = !DILocation(line: 1878, column: 5, scope: !2416)
!2498 = !DILocation(line: 1879, column: 1, scope: !2199)
!2499 = distinct !DISubprogram(name: "fel_init", scope: !385, file: !385, line: 535, type: !2500, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2500 = !DISubroutineType(types: !2501)
!2501 = !{null, !2502, !2503, !7}
!2502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!2504 = !DILocalVariable(name: "li", arg: 1, scope: !2499, file: !385, line: 535, type: !2502)
!2505 = !DILocation(line: 535, column: 26, scope: !2499)
!2506 = !DILocalVariable(name: "loop", arg: 2, scope: !2499, file: !385, line: 535, type: !2503)
!2507 = !DILocation(line: 535, column: 38, scope: !2499)
!2508 = !DILocalVariable(name: "flags", arg: 3, scope: !2499, file: !385, line: 535, type: !7)
!2509 = !DILocation(line: 535, column: 53, scope: !2499)
!2510 = !DILocalVariable(name: "aloop", scope: !2499, file: !385, line: 537, type: !802)
!2511 = !DILocation(line: 537, column: 16, scope: !2499)
!2512 = !DILocalVariable(name: "i", scope: !2499, file: !385, line: 538, type: !7)
!2513 = !DILocation(line: 538, column: 12, scope: !2499)
!2514 = !DILocalVariable(name: "mn", scope: !2499, file: !385, line: 539, type: !796)
!2515 = !DILocation(line: 539, column: 7, scope: !2499)
!2516 = !DILocation(line: 541, column: 3, scope: !2499)
!2517 = !DILocation(line: 541, column: 7, scope: !2499)
!2518 = !DILocation(line: 541, column: 11, scope: !2499)
!2519 = !DILocation(line: 542, column: 8, scope: !2520)
!2520 = distinct !DILexicalBlock(scope: !2499, file: !385, line: 542, column: 7)
!2521 = !DILocation(line: 542, column: 7, scope: !2499)
!2522 = !DILocation(line: 544, column: 7, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2520, file: !385, line: 543, column: 5)
!2524 = !DILocation(line: 544, column: 11, scope: !2523)
!2525 = !DILocation(line: 544, column: 20, scope: !2523)
!2526 = !DILocation(line: 545, column: 8, scope: !2523)
!2527 = !DILocation(line: 545, column: 13, scope: !2523)
!2528 = !DILocation(line: 546, column: 7, scope: !2523)
!2529 = !DILocation(line: 549, column: 18, scope: !2499)
!2530 = !DILocation(line: 549, column: 3, scope: !2499)
!2531 = !DILocation(line: 549, column: 7, scope: !2499)
!2532 = !DILocation(line: 549, column: 16, scope: !2499)
!2533 = !DILocation(line: 550, column: 9, scope: !2499)
!2534 = !DILocation(line: 550, column: 15, scope: !2499)
!2535 = !DILocation(line: 550, column: 8, scope: !2499)
!2536 = !DILocation(line: 550, column: 6, scope: !2499)
!2537 = !DILocation(line: 552, column: 7, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2499, file: !385, line: 552, column: 7)
!2539 = !DILocation(line: 552, column: 13, scope: !2538)
!2540 = !DILocation(line: 552, column: 7, scope: !2499)
!2541 = !DILocation(line: 554, column: 14, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2543, file: !385, line: 554, column: 7)
!2543 = distinct !DILexicalBlock(scope: !2538, file: !385, line: 553, column: 5)
!2544 = !DILocation(line: 554, column: 12, scope: !2542)
!2545 = !DILocation(line: 554, column: 19, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !2542, file: !385, line: 554, column: 7)
!2547 = !DILocation(line: 554, column: 7, scope: !2542)
!2548 = !DILocation(line: 555, column: 6, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2546, file: !385, line: 555, column: 6)
!2550 = !DILocation(line: 555, column: 12, scope: !2549)
!2551 = !DILocation(line: 556, column: 6, scope: !2549)
!2552 = !DILocation(line: 556, column: 9, scope: !2549)
!2553 = !DILocation(line: 556, column: 16, scope: !2549)
!2554 = !DILocation(line: 556, column: 22, scope: !2549)
!2555 = !DILocation(line: 557, column: 6, scope: !2549)
!2556 = !DILocation(line: 557, column: 9, scope: !2549)
!2557 = !DILocation(line: 557, column: 16, scope: !2549)
!2558 = !DILocation(line: 557, column: 23, scope: !2549)
!2559 = !DILocation(line: 557, column: 20, scope: !2549)
!2560 = !DILocation(line: 555, column: 6, scope: !2546)
!2561 = !DILocation(line: 558, column: 4, scope: !2549)
!2562 = !DILocation(line: 554, column: 75, scope: !2546)
!2563 = !DILocation(line: 554, column: 7, scope: !2546)
!2564 = distinct !{!2564, !2547, !2565}
!2565 = !DILocation(line: 558, column: 4, scope: !2542)
!2566 = !DILocation(line: 559, column: 5, scope: !2543)
!2567 = !DILocation(line: 560, column: 12, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2538, file: !385, line: 560, column: 12)
!2569 = !DILocation(line: 560, column: 18, scope: !2568)
!2570 = !DILocation(line: 560, column: 12, scope: !2538)
!2571 = !DILocation(line: 563, column: 20, scope: !2572)
!2572 = distinct !DILexicalBlock(scope: !2573, file: !385, line: 563, column: 7)
!2573 = distinct !DILexicalBlock(scope: !2568, file: !385, line: 561, column: 5)
!2574 = !DILocation(line: 563, column: 35, scope: !2572)
!2575 = !DILocation(line: 563, column: 18, scope: !2572)
!2576 = !DILocation(line: 563, column: 12, scope: !2572)
!2577 = !DILocation(line: 564, column: 5, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2572, file: !385, line: 563, column: 7)
!2579 = !DILocation(line: 564, column: 12, scope: !2578)
!2580 = !DILocation(line: 564, column: 18, scope: !2578)
!2581 = !DILocation(line: 563, column: 7, scope: !2572)
!2582 = !DILocation(line: 566, column: 2, scope: !2578)
!2583 = !DILocation(line: 565, column: 13, scope: !2578)
!2584 = !DILocation(line: 565, column: 20, scope: !2578)
!2585 = !DILocation(line: 565, column: 11, scope: !2578)
!2586 = !DILocation(line: 563, column: 7, scope: !2578)
!2587 = distinct !{!2587, !2581, !2588}
!2588 = !DILocation(line: 566, column: 2, scope: !2572)
!2589 = !DILocation(line: 568, column: 7, scope: !2573)
!2590 = !DILocation(line: 570, column: 8, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2592, file: !385, line: 570, column: 8)
!2592 = distinct !DILexicalBlock(scope: !2573, file: !385, line: 569, column: 2)
!2593 = !DILocation(line: 570, column: 15, scope: !2591)
!2594 = !DILocation(line: 570, column: 22, scope: !2591)
!2595 = !DILocation(line: 570, column: 19, scope: !2591)
!2596 = !DILocation(line: 570, column: 8, scope: !2592)
!2597 = !DILocation(line: 571, column: 6, scope: !2591)
!2598 = !DILocation(line: 573, column: 8, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2592, file: !385, line: 573, column: 8)
!2600 = !DILocation(line: 573, column: 15, scope: !2599)
!2601 = !DILocation(line: 573, column: 8, scope: !2592)
!2602 = !DILocation(line: 575, column: 21, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2604, file: !385, line: 575, column: 8)
!2604 = distinct !DILexicalBlock(scope: !2599, file: !385, line: 574, column: 6)
!2605 = !DILocation(line: 575, column: 28, scope: !2603)
!2606 = !DILocation(line: 575, column: 19, scope: !2603)
!2607 = !DILocation(line: 575, column: 13, scope: !2603)
!2608 = !DILocation(line: 576, column: 6, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2603, file: !385, line: 575, column: 8)
!2610 = !DILocation(line: 576, column: 13, scope: !2609)
!2611 = !DILocation(line: 576, column: 19, scope: !2609)
!2612 = !DILocation(line: 575, column: 8, scope: !2603)
!2613 = !DILocation(line: 578, column: 3, scope: !2609)
!2614 = !DILocation(line: 577, column: 14, scope: !2609)
!2615 = !DILocation(line: 577, column: 21, scope: !2609)
!2616 = !DILocation(line: 577, column: 12, scope: !2609)
!2617 = !DILocation(line: 575, column: 8, scope: !2609)
!2618 = distinct !{!2618, !2612, !2619}
!2619 = !DILocation(line: 578, column: 3, scope: !2603)
!2620 = !DILocation(line: 579, column: 6, scope: !2604)
!2621 = !DILocation(line: 580, column: 26, scope: !2622)
!2622 = distinct !DILexicalBlock(scope: !2599, file: !385, line: 580, column: 13)
!2623 = !DILocation(line: 580, column: 14, scope: !2622)
!2624 = !DILocation(line: 580, column: 13, scope: !2599)
!2625 = !DILocation(line: 581, column: 6, scope: !2622)
!2626 = !DILocation(line: 583, column: 26, scope: !2622)
!2627 = !DILocation(line: 583, column: 14, scope: !2622)
!2628 = !DILocation(line: 583, column: 12, scope: !2622)
!2629 = distinct !{!2629, !2589, !2630}
!2630 = !DILocation(line: 584, column: 2, scope: !2573)
!2631 = !DILocation(line: 585, column: 5, scope: !2573)
!2632 = !DILocation(line: 589, column: 15, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2568, file: !385, line: 587, column: 5)
!2634 = !DILocation(line: 589, column: 30, scope: !2633)
!2635 = !DILocation(line: 589, column: 13, scope: !2633)
!2636 = !DILocation(line: 590, column: 7, scope: !2633)
!2637 = !DILocation(line: 592, column: 8, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2639, file: !385, line: 592, column: 8)
!2639 = distinct !DILexicalBlock(scope: !2633, file: !385, line: 591, column: 2)
!2640 = !DILocation(line: 592, column: 15, scope: !2638)
!2641 = !DILocation(line: 592, column: 22, scope: !2638)
!2642 = !DILocation(line: 592, column: 19, scope: !2638)
!2643 = !DILocation(line: 592, column: 8, scope: !2639)
!2644 = !DILocation(line: 593, column: 6, scope: !2638)
!2645 = !DILocation(line: 595, column: 8, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2639, file: !385, line: 595, column: 8)
!2647 = !DILocation(line: 595, column: 15, scope: !2646)
!2648 = !DILocation(line: 595, column: 21, scope: !2646)
!2649 = !DILocation(line: 595, column: 8, scope: !2639)
!2650 = !DILocation(line: 596, column: 14, scope: !2646)
!2651 = !DILocation(line: 596, column: 21, scope: !2646)
!2652 = !DILocation(line: 596, column: 12, scope: !2646)
!2653 = !DILocation(line: 596, column: 6, scope: !2646)
!2654 = !DILocation(line: 599, column: 8, scope: !2655)
!2655 = distinct !DILexicalBlock(scope: !2646, file: !385, line: 598, column: 6)
!2656 = !DILocation(line: 599, column: 15, scope: !2655)
!2657 = !DILocation(line: 599, column: 21, scope: !2655)
!2658 = !DILocation(line: 599, column: 29, scope: !2655)
!2659 = !DILocation(line: 599, column: 32, scope: !2655)
!2660 = !DILocation(line: 599, column: 39, scope: !2655)
!2661 = !DILocation(line: 599, column: 44, scope: !2655)
!2662 = !DILocation(line: 0, scope: !2655)
!2663 = !DILocation(line: 600, column: 23, scope: !2655)
!2664 = !DILocation(line: 600, column: 11, scope: !2655)
!2665 = !DILocation(line: 600, column: 9, scope: !2655)
!2666 = distinct !{!2666, !2654, !2667}
!2667 = !DILocation(line: 600, column: 28, scope: !2655)
!2668 = !DILocation(line: 601, column: 12, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !2655, file: !385, line: 601, column: 12)
!2670 = !DILocation(line: 601, column: 18, scope: !2669)
!2671 = !DILocation(line: 601, column: 12, scope: !2655)
!2672 = !DILocation(line: 602, column: 3, scope: !2669)
!2673 = !DILocation(line: 603, column: 16, scope: !2655)
!2674 = !DILocation(line: 603, column: 23, scope: !2655)
!2675 = !DILocation(line: 603, column: 14, scope: !2655)
!2676 = distinct !{!2676, !2636, !2677}
!2677 = !DILocation(line: 605, column: 2, scope: !2633)
!2678 = !DILocation(line: 608, column: 13, scope: !2499)
!2679 = !DILocation(line: 608, column: 17, scope: !2499)
!2680 = !DILocation(line: 608, column: 3, scope: !2499)
!2681 = !DILocation(line: 609, column: 1, scope: !2499)
!2682 = distinct !DISubprogram(name: "move_single_loop_invariants", scope: !3, file: !3, line: 1552, type: !2683, scopeLine: 1553, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2683 = !DISubroutineType(types: !2684)
!2684 = !{null, !802}
!2685 = !DILocalVariable(name: "loop", arg: 1, scope: !2682, file: !3, line: 1552, type: !802)
!2686 = !DILocation(line: 1552, column: 43, scope: !2682)
!2687 = !DILocation(line: 1554, column: 3, scope: !2682)
!2688 = !DILocation(line: 1556, column: 20, scope: !2682)
!2689 = !DILocation(line: 1556, column: 3, scope: !2682)
!2690 = !DILocation(line: 1557, column: 55, scope: !2682)
!2691 = !DILocation(line: 1557, column: 28, scope: !2682)
!2692 = !DILocation(line: 1557, column: 3, scope: !2682)
!2693 = !DILocation(line: 1558, column: 20, scope: !2682)
!2694 = !DILocation(line: 1558, column: 3, scope: !2682)
!2695 = !DILocation(line: 1560, column: 3, scope: !2682)
!2696 = !DILocation(line: 1561, column: 1, scope: !2682)
!2697 = distinct !DISubprogram(name: "fel_next", scope: !385, file: !385, line: 518, type: !2698, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2698 = !DISubroutineType(types: !2699)
!2699 = !{null, !2502, !2503}
!2700 = !DILocalVariable(name: "li", arg: 1, scope: !2697, file: !385, line: 518, type: !2502)
!2701 = !DILocation(line: 518, column: 26, scope: !2697)
!2702 = !DILocalVariable(name: "loop", arg: 2, scope: !2697, file: !385, line: 518, type: !2503)
!2703 = !DILocation(line: 518, column: 38, scope: !2697)
!2704 = !DILocalVariable(name: "anum", scope: !2697, file: !385, line: 520, type: !796)
!2705 = !DILocation(line: 520, column: 7, scope: !2697)
!2706 = !DILocation(line: 522, column: 3, scope: !2697)
!2707 = !DILocation(line: 522, column: 10, scope: !2697)
!2708 = !DILocation(line: 524, column: 7, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2697, file: !385, line: 523, column: 5)
!2710 = !DILocation(line: 524, column: 11, scope: !2709)
!2711 = !DILocation(line: 524, column: 14, scope: !2709)
!2712 = !DILocation(line: 525, column: 25, scope: !2709)
!2713 = !DILocation(line: 525, column: 15, scope: !2709)
!2714 = !DILocation(line: 525, column: 8, scope: !2709)
!2715 = !DILocation(line: 525, column: 13, scope: !2709)
!2716 = !DILocation(line: 526, column: 12, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2709, file: !385, line: 526, column: 11)
!2718 = !DILocation(line: 526, column: 11, scope: !2717)
!2719 = !DILocation(line: 526, column: 11, scope: !2709)
!2720 = !DILocation(line: 527, column: 2, scope: !2717)
!2721 = distinct !{!2721, !2706, !2722}
!2722 = !DILocation(line: 528, column: 5, scope: !2697)
!2723 = !DILocation(line: 530, column: 3, scope: !2697)
!2724 = !DILocation(line: 531, column: 4, scope: !2697)
!2725 = !DILocation(line: 531, column: 9, scope: !2697)
!2726 = !DILocation(line: 532, column: 1, scope: !2697)
!2727 = distinct !DISubprogram(name: "free_loop_data", scope: !3, file: !3, line: 1566, type: !2683, scopeLine: 1567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2728 = !DILocalVariable(name: "loop", arg: 1, scope: !2727, file: !3, line: 1566, type: !802)
!2729 = !DILocation(line: 1566, column: 30, scope: !2727)
!2730 = !DILocalVariable(name: "data", scope: !2727, file: !3, line: 1568, type: !798)
!2731 = !DILocation(line: 1568, column: 21, scope: !2727)
!2732 = !DILocation(line: 1568, column: 28, scope: !2727)
!2733 = !DILocation(line: 1569, column: 8, scope: !2734)
!2734 = distinct !DILexicalBlock(scope: !2727, file: !3, line: 1569, column: 7)
!2735 = !DILocation(line: 1569, column: 7, scope: !2727)
!2736 = !DILocation(line: 1570, column: 5, scope: !2734)
!2737 = !DILocation(line: 1572, column: 18, scope: !2727)
!2738 = !DILocation(line: 1572, column: 36, scope: !2727)
!2739 = !DILocation(line: 1572, column: 3, scope: !2727)
!2740 = !DILocation(line: 1573, column: 18, scope: !2727)
!2741 = !DILocation(line: 1573, column: 36, scope: !2727)
!2742 = !DILocation(line: 1573, column: 3, scope: !2727)
!2743 = !DILocation(line: 1574, column: 9, scope: !2727)
!2744 = !DILocation(line: 1574, column: 3, scope: !2727)
!2745 = !DILocation(line: 1575, column: 3, scope: !2727)
!2746 = !DILocation(line: 1575, column: 9, scope: !2727)
!2747 = !DILocation(line: 1575, column: 13, scope: !2727)
!2748 = !DILocation(line: 1576, column: 1, scope: !2727)
!2749 = distinct !DISubprogram(name: "bitmap_initialize_stat", scope: !897, file: !897, line: 165, type: !2750, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{null, !2044, !917}
!2752 = !DILocalVariable(name: "head", arg: 1, scope: !2749, file: !897, line: 165, type: !2044)
!2753 = !DILocation(line: 165, column: 32, scope: !2749)
!2754 = !DILocalVariable(name: "obstack", arg: 2, scope: !2749, file: !897, line: 165, type: !917)
!2755 = !DILocation(line: 165, column: 54, scope: !2749)
!2756 = !DILocation(line: 167, column: 17, scope: !2749)
!2757 = !DILocation(line: 167, column: 23, scope: !2749)
!2758 = !DILocation(line: 167, column: 31, scope: !2749)
!2759 = !DILocation(line: 167, column: 3, scope: !2749)
!2760 = !DILocation(line: 167, column: 9, scope: !2749)
!2761 = !DILocation(line: 167, column: 15, scope: !2749)
!2762 = !DILocation(line: 168, column: 19, scope: !2749)
!2763 = !DILocation(line: 168, column: 3, scope: !2749)
!2764 = !DILocation(line: 168, column: 9, scope: !2749)
!2765 = !DILocation(line: 168, column: 17, scope: !2749)
!2766 = !DILocation(line: 172, column: 1, scope: !2749)
!2767 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !398, file: !398, line: 1052, type: !2768, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2768 = !DISubroutineType(types: !2769)
!2769 = !{!2040, !7}
!2770 = !DILocalVariable(name: "index", arg: 1, scope: !2767, file: !398, line: 1052, type: !7)
!2771 = !DILocation(line: 1052, column: 33, scope: !2767)
!2772 = !DILocation(line: 1054, column: 7, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !2767, file: !398, line: 1054, column: 7)
!2774 = !DILocation(line: 1054, column: 15, scope: !2773)
!2775 = !DILocation(line: 1054, column: 22, scope: !2773)
!2776 = !DILocation(line: 1054, column: 13, scope: !2773)
!2777 = !DILocation(line: 1054, column: 7, scope: !2767)
!2778 = !DILocation(line: 1055, column: 37, scope: !2773)
!2779 = !DILocation(line: 1055, column: 44, scope: !2773)
!2780 = !DILocation(line: 1055, column: 55, scope: !2773)
!2781 = !DILocation(line: 1055, column: 12, scope: !2773)
!2782 = !DILocation(line: 1055, column: 5, scope: !2773)
!2783 = !DILocation(line: 1057, column: 5, scope: !2773)
!2784 = !DILocation(line: 1058, column: 1, scope: !2767)
!2785 = distinct !DISubprogram(name: "loop_outer", scope: !385, file: !385, line: 434, type: !2786, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2786 = !DISubroutineType(types: !2787)
!2787 = !{!802, !2788}
!2788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2789, size: 64)
!2789 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !803)
!2790 = !DILocalVariable(name: "loop", arg: 1, scope: !2785, file: !385, line: 434, type: !2788)
!2791 = !DILocation(line: 434, column: 32, scope: !2785)
!2792 = !DILocalVariable(name: "n", scope: !2785, file: !385, line: 436, type: !7)
!2793 = !DILocation(line: 436, column: 12, scope: !2785)
!2794 = !DILocation(line: 436, column: 16, scope: !2785)
!2795 = !DILocation(line: 438, column: 7, scope: !2796)
!2796 = distinct !DILexicalBlock(scope: !2785, file: !385, line: 438, column: 7)
!2797 = !DILocation(line: 438, column: 9, scope: !2796)
!2798 = !DILocation(line: 438, column: 7, scope: !2785)
!2799 = !DILocation(line: 439, column: 5, scope: !2796)
!2800 = !DILocation(line: 441, column: 10, scope: !2785)
!2801 = !DILocation(line: 441, column: 3, scope: !2785)
!2802 = !DILocation(line: 442, column: 1, scope: !2785)
!2803 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !897, file: !897, line: 224, type: !2804, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2804 = !DISubroutineType(types: !2805)
!2805 = !{null, !2806, !2807, !7, !2810}
!2806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2205, size: 64)
!2807 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !825, line: 48, baseType: !2808)
!2808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2809, size: 64)
!2809 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !896)
!2810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!2811 = !DILocalVariable(name: "bi", arg: 1, scope: !2803, file: !897, line: 224, type: !2806)
!2812 = !DILocation(line: 224, column: 37, scope: !2803)
!2813 = !DILocalVariable(name: "map", arg: 2, scope: !2803, file: !897, line: 224, type: !2807)
!2814 = !DILocation(line: 224, column: 54, scope: !2803)
!2815 = !DILocalVariable(name: "start_bit", arg: 3, scope: !2803, file: !897, line: 225, type: !7)
!2816 = !DILocation(line: 225, column: 15, scope: !2803)
!2817 = !DILocalVariable(name: "bit_no", arg: 4, scope: !2803, file: !897, line: 225, type: !2810)
!2818 = !DILocation(line: 225, column: 36, scope: !2803)
!2819 = !DILocation(line: 227, column: 14, scope: !2803)
!2820 = !DILocation(line: 227, column: 19, scope: !2803)
!2821 = !DILocation(line: 227, column: 3, scope: !2803)
!2822 = !DILocation(line: 227, column: 7, scope: !2803)
!2823 = !DILocation(line: 227, column: 12, scope: !2803)
!2824 = !DILocation(line: 228, column: 3, scope: !2803)
!2825 = !DILocation(line: 228, column: 7, scope: !2803)
!2826 = !DILocation(line: 228, column: 12, scope: !2803)
!2827 = !DILocation(line: 231, column: 3, scope: !2803)
!2828 = !DILocation(line: 233, column: 12, scope: !2829)
!2829 = distinct !DILexicalBlock(scope: !2830, file: !897, line: 233, column: 11)
!2830 = distinct !DILexicalBlock(scope: !2803, file: !897, line: 232, column: 5)
!2831 = !DILocation(line: 233, column: 16, scope: !2829)
!2832 = !DILocation(line: 233, column: 11, scope: !2830)
!2833 = !DILocation(line: 235, column: 4, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2829, file: !897, line: 234, column: 2)
!2835 = !DILocation(line: 235, column: 8, scope: !2834)
!2836 = !DILocation(line: 235, column: 13, scope: !2834)
!2837 = !DILocation(line: 236, column: 4, scope: !2834)
!2838 = !DILocation(line: 239, column: 11, scope: !2839)
!2839 = distinct !DILexicalBlock(scope: !2830, file: !897, line: 239, column: 11)
!2840 = !DILocation(line: 239, column: 15, scope: !2839)
!2841 = !DILocation(line: 239, column: 21, scope: !2839)
!2842 = !DILocation(line: 239, column: 29, scope: !2839)
!2843 = !DILocation(line: 239, column: 39, scope: !2839)
!2844 = !DILocation(line: 239, column: 26, scope: !2839)
!2845 = !DILocation(line: 239, column: 11, scope: !2830)
!2846 = !DILocation(line: 240, column: 2, scope: !2839)
!2847 = !DILocation(line: 241, column: 18, scope: !2830)
!2848 = !DILocation(line: 241, column: 22, scope: !2830)
!2849 = !DILocation(line: 241, column: 28, scope: !2830)
!2850 = !DILocation(line: 241, column: 7, scope: !2830)
!2851 = !DILocation(line: 241, column: 11, scope: !2830)
!2852 = !DILocation(line: 241, column: 16, scope: !2830)
!2853 = distinct !{!2853, !2827, !2854}
!2854 = !DILocation(line: 242, column: 5, scope: !2803)
!2855 = !DILocation(line: 245, column: 7, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2803, file: !897, line: 245, column: 7)
!2857 = !DILocation(line: 245, column: 11, scope: !2856)
!2858 = !DILocation(line: 245, column: 17, scope: !2856)
!2859 = !DILocation(line: 245, column: 25, scope: !2856)
!2860 = !DILocation(line: 245, column: 35, scope: !2856)
!2861 = !DILocation(line: 245, column: 22, scope: !2856)
!2862 = !DILocation(line: 245, column: 7, scope: !2803)
!2863 = !DILocation(line: 246, column: 17, scope: !2856)
!2864 = !DILocation(line: 246, column: 21, scope: !2856)
!2865 = !DILocation(line: 246, column: 27, scope: !2856)
!2866 = !DILocation(line: 246, column: 32, scope: !2856)
!2867 = !DILocation(line: 246, column: 15, scope: !2856)
!2868 = !DILocation(line: 246, column: 5, scope: !2856)
!2869 = !DILocation(line: 249, column: 17, scope: !2803)
!2870 = !DILocation(line: 249, column: 27, scope: !2803)
!2871 = !DILocation(line: 249, column: 46, scope: !2803)
!2872 = !DILocation(line: 249, column: 3, scope: !2803)
!2873 = !DILocation(line: 249, column: 7, scope: !2803)
!2874 = !DILocation(line: 249, column: 15, scope: !2803)
!2875 = !DILocation(line: 250, column: 14, scope: !2803)
!2876 = !DILocation(line: 250, column: 18, scope: !2803)
!2877 = !DILocation(line: 250, column: 24, scope: !2803)
!2878 = !DILocation(line: 250, column: 29, scope: !2803)
!2879 = !DILocation(line: 250, column: 33, scope: !2803)
!2880 = !DILocation(line: 250, column: 3, scope: !2803)
!2881 = !DILocation(line: 250, column: 7, scope: !2803)
!2882 = !DILocation(line: 250, column: 12, scope: !2803)
!2883 = !DILocation(line: 251, column: 16, scope: !2803)
!2884 = !DILocation(line: 251, column: 26, scope: !2803)
!2885 = !DILocation(line: 251, column: 3, scope: !2803)
!2886 = !DILocation(line: 251, column: 7, scope: !2803)
!2887 = !DILocation(line: 251, column: 12, scope: !2803)
!2888 = !DILocation(line: 257, column: 17, scope: !2803)
!2889 = !DILocation(line: 257, column: 21, scope: !2803)
!2890 = !DILocation(line: 257, column: 16, scope: !2803)
!2891 = !DILocation(line: 257, column: 13, scope: !2803)
!2892 = !DILocation(line: 259, column: 13, scope: !2803)
!2893 = !DILocation(line: 259, column: 4, scope: !2803)
!2894 = !DILocation(line: 259, column: 11, scope: !2803)
!2895 = !DILocation(line: 260, column: 1, scope: !2803)
!2896 = distinct !DISubprogram(name: "bmp_iter_set", scope: !897, file: !897, line: 393, type: !2897, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2897 = !DISubroutineType(types: !2898)
!2898 = !{!1071, !2806, !2810}
!2899 = !DILocalVariable(name: "bi", arg: 1, scope: !2896, file: !897, line: 393, type: !2806)
!2900 = !DILocation(line: 393, column: 32, scope: !2896)
!2901 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2896, file: !897, line: 393, type: !2810)
!2902 = !DILocation(line: 393, column: 46, scope: !2896)
!2903 = !DILocation(line: 396, column: 7, scope: !2904)
!2904 = distinct !DILexicalBlock(scope: !2896, file: !897, line: 396, column: 7)
!2905 = !DILocation(line: 396, column: 11, scope: !2904)
!2906 = !DILocation(line: 396, column: 7, scope: !2896)
!2907 = !DILocation(line: 397, column: 5, scope: !2904)
!2908 = !DILabel(scope: !2909, name: "next_bit", file: !897, line: 398)
!2909 = distinct !DILexicalBlock(scope: !2904, file: !897, line: 397, column: 5)
!2910 = !DILocation(line: 398, column: 5, scope: !2909)
!2911 = !DILocation(line: 399, column: 7, scope: !2909)
!2912 = !DILocation(line: 399, column: 16, scope: !2909)
!2913 = !DILocation(line: 399, column: 20, scope: !2909)
!2914 = !DILocation(line: 399, column: 25, scope: !2909)
!2915 = !DILocation(line: 399, column: 14, scope: !2909)
!2916 = !DILocation(line: 401, column: 4, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2909, file: !897, line: 400, column: 2)
!2918 = !DILocation(line: 401, column: 8, scope: !2917)
!2919 = !DILocation(line: 401, column: 13, scope: !2917)
!2920 = !DILocation(line: 402, column: 5, scope: !2917)
!2921 = !DILocation(line: 402, column: 12, scope: !2917)
!2922 = distinct !{!2922, !2911, !2923}
!2923 = !DILocation(line: 403, column: 2, scope: !2909)
!2924 = !DILocation(line: 404, column: 7, scope: !2909)
!2925 = !DILocation(line: 410, column: 16, scope: !2896)
!2926 = !DILocation(line: 410, column: 15, scope: !2896)
!2927 = !DILocation(line: 410, column: 23, scope: !2896)
!2928 = !DILocation(line: 410, column: 42, scope: !2896)
!2929 = !DILocation(line: 411, column: 7, scope: !2896)
!2930 = !DILocation(line: 411, column: 26, scope: !2896)
!2931 = !DILocation(line: 410, column: 4, scope: !2896)
!2932 = !DILocation(line: 410, column: 11, scope: !2896)
!2933 = !DILocation(line: 412, column: 3, scope: !2896)
!2934 = !DILocation(line: 412, column: 7, scope: !2896)
!2935 = !DILocation(line: 412, column: 14, scope: !2896)
!2936 = !DILocation(line: 414, column: 3, scope: !2896)
!2937 = !DILocation(line: 417, column: 7, scope: !2938)
!2938 = distinct !DILexicalBlock(scope: !2896, file: !897, line: 415, column: 5)
!2939 = !DILocation(line: 417, column: 14, scope: !2938)
!2940 = !DILocation(line: 417, column: 18, scope: !2938)
!2941 = !DILocation(line: 417, column: 26, scope: !2938)
!2942 = !DILocation(line: 419, column: 15, scope: !2943)
!2943 = distinct !DILexicalBlock(scope: !2938, file: !897, line: 418, column: 2)
!2944 = !DILocation(line: 419, column: 19, scope: !2943)
!2945 = !DILocation(line: 419, column: 25, scope: !2943)
!2946 = !DILocation(line: 419, column: 30, scope: !2943)
!2947 = !DILocation(line: 419, column: 34, scope: !2943)
!2948 = !DILocation(line: 419, column: 4, scope: !2943)
!2949 = !DILocation(line: 419, column: 8, scope: !2943)
!2950 = !DILocation(line: 419, column: 13, scope: !2943)
!2951 = !DILocation(line: 420, column: 8, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2943, file: !897, line: 420, column: 8)
!2953 = !DILocation(line: 420, column: 12, scope: !2952)
!2954 = !DILocation(line: 420, column: 8, scope: !2943)
!2955 = !DILocation(line: 421, column: 6, scope: !2952)
!2956 = !DILocation(line: 422, column: 5, scope: !2943)
!2957 = !DILocation(line: 422, column: 12, scope: !2943)
!2958 = !DILocation(line: 423, column: 4, scope: !2943)
!2959 = !DILocation(line: 423, column: 8, scope: !2943)
!2960 = !DILocation(line: 423, column: 15, scope: !2943)
!2961 = distinct !{!2961, !2937, !2962}
!2962 = !DILocation(line: 424, column: 2, scope: !2938)
!2963 = !DILocation(line: 427, column: 18, scope: !2938)
!2964 = !DILocation(line: 427, column: 22, scope: !2938)
!2965 = !DILocation(line: 427, column: 28, scope: !2938)
!2966 = !DILocation(line: 427, column: 7, scope: !2938)
!2967 = !DILocation(line: 427, column: 11, scope: !2938)
!2968 = !DILocation(line: 427, column: 16, scope: !2938)
!2969 = !DILocation(line: 428, column: 12, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2938, file: !897, line: 428, column: 11)
!2971 = !DILocation(line: 428, column: 16, scope: !2970)
!2972 = !DILocation(line: 428, column: 11, scope: !2938)
!2973 = !DILocation(line: 429, column: 2, scope: !2970)
!2974 = !DILocation(line: 430, column: 17, scope: !2938)
!2975 = !DILocation(line: 430, column: 21, scope: !2938)
!2976 = !DILocation(line: 430, column: 27, scope: !2938)
!2977 = !DILocation(line: 430, column: 32, scope: !2938)
!2978 = !DILocation(line: 430, column: 8, scope: !2938)
!2979 = !DILocation(line: 430, column: 15, scope: !2938)
!2980 = !DILocation(line: 431, column: 7, scope: !2938)
!2981 = !DILocation(line: 431, column: 11, scope: !2938)
!2982 = !DILocation(line: 431, column: 19, scope: !2938)
!2983 = distinct !{!2983, !2936, !2984}
!2984 = !DILocation(line: 432, column: 5, scope: !2896)
!2985 = !DILocation(line: 433, column: 1, scope: !2896)
!2986 = distinct !DISubprogram(name: "change_pressure", scope: !3, file: !3, line: 1622, type: !2987, scopeLine: 1623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{null, !796, !1071}
!2989 = !DILocalVariable(name: "regno", arg: 1, scope: !2986, file: !3, line: 1622, type: !796)
!2990 = !DILocation(line: 1622, column: 22, scope: !2986)
!2991 = !DILocalVariable(name: "incr_p", arg: 2, scope: !2986, file: !3, line: 1622, type: !1071)
!2992 = !DILocation(line: 1622, column: 34, scope: !2986)
!2993 = !DILocalVariable(name: "nregs", scope: !2986, file: !3, line: 1624, type: !796)
!2994 = !DILocation(line: 1624, column: 7, scope: !2986)
!2995 = !DILocalVariable(name: "cover_class", scope: !2986, file: !3, line: 1625, type: !718)
!2996 = !DILocation(line: 1625, column: 18, scope: !2986)
!2997 = !DILocation(line: 1627, column: 40, scope: !2986)
!2998 = !DILocation(line: 1627, column: 17, scope: !2986)
!2999 = !DILocation(line: 1627, column: 15, scope: !2986)
!3000 = !DILocation(line: 1628, column: 9, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2986, file: !3, line: 1628, column: 7)
!3002 = !DILocation(line: 1628, column: 7, scope: !2986)
!3003 = !DILocation(line: 1629, column: 39, scope: !3001)
!3004 = !DILocation(line: 1629, column: 23, scope: !3001)
!3005 = !DILocation(line: 1629, column: 5, scope: !3001)
!3006 = !DILocation(line: 1629, column: 36, scope: !3001)
!3007 = !DILocation(line: 1632, column: 41, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 1631, column: 5)
!3009 = !DILocation(line: 1632, column: 25, scope: !3008)
!3010 = !DILocation(line: 1632, column: 7, scope: !3008)
!3011 = !DILocation(line: 1632, column: 38, scope: !3008)
!3012 = !DILocation(line: 1633, column: 11, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 1633, column: 11)
!3014 = !DILocation(line: 1633, column: 34, scope: !3013)
!3015 = !DILocation(line: 1633, column: 51, scope: !3013)
!3016 = !DILocation(line: 1634, column: 24, scope: !3013)
!3017 = !DILocation(line: 1634, column: 6, scope: !3013)
!3018 = !DILocation(line: 1634, column: 4, scope: !3013)
!3019 = !DILocation(line: 1633, column: 11, scope: !3008)
!3020 = !DILocation(line: 1636, column: 24, scope: !3013)
!3021 = !DILocation(line: 1636, column: 6, scope: !3013)
!3022 = !DILocation(line: 1635, column: 2, scope: !3013)
!3023 = !DILocation(line: 1635, column: 25, scope: !3013)
!3024 = !DILocation(line: 1635, column: 42, scope: !3013)
!3025 = !DILocation(line: 1636, column: 4, scope: !3013)
!3026 = !DILocation(line: 1638, column: 1, scope: !2986)
!3027 = distinct !DISubprogram(name: "bmp_iter_next", scope: !897, file: !897, line: 382, type: !3028, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3028 = !DISubroutineType(types: !3029)
!3029 = !{null, !2806, !2810}
!3030 = !DILocalVariable(name: "bi", arg: 1, scope: !3027, file: !897, line: 382, type: !2806)
!3031 = !DILocation(line: 382, column: 33, scope: !3027)
!3032 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3027, file: !897, line: 382, type: !2810)
!3033 = !DILocation(line: 382, column: 47, scope: !3027)
!3034 = !DILocation(line: 384, column: 3, scope: !3027)
!3035 = !DILocation(line: 384, column: 7, scope: !3027)
!3036 = !DILocation(line: 384, column: 12, scope: !3027)
!3037 = !DILocation(line: 385, column: 4, scope: !3027)
!3038 = !DILocation(line: 385, column: 11, scope: !3027)
!3039 = !DILocation(line: 386, column: 1, scope: !3027)
!3040 = distinct !DISubprogram(name: "mark_ref_regs", scope: !3, file: !3, line: 1727, type: !3041, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3041 = !DISubroutineType(types: !3042)
!3042 = !{null, !839}
!3043 = !DILocalVariable(name: "x", arg: 1, scope: !3040, file: !3, line: 1727, type: !839)
!3044 = !DILocation(line: 1727, column: 20, scope: !3040)
!3045 = !DILocalVariable(name: "code", scope: !3040, file: !3, line: 1729, type: !535)
!3046 = !DILocation(line: 1729, column: 12, scope: !3040)
!3047 = !DILocalVariable(name: "i", scope: !3040, file: !3, line: 1730, type: !796)
!3048 = !DILocation(line: 1730, column: 7, scope: !3040)
!3049 = !DILocalVariable(name: "fmt", scope: !3040, file: !3, line: 1731, type: !864)
!3050 = !DILocation(line: 1731, column: 15, scope: !3040)
!3051 = !DILocation(line: 1733, column: 8, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1733, column: 7)
!3053 = !DILocation(line: 1733, column: 7, scope: !3040)
!3054 = !DILocation(line: 1734, column: 5, scope: !3052)
!3055 = !DILocation(line: 1736, column: 10, scope: !3040)
!3056 = !DILocation(line: 1736, column: 8, scope: !3040)
!3057 = !DILocation(line: 1737, column: 7, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1737, column: 7)
!3059 = !DILocation(line: 1737, column: 12, scope: !3058)
!3060 = !DILocation(line: 1737, column: 7, scope: !3040)
!3061 = !DILocalVariable(name: "loop", scope: !3062, file: !3, line: 1739, type: !802)
!3062 = distinct !DILexicalBlock(scope: !3058, file: !3, line: 1738, column: 5)
!3063 = !DILocation(line: 1739, column: 20, scope: !3062)
!3064 = !DILocation(line: 1741, column: 19, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3062, file: !3, line: 1741, column: 7)
!3066 = !DILocation(line: 1741, column: 17, scope: !3065)
!3067 = !DILocation(line: 1741, column: 12, scope: !3065)
!3068 = !DILocation(line: 1742, column: 5, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 1741, column: 7)
!3070 = !DILocation(line: 1742, column: 13, scope: !3069)
!3071 = !DILocation(line: 1742, column: 28, scope: !3069)
!3072 = !DILocation(line: 1742, column: 10, scope: !3069)
!3073 = !DILocation(line: 1741, column: 7, scope: !3065)
!3074 = !DILocation(line: 1744, column: 19, scope: !3069)
!3075 = !DILocation(line: 1744, column: 37, scope: !3069)
!3076 = !DILocation(line: 1744, column: 47, scope: !3069)
!3077 = !DILocation(line: 1744, column: 2, scope: !3069)
!3078 = !DILocation(line: 1743, column: 24, scope: !3069)
!3079 = !DILocation(line: 1743, column: 12, scope: !3069)
!3080 = !DILocation(line: 1743, column: 10, scope: !3069)
!3081 = !DILocation(line: 1741, column: 7, scope: !3069)
!3082 = distinct !{!3082, !3073, !3083}
!3083 = !DILocation(line: 1744, column: 56, scope: !3065)
!3084 = !DILocation(line: 1745, column: 7, scope: !3062)
!3085 = !DILocation(line: 1748, column: 9, scope: !3040)
!3086 = !DILocation(line: 1748, column: 7, scope: !3040)
!3087 = !DILocation(line: 1749, column: 12, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3040, file: !3, line: 1749, column: 3)
!3089 = !DILocation(line: 1749, column: 34, scope: !3088)
!3090 = !DILocation(line: 1749, column: 10, scope: !3088)
!3091 = !DILocation(line: 1749, column: 8, scope: !3088)
!3092 = !DILocation(line: 1749, column: 39, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3088, file: !3, line: 1749, column: 3)
!3094 = !DILocation(line: 1749, column: 41, scope: !3093)
!3095 = !DILocation(line: 1749, column: 3, scope: !3088)
!3096 = !DILocation(line: 1750, column: 9, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 1750, column: 9)
!3098 = !DILocation(line: 1750, column: 13, scope: !3097)
!3099 = !DILocation(line: 1750, column: 16, scope: !3097)
!3100 = !DILocation(line: 1750, column: 9, scope: !3093)
!3101 = !DILocation(line: 1751, column: 22, scope: !3097)
!3102 = !DILocation(line: 1751, column: 7, scope: !3097)
!3103 = !DILocation(line: 1752, column: 14, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3097, file: !3, line: 1752, column: 14)
!3105 = !DILocation(line: 1752, column: 18, scope: !3104)
!3106 = !DILocation(line: 1752, column: 21, scope: !3104)
!3107 = !DILocation(line: 1752, column: 14, scope: !3097)
!3108 = !DILocalVariable(name: "j", scope: !3109, file: !3, line: 1754, type: !796)
!3109 = distinct !DILexicalBlock(scope: !3104, file: !3, line: 1753, column: 7)
!3110 = !DILocation(line: 1754, column: 6, scope: !3109)
!3111 = !DILocation(line: 1756, column: 9, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1756, column: 2)
!3113 = !DILocation(line: 1756, column: 7, scope: !3112)
!3114 = !DILocation(line: 1756, column: 14, scope: !3115)
!3115 = distinct !DILexicalBlock(scope: !3112, file: !3, line: 1756, column: 2)
!3116 = !DILocation(line: 1756, column: 18, scope: !3115)
!3117 = !DILocation(line: 1756, column: 16, scope: !3115)
!3118 = !DILocation(line: 1756, column: 2, scope: !3112)
!3119 = !DILocation(line: 1757, column: 19, scope: !3115)
!3120 = !DILocation(line: 1757, column: 4, scope: !3115)
!3121 = !DILocation(line: 1756, column: 35, scope: !3115)
!3122 = !DILocation(line: 1756, column: 2, scope: !3115)
!3123 = distinct !{!3123, !3118, !3124}
!3124 = !DILocation(line: 1757, column: 36, scope: !3112)
!3125 = !DILocation(line: 1758, column: 7, scope: !3109)
!3126 = !DILocation(line: 1750, column: 19, scope: !3097)
!3127 = !DILocation(line: 1749, column: 48, scope: !3093)
!3128 = !DILocation(line: 1749, column: 3, scope: !3093)
!3129 = distinct !{!3129, !3095, !3130}
!3130 = !DILocation(line: 1758, column: 7, scope: !3088)
!3131 = !DILocation(line: 1759, column: 1, scope: !3040)
!3132 = distinct !DISubprogram(name: "mark_reg_clobber", scope: !3, file: !3, line: 1699, type: !3133, scopeLine: 1700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3133 = !DISubroutineType(types: !3134)
!3134 = !{null, !839, !3135, !797}
!3135 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !825, line: 51, baseType: !3136)
!3136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3137, size: 64)
!3137 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !841)
!3138 = !DILocalVariable(name: "reg", arg: 1, scope: !3132, file: !3, line: 1699, type: !839)
!3139 = !DILocation(line: 1699, column: 23, scope: !3132)
!3140 = !DILocalVariable(name: "setter", arg: 2, scope: !3132, file: !3, line: 1699, type: !3135)
!3141 = !DILocation(line: 1699, column: 38, scope: !3132)
!3142 = !DILocalVariable(name: "data", arg: 3, scope: !3132, file: !3, line: 1699, type: !797)
!3143 = !DILocation(line: 1699, column: 52, scope: !3132)
!3144 = !DILocation(line: 1701, column: 7, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3132, file: !3, line: 1701, column: 7)
!3146 = !DILocation(line: 1701, column: 25, scope: !3145)
!3147 = !DILocation(line: 1701, column: 7, scope: !3132)
!3148 = !DILocation(line: 1702, column: 21, scope: !3145)
!3149 = !DILocation(line: 1702, column: 26, scope: !3145)
!3150 = !DILocation(line: 1702, column: 34, scope: !3145)
!3151 = !DILocation(line: 1702, column: 5, scope: !3145)
!3152 = !DILocation(line: 1703, column: 1, scope: !3132)
!3153 = distinct !DISubprogram(name: "mark_reg_death", scope: !3, file: !3, line: 1707, type: !3041, scopeLine: 1708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3154 = !DILocalVariable(name: "reg", arg: 1, scope: !3153, file: !3, line: 1707, type: !839)
!3155 = !DILocation(line: 1707, column: 21, scope: !3153)
!3156 = !DILocalVariable(name: "regno", scope: !3153, file: !3, line: 1709, type: !796)
!3157 = !DILocation(line: 1709, column: 7, scope: !3153)
!3158 = !DILocation(line: 1709, column: 15, scope: !3153)
!3159 = !DILocation(line: 1711, column: 7, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 1711, column: 7)
!3161 = !DILocation(line: 1711, column: 13, scope: !3160)
!3162 = !DILocation(line: 1711, column: 7, scope: !3153)
!3163 = !DILocation(line: 1712, column: 23, scope: !3160)
!3164 = !DILocation(line: 1712, column: 5, scope: !3160)
!3165 = !DILocalVariable(name: "last", scope: !3166, file: !3, line: 1715, type: !796)
!3166 = distinct !DILexicalBlock(scope: !3160, file: !3, line: 1714, column: 5)
!3167 = !DILocation(line: 1715, column: 11, scope: !3166)
!3168 = !DILocation(line: 1715, column: 18, scope: !3166)
!3169 = !DILocation(line: 1715, column: 43, scope: !3166)
!3170 = !DILocation(line: 1715, column: 26, scope: !3166)
!3171 = !DILocation(line: 1715, column: 50, scope: !3166)
!3172 = !DILocation(line: 1715, column: 24, scope: !3166)
!3173 = !DILocation(line: 1717, column: 7, scope: !3166)
!3174 = !DILocation(line: 1717, column: 14, scope: !3166)
!3175 = !DILocation(line: 1717, column: 22, scope: !3166)
!3176 = !DILocation(line: 1717, column: 20, scope: !3166)
!3177 = !DILocation(line: 1719, column: 22, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3166, file: !3, line: 1718, column: 2)
!3179 = !DILocation(line: 1719, column: 4, scope: !3178)
!3180 = !DILocation(line: 1720, column: 9, scope: !3178)
!3181 = distinct !{!3181, !3173, !3182}
!3182 = !DILocation(line: 1721, column: 2, scope: !3166)
!3183 = !DILocation(line: 1723, column: 1, scope: !3153)
!3184 = distinct !DISubprogram(name: "mark_reg_store", scope: !3, file: !3, line: 1668, type: !3133, scopeLine: 1670, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3185 = !DILocalVariable(name: "reg", arg: 1, scope: !3184, file: !3, line: 1668, type: !839)
!3186 = !DILocation(line: 1668, column: 21, scope: !3184)
!3187 = !DILocalVariable(name: "setter", arg: 2, scope: !3184, file: !3, line: 1668, type: !3135)
!3188 = !DILocation(line: 1668, column: 36, scope: !3184)
!3189 = !DILocalVariable(name: "data", arg: 3, scope: !3184, file: !3, line: 1669, type: !797)
!3190 = !DILocation(line: 1669, column: 9, scope: !3184)
!3191 = !DILocalVariable(name: "regno", scope: !3184, file: !3, line: 1671, type: !796)
!3192 = !DILocation(line: 1671, column: 7, scope: !3184)
!3193 = !DILocation(line: 1673, column: 7, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 1673, column: 7)
!3195 = !DILocation(line: 1673, column: 22, scope: !3194)
!3196 = !DILocation(line: 1673, column: 7, scope: !3184)
!3197 = !DILocation(line: 1674, column: 11, scope: !3194)
!3198 = !DILocation(line: 1674, column: 9, scope: !3194)
!3199 = !DILocation(line: 1674, column: 5, scope: !3194)
!3200 = !DILocation(line: 1676, column: 9, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 1676, column: 7)
!3202 = !DILocation(line: 1676, column: 7, scope: !3184)
!3203 = !DILocation(line: 1677, column: 5, scope: !3201)
!3204 = !DILocation(line: 1679, column: 28, scope: !3184)
!3205 = !DILocation(line: 1679, column: 22, scope: !3184)
!3206 = !DILocation(line: 1679, column: 3, scope: !3184)
!3207 = !DILocation(line: 1679, column: 26, scope: !3184)
!3208 = !DILocation(line: 1681, column: 11, scope: !3184)
!3209 = !DILocation(line: 1681, column: 9, scope: !3184)
!3210 = !DILocation(line: 1683, column: 7, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 1683, column: 7)
!3212 = !DILocation(line: 1683, column: 13, scope: !3211)
!3213 = !DILocation(line: 1683, column: 7, scope: !3184)
!3214 = !DILocation(line: 1684, column: 22, scope: !3211)
!3215 = !DILocation(line: 1684, column: 5, scope: !3211)
!3216 = !DILocalVariable(name: "last", scope: !3217, file: !3, line: 1687, type: !796)
!3217 = distinct !DILexicalBlock(scope: !3211, file: !3, line: 1686, column: 5)
!3218 = !DILocation(line: 1687, column: 11, scope: !3217)
!3219 = !DILocation(line: 1687, column: 18, scope: !3217)
!3220 = !DILocation(line: 1687, column: 43, scope: !3217)
!3221 = !DILocation(line: 1687, column: 26, scope: !3217)
!3222 = !DILocation(line: 1687, column: 50, scope: !3217)
!3223 = !DILocation(line: 1687, column: 24, scope: !3217)
!3224 = !DILocation(line: 1689, column: 7, scope: !3217)
!3225 = !DILocation(line: 1689, column: 14, scope: !3217)
!3226 = !DILocation(line: 1689, column: 22, scope: !3217)
!3227 = !DILocation(line: 1689, column: 20, scope: !3217)
!3228 = !DILocation(line: 1691, column: 21, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3217, file: !3, line: 1690, column: 2)
!3230 = !DILocation(line: 1691, column: 4, scope: !3229)
!3231 = !DILocation(line: 1692, column: 9, scope: !3229)
!3232 = distinct !{!3232, !3224, !3233}
!3233 = !DILocation(line: 1693, column: 2, scope: !3217)
!3234 = !DILocation(line: 1695, column: 1, scope: !3184)
!3235 = distinct !DISubprogram(name: "rhs_regno", scope: !536, file: !536, line: 1051, type: !3236, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3236 = !DISubroutineType(types: !3237)
!3237 = !{!7, !3135}
!3238 = !DILocalVariable(name: "x", arg: 1, scope: !3235, file: !536, line: 1051, type: !3135)
!3239 = !DILocation(line: 1051, column: 22, scope: !3235)
!3240 = !DILocation(line: 1053, column: 10, scope: !3235)
!3241 = !DILocation(line: 1053, column: 3, scope: !3235)
!3242 = distinct !DISubprogram(name: "get_regno_cover_class", scope: !3, file: !3, line: 1597, type: !3243, scopeLine: 1598, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3243 = !DISubroutineType(types: !3244)
!3244 = !{!718, !796, !3245}
!3245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !796, size: 64)
!3246 = !DILocalVariable(name: "regno", arg: 1, scope: !3242, file: !3, line: 1597, type: !796)
!3247 = !DILocation(line: 1597, column: 28, scope: !3242)
!3248 = !DILocalVariable(name: "nregs", arg: 2, scope: !3242, file: !3, line: 1597, type: !3245)
!3249 = !DILocation(line: 1597, column: 40, scope: !3242)
!3250 = !DILocation(line: 1599, column: 7, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3242, file: !3, line: 1599, column: 7)
!3252 = !DILocation(line: 1599, column: 13, scope: !3251)
!3253 = !DILocation(line: 1599, column: 7, scope: !3242)
!3254 = !DILocalVariable(name: "cover_class", scope: !3255, file: !3, line: 1601, type: !718)
!3255 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 1600, column: 5)
!3256 = !DILocation(line: 1601, column: 22, scope: !3255)
!3257 = !DILocation(line: 1601, column: 53, scope: !3255)
!3258 = !DILocation(line: 1601, column: 36, scope: !3255)
!3259 = !DILocation(line: 1603, column: 36, scope: !3255)
!3260 = !DILocation(line: 1603, column: 16, scope: !3255)
!3261 = !DILocation(line: 1603, column: 49, scope: !3255)
!3262 = !DILocation(line: 1603, column: 8, scope: !3255)
!3263 = !DILocation(line: 1603, column: 14, scope: !3255)
!3264 = !DILocation(line: 1604, column: 14, scope: !3255)
!3265 = !DILocation(line: 1604, column: 7, scope: !3255)
!3266 = !DILocation(line: 1606, column: 14, scope: !3267)
!3267 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 1606, column: 12)
!3268 = !DILocation(line: 1607, column: 5, scope: !3267)
!3269 = !DILocation(line: 1607, column: 10, scope: !3267)
!3270 = !DILocation(line: 1606, column: 12, scope: !3251)
!3271 = !DILocation(line: 1609, column: 8, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3267, file: !3, line: 1608, column: 5)
!3273 = !DILocation(line: 1609, column: 14, scope: !3272)
!3274 = !DILocation(line: 1610, column: 34, scope: !3272)
!3275 = !DILocation(line: 1610, column: 14, scope: !3272)
!3276 = !DILocation(line: 1610, column: 7, scope: !3272)
!3277 = !DILocation(line: 1614, column: 8, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3267, file: !3, line: 1613, column: 5)
!3279 = !DILocation(line: 1614, column: 14, scope: !3278)
!3280 = !DILocation(line: 1615, column: 7, scope: !3278)
!3281 = !DILocation(line: 1617, column: 1, scope: !3242)
!3282 = distinct !DISubprogram(name: "loop_depth", scope: !385, file: !385, line: 425, type: !3283, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3283 = !DISubroutineType(types: !3284)
!3284 = !{!7, !2788}
!3285 = !DILocalVariable(name: "loop", arg: 1, scope: !3282, file: !385, line: 425, type: !2788)
!3286 = !DILocation(line: 425, column: 32, scope: !3282)
!3287 = !DILocation(line: 427, column: 10, scope: !3282)
!3288 = !DILocation(line: 427, column: 3, scope: !3282)
!3289 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !385, file: !385, line: 85, type: !3290, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3290 = !DISubroutineType(types: !3291)
!3291 = !{!7, !3292}
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1417)
!3294 = !DILocalVariable(name: "vec_", arg: 1, scope: !3289, file: !385, line: 85, type: !3292)
!3295 = !DILocation(line: 85, column: 1, scope: !3289)
!3296 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !385, file: !385, line: 85, type: !3297, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{!1424, !3292, !7}
!3299 = !DILocalVariable(name: "vec_", arg: 1, scope: !3296, file: !385, line: 85, type: !3292)
!3300 = !DILocation(line: 85, column: 1, scope: !3296)
!3301 = !DILocalVariable(name: "ix_", arg: 2, scope: !3296, file: !385, line: 85, type: !7)
!3302 = !DILocation(line: 0, scope: !3296)
!3303 = distinct !DISubprogram(name: "mark_regno_death", scope: !3, file: !3, line: 1658, type: !3304, scopeLine: 1659, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3304 = !DISubroutineType(types: !3305)
!3305 = !{null, !796}
!3306 = !DILocalVariable(name: "regno", arg: 1, scope: !3303, file: !3, line: 1658, type: !796)
!3307 = !DILocation(line: 1658, column: 23, scope: !3303)
!3308 = !DILocation(line: 1660, column: 40, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3303, file: !3, line: 1660, column: 7)
!3310 = !DILocation(line: 1660, column: 9, scope: !3309)
!3311 = !DILocation(line: 1660, column: 7, scope: !3303)
!3312 = !DILocation(line: 1661, column: 5, scope: !3309)
!3313 = !DILocation(line: 1662, column: 38, scope: !3303)
!3314 = !DILocation(line: 1662, column: 3, scope: !3303)
!3315 = !DILocation(line: 1663, column: 20, scope: !3303)
!3316 = !DILocation(line: 1663, column: 3, scope: !3303)
!3317 = !DILocation(line: 1664, column: 1, scope: !3303)
!3318 = distinct !DISubprogram(name: "mark_regno_live", scope: !3, file: !3, line: 1642, type: !3304, scopeLine: 1643, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3319 = !DILocalVariable(name: "regno", arg: 1, scope: !3318, file: !3, line: 1642, type: !796)
!3320 = !DILocation(line: 1642, column: 22, scope: !3318)
!3321 = !DILocalVariable(name: "loop", scope: !3318, file: !3, line: 1644, type: !802)
!3322 = !DILocation(line: 1644, column: 16, scope: !3318)
!3323 = !DILocation(line: 1646, column: 15, scope: !3324)
!3324 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 1646, column: 3)
!3325 = !DILocation(line: 1646, column: 13, scope: !3324)
!3326 = !DILocation(line: 1646, column: 8, scope: !3324)
!3327 = !DILocation(line: 1647, column: 8, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3324, file: !3, line: 1646, column: 3)
!3329 = !DILocation(line: 1647, column: 16, scope: !3328)
!3330 = !DILocation(line: 1647, column: 31, scope: !3328)
!3331 = !DILocation(line: 1647, column: 13, scope: !3328)
!3332 = !DILocation(line: 1646, column: 3, scope: !3324)
!3333 = !DILocation(line: 1649, column: 22, scope: !3328)
!3334 = !DILocation(line: 1649, column: 40, scope: !3328)
!3335 = !DILocation(line: 1649, column: 51, scope: !3328)
!3336 = !DILocation(line: 1649, column: 5, scope: !3328)
!3337 = !DILocation(line: 1648, column: 27, scope: !3328)
!3338 = !DILocation(line: 1648, column: 15, scope: !3328)
!3339 = !DILocation(line: 1648, column: 13, scope: !3328)
!3340 = !DILocation(line: 1646, column: 3, scope: !3328)
!3341 = distinct !{!3341, !3332, !3342}
!3342 = !DILocation(line: 1649, column: 56, scope: !3324)
!3343 = !DILocation(line: 1650, column: 38, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3318, file: !3, line: 1650, column: 7)
!3345 = !DILocation(line: 1650, column: 7, scope: !3344)
!3346 = !DILocation(line: 1650, column: 7, scope: !3318)
!3347 = !DILocation(line: 1651, column: 5, scope: !3344)
!3348 = !DILocation(line: 1652, column: 36, scope: !3318)
!3349 = !DILocation(line: 1652, column: 3, scope: !3318)
!3350 = !DILocation(line: 1653, column: 20, scope: !3318)
!3351 = !DILocation(line: 1653, column: 3, scope: !3318)
!3352 = !DILocation(line: 1654, column: 1, scope: !3318)
!3353 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1359, file: !1359, line: 32, type: !3354, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3354 = !DISubroutineType(types: !3355)
!3355 = !{!2050, !796}
!3356 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3353, file: !1359, line: 32, type: !796)
!3357 = !DILocation(line: 32, column: 1, scope: !3353)
!3358 = distinct !DISubprogram(name: "number_of_loops", scope: !385, file: !385, line: 459, type: !3359, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3359 = !DISubroutineType(types: !3360)
!3360 = !{!7}
!3361 = !DILocation(line: 461, column: 8, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3358, file: !385, line: 461, column: 7)
!3363 = !DILocation(line: 461, column: 7, scope: !3358)
!3364 = !DILocation(line: 462, column: 5, scope: !3362)
!3365 = !DILocation(line: 464, column: 10, scope: !3358)
!3366 = !DILocation(line: 464, column: 3, scope: !3358)
!3367 = !DILocation(line: 465, column: 1, scope: !3358)
!3368 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !385, file: !385, line: 85, type: !3369, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3369 = !DISubroutineType(types: !3370)
!3370 = !{!796, !3292, !7, !2503}
!3371 = !DILocalVariable(name: "vec_", arg: 1, scope: !3368, file: !385, line: 85, type: !3292)
!3372 = !DILocation(line: 85, column: 1, scope: !3368)
!3373 = !DILocalVariable(name: "ix_", arg: 2, scope: !3368, file: !385, line: 85, type: !7)
!3374 = !DILocalVariable(name: "ptr", arg: 3, scope: !3368, file: !385, line: 85, type: !2503)
!3375 = !DILocation(line: 85, column: 1, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3368, file: !385, line: 85, column: 1)
!3377 = !DILocation(line: 85, column: 1, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3376, file: !385, line: 85, column: 1)
!3379 = !DILocation(line: 85, column: 1, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3376, file: !385, line: 85, column: 1)
!3381 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1359, file: !1359, line: 31, type: !3382, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3382 = !DISubroutineType(types: !3383)
!3383 = !{!3245, !3384, !796}
!3384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!3385 = !DILocalVariable(name: "vec_", arg: 1, scope: !3381, file: !1359, line: 31, type: !3384)
!3386 = !DILocation(line: 31, column: 1, scope: !3381)
!3387 = !DILocalVariable(name: "obj_", arg: 2, scope: !3381, file: !1359, line: 31, type: !796)
!3388 = !DILocalVariable(name: "slot_", scope: !3381, file: !1359, line: 31, type: !3245)
!3389 = distinct !DISubprogram(name: "init_inv_motion_data", scope: !3, file: !3, line: 1510, type: !2140, scopeLine: 1511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3390 = !DILocation(line: 1512, column: 16, scope: !3389)
!3391 = !DILocation(line: 1514, column: 16, scope: !3389)
!3392 = !DILocation(line: 1514, column: 14, scope: !3389)
!3393 = !DILocation(line: 1515, column: 1, scope: !3389)
!3394 = distinct !DISubprogram(name: "find_invariants", scope: !3, file: !3, line: 978, type: !2683, scopeLine: 979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3395 = !DILocalVariable(name: "loop", arg: 1, scope: !3394, file: !3, line: 978, type: !802)
!3396 = !DILocation(line: 978, column: 31, scope: !3394)
!3397 = !DILocalVariable(name: "may_exit", scope: !3394, file: !3, line: 980, type: !2044)
!3398 = !DILocation(line: 980, column: 10, scope: !3394)
!3399 = !DILocation(line: 980, column: 21, scope: !3394)
!3400 = !DILocalVariable(name: "always_reached", scope: !3394, file: !3, line: 981, type: !2044)
!3401 = !DILocation(line: 981, column: 10, scope: !3394)
!3402 = !DILocation(line: 981, column: 27, scope: !3394)
!3403 = !DILocalVariable(name: "has_exit", scope: !3394, file: !3, line: 982, type: !2044)
!3404 = !DILocation(line: 982, column: 10, scope: !3394)
!3405 = !DILocation(line: 982, column: 21, scope: !3394)
!3406 = !DILocalVariable(name: "always_executed", scope: !3394, file: !3, line: 983, type: !2044)
!3407 = !DILocation(line: 983, column: 10, scope: !3394)
!3408 = !DILocation(line: 983, column: 28, scope: !3394)
!3409 = !DILocalVariable(name: "body", scope: !3394, file: !3, line: 984, type: !3410)
!3410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1376, size: 64)
!3411 = !DILocation(line: 984, column: 16, scope: !3394)
!3412 = !DILocation(line: 984, column: 51, scope: !3394)
!3413 = !DILocation(line: 984, column: 23, scope: !3394)
!3414 = !DILocation(line: 986, column: 15, scope: !3394)
!3415 = !DILocation(line: 986, column: 21, scope: !3394)
!3416 = !DILocation(line: 986, column: 27, scope: !3394)
!3417 = !DILocation(line: 986, column: 37, scope: !3394)
!3418 = !DILocation(line: 986, column: 3, scope: !3394)
!3419 = !DILocation(line: 987, column: 27, scope: !3394)
!3420 = !DILocation(line: 987, column: 33, scope: !3394)
!3421 = !DILocation(line: 987, column: 39, scope: !3394)
!3422 = !DILocation(line: 987, column: 49, scope: !3394)
!3423 = !DILocation(line: 987, column: 3, scope: !3394)
!3424 = !DILocation(line: 988, column: 27, scope: !3394)
!3425 = !DILocation(line: 988, column: 33, scope: !3394)
!3426 = !DILocation(line: 988, column: 39, scope: !3394)
!3427 = !DILocation(line: 988, column: 49, scope: !3394)
!3428 = !DILocation(line: 988, column: 3, scope: !3394)
!3429 = !DILocation(line: 990, column: 14, scope: !3394)
!3430 = !DILocation(line: 990, column: 20, scope: !3394)
!3431 = !DILocation(line: 990, column: 3, scope: !3394)
!3432 = !DILocation(line: 991, column: 25, scope: !3394)
!3433 = !DILocation(line: 991, column: 31, scope: !3394)
!3434 = !DILocation(line: 991, column: 37, scope: !3394)
!3435 = !DILocation(line: 991, column: 53, scope: !3394)
!3436 = !DILocation(line: 991, column: 3, scope: !3394)
!3437 = !DILocation(line: 992, column: 3, scope: !3394)
!3438 = !DILocation(line: 994, column: 3, scope: !3394)
!3439 = !DILocation(line: 995, column: 3, scope: !3394)
!3440 = !DILocation(line: 996, column: 3, scope: !3394)
!3441 = !DILocation(line: 997, column: 3, scope: !3394)
!3442 = !DILocation(line: 998, column: 9, scope: !3394)
!3443 = !DILocation(line: 998, column: 3, scope: !3394)
!3444 = !DILocation(line: 999, column: 1, scope: !3394)
!3445 = distinct !DISubprogram(name: "find_invariants_to_move", scope: !3, file: !3, line: 1317, type: !3446, scopeLine: 1318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3446 = !DISubroutineType(types: !3447)
!3447 = !{null, !1071}
!3448 = !DILocalVariable(name: "speed", arg: 1, scope: !3445, file: !3, line: 1317, type: !1071)
!3449 = !DILocation(line: 1317, column: 31, scope: !3445)
!3450 = !DILocalVariable(name: "gain", scope: !3445, file: !3, line: 1319, type: !796)
!3451 = !DILocation(line: 1319, column: 7, scope: !3445)
!3452 = !DILocalVariable(name: "i", scope: !3445, file: !3, line: 1320, type: !7)
!3453 = !DILocation(line: 1320, column: 12, scope: !3445)
!3454 = !DILocalVariable(name: "regs_used", scope: !3445, file: !3, line: 1320, type: !7)
!3455 = !DILocation(line: 1320, column: 15, scope: !3445)
!3456 = !DILocalVariable(name: "regs_needed", scope: !3445, file: !3, line: 1320, type: !3457)
!3457 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 864, elements: !2035)
!3458 = !DILocation(line: 1320, column: 26, scope: !3445)
!3459 = !DILocalVariable(name: "new_regs", scope: !3445, file: !3, line: 1320, type: !3457)
!3460 = !DILocation(line: 1320, column: 54, scope: !3445)
!3461 = !DILocalVariable(name: "inv", scope: !3445, file: !3, line: 1321, type: !2075)
!3462 = !DILocation(line: 1321, column: 21, scope: !3445)
!3463 = !DILocation(line: 1323, column: 8, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1323, column: 7)
!3465 = !DILocation(line: 1323, column: 7, scope: !3445)
!3466 = !DILocation(line: 1324, column: 5, scope: !3464)
!3467 = !DILocation(line: 1326, column: 7, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1326, column: 7)
!3469 = !DILocation(line: 1326, column: 7, scope: !3445)
!3470 = !DILocation(line: 1328, column: 15, scope: !3468)
!3471 = !DILocation(line: 1328, column: 5, scope: !3468)
!3472 = !DILocalVariable(name: "n_regs", scope: !3473, file: !3, line: 1334, type: !7)
!3473 = distinct !DILexicalBlock(scope: !3468, file: !3, line: 1333, column: 5)
!3474 = !DILocation(line: 1334, column: 20, scope: !3473)
!3475 = !DILocation(line: 1334, column: 29, scope: !3473)
!3476 = !DILocation(line: 1336, column: 17, scope: !3473)
!3477 = !DILocation(line: 1338, column: 14, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3473, file: !3, line: 1338, column: 7)
!3479 = !DILocation(line: 1338, column: 12, scope: !3478)
!3480 = !DILocation(line: 1338, column: 19, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3478, file: !3, line: 1338, column: 7)
!3482 = !DILocation(line: 1338, column: 23, scope: !3481)
!3483 = !DILocation(line: 1338, column: 21, scope: !3481)
!3484 = !DILocation(line: 1338, column: 7, scope: !3478)
!3485 = !DILocation(line: 1340, column: 9, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 1340, column: 8)
!3487 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 1339, column: 2)
!3488 = !DILocation(line: 1340, column: 32, scope: !3486)
!3489 = !DILocation(line: 1340, column: 35, scope: !3486)
!3490 = !DILocation(line: 1340, column: 8, scope: !3487)
!3491 = !DILocation(line: 1343, column: 17, scope: !3492)
!3492 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 1341, column: 6)
!3493 = !DILocation(line: 1344, column: 6, scope: !3492)
!3494 = !DILocation(line: 1345, column: 2, scope: !3487)
!3495 = !DILocation(line: 1338, column: 32, scope: !3481)
!3496 = !DILocation(line: 1338, column: 7, scope: !3481)
!3497 = distinct !{!3497, !3484, !3498}
!3498 = !DILocation(line: 1345, column: 2, scope: !3478)
!3499 = !DILocation(line: 1348, column: 9, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1348, column: 7)
!3501 = !DILocation(line: 1348, column: 7, scope: !3445)
!3502 = !DILocation(line: 1349, column: 19, scope: !3500)
!3503 = !DILocation(line: 1349, column: 34, scope: !3500)
!3504 = !DILocation(line: 1349, column: 5, scope: !3500)
!3505 = !DILocation(line: 1349, column: 17, scope: !3500)
!3506 = !DILocation(line: 1352, column: 14, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3508, file: !3, line: 1352, column: 7)
!3508 = distinct !DILexicalBlock(scope: !3500, file: !3, line: 1351, column: 5)
!3509 = !DILocation(line: 1352, column: 12, scope: !3507)
!3510 = !DILocation(line: 1352, column: 25, scope: !3511)
!3511 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 1352, column: 7)
!3512 = !DILocation(line: 1352, column: 29, scope: !3511)
!3513 = !DILocation(line: 1352, column: 27, scope: !3511)
!3514 = !DILocation(line: 1352, column: 7, scope: !3507)
!3515 = !DILocation(line: 1353, column: 31, scope: !3511)
!3516 = !DILocation(line: 1353, column: 11, scope: !3511)
!3517 = !DILocation(line: 1353, column: 2, scope: !3511)
!3518 = !DILocation(line: 1353, column: 35, scope: !3511)
!3519 = !DILocation(line: 1352, column: 56, scope: !3511)
!3520 = !DILocation(line: 1352, column: 7, scope: !3511)
!3521 = distinct !{!3521, !3514, !3522}
!3522 = !DILocation(line: 1353, column: 37, scope: !3507)
!3523 = !DILocation(line: 1355, column: 3, scope: !3445)
!3524 = !DILocation(line: 1355, column: 49, scope: !3445)
!3525 = !DILocation(line: 1356, column: 8, scope: !3445)
!3526 = !DILocation(line: 1356, column: 18, scope: !3445)
!3527 = !DILocation(line: 1356, column: 29, scope: !3445)
!3528 = !DILocation(line: 1355, column: 18, scope: !3445)
!3529 = !DILocation(line: 1355, column: 16, scope: !3445)
!3530 = !DILocation(line: 1356, column: 37, scope: !3445)
!3531 = !DILocation(line: 1358, column: 22, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1357, column: 5)
!3533 = !DILocation(line: 1358, column: 27, scope: !3532)
!3534 = !DILocation(line: 1358, column: 34, scope: !3532)
!3535 = !DILocation(line: 1358, column: 7, scope: !3532)
!3536 = !DILocation(line: 1359, column: 13, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 1359, column: 11)
!3538 = !DILocation(line: 1359, column: 11, scope: !3532)
!3539 = !DILocation(line: 1360, column: 17, scope: !3537)
!3540 = !DILocation(line: 1360, column: 2, scope: !3537)
!3541 = !DILocation(line: 1360, column: 14, scope: !3537)
!3542 = !DILocation(line: 1363, column: 11, scope: !3543)
!3543 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 1363, column: 4)
!3544 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 1362, column: 2)
!3545 = !DILocation(line: 1363, column: 9, scope: !3543)
!3546 = !DILocation(line: 1363, column: 22, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3543, file: !3, line: 1363, column: 4)
!3548 = !DILocation(line: 1363, column: 26, scope: !3547)
!3549 = !DILocation(line: 1363, column: 24, scope: !3547)
!3550 = !DILocation(line: 1363, column: 4, scope: !3543)
!3551 = !DILocation(line: 1365, column: 43, scope: !3547)
!3552 = !DILocation(line: 1365, column: 23, scope: !3547)
!3553 = !DILocation(line: 1365, column: 11, scope: !3547)
!3554 = !DILocation(line: 1364, column: 35, scope: !3547)
!3555 = !DILocation(line: 1364, column: 15, scope: !3547)
!3556 = !DILocation(line: 1364, column: 6, scope: !3547)
!3557 = !DILocation(line: 1365, column: 8, scope: !3547)
!3558 = !DILocation(line: 1363, column: 53, scope: !3547)
!3559 = !DILocation(line: 1363, column: 4, scope: !3547)
!3560 = distinct !{!3560, !3550, !3561}
!3561 = !DILocation(line: 1365, column: 45, scope: !3543)
!3562 = distinct !{!3562, !3523, !3563}
!3563 = !DILocation(line: 1367, column: 5, scope: !3445)
!3564 = !DILocation(line: 1368, column: 1, scope: !3445)
!3565 = distinct !DISubprogram(name: "move_invariants", scope: !3, file: !3, line: 1483, type: !2683, scopeLine: 1484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3566 = !DILocalVariable(name: "loop", arg: 1, scope: !3565, file: !3, line: 1483, type: !802)
!3567 = !DILocation(line: 1483, column: 31, scope: !3565)
!3568 = !DILocalVariable(name: "inv", scope: !3565, file: !3, line: 1485, type: !2075)
!3569 = !DILocation(line: 1485, column: 21, scope: !3565)
!3570 = !DILocalVariable(name: "i", scope: !3565, file: !3, line: 1486, type: !7)
!3571 = !DILocation(line: 1486, column: 12, scope: !3565)
!3572 = !DILocation(line: 1488, column: 10, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3565, file: !3, line: 1488, column: 3)
!3574 = !DILocation(line: 1488, column: 8, scope: !3573)
!3575 = !DILocation(line: 1488, column: 15, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 1488, column: 3)
!3577 = !DILocation(line: 1488, column: 3, scope: !3573)
!3578 = !DILocation(line: 1489, column: 25, scope: !3576)
!3579 = !DILocation(line: 1489, column: 31, scope: !3576)
!3580 = !DILocation(line: 1489, column: 5, scope: !3576)
!3581 = !DILocation(line: 1488, column: 63, scope: !3576)
!3582 = !DILocation(line: 1488, column: 3, scope: !3576)
!3583 = distinct !{!3583, !3577, !3584}
!3584 = !DILocation(line: 1489, column: 32, scope: !3573)
!3585 = !DILocation(line: 1490, column: 7, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3565, file: !3, line: 1490, column: 7)
!3587 = !DILocation(line: 1490, column: 30, scope: !3586)
!3588 = !DILocation(line: 1490, column: 33, scope: !3586)
!3589 = !DILocation(line: 1490, column: 7, scope: !3565)
!3590 = !DILocation(line: 1492, column: 14, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3592, file: !3, line: 1492, column: 7)
!3592 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 1491, column: 5)
!3593 = !DILocation(line: 1492, column: 12, scope: !3591)
!3594 = !DILocation(line: 1492, column: 19, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3591, file: !3, line: 1492, column: 7)
!3596 = !DILocation(line: 1492, column: 7, scope: !3591)
!3597 = !DILocation(line: 1493, column: 6, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 1493, column: 6)
!3599 = !DILocation(line: 1493, column: 11, scope: !3598)
!3600 = !DILocation(line: 1493, column: 15, scope: !3598)
!3601 = !DILocation(line: 1493, column: 6, scope: !3595)
!3602 = !DILocation(line: 1495, column: 10, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3604, file: !3, line: 1495, column: 10)
!3604 = distinct !DILexicalBlock(scope: !3598, file: !3, line: 1494, column: 4)
!3605 = !DILocation(line: 1495, column: 15, scope: !3603)
!3606 = !DILocation(line: 1495, column: 26, scope: !3603)
!3607 = !DILocation(line: 1495, column: 10, scope: !3604)
!3608 = !DILocation(line: 1496, column: 27, scope: !3603)
!3609 = !DILocation(line: 1497, column: 27, scope: !3603)
!3610 = !DILocation(line: 1497, column: 32, scope: !3603)
!3611 = !DILocation(line: 1497, column: 6, scope: !3603)
!3612 = !DILocation(line: 1498, column: 27, scope: !3603)
!3613 = !DILocation(line: 1498, column: 32, scope: !3603)
!3614 = !DILocation(line: 1498, column: 6, scope: !3603)
!3615 = !DILocation(line: 1499, column: 23, scope: !3603)
!3616 = !DILocation(line: 1499, column: 28, scope: !3603)
!3617 = !DILocation(line: 1499, column: 6, scope: !3603)
!3618 = !DILocation(line: 1496, column: 8, scope: !3603)
!3619 = !DILocation(line: 1501, column: 27, scope: !3603)
!3620 = !DILocation(line: 1501, column: 8, scope: !3603)
!3621 = !DILocation(line: 1503, column: 4, scope: !3604)
!3622 = !DILocation(line: 1493, column: 18, scope: !3598)
!3623 = !DILocation(line: 1492, column: 67, scope: !3595)
!3624 = !DILocation(line: 1492, column: 7, scope: !3595)
!3625 = distinct !{!3625, !3596, !3626}
!3626 = !DILocation(line: 1503, column: 4, scope: !3591)
!3627 = !DILocation(line: 1504, column: 5, scope: !3592)
!3628 = !DILocation(line: 1505, column: 1, scope: !3565)
!3629 = distinct !DISubprogram(name: "free_inv_motion_data", scope: !3, file: !3, line: 1520, type: !2140, scopeLine: 1521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3630 = !DILocalVariable(name: "i", scope: !3629, file: !3, line: 1522, type: !7)
!3631 = !DILocation(line: 1522, column: 12, scope: !3629)
!3632 = !DILocalVariable(name: "def", scope: !3629, file: !3, line: 1523, type: !2083)
!3633 = !DILocation(line: 1523, column: 15, scope: !3629)
!3634 = !DILocalVariable(name: "inv", scope: !3629, file: !3, line: 1524, type: !2075)
!3635 = !DILocation(line: 1524, column: 21, scope: !3629)
!3636 = !DILocation(line: 1526, column: 3, scope: !3629)
!3637 = !DILocation(line: 1527, column: 10, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3629, file: !3, line: 1527, column: 3)
!3639 = !DILocation(line: 1527, column: 8, scope: !3638)
!3640 = !DILocation(line: 1527, column: 15, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 1527, column: 3)
!3642 = !DILocation(line: 1527, column: 19, scope: !3641)
!3643 = !DILocation(line: 1527, column: 17, scope: !3641)
!3644 = !DILocation(line: 1527, column: 3, scope: !3638)
!3645 = !DILocation(line: 1529, column: 13, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3641, file: !3, line: 1528, column: 5)
!3647 = !DILocation(line: 1529, column: 29, scope: !3646)
!3648 = !DILocation(line: 1529, column: 11, scope: !3646)
!3649 = !DILocation(line: 1530, column: 11, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1530, column: 11)
!3651 = !DILocation(line: 1530, column: 11, scope: !3646)
!3652 = !DILocation(line: 1532, column: 10, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1531, column: 2)
!3654 = !DILocation(line: 1532, column: 15, scope: !3653)
!3655 = !DILocation(line: 1532, column: 8, scope: !3653)
!3656 = !DILocation(line: 1533, column: 4, scope: !3653)
!3657 = !DILocation(line: 1535, column: 19, scope: !3653)
!3658 = !DILocation(line: 1535, column: 24, scope: !3653)
!3659 = !DILocation(line: 1535, column: 4, scope: !3653)
!3660 = !DILocation(line: 1536, column: 10, scope: !3653)
!3661 = !DILocation(line: 1536, column: 4, scope: !3653)
!3662 = !DILocation(line: 1537, column: 4, scope: !3653)
!3663 = !DILocation(line: 1537, column: 20, scope: !3653)
!3664 = !DILocation(line: 1537, column: 23, scope: !3653)
!3665 = !DILocation(line: 1538, column: 2, scope: !3653)
!3666 = !DILocation(line: 1539, column: 5, scope: !3646)
!3667 = !DILocation(line: 1527, column: 43, scope: !3641)
!3668 = !DILocation(line: 1527, column: 3, scope: !3641)
!3669 = distinct !{!3669, !3644, !3670}
!3670 = !DILocation(line: 1539, column: 5, scope: !3638)
!3671 = !DILocation(line: 1541, column: 10, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3629, file: !3, line: 1541, column: 3)
!3673 = !DILocation(line: 1541, column: 8, scope: !3672)
!3674 = !DILocation(line: 1541, column: 15, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3672, file: !3, line: 1541, column: 3)
!3676 = !DILocation(line: 1541, column: 3, scope: !3672)
!3677 = !DILocation(line: 1543, column: 7, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3675, file: !3, line: 1542, column: 5)
!3679 = !DILocation(line: 1544, column: 13, scope: !3678)
!3680 = !DILocation(line: 1544, column: 7, scope: !3678)
!3681 = !DILocation(line: 1545, column: 5, scope: !3678)
!3682 = !DILocation(line: 1541, column: 63, scope: !3675)
!3683 = !DILocation(line: 1541, column: 3, scope: !3675)
!3684 = distinct !{!3684, !3676, !3685}
!3685 = !DILocation(line: 1545, column: 5, scope: !3672)
!3686 = !DILocation(line: 1546, column: 3, scope: !3629)
!3687 = !DILocation(line: 1547, column: 1, scope: !3629)
!3688 = distinct !DISubprogram(name: "VEC_invariant_p_heap_alloc", scope: !3, file: !3, line: 174, type: !3689, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3689 = !DISubroutineType(types: !3690)
!3690 = !{!2062, !796}
!3691 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3688, file: !3, line: 174, type: !796)
!3692 = !DILocation(line: 174, column: 1, scope: !3688)
!3693 = distinct !DISubprogram(name: "find_exits", scope: !3, file: !3, line: 572, type: !3694, scopeLine: 574, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3694 = !DISubroutineType(types: !3695)
!3695 = !{null, !802, !3410, !2044, !2044}
!3696 = !DILocalVariable(name: "loop", arg: 1, scope: !3693, file: !3, line: 572, type: !802)
!3697 = !DILocation(line: 572, column: 26, scope: !3693)
!3698 = !DILocalVariable(name: "body", arg: 2, scope: !3693, file: !3, line: 572, type: !3410)
!3699 = !DILocation(line: 572, column: 45, scope: !3693)
!3700 = !DILocalVariable(name: "may_exit", arg: 3, scope: !3693, file: !3, line: 573, type: !2044)
!3701 = !DILocation(line: 573, column: 13, scope: !3693)
!3702 = !DILocalVariable(name: "has_exit", arg: 4, scope: !3693, file: !3, line: 573, type: !2044)
!3703 = !DILocation(line: 573, column: 30, scope: !3693)
!3704 = !DILocalVariable(name: "i", scope: !3693, file: !3, line: 575, type: !7)
!3705 = !DILocation(line: 575, column: 12, scope: !3693)
!3706 = !DILocalVariable(name: "ei", scope: !3693, file: !3, line: 576, type: !3707)
!3707 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !142, line: 682, baseType: !3708)
!3708 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !142, line: 679, size: 128, elements: !3709)
!3709 = !{!3710, !3711}
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3708, file: !142, line: 680, baseType: !7, size: 32)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3708, file: !142, line: 681, baseType: !3712, size: 64, offset: 64)
!3712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !812, size: 64)
!3713 = !DILocation(line: 576, column: 17, scope: !3693)
!3714 = !DILocalVariable(name: "e", scope: !3693, file: !3, line: 577, type: !824)
!3715 = !DILocation(line: 577, column: 8, scope: !3693)
!3716 = !DILocalVariable(name: "outermost_exit", scope: !3693, file: !3, line: 578, type: !802)
!3717 = !DILocation(line: 578, column: 16, scope: !3693)
!3718 = !DILocation(line: 578, column: 33, scope: !3693)
!3719 = !DILocalVariable(name: "aexit", scope: !3693, file: !3, line: 578, type: !802)
!3720 = !DILocation(line: 578, column: 40, scope: !3693)
!3721 = !DILocalVariable(name: "has_call", scope: !3693, file: !3, line: 579, type: !1071)
!3722 = !DILocation(line: 579, column: 8, scope: !3693)
!3723 = !DILocalVariable(name: "insn", scope: !3693, file: !3, line: 580, type: !839)
!3724 = !DILocation(line: 580, column: 7, scope: !3693)
!3725 = !DILocation(line: 582, column: 10, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 582, column: 3)
!3727 = !DILocation(line: 582, column: 8, scope: !3726)
!3728 = !DILocation(line: 582, column: 15, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 582, column: 3)
!3730 = !DILocation(line: 582, column: 19, scope: !3729)
!3731 = !DILocation(line: 582, column: 25, scope: !3729)
!3732 = !DILocation(line: 582, column: 17, scope: !3729)
!3733 = !DILocation(line: 582, column: 3, scope: !3726)
!3734 = !DILocation(line: 584, column: 11, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 584, column: 11)
!3736 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 583, column: 5)
!3737 = !DILocation(line: 584, column: 16, scope: !3735)
!3738 = !DILocation(line: 584, column: 20, scope: !3735)
!3739 = !DILocation(line: 584, column: 35, scope: !3735)
!3740 = !DILocation(line: 584, column: 32, scope: !3735)
!3741 = !DILocation(line: 584, column: 11, scope: !3736)
!3742 = !DILocation(line: 586, column: 4, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 586, column: 4)
!3744 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 585, column: 2)
!3745 = !DILocation(line: 586, column: 4, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 586, column: 4)
!3747 = !DILocation(line: 0, scope: !3746)
!3748 = !DILocation(line: 588, column: 12, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3750, file: !3, line: 588, column: 12)
!3750 = distinct !DILexicalBlock(scope: !3746, file: !3, line: 587, column: 6)
!3751 = !DILocation(line: 589, column: 5, scope: !3749)
!3752 = !DILocation(line: 589, column: 9, scope: !3749)
!3753 = !DILocation(line: 590, column: 9, scope: !3749)
!3754 = !DILocation(line: 590, column: 13, scope: !3749)
!3755 = !DILocation(line: 588, column: 12, scope: !3750)
!3756 = !DILocation(line: 592, column: 14, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 591, column: 3)
!3758 = !DILocation(line: 593, column: 21, scope: !3757)
!3759 = !DILocation(line: 593, column: 31, scope: !3757)
!3760 = !DILocation(line: 593, column: 5, scope: !3757)
!3761 = !DILocation(line: 594, column: 5, scope: !3757)
!3762 = !DILocation(line: 596, column: 6, scope: !3750)
!3763 = distinct !{!3763, !3742, !3764}
!3764 = !DILocation(line: 596, column: 6, scope: !3743)
!3765 = !DILocation(line: 598, column: 4, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 598, column: 4)
!3767 = !DILocation(line: 598, column: 4, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 598, column: 4)
!3769 = !DILocation(line: 600, column: 35, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 600, column: 12)
!3771 = distinct !DILexicalBlock(scope: !3768, file: !3, line: 599, column: 6)
!3772 = !DILocation(line: 600, column: 41, scope: !3770)
!3773 = !DILocation(line: 600, column: 44, scope: !3770)
!3774 = !DILocation(line: 600, column: 12, scope: !3770)
!3775 = !DILocation(line: 600, column: 12, scope: !3771)
!3776 = !DILocation(line: 601, column: 3, scope: !3770)
!3777 = !DILocation(line: 603, column: 24, scope: !3771)
!3778 = !DILocation(line: 603, column: 34, scope: !3771)
!3779 = !DILocation(line: 603, column: 8, scope: !3771)
!3780 = !DILocation(line: 604, column: 24, scope: !3771)
!3781 = !DILocation(line: 604, column: 34, scope: !3771)
!3782 = !DILocation(line: 604, column: 8, scope: !3771)
!3783 = !DILocation(line: 605, column: 43, scope: !3771)
!3784 = !DILocation(line: 606, column: 8, scope: !3771)
!3785 = !DILocation(line: 606, column: 11, scope: !3771)
!3786 = !DILocation(line: 606, column: 17, scope: !3771)
!3787 = !DILocation(line: 605, column: 25, scope: !3771)
!3788 = !DILocation(line: 605, column: 23, scope: !3771)
!3789 = !DILocation(line: 607, column: 6, scope: !3771)
!3790 = distinct !{!3790, !3765, !3791}
!3791 = !DILocation(line: 607, column: 6, scope: !3766)
!3792 = !DILocation(line: 608, column: 4, scope: !3744)
!3793 = !DILocation(line: 614, column: 11, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 614, column: 11)
!3795 = !DILocation(line: 614, column: 16, scope: !3794)
!3796 = !DILocation(line: 614, column: 20, scope: !3794)
!3797 = !DILocation(line: 614, column: 33, scope: !3794)
!3798 = !DILocation(line: 614, column: 43, scope: !3794)
!3799 = !DILocation(line: 614, column: 48, scope: !3794)
!3800 = !DILocation(line: 614, column: 40, scope: !3794)
!3801 = !DILocation(line: 614, column: 11, scope: !3736)
!3802 = !DILocation(line: 615, column: 2, scope: !3794)
!3803 = !DILocation(line: 617, column: 11, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 617, column: 11)
!3805 = !DILocation(line: 617, column: 45, scope: !3804)
!3806 = !DILocation(line: 617, column: 11, scope: !3736)
!3807 = !DILocation(line: 619, column: 13, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 618, column: 2)
!3809 = !DILocation(line: 620, column: 20, scope: !3808)
!3810 = !DILocation(line: 620, column: 30, scope: !3808)
!3811 = !DILocation(line: 620, column: 4, scope: !3808)
!3812 = !DILocation(line: 621, column: 2, scope: !3808)
!3813 = !DILocation(line: 622, column: 15, scope: !3736)
!3814 = !DILocation(line: 622, column: 49, scope: !3736)
!3815 = !DILocation(line: 622, column: 13, scope: !3736)
!3816 = !DILocation(line: 623, column: 11, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 623, column: 11)
!3818 = !DILocation(line: 623, column: 20, scope: !3817)
!3819 = !DILocation(line: 623, column: 17, scope: !3817)
!3820 = !DILocation(line: 623, column: 11, scope: !3736)
!3821 = !DILocation(line: 625, column: 20, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 624, column: 2)
!3823 = !DILocation(line: 625, column: 30, scope: !3822)
!3824 = !DILocation(line: 625, column: 4, scope: !3822)
!3825 = !DILocation(line: 626, column: 20, scope: !3822)
!3826 = !DILocation(line: 626, column: 30, scope: !3822)
!3827 = !DILocation(line: 626, column: 4, scope: !3822)
!3828 = !DILocation(line: 628, column: 28, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 628, column: 8)
!3830 = !DILocation(line: 628, column: 35, scope: !3829)
!3831 = !DILocation(line: 628, column: 8, scope: !3829)
!3832 = !DILocation(line: 628, column: 8, scope: !3822)
!3833 = !DILocation(line: 629, column: 23, scope: !3829)
!3834 = !DILocation(line: 629, column: 21, scope: !3829)
!3835 = !DILocation(line: 629, column: 6, scope: !3829)
!3836 = !DILocation(line: 630, column: 2, scope: !3822)
!3837 = !DILocation(line: 631, column: 5, scope: !3736)
!3838 = !DILocation(line: 582, column: 37, scope: !3729)
!3839 = !DILocation(line: 582, column: 3, scope: !3729)
!3840 = distinct !{!3840, !3733, !3841}
!3841 = !DILocation(line: 631, column: 5, scope: !3726)
!3842 = !DILocation(line: 633, column: 7, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 633, column: 7)
!3844 = !DILocation(line: 633, column: 13, scope: !3843)
!3845 = !DILocation(line: 633, column: 17, scope: !3843)
!3846 = !DILocation(line: 633, column: 7, scope: !3693)
!3847 = !DILocation(line: 635, column: 19, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 634, column: 5)
!3849 = !DILocation(line: 635, column: 7, scope: !3848)
!3850 = !DILocation(line: 635, column: 13, scope: !3848)
!3851 = !DILocation(line: 635, column: 17, scope: !3848)
!3852 = !DILocation(line: 636, column: 7, scope: !3848)
!3853 = !DILocation(line: 637, column: 7, scope: !3848)
!3854 = !DILocation(line: 638, column: 5, scope: !3848)
!3855 = !DILocation(line: 639, column: 38, scope: !3693)
!3856 = !DILocation(line: 639, column: 3, scope: !3693)
!3857 = !DILocation(line: 639, column: 21, scope: !3693)
!3858 = !DILocation(line: 639, column: 36, scope: !3693)
!3859 = !DILocation(line: 640, column: 32, scope: !3693)
!3860 = !DILocation(line: 640, column: 3, scope: !3693)
!3861 = !DILocation(line: 640, column: 21, scope: !3693)
!3862 = !DILocation(line: 640, column: 30, scope: !3693)
!3863 = !DILocation(line: 641, column: 1, scope: !3693)
!3864 = distinct !DISubprogram(name: "compute_always_reached", scope: !3, file: !3, line: 552, type: !3694, scopeLine: 554, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3865 = !DILocalVariable(name: "loop", arg: 1, scope: !3864, file: !3, line: 552, type: !802)
!3866 = !DILocation(line: 552, column: 38, scope: !3864)
!3867 = !DILocalVariable(name: "body", arg: 2, scope: !3864, file: !3, line: 552, type: !3410)
!3868 = !DILocation(line: 552, column: 57, scope: !3864)
!3869 = !DILocalVariable(name: "may_exit", arg: 3, scope: !3864, file: !3, line: 553, type: !2044)
!3870 = !DILocation(line: 553, column: 11, scope: !3864)
!3871 = !DILocalVariable(name: "always_reached", arg: 4, scope: !3864, file: !3, line: 553, type: !2044)
!3872 = !DILocation(line: 553, column: 28, scope: !3864)
!3873 = !DILocalVariable(name: "i", scope: !3864, file: !3, line: 555, type: !7)
!3874 = !DILocation(line: 555, column: 12, scope: !3864)
!3875 = !DILocation(line: 557, column: 10, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3864, file: !3, line: 557, column: 3)
!3877 = !DILocation(line: 557, column: 8, scope: !3876)
!3878 = !DILocation(line: 557, column: 15, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 557, column: 3)
!3880 = !DILocation(line: 557, column: 19, scope: !3879)
!3881 = !DILocation(line: 557, column: 25, scope: !3879)
!3882 = !DILocation(line: 557, column: 17, scope: !3879)
!3883 = !DILocation(line: 557, column: 3, scope: !3876)
!3884 = !DILocation(line: 559, column: 43, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 559, column: 11)
!3886 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 558, column: 5)
!3887 = !DILocation(line: 559, column: 49, scope: !3885)
!3888 = !DILocation(line: 559, column: 56, scope: !3885)
!3889 = !DILocation(line: 559, column: 61, scope: !3885)
!3890 = !DILocation(line: 559, column: 11, scope: !3885)
!3891 = !DILocation(line: 559, column: 11, scope: !3886)
!3892 = !DILocation(line: 560, column: 18, scope: !3885)
!3893 = !DILocation(line: 560, column: 34, scope: !3885)
!3894 = !DILocation(line: 560, column: 2, scope: !3885)
!3895 = !DILocation(line: 562, column: 25, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 562, column: 11)
!3897 = !DILocation(line: 562, column: 35, scope: !3896)
!3898 = !DILocation(line: 562, column: 11, scope: !3896)
!3899 = !DILocation(line: 562, column: 11, scope: !3886)
!3900 = !DILocation(line: 563, column: 2, scope: !3896)
!3901 = !DILocation(line: 564, column: 5, scope: !3886)
!3902 = !DILocation(line: 557, column: 37, scope: !3879)
!3903 = !DILocation(line: 557, column: 3, scope: !3879)
!3904 = distinct !{!3904, !3883, !3905}
!3905 = !DILocation(line: 564, column: 5, scope: !3876)
!3906 = !DILocation(line: 565, column: 1, scope: !3864)
!3907 = distinct !DISubprogram(name: "find_defs", scope: !3, file: !3, line: 660, type: !3908, scopeLine: 661, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3908 = !DISubroutineType(types: !3909)
!3909 = !{null, !802, !3410}
!3910 = !DILocalVariable(name: "loop", arg: 1, scope: !3907, file: !3, line: 660, type: !802)
!3911 = !DILocation(line: 660, column: 25, scope: !3907)
!3912 = !DILocalVariable(name: "body", arg: 2, scope: !3907, file: !3, line: 660, type: !3410)
!3913 = !DILocation(line: 660, column: 44, scope: !3907)
!3914 = !DILocalVariable(name: "i", scope: !3907, file: !3, line: 662, type: !7)
!3915 = !DILocation(line: 662, column: 12, scope: !3907)
!3916 = !DILocalVariable(name: "blocks", scope: !3907, file: !3, line: 663, type: !2044)
!3917 = !DILocation(line: 663, column: 10, scope: !3907)
!3918 = !DILocation(line: 663, column: 19, scope: !3907)
!3919 = !DILocation(line: 665, column: 10, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 665, column: 3)
!3921 = !DILocation(line: 665, column: 8, scope: !3920)
!3922 = !DILocation(line: 665, column: 15, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 665, column: 3)
!3924 = !DILocation(line: 665, column: 19, scope: !3923)
!3925 = !DILocation(line: 665, column: 25, scope: !3923)
!3926 = !DILocation(line: 665, column: 17, scope: !3923)
!3927 = !DILocation(line: 665, column: 3, scope: !3920)
!3928 = !DILocation(line: 666, column: 21, scope: !3923)
!3929 = !DILocation(line: 666, column: 29, scope: !3923)
!3930 = !DILocation(line: 666, column: 34, scope: !3923)
!3931 = !DILocation(line: 666, column: 38, scope: !3923)
!3932 = !DILocation(line: 666, column: 5, scope: !3923)
!3933 = !DILocation(line: 665, column: 37, scope: !3923)
!3934 = !DILocation(line: 665, column: 3, scope: !3923)
!3935 = distinct !{!3935, !3927, !3936}
!3936 = !DILocation(line: 666, column: 43, scope: !3920)
!3937 = !DILocation(line: 668, column: 22, scope: !3907)
!3938 = !DILocation(line: 668, column: 3, scope: !3907)
!3939 = !DILocation(line: 669, column: 3, scope: !3907)
!3940 = !DILocation(line: 670, column: 3, scope: !3907)
!3941 = !DILocation(line: 671, column: 18, scope: !3907)
!3942 = !DILocation(line: 671, column: 3, scope: !3907)
!3943 = !DILocation(line: 672, column: 3, scope: !3907)
!3944 = !DILocation(line: 674, column: 7, scope: !3945)
!3945 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 674, column: 7)
!3946 = !DILocation(line: 674, column: 7, scope: !3907)
!3947 = !DILocation(line: 676, column: 23, scope: !3948)
!3948 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 675, column: 5)
!3949 = !DILocation(line: 676, column: 7, scope: !3948)
!3950 = !DILocation(line: 677, column: 16, scope: !3948)
!3951 = !DILocation(line: 677, column: 7, scope: !3948)
!3952 = !DILocation(line: 678, column: 26, scope: !3948)
!3953 = !DILocation(line: 678, column: 37, scope: !3948)
!3954 = !DILocation(line: 678, column: 7, scope: !3948)
!3955 = !DILocation(line: 679, column: 16, scope: !3948)
!3956 = !DILocation(line: 679, column: 7, scope: !3948)
!3957 = !DILocation(line: 680, column: 5, scope: !3948)
!3958 = !DILocation(line: 681, column: 3, scope: !3907)
!3959 = !DILocation(line: 683, column: 3, scope: !3907)
!3960 = !DILocation(line: 684, column: 1, scope: !3907)
!3961 = distinct !DISubprogram(name: "find_invariants_body", scope: !3, file: !3, line: 964, type: !3694, scopeLine: 966, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3962 = !DILocalVariable(name: "loop", arg: 1, scope: !3961, file: !3, line: 964, type: !802)
!3963 = !DILocation(line: 964, column: 36, scope: !3961)
!3964 = !DILocalVariable(name: "body", arg: 2, scope: !3961, file: !3, line: 964, type: !3410)
!3965 = !DILocation(line: 964, column: 55, scope: !3961)
!3966 = !DILocalVariable(name: "always_reached", arg: 3, scope: !3961, file: !3, line: 965, type: !2044)
!3967 = !DILocation(line: 965, column: 16, scope: !3961)
!3968 = !DILocalVariable(name: "always_executed", arg: 4, scope: !3961, file: !3, line: 965, type: !2044)
!3969 = !DILocation(line: 965, column: 39, scope: !3961)
!3970 = !DILocalVariable(name: "i", scope: !3961, file: !3, line: 967, type: !7)
!3971 = !DILocation(line: 967, column: 12, scope: !3961)
!3972 = !DILocation(line: 969, column: 10, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3961, file: !3, line: 969, column: 3)
!3974 = !DILocation(line: 969, column: 8, scope: !3973)
!3975 = !DILocation(line: 969, column: 15, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3973, file: !3, line: 969, column: 3)
!3977 = !DILocation(line: 969, column: 19, scope: !3976)
!3978 = !DILocation(line: 969, column: 25, scope: !3976)
!3979 = !DILocation(line: 969, column: 17, scope: !3976)
!3980 = !DILocation(line: 969, column: 3, scope: !3973)
!3981 = !DILocation(line: 970, column: 25, scope: !3976)
!3982 = !DILocation(line: 970, column: 30, scope: !3976)
!3983 = !DILocation(line: 971, column: 18, scope: !3976)
!3984 = !DILocation(line: 971, column: 34, scope: !3976)
!3985 = !DILocation(line: 971, column: 4, scope: !3976)
!3986 = !DILocation(line: 972, column: 18, scope: !3976)
!3987 = !DILocation(line: 972, column: 35, scope: !3976)
!3988 = !DILocation(line: 972, column: 4, scope: !3976)
!3989 = !DILocation(line: 970, column: 5, scope: !3976)
!3990 = !DILocation(line: 969, column: 37, scope: !3976)
!3991 = !DILocation(line: 969, column: 3, scope: !3976)
!3992 = distinct !{!3992, !3980, !3993}
!3993 = !DILocation(line: 972, column: 37, scope: !3973)
!3994 = !DILocation(line: 973, column: 1, scope: !3961)
!3995 = distinct !DISubprogram(name: "merge_identical_invariants", scope: !3, file: !3, line: 532, type: !2140, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!3996 = !DILocalVariable(name: "i", scope: !3995, file: !3, line: 534, type: !7)
!3997 = !DILocation(line: 534, column: 12, scope: !3995)
!3998 = !DILocalVariable(name: "inv", scope: !3995, file: !3, line: 535, type: !2075)
!3999 = !DILocation(line: 535, column: 21, scope: !3995)
!4000 = !DILocalVariable(name: "eq", scope: !3995, file: !3, line: 536, type: !1289)
!4001 = !DILocation(line: 536, column: 10, scope: !3995)
!4002 = !DILocation(line: 536, column: 28, scope: !3995)
!4003 = !DILocation(line: 536, column: 15, scope: !3995)
!4004 = !DILocation(line: 539, column: 10, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 539, column: 3)
!4006 = !DILocation(line: 539, column: 8, scope: !4005)
!4007 = !DILocation(line: 539, column: 15, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4005, file: !3, line: 539, column: 3)
!4009 = !DILocation(line: 539, column: 3, scope: !4005)
!4010 = !DILocation(line: 540, column: 32, scope: !4008)
!4011 = !DILocation(line: 540, column: 36, scope: !4008)
!4012 = !DILocation(line: 540, column: 5, scope: !4008)
!4013 = !DILocation(line: 539, column: 63, scope: !4008)
!4014 = !DILocation(line: 539, column: 3, scope: !4008)
!4015 = distinct !{!4015, !4009, !4016}
!4016 = !DILocation(line: 540, column: 39, scope: !4005)
!4017 = !DILocation(line: 542, column: 16, scope: !3995)
!4018 = !DILocation(line: 542, column: 3, scope: !3995)
!4019 = !DILocation(line: 543, column: 1, scope: !3995)
!4020 = distinct !DISubprogram(name: "ei_start_1", scope: !142, file: !142, line: 696, type: !4021, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4021 = !DISubroutineType(types: !4022)
!4022 = !{!3707, !3712}
!4023 = !DILocalVariable(name: "ev", arg: 1, scope: !4020, file: !142, line: 696, type: !3712)
!4024 = !DILocation(line: 696, column: 28, scope: !4020)
!4025 = !DILocalVariable(name: "i", scope: !4020, file: !142, line: 698, type: !3707)
!4026 = !DILocation(line: 698, column: 17, scope: !4020)
!4027 = !DILocation(line: 700, column: 5, scope: !4020)
!4028 = !DILocation(line: 700, column: 11, scope: !4020)
!4029 = !DILocation(line: 701, column: 17, scope: !4020)
!4030 = !DILocation(line: 701, column: 5, scope: !4020)
!4031 = !DILocation(line: 701, column: 15, scope: !4020)
!4032 = !DILocation(line: 703, column: 3, scope: !4020)
!4033 = distinct !DISubprogram(name: "ei_cond", scope: !142, file: !142, line: 771, type: !4034, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4034 = !DISubroutineType(types: !4035)
!4035 = !{!1071, !3707, !4036}
!4036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !824, size: 64)
!4037 = !DILocalVariable(name: "ei", arg: 1, scope: !4033, file: !142, line: 771, type: !3707)
!4038 = !DILocation(line: 771, column: 24, scope: !4033)
!4039 = !DILocalVariable(name: "p", arg: 2, scope: !4033, file: !142, line: 771, type: !4036)
!4040 = !DILocation(line: 771, column: 34, scope: !4033)
!4041 = !DILocation(line: 773, column: 8, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4033, file: !142, line: 773, column: 7)
!4043 = !DILocation(line: 773, column: 7, scope: !4033)
!4044 = !DILocation(line: 775, column: 12, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !4042, file: !142, line: 774, column: 5)
!4046 = !DILocation(line: 775, column: 8, scope: !4045)
!4047 = !DILocation(line: 775, column: 10, scope: !4045)
!4048 = !DILocation(line: 776, column: 7, scope: !4045)
!4049 = !DILocation(line: 780, column: 8, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4042, file: !142, line: 779, column: 5)
!4051 = !DILocation(line: 780, column: 10, scope: !4050)
!4052 = !DILocation(line: 781, column: 7, scope: !4050)
!4053 = !DILocation(line: 783, column: 1, scope: !4033)
!4054 = distinct !DISubprogram(name: "ei_next", scope: !142, file: !142, line: 736, type: !4055, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4055 = !DISubroutineType(types: !4056)
!4056 = !{null, !4057}
!4057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3707, size: 64)
!4058 = !DILocalVariable(name: "i", arg: 1, scope: !4054, file: !142, line: 736, type: !4057)
!4059 = !DILocation(line: 736, column: 25, scope: !4054)
!4060 = !DILocation(line: 738, column: 3, scope: !4054)
!4061 = !DILocation(line: 739, column: 3, scope: !4054)
!4062 = !DILocation(line: 739, column: 6, scope: !4054)
!4063 = !DILocation(line: 739, column: 11, scope: !4054)
!4064 = !DILocation(line: 740, column: 1, scope: !4054)
!4065 = distinct !DISubprogram(name: "ei_end_p", scope: !142, file: !142, line: 721, type: !4066, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4066 = !DISubroutineType(types: !4067)
!4067 = !{!1071, !3707}
!4068 = !DILocalVariable(name: "i", arg: 1, scope: !4065, file: !142, line: 721, type: !3707)
!4069 = !DILocation(line: 721, column: 25, scope: !4065)
!4070 = !DILocation(line: 723, column: 13, scope: !4065)
!4071 = !DILocation(line: 723, column: 22, scope: !4065)
!4072 = !DILocation(line: 723, column: 19, scope: !4065)
!4073 = !DILocation(line: 723, column: 10, scope: !4065)
!4074 = !DILocation(line: 723, column: 3, scope: !4065)
!4075 = distinct !DISubprogram(name: "ei_edge", scope: !142, file: !142, line: 752, type: !4076, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4076 = !DISubroutineType(types: !4077)
!4077 = !{!824, !3707}
!4078 = !DILocalVariable(name: "i", arg: 1, scope: !4075, file: !142, line: 752, type: !3707)
!4079 = !DILocation(line: 752, column: 24, scope: !4075)
!4080 = !DILocation(line: 754, column: 10, scope: !4075)
!4081 = !DILocation(line: 754, column: 3, scope: !4075)
!4082 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !142, file: !142, line: 150, type: !4083, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4083 = !DISubroutineType(types: !4084)
!4084 = !{!7, !4085}
!4085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4086, size: 64)
!4086 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !817)
!4087 = !DILocalVariable(name: "vec_", arg: 1, scope: !4082, file: !142, line: 150, type: !4085)
!4088 = !DILocation(line: 150, column: 1, scope: !4082)
!4089 = distinct !DISubprogram(name: "ei_container", scope: !142, file: !142, line: 685, type: !4090, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4090 = !DISubroutineType(types: !4091)
!4091 = !{!812, !3707}
!4092 = !DILocalVariable(name: "i", arg: 1, scope: !4089, file: !142, line: 685, type: !3707)
!4093 = !DILocation(line: 685, column: 29, scope: !4089)
!4094 = !DILocation(line: 687, column: 3, scope: !4089)
!4095 = !DILocation(line: 688, column: 13, scope: !4089)
!4096 = !DILocation(line: 688, column: 10, scope: !4089)
!4097 = !DILocation(line: 688, column: 3, scope: !4089)
!4098 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !142, file: !142, line: 150, type: !4099, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4099 = !DISubroutineType(types: !4100)
!4100 = !{!824, !4085, !7}
!4101 = !DILocalVariable(name: "vec_", arg: 1, scope: !4098, file: !142, line: 150, type: !4085)
!4102 = !DILocation(line: 150, column: 1, scope: !4098)
!4103 = !DILocalVariable(name: "ix_", arg: 2, scope: !4098, file: !142, line: 150, type: !7)
!4104 = !DILocation(line: 0, scope: !4098)
!4105 = distinct !DISubprogram(name: "check_invariant_table_size", scope: !3, file: !3, line: 183, type: !2140, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4106 = !DILocation(line: 185, column: 7, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 185, column: 7)
!4108 = !DILocation(line: 185, column: 30, scope: !4107)
!4109 = !DILocation(line: 185, column: 28, scope: !4107)
!4110 = !DILocation(line: 185, column: 7, scope: !4105)
!4111 = !DILocalVariable(name: "new_size", scope: !4112, file: !3, line: 187, type: !7)
!4112 = distinct !DILexicalBlock(scope: !4107, file: !3, line: 186, column: 5)
!4113 = !DILocation(line: 187, column: 20, scope: !4112)
!4114 = !DILocation(line: 187, column: 31, scope: !4112)
!4115 = !DILocation(line: 187, column: 56, scope: !4112)
!4116 = !DILocation(line: 187, column: 78, scope: !4112)
!4117 = !DILocation(line: 187, column: 53, scope: !4112)
!4118 = !DILocation(line: 188, column: 25, scope: !4112)
!4119 = !DILocation(line: 188, column: 23, scope: !4112)
!4120 = !DILocation(line: 189, column: 16, scope: !4112)
!4121 = !DILocation(line: 189, column: 32, scope: !4112)
!4122 = !DILocation(line: 189, column: 7, scope: !4112)
!4123 = !DILocation(line: 190, column: 9, scope: !4112)
!4124 = !DILocation(line: 190, column: 20, scope: !4112)
!4125 = !DILocation(line: 190, column: 18, scope: !4112)
!4126 = !DILocation(line: 190, column: 8, scope: !4112)
!4127 = !DILocation(line: 190, column: 42, scope: !4112)
!4128 = !DILocation(line: 191, column: 30, scope: !4112)
!4129 = !DILocation(line: 191, column: 28, scope: !4112)
!4130 = !DILocation(line: 192, column: 5, scope: !4112)
!4131 = !DILocation(line: 193, column: 1, scope: !4105)
!4132 = distinct !DISubprogram(name: "find_invariants_bb", scope: !3, file: !3, line: 939, type: !4133, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4133 = !DISubroutineType(types: !4134)
!4134 = !{null, !1376, !1071, !1071}
!4135 = !DILocalVariable(name: "bb", arg: 1, scope: !4132, file: !3, line: 939, type: !1376)
!4136 = !DILocation(line: 939, column: 33, scope: !4132)
!4137 = !DILocalVariable(name: "always_reached", arg: 2, scope: !4132, file: !3, line: 939, type: !1071)
!4138 = !DILocation(line: 939, column: 42, scope: !4132)
!4139 = !DILocalVariable(name: "always_executed", arg: 3, scope: !4132, file: !3, line: 939, type: !1071)
!4140 = !DILocation(line: 939, column: 63, scope: !4132)
!4141 = !DILocalVariable(name: "insn", scope: !4132, file: !3, line: 941, type: !839)
!4142 = !DILocation(line: 941, column: 7, scope: !4132)
!4143 = !DILocation(line: 943, column: 3, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 943, column: 3)
!4145 = !DILocation(line: 943, column: 3, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4144, file: !3, line: 943, column: 3)
!4147 = !DILocation(line: 0, scope: !4146)
!4148 = !DILocation(line: 945, column: 12, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4150, file: !3, line: 945, column: 11)
!4150 = distinct !DILexicalBlock(scope: !4146, file: !3, line: 944, column: 5)
!4151 = !DILocation(line: 945, column: 11, scope: !4150)
!4152 = !DILocation(line: 946, column: 2, scope: !4149)
!4153 = !DILocation(line: 948, column: 29, scope: !4150)
!4154 = !DILocation(line: 948, column: 35, scope: !4150)
!4155 = !DILocation(line: 948, column: 51, scope: !4150)
!4156 = !DILocation(line: 948, column: 7, scope: !4150)
!4157 = !DILocation(line: 950, column: 11, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4150, file: !3, line: 950, column: 11)
!4159 = !DILocation(line: 951, column: 4, scope: !4158)
!4160 = !DILocation(line: 951, column: 7, scope: !4158)
!4161 = !DILocation(line: 952, column: 4, scope: !4158)
!4162 = !DILocation(line: 952, column: 8, scope: !4158)
!4163 = !DILocation(line: 953, column: 8, scope: !4158)
!4164 = !DILocation(line: 953, column: 13, scope: !4158)
!4165 = !DILocation(line: 950, column: 11, scope: !4150)
!4166 = !DILocation(line: 954, column: 17, scope: !4158)
!4167 = !DILocation(line: 954, column: 2, scope: !4158)
!4168 = !DILocation(line: 955, column: 5, scope: !4150)
!4169 = distinct !{!4169, !4143, !4170}
!4170 = !DILocation(line: 955, column: 5, scope: !4144)
!4171 = !DILocation(line: 956, column: 1, scope: !4132)
!4172 = distinct !DISubprogram(name: "find_invariants_insn", scope: !3, file: !3, line: 927, type: !4173, scopeLine: 928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4173 = !DISubroutineType(types: !4174)
!4174 = !{null, !839, !1071, !1071}
!4175 = !DILocalVariable(name: "insn", arg: 1, scope: !4172, file: !3, line: 927, type: !839)
!4176 = !DILocation(line: 927, column: 27, scope: !4172)
!4177 = !DILocalVariable(name: "always_reached", arg: 2, scope: !4172, file: !3, line: 927, type: !1071)
!4178 = !DILocation(line: 927, column: 38, scope: !4172)
!4179 = !DILocalVariable(name: "always_executed", arg: 3, scope: !4172, file: !3, line: 927, type: !1071)
!4180 = !DILocation(line: 927, column: 59, scope: !4172)
!4181 = !DILocation(line: 929, column: 24, scope: !4172)
!4182 = !DILocation(line: 929, column: 30, scope: !4172)
!4183 = !DILocation(line: 929, column: 46, scope: !4172)
!4184 = !DILocation(line: 929, column: 3, scope: !4172)
!4185 = !DILocation(line: 930, column: 16, scope: !4172)
!4186 = !DILocation(line: 930, column: 3, scope: !4172)
!4187 = !DILocation(line: 931, column: 1, scope: !4172)
!4188 = distinct !DISubprogram(name: "find_invariant_insn", scope: !3, file: !3, line: 838, type: !4173, scopeLine: 839, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4189 = !DILocalVariable(name: "insn", arg: 1, scope: !4188, file: !3, line: 838, type: !839)
!4190 = !DILocation(line: 838, column: 26, scope: !4188)
!4191 = !DILocalVariable(name: "always_reached", arg: 2, scope: !4188, file: !3, line: 838, type: !1071)
!4192 = !DILocation(line: 838, column: 37, scope: !4188)
!4193 = !DILocalVariable(name: "always_executed", arg: 3, scope: !4188, file: !3, line: 838, type: !1071)
!4194 = !DILocation(line: 838, column: 58, scope: !4188)
!4195 = !DILocalVariable(name: "ref", scope: !4188, file: !3, line: 840, type: !4196)
!4196 = !DIDerivedType(tag: DW_TAG_typedef, name: "df_ref", file: !398, line: 429, baseType: !4197)
!4197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4198, size: 64)
!4198 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "df_ref_d", file: !398, line: 422, size: 704, elements: !4199)
!4199 = !{!4200, !4239, !4244, !4249}
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4198, file: !398, line: 424, baseType: !4201, size: 512)
!4201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_base_ref", file: !398, line: 356, size: 512, elements: !4202)
!4202 = !{!4203, !4204, !4205, !4206, !4207, !4213, !4234, !4235, !4236, !4237, !4238}
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !4201, file: !398, line: 360, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!4204 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4201, file: !398, line: 362, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4201, file: !398, line: 364, baseType: !796, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!4206 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !4201, file: !398, line: 365, baseType: !839, size: 64, offset: 64)
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !4201, file: !398, line: 366, baseType: !4208, size: 64, offset: 128)
!4208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4209, size: 64)
!4209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_link", file: !398, line: 449, size: 128, elements: !4210)
!4210 = !{!4211, !4212}
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !4209, file: !398, line: 451, baseType: !4196, size: 64)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4209, file: !398, line: 452, baseType: !4208, size: 64, offset: 64)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "insn_info", scope: !4201, file: !398, line: 370, baseType: !4214, size: 64, offset: 192)
!4214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4215, size: 64)
!4215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_insn_info", file: !398, line: 433, size: 384, elements: !4216)
!4216 = !{!4217, !4218, !4220, !4221, !4222, !4233}
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !4215, file: !398, line: 435, baseType: !839, size: 64)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !4215, file: !398, line: 436, baseType: !4219, size: 64, offset: 64)
!4219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4196, size: 64)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !4215, file: !398, line: 437, baseType: !4219, size: 64, offset: 128)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "eq_uses", scope: !4215, file: !398, line: 439, baseType: !4219, size: 64, offset: 192)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "mw_hardregs", scope: !4215, file: !398, line: 440, baseType: !4223, size: 64, offset: 256)
!4223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4224, size: 64)
!4224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4225, size: 64)
!4225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_mw_hardreg", file: !398, line: 339, size: 192, elements: !4226)
!4226 = !{!4227, !4228, !4229, !4230, !4231, !4232}
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "mw_reg", scope: !4225, file: !398, line: 341, baseType: !839, size: 64)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4225, file: !398, line: 344, baseType: !7, size: 16, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4225, file: !398, line: 346, baseType: !796, size: 16, offset: 80, flags: DIFlagBitField, extraData: i64 64)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "start_regno", scope: !4225, file: !398, line: 347, baseType: !7, size: 32, offset: 96)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "end_regno", scope: !4225, file: !398, line: 348, baseType: !7, size: 32, offset: 128)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "mw_order", scope: !4225, file: !398, line: 349, baseType: !7, size: 32, offset: 160)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !4215, file: !398, line: 444, baseType: !796, size: 32, offset: 320)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "next_reg", scope: !4201, file: !398, line: 374, baseType: !4197, size: 64, offset: 256)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "prev_reg", scope: !4201, file: !398, line: 375, baseType: !4197, size: 64, offset: 320)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !4201, file: !398, line: 376, baseType: !7, size: 32, offset: 384)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4201, file: !398, line: 379, baseType: !796, size: 32, offset: 416)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "ref_order", scope: !4201, file: !398, line: 382, baseType: !7, size: 32, offset: 448)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "regular_ref", scope: !4198, file: !398, line: 425, baseType: !4240, size: 576)
!4240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_regular_ref", file: !398, line: 398, size: 576, elements: !4241)
!4241 = !{!4242, !4243}
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4240, file: !398, line: 400, baseType: !4201, size: 512)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !4240, file: !398, line: 405, baseType: !2091, size: 64, offset: 512)
!4244 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_ref", scope: !4198, file: !398, line: 426, baseType: !4245, size: 576)
!4245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_artificial_ref", file: !398, line: 388, size: 576, elements: !4246)
!4246 = !{!4247, !4248}
!4247 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4245, file: !398, line: 390, baseType: !4201, size: 512)
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4245, file: !398, line: 394, baseType: !1376, size: 64, offset: 512)
!4249 = !DIDerivedType(tag: DW_TAG_member, name: "extract_ref", scope: !4198, file: !398, line: 427, baseType: !4250, size: 704)
!4250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_extract_ref", file: !398, line: 413, size: 704, elements: !4251)
!4251 = !{!4252, !4253, !4254, !4255}
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4250, file: !398, line: 415, baseType: !4240, size: 576)
!4253 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !4250, file: !398, line: 416, baseType: !796, size: 32, offset: 576)
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4250, file: !398, line: 417, baseType: !796, size: 32, offset: 608)
!4255 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !4250, file: !398, line: 418, baseType: !5, size: 32, offset: 640)
!4256 = !DILocation(line: 840, column: 10, scope: !4188)
!4257 = !DILocalVariable(name: "def", scope: !4188, file: !3, line: 841, type: !2083)
!4258 = !DILocation(line: 841, column: 15, scope: !4188)
!4259 = !DILocalVariable(name: "depends_on", scope: !4188, file: !3, line: 842, type: !2044)
!4260 = !DILocation(line: 842, column: 10, scope: !4188)
!4261 = !DILocalVariable(name: "set", scope: !4188, file: !3, line: 843, type: !839)
!4262 = !DILocation(line: 843, column: 7, scope: !4188)
!4263 = !DILocalVariable(name: "dest", scope: !4188, file: !3, line: 843, type: !839)
!4264 = !DILocation(line: 843, column: 12, scope: !4188)
!4265 = !DILocalVariable(name: "simple", scope: !4188, file: !3, line: 844, type: !1071)
!4266 = !DILocation(line: 844, column: 8, scope: !4188)
!4267 = !DILocalVariable(name: "inv", scope: !4188, file: !3, line: 845, type: !2075)
!4268 = !DILocation(line: 845, column: 21, scope: !4188)
!4269 = !DILocation(line: 853, column: 9, scope: !4188)
!4270 = !DILocation(line: 853, column: 7, scope: !4188)
!4271 = !DILocation(line: 854, column: 8, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 854, column: 7)
!4273 = !DILocation(line: 854, column: 7, scope: !4188)
!4274 = !DILocation(line: 855, column: 5, scope: !4272)
!4275 = !DILocation(line: 856, column: 10, scope: !4188)
!4276 = !DILocation(line: 856, column: 8, scope: !4188)
!4277 = !DILocation(line: 858, column: 8, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 858, column: 7)
!4279 = !DILocation(line: 859, column: 7, scope: !4278)
!4280 = !DILocation(line: 859, column: 10, scope: !4278)
!4281 = !DILocation(line: 858, column: 7, scope: !4188)
!4282 = !DILocation(line: 860, column: 12, scope: !4278)
!4283 = !DILocation(line: 860, column: 5, scope: !4278)
!4284 = !DILocation(line: 862, column: 26, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 862, column: 7)
!4286 = !DILocation(line: 862, column: 8, scope: !4285)
!4287 = !DILocation(line: 863, column: 7, scope: !4285)
!4288 = !DILocation(line: 863, column: 34, scope: !4285)
!4289 = !DILocation(line: 863, column: 11, scope: !4285)
!4290 = !DILocation(line: 862, column: 7, scope: !4188)
!4291 = !DILocation(line: 864, column: 5, scope: !4285)
!4292 = !DILocation(line: 868, column: 27, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 868, column: 7)
!4294 = !DILocation(line: 868, column: 7, scope: !4293)
!4295 = !DILocation(line: 868, column: 7, scope: !4188)
!4296 = !DILocation(line: 869, column: 5, scope: !4293)
!4297 = !DILocation(line: 872, column: 28, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 872, column: 7)
!4299 = !DILocation(line: 872, column: 7, scope: !4298)
!4300 = !DILocation(line: 872, column: 44, scope: !4298)
!4301 = !DILocation(line: 872, column: 48, scope: !4298)
!4302 = !DILocation(line: 872, column: 7, scope: !4188)
!4303 = !DILocation(line: 873, column: 5, scope: !4298)
!4304 = !DILocation(line: 875, column: 16, scope: !4188)
!4305 = !DILocation(line: 875, column: 14, scope: !4188)
!4306 = !DILocation(line: 876, column: 28, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 876, column: 7)
!4308 = !DILocation(line: 876, column: 34, scope: !4307)
!4309 = !DILocation(line: 876, column: 8, scope: !4307)
!4310 = !DILocation(line: 876, column: 7, scope: !4188)
!4311 = !DILocation(line: 878, column: 7, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 877, column: 5)
!4313 = !DILocation(line: 879, column: 7, scope: !4312)
!4314 = !DILocation(line: 882, column: 7, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 882, column: 7)
!4316 = !DILocation(line: 882, column: 7, scope: !4188)
!4317 = !DILocation(line: 883, column: 11, scope: !4315)
!4318 = !DILocation(line: 883, column: 9, scope: !4315)
!4319 = !DILocation(line: 883, column: 5, scope: !4315)
!4320 = !DILocation(line: 885, column: 9, scope: !4315)
!4321 = !DILocation(line: 887, column: 31, scope: !4188)
!4322 = !DILocation(line: 887, column: 36, scope: !4188)
!4323 = !DILocation(line: 887, column: 42, scope: !4188)
!4324 = !DILocation(line: 887, column: 54, scope: !4188)
!4325 = !DILocation(line: 887, column: 9, scope: !4188)
!4326 = !DILocation(line: 887, column: 7, scope: !4188)
!4327 = !DILocation(line: 889, column: 7, scope: !4328)
!4328 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 889, column: 7)
!4329 = !DILocation(line: 889, column: 7, scope: !4188)
!4330 = !DILocation(line: 891, column: 26, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 890, column: 5)
!4332 = !DILocation(line: 891, column: 32, scope: !4331)
!4333 = !DILocation(line: 891, column: 13, scope: !4331)
!4334 = !DILocation(line: 891, column: 11, scope: !4331)
!4335 = !DILocation(line: 892, column: 7, scope: !4331)
!4336 = !DILocation(line: 893, column: 41, scope: !4331)
!4337 = !DILocation(line: 893, column: 7, scope: !4331)
!4338 = !DILocation(line: 893, column: 23, scope: !4331)
!4339 = !DILocation(line: 893, column: 39, scope: !4331)
!4340 = !DILocation(line: 894, column: 5, scope: !4331)
!4341 = !DILocation(line: 895, column: 1, scope: !4188)
!4342 = distinct !DISubprogram(name: "record_uses", scope: !3, file: !3, line: 900, type: !3041, scopeLine: 901, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4343 = !DILocalVariable(name: "insn", arg: 1, scope: !4342, file: !3, line: 900, type: !839)
!4344 = !DILocation(line: 900, column: 18, scope: !4342)
!4345 = !DILocalVariable(name: "insn_info", scope: !4342, file: !3, line: 902, type: !4214)
!4346 = !DILocation(line: 902, column: 24, scope: !4342)
!4347 = !DILocation(line: 902, column: 36, scope: !4342)
!4348 = !DILocalVariable(name: "use_rec", scope: !4342, file: !3, line: 903, type: !4219)
!4349 = !DILocation(line: 903, column: 11, scope: !4342)
!4350 = !DILocalVariable(name: "inv", scope: !4342, file: !3, line: 904, type: !2075)
!4351 = !DILocation(line: 904, column: 21, scope: !4342)
!4352 = !DILocation(line: 906, column: 18, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 906, column: 3)
!4354 = !DILocation(line: 906, column: 16, scope: !4353)
!4355 = !DILocation(line: 906, column: 8, scope: !4353)
!4356 = !DILocation(line: 906, column: 50, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 906, column: 3)
!4358 = !DILocation(line: 906, column: 49, scope: !4357)
!4359 = !DILocation(line: 906, column: 3, scope: !4353)
!4360 = !DILocalVariable(name: "use", scope: !4361, file: !3, line: 908, type: !4196)
!4361 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 907, column: 5)
!4362 = !DILocation(line: 908, column: 14, scope: !4361)
!4363 = !DILocation(line: 908, column: 21, scope: !4361)
!4364 = !DILocation(line: 908, column: 20, scope: !4361)
!4365 = !DILocation(line: 909, column: 32, scope: !4361)
!4366 = !DILocation(line: 909, column: 13, scope: !4361)
!4367 = !DILocation(line: 909, column: 11, scope: !4361)
!4368 = !DILocation(line: 910, column: 11, scope: !4369)
!4369 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 910, column: 11)
!4370 = !DILocation(line: 910, column: 11, scope: !4361)
!4371 = !DILocation(line: 911, column: 14, scope: !4369)
!4372 = !DILocation(line: 911, column: 19, scope: !4369)
!4373 = !DILocation(line: 911, column: 24, scope: !4369)
!4374 = !DILocation(line: 911, column: 2, scope: !4369)
!4375 = !DILocation(line: 912, column: 5, scope: !4361)
!4376 = !DILocation(line: 906, column: 66, scope: !4357)
!4377 = !DILocation(line: 906, column: 3, scope: !4357)
!4378 = distinct !{!4378, !4359, !4379}
!4379 = !DILocation(line: 912, column: 5, scope: !4353)
!4380 = !DILocation(line: 913, column: 18, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 913, column: 3)
!4382 = !DILocation(line: 913, column: 16, scope: !4381)
!4383 = !DILocation(line: 913, column: 8, scope: !4381)
!4384 = !DILocation(line: 913, column: 53, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 913, column: 3)
!4386 = !DILocation(line: 913, column: 52, scope: !4385)
!4387 = !DILocation(line: 913, column: 3, scope: !4381)
!4388 = !DILocalVariable(name: "use", scope: !4389, file: !3, line: 915, type: !4196)
!4389 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 914, column: 5)
!4390 = !DILocation(line: 915, column: 14, scope: !4389)
!4391 = !DILocation(line: 915, column: 21, scope: !4389)
!4392 = !DILocation(line: 915, column: 20, scope: !4389)
!4393 = !DILocation(line: 916, column: 32, scope: !4389)
!4394 = !DILocation(line: 916, column: 13, scope: !4389)
!4395 = !DILocation(line: 916, column: 11, scope: !4389)
!4396 = !DILocation(line: 917, column: 11, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 917, column: 11)
!4398 = !DILocation(line: 917, column: 11, scope: !4389)
!4399 = !DILocation(line: 918, column: 14, scope: !4397)
!4400 = !DILocation(line: 918, column: 19, scope: !4397)
!4401 = !DILocation(line: 918, column: 24, scope: !4397)
!4402 = !DILocation(line: 918, column: 2, scope: !4397)
!4403 = !DILocation(line: 919, column: 5, scope: !4389)
!4404 = !DILocation(line: 913, column: 69, scope: !4385)
!4405 = !DILocation(line: 913, column: 3, scope: !4385)
!4406 = distinct !{!4406, !4387, !4407}
!4407 = !DILocation(line: 919, column: 5, scope: !4381)
!4408 = !DILocation(line: 920, column: 1, scope: !4342)
!4409 = distinct !DISubprogram(name: "may_assign_reg_p", scope: !3, file: !3, line: 646, type: !4410, scopeLine: 647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4410 = !DISubroutineType(types: !4411)
!4411 = !{!1071, !839}
!4412 = !DILocalVariable(name: "x", arg: 1, scope: !4409, file: !3, line: 646, type: !839)
!4413 = !DILocation(line: 646, column: 23, scope: !4409)
!4414 = !DILocation(line: 648, column: 11, scope: !4409)
!4415 = !DILocation(line: 648, column: 24, scope: !4409)
!4416 = !DILocation(line: 649, column: 4, scope: !4409)
!4417 = !DILocation(line: 649, column: 7, scope: !4409)
!4418 = !DILocation(line: 649, column: 20, scope: !4409)
!4419 = !DILocation(line: 650, column: 4, scope: !4409)
!4420 = !DILocation(line: 650, column: 19, scope: !4409)
!4421 = !DILocation(line: 650, column: 7, scope: !4409)
!4422 = !DILocation(line: 651, column: 4, scope: !4409)
!4423 = !DILocation(line: 651, column: 9, scope: !4409)
!4424 = !DILocation(line: 652, column: 8, scope: !4409)
!4425 = !DILocation(line: 652, column: 12, scope: !4409)
!4426 = !DILocation(line: 653, column: 8, scope: !4409)
!4427 = !DILocation(line: 653, column: 11, scope: !4409)
!4428 = !DILocation(line: 653, column: 39, scope: !4409)
!4429 = !DILocation(line: 0, scope: !4409)
!4430 = !DILocation(line: 648, column: 10, scope: !4409)
!4431 = !DILocation(line: 648, column: 3, scope: !4409)
!4432 = distinct !DISubprogram(name: "check_maybe_invariant", scope: !3, file: !3, line: 198, type: !4410, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4433 = !DILocalVariable(name: "x", arg: 1, scope: !4432, file: !3, line: 198, type: !839)
!4434 = !DILocation(line: 198, column: 28, scope: !4432)
!4435 = !DILocalVariable(name: "code", scope: !4432, file: !3, line: 200, type: !535)
!4436 = !DILocation(line: 200, column: 17, scope: !4432)
!4437 = !DILocation(line: 200, column: 24, scope: !4432)
!4438 = !DILocalVariable(name: "i", scope: !4432, file: !3, line: 201, type: !796)
!4439 = !DILocation(line: 201, column: 7, scope: !4432)
!4440 = !DILocalVariable(name: "j", scope: !4432, file: !3, line: 201, type: !796)
!4441 = !DILocation(line: 201, column: 10, scope: !4432)
!4442 = !DILocalVariable(name: "fmt", scope: !4432, file: !3, line: 202, type: !864)
!4443 = !DILocation(line: 202, column: 15, scope: !4432)
!4444 = !DILocation(line: 204, column: 11, scope: !4432)
!4445 = !DILocation(line: 204, column: 3, scope: !4432)
!4446 = !DILocation(line: 212, column: 7, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 205, column: 5)
!4448 = !DILocation(line: 218, column: 7, scope: !4447)
!4449 = !DILocation(line: 221, column: 7, scope: !4447)
!4450 = !DILocation(line: 229, column: 11, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 229, column: 11)
!4452 = !DILocation(line: 229, column: 30, scope: !4451)
!4453 = !DILocation(line: 229, column: 34, scope: !4451)
!4454 = !DILocation(line: 229, column: 11, scope: !4447)
!4455 = !DILocation(line: 230, column: 2, scope: !4451)
!4456 = !DILocation(line: 232, column: 7, scope: !4447)
!4457 = !DILocation(line: 236, column: 11, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 236, column: 11)
!4459 = !DILocation(line: 236, column: 11, scope: !4447)
!4460 = !DILocation(line: 237, column: 2, scope: !4458)
!4461 = !DILocation(line: 238, column: 7, scope: !4447)
!4462 = !DILocation(line: 241, column: 7, scope: !4447)
!4463 = !DILocation(line: 244, column: 9, scope: !4432)
!4464 = !DILocation(line: 244, column: 7, scope: !4432)
!4465 = !DILocation(line: 245, column: 12, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 245, column: 3)
!4467 = !DILocation(line: 245, column: 34, scope: !4466)
!4468 = !DILocation(line: 245, column: 10, scope: !4466)
!4469 = !DILocation(line: 245, column: 8, scope: !4466)
!4470 = !DILocation(line: 245, column: 39, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 245, column: 3)
!4472 = !DILocation(line: 245, column: 41, scope: !4471)
!4473 = !DILocation(line: 245, column: 3, scope: !4466)
!4474 = !DILocation(line: 247, column: 11, scope: !4475)
!4475 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 247, column: 11)
!4476 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 246, column: 5)
!4477 = !DILocation(line: 247, column: 15, scope: !4475)
!4478 = !DILocation(line: 247, column: 18, scope: !4475)
!4479 = !DILocation(line: 247, column: 11, scope: !4476)
!4480 = !DILocation(line: 249, column: 32, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4482, file: !3, line: 249, column: 8)
!4482 = distinct !DILexicalBlock(scope: !4475, file: !3, line: 248, column: 2)
!4483 = !DILocation(line: 249, column: 9, scope: !4481)
!4484 = !DILocation(line: 249, column: 8, scope: !4482)
!4485 = !DILocation(line: 250, column: 6, scope: !4481)
!4486 = !DILocation(line: 251, column: 2, scope: !4482)
!4487 = !DILocation(line: 252, column: 16, scope: !4488)
!4488 = distinct !DILexicalBlock(scope: !4475, file: !3, line: 252, column: 16)
!4489 = !DILocation(line: 252, column: 20, scope: !4488)
!4490 = !DILocation(line: 252, column: 23, scope: !4488)
!4491 = !DILocation(line: 252, column: 16, scope: !4475)
!4492 = !DILocation(line: 254, column: 11, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 254, column: 4)
!4494 = distinct !DILexicalBlock(scope: !4488, file: !3, line: 253, column: 2)
!4495 = !DILocation(line: 254, column: 9, scope: !4493)
!4496 = !DILocation(line: 254, column: 16, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 254, column: 4)
!4498 = !DILocation(line: 254, column: 20, scope: !4497)
!4499 = !DILocation(line: 254, column: 18, scope: !4497)
!4500 = !DILocation(line: 254, column: 4, scope: !4493)
!4501 = !DILocation(line: 255, column: 34, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 255, column: 10)
!4503 = !DILocation(line: 255, column: 11, scope: !4502)
!4504 = !DILocation(line: 255, column: 10, scope: !4497)
!4505 = !DILocation(line: 256, column: 8, scope: !4502)
!4506 = !DILocation(line: 255, column: 51, scope: !4502)
!4507 = !DILocation(line: 254, column: 37, scope: !4497)
!4508 = !DILocation(line: 254, column: 4, scope: !4497)
!4509 = distinct !{!4509, !4500, !4510}
!4510 = !DILocation(line: 256, column: 15, scope: !4493)
!4511 = !DILocation(line: 257, column: 2, scope: !4494)
!4512 = !DILocation(line: 258, column: 5, scope: !4476)
!4513 = !DILocation(line: 245, column: 48, scope: !4471)
!4514 = !DILocation(line: 245, column: 3, scope: !4471)
!4515 = distinct !{!4515, !4473, !4516}
!4516 = !DILocation(line: 258, column: 5, scope: !4466)
!4517 = !DILocation(line: 260, column: 3, scope: !4432)
!4518 = !DILocation(line: 261, column: 1, scope: !4432)
!4519 = distinct !DISubprogram(name: "check_dependencies", scope: !3, file: !3, line: 817, type: !4520, scopeLine: 818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4520 = !DISubroutineType(types: !4521)
!4521 = !{!1071, !839, !2044}
!4522 = !DILocalVariable(name: "insn", arg: 1, scope: !4519, file: !3, line: 817, type: !839)
!4523 = !DILocation(line: 817, column: 25, scope: !4519)
!4524 = !DILocalVariable(name: "depends_on", arg: 2, scope: !4519, file: !3, line: 817, type: !2044)
!4525 = !DILocation(line: 817, column: 38, scope: !4519)
!4526 = !DILocalVariable(name: "insn_info", scope: !4519, file: !3, line: 819, type: !4214)
!4527 = !DILocation(line: 819, column: 24, scope: !4519)
!4528 = !DILocation(line: 819, column: 36, scope: !4519)
!4529 = !DILocalVariable(name: "use_rec", scope: !4519, file: !3, line: 820, type: !4219)
!4530 = !DILocation(line: 820, column: 11, scope: !4519)
!4531 = !DILocalVariable(name: "bb", scope: !4519, file: !3, line: 821, type: !1376)
!4532 = !DILocation(line: 821, column: 15, scope: !4519)
!4533 = !DILocation(line: 821, column: 20, scope: !4519)
!4534 = !DILocation(line: 823, column: 18, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 823, column: 3)
!4536 = !DILocation(line: 823, column: 16, scope: !4535)
!4537 = !DILocation(line: 823, column: 8, scope: !4535)
!4538 = !DILocation(line: 823, column: 50, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 823, column: 3)
!4540 = !DILocation(line: 823, column: 49, scope: !4539)
!4541 = !DILocation(line: 823, column: 3, scope: !4535)
!4542 = !DILocation(line: 824, column: 28, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 824, column: 9)
!4544 = !DILocation(line: 824, column: 33, scope: !4543)
!4545 = !DILocation(line: 824, column: 32, scope: !4543)
!4546 = !DILocation(line: 824, column: 42, scope: !4543)
!4547 = !DILocation(line: 824, column: 10, scope: !4543)
!4548 = !DILocation(line: 824, column: 9, scope: !4539)
!4549 = !DILocation(line: 825, column: 7, scope: !4543)
!4550 = !DILocation(line: 824, column: 52, scope: !4543)
!4551 = !DILocation(line: 823, column: 66, scope: !4539)
!4552 = !DILocation(line: 823, column: 3, scope: !4539)
!4553 = distinct !{!4553, !4541, !4554}
!4554 = !DILocation(line: 825, column: 14, scope: !4535)
!4555 = !DILocation(line: 826, column: 18, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 826, column: 3)
!4557 = !DILocation(line: 826, column: 16, scope: !4556)
!4558 = !DILocation(line: 826, column: 8, scope: !4556)
!4559 = !DILocation(line: 826, column: 53, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 826, column: 3)
!4561 = !DILocation(line: 826, column: 52, scope: !4560)
!4562 = !DILocation(line: 826, column: 3, scope: !4556)
!4563 = !DILocation(line: 827, column: 28, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 827, column: 9)
!4565 = !DILocation(line: 827, column: 33, scope: !4564)
!4566 = !DILocation(line: 827, column: 32, scope: !4564)
!4567 = !DILocation(line: 827, column: 42, scope: !4564)
!4568 = !DILocation(line: 827, column: 10, scope: !4564)
!4569 = !DILocation(line: 827, column: 9, scope: !4560)
!4570 = !DILocation(line: 828, column: 7, scope: !4564)
!4571 = !DILocation(line: 827, column: 52, scope: !4564)
!4572 = !DILocation(line: 826, column: 69, scope: !4560)
!4573 = !DILocation(line: 826, column: 3, scope: !4560)
!4574 = distinct !{!4574, !4562, !4575}
!4575 = !DILocation(line: 828, column: 14, scope: !4556)
!4576 = !DILocation(line: 830, column: 3, scope: !4519)
!4577 = !DILocation(line: 831, column: 1, scope: !4519)
!4578 = distinct !DISubprogram(name: "create_new_invariant", scope: !3, file: !3, line: 692, type: !4579, scopeLine: 694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4579 = !DISubroutineType(types: !4580)
!4580 = !{!2075, !2083, !839, !2044, !1071}
!4581 = !DILocalVariable(name: "def", arg: 1, scope: !4578, file: !3, line: 692, type: !2083)
!4582 = !DILocation(line: 692, column: 35, scope: !4578)
!4583 = !DILocalVariable(name: "insn", arg: 2, scope: !4578, file: !3, line: 692, type: !839)
!4584 = !DILocation(line: 692, column: 44, scope: !4578)
!4585 = !DILocalVariable(name: "depends_on", arg: 3, scope: !4578, file: !3, line: 692, type: !2044)
!4586 = !DILocation(line: 692, column: 57, scope: !4578)
!4587 = !DILocalVariable(name: "always_executed", arg: 4, scope: !4578, file: !3, line: 693, type: !1071)
!4588 = !DILocation(line: 693, column: 14, scope: !4578)
!4589 = !DILocalVariable(name: "inv", scope: !4578, file: !3, line: 695, type: !2075)
!4590 = !DILocation(line: 695, column: 21, scope: !4578)
!4591 = !DILocation(line: 695, column: 27, scope: !4578)
!4592 = !DILocalVariable(name: "set", scope: !4578, file: !3, line: 696, type: !839)
!4593 = !DILocation(line: 696, column: 7, scope: !4578)
!4594 = !DILocation(line: 696, column: 13, scope: !4578)
!4595 = !DILocalVariable(name: "speed", scope: !4578, file: !3, line: 697, type: !1071)
!4596 = !DILocation(line: 697, column: 8, scope: !4578)
!4597 = !DILocation(line: 697, column: 41, scope: !4578)
!4598 = !DILocation(line: 697, column: 16, scope: !4578)
!4599 = !DILocation(line: 699, column: 14, scope: !4578)
!4600 = !DILocation(line: 699, column: 3, scope: !4578)
!4601 = !DILocation(line: 699, column: 8, scope: !4578)
!4602 = !DILocation(line: 699, column: 12, scope: !4578)
!4603 = !DILocation(line: 700, column: 26, scope: !4578)
!4604 = !DILocation(line: 700, column: 3, scope: !4578)
!4605 = !DILocation(line: 700, column: 8, scope: !4578)
!4606 = !DILocation(line: 700, column: 24, scope: !4578)
!4607 = !DILocation(line: 701, column: 21, scope: !4578)
!4608 = !DILocation(line: 701, column: 3, scope: !4578)
!4609 = !DILocation(line: 701, column: 8, scope: !4578)
!4610 = !DILocation(line: 701, column: 19, scope: !4578)
!4611 = !DILocation(line: 705, column: 7, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 705, column: 7)
!4613 = !DILocation(line: 705, column: 7, scope: !4578)
!4614 = !DILocation(line: 707, column: 29, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 706, column: 5)
!4616 = !DILocation(line: 707, column: 39, scope: !4615)
!4617 = !DILocation(line: 707, column: 19, scope: !4615)
!4618 = !DILocation(line: 707, column: 7, scope: !4615)
!4619 = !DILocation(line: 707, column: 12, scope: !4615)
!4620 = !DILocation(line: 707, column: 17, scope: !4615)
!4621 = !DILocation(line: 717, column: 42, scope: !4615)
!4622 = !DILocation(line: 717, column: 57, scope: !4615)
!4623 = !DILocation(line: 718, column: 27, scope: !4615)
!4624 = !DILocation(line: 717, column: 28, scope: !4615)
!4625 = !DILocation(line: 718, column: 34, scope: !4615)
!4626 = !DILocation(line: 717, column: 7, scope: !4615)
!4627 = !DILocation(line: 717, column: 12, scope: !4615)
!4628 = !DILocation(line: 717, column: 26, scope: !4615)
!4629 = !DILocation(line: 719, column: 5, scope: !4615)
!4630 = !DILocation(line: 722, column: 29, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 721, column: 5)
!4632 = !DILocation(line: 722, column: 49, scope: !4631)
!4633 = !DILocation(line: 722, column: 19, scope: !4631)
!4634 = !DILocation(line: 722, column: 7, scope: !4631)
!4635 = !DILocation(line: 722, column: 12, scope: !4631)
!4636 = !DILocation(line: 722, column: 17, scope: !4631)
!4637 = !DILocation(line: 723, column: 7, scope: !4631)
!4638 = !DILocation(line: 723, column: 12, scope: !4631)
!4639 = !DILocation(line: 723, column: 26, scope: !4631)
!4640 = !DILocation(line: 726, column: 3, scope: !4578)
!4641 = !DILocation(line: 726, column: 8, scope: !4578)
!4642 = !DILocation(line: 726, column: 13, scope: !4578)
!4643 = !DILocation(line: 727, column: 3, scope: !4578)
!4644 = !DILocation(line: 727, column: 8, scope: !4578)
!4645 = !DILocation(line: 727, column: 12, scope: !4578)
!4646 = !DILocation(line: 728, column: 3, scope: !4578)
!4647 = !DILocation(line: 728, column: 8, scope: !4578)
!4648 = !DILocation(line: 728, column: 19, scope: !4578)
!4649 = !DILocation(line: 729, column: 3, scope: !4578)
!4650 = !DILocation(line: 729, column: 8, scope: !4578)
!4651 = !DILocation(line: 729, column: 14, scope: !4578)
!4652 = !DILocation(line: 730, column: 15, scope: !4578)
!4653 = !DILocation(line: 730, column: 3, scope: !4578)
!4654 = !DILocation(line: 730, column: 8, scope: !4578)
!4655 = !DILocation(line: 730, column: 13, scope: !4578)
!4656 = !DILocation(line: 732, column: 16, scope: !4578)
!4657 = !DILocation(line: 732, column: 3, scope: !4578)
!4658 = !DILocation(line: 732, column: 8, scope: !4578)
!4659 = !DILocation(line: 732, column: 14, scope: !4578)
!4660 = !DILocation(line: 733, column: 3, scope: !4578)
!4661 = !DILocation(line: 733, column: 8, scope: !4578)
!4662 = !DILocation(line: 733, column: 13, scope: !4578)
!4663 = !DILocation(line: 734, column: 7, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 734, column: 7)
!4665 = !DILocation(line: 734, column: 7, scope: !4578)
!4666 = !DILocation(line: 735, column: 18, scope: !4664)
!4667 = !DILocation(line: 735, column: 23, scope: !4664)
!4668 = !DILocation(line: 735, column: 5, scope: !4664)
!4669 = !DILocation(line: 735, column: 10, scope: !4664)
!4670 = !DILocation(line: 735, column: 16, scope: !4664)
!4671 = !DILocation(line: 736, column: 3, scope: !4578)
!4672 = !DILocation(line: 738, column: 7, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 738, column: 7)
!4674 = !DILocation(line: 738, column: 7, scope: !4578)
!4675 = !DILocation(line: 740, column: 16, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 739, column: 5)
!4677 = !DILocation(line: 742, column: 9, scope: !4676)
!4678 = !DILocation(line: 742, column: 26, scope: !4676)
!4679 = !DILocation(line: 742, column: 31, scope: !4676)
!4680 = !DILocation(line: 742, column: 38, scope: !4676)
!4681 = !DILocation(line: 742, column: 43, scope: !4676)
!4682 = !DILocation(line: 740, column: 7, scope: !4676)
!4683 = !DILocation(line: 743, column: 7, scope: !4676)
!4684 = !DILocation(line: 744, column: 5, scope: !4676)
!4685 = !DILocation(line: 746, column: 10, scope: !4578)
!4686 = !DILocation(line: 746, column: 3, scope: !4578)
!4687 = distinct !DISubprogram(name: "check_dependency", scope: !3, file: !3, line: 772, type: !4688, scopeLine: 773, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4688 = !DISubroutineType(types: !4689)
!4689 = !{!1071, !1376, !4196, !2044}
!4690 = !DILocalVariable(name: "bb", arg: 1, scope: !4687, file: !3, line: 772, type: !1376)
!4691 = !DILocation(line: 772, column: 31, scope: !4687)
!4692 = !DILocalVariable(name: "use", arg: 2, scope: !4687, file: !3, line: 772, type: !4196)
!4693 = !DILocation(line: 772, column: 42, scope: !4687)
!4694 = !DILocalVariable(name: "depends_on", arg: 3, scope: !4687, file: !3, line: 772, type: !2044)
!4695 = !DILocation(line: 772, column: 54, scope: !4687)
!4696 = !DILocalVariable(name: "def", scope: !4687, file: !3, line: 774, type: !4196)
!4697 = !DILocation(line: 774, column: 10, scope: !4687)
!4698 = !DILocalVariable(name: "def_bb", scope: !4687, file: !3, line: 775, type: !1376)
!4699 = !DILocation(line: 775, column: 15, scope: !4687)
!4700 = !DILocalVariable(name: "defs", scope: !4687, file: !3, line: 776, type: !4208)
!4701 = !DILocation(line: 776, column: 19, scope: !4687)
!4702 = !DILocalVariable(name: "def_data", scope: !4687, file: !3, line: 777, type: !2083)
!4703 = !DILocation(line: 777, column: 15, scope: !4687)
!4704 = !DILocalVariable(name: "inv", scope: !4687, file: !3, line: 778, type: !2075)
!4705 = !DILocation(line: 778, column: 21, scope: !4687)
!4706 = !DILocation(line: 780, column: 7, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 780, column: 7)
!4708 = !DILocation(line: 780, column: 26, scope: !4707)
!4709 = !DILocation(line: 780, column: 7, scope: !4687)
!4710 = !DILocation(line: 781, column: 5, scope: !4707)
!4711 = !DILocation(line: 783, column: 10, scope: !4687)
!4712 = !DILocation(line: 783, column: 8, scope: !4687)
!4713 = !DILocation(line: 784, column: 8, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 784, column: 7)
!4715 = !DILocation(line: 784, column: 7, scope: !4687)
!4716 = !DILocation(line: 785, column: 5, scope: !4714)
!4717 = !DILocation(line: 787, column: 7, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 787, column: 7)
!4719 = !DILocation(line: 787, column: 13, scope: !4718)
!4720 = !DILocation(line: 787, column: 7, scope: !4687)
!4721 = !DILocation(line: 788, column: 5, scope: !4718)
!4722 = !DILocation(line: 790, column: 9, scope: !4687)
!4723 = !DILocation(line: 790, column: 15, scope: !4687)
!4724 = !DILocation(line: 790, column: 7, scope: !4687)
!4725 = !DILocation(line: 791, column: 3, scope: !4687)
!4726 = !DILocation(line: 792, column: 9, scope: !4687)
!4727 = !DILocation(line: 792, column: 25, scope: !4687)
!4728 = !DILocation(line: 792, column: 7, scope: !4687)
!4729 = !DILocation(line: 793, column: 8, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 793, column: 7)
!4731 = !DILocation(line: 793, column: 7, scope: !4687)
!4732 = !DILocation(line: 794, column: 5, scope: !4730)
!4733 = !DILocation(line: 796, column: 14, scope: !4687)
!4734 = !DILocation(line: 796, column: 19, scope: !4687)
!4735 = !DILocation(line: 796, column: 12, scope: !4687)
!4736 = !DILocation(line: 797, column: 3, scope: !4687)
!4737 = !DILocation(line: 799, column: 12, scope: !4687)
!4738 = !DILocation(line: 799, column: 10, scope: !4687)
!4739 = !DILocation(line: 804, column: 40, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 804, column: 7)
!4741 = !DILocation(line: 804, column: 44, scope: !4740)
!4742 = !DILocation(line: 804, column: 8, scope: !4740)
!4743 = !DILocation(line: 804, column: 7, scope: !4687)
!4744 = !DILocation(line: 805, column: 5, scope: !4740)
!4745 = !DILocation(line: 807, column: 19, scope: !4687)
!4746 = !DILocation(line: 807, column: 31, scope: !4687)
!4747 = !DILocation(line: 807, column: 41, scope: !4687)
!4748 = !DILocation(line: 807, column: 3, scope: !4687)
!4749 = !DILocation(line: 808, column: 3, scope: !4687)
!4750 = !DILocation(line: 809, column: 1, scope: !4687)
!4751 = distinct !DISubprogram(name: "VEC_invariant_p_base_length", scope: !3, file: !3, line: 173, type: !4752, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4752 = !DISubroutineType(types: !4753)
!4753 = !{!7, !4754}
!4754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4755, size: 64)
!4755 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2067)
!4756 = !DILocalVariable(name: "vec_", arg: 1, scope: !4751, file: !3, line: 173, type: !4754)
!4757 = !DILocation(line: 173, column: 1, scope: !4751)
!4758 = distinct !DISubprogram(name: "VEC_invariant_p_heap_safe_push", scope: !3, file: !3, line: 174, type: !4759, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4759 = !DISubroutineType(types: !4760)
!4760 = !{!4761, !4762, !2074}
!4761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!4762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2062, size: 64)
!4763 = !DILocalVariable(name: "vec_", arg: 1, scope: !4758, file: !3, line: 174, type: !4762)
!4764 = !DILocation(line: 174, column: 1, scope: !4758)
!4765 = !DILocalVariable(name: "obj_", arg: 2, scope: !4758, file: !3, line: 174, type: !2074)
!4766 = distinct !DISubprogram(name: "VEC_invariant_p_heap_reserve", scope: !3, file: !3, line: 174, type: !4767, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4767 = !DISubroutineType(types: !4768)
!4768 = !{!796, !4762, !796}
!4769 = !DILocalVariable(name: "vec_", arg: 1, scope: !4766, file: !3, line: 174, type: !4762)
!4770 = !DILocation(line: 174, column: 1, scope: !4766)
!4771 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4766, file: !3, line: 174, type: !796)
!4772 = !DILocalVariable(name: "extend", scope: !4766, file: !3, line: 174, type: !796)
!4773 = !DILocation(line: 174, column: 1, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 174, column: 1)
!4775 = distinct !DISubprogram(name: "VEC_invariant_p_base_quick_push", scope: !3, file: !3, line: 173, type: !4776, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4776 = !DISubroutineType(types: !4777)
!4777 = !{!4761, !4778, !2074}
!4778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2067, size: 64)
!4779 = !DILocalVariable(name: "vec_", arg: 1, scope: !4775, file: !3, line: 173, type: !4778)
!4780 = !DILocation(line: 173, column: 1, scope: !4775)
!4781 = !DILocalVariable(name: "obj_", arg: 2, scope: !4775, file: !3, line: 173, type: !2074)
!4782 = !DILocalVariable(name: "slot_", scope: !4775, file: !3, line: 173, type: !4761)
!4783 = distinct !DISubprogram(name: "VEC_invariant_p_base_space", scope: !3, file: !3, line: 173, type: !4784, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4784 = !DISubroutineType(types: !4785)
!4785 = !{!796, !4778, !796}
!4786 = !DILocalVariable(name: "vec_", arg: 1, scope: !4783, file: !3, line: 173, type: !4778)
!4787 = !DILocation(line: 173, column: 1, scope: !4783)
!4788 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4783, file: !3, line: 173, type: !796)
!4789 = distinct !DISubprogram(name: "invariant_for_use", scope: !3, file: !3, line: 267, type: !4790, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4790 = !DISubroutineType(types: !4791)
!4791 = !{!2075, !4196}
!4792 = !DILocalVariable(name: "use", arg: 1, scope: !4789, file: !3, line: 267, type: !4196)
!4793 = !DILocation(line: 267, column: 27, scope: !4789)
!4794 = !DILocalVariable(name: "defs", scope: !4789, file: !3, line: 269, type: !4208)
!4795 = !DILocation(line: 269, column: 19, scope: !4789)
!4796 = !DILocalVariable(name: "def", scope: !4789, file: !3, line: 270, type: !4196)
!4797 = !DILocation(line: 270, column: 10, scope: !4789)
!4798 = !DILocalVariable(name: "bb", scope: !4789, file: !3, line: 271, type: !1376)
!4799 = !DILocation(line: 271, column: 15, scope: !4789)
!4800 = !DILocation(line: 271, column: 20, scope: !4789)
!4801 = !DILocalVariable(name: "def_bb", scope: !4789, file: !3, line: 271, type: !1376)
!4802 = !DILocation(line: 271, column: 37, scope: !4789)
!4803 = !DILocation(line: 273, column: 7, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 273, column: 7)
!4805 = !DILocation(line: 273, column: 26, scope: !4804)
!4806 = !DILocation(line: 273, column: 7, scope: !4789)
!4807 = !DILocation(line: 274, column: 5, scope: !4804)
!4808 = !DILocation(line: 276, column: 10, scope: !4789)
!4809 = !DILocation(line: 276, column: 8, scope: !4789)
!4810 = !DILocation(line: 277, column: 8, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 277, column: 7)
!4812 = !DILocation(line: 277, column: 13, scope: !4811)
!4813 = !DILocation(line: 277, column: 16, scope: !4811)
!4814 = !DILocation(line: 277, column: 22, scope: !4811)
!4815 = !DILocation(line: 277, column: 7, scope: !4789)
!4816 = !DILocation(line: 278, column: 5, scope: !4811)
!4817 = !DILocation(line: 279, column: 9, scope: !4789)
!4818 = !DILocation(line: 279, column: 15, scope: !4789)
!4819 = !DILocation(line: 279, column: 7, scope: !4789)
!4820 = !DILocation(line: 280, column: 3, scope: !4789)
!4821 = !DILocation(line: 281, column: 8, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 281, column: 7)
!4823 = !DILocation(line: 281, column: 24, scope: !4822)
!4824 = !DILocation(line: 281, column: 7, scope: !4789)
!4825 = !DILocation(line: 282, column: 5, scope: !4822)
!4826 = !DILocation(line: 284, column: 12, scope: !4789)
!4827 = !DILocation(line: 284, column: 10, scope: !4789)
!4828 = !DILocation(line: 285, column: 40, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 285, column: 7)
!4830 = !DILocation(line: 285, column: 44, scope: !4829)
!4831 = !DILocation(line: 285, column: 8, scope: !4829)
!4832 = !DILocation(line: 285, column: 7, scope: !4789)
!4833 = !DILocation(line: 286, column: 5, scope: !4829)
!4834 = !DILocation(line: 287, column: 10, scope: !4789)
!4835 = !DILocation(line: 287, column: 26, scope: !4789)
!4836 = !DILocation(line: 287, column: 3, scope: !4789)
!4837 = !DILocation(line: 288, column: 1, scope: !4789)
!4838 = distinct !DISubprogram(name: "record_use", scope: !3, file: !3, line: 752, type: !4839, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4839 = !DISubroutineType(types: !4840)
!4840 = !{null, !2083, !4196}
!4841 = !DILocalVariable(name: "def", arg: 1, scope: !4838, file: !3, line: 752, type: !2083)
!4842 = !DILocation(line: 752, column: 25, scope: !4838)
!4843 = !DILocalVariable(name: "use", arg: 2, scope: !4838, file: !3, line: 752, type: !4196)
!4844 = !DILocation(line: 752, column: 37, scope: !4838)
!4845 = !DILocalVariable(name: "u", scope: !4838, file: !3, line: 754, type: !2087)
!4846 = !DILocation(line: 754, column: 15, scope: !4838)
!4847 = !DILocation(line: 754, column: 19, scope: !4838)
!4848 = !DILocation(line: 756, column: 12, scope: !4838)
!4849 = !DILocation(line: 756, column: 3, scope: !4838)
!4850 = !DILocation(line: 756, column: 6, scope: !4838)
!4851 = !DILocation(line: 756, column: 10, scope: !4838)
!4852 = !DILocation(line: 757, column: 13, scope: !4838)
!4853 = !DILocation(line: 757, column: 3, scope: !4838)
!4854 = !DILocation(line: 757, column: 6, scope: !4838)
!4855 = !DILocation(line: 757, column: 11, scope: !4838)
!4856 = !DILocation(line: 758, column: 20, scope: !4838)
!4857 = !DILocation(line: 758, column: 38, scope: !4838)
!4858 = !DILocation(line: 759, column: 6, scope: !4838)
!4859 = !DILocation(line: 759, column: 9, scope: !4838)
!4860 = !DILocation(line: 759, column: 27, scope: !4838)
!4861 = !DILocation(line: 758, column: 3, scope: !4838)
!4862 = !DILocation(line: 758, column: 6, scope: !4838)
!4863 = !DILocation(line: 758, column: 17, scope: !4838)
!4864 = !DILocation(line: 760, column: 13, scope: !4838)
!4865 = !DILocation(line: 760, column: 18, scope: !4838)
!4866 = !DILocation(line: 760, column: 3, scope: !4838)
!4867 = !DILocation(line: 760, column: 6, scope: !4838)
!4868 = !DILocation(line: 760, column: 11, scope: !4838)
!4869 = !DILocation(line: 761, column: 15, scope: !4838)
!4870 = !DILocation(line: 761, column: 3, scope: !4838)
!4871 = !DILocation(line: 761, column: 8, scope: !4838)
!4872 = !DILocation(line: 761, column: 13, scope: !4838)
!4873 = !DILocation(line: 762, column: 3, scope: !4838)
!4874 = !DILocation(line: 762, column: 8, scope: !4838)
!4875 = !DILocation(line: 762, column: 14, scope: !4838)
!4876 = !DILocation(line: 763, column: 7, scope: !4877)
!4877 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 763, column: 7)
!4878 = !DILocation(line: 763, column: 10, scope: !4877)
!4879 = !DILocation(line: 763, column: 7, scope: !4838)
!4880 = !DILocation(line: 764, column: 5, scope: !4877)
!4881 = !DILocation(line: 764, column: 10, scope: !4877)
!4882 = !DILocation(line: 764, column: 21, scope: !4877)
!4883 = !DILocation(line: 765, column: 1, scope: !4838)
!4884 = distinct !DISubprogram(name: "hash_invariant_expr", scope: !3, file: !3, line: 438, type: !1296, scopeLine: 439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4885 = !DILocalVariable(name: "e", arg: 1, scope: !4884, file: !3, line: 438, type: !1299)
!4886 = !DILocation(line: 438, column: 34, scope: !4884)
!4887 = !DILocalVariable(name: "entry", scope: !4884, file: !3, line: 440, type: !4888)
!4888 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2106)
!4889 = !DILocation(line: 440, column: 44, scope: !4884)
!4890 = !DILocation(line: 441, column: 43, scope: !4884)
!4891 = !DILocation(line: 441, column: 5, scope: !4884)
!4892 = !DILocation(line: 443, column: 10, scope: !4884)
!4893 = !DILocation(line: 443, column: 17, scope: !4884)
!4894 = !DILocation(line: 443, column: 3, scope: !4884)
!4895 = distinct !DISubprogram(name: "eq_invariant_expr", scope: !3, file: !3, line: 449, type: !1304, scopeLine: 450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4896 = !DILocalVariable(name: "e1", arg: 1, scope: !4895, file: !3, line: 449, type: !1299)
!4897 = !DILocation(line: 449, column: 32, scope: !4895)
!4898 = !DILocalVariable(name: "e2", arg: 2, scope: !4895, file: !3, line: 449, type: !1299)
!4899 = !DILocation(line: 449, column: 48, scope: !4895)
!4900 = !DILocalVariable(name: "entry1", scope: !4895, file: !3, line: 451, type: !4888)
!4901 = !DILocation(line: 451, column: 44, scope: !4895)
!4902 = !DILocation(line: 452, column: 43, scope: !4895)
!4903 = !DILocation(line: 452, column: 5, scope: !4895)
!4904 = !DILocalVariable(name: "entry2", scope: !4895, file: !3, line: 453, type: !4888)
!4905 = !DILocation(line: 453, column: 44, scope: !4895)
!4906 = !DILocation(line: 454, column: 43, scope: !4895)
!4907 = !DILocation(line: 454, column: 5, scope: !4895)
!4908 = !DILocation(line: 456, column: 7, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 456, column: 7)
!4910 = !DILocation(line: 456, column: 15, scope: !4909)
!4911 = !DILocation(line: 456, column: 23, scope: !4909)
!4912 = !DILocation(line: 456, column: 31, scope: !4909)
!4913 = !DILocation(line: 456, column: 20, scope: !4909)
!4914 = !DILocation(line: 456, column: 7, scope: !4895)
!4915 = !DILocation(line: 457, column: 5, scope: !4909)
!4916 = !DILocation(line: 459, column: 34, scope: !4895)
!4917 = !DILocation(line: 459, column: 42, scope: !4895)
!4918 = !DILocation(line: 459, column: 47, scope: !4895)
!4919 = !DILocation(line: 459, column: 53, scope: !4895)
!4920 = !DILocation(line: 459, column: 61, scope: !4895)
!4921 = !DILocation(line: 460, column: 6, scope: !4895)
!4922 = !DILocation(line: 460, column: 14, scope: !4895)
!4923 = !DILocation(line: 460, column: 19, scope: !4895)
!4924 = !DILocation(line: 460, column: 25, scope: !4895)
!4925 = !DILocation(line: 460, column: 33, scope: !4895)
!4926 = !DILocation(line: 459, column: 10, scope: !4895)
!4927 = !DILocation(line: 459, column: 3, scope: !4895)
!4928 = !DILocation(line: 461, column: 1, scope: !4895)
!4929 = distinct !DISubprogram(name: "VEC_invariant_p_base_iterate", scope: !3, file: !3, line: 173, type: !4930, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4930 = !DISubroutineType(types: !4931)
!4931 = !{!796, !4754, !7, !4761}
!4932 = !DILocalVariable(name: "vec_", arg: 1, scope: !4929, file: !3, line: 173, type: !4754)
!4933 = !DILocation(line: 173, column: 1, scope: !4929)
!4934 = !DILocalVariable(name: "ix_", arg: 2, scope: !4929, file: !3, line: 173, type: !7)
!4935 = !DILocalVariable(name: "ptr", arg: 3, scope: !4929, file: !3, line: 173, type: !4761)
!4936 = !DILocation(line: 173, column: 1, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 173, column: 1)
!4938 = !DILocation(line: 173, column: 1, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 173, column: 1)
!4940 = !DILocation(line: 173, column: 1, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 173, column: 1)
!4942 = distinct !DISubprogram(name: "find_identical_invariants", scope: !3, file: !3, line: 499, type: !4943, scopeLine: 500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!4943 = !DISubroutineType(types: !4944)
!4944 = !{null, !1289, !2075}
!4945 = !DILocalVariable(name: "eq", arg: 1, scope: !4942, file: !3, line: 499, type: !1289)
!4946 = !DILocation(line: 499, column: 35, scope: !4942)
!4947 = !DILocalVariable(name: "inv", arg: 2, scope: !4942, file: !3, line: 499, type: !2075)
!4948 = !DILocation(line: 499, column: 57, scope: !4942)
!4949 = !DILocalVariable(name: "depno", scope: !4942, file: !3, line: 501, type: !7)
!4950 = !DILocation(line: 501, column: 12, scope: !4942)
!4951 = !DILocalVariable(name: "bi", scope: !4942, file: !3, line: 502, type: !2205)
!4952 = !DILocation(line: 502, column: 19, scope: !4942)
!4953 = !DILocalVariable(name: "dep", scope: !4942, file: !3, line: 503, type: !2075)
!4954 = !DILocation(line: 503, column: 21, scope: !4942)
!4955 = !DILocalVariable(name: "expr", scope: !4942, file: !3, line: 504, type: !839)
!4956 = !DILocation(line: 504, column: 7, scope: !4942)
!4957 = !DILocalVariable(name: "set", scope: !4942, file: !3, line: 504, type: !839)
!4958 = !DILocation(line: 504, column: 13, scope: !4942)
!4959 = !DILocalVariable(name: "mode", scope: !4942, file: !3, line: 505, type: !5)
!4960 = !DILocation(line: 505, column: 21, scope: !4942)
!4961 = !DILocation(line: 507, column: 7, scope: !4962)
!4962 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 507, column: 7)
!4963 = !DILocation(line: 507, column: 12, scope: !4962)
!4964 = !DILocation(line: 507, column: 17, scope: !4962)
!4965 = !DILocation(line: 507, column: 7, scope: !4942)
!4966 = !DILocation(line: 508, column: 5, scope: !4962)
!4967 = !DILocation(line: 510, column: 3, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 510, column: 3)
!4969 = !DILocation(line: 510, column: 3, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 510, column: 3)
!4971 = !DILocation(line: 512, column: 13, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4970, file: !3, line: 511, column: 5)
!4973 = !DILocation(line: 512, column: 11, scope: !4972)
!4974 = !DILocation(line: 513, column: 34, scope: !4972)
!4975 = !DILocation(line: 513, column: 38, scope: !4972)
!4976 = !DILocation(line: 513, column: 7, scope: !4972)
!4977 = !DILocation(line: 514, column: 5, scope: !4972)
!4978 = distinct !{!4978, !4967, !4979}
!4979 = !DILocation(line: 514, column: 5, scope: !4968)
!4980 = !DILocation(line: 516, column: 9, scope: !4942)
!4981 = !DILocation(line: 516, column: 7, scope: !4942)
!4982 = !DILocation(line: 517, column: 10, scope: !4942)
!4983 = !DILocation(line: 517, column: 8, scope: !4942)
!4984 = !DILocation(line: 518, column: 10, scope: !4942)
!4985 = !DILocation(line: 518, column: 8, scope: !4942)
!4986 = !DILocation(line: 519, column: 7, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 519, column: 7)
!4988 = !DILocation(line: 519, column: 12, scope: !4987)
!4989 = !DILocation(line: 519, column: 7, scope: !4942)
!4990 = !DILocation(line: 520, column: 12, scope: !4987)
!4991 = !DILocation(line: 520, column: 10, scope: !4987)
!4992 = !DILocation(line: 520, column: 5, scope: !4987)
!4993 = !DILocation(line: 521, column: 35, scope: !4942)
!4994 = !DILocation(line: 521, column: 39, scope: !4942)
!4995 = !DILocation(line: 521, column: 45, scope: !4942)
!4996 = !DILocation(line: 521, column: 51, scope: !4942)
!4997 = !DILocation(line: 521, column: 15, scope: !4942)
!4998 = !DILocation(line: 521, column: 57, scope: !4942)
!4999 = !DILocation(line: 521, column: 3, scope: !4942)
!5000 = !DILocation(line: 521, column: 8, scope: !4942)
!5001 = !DILocation(line: 521, column: 13, scope: !4942)
!5002 = !DILocation(line: 523, column: 7, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 523, column: 7)
!5004 = !DILocation(line: 523, column: 17, scope: !5003)
!5005 = !DILocation(line: 523, column: 20, scope: !5003)
!5006 = !DILocation(line: 523, column: 25, scope: !5003)
!5007 = !DILocation(line: 523, column: 33, scope: !5003)
!5008 = !DILocation(line: 523, column: 38, scope: !5003)
!5009 = !DILocation(line: 523, column: 30, scope: !5003)
!5010 = !DILocation(line: 523, column: 7, scope: !4942)
!5011 = !DILocation(line: 524, column: 14, scope: !5003)
!5012 = !DILocation(line: 526, column: 7, scope: !5003)
!5013 = !DILocation(line: 526, column: 12, scope: !5003)
!5014 = !DILocation(line: 526, column: 19, scope: !5003)
!5015 = !DILocation(line: 526, column: 24, scope: !5003)
!5016 = !DILocation(line: 524, column: 5, scope: !5003)
!5017 = !DILocation(line: 527, column: 1, scope: !4942)
!5018 = distinct !DISubprogram(name: "invariant_expr_equal_p", scope: !3, file: !3, line: 349, type: !5019, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5019 = !DISubroutineType(types: !5020)
!5020 = !{!1071, !839, !839, !839, !839}
!5021 = !DILocalVariable(name: "insn1", arg: 1, scope: !5018, file: !3, line: 349, type: !839)
!5022 = !DILocation(line: 349, column: 29, scope: !5018)
!5023 = !DILocalVariable(name: "e1", arg: 2, scope: !5018, file: !3, line: 349, type: !839)
!5024 = !DILocation(line: 349, column: 40, scope: !5018)
!5025 = !DILocalVariable(name: "insn2", arg: 3, scope: !5018, file: !3, line: 349, type: !839)
!5026 = !DILocation(line: 349, column: 48, scope: !5018)
!5027 = !DILocalVariable(name: "e2", arg: 4, scope: !5018, file: !3, line: 349, type: !839)
!5028 = !DILocation(line: 349, column: 59, scope: !5018)
!5029 = !DILocalVariable(name: "code", scope: !5018, file: !3, line: 351, type: !535)
!5030 = !DILocation(line: 351, column: 17, scope: !5018)
!5031 = !DILocation(line: 351, column: 24, scope: !5018)
!5032 = !DILocalVariable(name: "i", scope: !5018, file: !3, line: 352, type: !796)
!5033 = !DILocation(line: 352, column: 7, scope: !5018)
!5034 = !DILocalVariable(name: "j", scope: !5018, file: !3, line: 352, type: !796)
!5035 = !DILocation(line: 352, column: 10, scope: !5018)
!5036 = !DILocalVariable(name: "fmt", scope: !5018, file: !3, line: 353, type: !864)
!5037 = !DILocation(line: 353, column: 15, scope: !5018)
!5038 = !DILocalVariable(name: "use1", scope: !5018, file: !3, line: 354, type: !4196)
!5039 = !DILocation(line: 354, column: 10, scope: !5018)
!5040 = !DILocalVariable(name: "use2", scope: !5018, file: !3, line: 354, type: !4196)
!5041 = !DILocation(line: 354, column: 16, scope: !5018)
!5042 = !DILocalVariable(name: "inv1", scope: !5018, file: !3, line: 355, type: !2075)
!5043 = !DILocation(line: 355, column: 21, scope: !5018)
!5044 = !DILocalVariable(name: "inv2", scope: !5018, file: !3, line: 355, type: !2075)
!5045 = !DILocation(line: 355, column: 35, scope: !5018)
!5046 = !DILocalVariable(name: "sub1", scope: !5018, file: !3, line: 356, type: !839)
!5047 = !DILocation(line: 356, column: 7, scope: !5018)
!5048 = !DILocalVariable(name: "sub2", scope: !5018, file: !3, line: 356, type: !839)
!5049 = !DILocation(line: 356, column: 13, scope: !5018)
!5050 = !DILocation(line: 361, column: 7, scope: !5051)
!5051 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 361, column: 7)
!5052 = !DILocation(line: 361, column: 15, scope: !5051)
!5053 = !DILocation(line: 361, column: 12, scope: !5051)
!5054 = !DILocation(line: 361, column: 29, scope: !5051)
!5055 = !DILocation(line: 361, column: 32, scope: !5051)
!5056 = !DILocation(line: 361, column: 49, scope: !5051)
!5057 = !DILocation(line: 361, column: 46, scope: !5051)
!5058 = !DILocation(line: 361, column: 7, scope: !5018)
!5059 = !DILocation(line: 362, column: 5, scope: !5051)
!5060 = !DILocation(line: 364, column: 11, scope: !5018)
!5061 = !DILocation(line: 364, column: 3, scope: !5018)
!5062 = !DILocation(line: 372, column: 27, scope: !5063)
!5063 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 365, column: 5)
!5064 = !DILocation(line: 372, column: 31, scope: !5063)
!5065 = !DILocation(line: 372, column: 14, scope: !5063)
!5066 = !DILocation(line: 372, column: 7, scope: !5063)
!5067 = !DILocation(line: 375, column: 27, scope: !5063)
!5068 = !DILocation(line: 375, column: 34, scope: !5063)
!5069 = !DILocation(line: 375, column: 14, scope: !5063)
!5070 = !DILocation(line: 375, column: 12, scope: !5063)
!5071 = !DILocation(line: 376, column: 27, scope: !5063)
!5072 = !DILocation(line: 376, column: 34, scope: !5063)
!5073 = !DILocation(line: 376, column: 14, scope: !5063)
!5074 = !DILocation(line: 376, column: 12, scope: !5063)
!5075 = !DILocation(line: 377, column: 11, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 377, column: 11)
!5077 = !DILocation(line: 377, column: 11, scope: !5063)
!5078 = !DILocation(line: 378, column: 28, scope: !5076)
!5079 = !DILocation(line: 378, column: 9, scope: !5076)
!5080 = !DILocation(line: 378, column: 7, scope: !5076)
!5081 = !DILocation(line: 378, column: 2, scope: !5076)
!5082 = !DILocation(line: 379, column: 11, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 379, column: 11)
!5084 = !DILocation(line: 379, column: 11, scope: !5063)
!5085 = !DILocation(line: 380, column: 28, scope: !5083)
!5086 = !DILocation(line: 380, column: 9, scope: !5083)
!5087 = !DILocation(line: 380, column: 7, scope: !5083)
!5088 = !DILocation(line: 380, column: 2, scope: !5083)
!5089 = !DILocation(line: 382, column: 12, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 382, column: 11)
!5091 = !DILocation(line: 382, column: 17, scope: !5090)
!5092 = !DILocation(line: 382, column: 21, scope: !5090)
!5093 = !DILocation(line: 382, column: 11, scope: !5063)
!5094 = !DILocation(line: 383, column: 22, scope: !5090)
!5095 = !DILocation(line: 383, column: 26, scope: !5090)
!5096 = !DILocation(line: 383, column: 9, scope: !5090)
!5097 = !DILocation(line: 383, column: 2, scope: !5090)
!5098 = !DILocation(line: 385, column: 12, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 385, column: 11)
!5100 = !DILocation(line: 385, column: 17, scope: !5099)
!5101 = !DILocation(line: 385, column: 21, scope: !5099)
!5102 = !DILocation(line: 385, column: 11, scope: !5063)
!5103 = !DILocation(line: 386, column: 2, scope: !5099)
!5104 = !DILocation(line: 388, column: 7, scope: !5063)
!5105 = !DILocation(line: 389, column: 7, scope: !5063)
!5106 = !DILocation(line: 390, column: 14, scope: !5063)
!5107 = !DILocation(line: 390, column: 20, scope: !5063)
!5108 = !DILocation(line: 390, column: 28, scope: !5063)
!5109 = !DILocation(line: 390, column: 34, scope: !5063)
!5110 = !DILocation(line: 390, column: 25, scope: !5063)
!5111 = !DILocation(line: 390, column: 7, scope: !5063)
!5112 = !DILocation(line: 393, column: 7, scope: !5063)
!5113 = !DILocation(line: 396, column: 9, scope: !5018)
!5114 = !DILocation(line: 396, column: 7, scope: !5018)
!5115 = !DILocation(line: 397, column: 12, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 397, column: 3)
!5117 = !DILocation(line: 397, column: 34, scope: !5116)
!5118 = !DILocation(line: 397, column: 10, scope: !5116)
!5119 = !DILocation(line: 397, column: 8, scope: !5116)
!5120 = !DILocation(line: 397, column: 39, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 397, column: 3)
!5122 = !DILocation(line: 397, column: 41, scope: !5121)
!5123 = !DILocation(line: 397, column: 3, scope: !5116)
!5124 = !DILocation(line: 399, column: 11, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 399, column: 11)
!5126 = distinct !DILexicalBlock(scope: !5121, file: !3, line: 398, column: 5)
!5127 = !DILocation(line: 399, column: 15, scope: !5125)
!5128 = !DILocation(line: 399, column: 18, scope: !5125)
!5129 = !DILocation(line: 399, column: 11, scope: !5126)
!5130 = !DILocation(line: 401, column: 11, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5125, file: !3, line: 400, column: 2)
!5132 = !DILocation(line: 401, column: 9, scope: !5131)
!5133 = !DILocation(line: 402, column: 11, scope: !5131)
!5134 = !DILocation(line: 402, column: 9, scope: !5131)
!5135 = !DILocation(line: 404, column: 33, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 404, column: 8)
!5137 = !DILocation(line: 404, column: 40, scope: !5136)
!5138 = !DILocation(line: 404, column: 46, scope: !5136)
!5139 = !DILocation(line: 404, column: 53, scope: !5136)
!5140 = !DILocation(line: 404, column: 9, scope: !5136)
!5141 = !DILocation(line: 404, column: 8, scope: !5131)
!5142 = !DILocation(line: 405, column: 6, scope: !5136)
!5143 = !DILocation(line: 406, column: 2, scope: !5131)
!5144 = !DILocation(line: 408, column: 16, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5125, file: !3, line: 408, column: 16)
!5146 = !DILocation(line: 408, column: 20, scope: !5145)
!5147 = !DILocation(line: 408, column: 23, scope: !5145)
!5148 = !DILocation(line: 408, column: 16, scope: !5125)
!5149 = !DILocation(line: 410, column: 8, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 410, column: 8)
!5151 = distinct !DILexicalBlock(scope: !5145, file: !3, line: 409, column: 2)
!5152 = !DILocation(line: 410, column: 27, scope: !5150)
!5153 = !DILocation(line: 410, column: 24, scope: !5150)
!5154 = !DILocation(line: 410, column: 8, scope: !5151)
!5155 = !DILocation(line: 411, column: 6, scope: !5150)
!5156 = !DILocation(line: 413, column: 11, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 413, column: 4)
!5158 = !DILocation(line: 413, column: 9, scope: !5157)
!5159 = !DILocation(line: 413, column: 16, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 413, column: 4)
!5161 = !DILocation(line: 413, column: 20, scope: !5160)
!5162 = !DILocation(line: 413, column: 18, scope: !5160)
!5163 = !DILocation(line: 413, column: 4, scope: !5157)
!5164 = !DILocation(line: 415, column: 15, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 414, column: 6)
!5166 = !DILocation(line: 415, column: 13, scope: !5165)
!5167 = !DILocation(line: 416, column: 15, scope: !5165)
!5168 = !DILocation(line: 416, column: 13, scope: !5165)
!5169 = !DILocation(line: 418, column: 37, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5165, file: !3, line: 418, column: 12)
!5171 = !DILocation(line: 418, column: 44, scope: !5170)
!5172 = !DILocation(line: 418, column: 50, scope: !5170)
!5173 = !DILocation(line: 418, column: 57, scope: !5170)
!5174 = !DILocation(line: 418, column: 13, scope: !5170)
!5175 = !DILocation(line: 418, column: 12, scope: !5165)
!5176 = !DILocation(line: 419, column: 3, scope: !5170)
!5177 = !DILocation(line: 420, column: 6, scope: !5165)
!5178 = !DILocation(line: 413, column: 38, scope: !5160)
!5179 = !DILocation(line: 413, column: 4, scope: !5160)
!5180 = distinct !{!5180, !5163, !5181}
!5181 = !DILocation(line: 420, column: 6, scope: !5157)
!5182 = !DILocation(line: 421, column: 2, scope: !5151)
!5183 = !DILocation(line: 422, column: 16, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5145, file: !3, line: 422, column: 16)
!5185 = !DILocation(line: 422, column: 20, scope: !5184)
!5186 = !DILocation(line: 422, column: 23, scope: !5184)
!5187 = !DILocation(line: 422, column: 30, scope: !5184)
!5188 = !DILocation(line: 422, column: 33, scope: !5184)
!5189 = !DILocation(line: 422, column: 37, scope: !5184)
!5190 = !DILocation(line: 422, column: 40, scope: !5184)
!5191 = !DILocation(line: 422, column: 16, scope: !5145)
!5192 = !DILocation(line: 424, column: 8, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5194, file: !3, line: 424, column: 8)
!5194 = distinct !DILexicalBlock(scope: !5184, file: !3, line: 423, column: 2)
!5195 = !DILocation(line: 424, column: 24, scope: !5193)
!5196 = !DILocation(line: 424, column: 21, scope: !5193)
!5197 = !DILocation(line: 424, column: 8, scope: !5194)
!5198 = !DILocation(line: 425, column: 6, scope: !5193)
!5199 = !DILocation(line: 426, column: 2, scope: !5194)
!5200 = !DILocation(line: 429, column: 2, scope: !5184)
!5201 = !DILocation(line: 430, column: 5, scope: !5126)
!5202 = !DILocation(line: 397, column: 48, scope: !5121)
!5203 = !DILocation(line: 397, column: 3, scope: !5121)
!5204 = distinct !{!5204, !5123, !5205}
!5205 = !DILocation(line: 430, column: 5, scope: !5116)
!5206 = !DILocation(line: 432, column: 3, scope: !5018)
!5207 = !DILocation(line: 433, column: 1, scope: !5018)
!5208 = distinct !DISubprogram(name: "VEC_invariant_p_base_index", scope: !3, file: !3, line: 173, type: !5209, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5209 = !DISubroutineType(types: !5210)
!5210 = !{!2074, !4754, !7}
!5211 = !DILocalVariable(name: "vec_", arg: 1, scope: !5208, file: !3, line: 173, type: !4754)
!5212 = !DILocation(line: 173, column: 1, scope: !5208)
!5213 = !DILocalVariable(name: "ix_", arg: 2, scope: !5208, file: !3, line: 173, type: !7)
!5214 = !DILocation(line: 0, scope: !5208)
!5215 = distinct !DISubprogram(name: "find_or_insert_inv", scope: !3, file: !3, line: 468, type: !5216, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5216 = !DISubroutineType(types: !5217)
!5217 = !{!2075, !1289, !839, !5, !2075}
!5218 = !DILocalVariable(name: "eq", arg: 1, scope: !5215, file: !3, line: 468, type: !1289)
!5219 = !DILocation(line: 468, column: 28, scope: !5215)
!5220 = !DILocalVariable(name: "expr", arg: 2, scope: !5215, file: !3, line: 468, type: !839)
!5221 = !DILocation(line: 468, column: 36, scope: !5215)
!5222 = !DILocalVariable(name: "mode", arg: 3, scope: !5215, file: !3, line: 468, type: !5)
!5223 = !DILocation(line: 468, column: 60, scope: !5215)
!5224 = !DILocalVariable(name: "inv", arg: 4, scope: !5215, file: !3, line: 469, type: !2075)
!5225 = !DILocation(line: 469, column: 25, scope: !5215)
!5226 = !DILocalVariable(name: "hash", scope: !5215, file: !3, line: 471, type: !1298)
!5227 = !DILocation(line: 471, column: 13, scope: !5215)
!5228 = !DILocation(line: 471, column: 43, scope: !5215)
!5229 = !DILocation(line: 471, column: 48, scope: !5215)
!5230 = !DILocation(line: 471, column: 54, scope: !5215)
!5231 = !DILocation(line: 471, column: 20, scope: !5215)
!5232 = !DILocalVariable(name: "entry", scope: !5215, file: !3, line: 472, type: !2114)
!5233 = !DILocation(line: 472, column: 32, scope: !5215)
!5234 = !DILocalVariable(name: "pentry", scope: !5215, file: !3, line: 473, type: !2108)
!5235 = !DILocation(line: 473, column: 31, scope: !5215)
!5236 = !DILocalVariable(name: "slot", scope: !5215, file: !3, line: 474, type: !1312)
!5237 = !DILocation(line: 474, column: 8, scope: !5215)
!5238 = !DILocation(line: 476, column: 17, scope: !5215)
!5239 = !DILocation(line: 476, column: 10, scope: !5215)
!5240 = !DILocation(line: 476, column: 15, scope: !5215)
!5241 = !DILocation(line: 477, column: 16, scope: !5215)
!5242 = !DILocation(line: 477, column: 10, scope: !5215)
!5243 = !DILocation(line: 477, column: 14, scope: !5215)
!5244 = !DILocation(line: 478, column: 17, scope: !5215)
!5245 = !DILocation(line: 478, column: 10, scope: !5215)
!5246 = !DILocation(line: 478, column: 15, scope: !5215)
!5247 = !DILocation(line: 479, column: 36, scope: !5215)
!5248 = !DILocation(line: 479, column: 40, scope: !5215)
!5249 = !DILocation(line: 479, column: 49, scope: !5215)
!5250 = !DILocation(line: 479, column: 10, scope: !5215)
!5251 = !DILocation(line: 479, column: 8, scope: !5215)
!5252 = !DILocation(line: 480, column: 44, scope: !5215)
!5253 = !DILocation(line: 480, column: 43, scope: !5215)
!5254 = !DILocation(line: 480, column: 11, scope: !5215)
!5255 = !DILocation(line: 480, column: 9, scope: !5215)
!5256 = !DILocation(line: 482, column: 7, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5215, file: !3, line: 482, column: 7)
!5258 = !DILocation(line: 482, column: 7, scope: !5215)
!5259 = !DILocation(line: 483, column: 12, scope: !5257)
!5260 = !DILocation(line: 483, column: 19, scope: !5257)
!5261 = !DILocation(line: 483, column: 5, scope: !5257)
!5262 = !DILocation(line: 485, column: 11, scope: !5215)
!5263 = !DILocation(line: 485, column: 9, scope: !5215)
!5264 = !DILocation(line: 486, column: 16, scope: !5215)
!5265 = !DILocation(line: 486, column: 3, scope: !5215)
!5266 = !DILocation(line: 486, column: 10, scope: !5215)
!5267 = !DILocation(line: 486, column: 14, scope: !5215)
!5268 = !DILocation(line: 487, column: 17, scope: !5215)
!5269 = !DILocation(line: 487, column: 3, scope: !5215)
!5270 = !DILocation(line: 487, column: 10, scope: !5215)
!5271 = !DILocation(line: 487, column: 15, scope: !5215)
!5272 = !DILocation(line: 488, column: 17, scope: !5215)
!5273 = !DILocation(line: 488, column: 3, scope: !5215)
!5274 = !DILocation(line: 488, column: 10, scope: !5215)
!5275 = !DILocation(line: 488, column: 15, scope: !5215)
!5276 = !DILocation(line: 489, column: 17, scope: !5215)
!5277 = !DILocation(line: 489, column: 3, scope: !5215)
!5278 = !DILocation(line: 489, column: 10, scope: !5215)
!5279 = !DILocation(line: 489, column: 15, scope: !5215)
!5280 = !DILocation(line: 490, column: 11, scope: !5215)
!5281 = !DILocation(line: 490, column: 4, scope: !5215)
!5282 = !DILocation(line: 490, column: 9, scope: !5215)
!5283 = !DILocation(line: 492, column: 10, scope: !5215)
!5284 = !DILocation(line: 492, column: 3, scope: !5215)
!5285 = !DILocation(line: 493, column: 1, scope: !5215)
!5286 = distinct !DISubprogram(name: "hash_invariant_expr_1", scope: !3, file: !3, line: 293, type: !5287, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5287 = !DISubroutineType(types: !5288)
!5288 = !{!1298, !839, !839}
!5289 = !DILocalVariable(name: "insn", arg: 1, scope: !5286, file: !3, line: 293, type: !839)
!5290 = !DILocation(line: 293, column: 28, scope: !5286)
!5291 = !DILocalVariable(name: "x", arg: 2, scope: !5286, file: !3, line: 293, type: !839)
!5292 = !DILocation(line: 293, column: 38, scope: !5286)
!5293 = !DILocalVariable(name: "code", scope: !5286, file: !3, line: 295, type: !535)
!5294 = !DILocation(line: 295, column: 17, scope: !5286)
!5295 = !DILocation(line: 295, column: 24, scope: !5286)
!5296 = !DILocalVariable(name: "i", scope: !5286, file: !3, line: 296, type: !796)
!5297 = !DILocation(line: 296, column: 7, scope: !5286)
!5298 = !DILocalVariable(name: "j", scope: !5286, file: !3, line: 296, type: !796)
!5299 = !DILocation(line: 296, column: 10, scope: !5286)
!5300 = !DILocalVariable(name: "fmt", scope: !5286, file: !3, line: 297, type: !864)
!5301 = !DILocation(line: 297, column: 15, scope: !5286)
!5302 = !DILocalVariable(name: "val", scope: !5286, file: !3, line: 298, type: !1298)
!5303 = !DILocation(line: 298, column: 13, scope: !5286)
!5304 = !DILocation(line: 298, column: 19, scope: !5286)
!5305 = !DILocalVariable(name: "do_not_record_p", scope: !5286, file: !3, line: 299, type: !796)
!5306 = !DILocation(line: 299, column: 7, scope: !5286)
!5307 = !DILocalVariable(name: "use", scope: !5286, file: !3, line: 300, type: !4196)
!5308 = !DILocation(line: 300, column: 10, scope: !5286)
!5309 = !DILocalVariable(name: "inv", scope: !5286, file: !3, line: 301, type: !2075)
!5310 = !DILocation(line: 301, column: 21, scope: !5286)
!5311 = !DILocation(line: 303, column: 11, scope: !5286)
!5312 = !DILocation(line: 303, column: 3, scope: !5286)
!5313 = !DILocation(line: 311, column: 24, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 304, column: 5)
!5315 = !DILocation(line: 311, column: 27, scope: !5314)
!5316 = !DILocation(line: 311, column: 14, scope: !5314)
!5317 = !DILocation(line: 311, column: 7, scope: !5314)
!5318 = !DILocation(line: 314, column: 26, scope: !5314)
!5319 = !DILocation(line: 314, column: 32, scope: !5314)
!5320 = !DILocation(line: 314, column: 13, scope: !5314)
!5321 = !DILocation(line: 314, column: 11, scope: !5314)
!5322 = !DILocation(line: 315, column: 12, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 315, column: 11)
!5324 = !DILocation(line: 315, column: 11, scope: !5314)
!5325 = !DILocation(line: 316, column: 19, scope: !5323)
!5326 = !DILocation(line: 316, column: 22, scope: !5323)
!5327 = !DILocation(line: 316, column: 9, scope: !5323)
!5328 = !DILocation(line: 316, column: 2, scope: !5323)
!5329 = !DILocation(line: 317, column: 32, scope: !5314)
!5330 = !DILocation(line: 317, column: 13, scope: !5314)
!5331 = !DILocation(line: 317, column: 11, scope: !5314)
!5332 = !DILocation(line: 318, column: 12, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 318, column: 11)
!5334 = !DILocation(line: 318, column: 11, scope: !5314)
!5335 = !DILocation(line: 319, column: 19, scope: !5333)
!5336 = !DILocation(line: 319, column: 22, scope: !5333)
!5337 = !DILocation(line: 319, column: 9, scope: !5333)
!5338 = !DILocation(line: 319, column: 2, scope: !5333)
!5339 = !DILocation(line: 321, column: 7, scope: !5314)
!5340 = !DILocation(line: 322, column: 14, scope: !5314)
!5341 = !DILocation(line: 322, column: 19, scope: !5314)
!5342 = !DILocation(line: 322, column: 7, scope: !5314)
!5343 = !DILocation(line: 325, column: 7, scope: !5314)
!5344 = !DILocation(line: 328, column: 9, scope: !5286)
!5345 = !DILocation(line: 328, column: 7, scope: !5286)
!5346 = !DILocation(line: 329, column: 12, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 329, column: 3)
!5348 = !DILocation(line: 329, column: 34, scope: !5347)
!5349 = !DILocation(line: 329, column: 10, scope: !5347)
!5350 = !DILocation(line: 329, column: 8, scope: !5347)
!5351 = !DILocation(line: 329, column: 39, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5347, file: !3, line: 329, column: 3)
!5353 = !DILocation(line: 329, column: 41, scope: !5352)
!5354 = !DILocation(line: 329, column: 3, scope: !5347)
!5355 = !DILocation(line: 331, column: 11, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5357, file: !3, line: 331, column: 11)
!5357 = distinct !DILexicalBlock(scope: !5352, file: !3, line: 330, column: 5)
!5358 = !DILocation(line: 331, column: 15, scope: !5356)
!5359 = !DILocation(line: 331, column: 18, scope: !5356)
!5360 = !DILocation(line: 331, column: 11, scope: !5357)
!5361 = !DILocation(line: 332, column: 32, scope: !5356)
!5362 = !DILocation(line: 332, column: 38, scope: !5356)
!5363 = !DILocation(line: 332, column: 9, scope: !5356)
!5364 = !DILocation(line: 332, column: 6, scope: !5356)
!5365 = !DILocation(line: 332, column: 2, scope: !5356)
!5366 = !DILocation(line: 333, column: 16, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 333, column: 16)
!5368 = !DILocation(line: 333, column: 20, scope: !5367)
!5369 = !DILocation(line: 333, column: 23, scope: !5367)
!5370 = !DILocation(line: 333, column: 16, scope: !5356)
!5371 = !DILocation(line: 335, column: 11, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 335, column: 4)
!5373 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 334, column: 2)
!5374 = !DILocation(line: 335, column: 9, scope: !5372)
!5375 = !DILocation(line: 335, column: 16, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 335, column: 4)
!5377 = !DILocation(line: 335, column: 20, scope: !5376)
!5378 = !DILocation(line: 335, column: 18, scope: !5376)
!5379 = !DILocation(line: 335, column: 4, scope: !5372)
!5380 = !DILocation(line: 336, column: 36, scope: !5376)
!5381 = !DILocation(line: 336, column: 42, scope: !5376)
!5382 = !DILocation(line: 336, column: 13, scope: !5376)
!5383 = !DILocation(line: 336, column: 10, scope: !5376)
!5384 = !DILocation(line: 336, column: 6, scope: !5376)
!5385 = !DILocation(line: 335, column: 37, scope: !5376)
!5386 = !DILocation(line: 335, column: 4, scope: !5376)
!5387 = distinct !{!5387, !5379, !5388}
!5388 = !DILocation(line: 336, column: 59, scope: !5372)
!5389 = !DILocation(line: 337, column: 2, scope: !5373)
!5390 = !DILocation(line: 338, column: 16, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 338, column: 16)
!5392 = !DILocation(line: 338, column: 20, scope: !5391)
!5393 = !DILocation(line: 338, column: 23, scope: !5391)
!5394 = !DILocation(line: 338, column: 30, scope: !5391)
!5395 = !DILocation(line: 338, column: 33, scope: !5391)
!5396 = !DILocation(line: 338, column: 37, scope: !5391)
!5397 = !DILocation(line: 338, column: 40, scope: !5391)
!5398 = !DILocation(line: 338, column: 16, scope: !5367)
!5399 = !DILocation(line: 339, column: 9, scope: !5391)
!5400 = !DILocation(line: 339, column: 6, scope: !5391)
!5401 = !DILocation(line: 339, column: 2, scope: !5391)
!5402 = !DILocation(line: 340, column: 5, scope: !5357)
!5403 = !DILocation(line: 329, column: 48, scope: !5352)
!5404 = !DILocation(line: 329, column: 3, scope: !5352)
!5405 = distinct !{!5405, !5354, !5406}
!5406 = !DILocation(line: 340, column: 5, scope: !5347)
!5407 = !DILocation(line: 342, column: 10, scope: !5286)
!5408 = !DILocation(line: 342, column: 3, scope: !5286)
!5409 = !DILocation(line: 343, column: 1, scope: !5286)
!5410 = distinct !DISubprogram(name: "best_gain_for_invariant", scope: !3, file: !3, line: 1247, type: !5411, scopeLine: 1249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5411 = !DISubroutineType(types: !5412)
!5412 = !{!796, !2105, !2810, !2810, !7, !1071}
!5413 = !DILocalVariable(name: "best", arg: 1, scope: !5410, file: !3, line: 1247, type: !2105)
!5414 = !DILocation(line: 1247, column: 45, scope: !5410)
!5415 = !DILocalVariable(name: "regs_needed", arg: 2, scope: !5410, file: !3, line: 1247, type: !2810)
!5416 = !DILocation(line: 1247, column: 61, scope: !5410)
!5417 = !DILocalVariable(name: "new_regs", arg: 3, scope: !5410, file: !3, line: 1248, type: !2810)
!5418 = !DILocation(line: 1248, column: 15, scope: !5410)
!5419 = !DILocalVariable(name: "regs_used", arg: 4, scope: !5410, file: !3, line: 1248, type: !7)
!5420 = !DILocation(line: 1248, column: 34, scope: !5410)
!5421 = !DILocalVariable(name: "speed", arg: 5, scope: !5410, file: !3, line: 1248, type: !1071)
!5422 = !DILocation(line: 1248, column: 50, scope: !5410)
!5423 = !DILocalVariable(name: "inv", scope: !5410, file: !3, line: 1250, type: !2075)
!5424 = !DILocation(line: 1250, column: 21, scope: !5410)
!5425 = !DILocalVariable(name: "i", scope: !5410, file: !3, line: 1251, type: !796)
!5426 = !DILocation(line: 1251, column: 7, scope: !5410)
!5427 = !DILocalVariable(name: "gain", scope: !5410, file: !3, line: 1251, type: !796)
!5428 = !DILocation(line: 1251, column: 10, scope: !5410)
!5429 = !DILocalVariable(name: "again", scope: !5410, file: !3, line: 1251, type: !796)
!5430 = !DILocation(line: 1251, column: 20, scope: !5410)
!5431 = !DILocalVariable(name: "aregs_needed", scope: !5410, file: !3, line: 1252, type: !3457)
!5432 = !DILocation(line: 1252, column: 12, scope: !5410)
!5433 = !DILocalVariable(name: "invno", scope: !5410, file: !3, line: 1252, type: !7)
!5434 = !DILocation(line: 1252, column: 41, scope: !5410)
!5435 = !DILocation(line: 1254, column: 14, scope: !5436)
!5436 = distinct !DILexicalBlock(scope: !5410, file: !3, line: 1254, column: 3)
!5437 = !DILocation(line: 1254, column: 8, scope: !5436)
!5438 = !DILocation(line: 1254, column: 19, scope: !5439)
!5439 = distinct !DILexicalBlock(scope: !5436, file: !3, line: 1254, column: 3)
!5440 = !DILocation(line: 1254, column: 3, scope: !5436)
!5441 = !DILocation(line: 1256, column: 11, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1256, column: 11)
!5443 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 1255, column: 5)
!5444 = !DILocation(line: 1256, column: 16, scope: !5442)
!5445 = !DILocation(line: 1256, column: 11, scope: !5443)
!5446 = !DILocation(line: 1257, column: 2, scope: !5442)
!5447 = !DILocation(line: 1260, column: 11, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1260, column: 11)
!5449 = !DILocation(line: 1260, column: 16, scope: !5448)
!5450 = !DILocation(line: 1260, column: 24, scope: !5448)
!5451 = !DILocation(line: 1260, column: 29, scope: !5448)
!5452 = !DILocation(line: 1260, column: 21, scope: !5448)
!5453 = !DILocation(line: 1260, column: 11, scope: !5443)
!5454 = !DILocation(line: 1261, column: 2, scope: !5448)
!5455 = !DILocation(line: 1263, column: 35, scope: !5443)
!5456 = !DILocation(line: 1263, column: 40, scope: !5443)
!5457 = !DILocation(line: 1263, column: 54, scope: !5443)
!5458 = !DILocation(line: 1263, column: 64, scope: !5443)
!5459 = !DILocation(line: 1264, column: 13, scope: !5443)
!5460 = !DILocation(line: 1263, column: 15, scope: !5443)
!5461 = !DILocation(line: 1263, column: 13, scope: !5443)
!5462 = !DILocation(line: 1265, column: 11, scope: !5463)
!5463 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1265, column: 11)
!5464 = !DILocation(line: 1265, column: 19, scope: !5463)
!5465 = !DILocation(line: 1265, column: 17, scope: !5463)
!5466 = !DILocation(line: 1265, column: 11, scope: !5443)
!5467 = !DILocation(line: 1267, column: 11, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 1266, column: 2)
!5469 = !DILocation(line: 1267, column: 9, scope: !5468)
!5470 = !DILocation(line: 1268, column: 12, scope: !5468)
!5471 = !DILocation(line: 1268, column: 5, scope: !5468)
!5472 = !DILocation(line: 1268, column: 10, scope: !5468)
!5473 = !DILocation(line: 1269, column: 10, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 1269, column: 8)
!5475 = !DILocation(line: 1269, column: 8, scope: !5468)
!5476 = !DILocation(line: 1270, column: 23, scope: !5474)
!5477 = !DILocation(line: 1270, column: 6, scope: !5474)
!5478 = !DILocation(line: 1270, column: 21, scope: !5474)
!5479 = !DILocation(line: 1273, column: 15, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 1273, column: 8)
!5481 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 1272, column: 6)
!5482 = !DILocation(line: 1273, column: 13, scope: !5480)
!5483 = !DILocation(line: 1273, column: 20, scope: !5484)
!5484 = distinct !DILexicalBlock(scope: !5480, file: !3, line: 1273, column: 8)
!5485 = !DILocation(line: 1273, column: 24, scope: !5484)
!5486 = !DILocation(line: 1273, column: 22, scope: !5484)
!5487 = !DILocation(line: 1273, column: 8, scope: !5480)
!5488 = !DILocation(line: 1275, column: 40, scope: !5484)
!5489 = !DILocation(line: 1275, column: 20, scope: !5484)
!5490 = !DILocation(line: 1275, column: 7, scope: !5484)
!5491 = !DILocation(line: 1274, column: 3, scope: !5484)
!5492 = !DILocation(line: 1274, column: 35, scope: !5484)
!5493 = !DILocation(line: 1274, column: 15, scope: !5484)
!5494 = !DILocation(line: 1275, column: 5, scope: !5484)
!5495 = !DILocation(line: 1273, column: 51, scope: !5484)
!5496 = !DILocation(line: 1273, column: 8, scope: !5484)
!5497 = distinct !{!5497, !5487, !5498}
!5498 = !DILocation(line: 1275, column: 42, scope: !5480)
!5499 = !DILocation(line: 1277, column: 2, scope: !5468)
!5500 = !DILocation(line: 1278, column: 5, scope: !5443)
!5501 = !DILocation(line: 1254, column: 75, scope: !5439)
!5502 = !DILocation(line: 1254, column: 3, scope: !5439)
!5503 = distinct !{!5503, !5440, !5504}
!5504 = !DILocation(line: 1278, column: 5, scope: !5436)
!5505 = !DILocation(line: 1280, column: 10, scope: !5410)
!5506 = !DILocation(line: 1280, column: 3, scope: !5410)
!5507 = distinct !DISubprogram(name: "set_move_mark", scope: !3, file: !3, line: 1286, type: !5508, scopeLine: 1287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5508 = !DISubroutineType(types: !5509)
!5509 = !{null, !7, !796}
!5510 = !DILocalVariable(name: "invno", arg: 1, scope: !5507, file: !3, line: 1286, type: !7)
!5511 = !DILocation(line: 1286, column: 25, scope: !5507)
!5512 = !DILocalVariable(name: "gain", arg: 2, scope: !5507, file: !3, line: 1286, type: !796)
!5513 = !DILocation(line: 1286, column: 36, scope: !5507)
!5514 = !DILocalVariable(name: "inv", scope: !5507, file: !3, line: 1288, type: !2075)
!5515 = !DILocation(line: 1288, column: 21, scope: !5507)
!5516 = !DILocation(line: 1288, column: 27, scope: !5507)
!5517 = !DILocalVariable(name: "bi", scope: !5507, file: !3, line: 1289, type: !2205)
!5518 = !DILocation(line: 1289, column: 19, scope: !5507)
!5519 = !DILocation(line: 1292, column: 9, scope: !5507)
!5520 = !DILocation(line: 1292, column: 7, scope: !5507)
!5521 = !DILocation(line: 1294, column: 7, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 1294, column: 7)
!5523 = !DILocation(line: 1294, column: 12, scope: !5522)
!5524 = !DILocation(line: 1294, column: 7, scope: !5507)
!5525 = !DILocation(line: 1295, column: 5, scope: !5522)
!5526 = !DILocation(line: 1296, column: 3, scope: !5507)
!5527 = !DILocation(line: 1296, column: 8, scope: !5507)
!5528 = !DILocation(line: 1296, column: 13, scope: !5507)
!5529 = !DILocation(line: 1298, column: 7, scope: !5530)
!5530 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 1298, column: 7)
!5531 = !DILocation(line: 1298, column: 7, scope: !5507)
!5532 = !DILocation(line: 1300, column: 11, scope: !5533)
!5533 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 1300, column: 11)
!5534 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1299, column: 5)
!5535 = !DILocation(line: 1300, column: 16, scope: !5533)
!5536 = !DILocation(line: 1300, column: 11, scope: !5534)
!5537 = !DILocation(line: 1301, column: 11, scope: !5533)
!5538 = !DILocation(line: 1302, column: 4, scope: !5533)
!5539 = !DILocation(line: 1302, column: 11, scope: !5533)
!5540 = !DILocation(line: 1301, column: 2, scope: !5533)
!5541 = !DILocation(line: 1304, column: 11, scope: !5533)
!5542 = !DILocation(line: 1305, column: 4, scope: !5533)
!5543 = !DILocation(line: 1304, column: 2, scope: !5533)
!5544 = !DILocation(line: 1306, column: 5, scope: !5534)
!5545 = !DILocation(line: 1308, column: 3, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 1308, column: 3)
!5547 = !DILocation(line: 1308, column: 3, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5546, file: !3, line: 1308, column: 3)
!5549 = !DILocation(line: 1310, column: 22, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 1309, column: 5)
!5551 = !DILocation(line: 1310, column: 7, scope: !5550)
!5552 = !DILocation(line: 1311, column: 5, scope: !5550)
!5553 = distinct !{!5553, !5545, !5554}
!5554 = !DILocation(line: 1311, column: 5, scope: !5546)
!5555 = !DILocation(line: 1312, column: 1, scope: !5507)
!5556 = distinct !DISubprogram(name: "gain_for_invariant", scope: !3, file: !3, line: 1179, type: !5557, scopeLine: 1181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5557 = !DISubroutineType(types: !5558)
!5558 = !{!796, !2075, !2810, !2810, !7, !1071}
!5559 = !DILocalVariable(name: "inv", arg: 1, scope: !5556, file: !3, line: 1179, type: !2075)
!5560 = !DILocation(line: 1179, column: 39, scope: !5556)
!5561 = !DILocalVariable(name: "regs_needed", arg: 2, scope: !5556, file: !3, line: 1179, type: !2810)
!5562 = !DILocation(line: 1179, column: 54, scope: !5556)
!5563 = !DILocalVariable(name: "new_regs", arg: 3, scope: !5556, file: !3, line: 1180, type: !2810)
!5564 = !DILocation(line: 1180, column: 17, scope: !5556)
!5565 = !DILocalVariable(name: "regs_used", arg: 4, scope: !5556, file: !3, line: 1180, type: !7)
!5566 = !DILocation(line: 1180, column: 36, scope: !5556)
!5567 = !DILocalVariable(name: "speed", arg: 5, scope: !5556, file: !3, line: 1180, type: !1071)
!5568 = !DILocation(line: 1180, column: 52, scope: !5556)
!5569 = !DILocalVariable(name: "comp_cost", scope: !5556, file: !3, line: 1182, type: !796)
!5570 = !DILocation(line: 1182, column: 7, scope: !5556)
!5571 = !DILocalVariable(name: "size_cost", scope: !5556, file: !3, line: 1182, type: !796)
!5572 = !DILocation(line: 1182, column: 18, scope: !5556)
!5573 = !DILocation(line: 1184, column: 15, scope: !5556)
!5574 = !DILocation(line: 1186, column: 17, scope: !5556)
!5575 = !DILocation(line: 1186, column: 34, scope: !5556)
!5576 = !DILocation(line: 1186, column: 3, scope: !5556)
!5577 = !DILocation(line: 1188, column: 9, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 1188, column: 7)
!5579 = !DILocation(line: 1188, column: 7, scope: !5556)
!5580 = !DILocation(line: 1190, column: 48, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 1189, column: 5)
!5582 = !DILocation(line: 1190, column: 62, scope: !5581)
!5583 = !DILocation(line: 1190, column: 60, scope: !5581)
!5584 = !DILocation(line: 1191, column: 13, scope: !5581)
!5585 = !DILocation(line: 1191, column: 24, scope: !5581)
!5586 = !DILocation(line: 1190, column: 20, scope: !5581)
!5587 = !DILocation(line: 1192, column: 36, scope: !5581)
!5588 = !DILocation(line: 1193, column: 8, scope: !5581)
!5589 = !DILocation(line: 1193, column: 19, scope: !5581)
!5590 = !DILocation(line: 1192, column: 8, scope: !5581)
!5591 = !DILocation(line: 1192, column: 6, scope: !5581)
!5592 = !DILocation(line: 1190, column: 17, scope: !5581)
!5593 = !DILocation(line: 1194, column: 5, scope: !5581)
!5594 = !DILocalVariable(name: "i", scope: !5595, file: !3, line: 1197, type: !796)
!5595 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 1196, column: 5)
!5596 = !DILocation(line: 1197, column: 11, scope: !5595)
!5597 = !DILocalVariable(name: "cover_class", scope: !5595, file: !3, line: 1198, type: !718)
!5598 = !DILocation(line: 1198, column: 22, scope: !5595)
!5599 = !DILocation(line: 1200, column: 14, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1200, column: 7)
!5601 = !DILocation(line: 1200, column: 12, scope: !5600)
!5602 = !DILocation(line: 1200, column: 19, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 1200, column: 7)
!5604 = !DILocation(line: 1200, column: 23, scope: !5603)
!5605 = !DILocation(line: 1200, column: 21, scope: !5603)
!5606 = !DILocation(line: 1200, column: 7, scope: !5600)
!5607 = !DILocation(line: 1202, column: 38, scope: !5608)
!5608 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 1201, column: 2)
!5609 = !DILocation(line: 1202, column: 18, scope: !5608)
!5610 = !DILocation(line: 1202, column: 16, scope: !5608)
!5611 = !DILocation(line: 1203, column: 14, scope: !5612)
!5612 = distinct !DILexicalBlock(scope: !5608, file: !3, line: 1203, column: 8)
!5613 = !DILocation(line: 1203, column: 23, scope: !5612)
!5614 = !DILocation(line: 1204, column: 16, scope: !5612)
!5615 = !DILocation(line: 1204, column: 28, scope: !5612)
!5616 = !DILocation(line: 1204, column: 8, scope: !5612)
!5617 = !DILocation(line: 1205, column: 10, scope: !5612)
!5618 = !DILocation(line: 1205, column: 33, scope: !5612)
!5619 = !DILocation(line: 1205, column: 50, scope: !5612)
!5620 = !DILocation(line: 1205, column: 8, scope: !5612)
!5621 = !DILocation(line: 1206, column: 10, scope: !5612)
!5622 = !DILocation(line: 1206, column: 8, scope: !5612)
!5623 = !DILocation(line: 1207, column: 35, scope: !5612)
!5624 = !DILocation(line: 1207, column: 10, scope: !5612)
!5625 = !DILocation(line: 1207, column: 8, scope: !5612)
!5626 = !DILocation(line: 1203, column: 8, scope: !5608)
!5627 = !DILocation(line: 1208, column: 6, scope: !5612)
!5628 = !DILocation(line: 1209, column: 2, scope: !5608)
!5629 = !DILocation(line: 1200, column: 50, scope: !5603)
!5630 = !DILocation(line: 1200, column: 7, scope: !5603)
!5631 = distinct !{!5631, !5606, !5632}
!5632 = !DILocation(line: 1209, column: 2, scope: !5600)
!5633 = !DILocation(line: 1210, column: 11, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1210, column: 11)
!5635 = !DILocation(line: 1210, column: 15, scope: !5634)
!5636 = !DILocation(line: 1210, column: 13, scope: !5634)
!5637 = !DILocation(line: 1210, column: 11, scope: !5595)
!5638 = !DILocation(line: 1232, column: 2, scope: !5634)
!5639 = !DILocation(line: 1234, column: 12, scope: !5634)
!5640 = !DILocation(line: 1237, column: 10, scope: !5556)
!5641 = !DILocation(line: 1237, column: 22, scope: !5556)
!5642 = !DILocation(line: 1237, column: 20, scope: !5556)
!5643 = !DILocation(line: 1237, column: 3, scope: !5556)
!5644 = !DILocation(line: 1238, column: 1, scope: !5556)
!5645 = distinct !DISubprogram(name: "get_inv_cost", scope: !3, file: !3, line: 1051, type: !5646, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5646 = !DISubroutineType(types: !5647)
!5647 = !{null, !2075, !3245, !2810}
!5648 = !DILocalVariable(name: "inv", arg: 1, scope: !5645, file: !3, line: 1051, type: !2075)
!5649 = !DILocation(line: 1051, column: 33, scope: !5645)
!5650 = !DILocalVariable(name: "comp_cost", arg: 2, scope: !5645, file: !3, line: 1051, type: !3245)
!5651 = !DILocation(line: 1051, column: 43, scope: !5645)
!5652 = !DILocalVariable(name: "regs_needed", arg: 3, scope: !5645, file: !3, line: 1051, type: !2810)
!5653 = !DILocation(line: 1051, column: 64, scope: !5645)
!5654 = !DILocalVariable(name: "i", scope: !5645, file: !3, line: 1053, type: !796)
!5655 = !DILocation(line: 1053, column: 7, scope: !5645)
!5656 = !DILocalVariable(name: "acomp_cost", scope: !5645, file: !3, line: 1053, type: !796)
!5657 = !DILocation(line: 1053, column: 10, scope: !5645)
!5658 = !DILocalVariable(name: "aregs_needed", scope: !5645, file: !3, line: 1054, type: !3457)
!5659 = !DILocation(line: 1054, column: 12, scope: !5645)
!5660 = !DILocalVariable(name: "depno", scope: !5645, file: !3, line: 1055, type: !7)
!5661 = !DILocation(line: 1055, column: 12, scope: !5645)
!5662 = !DILocalVariable(name: "dep", scope: !5645, file: !3, line: 1056, type: !2075)
!5663 = !DILocation(line: 1056, column: 21, scope: !5645)
!5664 = !DILocalVariable(name: "bi", scope: !5645, file: !3, line: 1057, type: !2205)
!5665 = !DILocation(line: 1057, column: 19, scope: !5645)
!5666 = !DILocation(line: 1060, column: 9, scope: !5645)
!5667 = !DILocation(line: 1060, column: 7, scope: !5645)
!5668 = !DILocation(line: 1062, column: 4, scope: !5645)
!5669 = !DILocation(line: 1062, column: 14, scope: !5645)
!5670 = !DILocation(line: 1063, column: 9, scope: !5671)
!5671 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1063, column: 7)
!5672 = !DILocation(line: 1063, column: 7, scope: !5645)
!5673 = !DILocation(line: 1064, column: 5, scope: !5671)
!5674 = !DILocation(line: 1064, column: 20, scope: !5671)
!5675 = !DILocation(line: 1067, column: 14, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 1067, column: 7)
!5677 = distinct !DILexicalBlock(scope: !5671, file: !3, line: 1066, column: 5)
!5678 = !DILocation(line: 1067, column: 12, scope: !5676)
!5679 = !DILocation(line: 1067, column: 19, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 1067, column: 7)
!5681 = !DILocation(line: 1067, column: 23, scope: !5680)
!5682 = !DILocation(line: 1067, column: 21, scope: !5680)
!5683 = !DILocation(line: 1067, column: 7, scope: !5676)
!5684 = !DILocation(line: 1068, column: 2, scope: !5680)
!5685 = !DILocation(line: 1068, column: 34, scope: !5680)
!5686 = !DILocation(line: 1068, column: 14, scope: !5680)
!5687 = !DILocation(line: 1068, column: 38, scope: !5680)
!5688 = !DILocation(line: 1067, column: 50, scope: !5680)
!5689 = !DILocation(line: 1067, column: 7, scope: !5680)
!5690 = distinct !{!5690, !5683, !5691}
!5691 = !DILocation(line: 1068, column: 40, scope: !5676)
!5692 = !DILocation(line: 1071, column: 7, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1071, column: 7)
!5694 = !DILocation(line: 1071, column: 12, scope: !5693)
!5695 = !DILocation(line: 1072, column: 7, scope: !5693)
!5696 = !DILocation(line: 1072, column: 10, scope: !5693)
!5697 = !DILocation(line: 1072, column: 15, scope: !5693)
!5698 = !DILocation(line: 1072, column: 24, scope: !5693)
!5699 = !DILocation(line: 1072, column: 21, scope: !5693)
!5700 = !DILocation(line: 1071, column: 7, scope: !5645)
!5701 = !DILocation(line: 1073, column: 5, scope: !5693)
!5702 = !DILocation(line: 1074, column: 16, scope: !5645)
!5703 = !DILocation(line: 1074, column: 3, scope: !5645)
!5704 = !DILocation(line: 1074, column: 8, scope: !5645)
!5705 = !DILocation(line: 1074, column: 14, scope: !5645)
!5706 = !DILocation(line: 1076, column: 9, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1076, column: 7)
!5708 = !DILocation(line: 1076, column: 7, scope: !5645)
!5709 = !DILocation(line: 1077, column: 5, scope: !5707)
!5710 = !DILocation(line: 1077, column: 19, scope: !5707)
!5711 = !DILocalVariable(name: "nregs", scope: !5712, file: !3, line: 1080, type: !796)
!5712 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 1079, column: 5)
!5713 = !DILocation(line: 1080, column: 11, scope: !5712)
!5714 = !DILocalVariable(name: "cover_class", scope: !5712, file: !3, line: 1081, type: !718)
!5715 = !DILocation(line: 1081, column: 22, scope: !5712)
!5716 = !DILocation(line: 1083, column: 48, scope: !5712)
!5717 = !DILocation(line: 1083, column: 53, scope: !5712)
!5718 = !DILocation(line: 1083, column: 21, scope: !5712)
!5719 = !DILocation(line: 1083, column: 19, scope: !5712)
!5720 = !DILocation(line: 1084, column: 35, scope: !5712)
!5721 = !DILocation(line: 1084, column: 7, scope: !5712)
!5722 = !DILocation(line: 1084, column: 19, scope: !5712)
!5723 = !DILocation(line: 1084, column: 32, scope: !5712)
!5724 = !DILocation(line: 1087, column: 8, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1087, column: 7)
!5726 = !DILocation(line: 1087, column: 13, scope: !5725)
!5727 = !DILocation(line: 1088, column: 7, scope: !5725)
!5728 = !DILocation(line: 1088, column: 10, scope: !5725)
!5729 = !DILocation(line: 1088, column: 15, scope: !5725)
!5730 = !DILocation(line: 1088, column: 20, scope: !5725)
!5731 = !DILocation(line: 1088, column: 34, scope: !5725)
!5732 = !DILocation(line: 1088, column: 39, scope: !5725)
!5733 = !DILocation(line: 1088, column: 44, scope: !5725)
!5734 = !DILocation(line: 1088, column: 32, scope: !5725)
!5735 = !DILocation(line: 1087, column: 7, scope: !5645)
!5736 = !DILocation(line: 1089, column: 21, scope: !5725)
!5737 = !DILocation(line: 1089, column: 26, scope: !5725)
!5738 = !DILocation(line: 1089, column: 7, scope: !5725)
!5739 = !DILocation(line: 1089, column: 18, scope: !5725)
!5740 = !DILocation(line: 1089, column: 5, scope: !5725)
!5741 = !DILocalVariable(name: "set", scope: !5742, file: !3, line: 1109, type: !839)
!5742 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1092, column: 3)
!5743 = !DILocation(line: 1109, column: 9, scope: !5742)
!5744 = !DILocation(line: 1109, column: 15, scope: !5742)
!5745 = !DILocation(line: 1110, column: 9, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 1110, column: 9)
!5747 = !DILocation(line: 1111, column: 2, scope: !5746)
!5748 = !DILocation(line: 1111, column: 5, scope: !5746)
!5749 = !DILocation(line: 1112, column: 2, scope: !5746)
!5750 = !DILocation(line: 1112, column: 31, scope: !5746)
!5751 = !DILocation(line: 1112, column: 5, scope: !5746)
!5752 = !DILocation(line: 1110, column: 9, scope: !5742)
!5753 = !DILocation(line: 1114, column: 6, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5755, file: !3, line: 1114, column: 6)
!5755 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 1113, column: 7)
!5756 = !DILocation(line: 1114, column: 6, scope: !5755)
!5757 = !DILocation(line: 1115, column: 4, scope: !5754)
!5758 = !DILocation(line: 1115, column: 39, scope: !5754)
!5759 = !DILocation(line: 1117, column: 4, scope: !5754)
!5760 = !DILocation(line: 1117, column: 19, scope: !5754)
!5761 = !DILocation(line: 1118, column: 7, scope: !5755)
!5762 = !DILocation(line: 1122, column: 3, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 1122, column: 3)
!5764 = !DILocation(line: 1122, column: 3, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5763, file: !3, line: 1122, column: 3)
!5766 = !DILocalVariable(name: "check_p", scope: !5767, file: !3, line: 1124, type: !1071)
!5767 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1123, column: 5)
!5768 = !DILocation(line: 1124, column: 12, scope: !5767)
!5769 = !DILocation(line: 1126, column: 13, scope: !5767)
!5770 = !DILocation(line: 1126, column: 11, scope: !5767)
!5771 = !DILocation(line: 1128, column: 21, scope: !5767)
!5772 = !DILocation(line: 1128, column: 39, scope: !5767)
!5773 = !DILocation(line: 1128, column: 7, scope: !5767)
!5774 = !DILocation(line: 1130, column: 13, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1130, column: 11)
!5776 = !DILocation(line: 1130, column: 11, scope: !5767)
!5777 = !DILocation(line: 1131, column: 12, scope: !5775)
!5778 = !DILocation(line: 1131, column: 28, scope: !5775)
!5779 = !DILocation(line: 1131, column: 10, scope: !5775)
!5780 = !DILocation(line: 1131, column: 2, scope: !5775)
!5781 = !DILocation(line: 1134, column: 11, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1134, column: 4)
!5783 = distinct !DILexicalBlock(scope: !5775, file: !3, line: 1133, column: 2)
!5784 = !DILocation(line: 1134, column: 9, scope: !5782)
!5785 = !DILocation(line: 1134, column: 16, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1134, column: 4)
!5787 = !DILocation(line: 1134, column: 20, scope: !5786)
!5788 = !DILocation(line: 1134, column: 18, scope: !5786)
!5789 = !DILocation(line: 1134, column: 4, scope: !5782)
!5790 = !DILocation(line: 1135, column: 43, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5786, file: !3, line: 1135, column: 10)
!5792 = !DILocation(line: 1135, column: 23, scope: !5791)
!5793 = !DILocation(line: 1135, column: 10, scope: !5791)
!5794 = !DILocation(line: 1135, column: 47, scope: !5791)
!5795 = !DILocation(line: 1135, column: 10, scope: !5786)
!5796 = !DILocation(line: 1136, column: 8, scope: !5791)
!5797 = !DILocation(line: 1135, column: 50, scope: !5791)
!5798 = !DILocation(line: 1134, column: 47, scope: !5786)
!5799 = !DILocation(line: 1134, column: 4, scope: !5786)
!5800 = distinct !{!5800, !5789, !5801}
!5801 = !DILocation(line: 1136, column: 8, scope: !5782)
!5802 = !DILocation(line: 1137, column: 14, scope: !5783)
!5803 = !DILocation(line: 1137, column: 18, scope: !5783)
!5804 = !DILocation(line: 1137, column: 16, scope: !5783)
!5805 = !DILocation(line: 1137, column: 12, scope: !5783)
!5806 = !DILocation(line: 1139, column: 11, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1139, column: 11)
!5808 = !DILocation(line: 1144, column: 4, scope: !5807)
!5809 = !DILocation(line: 1144, column: 7, scope: !5807)
!5810 = !DILocation(line: 1144, column: 12, scope: !5807)
!5811 = !DILocation(line: 1145, column: 4, scope: !5807)
!5812 = !DILocation(line: 1145, column: 8, scope: !5807)
!5813 = !DILocation(line: 1145, column: 13, scope: !5807)
!5814 = !DILocation(line: 1145, column: 18, scope: !5807)
!5815 = !DILocation(line: 1145, column: 24, scope: !5807)
!5816 = !DILocation(line: 1139, column: 11, scope: !5767)
!5817 = !DILocation(line: 1149, column: 10, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5819, file: !3, line: 1149, column: 8)
!5819 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 1146, column: 2)
!5820 = !DILocation(line: 1149, column: 8, scope: !5819)
!5821 = !DILocation(line: 1150, column: 6, scope: !5818)
!5822 = !DILocation(line: 1150, column: 21, scope: !5818)
!5823 = !DILocalVariable(name: "nregs", scope: !5824, file: !3, line: 1153, type: !796)
!5824 = distinct !DILexicalBlock(scope: !5818, file: !3, line: 1152, column: 6)
!5825 = !DILocation(line: 1153, column: 12, scope: !5824)
!5826 = !DILocalVariable(name: "cover_class", scope: !5824, file: !3, line: 1154, type: !718)
!5827 = !DILocation(line: 1154, column: 23, scope: !5824)
!5828 = !DILocation(line: 1156, column: 49, scope: !5824)
!5829 = !DILocation(line: 1156, column: 54, scope: !5824)
!5830 = !DILocation(line: 1156, column: 22, scope: !5824)
!5831 = !DILocation(line: 1156, column: 20, scope: !5824)
!5832 = !DILocation(line: 1157, column: 37, scope: !5824)
!5833 = !DILocation(line: 1157, column: 21, scope: !5824)
!5834 = !DILocation(line: 1157, column: 8, scope: !5824)
!5835 = !DILocation(line: 1157, column: 34, scope: !5824)
!5836 = !DILocation(line: 1159, column: 2, scope: !5819)
!5837 = !DILocation(line: 1161, column: 13, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5767, file: !3, line: 1161, column: 11)
!5839 = !DILocation(line: 1161, column: 11, scope: !5767)
!5840 = !DILocation(line: 1162, column: 20, scope: !5838)
!5841 = !DILocation(line: 1162, column: 2, scope: !5838)
!5842 = !DILocation(line: 1162, column: 17, scope: !5838)
!5843 = !DILocation(line: 1165, column: 11, scope: !5844)
!5844 = distinct !DILexicalBlock(scope: !5845, file: !3, line: 1165, column: 4)
!5845 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 1164, column: 2)
!5846 = !DILocation(line: 1165, column: 9, scope: !5844)
!5847 = !DILocation(line: 1165, column: 16, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 1165, column: 4)
!5849 = !DILocation(line: 1165, column: 20, scope: !5848)
!5850 = !DILocation(line: 1165, column: 18, scope: !5848)
!5851 = !DILocation(line: 1165, column: 4, scope: !5844)
!5852 = !DILocation(line: 1167, column: 44, scope: !5848)
!5853 = !DILocation(line: 1167, column: 24, scope: !5848)
!5854 = !DILocation(line: 1167, column: 11, scope: !5848)
!5855 = !DILocation(line: 1166, column: 6, scope: !5848)
!5856 = !DILocation(line: 1166, column: 38, scope: !5848)
!5857 = !DILocation(line: 1166, column: 18, scope: !5848)
!5858 = !DILocation(line: 1167, column: 8, scope: !5848)
!5859 = !DILocation(line: 1165, column: 47, scope: !5848)
!5860 = !DILocation(line: 1165, column: 4, scope: !5848)
!5861 = distinct !{!5861, !5851, !5862}
!5862 = !DILocation(line: 1167, column: 46, scope: !5844)
!5863 = !DILocation(line: 1169, column: 23, scope: !5767)
!5864 = !DILocation(line: 1169, column: 9, scope: !5767)
!5865 = !DILocation(line: 1169, column: 20, scope: !5767)
!5866 = !DILocation(line: 1170, column: 5, scope: !5767)
!5867 = distinct !{!5867, !5762, !5868}
!5868 = !DILocation(line: 1170, column: 5, scope: !5763)
!5869 = !DILocation(line: 1171, column: 1, scope: !5645)
!5870 = distinct !DISubprogram(name: "get_cover_class_and_nregs", scope: !3, file: !3, line: 1018, type: !5871, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5871 = !DISubroutineType(types: !5872)
!5872 = !{!718, !839, !3245}
!5873 = !DILocalVariable(name: "insn", arg: 1, scope: !5870, file: !3, line: 1018, type: !839)
!5874 = !DILocation(line: 1018, column: 32, scope: !5870)
!5875 = !DILocalVariable(name: "nregs", arg: 2, scope: !5870, file: !3, line: 1018, type: !3245)
!5876 = !DILocation(line: 1018, column: 43, scope: !5870)
!5877 = !DILocalVariable(name: "reg", scope: !5870, file: !3, line: 1020, type: !839)
!5878 = !DILocation(line: 1020, column: 7, scope: !5870)
!5879 = !DILocalVariable(name: "cover_class", scope: !5870, file: !3, line: 1021, type: !718)
!5880 = !DILocation(line: 1021, column: 18, scope: !5870)
!5881 = !DILocalVariable(name: "set", scope: !5870, file: !3, line: 1022, type: !839)
!5882 = !DILocation(line: 1022, column: 7, scope: !5870)
!5883 = !DILocation(line: 1022, column: 13, scope: !5870)
!5884 = !DILocation(line: 1025, column: 3, scope: !5870)
!5885 = !DILocation(line: 1026, column: 9, scope: !5870)
!5886 = !DILocation(line: 1026, column: 7, scope: !5870)
!5887 = !DILocation(line: 1027, column: 7, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1027, column: 7)
!5889 = !DILocation(line: 1027, column: 22, scope: !5888)
!5890 = !DILocation(line: 1027, column: 7, scope: !5870)
!5891 = !DILocation(line: 1028, column: 11, scope: !5888)
!5892 = !DILocation(line: 1028, column: 9, scope: !5888)
!5893 = !DILocation(line: 1028, column: 5, scope: !5888)
!5894 = !DILocation(line: 1029, column: 7, scope: !5895)
!5895 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1029, column: 7)
!5896 = !DILocation(line: 1029, column: 7, scope: !5870)
!5897 = !DILocation(line: 1031, column: 8, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 1030, column: 5)
!5899 = !DILocation(line: 1031, column: 14, scope: !5898)
!5900 = !DILocation(line: 1032, column: 19, scope: !5898)
!5901 = !DILocation(line: 1033, column: 5, scope: !5898)
!5902 = !DILocation(line: 1036, column: 13, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1036, column: 11)
!5904 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 1035, column: 5)
!5905 = !DILocation(line: 1036, column: 11, scope: !5904)
!5906 = !DILocation(line: 1037, column: 6, scope: !5903)
!5907 = !DILocation(line: 1037, column: 2, scope: !5903)
!5908 = !DILocation(line: 1038, column: 11, scope: !5909)
!5909 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1038, column: 11)
!5910 = !DILocation(line: 1038, column: 15, scope: !5909)
!5911 = !DILocation(line: 1038, column: 11, scope: !5904)
!5912 = !DILocation(line: 1039, column: 14, scope: !5909)
!5913 = !DILocation(line: 1039, column: 2, scope: !5909)
!5914 = !DILocation(line: 1041, column: 33, scope: !5909)
!5915 = !DILocation(line: 1041, column: 16, scope: !5909)
!5916 = !DILocation(line: 1041, column: 14, scope: !5909)
!5917 = !DILocation(line: 1042, column: 36, scope: !5904)
!5918 = !DILocation(line: 1042, column: 16, scope: !5904)
!5919 = !DILocation(line: 1042, column: 49, scope: !5904)
!5920 = !DILocation(line: 1042, column: 8, scope: !5904)
!5921 = !DILocation(line: 1042, column: 14, scope: !5904)
!5922 = !DILocation(line: 1044, column: 10, scope: !5870)
!5923 = !DILocation(line: 1044, column: 3, scope: !5870)
!5924 = distinct !DISubprogram(name: "move_invariant_reg", scope: !3, file: !3, line: 1374, type: !5925, scopeLine: 1375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!5925 = !DISubroutineType(types: !5926)
!5926 = !{!1071, !802, !7}
!5927 = !DILocalVariable(name: "loop", arg: 1, scope: !5924, file: !3, line: 1374, type: !802)
!5928 = !DILocation(line: 1374, column: 34, scope: !5924)
!5929 = !DILocalVariable(name: "invno", arg: 2, scope: !5924, file: !3, line: 1374, type: !7)
!5930 = !DILocation(line: 1374, column: 49, scope: !5924)
!5931 = !DILocalVariable(name: "inv", scope: !5924, file: !3, line: 1376, type: !2075)
!5932 = !DILocation(line: 1376, column: 21, scope: !5924)
!5933 = !DILocation(line: 1376, column: 27, scope: !5924)
!5934 = !DILocalVariable(name: "repr", scope: !5924, file: !3, line: 1377, type: !2075)
!5935 = !DILocation(line: 1377, column: 21, scope: !5924)
!5936 = !DILocation(line: 1377, column: 28, scope: !5924)
!5937 = !DILocalVariable(name: "i", scope: !5924, file: !3, line: 1378, type: !7)
!5938 = !DILocation(line: 1378, column: 12, scope: !5924)
!5939 = !DILocalVariable(name: "preheader", scope: !5924, file: !3, line: 1379, type: !1376)
!5940 = !DILocation(line: 1379, column: 15, scope: !5924)
!5941 = !DILocation(line: 1379, column: 48, scope: !5924)
!5942 = !DILocation(line: 1379, column: 27, scope: !5924)
!5943 = !DILocation(line: 1379, column: 55, scope: !5924)
!5944 = !DILocalVariable(name: "reg", scope: !5924, file: !3, line: 1380, type: !839)
!5945 = !DILocation(line: 1380, column: 7, scope: !5924)
!5946 = !DILocalVariable(name: "set", scope: !5924, file: !3, line: 1380, type: !839)
!5947 = !DILocation(line: 1380, column: 12, scope: !5924)
!5948 = !DILocalVariable(name: "dest", scope: !5924, file: !3, line: 1380, type: !839)
!5949 = !DILocation(line: 1380, column: 17, scope: !5924)
!5950 = !DILocalVariable(name: "note", scope: !5924, file: !3, line: 1380, type: !839)
!5951 = !DILocation(line: 1380, column: 23, scope: !5924)
!5952 = !DILocalVariable(name: "use", scope: !5924, file: !3, line: 1381, type: !2087)
!5953 = !DILocation(line: 1381, column: 15, scope: !5924)
!5954 = !DILocalVariable(name: "bi", scope: !5924, file: !3, line: 1382, type: !2205)
!5955 = !DILocation(line: 1382, column: 19, scope: !5924)
!5956 = !DILocalVariable(name: "regno", scope: !5924, file: !3, line: 1383, type: !796)
!5957 = !DILocation(line: 1383, column: 7, scope: !5924)
!5958 = !DILocation(line: 1385, column: 7, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1385, column: 7)
!5960 = !DILocation(line: 1385, column: 12, scope: !5959)
!5961 = !DILocation(line: 1385, column: 7, scope: !5924)
!5962 = !DILocation(line: 1386, column: 5, scope: !5959)
!5963 = !DILocation(line: 1387, column: 8, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1387, column: 7)
!5965 = !DILocation(line: 1387, column: 14, scope: !5964)
!5966 = !DILocation(line: 1387, column: 7, scope: !5924)
!5967 = !DILocation(line: 1388, column: 5, scope: !5964)
!5968 = !DILocation(line: 1389, column: 9, scope: !5924)
!5969 = !DILocation(line: 1393, column: 7, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1393, column: 7)
!5971 = !DILocation(line: 1393, column: 14, scope: !5970)
!5972 = !DILocation(line: 1393, column: 11, scope: !5970)
!5973 = !DILocation(line: 1393, column: 7, scope: !5924)
!5974 = !DILocation(line: 1395, column: 11, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1395, column: 11)
!5976 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1394, column: 5)
!5977 = !DILocation(line: 1395, column: 16, scope: !5975)
!5978 = !DILocation(line: 1395, column: 11, scope: !5976)
!5979 = !DILocation(line: 1397, column: 4, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5981, file: !3, line: 1397, column: 4)
!5981 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1396, column: 2)
!5982 = !DILocation(line: 1397, column: 4, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 1397, column: 4)
!5984 = !DILocation(line: 1399, column: 33, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 1399, column: 12)
!5986 = distinct !DILexicalBlock(scope: !5983, file: !3, line: 1398, column: 6)
!5987 = !DILocation(line: 1399, column: 39, scope: !5985)
!5988 = !DILocation(line: 1399, column: 13, scope: !5985)
!5989 = !DILocation(line: 1399, column: 12, scope: !5986)
!5990 = !DILocation(line: 1400, column: 3, scope: !5985)
!5991 = !DILocation(line: 1401, column: 6, scope: !5986)
!5992 = distinct !{!5992, !5979, !5993}
!5993 = !DILocation(line: 1401, column: 6, scope: !5980)
!5994 = !DILocation(line: 1402, column: 2, scope: !5981)
!5995 = !DILocation(line: 1409, column: 13, scope: !5976)
!5996 = !DILocation(line: 1409, column: 11, scope: !5976)
!5997 = !DILocation(line: 1410, column: 20, scope: !5976)
!5998 = !DILocation(line: 1410, column: 18, scope: !5976)
!5999 = !DILocation(line: 1410, column: 11, scope: !5976)
!6000 = !DILocation(line: 1411, column: 11, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1411, column: 11)
!6002 = !DILocation(line: 1411, column: 26, scope: !6001)
!6003 = !DILocation(line: 1411, column: 11, scope: !5976)
!6004 = !DILocation(line: 1412, column: 8, scope: !6001)
!6005 = !DILocation(line: 1412, column: 6, scope: !6001)
!6006 = !DILocation(line: 1412, column: 2, scope: !6001)
!6007 = !DILocation(line: 1413, column: 11, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1413, column: 11)
!6009 = !DILocation(line: 1413, column: 11, scope: !5976)
!6010 = !DILocation(line: 1414, column: 10, scope: !6008)
!6011 = !DILocation(line: 1414, column: 8, scope: !6008)
!6012 = !DILocation(line: 1414, column: 2, scope: !6008)
!6013 = !DILocation(line: 1416, column: 36, scope: !5976)
!6014 = !DILocation(line: 1416, column: 13, scope: !5976)
!6015 = !DILocation(line: 1416, column: 11, scope: !5976)
!6016 = !DILocation(line: 1419, column: 29, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1419, column: 11)
!6018 = !DILocation(line: 1419, column: 34, scope: !6017)
!6019 = !DILocation(line: 1419, column: 41, scope: !6017)
!6020 = !DILocation(line: 1419, column: 57, scope: !6017)
!6021 = !DILocation(line: 1419, column: 12, scope: !6017)
!6022 = !DILocation(line: 1419, column: 11, scope: !5976)
!6023 = !DILocation(line: 1420, column: 2, scope: !6017)
!6024 = !DILocation(line: 1421, column: 23, scope: !5976)
!6025 = !DILocation(line: 1421, column: 28, scope: !5976)
!6026 = !DILocation(line: 1421, column: 7, scope: !5976)
!6027 = !DILocation(line: 1423, column: 39, scope: !5976)
!6028 = !DILocation(line: 1423, column: 45, scope: !5976)
!6029 = !DILocation(line: 1423, column: 24, scope: !5976)
!6030 = !DILocation(line: 1423, column: 51, scope: !5976)
!6031 = !DILocation(line: 1423, column: 56, scope: !5976)
!6032 = !DILocation(line: 1423, column: 7, scope: !5976)
!6033 = !DILocation(line: 1424, column: 22, scope: !5976)
!6034 = !DILocation(line: 1424, column: 27, scope: !5976)
!6035 = !DILocation(line: 1424, column: 33, scope: !5976)
!6036 = !DILocation(line: 1424, column: 38, scope: !5976)
!6037 = !DILocation(line: 1424, column: 44, scope: !5976)
!6038 = !DILocation(line: 1424, column: 7, scope: !5976)
!6039 = !DILocation(line: 1433, column: 34, scope: !6040)
!6040 = distinct !DILexicalBlock(scope: !5976, file: !3, line: 1433, column: 11)
!6041 = !DILocation(line: 1433, column: 39, scope: !6040)
!6042 = !DILocation(line: 1433, column: 19, scope: !6040)
!6043 = !DILocation(line: 1433, column: 17, scope: !6040)
!6044 = !DILocation(line: 1434, column: 4, scope: !6040)
!6045 = !DILocation(line: 1434, column: 9, scope: !6040)
!6046 = !DILocation(line: 1434, column: 14, scope: !6040)
!6047 = !DILocation(line: 1435, column: 8, scope: !6040)
!6048 = !DILocation(line: 1435, column: 35, scope: !6040)
!6049 = !DILocation(line: 1435, column: 12, scope: !6040)
!6050 = !DILocation(line: 1433, column: 11, scope: !5976)
!6051 = !DILocation(line: 1436, column: 15, scope: !6040)
!6052 = !DILocation(line: 1436, column: 20, scope: !6040)
!6053 = !DILocation(line: 1436, column: 26, scope: !6040)
!6054 = !DILocation(line: 1436, column: 2, scope: !6040)
!6055 = !DILocation(line: 1437, column: 5, scope: !5976)
!6056 = !DILocation(line: 1440, column: 32, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6058, file: !3, line: 1440, column: 11)
!6058 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1439, column: 5)
!6059 = !DILocation(line: 1440, column: 38, scope: !6057)
!6060 = !DILocation(line: 1440, column: 44, scope: !6057)
!6061 = !DILocation(line: 1440, column: 12, scope: !6057)
!6062 = !DILocation(line: 1440, column: 11, scope: !6058)
!6063 = !DILocation(line: 1441, column: 2, scope: !6057)
!6064 = !DILocation(line: 1442, column: 13, scope: !6058)
!6065 = !DILocation(line: 1442, column: 19, scope: !6058)
!6066 = !DILocation(line: 1442, column: 11, scope: !6058)
!6067 = !DILocation(line: 1443, column: 15, scope: !6058)
!6068 = !DILocation(line: 1443, column: 21, scope: !6058)
!6069 = !DILocation(line: 1443, column: 13, scope: !6058)
!6070 = !DILocation(line: 1444, column: 13, scope: !6058)
!6071 = !DILocation(line: 1444, column: 11, scope: !6058)
!6072 = !DILocation(line: 1445, column: 39, scope: !6058)
!6073 = !DILocation(line: 1445, column: 55, scope: !6058)
!6074 = !DILocation(line: 1445, column: 24, scope: !6058)
!6075 = !DILocation(line: 1445, column: 61, scope: !6058)
!6076 = !DILocation(line: 1445, column: 66, scope: !6058)
!6077 = !DILocation(line: 1445, column: 7, scope: !6058)
!6078 = !DILocation(line: 1446, column: 20, scope: !6058)
!6079 = !DILocation(line: 1446, column: 25, scope: !6058)
!6080 = !DILocation(line: 1446, column: 7, scope: !6058)
!6081 = !DILocation(line: 1450, column: 14, scope: !5924)
!6082 = !DILocation(line: 1450, column: 3, scope: !5924)
!6083 = !DILocation(line: 1450, column: 8, scope: !5924)
!6084 = !DILocation(line: 1450, column: 12, scope: !5924)
!6085 = !DILocation(line: 1451, column: 21, scope: !5924)
!6086 = !DILocation(line: 1451, column: 3, scope: !5924)
!6087 = !DILocation(line: 1451, column: 8, scope: !5924)
!6088 = !DILocation(line: 1451, column: 19, scope: !5924)
!6089 = !DILocation(line: 1456, column: 7, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1456, column: 7)
!6091 = !DILocation(line: 1456, column: 12, scope: !6090)
!6092 = !DILocation(line: 1456, column: 7, scope: !5924)
!6093 = !DILocation(line: 1458, column: 18, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 1458, column: 7)
!6095 = distinct !DILexicalBlock(scope: !6090, file: !3, line: 1457, column: 5)
!6096 = !DILocation(line: 1458, column: 23, scope: !6094)
!6097 = !DILocation(line: 1458, column: 28, scope: !6094)
!6098 = !DILocation(line: 1458, column: 16, scope: !6094)
!6099 = !DILocation(line: 1458, column: 12, scope: !6094)
!6100 = !DILocation(line: 1458, column: 34, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 1458, column: 7)
!6102 = !DILocation(line: 1458, column: 7, scope: !6094)
!6103 = !DILocation(line: 1460, column: 16, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6101, file: !3, line: 1459, column: 2)
!6105 = !DILocation(line: 1460, column: 5, scope: !6104)
!6106 = !DILocation(line: 1460, column: 10, scope: !6104)
!6107 = !DILocation(line: 1460, column: 14, scope: !6104)
!6108 = !DILocation(line: 1461, column: 20, scope: !6104)
!6109 = !DILocation(line: 1461, column: 25, scope: !6104)
!6110 = !DILocation(line: 1461, column: 4, scope: !6104)
!6111 = !DILocation(line: 1462, column: 2, scope: !6104)
!6112 = !DILocation(line: 1458, column: 45, scope: !6101)
!6113 = !DILocation(line: 1458, column: 50, scope: !6101)
!6114 = !DILocation(line: 1458, column: 43, scope: !6101)
!6115 = !DILocation(line: 1458, column: 7, scope: !6101)
!6116 = distinct !{!6116, !6102, !6117}
!6117 = !DILocation(line: 1462, column: 2, scope: !6094)
!6118 = !DILocation(line: 1463, column: 5, scope: !6095)
!6119 = !DILocation(line: 1465, column: 3, scope: !5924)
!6120 = !DILabel(scope: !5924, name: "fail", file: !3, line: 1467)
!6121 = !DILocation(line: 1467, column: 1, scope: !5924)
!6122 = !DILocation(line: 1470, column: 7, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 1470, column: 7)
!6124 = !DILocation(line: 1470, column: 7, scope: !5924)
!6125 = !DILocation(line: 1471, column: 14, scope: !6123)
!6126 = !DILocation(line: 1471, column: 58, scope: !6123)
!6127 = !DILocation(line: 1471, column: 5, scope: !6123)
!6128 = !DILocation(line: 1472, column: 3, scope: !5924)
!6129 = !DILocation(line: 1472, column: 8, scope: !5924)
!6130 = !DILocation(line: 1472, column: 13, scope: !5924)
!6131 = !DILocation(line: 1473, column: 3, scope: !5924)
!6132 = !DILocation(line: 1473, column: 8, scope: !5924)
!6133 = !DILocation(line: 1473, column: 12, scope: !5924)
!6134 = !DILocation(line: 1474, column: 3, scope: !5924)
!6135 = !DILocation(line: 1474, column: 8, scope: !5924)
!6136 = !DILocation(line: 1474, column: 19, scope: !5924)
!6137 = !DILocation(line: 1476, column: 3, scope: !5924)
!6138 = !DILocation(line: 1477, column: 1, scope: !5924)
!6139 = distinct !DISubprogram(name: "free_use_list", scope: !3, file: !3, line: 1004, type: !6140, scopeLine: 1005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!6140 = !DISubroutineType(types: !6141)
!6141 = !{null, !2087}
!6142 = !DILocalVariable(name: "use", arg: 1, scope: !6139, file: !3, line: 1004, type: !2087)
!6143 = !DILocation(line: 1004, column: 28, scope: !6139)
!6144 = !DILocalVariable(name: "next", scope: !6139, file: !3, line: 1006, type: !2087)
!6145 = !DILocation(line: 1006, column: 15, scope: !6139)
!6146 = !DILocation(line: 1008, column: 3, scope: !6139)
!6147 = !DILocation(line: 1008, column: 10, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 1008, column: 3)
!6149 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 1008, column: 3)
!6150 = !DILocation(line: 1008, column: 3, scope: !6149)
!6151 = !DILocation(line: 1010, column: 14, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 1009, column: 5)
!6153 = !DILocation(line: 1010, column: 19, scope: !6152)
!6154 = !DILocation(line: 1010, column: 12, scope: !6152)
!6155 = !DILocation(line: 1011, column: 13, scope: !6152)
!6156 = !DILocation(line: 1011, column: 7, scope: !6152)
!6157 = !DILocation(line: 1012, column: 5, scope: !6152)
!6158 = !DILocation(line: 1008, column: 21, scope: !6148)
!6159 = !DILocation(line: 1008, column: 19, scope: !6148)
!6160 = !DILocation(line: 1008, column: 3, scope: !6148)
!6161 = distinct !{!6161, !6150, !6162}
!6162 = !DILocation(line: 1012, column: 5, scope: !6149)
!6163 = !DILocation(line: 1013, column: 1, scope: !6139)
!6164 = distinct !DISubprogram(name: "VEC_invariant_p_heap_free", scope: !3, file: !3, line: 174, type: !6165, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!6165 = !DISubroutineType(types: !6166)
!6166 = !{null, !4762}
!6167 = !DILocalVariable(name: "vec_", arg: 1, scope: !6164, file: !3, line: 174, type: !4762)
!6168 = !DILocation(line: 174, column: 1, scope: !6164)
!6169 = !DILocation(line: 174, column: 1, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 174, column: 1)
!6171 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1359, file: !1359, line: 31, type: !6172, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!6172 = !DISubroutineType(types: !6173)
!6173 = !{!796, !6174, !7, !3245}
!6174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6175, size: 64)
!6175 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2055)
!6176 = !DILocalVariable(name: "vec_", arg: 1, scope: !6171, file: !1359, line: 31, type: !6174)
!6177 = !DILocation(line: 31, column: 1, scope: !6171)
!6178 = !DILocalVariable(name: "ix_", arg: 2, scope: !6171, file: !1359, line: 31, type: !7)
!6179 = !DILocalVariable(name: "ptr", arg: 3, scope: !6171, file: !1359, line: 31, type: !3245)
!6180 = !DILocation(line: 31, column: 1, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6171, file: !1359, line: 31, column: 1)
!6182 = !DILocation(line: 31, column: 1, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6181, file: !1359, line: 31, column: 1)
!6184 = !DILocation(line: 31, column: 1, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6181, file: !1359, line: 31, column: 1)
!6186 = distinct !DISubprogram(name: "get_loop", scope: !385, file: !385, line: 417, type: !6187, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!6187 = !DISubroutineType(types: !6188)
!6188 = !{!802, !7}
!6189 = !DILocalVariable(name: "num", arg: 1, scope: !6186, file: !385, line: 417, type: !7)
!6190 = !DILocation(line: 417, column: 20, scope: !6186)
!6191 = !DILocation(line: 419, column: 10, scope: !6186)
!6192 = !DILocation(line: 419, column: 3, scope: !6186)
!6193 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1359, file: !1359, line: 32, type: !6194, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2142)
!6194 = !DISubroutineType(types: !6195)
!6195 = !{null, !6196}
!6196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2050, size: 64)
!6197 = !DILocalVariable(name: "vec_", arg: 1, scope: !6193, file: !1359, line: 32, type: !6196)
!6198 = !DILocation(line: 32, column: 1, scope: !6193)
!6199 = !DILocation(line: 32, column: 1, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6193, file: !1359, line: 32, column: 1)
