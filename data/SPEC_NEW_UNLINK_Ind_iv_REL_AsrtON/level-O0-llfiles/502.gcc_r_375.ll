; ModuleID = 'tree-ssa-pre.c'
source_filename = "tree-ssa-pre.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VEC_bitmap_set_t_heap = type { %struct.VEC_bitmap_set_t_base }
%struct.VEC_bitmap_set_t_base = type { i32, i32, [1 x %struct.bitmap_set*] }
%struct.bitmap_set = type { %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.VEC_unsigned_heap = type { %struct.VEC_unsigned_base }
%struct.VEC_unsigned_base = type { i32, i32, [1 x i32] }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_pre_expr_heap = type { %struct.VEC_pre_expr_base }
%struct.VEC_pre_expr_base = type { i32, i32, [1 x %struct.pre_expr_d*] }
%struct.pre_expr_d = type { i32, i32, %union.pre_expr_union_d }
%union.pre_expr_union_d = type { %union.tree_node* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.anon = type { i32, i32, i32, i32, i32 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.vn_ssa_aux = type { %union.tree_node*, %union.tree_node*, i32, i32, i32, i8 }
%struct.vn_nary_op_s = type { i32, i32, i32, %union.tree_node*, %union.tree_node*, [4 x %union.tree_node*] }
%struct.vn_reference_s = type { i32, i32, %union.tree_node*, i32, %union.tree_node*, %struct.VEC_vn_reference_op_s_heap*, %union.tree_node* }
%struct.VEC_vn_reference_op_s_heap = type { %struct.VEC_vn_reference_op_s_base }
%struct.VEC_vn_reference_op_s_base = type { i32, i32, [1 x %struct.vn_reference_op_struct] }
%struct.vn_reference_op_struct = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.bb_bitmap_sets = type { %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_set*, %struct.bitmap_head_def*, i8 }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.expr_pred_trans_d = type { %struct.pre_expr_d*, %struct.basic_block_def*, %struct.pre_expr_d*, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.ao_ref_s = type { %union.tree_node*, %union.tree_node*, i64, i64, i64, i32, i32 }
%struct.tree_var_decl = type { %struct.tree_decl_with_vis, %struct.var_ann_d* }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.tree_result_decl = type { %struct.tree_decl_with_rtl, %struct.var_ann_d* }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }

@.str = private unnamed_addr constant [15 x i8] c"tree-ssa-pre.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@value_expressions = internal global %struct.VEC_bitmap_set_t_heap* null, align 8, !dbg !0
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%04d\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"pre\00", align 1
@pass_pre = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), i8 ()* @gate_pre, i32 ()* @do_pre, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 69, i32 104, i32 0, i32 0, i32 1048576, i32 16391 } }, align 8, !dbg !2538
@.str.6 = private unnamed_addr constant [4 x i8] c"fre\00", align 1
@pass_fre = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i32 0, i32 0), i8 ()* @gate_fre, i32 ()* @execute_fre, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 71, i32 40, i32 0, i32 0, i32 0, i32 7 } }, align 8, !dbg !2566
@bitmap_set_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !2568
@grand_bitmap_obstack = internal global %struct.bitmap_obstack zeroinitializer, align 8, !dbg !2591
@name_to_id = internal global %struct.VEC_unsigned_heap* null, align 8, !dbg !2593
@expression_to_id = internal global %struct.htab* null, align 8, !dbg !2595
@next_expression_id = internal global i32 0, align 4, !dbg !2597
@expressions = internal global %struct.VEC_pre_expr_heap* null, align 8, !dbg !2599
@cfun = external dso_local global %struct.function*, align 8
@.str.7 = private unnamed_addr constant [5 x i8] c"{%s,\00", align 1
@tree_code_name = external dso_local constant [0 x i8*], align 8
@.str.8 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.15 = private unnamed_addr constant [13 x i8] c"%s[%d] := { \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c" (%04d)\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c" }\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@flag_tree_pre = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@do_partial_partial = internal global i8 0, align 1, !dbg !2601
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.19 = private unnamed_addr constant [8 x i8] c"exp_gen\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"phi_gen\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"tmp_gen\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"avail_out\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"Insertions\00", align 1
@pre_stats = internal global %struct.anon zeroinitializer, align 4, !dbg !2640
@.str.24 = private unnamed_addr constant [12 x i8] c"PA inserted\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"New PHIs\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"Eliminated\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"Constified\00", align 1
@inserted_exprs = internal global %struct.VEC_gimple_heap* null, align 8, !dbg !2603
@.str.28 = private unnamed_addr constant [32 x i8] c"Removing unnecessary insertion:\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.30 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@in_fre = internal global i8 0, align 1, !dbg !2605
@need_creation = internal global %struct.VEC_gimple_heap* null, align 8, !dbg !2607
@pretemp = internal global %union.tree_node* null, align 8, !dbg !2609
@storetemp = internal global %union.tree_node* null, align 8, !dbg !2611
@prephitemp = internal global %union.tree_node* null, align 8, !dbg !2613
@postorder = internal global i32* null, align 8, !dbg !2615
@inserted_phi_names = internal global %struct.bitmap_head_def* null, align 8, !dbg !2617
@phi_translate_table = internal global %struct.htab* null, align 8, !dbg !2619
@.str.31 = private unnamed_addr constant [12 x i8] c"Bitmap sets\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"pre_expr nodes\00", align 1
@pre_expr_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !2621
@need_eh_cleanup = internal global %struct.bitmap_head_def* null, align 8, !dbg !2623
@.str.33 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@has_abnormal_preds = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2625
@changed_blocks = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2638
@.str.34 = private unnamed_addr constant [23 x i8] c"Starting iteration %d\0A\00", align 1
@.str.35 = private unnamed_addr constant [25 x i8] c"compute_antic iterations\00", align 1
@.str.36 = private unnamed_addr constant [33 x i8] c"compute_partial_antic iterations\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"ANTIC_OUT\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"ANTIC_IN\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.40 = private unnamed_addr constant [47 x i8] c"Block %d was deferred for a future iteration.\0A\00", align 1
@.str.41 = private unnamed_addr constant [55 x i8] c"Could not find SSA_NAME representative for expression:\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"pretmp\00", align 1
@.str.43 = private unnamed_addr constant [33 x i8] c"Created SSA_NAME representative \00", align 1
@.str.44 = private unnamed_addr constant [17 x i8] c" for expression:\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.45 = private unnamed_addr constant [7 x i8] c"PA_OUT\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"PA_IN\00", align 1
@.str.47 = private unnamed_addr constant [18 x i8] c"insert iterations\00", align 1
@.str.48 = private unnamed_addr constant [29 x i8] c"Found fully redundant value\0A\00", align 1
@.str.49 = private unnamed_addr constant [41 x i8] c"Found partial redundancy for expression \00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c" (%04d)\0A\00", align 1
@.str.51 = private unnamed_addr constant [84 x i8] c"Skipping insertion of phi for partial redundancy: Looks like an induction variable\0A\00", align 1
@.str.52 = private unnamed_addr constant [10 x i8] c"prephitmp\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"Created phi \00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c" in block %d\0A\00", align 1
@flag_tree_vectorize = external dso_local global i32, align 4
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.55 = private unnamed_addr constant [10 x i8] c"Inserted \00", align 1
@.str.56 = private unnamed_addr constant [20 x i8] c" in predecessor %d\0A\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Replaced \00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c" with \00", align 1
@.str.59 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@VN_TOP = external dso_local global %union.tree_node*, align 8
@.str.60 = private unnamed_addr constant [28 x i8] c"  Removed EH side effects.\0A\00", align 1
@.str.61 = private unnamed_addr constant [25 x i8] c"Deleted redundant store \00", align 1
@.str.62 = private unnamed_addr constant [28 x i8] c"Replacing call target with \00", align 1
@.str.63 = private unnamed_addr constant [38 x i8] c"Replaced redundant PHI node defining \00", align 1
@flag_tree_fre = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_to_value(i32 %v, %struct.pre_expr_d* %e) #0 !dbg !2653 {
entry:
  %v.addr = alloca i32, align 4
  %e.addr = alloca %struct.pre_expr_d*, align 8
  %set = alloca %struct.bitmap_set*, align 8
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !2657, metadata !DIExpression()), !dbg !2658
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !2659, metadata !DIExpression()), !dbg !2660
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set, metadata !2661, metadata !DIExpression()), !dbg !2662
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !2663
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %0), !dbg !2663
  %1 = load i32, i32* %v.addr, align 4, !dbg !2663
  %cmp = icmp eq i32 %call, %1, !dbg !2663
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2663

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 601, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2663
  br label %cond.end, !dbg !2663

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2663
  %2 = load i32, i32* %v.addr, align 4, !dbg !2664
  %3 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2666
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %3, null, !dbg !2666
  br i1 %tobool, label %cond.true1, label %cond.false2, !dbg !2666

cond.true1:                                       ; preds = %cond.end
  %4 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2666
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %4, i32 0, i32 0, !dbg !2666
  br label %cond.end3, !dbg !2666

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !2666

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true1 ], [ null, %cond.false2 ], !dbg !2666
  %call5 = call i32 @VEC_bitmap_set_t_base_length(%struct.VEC_bitmap_set_t_base* %cond4), !dbg !2666
  %cmp6 = icmp uge i32 %2, %call5, !dbg !2667
  br i1 %cmp6, label %if.then, label %if.end, !dbg !2668

if.then:                                          ; preds = %cond.end3
  %5 = load i32, i32* %v.addr, align 4, !dbg !2669
  %add = add i32 %5, 1, !dbg !2669
  call void @VEC_bitmap_set_t_heap_safe_grow_cleared(%struct.VEC_bitmap_set_t_heap** @value_expressions, i32 %add), !dbg !2669
  br label %if.end, !dbg !2671

if.end:                                           ; preds = %if.then, %cond.end3
  %6 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2672
  %tobool7 = icmp ne %struct.VEC_bitmap_set_t_heap* %6, null, !dbg !2672
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !2672

cond.true8:                                       ; preds = %if.end
  %7 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2672
  %base9 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %7, i32 0, i32 0, !dbg !2672
  br label %cond.end11, !dbg !2672

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !2672

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_bitmap_set_t_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !2672
  %8 = load i32, i32* %v.addr, align 4, !dbg !2672
  %call13 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond12, i32 %8), !dbg !2672
  store %struct.bitmap_set* %call13, %struct.bitmap_set** %set, align 8, !dbg !2673
  %9 = load %struct.bitmap_set*, %struct.bitmap_set** %set, align 8, !dbg !2674
  %tobool14 = icmp ne %struct.bitmap_set* %9, null, !dbg !2674
  br i1 %tobool14, label %if.end24, label %if.then15, !dbg !2676

if.then15:                                        ; preds = %cond.end11
  %call16 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !2677
  store %struct.bitmap_set* %call16, %struct.bitmap_set** %set, align 8, !dbg !2679
  %10 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2680
  %tobool17 = icmp ne %struct.VEC_bitmap_set_t_heap* %10, null, !dbg !2680
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !2680

cond.true18:                                      ; preds = %if.then15
  %11 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !2680
  %base19 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %11, i32 0, i32 0, !dbg !2680
  br label %cond.end21, !dbg !2680

cond.false20:                                     ; preds = %if.then15
  br label %cond.end21, !dbg !2680

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_bitmap_set_t_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !2680
  %12 = load i32, i32* %v.addr, align 4, !dbg !2680
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %set, align 8, !dbg !2680
  %call23 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_replace(%struct.VEC_bitmap_set_t_base* %cond22, i32 %12, %struct.bitmap_set* %13), !dbg !2680
  br label %if.end24, !dbg !2681

if.end24:                                         ; preds = %cond.end21, %cond.end11
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %set, align 8, !dbg !2682
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !2683
  %16 = load i32, i32* %v.addr, align 4, !dbg !2684
  call void @bitmap_insert_into_set_1(%struct.bitmap_set* %14, %struct.pre_expr_d* %15, i32 %16, i8 zeroext 1), !dbg !2685
  ret void, !dbg !2686
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_expr_value_id(%struct.pre_expr_d* %expr) #0 !dbg !2687 {
entry:
  %retval = alloca i32, align 4
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %id = alloca i32, align 4
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !2690, metadata !DIExpression()), !dbg !2691
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2692
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !2693
  %1 = load i32, i32* %kind, align 8, !dbg !2693
  switch i32 %1, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb4
    i32 1, label %sw.bb7
    i32 2, label %sw.bb10
  ], !dbg !2694

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %id, metadata !2695, metadata !DIExpression()), !dbg !2698
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2699
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %2, i32 0, i32 2, !dbg !2699
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !2699
  %3 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !2699
  %call = call i32 @get_constant_value_id(%union.tree_node* %3), !dbg !2700
  store i32 %call, i32* %id, align 4, !dbg !2701
  %4 = load i32, i32* %id, align 4, !dbg !2702
  %cmp = icmp eq i32 %4, 0, !dbg !2704
  br i1 %cmp, label %if.then, label %if.end, !dbg !2705

if.then:                                          ; preds = %sw.bb
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2706
  %u1 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 2, !dbg !2706
  %constant2 = bitcast %union.pre_expr_union_d* %u1 to %union.tree_node**, !dbg !2706
  %6 = load %union.tree_node*, %union.tree_node** %constant2, align 8, !dbg !2706
  %call3 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %6), !dbg !2708
  store i32 %call3, i32* %id, align 4, !dbg !2709
  %7 = load i32, i32* %id, align 4, !dbg !2710
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2711
  call void @add_to_value(i32 %7, %struct.pre_expr_d* %8), !dbg !2712
  br label %if.end, !dbg !2713

if.end:                                           ; preds = %if.then, %sw.bb
  %9 = load i32, i32* %id, align 4, !dbg !2714
  store i32 %9, i32* %retval, align 4, !dbg !2715
  br label %return, !dbg !2715

sw.bb4:                                           ; preds = %entry
  %10 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2716
  %u5 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %10, i32 0, i32 2, !dbg !2716
  %name = bitcast %union.pre_expr_union_d* %u5 to %union.tree_node**, !dbg !2716
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !2716
  %call6 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %11), !dbg !2717
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call6, i32 0, i32 2, !dbg !2718
  %12 = load i32, i32* %value_id, align 8, !dbg !2718
  store i32 %12, i32* %retval, align 4, !dbg !2719
  br label %return, !dbg !2719

sw.bb7:                                           ; preds = %entry
  %13 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2720
  %u8 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %13, i32 0, i32 2, !dbg !2720
  %nary = bitcast %union.pre_expr_union_d* %u8 to %struct.vn_nary_op_s**, !dbg !2720
  %14 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !2720
  %value_id9 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %14, i32 0, i32 0, !dbg !2721
  %15 = load i32, i32* %value_id9, align 8, !dbg !2721
  store i32 %15, i32* %retval, align 4, !dbg !2722
  br label %return, !dbg !2722

sw.bb10:                                          ; preds = %entry
  %16 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2723
  %u11 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %16, i32 0, i32 2, !dbg !2723
  %reference = bitcast %union.pre_expr_union_d* %u11 to %struct.vn_reference_s**, !dbg !2723
  %17 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !2723
  %value_id12 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %17, i32 0, i32 0, !dbg !2724
  %18 = load i32, i32* %value_id12, align 8, !dbg !2724
  store i32 %18, i32* %retval, align 4, !dbg !2725
  br label %return, !dbg !2725

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2726
  br label %sw.epilog, !dbg !2727

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %retval, align 4, !dbg !2728
  br label %return, !dbg !2728

return:                                           ; preds = %sw.epilog, %sw.bb10, %sw.bb7, %sw.bb4, %if.end
  %19 = load i32, i32* %retval, align 4, !dbg !2729
  ret i32 %19, !dbg !2729
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_set_t_base_length(%struct.VEC_bitmap_set_t_base* %vec_) #0 !dbg !2730 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_base*, align 8
  store %struct.VEC_bitmap_set_t_base* %vec_, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_base** %vec_.addr, metadata !2735, metadata !DIExpression()), !dbg !2736
  %0 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2736
  %tobool = icmp ne %struct.VEC_bitmap_set_t_base* %0, null, !dbg !2736
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2736

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2736
  %num = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %1, i32 0, i32 0, !dbg !2736
  %2 = load i32, i32* %num, align 8, !dbg !2736
  br label %cond.end, !dbg !2736

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2736

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2736
  ret i32 %cond, !dbg !2736
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_bitmap_set_t_heap_safe_grow_cleared(%struct.VEC_bitmap_set_t_heap** %vec_, i32 %size_) #0 !dbg !2737 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_bitmap_set_t_heap** %vec_, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_heap*** %vec_.addr, metadata !2741, metadata !DIExpression()), !dbg !2742
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !2743, metadata !DIExpression()), !dbg !2742
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !2744, metadata !DIExpression()), !dbg !2742
  %0 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !2742
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %0, align 8, !dbg !2742
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %1, null, !dbg !2742
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2742

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !2742
  %3 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %2, align 8, !dbg !2742
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %3, i32 0, i32 0, !dbg !2742
  br label %cond.end, !dbg !2742

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2742
  %call = call i32 @VEC_bitmap_set_t_base_length(%struct.VEC_bitmap_set_t_base* %cond), !dbg !2742
  store i32 %call, i32* %oldsize, align 4, !dbg !2742
  %4 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !2742
  %5 = load i32, i32* %size_.addr, align 4, !dbg !2742
  call void @VEC_bitmap_set_t_heap_safe_grow(%struct.VEC_bitmap_set_t_heap** %4, i32 %5), !dbg !2742
  %6 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !2742
  %7 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %6, align 8, !dbg !2742
  %tobool1 = icmp ne %struct.VEC_bitmap_set_t_heap* %7, null, !dbg !2742
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2742

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !2742
  %9 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %8, align 8, !dbg !2742
  %base3 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %9, i32 0, i32 0, !dbg !2742
  br label %cond.end5, !dbg !2742

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2742

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_bitmap_set_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !2742
  %call7 = call %struct.bitmap_set** @VEC_bitmap_set_t_base_address(%struct.VEC_bitmap_set_t_base* %cond6), !dbg !2742
  %10 = load i32, i32* %oldsize, align 4, !dbg !2742
  %idxprom = sext i32 %10 to i64, !dbg !2742
  %arrayidx = getelementptr inbounds %struct.bitmap_set*, %struct.bitmap_set** %call7, i64 %idxprom, !dbg !2742
  %11 = bitcast %struct.bitmap_set** %arrayidx to i8*, !dbg !2742
  %12 = load i32, i32* %size_.addr, align 4, !dbg !2742
  %13 = load i32, i32* %oldsize, align 4, !dbg !2742
  %sub = sub nsw i32 %12, %13, !dbg !2742
  %conv = sext i32 %sub to i64, !dbg !2742
  %mul = mul i64 8, %conv, !dbg !2742
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !2742
  ret void, !dbg !2742
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %vec_, i32 %ix_) #0 !dbg !2745 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_bitmap_set_t_base* %vec_, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_base** %vec_.addr, metadata !2748, metadata !DIExpression()), !dbg !2749
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2750, metadata !DIExpression()), !dbg !2749
  %0 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2749
  %tobool = icmp ne %struct.VEC_bitmap_set_t_base* %0, null, !dbg !2749
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2749

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2749
  %2 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2749
  %num = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %2, i32 0, i32 0, !dbg !2749
  %3 = load i32, i32* %num, align 8, !dbg !2749
  %cmp = icmp ult i32 %1, %3, !dbg !2749
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2751
  %land.ext = zext i1 %4 to i32, !dbg !2749
  %5 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2749
  %vec = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %5, i32 0, i32 2, !dbg !2749
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2749
  %idxprom = zext i32 %6 to i64, !dbg !2749
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_set*], [1 x %struct.bitmap_set*]* %vec, i64 0, i64 %idxprom, !dbg !2749
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %arrayidx, align 8, !dbg !2749
  ret %struct.bitmap_set* %7, !dbg !2749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_set* @bitmap_set_new() #0 !dbg !2752 {
entry:
  %ret = alloca %struct.bitmap_set*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %ret, metadata !2755, metadata !DIExpression()), !dbg !2756
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @bitmap_set_pool, align 8, !dbg !2757
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !2758
  %1 = bitcast i8* %call to %struct.bitmap_set*, !dbg !2759
  store %struct.bitmap_set* %1, %struct.bitmap_set** %ret, align 8, !dbg !2756
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !2760
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %ret, align 8, !dbg !2761
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 0, !dbg !2762
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %expressions, align 8, !dbg !2763
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !2764
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %ret, align 8, !dbg !2765
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %3, i32 0, i32 1, !dbg !2766
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %values, align 8, !dbg !2767
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %ret, align 8, !dbg !2768
  ret %struct.bitmap_set* %4, !dbg !2769
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_set* @VEC_bitmap_set_t_base_replace(%struct.VEC_bitmap_set_t_base* %vec_, i32 %ix_, %struct.bitmap_set* %obj_) #0 !dbg !2770 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.bitmap_set*, align 8
  %old_obj_ = alloca %struct.bitmap_set*, align 8
  store %struct.VEC_bitmap_set_t_base* %vec_, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_base** %vec_.addr, metadata !2774, metadata !DIExpression()), !dbg !2775
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2776, metadata !DIExpression()), !dbg !2775
  store %struct.bitmap_set* %obj_, %struct.bitmap_set** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %obj_.addr, metadata !2777, metadata !DIExpression()), !dbg !2775
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %old_obj_, metadata !2778, metadata !DIExpression()), !dbg !2775
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !2775
  %1 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2775
  %num = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %1, i32 0, i32 0, !dbg !2775
  %2 = load i32, i32* %num, align 8, !dbg !2775
  %cmp = icmp ult i32 %0, %2, !dbg !2775
  %conv = zext i1 %cmp to i32, !dbg !2775
  %3 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2775
  %vec = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %3, i32 0, i32 2, !dbg !2775
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !2775
  %idxprom = zext i32 %4 to i64, !dbg !2775
  %arrayidx = getelementptr inbounds [1 x %struct.bitmap_set*], [1 x %struct.bitmap_set*]* %vec, i64 0, i64 %idxprom, !dbg !2775
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %arrayidx, align 8, !dbg !2775
  store %struct.bitmap_set* %5, %struct.bitmap_set** %old_obj_, align 8, !dbg !2775
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %obj_.addr, align 8, !dbg !2775
  %7 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !2775
  %vec1 = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %7, i32 0, i32 2, !dbg !2775
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !2775
  %idxprom2 = zext i32 %8 to i64, !dbg !2775
  %arrayidx3 = getelementptr inbounds [1 x %struct.bitmap_set*], [1 x %struct.bitmap_set*]* %vec1, i64 0, i64 %idxprom2, !dbg !2775
  store %struct.bitmap_set* %6, %struct.bitmap_set** %arrayidx3, align 8, !dbg !2775
  %9 = load %struct.bitmap_set*, %struct.bitmap_set** %old_obj_, align 8, !dbg !2775
  ret %struct.bitmap_set* %9, !dbg !2775
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_insert_into_set_1(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr, i32 %val, i8 zeroext %allow_constants) #0 !dbg !2779 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %val.addr = alloca i32, align 4
  %allow_constants.addr = alloca i8, align 1
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !2782, metadata !DIExpression()), !dbg !2783
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !2784, metadata !DIExpression()), !dbg !2785
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !2786, metadata !DIExpression()), !dbg !2787
  store i8 %allow_constants, i8* %allow_constants.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %allow_constants.addr, metadata !2788, metadata !DIExpression()), !dbg !2789
  %0 = load i8, i8* %allow_constants.addr, align 1, !dbg !2790
  %conv = zext i8 %0 to i32, !dbg !2790
  %tobool = icmp ne i32 %conv, 0, !dbg !2790
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !2792

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %val.addr, align 4, !dbg !2793
  %call = call zeroext i8 @value_id_constant_p(i32 %1), !dbg !2794
  %tobool1 = icmp ne i8 %call, 0, !dbg !2794
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2795

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !2796
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !2798
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !2798
  %4 = load i32, i32* %val.addr, align 4, !dbg !2799
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %4), !dbg !2800
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !2801
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %5, i32 0, i32 0, !dbg !2802
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !2802
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2803
  %call3 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %7), !dbg !2804
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %call3), !dbg !2805
  br label %if.end, !dbg !2806

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !2807
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_pre_expr(%struct.pre_expr_d* %e) #0 !dbg !2808 {
entry:
  %e.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !2811, metadata !DIExpression()), !dbg !2812
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2813
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !2814
  call void @print_pre_expr(%struct._IO_FILE* %0, %struct.pre_expr_d* %1), !dbg !2815
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2816
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !2817
  ret void, !dbg !2818
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_pre_expr(%struct._IO_FILE* %outfile, %struct.pre_expr_d* %expr) #0 !dbg !2819 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %i16 = alloca i32, align 4
  %ref = alloca %struct.vn_reference_s*, align 8
  %closebrace = alloca i8, align 1
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !2874, metadata !DIExpression()), !dbg !2875
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2878
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !2879
  %1 = load i32, i32* %kind, align 8, !dbg !2879
  switch i32 %1, label %sw.epilog [
    i32 3, label %sw.bb
    i32 0, label %sw.bb1
    i32 1, label %sw.bb3
    i32 2, label %sw.bb15
  ], !dbg !2880

sw.bb:                                            ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2881
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2883
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 2, !dbg !2883
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !2883
  %4 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !2883
  call void @print_generic_expr(%struct._IO_FILE* %2, %union.tree_node* %4, i32 0), !dbg !2884
  br label %sw.epilog, !dbg !2885

sw.bb1:                                           ; preds = %entry
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2886
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2887
  %u2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %6, i32 0, i32 2, !dbg !2887
  %name = bitcast %union.pre_expr_union_d* %u2 to %union.tree_node**, !dbg !2887
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !2887
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %7, i32 0), !dbg !2888
  br label %sw.epilog, !dbg !2889

sw.bb3:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2890, metadata !DIExpression()), !dbg !2892
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !2893, metadata !DIExpression()), !dbg !2894
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2895
  %u4 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %8, i32 0, i32 2, !dbg !2895
  %nary5 = bitcast %union.pre_expr_union_d* %u4 to %struct.vn_nary_op_s**, !dbg !2895
  %9 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary5, align 8, !dbg !2895
  store %struct.vn_nary_op_s* %9, %struct.vn_nary_op_s** %nary, align 8, !dbg !2894
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2896
  %11 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !2897
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %11, i32 0, i32 1, !dbg !2898
  %bf.load = load i32, i32* %opcode, align 4, !dbg !2898
  %bf.clear = and i32 %bf.load, 65535, !dbg !2898
  %idxprom = zext i32 %bf.clear to i64, !dbg !2899
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom, !dbg !2899
  %12 = load i8*, i8** %arrayidx, align 8, !dbg !2899
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i8* %12), !dbg !2900
  store i32 0, i32* %i, align 4, !dbg !2901
  br label %for.cond, !dbg !2903

for.cond:                                         ; preds = %for.inc, %sw.bb3
  %13 = load i32, i32* %i, align 4, !dbg !2904
  %14 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !2906
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %14, i32 0, i32 1, !dbg !2907
  %bf.load6 = load i32, i32* %length, align 4, !dbg !2907
  %bf.lshr = lshr i32 %bf.load6, 16, !dbg !2907
  %cmp = icmp ult i32 %13, %bf.lshr, !dbg !2908
  br i1 %cmp, label %for.body, label %for.end, !dbg !2909

for.body:                                         ; preds = %for.cond
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2910
  %16 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !2912
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %16, i32 0, i32 5, !dbg !2913
  %17 = load i32, i32* %i, align 4, !dbg !2914
  %idxprom7 = zext i32 %17 to i64, !dbg !2912
  %arrayidx8 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom7, !dbg !2912
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !2912
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %18, i32 0), !dbg !2915
  %19 = load i32, i32* %i, align 4, !dbg !2916
  %20 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !2918
  %length9 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %20, i32 0, i32 1, !dbg !2919
  %bf.load10 = load i32, i32* %length9, align 4, !dbg !2919
  %bf.lshr11 = lshr i32 %bf.load10, 16, !dbg !2919
  %sub = sub i32 %bf.lshr11, 1, !dbg !2920
  %cmp12 = icmp ne i32 %19, %sub, !dbg !2921
  br i1 %cmp12, label %if.then, label %if.end, !dbg !2922

if.then:                                          ; preds = %for.body
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2923
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !2924
  br label %if.end, !dbg !2924

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2925

for.inc:                                          ; preds = %if.end
  %22 = load i32, i32* %i, align 4, !dbg !2926
  %inc = add i32 %22, 1, !dbg !2926
  store i32 %inc, i32* %i, align 4, !dbg !2926
  br label %for.cond, !dbg !2927, !llvm.loop !2928

for.end:                                          ; preds = %for.cond
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2930
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !2931
  br label %sw.epilog, !dbg !2932

sw.bb15:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !2933, metadata !DIExpression()), !dbg !2937
  call void @llvm.dbg.declare(metadata i32* %i16, metadata !2938, metadata !DIExpression()), !dbg !2939
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !2940, metadata !DIExpression()), !dbg !2941
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !2942
  %u17 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %24, i32 0, i32 2, !dbg !2942
  %reference = bitcast %union.pre_expr_union_d* %u17 to %struct.vn_reference_s**, !dbg !2942
  %25 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !2942
  store %struct.vn_reference_s* %25, %struct.vn_reference_s** %ref, align 8, !dbg !2941
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2943
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !2944
  store i32 0, i32* %i16, align 4, !dbg !2945
  br label %for.cond19, !dbg !2947

for.cond19:                                       ; preds = %for.inc73, %sw.bb15
  %27 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !2948
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %27, i32 0, i32 5, !dbg !2948
  %28 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !2948
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %28, null, !dbg !2948
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2948

cond.true:                                        ; preds = %for.cond19
  %29 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !2948
  %operands20 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %29, i32 0, i32 5, !dbg !2948
  %30 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands20, align 8, !dbg !2948
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %30, i32 0, i32 0, !dbg !2948
  br label %cond.end, !dbg !2948

cond.false:                                       ; preds = %for.cond19
  br label %cond.end, !dbg !2948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2948
  %31 = load i32, i32* %i16, align 4, !dbg !2948
  %call21 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %31, %struct.vn_reference_op_struct** %vro), !dbg !2948
  %tobool22 = icmp ne i32 %call21, 0, !dbg !2950
  br i1 %tobool22, label %for.body23, label %for.end75, !dbg !2950

for.body23:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %closebrace, metadata !2951, metadata !DIExpression()), !dbg !2953
  store i8 0, i8* %closebrace, align 1, !dbg !2953
  %32 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2954
  %opcode24 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %32, i32 0, i32 0, !dbg !2956
  %33 = load i32, i32* %opcode24, align 8, !dbg !2956
  %cmp25 = icmp ne i32 %33, 141, !dbg !2957
  br i1 %cmp25, label %land.lhs.true, label %if.end39, !dbg !2958

land.lhs.true:                                    ; preds = %for.body23
  %34 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2959
  %opcode26 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %34, i32 0, i32 0, !dbg !2959
  %35 = load i32, i32* %opcode26, align 8, !dbg !2959
  %idxprom27 = sext i32 %35 to i64, !dbg !2959
  %arrayidx28 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom27, !dbg !2959
  %36 = load i32, i32* %arrayidx28, align 4, !dbg !2959
  %cmp29 = icmp ne i32 %36, 3, !dbg !2960
  br i1 %cmp29, label %if.then30, label %if.end39, !dbg !2961

if.then30:                                        ; preds = %land.lhs.true
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2962
  %38 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2964
  %opcode31 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %38, i32 0, i32 0, !dbg !2965
  %39 = load i32, i32* %opcode31, align 8, !dbg !2965
  %idxprom32 = zext i32 %39 to i64, !dbg !2966
  %arrayidx33 = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom32, !dbg !2966
  %40 = load i8*, i8** %arrayidx33, align 8, !dbg !2966
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %40), !dbg !2967
  %41 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2968
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %41, i32 0, i32 2, !dbg !2970
  %42 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !2970
  %tobool35 = icmp ne %union.tree_node* %42, null, !dbg !2968
  br i1 %tobool35, label %if.then36, label %if.end38, !dbg !2971

if.then36:                                        ; preds = %if.then30
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2972
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)), !dbg !2974
  store i8 1, i8* %closebrace, align 1, !dbg !2975
  br label %if.end38, !dbg !2976

if.end38:                                         ; preds = %if.then36, %if.then30
  br label %if.end39, !dbg !2977

if.end39:                                         ; preds = %if.end38, %land.lhs.true, %for.body23
  %44 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2978
  %op040 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %44, i32 0, i32 2, !dbg !2980
  %45 = load %union.tree_node*, %union.tree_node** %op040, align 8, !dbg !2980
  %tobool41 = icmp ne %union.tree_node* %45, null, !dbg !2978
  br i1 %tobool41, label %if.then42, label %if.end54, !dbg !2981

if.then42:                                        ; preds = %if.end39
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2982
  %47 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2984
  %op043 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %47, i32 0, i32 2, !dbg !2985
  %48 = load %union.tree_node*, %union.tree_node** %op043, align 8, !dbg !2985
  call void @print_generic_expr(%struct._IO_FILE* %46, %union.tree_node* %48, i32 0), !dbg !2986
  %49 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2987
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %49, i32 0, i32 3, !dbg !2989
  %50 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !2989
  %tobool44 = icmp ne %union.tree_node* %50, null, !dbg !2987
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !2990

if.then45:                                        ; preds = %if.then42
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2991
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !2993
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !2994
  %53 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2995
  %op147 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %53, i32 0, i32 3, !dbg !2996
  %54 = load %union.tree_node*, %union.tree_node** %op147, align 8, !dbg !2996
  call void @print_generic_expr(%struct._IO_FILE* %52, %union.tree_node* %54, i32 0), !dbg !2997
  br label %if.end48, !dbg !2998

if.end48:                                         ; preds = %if.then45, %if.then42
  %55 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !2999
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %55, i32 0, i32 4, !dbg !3001
  %56 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !3001
  %tobool49 = icmp ne %union.tree_node* %56, null, !dbg !2999
  br i1 %tobool49, label %if.then50, label %if.end53, !dbg !3002

if.then50:                                        ; preds = %if.end48
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3003
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3005
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3006
  %59 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !3007
  %op252 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %59, i32 0, i32 4, !dbg !3008
  %60 = load %union.tree_node*, %union.tree_node** %op252, align 8, !dbg !3008
  call void @print_generic_expr(%struct._IO_FILE* %58, %union.tree_node* %60, i32 0), !dbg !3009
  br label %if.end53, !dbg !3010

if.end53:                                         ; preds = %if.then50, %if.end48
  br label %if.end54, !dbg !3011

if.end54:                                         ; preds = %if.end53, %if.end39
  %61 = load i8, i8* %closebrace, align 1, !dbg !3012
  %tobool55 = icmp ne i8 %61, 0, !dbg !3012
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !3014

if.then56:                                        ; preds = %if.end54
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3015
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)), !dbg !3016
  br label %if.end58, !dbg !3016

if.end58:                                         ; preds = %if.then56, %if.end54
  %63 = load i32, i32* %i16, align 4, !dbg !3017
  %64 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !3019
  %operands59 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %64, i32 0, i32 5, !dbg !3019
  %65 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands59, align 8, !dbg !3019
  %tobool60 = icmp ne %struct.VEC_vn_reference_op_s_heap* %65, null, !dbg !3019
  br i1 %tobool60, label %cond.true61, label %cond.false64, !dbg !3019

cond.true61:                                      ; preds = %if.end58
  %66 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !3019
  %operands62 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %66, i32 0, i32 5, !dbg !3019
  %67 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands62, align 8, !dbg !3019
  %base63 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %67, i32 0, i32 0, !dbg !3019
  br label %cond.end65, !dbg !3019

cond.false64:                                     ; preds = %if.end58
  br label %cond.end65, !dbg !3019

cond.end65:                                       ; preds = %cond.false64, %cond.true61
  %cond66 = phi %struct.VEC_vn_reference_op_s_base* [ %base63, %cond.true61 ], [ null, %cond.false64 ], !dbg !3019
  %call67 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond66), !dbg !3019
  %sub68 = sub i32 %call67, 1, !dbg !3020
  %cmp69 = icmp ne i32 %63, %sub68, !dbg !3021
  br i1 %cmp69, label %if.then70, label %if.end72, !dbg !3022

if.then70:                                        ; preds = %cond.end65
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3023
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)), !dbg !3024
  br label %if.end72, !dbg !3024

if.end72:                                         ; preds = %if.then70, %cond.end65
  br label %for.inc73, !dbg !3025

for.inc73:                                        ; preds = %if.end72
  %69 = load i32, i32* %i16, align 4, !dbg !3026
  %inc74 = add i32 %69, 1, !dbg !3026
  store i32 %inc74, i32* %i16, align 4, !dbg !3026
  br label %for.cond19, !dbg !3027, !llvm.loop !3028

for.end75:                                        ; preds = %cond.end
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3030
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3031
  %71 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !3032
  %vuse = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %71, i32 0, i32 2, !dbg !3034
  %72 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !3034
  %tobool77 = icmp ne %union.tree_node* %72, null, !dbg !3032
  br i1 %tobool77, label %if.then78, label %if.end81, !dbg !3035

if.then78:                                        ; preds = %for.end75
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3036
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !3038
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3039
  %75 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !3040
  %vuse80 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %75, i32 0, i32 2, !dbg !3041
  %76 = load %union.tree_node*, %union.tree_node** %vuse80, align 8, !dbg !3041
  call void @print_generic_expr(%struct._IO_FILE* %74, %union.tree_node* %76, i32 0), !dbg !3042
  br label %if.end81, !dbg !3043

if.end81:                                         ; preds = %if.then78, %for.end75
  br label %sw.epilog, !dbg !3044

sw.epilog:                                        ; preds = %entry, %if.end81, %for.end, %sw.bb1, %sw.bb
  ret void, !dbg !3045
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_bitmap_set(%struct.bitmap_set* %set) #0 !dbg !3046 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !3049, metadata !DIExpression()), !dbg !3050
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3051
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !3052
  call void @print_bitmap_set(%struct._IO_FILE* %0, %struct.bitmap_set* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 0), !dbg !3053
  ret void, !dbg !3054
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_bitmap_set(%struct._IO_FILE* %outfile, %struct.bitmap_set* %set, i8* %setname, i32 %blockindex) #0 !dbg !3055 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %set.addr = alloca %struct.bitmap_set*, align 8
  %setname.addr = alloca i8*, align 8
  %blockindex.addr = alloca i32, align 4
  %first = alloca i8, align 1
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !3058, metadata !DIExpression()), !dbg !3059
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !3060, metadata !DIExpression()), !dbg !3061
  store i8* %setname, i8** %setname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %setname.addr, metadata !3062, metadata !DIExpression()), !dbg !3063
  store i32 %blockindex, i32* %blockindex.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %blockindex.addr, metadata !3064, metadata !DIExpression()), !dbg !3065
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3066
  %1 = load i8*, i8** %setname.addr, align 8, !dbg !3067
  %2 = load i32, i32* %blockindex.addr, align 4, !dbg !3068
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* %1, i32 %2), !dbg !3069
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !3070
  %tobool = icmp ne %struct.bitmap_set* %3, null, !dbg !3070
  br i1 %tobool, label %if.then, label %if.end9, !dbg !3072

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %first, metadata !3073, metadata !DIExpression()), !dbg !3075
  store i8 1, i8* %first, align 1, !dbg !3075
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3076, metadata !DIExpression()), !dbg !3077
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3078, metadata !DIExpression()), !dbg !3086
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !3087
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 0, !dbg !3087
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !3087
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !3087
  br label %for.cond, !dbg !3087

for.cond:                                         ; preds = %for.inc, %if.then
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3089
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3087
  br i1 %tobool2, label %for.body, label %for.end, !dbg !3087

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !3091, metadata !DIExpression()), !dbg !3093
  %6 = load i32, i32* %i, align 4, !dbg !3094
  %call3 = call %struct.pre_expr_d* @expression_for_id(i32 %6), !dbg !3095
  store %struct.pre_expr_d* %call3, %struct.pre_expr_d** %expr, align 8, !dbg !3093
  %7 = load i8, i8* %first, align 1, !dbg !3096
  %tobool4 = icmp ne i8 %7, 0, !dbg !3096
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !3098

if.then5:                                         ; preds = %for.body
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3099
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0)), !dbg !3100
  br label %if.end, !dbg !3100

if.end:                                           ; preds = %if.then5, %for.body
  store i8 0, i8* %first, align 1, !dbg !3101
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3102
  %10 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !3103
  call void @print_pre_expr(%struct._IO_FILE* %9, %struct.pre_expr_d* %10), !dbg !3104
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3105
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !3106
  %call7 = call i32 @get_expr_value_id(%struct.pre_expr_d* %12), !dbg !3107
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i32 %call7), !dbg !3108
  br label %for.inc, !dbg !3109

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3089
  br label %for.cond, !dbg !3089, !llvm.loop !3110

for.end:                                          ; preds = %for.cond
  br label %if.end9, !dbg !3112

if.end9:                                          ; preds = %for.end, %entry
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3113
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)), !dbg !3114
  ret void, !dbg !3115
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_value_expressions(%struct._IO_FILE* %outfile, i32 %val) #0 !dbg !3116 {
entry:
  %outfile.addr = alloca %struct._IO_FILE*, align 8
  %val.addr = alloca i32, align 4
  %set = alloca %struct.bitmap_set*, align 8
  %s = alloca [10 x i8], align 1
  store %struct._IO_FILE* %outfile, %struct._IO_FILE** %outfile.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %outfile.addr, metadata !3119, metadata !DIExpression()), !dbg !3120
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !3121, metadata !DIExpression()), !dbg !3122
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set, metadata !3123, metadata !DIExpression()), !dbg !3124
  %0 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !3125
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %0, null, !dbg !3125
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3125

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !3125
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %1, i32 0, i32 0, !dbg !3125
  br label %cond.end, !dbg !3125

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3125

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3125
  %2 = load i32, i32* %val.addr, align 4, !dbg !3125
  %call = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %2), !dbg !3125
  store %struct.bitmap_set* %call, %struct.bitmap_set** %set, align 8, !dbg !3124
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set, align 8, !dbg !3126
  %tobool1 = icmp ne %struct.bitmap_set* %3, null, !dbg !3126
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3128

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata [10 x i8]* %s, metadata !3129, metadata !DIExpression()), !dbg !3134
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %s, i64 0, i64 0, !dbg !3135
  %4 = load i32, i32* %val.addr, align 4, !dbg !3136
  %call2 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 %4), !dbg !3137
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %outfile.addr, align 8, !dbg !3138
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %set, align 8, !dbg !3139
  %arraydecay3 = getelementptr inbounds [10 x i8], [10 x i8]* %s, i64 0, i64 0, !dbg !3140
  call void @print_bitmap_set(%struct._IO_FILE* %5, %struct.bitmap_set* %6, i8* %arraydecay3, i32 0), !dbg !3141
  br label %if.end, !dbg !3142

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !3143
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_value_expressions(i32 %val) #0 !dbg !3144 {
entry:
  %val.addr = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !3147, metadata !DIExpression()), !dbg !3148
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3149
  %1 = load i32, i32* %val.addr, align 4, !dbg !3150
  call void @print_value_expressions(%struct._IO_FILE* %0, i32 %1), !dbg !3151
  ret void, !dbg !3152
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_pre() #0 !dbg !3153 {
entry:
  %0 = load i32, i32* @flag_tree_pre, align 4, !dbg !3154
  %cmp = icmp ne i32 %0, 0, !dbg !3155
  %conv = zext i1 %cmp to i32, !dbg !3155
  %conv1 = trunc i32 %conv to i8, !dbg !3154
  ret i8 %conv1, !dbg !3156
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_pre() #0 !dbg !3157 {
entry:
  %call = call i32 @execute_pre(i8 zeroext 0), !dbg !3158
  ret i32 %call, !dbg !3159
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_fre() #0 !dbg !3160 {
entry:
  %0 = load i32, i32* @flag_tree_fre, align 4, !dbg !3161
  %cmp = icmp ne i32 %0, 0, !dbg !3162
  %conv = zext i1 %cmp to i32, !dbg !3162
  %conv1 = trunc i32 %conv to i8, !dbg !3161
  ret i8 %conv1, !dbg !3163
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_fre() #0 !dbg !3164 {
entry:
  %call = call i32 @execute_pre(i8 zeroext 1), !dbg !3165
  ret i32 %call, !dbg !3166
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_bitmap_set_t_heap_safe_grow(%struct.VEC_bitmap_set_t_heap** %vec_, i32 %size_) #0 !dbg !3167 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_bitmap_set_t_heap** %vec_, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_heap*** %vec_.addr, metadata !3168, metadata !DIExpression()), !dbg !3169
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3170, metadata !DIExpression()), !dbg !3169
  %0 = load i32, i32* %size_.addr, align 4, !dbg !3169
  %cmp = icmp sge i32 %0, 0, !dbg !3169
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3169

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %2 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %1, align 8, !dbg !3169
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %2, null, !dbg !3169
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3169

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %4 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %3, align 8, !dbg !3169
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %4, i32 0, i32 0, !dbg !3169
  br label %cond.end, !dbg !3169

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !3169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3169
  %call = call i32 @VEC_bitmap_set_t_base_length(%struct.VEC_bitmap_set_t_base* %cond), !dbg !3169
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3169
  %cmp1 = icmp ule i32 %call, %5, !dbg !3169
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !3171
  %land.ext = zext i1 %6 to i32, !dbg !3169
  %7 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %8 = load i32, i32* %size_.addr, align 4, !dbg !3169
  %9 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %10 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %9, align 8, !dbg !3169
  %tobool2 = icmp ne %struct.VEC_bitmap_set_t_heap* %10, null, !dbg !3169
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !3169

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %12 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %11, align 8, !dbg !3169
  %tobool4 = icmp ne %struct.VEC_bitmap_set_t_heap* %12, null, !dbg !3169
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3169

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %14 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %13, align 8, !dbg !3169
  %base6 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %14, i32 0, i32 0, !dbg !3169
  br label %cond.end8, !dbg !3169

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !3169

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_bitmap_set_t_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3169
  %num = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %cond9, i32 0, i32 0, !dbg !3169
  %15 = load i32, i32* %num, align 8, !dbg !3169
  br label %cond.end11, !dbg !3169

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !3169

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !3169
  %sub = sub nsw i32 %8, %cond12, !dbg !3169
  %call13 = call i32 @VEC_bitmap_set_t_heap_reserve_exact(%struct.VEC_bitmap_set_t_heap** %7, i32 %sub), !dbg !3169
  %16 = load i32, i32* %size_.addr, align 4, !dbg !3169
  %17 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %18 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %17, align 8, !dbg !3169
  %tobool14 = icmp ne %struct.VEC_bitmap_set_t_heap* %18, null, !dbg !3169
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !3169

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3169
  %20 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %19, align 8, !dbg !3169
  %base16 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %20, i32 0, i32 0, !dbg !3169
  br label %cond.end18, !dbg !3169

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !3169

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_bitmap_set_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !3169
  %num20 = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %cond19, i32 0, i32 0, !dbg !3169
  store i32 %16, i32* %num20, align 8, !dbg !3169
  ret void, !dbg !3169
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_set** @VEC_bitmap_set_t_base_address(%struct.VEC_bitmap_set_t_base* %vec_) #0 !dbg !3172 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_base*, align 8
  store %struct.VEC_bitmap_set_t_base* %vec_, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_base** %vec_.addr, metadata !3176, metadata !DIExpression()), !dbg !3177
  %0 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !3177
  %tobool = icmp ne %struct.VEC_bitmap_set_t_base* %0, null, !dbg !3177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3177

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !3177
  %vec = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %1, i32 0, i32 2, !dbg !3177
  %arraydecay = getelementptr inbounds [1 x %struct.bitmap_set*], [1 x %struct.bitmap_set*]* %vec, i64 0, i64 0, !dbg !3177
  br label %cond.end, !dbg !3177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.bitmap_set** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !3177
  ret %struct.bitmap_set** %cond, !dbg !3177
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_set_t_heap_reserve_exact(%struct.VEC_bitmap_set_t_heap** %vec_, i32 %alloc_) #0 !dbg !3178 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_bitmap_set_t_heap** %vec_, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_heap*** %vec_.addr, metadata !3181, metadata !DIExpression()), !dbg !3182
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3183, metadata !DIExpression()), !dbg !3182
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3184, metadata !DIExpression()), !dbg !3182
  %0 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3182
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %0, align 8, !dbg !3182
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %1, null, !dbg !3182
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3182

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3182
  %3 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %2, align 8, !dbg !3182
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %3, i32 0, i32 0, !dbg !3182
  br label %cond.end, !dbg !3182

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3182
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3182
  %call = call i32 @VEC_bitmap_set_t_base_space(%struct.VEC_bitmap_set_t_base* %cond, i32 %4), !dbg !3182
  %tobool1 = icmp ne i32 %call, 0, !dbg !3182
  %lnot = xor i1 %tobool1, true, !dbg !3182
  %lnot.ext = zext i1 %lnot to i32, !dbg !3182
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3182
  %5 = load i32, i32* %extend, align 4, !dbg !3185
  %tobool2 = icmp ne i32 %5, 0, !dbg !3185
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3182

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3185
  %7 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %6, align 8, !dbg !3185
  %8 = bitcast %struct.VEC_bitmap_set_t_heap* %7 to i8*, !dbg !3185
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3185
  %call3 = call i8* @vec_heap_p_reserve_exact(i8* %8, i32 %9), !dbg !3185
  %10 = bitcast i8* %call3 to %struct.VEC_bitmap_set_t_heap*, !dbg !3185
  %11 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !3185
  store %struct.VEC_bitmap_set_t_heap* %10, %struct.VEC_bitmap_set_t_heap** %11, align 8, !dbg !3185
  br label %if.end, !dbg !3185

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3182
  ret i32 %12, !dbg !3182
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_bitmap_set_t_base_space(%struct.VEC_bitmap_set_t_base* %vec_, i32 %alloc_) #0 !dbg !3187 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_bitmap_set_t_base* %vec_, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_base** %vec_.addr, metadata !3190, metadata !DIExpression()), !dbg !3191
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3192, metadata !DIExpression()), !dbg !3191
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3191
  %cmp = icmp sge i32 %0, 0, !dbg !3191
  %conv = zext i1 %cmp to i32, !dbg !3191
  %1 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !3191
  %tobool = icmp ne %struct.VEC_bitmap_set_t_base* %1, null, !dbg !3191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3191

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !3191
  %alloc = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %2, i32 0, i32 1, !dbg !3191
  %3 = load i32, i32* %alloc, align 4, !dbg !3191
  %4 = load %struct.VEC_bitmap_set_t_base*, %struct.VEC_bitmap_set_t_base** %vec_.addr, align 8, !dbg !3191
  %num = getelementptr inbounds %struct.VEC_bitmap_set_t_base, %struct.VEC_bitmap_set_t_base* %4, i32 0, i32 0, !dbg !3191
  %5 = load i32, i32* %num, align 8, !dbg !3191
  %sub = sub i32 %3, %5, !dbg !3191
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !3191
  %cmp1 = icmp uge i32 %sub, %6, !dbg !3191
  %conv2 = zext i1 %cmp1 to i32, !dbg !3191
  br label %cond.end, !dbg !3191

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !3191
  %tobool3 = icmp ne i32 %7, 0, !dbg !3191
  %lnot = xor i1 %tobool3, true, !dbg !3191
  %lnot.ext = zext i1 %lnot to i32, !dbg !3191
  br label %cond.end, !dbg !3191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3191
  ret i32 %cond, !dbg !3191
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local i32 @get_constant_value_id(%union.tree_node*) #2

declare dso_local i32 @get_or_alloc_constant_value_id(%union.tree_node*) #2

declare dso_local %struct.vn_ssa_aux* @VN_INFO(%union.tree_node*) #2

declare dso_local zeroext i8 @value_id_constant_p(i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %expr) #0 !dbg !3193 {
entry:
  %retval = alloca i32, align 4
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %id = alloca i32, align 4
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !3194, metadata !DIExpression()), !dbg !3195
  call void @llvm.dbg.declare(metadata i32* %id, metadata !3196, metadata !DIExpression()), !dbg !3197
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3198
  %call = call i32 @lookup_expression_id(%struct.pre_expr_d* %0), !dbg !3199
  store i32 %call, i32* %id, align 4, !dbg !3197
  %1 = load i32, i32* %id, align 4, !dbg !3200
  %cmp = icmp eq i32 %1, 0, !dbg !3202
  br i1 %cmp, label %if.then, label %if.end, !dbg !3203

if.then:                                          ; preds = %entry
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3204
  %call1 = call i32 @alloc_expression_id(%struct.pre_expr_d* %2), !dbg !3205
  store i32 %call1, i32* %retval, align 4, !dbg !3206
  br label %return, !dbg !3206

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %id, align 4, !dbg !3207
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3208
  %id2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %4, i32 0, i32 1, !dbg !3209
  store i32 %3, i32* %id2, align 4, !dbg !3210
  store i32 %3, i32* %retval, align 4, !dbg !3211
  br label %return, !dbg !3211

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !3212
  ret i32 %5, !dbg !3212
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lookup_expression_id(%struct.pre_expr_d* %expr) #0 !dbg !3213 {
entry:
  %retval = alloca i32, align 4
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %slot = alloca i8**, align 8
  %version = alloca i32, align 4
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !3216, metadata !DIExpression()), !dbg !3217
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3218, metadata !DIExpression()), !dbg !3219
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3220
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !3222
  %1 = load i32, i32* %kind, align 8, !dbg !3222
  %cmp = icmp eq i32 %1, 0, !dbg !3223
  br i1 %cmp, label %if.then, label %if.else, !dbg !3224

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %version, metadata !3225, metadata !DIExpression()), !dbg !3227
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3228
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %2, i32 0, i32 2, !dbg !3228
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !3228
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3228
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !3228
  %version1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3228
  %4 = load i32, i32* %version1, align 8, !dbg !3228
  store i32 %4, i32* %version, align 4, !dbg !3227
  %5 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3229
  %tobool = icmp ne %struct.VEC_unsigned_heap* %5, null, !dbg !3229
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3229

cond.true:                                        ; preds = %if.then
  %6 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3229
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %6, i32 0, i32 0, !dbg !3229
  br label %cond.end, !dbg !3229

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3229
  %call = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond), !dbg !3229
  %7 = load i32, i32* %version, align 4, !dbg !3231
  %cmp2 = icmp ule i32 %call, %7, !dbg !3232
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !3233

if.then3:                                         ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !3234
  br label %return, !dbg !3234

if.end:                                           ; preds = %cond.end
  %8 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3235
  %tobool4 = icmp ne %struct.VEC_unsigned_heap* %8, null, !dbg !3235
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3235

cond.true5:                                       ; preds = %if.end
  %9 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3235
  %base6 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %9, i32 0, i32 0, !dbg !3235
  br label %cond.end8, !dbg !3235

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3235

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_unsigned_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3235
  %10 = load i32, i32* %version, align 4, !dbg !3235
  %call10 = call i32 @VEC_unsigned_base_index(%struct.VEC_unsigned_base* %cond9, i32 %10), !dbg !3235
  store i32 %call10, i32* %retval, align 4, !dbg !3236
  br label %return, !dbg !3236

if.else:                                          ; preds = %entry
  %11 = load %struct.htab*, %struct.htab** @expression_to_id, align 8, !dbg !3237
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3239
  %13 = bitcast %struct.pre_expr_d* %12 to i8*, !dbg !3239
  %call11 = call i8** @htab_find_slot(%struct.htab* %11, i8* %13, i32 0), !dbg !3240
  store i8** %call11, i8*** %slot, align 8, !dbg !3241
  %14 = load i8**, i8*** %slot, align 8, !dbg !3242
  %tobool12 = icmp ne i8** %14, null, !dbg !3242
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3244

if.then13:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !3245
  br label %return, !dbg !3245

if.end14:                                         ; preds = %if.else
  %15 = load i8**, i8*** %slot, align 8, !dbg !3246
  %16 = load i8*, i8** %15, align 8, !dbg !3247
  %17 = bitcast i8* %16 to %struct.pre_expr_d*, !dbg !3248
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %17, i32 0, i32 1, !dbg !3249
  %18 = load i32, i32* %id, align 4, !dbg !3249
  store i32 %18, i32* %retval, align 4, !dbg !3250
  br label %return, !dbg !3250

return:                                           ; preds = %if.end14, %if.then13, %cond.end8, %if.then3
  %19 = load i32, i32* %retval, align 4, !dbg !3251
  ret i32 %19, !dbg !3251
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alloc_expression_id(%struct.pre_expr_d* %expr) #0 !dbg !3252 {
entry:
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %slot = alloca i8**, align 8
  %version = alloca i32, align 4
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !3253, metadata !DIExpression()), !dbg !3254
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3255, metadata !DIExpression()), !dbg !3256
  %0 = load i32, i32* @next_expression_id, align 4, !dbg !3257
  %add = add i32 %0, 1, !dbg !3257
  %1 = load i32, i32* @next_expression_id, align 4, !dbg !3257
  %cmp = icmp ugt i32 %add, %1, !dbg !3257
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3257

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 254, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3257
  br label %cond.end, !dbg !3257

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3257

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3257
  %2 = load i32, i32* @next_expression_id, align 4, !dbg !3258
  %inc = add i32 %2, 1, !dbg !3258
  store i32 %inc, i32* @next_expression_id, align 4, !dbg !3258
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3259
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 1, !dbg !3260
  store i32 %2, i32* %id, align 4, !dbg !3261
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3262
  %call = call %struct.pre_expr_d** @VEC_pre_expr_heap_safe_push(%struct.VEC_pre_expr_heap** @expressions, %struct.pre_expr_d* %4), !dbg !3262
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3263
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 0, !dbg !3265
  %6 = load i32, i32* %kind, align 8, !dbg !3265
  %cmp1 = icmp eq i32 %6, 0, !dbg !3266
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3267

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %version, metadata !3268, metadata !DIExpression()), !dbg !3270
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3271
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 2, !dbg !3271
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !3271
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3271
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !3271
  %version2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !3271
  %9 = load i32, i32* %version2, align 8, !dbg !3271
  store i32 %9, i32* %version, align 4, !dbg !3270
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3272
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3272
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3272
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3272
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !3272
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3272
  %tobool = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !3272
  br i1 %tobool, label %cond.true3, label %cond.false7, !dbg !3272

cond.true3:                                       ; preds = %if.then
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3272
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !3272
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !3272
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !3272
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 2, !dbg !3272
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !3272
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !3272
  br label %cond.end8, !dbg !3272

cond.false7:                                      ; preds = %if.then
  br label %cond.end8, !dbg !3272

cond.end8:                                        ; preds = %cond.false7, %cond.true3
  %cond9 = phi %struct.VEC_tree_base* [ %base, %cond.true3 ], [ null, %cond.false7 ], !dbg !3272
  %call10 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond9), !dbg !3272
  %call11 = call i32 @VEC_unsigned_heap_reserve(%struct.VEC_unsigned_heap** @name_to_id, i32 %call10), !dbg !3272
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3273
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3273
  %gimple_df13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 3, !dbg !3273
  %17 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df13, align 8, !dbg !3273
  %ssa_names14 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %17, i32 0, i32 2, !dbg !3273
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names14, align 8, !dbg !3273
  %tobool15 = icmp ne %struct.VEC_tree_gc* %18, null, !dbg !3273
  br i1 %tobool15, label %cond.true16, label %cond.false21, !dbg !3273

cond.true16:                                      ; preds = %cond.end8
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3273
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !3273
  %gimple_df18 = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 3, !dbg !3273
  %20 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df18, align 8, !dbg !3273
  %ssa_names19 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %20, i32 0, i32 2, !dbg !3273
  %21 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names19, align 8, !dbg !3273
  %base20 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %21, i32 0, i32 0, !dbg !3273
  br label %cond.end22, !dbg !3273

cond.false21:                                     ; preds = %cond.end8
  br label %cond.end22, !dbg !3273

cond.end22:                                       ; preds = %cond.false21, %cond.true16
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true16 ], [ null, %cond.false21 ], !dbg !3273
  %call24 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond23), !dbg !3273
  call void @VEC_unsigned_heap_safe_grow_cleared(%struct.VEC_unsigned_heap** @name_to_id, i32 %call24), !dbg !3273
  %22 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3274
  %tobool25 = icmp ne %struct.VEC_unsigned_heap* %22, null, !dbg !3274
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !3274

cond.true26:                                      ; preds = %cond.end22
  %23 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3274
  %base27 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %23, i32 0, i32 0, !dbg !3274
  br label %cond.end29, !dbg !3274

cond.false28:                                     ; preds = %cond.end22
  br label %cond.end29, !dbg !3274

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_unsigned_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !3274
  %24 = load i32, i32* %version, align 4, !dbg !3274
  %call31 = call i32 @VEC_unsigned_base_index(%struct.VEC_unsigned_base* %cond30, i32 %24), !dbg !3274
  %cmp32 = icmp eq i32 %call31, 0, !dbg !3274
  br i1 %cmp32, label %cond.false34, label %cond.true33, !dbg !3274

cond.true33:                                      ; preds = %cond.end29
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 265, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3274
  br label %cond.end35, !dbg !3274

cond.false34:                                     ; preds = %cond.end29
  br label %cond.end35, !dbg !3274

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !3274
  %25 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3275
  %tobool37 = icmp ne %struct.VEC_unsigned_heap* %25, null, !dbg !3275
  br i1 %tobool37, label %cond.true38, label %cond.false40, !dbg !3275

cond.true38:                                      ; preds = %cond.end35
  %26 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3275
  %base39 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %26, i32 0, i32 0, !dbg !3275
  br label %cond.end41, !dbg !3275

cond.false40:                                     ; preds = %cond.end35
  br label %cond.end41, !dbg !3275

cond.end41:                                       ; preds = %cond.false40, %cond.true38
  %cond42 = phi %struct.VEC_unsigned_base* [ %base39, %cond.true38 ], [ null, %cond.false40 ], !dbg !3275
  %27 = load i32, i32* %version, align 4, !dbg !3275
  %28 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3275
  %id43 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %28, i32 0, i32 1, !dbg !3275
  %29 = load i32, i32* %id43, align 4, !dbg !3275
  %call44 = call i32 @VEC_unsigned_base_replace(%struct.VEC_unsigned_base* %cond42, i32 %27, i32 %29), !dbg !3275
  br label %if.end, !dbg !3276

if.else:                                          ; preds = %cond.end
  %30 = load %struct.htab*, %struct.htab** @expression_to_id, align 8, !dbg !3277
  %31 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3279
  %32 = bitcast %struct.pre_expr_d* %31 to i8*, !dbg !3279
  %call45 = call i8** @htab_find_slot(%struct.htab* %30, i8* %32, i32 1), !dbg !3280
  store i8** %call45, i8*** %slot, align 8, !dbg !3281
  %33 = load i8**, i8*** %slot, align 8, !dbg !3282
  %34 = load i8*, i8** %33, align 8, !dbg !3282
  %tobool46 = icmp ne i8* %34, null, !dbg !3282
  br i1 %tobool46, label %cond.true47, label %cond.false48, !dbg !3282

cond.true47:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 271, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3282
  br label %cond.end49, !dbg !3282

cond.false48:                                     ; preds = %if.else
  br label %cond.end49, !dbg !3282

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !3282
  %35 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !3283
  %36 = bitcast %struct.pre_expr_d* %35 to i8*, !dbg !3283
  %37 = load i8**, i8*** %slot, align 8, !dbg !3284
  store i8* %36, i8** %37, align 8, !dbg !3285
  br label %if.end

if.end:                                           ; preds = %cond.end49, %cond.end41
  %38 = load i32, i32* @next_expression_id, align 4, !dbg !3286
  %sub = sub i32 %38, 1, !dbg !3287
  ret i32 %sub, !dbg !3288
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %vec_) #0 !dbg !3289 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !3294, metadata !DIExpression()), !dbg !3295
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3295
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !3295
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3295

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3295
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %1, i32 0, i32 0, !dbg !3295
  %2 = load i32, i32* %num, align 4, !dbg !3295
  br label %cond.end, !dbg !3295

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3295

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3295
  ret i32 %cond, !dbg !3295
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_index(%struct.VEC_unsigned_base* %vec_, i32 %ix_) #0 !dbg !3296 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !3299, metadata !DIExpression()), !dbg !3300
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3301, metadata !DIExpression()), !dbg !3300
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3300
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !3300
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3300

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3300
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3300
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 0, !dbg !3300
  %3 = load i32, i32* %num, align 4, !dbg !3300
  %cmp = icmp ult i32 %1, %3, !dbg !3300
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3302
  %land.ext = zext i1 %4 to i32, !dbg !3300
  %5 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3300
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %5, i32 0, i32 2, !dbg !3300
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3300
  %idxprom = zext i32 %6 to i64, !dbg !3300
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3300
  %7 = load i32, i32* %arrayidx, align 4, !dbg !3300
  ret i32 %7, !dbg !3300
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d** @VEC_pre_expr_heap_safe_push(%struct.VEC_pre_expr_heap** %vec_, %struct.pre_expr_d* %obj_) #0 !dbg !3303 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_heap**, align 8
  %obj_.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.VEC_pre_expr_heap** %vec_, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap*** %vec_.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  store %struct.pre_expr_d* %obj_, %struct.pre_expr_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %obj_.addr, metadata !3309, metadata !DIExpression()), !dbg !3308
  %0 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3308
  %call = call i32 @VEC_pre_expr_heap_reserve(%struct.VEC_pre_expr_heap** %0, i32 1), !dbg !3308
  %1 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3308
  %2 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %1, align 8, !dbg !3308
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %2, null, !dbg !3308
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3308

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3308
  %4 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %3, align 8, !dbg !3308
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %4, i32 0, i32 0, !dbg !3308
  br label %cond.end, !dbg !3308

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3308

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3308
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %obj_.addr, align 8, !dbg !3308
  %call1 = call %struct.pre_expr_d** @VEC_pre_expr_base_quick_push(%struct.VEC_pre_expr_base* %cond, %struct.pre_expr_d* %5), !dbg !3308
  ret %struct.pre_expr_d** %call1, !dbg !3308
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_heap_reserve(%struct.VEC_unsigned_heap** %vec_, i32 %alloc_) #0 !dbg !3310 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !3314, metadata !DIExpression()), !dbg !3315
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3316, metadata !DIExpression()), !dbg !3315
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3317, metadata !DIExpression()), !dbg !3315
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3315
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !3315
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !3315
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3315

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3315
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !3315
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %3, i32 0, i32 0, !dbg !3315
  br label %cond.end, !dbg !3315

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3315

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3315
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3315
  %call = call i32 @VEC_unsigned_base_space(%struct.VEC_unsigned_base* %cond, i32 %4), !dbg !3315
  %tobool1 = icmp ne i32 %call, 0, !dbg !3315
  %lnot = xor i1 %tobool1, true, !dbg !3315
  %lnot.ext = zext i1 %lnot to i32, !dbg !3315
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3315
  %5 = load i32, i32* %extend, align 4, !dbg !3318
  %tobool2 = icmp ne i32 %5, 0, !dbg !3318
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3315

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3318
  %7 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %6, align 8, !dbg !3318
  %8 = bitcast %struct.VEC_unsigned_heap* %7 to i8*, !dbg !3318
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3318
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !3318
  %10 = bitcast i8* %call3 to %struct.VEC_unsigned_heap*, !dbg !3318
  %11 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3318
  store %struct.VEC_unsigned_heap* %10, %struct.VEC_unsigned_heap** %11, align 8, !dbg !3318
  br label %if.end, !dbg !3318

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3315
  ret i32 %12, !dbg !3315
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !3320 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !3325, metadata !DIExpression()), !dbg !3326
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3326
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !3326
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3326

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !3326
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !3326
  %2 = load i32, i32* %num, align 8, !dbg !3326
  br label %cond.end, !dbg !3326

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3326

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3326
  ret i32 %cond, !dbg !3326
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_unsigned_heap_safe_grow_cleared(%struct.VEC_unsigned_heap** %vec_, i32 %size_) #0 !dbg !3327 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !3330, metadata !DIExpression()), !dbg !3331
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3332, metadata !DIExpression()), !dbg !3331
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !3333, metadata !DIExpression()), !dbg !3331
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3331
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !3331
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !3331
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3331

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3331
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !3331
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %3, i32 0, i32 0, !dbg !3331
  br label %cond.end, !dbg !3331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3331
  %call = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond), !dbg !3331
  store i32 %call, i32* %oldsize, align 4, !dbg !3331
  %4 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3331
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3331
  call void @VEC_unsigned_heap_safe_grow(%struct.VEC_unsigned_heap** %4, i32 %5), !dbg !3331
  %6 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3331
  %7 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %6, align 8, !dbg !3331
  %tobool1 = icmp ne %struct.VEC_unsigned_heap* %7, null, !dbg !3331
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3331

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3331
  %9 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %8, align 8, !dbg !3331
  %base3 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %9, i32 0, i32 0, !dbg !3331
  br label %cond.end5, !dbg !3331

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3331

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_unsigned_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3331
  %call7 = call i32* @VEC_unsigned_base_address(%struct.VEC_unsigned_base* %cond6), !dbg !3331
  %10 = load i32, i32* %oldsize, align 4, !dbg !3331
  %idxprom = sext i32 %10 to i64, !dbg !3331
  %arrayidx = getelementptr inbounds i32, i32* %call7, i64 %idxprom, !dbg !3331
  %11 = bitcast i32* %arrayidx to i8*, !dbg !3331
  %12 = load i32, i32* %size_.addr, align 4, !dbg !3331
  %13 = load i32, i32* %oldsize, align 4, !dbg !3331
  %sub = sub nsw i32 %12, %13, !dbg !3331
  %conv = sext i32 %sub to i64, !dbg !3331
  %mul = mul i64 4, %conv, !dbg !3331
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %mul, i1 false), !dbg !3331
  ret void, !dbg !3331
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_replace(%struct.VEC_unsigned_base* %vec_, i32 %ix_, i32 %obj_) #0 !dbg !3334 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i32, align 4
  %old_obj_ = alloca i32, align 4
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !3338, metadata !DIExpression()), !dbg !3339
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3340, metadata !DIExpression()), !dbg !3339
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3341, metadata !DIExpression()), !dbg !3339
  call void @llvm.dbg.declare(metadata i32* %old_obj_, metadata !3342, metadata !DIExpression()), !dbg !3339
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !3339
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3339
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %1, i32 0, i32 0, !dbg !3339
  %2 = load i32, i32* %num, align 4, !dbg !3339
  %cmp = icmp ult i32 %0, %2, !dbg !3339
  %conv = zext i1 %cmp to i32, !dbg !3339
  %3 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3339
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %3, i32 0, i32 2, !dbg !3339
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !3339
  %idxprom = zext i32 %4 to i64, !dbg !3339
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3339
  %5 = load i32, i32* %arrayidx, align 4, !dbg !3339
  store i32 %5, i32* %old_obj_, align 4, !dbg !3339
  %6 = load i32, i32* %obj_.addr, align 4, !dbg !3339
  %7 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3339
  %vec1 = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %7, i32 0, i32 2, !dbg !3339
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !3339
  %idxprom2 = zext i32 %8 to i64, !dbg !3339
  %arrayidx3 = getelementptr inbounds [1 x i32], [1 x i32]* %vec1, i64 0, i64 %idxprom2, !dbg !3339
  store i32 %6, i32* %arrayidx3, align 4, !dbg !3339
  %9 = load i32, i32* %old_obj_, align 4, !dbg !3339
  ret i32 %9, !dbg !3339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_pre_expr_heap_reserve(%struct.VEC_pre_expr_heap** %vec_, i32 %alloc_) #0 !dbg !3343 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_pre_expr_heap** %vec_, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap*** %vec_.addr, metadata !3346, metadata !DIExpression()), !dbg !3347
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3348, metadata !DIExpression()), !dbg !3347
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3349, metadata !DIExpression()), !dbg !3347
  %0 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3347
  %1 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %0, align 8, !dbg !3347
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %1, null, !dbg !3347
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3347

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3347
  %3 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %2, align 8, !dbg !3347
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %3, i32 0, i32 0, !dbg !3347
  br label %cond.end, !dbg !3347

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3347

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3347
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3347
  %call = call i32 @VEC_pre_expr_base_space(%struct.VEC_pre_expr_base* %cond, i32 %4), !dbg !3347
  %tobool1 = icmp ne i32 %call, 0, !dbg !3347
  %lnot = xor i1 %tobool1, true, !dbg !3347
  %lnot.ext = zext i1 %lnot to i32, !dbg !3347
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3347
  %5 = load i32, i32* %extend, align 4, !dbg !3350
  %tobool2 = icmp ne i32 %5, 0, !dbg !3350
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3347

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3350
  %7 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %6, align 8, !dbg !3350
  %8 = bitcast %struct.VEC_pre_expr_heap* %7 to i8*, !dbg !3350
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3350
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !3350
  %10 = bitcast i8* %call3 to %struct.VEC_pre_expr_heap*, !dbg !3350
  %11 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !3350
  store %struct.VEC_pre_expr_heap* %10, %struct.VEC_pre_expr_heap** %11, align 8, !dbg !3350
  br label %if.end, !dbg !3350

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3347
  ret i32 %12, !dbg !3347
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d** @VEC_pre_expr_base_quick_push(%struct.VEC_pre_expr_base* %vec_, %struct.pre_expr_d* %obj_) #0 !dbg !3352 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_base*, align 8
  %obj_.addr = alloca %struct.pre_expr_d*, align 8
  %slot_ = alloca %struct.pre_expr_d**, align 8
  store %struct.VEC_pre_expr_base* %vec_, %struct.VEC_pre_expr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_base** %vec_.addr, metadata !3356, metadata !DIExpression()), !dbg !3357
  store %struct.pre_expr_d* %obj_, %struct.pre_expr_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %obj_.addr, metadata !3358, metadata !DIExpression()), !dbg !3357
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d*** %slot_, metadata !3359, metadata !DIExpression()), !dbg !3357
  %0 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3357
  %num = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %0, i32 0, i32 0, !dbg !3357
  %1 = load i32, i32* %num, align 8, !dbg !3357
  %2 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3357
  %alloc = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %2, i32 0, i32 1, !dbg !3357
  %3 = load i32, i32* %alloc, align 4, !dbg !3357
  %cmp = icmp ult i32 %1, %3, !dbg !3357
  %conv = zext i1 %cmp to i32, !dbg !3357
  %4 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3357
  %vec = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %4, i32 0, i32 2, !dbg !3357
  %5 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3357
  %num1 = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %5, i32 0, i32 0, !dbg !3357
  %6 = load i32, i32* %num1, align 8, !dbg !3357
  %inc = add i32 %6, 1, !dbg !3357
  store i32 %inc, i32* %num1, align 8, !dbg !3357
  %idxprom = zext i32 %6 to i64, !dbg !3357
  %arrayidx = getelementptr inbounds [1 x %struct.pre_expr_d*], [1 x %struct.pre_expr_d*]* %vec, i64 0, i64 %idxprom, !dbg !3357
  store %struct.pre_expr_d** %arrayidx, %struct.pre_expr_d*** %slot_, align 8, !dbg !3357
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %obj_.addr, align 8, !dbg !3357
  %8 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %slot_, align 8, !dbg !3357
  store %struct.pre_expr_d* %7, %struct.pre_expr_d** %8, align 8, !dbg !3357
  %9 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %slot_, align 8, !dbg !3357
  ret %struct.pre_expr_d** %9, !dbg !3357
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_pre_expr_base_space(%struct.VEC_pre_expr_base* %vec_, i32 %alloc_) #0 !dbg !3360 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_pre_expr_base* %vec_, %struct.VEC_pre_expr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_base** %vec_.addr, metadata !3363, metadata !DIExpression()), !dbg !3364
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3365, metadata !DIExpression()), !dbg !3364
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3364
  %cmp = icmp sge i32 %0, 0, !dbg !3364
  %conv = zext i1 %cmp to i32, !dbg !3364
  %1 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3364
  %tobool = icmp ne %struct.VEC_pre_expr_base* %1, null, !dbg !3364
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3364

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3364
  %alloc = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %2, i32 0, i32 1, !dbg !3364
  %3 = load i32, i32* %alloc, align 4, !dbg !3364
  %4 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3364
  %num = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %4, i32 0, i32 0, !dbg !3364
  %5 = load i32, i32* %num, align 8, !dbg !3364
  %sub = sub i32 %3, %5, !dbg !3364
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !3364
  %cmp1 = icmp uge i32 %sub, %6, !dbg !3364
  %conv2 = zext i1 %cmp1 to i32, !dbg !3364
  br label %cond.end, !dbg !3364

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !3364
  %tobool3 = icmp ne i32 %7, 0, !dbg !3364
  %lnot = xor i1 %tobool3, true, !dbg !3364
  %lnot.ext = zext i1 %lnot to i32, !dbg !3364
  br label %cond.end, !dbg !3364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3364
  ret i32 %cond, !dbg !3364
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_base_space(%struct.VEC_unsigned_base* %vec_, i32 %alloc_) #0 !dbg !3366 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3371, metadata !DIExpression()), !dbg !3370
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3370
  %cmp = icmp sge i32 %0, 0, !dbg !3370
  %conv = zext i1 %cmp to i32, !dbg !3370
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3370
  %tobool = icmp ne %struct.VEC_unsigned_base* %1, null, !dbg !3370
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3370

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3370
  %alloc = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %2, i32 0, i32 1, !dbg !3370
  %3 = load i32, i32* %alloc, align 4, !dbg !3370
  %4 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3370
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %4, i32 0, i32 0, !dbg !3370
  %5 = load i32, i32* %num, align 4, !dbg !3370
  %sub = sub i32 %3, %5, !dbg !3370
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !3370
  %cmp1 = icmp uge i32 %sub, %6, !dbg !3370
  %conv2 = zext i1 %cmp1 to i32, !dbg !3370
  br label %cond.end, !dbg !3370

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !3370
  %tobool3 = icmp ne i32 %7, 0, !dbg !3370
  %lnot = xor i1 %tobool3, true, !dbg !3370
  %lnot.ext = zext i1 %lnot to i32, !dbg !3370
  br label %cond.end, !dbg !3370

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !3370
  ret i32 %cond, !dbg !3370
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_unsigned_heap_safe_grow(%struct.VEC_unsigned_heap** %vec_, i32 %size_) #0 !dbg !3372 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !3373, metadata !DIExpression()), !dbg !3374
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !3375, metadata !DIExpression()), !dbg !3374
  %0 = load i32, i32* %size_.addr, align 4, !dbg !3374
  %cmp = icmp sge i32 %0, 0, !dbg !3374
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3374

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %2 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %1, align 8, !dbg !3374
  %tobool = icmp ne %struct.VEC_unsigned_heap* %2, null, !dbg !3374
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3374

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %4 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %3, align 8, !dbg !3374
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %4, i32 0, i32 0, !dbg !3374
  br label %cond.end, !dbg !3374

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !3374

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3374
  %call = call i32 @VEC_unsigned_base_length(%struct.VEC_unsigned_base* %cond), !dbg !3374
  %5 = load i32, i32* %size_.addr, align 4, !dbg !3374
  %cmp1 = icmp ule i32 %call, %5, !dbg !3374
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !3376
  %land.ext = zext i1 %6 to i32, !dbg !3374
  %7 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %8 = load i32, i32* %size_.addr, align 4, !dbg !3374
  %9 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %10 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %9, align 8, !dbg !3374
  %tobool2 = icmp ne %struct.VEC_unsigned_heap* %10, null, !dbg !3374
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !3374

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %12 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %11, align 8, !dbg !3374
  %tobool4 = icmp ne %struct.VEC_unsigned_heap* %12, null, !dbg !3374
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !3374

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %14 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %13, align 8, !dbg !3374
  %base6 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %14, i32 0, i32 0, !dbg !3374
  br label %cond.end8, !dbg !3374

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !3374

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_unsigned_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !3374
  %num = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %cond9, i32 0, i32 0, !dbg !3374
  %15 = load i32, i32* %num, align 4, !dbg !3374
  br label %cond.end11, !dbg !3374

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !3374

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !3374
  %sub = sub nsw i32 %8, %cond12, !dbg !3374
  %call13 = call i32 @VEC_unsigned_heap_reserve_exact(%struct.VEC_unsigned_heap** %7, i32 %sub), !dbg !3374
  %16 = load i32, i32* %size_.addr, align 4, !dbg !3374
  %17 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %18 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %17, align 8, !dbg !3374
  %tobool14 = icmp ne %struct.VEC_unsigned_heap* %18, null, !dbg !3374
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !3374

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3374
  %20 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %19, align 8, !dbg !3374
  %base16 = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %20, i32 0, i32 0, !dbg !3374
  br label %cond.end18, !dbg !3374

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !3374

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_unsigned_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !3374
  %num20 = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %cond19, i32 0, i32 0, !dbg !3374
  store i32 %16, i32* %num20, align 4, !dbg !3374
  ret void, !dbg !3374
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_unsigned_base_address(%struct.VEC_unsigned_base* %vec_) #0 !dbg !3377 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_base*, align 8
  store %struct.VEC_unsigned_base* %vec_, %struct.VEC_unsigned_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_base** %vec_.addr, metadata !3381, metadata !DIExpression()), !dbg !3382
  %0 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3382
  %tobool = icmp ne %struct.VEC_unsigned_base* %0, null, !dbg !3382
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3382

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_unsigned_base*, %struct.VEC_unsigned_base** %vec_.addr, align 8, !dbg !3382
  %vec = getelementptr inbounds %struct.VEC_unsigned_base, %struct.VEC_unsigned_base* %1, i32 0, i32 2, !dbg !3382
  %arraydecay = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 0, !dbg !3382
  br label %cond.end, !dbg !3382

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3382

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !3382
  ret i32* %cond, !dbg !3382
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_unsigned_heap_reserve_exact(%struct.VEC_unsigned_heap** %vec_, i32 %alloc_) #0 !dbg !3383 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3386, metadata !DIExpression()), !dbg !3385
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !3387, metadata !DIExpression()), !dbg !3385
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3385
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !3385
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !3385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3385

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3385
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !3385
  %base = getelementptr inbounds %struct.VEC_unsigned_heap, %struct.VEC_unsigned_heap* %3, i32 0, i32 0, !dbg !3385
  br label %cond.end, !dbg !3385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_unsigned_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3385
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !3385
  %call = call i32 @VEC_unsigned_base_space(%struct.VEC_unsigned_base* %cond, i32 %4), !dbg !3385
  %tobool1 = icmp ne i32 %call, 0, !dbg !3385
  %lnot = xor i1 %tobool1, true, !dbg !3385
  %lnot.ext = zext i1 %lnot to i32, !dbg !3385
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !3385
  %5 = load i32, i32* %extend, align 4, !dbg !3388
  %tobool2 = icmp ne i32 %5, 0, !dbg !3388
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3385

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3388
  %7 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %6, align 8, !dbg !3388
  %8 = bitcast %struct.VEC_unsigned_heap* %7 to i8*, !dbg !3388
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !3388
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 4), !dbg !3388
  %10 = bitcast i8* %call3 to %struct.VEC_unsigned_heap*, !dbg !3388
  %11 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !3388
  store %struct.VEC_unsigned_heap* %10, %struct.VEC_unsigned_heap** %11, align 8, !dbg !3388
  br label %if.end, !dbg !3388

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !3385
  ret i32 %12, !dbg !3385
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_, %struct.vn_reference_op_struct** %ptr) #0 !dbg !3390 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.vn_reference_op_struct**, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !3395, metadata !DIExpression()), !dbg !3396
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3397, metadata !DIExpression()), !dbg !3396
  store %struct.vn_reference_op_struct** %ptr, %struct.vn_reference_op_struct*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct*** %ptr.addr, metadata !3398, metadata !DIExpression()), !dbg !3396
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3399
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !3399
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3399

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3399
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3399
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 0, !dbg !3399
  %3 = load i32, i32* %num, align 8, !dbg !3399
  %cmp = icmp ult i32 %1, %3, !dbg !3399
  br i1 %cmp, label %if.then, label %if.else, !dbg !3396

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3401
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %4, i32 0, i32 2, !dbg !3401
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3401
  %idxprom = zext i32 %5 to i64, !dbg !3401
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !3401
  %6 = load %struct.vn_reference_op_struct**, %struct.vn_reference_op_struct*** %ptr.addr, align 8, !dbg !3401
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %6, align 8, !dbg !3401
  store i32 1, i32* %retval, align 4, !dbg !3401
  br label %return, !dbg !3401

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.vn_reference_op_struct**, %struct.vn_reference_op_struct*** %ptr.addr, align 8, !dbg !3403
  store %struct.vn_reference_op_struct* null, %struct.vn_reference_op_struct** %7, align 8, !dbg !3403
  store i32 0, i32* %retval, align 4, !dbg !3403
  br label %return, !dbg !3403

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3396
  ret i32 %8, !dbg !3396
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %vec_) #0 !dbg !3405 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !3410, metadata !DIExpression()), !dbg !3411
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3411
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !3411
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3411

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !3411
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !3411
  %2 = load i32, i32* %num, align 8, !dbg !3411
  br label %cond.end, !dbg !3411

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3411

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3411
  ret i32 %cond, !dbg !3411
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !3412 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3419, metadata !DIExpression()), !dbg !3420
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !3421, metadata !DIExpression()), !dbg !3422
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3425, metadata !DIExpression()), !dbg !3426
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !3427
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !3428
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3428
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3429
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !3430
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !3431
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3432
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !3433
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !3434
  br label %while.body, !dbg !3435

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3436
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !3439
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !3439
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !3436
  br i1 %tobool, label %if.end, label %if.then, !dbg !3440

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3441
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !3443
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !3444
  br label %while.end, !dbg !3445

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3446
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !3448
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !3448
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !3449
  %9 = load i32, i32* %indx, align 8, !dbg !3449
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !3450
  %div = udiv i32 %10, 128, !dbg !3451
  %cmp = icmp uge i32 %9, %div, !dbg !3452
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !3453

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !3454

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3455
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !3456
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !3456
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !3457
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3457
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3458
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !3459
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !3460
  br label %while.body, !dbg !3435, !llvm.loop !3461

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3463
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3465
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !3465
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !3466
  %17 = load i32, i32* %indx9, align 8, !dbg !3466
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !3467
  %div10 = udiv i32 %18, 128, !dbg !3468
  %cmp11 = icmp ne i32 %17, %div10, !dbg !3469
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !3470

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3471
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !3472
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !3472
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !3473
  %21 = load i32, i32* %indx14, align 8, !dbg !3473
  %mul = mul i32 %21, 128, !dbg !3474
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !3475
  br label %if.end15, !dbg !3476

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !3477
  %div16 = udiv i32 %22, 64, !dbg !3478
  %rem = urem i32 %div16, 2, !dbg !3479
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3480
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !3481
  store i32 %rem, i32* %word_no, align 8, !dbg !3482
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3483
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !3484
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !3484
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !3485
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3486
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !3487
  %27 = load i32, i32* %word_no18, align 8, !dbg !3487
  %idxprom = zext i32 %27 to i64, !dbg !3483
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !3483
  %28 = load i64, i64* %arrayidx, align 8, !dbg !3483
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3488
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !3489
  store i64 %28, i64* %bits19, align 8, !dbg !3490
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !3491
  %rem20 = urem i32 %30, 64, !dbg !3492
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3493
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !3494
  %32 = load i64, i64* %bits21, align 8, !dbg !3495
  %sh_prom = zext i32 %rem20 to i64, !dbg !3495
  %shr = lshr i64 %32, %sh_prom, !dbg !3495
  store i64 %shr, i64* %bits21, align 8, !dbg !3495
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3496
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !3497
  %34 = load i64, i64* %bits22, align 8, !dbg !3497
  %tobool23 = icmp ne i64 %34, 0, !dbg !3498
  %lnot = xor i1 %tobool23, true, !dbg !3498
  %lnot.ext = zext i1 %lnot to i32, !dbg !3498
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !3499
  %add = add i32 %35, %lnot.ext, !dbg !3499
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !3499
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !3500
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !3501
  store i32 %36, i32* %37, align 4, !dbg !3502
  ret void, !dbg !3503
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3504 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3507, metadata !DIExpression()), !dbg !3508
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3509, metadata !DIExpression()), !dbg !3510
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3511
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3513
  %1 = load i64, i64* %bits, align 8, !dbg !3513
  %tobool = icmp ne i64 %1, 0, !dbg !3511
  br i1 %tobool, label %if.then, label %if.end, !dbg !3514

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !3515

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !3516), !dbg !3518
  br label %while.cond, !dbg !3519

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3520
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !3521
  %3 = load i64, i64* %bits1, align 8, !dbg !3521
  %and = and i64 %3, 1, !dbg !3522
  %tobool2 = icmp ne i64 %and, 0, !dbg !3523
  %lnot = xor i1 %tobool2, true, !dbg !3523
  br i1 %lnot, label %while.body, label %while.end, !dbg !3519

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3524
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !3526
  %5 = load i64, i64* %bits3, align 8, !dbg !3527
  %shr = lshr i64 %5, 1, !dbg !3527
  store i64 %shr, i64* %bits3, align 8, !dbg !3527
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !3528
  %7 = load i32, i32* %6, align 4, !dbg !3529
  %add = add i32 %7, 1, !dbg !3529
  store i32 %add, i32* %6, align 4, !dbg !3529
  br label %while.cond, !dbg !3519, !llvm.loop !3530

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !3532
  br label %return, !dbg !3532

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !3533
  %9 = load i32, i32* %8, align 4, !dbg !3534
  %add4 = add i32 %9, 64, !dbg !3535
  %sub = sub i32 %add4, 1, !dbg !3536
  %div = udiv i32 %sub, 64, !dbg !3537
  %mul = mul i32 %div, 64, !dbg !3538
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !3539
  store i32 %mul, i32* %10, align 4, !dbg !3540
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3541
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !3542
  %12 = load i32, i32* %word_no, align 8, !dbg !3543
  %inc = add i32 %12, 1, !dbg !3543
  store i32 %inc, i32* %word_no, align 8, !dbg !3543
  br label %while.body6, !dbg !3544

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !3545

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3547
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !3548
  %14 = load i32, i32* %word_no8, align 8, !dbg !3548
  %cmp = icmp ne i32 %14, 2, !dbg !3549
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !3545

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3550
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !3552
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !3552
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !3553
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3554
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !3555
  %18 = load i32, i32* %word_no11, align 8, !dbg !3555
  %idxprom = zext i32 %18 to i64, !dbg !3550
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !3550
  %19 = load i64, i64* %arrayidx, align 8, !dbg !3550
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3556
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !3557
  store i64 %19, i64* %bits12, align 8, !dbg !3558
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3559
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !3561
  %22 = load i64, i64* %bits13, align 8, !dbg !3561
  %tobool14 = icmp ne i64 %22, 0, !dbg !3559
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !3562

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !3563

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !3564
  %24 = load i32, i32* %23, align 4, !dbg !3565
  %add17 = add i32 %24, 64, !dbg !3565
  store i32 %add17, i32* %23, align 4, !dbg !3565
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3566
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !3567
  %26 = load i32, i32* %word_no18, align 8, !dbg !3568
  %inc19 = add i32 %26, 1, !dbg !3568
  store i32 %inc19, i32* %word_no18, align 8, !dbg !3568
  br label %while.cond7, !dbg !3545, !llvm.loop !3569

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3571
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !3572
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !3572
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !3573
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !3573
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3574
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !3575
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !3576
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3577
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !3579
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !3579
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !3577
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3580

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !3581
  br label %return, !dbg !3581

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3582
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !3583
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !3583
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !3584
  %35 = load i32, i32* %indx, align 8, !dbg !3584
  %mul28 = mul i32 %35, 128, !dbg !3585
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !3586
  store i32 %mul28, i32* %36, align 4, !dbg !3587
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3588
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !3589
  store i32 0, i32* %word_no29, align 8, !dbg !3590
  br label %while.body6, !dbg !3544, !llvm.loop !3591

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !3593
  ret i8 %38, !dbg !3593
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @expression_for_id(i32 %id) #0 !dbg !3594 {
entry:
  %id.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !3597, metadata !DIExpression()), !dbg !3598
  %0 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** @expressions, align 8, !dbg !3599
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %0, null, !dbg !3599
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3599

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** @expressions, align 8, !dbg !3599
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %1, i32 0, i32 0, !dbg !3599
  br label %cond.end, !dbg !3599

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3599

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3599
  %2 = load i32, i32* %id.addr, align 4, !dbg !3599
  %call = call %struct.pre_expr_d* @VEC_pre_expr_base_index(%struct.VEC_pre_expr_base* %cond, i32 %2), !dbg !3599
  ret %struct.pre_expr_d* %call, !dbg !3600
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !3601 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !3604, metadata !DIExpression()), !dbg !3605
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !3606, metadata !DIExpression()), !dbg !3607
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !3608
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !3609
  %1 = load i64, i64* %bits, align 8, !dbg !3610
  %shr = lshr i64 %1, 1, !dbg !3610
  store i64 %shr, i64* %bits, align 8, !dbg !3610
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !3611
  %3 = load i32, i32* %2, align 4, !dbg !3612
  %add = add i32 %3, 1, !dbg !3612
  store i32 %add, i32* %2, align 4, !dbg !3612
  ret void, !dbg !3613
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @VEC_pre_expr_base_index(%struct.VEC_pre_expr_base* %vec_, i32 %ix_) #0 !dbg !3614 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_pre_expr_base* %vec_, %struct.VEC_pre_expr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_base** %vec_.addr, metadata !3619, metadata !DIExpression()), !dbg !3620
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3621, metadata !DIExpression()), !dbg !3620
  %0 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3620
  %tobool = icmp ne %struct.VEC_pre_expr_base* %0, null, !dbg !3620
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3620

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3620
  %2 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3620
  %num = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %2, i32 0, i32 0, !dbg !3620
  %3 = load i32, i32* %num, align 8, !dbg !3620
  %cmp = icmp ult i32 %1, %3, !dbg !3620
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3622
  %land.ext = zext i1 %4 to i32, !dbg !3620
  %5 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !3620
  %vec = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %5, i32 0, i32 2, !dbg !3620
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3620
  %idxprom = zext i32 %6 to i64, !dbg !3620
  %arrayidx = getelementptr inbounds [1 x %struct.pre_expr_d*], [1 x %struct.pre_expr_d*]* %vec, i64 0, i64 %idxprom, !dbg !3620
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %arrayidx, align 8, !dbg !3620
  ret %struct.pre_expr_d* %7, !dbg !3620
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_pre(i8 zeroext %do_fre) #0 !dbg !3623 {
entry:
  %retval = alloca i32, align 4
  %do_fre.addr = alloca i8, align 1
  %todo = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store i8 %do_fre, i8* %do_fre.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_fre.addr, metadata !3626, metadata !DIExpression()), !dbg !3627
  call void @llvm.dbg.declare(metadata i32* %todo, metadata !3628, metadata !DIExpression()), !dbg !3629
  store i32 0, i32* %todo, align 4, !dbg !3629
  %0 = load i32, i32* @optimize, align 4, !dbg !3630
  %cmp = icmp sgt i32 %0, 2, !dbg !3631
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3632

land.rhs:                                         ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3633
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3633
  %call = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !3634
  %conv = zext i8 %call to i32, !dbg !3634
  %tobool = icmp ne i32 %conv, 0, !dbg !3632
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !3635
  %land.ext = zext i1 %2 to i32, !dbg !3632
  %conv1 = trunc i32 %land.ext to i8, !dbg !3630
  store i8 %conv1, i8* @do_partial_partial, align 1, !dbg !3636
  %3 = load i8, i8* %do_fre.addr, align 1, !dbg !3637
  %tobool2 = icmp ne i8 %3, 0, !dbg !3637
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3639

if.then:                                          ; preds = %land.end
  call void @loop_optimizer_init(i32 7), !dbg !3640
  br label %if.end, !dbg !3640

if.end:                                           ; preds = %if.then, %land.end
  %4 = load i8, i8* %do_fre.addr, align 1, !dbg !3641
  %call3 = call zeroext i8 @run_scc_vn(i8 zeroext %4), !dbg !3643
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3643
  br i1 %tobool4, label %if.end9, label %if.then5, !dbg !3644

if.then5:                                         ; preds = %if.end
  %5 = load i8, i8* %do_fre.addr, align 1, !dbg !3645
  %tobool6 = icmp ne i8 %5, 0, !dbg !3645
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !3648

if.then7:                                         ; preds = %if.then5
  call void @remove_dead_inserted_code(), !dbg !3649
  call void @loop_optimizer_finalize(), !dbg !3651
  br label %if.end8, !dbg !3652

if.end8:                                          ; preds = %if.then7, %if.then5
  store i32 0, i32* %retval, align 4, !dbg !3653
  br label %return, !dbg !3653

if.end9:                                          ; preds = %if.end
  %6 = load i8, i8* %do_fre.addr, align 1, !dbg !3654
  call void @init_pre(i8 zeroext %6), !dbg !3655
  call void @scev_initialize(), !dbg !3656
  call void @compute_avail(), !dbg !3657
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3658
  %tobool10 = icmp ne %struct._IO_FILE* %7, null, !dbg !3658
  br i1 %tobool10, label %land.lhs.true, label %if.end21, !dbg !3660

land.lhs.true:                                    ; preds = %if.end9
  %8 = load i32, i32* @dump_flags, align 4, !dbg !3661
  %and = and i32 %8, 8, !dbg !3662
  %tobool11 = icmp ne i32 %and, 0, !dbg !3662
  br i1 %tobool11, label %if.then12, label %if.end21, !dbg !3663

if.then12:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3664, metadata !DIExpression()), !dbg !3666
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3667
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3667
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 1, !dbg !3667
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3667
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !3667
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3667
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !3667
  br label %for.cond, !dbg !3667

for.cond:                                         ; preds = %for.inc, %if.then12
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3669
  %tobool14 = icmp ne %struct.basic_block_def* %12, null, !dbg !3667
  br i1 %tobool14, label %for.body, label %for.end, !dbg !3667

for.body:                                         ; preds = %for.cond
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3671
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3673
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 2, !dbg !3673
  %15 = load i8*, i8** %aux, align 8, !dbg !3673
  %16 = bitcast i8* %15 to %struct.bb_bitmap_sets*, !dbg !3673
  %exp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %16, i32 0, i32 0, !dbg !3673
  %17 = load %struct.bitmap_set*, %struct.bitmap_set** %exp_gen, align 8, !dbg !3673
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3674
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !3675
  %19 = load i32, i32* %index, align 8, !dbg !3675
  call void @print_bitmap_set(%struct._IO_FILE* %13, %struct.bitmap_set* %17, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0), i32 %19), !dbg !3676
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3677
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3678
  %aux15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 2, !dbg !3678
  %22 = load i8*, i8** %aux15, align 8, !dbg !3678
  %23 = bitcast i8* %22 to %struct.bb_bitmap_sets*, !dbg !3678
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %23, i32 0, i32 1, !dbg !3678
  %24 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !3678
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3679
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !3680
  %26 = load i32, i32* %index16, align 8, !dbg !3680
  call void @print_bitmap_set(%struct._IO_FILE* %20, %struct.bitmap_set* %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i64 0, i64 0), i32 %26), !dbg !3681
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3682
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3683
  %aux17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 2, !dbg !3683
  %29 = load i8*, i8** %aux17, align 8, !dbg !3683
  %30 = bitcast i8* %29 to %struct.bb_bitmap_sets*, !dbg !3683
  %tmp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %30, i32 0, i32 2, !dbg !3683
  %31 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen, align 8, !dbg !3683
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3684
  %index18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !3685
  %33 = load i32, i32* %index18, align 8, !dbg !3685
  call void @print_bitmap_set(%struct._IO_FILE* %27, %struct.bitmap_set* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i64 0, i64 0), i32 %33), !dbg !3686
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3687
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3688
  %aux19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 2, !dbg !3688
  %36 = load i8*, i8** %aux19, align 8, !dbg !3688
  %37 = bitcast i8* %36 to %struct.bb_bitmap_sets*, !dbg !3688
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %37, i32 0, i32 3, !dbg !3688
  %38 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !3688
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3689
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !3690
  %40 = load i32, i32* %index20, align 8, !dbg !3690
  call void @print_bitmap_set(%struct._IO_FILE* %34, %struct.bitmap_set* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i64 0, i64 0), i32 %40), !dbg !3691
  br label %for.inc, !dbg !3692

for.inc:                                          ; preds = %for.body
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3669
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 6, !dbg !3669
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3669
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !3669
  br label %for.cond, !dbg !3669, !llvm.loop !3693

for.end:                                          ; preds = %for.cond
  br label %if.end21, !dbg !3695

if.end21:                                         ; preds = %for.end, %land.lhs.true, %if.end9
  %43 = load i8, i8* %do_fre.addr, align 1, !dbg !3696
  %tobool22 = icmp ne i8 %43, 0, !dbg !3696
  br i1 %tobool22, label %if.end29, label %land.lhs.true23, !dbg !3698

land.lhs.true23:                                  ; preds = %if.end21
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3699
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !3699
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !3699
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !3699
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 3, !dbg !3699
  %46 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3699
  %cmp26 = icmp slt i32 %46, 4000, !dbg !3700
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !3701

if.then28:                                        ; preds = %land.lhs.true23
  call void @compute_antic(), !dbg !3702
  call void @insert(), !dbg !3704
  br label %if.end29, !dbg !3705

if.end29:                                         ; preds = %if.then28, %land.lhs.true23, %if.end21
  %call30 = call i32 @eliminate(), !dbg !3706
  %47 = load i32, i32* %todo, align 4, !dbg !3707
  %or = or i32 %47, %call30, !dbg !3707
  store i32 %or, i32* %todo, align 4, !dbg !3707
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3708
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !3708
  %49 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 1), align 4, !dbg !3709
  call void @statistics_counter_event(%struct.function* %add.ptr31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i64 0, i64 0), i32 %49), !dbg !3710
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3711
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !3711
  %51 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 2), align 4, !dbg !3712
  call void @statistics_counter_event(%struct.function* %add.ptr32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0), i32 %51), !dbg !3713
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3714
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !3714
  %53 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 3), align 4, !dbg !3715
  call void @statistics_counter_event(%struct.function* %add.ptr33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i64 0, i64 0), i32 %53), !dbg !3716
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3717
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !3717
  %55 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !3718
  call void @statistics_counter_event(%struct.function* %add.ptr34, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i32 %55), !dbg !3719
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3720
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !3720
  %57 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 4), align 4, !dbg !3721
  call void @statistics_counter_event(%struct.function* %add.ptr35, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 %57), !dbg !3722
  call void @remove_fake_exit_edges(), !dbg !3723
  call void @gsi_commit_edge_inserts(), !dbg !3724
  call void @clear_expression_ids(), !dbg !3725
  call void @free_scc_vn(), !dbg !3726
  %58 = load i8, i8* %do_fre.addr, align 1, !dbg !3727
  %tobool36 = icmp ne i8 %58, 0, !dbg !3727
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !3729

if.then37:                                        ; preds = %if.end29
  call void @remove_dead_inserted_code(), !dbg !3730
  br label %if.end38, !dbg !3730

if.end38:                                         ; preds = %if.then37, %if.end29
  call void @scev_finalize(), !dbg !3731
  %59 = load i8, i8* %do_fre.addr, align 1, !dbg !3732
  call void @fini_pre(i8 zeroext %59), !dbg !3733
  %60 = load i32, i32* %todo, align 4, !dbg !3734
  store i32 %60, i32* %retval, align 4, !dbg !3735
  br label %return, !dbg !3735

return:                                           ; preds = %if.end38, %if.end8
  %61 = load i32, i32* %retval, align 4, !dbg !3736
  ret i32 %61, !dbg !3736
}

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #2

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local zeroext i8 @run_scc_vn(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_dead_inserted_code() #0 !dbg !3737 {
entry:
  %worklist = alloca %struct.VEC_gimple_heap*, align 8
  %i = alloca i32, align 4
  %t = alloca %union.gimple_statement_d*, align 8
  %k = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %n = alloca %union.gimple_statement_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use = alloca %union.tree_node*, align 8
  %n67 = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %worklist, metadata !3740, metadata !DIExpression()), !dbg !3741
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3741
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3742, metadata !DIExpression()), !dbg !3743
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t, metadata !3744, metadata !DIExpression()), !dbg !3745
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3746
  %tobool = icmp ne %struct.VEC_gimple_heap* %0, null, !dbg !3746
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3746

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3746
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %1, i32 0, i32 0, !dbg !3746
  br label %cond.end, !dbg !3746

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3746

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3746
  %call = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !3746
  %call1 = call %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %call), !dbg !3746
  store %struct.VEC_gimple_heap* %call1, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3747
  store i32 0, i32* %i, align 4, !dbg !3748
  br label %for.cond, !dbg !3750

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3751
  %tobool2 = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !3751
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !3751

cond.true3:                                       ; preds = %for.cond
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3751
  %base4 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !3751
  br label %cond.end6, !dbg !3751

cond.false5:                                      ; preds = %for.cond
  br label %cond.end6, !dbg !3751

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_gimple_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !3751
  %4 = load i32, i32* %i, align 4, !dbg !3751
  %call8 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond7, i32 %4, %union.gimple_statement_d** %t), !dbg !3751
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3753
  br i1 %tobool9, label %for.body, label %for.end, !dbg !3753

for.body:                                         ; preds = %cond.end6
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3754
  %call10 = call i32 @gimple_plf(%union.gimple_statement_d* %5, i32 1), !dbg !3757
  %tobool11 = icmp ne i32 %call10, 0, !dbg !3757
  br i1 %tobool11, label %if.then, label %if.end, !dbg !3758

if.then:                                          ; preds = %for.body
  %6 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3759
  %tobool12 = icmp ne %struct.VEC_gimple_heap* %6, null, !dbg !3759
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !3759

cond.true13:                                      ; preds = %if.then
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3759
  %base14 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %7, i32 0, i32 0, !dbg !3759
  br label %cond.end16, !dbg !3759

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !3759

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_gimple_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !3759
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3759
  %call18 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond17, %union.gimple_statement_d* %8), !dbg !3759
  br label %if.end, !dbg !3759

if.end:                                           ; preds = %cond.end16, %for.body
  br label %for.inc, !dbg !3760

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !3761
  %inc = add nsw i32 %9, 1, !dbg !3761
  store i32 %inc, i32* %i, align 4, !dbg !3761
  br label %for.cond, !dbg !3762, !llvm.loop !3763

for.end:                                          ; preds = %cond.end6
  br label %while.cond, !dbg !3765

while.cond:                                       ; preds = %if.end76, %for.end
  %10 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3766
  %tobool19 = icmp ne %struct.VEC_gimple_heap* %10, null, !dbg !3766
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !3766

cond.true20:                                      ; preds = %while.cond
  %11 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3766
  %base21 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %11, i32 0, i32 0, !dbg !3766
  br label %cond.end23, !dbg !3766

cond.false22:                                     ; preds = %while.cond
  br label %cond.end23, !dbg !3766

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_gimple_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !3766
  %call25 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond24), !dbg !3766
  %cmp = icmp ugt i32 %call25, 0, !dbg !3767
  br i1 %cmp, label %while.body, label %while.end, !dbg !3765

while.body:                                       ; preds = %cond.end23
  %12 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3768
  %tobool26 = icmp ne %struct.VEC_gimple_heap* %12, null, !dbg !3768
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !3768

cond.true27:                                      ; preds = %while.body
  %13 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3768
  %base28 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %13, i32 0, i32 0, !dbg !3768
  br label %cond.end30, !dbg !3768

cond.false29:                                     ; preds = %while.body
  br label %cond.end30, !dbg !3768

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_gimple_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !3768
  %call32 = call %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %cond31), !dbg !3768
  store %union.gimple_statement_d* %call32, %union.gimple_statement_d** %t, align 8, !dbg !3770
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3771
  %call33 = call i32 @gimple_code(%union.gimple_statement_d* %14), !dbg !3773
  %cmp34 = icmp eq i32 %call33, 16, !dbg !3774
  br i1 %cmp34, label %if.then35, label %if.else, !dbg !3775

if.then35:                                        ; preds = %cond.end30
  call void @llvm.dbg.declare(metadata i32* %k, metadata !3776, metadata !DIExpression()), !dbg !3778
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3779
  %call36 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %15), !dbg !3779
  %call37 = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %worklist, i32 %call36), !dbg !3779
  store i32 0, i32* %k, align 4, !dbg !3780
  br label %for.cond38, !dbg !3782

for.cond38:                                       ; preds = %for.inc59, %if.then35
  %16 = load i32, i32* %k, align 4, !dbg !3783
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3785
  %call39 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %17), !dbg !3786
  %cmp40 = icmp ult i32 %16, %call39, !dbg !3787
  br i1 %cmp40, label %for.body41, label %for.end61, !dbg !3788

for.body41:                                       ; preds = %for.cond38
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3789, metadata !DIExpression()), !dbg !3791
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3792
  %19 = load i32, i32* %k, align 4, !dbg !3792
  %call42 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %18, i32 %19), !dbg !3792
  %call43 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call42), !dbg !3792
  store %union.tree_node* %call43, %union.tree_node** %arg, align 8, !dbg !3791
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3793
  %base44 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !3793
  %21 = bitcast %struct.tree_base* %base44 to i64*, !dbg !3793
  %bf.load = load i64, i64* %21, align 8, !dbg !3793
  %bf.clear = and i64 %bf.load, 65535, !dbg !3793
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3793
  %cmp45 = icmp eq i32 %bf.cast, 141, !dbg !3795
  br i1 %cmp45, label %if.then46, label %if.end58, !dbg !3796

if.then46:                                        ; preds = %for.body41
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %n, metadata !3797, metadata !DIExpression()), !dbg !3799
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3800
  %call47 = call %union.gimple_statement_d* @mark_operand_necessary(%union.tree_node* %22), !dbg !3801
  store %union.gimple_statement_d* %call47, %union.gimple_statement_d** %n, align 8, !dbg !3799
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %n, align 8, !dbg !3802
  %tobool48 = icmp ne %union.gimple_statement_d* %23, null, !dbg !3802
  br i1 %tobool48, label %if.then49, label %if.end57, !dbg !3804

if.then49:                                        ; preds = %if.then46
  %24 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3805
  %tobool50 = icmp ne %struct.VEC_gimple_heap* %24, null, !dbg !3805
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !3805

cond.true51:                                      ; preds = %if.then49
  %25 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %worklist, align 8, !dbg !3805
  %base52 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %25, i32 0, i32 0, !dbg !3805
  br label %cond.end54, !dbg !3805

cond.false53:                                     ; preds = %if.then49
  br label %cond.end54, !dbg !3805

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_gimple_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !3805
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %n, align 8, !dbg !3805
  %call56 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond55, %union.gimple_statement_d* %26), !dbg !3805
  br label %if.end57, !dbg !3805

if.end57:                                         ; preds = %cond.end54, %if.then46
  br label %if.end58, !dbg !3806

if.end58:                                         ; preds = %if.end57, %for.body41
  br label %for.inc59, !dbg !3807

for.inc59:                                        ; preds = %if.end58
  %27 = load i32, i32* %k, align 4, !dbg !3808
  %inc60 = add i32 %27, 1, !dbg !3808
  store i32 %inc60, i32* %k, align 4, !dbg !3808
  br label %for.cond38, !dbg !3809, !llvm.loop !3810

for.end61:                                        ; preds = %for.cond38
  br label %if.end76, !dbg !3812

if.else:                                          ; preds = %cond.end30
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !3813, metadata !DIExpression()), !dbg !3827
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !3828, metadata !DIExpression()), !dbg !3829
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3830
  %call62 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %28, i32 5), !dbg !3830
  store %union.tree_node* %call62, %union.tree_node** %use, align 8, !dbg !3830
  br label %for.cond63, !dbg !3830

for.cond63:                                       ; preds = %for.inc73, %if.else
  %call64 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !3832
  %tobool65 = icmp ne i8 %call64, 0, !dbg !3832
  %lnot = xor i1 %tobool65, true, !dbg !3832
  br i1 %lnot, label %for.body66, label %for.end75, !dbg !3830

for.body66:                                       ; preds = %for.cond63
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %n67, metadata !3834, metadata !DIExpression()), !dbg !3836
  %29 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !3837
  %call68 = call %union.gimple_statement_d* @mark_operand_necessary(%union.tree_node* %29), !dbg !3838
  store %union.gimple_statement_d* %call68, %union.gimple_statement_d** %n67, align 8, !dbg !3836
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %n67, align 8, !dbg !3839
  %tobool69 = icmp ne %union.gimple_statement_d* %30, null, !dbg !3839
  br i1 %tobool69, label %if.then70, label %if.end72, !dbg !3841

if.then70:                                        ; preds = %for.body66
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %n67, align 8, !dbg !3842
  %call71 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %worklist, %union.gimple_statement_d* %31), !dbg !3842
  br label %if.end72, !dbg !3842

if.end72:                                         ; preds = %if.then70, %for.body66
  br label %for.inc73, !dbg !3843

for.inc73:                                        ; preds = %if.end72
  %call74 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !3832
  store %union.tree_node* %call74, %union.tree_node** %use, align 8, !dbg !3832
  br label %for.cond63, !dbg !3832, !llvm.loop !3844

for.end75:                                        ; preds = %for.cond63
  br label %if.end76

if.end76:                                         ; preds = %for.end75, %for.end61
  br label %while.cond, !dbg !3765, !llvm.loop !3846

while.end:                                        ; preds = %cond.end23
  store i32 0, i32* %i, align 4, !dbg !3848
  br label %for.cond77, !dbg !3850

for.cond77:                                       ; preds = %for.inc101, %while.end
  %32 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3851
  %tobool78 = icmp ne %struct.VEC_gimple_heap* %32, null, !dbg !3851
  br i1 %tobool78, label %cond.true79, label %cond.false81, !dbg !3851

cond.true79:                                      ; preds = %for.cond77
  %33 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3851
  %base80 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %33, i32 0, i32 0, !dbg !3851
  br label %cond.end82, !dbg !3851

cond.false81:                                     ; preds = %for.cond77
  br label %cond.end82, !dbg !3851

cond.end82:                                       ; preds = %cond.false81, %cond.true79
  %cond83 = phi %struct.VEC_gimple_base* [ %base80, %cond.true79 ], [ null, %cond.false81 ], !dbg !3851
  %34 = load i32, i32* %i, align 4, !dbg !3851
  %call84 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond83, i32 %34, %union.gimple_statement_d** %t), !dbg !3851
  %tobool85 = icmp ne i32 %call84, 0, !dbg !3853
  br i1 %tobool85, label %for.body86, label %for.end103, !dbg !3853

for.body86:                                       ; preds = %cond.end82
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3854
  %call87 = call i32 @gimple_plf(%union.gimple_statement_d* %35, i32 1), !dbg !3857
  %tobool88 = icmp ne i32 %call87, 0, !dbg !3857
  br i1 %tobool88, label %if.end100, label %if.then89, !dbg !3858

if.then89:                                        ; preds = %for.body86
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3859, metadata !DIExpression()), !dbg !3867
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3868
  %tobool90 = icmp ne %struct._IO_FILE* %36, null, !dbg !3868
  br i1 %tobool90, label %land.lhs.true, label %if.end94, !dbg !3870

land.lhs.true:                                    ; preds = %if.then89
  %37 = load i32, i32* @dump_flags, align 4, !dbg !3871
  %and = and i32 %37, 8, !dbg !3872
  %tobool91 = icmp ne i32 %and, 0, !dbg !3872
  br i1 %tobool91, label %if.then92, label %if.end94, !dbg !3873

if.then92:                                        ; preds = %land.lhs.true
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3874
  %call93 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0)), !dbg !3876
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3877
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3878
  call void @print_gimple_stmt(%struct._IO_FILE* %39, %union.gimple_statement_d* %40, i32 0, i32 0), !dbg !3879
  br label %if.end94, !dbg !3880

if.end94:                                         ; preds = %if.then92, %land.lhs.true, %if.then89
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3881
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %41), !dbg !3882
  %42 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3882
  %43 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3882
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false), !dbg !3882
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3883
  %call95 = call i32 @gimple_code(%union.gimple_statement_d* %44), !dbg !3885
  %cmp96 = icmp eq i32 %call95, 16, !dbg !3886
  br i1 %cmp96, label %if.then97, label %if.else98, !dbg !3887

if.then97:                                        ; preds = %if.end94
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !3888
  br label %if.end99, !dbg !3888

if.else98:                                        ; preds = %if.end94
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !3889
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !3891
  call void @release_defs(%union.gimple_statement_d* %45), !dbg !3892
  br label %if.end99

if.end99:                                         ; preds = %if.else98, %if.then97
  br label %if.end100, !dbg !3893

if.end100:                                        ; preds = %if.end99, %for.body86
  br label %for.inc101, !dbg !3894

for.inc101:                                       ; preds = %if.end100
  %46 = load i32, i32* %i, align 4, !dbg !3895
  %inc102 = add nsw i32 %46, 1, !dbg !3895
  store i32 %inc102, i32* %i, align 4, !dbg !3895
  br label %for.cond77, !dbg !3896, !llvm.loop !3897

for.end103:                                       ; preds = %cond.end82
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %worklist), !dbg !3899
  ret void, !dbg !3900
}

declare dso_local void @loop_optimizer_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_pre(i8 zeroext %do_fre) #0 !dbg !3901 {
entry:
  %do_fre.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  store i8 %do_fre, i8* %do_fre.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_fre.addr, metadata !3904, metadata !DIExpression()), !dbg !3905
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3906, metadata !DIExpression()), !dbg !3907
  store i32 1, i32* @next_expression_id, align 4, !dbg !3908
  store %struct.VEC_pre_expr_heap* null, %struct.VEC_pre_expr_heap** @expressions, align 8, !dbg !3909
  %call = call %struct.pre_expr_d** @VEC_pre_expr_heap_safe_push(%struct.VEC_pre_expr_heap** @expressions, %struct.pre_expr_d* null), !dbg !3910
  %call1 = call i32 @get_max_value_id(), !dbg !3911
  %add = add i32 %call1, 1, !dbg !3911
  %call2 = call %struct.VEC_bitmap_set_t_heap* @VEC_bitmap_set_t_heap_alloc(i32 %add), !dbg !3911
  store %struct.VEC_bitmap_set_t_heap* %call2, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !3912
  %call3 = call i32 @get_max_value_id(), !dbg !3913
  %add4 = add i32 %call3, 1, !dbg !3913
  call void @VEC_bitmap_set_t_heap_safe_grow_cleared(%struct.VEC_bitmap_set_t_heap** @value_expressions, i32 %add4), !dbg !3913
  store %struct.VEC_unsigned_heap* null, %struct.VEC_unsigned_heap** @name_to_id, align 8, !dbg !3914
  %0 = load i8, i8* %do_fre.addr, align 1, !dbg !3915
  store i8 %0, i8* @in_fre, align 1, !dbg !3916
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** @inserted_exprs, align 8, !dbg !3917
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** @need_creation, align 8, !dbg !3918
  store %union.tree_node* null, %union.tree_node** @pretemp, align 8, !dbg !3919
  store %union.tree_node* null, %union.tree_node** @storetemp, align 8, !dbg !3920
  store %union.tree_node* null, %union.tree_node** @prephitemp, align 8, !dbg !3921
  call void @connect_infinite_loops_to_exit(), !dbg !3922
  call void @llvm.memset.p0i8.i64(i8* align 4 bitcast (%struct.anon* @pre_stats to i8*), i8 0, i64 20, i1 false), !dbg !3923
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3924
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3924
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3924
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3924
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 3, !dbg !3924
  %3 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3924
  %sub = sub nsw i32 %3, 2, !dbg !3924
  %conv = sext i32 %sub to i64, !dbg !3924
  %mul = mul i64 4, %conv, !dbg !3924
  %call5 = call i8* @xmalloc(i64 %mul), !dbg !3924
  %4 = bitcast i8* %call5 to i32*, !dbg !3924
  store i32* %4, i32** @postorder, align 8, !dbg !3925
  %5 = load i32*, i32** @postorder, align 8, !dbg !3926
  %call6 = call i32 @my_rev_post_order_compute(i32* %5, i8 zeroext 0), !dbg !3927
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3928
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3928
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !3928
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !3928
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !3928
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3928
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !3928
  br label %for.cond, !dbg !3928

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3930
  %tobool = icmp ne %struct.basic_block_def* %9, null, !dbg !3928
  br i1 %tobool, label %for.body, label %for.end, !dbg !3928

for.body:                                         ; preds = %for.cond
  %call9 = call i8* @xcalloc(i64 1, i64 72), !dbg !3932
  %10 = bitcast i8* %call9 to %struct.bb_bitmap_sets*, !dbg !3932
  %11 = bitcast %struct.bb_bitmap_sets* %10 to i8*, !dbg !3932
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3933
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 2, !dbg !3934
  store i8* %11, i8** %aux, align 8, !dbg !3935
  br label %for.inc, !dbg !3933

for.inc:                                          ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3930
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !3930
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3930
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !3930
  br label %for.cond, !dbg !3930, !llvm.loop !3936

for.end:                                          ; preds = %for.cond
  call void @calculate_dominance_info(i32 2), !dbg !3938
  call void @calculate_dominance_info(i32 1), !dbg !3939
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !3940
  %call10 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !3941
  store %struct.bitmap_head_def* %call10, %struct.bitmap_head_def** @inserted_phi_names, align 8, !dbg !3942
  %call11 = call %struct.htab* @htab_create(i64 5110, i32 (i8*)* @expr_pred_trans_hash, i32 (i8*, i8*)* @expr_pred_trans_eq, void (i8*)* @free), !dbg !3943
  store %struct.htab* %call11, %struct.htab** @phi_translate_table, align 8, !dbg !3944
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3945
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3945
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 3, !dbg !3945
  %16 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3945
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %16, i32 0, i32 2, !dbg !3945
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3945
  %tobool13 = icmp ne %struct.VEC_tree_gc* %17, null, !dbg !3945
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !3945

cond.true:                                        ; preds = %for.end
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3945
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !3945
  %gimple_df15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 3, !dbg !3945
  %19 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df15, align 8, !dbg !3945
  %ssa_names16 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %19, i32 0, i32 2, !dbg !3945
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names16, align 8, !dbg !3945
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %20, i32 0, i32 0, !dbg !3945
  br label %cond.end, !dbg !3945

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !3945

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3945
  %call17 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3945
  %mul18 = mul i32 %call17, 3, !dbg !3946
  %conv19 = zext i32 %mul18 to i64, !dbg !3945
  %call20 = call %struct.htab* @htab_create(i64 %conv19, i32 (i8*)* @pre_expr_hash, i32 (i8*, i8*)* @pre_expr_eq, void (i8*)* null), !dbg !3947
  store %struct.htab* %call20, %struct.htab** @expression_to_id, align 8, !dbg !3948
  %call21 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i64 16, i64 30), !dbg !3949
  store %struct.alloc_pool_def* %call21, %struct.alloc_pool_def** @bitmap_set_pool, align 8, !dbg !3950
  %call22 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0), i64 16, i64 30), !dbg !3951
  store %struct.alloc_pool_def* %call22, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !3952
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3953
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !3953
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !3953
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !3953
  %x_entry_block_ptr25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 0, !dbg !3953
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr25, align 8, !dbg !3953
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb, align 8, !dbg !3953
  br label %for.cond26, !dbg !3953

for.cond26:                                       ; preds = %for.inc37, %cond.end
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3955
  %tobool27 = icmp ne %struct.basic_block_def* %24, null, !dbg !3953
  br i1 %tobool27, label %for.body28, label %for.end39, !dbg !3953

for.body28:                                       ; preds = %for.cond26
  %call29 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !3957
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3959
  %aux30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 2, !dbg !3959
  %26 = load i8*, i8** %aux30, align 8, !dbg !3959
  %27 = bitcast i8* %26 to %struct.bb_bitmap_sets*, !dbg !3959
  %exp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %27, i32 0, i32 0, !dbg !3959
  store %struct.bitmap_set* %call29, %struct.bitmap_set** %exp_gen, align 8, !dbg !3960
  %call31 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !3961
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3962
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 2, !dbg !3962
  %29 = load i8*, i8** %aux32, align 8, !dbg !3962
  %30 = bitcast i8* %29 to %struct.bb_bitmap_sets*, !dbg !3962
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %30, i32 0, i32 1, !dbg !3962
  store %struct.bitmap_set* %call31, %struct.bitmap_set** %phi_gen, align 8, !dbg !3963
  %call33 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !3964
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3965
  %aux34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 2, !dbg !3965
  %32 = load i8*, i8** %aux34, align 8, !dbg !3965
  %33 = bitcast i8* %32 to %struct.bb_bitmap_sets*, !dbg !3965
  %tmp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %33, i32 0, i32 2, !dbg !3965
  store %struct.bitmap_set* %call33, %struct.bitmap_set** %tmp_gen, align 8, !dbg !3966
  %call35 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !3967
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3968
  %aux36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 2, !dbg !3968
  %35 = load i8*, i8** %aux36, align 8, !dbg !3968
  %36 = bitcast i8* %35 to %struct.bb_bitmap_sets*, !dbg !3968
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %36, i32 0, i32 3, !dbg !3968
  store %struct.bitmap_set* %call35, %struct.bitmap_set** %avail_out, align 8, !dbg !3969
  br label %for.inc37, !dbg !3970

for.inc37:                                        ; preds = %for.body28
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3955
  %next_bb38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 6, !dbg !3955
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb38, align 8, !dbg !3955
  store %struct.basic_block_def* %38, %struct.basic_block_def** %bb, align 8, !dbg !3955
  br label %for.cond26, !dbg !3955, !llvm.loop !3971

for.end39:                                        ; preds = %for.cond26
  %call40 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3973
  store %struct.bitmap_head_def* %call40, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3974
  ret void, !dbg !3975
}

declare dso_local void @scev_initialize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_avail() #0 !dbg !3976 {
entry:
  %block = alloca %struct.basic_block_def*, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %worklist = alloca %struct.basic_block_def**, align 8
  %sp = alloca i64, align 8
  %i = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  %e = alloca %struct.pre_expr_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %dom = alloca %struct.basic_block_def*, align 8
  %stmt_uid = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp71 = alloca %struct.gimple_stmt_iterator, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %op = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  %e103 = alloca %struct.pre_expr_d*, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %i136 = alloca i32, align 4
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %result = alloca %struct.pre_expr_d*, align 8
  %ops = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %result205 = alloca %struct.pre_expr_d*, align 8
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %i209 = alloca i32, align 4
  %ref248 = alloca %struct.vn_reference_s*, align 8
  %i249 = alloca i32, align 4
  %vro250 = alloca %struct.vn_reference_op_struct*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !3977, metadata !DIExpression()), !dbg !3978
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !3979, metadata !DIExpression()), !dbg !3980
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %worklist, metadata !3981, metadata !DIExpression()), !dbg !3982
  call void @llvm.dbg.declare(metadata i64* %sp, metadata !3983, metadata !DIExpression()), !dbg !3984
  store i64 0, i64* %sp, align 8, !dbg !3984
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3985, metadata !DIExpression()), !dbg !3986
  store i32 1, i32* %i, align 4, !dbg !3987
  br label %for.cond, !dbg !3989

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3990
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3992
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3992
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3992
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3992
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %2, i32 0, i32 2, !dbg !3992
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3992
  %tobool = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !3992
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3992

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3992
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3992
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !3992
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3992
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i32 0, i32 2, !dbg !3992
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !3992
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %6, i32 0, i32 0, !dbg !3992
  br label %cond.end, !dbg !3992

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3992
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3992
  %cmp = icmp ult i32 %0, %call, !dbg !3993
  br i1 %cmp, label %for.body, label %for.end, !dbg !3994

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3995, metadata !DIExpression()), !dbg !3997
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3998
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3998
  %gimple_df5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 3, !dbg !3998
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df5, align 8, !dbg !3998
  %ssa_names6 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !3998
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names6, align 8, !dbg !3998
  %tobool7 = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !3998
  br i1 %tobool7, label %cond.true8, label %cond.false13, !dbg !3998

cond.true8:                                       ; preds = %for.body
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3998
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3998
  %gimple_df10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 3, !dbg !3998
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df10, align 8, !dbg !3998
  %ssa_names11 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !3998
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names11, align 8, !dbg !3998
  %base12 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !3998
  br label %cond.end14, !dbg !3998

cond.false13:                                     ; preds = %for.body
  br label %cond.end14, !dbg !3998

cond.end14:                                       ; preds = %cond.false13, %cond.true8
  %cond15 = phi %struct.VEC_tree_base* [ %base12, %cond.true8 ], [ null, %cond.false13 ], !dbg !3998
  %13 = load i32, i32* %i, align 4, !dbg !3998
  %call16 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond15, i32 %13), !dbg !3998
  store %union.tree_node* %call16, %union.tree_node** %name, align 8, !dbg !3997
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e, metadata !3999, metadata !DIExpression()), !dbg !4000
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4001
  %tobool17 = icmp ne %union.tree_node* %14, null, !dbg !4001
  br i1 %tobool17, label %lor.lhs.false, label %if.then, !dbg !4003

lor.lhs.false:                                    ; preds = %cond.end14
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4004
  %base18 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4004
  %16 = bitcast %struct.tree_base* %base18 to i64*, !dbg !4004
  %bf.load = load i64, i64* %16, align 8, !dbg !4004
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !4004
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4004
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4004
  %tobool19 = icmp ne i32 %bf.cast, 0, !dbg !4004
  br i1 %tobool19, label %lor.lhs.false20, label %if.then, !dbg !4005

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4006
  %call21 = call zeroext i8 @has_zero_uses(%union.tree_node* %17), !dbg !4007
  %conv = zext i8 %call21 to i32, !dbg !4007
  %tobool22 = icmp ne i32 %conv, 0, !dbg !4007
  br i1 %tobool22, label %if.then, label %lor.lhs.false23, !dbg !4008

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %18 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4009
  %call24 = call zeroext i8 @is_gimple_reg(%union.tree_node* %18), !dbg !4010
  %tobool25 = icmp ne i8 %call24, 0, !dbg !4010
  br i1 %tobool25, label %if.end, label %if.then, !dbg !4011

if.then:                                          ; preds = %lor.lhs.false23, %lor.lhs.false20, %lor.lhs.false, %cond.end14
  br label %for.inc, !dbg !4012

if.end:                                           ; preds = %lor.lhs.false23
  %19 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4013
  %call26 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %19), !dbg !4014
  store %struct.pre_expr_d* %call26, %struct.pre_expr_d** %e, align 8, !dbg !4015
  %20 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !4016
  %call27 = call i32 @get_expr_value_id(%struct.pre_expr_d* %20), !dbg !4017
  %21 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !4018
  call void @add_to_value(i32 %call27, %struct.pre_expr_d* %21), !dbg !4019
  %22 = load i8, i8* @in_fre, align 1, !dbg !4020
  %tobool28 = icmp ne i8 %22, 0, !dbg !4020
  br i1 %tobool28, label %if.end31, label %if.then29, !dbg !4022

if.then29:                                        ; preds = %if.end
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4023
  %add.ptr30 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !4023
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr30, i32 0, i32 1, !dbg !4023
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4023
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 0, !dbg !4023
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4023
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 2, !dbg !4023
  %26 = load i8*, i8** %aux, align 8, !dbg !4023
  %27 = bitcast i8* %26 to %struct.bb_bitmap_sets*, !dbg !4023
  %tmp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %27, i32 0, i32 2, !dbg !4023
  %28 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen, align 8, !dbg !4023
  %29 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !4024
  call void @bitmap_insert_into_set(%struct.bitmap_set* %28, %struct.pre_expr_d* %29), !dbg !4025
  br label %if.end31, !dbg !4025

if.end31:                                         ; preds = %if.then29, %if.end
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4026
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !4026
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 1, !dbg !4026
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !4026
  %x_entry_block_ptr34 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 0, !dbg !4026
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr34, align 8, !dbg !4026
  %aux35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 2, !dbg !4026
  %33 = load i8*, i8** %aux35, align 8, !dbg !4026
  %34 = bitcast i8* %33 to %struct.bb_bitmap_sets*, !dbg !4026
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %34, i32 0, i32 3, !dbg !4026
  %35 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !4026
  %36 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !4027
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %35, %struct.pre_expr_d* %36), !dbg !4028
  br label %for.inc, !dbg !4029

for.inc:                                          ; preds = %if.end31, %if.then
  %37 = load i32, i32* %i, align 4, !dbg !4030
  %inc = add i32 %37, 1, !dbg !4030
  store i32 %inc, i32* %i, align 4, !dbg !4030
  br label %for.cond, !dbg !4031, !llvm.loop !4032

for.end:                                          ; preds = %cond.end
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4034
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !4034
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !4034
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !4034
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 3, !dbg !4034
  %40 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4034
  %conv38 = sext i32 %40 to i64, !dbg !4034
  %mul = mul i64 8, %conv38, !dbg !4034
  %call39 = call i8* @xmalloc(i64 %mul), !dbg !4034
  %41 = bitcast i8* %call39 to %struct.basic_block_def**, !dbg !4034
  store %struct.basic_block_def** %41, %struct.basic_block_def*** %worklist, align 8, !dbg !4035
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4036
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !4036
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !4036
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !4036
  %x_entry_block_ptr42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 0, !dbg !4036
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr42, align 8, !dbg !4036
  %call43 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %44), !dbg !4038
  store %struct.basic_block_def* %call43, %struct.basic_block_def** %son, align 8, !dbg !4039
  br label %for.cond44, !dbg !4040

for.cond44:                                       ; preds = %for.inc48, %for.end
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4041
  %tobool45 = icmp ne %struct.basic_block_def* %45, null, !dbg !4043
  br i1 %tobool45, label %for.body46, label %for.end50, !dbg !4043

for.body46:                                       ; preds = %for.cond44
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4044
  %47 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !4045
  %48 = load i64, i64* %sp, align 8, !dbg !4046
  %inc47 = add i64 %48, 1, !dbg !4046
  store i64 %inc47, i64* %sp, align 8, !dbg !4046
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %47, i64 %48, !dbg !4045
  store %struct.basic_block_def* %46, %struct.basic_block_def** %arrayidx, align 8, !dbg !4047
  br label %for.inc48, !dbg !4045

for.inc48:                                        ; preds = %for.body46
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4048
  %call49 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %49), !dbg !4049
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %son, align 8, !dbg !4050
  br label %for.cond44, !dbg !4051, !llvm.loop !4052

for.end50:                                        ; preds = %for.cond44
  br label %while.cond, !dbg !4054

while.cond:                                       ; preds = %for.end344, %for.end50
  %50 = load i64, i64* %sp, align 8, !dbg !4055
  %tobool51 = icmp ne i64 %50, 0, !dbg !4054
  br i1 %tobool51, label %while.body, label %while.end, !dbg !4054

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4056, metadata !DIExpression()), !dbg !4058
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4059, metadata !DIExpression()), !dbg !4060
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i32* %stmt_uid, metadata !4063, metadata !DIExpression()), !dbg !4064
  store i32 1, i32* %stmt_uid, align 4, !dbg !4064
  %51 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !4065
  %52 = load i64, i64* %sp, align 8, !dbg !4066
  %dec = add i64 %52, -1, !dbg !4066
  store i64 %dec, i64* %sp, align 8, !dbg !4066
  %arrayidx52 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %51, i64 %dec, !dbg !4065
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx52, align 8, !dbg !4065
  store %struct.basic_block_def* %53, %struct.basic_block_def** %block, align 8, !dbg !4067
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4068
  %call53 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %54), !dbg !4069
  store %struct.basic_block_def* %call53, %struct.basic_block_def** %dom, align 8, !dbg !4070
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !4071
  %tobool54 = icmp ne %struct.basic_block_def* %55, null, !dbg !4071
  br i1 %tobool54, label %if.then55, label %if.end60, !dbg !4073

if.then55:                                        ; preds = %while.body
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4074
  %aux56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 2, !dbg !4074
  %57 = load i8*, i8** %aux56, align 8, !dbg !4074
  %58 = bitcast i8* %57 to %struct.bb_bitmap_sets*, !dbg !4074
  %avail_out57 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %58, i32 0, i32 3, !dbg !4074
  %59 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out57, align 8, !dbg !4074
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !4075
  %aux58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 2, !dbg !4075
  %61 = load i8*, i8** %aux58, align 8, !dbg !4075
  %62 = bitcast i8* %61 to %struct.bb_bitmap_sets*, !dbg !4075
  %avail_out59 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %62, i32 0, i32 3, !dbg !4075
  %63 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out59, align 8, !dbg !4075
  call void @bitmap_set_copy(%struct.bitmap_set* %59, %struct.bitmap_set* %63), !dbg !4076
  br label %if.end60, !dbg !4076

if.end60:                                         ; preds = %if.then55, %while.body
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4077
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %64), !dbg !4079
  %65 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4079
  %66 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4079
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 24, i1 false), !dbg !4079
  br label %for.cond61, !dbg !4080

for.cond61:                                       ; preds = %for.inc66, %if.end60
  %call62 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4081
  %tobool63 = icmp ne i8 %call62, 0, !dbg !4083
  %lnot = xor i1 %tobool63, true, !dbg !4083
  br i1 %lnot, label %for.body64, label %for.end67, !dbg !4084

for.body64:                                       ; preds = %for.cond61
  %call65 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4085
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4086
  call void @make_values_for_phi(%union.gimple_statement_d* %call65, %struct.basic_block_def* %67), !dbg !4087
  br label %for.inc66, !dbg !4087

for.inc66:                                        ; preds = %for.body64
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4088
  br label %for.cond61, !dbg !4089, !llvm.loop !4090

for.end67:                                        ; preds = %for.cond61
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4092
  %aux68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 2, !dbg !4092
  %69 = load i8*, i8** %aux68, align 8, !dbg !4092
  %70 = bitcast i8* %69 to %struct.bb_bitmap_sets*, !dbg !4092
  %contains_may_not_return_call = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %70, i32 0, i32 8, !dbg !4092
  %bf.load69 = load i8, i8* %contains_may_not_return_call, align 8, !dbg !4093
  %bf.clear70 = and i8 %bf.load69, -5, !dbg !4093
  store i8 %bf.clear70, i8* %contains_may_not_return_call, align 8, !dbg !4093
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4094
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp71, %struct.basic_block_def* %71), !dbg !4096
  %72 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4096
  %73 = bitcast %struct.gimple_stmt_iterator* %tmp71 to i8*, !dbg !4096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 24, i1 false), !dbg !4096
  br label %for.cond72, !dbg !4097

for.cond72:                                       ; preds = %for.inc334, %for.end67
  %call73 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4098
  %tobool74 = icmp ne i8 %call73, 0, !dbg !4100
  %lnot75 = xor i1 %tobool74, true, !dbg !4100
  br i1 %lnot75, label %for.body76, label %for.end335, !dbg !4101

for.body76:                                       ; preds = %for.cond72
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4102, metadata !DIExpression()), !dbg !4104
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !4105, metadata !DIExpression()), !dbg !4106
  %call77 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4107
  store %union.gimple_statement_d* %call77, %union.gimple_statement_d** %stmt, align 8, !dbg !4108
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4109
  %75 = load i32, i32* %stmt_uid, align 4, !dbg !4110
  %inc78 = add i32 %75, 1, !dbg !4110
  store i32 %inc78, i32* %stmt_uid, align 4, !dbg !4110
  call void @gimple_set_uid(%union.gimple_statement_d* %74, i32 %75), !dbg !4111
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4112
  %call79 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %76), !dbg !4114
  %conv80 = zext i8 %call79 to i32, !dbg !4114
  %tobool81 = icmp ne i32 %conv80, 0, !dbg !4114
  br i1 %tobool81, label %land.lhs.true, label %if.end96, !dbg !4115

land.lhs.true:                                    ; preds = %for.body76
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4116
  %call82 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %77), !dbg !4117
  %tobool83 = icmp ne i8 %call82, 0, !dbg !4117
  br i1 %tobool83, label %if.end96, label %if.then84, !dbg !4118

if.then84:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4119, metadata !DIExpression()), !dbg !4121
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4122
  %call85 = call i32 @gimple_call_flags(%union.gimple_statement_d* %78), !dbg !4123
  store i32 %call85, i32* %flags, align 4, !dbg !4121
  %79 = load i32, i32* %flags, align 4, !dbg !4124
  %and = and i32 %79, 1, !dbg !4126
  %tobool86 = icmp ne i32 %and, 0, !dbg !4126
  br i1 %tobool86, label %lor.lhs.false87, label %if.then90, !dbg !4127

lor.lhs.false87:                                  ; preds = %if.then84
  %80 = load i32, i32* %flags, align 4, !dbg !4128
  %and88 = and i32 %80, 4, !dbg !4129
  %tobool89 = icmp ne i32 %and88, 0, !dbg !4129
  br i1 %tobool89, label %if.then90, label %if.end95, !dbg !4130

if.then90:                                        ; preds = %lor.lhs.false87, %if.then84
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4131
  %aux91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 2, !dbg !4131
  %82 = load i8*, i8** %aux91, align 8, !dbg !4131
  %83 = bitcast i8* %82 to %struct.bb_bitmap_sets*, !dbg !4131
  %contains_may_not_return_call92 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %83, i32 0, i32 8, !dbg !4131
  %bf.load93 = load i8, i8* %contains_may_not_return_call92, align 8, !dbg !4132
  %bf.clear94 = and i8 %bf.load93, -5, !dbg !4132
  %bf.set = or i8 %bf.clear94, 4, !dbg !4132
  store i8 %bf.set, i8* %contains_may_not_return_call92, align 8, !dbg !4132
  br label %if.end95, !dbg !4131

if.end95:                                         ; preds = %if.then90, %lor.lhs.false87
  br label %if.end96, !dbg !4133

if.end96:                                         ; preds = %if.end95, %land.lhs.true, %for.body76
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4134
  %call97 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %84, i32 2), !dbg !4134
  store %union.tree_node* %call97, %union.tree_node** %op, align 8, !dbg !4134
  br label %for.cond98, !dbg !4134

for.cond98:                                       ; preds = %for.inc113, %if.end96
  %call99 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4136
  %tobool100 = icmp ne i8 %call99, 0, !dbg !4136
  %lnot101 = xor i1 %tobool100, true, !dbg !4136
  br i1 %lnot101, label %for.body102, label %for.end115, !dbg !4134

for.body102:                                      ; preds = %for.cond98
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e103, metadata !4138, metadata !DIExpression()), !dbg !4140
  %85 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4141
  %call104 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %85), !dbg !4142
  store %struct.pre_expr_d* %call104, %struct.pre_expr_d** %e103, align 8, !dbg !4140
  %86 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e103, align 8, !dbg !4143
  %call105 = call i32 @get_expr_value_id(%struct.pre_expr_d* %86), !dbg !4144
  %87 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e103, align 8, !dbg !4145
  call void @add_to_value(i32 %call105, %struct.pre_expr_d* %87), !dbg !4146
  %88 = load i8, i8* @in_fre, align 1, !dbg !4147
  %tobool106 = icmp ne i8 %88, 0, !dbg !4147
  br i1 %tobool106, label %if.end110, label %if.then107, !dbg !4149

if.then107:                                       ; preds = %for.body102
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4150
  %aux108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 2, !dbg !4150
  %90 = load i8*, i8** %aux108, align 8, !dbg !4150
  %91 = bitcast i8* %90 to %struct.bb_bitmap_sets*, !dbg !4150
  %tmp_gen109 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %91, i32 0, i32 2, !dbg !4150
  %92 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen109, align 8, !dbg !4150
  %93 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e103, align 8, !dbg !4151
  call void @bitmap_insert_into_set(%struct.bitmap_set* %92, %struct.pre_expr_d* %93), !dbg !4152
  br label %if.end110, !dbg !4152

if.end110:                                        ; preds = %if.then107, %for.body102
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4153
  %aux111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 2, !dbg !4153
  %95 = load i8*, i8** %aux111, align 8, !dbg !4153
  %96 = bitcast i8* %95 to %struct.bb_bitmap_sets*, !dbg !4153
  %avail_out112 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %96, i32 0, i32 3, !dbg !4153
  %97 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out112, align 8, !dbg !4153
  %98 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e103, align 8, !dbg !4154
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %97, %struct.pre_expr_d* %98), !dbg !4155
  br label %for.inc113, !dbg !4156

for.inc113:                                       ; preds = %if.end110
  %call114 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4136
  store %union.tree_node* %call114, %union.tree_node** %op, align 8, !dbg !4136
  br label %for.cond98, !dbg !4136, !llvm.loop !4157

for.end115:                                       ; preds = %for.cond98
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4159
  %call116 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %99), !dbg !4161
  %conv117 = zext i8 %call116 to i32, !dbg !4161
  %tobool118 = icmp ne i32 %conv117, 0, !dbg !4161
  br i1 %tobool118, label %if.then123, label %lor.lhs.false119, !dbg !4162

lor.lhs.false119:                                 ; preds = %for.end115
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4163
  %call120 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %100), !dbg !4164
  %conv121 = zext i8 %call120 to i32, !dbg !4164
  %tobool122 = icmp ne i32 %conv121, 0, !dbg !4164
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !4165

if.then123:                                       ; preds = %lor.lhs.false119, %for.end115
  br label %for.inc334, !dbg !4166

if.end124:                                        ; preds = %lor.lhs.false119
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4167
  %call125 = call i32 @gimple_code(%union.gimple_statement_d* %101), !dbg !4168
  switch i32 %call125, label %sw.default332 [
    i32 9, label %sw.bb
    i32 8, label %sw.bb135
    i32 6, label %sw.bb204
  ], !dbg !4169

sw.bb:                                            ; preds = %if.end124
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4170
  %call126 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %102, i32 1), !dbg !4170
  store %union.tree_node* %call126, %union.tree_node** %op, align 8, !dbg !4170
  br label %for.cond127, !dbg !4170

for.cond127:                                      ; preds = %for.inc132, %sw.bb
  %call128 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4173
  %tobool129 = icmp ne i8 %call128, 0, !dbg !4173
  %lnot130 = xor i1 %tobool129, true, !dbg !4173
  br i1 %lnot130, label %for.body131, label %for.end134, !dbg !4170

for.body131:                                      ; preds = %for.cond127
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4175
  %104 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4176
  call void @add_to_exp_gen(%struct.basic_block_def* %103, %union.tree_node* %104), !dbg !4177
  br label %for.inc132, !dbg !4177

for.inc132:                                       ; preds = %for.body131
  %call133 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4173
  store %union.tree_node* %call133, %union.tree_node** %op, align 8, !dbg !4173
  br label %for.cond127, !dbg !4173, !llvm.loop !4178

for.end134:                                       ; preds = %for.cond127
  br label %for.inc334, !dbg !4180

sw.bb135:                                         ; preds = %if.end124
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !4181, metadata !DIExpression()), !dbg !4183
  call void @llvm.dbg.declare(metadata i32* %i136, metadata !4184, metadata !DIExpression()), !dbg !4185
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !4186, metadata !DIExpression()), !dbg !4187
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result, metadata !4188, metadata !DIExpression()), !dbg !4189
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %result, align 8, !dbg !4189
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %ops, metadata !4190, metadata !DIExpression()), !dbg !4191
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %ops, align 8, !dbg !4191
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4192
  %call137 = call zeroext i8 @can_value_number_call(%union.gimple_statement_d* %105), !dbg !4194
  %tobool138 = icmp ne i8 %call137, 0, !dbg !4194
  br i1 %tobool138, label %if.end140, label %if.then139, !dbg !4195

if.then139:                                       ; preds = %sw.bb135
  br label %for.inc334, !dbg !4196

if.end140:                                        ; preds = %sw.bb135
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4197
  call void @copy_reference_ops_from_call(%union.gimple_statement_d* %106, %struct.VEC_vn_reference_op_s_heap** %ops), !dbg !4198
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4199
  %call141 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %107), !dbg !4200
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4201
  %call142 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %108), !dbg !4202
  %109 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops, align 8, !dbg !4203
  %call143 = call %union.tree_node* @vn_reference_lookup_pieces(%union.tree_node* %call141, i32 0, %union.tree_node* %call142, %struct.VEC_vn_reference_op_s_heap* %109, %struct.vn_reference_s** %ref, i8 zeroext 0), !dbg !4204
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %ops), !dbg !4205
  %110 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !4206
  %tobool144 = icmp ne %struct.vn_reference_s* %110, null, !dbg !4206
  br i1 %tobool144, label %if.end146, label %if.then145, !dbg !4208

if.then145:                                       ; preds = %if.end140
  br label %for.inc334, !dbg !4209

if.end146:                                        ; preds = %if.end140
  store i32 0, i32* %i136, align 4, !dbg !4210
  br label %for.cond147, !dbg !4212

for.cond147:                                      ; preds = %for.inc194, %if.end146
  %111 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !4213
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %111, i32 0, i32 5, !dbg !4213
  %112 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !4213
  %tobool148 = icmp ne %struct.VEC_vn_reference_op_s_heap* %112, null, !dbg !4213
  br i1 %tobool148, label %cond.true149, label %cond.false152, !dbg !4213

cond.true149:                                     ; preds = %for.cond147
  %113 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !4213
  %operands150 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %113, i32 0, i32 5, !dbg !4213
  %114 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands150, align 8, !dbg !4213
  %base151 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %114, i32 0, i32 0, !dbg !4213
  br label %cond.end153, !dbg !4213

cond.false152:                                    ; preds = %for.cond147
  br label %cond.end153, !dbg !4213

cond.end153:                                      ; preds = %cond.false152, %cond.true149
  %cond154 = phi %struct.VEC_vn_reference_op_s_base* [ %base151, %cond.true149 ], [ null, %cond.false152 ], !dbg !4213
  %115 = load i32, i32* %i136, align 4, !dbg !4213
  %call155 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond154, i32 %115, %struct.vn_reference_op_struct** %vro), !dbg !4213
  %tobool156 = icmp ne i32 %call155, 0, !dbg !4215
  br i1 %tobool156, label %for.body157, label %for.end196, !dbg !4215

for.body157:                                      ; preds = %cond.end153
  %116 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4216
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %116, i32 0, i32 2, !dbg !4219
  %117 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !4219
  %tobool158 = icmp ne %union.tree_node* %117, null, !dbg !4216
  br i1 %tobool158, label %land.lhs.true159, label %if.end169, !dbg !4220

land.lhs.true159:                                 ; preds = %for.body157
  %118 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4221
  %op0160 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %118, i32 0, i32 2, !dbg !4221
  %119 = load %union.tree_node*, %union.tree_node** %op0160, align 8, !dbg !4221
  %base161 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !4221
  %120 = bitcast %struct.tree_base* %base161 to i64*, !dbg !4221
  %bf.load162 = load i64, i64* %120, align 8, !dbg !4221
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !4221
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !4221
  %cmp165 = icmp eq i32 %bf.cast164, 141, !dbg !4222
  br i1 %cmp165, label %if.then167, label %if.end169, !dbg !4223

if.then167:                                       ; preds = %land.lhs.true159
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4224
  %122 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4225
  %op0168 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %122, i32 0, i32 2, !dbg !4226
  %123 = load %union.tree_node*, %union.tree_node** %op0168, align 8, !dbg !4226
  call void @add_to_exp_gen(%struct.basic_block_def* %121, %union.tree_node* %123), !dbg !4227
  br label %if.end169, !dbg !4227

if.end169:                                        ; preds = %if.then167, %land.lhs.true159, %for.body157
  %124 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4228
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %124, i32 0, i32 3, !dbg !4230
  %125 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !4230
  %tobool170 = icmp ne %union.tree_node* %125, null, !dbg !4228
  br i1 %tobool170, label %land.lhs.true171, label %if.end181, !dbg !4231

land.lhs.true171:                                 ; preds = %if.end169
  %126 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4232
  %op1172 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %126, i32 0, i32 3, !dbg !4232
  %127 = load %union.tree_node*, %union.tree_node** %op1172, align 8, !dbg !4232
  %base173 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !4232
  %128 = bitcast %struct.tree_base* %base173 to i64*, !dbg !4232
  %bf.load174 = load i64, i64* %128, align 8, !dbg !4232
  %bf.clear175 = and i64 %bf.load174, 65535, !dbg !4232
  %bf.cast176 = trunc i64 %bf.clear175 to i32, !dbg !4232
  %cmp177 = icmp eq i32 %bf.cast176, 141, !dbg !4233
  br i1 %cmp177, label %if.then179, label %if.end181, !dbg !4234

if.then179:                                       ; preds = %land.lhs.true171
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4235
  %130 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4236
  %op1180 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %130, i32 0, i32 3, !dbg !4237
  %131 = load %union.tree_node*, %union.tree_node** %op1180, align 8, !dbg !4237
  call void @add_to_exp_gen(%struct.basic_block_def* %129, %union.tree_node* %131), !dbg !4238
  br label %if.end181, !dbg !4238

if.end181:                                        ; preds = %if.then179, %land.lhs.true171, %if.end169
  %132 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4239
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %132, i32 0, i32 4, !dbg !4241
  %133 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !4241
  %tobool182 = icmp ne %union.tree_node* %133, null, !dbg !4239
  br i1 %tobool182, label %land.lhs.true183, label %if.end193, !dbg !4242

land.lhs.true183:                                 ; preds = %if.end181
  %134 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4243
  %op2184 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %134, i32 0, i32 4, !dbg !4243
  %135 = load %union.tree_node*, %union.tree_node** %op2184, align 8, !dbg !4243
  %base185 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !4243
  %136 = bitcast %struct.tree_base* %base185 to i64*, !dbg !4243
  %bf.load186 = load i64, i64* %136, align 8, !dbg !4243
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !4243
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !4243
  %cmp189 = icmp eq i32 %bf.cast188, 141, !dbg !4244
  br i1 %cmp189, label %if.then191, label %if.end193, !dbg !4245

if.then191:                                       ; preds = %land.lhs.true183
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4246
  %138 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !4247
  %op2192 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %138, i32 0, i32 4, !dbg !4248
  %139 = load %union.tree_node*, %union.tree_node** %op2192, align 8, !dbg !4248
  call void @add_to_exp_gen(%struct.basic_block_def* %137, %union.tree_node* %139), !dbg !4249
  br label %if.end193, !dbg !4249

if.end193:                                        ; preds = %if.then191, %land.lhs.true183, %if.end181
  br label %for.inc194, !dbg !4250

for.inc194:                                       ; preds = %if.end193
  %140 = load i32, i32* %i136, align 4, !dbg !4251
  %inc195 = add i32 %140, 1, !dbg !4251
  store i32 %inc195, i32* %i136, align 4, !dbg !4251
  br label %for.cond147, !dbg !4252, !llvm.loop !4253

for.end196:                                       ; preds = %cond.end153
  %141 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !4255
  %call197 = call i8* @pool_alloc(%struct.alloc_pool_def* %141), !dbg !4256
  %142 = bitcast i8* %call197 to %struct.pre_expr_d*, !dbg !4257
  store %struct.pre_expr_d* %142, %struct.pre_expr_d** %result, align 8, !dbg !4258
  %143 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4259
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %143, i32 0, i32 0, !dbg !4260
  store i32 2, i32* %kind, align 8, !dbg !4261
  %144 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4262
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %144, i32 0, i32 1, !dbg !4263
  store i32 0, i32* %id, align 4, !dbg !4264
  %145 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !4265
  %146 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4266
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %146, i32 0, i32 2, !dbg !4266
  %reference = bitcast %union.pre_expr_union_d* %u to %struct.vn_reference_s**, !dbg !4266
  store %struct.vn_reference_s* %145, %struct.vn_reference_s** %reference, align 8, !dbg !4267
  %147 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4268
  %call198 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %147), !dbg !4269
  %148 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4270
  %call199 = call i32 @get_expr_value_id(%struct.pre_expr_d* %148), !dbg !4271
  %149 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4272
  call void @add_to_value(i32 %call199, %struct.pre_expr_d* %149), !dbg !4273
  %150 = load i8, i8* @in_fre, align 1, !dbg !4274
  %tobool200 = icmp ne i8 %150, 0, !dbg !4274
  br i1 %tobool200, label %if.end203, label %if.then201, !dbg !4276

if.then201:                                       ; preds = %for.end196
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4277
  %aux202 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 2, !dbg !4277
  %152 = load i8*, i8** %aux202, align 8, !dbg !4277
  %153 = bitcast i8* %152 to %struct.bb_bitmap_sets*, !dbg !4277
  %exp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %153, i32 0, i32 0, !dbg !4277
  %154 = load %struct.bitmap_set*, %struct.bitmap_set** %exp_gen, align 8, !dbg !4277
  %155 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !4278
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %154, %struct.pre_expr_d* %155), !dbg !4279
  br label %if.end203, !dbg !4279

if.end203:                                        ; preds = %if.then201, %for.end196
  br label %for.inc334, !dbg !4280

sw.bb204:                                         ; preds = %if.end124
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result205, metadata !4281, metadata !DIExpression()), !dbg !4283
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %result205, align 8, !dbg !4283
  %156 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4284
  %call206 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %156), !dbg !4284
  %idxprom = sext i32 %call206 to i64, !dbg !4284
  %arrayidx207 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4284
  %157 = load i32, i32* %arrayidx207, align 4, !dbg !4284
  switch i32 %157, label %sw.default [
    i32 6, label %sw.bb208
    i32 7, label %sw.bb208
    i32 5, label %sw.bb208
    i32 3, label %sw.bb247
    i32 4, label %sw.bb247
  ], !dbg !4285

sw.bb208:                                         ; preds = %sw.bb204, %sw.bb204, %sw.bb204
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !4286, metadata !DIExpression()), !dbg !4289
  call void @llvm.dbg.declare(metadata i32* %i209, metadata !4290, metadata !DIExpression()), !dbg !4291
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4292
  %call210 = call i32 @gimple_num_ops(%union.gimple_statement_d* %158), !dbg !4293
  %sub = sub i32 %call210, 1, !dbg !4294
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4295
  %call211 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %159), !dbg !4296
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4297
  %call212 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %160), !dbg !4298
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4299
  %call213 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %161), !dbg !4300
  %162 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4301
  %call214 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %162), !dbg !4302
  %call215 = call %union.tree_node* @vn_nary_op_lookup_pieces(i32 %sub, i32 %call211, %union.tree_node* %call212, %union.tree_node* %call213, %union.tree_node* %call214, %union.tree_node* null, %union.tree_node* null, %struct.vn_nary_op_s** %nary), !dbg !4303
  %163 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !4304
  %tobool216 = icmp ne %struct.vn_nary_op_s* %163, null, !dbg !4304
  br i1 %tobool216, label %if.end218, label %if.then217, !dbg !4306

if.then217:                                       ; preds = %sw.bb208
  br label %for.inc334, !dbg !4307

if.end218:                                        ; preds = %sw.bb208
  store i32 0, i32* %i209, align 4, !dbg !4308
  br label %for.cond219, !dbg !4310

for.cond219:                                      ; preds = %for.inc239, %if.end218
  %164 = load i32, i32* %i209, align 4, !dbg !4311
  %165 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !4313
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %165, i32 0, i32 1, !dbg !4314
  %bf.load220 = load i32, i32* %length, align 4, !dbg !4314
  %bf.lshr221 = lshr i32 %bf.load220, 16, !dbg !4314
  %cmp222 = icmp ult i32 %164, %bf.lshr221, !dbg !4315
  br i1 %cmp222, label %for.body224, label %for.end241, !dbg !4316

for.body224:                                      ; preds = %for.cond219
  %166 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !4317
  %op225 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %166, i32 0, i32 5, !dbg !4317
  %167 = load i32, i32* %i209, align 4, !dbg !4317
  %idxprom226 = zext i32 %167 to i64, !dbg !4317
  %arrayidx227 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op225, i64 0, i64 %idxprom226, !dbg !4317
  %168 = load %union.tree_node*, %union.tree_node** %arrayidx227, align 8, !dbg !4317
  %base228 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !4317
  %169 = bitcast %struct.tree_base* %base228 to i64*, !dbg !4317
  %bf.load229 = load i64, i64* %169, align 8, !dbg !4317
  %bf.clear230 = and i64 %bf.load229, 65535, !dbg !4317
  %bf.cast231 = trunc i64 %bf.clear230 to i32, !dbg !4317
  %cmp232 = icmp eq i32 %bf.cast231, 141, !dbg !4319
  br i1 %cmp232, label %if.then234, label %if.end238, !dbg !4320

if.then234:                                       ; preds = %for.body224
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4321
  %171 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !4322
  %op235 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %171, i32 0, i32 5, !dbg !4323
  %172 = load i32, i32* %i209, align 4, !dbg !4324
  %idxprom236 = zext i32 %172 to i64, !dbg !4322
  %arrayidx237 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op235, i64 0, i64 %idxprom236, !dbg !4322
  %173 = load %union.tree_node*, %union.tree_node** %arrayidx237, align 8, !dbg !4322
  call void @add_to_exp_gen(%struct.basic_block_def* %170, %union.tree_node* %173), !dbg !4325
  br label %if.end238, !dbg !4325

if.end238:                                        ; preds = %if.then234, %for.body224
  br label %for.inc239, !dbg !4326

for.inc239:                                       ; preds = %if.end238
  %174 = load i32, i32* %i209, align 4, !dbg !4327
  %inc240 = add i32 %174, 1, !dbg !4327
  store i32 %inc240, i32* %i209, align 4, !dbg !4327
  br label %for.cond219, !dbg !4328, !llvm.loop !4329

for.end241:                                       ; preds = %for.cond219
  %175 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !4331
  %call242 = call i8* @pool_alloc(%struct.alloc_pool_def* %175), !dbg !4332
  %176 = bitcast i8* %call242 to %struct.pre_expr_d*, !dbg !4333
  store %struct.pre_expr_d* %176, %struct.pre_expr_d** %result205, align 8, !dbg !4334
  %177 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4335
  %kind243 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %177, i32 0, i32 0, !dbg !4336
  store i32 1, i32* %kind243, align 8, !dbg !4337
  %178 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4338
  %id244 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %178, i32 0, i32 1, !dbg !4339
  store i32 0, i32* %id244, align 4, !dbg !4340
  %179 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !4341
  %180 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4342
  %u245 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %180, i32 0, i32 2, !dbg !4342
  %nary246 = bitcast %union.pre_expr_union_d* %u245 to %struct.vn_nary_op_s**, !dbg !4342
  store %struct.vn_nary_op_s* %179, %struct.vn_nary_op_s** %nary246, align 8, !dbg !4343
  br label %sw.epilog, !dbg !4344

sw.bb247:                                         ; preds = %sw.bb204, %sw.bb204
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref248, metadata !4345, metadata !DIExpression()), !dbg !4347
  call void @llvm.dbg.declare(metadata i32* %i249, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro250, metadata !4350, metadata !DIExpression()), !dbg !4351
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4352
  %call251 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %181), !dbg !4353
  %182 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4354
  %call252 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %182), !dbg !4355
  %call253 = call %union.tree_node* @vn_reference_lookup(%union.tree_node* %call251, %union.tree_node* %call252, i8 zeroext 1, %struct.vn_reference_s** %ref248), !dbg !4356
  %183 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref248, align 8, !dbg !4357
  %tobool254 = icmp ne %struct.vn_reference_s* %183, null, !dbg !4357
  br i1 %tobool254, label %if.end256, label %if.then255, !dbg !4359

if.then255:                                       ; preds = %sw.bb247
  br label %for.inc334, !dbg !4360

if.end256:                                        ; preds = %sw.bb247
  store i32 0, i32* %i249, align 4, !dbg !4361
  br label %for.cond257, !dbg !4363

for.cond257:                                      ; preds = %for.inc308, %if.end256
  %184 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref248, align 8, !dbg !4364
  %operands258 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %184, i32 0, i32 5, !dbg !4364
  %185 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands258, align 8, !dbg !4364
  %tobool259 = icmp ne %struct.VEC_vn_reference_op_s_heap* %185, null, !dbg !4364
  br i1 %tobool259, label %cond.true260, label %cond.false263, !dbg !4364

cond.true260:                                     ; preds = %for.cond257
  %186 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref248, align 8, !dbg !4364
  %operands261 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %186, i32 0, i32 5, !dbg !4364
  %187 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands261, align 8, !dbg !4364
  %base262 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %187, i32 0, i32 0, !dbg !4364
  br label %cond.end264, !dbg !4364

cond.false263:                                    ; preds = %for.cond257
  br label %cond.end264, !dbg !4364

cond.end264:                                      ; preds = %cond.false263, %cond.true260
  %cond265 = phi %struct.VEC_vn_reference_op_s_base* [ %base262, %cond.true260 ], [ null, %cond.false263 ], !dbg !4364
  %188 = load i32, i32* %i249, align 4, !dbg !4364
  %call266 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond265, i32 %188, %struct.vn_reference_op_struct** %vro250), !dbg !4364
  %tobool267 = icmp ne i32 %call266, 0, !dbg !4366
  br i1 %tobool267, label %for.body268, label %for.end310, !dbg !4366

for.body268:                                      ; preds = %cond.end264
  %189 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4367
  %op0269 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %189, i32 0, i32 2, !dbg !4370
  %190 = load %union.tree_node*, %union.tree_node** %op0269, align 8, !dbg !4370
  %tobool270 = icmp ne %union.tree_node* %190, null, !dbg !4367
  br i1 %tobool270, label %land.lhs.true271, label %if.end281, !dbg !4371

land.lhs.true271:                                 ; preds = %for.body268
  %191 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4372
  %op0272 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %191, i32 0, i32 2, !dbg !4372
  %192 = load %union.tree_node*, %union.tree_node** %op0272, align 8, !dbg !4372
  %base273 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !4372
  %193 = bitcast %struct.tree_base* %base273 to i64*, !dbg !4372
  %bf.load274 = load i64, i64* %193, align 8, !dbg !4372
  %bf.clear275 = and i64 %bf.load274, 65535, !dbg !4372
  %bf.cast276 = trunc i64 %bf.clear275 to i32, !dbg !4372
  %cmp277 = icmp eq i32 %bf.cast276, 141, !dbg !4373
  br i1 %cmp277, label %if.then279, label %if.end281, !dbg !4374

if.then279:                                       ; preds = %land.lhs.true271
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4375
  %195 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4376
  %op0280 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %195, i32 0, i32 2, !dbg !4377
  %196 = load %union.tree_node*, %union.tree_node** %op0280, align 8, !dbg !4377
  call void @add_to_exp_gen(%struct.basic_block_def* %194, %union.tree_node* %196), !dbg !4378
  br label %if.end281, !dbg !4378

if.end281:                                        ; preds = %if.then279, %land.lhs.true271, %for.body268
  %197 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4379
  %op1282 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %197, i32 0, i32 3, !dbg !4381
  %198 = load %union.tree_node*, %union.tree_node** %op1282, align 8, !dbg !4381
  %tobool283 = icmp ne %union.tree_node* %198, null, !dbg !4379
  br i1 %tobool283, label %land.lhs.true284, label %if.end294, !dbg !4382

land.lhs.true284:                                 ; preds = %if.end281
  %199 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4383
  %op1285 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %199, i32 0, i32 3, !dbg !4383
  %200 = load %union.tree_node*, %union.tree_node** %op1285, align 8, !dbg !4383
  %base286 = bitcast %union.tree_node* %200 to %struct.tree_base*, !dbg !4383
  %201 = bitcast %struct.tree_base* %base286 to i64*, !dbg !4383
  %bf.load287 = load i64, i64* %201, align 8, !dbg !4383
  %bf.clear288 = and i64 %bf.load287, 65535, !dbg !4383
  %bf.cast289 = trunc i64 %bf.clear288 to i32, !dbg !4383
  %cmp290 = icmp eq i32 %bf.cast289, 141, !dbg !4384
  br i1 %cmp290, label %if.then292, label %if.end294, !dbg !4385

if.then292:                                       ; preds = %land.lhs.true284
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4386
  %203 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4387
  %op1293 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %203, i32 0, i32 3, !dbg !4388
  %204 = load %union.tree_node*, %union.tree_node** %op1293, align 8, !dbg !4388
  call void @add_to_exp_gen(%struct.basic_block_def* %202, %union.tree_node* %204), !dbg !4389
  br label %if.end294, !dbg !4389

if.end294:                                        ; preds = %if.then292, %land.lhs.true284, %if.end281
  %205 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4390
  %op2295 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %205, i32 0, i32 4, !dbg !4392
  %206 = load %union.tree_node*, %union.tree_node** %op2295, align 8, !dbg !4392
  %tobool296 = icmp ne %union.tree_node* %206, null, !dbg !4390
  br i1 %tobool296, label %land.lhs.true297, label %if.end307, !dbg !4393

land.lhs.true297:                                 ; preds = %if.end294
  %207 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4394
  %op2298 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %207, i32 0, i32 4, !dbg !4394
  %208 = load %union.tree_node*, %union.tree_node** %op2298, align 8, !dbg !4394
  %base299 = bitcast %union.tree_node* %208 to %struct.tree_base*, !dbg !4394
  %209 = bitcast %struct.tree_base* %base299 to i64*, !dbg !4394
  %bf.load300 = load i64, i64* %209, align 8, !dbg !4394
  %bf.clear301 = and i64 %bf.load300, 65535, !dbg !4394
  %bf.cast302 = trunc i64 %bf.clear301 to i32, !dbg !4394
  %cmp303 = icmp eq i32 %bf.cast302, 141, !dbg !4395
  br i1 %cmp303, label %if.then305, label %if.end307, !dbg !4396

if.then305:                                       ; preds = %land.lhs.true297
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4397
  %211 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro250, align 8, !dbg !4398
  %op2306 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %211, i32 0, i32 4, !dbg !4399
  %212 = load %union.tree_node*, %union.tree_node** %op2306, align 8, !dbg !4399
  call void @add_to_exp_gen(%struct.basic_block_def* %210, %union.tree_node* %212), !dbg !4400
  br label %if.end307, !dbg !4400

if.end307:                                        ; preds = %if.then305, %land.lhs.true297, %if.end294
  br label %for.inc308, !dbg !4401

for.inc308:                                       ; preds = %if.end307
  %213 = load i32, i32* %i249, align 4, !dbg !4402
  %inc309 = add i32 %213, 1, !dbg !4402
  store i32 %inc309, i32* %i249, align 4, !dbg !4402
  br label %for.cond257, !dbg !4403, !llvm.loop !4404

for.end310:                                       ; preds = %cond.end264
  %214 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !4406
  %call311 = call i8* @pool_alloc(%struct.alloc_pool_def* %214), !dbg !4407
  %215 = bitcast i8* %call311 to %struct.pre_expr_d*, !dbg !4408
  store %struct.pre_expr_d* %215, %struct.pre_expr_d** %result205, align 8, !dbg !4409
  %216 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4410
  %kind312 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %216, i32 0, i32 0, !dbg !4411
  store i32 2, i32* %kind312, align 8, !dbg !4412
  %217 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4413
  %id313 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %217, i32 0, i32 1, !dbg !4414
  store i32 0, i32* %id313, align 4, !dbg !4415
  %218 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref248, align 8, !dbg !4416
  %219 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4417
  %u314 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %219, i32 0, i32 2, !dbg !4417
  %reference315 = bitcast %union.pre_expr_union_d* %u314 to %struct.vn_reference_s**, !dbg !4417
  store %struct.vn_reference_s* %218, %struct.vn_reference_s** %reference315, align 8, !dbg !4418
  br label %sw.epilog, !dbg !4419

sw.default:                                       ; preds = %sw.bb204
  %220 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4420
  %call316 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %220, i32 1), !dbg !4420
  store %union.tree_node* %call316, %union.tree_node** %op, align 8, !dbg !4420
  br label %for.cond317, !dbg !4420

for.cond317:                                      ; preds = %for.inc322, %sw.default
  %call318 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4422
  %tobool319 = icmp ne i8 %call318, 0, !dbg !4422
  %lnot320 = xor i1 %tobool319, true, !dbg !4422
  br i1 %lnot320, label %for.body321, label %for.end324, !dbg !4420

for.body321:                                      ; preds = %for.cond317
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4424
  %222 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4425
  call void @add_to_exp_gen(%struct.basic_block_def* %221, %union.tree_node* %222), !dbg !4426
  br label %for.inc322, !dbg !4426

for.inc322:                                       ; preds = %for.body321
  %call323 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4422
  store %union.tree_node* %call323, %union.tree_node** %op, align 8, !dbg !4422
  br label %for.cond317, !dbg !4422, !llvm.loop !4427

for.end324:                                       ; preds = %for.cond317
  br label %for.inc334, !dbg !4429

sw.epilog:                                        ; preds = %for.end310, %for.end241
  %223 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4430
  %call325 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %223), !dbg !4431
  %224 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4432
  %call326 = call i32 @get_expr_value_id(%struct.pre_expr_d* %224), !dbg !4433
  %225 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4434
  call void @add_to_value(i32 %call326, %struct.pre_expr_d* %225), !dbg !4435
  %226 = load i8, i8* @in_fre, align 1, !dbg !4436
  %tobool327 = icmp ne i8 %226, 0, !dbg !4436
  br i1 %tobool327, label %if.end331, label %if.then328, !dbg !4438

if.then328:                                       ; preds = %sw.epilog
  %227 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4439
  %aux329 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %227, i32 0, i32 2, !dbg !4439
  %228 = load i8*, i8** %aux329, align 8, !dbg !4439
  %229 = bitcast i8* %228 to %struct.bb_bitmap_sets*, !dbg !4439
  %exp_gen330 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %229, i32 0, i32 0, !dbg !4439
  %230 = load %struct.bitmap_set*, %struct.bitmap_set** %exp_gen330, align 8, !dbg !4439
  %231 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result205, align 8, !dbg !4440
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %230, %struct.pre_expr_d* %231), !dbg !4441
  br label %if.end331, !dbg !4441

if.end331:                                        ; preds = %if.then328, %sw.epilog
  br label %for.inc334, !dbg !4442

sw.default332:                                    ; preds = %if.end124
  br label %sw.epilog333, !dbg !4443

sw.epilog333:                                     ; preds = %sw.default332
  br label %for.inc334, !dbg !4444

for.inc334:                                       ; preds = %sw.epilog333, %if.end331, %for.end324, %if.then255, %if.then217, %if.end203, %if.then145, %if.then139, %for.end134, %if.then123
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4445
  br label %for.cond72, !dbg !4446, !llvm.loop !4447

for.end335:                                       ; preds = %for.cond72
  %232 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4449
  %call336 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %232), !dbg !4451
  store %struct.basic_block_def* %call336, %struct.basic_block_def** %son, align 8, !dbg !4452
  br label %for.cond337, !dbg !4453

for.cond337:                                      ; preds = %for.inc342, %for.end335
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4454
  %tobool338 = icmp ne %struct.basic_block_def* %233, null, !dbg !4456
  br i1 %tobool338, label %for.body339, label %for.end344, !dbg !4456

for.body339:                                      ; preds = %for.cond337
  %234 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4457
  %235 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !4458
  %236 = load i64, i64* %sp, align 8, !dbg !4459
  %inc340 = add i64 %236, 1, !dbg !4459
  store i64 %inc340, i64* %sp, align 8, !dbg !4459
  %arrayidx341 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %235, i64 %236, !dbg !4458
  store %struct.basic_block_def* %234, %struct.basic_block_def** %arrayidx341, align 8, !dbg !4460
  br label %for.inc342, !dbg !4458

for.inc342:                                       ; preds = %for.body339
  %237 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !4461
  %call343 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %237), !dbg !4462
  store %struct.basic_block_def* %call343, %struct.basic_block_def** %son, align 8, !dbg !4463
  br label %for.cond337, !dbg !4464, !llvm.loop !4465

for.end344:                                       ; preds = %for.cond337
  br label %while.cond, !dbg !4054, !llvm.loop !4467

while.end:                                        ; preds = %while.cond
  %238 = load %struct.basic_block_def**, %struct.basic_block_def*** %worklist, align 8, !dbg !4469
  %239 = bitcast %struct.basic_block_def** %238 to i8*, !dbg !4469
  call void @free(i8* %239), !dbg !4470
  ret void, !dbg !4471
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_antic() #0 !dbg !4472 {
entry:
  %changed = alloca i8, align 1
  %num_iterations = alloca i32, align 4
  %block = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %block65 = alloca %struct.basic_block_def*, align 8
  %block130 = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4473, metadata !DIExpression()), !dbg !4474
  store i8 1, i8* %changed, align 1, !dbg !4474
  call void @llvm.dbg.declare(metadata i32* %num_iterations, metadata !4475, metadata !DIExpression()), !dbg !4476
  store i32 0, i32* %num_iterations, align 4, !dbg !4476
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4479, metadata !DIExpression()), !dbg !4480
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4481
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4481
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4481
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4481
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !4481
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !4481
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !4482
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4483
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4484
  call void @sbitmap_zero(%struct.simple_bitmap_def* %3), !dbg !4485
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4486
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4486
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4486
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4486
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !4486
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4486
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !4486
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4486
  store %struct.basic_block_def* %7, %struct.basic_block_def** %block, align 8, !dbg !4486
  br label %for.cond, !dbg !4486

for.cond:                                         ; preds = %for.inc19, %entry
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4488
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4488
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !4488
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !4488
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4488
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !4488
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4488
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !4488
  br i1 %cmp, label %for.body, label %for.end21, !dbg !4486

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4490, metadata !DIExpression()), !dbg !4492
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4493, metadata !DIExpression()), !dbg !4494
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4495
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !4495
  %call5 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4495
  %13 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4495
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !4495
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 0, !dbg !4495
  store i32 %15, i32* %14, align 8, !dbg !4495
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !4495
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 1, !dbg !4495
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %16, align 8, !dbg !4495
  %18 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4495
  %19 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4495
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !4495
  br label %for.cond6, !dbg !4495

for.cond6:                                        ; preds = %for.inc, %for.body
  %20 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4497
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 0, !dbg !4497
  %22 = load i32, i32* %21, align 8, !dbg !4497
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 1, !dbg !4497
  %24 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %23, align 8, !dbg !4497
  %call7 = call zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %24, %struct.edge_def** %e), !dbg !4497
  %tobool = icmp ne i8 %call7, 0, !dbg !4495
  br i1 %tobool, label %for.body8, label %for.end, !dbg !4495

for.body8:                                        ; preds = %for.cond6
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4499
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 7, !dbg !4501
  %26 = load i32, i32* %flags, align 8, !dbg !4502
  %and = and i32 %26, -33, !dbg !4502
  store i32 %and, i32* %flags, align 8, !dbg !4502
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4503
  %flags9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 7, !dbg !4505
  %28 = load i32, i32* %flags9, align 8, !dbg !4505
  %and10 = and i32 %28, 2, !dbg !4506
  %tobool11 = icmp ne i32 %and10, 0, !dbg !4506
  br i1 %tobool11, label %if.then, label %if.end, !dbg !4507

if.then:                                          ; preds = %for.body8
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4508
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4510
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !4511
  %31 = load i32, i32* %index, align 8, !dbg !4511
  call void @SET_BIT(%struct.simple_bitmap_def* %29, i32 %31), !dbg !4512
  br label %for.end, !dbg !4513

if.end:                                           ; preds = %for.body8
  br label %for.inc, !dbg !4514

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4497
  br label %for.cond6, !dbg !4497, !llvm.loop !4515

for.end:                                          ; preds = %if.then, %for.cond6
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4517
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 2, !dbg !4517
  %33 = load i8*, i8** %aux, align 8, !dbg !4517
  %34 = bitcast i8* %33 to %struct.bb_bitmap_sets*, !dbg !4517
  %visited = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %34, i32 0, i32 8, !dbg !4517
  %bf.load = load i8, i8* %visited, align 8, !dbg !4518
  %bf.clear = and i8 %bf.load, -2, !dbg !4518
  store i8 %bf.clear, i8* %visited, align 8, !dbg !4518
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4519
  %aux12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 2, !dbg !4519
  %36 = load i8*, i8** %aux12, align 8, !dbg !4519
  %37 = bitcast i8* %36 to %struct.bb_bitmap_sets*, !dbg !4519
  %deferred = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %37, i32 0, i32 8, !dbg !4519
  %bf.load13 = load i8, i8* %deferred, align 8, !dbg !4520
  %bf.clear14 = and i8 %bf.load13, -3, !dbg !4520
  store i8 %bf.clear14, i8* %deferred, align 8, !dbg !4520
  %call15 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !4521
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4522
  %aux16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 2, !dbg !4522
  %39 = load i8*, i8** %aux16, align 8, !dbg !4522
  %40 = bitcast i8* %39 to %struct.bb_bitmap_sets*, !dbg !4522
  %antic_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %40, i32 0, i32 4, !dbg !4522
  store %struct.bitmap_set* %call15, %struct.bitmap_set** %antic_in, align 8, !dbg !4523
  %call17 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !4524
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4525
  %aux18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 2, !dbg !4525
  %42 = load i8*, i8** %aux18, align 8, !dbg !4525
  %43 = bitcast i8* %42 to %struct.bb_bitmap_sets*, !dbg !4525
  %pa_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %43, i32 0, i32 5, !dbg !4525
  store %struct.bitmap_set* %call17, %struct.bitmap_set** %pa_in, align 8, !dbg !4526
  br label %for.inc19, !dbg !4527

for.inc19:                                        ; preds = %for.end
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !4488
  %next_bb20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 6, !dbg !4488
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb20, align 8, !dbg !4488
  store %struct.basic_block_def* %45, %struct.basic_block_def** %block, align 8, !dbg !4488
  br label %for.cond, !dbg !4488, !llvm.loop !4528

for.end21:                                        ; preds = %for.cond
  %call22 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !4530
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4531
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !4531
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !4531
  %47 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !4531
  %x_exit_block_ptr25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %47, i32 0, i32 1, !dbg !4531
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr25, align 8, !dbg !4531
  %aux26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 2, !dbg !4531
  %49 = load i8*, i8** %aux26, align 8, !dbg !4531
  %50 = bitcast i8* %49 to %struct.bb_bitmap_sets*, !dbg !4531
  %antic_in27 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %50, i32 0, i32 4, !dbg !4531
  store %struct.bitmap_set* %call22, %struct.bitmap_set** %antic_in27, align 8, !dbg !4532
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4533
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !4533
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !4533
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !4533
  %x_exit_block_ptr30 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 1, !dbg !4533
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr30, align 8, !dbg !4533
  %aux31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 2, !dbg !4533
  %54 = load i8*, i8** %aux31, align 8, !dbg !4533
  %55 = bitcast i8* %54 to %struct.bb_bitmap_sets*, !dbg !4533
  %visited32 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %55, i32 0, i32 8, !dbg !4533
  %bf.load33 = load i8, i8* %visited32, align 8, !dbg !4534
  %bf.clear34 = and i8 %bf.load33, -2, !dbg !4534
  %bf.set = or i8 %bf.clear34, 1, !dbg !4534
  store i8 %bf.set, i8* %visited32, align 8, !dbg !4534
  %call35 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !4535
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4536
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !4536
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !4536
  %57 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !4536
  %x_exit_block_ptr38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %57, i32 0, i32 1, !dbg !4536
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr38, align 8, !dbg !4536
  %aux39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 2, !dbg !4536
  %59 = load i8*, i8** %aux39, align 8, !dbg !4536
  %60 = bitcast i8* %59 to %struct.bb_bitmap_sets*, !dbg !4536
  %pa_in40 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %60, i32 0, i32 5, !dbg !4536
  store %struct.bitmap_set* %call35, %struct.bitmap_set** %pa_in40, align 8, !dbg !4537
  %61 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4538
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %61, i64 0, !dbg !4538
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !4538
  %62 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !4538
  %x_last_basic_block43 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %62, i32 0, i32 5, !dbg !4538
  %63 = load i32, i32* %x_last_basic_block43, align 8, !dbg !4538
  %add = add nsw i32 %63, 1, !dbg !4539
  %call44 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %add), !dbg !4540
  store %struct.simple_bitmap_def* %call44, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4541
  %64 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4542
  call void @sbitmap_ones(%struct.simple_bitmap_def* %64), !dbg !4543
  br label %while.cond, !dbg !4544

while.cond:                                       ; preds = %for.end91, %for.end21
  %65 = load i8, i8* %changed, align 1, !dbg !4545
  %tobool45 = icmp ne i8 %65, 0, !dbg !4544
  br i1 %tobool45, label %while.body, label %while.end, !dbg !4544

while.body:                                       ; preds = %while.cond
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4546
  %tobool46 = icmp ne %struct._IO_FILE* %66, null, !dbg !4546
  br i1 %tobool46, label %land.lhs.true, label %if.end51, !dbg !4549

land.lhs.true:                                    ; preds = %while.body
  %67 = load i32, i32* @dump_flags, align 4, !dbg !4550
  %and47 = and i32 %67, 8, !dbg !4551
  %tobool48 = icmp ne i32 %and47, 0, !dbg !4551
  br i1 %tobool48, label %if.then49, label %if.end51, !dbg !4552

if.then49:                                        ; preds = %land.lhs.true
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4553
  %69 = load i32, i32* %num_iterations, align 4, !dbg !4554
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0), i32 %69), !dbg !4555
  br label %if.end51, !dbg !4555

if.end51:                                         ; preds = %if.then49, %land.lhs.true, %while.body
  %70 = load i32, i32* %num_iterations, align 4, !dbg !4556
  %inc = add nsw i32 %70, 1, !dbg !4556
  store i32 %inc, i32* %num_iterations, align 4, !dbg !4556
  store i8 0, i8* %changed, align 1, !dbg !4557
  %71 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4558
  %add.ptr52 = getelementptr inbounds %struct.function, %struct.function* %71, i64 0, !dbg !4558
  %cfg53 = getelementptr inbounds %struct.function, %struct.function* %add.ptr52, i32 0, i32 1, !dbg !4558
  %72 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg53, align 8, !dbg !4558
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %72, i32 0, i32 3, !dbg !4558
  %73 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4558
  %sub = sub nsw i32 %73, 2, !dbg !4560
  %sub54 = sub nsw i32 %sub, 1, !dbg !4561
  store i32 %sub54, i32* %i, align 4, !dbg !4562
  br label %for.cond55, !dbg !4563

for.cond55:                                       ; preds = %for.inc90, %if.end51
  %74 = load i32, i32* %i, align 4, !dbg !4564
  %cmp56 = icmp sge i32 %74, 0, !dbg !4566
  br i1 %cmp56, label %for.body57, label %for.end91, !dbg !4567

for.body57:                                       ; preds = %for.cond55
  %75 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4568
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %75, i32 0, i32 3, !dbg !4568
  %76 = load i32*, i32** @postorder, align 8, !dbg !4568
  %77 = load i32, i32* %i, align 4, !dbg !4568
  %idxprom = sext i32 %77 to i64, !dbg !4568
  %arrayidx = getelementptr inbounds i32, i32* %76, i64 %idxprom, !dbg !4568
  %78 = load i32, i32* %arrayidx, align 4, !dbg !4568
  %div = udiv i32 %78, 64, !dbg !4568
  %idxprom58 = zext i32 %div to i64, !dbg !4568
  %arrayidx59 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom58, !dbg !4568
  %79 = load i64, i64* %arrayidx59, align 8, !dbg !4568
  %80 = load i32*, i32** @postorder, align 8, !dbg !4568
  %81 = load i32, i32* %i, align 4, !dbg !4568
  %idxprom60 = sext i32 %81 to i64, !dbg !4568
  %arrayidx61 = getelementptr inbounds i32, i32* %80, i64 %idxprom60, !dbg !4568
  %82 = load i32, i32* %arrayidx61, align 4, !dbg !4568
  %rem = urem i32 %82, 64, !dbg !4568
  %sh_prom = zext i32 %rem to i64, !dbg !4568
  %shr = lshr i64 %79, %sh_prom, !dbg !4568
  %and62 = and i64 %shr, 1, !dbg !4568
  %tobool63 = icmp ne i64 %and62, 0, !dbg !4568
  br i1 %tobool63, label %if.then64, label %if.end89, !dbg !4571

if.then64:                                        ; preds = %for.body57
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block65, metadata !4572, metadata !DIExpression()), !dbg !4574
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4575
  %add.ptr66 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !4575
  %cfg67 = getelementptr inbounds %struct.function, %struct.function* %add.ptr66, i32 0, i32 1, !dbg !4575
  %84 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg67, align 8, !dbg !4575
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %84, i32 0, i32 2, !dbg !4575
  %85 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4575
  %tobool68 = icmp ne %struct.VEC_basic_block_gc* %85, null, !dbg !4575
  br i1 %tobool68, label %cond.true, label %cond.false, !dbg !4575

cond.true:                                        ; preds = %if.then64
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4575
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !4575
  %cfg70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 1, !dbg !4575
  %87 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg70, align 8, !dbg !4575
  %x_basic_block_info71 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %87, i32 0, i32 2, !dbg !4575
  %88 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info71, align 8, !dbg !4575
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %88, i32 0, i32 0, !dbg !4575
  br label %cond.end, !dbg !4575

cond.false:                                       ; preds = %if.then64
  br label %cond.end, !dbg !4575

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4575
  %89 = load i32*, i32** @postorder, align 8, !dbg !4575
  %90 = load i32, i32* %i, align 4, !dbg !4575
  %idxprom72 = sext i32 %90 to i64, !dbg !4575
  %arrayidx73 = getelementptr inbounds i32, i32* %89, i64 %idxprom72, !dbg !4575
  %91 = load i32, i32* %arrayidx73, align 4, !dbg !4575
  %call74 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %91), !dbg !4575
  store %struct.basic_block_def* %call74, %struct.basic_block_def** %block65, align 8, !dbg !4574
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %block65, align 8, !dbg !4576
  %93 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4577
  %elms75 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %93, i32 0, i32 3, !dbg !4577
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %block65, align 8, !dbg !4577
  %index76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 9, !dbg !4577
  %95 = load i32, i32* %index76, align 8, !dbg !4577
  %div77 = udiv i32 %95, 64, !dbg !4577
  %idxprom78 = zext i32 %div77 to i64, !dbg !4577
  %arrayidx79 = getelementptr inbounds [1 x i64], [1 x i64]* %elms75, i64 0, i64 %idxprom78, !dbg !4577
  %96 = load i64, i64* %arrayidx79, align 8, !dbg !4577
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %block65, align 8, !dbg !4577
  %index80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 9, !dbg !4577
  %98 = load i32, i32* %index80, align 8, !dbg !4577
  %rem81 = urem i32 %98, 64, !dbg !4577
  %sh_prom82 = zext i32 %rem81 to i64, !dbg !4577
  %shr83 = lshr i64 %96, %sh_prom82, !dbg !4577
  %and84 = and i64 %shr83, 1, !dbg !4577
  %conv = trunc i64 %and84 to i8, !dbg !4577
  %call85 = call zeroext i8 @compute_antic_aux(%struct.basic_block_def* %92, i8 zeroext %conv), !dbg !4578
  %conv86 = zext i8 %call85 to i32, !dbg !4578
  %99 = load i8, i8* %changed, align 1, !dbg !4579
  %conv87 = zext i8 %99 to i32, !dbg !4579
  %or = or i32 %conv87, %conv86, !dbg !4579
  %conv88 = trunc i32 %or to i8, !dbg !4579
  store i8 %conv88, i8* %changed, align 1, !dbg !4579
  br label %if.end89, !dbg !4580

if.end89:                                         ; preds = %cond.end, %for.body57
  br label %for.inc90, !dbg !4581

for.inc90:                                        ; preds = %if.end89
  %100 = load i32, i32* %i, align 4, !dbg !4582
  %dec = add nsw i32 %100, -1, !dbg !4582
  store i32 %dec, i32* %i, align 4, !dbg !4582
  br label %for.cond55, !dbg !4583, !llvm.loop !4584

for.end91:                                        ; preds = %for.cond55
  br label %while.cond, !dbg !4544, !llvm.loop !4586

while.end:                                        ; preds = %while.cond
  %101 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4588
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %101, i64 0, !dbg !4588
  %102 = load i32, i32* %num_iterations, align 4, !dbg !4589
  call void @statistics_histogram_event(%struct.function* %add.ptr92, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i64 0, i64 0), i32 %102), !dbg !4590
  %103 = load i8, i8* @do_partial_partial, align 1, !dbg !4591
  %tobool93 = icmp ne i8 %103, 0, !dbg !4591
  br i1 %tobool93, label %if.then94, label %if.end168, !dbg !4593

if.then94:                                        ; preds = %while.end
  %104 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4594
  call void @sbitmap_ones(%struct.simple_bitmap_def* %104), !dbg !4596
  %call95 = call zeroext i8 @mark_dfs_back_edges(), !dbg !4597
  store i32 0, i32* %num_iterations, align 4, !dbg !4598
  store i8 1, i8* %changed, align 1, !dbg !4599
  br label %while.cond96, !dbg !4600

while.cond96:                                     ; preds = %for.end165, %if.then94
  %105 = load i8, i8* %changed, align 1, !dbg !4601
  %tobool97 = icmp ne i8 %105, 0, !dbg !4600
  br i1 %tobool97, label %while.body98, label %while.end166, !dbg !4600

while.body98:                                     ; preds = %while.cond96
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4602
  %tobool99 = icmp ne %struct._IO_FILE* %106, null, !dbg !4602
  br i1 %tobool99, label %land.lhs.true100, label %if.end105, !dbg !4605

land.lhs.true100:                                 ; preds = %while.body98
  %107 = load i32, i32* @dump_flags, align 4, !dbg !4606
  %and101 = and i32 %107, 8, !dbg !4607
  %tobool102 = icmp ne i32 %and101, 0, !dbg !4607
  br i1 %tobool102, label %if.then103, label %if.end105, !dbg !4608

if.then103:                                       ; preds = %land.lhs.true100
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4609
  %109 = load i32, i32* %num_iterations, align 4, !dbg !4610
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.34, i64 0, i64 0), i32 %109), !dbg !4611
  br label %if.end105, !dbg !4611

if.end105:                                        ; preds = %if.then103, %land.lhs.true100, %while.body98
  %110 = load i32, i32* %num_iterations, align 4, !dbg !4612
  %inc106 = add nsw i32 %110, 1, !dbg !4612
  store i32 %inc106, i32* %num_iterations, align 4, !dbg !4612
  store i8 0, i8* %changed, align 1, !dbg !4613
  %111 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4614
  %add.ptr107 = getelementptr inbounds %struct.function, %struct.function* %111, i64 0, !dbg !4614
  %cfg108 = getelementptr inbounds %struct.function, %struct.function* %add.ptr107, i32 0, i32 1, !dbg !4614
  %112 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg108, align 8, !dbg !4614
  %x_n_basic_blocks109 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %112, i32 0, i32 3, !dbg !4614
  %113 = load i32, i32* %x_n_basic_blocks109, align 8, !dbg !4614
  %sub110 = sub nsw i32 %113, 2, !dbg !4616
  %sub111 = sub nsw i32 %sub110, 1, !dbg !4617
  store i32 %sub111, i32* %i, align 4, !dbg !4618
  br label %for.cond112, !dbg !4619

for.cond112:                                      ; preds = %for.inc163, %if.end105
  %114 = load i32, i32* %i, align 4, !dbg !4620
  %cmp113 = icmp sge i32 %114, 0, !dbg !4622
  br i1 %cmp113, label %for.body115, label %for.end165, !dbg !4623

for.body115:                                      ; preds = %for.cond112
  %115 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4624
  %elms116 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %115, i32 0, i32 3, !dbg !4624
  %116 = load i32*, i32** @postorder, align 8, !dbg !4624
  %117 = load i32, i32* %i, align 4, !dbg !4624
  %idxprom117 = sext i32 %117 to i64, !dbg !4624
  %arrayidx118 = getelementptr inbounds i32, i32* %116, i64 %idxprom117, !dbg !4624
  %118 = load i32, i32* %arrayidx118, align 4, !dbg !4624
  %div119 = udiv i32 %118, 64, !dbg !4624
  %idxprom120 = zext i32 %div119 to i64, !dbg !4624
  %arrayidx121 = getelementptr inbounds [1 x i64], [1 x i64]* %elms116, i64 0, i64 %idxprom120, !dbg !4624
  %119 = load i64, i64* %arrayidx121, align 8, !dbg !4624
  %120 = load i32*, i32** @postorder, align 8, !dbg !4624
  %121 = load i32, i32* %i, align 4, !dbg !4624
  %idxprom122 = sext i32 %121 to i64, !dbg !4624
  %arrayidx123 = getelementptr inbounds i32, i32* %120, i64 %idxprom122, !dbg !4624
  %122 = load i32, i32* %arrayidx123, align 4, !dbg !4624
  %rem124 = urem i32 %122, 64, !dbg !4624
  %sh_prom125 = zext i32 %rem124 to i64, !dbg !4624
  %shr126 = lshr i64 %119, %sh_prom125, !dbg !4624
  %and127 = and i64 %shr126, 1, !dbg !4624
  %tobool128 = icmp ne i64 %and127, 0, !dbg !4624
  br i1 %tobool128, label %if.then129, label %if.end162, !dbg !4627

if.then129:                                       ; preds = %for.body115
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block130, metadata !4628, metadata !DIExpression()), !dbg !4630
  %123 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4631
  %add.ptr131 = getelementptr inbounds %struct.function, %struct.function* %123, i64 0, !dbg !4631
  %cfg132 = getelementptr inbounds %struct.function, %struct.function* %add.ptr131, i32 0, i32 1, !dbg !4631
  %124 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg132, align 8, !dbg !4631
  %x_basic_block_info133 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %124, i32 0, i32 2, !dbg !4631
  %125 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info133, align 8, !dbg !4631
  %tobool134 = icmp ne %struct.VEC_basic_block_gc* %125, null, !dbg !4631
  br i1 %tobool134, label %cond.true135, label %cond.false140, !dbg !4631

cond.true135:                                     ; preds = %if.then129
  %126 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4631
  %add.ptr136 = getelementptr inbounds %struct.function, %struct.function* %126, i64 0, !dbg !4631
  %cfg137 = getelementptr inbounds %struct.function, %struct.function* %add.ptr136, i32 0, i32 1, !dbg !4631
  %127 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg137, align 8, !dbg !4631
  %x_basic_block_info138 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %127, i32 0, i32 2, !dbg !4631
  %128 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info138, align 8, !dbg !4631
  %base139 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %128, i32 0, i32 0, !dbg !4631
  br label %cond.end141, !dbg !4631

cond.false140:                                    ; preds = %if.then129
  br label %cond.end141, !dbg !4631

cond.end141:                                      ; preds = %cond.false140, %cond.true135
  %cond142 = phi %struct.VEC_basic_block_base* [ %base139, %cond.true135 ], [ null, %cond.false140 ], !dbg !4631
  %129 = load i32*, i32** @postorder, align 8, !dbg !4631
  %130 = load i32, i32* %i, align 4, !dbg !4631
  %idxprom143 = sext i32 %130 to i64, !dbg !4631
  %arrayidx144 = getelementptr inbounds i32, i32* %129, i64 %idxprom143, !dbg !4631
  %131 = load i32, i32* %arrayidx144, align 4, !dbg !4631
  %call145 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond142, i32 %131), !dbg !4631
  store %struct.basic_block_def* %call145, %struct.basic_block_def** %block130, align 8, !dbg !4630
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %block130, align 8, !dbg !4632
  %133 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4633
  %elms146 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %133, i32 0, i32 3, !dbg !4633
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %block130, align 8, !dbg !4633
  %index147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %134, i32 0, i32 9, !dbg !4633
  %135 = load i32, i32* %index147, align 8, !dbg !4633
  %div148 = udiv i32 %135, 64, !dbg !4633
  %idxprom149 = zext i32 %div148 to i64, !dbg !4633
  %arrayidx150 = getelementptr inbounds [1 x i64], [1 x i64]* %elms146, i64 0, i64 %idxprom149, !dbg !4633
  %136 = load i64, i64* %arrayidx150, align 8, !dbg !4633
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %block130, align 8, !dbg !4633
  %index151 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %137, i32 0, i32 9, !dbg !4633
  %138 = load i32, i32* %index151, align 8, !dbg !4633
  %rem152 = urem i32 %138, 64, !dbg !4633
  %sh_prom153 = zext i32 %rem152 to i64, !dbg !4633
  %shr154 = lshr i64 %136, %sh_prom153, !dbg !4633
  %and155 = and i64 %shr154, 1, !dbg !4633
  %conv156 = trunc i64 %and155 to i8, !dbg !4633
  %call157 = call zeroext i8 @compute_partial_antic_aux(%struct.basic_block_def* %132, i8 zeroext %conv156), !dbg !4634
  %conv158 = zext i8 %call157 to i32, !dbg !4634
  %139 = load i8, i8* %changed, align 1, !dbg !4635
  %conv159 = zext i8 %139 to i32, !dbg !4635
  %or160 = or i32 %conv159, %conv158, !dbg !4635
  %conv161 = trunc i32 %or160 to i8, !dbg !4635
  store i8 %conv161, i8* %changed, align 1, !dbg !4635
  br label %if.end162, !dbg !4636

if.end162:                                        ; preds = %cond.end141, %for.body115
  br label %for.inc163, !dbg !4637

for.inc163:                                       ; preds = %if.end162
  %140 = load i32, i32* %i, align 4, !dbg !4638
  %dec164 = add nsw i32 %140, -1, !dbg !4638
  store i32 %dec164, i32* %i, align 4, !dbg !4638
  br label %for.cond112, !dbg !4639, !llvm.loop !4640

for.end165:                                       ; preds = %for.cond112
  br label %while.cond96, !dbg !4600, !llvm.loop !4642

while.end166:                                     ; preds = %while.cond96
  %141 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4644
  %add.ptr167 = getelementptr inbounds %struct.function, %struct.function* %141, i64 0, !dbg !4644
  %142 = load i32, i32* %num_iterations, align 4, !dbg !4645
  call void @statistics_histogram_event(%struct.function* %add.ptr167, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.36, i64 0, i64 0), i32 %142), !dbg !4646
  br label %if.end168, !dbg !4647

if.end168:                                        ; preds = %while.end166, %while.end
  %143 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4648
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %143, i32 0, i32 0, !dbg !4648
  %144 = load i8*, i8** %popcount, align 8, !dbg !4648
  call void @free(i8* %144), !dbg !4648
  %145 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @has_abnormal_preds, align 8, !dbg !4648
  %146 = bitcast %struct.simple_bitmap_def* %145 to i8*, !dbg !4648
  call void @free(i8* %146), !dbg !4648
  %147 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4649
  %popcount169 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %147, i32 0, i32 0, !dbg !4649
  %148 = load i8*, i8** %popcount169, align 8, !dbg !4649
  call void @free(i8* %148), !dbg !4649
  %149 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !4649
  %150 = bitcast %struct.simple_bitmap_def* %149 to i8*, !dbg !4649
  call void @free(i8* %150), !dbg !4649
  ret void, !dbg !4650
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert() #0 !dbg !4651 {
entry:
  %new_stuff = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %num_iterations = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8* %new_stuff, metadata !4652, metadata !DIExpression()), !dbg !4653
  store i8 1, i8* %new_stuff, align 1, !dbg !4653
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4654, metadata !DIExpression()), !dbg !4655
  call void @llvm.dbg.declare(metadata i32* %num_iterations, metadata !4656, metadata !DIExpression()), !dbg !4657
  store i32 0, i32* %num_iterations, align 4, !dbg !4657
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4658
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4658
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4658
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4658
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4658
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4658
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !4658
  br label %for.cond, !dbg !4658

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4660
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !4658
  br i1 %tobool, label %for.body, label %for.end, !dbg !4658

for.body:                                         ; preds = %for.cond
  %call = call %struct.bitmap_set* @bitmap_set_new(), !dbg !4662
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4663
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 2, !dbg !4663
  %5 = load i8*, i8** %aux, align 8, !dbg !4663
  %6 = bitcast i8* %5 to %struct.bb_bitmap_sets*, !dbg !4663
  %new_sets = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %6, i32 0, i32 6, !dbg !4663
  store %struct.bitmap_set* %call, %struct.bitmap_set** %new_sets, align 8, !dbg !4664
  br label %for.inc, !dbg !4663

for.inc:                                          ; preds = %for.body
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4660
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !4660
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4660
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !4660
  br label %for.cond, !dbg !4660, !llvm.loop !4665

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !4667

while.cond:                                       ; preds = %while.body, %for.end
  %9 = load i8, i8* %new_stuff, align 1, !dbg !4668
  %tobool1 = icmp ne i8 %9, 0, !dbg !4667
  br i1 %tobool1, label %while.body, label %while.end, !dbg !4667

while.body:                                       ; preds = %while.cond
  %10 = load i32, i32* %num_iterations, align 4, !dbg !4669
  %inc = add nsw i32 %10, 1, !dbg !4669
  store i32 %inc, i32* %num_iterations, align 4, !dbg !4669
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4671
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4671
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !4671
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4671
  %x_entry_block_ptr4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 0, !dbg !4671
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr4, align 8, !dbg !4671
  %call5 = call zeroext i8 @insert_aux(%struct.basic_block_def* %13), !dbg !4672
  store i8 %call5, i8* %new_stuff, align 1, !dbg !4673
  br label %while.cond, !dbg !4667, !llvm.loop !4674

while.end:                                        ; preds = %while.cond
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4676
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4676
  %15 = load i32, i32* %num_iterations, align 4, !dbg !4677
  call void @statistics_histogram_event(%struct.function* %add.ptr6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.47, i64 0, i64 0), i32 %15), !dbg !4678
  ret void, !dbg !4679
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eliminate() #0 !dbg !4680 {
entry:
  %to_remove = alloca %struct.VEC_gimple_heap*, align 8
  %b = alloca %struct.basic_block_def*, align 8
  %todo = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %sprime = alloca %union.tree_node*, align 8
  %lhsexpr = alloca %struct.pre_expr_d*, align 8
  %sprimeexpr = alloca %struct.pre_expr_d*, align 8
  %val = alloca %union.tree_node*, align 8
  %rhs202 = alloca %union.tree_node*, align 8
  %val204 = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %tmp332 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt338 = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %sprime340 = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %sprimeexpr343 = alloca %struct.pre_expr_d*, align 8
  %resexpr = alloca %struct.pre_expr_d*, align 8
  %gsi2 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp419 = alloca %struct.gimple_stmt_iterator, align 8
  %lhs436 = alloca %union.tree_node*, align 8
  %rhs438 = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp476 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %to_remove, metadata !4681, metadata !DIExpression()), !dbg !4682
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %to_remove, align 8, !dbg !4682
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !4683, metadata !DIExpression()), !dbg !4684
  call void @llvm.dbg.declare(metadata i32* %todo, metadata !4685, metadata !DIExpression()), !dbg !4686
  store i32 0, i32* %todo, align 4, !dbg !4686
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4687, metadata !DIExpression()), !dbg !4688
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4689, metadata !DIExpression()), !dbg !4690
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4691, metadata !DIExpression()), !dbg !4692
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4693
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4693
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4693
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4693
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4693
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4693
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4693
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4693
  store %struct.basic_block_def* %3, %struct.basic_block_def** %b, align 8, !dbg !4693
  br label %for.cond, !dbg !4693

for.cond:                                         ; preds = %for.inc423, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4695
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4695
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4695
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4695
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4695
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4695
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4695
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4695
  br i1 %cmp, label %for.body, label %for.end425, !dbg !4693

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4697
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4700
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4700
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4700
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4700
  br label %for.cond3, !dbg !4701

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4702
  %tobool = icmp ne i8 %call, 0, !dbg !4704
  %lnot = xor i1 %tobool, true, !dbg !4704
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4705

for.body4:                                        ; preds = %for.cond3
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4706
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !4708
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4709
  %call6 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %11), !dbg !4711
  %conv = zext i8 %call6 to i32, !dbg !4711
  %tobool7 = icmp ne i32 %conv, 0, !dbg !4711
  br i1 %tobool7, label %land.lhs.true, label %if.else180, !dbg !4712

land.lhs.true:                                    ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4713
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %12), !dbg !4713
  %base = bitcast %union.tree_node* %call8 to %struct.tree_base*, !dbg !4713
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !4713
  %bf.load = load i64, i64* %13, align 8, !dbg !4713
  %bf.clear = and i64 %bf.load, 65535, !dbg !4713
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4713
  %cmp9 = icmp eq i32 %bf.cast, 141, !dbg !4714
  br i1 %cmp9, label %land.lhs.true11, label %if.else180, !dbg !4715

land.lhs.true11:                                  ; preds = %land.lhs.true
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4716
  %call12 = call zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %14), !dbg !4717
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4717
  br i1 %tobool13, label %if.else180, label %land.lhs.true14, !dbg !4718

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4719
  %call15 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %15), !dbg !4720
  %tobool16 = icmp ne i8 %call15, 0, !dbg !4720
  br i1 %tobool16, label %lor.lhs.false, label %land.lhs.true20, !dbg !4721

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4722
  %call17 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %16), !dbg !4723
  %call18 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call17), !dbg !4724
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4724
  br i1 %tobool19, label %if.else180, label %land.lhs.true20, !dbg !4725

land.lhs.true20:                                  ; preds = %lor.lhs.false, %land.lhs.true14
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4726
  %call21 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %17), !dbg !4727
  %tobool22 = icmp ne i8 %call21, 0, !dbg !4727
  br i1 %tobool22, label %if.else180, label %land.lhs.true23, !dbg !4728

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4729
  %call24 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %18), !dbg !4730
  %call25 = call zeroext i8 @has_zero_uses(%union.tree_node* %call24), !dbg !4731
  %tobool26 = icmp ne i8 %call25, 0, !dbg !4731
  br i1 %tobool26, label %if.else180, label %if.then, !dbg !4732

if.then:                                          ; preds = %land.lhs.true23
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4733, metadata !DIExpression()), !dbg !4735
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4736
  %call27 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %19), !dbg !4737
  store %union.tree_node* %call27, %union.tree_node** %lhs, align 8, !dbg !4735
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4738, metadata !DIExpression()), !dbg !4739
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !4739
  call void @llvm.dbg.declare(metadata %union.tree_node** %sprime, metadata !4740, metadata !DIExpression()), !dbg !4741
  store %union.tree_node* null, %union.tree_node** %sprime, align 8, !dbg !4741
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %lhsexpr, metadata !4742, metadata !DIExpression()), !dbg !4743
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4744
  %call28 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %20), !dbg !4745
  store %struct.pre_expr_d* %call28, %struct.pre_expr_d** %lhsexpr, align 8, !dbg !4743
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %sprimeexpr, metadata !4746, metadata !DIExpression()), !dbg !4747
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4748
  %call29 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %21), !dbg !4750
  %tobool30 = icmp ne i8 %call29, 0, !dbg !4750
  br i1 %tobool30, label %if.then31, label %if.end, !dbg !4751

if.then31:                                        ; preds = %if.then
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4752
  %call32 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %22), !dbg !4753
  store %union.tree_node* %call32, %union.tree_node** %rhs, align 8, !dbg !4754
  br label %if.end, !dbg !4755

if.end:                                           ; preds = %if.then31, %if.then
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4756
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 2, !dbg !4756
  %24 = load i8*, i8** %aux, align 8, !dbg !4756
  %25 = bitcast i8* %24 to %struct.bb_bitmap_sets*, !dbg !4756
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %25, i32 0, i32 3, !dbg !4756
  %26 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !4756
  %27 = load %struct.pre_expr_d*, %struct.pre_expr_d** %lhsexpr, align 8, !dbg !4757
  %call33 = call i32 @get_expr_value_id(%struct.pre_expr_d* %27), !dbg !4758
  %call34 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %26, i32 %call33, %union.gimple_statement_d* null), !dbg !4759
  store %struct.pre_expr_d* %call34, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4760
  %28 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4761
  %tobool35 = icmp ne %struct.pre_expr_d* %28, null, !dbg !4761
  br i1 %tobool35, label %if.then36, label %if.end48, !dbg !4763

if.then36:                                        ; preds = %if.end
  %29 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4764
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %29, i32 0, i32 0, !dbg !4767
  %30 = load i32, i32* %kind, align 8, !dbg !4767
  %cmp37 = icmp eq i32 %30, 3, !dbg !4768
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !4769

if.then39:                                        ; preds = %if.then36
  %31 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4770
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %31, i32 0, i32 2, !dbg !4770
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !4770
  %32 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !4770
  store %union.tree_node* %32, %union.tree_node** %sprime, align 8, !dbg !4771
  br label %if.end47, !dbg !4772

if.else:                                          ; preds = %if.then36
  %33 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4773
  %kind40 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %33, i32 0, i32 0, !dbg !4775
  %34 = load i32, i32* %kind40, align 8, !dbg !4775
  %cmp41 = icmp eq i32 %34, 0, !dbg !4776
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !4777

if.then43:                                        ; preds = %if.else
  %35 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr, align 8, !dbg !4778
  %u44 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %35, i32 0, i32 2, !dbg !4778
  %name = bitcast %union.pre_expr_union_d* %u44 to %union.tree_node**, !dbg !4778
  %36 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4778
  store %union.tree_node* %36, %union.tree_node** %sprime, align 8, !dbg !4779
  br label %if.end46, !dbg !4780

if.else45:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4163, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4781
  br label %if.end46

if.end46:                                         ; preds = %if.else45, %if.then43
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then39
  br label %if.end48, !dbg !4782

if.end48:                                         ; preds = %if.end47, %if.end
  %37 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4783
  %tobool49 = icmp ne %union.tree_node* %37, null, !dbg !4783
  br i1 %tobool49, label %if.end76, label %land.lhs.true50, !dbg !4785

land.lhs.true50:                                  ; preds = %if.end48
  %38 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4786
  %call51 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %38), !dbg !4787
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call51, i32 0, i32 0, !dbg !4788
  %39 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !4788
  %call52 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %39), !dbg !4789
  %conv53 = zext i8 %call52 to i32, !dbg !4789
  %tobool54 = icmp ne i32 %conv53, 0, !dbg !4789
  br i1 %tobool54, label %if.then55, label %if.end76, !dbg !4790

if.then55:                                        ; preds = %land.lhs.true50
  %40 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4791
  %call56 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %40), !dbg !4793
  %valnum57 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call56, i32 0, i32 0, !dbg !4794
  %41 = load %union.tree_node*, %union.tree_node** %valnum57, align 8, !dbg !4794
  store %union.tree_node* %41, %union.tree_node** %sprime, align 8, !dbg !4795
  %42 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4796
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !4796
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4796
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4796
  %44 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4798
  %common58 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !4798
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !4798
  %45 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !4798
  %call60 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %43, %union.tree_node* %45), !dbg !4799
  %tobool61 = icmp ne i8 %call60, 0, !dbg !4799
  br i1 %tobool61, label %if.end66, label %if.then62, !dbg !4800

if.then62:                                        ; preds = %if.then55
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4801
  %common63 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !4801
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !4801
  %47 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !4801
  %48 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4801
  %call65 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %47, %union.tree_node* %48), !dbg !4801
  store %union.tree_node* %call65, %union.tree_node** %sprime, align 8, !dbg !4802
  br label %if.end66, !dbg !4803

if.end66:                                         ; preds = %if.then62, %if.then55
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4804
  %tobool67 = icmp ne %struct._IO_FILE* %49, null, !dbg !4804
  br i1 %tobool67, label %land.lhs.true68, label %if.end74, !dbg !4806

land.lhs.true68:                                  ; preds = %if.end66
  %50 = load i32, i32* @dump_flags, align 4, !dbg !4807
  %and = and i32 %50, 8, !dbg !4808
  %tobool69 = icmp ne i32 %and, 0, !dbg !4808
  br i1 %tobool69, label %if.then70, label %if.end74, !dbg !4809

if.then70:                                        ; preds = %land.lhs.true68
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4810
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i64 0, i64 0)), !dbg !4812
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4813
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4814
  call void @print_gimple_expr(%struct._IO_FILE* %52, %union.gimple_statement_d* %53, i32 0, i32 0), !dbg !4815
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4816
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i64 0, i64 0)), !dbg !4817
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4818
  %56 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4819
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %56, i32 0), !dbg !4820
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4821
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0)), !dbg !4822
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4823
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4824
  call void @print_gimple_stmt(%struct._IO_FILE* %58, %union.gimple_statement_d* %59, i32 0, i32 0), !dbg !4825
  br label %if.end74, !dbg !4826

if.end74:                                         ; preds = %if.then70, %land.lhs.true68, %if.end66
  %60 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !4827
  %inc = add nsw i32 %60, 1, !dbg !4827
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !4827
  %61 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4828
  call void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %61), !dbg !4829
  %call75 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4830
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %stmt, align 8, !dbg !4831
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4832
  call void @update_stmt(%union.gimple_statement_d* %62), !dbg !4833
  br label %for.inc, !dbg !4834

if.end76:                                         ; preds = %land.lhs.true50, %if.end48
  %63 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4835
  %tobool77 = icmp ne %union.tree_node* %63, null, !dbg !4835
  br i1 %tobool77, label %lor.lhs.false78, label %if.then81, !dbg !4837

lor.lhs.false78:                                  ; preds = %if.end76
  %64 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4838
  %65 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4839
  %cmp79 = icmp eq %union.tree_node* %64, %65, !dbg !4840
  br i1 %cmp79, label %if.then81, label %if.end107, !dbg !4841

if.then81:                                        ; preds = %lor.lhs.false78, %if.end76
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4842, metadata !DIExpression()), !dbg !4844
  %66 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4845
  %call82 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %66), !dbg !4846
  %valnum83 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call82, i32 0, i32 0, !dbg !4847
  %67 = load %union.tree_node*, %union.tree_node** %valnum83, align 8, !dbg !4847
  store %union.tree_node* %67, %union.tree_node** %val, align 8, !dbg !4844
  %68 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4848
  %69 = load %union.tree_node*, %union.tree_node** @VN_TOP, align 8, !dbg !4850
  %cmp84 = icmp ne %union.tree_node* %68, %69, !dbg !4851
  br i1 %cmp84, label %land.lhs.true86, label %if.end106, !dbg !4852

land.lhs.true86:                                  ; preds = %if.then81
  %70 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4853
  %base87 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !4853
  %71 = bitcast %struct.tree_base* %base87 to i64*, !dbg !4853
  %bf.load88 = load i64, i64* %71, align 8, !dbg !4853
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !4853
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !4853
  %cmp91 = icmp eq i32 %bf.cast90, 141, !dbg !4854
  br i1 %cmp91, label %land.lhs.true93, label %if.end106, !dbg !4855

land.lhs.true93:                                  ; preds = %land.lhs.true86
  %72 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4856
  %call94 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %72), !dbg !4857
  %needs_insertion = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call94, i32 0, i32 5, !dbg !4858
  %bf.load95 = load i8, i8* %needs_insertion, align 4, !dbg !4858
  %bf.lshr = lshr i8 %bf.load95, 4, !dbg !4858
  %bf.clear96 = and i8 %bf.lshr, 1, !dbg !4858
  %bf.cast97 = zext i8 %bf.clear96 to i32, !dbg !4858
  %tobool98 = icmp ne i32 %bf.cast97, 0, !dbg !4857
  br i1 %tobool98, label %land.lhs.true99, label %if.end106, !dbg !4859

land.lhs.true99:                                  ; preds = %land.lhs.true93
  %73 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4860
  %call100 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %73), !dbg !4861
  %call101 = call zeroext i8 @can_PRE_operation(%union.tree_node* %call100), !dbg !4862
  %conv102 = zext i8 %call101 to i32, !dbg !4862
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !4862
  br i1 %tobool103, label %if.then104, label %if.end106, !dbg !4863

if.then104:                                       ; preds = %land.lhs.true99
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4864
  %75 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4865
  %call105 = call %union.tree_node* @do_SCCVN_insertion(%union.gimple_statement_d* %74, %union.tree_node* %75), !dbg !4866
  store %union.tree_node* %call105, %union.tree_node** %sprime, align 8, !dbg !4867
  br label %if.end106, !dbg !4868

if.end106:                                        ; preds = %if.then104, %land.lhs.true99, %land.lhs.true93, %land.lhs.true86, %if.then81
  br label %if.end107, !dbg !4869

if.end107:                                        ; preds = %if.end106, %lor.lhs.false78
  %76 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4870
  %tobool108 = icmp ne %union.tree_node* %76, null, !dbg !4870
  br i1 %tobool108, label %land.lhs.true109, label %if.end179, !dbg !4872

land.lhs.true109:                                 ; preds = %if.end107
  %77 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4873
  %78 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4874
  %cmp110 = icmp ne %union.tree_node* %77, %78, !dbg !4875
  br i1 %cmp110, label %land.lhs.true112, label %if.end179, !dbg !4876

land.lhs.true112:                                 ; preds = %land.lhs.true109
  %79 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4877
  %cmp113 = icmp eq %union.tree_node* %79, null, !dbg !4878
  br i1 %cmp113, label %if.then126, label %lor.lhs.false115, !dbg !4879

lor.lhs.false115:                                 ; preds = %land.lhs.true112
  %80 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4880
  %base116 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !4880
  %81 = bitcast %struct.tree_base* %base116 to i64*, !dbg !4880
  %bf.load117 = load i64, i64* %81, align 8, !dbg !4880
  %bf.clear118 = and i64 %bf.load117, 65535, !dbg !4880
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !4880
  %cmp120 = icmp ne i32 %bf.cast119, 141, !dbg !4881
  br i1 %cmp120, label %if.then126, label %lor.lhs.false122, !dbg !4882

lor.lhs.false122:                                 ; preds = %lor.lhs.false115
  %82 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4883
  %83 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4884
  %call123 = call zeroext i8 @may_propagate_copy(%union.tree_node* %82, %union.tree_node* %83), !dbg !4885
  %conv124 = zext i8 %call123 to i32, !dbg !4885
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !4885
  br i1 %tobool125, label %if.then126, label %if.end179, !dbg !4886

if.then126:                                       ; preds = %lor.lhs.false122, %lor.lhs.false115, %land.lhs.true112
  %84 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4887
  %85 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4887
  %cmp127 = icmp ne %union.tree_node* %84, %85, !dbg !4887
  br i1 %cmp127, label %cond.false, label %cond.true, !dbg !4887

cond.true:                                        ; preds = %if.then126
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4209, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4887
  br label %cond.end, !dbg !4887

cond.false:                                       ; preds = %if.then126
  br label %cond.end, !dbg !4887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4887
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4889
  %tobool129 = icmp ne %struct._IO_FILE* %86, null, !dbg !4889
  br i1 %tobool129, label %land.lhs.true130, label %if.end137, !dbg !4891

land.lhs.true130:                                 ; preds = %cond.end
  %87 = load i32, i32* @dump_flags, align 4, !dbg !4892
  %and131 = and i32 %87, 8, !dbg !4893
  %tobool132 = icmp ne i32 %and131, 0, !dbg !4893
  br i1 %tobool132, label %if.then133, label %if.end137, !dbg !4894

if.then133:                                       ; preds = %land.lhs.true130
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4895
  %call134 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i64 0, i64 0)), !dbg !4897
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4898
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4899
  call void @print_gimple_expr(%struct._IO_FILE* %89, %union.gimple_statement_d* %90, i32 0, i32 0), !dbg !4900
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4901
  %call135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i64 0, i64 0)), !dbg !4902
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4903
  %93 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4904
  call void @print_generic_expr(%struct._IO_FILE* %92, %union.tree_node* %93, i32 0), !dbg !4905
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4906
  %call136 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0)), !dbg !4907
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4908
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4909
  call void @print_gimple_stmt(%struct._IO_FILE* %95, %union.gimple_statement_d* %96, i32 0, i32 0), !dbg !4910
  br label %if.end137, !dbg !4911

if.end137:                                        ; preds = %if.then133, %land.lhs.true130, %cond.end
  %97 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4912
  %base138 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !4912
  %98 = bitcast %struct.tree_base* %base138 to i64*, !dbg !4912
  %bf.load139 = load i64, i64* %98, align 8, !dbg !4912
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !4912
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !4912
  %cmp142 = icmp eq i32 %bf.cast141, 141, !dbg !4914
  br i1 %cmp142, label %if.then144, label %if.end145, !dbg !4915

if.then144:                                       ; preds = %if.end137
  %99 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4916
  %ssa_name = bitcast %union.tree_node* %99 to %struct.tree_ssa_name*, !dbg !4916
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4916
  %100 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4916
  call void @gimple_set_plf(%union.gimple_statement_d* %100, i32 1, i8 zeroext 1), !dbg !4917
  br label %if.end145, !dbg !4917

if.end145:                                        ; preds = %if.then144, %if.end137
  %101 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4918
  %tobool146 = icmp ne %union.tree_node* %101, null, !dbg !4918
  br i1 %tobool146, label %lor.lhs.false147, label %land.lhs.true154, !dbg !4920

lor.lhs.false147:                                 ; preds = %if.end145
  %102 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4921
  %base148 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !4921
  %103 = bitcast %struct.tree_base* %base148 to i64*, !dbg !4921
  %bf.load149 = load i64, i64* %103, align 8, !dbg !4921
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !4921
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !4921
  %cmp152 = icmp ne i32 %bf.cast151, 141, !dbg !4922
  br i1 %cmp152, label %land.lhs.true154, label %if.end163, !dbg !4923

land.lhs.true154:                                 ; preds = %lor.lhs.false147, %if.end145
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4924
  %call155 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %104), !dbg !4925
  %105 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4926
  %common156 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !4926
  %type157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2, !dbg !4926
  %106 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !4926
  %call158 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %call155, %union.tree_node* %106), !dbg !4927
  %tobool159 = icmp ne i8 %call158, 0, !dbg !4927
  br i1 %tobool159, label %if.end163, label %if.then160, !dbg !4928

if.then160:                                       ; preds = %land.lhs.true154
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4929
  %call161 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %107), !dbg !4929
  %108 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4929
  %call162 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call161, %union.tree_node* %108), !dbg !4929
  store %union.tree_node* %call162, %union.tree_node** %sprime, align 8, !dbg !4930
  br label %if.end163, !dbg !4931

if.end163:                                        ; preds = %if.then160, %land.lhs.true154, %lor.lhs.false147
  %109 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !4932
  %inc164 = add nsw i32 %109, 1, !dbg !4932
  store i32 %inc164, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !4932
  %110 = load %union.tree_node*, %union.tree_node** %sprime, align 8, !dbg !4933
  call void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %110), !dbg !4934
  %call165 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4935
  store %union.gimple_statement_d* %call165, %union.gimple_statement_d** %stmt, align 8, !dbg !4936
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4937
  call void @update_stmt(%union.gimple_statement_d* %111), !dbg !4938
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4939
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4941
  %call166 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %112, %union.gimple_statement_d* %113), !dbg !4942
  %tobool167 = icmp ne i8 %call166, 0, !dbg !4942
  br i1 %tobool167, label %if.then168, label %if.end178, !dbg !4943

if.then168:                                       ; preds = %if.end163
  %114 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !4944
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4946
  %call169 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %115), !dbg !4947
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call169, i32 0, i32 9, !dbg !4948
  %116 = load i32, i32* %index, align 8, !dbg !4948
  %call170 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %114, i32 %116), !dbg !4949
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4950
  %tobool171 = icmp ne %struct._IO_FILE* %117, null, !dbg !4950
  br i1 %tobool171, label %land.lhs.true172, label %if.end177, !dbg !4952

land.lhs.true172:                                 ; preds = %if.then168
  %118 = load i32, i32* @dump_flags, align 4, !dbg !4953
  %and173 = and i32 %118, 8, !dbg !4954
  %tobool174 = icmp ne i32 %and173, 0, !dbg !4954
  br i1 %tobool174, label %if.then175, label %if.end177, !dbg !4955

if.then175:                                       ; preds = %land.lhs.true172
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4956
  %call176 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i64 0, i64 0)), !dbg !4957
  br label %if.end177, !dbg !4957

if.end177:                                        ; preds = %if.then175, %land.lhs.true172, %if.then168
  br label %if.end178, !dbg !4958

if.end178:                                        ; preds = %if.end177, %if.end163
  br label %if.end179, !dbg !4959

if.end179:                                        ; preds = %if.end178, %lor.lhs.false122, %land.lhs.true109, %if.end107
  br label %if.end278, !dbg !4960

if.else180:                                       ; preds = %land.lhs.true23, %land.lhs.true20, %lor.lhs.false, %land.lhs.true11, %land.lhs.true, %for.body4
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4961
  %call181 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %120), !dbg !4963
  %conv182 = zext i8 %call181 to i32, !dbg !4963
  %tobool183 = icmp ne i32 %conv182, 0, !dbg !4963
  br i1 %tobool183, label %land.lhs.true184, label %if.else232, !dbg !4964

land.lhs.true184:                                 ; preds = %if.else180
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4965
  %call185 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %121), !dbg !4966
  %call186 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call185), !dbg !4967
  %tobool187 = icmp ne i8 %call186, 0, !dbg !4967
  br i1 %tobool187, label %if.else232, label %land.lhs.true188, !dbg !4968

land.lhs.true188:                                 ; preds = %land.lhs.true184
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4969
  %call189 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %122), !dbg !4969
  %base190 = bitcast %union.tree_node* %call189 to %struct.tree_base*, !dbg !4969
  %123 = bitcast %struct.tree_base* %base190 to i64*, !dbg !4969
  %bf.load191 = load i64, i64* %123, align 8, !dbg !4969
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !4969
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !4969
  %cmp194 = icmp eq i32 %bf.cast193, 141, !dbg !4970
  br i1 %cmp194, label %if.then201, label %lor.lhs.false196, !dbg !4971

lor.lhs.false196:                                 ; preds = %land.lhs.true188
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4972
  %call197 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %124), !dbg !4973
  %call198 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call197), !dbg !4974
  %conv199 = zext i8 %call198 to i32, !dbg !4974
  %tobool200 = icmp ne i32 %conv199, 0, !dbg !4974
  br i1 %tobool200, label %if.then201, label %if.else232, !dbg !4975

if.then201:                                       ; preds = %lor.lhs.false196, %land.lhs.true188
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs202, metadata !4976, metadata !DIExpression()), !dbg !4978
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4979
  %call203 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %125), !dbg !4980
  store %union.tree_node* %call203, %union.tree_node** %rhs202, align 8, !dbg !4978
  call void @llvm.dbg.declare(metadata %union.tree_node** %val204, metadata !4981, metadata !DIExpression()), !dbg !4982
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4983
  %call205 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %126), !dbg !4984
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4985
  %call206 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %127), !dbg !4986
  %call207 = call %union.tree_node* @vn_reference_lookup(%union.tree_node* %call205, %union.tree_node* %call206, i8 zeroext 1, %struct.vn_reference_s** null), !dbg !4987
  store %union.tree_node* %call207, %union.tree_node** %val204, align 8, !dbg !4988
  %128 = load %union.tree_node*, %union.tree_node** %rhs202, align 8, !dbg !4989
  %base208 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !4989
  %129 = bitcast %struct.tree_base* %base208 to i64*, !dbg !4989
  %bf.load209 = load i64, i64* %129, align 8, !dbg !4989
  %bf.clear210 = and i64 %bf.load209, 65535, !dbg !4989
  %bf.cast211 = trunc i64 %bf.clear210 to i32, !dbg !4989
  %cmp212 = icmp eq i32 %bf.cast211, 141, !dbg !4991
  br i1 %cmp212, label %if.then214, label %if.end217, !dbg !4992

if.then214:                                       ; preds = %if.then201
  %130 = load %union.tree_node*, %union.tree_node** %rhs202, align 8, !dbg !4993
  %call215 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %130), !dbg !4994
  %valnum216 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call215, i32 0, i32 0, !dbg !4995
  %131 = load %union.tree_node*, %union.tree_node** %valnum216, align 8, !dbg !4995
  store %union.tree_node* %131, %union.tree_node** %rhs202, align 8, !dbg !4996
  br label %if.end217, !dbg !4997

if.end217:                                        ; preds = %if.then214, %if.then201
  %132 = load %union.tree_node*, %union.tree_node** %val204, align 8, !dbg !4998
  %tobool218 = icmp ne %union.tree_node* %132, null, !dbg !4998
  br i1 %tobool218, label %land.lhs.true219, label %if.end231, !dbg !5000

land.lhs.true219:                                 ; preds = %if.end217
  %133 = load %union.tree_node*, %union.tree_node** %val204, align 8, !dbg !5001
  %134 = load %union.tree_node*, %union.tree_node** %rhs202, align 8, !dbg !5002
  %call220 = call i32 @operand_equal_p(%union.tree_node* %133, %union.tree_node* %134, i32 0), !dbg !5003
  %tobool221 = icmp ne i32 %call220, 0, !dbg !5003
  br i1 %tobool221, label %if.then222, label %if.end231, !dbg !5004

if.then222:                                       ; preds = %land.lhs.true219
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5005
  %tobool223 = icmp ne %struct._IO_FILE* %135, null, !dbg !5005
  br i1 %tobool223, label %land.lhs.true224, label %if.end229, !dbg !5008

land.lhs.true224:                                 ; preds = %if.then222
  %136 = load i32, i32* @dump_flags, align 4, !dbg !5009
  %and225 = and i32 %136, 8, !dbg !5010
  %tobool226 = icmp ne i32 %and225, 0, !dbg !5010
  br i1 %tobool226, label %if.then227, label %if.end229, !dbg !5011

if.then227:                                       ; preds = %land.lhs.true224
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5012
  %call228 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.61, i64 0, i64 0)), !dbg !5014
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5015
  %139 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5016
  call void @print_gimple_stmt(%struct._IO_FILE* %138, %union.gimple_statement_d* %139, i32 0, i32 0), !dbg !5017
  br label %if.end229, !dbg !5018

if.end229:                                        ; preds = %if.then227, %land.lhs.true224, %if.then222
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5019
  %call230 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %to_remove, %union.gimple_statement_d* %140), !dbg !5019
  br label %if.end231, !dbg !5020

if.end231:                                        ; preds = %if.end229, %land.lhs.true219, %if.end217
  br label %if.end277, !dbg !5021

if.else232:                                       ; preds = %lor.lhs.false196, %land.lhs.true184, %if.else180
  %141 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5022
  %call233 = call i32 @gimple_code(%union.gimple_statement_d* %141), !dbg !5024
  %cmp234 = icmp eq i32 %call233, 1, !dbg !5025
  br i1 %cmp234, label %if.then236, label %if.end276, !dbg !5026

if.then236:                                       ; preds = %if.else232
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5027, metadata !DIExpression()), !dbg !5029
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5030
  %call237 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %142), !dbg !5031
  store %union.tree_node* %call237, %union.tree_node** %op0, align 8, !dbg !5029
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5032, metadata !DIExpression()), !dbg !5033
  %143 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5034
  %call238 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %143), !dbg !5035
  store %union.tree_node* %call238, %union.tree_node** %op1, align 8, !dbg !5033
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !5036, metadata !DIExpression()), !dbg !5037
  %144 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5038
  %base239 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !5038
  %145 = bitcast %struct.tree_base* %base239 to i64*, !dbg !5038
  %bf.load240 = load i64, i64* %145, align 8, !dbg !5038
  %bf.clear241 = and i64 %bf.load240, 65535, !dbg !5038
  %bf.cast242 = trunc i64 %bf.clear241 to i32, !dbg !5038
  %cmp243 = icmp eq i32 %bf.cast242, 141, !dbg !5040
  br i1 %cmp243, label %if.then245, label %if.end248, !dbg !5041

if.then245:                                       ; preds = %if.then236
  %146 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5042
  %call246 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %146), !dbg !5043
  %valnum247 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call246, i32 0, i32 0, !dbg !5044
  %147 = load %union.tree_node*, %union.tree_node** %valnum247, align 8, !dbg !5044
  store %union.tree_node* %147, %union.tree_node** %op0, align 8, !dbg !5045
  br label %if.end248, !dbg !5046

if.end248:                                        ; preds = %if.then245, %if.then236
  %148 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5047
  %base249 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !5047
  %149 = bitcast %struct.tree_base* %base249 to i64*, !dbg !5047
  %bf.load250 = load i64, i64* %149, align 8, !dbg !5047
  %bf.clear251 = and i64 %bf.load250, 65535, !dbg !5047
  %bf.cast252 = trunc i64 %bf.clear251 to i32, !dbg !5047
  %cmp253 = icmp eq i32 %bf.cast252, 141, !dbg !5049
  br i1 %cmp253, label %if.then255, label %if.end258, !dbg !5050

if.then255:                                       ; preds = %if.end248
  %150 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5051
  %call256 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %150), !dbg !5052
  %valnum257 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call256, i32 0, i32 0, !dbg !5053
  %151 = load %union.tree_node*, %union.tree_node** %valnum257, align 8, !dbg !5053
  store %union.tree_node* %151, %union.tree_node** %op1, align 8, !dbg !5054
  br label %if.end258, !dbg !5055

if.end258:                                        ; preds = %if.then255, %if.end248
  %152 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5056
  %call259 = call i32 @gimple_cond_code(%union.gimple_statement_d* %152), !dbg !5056
  %153 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5056
  %154 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5056
  %155 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5056
  %call260 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %call259, %union.tree_node* %153, %union.tree_node* %154, %union.tree_node* %155), !dbg !5056
  store %union.tree_node* %call260, %union.tree_node** %result, align 8, !dbg !5057
  %156 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5058
  %tobool261 = icmp ne %union.tree_node* %156, null, !dbg !5058
  br i1 %tobool261, label %land.lhs.true262, label %if.end275, !dbg !5060

land.lhs.true262:                                 ; preds = %if.end258
  %157 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5061
  %base263 = bitcast %union.tree_node* %157 to %struct.tree_base*, !dbg !5061
  %158 = bitcast %struct.tree_base* %base263 to i64*, !dbg !5061
  %bf.load264 = load i64, i64* %158, align 8, !dbg !5061
  %bf.clear265 = and i64 %bf.load264, 65535, !dbg !5061
  %bf.cast266 = trunc i64 %bf.clear265 to i32, !dbg !5061
  %cmp267 = icmp eq i32 %bf.cast266, 23, !dbg !5062
  br i1 %cmp267, label %if.then269, label %if.end275, !dbg !5063

if.then269:                                       ; preds = %land.lhs.true262
  %159 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5064
  %call270 = call i32 @integer_zerop(%union.tree_node* %159), !dbg !5067
  %tobool271 = icmp ne i32 %call270, 0, !dbg !5067
  br i1 %tobool271, label %if.then272, label %if.else273, !dbg !5068

if.then272:                                       ; preds = %if.then269
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5069
  call void @gimple_cond_make_false(%union.gimple_statement_d* %160), !dbg !5070
  br label %if.end274, !dbg !5070

if.else273:                                       ; preds = %if.then269
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5071
  call void @gimple_cond_make_true(%union.gimple_statement_d* %161), !dbg !5072
  br label %if.end274

if.end274:                                        ; preds = %if.else273, %if.then272
  %162 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5073
  call void @update_stmt(%union.gimple_statement_d* %162), !dbg !5074
  store i32 32, i32* %todo, align 4, !dbg !5075
  br label %if.end275, !dbg !5076

if.end275:                                        ; preds = %if.end274, %land.lhs.true262, %if.end258
  br label %if.end276, !dbg !5077

if.end276:                                        ; preds = %if.end275, %if.else232
  br label %if.end277

if.end277:                                        ; preds = %if.end276, %if.end231
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.end179
  %163 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5078
  %call279 = call i32 @gimple_code(%union.gimple_statement_d* %163), !dbg !5080
  %cmp280 = icmp eq i32 %call279, 8, !dbg !5081
  br i1 %cmp280, label %land.lhs.true282, label %if.end331, !dbg !5082

land.lhs.true282:                                 ; preds = %if.end278
  %164 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5083
  %call283 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %164), !dbg !5083
  %base284 = bitcast %union.tree_node* %call283 to %struct.tree_base*, !dbg !5083
  %165 = bitcast %struct.tree_base* %base284 to i64*, !dbg !5083
  %bf.load285 = load i64, i64* %165, align 8, !dbg !5083
  %bf.clear286 = and i64 %bf.load285, 65535, !dbg !5083
  %bf.cast287 = trunc i64 %bf.clear286 to i32, !dbg !5083
  %cmp288 = icmp eq i32 %bf.cast287, 141, !dbg !5084
  br i1 %cmp288, label %if.then290, label %if.end331, !dbg !5085

if.then290:                                       ; preds = %land.lhs.true282
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !5086, metadata !DIExpression()), !dbg !5088
  %166 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5089
  %call291 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %166), !dbg !5090
  %call292 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call291), !dbg !5091
  %valnum293 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call292, i32 0, i32 0, !dbg !5092
  %167 = load %union.tree_node*, %union.tree_node** %valnum293, align 8, !dbg !5092
  store %union.tree_node* %167, %union.tree_node** %fn, align 8, !dbg !5088
  %168 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !5093
  %base294 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !5093
  %169 = bitcast %struct.tree_base* %base294 to i64*, !dbg !5093
  %bf.load295 = load i64, i64* %169, align 8, !dbg !5093
  %bf.clear296 = and i64 %bf.load295, 65535, !dbg !5093
  %bf.cast297 = trunc i64 %bf.clear296 to i32, !dbg !5093
  %cmp298 = icmp eq i32 %bf.cast297, 121, !dbg !5095
  br i1 %cmp298, label %land.lhs.true300, label %if.end330, !dbg !5096

land.lhs.true300:                                 ; preds = %if.then290
  %170 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !5097
  %exp = bitcast %union.tree_node* %170 to %struct.tree_exp*, !dbg !5097
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5097
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5097
  %171 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5097
  %base301 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !5097
  %172 = bitcast %struct.tree_base* %base301 to i64*, !dbg !5097
  %bf.load302 = load i64, i64* %172, align 8, !dbg !5097
  %bf.clear303 = and i64 %bf.load302, 65535, !dbg !5097
  %bf.cast304 = trunc i64 %bf.clear303 to i32, !dbg !5097
  %cmp305 = icmp eq i32 %bf.cast304, 29, !dbg !5098
  br i1 %cmp305, label %if.then307, label %if.end330, !dbg !5099

if.then307:                                       ; preds = %land.lhs.true300
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5100
  %tobool308 = icmp ne %struct._IO_FILE* %173, null, !dbg !5100
  br i1 %tobool308, label %land.lhs.true309, label %if.end315, !dbg !5103

land.lhs.true309:                                 ; preds = %if.then307
  %174 = load i32, i32* @dump_flags, align 4, !dbg !5104
  %and310 = and i32 %174, 8, !dbg !5105
  %tobool311 = icmp ne i32 %and310, 0, !dbg !5105
  br i1 %tobool311, label %if.then312, label %if.end315, !dbg !5106

if.then312:                                       ; preds = %land.lhs.true309
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5107
  %call313 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %175, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i64 0, i64 0)), !dbg !5109
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5110
  %177 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !5111
  call void @print_generic_expr(%struct._IO_FILE* %176, %union.tree_node* %177, i32 0), !dbg !5112
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5113
  %call314 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %178, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.59, i64 0, i64 0)), !dbg !5114
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5115
  %180 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5116
  call void @print_gimple_stmt(%struct._IO_FILE* %179, %union.gimple_statement_d* %180, i32 0, i32 0), !dbg !5117
  br label %if.end315, !dbg !5118

if.end315:                                        ; preds = %if.then312, %land.lhs.true309, %if.then307
  %181 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5119
  %182 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !5120
  call void @gimple_call_set_fn(%union.gimple_statement_d* %181, %union.tree_node* %182), !dbg !5121
  %183 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5122
  call void @update_stmt(%union.gimple_statement_d* %183), !dbg !5123
  %184 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5124
  %185 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5126
  %call316 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %184, %union.gimple_statement_d* %185), !dbg !5127
  %tobool317 = icmp ne i8 %call316, 0, !dbg !5127
  br i1 %tobool317, label %if.then318, label %if.end329, !dbg !5128

if.then318:                                       ; preds = %if.end315
  %186 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !5129
  %187 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5131
  %call319 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %187), !dbg !5132
  %index320 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call319, i32 0, i32 9, !dbg !5133
  %188 = load i32, i32* %index320, align 8, !dbg !5133
  %call321 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %186, i32 %188), !dbg !5134
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5135
  %tobool322 = icmp ne %struct._IO_FILE* %189, null, !dbg !5135
  br i1 %tobool322, label %land.lhs.true323, label %if.end328, !dbg !5137

land.lhs.true323:                                 ; preds = %if.then318
  %190 = load i32, i32* @dump_flags, align 4, !dbg !5138
  %and324 = and i32 %190, 8, !dbg !5139
  %tobool325 = icmp ne i32 %and324, 0, !dbg !5139
  br i1 %tobool325, label %if.then326, label %if.end328, !dbg !5140

if.then326:                                       ; preds = %land.lhs.true323
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5141
  %call327 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %191, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i64 0, i64 0)), !dbg !5142
  br label %if.end328, !dbg !5142

if.end328:                                        ; preds = %if.then326, %land.lhs.true323, %if.then318
  br label %if.end329, !dbg !5143

if.end329:                                        ; preds = %if.end328, %if.end315
  %192 = load i32, i32* %todo, align 4, !dbg !5144
  %or = or i32 %192, 16384, !dbg !5144
  store i32 %or, i32* %todo, align 4, !dbg !5144
  br label %if.end330, !dbg !5145

if.end330:                                        ; preds = %if.end329, %land.lhs.true300, %if.then290
  br label %if.end331, !dbg !5146

if.end331:                                        ; preds = %if.end330, %land.lhs.true282, %if.end278
  br label %for.inc, !dbg !5147

for.inc:                                          ; preds = %if.end331, %if.end74
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5148
  br label %for.cond3, !dbg !5149, !llvm.loop !5150

for.end:                                          ; preds = %for.cond3
  %193 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5152
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp332, %struct.basic_block_def* %193), !dbg !5154
  %194 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5154
  %195 = bitcast %struct.gimple_stmt_iterator* %tmp332 to i8*, !dbg !5154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %194, i8* align 8 %195, i64 24, i1 false), !dbg !5154
  br label %for.cond333, !dbg !5155

for.cond333:                                      ; preds = %if.end418, %if.then384, %if.then354, %for.end
  %call334 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5156
  %tobool335 = icmp ne i8 %call334, 0, !dbg !5158
  %lnot336 = xor i1 %tobool335, true, !dbg !5158
  br i1 %lnot336, label %for.body337, label %for.end422, !dbg !5159

for.body337:                                      ; preds = %for.cond333
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt338, metadata !5160, metadata !DIExpression()), !dbg !5162
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5163, metadata !DIExpression()), !dbg !5164
  %call339 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5165
  store %union.gimple_statement_d* %call339, %union.gimple_statement_d** %phi, align 8, !dbg !5164
  call void @llvm.dbg.declare(metadata %union.tree_node** %sprime340, metadata !5166, metadata !DIExpression()), !dbg !5167
  store %union.tree_node* null, %union.tree_node** %sprime340, align 8, !dbg !5167
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !5168, metadata !DIExpression()), !dbg !5169
  %196 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5170
  %call341 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %196), !dbg !5170
  %call342 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call341), !dbg !5170
  store %union.tree_node* %call342, %union.tree_node** %res, align 8, !dbg !5169
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %sprimeexpr343, metadata !5171, metadata !DIExpression()), !dbg !5172
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %resexpr, metadata !5173, metadata !DIExpression()), !dbg !5174
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi2, metadata !5175, metadata !DIExpression()), !dbg !5176
  %197 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5177
  %call344 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %197), !dbg !5179
  %cmp345 = icmp eq i32 %call344, 1, !dbg !5180
  br i1 %cmp345, label %if.then354, label %lor.lhs.false347, !dbg !5181

lor.lhs.false347:                                 ; preds = %for.body337
  %198 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5182
  %call348 = call zeroext i8 @is_gimple_reg(%union.tree_node* %198), !dbg !5183
  %tobool349 = icmp ne i8 %call348, 0, !dbg !5183
  br i1 %tobool349, label %lor.lhs.false350, label %if.then354, !dbg !5184

lor.lhs.false350:                                 ; preds = %lor.lhs.false347
  %199 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @inserted_phi_names, align 8, !dbg !5185
  %200 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5186
  %ssa_name351 = bitcast %union.tree_node* %200 to %struct.tree_ssa_name*, !dbg !5186
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name351, i32 0, i32 3, !dbg !5186
  %201 = load i32, i32* %version, align 8, !dbg !5186
  %call352 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %199, i32 %201), !dbg !5187
  %tobool353 = icmp ne i32 %call352, 0, !dbg !5187
  br i1 %tobool353, label %if.then354, label %if.end355, !dbg !5188

if.then354:                                       ; preds = %lor.lhs.false350, %lor.lhs.false347, %for.body337
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5189
  br label %for.cond333, !dbg !5191, !llvm.loop !5192

if.end355:                                        ; preds = %lor.lhs.false350
  %202 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5194
  %call356 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %202), !dbg !5195
  store %struct.pre_expr_d* %call356, %struct.pre_expr_d** %resexpr, align 8, !dbg !5196
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5197
  %aux357 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %203, i32 0, i32 2, !dbg !5197
  %204 = load i8*, i8** %aux357, align 8, !dbg !5197
  %205 = bitcast i8* %204 to %struct.bb_bitmap_sets*, !dbg !5197
  %avail_out358 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %205, i32 0, i32 3, !dbg !5197
  %206 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out358, align 8, !dbg !5197
  %207 = load %struct.pre_expr_d*, %struct.pre_expr_d** %resexpr, align 8, !dbg !5198
  %call359 = call i32 @get_expr_value_id(%struct.pre_expr_d* %207), !dbg !5199
  %call360 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %206, i32 %call359, %union.gimple_statement_d* null), !dbg !5200
  store %struct.pre_expr_d* %call360, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5201
  %208 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5202
  %tobool361 = icmp ne %struct.pre_expr_d* %208, null, !dbg !5202
  br i1 %tobool361, label %if.then362, label %if.end379, !dbg !5204

if.then362:                                       ; preds = %if.end355
  %209 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5205
  %kind363 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %209, i32 0, i32 0, !dbg !5208
  %210 = load i32, i32* %kind363, align 8, !dbg !5208
  %cmp364 = icmp eq i32 %210, 3, !dbg !5209
  br i1 %cmp364, label %if.then366, label %if.else369, !dbg !5210

if.then366:                                       ; preds = %if.then362
  %211 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5211
  %u367 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %211, i32 0, i32 2, !dbg !5211
  %constant368 = bitcast %union.pre_expr_union_d* %u367 to %union.tree_node**, !dbg !5211
  %212 = load %union.tree_node*, %union.tree_node** %constant368, align 8, !dbg !5211
  store %union.tree_node* %212, %union.tree_node** %sprime340, align 8, !dbg !5212
  br label %if.end378, !dbg !5213

if.else369:                                       ; preds = %if.then362
  %213 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5214
  %kind370 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %213, i32 0, i32 0, !dbg !5216
  %214 = load i32, i32* %kind370, align 8, !dbg !5216
  %cmp371 = icmp eq i32 %214, 0, !dbg !5217
  br i1 %cmp371, label %if.then373, label %if.else376, !dbg !5218

if.then373:                                       ; preds = %if.else369
  %215 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5219
  %u374 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %215, i32 0, i32 2, !dbg !5219
  %name375 = bitcast %union.pre_expr_union_d* %u374 to %union.tree_node**, !dbg !5219
  %216 = load %union.tree_node*, %union.tree_node** %name375, align 8, !dbg !5219
  store %union.tree_node* %216, %union.tree_node** %sprime340, align 8, !dbg !5220
  br label %if.end377, !dbg !5221

if.else376:                                       ; preds = %if.else369
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4362, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5222
  br label %if.end377

if.end377:                                        ; preds = %if.else376, %if.then373
  br label %if.end378

if.end378:                                        ; preds = %if.end377, %if.then366
  br label %if.end379, !dbg !5223

if.end379:                                        ; preds = %if.end378, %if.end355
  %217 = load %struct.pre_expr_d*, %struct.pre_expr_d** %sprimeexpr343, align 8, !dbg !5224
  %tobool380 = icmp ne %struct.pre_expr_d* %217, null, !dbg !5224
  br i1 %tobool380, label %lor.lhs.false381, label %if.then384, !dbg !5226

lor.lhs.false381:                                 ; preds = %if.end379
  %218 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5227
  %219 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5228
  %cmp382 = icmp eq %union.tree_node* %218, %219, !dbg !5229
  br i1 %cmp382, label %if.then384, label %if.end385, !dbg !5230

if.then384:                                       ; preds = %lor.lhs.false381, %if.end379
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5231
  br label %for.cond333, !dbg !5233, !llvm.loop !5192

if.end385:                                        ; preds = %lor.lhs.false381
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5234
  %tobool386 = icmp ne %struct._IO_FILE* %220, null, !dbg !5234
  br i1 %tobool386, label %land.lhs.true387, label %if.end394, !dbg !5236

land.lhs.true387:                                 ; preds = %if.end385
  %221 = load i32, i32* @dump_flags, align 4, !dbg !5237
  %and388 = and i32 %221, 8, !dbg !5238
  %tobool389 = icmp ne i32 %and388, 0, !dbg !5238
  br i1 %tobool389, label %if.then390, label %if.end394, !dbg !5239

if.then390:                                       ; preds = %land.lhs.true387
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5240
  %call391 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.63, i64 0, i64 0)), !dbg !5242
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5243
  %224 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5244
  call void @print_generic_expr(%struct._IO_FILE* %223, %union.tree_node* %224, i32 0), !dbg !5245
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5246
  %call392 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i64 0, i64 0)), !dbg !5247
  %226 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5248
  %227 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5249
  call void @print_generic_expr(%struct._IO_FILE* %226, %union.tree_node* %227, i32 0), !dbg !5250
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5251
  %call393 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %228, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5252
  br label %if.end394, !dbg !5253

if.end394:                                        ; preds = %if.then390, %land.lhs.true387, %if.end385
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !5254
  %229 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5255
  %common395 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !5255
  %type396 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common395, i32 0, i32 2, !dbg !5255
  %230 = load %union.tree_node*, %union.tree_node** %type396, align 8, !dbg !5255
  %231 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5257
  %common397 = bitcast %union.tree_node* %231 to %struct.tree_common*, !dbg !5257
  %type398 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common397, i32 0, i32 2, !dbg !5257
  %232 = load %union.tree_node*, %union.tree_node** %type398, align 8, !dbg !5257
  %call399 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %230, %union.tree_node* %232), !dbg !5258
  %tobool400 = icmp ne i8 %call399, 0, !dbg !5258
  br i1 %tobool400, label %if.end405, label %if.then401, !dbg !5259

if.then401:                                       ; preds = %if.end394
  %233 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5260
  %common402 = bitcast %union.tree_node* %233 to %struct.tree_common*, !dbg !5260
  %type403 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common402, i32 0, i32 2, !dbg !5260
  %234 = load %union.tree_node*, %union.tree_node** %type403, align 8, !dbg !5260
  %235 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5260
  %call404 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %234, %union.tree_node* %235), !dbg !5260
  store %union.tree_node* %call404, %union.tree_node** %sprime340, align 8, !dbg !5261
  br label %if.end405, !dbg !5262

if.end405:                                        ; preds = %if.then401, %if.end394
  %236 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5263
  %237 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5263
  %call406 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %236, %union.tree_node* %237), !dbg !5263
  store %union.gimple_statement_d* %call406, %union.gimple_statement_d** %stmt338, align 8, !dbg !5264
  %238 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt338, align 8, !dbg !5265
  %239 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !5266
  %ssa_name407 = bitcast %union.tree_node* %239 to %struct.tree_ssa_name*, !dbg !5266
  %def_stmt408 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name407, i32 0, i32 2, !dbg !5266
  store %union.gimple_statement_d* %238, %union.gimple_statement_d** %def_stmt408, align 8, !dbg !5267
  %240 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5268
  %base409 = bitcast %union.tree_node* %240 to %struct.tree_base*, !dbg !5268
  %241 = bitcast %struct.tree_base* %base409 to i64*, !dbg !5268
  %bf.load410 = load i64, i64* %241, align 8, !dbg !5268
  %bf.clear411 = and i64 %bf.load410, 65535, !dbg !5268
  %bf.cast412 = trunc i64 %bf.clear411 to i32, !dbg !5268
  %cmp413 = icmp eq i32 %bf.cast412, 141, !dbg !5270
  br i1 %cmp413, label %if.then415, label %if.end418, !dbg !5271

if.then415:                                       ; preds = %if.end405
  %242 = load %union.tree_node*, %union.tree_node** %sprime340, align 8, !dbg !5272
  %ssa_name416 = bitcast %union.tree_node* %242 to %struct.tree_ssa_name*, !dbg !5272
  %def_stmt417 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name416, i32 0, i32 2, !dbg !5272
  %243 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt417, align 8, !dbg !5272
  call void @gimple_set_plf(%union.gimple_statement_d* %243, i32 1, i8 zeroext 1), !dbg !5273
  br label %if.end418, !dbg !5273

if.end418:                                        ; preds = %if.then415, %if.end405
  %244 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !5274
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp419, %struct.basic_block_def* %244), !dbg !5275
  %245 = bitcast %struct.gimple_stmt_iterator* %gsi2 to i8*, !dbg !5275
  %246 = bitcast %struct.gimple_stmt_iterator* %tmp419 to i8*, !dbg !5275
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 24, i1 false), !dbg !5275
  %247 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt338, align 8, !dbg !5276
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi2, %union.gimple_statement_d* %247, i32 0), !dbg !5277
  %248 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt338, align 8, !dbg !5278
  %call420 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %to_remove, %union.gimple_statement_d* %248), !dbg !5278
  %249 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !5279
  %inc421 = add nsw i32 %249, 1, !dbg !5279
  store i32 %inc421, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 0), align 4, !dbg !5279
  br label %for.cond333, !dbg !5280, !llvm.loop !5192

for.end422:                                       ; preds = %for.cond333
  br label %for.inc423, !dbg !5281

for.inc423:                                       ; preds = %for.end422
  %250 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !4695
  %next_bb424 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %250, i32 0, i32 6, !dbg !4695
  %251 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb424, align 8, !dbg !4695
  store %struct.basic_block_def* %251, %struct.basic_block_def** %b, align 8, !dbg !4695
  br label %for.cond, !dbg !4695, !llvm.loop !5282

for.end425:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !5284
  br label %for.cond426, !dbg !5286

for.cond426:                                      ; preds = %for.inc478, %for.end425
  %252 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %to_remove, align 8, !dbg !5287
  %tobool427 = icmp ne %struct.VEC_gimple_heap* %252, null, !dbg !5287
  br i1 %tobool427, label %cond.true428, label %cond.false430, !dbg !5287

cond.true428:                                     ; preds = %for.cond426
  %253 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %to_remove, align 8, !dbg !5287
  %base429 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %253, i32 0, i32 0, !dbg !5287
  br label %cond.end431, !dbg !5287

cond.false430:                                    ; preds = %for.cond426
  br label %cond.end431, !dbg !5287

cond.end431:                                      ; preds = %cond.false430, %cond.true428
  %cond432 = phi %struct.VEC_gimple_base* [ %base429, %cond.true428 ], [ null, %cond.false430 ], !dbg !5287
  %254 = load i32, i32* %i, align 4, !dbg !5287
  %call433 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond432, i32 %254, %union.gimple_statement_d** %stmt), !dbg !5287
  %tobool434 = icmp ne i32 %call433, 0, !dbg !5289
  br i1 %tobool434, label %for.body435, label %for.end480, !dbg !5289

for.body435:                                      ; preds = %cond.end431
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs436, metadata !5290, metadata !DIExpression()), !dbg !5292
  %255 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5293
  %call437 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %255), !dbg !5294
  store %union.tree_node* %call437, %union.tree_node** %lhs436, align 8, !dbg !5292
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs438, metadata !5295, metadata !DIExpression()), !dbg !5296
  %256 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5297
  %call439 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %256), !dbg !5298
  store %union.tree_node* %call439, %union.tree_node** %rhs438, align 8, !dbg !5296
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5299, metadata !DIExpression()), !dbg !5300
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !5301, metadata !DIExpression()), !dbg !5302
  %257 = load %union.tree_node*, %union.tree_node** %lhs436, align 8, !dbg !5303
  %base440 = bitcast %union.tree_node* %257 to %struct.tree_base*, !dbg !5303
  %258 = bitcast %struct.tree_base* %base440 to i64*, !dbg !5303
  %bf.load441 = load i64, i64* %258, align 8, !dbg !5303
  %bf.clear442 = and i64 %bf.load441, 65535, !dbg !5303
  %bf.cast443 = trunc i64 %bf.clear442 to i32, !dbg !5303
  %cmp444 = icmp eq i32 %bf.cast443, 141, !dbg !5305
  br i1 %cmp444, label %land.lhs.true446, label %if.end464, !dbg !5306

land.lhs.true446:                                 ; preds = %for.body435
  %259 = load %union.tree_node*, %union.tree_node** %rhs438, align 8, !dbg !5307
  %base447 = bitcast %union.tree_node* %259 to %struct.tree_base*, !dbg !5307
  %260 = bitcast %struct.tree_base* %base447 to i64*, !dbg !5307
  %bf.load448 = load i64, i64* %260, align 8, !dbg !5307
  %bf.clear449 = and i64 %bf.load448, 65535, !dbg !5307
  %bf.cast450 = trunc i64 %bf.clear449 to i32, !dbg !5307
  %cmp451 = icmp eq i32 %bf.cast450, 141, !dbg !5308
  br i1 %cmp451, label %land.lhs.true453, label %if.end464, !dbg !5309

land.lhs.true453:                                 ; preds = %land.lhs.true446
  %261 = load %union.tree_node*, %union.tree_node** %lhs436, align 8, !dbg !5310
  %call454 = call zeroext i8 @single_imm_use(%union.tree_node* %261, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %use_stmt), !dbg !5311
  %conv455 = zext i8 %call454 to i32, !dbg !5311
  %tobool456 = icmp ne i32 %conv455, 0, !dbg !5311
  br i1 %tobool456, label %land.lhs.true457, label %if.end464, !dbg !5312

land.lhs.true457:                                 ; preds = %land.lhs.true453
  %262 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5313
  %call458 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %262), !dbg !5313
  %263 = load %union.tree_node*, %union.tree_node** %rhs438, align 8, !dbg !5314
  %call459 = call zeroext i8 @may_propagate_copy(%union.tree_node* %call458, %union.tree_node* %263), !dbg !5315
  %conv460 = zext i8 %call459 to i32, !dbg !5315
  %tobool461 = icmp ne i32 %conv460, 0, !dbg !5315
  br i1 %tobool461, label %if.then462, label %if.end464, !dbg !5316

if.then462:                                       ; preds = %land.lhs.true457
  %264 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5317
  %265 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5317
  %call463 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %265), !dbg !5317
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %264, %union.tree_node* %call463), !dbg !5317
  %266 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5319
  call void @update_stmt(%union.gimple_statement_d* %266), !dbg !5320
  br label %if.end464, !dbg !5321

if.end464:                                        ; preds = %if.then462, %land.lhs.true457, %land.lhs.true453, %land.lhs.true446, %for.body435
  %267 = load %union.tree_node*, %union.tree_node** %lhs436, align 8, !dbg !5322
  %base465 = bitcast %union.tree_node* %267 to %struct.tree_base*, !dbg !5322
  %268 = bitcast %struct.tree_base* %base465 to i64*, !dbg !5322
  %bf.load466 = load i64, i64* %268, align 8, !dbg !5322
  %bf.clear467 = and i64 %bf.load466, 65535, !dbg !5322
  %bf.cast468 = trunc i64 %bf.clear467 to i32, !dbg !5322
  %cmp469 = icmp ne i32 %bf.cast468, 141, !dbg !5324
  br i1 %cmp469, label %if.then475, label %lor.lhs.false471, !dbg !5325

lor.lhs.false471:                                 ; preds = %if.end464
  %269 = load %union.tree_node*, %union.tree_node** %lhs436, align 8, !dbg !5326
  %call472 = call zeroext i8 @has_zero_uses(%union.tree_node* %269), !dbg !5327
  %conv473 = zext i8 %call472 to i32, !dbg !5327
  %tobool474 = icmp ne i32 %conv473, 0, !dbg !5327
  br i1 %tobool474, label %if.then475, label %if.end477, !dbg !5328

if.then475:                                       ; preds = %lor.lhs.false471, %if.end464
  %270 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5329
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp476, %union.gimple_statement_d* %270), !dbg !5331
  %271 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5331
  %272 = bitcast %struct.gimple_stmt_iterator* %tmp476 to i8*, !dbg !5331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %271, i8* align 8 %272, i64 24, i1 false), !dbg !5331
  %273 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5332
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %273), !dbg !5333
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !5334
  %274 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5335
  call void @release_defs(%union.gimple_statement_d* %274), !dbg !5336
  br label %if.end477, !dbg !5337

if.end477:                                        ; preds = %if.then475, %lor.lhs.false471
  br label %for.inc478, !dbg !5338

for.inc478:                                       ; preds = %if.end477
  %275 = load i32, i32* %i, align 4, !dbg !5339
  %inc479 = add i32 %275, 1, !dbg !5339
  store i32 %inc479, i32* %i, align 4, !dbg !5339
  br label %for.cond426, !dbg !5340, !llvm.loop !5341

for.end480:                                       ; preds = %cond.end431
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %to_remove), !dbg !5343
  %276 = load i32, i32* %todo, align 4, !dbg !5344
  ret i32 %276, !dbg !5345
}

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

declare dso_local void @remove_fake_exit_edges() #2

declare dso_local void @gsi_commit_edge_inserts() #2

; Function Attrs: noinline nounwind uwtable
define internal void @clear_expression_ids() #0 !dbg !5346 {
entry:
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** @expressions), !dbg !5347
  ret void, !dbg !5348
}

declare dso_local void @free_scc_vn() #2

declare dso_local void @scev_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @fini_pre(i8 zeroext %do_fre) #0 !dbg !5349 {
entry:
  %do_fre.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  store i8 %do_fre, i8* %do_fre.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_fre.addr, metadata !5350, metadata !DIExpression()), !dbg !5351
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5352, metadata !DIExpression()), !dbg !5353
  %0 = load i32*, i32** @postorder, align 8, !dbg !5354
  %1 = bitcast i32* %0 to i8*, !dbg !5354
  call void @free(i8* %1), !dbg !5355
  call void @VEC_bitmap_set_t_heap_free(%struct.VEC_bitmap_set_t_heap** @value_expressions), !dbg !5356
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** @inserted_exprs), !dbg !5357
  call void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** @need_creation), !dbg !5358
  call void @bitmap_obstack_release(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !5359
  %2 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @bitmap_set_pool, align 8, !dbg !5360
  call void @free_alloc_pool(%struct.alloc_pool_def* %2), !dbg !5361
  %3 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !5362
  call void @free_alloc_pool(%struct.alloc_pool_def* %3), !dbg !5363
  %4 = load %struct.htab*, %struct.htab** @phi_translate_table, align 8, !dbg !5364
  call void @htab_delete(%struct.htab* %4), !dbg !5365
  %5 = load %struct.htab*, %struct.htab** @expression_to_id, align 8, !dbg !5366
  call void @htab_delete(%struct.htab* %5), !dbg !5367
  call void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** @name_to_id), !dbg !5368
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5369
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !5369
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5369
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5369
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !5369
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5369
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !5369
  br label %for.cond, !dbg !5369

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5371
  %tobool = icmp ne %struct.basic_block_def* %9, null, !dbg !5369
  br i1 %tobool, label %for.body, label %for.end, !dbg !5369

for.body:                                         ; preds = %for.cond
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5373
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 2, !dbg !5375
  %11 = load i8*, i8** %aux, align 8, !dbg !5375
  call void @free(i8* %11), !dbg !5376
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5377
  %aux1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 2, !dbg !5378
  store i8* null, i8** %aux1, align 8, !dbg !5379
  br label %for.inc, !dbg !5380

for.inc:                                          ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5371
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !5371
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5371
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !5371
  br label %for.cond, !dbg !5371, !llvm.loop !5381

for.end:                                          ; preds = %for.cond
  call void @free_dominance_info(i32 2), !dbg !5383
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !5384
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %15, i32 0, i32 0, !dbg !5384
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5384
  %tobool2 = icmp ne %struct.bitmap_element_def* %16, null, !dbg !5384
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5386

if.then:                                          ; preds = %for.end
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !5387
  %call = call zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def* %17), !dbg !5389
  %call3 = call zeroext i8 @cleanup_tree_cfg(), !dbg !5390
  br label %if.end, !dbg !5391

if.end:                                           ; preds = %if.then, %for.end
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !5392
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %18), !dbg !5392
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !5392
  %19 = load i8, i8* %do_fre.addr, align 1, !dbg !5393
  %tobool4 = icmp ne i8 %19, 0, !dbg !5393
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !5395

if.then5:                                         ; preds = %if.end
  call void @loop_optimizer_finalize(), !dbg !5396
  br label %if.end6, !dbg !5396

if.end6:                                          ; preds = %if.then5, %if.end
  ret void, !dbg !5397
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) #0 !dbg !5398 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5401, metadata !DIExpression()), !dbg !5402
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5402
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5402
  %1 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !5402
  ret %struct.VEC_gimple_heap* %1, !dbg !5402
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !5403 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5408, metadata !DIExpression()), !dbg !5409
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5409
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !5409
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5409

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5409
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !5409
  %2 = load i32, i32* %num, align 8, !dbg !5409
  br label %cond.end, !dbg !5409

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5409

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5409
  ret i32 %cond, !dbg !5409
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !5410 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5414, metadata !DIExpression()), !dbg !5415
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5416, metadata !DIExpression()), !dbg !5415
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !5417, metadata !DIExpression()), !dbg !5415
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5418
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !5418
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5418

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5418
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5418
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !5418
  %3 = load i32, i32* %num, align 8, !dbg !5418
  %cmp = icmp ult i32 %1, %3, !dbg !5418
  br i1 %cmp, label %if.then, label %if.else, !dbg !5415

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5420
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !5420
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5420
  %idxprom = zext i32 %5 to i64, !dbg !5420
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5420
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5420
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !5420
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !5420
  store i32 1, i32* %retval, align 4, !dbg !5420
  br label %return, !dbg !5420

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !5422
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !5422
  store i32 0, i32* %retval, align 4, !dbg !5422
  br label %return, !dbg !5422

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5415
  ret i32 %9, !dbg !5415
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_plf(%union.gimple_statement_d* %stmt, i32 %plf) #0 !dbg !5424 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5427, metadata !DIExpression()), !dbg !5428
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !5429, metadata !DIExpression()), !dbg !5430
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5431
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5432
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5433
  %bf.load = load i32, i32* %1, align 8, !dbg !5433
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5433
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5433
  %2 = load i32, i32* %plf.addr, align 4, !dbg !5434
  %and = and i32 %bf.clear, %2, !dbg !5435
  ret i32 %and, !dbg !5436
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5437 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  %slot_ = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5441, metadata !DIExpression()), !dbg !5442
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5443, metadata !DIExpression()), !dbg !5442
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %slot_, metadata !5444, metadata !DIExpression()), !dbg !5442
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5442
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !5442
  %1 = load i32, i32* %num, align 8, !dbg !5442
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5442
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5442
  %3 = load i32, i32* %alloc, align 4, !dbg !5442
  %cmp = icmp ult i32 %1, %3, !dbg !5442
  %conv = zext i1 %cmp to i32, !dbg !5442
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5442
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !5442
  %5 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5442
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %5, i32 0, i32 0, !dbg !5442
  %6 = load i32, i32* %num1, align 8, !dbg !5442
  %inc = add i32 %6, 1, !dbg !5442
  store i32 %inc, i32* %num1, align 8, !dbg !5442
  %idxprom = zext i32 %6 to i64, !dbg !5442
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5442
  store %union.gimple_statement_d** %arrayidx, %union.gimple_statement_d*** %slot_, align 8, !dbg !5442
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5442
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5442
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %8, align 8, !dbg !5442
  %9 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %slot_, align 8, !dbg !5442
  ret %union.gimple_statement_d** %9, !dbg !5442
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) #0 !dbg !5445 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %obj_ = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5448, metadata !DIExpression()), !dbg !5449
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_, metadata !5450, metadata !DIExpression()), !dbg !5449
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5449
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %0, i32 0, i32 0, !dbg !5449
  %1 = load i32, i32* %num, align 8, !dbg !5449
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5449
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 2, !dbg !5449
  %3 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5449
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %3, i32 0, i32 0, !dbg !5449
  %4 = load i32, i32* %num1, align 8, !dbg !5449
  %dec = add i32 %4, -1, !dbg !5449
  store i32 %dec, i32* %num1, align 8, !dbg !5449
  %idxprom = zext i32 %dec to i64, !dbg !5449
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !5449
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5449
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %obj_, align 8, !dbg !5449
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_, align 8, !dbg !5449
  ret %union.gimple_statement_d* %6, !dbg !5449
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5451 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5455, metadata !DIExpression()), !dbg !5456
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5457
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5458
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5459
  %bf.load = load i32, i32* %1, align 8, !dbg !5459
  %bf.clear = and i32 %bf.load, 255, !dbg !5459
  ret i32 %bf.clear, !dbg !5460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) #0 !dbg !5461 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5465, metadata !DIExpression()), !dbg !5466
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5467, metadata !DIExpression()), !dbg !5466
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5468, metadata !DIExpression()), !dbg !5466
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5466
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !5466
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5466
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5466

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5466
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !5466
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i32 0, i32 0, !dbg !5466
  br label %cond.end, !dbg !5466

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5466
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5466
  %call = call i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 %4), !dbg !5466
  %tobool1 = icmp ne i32 %call, 0, !dbg !5466
  %lnot = xor i1 %tobool1, true, !dbg !5466
  %lnot.ext = zext i1 %lnot to i32, !dbg !5466
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5466
  %5 = load i32, i32* %extend, align 4, !dbg !5469
  %tobool2 = icmp ne i32 %5, 0, !dbg !5469
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5466

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5469
  %7 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %6, align 8, !dbg !5469
  %8 = bitcast %struct.VEC_gimple_heap* %7 to i8*, !dbg !5469
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5469
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5469
  %10 = bitcast i8* %call3 to %struct.VEC_gimple_heap*, !dbg !5469
  %11 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5469
  store %struct.VEC_gimple_heap* %10, %struct.VEC_gimple_heap** %11, align 8, !dbg !5469
  br label %if.end, !dbg !5469

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5466
  ret i32 %12, !dbg !5466
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !5471 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5476
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !5477
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !5478
  %1 = load i32, i32* %nargs, align 4, !dbg !5478
  ret i32 %1, !dbg !5479
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5480 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5484, metadata !DIExpression()), !dbg !5485
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5486
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5487
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5487
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5488
  ret %union.tree_node* %2, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5490 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5495, metadata !DIExpression()), !dbg !5496
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5497
  %1 = load i32, i32* %i.addr, align 4, !dbg !5498
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !5499
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !5500
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !5501
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @mark_operand_necessary(%union.tree_node* %op) #0 !dbg !5502 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5505, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5507, metadata !DIExpression()), !dbg !5508
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5509
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5509
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5509

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5509
  br label %cond.end, !dbg !5509

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5509

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5509
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5510
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5510
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5510
  %bf.load = load i64, i64* %2, align 8, !dbg !5510
  %bf.clear = and i64 %bf.load, 65535, !dbg !5510
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5510
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5512
  br i1 %cmp, label %if.then, label %if.end, !dbg !5513

if.then:                                          ; preds = %cond.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5514
  br label %return, !dbg !5514

if.end:                                           ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5515
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !5515
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5515
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5515
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !5516
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5517
  %tobool1 = icmp ne %union.gimple_statement_d* %5, null, !dbg !5517
  br i1 %tobool1, label %cond.false3, label %cond.true2, !dbg !5517

cond.true2:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4452, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5517
  br label %cond.end4, !dbg !5517

cond.false3:                                      ; preds = %if.end
  br label %cond.end4, !dbg !5517

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !5517
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5518
  %call = call i32 @gimple_plf(%union.gimple_statement_d* %6, i32 1), !dbg !5520
  %tobool6 = icmp ne i32 %call, 0, !dbg !5520
  br i1 %tobool6, label %if.then9, label %lor.lhs.false, !dbg !5521

lor.lhs.false:                                    ; preds = %cond.end4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5522
  %call7 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %7), !dbg !5523
  %conv = zext i8 %call7 to i32, !dbg !5523
  %tobool8 = icmp ne i32 %conv, 0, !dbg !5523
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !5524

if.then9:                                         ; preds = %lor.lhs.false, %cond.end4
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5525
  br label %return, !dbg !5525

if.end10:                                         ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5526
  call void @gimple_set_plf(%union.gimple_statement_d* %8, i32 1, i8 zeroext 1), !dbg !5527
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5528
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %retval, align 8, !dbg !5529
  br label %return, !dbg !5529

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5530
  ret %union.gimple_statement_d* %10, !dbg !5530
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5531 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5535, metadata !DIExpression()), !dbg !5536
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5537, metadata !DIExpression()), !dbg !5538
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5539, metadata !DIExpression()), !dbg !5540
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5541
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5542
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5543
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !5544
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5545
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !5546
  store i32 1, i32* %iter_type, align 4, !dbg !5547
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5548
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !5549
  ret %union.tree_node* %call, !dbg !5550
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5551 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5556, metadata !DIExpression()), !dbg !5557
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5558
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !5559
  %1 = load i8, i8* %done, align 8, !dbg !5559
  ret i8 %1, !dbg !5560
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) #0 !dbg !5561 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  %obj_.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5564, metadata !DIExpression()), !dbg !5565
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %obj_.addr, metadata !5566, metadata !DIExpression()), !dbg !5565
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5565
  %call = call i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %0, i32 1), !dbg !5565
  %1 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5565
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %1, align 8, !dbg !5565
  %tobool = icmp ne %struct.VEC_gimple_heap* %2, null, !dbg !5565
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5565

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5565
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %3, align 8, !dbg !5565
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i32 0, i32 0, !dbg !5565
  br label %cond.end, !dbg !5565

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5565

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5565
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %obj_.addr, align 8, !dbg !5565
  %call1 = call %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %5), !dbg !5565
  ret %union.gimple_statement_d** %call1, !dbg !5565
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !5567 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5570, metadata !DIExpression()), !dbg !5571
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !5572, metadata !DIExpression()), !dbg !5573
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5574
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !5576
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5576
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !5574
  br i1 %tobool, label %if.then, label %if.end, !dbg !5577

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5578
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !5578
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !5578
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !5578
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !5578
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !5580
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5581
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !5582
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !5582
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !5583
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !5583
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5584
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !5585
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !5586
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5587
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !5588
  br label %return, !dbg !5588

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5589
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !5591
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !5591
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !5589
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !5592

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5593
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5593
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !5593
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !5593
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5593
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !5593
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !5595
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5596
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5597
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !5597
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !5598
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !5598
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5599
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !5600
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !5601
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5602
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !5603
  br label %return, !dbg !5603

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5604
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !5605
  store i8 1, i8* %done, align 8, !dbg !5606
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5607
  br label %return, !dbg !5607

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5608
  ret %union.tree_node* %20, !dbg !5608
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) #0 !dbg !5609 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_heap**, align 8
  store %struct.VEC_gimple_heap** %vec_, %struct.VEC_gimple_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap*** %vec_.addr, metadata !5612, metadata !DIExpression()), !dbg !5613
  %0 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5614
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %0, align 8, !dbg !5614
  %tobool = icmp ne %struct.VEC_gimple_heap* %1, null, !dbg !5614
  br i1 %tobool, label %if.then, label %if.end, !dbg !5613

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5614
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %2, align 8, !dbg !5614
  %4 = bitcast %struct.VEC_gimple_heap* %3 to i8*, !dbg !5614
  call void @free(i8* %4), !dbg !5614
  br label %if.end, !dbg !5614

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_gimple_heap**, %struct.VEC_gimple_heap*** %vec_.addr, align 8, !dbg !5613
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %5, align 8, !dbg !5613
  ret void, !dbg !5613
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) #0 !dbg !5616 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !5619, metadata !DIExpression()), !dbg !5620
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5621, metadata !DIExpression()), !dbg !5620
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5620
  %cmp = icmp sge i32 %0, 0, !dbg !5620
  %conv = zext i1 %cmp to i32, !dbg !5620
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5620
  %tobool = icmp ne %struct.VEC_gimple_base* %1, null, !dbg !5620
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5620

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5620
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 1, !dbg !5620
  %3 = load i32, i32* %alloc, align 4, !dbg !5620
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !5620
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 0, !dbg !5620
  %5 = load i32, i32* %num, align 8, !dbg !5620
  %sub = sub i32 %3, %5, !dbg !5620
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5620
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5620
  %conv2 = zext i1 %cmp1 to i32, !dbg !5620
  br label %cond.end, !dbg !5620

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5620
  %tobool3 = icmp ne i32 %7, 0, !dbg !5620
  %lnot = xor i1 %tobool3, true, !dbg !5620
  %lnot.ext = zext i1 %lnot to i32, !dbg !5620
  br label %cond.end, !dbg !5620

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5620
  ret i32 %cond, !dbg !5620
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5622 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5628, metadata !DIExpression()), !dbg !5629
  %0 = load i32, i32* %index.addr, align 4, !dbg !5630
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5630
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5630
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5630
  %2 = load i32, i32* %capacity, align 8, !dbg !5630
  %cmp = icmp ule i32 %0, %2, !dbg !5630
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5630

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5630
  br label %cond.end, !dbg !5630

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5630

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5630
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5631
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5632
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5633
  %4 = load i32, i32* %index.addr, align 4, !dbg !5634
  %idxprom = zext i32 %4 to i64, !dbg !5631
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5631
  ret %struct.phi_arg_d* %arrayidx, !dbg !5635
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) #0 !dbg !5636 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5641
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5642
  %cmp = icmp eq i32 %call, 18, !dbg !5643
  %conv = zext i1 %cmp to i32, !dbg !5643
  %conv1 = trunc i32 %conv to i8, !dbg !5642
  ret i8 %conv1, !dbg !5644
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_plf(%union.gimple_statement_d* %stmt, i32 %plf, i8 zeroext %val_p) #0 !dbg !5645 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %plf.addr = alloca i32, align 4
  %val_p.addr = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5648, metadata !DIExpression()), !dbg !5649
  store i32 %plf, i32* %plf.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %plf.addr, metadata !5650, metadata !DIExpression()), !dbg !5651
  store i8 %val_p, i8* %val_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %val_p.addr, metadata !5652, metadata !DIExpression()), !dbg !5653
  %0 = load i8, i8* %val_p.addr, align 1, !dbg !5654
  %tobool = icmp ne i8 %0, 0, !dbg !5654
  br i1 %tobool, label %if.then, label %if.else, !dbg !5656

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %plf.addr, align 4, !dbg !5657
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5658
  %gsbase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_base*, !dbg !5659
  %3 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5660
  %bf.load = load i32, i32* %3, align 8, !dbg !5661
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5661
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5661
  %or = or i32 %bf.clear, %1, !dbg !5661
  %bf.load1 = load i32, i32* %3, align 8, !dbg !5661
  %bf.value = and i32 %or, 3, !dbg !5661
  %bf.shl = shl i32 %bf.value, 11, !dbg !5661
  %bf.clear2 = and i32 %bf.load1, -6145, !dbg !5661
  %bf.set = or i32 %bf.clear2, %bf.shl, !dbg !5661
  store i32 %bf.set, i32* %3, align 8, !dbg !5661
  br label %if.end, !dbg !5658

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %plf.addr, align 4, !dbg !5662
  %neg = xor i32 %4, -1, !dbg !5663
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5664
  %gsbase3 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_base*, !dbg !5665
  %6 = bitcast %struct.gimple_statement_base* %gsbase3 to i32*, !dbg !5666
  %bf.load4 = load i32, i32* %6, align 8, !dbg !5667
  %bf.lshr5 = lshr i32 %bf.load4, 11, !dbg !5667
  %bf.clear6 = and i32 %bf.lshr5, 3, !dbg !5667
  %and = and i32 %bf.clear6, %neg, !dbg !5667
  %bf.load7 = load i32, i32* %6, align 8, !dbg !5667
  %bf.value8 = and i32 %and, 3, !dbg !5667
  %bf.shl9 = shl i32 %bf.value8, 11, !dbg !5667
  %bf.clear10 = and i32 %bf.load7, -6145, !dbg !5667
  %bf.set11 = or i32 %bf.clear10, %bf.shl9, !dbg !5667
  store i32 %bf.set11, i32* %6, align 8, !dbg !5667
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5668
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5669 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5672, metadata !DIExpression()), !dbg !5673
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5674, metadata !DIExpression()), !dbg !5675
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5676, metadata !DIExpression()), !dbg !5677
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5678
  %and = and i32 %0, 8, !dbg !5678
  %tobool = icmp ne i32 %and, 0, !dbg !5678
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !5678

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5678
  %and1 = and i32 %1, 2, !dbg !5678
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5678
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !5678

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5678
  %and3 = and i32 %2, 4, !dbg !5678
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5678
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !5678

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5678
  %and6 = and i32 %3, 1, !dbg !5678
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5678
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !5678

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5678
  br label %cond.end, !dbg !5678

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !5678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5678
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5679
  %and8 = and i32 %4, 10, !dbg !5680
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5680
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5681

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5682
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !5683
  br label %cond.end12, !dbg !5681

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5681

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !5681
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5684
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !5685
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !5686
  %7 = load i32, i32* %flags.addr, align 4, !dbg !5687
  %and14 = and i32 %7, 8, !dbg !5689
  %tobool15 = icmp ne i32 %and14, 0, !dbg !5689
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !5690

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5691
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !5692
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !5692
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !5691
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !5693

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5694
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !5695
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !5696
  br i1 %cmp, label %if.then, label %if.end, !dbg !5697

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5698
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5699
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !5699
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !5700
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !5700
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5701
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5702
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !5703
  br label %if.end, !dbg !5701

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !5704
  %and23 = and i32 %15, 5, !dbg !5705
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5705
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5706

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5707
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !5708
  br label %cond.end28, !dbg !5706

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5706

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5706
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5709
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !5710
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !5711
  %18 = load i32, i32* %flags.addr, align 4, !dbg !5712
  %and30 = and i32 %18, 4, !dbg !5714
  %tobool31 = icmp ne i32 %and30, 0, !dbg !5714
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !5715

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5716
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !5717
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !5717
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !5716
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !5718

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5719
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !5720
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !5721
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5722

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5723
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !5724
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !5724
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !5725
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !5725
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5726
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !5727
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !5728
  br label %if.end42, !dbg !5726

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5729
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !5730
  store i8 0, i8* %done, align 8, !dbg !5731
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5732
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !5733
  store i32 0, i32* %phi_i, align 8, !dbg !5734
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5735
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !5736
  store i32 0, i32* %num_phi, align 4, !dbg !5737
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5738
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !5739
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5740
  ret void, !dbg !5741
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !5742 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5745, metadata !DIExpression()), !dbg !5746
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5747
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5749
  %tobool = icmp ne i8 %call, 0, !dbg !5749
  br i1 %tobool, label %if.end, label %if.then, !dbg !5750

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !5751
  br label %return, !dbg !5751

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5752
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5753
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5754
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5755
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5755
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !5756
  br label %return, !dbg !5756

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !5757
  ret %struct.def_optype_d* %3, !dbg !5757
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5758 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5761, metadata !DIExpression()), !dbg !5762
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5763
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5765
  %tobool = icmp ne i8 %call, 0, !dbg !5765
  br i1 %tobool, label %if.end, label %if.then, !dbg !5766

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5767
  br label %return, !dbg !5767

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5768
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5769
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5770
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5770
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5771
  br label %return, !dbg !5771

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5772
  ret %union.tree_node* %3, !dbg !5772
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !5773 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5776, metadata !DIExpression()), !dbg !5777
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5778
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5780
  %tobool = icmp ne i8 %call, 0, !dbg !5780
  br i1 %tobool, label %if.end, label %if.then, !dbg !5781

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !5782
  br label %return, !dbg !5782

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5783
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5784
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5785
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5786
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5786
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !5787
  br label %return, !dbg !5787

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !5788
  ret %struct.use_optype_d* %3, !dbg !5788
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5789 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5790, metadata !DIExpression()), !dbg !5791
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5792
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5794
  %tobool = icmp ne i8 %call, 0, !dbg !5794
  br i1 %tobool, label %if.end, label %if.then, !dbg !5795

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5796
  br label %return, !dbg !5796

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5797
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5798
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5799
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !5799
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5800
  br label %return, !dbg !5800

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5801
  ret %union.tree_node* %3, !dbg !5801
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5802 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5803, metadata !DIExpression()), !dbg !5804
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5805
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5806
  %cmp = icmp uge i32 %call, 1, !dbg !5807
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5808

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5809
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5810
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5811
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5812
  %land.ext = zext i1 %2 to i32, !dbg !5808
  %conv = trunc i32 %land.ext to i8, !dbg !5806
  ret i8 %conv, !dbg !5813
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5814 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5815, metadata !DIExpression()), !dbg !5816
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5817
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5818
  %cmp = icmp uge i32 %call, 6, !dbg !5819
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5820

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5821
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5822
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5823
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5824
  %land.ext = zext i1 %2 to i32, !dbg !5820
  %conv = trunc i32 %land.ext to i8, !dbg !5818
  ret i8 %conv, !dbg !5825
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !5826 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !5832
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5833
  ret %union.tree_node* %1, !dbg !5834
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_bitmap_set_t_heap* @VEC_bitmap_set_t_heap_alloc(i32 %alloc_) #0 !dbg !5835 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5838, metadata !DIExpression()), !dbg !5839
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5839
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5839
  %1 = bitcast i8* %call to %struct.VEC_bitmap_set_t_heap*, !dbg !5839
  ret %struct.VEC_bitmap_set_t_heap* %1, !dbg !5839
}

declare dso_local i32 @get_max_value_id() #2

declare dso_local void @connect_infinite_loops_to_exit() #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @my_rev_post_order_compute(i32* %post_order, i8 zeroext %include_entry_exit) #0 !dbg !5840 {
entry:
  %post_order.addr = alloca i32*, align 8
  %include_entry_exit.addr = alloca i8, align 1
  %stack = alloca %struct.edge_iterator*, align 8
  %sp = alloca i32, align 4
  %post_order_num = alloca i32, align 4
  %visited = alloca %struct.simple_bitmap_def*, align 8
  %count = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %tmp36 = alloca %struct.edge_iterator, align 8
  store i32* %post_order, i32** %post_order.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %post_order.addr, metadata !5843, metadata !DIExpression()), !dbg !5844
  store i8 %include_entry_exit, i8* %include_entry_exit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %include_entry_exit.addr, metadata !5845, metadata !DIExpression()), !dbg !5846
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %stack, metadata !5847, metadata !DIExpression()), !dbg !5848
  call void @llvm.dbg.declare(metadata i32* %sp, metadata !5849, metadata !DIExpression()), !dbg !5850
  call void @llvm.dbg.declare(metadata i32* %post_order_num, metadata !5851, metadata !DIExpression()), !dbg !5852
  store i32 0, i32* %post_order_num, align 4, !dbg !5852
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited, metadata !5853, metadata !DIExpression()), !dbg !5854
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5855, metadata !DIExpression()), !dbg !5856
  %0 = load i8, i8* %include_entry_exit.addr, align 1, !dbg !5857
  %tobool = icmp ne i8 %0, 0, !dbg !5857
  br i1 %tobool, label %if.then, label %if.end, !dbg !5859

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %post_order.addr, align 8, !dbg !5860
  %2 = load i32, i32* %post_order_num, align 4, !dbg !5861
  %inc = add nsw i32 %2, 1, !dbg !5861
  store i32 %inc, i32* %post_order_num, align 4, !dbg !5861
  %idxprom = sext i32 %2 to i64, !dbg !5860
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !5860
  store i32 1, i32* %arrayidx, align 4, !dbg !5862
  br label %if.end, !dbg !5860

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5863
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5863
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5863
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5863
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !5863
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5863
  %add = add nsw i32 %5, 1, !dbg !5863
  %conv = sext i32 %add to i64, !dbg !5863
  %mul = mul i64 16, %conv, !dbg !5863
  %call = call i8* @xmalloc(i64 %mul), !dbg !5863
  %6 = bitcast i8* %call to %struct.edge_iterator*, !dbg !5863
  store %struct.edge_iterator* %6, %struct.edge_iterator** %stack, align 8, !dbg !5864
  store i32 0, i32* %sp, align 4, !dbg !5865
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5866
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5866
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5866
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5866
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !5866
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !5866
  %call3 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %9), !dbg !5867
  store %struct.simple_bitmap_def* %call3, %struct.simple_bitmap_def** %visited, align 8, !dbg !5868
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !5869
  call void @sbitmap_zero(%struct.simple_bitmap_def* %10), !dbg !5870
  %11 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5871
  %12 = load i32, i32* %sp, align 4, !dbg !5872
  %inc4 = add nsw i32 %12, 1, !dbg !5872
  store i32 %inc4, i32* %sp, align 4, !dbg !5872
  %idxprom5 = sext i32 %12 to i64, !dbg !5871
  %arrayidx6 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %11, i64 %idxprom5, !dbg !5871
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5873
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5873
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !5873
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !5873
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 1, !dbg !5873
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5873
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 0, !dbg !5873
  %call9 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5873
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5873
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !5873
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 0, !dbg !5873
  store i32 %18, i32* %17, align 8, !dbg !5873
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !5873
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 1, !dbg !5873
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !5873
  %21 = bitcast %struct.edge_iterator* %arrayidx6 to i8*, !dbg !5873
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5873
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !5873
  br label %while.cond, !dbg !5874

while.cond:                                       ; preds = %if.end68, %if.end
  %23 = load i32, i32* %sp, align 4, !dbg !5875
  %tobool10 = icmp ne i32 %23, 0, !dbg !5874
  br i1 %tobool10, label %while.body, label %while.end, !dbg !5874

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5876, metadata !DIExpression()), !dbg !5878
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !5879, metadata !DIExpression()), !dbg !5880
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !5881, metadata !DIExpression()), !dbg !5882
  %24 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5883
  %25 = load i32, i32* %sp, align 4, !dbg !5884
  %sub = sub nsw i32 %25, 1, !dbg !5885
  %idxprom11 = sext i32 %sub to i64, !dbg !5883
  %arrayidx12 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %24, i64 %idxprom11, !dbg !5883
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5883
  %27 = bitcast %struct.edge_iterator* %arrayidx12 to i8*, !dbg !5883
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !5883
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5886
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !5886
  %30 = load i32, i32* %29, align 8, !dbg !5886
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !5886
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !5886
  %call13 = call %struct.edge_def* @ei_edge(i32 %30, %struct.VEC_edge_gc** %32), !dbg !5886
  %src14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call13, i32 0, i32 0, !dbg !5887
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %src14, align 8, !dbg !5887
  store %struct.basic_block_def* %33, %struct.basic_block_def** %src, align 8, !dbg !5888
  %34 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5889
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !5889
  %36 = load i32, i32* %35, align 8, !dbg !5889
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !5889
  %38 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %37, align 8, !dbg !5889
  %call15 = call %struct.edge_def* @ei_edge(i32 %36, %struct.VEC_edge_gc** %38), !dbg !5889
  %dest16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call15, i32 0, i32 1, !dbg !5890
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest16, align 8, !dbg !5890
  store %struct.basic_block_def* %39, %struct.basic_block_def** %dest, align 8, !dbg !5891
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5892
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5894
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !5894
  %cfg18 = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 1, !dbg !5894
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg18, align 8, !dbg !5894
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 0, !dbg !5894
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5894
  %cmp = icmp ne %struct.basic_block_def* %40, %43, !dbg !5895
  br i1 %cmp, label %land.lhs.true, label %if.else44, !dbg !5896

land.lhs.true:                                    ; preds = %while.body
  %44 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !5897
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %44, i32 0, i32 3, !dbg !5897
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5897
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !5897
  %46 = load i32, i32* %index, align 8, !dbg !5897
  %div = udiv i32 %46, 64, !dbg !5897
  %idxprom20 = zext i32 %div to i64, !dbg !5897
  %arrayidx21 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom20, !dbg !5897
  %47 = load i64, i64* %arrayidx21, align 8, !dbg !5897
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5897
  %index22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !5897
  %49 = load i32, i32* %index22, align 8, !dbg !5897
  %rem = urem i32 %49, 64, !dbg !5897
  %sh_prom = zext i32 %rem to i64, !dbg !5897
  %shr = lshr i64 %47, %sh_prom, !dbg !5897
  %and = and i64 %shr, 1, !dbg !5897
  %tobool23 = icmp ne i64 %and, 0, !dbg !5897
  br i1 %tobool23, label %if.else44, label %if.then24, !dbg !5898

if.then24:                                        ; preds = %land.lhs.true
  %50 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !5899
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5901
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !5902
  %52 = load i32, i32* %index25, align 8, !dbg !5902
  call void @SET_BIT(%struct.simple_bitmap_def* %50, i32 %52), !dbg !5903
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5904
  %preds26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 0, !dbg !5904
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds26, align 8, !dbg !5904
  %tobool27 = icmp ne %struct.VEC_edge_gc* %54, null, !dbg !5904
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !5904

cond.true:                                        ; preds = %if.then24
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5904
  %preds28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 0, !dbg !5904
  %56 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds28, align 8, !dbg !5904
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %56, i32 0, i32 0, !dbg !5904
  br label %cond.end, !dbg !5904

cond.false:                                       ; preds = %if.then24
  br label %cond.end, !dbg !5904

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5904
  %call29 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5904
  %cmp30 = icmp ugt i32 %call29, 0, !dbg !5906
  br i1 %cmp30, label %if.then32, label %if.else, !dbg !5907

if.then32:                                        ; preds = %cond.end
  %57 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5908
  %58 = load i32, i32* %sp, align 4, !dbg !5909
  %inc33 = add nsw i32 %58, 1, !dbg !5909
  store i32 %inc33, i32* %sp, align 4, !dbg !5909
  %idxprom34 = sext i32 %58 to i64, !dbg !5908
  %arrayidx35 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %57, i64 %idxprom34, !dbg !5908
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5910
  %preds37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 0, !dbg !5910
  %call38 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds37), !dbg !5910
  %60 = bitcast %struct.edge_iterator* %tmp36 to { i32, %struct.VEC_edge_gc** }*, !dbg !5910
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 0, !dbg !5910
  %62 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 0, !dbg !5910
  store i32 %62, i32* %61, align 8, !dbg !5910
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 1, !dbg !5910
  %64 = extractvalue { i32, %struct.VEC_edge_gc** } %call38, 1, !dbg !5910
  store %struct.VEC_edge_gc** %64, %struct.VEC_edge_gc*** %63, align 8, !dbg !5910
  %65 = bitcast %struct.edge_iterator* %arrayidx35 to i8*, !dbg !5910
  %66 = bitcast %struct.edge_iterator* %tmp36 to i8*, !dbg !5910
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false), !dbg !5910
  br label %if.end43, !dbg !5908

if.else:                                          ; preds = %cond.end
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5911
  %index39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 9, !dbg !5912
  %68 = load i32, i32* %index39, align 8, !dbg !5912
  %69 = load i32*, i32** %post_order.addr, align 8, !dbg !5913
  %70 = load i32, i32* %post_order_num, align 4, !dbg !5914
  %inc40 = add nsw i32 %70, 1, !dbg !5914
  store i32 %inc40, i32* %post_order_num, align 4, !dbg !5914
  %idxprom41 = sext i32 %70 to i64, !dbg !5913
  %arrayidx42 = getelementptr inbounds i32, i32* %69, i64 %idxprom41, !dbg !5913
  store i32 %68, i32* %arrayidx42, align 4, !dbg !5915
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.then32
  br label %if.end68, !dbg !5916

if.else44:                                        ; preds = %land.lhs.true, %while.body
  %71 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5917
  %72 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %71, i32 0, i32 0, !dbg !5917
  %73 = load i32, i32* %72, align 8, !dbg !5917
  %74 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %71, i32 0, i32 1, !dbg !5917
  %75 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %74, align 8, !dbg !5917
  %call45 = call zeroext i8 @ei_one_before_end_p(i32 %73, %struct.VEC_edge_gc** %75), !dbg !5917
  %conv46 = zext i8 %call45 to i32, !dbg !5917
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !5917
  br i1 %tobool47, label %land.lhs.true48, label %if.end59, !dbg !5920

land.lhs.true48:                                  ; preds = %if.else44
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5921
  %77 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5922
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %77, i64 0, !dbg !5922
  %cfg50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 1, !dbg !5922
  %78 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg50, align 8, !dbg !5922
  %x_exit_block_ptr51 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %78, i32 0, i32 1, !dbg !5922
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr51, align 8, !dbg !5922
  %cmp52 = icmp ne %struct.basic_block_def* %76, %79, !dbg !5923
  br i1 %cmp52, label %if.then54, label %if.end59, !dbg !5924

if.then54:                                        ; preds = %land.lhs.true48
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5925
  %index55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 9, !dbg !5926
  %81 = load i32, i32* %index55, align 8, !dbg !5926
  %82 = load i32*, i32** %post_order.addr, align 8, !dbg !5927
  %83 = load i32, i32* %post_order_num, align 4, !dbg !5928
  %inc56 = add nsw i32 %83, 1, !dbg !5928
  store i32 %inc56, i32* %post_order_num, align 4, !dbg !5928
  %idxprom57 = sext i32 %83 to i64, !dbg !5927
  %arrayidx58 = getelementptr inbounds i32, i32* %82, i64 %idxprom57, !dbg !5927
  store i32 %81, i32* %arrayidx58, align 4, !dbg !5929
  br label %if.end59, !dbg !5927

if.end59:                                         ; preds = %if.then54, %land.lhs.true48, %if.else44
  %84 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5930
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 0, !dbg !5930
  %86 = load i32, i32* %85, align 8, !dbg !5930
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 1, !dbg !5930
  %88 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %87, align 8, !dbg !5930
  %call60 = call zeroext i8 @ei_one_before_end_p(i32 %86, %struct.VEC_edge_gc** %88), !dbg !5930
  %tobool61 = icmp ne i8 %call60, 0, !dbg !5930
  br i1 %tobool61, label %if.else66, label %if.then62, !dbg !5932

if.then62:                                        ; preds = %if.end59
  %89 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5933
  %90 = load i32, i32* %sp, align 4, !dbg !5934
  %sub63 = sub nsw i32 %90, 1, !dbg !5935
  %idxprom64 = sext i32 %sub63 to i64, !dbg !5933
  %arrayidx65 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %89, i64 %idxprom64, !dbg !5933
  call void @ei_next(%struct.edge_iterator* %arrayidx65), !dbg !5936
  br label %if.end67, !dbg !5936

if.else66:                                        ; preds = %if.end59
  %91 = load i32, i32* %sp, align 4, !dbg !5937
  %dec = add nsw i32 %91, -1, !dbg !5937
  store i32 %dec, i32* %sp, align 4, !dbg !5937
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.then62
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end43
  br label %while.cond, !dbg !5874, !llvm.loop !5938

while.end:                                        ; preds = %while.cond
  %92 = load i8, i8* %include_entry_exit.addr, align 1, !dbg !5940
  %tobool69 = icmp ne i8 %92, 0, !dbg !5940
  br i1 %tobool69, label %if.then70, label %if.else74, !dbg !5942

if.then70:                                        ; preds = %while.end
  %93 = load i32*, i32** %post_order.addr, align 8, !dbg !5943
  %94 = load i32, i32* %post_order_num, align 4, !dbg !5945
  %inc71 = add nsw i32 %94, 1, !dbg !5945
  store i32 %inc71, i32* %post_order_num, align 4, !dbg !5945
  %idxprom72 = sext i32 %94 to i64, !dbg !5943
  %arrayidx73 = getelementptr inbounds i32, i32* %93, i64 %idxprom72, !dbg !5943
  store i32 0, i32* %arrayidx73, align 4, !dbg !5946
  %95 = load i32, i32* %post_order_num, align 4, !dbg !5947
  store i32 %95, i32* %count, align 4, !dbg !5948
  br label %if.end76, !dbg !5949

if.else74:                                        ; preds = %while.end
  %96 = load i32, i32* %post_order_num, align 4, !dbg !5950
  %add75 = add nsw i32 %96, 2, !dbg !5951
  store i32 %add75, i32* %count, align 4, !dbg !5952
  br label %if.end76

if.end76:                                         ; preds = %if.else74, %if.then70
  %97 = load %struct.edge_iterator*, %struct.edge_iterator** %stack, align 8, !dbg !5953
  %98 = bitcast %struct.edge_iterator* %97 to i8*, !dbg !5953
  call void @free(i8* %98), !dbg !5954
  %99 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !5955
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %99, i32 0, i32 0, !dbg !5955
  %100 = load i8*, i8** %popcount, align 8, !dbg !5955
  call void @free(i8* %100), !dbg !5955
  %101 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !5955
  %102 = bitcast %struct.simple_bitmap_def* %101 to i8*, !dbg !5955
  call void @free(i8* %102), !dbg !5955
  %103 = load i32, i32* %post_order_num, align 4, !dbg !5956
  ret i32 %103, !dbg !5957
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @expr_pred_trans_hash(i8* %p) #0 !dbg !5958 {
entry:
  %p.addr = alloca i8*, align 8
  %ve = alloca %struct.expr_pred_trans_d*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  call void @llvm.dbg.declare(metadata %struct.expr_pred_trans_d** %ve, metadata !5961, metadata !DIExpression()), !dbg !5963
  %0 = load i8*, i8** %p.addr, align 8, !dbg !5964
  %1 = bitcast i8* %0 to %struct.expr_pred_trans_d*, !dbg !5965
  store %struct.expr_pred_trans_d* %1, %struct.expr_pred_trans_d** %ve, align 8, !dbg !5963
  %2 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %ve, align 8, !dbg !5966
  %hashcode = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %2, i32 0, i32 3, !dbg !5967
  %3 = load i32, i32* %hashcode, align 8, !dbg !5967
  ret i32 %3, !dbg !5968
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @expr_pred_trans_eq(i8* %p1, i8* %p2) #0 !dbg !5969 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %ve1 = alloca %struct.expr_pred_trans_d*, align 8
  %ve2 = alloca %struct.expr_pred_trans_d*, align 8
  %b1 = alloca %struct.basic_block_def*, align 8
  %b2 = alloca %struct.basic_block_def*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !5970, metadata !DIExpression()), !dbg !5971
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  call void @llvm.dbg.declare(metadata %struct.expr_pred_trans_d** %ve1, metadata !5974, metadata !DIExpression()), !dbg !5975
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !5976
  %1 = bitcast i8* %0 to %struct.expr_pred_trans_d*, !dbg !5977
  store %struct.expr_pred_trans_d* %1, %struct.expr_pred_trans_d** %ve1, align 8, !dbg !5975
  call void @llvm.dbg.declare(metadata %struct.expr_pred_trans_d** %ve2, metadata !5978, metadata !DIExpression()), !dbg !5979
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !5980
  %3 = bitcast i8* %2 to %struct.expr_pred_trans_d*, !dbg !5981
  store %struct.expr_pred_trans_d* %3, %struct.expr_pred_trans_d** %ve2, align 8, !dbg !5979
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b1, metadata !5982, metadata !DIExpression()), !dbg !5983
  %4 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %ve1, align 8, !dbg !5984
  %pred = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %4, i32 0, i32 1, !dbg !5985
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !5985
  store %struct.basic_block_def* %5, %struct.basic_block_def** %b1, align 8, !dbg !5983
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b2, metadata !5986, metadata !DIExpression()), !dbg !5987
  %6 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %ve2, align 8, !dbg !5988
  %pred1 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %6, i32 0, i32 1, !dbg !5989
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %pred1, align 8, !dbg !5989
  store %struct.basic_block_def* %7, %struct.basic_block_def** %b2, align 8, !dbg !5987
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b1, align 8, !dbg !5990
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %b2, align 8, !dbg !5992
  %cmp = icmp ne %struct.basic_block_def* %8, %9, !dbg !5993
  br i1 %cmp, label %if.then, label %if.end, !dbg !5994

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5995
  br label %return, !dbg !5995

if.end:                                           ; preds = %entry
  %10 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %ve1, align 8, !dbg !5996
  %e = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %10, i32 0, i32 0, !dbg !5997
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !5997
  %12 = bitcast %struct.pre_expr_d* %11 to i8*, !dbg !5996
  %13 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %ve2, align 8, !dbg !5998
  %e2 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %13, i32 0, i32 0, !dbg !5999
  %14 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !5999
  %15 = bitcast %struct.pre_expr_d* %14 to i8*, !dbg !5998
  %call = call i32 @pre_expr_eq(i8* %12, i8* %15), !dbg !6000
  store i32 %call, i32* %retval, align 4, !dbg !6001
  br label %return, !dbg !6001

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6002
  ret i32 %16, !dbg !6002
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_expr_hash(i8* %p1) #0 !dbg !6003 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %e = alloca %struct.pre_expr_d*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6004, metadata !DIExpression()), !dbg !6005
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e, metadata !6006, metadata !DIExpression()), !dbg !6007
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6008
  %1 = bitcast i8* %0 to %struct.pre_expr_d*, !dbg !6009
  store %struct.pre_expr_d* %1, %struct.pre_expr_d** %e, align 8, !dbg !6007
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6010
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %2, i32 0, i32 0, !dbg !6011
  %3 = load i32, i32* %kind, align 8, !dbg !6011
  switch i32 %3, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb1
    i32 1, label %sw.bb3
    i32 2, label %sw.bb5
  ], !dbg !6012

sw.bb:                                            ; preds = %entry
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6013
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %4, i32 0, i32 2, !dbg !6013
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !6013
  %5 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !6013
  %call = call i32 @vn_hash_constant_with_type(%union.tree_node* %5), !dbg !6015
  store i32 %call, i32* %retval, align 4, !dbg !6016
  br label %return, !dbg !6016

sw.bb1:                                           ; preds = %entry
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6017
  %u2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %6, i32 0, i32 2, !dbg !6017
  %name = bitcast %union.pre_expr_union_d* %u2 to %union.tree_node**, !dbg !6017
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6017
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !6017
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6017
  %8 = load i32, i32* %version, align 8, !dbg !6017
  store i32 %8, i32* %retval, align 4, !dbg !6018
  br label %return, !dbg !6018

sw.bb3:                                           ; preds = %entry
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6019
  %u4 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %9, i32 0, i32 2, !dbg !6019
  %nary = bitcast %union.pre_expr_union_d* %u4 to %struct.vn_nary_op_s**, !dbg !6019
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !6019
  %hashcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %10, i32 0, i32 2, !dbg !6020
  %11 = load i32, i32* %hashcode, align 8, !dbg !6020
  store i32 %11, i32* %retval, align 4, !dbg !6021
  br label %return, !dbg !6021

sw.bb5:                                           ; preds = %entry
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6022
  %u6 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %12, i32 0, i32 2, !dbg !6022
  %reference = bitcast %union.pre_expr_union_d* %u6 to %struct.vn_reference_s**, !dbg !6022
  %13 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !6022
  %hashcode7 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %13, i32 0, i32 1, !dbg !6023
  %14 = load i32, i32* %hashcode7, align 4, !dbg !6023
  store i32 %14, i32* %retval, align 4, !dbg !6024
  br label %return, !dbg !6024

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 229, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6025
  br label %sw.epilog, !dbg !6026

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %retval, align 4, !dbg !6027
  br label %return, !dbg !6027

return:                                           ; preds = %sw.epilog, %sw.bb5, %sw.bb3, %sw.bb1, %sw.bb
  %15 = load i32, i32* %retval, align 4, !dbg !6028
  ret i32 %15, !dbg !6028
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pre_expr_eq(i8* %p1, i8* %p2) #0 !dbg !6029 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %e1 = alloca %struct.pre_expr_d*, align 8
  %e2 = alloca %struct.pre_expr_d*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e1, metadata !6034, metadata !DIExpression()), !dbg !6035
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6036
  %1 = bitcast i8* %0 to %struct.pre_expr_d*, !dbg !6037
  store %struct.pre_expr_d* %1, %struct.pre_expr_d** %e1, align 8, !dbg !6035
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e2, metadata !6038, metadata !DIExpression()), !dbg !6039
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !6040
  %3 = bitcast i8* %2 to %struct.pre_expr_d*, !dbg !6041
  store %struct.pre_expr_d* %3, %struct.pre_expr_d** %e2, align 8, !dbg !6039
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6042
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %4, i32 0, i32 0, !dbg !6044
  %5 = load i32, i32* %kind, align 8, !dbg !6044
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !6045
  %kind1 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %6, i32 0, i32 0, !dbg !6046
  %7 = load i32, i32* %kind1, align 8, !dbg !6046
  %cmp = icmp ne i32 %5, %7, !dbg !6047
  br i1 %cmp, label %if.then, label %if.end, !dbg !6048

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6049
  br label %return, !dbg !6049

if.end:                                           ; preds = %entry
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6050
  %kind2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %8, i32 0, i32 0, !dbg !6051
  %9 = load i32, i32* %kind2, align 8, !dbg !6051
  switch i32 %9, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb5
    i32 1, label %sw.bb11
    i32 2, label %sw.bb16
  ], !dbg !6052

sw.bb:                                            ; preds = %if.end
  %10 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6053
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %10, i32 0, i32 2, !dbg !6053
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !6053
  %11 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !6053
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !6055
  %u3 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %12, i32 0, i32 2, !dbg !6055
  %constant4 = bitcast %union.pre_expr_union_d* %u3 to %union.tree_node**, !dbg !6055
  %13 = load %union.tree_node*, %union.tree_node** %constant4, align 8, !dbg !6055
  %call = call zeroext i8 @vn_constant_eq_with_type(%union.tree_node* %11, %union.tree_node* %13), !dbg !6056
  %conv = zext i8 %call to i32, !dbg !6056
  store i32 %conv, i32* %retval, align 4, !dbg !6057
  br label %return, !dbg !6057

sw.bb5:                                           ; preds = %if.end
  %14 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6058
  %u6 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %14, i32 0, i32 2, !dbg !6058
  %name = bitcast %union.pre_expr_union_d* %u6 to %union.tree_node**, !dbg !6058
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6058
  %16 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !6059
  %u7 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %16, i32 0, i32 2, !dbg !6059
  %name8 = bitcast %union.pre_expr_union_d* %u7 to %union.tree_node**, !dbg !6059
  %17 = load %union.tree_node*, %union.tree_node** %name8, align 8, !dbg !6059
  %cmp9 = icmp eq %union.tree_node* %15, %17, !dbg !6060
  %conv10 = zext i1 %cmp9 to i32, !dbg !6060
  store i32 %conv10, i32* %retval, align 4, !dbg !6061
  br label %return, !dbg !6061

sw.bb11:                                          ; preds = %if.end
  %18 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6062
  %u12 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %18, i32 0, i32 2, !dbg !6062
  %nary = bitcast %union.pre_expr_union_d* %u12 to %struct.vn_nary_op_s**, !dbg !6062
  %19 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !6062
  %20 = bitcast %struct.vn_nary_op_s* %19 to i8*, !dbg !6062
  %21 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !6063
  %u13 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %21, i32 0, i32 2, !dbg !6063
  %nary14 = bitcast %union.pre_expr_union_d* %u13 to %struct.vn_nary_op_s**, !dbg !6063
  %22 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary14, align 8, !dbg !6063
  %23 = bitcast %struct.vn_nary_op_s* %22 to i8*, !dbg !6063
  %call15 = call i32 @vn_nary_op_eq(i8* %20, i8* %23), !dbg !6064
  store i32 %call15, i32* %retval, align 4, !dbg !6065
  br label %return, !dbg !6065

sw.bb16:                                          ; preds = %if.end
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e1, align 8, !dbg !6066
  %u17 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %24, i32 0, i32 2, !dbg !6066
  %reference = bitcast %union.pre_expr_union_d* %u17 to %struct.vn_reference_s**, !dbg !6066
  %25 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !6066
  %26 = bitcast %struct.vn_reference_s* %25 to i8*, !dbg !6066
  %27 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e2, align 8, !dbg !6067
  %u18 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %27, i32 0, i32 2, !dbg !6067
  %reference19 = bitcast %union.pre_expr_union_d* %u18 to %struct.vn_reference_s**, !dbg !6067
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference19, align 8, !dbg !6067
  %29 = bitcast %struct.vn_reference_s* %28 to i8*, !dbg !6067
  %call20 = call i32 @vn_reference_eq(i8* %26, i8* %29), !dbg !6068
  store i32 %call20, i32* %retval, align 4, !dbg !6069
  br label %return, !dbg !6069

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6070
  br label %sw.epilog, !dbg !6071

sw.epilog:                                        ; preds = %sw.default
  store i32 0, i32* %retval, align 4, !dbg !6072
  br label %return, !dbg !6072

return:                                           ; preds = %sw.epilog, %sw.bb16, %sw.bb11, %sw.bb5, %sw.bb, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !6073
  ret i32 %30, !dbg !6073
}

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6074 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6077, metadata !DIExpression()), !dbg !6078
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6079, metadata !DIExpression()), !dbg !6080
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6081
  store i32 0, i32* %index, align 8, !dbg !6082
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6083
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6084
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6085
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6086
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6086
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6086
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6087 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6090, metadata !DIExpression()), !dbg !6091
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6092
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6092
  %5 = load i32, i32* %4, align 8, !dbg !6092
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6092
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6092
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6092
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6092
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6092

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6092
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6092
  %10 = load i32, i32* %9, align 8, !dbg !6092
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6092
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6092
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6092
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6092
  br label %cond.end, !dbg !6092

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6092

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6092
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6092
  %13 = load i32, i32* %index, align 8, !dbg !6092
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6092
  ret %struct.edge_def* %call2, !dbg !6093
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6094 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6097, metadata !DIExpression()), !dbg !6098
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6099, metadata !DIExpression()), !dbg !6100
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6101
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6103
  %1 = load i8*, i8** %popcount, align 8, !dbg !6103
  %tobool = icmp ne i8* %1, null, !dbg !6101
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6104

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6105, metadata !DIExpression()), !dbg !6107
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6108
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6108
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6108
  %div = udiv i32 %3, 64, !dbg !6108
  %idxprom = zext i32 %div to i64, !dbg !6108
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6108
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6108
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6108
  %rem = urem i32 %5, 64, !dbg !6108
  %sh_prom = zext i32 %rem to i64, !dbg !6108
  %shr = lshr i64 %4, %sh_prom, !dbg !6108
  %and = and i64 %shr, 1, !dbg !6108
  %conv = trunc i64 %and to i8, !dbg !6108
  store i8 %conv, i8* %oldbit, align 1, !dbg !6109
  %6 = load i8, i8* %oldbit, align 1, !dbg !6110
  %tobool1 = icmp ne i8 %6, 0, !dbg !6110
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6112

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6113
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6114
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6114
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6115
  %div4 = udiv i32 %9, 64, !dbg !6116
  %idxprom5 = zext i32 %div4 to i64, !dbg !6113
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6113
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6117
  %inc = add i8 %10, 1, !dbg !6117
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !6117
  br label %if.end, !dbg !6113

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6118

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6119
  %rem8 = urem i32 %11, 64, !dbg !6120
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6121
  %shl = shl i64 1, %sh_prom9, !dbg !6121
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6122
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6123
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6124
  %div11 = udiv i32 %13, 64, !dbg !6125
  %idxprom12 = zext i32 %div11 to i64, !dbg !6122
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6122
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6126
  %or = or i64 %14, %shl, !dbg !6126
  store i64 %or, i64* %arrayidx13, align 8, !dbg !6126
  ret void, !dbg !6127
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6128 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6133, metadata !DIExpression()), !dbg !6134
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6134
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6134

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6134
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6134
  %2 = load i32, i32* %num, align 8, !dbg !6134
  br label %cond.end, !dbg !6134

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6134
  ret i32 %cond, !dbg !6134
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_one_before_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6135 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6138, metadata !DIExpression()), !dbg !6139
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6140
  %3 = load i32, i32* %index, align 8, !dbg !6140
  %add = add i32 %3, 1, !dbg !6141
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6142
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6142
  %6 = load i32, i32* %5, align 8, !dbg !6142
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6142
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6142
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6142
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6142
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6142

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6142
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6142
  %11 = load i32, i32* %10, align 8, !dbg !6142
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6142
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6142
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6142
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6142
  br label %cond.end, !dbg !6142

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6142
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6142
  %cmp = icmp eq i32 %add, %call2, !dbg !6143
  %conv = zext i1 %cmp to i32, !dbg !6143
  %conv3 = trunc i32 %conv to i8, !dbg !6144
  ret i8 %conv3, !dbg !6145
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6146 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6149, metadata !DIExpression()), !dbg !6150
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6151
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6151
  %1 = load i32, i32* %index, align 8, !dbg !6151
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6151
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6151
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6151
  %5 = load i32, i32* %4, align 8, !dbg !6151
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6151
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6151
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6151
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6151
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6151

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6151
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6151
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6151
  %11 = load i32, i32* %10, align 8, !dbg !6151
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6151
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6151
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6151
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6151
  br label %cond.end, !dbg !6151

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6151

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6151
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6151
  %cmp = icmp ult i32 %1, %call2, !dbg !6151
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6151

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6151
  br label %cond.end5, !dbg !6151

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6151

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6151
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6152
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6153
  %15 = load i32, i32* %index7, align 8, !dbg !6154
  %inc = add i32 %15, 1, !dbg !6154
  store i32 %inc, i32* %index7, align 8, !dbg !6154
  ret void, !dbg !6155
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6156 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6159, metadata !DIExpression()), !dbg !6160
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6161, metadata !DIExpression()), !dbg !6160
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6160
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6160
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6160

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6160
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6160
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6160
  %3 = load i32, i32* %num, align 8, !dbg !6160
  %cmp = icmp ult i32 %1, %3, !dbg !6160
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6162
  %land.ext = zext i1 %4 to i32, !dbg !6160
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6160
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6160
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6160
  %idxprom = zext i32 %6 to i64, !dbg !6160
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6160
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6160
  ret %struct.edge_def* %7, !dbg !6160
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6163 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6166, metadata !DIExpression()), !dbg !6167
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6168
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6168
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6168
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6168

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6168
  br label %cond.end, !dbg !6168

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6168
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6169
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6169
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6170
  ret %struct.VEC_edge_gc* %5, !dbg !6171
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @vn_hash_constant_with_type(%union.tree_node* %constant) #0 !dbg !6172 {
entry:
  %constant.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.tree_node* %constant, %union.tree_node** %constant.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6177, metadata !DIExpression()), !dbg !6178
  %0 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !6179
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6179
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6179
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6179
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6178
  %2 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !6180
  %call = call i32 @iterative_hash_expr(%union.tree_node* %2, i32 0), !dbg !6181
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6182
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6182
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6182
  %bf.load = load i64, i64* %4, align 8, !dbg !6182
  %bf.clear = and i64 %bf.load, 65535, !dbg !6182
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6182
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !6182
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6182

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6182
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6182
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6182
  %bf.load3 = load i64, i64* %6, align 8, !dbg !6182
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6182
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6182
  %cmp6 = icmp eq i32 %bf.cast5, 7, !dbg !6182
  br i1 %cmp6, label %lor.end, label %lor.rhs, !dbg !6182

lor.rhs:                                          ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6182
  %base7 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6182
  %8 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6182
  %bf.load8 = load i64, i64* %8, align 8, !dbg !6182
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6182
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6182
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !6182
  br label %lor.end, !dbg !6182

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp11, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !6182
  %add = add i32 %call, %lor.ext, !dbg !6183
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6184
  %base12 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6184
  %11 = bitcast %struct.tree_base* %base12 to i64*, !dbg !6184
  %bf.load13 = load i64, i64* %11, align 8, !dbg !6184
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !6184
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !6184
  %cmp16 = icmp eq i32 %bf.cast15, 6, !dbg !6184
  br i1 %cmp16, label %cond.true, label %lor.lhs.false17, !dbg !6184

lor.lhs.false17:                                  ; preds = %lor.end
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6184
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6184
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6184
  %bf.load19 = load i64, i64* %13, align 8, !dbg !6184
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6184
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6184
  %cmp22 = icmp eq i32 %bf.cast21, 7, !dbg !6184
  br i1 %cmp22, label %cond.true, label %lor.lhs.false23, !dbg !6184

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6184
  %base24 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6184
  %15 = bitcast %struct.tree_base* %base24 to i64*, !dbg !6184
  %bf.load25 = load i64, i64* %15, align 8, !dbg !6184
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6184
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !6184
  %cmp28 = icmp eq i32 %bf.cast27, 8, !dbg !6184
  br i1 %cmp28, label %cond.true, label %cond.false, !dbg !6184

cond.true:                                        ; preds = %lor.lhs.false23, %lor.lhs.false17, %lor.end
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6185
  %type29 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !6185
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !6185
  %bf.load30 = load i32, i32* %precision, align 4, !dbg !6185
  %bf.clear31 = and i32 %bf.load30, 1023, !dbg !6185
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6186
  %base32 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6186
  %18 = bitcast %struct.tree_base* %base32 to i64*, !dbg !6186
  %bf.load33 = load i64, i64* %18, align 8, !dbg !6186
  %bf.lshr = lshr i64 %bf.load33, 21, !dbg !6186
  %bf.clear34 = and i64 %bf.lshr, 1, !dbg !6186
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !6186
  %add36 = add nsw i32 %bf.clear31, %bf.cast35, !dbg !6187
  br label %cond.end, !dbg !6184

cond.false:                                       ; preds = %lor.lhs.false23
  br label %cond.end, !dbg !6184

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add36, %cond.true ], [ 0, %cond.false ], !dbg !6184
  %add37 = add i32 %add, %cond, !dbg !6188
  ret i32 %add37, !dbg !6189
}

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vn_constant_eq_with_type(%union.tree_node* %c1, %union.tree_node* %c2) #0 !dbg !6190 {
entry:
  %c1.addr = alloca %union.tree_node*, align 8
  %c2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %c1, %union.tree_node** %c1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1.addr, metadata !6193, metadata !DIExpression()), !dbg !6194
  store %union.tree_node* %c2, %union.tree_node** %c2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c2.addr, metadata !6195, metadata !DIExpression()), !dbg !6196
  %0 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !6197
  %1 = load %union.tree_node*, %union.tree_node** %c2.addr, align 8, !dbg !6198
  %call = call zeroext i8 @expressions_equal_p(%union.tree_node* %0, %union.tree_node* %1), !dbg !6199
  %conv = zext i8 %call to i32, !dbg !6199
  %tobool = icmp ne i32 %conv, 0, !dbg !6199
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6200

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !6201
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6201
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6201
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6201
  %4 = load %union.tree_node*, %union.tree_node** %c2.addr, align 8, !dbg !6202
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !6202
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !6202
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6202
  %call3 = call zeroext i8 @types_compatible_p(%union.tree_node* %3, %union.tree_node* %5), !dbg !6203
  %conv4 = zext i8 %call3 to i32, !dbg !6203
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !6200
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %tobool5, %land.rhs ], !dbg !6204
  %land.ext = zext i1 %6 to i32, !dbg !6200
  %conv6 = trunc i32 %land.ext to i8, !dbg !6205
  ret i8 %conv6, !dbg !6206
}

declare dso_local i32 @vn_nary_op_eq(i8*, i8*) #2

declare dso_local i32 @vn_reference_eq(i8*, i8*) #2

declare dso_local zeroext i8 @expressions_equal_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6207 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6210, metadata !DIExpression()), !dbg !6211
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6212, metadata !DIExpression()), !dbg !6211
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6211
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6211
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6211

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6211
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6211
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6211
  %3 = load i32, i32* %num, align 8, !dbg !6211
  %cmp = icmp ult i32 %1, %3, !dbg !6211
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6213
  %land.ext = zext i1 %4 to i32, !dbg !6211
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6211
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6211
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6211
  %idxprom = zext i32 %6 to i64, !dbg !6211
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6211
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6211
  ret %union.tree_node* %7, !dbg !6211
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !6214 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6220, metadata !DIExpression()), !dbg !6221
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6222, metadata !DIExpression()), !dbg !6226
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6227
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6227
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6227
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6226
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6228
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6230
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6231
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6231
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6232
  br i1 %cmp, label %if.then, label %if.end, !dbg !6233

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6234
  br label %return, !dbg !6234

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6235
  %tobool = icmp ne i32 %4, 0, !dbg !6235
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !6237

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6238
  br label %return, !dbg !6238

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6239
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !6240
  store i8 %call, i8* %retval, align 1, !dbg !6241
  br label %return, !dbg !6241

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !6242
  ret i8 %6, !dbg !6242
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %name) #0 !dbg !6243 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %expr = alloca %struct.pre_expr_d, align 8
  %result = alloca %struct.pre_expr_d*, align 8
  %result_id = alloca i32, align 4
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6246, metadata !DIExpression()), !dbg !6247
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %expr, metadata !6248, metadata !DIExpression()), !dbg !6249
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result, metadata !6250, metadata !DIExpression()), !dbg !6251
  call void @llvm.dbg.declare(metadata i32* %result_id, metadata !6252, metadata !DIExpression()), !dbg !6253
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %expr, i32 0, i32 0, !dbg !6254
  store i32 0, i32* %kind, align 8, !dbg !6255
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %expr, i32 0, i32 1, !dbg !6256
  store i32 0, i32* %id, align 4, !dbg !6257
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6258
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %expr, i32 0, i32 2, !dbg !6259
  %name1 = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !6259
  store %union.tree_node* %0, %union.tree_node** %name1, align 8, !dbg !6260
  %call = call i32 @lookup_expression_id(%struct.pre_expr_d* %expr), !dbg !6261
  store i32 %call, i32* %result_id, align 4, !dbg !6262
  %1 = load i32, i32* %result_id, align 4, !dbg !6263
  %cmp = icmp ne i32 %1, 0, !dbg !6265
  br i1 %cmp, label %if.then, label %if.end, !dbg !6266

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %result_id, align 4, !dbg !6267
  %call2 = call %struct.pre_expr_d* @expression_for_id(i32 %2), !dbg !6268
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %retval, align 8, !dbg !6269
  br label %return, !dbg !6269

if.end:                                           ; preds = %entry
  %3 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !6270
  %call3 = call i8* @pool_alloc(%struct.alloc_pool_def* %3), !dbg !6271
  %4 = bitcast i8* %call3 to %struct.pre_expr_d*, !dbg !6272
  store %struct.pre_expr_d* %4, %struct.pre_expr_d** %result, align 8, !dbg !6273
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !6274
  %kind4 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 0, !dbg !6275
  store i32 0, i32* %kind4, align 8, !dbg !6276
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6277
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !6278
  %u5 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 2, !dbg !6278
  %name6 = bitcast %union.pre_expr_union_d* %u5 to %union.tree_node**, !dbg !6278
  store %union.tree_node* %6, %union.tree_node** %name6, align 8, !dbg !6279
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !6280
  %call7 = call i32 @alloc_expression_id(%struct.pre_expr_d* %8), !dbg !6281
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !6282
  store %struct.pre_expr_d* %9, %struct.pre_expr_d** %retval, align 8, !dbg !6283
  br label %return, !dbg !6283

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !6284
  ret %struct.pre_expr_d* %10, !dbg !6284
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_insert_into_set(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr) #0 !dbg !6285 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !6288, metadata !DIExpression()), !dbg !6289
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !6290, metadata !DIExpression()), !dbg !6291
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !6292
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !6293
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !6294
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %2), !dbg !6295
  call void @bitmap_insert_into_set_1(%struct.bitmap_set* %0, %struct.pre_expr_d* %1, i32 %call, i8 zeroext 0), !dbg !6296
  ret void, !dbg !6297
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_value_insert_into_set(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr) #0 !dbg !6298 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %val = alloca i32, align 4
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !6301, metadata !DIExpression()), !dbg !6302
  call void @llvm.dbg.declare(metadata i32* %val, metadata !6303, metadata !DIExpression()), !dbg !6304
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !6305
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %0), !dbg !6306
  store i32 %call, i32* %val, align 4, !dbg !6304
  %1 = load i32, i32* %val, align 4, !dbg !6307
  %call1 = call zeroext i8 @value_id_constant_p(i32 %1), !dbg !6309
  %tobool = icmp ne i8 %call1, 0, !dbg !6309
  br i1 %tobool, label %if.then, label %if.end, !dbg !6310

if.then:                                          ; preds = %entry
  br label %if.end6, !dbg !6311

if.end:                                           ; preds = %entry
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !6312
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !6314
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !6314
  %4 = load i32, i32* %val, align 4, !dbg !6315
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %4), !dbg !6316
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6316
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !6317

if.then4:                                         ; preds = %if.end
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !6318
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %5, i32 0, i32 0, !dbg !6319
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !6319
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !6320
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 1, !dbg !6321
  %8 = load i32, i32* %id, align 4, !dbg !6321
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %6, i32 %8), !dbg !6322
  br label %if.end6, !dbg !6322

if.end6:                                          ; preds = %if.then, %if.then4, %if.end
  ret void, !dbg !6323
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_set_copy(%struct.bitmap_set* %dest, %struct.bitmap_set* %orig) #0 !dbg !6324 {
entry:
  %dest.addr = alloca %struct.bitmap_set*, align 8
  %orig.addr = alloca %struct.bitmap_set*, align 8
  store %struct.bitmap_set* %dest, %struct.bitmap_set** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %dest.addr, metadata !6327, metadata !DIExpression()), !dbg !6328
  store %struct.bitmap_set* %orig, %struct.bitmap_set** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %orig.addr, metadata !6329, metadata !DIExpression()), !dbg !6330
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !6331
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 0, !dbg !6332
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !6332
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %orig.addr, align 8, !dbg !6333
  %expressions1 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 0, !dbg !6334
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions1, align 8, !dbg !6334
  call void @bitmap_copy(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* %3), !dbg !6335
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !6336
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 1, !dbg !6337
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !6337
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %orig.addr, align 8, !dbg !6338
  %values2 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %6, i32 0, i32 1, !dbg !6339
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values2, align 8, !dbg !6339
  call void @bitmap_copy(%struct.bitmap_head_def* %5, %struct.bitmap_head_def* %7), !dbg !6340
  ret void, !dbg !6341
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6342 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6345, metadata !DIExpression()), !dbg !6346
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6347
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6347
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6348
  %conv = zext i1 %cmp to i32, !dbg !6348
  %conv1 = trunc i32 %conv to i8, !dbg !6349
  ret i8 %conv1, !dbg !6350
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_values_for_phi(%union.gimple_statement_d* %phi, %struct.basic_block_def* %block) #0 !dbg !6351 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %result = alloca %union.tree_node*, align 8
  %e = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6354, metadata !DIExpression()), !dbg !6355
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !6358, metadata !DIExpression()), !dbg !6359
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6360
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6361
  store %union.tree_node* %call, %union.tree_node** %result, align 8, !dbg !6359
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6362
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %1), !dbg !6364
  %tobool = icmp ne i8 %call1, 0, !dbg !6364
  br i1 %tobool, label %if.then, label %if.end15, !dbg !6365

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e, metadata !6366, metadata !DIExpression()), !dbg !6368
  %2 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6369
  %call2 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %2), !dbg !6370
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %e, align 8, !dbg !6368
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6371
  %call3 = call i32 @get_expr_value_id(%struct.pre_expr_d* %3), !dbg !6372
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6373
  call void @add_to_value(i32 %call3, %struct.pre_expr_d* %4), !dbg !6374
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6375
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 2, !dbg !6375
  %6 = load i8*, i8** %aux, align 8, !dbg !6375
  %7 = bitcast i8* %6 to %struct.bb_bitmap_sets*, !dbg !6375
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %7, i32 0, i32 1, !dbg !6375
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !6375
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6376
  call void @bitmap_insert_into_set(%struct.bitmap_set* %8, %struct.pre_expr_d* %9), !dbg !6377
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6378
  %aux4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 2, !dbg !6378
  %11 = load i8*, i8** %aux4, align 8, !dbg !6378
  %12 = bitcast i8* %11 to %struct.bb_bitmap_sets*, !dbg !6378
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %12, i32 0, i32 3, !dbg !6378
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !6378
  %14 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6379
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %13, %struct.pre_expr_d* %14), !dbg !6380
  %15 = load i8, i8* @in_fre, align 1, !dbg !6381
  %tobool5 = icmp ne i8 %15, 0, !dbg !6381
  br i1 %tobool5, label %if.end14, label %if.then6, !dbg !6383

if.then6:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6384, metadata !DIExpression()), !dbg !6386
  store i32 0, i32* %i, align 4, !dbg !6387
  br label %for.cond, !dbg !6389

for.cond:                                         ; preds = %for.inc, %if.then6
  %16 = load i32, i32* %i, align 4, !dbg !6390
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6392
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %17), !dbg !6393
  %cmp = icmp ult i32 %16, %call7, !dbg !6394
  br i1 %cmp, label %for.body, label %for.end, !dbg !6395

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6396, metadata !DIExpression()), !dbg !6398
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6399
  %19 = load i32, i32* %i, align 4, !dbg !6400
  %conv = zext i32 %19 to i64, !dbg !6400
  %call8 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %18, i64 %conv), !dbg !6401
  store %union.tree_node* %call8, %union.tree_node** %arg, align 8, !dbg !6398
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6402
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6402
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !6402
  %bf.load = load i64, i64* %21, align 8, !dbg !6402
  %bf.clear = and i64 %bf.load, 65535, !dbg !6402
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6402
  %cmp9 = icmp eq i32 %bf.cast, 141, !dbg !6404
  br i1 %cmp9, label %if.then11, label %if.end, !dbg !6405

if.then11:                                        ; preds = %for.body
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6406
  %call12 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %22), !dbg !6408
  store %struct.pre_expr_d* %call12, %struct.pre_expr_d** %e, align 8, !dbg !6409
  %23 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6410
  %call13 = call i32 @get_expr_value_id(%struct.pre_expr_d* %23), !dbg !6411
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !6412
  call void @add_to_value(i32 %call13, %struct.pre_expr_d* %24), !dbg !6413
  br label %if.end, !dbg !6414

if.end:                                           ; preds = %if.then11, %for.body
  br label %for.inc, !dbg !6415

for.inc:                                          ; preds = %if.end
  %25 = load i32, i32* %i, align 4, !dbg !6416
  %inc = add i32 %25, 1, !dbg !6416
  store i32 %inc, i32* %i, align 4, !dbg !6416
  br label %for.cond, !dbg !6417, !llvm.loop !6418

for.end:                                          ; preds = %for.cond
  br label %if.end14, !dbg !6420

if.end14:                                         ; preds = %for.end, %if.then
  br label %if.end15, !dbg !6421

if.end15:                                         ; preds = %if.end14, %entry
  ret void, !dbg !6422
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6423 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6426, metadata !DIExpression()), !dbg !6427
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6428
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6428
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6429
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6429
  ret %union.gimple_statement_d* %1, !dbg !6430
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6431 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6435, metadata !DIExpression()), !dbg !6436
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6437
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6438
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6438
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6439
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6439
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6440
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6441
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6442
  ret void, !dbg !6443
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6444 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6447, metadata !DIExpression()), !dbg !6448
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6449, metadata !DIExpression()), !dbg !6450
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6451, metadata !DIExpression()), !dbg !6452
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6453
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6454
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6455
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6456
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6457
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6458
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6459
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6460
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6461
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6462
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6463
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6464
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6465
  ret void, !dbg !6466
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_uid(%union.gimple_statement_d* %g, i32 %uid) #0 !dbg !6467 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %uid.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6470, metadata !DIExpression()), !dbg !6471
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !6472, metadata !DIExpression()), !dbg !6473
  %0 = load i32, i32* %uid.addr, align 4, !dbg !6474
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6475
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6476
  %uid1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !6477
  store i32 %0, i32* %uid1, align 4, !dbg !6478
  ret void, !dbg !6479
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6480 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6481, metadata !DIExpression()), !dbg !6482
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6483
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6484
  %cmp = icmp eq i32 %call, 8, !dbg !6485
  %conv = zext i1 %cmp to i32, !dbg !6485
  %conv1 = trunc i32 %conv to i8, !dbg !6484
  ret i8 %conv1, !dbg !6486
}

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !6487 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6488, metadata !DIExpression()), !dbg !6489
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6490
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6492
  %tobool = icmp ne i8 %call, 0, !dbg !6492
  br i1 %tobool, label %if.then, label %if.else, !dbg !6493

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6494
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6495
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6496
  %bf.load = load i32, i32* %2, align 8, !dbg !6496
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !6496
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6496
  %conv = trunc i32 %bf.clear to i8, !dbg !6494
  store i8 %conv, i8* %retval, align 1, !dbg !6497
  br label %return, !dbg !6497

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6498
  br label %return, !dbg !6498

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6499
  ret i8 %3, !dbg !6499
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_exp_gen(%struct.basic_block_def* %block, %union.tree_node* %op) #0 !dbg !6500 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %result = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !6503, metadata !DIExpression()), !dbg !6504
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6505, metadata !DIExpression()), !dbg !6506
  %0 = load i8, i8* @in_fre, align 1, !dbg !6507
  %tobool = icmp ne i8 %0, 0, !dbg !6507
  br i1 %tobool, label %if.end4, label %if.then, !dbg !6509

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result, metadata !6510, metadata !DIExpression()), !dbg !6512
  %1 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6513
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6513
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6513
  %bf.load = load i64, i64* %2, align 8, !dbg !6513
  %bf.clear = and i64 %bf.load, 65535, !dbg !6513
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6513
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6515
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6516

land.lhs.true:                                    ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6517
  %call = call zeroext i8 @ssa_undefined_value_p(%union.tree_node* %3), !dbg !6518
  %conv = zext i8 %call to i32, !dbg !6518
  %tobool1 = icmp ne i32 %conv, 0, !dbg !6518
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6519

if.then2:                                         ; preds = %land.lhs.true
  br label %if.end4, !dbg !6520

if.end:                                           ; preds = %land.lhs.true, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6521
  %call3 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %4), !dbg !6522
  store %struct.pre_expr_d* %call3, %struct.pre_expr_d** %result, align 8, !dbg !6523
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6524
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 2, !dbg !6524
  %6 = load i8*, i8** %aux, align 8, !dbg !6524
  %7 = bitcast i8* %6 to %struct.bb_bitmap_sets*, !dbg !6524
  %exp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %7, i32 0, i32 0, !dbg !6524
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %exp_gen, align 8, !dbg !6524
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !6525
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %8, %struct.pre_expr_d* %9), !dbg !6526
  br label %if.end4, !dbg !6527

if.end4:                                          ; preds = %if.then2, %if.end, %entry
  ret void, !dbg !6528
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_value_number_call(%union.gimple_statement_d* %stmt) #0 !dbg !6529 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6532, metadata !DIExpression()), !dbg !6533
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6534
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !6536
  %and = and i32 %call, 3, !dbg !6537
  %tobool = icmp ne i32 %and, 0, !dbg !6537
  br i1 %tobool, label %if.then, label %if.end, !dbg !6538

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6539
  br label %return, !dbg !6539

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6540
  br label %return, !dbg !6540

return:                                           ; preds = %if.end, %if.then
  %1 = load i8, i8* %retval, align 1, !dbg !6541
  ret i8 %1, !dbg !6541
}

declare dso_local void @copy_reference_ops_from_call(%union.gimple_statement_d*, %struct.VEC_vn_reference_op_s_heap**) #2

declare dso_local %union.tree_node* @vn_reference_lookup_pieces(%union.tree_node*, i32, %union.tree_node*, %struct.VEC_vn_reference_op_s_heap*, %struct.vn_reference_s**, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !6542 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6543, metadata !DIExpression()), !dbg !6544
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6545, metadata !DIExpression()), !dbg !6546
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6547
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6548
  store i32 %call, i32* %code, align 4, !dbg !6546
  %1 = load i32, i32* %code, align 4, !dbg !6549
  %cmp = icmp eq i32 %1, 6, !dbg !6551
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6552

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6553
  %cmp1 = icmp eq i32 %2, 8, !dbg !6554
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !6555

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6556, metadata !DIExpression()), !dbg !6558
  %3 = load i32, i32* %code, align 4, !dbg !6559
  %cmp2 = icmp eq i32 %3, 8, !dbg !6561
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6562

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6563
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !6564
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !6565
  br label %if.end, !dbg !6566

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6567
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !6568
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !6569

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6570
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !6570
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !6570
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6570
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6570
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6572
  br label %sw.epilog, !dbg !6573

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6574
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !6574
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !6574
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6574
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6574
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !6575
  br label %sw.epilog, !dbg !6576

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6577
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !6578
  br label %return, !dbg !6578

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !6579
  %cmp12 = icmp eq i32 %11, 1, !dbg !6581
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !6582

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6583
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !6584
  br label %return, !dbg !6584

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6585
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !6586
  br label %return, !dbg !6586

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6587
  ret %union.tree_node* %14, !dbg !6587
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %vec_) #0 !dbg !6588 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_heap**, align 8
  store %struct.VEC_vn_reference_op_s_heap** %vec_, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, metadata !6592, metadata !DIExpression()), !dbg !6593
  %0 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6594
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %0, align 8, !dbg !6594
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !6594
  br i1 %tobool, label %if.then, label %if.end, !dbg !6593

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6594
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %2, align 8, !dbg !6594
  %4 = bitcast %struct.VEC_vn_reference_op_s_heap* %3 to i8*, !dbg !6594
  call void @free(i8* %4), !dbg !6594
  br label %if.end, !dbg !6594

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_vn_reference_op_s_heap**, %struct.VEC_vn_reference_op_s_heap*** %vec_.addr, align 8, !dbg !6593
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %5, align 8, !dbg !6593
  ret void, !dbg !6593
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6596 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6599, metadata !DIExpression()), !dbg !6600
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6601, metadata !DIExpression()), !dbg !6602
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6603
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6604
  store i32 %call, i32* %code, align 4, !dbg !6605
  %1 = load i32, i32* %code, align 4, !dbg !6606
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6608
  %cmp = icmp eq i32 %call1, 3, !dbg !6609
  br i1 %cmp, label %if.then, label %if.end, !dbg !6610

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6611
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6611
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6611
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6611
  %bf.load = load i64, i64* %3, align 8, !dbg !6611
  %bf.clear = and i64 %bf.load, 65535, !dbg !6611
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6611
  store i32 %bf.cast, i32* %code, align 4, !dbg !6612
  br label %if.end, !dbg !6613

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6614
  ret i32 %4, !dbg !6615
}

declare dso_local %union.tree_node* @vn_nary_op_lookup_pieces(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.vn_nary_op_s**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6616 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6617, metadata !DIExpression()), !dbg !6618
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6619
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6620
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6621
  %1 = load i32, i32* %num_ops, align 4, !dbg !6621
  ret i32 %1, !dbg !6622
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6623 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6624, metadata !DIExpression()), !dbg !6625
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6626
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6627
  ret %union.tree_node* %call, !dbg !6628
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6629 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6630, metadata !DIExpression()), !dbg !6631
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6632
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6634
  %cmp = icmp uge i32 %call, 3, !dbg !6635
  br i1 %cmp, label %if.then, label %if.else, !dbg !6636

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6637
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6638
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6639
  br label %return, !dbg !6639

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6640
  br label %return, !dbg !6640

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6641
  ret %union.tree_node* %2, !dbg !6641
}

declare dso_local %union.tree_node* @vn_reference_lookup(%union.tree_node*, %union.tree_node*, i8 zeroext, %struct.vn_reference_s**) #2

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6642 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6643, metadata !DIExpression()), !dbg !6644
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6645
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6646
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6647
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6647
  ret %union.tree_node* %1, !dbg !6648
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !6649 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6652, metadata !DIExpression()), !dbg !6653
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !6656, metadata !DIExpression()), !dbg !6657
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6658
  %1 = load i64, i64* %index.addr, align 8, !dbg !6659
  %conv = trunc i64 %1 to i32, !dbg !6659
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !6660
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !6657
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !6661
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !6662
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !6663
  ret %union.tree_node* %call1, !dbg !6664
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6665 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6671, metadata !DIExpression()), !dbg !6672
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6673
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6674
  %1 = load i32, i32* %flags, align 8, !dbg !6674
  %and = and i32 %1, 512, !dbg !6675
  %tobool = icmp ne i32 %and, 0, !dbg !6675
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6676

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6677
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6678
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6679
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6679
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6677
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6680

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6681
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6682
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6683
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6683
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6684
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6684
  br label %cond.end, !dbg !6680

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6680

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6680
  ret %struct.gimple_seq_d* %cond, !dbg !6685
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6686 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6692, metadata !DIExpression()), !dbg !6693
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6694
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6694
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6694

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6695
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6696
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6696
  br label %cond.end, !dbg !6694

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6694

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6694
  ret %struct.gimple_seq_node_d* %cond, !dbg !6697
}

declare dso_local zeroext i8 @ssa_undefined_value_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !6698 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6699, metadata !DIExpression()), !dbg !6700
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !6701, metadata !DIExpression()), !dbg !6702
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6703
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6704
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !6702
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6705, metadata !DIExpression()), !dbg !6706
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6707
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6707
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6707
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6707
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !6706
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6708
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !6708
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !6708
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6708
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !6709
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6710
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6710
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6710
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6710
  ret %union.tree_node* %6, !dbg !6711
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6712 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6713, metadata !DIExpression()), !dbg !6714
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6715
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6716
  ret %union.tree_node* %call, !dbg !6717
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6718 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6721, metadata !DIExpression()), !dbg !6722
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6725
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6727
  %tobool = icmp ne i8 %call, 0, !dbg !6727
  br i1 %tobool, label %if.then, label %if.else, !dbg !6728

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6729
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6731
  %2 = load i32, i32* %i.addr, align 4, !dbg !6732
  %idxprom = zext i32 %2 to i64, !dbg !6731
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6731
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6731
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6733
  br label %return, !dbg !6733

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6734
  br label %return, !dbg !6734

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6735
  ret %union.tree_node* %4, !dbg !6735
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6736 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6739, metadata !DIExpression()), !dbg !6740
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6741, metadata !DIExpression()), !dbg !6742
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6743
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6744
  %idxprom = zext i32 %call to i64, !dbg !6745
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6745
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6745
  store i64 %1, i64* %off, align 8, !dbg !6746
  %2 = load i64, i64* %off, align 8, !dbg !6747
  %cmp = icmp ne i64 %2, 0, !dbg !6747
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6747

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6747
  br label %cond.end, !dbg !6747

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6747

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6747
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6748
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6749
  %5 = load i64, i64* %off, align 8, !dbg !6750
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6751
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6752
  ret %union.tree_node** %6, !dbg !6753
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6754 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6757, metadata !DIExpression()), !dbg !6758
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6759
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6760
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6761
  ret i32 %call1, !dbg !6762
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6763 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  %0 = load i32, i32* %code.addr, align 4, !dbg !6768
  %idxprom = zext i32 %0 to i64, !dbg !6769
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6769
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6769
  ret i32 %1, !dbg !6770
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6771 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6772, metadata !DIExpression()), !dbg !6773
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6774, metadata !DIExpression()), !dbg !6775
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6776
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6777
  store i32 %call, i32* %code, align 4, !dbg !6775
  %1 = load i32, i32* %code, align 4, !dbg !6778
  %cmp = icmp eq i32 %1, 6, !dbg !6780
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6781

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6782
  %cmp1 = icmp eq i32 %2, 1, !dbg !6783
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6784

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6785
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6786
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6787
  %bf.load = load i32, i32* %4, align 8, !dbg !6787
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6787
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6788
  br label %return, !dbg !6788

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6789
  %cmp2 = icmp eq i32 %5, 8, !dbg !6791
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6792

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6793
  br label %return, !dbg !6793

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6794
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6795
  br label %return, !dbg !6795

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6796
  ret i32 %6, !dbg !6796
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6797 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6800, metadata !DIExpression()), !dbg !6801
  %0 = load i32, i32* %code.addr, align 4, !dbg !6802
  %idxprom = sext i32 %0 to i64, !dbg !6803
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6803
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6803
  %conv = zext i8 %1 to i32, !dbg !6804
  ret i32 %conv, !dbg !6805
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6806 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6810, metadata !DIExpression()), !dbg !6811
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6812, metadata !DIExpression()), !dbg !6813
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6814
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6814
  %5 = load i32, i32* %4, align 8, !dbg !6814
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6814
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6814
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6814
  %tobool = icmp ne i8 %call, 0, !dbg !6814
  br i1 %tobool, label %if.else, label %if.then, !dbg !6816

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6817
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6817
  %10 = load i32, i32* %9, align 8, !dbg !6817
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6817
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6817
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6817
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6819
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6820
  store i8 1, i8* %retval, align 1, !dbg !6821
  br label %return, !dbg !6821

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6822
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6824
  store i8 0, i8* %retval, align 1, !dbg !6825
  br label %return, !dbg !6825

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6826
  ret i8 %15, !dbg !6826
}

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !6827 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !6832, metadata !DIExpression()), !dbg !6833
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6834, metadata !DIExpression()), !dbg !6833
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6833
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !6833
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6833

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6833
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6833
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !6833
  %3 = load i32, i32* %num, align 8, !dbg !6833
  %cmp = icmp ult i32 %1, %3, !dbg !6833
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6835
  %land.ext = zext i1 %4 to i32, !dbg !6833
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !6833
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !6833
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6833
  %idxprom = zext i32 %6 to i64, !dbg !6833
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !6833
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !6833
  ret %struct.basic_block_def* %7, !dbg !6833
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compute_antic_aux(%struct.basic_block_def* %block, i8 zeroext %block_has_abnormal_pred_edge) #0 !dbg !6836 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %block_has_abnormal_pred_edge.addr = alloca i8, align 1
  %changed = alloca i8, align 1
  %S = alloca %struct.bitmap_set*, align 8
  %old = alloca %struct.bitmap_set*, align 8
  %ANTIC_OUT = alloca %struct.bitmap_set*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %bii = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %succ_bb = alloca %struct.basic_block_def*, align 8
  %worklist = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i64, align 8
  %bprime = alloca %struct.basic_block_def*, align 8
  %first = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp93 = alloca %struct.bitmap_set*, align 8
  %tmp132 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !6839, metadata !DIExpression()), !dbg !6840
  store i8 %block_has_abnormal_pred_edge, i8* %block_has_abnormal_pred_edge.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %block_has_abnormal_pred_edge.addr, metadata !6841, metadata !DIExpression()), !dbg !6842
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !6843, metadata !DIExpression()), !dbg !6844
  store i8 0, i8* %changed, align 1, !dbg !6844
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %S, metadata !6845, metadata !DIExpression()), !dbg !6846
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %old, metadata !6847, metadata !DIExpression()), !dbg !6848
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %ANTIC_OUT, metadata !6849, metadata !DIExpression()), !dbg !6850
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !6851, metadata !DIExpression()), !dbg !6852
  call void @llvm.dbg.declare(metadata i32* %bii, metadata !6853, metadata !DIExpression()), !dbg !6854
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6855, metadata !DIExpression()), !dbg !6856
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6857, metadata !DIExpression()), !dbg !6858
  store %struct.bitmap_set* null, %struct.bitmap_set** %S, align 8, !dbg !6859
  store %struct.bitmap_set* null, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6860
  store %struct.bitmap_set* null, %struct.bitmap_set** %old, align 8, !dbg !6861
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6862
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !6862
  %1 = load i8*, i8** %aux, align 8, !dbg !6862
  %2 = bitcast i8* %1 to %struct.bb_bitmap_sets*, !dbg !6862
  %visited = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %2, i32 0, i32 8, !dbg !6862
  %bf.load = load i8, i8* %visited, align 8, !dbg !6863
  %bf.clear = and i8 %bf.load, -2, !dbg !6863
  %bf.set = or i8 %bf.clear, 1, !dbg !6863
  store i8 %bf.set, i8* %visited, align 8, !dbg !6863
  %3 = load i8, i8* %block_has_abnormal_pred_edge.addr, align 1, !dbg !6864
  %tobool = icmp ne i8 %3, 0, !dbg !6864
  br i1 %tobool, label %if.then, label %if.end, !dbg !6866

if.then:                                          ; preds = %entry
  br label %maybe_dump_sets, !dbg !6867

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6868
  %aux1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 2, !dbg !6868
  %5 = load i8*, i8** %aux1, align 8, !dbg !6868
  %6 = bitcast i8* %5 to %struct.bb_bitmap_sets*, !dbg !6868
  %antic_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %6, i32 0, i32 4, !dbg !6868
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in, align 8, !dbg !6868
  store %struct.bitmap_set* %7, %struct.bitmap_set** %old, align 8, !dbg !6869
  %call = call %struct.bitmap_set* @bitmap_set_new(), !dbg !6870
  store %struct.bitmap_set* %call, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6871
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6872
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !6872
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6872
  %tobool2 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !6872
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !6872

cond.true:                                        ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6872
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !6872
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6872
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !6872
  br label %cond.end, !dbg !6872

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6872

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6872
  %call4 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6872
  %cmp = icmp eq i32 %call4, 0, !dbg !6874
  br i1 %cmp, label %if.then5, label %if.else, !dbg !6875

if.then5:                                         ; preds = %cond.end
  br label %if.end104, !dbg !6875

if.else:                                          ; preds = %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6876
  %call6 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %12), !dbg !6878
  %tobool7 = icmp ne i8 %call6, 0, !dbg !6878
  br i1 %tobool7, label %if.then8, label %if.else16, !dbg !6879

if.then8:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ_bb, metadata !6880, metadata !DIExpression()), !dbg !6882
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6883
  %call9 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %13), !dbg !6884
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %succ_bb, align 8, !dbg !6882
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6885
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !6887
  %aux10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 2, !dbg !6887
  %16 = load i8*, i8** %aux10, align 8, !dbg !6887
  %17 = bitcast i8* %16 to %struct.bb_bitmap_sets*, !dbg !6887
  %antic_in11 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %17, i32 0, i32 4, !dbg !6887
  %18 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in11, align 8, !dbg !6887
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6888
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !6889
  %call12 = call zeroext i8 @defer_or_phi_translate_block(%struct.bitmap_set* %14, %struct.bitmap_set* %18, %struct.basic_block_def* %19, %struct.basic_block_def* %20), !dbg !6890
  %tobool13 = icmp ne i8 %call12, 0, !dbg !6890
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6891

if.then14:                                        ; preds = %if.then8
  store i8 1, i8* %changed, align 1, !dbg !6892
  br label %maybe_dump_sets, !dbg !6894

if.end15:                                         ; preds = %if.then8
  br label %if.end103, !dbg !6895

if.else16:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %worklist, metadata !6896, metadata !DIExpression()), !dbg !6898
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6899, metadata !DIExpression()), !dbg !6900
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bprime, metadata !6901, metadata !DIExpression()), !dbg !6902
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first, metadata !6903, metadata !DIExpression()), !dbg !6904
  store %struct.basic_block_def* null, %struct.basic_block_def** %first, align 8, !dbg !6904
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6905
  %succs17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !6905
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs17, align 8, !dbg !6905
  %tobool18 = icmp ne %struct.VEC_edge_gc* %22, null, !dbg !6905
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !6905

cond.true19:                                      ; preds = %if.else16
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6905
  %succs20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !6905
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs20, align 8, !dbg !6905
  %base21 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %24, i32 0, i32 0, !dbg !6905
  br label %cond.end23, !dbg !6905

cond.false22:                                     ; preds = %if.else16
  br label %cond.end23, !dbg !6905

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_edge_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !6905
  %call25 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond24), !dbg !6905
  %call26 = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %call25), !dbg !6905
  store %struct.VEC_basic_block_heap* %call26, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !6906
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6907
  %succs27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !6907
  %call28 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs27), !dbg !6907
  %26 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6907
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 0, !dbg !6907
  %28 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 0, !dbg !6907
  store i32 %28, i32* %27, align 8, !dbg !6907
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 1, !dbg !6907
  %30 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 1, !dbg !6907
  store %struct.VEC_edge_gc** %30, %struct.VEC_edge_gc*** %29, align 8, !dbg !6907
  %31 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6907
  %32 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6907
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false), !dbg !6907
  br label %for.cond, !dbg !6907

for.cond:                                         ; preds = %for.inc, %cond.end23
  %33 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6909
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 0, !dbg !6909
  %35 = load i32, i32* %34, align 8, !dbg !6909
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %33, i32 0, i32 1, !dbg !6909
  %37 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %36, align 8, !dbg !6909
  %call29 = call zeroext i8 @ei_cond(i32 %35, %struct.VEC_edge_gc** %37, %struct.edge_def** %e), !dbg !6909
  %tobool30 = icmp ne i8 %call29, 0, !dbg !6907
  br i1 %tobool30, label %for.body, label %for.end, !dbg !6907

for.body:                                         ; preds = %for.cond
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6911
  %tobool31 = icmp ne %struct.basic_block_def* %38, null, !dbg !6911
  br i1 %tobool31, label %if.else39, label %land.lhs.true, !dbg !6914

land.lhs.true:                                    ; preds = %for.body
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6915
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !6915
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6915
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 2, !dbg !6915
  %41 = load i8*, i8** %aux32, align 8, !dbg !6915
  %42 = bitcast i8* %41 to %struct.bb_bitmap_sets*, !dbg !6915
  %visited33 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %42, i32 0, i32 8, !dbg !6915
  %bf.load34 = load i8, i8* %visited33, align 8, !dbg !6915
  %bf.clear35 = and i8 %bf.load34, 1, !dbg !6915
  %bf.cast = zext i8 %bf.clear35 to i32, !dbg !6915
  %tobool36 = icmp ne i32 %bf.cast, 0, !dbg !6915
  br i1 %tobool36, label %if.then37, label %if.else39, !dbg !6916

if.then37:                                        ; preds = %land.lhs.true
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6917
  %dest38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 1, !dbg !6918
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest38, align 8, !dbg !6918
  store %struct.basic_block_def* %44, %struct.basic_block_def** %first, align 8, !dbg !6919
  br label %if.end57, !dbg !6920

if.else39:                                        ; preds = %land.lhs.true, %for.body
  %45 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6921
  %dest40 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 1, !dbg !6921
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %dest40, align 8, !dbg !6921
  %aux41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 2, !dbg !6921
  %47 = load i8*, i8** %aux41, align 8, !dbg !6921
  %48 = bitcast i8* %47 to %struct.bb_bitmap_sets*, !dbg !6921
  %visited42 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %48, i32 0, i32 8, !dbg !6921
  %bf.load43 = load i8, i8* %visited42, align 8, !dbg !6921
  %bf.clear44 = and i8 %bf.load43, 1, !dbg !6921
  %bf.cast45 = zext i8 %bf.clear44 to i32, !dbg !6921
  %tobool46 = icmp ne i32 %bf.cast45, 0, !dbg !6921
  br i1 %tobool46, label %if.then47, label %if.end56, !dbg !6923

if.then47:                                        ; preds = %if.else39
  %49 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !6924
  %tobool48 = icmp ne %struct.VEC_basic_block_heap* %49, null, !dbg !6924
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !6924

cond.true49:                                      ; preds = %if.then47
  %50 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !6924
  %base50 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %50, i32 0, i32 0, !dbg !6924
  br label %cond.end52, !dbg !6924

cond.false51:                                     ; preds = %if.then47
  br label %cond.end52, !dbg !6924

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_basic_block_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !6924
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6924
  %dest54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !6924
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest54, align 8, !dbg !6924
  %call55 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond53, %struct.basic_block_def* %52), !dbg !6924
  br label %if.end56, !dbg !6924

if.end56:                                         ; preds = %cond.end52, %if.else39
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then37
  br label %for.inc, !dbg !6925

for.inc:                                          ; preds = %if.end57
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6909
  br label %for.cond, !dbg !6909, !llvm.loop !6926

for.end:                                          ; preds = %for.cond
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6928
  %tobool58 = icmp ne %struct.basic_block_def* %53, null, !dbg !6928
  br i1 %tobool58, label %if.end68, label %if.then59, !dbg !6930

if.then59:                                        ; preds = %for.end
  %54 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !6931
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6933
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 9, !dbg !6934
  %56 = load i32, i32* %index, align 8, !dbg !6934
  call void @SET_BIT(%struct.simple_bitmap_def* %54, i32 %56), !dbg !6935
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6936
  %aux60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 2, !dbg !6936
  %58 = load i8*, i8** %aux60, align 8, !dbg !6936
  %59 = bitcast i8* %58 to %struct.bb_bitmap_sets*, !dbg !6936
  %visited61 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %59, i32 0, i32 8, !dbg !6936
  %bf.load62 = load i8, i8* %visited61, align 8, !dbg !6937
  %bf.clear63 = and i8 %bf.load62, -2, !dbg !6937
  store i8 %bf.clear63, i8* %visited61, align 8, !dbg !6937
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6938
  %aux64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 2, !dbg !6938
  %61 = load i8*, i8** %aux64, align 8, !dbg !6938
  %62 = bitcast i8* %61 to %struct.bb_bitmap_sets*, !dbg !6938
  %deferred = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %62, i32 0, i32 8, !dbg !6938
  %bf.load65 = load i8, i8* %deferred, align 8, !dbg !6939
  %bf.clear66 = and i8 %bf.load65, -3, !dbg !6939
  %bf.set67 = or i8 %bf.clear66, 2, !dbg !6939
  store i8 %bf.set67, i8* %deferred, align 8, !dbg !6939
  store i8 1, i8* %changed, align 1, !dbg !6940
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %worklist), !dbg !6941
  br label %maybe_dump_sets, !dbg !6942

if.end68:                                         ; preds = %for.end
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6943
  %call69 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %63), !dbg !6945
  %call70 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call69), !dbg !6946
  %tobool71 = icmp ne i8 %call70, 0, !dbg !6946
  br i1 %tobool71, label %if.else75, label %if.then72, !dbg !6947

if.then72:                                        ; preds = %if.end68
  %64 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6948
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6949
  %aux73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 2, !dbg !6949
  %66 = load i8*, i8** %aux73, align 8, !dbg !6949
  %67 = bitcast i8* %66 to %struct.bb_bitmap_sets*, !dbg !6949
  %antic_in74 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %67, i32 0, i32 4, !dbg !6949
  %68 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in74, align 8, !dbg !6949
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6950
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6951
  call void @phi_translate_set(%struct.bitmap_set* %64, %struct.bitmap_set* %68, %struct.basic_block_def* %69, %struct.basic_block_def* %70), !dbg !6952
  br label %if.end78, !dbg !6952

if.else75:                                        ; preds = %if.end68
  %71 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6953
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !6954
  %aux76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 2, !dbg !6954
  %73 = load i8*, i8** %aux76, align 8, !dbg !6954
  %74 = bitcast i8* %73 to %struct.bb_bitmap_sets*, !dbg !6954
  %antic_in77 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %74, i32 0, i32 4, !dbg !6954
  %75 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in77, align 8, !dbg !6954
  call void @bitmap_set_copy(%struct.bitmap_set* %71, %struct.bitmap_set* %75), !dbg !6955
  br label %if.end78

if.end78:                                         ; preds = %if.else75, %if.then72
  store i64 0, i64* %i, align 8, !dbg !6956
  br label %for.cond79, !dbg !6958

for.cond79:                                       ; preds = %for.inc101, %if.end78
  %76 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !6959
  %tobool80 = icmp ne %struct.VEC_basic_block_heap* %76, null, !dbg !6959
  br i1 %tobool80, label %cond.true81, label %cond.false83, !dbg !6959

cond.true81:                                      ; preds = %for.cond79
  %77 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !6959
  %base82 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %77, i32 0, i32 0, !dbg !6959
  br label %cond.end84, !dbg !6959

cond.false83:                                     ; preds = %for.cond79
  br label %cond.end84, !dbg !6959

cond.end84:                                       ; preds = %cond.false83, %cond.true81
  %cond85 = phi %struct.VEC_basic_block_base* [ %base82, %cond.true81 ], [ null, %cond.false83 ], !dbg !6959
  %78 = load i64, i64* %i, align 8, !dbg !6959
  %conv = trunc i64 %78 to i32, !dbg !6959
  %call86 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond85, i32 %conv, %struct.basic_block_def** %bprime), !dbg !6959
  %tobool87 = icmp ne i32 %call86, 0, !dbg !6961
  br i1 %tobool87, label %for.body88, label %for.end102, !dbg !6961

for.body88:                                       ; preds = %cond.end84
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !6962
  %call89 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %79), !dbg !6965
  %call90 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call89), !dbg !6966
  %tobool91 = icmp ne i8 %call90, 0, !dbg !6966
  br i1 %tobool91, label %if.else97, label %if.then92, !dbg !6967

if.then92:                                        ; preds = %for.body88
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %tmp93, metadata !6968, metadata !DIExpression()), !dbg !6970
  %call94 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !6971
  store %struct.bitmap_set* %call94, %struct.bitmap_set** %tmp93, align 8, !dbg !6970
  %80 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp93, align 8, !dbg !6972
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !6973
  %aux95 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 2, !dbg !6973
  %82 = load i8*, i8** %aux95, align 8, !dbg !6973
  %83 = bitcast i8* %82 to %struct.bb_bitmap_sets*, !dbg !6973
  %antic_in96 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %83, i32 0, i32 4, !dbg !6973
  %84 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in96, align 8, !dbg !6973
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6974
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !6975
  call void @phi_translate_set(%struct.bitmap_set* %80, %struct.bitmap_set* %84, %struct.basic_block_def* %85, %struct.basic_block_def* %86), !dbg !6976
  %87 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6977
  %88 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp93, align 8, !dbg !6978
  call void @bitmap_set_and(%struct.bitmap_set* %87, %struct.bitmap_set* %88), !dbg !6979
  %89 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp93, align 8, !dbg !6980
  call void @bitmap_set_free(%struct.bitmap_set* %89), !dbg !6981
  br label %if.end100, !dbg !6982

if.else97:                                        ; preds = %for.body88
  %90 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6983
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !6984
  %aux98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 2, !dbg !6984
  %92 = load i8*, i8** %aux98, align 8, !dbg !6984
  %93 = bitcast i8* %92 to %struct.bb_bitmap_sets*, !dbg !6984
  %antic_in99 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %93, i32 0, i32 4, !dbg !6984
  %94 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in99, align 8, !dbg !6984
  call void @bitmap_set_and(%struct.bitmap_set* %90, %struct.bitmap_set* %94), !dbg !6985
  br label %if.end100

if.end100:                                        ; preds = %if.else97, %if.then92
  br label %for.inc101, !dbg !6986

for.inc101:                                       ; preds = %if.end100
  %95 = load i64, i64* %i, align 8, !dbg !6987
  %inc = add i64 %95, 1, !dbg !6987
  store i64 %inc, i64* %i, align 8, !dbg !6987
  br label %for.cond79, !dbg !6988, !llvm.loop !6989

for.end102:                                       ; preds = %cond.end84
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %worklist), !dbg !6991
  br label %if.end103

if.end103:                                        ; preds = %for.end102, %if.end15
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then5
  %96 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !6992
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6993
  %aux105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 2, !dbg !6993
  %98 = load i8*, i8** %aux105, align 8, !dbg !6993
  %99 = bitcast i8* %98 to %struct.bb_bitmap_sets*, !dbg !6993
  %tmp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %99, i32 0, i32 2, !dbg !6993
  %100 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen, align 8, !dbg !6993
  %call106 = call %struct.bitmap_set* @bitmap_set_subtract(%struct.bitmap_set* %96, %struct.bitmap_set* %100), !dbg !6994
  store %struct.bitmap_set* %call106, %struct.bitmap_set** %S, align 8, !dbg !6995
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6996
  %aux107 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 2, !dbg !6996
  %102 = load i8*, i8** %aux107, align 8, !dbg !6996
  %103 = bitcast i8* %102 to %struct.bb_bitmap_sets*, !dbg !6996
  %exp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %103, i32 0, i32 0, !dbg !6996
  %104 = load %struct.bitmap_set*, %struct.bitmap_set** %exp_gen, align 8, !dbg !6996
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6997
  %aux108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 2, !dbg !6997
  %106 = load i8*, i8** %aux108, align 8, !dbg !6997
  %107 = bitcast i8* %106 to %struct.bb_bitmap_sets*, !dbg !6997
  %tmp_gen109 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %107, i32 0, i32 2, !dbg !6997
  %108 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen109, align 8, !dbg !6997
  %call110 = call %struct.bitmap_set* @bitmap_set_subtract(%struct.bitmap_set* %104, %struct.bitmap_set* %108), !dbg !6998
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !6999
  %aux111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 2, !dbg !6999
  %110 = load i8*, i8** %aux111, align 8, !dbg !6999
  %111 = bitcast i8* %110 to %struct.bb_bitmap_sets*, !dbg !6999
  %antic_in112 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %111, i32 0, i32 4, !dbg !6999
  store %struct.bitmap_set* %call110, %struct.bitmap_set** %antic_in112, align 8, !dbg !7000
  %112 = load %struct.bitmap_set*, %struct.bitmap_set** %S, align 8, !dbg !7001
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %112, i32 0, i32 0, !dbg !7001
  %113 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7001
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %113, i32 0, i32* %bii), !dbg !7001
  br label %for.cond113, !dbg !7001

for.cond113:                                      ; preds = %for.inc120, %if.end104
  %call114 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bii), !dbg !7003
  %tobool115 = icmp ne i8 %call114, 0, !dbg !7001
  br i1 %tobool115, label %for.body116, label %for.end121, !dbg !7001

for.body116:                                      ; preds = %for.cond113
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7005
  %aux117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 2, !dbg !7005
  %115 = load i8*, i8** %aux117, align 8, !dbg !7005
  %116 = bitcast i8* %115 to %struct.bb_bitmap_sets*, !dbg !7005
  %antic_in118 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %116, i32 0, i32 4, !dbg !7005
  %117 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in118, align 8, !dbg !7005
  %118 = load i32, i32* %bii, align 4, !dbg !7006
  %call119 = call %struct.pre_expr_d* @expression_for_id(i32 %118), !dbg !7007
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %117, %struct.pre_expr_d* %call119), !dbg !7008
  br label %for.inc120, !dbg !7008

for.inc120:                                       ; preds = %for.body116
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bii), !dbg !7003
  br label %for.cond113, !dbg !7003, !llvm.loop !7009

for.end121:                                       ; preds = %for.cond113
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7011
  %aux122 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 2, !dbg !7011
  %120 = load i8*, i8** %aux122, align 8, !dbg !7011
  %121 = bitcast i8* %120 to %struct.bb_bitmap_sets*, !dbg !7011
  %antic_in123 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %121, i32 0, i32 4, !dbg !7011
  %122 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in123, align 8, !dbg !7011
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7012
  call void @clean(%struct.bitmap_set* %122, %struct.basic_block_def* %123), !dbg !7013
  %124 = load %struct.bitmap_set*, %struct.bitmap_set** %old, align 8, !dbg !7014
  %expressions124 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %124, i32 0, i32 0, !dbg !7016
  %125 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions124, align 8, !dbg !7016
  %tobool125 = icmp ne %struct.bitmap_head_def* %125, null, !dbg !7014
  br i1 %tobool125, label %lor.lhs.false, label %if.then130, !dbg !7017

lor.lhs.false:                                    ; preds = %for.end121
  %126 = load %struct.bitmap_set*, %struct.bitmap_set** %old, align 8, !dbg !7018
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7019
  %aux126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 2, !dbg !7019
  %128 = load i8*, i8** %aux126, align 8, !dbg !7019
  %129 = bitcast i8* %128 to %struct.bb_bitmap_sets*, !dbg !7019
  %antic_in127 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %129, i32 0, i32 4, !dbg !7019
  %130 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in127, align 8, !dbg !7019
  %call128 = call zeroext i8 @bitmap_set_equal(%struct.bitmap_set* %126, %struct.bitmap_set* %130), !dbg !7020
  %tobool129 = icmp ne i8 %call128, 0, !dbg !7020
  br i1 %tobool129, label %if.else141, label %if.then130, !dbg !7021

if.then130:                                       ; preds = %lor.lhs.false, %for.end121
  store i8 1, i8* %changed, align 1, !dbg !7022
  %131 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7024
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7025
  %index131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 9, !dbg !7026
  %133 = load i32, i32* %index131, align 8, !dbg !7026
  call void @SET_BIT(%struct.simple_bitmap_def* %131, i32 %133), !dbg !7027
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7028
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %134, i32 0, i32 0, !dbg !7028
  %call133 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7028
  %135 = bitcast %struct.edge_iterator* %tmp132 to { i32, %struct.VEC_edge_gc** }*, !dbg !7028
  %136 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %135, i32 0, i32 0, !dbg !7028
  %137 = extractvalue { i32, %struct.VEC_edge_gc** } %call133, 0, !dbg !7028
  store i32 %137, i32* %136, align 8, !dbg !7028
  %138 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %135, i32 0, i32 1, !dbg !7028
  %139 = extractvalue { i32, %struct.VEC_edge_gc** } %call133, 1, !dbg !7028
  store %struct.VEC_edge_gc** %139, %struct.VEC_edge_gc*** %138, align 8, !dbg !7028
  %140 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7028
  %141 = bitcast %struct.edge_iterator* %tmp132 to i8*, !dbg !7028
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %141, i64 16, i1 false), !dbg !7028
  br label %for.cond134, !dbg !7028

for.cond134:                                      ; preds = %for.inc139, %if.then130
  %142 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7030
  %143 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %142, i32 0, i32 0, !dbg !7030
  %144 = load i32, i32* %143, align 8, !dbg !7030
  %145 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %142, i32 0, i32 1, !dbg !7030
  %146 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %145, align 8, !dbg !7030
  %call135 = call zeroext i8 @ei_cond(i32 %144, %struct.VEC_edge_gc** %146, %struct.edge_def** %e), !dbg !7030
  %tobool136 = icmp ne i8 %call135, 0, !dbg !7028
  br i1 %tobool136, label %for.body137, label %for.end140, !dbg !7028

for.body137:                                      ; preds = %for.cond134
  %147 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7032
  %148 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7033
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %148, i32 0, i32 0, !dbg !7034
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7034
  %index138 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %149, i32 0, i32 9, !dbg !7035
  %150 = load i32, i32* %index138, align 8, !dbg !7035
  call void @SET_BIT(%struct.simple_bitmap_def* %147, i32 %150), !dbg !7036
  br label %for.inc139, !dbg !7036

for.inc139:                                       ; preds = %for.body137
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7030
  br label %for.cond134, !dbg !7030, !llvm.loop !7037

for.end140:                                       ; preds = %for.cond134
  br label %if.end143, !dbg !7039

if.else141:                                       ; preds = %lor.lhs.false
  %151 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7040
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7041
  %index142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %152, i32 0, i32 9, !dbg !7042
  %153 = load i32, i32* %index142, align 8, !dbg !7042
  call void @RESET_BIT(%struct.simple_bitmap_def* %151, i32 %153), !dbg !7043
  br label %if.end143

if.end143:                                        ; preds = %if.else141, %for.end140
  br label %maybe_dump_sets, !dbg !7044

maybe_dump_sets:                                  ; preds = %if.end143, %if.then59, %if.then14, %if.then
  call void @llvm.dbg.label(metadata !7045), !dbg !7046
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7047
  %tobool144 = icmp ne %struct._IO_FILE* %154, null, !dbg !7047
  br i1 %tobool144, label %land.lhs.true145, label %if.end177, !dbg !7049

land.lhs.true145:                                 ; preds = %maybe_dump_sets
  %155 = load i32, i32* @dump_flags, align 4, !dbg !7050
  %and = and i32 %155, 8, !dbg !7051
  %tobool146 = icmp ne i32 %and, 0, !dbg !7051
  br i1 %tobool146, label %if.then147, label %if.end177, !dbg !7052

if.then147:                                       ; preds = %land.lhs.true145
  %156 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7053
  %aux148 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %156, i32 0, i32 2, !dbg !7053
  %157 = load i8*, i8** %aux148, align 8, !dbg !7053
  %158 = bitcast i8* %157 to %struct.bb_bitmap_sets*, !dbg !7053
  %deferred149 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %158, i32 0, i32 8, !dbg !7053
  %bf.load150 = load i8, i8* %deferred149, align 8, !dbg !7053
  %bf.lshr = lshr i8 %bf.load150, 1, !dbg !7053
  %bf.clear151 = and i8 %bf.lshr, 1, !dbg !7053
  %bf.cast152 = zext i8 %bf.clear151 to i32, !dbg !7053
  %tobool153 = icmp ne i32 %bf.cast152, 0, !dbg !7053
  br i1 %tobool153, label %lor.lhs.false154, label %if.then161, !dbg !7056

lor.lhs.false154:                                 ; preds = %if.then147
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7057
  %aux155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %159, i32 0, i32 2, !dbg !7057
  %160 = load i8*, i8** %aux155, align 8, !dbg !7057
  %161 = bitcast i8* %160 to %struct.bb_bitmap_sets*, !dbg !7057
  %visited156 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %161, i32 0, i32 8, !dbg !7057
  %bf.load157 = load i8, i8* %visited156, align 8, !dbg !7057
  %bf.clear158 = and i8 %bf.load157, 1, !dbg !7057
  %bf.cast159 = zext i8 %bf.clear158 to i32, !dbg !7057
  %tobool160 = icmp ne i32 %bf.cast159, 0, !dbg !7057
  br i1 %tobool160, label %if.then161, label %if.else173, !dbg !7058

if.then161:                                       ; preds = %lor.lhs.false154, %if.then147
  %162 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !7059
  %tobool162 = icmp ne %struct.bitmap_set* %162, null, !dbg !7059
  br i1 %tobool162, label %if.then163, label %if.end165, !dbg !7062

if.then163:                                       ; preds = %if.then161
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7063
  %164 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !7064
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7065
  %index164 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %165, i32 0, i32 9, !dbg !7066
  %166 = load i32, i32* %index164, align 8, !dbg !7066
  call void @print_bitmap_set(%struct._IO_FILE* %163, %struct.bitmap_set* %164, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0), i32 %166), !dbg !7067
  br label %if.end165, !dbg !7067

if.end165:                                        ; preds = %if.then163, %if.then161
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7068
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7069
  %aux166 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %168, i32 0, i32 2, !dbg !7069
  %169 = load i8*, i8** %aux166, align 8, !dbg !7069
  %170 = bitcast i8* %169 to %struct.bb_bitmap_sets*, !dbg !7069
  %antic_in167 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %170, i32 0, i32 4, !dbg !7069
  %171 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in167, align 8, !dbg !7069
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7070
  %index168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %172, i32 0, i32 9, !dbg !7071
  %173 = load i32, i32* %index168, align 8, !dbg !7071
  call void @print_bitmap_set(%struct._IO_FILE* %167, %struct.bitmap_set* %171, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.38, i64 0, i64 0), i32 %173), !dbg !7072
  %174 = load %struct.bitmap_set*, %struct.bitmap_set** %S, align 8, !dbg !7073
  %tobool169 = icmp ne %struct.bitmap_set* %174, null, !dbg !7073
  br i1 %tobool169, label %if.then170, label %if.end172, !dbg !7075

if.then170:                                       ; preds = %if.end165
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7076
  %176 = load %struct.bitmap_set*, %struct.bitmap_set** %S, align 8, !dbg !7077
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7078
  %index171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %177, i32 0, i32 9, !dbg !7079
  %178 = load i32, i32* %index171, align 8, !dbg !7079
  call void @print_bitmap_set(%struct._IO_FILE* %175, %struct.bitmap_set* %176, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i64 0, i64 0), i32 %178), !dbg !7080
  br label %if.end172, !dbg !7080

if.end172:                                        ; preds = %if.then170, %if.end165
  br label %if.end176, !dbg !7081

if.else173:                                       ; preds = %lor.lhs.false154
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7082
  %180 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7084
  %index174 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %180, i32 0, i32 9, !dbg !7085
  %181 = load i32, i32* %index174, align 8, !dbg !7085
  %call175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %179, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.40, i64 0, i64 0), i32 %181), !dbg !7086
  br label %if.end176

if.end176:                                        ; preds = %if.else173, %if.end172
  br label %if.end177, !dbg !7087

if.end177:                                        ; preds = %if.end176, %land.lhs.true145, %maybe_dump_sets
  %182 = load %struct.bitmap_set*, %struct.bitmap_set** %old, align 8, !dbg !7088
  %tobool178 = icmp ne %struct.bitmap_set* %182, null, !dbg !7088
  br i1 %tobool178, label %if.then179, label %if.end180, !dbg !7090

if.then179:                                       ; preds = %if.end177
  %183 = load %struct.bitmap_set*, %struct.bitmap_set** %old, align 8, !dbg !7091
  call void @bitmap_set_free(%struct.bitmap_set* %183), !dbg !7092
  br label %if.end180, !dbg !7092

if.end180:                                        ; preds = %if.then179, %if.end177
  %184 = load %struct.bitmap_set*, %struct.bitmap_set** %S, align 8, !dbg !7093
  %tobool181 = icmp ne %struct.bitmap_set* %184, null, !dbg !7093
  br i1 %tobool181, label %if.then182, label %if.end183, !dbg !7095

if.then182:                                       ; preds = %if.end180
  %185 = load %struct.bitmap_set*, %struct.bitmap_set** %S, align 8, !dbg !7096
  call void @bitmap_set_free(%struct.bitmap_set* %185), !dbg !7097
  br label %if.end183, !dbg !7097

if.end183:                                        ; preds = %if.then182, %if.end180
  %186 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !7098
  %tobool184 = icmp ne %struct.bitmap_set* %186, null, !dbg !7098
  br i1 %tobool184, label %if.then185, label %if.end186, !dbg !7100

if.then185:                                       ; preds = %if.end183
  %187 = load %struct.bitmap_set*, %struct.bitmap_set** %ANTIC_OUT, align 8, !dbg !7101
  call void @bitmap_set_free(%struct.bitmap_set* %187), !dbg !7102
  br label %if.end186, !dbg !7102

if.end186:                                        ; preds = %if.then185, %if.end183
  %188 = load i8, i8* %changed, align 1, !dbg !7103
  ret i8 %188, !dbg !7104
}

declare dso_local void @statistics_histogram_event(%struct.function*, i8*, i32) #2

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compute_partial_antic_aux(%struct.basic_block_def* %block, i8 zeroext %block_has_abnormal_pred_edge) #0 !dbg !7105 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %block_has_abnormal_pred_edge.addr = alloca i8, align 1
  %changed = alloca i8, align 1
  %old_PA_IN = alloca %struct.bitmap_set*, align 8
  %PA_OUT = alloca %struct.bitmap_set*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %max_pa = alloca i64, align 8
  %succ = alloca %struct.basic_block_def*, align 8
  %worklist = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i64, align 8
  %bprime = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %i77 = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %pa_in90 = alloca %struct.bitmap_set*, align 8
  %tmp149 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  store i8 %block_has_abnormal_pred_edge, i8* %block_has_abnormal_pred_edge.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %block_has_abnormal_pred_edge.addr, metadata !7108, metadata !DIExpression()), !dbg !7109
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7110, metadata !DIExpression()), !dbg !7111
  store i8 0, i8* %changed, align 1, !dbg !7111
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %old_PA_IN, metadata !7112, metadata !DIExpression()), !dbg !7113
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %PA_OUT, metadata !7114, metadata !DIExpression()), !dbg !7115
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7116, metadata !DIExpression()), !dbg !7117
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7118, metadata !DIExpression()), !dbg !7119
  call void @llvm.dbg.declare(metadata i64* %max_pa, metadata !7120, metadata !DIExpression()), !dbg !7121
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7122
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 103, !dbg !7122
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7122
  %1 = load i32, i32* %value, align 8, !dbg !7122
  %conv = sext i32 %1 to i64, !dbg !7122
  store i64 %conv, i64* %max_pa, align 8, !dbg !7121
  store %struct.bitmap_set* null, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7123
  store %struct.bitmap_set* null, %struct.bitmap_set** %old_PA_IN, align 8, !dbg !7124
  %2 = load i8, i8* %block_has_abnormal_pred_edge.addr, align 1, !dbg !7125
  %tobool = icmp ne i8 %2, 0, !dbg !7125
  br i1 %tobool, label %if.then, label %if.end, !dbg !7127

if.then:                                          ; preds = %entry
  br label %maybe_dump_sets, !dbg !7128

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %max_pa, align 8, !dbg !7129
  %tobool1 = icmp ne i64 %3, 0, !dbg !7129
  br i1 %tobool1, label %land.lhs.true, label %if.end9, !dbg !7131

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7132
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %4), !dbg !7133
  %conv2 = zext i8 %call to i32, !dbg !7133
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !7133
  br i1 %tobool3, label %land.lhs.true4, label %if.end9, !dbg !7134

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7135
  %call5 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %5), !dbg !7135
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call5, i32 0, i32 2, !dbg !7135
  %6 = load i8*, i8** %aux, align 8, !dbg !7135
  %7 = bitcast i8* %6 to %struct.bb_bitmap_sets*, !dbg !7135
  %pa_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %7, i32 0, i32 5, !dbg !7135
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in, align 8, !dbg !7135
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %8, i32 0, i32 1, !dbg !7136
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7136
  %call6 = call i64 @bitmap_count_bits(%struct.bitmap_head_def* %9), !dbg !7137
  %10 = load i64, i64* %max_pa, align 8, !dbg !7138
  %cmp = icmp ugt i64 %call6, %10, !dbg !7139
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !7140

if.then8:                                         ; preds = %land.lhs.true4
  br label %maybe_dump_sets, !dbg !7141

if.end9:                                          ; preds = %land.lhs.true4, %land.lhs.true, %if.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7142
  %aux10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 2, !dbg !7142
  %12 = load i8*, i8** %aux10, align 8, !dbg !7142
  %13 = bitcast i8* %12 to %struct.bb_bitmap_sets*, !dbg !7142
  %pa_in11 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %13, i32 0, i32 5, !dbg !7142
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in11, align 8, !dbg !7142
  store %struct.bitmap_set* %14, %struct.bitmap_set** %old_PA_IN, align 8, !dbg !7143
  %call12 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !7144
  store %struct.bitmap_set* %call12, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7145
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7146
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !7146
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7146
  %tobool13 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !7146
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !7146

cond.true:                                        ; preds = %if.end9
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7146
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !7146
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !7146
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !7146
  br label %cond.end, !dbg !7146

cond.false:                                       ; preds = %if.end9
  br label %cond.end, !dbg !7146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7146
  %call15 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7146
  %cmp16 = icmp eq i32 %call15, 0, !dbg !7148
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !7149

if.then18:                                        ; preds = %cond.end
  br label %if.end118, !dbg !7149

if.else:                                          ; preds = %cond.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7150
  %call19 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %19), !dbg !7152
  %tobool20 = icmp ne i8 %call19, 0, !dbg !7152
  br i1 %tobool20, label %if.then21, label %if.else29, !dbg !7153

if.then21:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ, metadata !7154, metadata !DIExpression()), !dbg !7156
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7157
  %call22 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %20), !dbg !7158
  store %struct.basic_block_def* %call22, %struct.basic_block_def** %succ, align 8, !dbg !7156
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7159
  %call23 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %21), !dbg !7161
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call23, i32 0, i32 7, !dbg !7162
  %22 = load i32, i32* %flags, align 8, !dbg !7162
  %and = and i32 %22, 32, !dbg !7163
  %tobool24 = icmp ne i32 %and, 0, !dbg !7163
  br i1 %tobool24, label %if.end28, label %if.then25, !dbg !7164

if.then25:                                        ; preds = %if.then21
  %23 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7165
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !7166
  %aux26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 2, !dbg !7166
  %25 = load i8*, i8** %aux26, align 8, !dbg !7166
  %26 = bitcast i8* %25 to %struct.bb_bitmap_sets*, !dbg !7166
  %pa_in27 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %26, i32 0, i32 5, !dbg !7166
  %27 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in27, align 8, !dbg !7166
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7167
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !7168
  call void @phi_translate_set(%struct.bitmap_set* %23, %struct.bitmap_set* %27, %struct.basic_block_def* %28, %struct.basic_block_def* %29), !dbg !7169
  br label %if.end28, !dbg !7169

if.end28:                                         ; preds = %if.then25, %if.then21
  br label %if.end117, !dbg !7170

if.else29:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %worklist, metadata !7171, metadata !DIExpression()), !dbg !7173
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7174, metadata !DIExpression()), !dbg !7175
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bprime, metadata !7176, metadata !DIExpression()), !dbg !7177
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7178
  %succs30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !7178
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs30, align 8, !dbg !7178
  %tobool31 = icmp ne %struct.VEC_edge_gc* %31, null, !dbg !7178
  br i1 %tobool31, label %cond.true32, label %cond.false35, !dbg !7178

cond.true32:                                      ; preds = %if.else29
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7178
  %succs33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !7178
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs33, align 8, !dbg !7178
  %base34 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %33, i32 0, i32 0, !dbg !7178
  br label %cond.end36, !dbg !7178

cond.false35:                                     ; preds = %if.else29
  br label %cond.end36, !dbg !7178

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_edge_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !7178
  %call38 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond37), !dbg !7178
  %call39 = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %call38), !dbg !7178
  store %struct.VEC_basic_block_heap* %call39, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7179
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7180
  %succs40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 1, !dbg !7180
  %call41 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs40), !dbg !7180
  %35 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7180
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 0, !dbg !7180
  %37 = extractvalue { i32, %struct.VEC_edge_gc** } %call41, 0, !dbg !7180
  store i32 %37, i32* %36, align 8, !dbg !7180
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 1, !dbg !7180
  %39 = extractvalue { i32, %struct.VEC_edge_gc** } %call41, 1, !dbg !7180
  store %struct.VEC_edge_gc** %39, %struct.VEC_edge_gc*** %38, align 8, !dbg !7180
  %40 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7180
  %41 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !dbg !7180
  br label %for.cond, !dbg !7180

for.cond:                                         ; preds = %for.inc, %cond.end36
  %42 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7182
  %43 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 0, !dbg !7182
  %44 = load i32, i32* %43, align 8, !dbg !7182
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 1, !dbg !7182
  %46 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %45, align 8, !dbg !7182
  %call42 = call zeroext i8 @ei_cond(i32 %44, %struct.VEC_edge_gc** %46, %struct.edge_def** %e), !dbg !7182
  %tobool43 = icmp ne i8 %call42, 0, !dbg !7180
  br i1 %tobool43, label %for.body, label %for.end, !dbg !7180

for.body:                                         ; preds = %for.cond
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7184
  %flags44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 7, !dbg !7187
  %48 = load i32, i32* %flags44, align 8, !dbg !7187
  %and45 = and i32 %48, 32, !dbg !7188
  %tobool46 = icmp ne i32 %and45, 0, !dbg !7188
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !7189

if.then47:                                        ; preds = %for.body
  br label %for.inc, !dbg !7190

if.end48:                                         ; preds = %for.body
  %49 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7191
  %tobool49 = icmp ne %struct.VEC_basic_block_heap* %49, null, !dbg !7191
  br i1 %tobool49, label %cond.true50, label %cond.false52, !dbg !7191

cond.true50:                                      ; preds = %if.end48
  %50 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7191
  %base51 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %50, i32 0, i32 0, !dbg !7191
  br label %cond.end53, !dbg !7191

cond.false52:                                     ; preds = %if.end48
  br label %cond.end53, !dbg !7191

cond.end53:                                       ; preds = %cond.false52, %cond.true50
  %cond54 = phi %struct.VEC_basic_block_base* [ %base51, %cond.true50 ], [ null, %cond.false52 ], !dbg !7191
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7191
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !7191
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7191
  %call55 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond54, %struct.basic_block_def* %52), !dbg !7191
  br label %for.inc, !dbg !7192

for.inc:                                          ; preds = %cond.end53, %if.then47
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7182
  br label %for.cond, !dbg !7182, !llvm.loop !7193

for.end:                                          ; preds = %for.cond
  %53 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7195
  %tobool56 = icmp ne %struct.VEC_basic_block_heap* %53, null, !dbg !7195
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !7195

cond.true57:                                      ; preds = %for.end
  %54 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7195
  %base58 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %54, i32 0, i32 0, !dbg !7195
  br label %cond.end60, !dbg !7195

cond.false59:                                     ; preds = %for.end
  br label %cond.end60, !dbg !7195

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_basic_block_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !7195
  %call62 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond61), !dbg !7195
  %cmp63 = icmp ugt i32 %call62, 0, !dbg !7197
  br i1 %cmp63, label %if.then65, label %if.end116, !dbg !7198

if.then65:                                        ; preds = %cond.end60
  store i64 0, i64* %i, align 8, !dbg !7199
  br label %for.cond66, !dbg !7202

for.cond66:                                       ; preds = %for.inc114, %if.then65
  %55 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7203
  %tobool67 = icmp ne %struct.VEC_basic_block_heap* %55, null, !dbg !7203
  br i1 %tobool67, label %cond.true68, label %cond.false70, !dbg !7203

cond.true68:                                      ; preds = %for.cond66
  %56 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %worklist, align 8, !dbg !7203
  %base69 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %56, i32 0, i32 0, !dbg !7203
  br label %cond.end71, !dbg !7203

cond.false70:                                     ; preds = %for.cond66
  br label %cond.end71, !dbg !7203

cond.end71:                                       ; preds = %cond.false70, %cond.true68
  %cond72 = phi %struct.VEC_basic_block_base* [ %base69, %cond.true68 ], [ null, %cond.false70 ], !dbg !7203
  %57 = load i64, i64* %i, align 8, !dbg !7203
  %conv73 = trunc i64 %57 to i32, !dbg !7203
  %call74 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond72, i32 %conv73, %struct.basic_block_def** %bprime), !dbg !7203
  %tobool75 = icmp ne i32 %call74, 0, !dbg !7205
  br i1 %tobool75, label %for.body76, label %for.end115, !dbg !7205

for.body76:                                       ; preds = %cond.end71
  call void @llvm.dbg.declare(metadata i32* %i77, metadata !7206, metadata !DIExpression()), !dbg !7208
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7209, metadata !DIExpression()), !dbg !7210
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !7211
  %aux78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 2, !dbg !7211
  %59 = load i8*, i8** %aux78, align 8, !dbg !7211
  %60 = bitcast i8* %59 to %struct.bb_bitmap_sets*, !dbg !7211
  %antic_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %60, i32 0, i32 4, !dbg !7211
  %61 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in, align 8, !dbg !7211
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %61, i32 0, i32 0, !dbg !7211
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7211
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %62, i32 0, i32* %i77), !dbg !7211
  br label %for.cond79, !dbg !7211

for.cond79:                                       ; preds = %for.inc84, %for.body76
  %call80 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7213
  %tobool81 = icmp ne i8 %call80, 0, !dbg !7211
  br i1 %tobool81, label %for.body82, label %for.end85, !dbg !7211

for.body82:                                       ; preds = %for.cond79
  %63 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7215
  %64 = load i32, i32* %i77, align 4, !dbg !7216
  %call83 = call %struct.pre_expr_d* @expression_for_id(i32 %64), !dbg !7217
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %63, %struct.pre_expr_d* %call83), !dbg !7218
  br label %for.inc84, !dbg !7218

for.inc84:                                        ; preds = %for.body82
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7213
  br label %for.cond79, !dbg !7213, !llvm.loop !7219

for.end85:                                        ; preds = %for.cond79
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !7221
  %call86 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %65), !dbg !7223
  %call87 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call86), !dbg !7224
  %tobool88 = icmp ne i8 %call87, 0, !dbg !7224
  br i1 %tobool88, label %if.else102, label %if.then89, !dbg !7225

if.then89:                                        ; preds = %for.end85
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %pa_in90, metadata !7226, metadata !DIExpression()), !dbg !7228
  %call91 = call %struct.bitmap_set* @bitmap_set_new(), !dbg !7229
  store %struct.bitmap_set* %call91, %struct.bitmap_set** %pa_in90, align 8, !dbg !7228
  %66 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in90, align 8, !dbg !7230
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !7231
  %aux92 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 2, !dbg !7231
  %68 = load i8*, i8** %aux92, align 8, !dbg !7231
  %69 = bitcast i8* %68 to %struct.bb_bitmap_sets*, !dbg !7231
  %pa_in93 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %69, i32 0, i32 5, !dbg !7231
  %70 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in93, align 8, !dbg !7231
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7232
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !7233
  call void @phi_translate_set(%struct.bitmap_set* %66, %struct.bitmap_set* %70, %struct.basic_block_def* %71, %struct.basic_block_def* %72), !dbg !7234
  %73 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in90, align 8, !dbg !7235
  %expressions94 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %73, i32 0, i32 0, !dbg !7235
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions94, align 8, !dbg !7235
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %74, i32 0, i32* %i77), !dbg !7235
  br label %for.cond95, !dbg !7235

for.cond95:                                       ; preds = %for.inc100, %if.then89
  %call96 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7237
  %tobool97 = icmp ne i8 %call96, 0, !dbg !7235
  br i1 %tobool97, label %for.body98, label %for.end101, !dbg !7235

for.body98:                                       ; preds = %for.cond95
  %75 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7239
  %76 = load i32, i32* %i77, align 4, !dbg !7240
  %call99 = call %struct.pre_expr_d* @expression_for_id(i32 %76), !dbg !7241
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %75, %struct.pre_expr_d* %call99), !dbg !7242
  br label %for.inc100, !dbg !7242

for.inc100:                                       ; preds = %for.body98
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7237
  br label %for.cond95, !dbg !7237, !llvm.loop !7243

for.end101:                                       ; preds = %for.cond95
  %77 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in90, align 8, !dbg !7245
  call void @bitmap_set_free(%struct.bitmap_set* %77), !dbg !7246
  br label %if.end113, !dbg !7247

if.else102:                                       ; preds = %for.end85
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !7248
  %aux103 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 2, !dbg !7248
  %79 = load i8*, i8** %aux103, align 8, !dbg !7248
  %80 = bitcast i8* %79 to %struct.bb_bitmap_sets*, !dbg !7248
  %pa_in104 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %80, i32 0, i32 5, !dbg !7248
  %81 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in104, align 8, !dbg !7248
  %expressions105 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %81, i32 0, i32 0, !dbg !7248
  %82 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions105, align 8, !dbg !7248
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %82, i32 0, i32* %i77), !dbg !7248
  br label %for.cond106, !dbg !7248

for.cond106:                                      ; preds = %for.inc111, %if.else102
  %call107 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7250
  %tobool108 = icmp ne i8 %call107, 0, !dbg !7248
  br i1 %tobool108, label %for.body109, label %for.end112, !dbg !7248

for.body109:                                      ; preds = %for.cond106
  %83 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7252
  %84 = load i32, i32* %i77, align 4, !dbg !7253
  %call110 = call %struct.pre_expr_d* @expression_for_id(i32 %84), !dbg !7254
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %83, %struct.pre_expr_d* %call110), !dbg !7255
  br label %for.inc111, !dbg !7255

for.inc111:                                       ; preds = %for.body109
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i77), !dbg !7250
  br label %for.cond106, !dbg !7250, !llvm.loop !7256

for.end112:                                       ; preds = %for.cond106
  br label %if.end113

if.end113:                                        ; preds = %for.end112, %for.end101
  br label %for.inc114, !dbg !7258

for.inc114:                                       ; preds = %if.end113
  %85 = load i64, i64* %i, align 8, !dbg !7259
  %inc = add i64 %85, 1, !dbg !7259
  store i64 %inc, i64* %i, align 8, !dbg !7259
  br label %for.cond66, !dbg !7260, !llvm.loop !7261

for.end115:                                       ; preds = %cond.end71
  br label %if.end116, !dbg !7263

if.end116:                                        ; preds = %for.end115, %cond.end60
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %worklist), !dbg !7264
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.end28
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then18
  %86 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7265
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7266
  %aux119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 2, !dbg !7266
  %88 = load i8*, i8** %aux119, align 8, !dbg !7266
  %89 = bitcast i8* %88 to %struct.bb_bitmap_sets*, !dbg !7266
  %tmp_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %89, i32 0, i32 2, !dbg !7266
  %90 = load %struct.bitmap_set*, %struct.bitmap_set** %tmp_gen, align 8, !dbg !7266
  %call120 = call %struct.bitmap_set* @bitmap_set_subtract(%struct.bitmap_set* %86, %struct.bitmap_set* %90), !dbg !7267
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7268
  %aux121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 2, !dbg !7268
  %92 = load i8*, i8** %aux121, align 8, !dbg !7268
  %93 = bitcast i8* %92 to %struct.bb_bitmap_sets*, !dbg !7268
  %pa_in122 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %93, i32 0, i32 5, !dbg !7268
  store %struct.bitmap_set* %call120, %struct.bitmap_set** %pa_in122, align 8, !dbg !7269
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7270
  %aux123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 2, !dbg !7270
  %95 = load i8*, i8** %aux123, align 8, !dbg !7270
  %96 = bitcast i8* %95 to %struct.bb_bitmap_sets*, !dbg !7270
  %pa_in124 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %96, i32 0, i32 5, !dbg !7270
  %97 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in124, align 8, !dbg !7270
  %values125 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %97, i32 0, i32 1, !dbg !7271
  %98 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values125, align 8, !dbg !7271
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7272
  %aux126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 2, !dbg !7272
  %100 = load i8*, i8** %aux126, align 8, !dbg !7272
  %101 = bitcast i8* %100 to %struct.bb_bitmap_sets*, !dbg !7272
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %101, i32 0, i32 1, !dbg !7272
  %102 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !7272
  %values127 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %102, i32 0, i32 1, !dbg !7273
  %103 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values127, align 8, !dbg !7273
  %call128 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %98, %struct.bitmap_head_def* %103), !dbg !7274
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7275
  %aux129 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 2, !dbg !7275
  %105 = load i8*, i8** %aux129, align 8, !dbg !7275
  %106 = bitcast i8* %105 to %struct.bb_bitmap_sets*, !dbg !7275
  %pa_in130 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %106, i32 0, i32 5, !dbg !7275
  %107 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in130, align 8, !dbg !7275
  %expressions131 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %107, i32 0, i32 0, !dbg !7276
  %108 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions131, align 8, !dbg !7276
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7277
  %aux132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 2, !dbg !7277
  %110 = load i8*, i8** %aux132, align 8, !dbg !7277
  %111 = bitcast i8* %110 to %struct.bb_bitmap_sets*, !dbg !7277
  %phi_gen133 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %111, i32 0, i32 1, !dbg !7277
  %112 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen133, align 8, !dbg !7277
  %expressions134 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %112, i32 0, i32 0, !dbg !7278
  %113 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions134, align 8, !dbg !7278
  %call135 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %108, %struct.bitmap_head_def* %113), !dbg !7279
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7280
  %aux136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 2, !dbg !7280
  %115 = load i8*, i8** %aux136, align 8, !dbg !7280
  %116 = bitcast i8* %115 to %struct.bb_bitmap_sets*, !dbg !7280
  %pa_in137 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %116, i32 0, i32 5, !dbg !7280
  %117 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in137, align 8, !dbg !7280
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7281
  %aux138 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 2, !dbg !7281
  %119 = load i8*, i8** %aux138, align 8, !dbg !7281
  %120 = bitcast i8* %119 to %struct.bb_bitmap_sets*, !dbg !7281
  %antic_in139 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %120, i32 0, i32 4, !dbg !7281
  %121 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in139, align 8, !dbg !7281
  call void @bitmap_set_subtract_values(%struct.bitmap_set* %117, %struct.bitmap_set* %121), !dbg !7282
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7283
  %aux140 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 2, !dbg !7283
  %123 = load i8*, i8** %aux140, align 8, !dbg !7283
  %124 = bitcast i8* %123 to %struct.bb_bitmap_sets*, !dbg !7283
  %pa_in141 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %124, i32 0, i32 5, !dbg !7283
  %125 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in141, align 8, !dbg !7283
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7284
  %aux142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %126, i32 0, i32 2, !dbg !7284
  %127 = load i8*, i8** %aux142, align 8, !dbg !7284
  %128 = bitcast i8* %127 to %struct.bb_bitmap_sets*, !dbg !7284
  %antic_in143 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %128, i32 0, i32 4, !dbg !7284
  %129 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in143, align 8, !dbg !7284
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7285
  call void @dependent_clean(%struct.bitmap_set* %125, %struct.bitmap_set* %129, %struct.basic_block_def* %130), !dbg !7286
  %131 = load %struct.bitmap_set*, %struct.bitmap_set** %old_PA_IN, align 8, !dbg !7287
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7289
  %aux144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 2, !dbg !7289
  %133 = load i8*, i8** %aux144, align 8, !dbg !7289
  %134 = bitcast i8* %133 to %struct.bb_bitmap_sets*, !dbg !7289
  %pa_in145 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %134, i32 0, i32 5, !dbg !7289
  %135 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in145, align 8, !dbg !7289
  %call146 = call zeroext i8 @bitmap_set_equal(%struct.bitmap_set* %131, %struct.bitmap_set* %135), !dbg !7290
  %tobool147 = icmp ne i8 %call146, 0, !dbg !7290
  br i1 %tobool147, label %if.else158, label %if.then148, !dbg !7291

if.then148:                                       ; preds = %if.end118
  store i8 1, i8* %changed, align 1, !dbg !7292
  %136 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7294
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7295
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %137, i32 0, i32 9, !dbg !7296
  %138 = load i32, i32* %index, align 8, !dbg !7296
  call void @SET_BIT(%struct.simple_bitmap_def* %136, i32 %138), !dbg !7297
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7298
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %139, i32 0, i32 0, !dbg !7298
  %call150 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7298
  %140 = bitcast %struct.edge_iterator* %tmp149 to { i32, %struct.VEC_edge_gc** }*, !dbg !7298
  %141 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %140, i32 0, i32 0, !dbg !7298
  %142 = extractvalue { i32, %struct.VEC_edge_gc** } %call150, 0, !dbg !7298
  store i32 %142, i32* %141, align 8, !dbg !7298
  %143 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %140, i32 0, i32 1, !dbg !7298
  %144 = extractvalue { i32, %struct.VEC_edge_gc** } %call150, 1, !dbg !7298
  store %struct.VEC_edge_gc** %144, %struct.VEC_edge_gc*** %143, align 8, !dbg !7298
  %145 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7298
  %146 = bitcast %struct.edge_iterator* %tmp149 to i8*, !dbg !7298
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* align 8 %146, i64 16, i1 false), !dbg !7298
  br label %for.cond151, !dbg !7298

for.cond151:                                      ; preds = %for.inc156, %if.then148
  %147 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7300
  %148 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %147, i32 0, i32 0, !dbg !7300
  %149 = load i32, i32* %148, align 8, !dbg !7300
  %150 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %147, i32 0, i32 1, !dbg !7300
  %151 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %150, align 8, !dbg !7300
  %call152 = call zeroext i8 @ei_cond(i32 %149, %struct.VEC_edge_gc** %151, %struct.edge_def** %e), !dbg !7300
  %tobool153 = icmp ne i8 %call152, 0, !dbg !7298
  br i1 %tobool153, label %for.body154, label %for.end157, !dbg !7298

for.body154:                                      ; preds = %for.cond151
  %152 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7302
  %153 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7303
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %153, i32 0, i32 0, !dbg !7304
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7304
  %index155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 9, !dbg !7305
  %155 = load i32, i32* %index155, align 8, !dbg !7305
  call void @SET_BIT(%struct.simple_bitmap_def* %152, i32 %155), !dbg !7306
  br label %for.inc156, !dbg !7306

for.inc156:                                       ; preds = %for.body154
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7300
  br label %for.cond151, !dbg !7300, !llvm.loop !7307

for.end157:                                       ; preds = %for.cond151
  br label %if.end160, !dbg !7309

if.else158:                                       ; preds = %if.end118
  %156 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7310
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7311
  %index159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 9, !dbg !7312
  %158 = load i32, i32* %index159, align 8, !dbg !7312
  call void @RESET_BIT(%struct.simple_bitmap_def* %156, i32 %158), !dbg !7313
  br label %if.end160

if.end160:                                        ; preds = %if.else158, %for.end157
  br label %maybe_dump_sets, !dbg !7314

maybe_dump_sets:                                  ; preds = %if.end160, %if.then8, %if.then
  call void @llvm.dbg.label(metadata !7315), !dbg !7316
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7317
  %tobool161 = icmp ne %struct._IO_FILE* %159, null, !dbg !7317
  br i1 %tobool161, label %land.lhs.true162, label %if.end173, !dbg !7319

land.lhs.true162:                                 ; preds = %maybe_dump_sets
  %160 = load i32, i32* @dump_flags, align 4, !dbg !7320
  %and163 = and i32 %160, 8, !dbg !7321
  %tobool164 = icmp ne i32 %and163, 0, !dbg !7321
  br i1 %tobool164, label %if.then165, label %if.end173, !dbg !7322

if.then165:                                       ; preds = %land.lhs.true162
  %161 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7323
  %tobool166 = icmp ne %struct.bitmap_set* %161, null, !dbg !7323
  br i1 %tobool166, label %if.then167, label %if.end169, !dbg !7326

if.then167:                                       ; preds = %if.then165
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7327
  %163 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7328
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7329
  %index168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %164, i32 0, i32 9, !dbg !7330
  %165 = load i32, i32* %index168, align 8, !dbg !7330
  call void @print_bitmap_set(%struct._IO_FILE* %162, %struct.bitmap_set* %163, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 %165), !dbg !7331
  br label %if.end169, !dbg !7331

if.end169:                                        ; preds = %if.then167, %if.then165
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7332
  %167 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7333
  %aux170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %167, i32 0, i32 2, !dbg !7333
  %168 = load i8*, i8** %aux170, align 8, !dbg !7333
  %169 = bitcast i8* %168 to %struct.bb_bitmap_sets*, !dbg !7333
  %pa_in171 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %169, i32 0, i32 5, !dbg !7333
  %170 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in171, align 8, !dbg !7333
  %171 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7334
  %index172 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %171, i32 0, i32 9, !dbg !7335
  %172 = load i32, i32* %index172, align 8, !dbg !7335
  call void @print_bitmap_set(%struct._IO_FILE* %166, %struct.bitmap_set* %170, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i64 0, i64 0), i32 %172), !dbg !7336
  br label %if.end173, !dbg !7337

if.end173:                                        ; preds = %if.end169, %land.lhs.true162, %maybe_dump_sets
  %173 = load %struct.bitmap_set*, %struct.bitmap_set** %old_PA_IN, align 8, !dbg !7338
  %tobool174 = icmp ne %struct.bitmap_set* %173, null, !dbg !7338
  br i1 %tobool174, label %if.then175, label %if.end176, !dbg !7340

if.then175:                                       ; preds = %if.end173
  %174 = load %struct.bitmap_set*, %struct.bitmap_set** %old_PA_IN, align 8, !dbg !7341
  call void @bitmap_set_free(%struct.bitmap_set* %174), !dbg !7342
  br label %if.end176, !dbg !7342

if.end176:                                        ; preds = %if.then175, %if.end173
  %175 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7343
  %tobool177 = icmp ne %struct.bitmap_set* %175, null, !dbg !7343
  br i1 %tobool177, label %if.then178, label %if.end179, !dbg !7345

if.then178:                                       ; preds = %if.end176
  %176 = load %struct.bitmap_set*, %struct.bitmap_set** %PA_OUT, align 8, !dbg !7346
  call void @bitmap_set_free(%struct.bitmap_set* %176), !dbg !7347
  br label %if.end179, !dbg !7347

if.end179:                                        ; preds = %if.then178, %if.end176
  %177 = load i8, i8* %changed, align 1, !dbg !7348
  ret i8 %177, !dbg !7349
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !7350 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !7351, metadata !DIExpression()), !dbg !7352
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !7353
  %3 = load i32, i32* %index, align 8, !dbg !7353
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7354
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7354
  %6 = load i32, i32* %5, align 8, !dbg !7354
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7354
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !7354
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !7354
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !7354
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7354

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !7354
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !7354
  %11 = load i32, i32* %10, align 8, !dbg !7354
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !7354
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !7354
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !7354
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !7354
  br label %cond.end, !dbg !7354

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7354
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7354
  %cmp = icmp eq i32 %3, %call2, !dbg !7355
  %conv = zext i1 %cmp to i32, !dbg !7355
  %conv3 = trunc i32 %conv to i8, !dbg !7356
  ret i8 %conv3, !dbg !7357
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !7358 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7361, metadata !DIExpression()), !dbg !7362
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7363
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7363
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7363
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !7363
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7363

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7363
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !7363
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !7363
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !7363
  br label %cond.end, !dbg !7363

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7363

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7363
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7363
  %cmp = icmp eq i32 %call, 1, !dbg !7364
  %conv = zext i1 %cmp to i32, !dbg !7364
  %conv2 = trunc i32 %conv to i8, !dbg !7363
  ret i8 %conv2, !dbg !7365
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !7366 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7369, metadata !DIExpression()), !dbg !7370
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7371
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !7372
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !7373
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7373
  ret %struct.basic_block_def* %1, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @defer_or_phi_translate_block(%struct.bitmap_set* %dest, %struct.bitmap_set* %source, %struct.basic_block_def* %block, %struct.basic_block_def* %phiblock) #0 !dbg !7375 {
entry:
  %retval = alloca i8, align 1
  %dest.addr = alloca %struct.bitmap_set*, align 8
  %source.addr = alloca %struct.bitmap_set*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %phiblock.addr = alloca %struct.basic_block_def*, align 8
  store %struct.bitmap_set* %dest, %struct.bitmap_set** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %dest.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  store %struct.bitmap_set* %source, %struct.bitmap_set** %source.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %source.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !7382, metadata !DIExpression()), !dbg !7383
  store %struct.basic_block_def* %phiblock, %struct.basic_block_def** %phiblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %phiblock.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !7386
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !7386
  %1 = load i8*, i8** %aux, align 8, !dbg !7386
  %2 = bitcast i8* %1 to %struct.bb_bitmap_sets*, !dbg !7386
  %visited = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %2, i32 0, i32 8, !dbg !7386
  %bf.load = load i8, i8* %visited, align 8, !dbg !7386
  %bf.clear = and i8 %bf.load, 1, !dbg !7386
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7386
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7386
  br i1 %tobool, label %if.else, label %if.then, !dbg !7388

if.then:                                          ; preds = %entry
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @changed_blocks, align 8, !dbg !7389
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7391
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !7392
  %5 = load i32, i32* %index, align 8, !dbg !7392
  call void @SET_BIT(%struct.simple_bitmap_def* %3, i32 %5), !dbg !7393
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7394
  %aux1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 2, !dbg !7394
  %7 = load i8*, i8** %aux1, align 8, !dbg !7394
  %8 = bitcast i8* %7 to %struct.bb_bitmap_sets*, !dbg !7394
  %visited2 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %8, i32 0, i32 8, !dbg !7394
  %bf.load3 = load i8, i8* %visited2, align 8, !dbg !7395
  %bf.clear4 = and i8 %bf.load3, -2, !dbg !7395
  store i8 %bf.clear4, i8* %visited2, align 8, !dbg !7395
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7396
  %aux5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 2, !dbg !7396
  %10 = load i8*, i8** %aux5, align 8, !dbg !7396
  %11 = bitcast i8* %10 to %struct.bb_bitmap_sets*, !dbg !7396
  %deferred = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %11, i32 0, i32 8, !dbg !7396
  %bf.load6 = load i8, i8* %deferred, align 8, !dbg !7397
  %bf.clear7 = and i8 %bf.load6, -3, !dbg !7397
  %bf.set = or i8 %bf.clear7, 2, !dbg !7397
  store i8 %bf.set, i8* %deferred, align 8, !dbg !7397
  store i8 0, i8* %retval, align 1, !dbg !7398
  br label %return, !dbg !7398

if.else:                                          ; preds = %entry
  %12 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7399
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %source.addr, align 8, !dbg !7400
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7401
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !7402
  call void @phi_translate_set(%struct.bitmap_set* %12, %struct.bitmap_set* %13, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !7403
  br label %if.end

if.end:                                           ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !7404
  br label %return, !dbg !7404

return:                                           ; preds = %if.end, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !7405
  ret i8 %16, !dbg !7405
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %alloc_) #0 !dbg !7406 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7409, metadata !DIExpression()), !dbg !7410
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7410
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7410
  %1 = bitcast i8* %call to %struct.VEC_basic_block_heap*, !dbg !7410
  ret %struct.VEC_basic_block_heap* %1, !dbg !7410
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !7411 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7415, metadata !DIExpression()), !dbg !7416
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !7417, metadata !DIExpression()), !dbg !7416
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !7418, metadata !DIExpression()), !dbg !7416
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7416
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !7416
  %1 = load i32, i32* %num, align 8, !dbg !7416
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7416
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !7416
  %3 = load i32, i32* %alloc, align 4, !dbg !7416
  %cmp = icmp ult i32 %1, %3, !dbg !7416
  %conv = zext i1 %cmp to i32, !dbg !7416
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7416
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !7416
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7416
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !7416
  %6 = load i32, i32* %num1, align 8, !dbg !7416
  %inc = add i32 %6, 1, !dbg !7416
  store i32 %inc, i32* %num1, align 8, !dbg !7416
  %idxprom = zext i32 %6 to i64, !dbg !7416
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7416
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !7416
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !7416
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7416
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !7416
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7416
  ret %struct.basic_block_def** %9, !dbg !7416
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !7419 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !7423, metadata !DIExpression()), !dbg !7424
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7425
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !7425
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !7425
  br i1 %tobool, label %if.then, label %if.end, !dbg !7424

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7425
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !7425
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !7425
  call void @free(i8* %4), !dbg !7425
  br label %if.end, !dbg !7425

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7424
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !7424
  ret void, !dbg !7424
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !7427 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7430, metadata !DIExpression()), !dbg !7431
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7432
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !7433
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7434

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7435
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7436
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7436
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !7437
  br label %lor.end, !dbg !7434

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !7434
  %conv = trunc i32 %lor.ext to i8, !dbg !7432
  ret i8 %conv, !dbg !7438
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !7439 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7440, metadata !DIExpression()), !dbg !7441
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7442
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7442
  %1 = load i32, i32* %flags, align 8, !dbg !7442
  %and = and i32 %1, 512, !dbg !7442
  %tobool = icmp ne i32 %and, 0, !dbg !7442
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7442

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7442
  br label %cond.end, !dbg !7442

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7442

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7442
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7443
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7445
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !7446
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7446
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !7443
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7447

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !7448
  br label %return, !dbg !7448

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7449
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7450
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !7451
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !7451
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !7452
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !7452
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !7453
  br label %return, !dbg !7453

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !7454
  ret %struct.gimple_seq_d* %7, !dbg !7454
}

; Function Attrs: noinline nounwind uwtable
define internal void @phi_translate_set(%struct.bitmap_set* %dest, %struct.bitmap_set* %set, %struct.basic_block_def* %pred, %struct.basic_block_def* %phiblock) #0 !dbg !7455 {
entry:
  %dest.addr = alloca %struct.bitmap_set*, align 8
  %set.addr = alloca %struct.bitmap_set*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %phiblock.addr = alloca %struct.basic_block_def*, align 8
  %exprs = alloca %struct.VEC_pre_expr_heap*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  %translated = alloca %struct.pre_expr_d*, align 8
  store %struct.bitmap_set* %dest, %struct.bitmap_set** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %dest.addr, metadata !7458, metadata !DIExpression()), !dbg !7459
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !7462, metadata !DIExpression()), !dbg !7463
  store %struct.basic_block_def* %phiblock, %struct.basic_block_def** %phiblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %phiblock.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %exprs, metadata !7466, metadata !DIExpression()), !dbg !7467
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !7468, metadata !DIExpression()), !dbg !7469
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7470, metadata !DIExpression()), !dbg !7471
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !7472
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %0), !dbg !7474
  %call1 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call), !dbg !7475
  %tobool = icmp ne i8 %call1, 0, !dbg !7475
  br i1 %tobool, label %if.then, label %if.end, !dbg !7476

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7477
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7479
  call void @bitmap_set_copy(%struct.bitmap_set* %1, %struct.bitmap_set* %2), !dbg !7480
  br label %return, !dbg !7481

if.end:                                           ; preds = %entry
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7482
  %call2 = call %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %3), !dbg !7483
  store %struct.VEC_pre_expr_heap* %call2, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7484
  store i32 0, i32* %i, align 4, !dbg !7485
  br label %for.cond, !dbg !7487

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7488
  %tobool3 = icmp ne %struct.VEC_pre_expr_heap* %4, null, !dbg !7488
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !7488

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7488
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %5, i32 0, i32 0, !dbg !7488
  br label %cond.end, !dbg !7488

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7488
  %6 = load i32, i32* %i, align 4, !dbg !7488
  %call4 = call i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %cond, i32 %6, %struct.pre_expr_d** %expr), !dbg !7488
  %tobool5 = icmp ne i32 %call4, 0, !dbg !7490
  br i1 %tobool5, label %for.body, label %for.end, !dbg !7490

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %translated, metadata !7491, metadata !DIExpression()), !dbg !7493
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !7494
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7495
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7496
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !7497
  %call6 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %7, %struct.bitmap_set* %8, %struct.bitmap_set* null, %struct.basic_block_def* %9, %struct.basic_block_def* %10), !dbg !7498
  store %struct.pre_expr_d* %call6, %struct.pre_expr_d** %translated, align 8, !dbg !7499
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %translated, align 8, !dbg !7500
  %tobool7 = icmp ne %struct.pre_expr_d* %11, null, !dbg !7500
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !7502

if.then8:                                         ; preds = %for.body
  br label %for.inc, !dbg !7503

if.end9:                                          ; preds = %for.body
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %translated, align 8, !dbg !7504
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %12, i32 0, i32 0, !dbg !7506
  %13 = load i32, i32* %kind, align 8, !dbg !7506
  %cmp = icmp eq i32 %13, 0, !dbg !7507
  br i1 %cmp, label %if.then10, label %if.else, !dbg !7508

if.then10:                                        ; preds = %if.end9
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7509
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %translated, align 8, !dbg !7510
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %14, %struct.pre_expr_d* %15), !dbg !7511
  br label %if.end11, !dbg !7511

if.else:                                          ; preds = %if.end9
  %16 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7512
  %17 = load %struct.pre_expr_d*, %struct.pre_expr_d** %translated, align 8, !dbg !7513
  call void @bitmap_value_insert_into_set(%struct.bitmap_set* %16, %struct.pre_expr_d* %17), !dbg !7514
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then10
  br label %for.inc, !dbg !7515

for.inc:                                          ; preds = %if.end11, %if.then8
  %18 = load i32, i32* %i, align 4, !dbg !7516
  %inc = add nsw i32 %18, 1, !dbg !7516
  store i32 %inc, i32* %i, align 4, !dbg !7516
  br label %for.cond, !dbg !7517, !llvm.loop !7518

for.end:                                          ; preds = %cond.end
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %exprs), !dbg !7520
  br label %return, !dbg !7521

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !7521
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !7522 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7525, metadata !DIExpression()), !dbg !7526
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7527, metadata !DIExpression()), !dbg !7526
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !7528, metadata !DIExpression()), !dbg !7526
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7529
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !7529
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7529

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7529
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7529
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !7529
  %3 = load i32, i32* %num, align 8, !dbg !7529
  %cmp = icmp ult i32 %1, %3, !dbg !7529
  br i1 %cmp, label %if.then, label %if.else, !dbg !7526

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7531
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !7531
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7531
  %idxprom = zext i32 %5 to i64, !dbg !7531
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7531
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !7531
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !7531
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !7531
  store i32 1, i32* %retval, align 4, !dbg !7531
  br label %return, !dbg !7531

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !7533
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !7533
  store i32 0, i32* %retval, align 4, !dbg !7533
  br label %return, !dbg !7533

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7526
  ret i32 %9, !dbg !7526
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_set_and(%struct.bitmap_set* %dest, %struct.bitmap_set* %orig) #0 !dbg !7535 {
entry:
  %dest.addr = alloca %struct.bitmap_set*, align 8
  %orig.addr = alloca %struct.bitmap_set*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %temp = alloca %struct.bitmap_head_def*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %value_id = alloca i32, align 4
  store %struct.bitmap_set* %dest, %struct.bitmap_set** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %dest.addr, metadata !7536, metadata !DIExpression()), !dbg !7537
  store %struct.bitmap_set* %orig, %struct.bitmap_set** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %orig.addr, metadata !7538, metadata !DIExpression()), !dbg !7539
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7540, metadata !DIExpression()), !dbg !7541
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7542, metadata !DIExpression()), !dbg !7543
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7544
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %orig.addr, align 8, !dbg !7546
  %cmp = icmp ne %struct.bitmap_set* %0, %1, !dbg !7547
  br i1 %cmp, label %if.then, label %if.end11, !dbg !7548

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %temp, metadata !7549, metadata !DIExpression()), !dbg !7551
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !7552
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %temp, align 8, !dbg !7551
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7553
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !7554
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7554
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %orig.addr, align 8, !dbg !7555
  %values1 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 1, !dbg !7556
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values1, align 8, !dbg !7556
  call void @bitmap_and_into(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %5), !dbg !7557
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7558
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7559
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %7, i32 0, i32 0, !dbg !7560
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7560
  call void @bitmap_copy(%struct.bitmap_head_def* %6, %struct.bitmap_head_def* %8), !dbg !7561
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7562
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %9, i32 0, i32* %i), !dbg !7562
  br label %for.cond, !dbg !7562

for.cond:                                         ; preds = %for.inc, %if.then
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7564
  %tobool = icmp ne i8 %call2, 0, !dbg !7562
  br i1 %tobool, label %for.body, label %for.end, !dbg !7562

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !7566, metadata !DIExpression()), !dbg !7568
  %10 = load i32, i32* %i, align 4, !dbg !7569
  %call3 = call %struct.pre_expr_d* @expression_for_id(i32 %10), !dbg !7570
  store %struct.pre_expr_d* %call3, %struct.pre_expr_d** %expr, align 8, !dbg !7568
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !7571, metadata !DIExpression()), !dbg !7572
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !7573
  %call4 = call i32 @get_expr_value_id(%struct.pre_expr_d* %11), !dbg !7574
  store i32 %call4, i32* %value_id, align 4, !dbg !7572
  %12 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7575
  %values5 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %12, i32 0, i32 1, !dbg !7577
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values5, align 8, !dbg !7577
  %14 = load i32, i32* %value_id, align 4, !dbg !7578
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %13, i32 %14), !dbg !7579
  %tobool7 = icmp ne i32 %call6, 0, !dbg !7579
  br i1 %tobool7, label %if.end, label %if.then8, !dbg !7580

if.then8:                                         ; preds = %for.body
  %15 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7581
  %expressions9 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %15, i32 0, i32 0, !dbg !7582
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions9, align 8, !dbg !7582
  %17 = load i32, i32* %i, align 4, !dbg !7583
  %call10 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %16, i32 %17), !dbg !7584
  br label %if.end, !dbg !7584

if.end:                                           ; preds = %if.then8, %for.body
  br label %for.inc, !dbg !7585

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7564
  br label %for.cond, !dbg !7564, !llvm.loop !7586

for.end:                                          ; preds = %for.cond
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7588
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %18), !dbg !7588
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %temp, align 8, !dbg !7588
  br label %if.end11, !dbg !7589

if.end11:                                         ; preds = %for.end, %entry
  ret void, !dbg !7590
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_set_free(%struct.bitmap_set* %set) #0 !dbg !7591 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !7592, metadata !DIExpression()), !dbg !7593
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7594
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 0, !dbg !7594
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7594
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %1), !dbg !7594
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7594
  %expressions1 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 0, !dbg !7594
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %expressions1, align 8, !dbg !7594
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7595
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %3, i32 0, i32 1, !dbg !7595
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7595
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %4), !dbg !7595
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7595
  %values2 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %5, i32 0, i32 1, !dbg !7595
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %values2, align 8, !dbg !7595
  ret void, !dbg !7596
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.bitmap_set* @bitmap_set_subtract(%struct.bitmap_set* %dest, %struct.bitmap_set* %orig) #0 !dbg !7597 {
entry:
  %dest.addr = alloca %struct.bitmap_set*, align 8
  %orig.addr = alloca %struct.bitmap_set*, align 8
  %result = alloca %struct.bitmap_set*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %expr = alloca %struct.pre_expr_d*, align 8
  %value_id = alloca i32, align 4
  store %struct.bitmap_set* %dest, %struct.bitmap_set** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %dest.addr, metadata !7600, metadata !DIExpression()), !dbg !7601
  store %struct.bitmap_set* %orig, %struct.bitmap_set** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %orig.addr, metadata !7602, metadata !DIExpression()), !dbg !7603
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %result, metadata !7604, metadata !DIExpression()), !dbg !7605
  %call = call %struct.bitmap_set* @bitmap_set_new(), !dbg !7606
  store %struct.bitmap_set* %call, %struct.bitmap_set** %result, align 8, !dbg !7605
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7607, metadata !DIExpression()), !dbg !7608
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7609, metadata !DIExpression()), !dbg !7610
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %result, align 8, !dbg !7611
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 0, !dbg !7612
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7612
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %dest.addr, align 8, !dbg !7613
  %expressions1 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 0, !dbg !7614
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions1, align 8, !dbg !7614
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %orig.addr, align 8, !dbg !7615
  %expressions2 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 0, !dbg !7616
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions2, align 8, !dbg !7616
  %call3 = call zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* %3, %struct.bitmap_head_def* %5), !dbg !7617
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %result, align 8, !dbg !7618
  %expressions4 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %6, i32 0, i32 0, !dbg !7618
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions4, align 8, !dbg !7618
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %7, i32 0, i32* %i), !dbg !7618
  br label %for.cond, !dbg !7618

for.cond:                                         ; preds = %for.inc, %entry
  %call5 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7620
  %tobool = icmp ne i8 %call5, 0, !dbg !7618
  br i1 %tobool, label %for.body, label %for.end, !dbg !7618

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !7622, metadata !DIExpression()), !dbg !7624
  %8 = load i32, i32* %i, align 4, !dbg !7625
  %call6 = call %struct.pre_expr_d* @expression_for_id(i32 %8), !dbg !7626
  store %struct.pre_expr_d* %call6, %struct.pre_expr_d** %expr, align 8, !dbg !7624
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !7627, metadata !DIExpression()), !dbg !7628
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !7629
  %call7 = call i32 @get_expr_value_id(%struct.pre_expr_d* %9), !dbg !7630
  store i32 %call7, i32* %value_id, align 4, !dbg !7628
  %10 = load %struct.bitmap_set*, %struct.bitmap_set** %result, align 8, !dbg !7631
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %10, i32 0, i32 1, !dbg !7632
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7632
  %12 = load i32, i32* %value_id, align 4, !dbg !7633
  %call8 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %12), !dbg !7634
  br label %for.inc, !dbg !7635

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7620
  br label %for.cond, !dbg !7620, !llvm.loop !7636

for.end:                                          ; preds = %for.cond
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %result, align 8, !dbg !7638
  ret %struct.bitmap_set* %13, !dbg !7639
}

; Function Attrs: noinline nounwind uwtable
define internal void @clean(%struct.bitmap_set* %set, %struct.basic_block_def* %block) #0 !dbg !7640 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %exprs = alloca %struct.VEC_pre_expr_heap*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !7643, metadata !DIExpression()), !dbg !7644
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !7645, metadata !DIExpression()), !dbg !7646
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %exprs, metadata !7647, metadata !DIExpression()), !dbg !7648
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7649
  %call = call %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %0), !dbg !7650
  store %struct.VEC_pre_expr_heap* %call, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7648
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !7651, metadata !DIExpression()), !dbg !7652
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7653, metadata !DIExpression()), !dbg !7654
  store i32 0, i32* %i, align 4, !dbg !7655
  br label %for.cond, !dbg !7657

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7658
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %1, null, !dbg !7658
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7658

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !7658
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %2, i32 0, i32 0, !dbg !7658
  br label %cond.end, !dbg !7658

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7658

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7658
  %3 = load i32, i32* %i, align 4, !dbg !7658
  %call1 = call i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %cond, i32 %3, %struct.pre_expr_d** %expr), !dbg !7658
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7660
  br i1 %tobool2, label %for.body, label %for.end, !dbg !7660

for.body:                                         ; preds = %cond.end
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7661
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !7664
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !7665
  %call3 = call zeroext i8 @valid_in_sets(%struct.bitmap_set* %4, %struct.bitmap_set* null, %struct.pre_expr_d* %5, %struct.basic_block_def* %6), !dbg !7666
  %tobool4 = icmp ne i8 %call3, 0, !dbg !7666
  br i1 %tobool4, label %if.end, label %if.then, !dbg !7667

if.then:                                          ; preds = %for.body
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7668
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !7669
  call void @bitmap_remove_from_set(%struct.bitmap_set* %7, %struct.pre_expr_d* %8), !dbg !7670
  br label %if.end, !dbg !7670

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7671

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !7672
  %inc = add nsw i32 %9, 1, !dbg !7672
  store i32 %inc, i32* %i, align 4, !dbg !7672
  br label %for.cond, !dbg !7673, !llvm.loop !7674

for.end:                                          ; preds = %cond.end
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %exprs), !dbg !7676
  ret void, !dbg !7677
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bitmap_set_equal(%struct.bitmap_set* %a, %struct.bitmap_set* %b) #0 !dbg !7678 {
entry:
  %a.addr = alloca %struct.bitmap_set*, align 8
  %b.addr = alloca %struct.bitmap_set*, align 8
  store %struct.bitmap_set* %a, %struct.bitmap_set** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %a.addr, metadata !7681, metadata !DIExpression()), !dbg !7682
  store %struct.bitmap_set* %b, %struct.bitmap_set** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %b.addr, metadata !7683, metadata !DIExpression()), !dbg !7684
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %a.addr, align 8, !dbg !7685
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 1, !dbg !7686
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7686
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %b.addr, align 8, !dbg !7687
  %values1 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !7688
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values1, align 8, !dbg !7688
  %call = call zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* %3), !dbg !7689
  ret i8 %call, !dbg !7690
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !7691 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !7692, metadata !DIExpression()), !dbg !7693
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !7694, metadata !DIExpression()), !dbg !7695
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7696
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !7698
  %1 = load i8*, i8** %popcount, align 8, !dbg !7698
  %tobool = icmp ne i8* %1, null, !dbg !7696
  br i1 %tobool, label %if.then, label %if.end7, !dbg !7699

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !7700, metadata !DIExpression()), !dbg !7702
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7703
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7703
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !7703
  %div = udiv i32 %3, 64, !dbg !7703
  %idxprom = zext i32 %div to i64, !dbg !7703
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7703
  %4 = load i64, i64* %arrayidx, align 8, !dbg !7703
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !7703
  %rem = urem i32 %5, 64, !dbg !7703
  %sh_prom = zext i32 %rem to i64, !dbg !7703
  %shr = lshr i64 %4, %sh_prom, !dbg !7703
  %and = and i64 %shr, 1, !dbg !7703
  %conv = trunc i64 %and to i8, !dbg !7703
  store i8 %conv, i8* %oldbit, align 1, !dbg !7704
  %6 = load i8, i8* %oldbit, align 1, !dbg !7705
  %tobool1 = icmp ne i8 %6, 0, !dbg !7705
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !7707

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7708
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !7709
  %8 = load i8*, i8** %popcount3, align 8, !dbg !7709
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !7710
  %div4 = udiv i32 %9, 64, !dbg !7711
  %idxprom5 = zext i32 %div4 to i64, !dbg !7708
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !7708
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !7712
  %dec = add i8 %10, -1, !dbg !7712
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !7712
  br label %if.end, !dbg !7708

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !7713

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !7714
  %rem8 = urem i32 %11, 64, !dbg !7715
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !7716
  %shl = shl i64 1, %sh_prom9, !dbg !7716
  %neg = xor i64 %shl, -1, !dbg !7717
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !7718
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !7719
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !7720
  %div11 = udiv i32 %13, 64, !dbg !7721
  %idxprom12 = zext i32 %div11 to i64, !dbg !7718
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !7718
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !7722
  %and14 = and i64 %14, %neg, !dbg !7722
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !7722
  ret void, !dbg !7723
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !7724 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7727, metadata !DIExpression()), !dbg !7728
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7729
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !7729
  %tobool = icmp ne i8 %call, 0, !dbg !7729
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7729

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7729
  br label %cond.end, !dbg !7729

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7729

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7729
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7730
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !7730
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7730
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !7730
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7730

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7730
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !7730
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !7730
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !7730
  br label %cond.end5, !dbg !7730

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7730

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !7730
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !7730
  ret %struct.edge_def* %call7, !dbg !7731
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %set) #0 !dbg !7732 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %bj = alloca %struct.bitmap_iterator, align 8
  %result = alloca %struct.VEC_pre_expr_heap*, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !7735, metadata !DIExpression()), !dbg !7736
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7737, metadata !DIExpression()), !dbg !7738
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7739, metadata !DIExpression()), !dbg !7740
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7741, metadata !DIExpression()), !dbg !7742
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bj, metadata !7743, metadata !DIExpression()), !dbg !7744
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %result, metadata !7745, metadata !DIExpression()), !dbg !7746
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7747
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 1, !dbg !7747
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !7747
  %call = call i64 @bitmap_count_bits(%struct.bitmap_head_def* %1), !dbg !7747
  %conv = trunc i64 %call to i32, !dbg !7747
  %call1 = call %struct.VEC_pre_expr_heap* @VEC_pre_expr_heap_alloc(i32 %conv), !dbg !7747
  store %struct.VEC_pre_expr_heap* %call1, %struct.VEC_pre_expr_heap** %result, align 8, !dbg !7748
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7749
  %values2 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !7749
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values2, align 8, !dbg !7749
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !7749
  br label %for.cond, !dbg !7749

for.cond:                                         ; preds = %for.inc15, %entry
  %call3 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7751
  %tobool = icmp ne i8 %call3, 0, !dbg !7749
  br i1 %tobool, label %for.body, label %for.end16, !dbg !7749

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !7753, metadata !DIExpression()), !dbg !7755
  %4 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !7756
  %tobool4 = icmp ne %struct.VEC_bitmap_set_t_heap* %4, null, !dbg !7756
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !7756

cond.true:                                        ; preds = %for.body
  %5 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !7756
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %5, i32 0, i32 0, !dbg !7756
  br label %cond.end, !dbg !7756

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7756
  %6 = load i32, i32* %i, align 4, !dbg !7756
  %call5 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %6), !dbg !7756
  store %struct.bitmap_set* %call5, %struct.bitmap_set** %exprset, align 8, !dbg !7755
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !7757
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %7, i32 0, i32 0, !dbg !7757
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !7757
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bj, %struct.bitmap_head_def* %8, i32 0, i32* %j), !dbg !7757
  br label %for.cond6, !dbg !7757

for.cond6:                                        ; preds = %for.inc, %cond.end
  %call7 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bj, i32* %j), !dbg !7759
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7757
  br i1 %tobool8, label %for.body9, label %for.end, !dbg !7757

for.body9:                                        ; preds = %for.cond6
  %9 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7761
  %expressions10 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %9, i32 0, i32 0, !dbg !7764
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions10, align 8, !dbg !7764
  %11 = load i32, i32* %j, align 4, !dbg !7765
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %10, i32 %11), !dbg !7766
  %tobool12 = icmp ne i32 %call11, 0, !dbg !7766
  br i1 %tobool12, label %if.then, label %if.end, !dbg !7767

if.then:                                          ; preds = %for.body9
  %12 = load i32, i32* %j, align 4, !dbg !7768
  %call13 = call %struct.pre_expr_d* @expression_for_id(i32 %12), !dbg !7768
  %call14 = call %struct.pre_expr_d** @VEC_pre_expr_heap_safe_push(%struct.VEC_pre_expr_heap** %result, %struct.pre_expr_d* %call13), !dbg !7768
  br label %if.end, !dbg !7768

if.end:                                           ; preds = %if.then, %for.body9
  br label %for.inc, !dbg !7769

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bj, i32* %j), !dbg !7759
  br label %for.cond6, !dbg !7759, !llvm.loop !7770

for.end:                                          ; preds = %for.cond6
  br label %for.inc15, !dbg !7772

for.inc15:                                        ; preds = %for.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7751
  br label %for.cond, !dbg !7751, !llvm.loop !7773

for.end16:                                        ; preds = %for.cond
  %13 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %result, align 8, !dbg !7775
  ret %struct.VEC_pre_expr_heap* %13, !dbg !7776
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %vec_, i32 %ix_, %struct.pre_expr_d** %ptr) #0 !dbg !7777 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_pre_expr_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.pre_expr_d**, align 8
  store %struct.VEC_pre_expr_base* %vec_, %struct.VEC_pre_expr_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_base** %vec_.addr, metadata !7780, metadata !DIExpression()), !dbg !7781
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7782, metadata !DIExpression()), !dbg !7781
  store %struct.pre_expr_d** %ptr, %struct.pre_expr_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d*** %ptr.addr, metadata !7783, metadata !DIExpression()), !dbg !7781
  %0 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !7784
  %tobool = icmp ne %struct.VEC_pre_expr_base* %0, null, !dbg !7784
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7784

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7784
  %2 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !7784
  %num = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %2, i32 0, i32 0, !dbg !7784
  %3 = load i32, i32* %num, align 8, !dbg !7784
  %cmp = icmp ult i32 %1, %3, !dbg !7784
  br i1 %cmp, label %if.then, label %if.else, !dbg !7781

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_pre_expr_base*, %struct.VEC_pre_expr_base** %vec_.addr, align 8, !dbg !7786
  %vec = getelementptr inbounds %struct.VEC_pre_expr_base, %struct.VEC_pre_expr_base* %4, i32 0, i32 2, !dbg !7786
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7786
  %idxprom = zext i32 %5 to i64, !dbg !7786
  %arrayidx = getelementptr inbounds [1 x %struct.pre_expr_d*], [1 x %struct.pre_expr_d*]* %vec, i64 0, i64 %idxprom, !dbg !7786
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %arrayidx, align 8, !dbg !7786
  %7 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %ptr.addr, align 8, !dbg !7786
  store %struct.pre_expr_d* %6, %struct.pre_expr_d** %7, align 8, !dbg !7786
  store i32 1, i32* %retval, align 4, !dbg !7786
  br label %return, !dbg !7786

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %ptr.addr, align 8, !dbg !7788
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %8, align 8, !dbg !7788
  store i32 0, i32* %retval, align 4, !dbg !7788
  br label %return, !dbg !7788

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7781
  ret i32 %9, !dbg !7781
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %expr, %struct.bitmap_set* %set1, %struct.bitmap_set* %set2, %struct.basic_block_def* %pred, %struct.basic_block_def* %phiblock) #0 !dbg !7790 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %phiblock.addr = alloca %struct.basic_block_def*, align 8
  %phitrans = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !7793, metadata !DIExpression()), !dbg !7794
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !7795, metadata !DIExpression()), !dbg !7796
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !7797, metadata !DIExpression()), !dbg !7798
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !7799, metadata !DIExpression()), !dbg !7800
  store %struct.basic_block_def* %phiblock, %struct.basic_block_def** %phiblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %phiblock.addr, metadata !7801, metadata !DIExpression()), !dbg !7802
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %phitrans, metadata !7803, metadata !DIExpression()), !dbg !7804
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7805
  %tobool = icmp ne %struct.pre_expr_d* %0, null, !dbg !7805
  br i1 %tobool, label %if.end, label %if.then, !dbg !7807

if.then:                                          ; preds = %entry
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !7808
  br label %return, !dbg !7808

if.end:                                           ; preds = %entry
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7809
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %1, i32 0, i32 0, !dbg !7811
  %2 = load i32, i32* %kind, align 8, !dbg !7811
  %cmp = icmp eq i32 %2, 3, !dbg !7812
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !7813

if.then1:                                         ; preds = %if.end
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7814
  store %struct.pre_expr_d* %3, %struct.pre_expr_d** %retval, align 8, !dbg !7815
  br label %return, !dbg !7815

if.end2:                                          ; preds = %if.end
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7816
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %4), !dbg !7818
  %call3 = call zeroext i8 @value_id_constant_p(i32 %call), !dbg !7819
  %tobool4 = icmp ne i8 %call3, 0, !dbg !7819
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !7820

if.then5:                                         ; preds = %if.end2
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7821
  store %struct.pre_expr_d* %5, %struct.pre_expr_d** %retval, align 8, !dbg !7822
  br label %return, !dbg !7822

if.end6:                                          ; preds = %if.end2
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7823
  %kind7 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %6, i32 0, i32 0, !dbg !7825
  %7 = load i32, i32* %kind7, align 8, !dbg !7825
  %cmp8 = icmp ne i32 %7, 0, !dbg !7826
  br i1 %cmp8, label %if.then9, label %if.end14, !dbg !7827

if.then9:                                         ; preds = %if.end6
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7828
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7830
  %call10 = call %struct.pre_expr_d* @phi_trans_lookup(%struct.pre_expr_d* %8, %struct.basic_block_def* %9), !dbg !7831
  store %struct.pre_expr_d* %call10, %struct.pre_expr_d** %phitrans, align 8, !dbg !7832
  %10 = load %struct.pre_expr_d*, %struct.pre_expr_d** %phitrans, align 8, !dbg !7833
  %tobool11 = icmp ne %struct.pre_expr_d* %10, null, !dbg !7833
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7835

if.then12:                                        ; preds = %if.then9
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %phitrans, align 8, !dbg !7836
  store %struct.pre_expr_d* %11, %struct.pre_expr_d** %retval, align 8, !dbg !7837
  br label %return, !dbg !7837

if.end13:                                         ; preds = %if.then9
  br label %if.end14, !dbg !7838

if.end14:                                         ; preds = %if.end13, %if.end6
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7839
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !7840
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !7841
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7842
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !7843
  %call15 = call %struct.pre_expr_d* @phi_translate_1(%struct.pre_expr_d* %12, %struct.bitmap_set* %13, %struct.bitmap_set* %14, %struct.basic_block_def* %15, %struct.basic_block_def* %16), !dbg !7844
  store %struct.pre_expr_d* %call15, %struct.pre_expr_d** %phitrans, align 8, !dbg !7845
  %17 = load %struct.pre_expr_d*, %struct.pre_expr_d** %phitrans, align 8, !dbg !7846
  %tobool16 = icmp ne %struct.pre_expr_d* %17, null, !dbg !7846
  br i1 %tobool16, label %land.lhs.true, label %if.end20, !dbg !7848

land.lhs.true:                                    ; preds = %if.end14
  %18 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7849
  %kind17 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %18, i32 0, i32 0, !dbg !7850
  %19 = load i32, i32* %kind17, align 8, !dbg !7850
  %cmp18 = icmp ne i32 %19, 0, !dbg !7851
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !7852

if.then19:                                        ; preds = %land.lhs.true
  %20 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7853
  %21 = load %struct.pre_expr_d*, %struct.pre_expr_d** %phitrans, align 8, !dbg !7854
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7855
  call void @phi_trans_add(%struct.pre_expr_d* %20, %struct.pre_expr_d* %21, %struct.basic_block_def* %22), !dbg !7856
  br label %if.end20, !dbg !7856

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %if.end14
  %23 = load %struct.pre_expr_d*, %struct.pre_expr_d** %phitrans, align 8, !dbg !7857
  store %struct.pre_expr_d* %23, %struct.pre_expr_d** %retval, align 8, !dbg !7858
  br label %return, !dbg !7858

return:                                           ; preds = %if.end20, %if.then12, %if.then5, %if.then1, %if.then
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !7859
  ret %struct.pre_expr_d* %24, !dbg !7859
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_value_replace_in_set(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr) #0 !dbg !7860 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %val = alloca i32, align 4
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  call void @llvm.dbg.declare(metadata i32* %val, metadata !7865, metadata !DIExpression()), !dbg !7866
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7867
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %0), !dbg !7868
  store i32 %call, i32* %val, align 4, !dbg !7866
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7869
  %2 = load i32, i32* %val, align 4, !dbg !7871
  %call1 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %1, i32 %2), !dbg !7872
  %tobool = icmp ne i8 %call1, 0, !dbg !7872
  br i1 %tobool, label %if.then, label %if.else, !dbg !7873

if.then:                                          ; preds = %entry
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7874
  %4 = load i32, i32* %val, align 4, !dbg !7875
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7876
  call void @bitmap_set_replace_value(%struct.bitmap_set* %3, i32 %4, %struct.pre_expr_d* %5), !dbg !7877
  br label %if.end, !dbg !7877

if.else:                                          ; preds = %entry
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !7878
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7879
  call void @bitmap_insert_into_set(%struct.bitmap_set* %6, %struct.pre_expr_d* %7), !dbg !7880
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7881
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %vec_) #0 !dbg !7882 {
entry:
  %vec_.addr = alloca %struct.VEC_pre_expr_heap**, align 8
  store %struct.VEC_pre_expr_heap** %vec_, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap*** %vec_.addr, metadata !7885, metadata !DIExpression()), !dbg !7886
  %0 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !7887
  %1 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %0, align 8, !dbg !7887
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %1, null, !dbg !7887
  br i1 %tobool, label %if.then, label %if.end, !dbg !7886

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !7887
  %3 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %2, align 8, !dbg !7887
  %4 = bitcast %struct.VEC_pre_expr_heap* %3 to i8*, !dbg !7887
  call void @free(i8* %4), !dbg !7887
  br label %if.end, !dbg !7887

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_pre_expr_heap**, %struct.VEC_pre_expr_heap*** %vec_.addr, align 8, !dbg !7886
  store %struct.VEC_pre_expr_heap* null, %struct.VEC_pre_expr_heap** %5, align 8, !dbg !7886
  ret void, !dbg !7886
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_pre_expr_heap* @VEC_pre_expr_heap_alloc(i32 %alloc_) #0 !dbg !7889 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7892, metadata !DIExpression()), !dbg !7893
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7893
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7893
  %1 = bitcast i8* %call to %struct.VEC_pre_expr_heap*, !dbg !7893
  ret %struct.VEC_pre_expr_heap* %1, !dbg !7893
}

declare dso_local i64 @bitmap_count_bits(%struct.bitmap_head_def*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @phi_trans_lookup(%struct.pre_expr_d* %e, %struct.basic_block_def* %pred) #0 !dbg !7894 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %e.addr = alloca %struct.pre_expr_d*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %slot = alloca i8**, align 8
  %ept = alloca %struct.expr_pred_trans_d, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !7897, metadata !DIExpression()), !dbg !7898
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !7899, metadata !DIExpression()), !dbg !7900
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7901, metadata !DIExpression()), !dbg !7902
  call void @llvm.dbg.declare(metadata %struct.expr_pred_trans_d* %ept, metadata !7903, metadata !DIExpression()), !dbg !7904
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !7905
  %e1 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %ept, i32 0, i32 0, !dbg !7906
  store %struct.pre_expr_d* %0, %struct.pre_expr_d** %e1, align 8, !dbg !7907
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7908
  %pred2 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %ept, i32 0, i32 1, !dbg !7909
  store %struct.basic_block_def* %1, %struct.basic_block_def** %pred2, align 8, !dbg !7910
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !7911
  %3 = bitcast %struct.pre_expr_d* %2 to i8*, !dbg !7911
  %call = call i32 @pre_expr_hash(i8* %3), !dbg !7912
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !7913
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !7914
  %5 = load i32, i32* %index, align 8, !dbg !7914
  %call3 = call i32 @iterative_hash_hashval_t(i32 %call, i32 %5), !dbg !7915
  %hashcode = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %ept, i32 0, i32 3, !dbg !7916
  store i32 %call3, i32* %hashcode, align 8, !dbg !7917
  %6 = load %struct.htab*, %struct.htab** @phi_translate_table, align 8, !dbg !7918
  %7 = bitcast %struct.expr_pred_trans_d* %ept to i8*, !dbg !7919
  %hashcode4 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %ept, i32 0, i32 3, !dbg !7920
  %8 = load i32, i32* %hashcode4, align 8, !dbg !7920
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %6, i8* %7, i32 %8, i32 0), !dbg !7921
  store i8** %call5, i8*** %slot, align 8, !dbg !7922
  %9 = load i8**, i8*** %slot, align 8, !dbg !7923
  %tobool = icmp ne i8** %9, null, !dbg !7923
  br i1 %tobool, label %if.else, label %if.then, !dbg !7925

if.then:                                          ; preds = %entry
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !7926
  br label %return, !dbg !7926

if.else:                                          ; preds = %entry
  %10 = load i8**, i8*** %slot, align 8, !dbg !7927
  %11 = load i8*, i8** %10, align 8, !dbg !7928
  %12 = bitcast i8* %11 to %struct.expr_pred_trans_d*, !dbg !7929
  %v = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %12, i32 0, i32 2, !dbg !7930
  %13 = load %struct.pre_expr_d*, %struct.pre_expr_d** %v, align 8, !dbg !7930
  store %struct.pre_expr_d* %13, %struct.pre_expr_d** %retval, align 8, !dbg !7931
  br label %return, !dbg !7931

return:                                           ; preds = %if.else, %if.then
  %14 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !7932
  ret %struct.pre_expr_d* %14, !dbg !7932
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @phi_translate_1(%struct.pre_expr_d* %expr, %struct.bitmap_set* %set1, %struct.bitmap_set* %set2, %struct.basic_block_def* %pred, %struct.basic_block_def* %phiblock) #0 !dbg !7933 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %phiblock.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %changed = alloca i8, align 1
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %newnary = alloca %struct.vn_nary_op_s, align 8
  %leader = alloca %struct.pre_expr_d*, align 8
  %result = alloca %struct.pre_expr_d*, align 8
  %op_val_id = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  %constant = alloca %struct.pre_expr_d*, align 8
  %new_val_id = alloca i32, align 4
  %result42 = alloca %union.tree_node*, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %operands = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %vuse = alloca %union.tree_node*, align 8
  %newvuse = alloca %union.tree_node*, align 8
  %newoperands = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %changed111 = alloca i8, align 1
  %same_valid = alloca i8, align 1
  %i112 = alloca i32, align 4
  %j = alloca i32, align 4
  %operand = alloca %struct.vn_reference_op_struct*, align 8
  %newref = alloca %struct.vn_reference_s*, align 8
  %opresult = alloca %struct.pre_expr_d*, align 8
  %leader119 = alloca %struct.pre_expr_d*, align 8
  %oldop0 = alloca %union.tree_node*, align 8
  %oldop1 = alloca %union.tree_node*, align 8
  %oldop2 = alloca %union.tree_node*, align 8
  %op0120 = alloca %union.tree_node*, align 8
  %op1121 = alloca %union.tree_node*, align 8
  %op2122 = alloca %union.tree_node*, align 8
  %type123 = alloca %union.tree_node*, align 8
  %newop = alloca %struct.vn_reference_op_struct, align 8
  %op_val_id134 = alloca i32, align 4
  %name144 = alloca %union.tree_node*, align 8
  %op_val_id169 = alloca i32, align 4
  %name179 = alloca %union.tree_node*, align 8
  %op_val_id211 = alloca i32, align 4
  %name221 = alloca %union.tree_node*, align 8
  %new_val_id339 = alloca i32, align 4
  %constant340 = alloca %struct.pre_expr_d*, align 8
  %result341 = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %name401 = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  %newexpr = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !7934, metadata !DIExpression()), !dbg !7935
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !7936, metadata !DIExpression()), !dbg !7937
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !7938, metadata !DIExpression()), !dbg !7939
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !7940, metadata !DIExpression()), !dbg !7941
  store %struct.basic_block_def* %phiblock, %struct.basic_block_def** %phiblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %phiblock.addr, metadata !7942, metadata !DIExpression()), !dbg !7943
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7944
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !7945
  %1 = load i32, i32* %kind, align 8, !dbg !7945
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb107
    i32 0, label %sw.bb400
  ], !dbg !7946

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7947, metadata !DIExpression()), !dbg !7950
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7951, metadata !DIExpression()), !dbg !7952
  store i8 0, i8* %changed, align 1, !dbg !7952
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !7953, metadata !DIExpression()), !dbg !7954
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !7955
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %2, i32 0, i32 2, !dbg !7955
  %nary1 = bitcast %union.pre_expr_union_d* %u to %struct.vn_nary_op_s**, !dbg !7955
  %3 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary1, align 8, !dbg !7955
  store %struct.vn_nary_op_s* %3, %struct.vn_nary_op_s** %nary, align 8, !dbg !7954
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s* %newnary, metadata !7956, metadata !DIExpression()), !dbg !7957
  %4 = bitcast %struct.vn_nary_op_s* %newnary to i8*, !dbg !7958
  %5 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !7959
  %6 = bitcast %struct.vn_nary_op_s* %5 to i8*, !dbg !7958
  %7 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !7960
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %7, i32 0, i32 1, !dbg !7961
  %bf.load = load i32, i32* %length, align 4, !dbg !7961
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7961
  %sub = sub nsw i32 4, %bf.lshr, !dbg !7962
  %conv = sext i32 %sub to i64, !dbg !7963
  %mul = mul i64 8, %conv, !dbg !7964
  %sub2 = sub i64 64, %mul, !dbg !7965
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %6, i64 %sub2, i1 false), !dbg !7958
  store i32 0, i32* %i, align 4, !dbg !7966
  br label %for.cond, !dbg !7968

for.cond:                                         ; preds = %for.inc, %sw.bb
  %8 = load i32, i32* %i, align 4, !dbg !7969
  %length3 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 1, !dbg !7971
  %bf.load4 = load i32, i32* %length3, align 4, !dbg !7971
  %bf.lshr5 = lshr i32 %bf.load4, 16, !dbg !7971
  %cmp = icmp ult i32 %8, %bf.lshr5, !dbg !7972
  br i1 %cmp, label %for.body, label %for.end, !dbg !7973

for.body:                                         ; preds = %for.cond
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !7974
  %9 = load i32, i32* %i, align 4, !dbg !7974
  %idxprom = zext i32 %9 to i64, !dbg !7974
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !7974
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7974
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7974
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !7974
  %bf.load7 = load i64, i64* %11, align 8, !dbg !7974
  %bf.clear = and i64 %bf.load7, 65535, !dbg !7974
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7974
  %cmp8 = icmp ne i32 %bf.cast, 141, !dbg !7977
  br i1 %cmp8, label %if.then, label %if.else, !dbg !7978

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !7979

if.else:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %leader, metadata !7980, metadata !DIExpression()), !dbg !7982
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result, metadata !7983, metadata !DIExpression()), !dbg !7984
  call void @llvm.dbg.declare(metadata i32* %op_val_id, metadata !7985, metadata !DIExpression()), !dbg !7986
  %op10 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !7987
  %12 = load i32, i32* %i, align 4, !dbg !7988
  %idxprom11 = zext i32 %12 to i64, !dbg !7989
  %arrayidx12 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op10, i64 0, i64 %idxprom11, !dbg !7989
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !7989
  %call = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %13), !dbg !7990
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call, i32 0, i32 2, !dbg !7991
  %14 = load i32, i32* %value_id, align 8, !dbg !7991
  store i32 %14, i32* %op_val_id, align 4, !dbg !7986
  %15 = load i32, i32* %op_val_id, align 4, !dbg !7992
  %16 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !7993
  %17 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !7994
  %call13 = call %struct.pre_expr_d* @find_leader_in_sets(i32 %15, %struct.bitmap_set* %16, %struct.bitmap_set* %17), !dbg !7995
  store %struct.pre_expr_d* %call13, %struct.pre_expr_d** %leader, align 8, !dbg !7996
  %18 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !7997
  %19 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !7998
  %20 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !7999
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8000
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8001
  %call14 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %18, %struct.bitmap_set* %19, %struct.bitmap_set* %20, %struct.basic_block_def* %21, %struct.basic_block_def* %22), !dbg !8002
  store %struct.pre_expr_d* %call14, %struct.pre_expr_d** %result, align 8, !dbg !8003
  %23 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8004
  %tobool = icmp ne %struct.pre_expr_d* %23, null, !dbg !8004
  br i1 %tobool, label %land.lhs.true, label %if.else24, !dbg !8006

land.lhs.true:                                    ; preds = %if.else
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8007
  %25 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !8008
  %cmp15 = icmp ne %struct.pre_expr_d* %24, %25, !dbg !8009
  br i1 %cmp15, label %if.then17, label %if.else24, !dbg !8010

if.then17:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !8011, metadata !DIExpression()), !dbg !8013
  %26 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8014
  %call18 = call %union.tree_node* @get_representative_for(%struct.pre_expr_d* %26), !dbg !8015
  store %union.tree_node* %call18, %union.tree_node** %name, align 8, !dbg !8013
  %27 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8016
  %tobool19 = icmp ne %union.tree_node* %27, null, !dbg !8016
  br i1 %tobool19, label %if.end, label %if.then20, !dbg !8018

if.then20:                                        ; preds = %if.then17
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8019
  br label %return, !dbg !8019

if.end:                                           ; preds = %if.then17
  %28 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8020
  %op21 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8021
  %29 = load i32, i32* %i, align 4, !dbg !8022
  %idxprom22 = zext i32 %29 to i64, !dbg !8023
  %arrayidx23 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op21, i64 0, i64 %idxprom22, !dbg !8023
  store %union.tree_node* %28, %union.tree_node** %arrayidx23, align 8, !dbg !8024
  br label %if.end28, !dbg !8025

if.else24:                                        ; preds = %land.lhs.true, %if.else
  %30 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8026
  %tobool25 = icmp ne %struct.pre_expr_d* %30, null, !dbg !8026
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !8028

if.then26:                                        ; preds = %if.else24
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8029
  br label %return, !dbg !8029

if.end27:                                         ; preds = %if.else24
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end
  %op29 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8030
  %31 = load i32, i32* %i, align 4, !dbg !8031
  %idxprom30 = zext i32 %31 to i64, !dbg !8032
  %arrayidx31 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op29, i64 0, i64 %idxprom30, !dbg !8032
  %32 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !8032
  %33 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8033
  %op32 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %33, i32 0, i32 5, !dbg !8034
  %34 = load i32, i32* %i, align 4, !dbg !8035
  %idxprom33 = zext i32 %34 to i64, !dbg !8033
  %arrayidx34 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op32, i64 0, i64 %idxprom33, !dbg !8033
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !8033
  %cmp35 = icmp ne %union.tree_node* %32, %35, !dbg !8036
  %conv36 = zext i1 %cmp35 to i32, !dbg !8036
  %36 = load i8, i8* %changed, align 1, !dbg !8037
  %conv37 = zext i8 %36 to i32, !dbg !8037
  %or = or i32 %conv37, %conv36, !dbg !8037
  %conv38 = trunc i32 %or to i8, !dbg !8037
  store i8 %conv38, i8* %changed, align 1, !dbg !8037
  br label %if.end39

if.end39:                                         ; preds = %if.end28
  br label %for.inc, !dbg !8038

for.inc:                                          ; preds = %if.end39, %if.then
  %37 = load i32, i32* %i, align 4, !dbg !8039
  %inc = add i32 %37, 1, !dbg !8039
  store i32 %inc, i32* %i, align 4, !dbg !8039
  br label %for.cond, !dbg !8040, !llvm.loop !8041

for.end:                                          ; preds = %for.cond
  %38 = load i8, i8* %changed, align 1, !dbg !8043
  %tobool40 = icmp ne i8 %38, 0, !dbg !8043
  br i1 %tobool40, label %if.then41, label %if.end106, !dbg !8045

if.then41:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %constant, metadata !8046, metadata !DIExpression()), !dbg !8048
  call void @llvm.dbg.declare(metadata i32* %new_val_id, metadata !8049, metadata !DIExpression()), !dbg !8050
  call void @llvm.dbg.declare(metadata %union.tree_node** %result42, metadata !8051, metadata !DIExpression()), !dbg !8052
  %length43 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 1, !dbg !8053
  %bf.load44 = load i32, i32* %length43, align 4, !dbg !8053
  %bf.lshr45 = lshr i32 %bf.load44, 16, !dbg !8053
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 1, !dbg !8054
  %bf.load46 = load i32, i32* %opcode, align 4, !dbg !8054
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !8054
  %type = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 4, !dbg !8055
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8055
  %op48 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8056
  %arrayidx49 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op48, i64 0, i64 0, !dbg !8057
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx49, align 8, !dbg !8057
  %op50 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8058
  %arrayidx51 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op50, i64 0, i64 1, !dbg !8059
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 8, !dbg !8059
  %op52 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8060
  %arrayidx53 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op52, i64 0, i64 2, !dbg !8061
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !8061
  %op54 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8062
  %arrayidx55 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op54, i64 0, i64 3, !dbg !8063
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !8063
  %call56 = call %union.tree_node* @vn_nary_op_lookup_pieces(i32 %bf.lshr45, i32 %bf.clear47, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43, %struct.vn_nary_op_s** %nary), !dbg !8064
  store %union.tree_node* %call56, %union.tree_node** %result42, align 8, !dbg !8052
  %44 = load %union.tree_node*, %union.tree_node** %result42, align 8, !dbg !8065
  %tobool57 = icmp ne %union.tree_node* %44, null, !dbg !8065
  br i1 %tobool57, label %land.lhs.true58, label %if.end64, !dbg !8067

land.lhs.true58:                                  ; preds = %if.then41
  %45 = load %union.tree_node*, %union.tree_node** %result42, align 8, !dbg !8068
  %call59 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %45), !dbg !8069
  %conv60 = zext i8 %call59 to i32, !dbg !8069
  %tobool61 = icmp ne i32 %conv60, 0, !dbg !8069
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !8070

if.then62:                                        ; preds = %land.lhs.true58
  %46 = load %union.tree_node*, %union.tree_node** %result42, align 8, !dbg !8071
  %call63 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %46), !dbg !8072
  store %struct.pre_expr_d* %call63, %struct.pre_expr_d** %retval, align 8, !dbg !8073
  br label %return, !dbg !8073

if.end64:                                         ; preds = %land.lhs.true58, %if.then41
  %47 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !8074
  %call65 = call i8* @pool_alloc(%struct.alloc_pool_def* %47), !dbg !8075
  %48 = bitcast i8* %call65 to %struct.pre_expr_d*, !dbg !8076
  store %struct.pre_expr_d* %48, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8077
  %49 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8078
  %kind66 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %49, i32 0, i32 0, !dbg !8079
  store i32 1, i32* %kind66, align 8, !dbg !8080
  %50 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8081
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %50, i32 0, i32 1, !dbg !8082
  store i32 0, i32* %id, align 4, !dbg !8083
  %51 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8084
  %tobool67 = icmp ne %struct.vn_nary_op_s* %51, null, !dbg !8084
  br i1 %tobool67, label %if.then68, label %if.else78, !dbg !8086

if.then68:                                        ; preds = %if.end64
  %52 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8087
  %53 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8089
  %u69 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %53, i32 0, i32 2, !dbg !8089
  %nary70 = bitcast %union.pre_expr_union_d* %u69 to %struct.vn_nary_op_s**, !dbg !8089
  store %struct.vn_nary_op_s* %52, %struct.vn_nary_op_s** %nary70, align 8, !dbg !8090
  %54 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8091
  %call71 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %54), !dbg !8092
  store %struct.pre_expr_d* %call71, %struct.pre_expr_d** %constant, align 8, !dbg !8093
  %55 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant, align 8, !dbg !8094
  %56 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8096
  %cmp72 = icmp ne %struct.pre_expr_d* %55, %56, !dbg !8097
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !8098

if.then74:                                        ; preds = %if.then68
  %57 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant, align 8, !dbg !8099
  store %struct.pre_expr_d* %57, %struct.pre_expr_d** %retval, align 8, !dbg !8100
  br label %return, !dbg !8100

if.end75:                                         ; preds = %if.then68
  %58 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8101
  %value_id76 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %58, i32 0, i32 0, !dbg !8102
  %59 = load i32, i32* %value_id76, align 8, !dbg !8102
  store i32 %59, i32* %new_val_id, align 4, !dbg !8103
  %60 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8104
  %call77 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %60), !dbg !8105
  br label %if.end105, !dbg !8106

if.else78:                                        ; preds = %if.end64
  %call79 = call i32 @get_next_value_id(), !dbg !8107
  store i32 %call79, i32* %new_val_id, align 4, !dbg !8109
  %call80 = call i32 @get_max_value_id(), !dbg !8110
  %add = add i32 %call80, 1, !dbg !8110
  call void @VEC_bitmap_set_t_heap_safe_grow_cleared(%struct.VEC_bitmap_set_t_heap** @value_expressions, i32 %add), !dbg !8110
  %length81 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 1, !dbg !8111
  %bf.load82 = load i32, i32* %length81, align 4, !dbg !8111
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !8111
  %opcode84 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 1, !dbg !8112
  %bf.load85 = load i32, i32* %opcode84, align 4, !dbg !8112
  %bf.clear86 = and i32 %bf.load85, 65535, !dbg !8112
  %type87 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 4, !dbg !8113
  %61 = load %union.tree_node*, %union.tree_node** %type87, align 8, !dbg !8113
  %op88 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8114
  %arrayidx89 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op88, i64 0, i64 0, !dbg !8115
  %62 = load %union.tree_node*, %union.tree_node** %arrayidx89, align 8, !dbg !8115
  %op90 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8116
  %arrayidx91 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op90, i64 0, i64 1, !dbg !8117
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx91, align 8, !dbg !8117
  %op92 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8118
  %arrayidx93 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op92, i64 0, i64 2, !dbg !8119
  %64 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8, !dbg !8119
  %op94 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %newnary, i32 0, i32 5, !dbg !8120
  %arrayidx95 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op94, i64 0, i64 3, !dbg !8121
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx95, align 8, !dbg !8121
  %66 = load %union.tree_node*, %union.tree_node** %result42, align 8, !dbg !8122
  %67 = load i32, i32* %new_val_id, align 4, !dbg !8123
  %call96 = call %struct.vn_nary_op_s* @vn_nary_op_insert_pieces(i32 %bf.lshr83, i32 %bf.clear86, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63, %union.tree_node* %64, %union.tree_node* %65, %union.tree_node* %66, i32 %67), !dbg !8124
  store %struct.vn_nary_op_s* %call96, %struct.vn_nary_op_s** %nary, align 8, !dbg !8125
  %68 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8126
  %69 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8127
  %u97 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %69, i32 0, i32 2, !dbg !8127
  %nary98 = bitcast %union.pre_expr_union_d* %u97 to %struct.vn_nary_op_s**, !dbg !8127
  store %struct.vn_nary_op_s* %68, %struct.vn_nary_op_s** %nary98, align 8, !dbg !8128
  %70 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8129
  %call99 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %70), !dbg !8130
  store %struct.pre_expr_d* %call99, %struct.pre_expr_d** %constant, align 8, !dbg !8131
  %71 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant, align 8, !dbg !8132
  %72 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8134
  %cmp100 = icmp ne %struct.pre_expr_d* %71, %72, !dbg !8135
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !8136

if.then102:                                       ; preds = %if.else78
  %73 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant, align 8, !dbg !8137
  store %struct.pre_expr_d* %73, %struct.pre_expr_d** %retval, align 8, !dbg !8138
  br label %return, !dbg !8138

if.end103:                                        ; preds = %if.else78
  %74 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8139
  %call104 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %74), !dbg !8140
  br label %if.end105

if.end105:                                        ; preds = %if.end103, %if.end75
  %75 = load i32, i32* %new_val_id, align 4, !dbg !8141
  %76 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8142
  call void @add_to_value(i32 %75, %struct.pre_expr_d* %76), !dbg !8143
  br label %if.end106, !dbg !8144

if.end106:                                        ; preds = %if.end105, %for.end
  %77 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8145
  store %struct.pre_expr_d* %77, %struct.pre_expr_d** %retval, align 8, !dbg !8146
  br label %return, !dbg !8146

sw.bb107:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !8147, metadata !DIExpression()), !dbg !8149
  %78 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8150
  %u108 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %78, i32 0, i32 2, !dbg !8150
  %reference = bitcast %union.pre_expr_union_d* %u108 to %struct.vn_reference_s**, !dbg !8150
  %79 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !8150
  store %struct.vn_reference_s* %79, %struct.vn_reference_s** %ref, align 8, !dbg !8149
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands, metadata !8151, metadata !DIExpression()), !dbg !8152
  %80 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8153
  %operands109 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %80, i32 0, i32 5, !dbg !8154
  %81 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands109, align 8, !dbg !8154
  store %struct.VEC_vn_reference_op_s_heap* %81, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8152
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse, metadata !8155, metadata !DIExpression()), !dbg !8156
  %82 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8157
  %vuse110 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %82, i32 0, i32 2, !dbg !8158
  %83 = load %union.tree_node*, %union.tree_node** %vuse110, align 8, !dbg !8158
  store %union.tree_node* %83, %union.tree_node** %vuse, align 8, !dbg !8156
  call void @llvm.dbg.declare(metadata %union.tree_node** %newvuse, metadata !8159, metadata !DIExpression()), !dbg !8160
  %84 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8161
  store %union.tree_node* %84, %union.tree_node** %newvuse, align 8, !dbg !8160
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %newoperands, metadata !8162, metadata !DIExpression()), !dbg !8163
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8163
  call void @llvm.dbg.declare(metadata i8* %changed111, metadata !8164, metadata !DIExpression()), !dbg !8165
  store i8 0, i8* %changed111, align 1, !dbg !8165
  call void @llvm.dbg.declare(metadata i8* %same_valid, metadata !8166, metadata !DIExpression()), !dbg !8167
  store i8 1, i8* %same_valid, align 1, !dbg !8167
  call void @llvm.dbg.declare(metadata i32* %i112, metadata !8168, metadata !DIExpression()), !dbg !8169
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8170, metadata !DIExpression()), !dbg !8171
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %operand, metadata !8172, metadata !DIExpression()), !dbg !8173
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %newref, metadata !8174, metadata !DIExpression()), !dbg !8175
  store i32 0, i32* %i112, align 4, !dbg !8176
  store i32 0, i32* %j, align 4, !dbg !8178
  br label %for.cond113, !dbg !8179

for.cond113:                                      ; preds = %for.inc307, %sw.bb107
  %85 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8180
  %tobool114 = icmp ne %struct.VEC_vn_reference_op_s_heap* %85, null, !dbg !8180
  br i1 %tobool114, label %cond.true, label %cond.false, !dbg !8180

cond.true:                                        ; preds = %for.cond113
  %86 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8180
  %base115 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %86, i32 0, i32 0, !dbg !8180
  br label %cond.end, !dbg !8180

cond.false:                                       ; preds = %for.cond113
  br label %cond.end, !dbg !8180

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base115, %cond.true ], [ null, %cond.false ], !dbg !8180
  %87 = load i32, i32* %i112, align 4, !dbg !8180
  %call116 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %87, %struct.vn_reference_op_struct** %operand), !dbg !8180
  %tobool117 = icmp ne i32 %call116, 0, !dbg !8182
  br i1 %tobool117, label %for.body118, label %for.end310, !dbg !8182

for.body118:                                      ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %opresult, metadata !8183, metadata !DIExpression()), !dbg !8185
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %leader119, metadata !8186, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldop0, metadata !8188, metadata !DIExpression()), !dbg !8189
  %88 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %operand, align 8, !dbg !8190
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %88, i32 0, i32 2, !dbg !8191
  %89 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8191
  store %union.tree_node* %89, %union.tree_node** %oldop0, align 8, !dbg !8189
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldop1, metadata !8192, metadata !DIExpression()), !dbg !8193
  %90 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %operand, align 8, !dbg !8194
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %90, i32 0, i32 3, !dbg !8195
  %91 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8195
  store %union.tree_node* %91, %union.tree_node** %oldop1, align 8, !dbg !8193
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldop2, metadata !8196, metadata !DIExpression()), !dbg !8197
  %92 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %operand, align 8, !dbg !8198
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %92, i32 0, i32 4, !dbg !8199
  %93 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !8199
  store %union.tree_node* %93, %union.tree_node** %oldop2, align 8, !dbg !8197
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0120, metadata !8200, metadata !DIExpression()), !dbg !8201
  %94 = load %union.tree_node*, %union.tree_node** %oldop0, align 8, !dbg !8202
  store %union.tree_node* %94, %union.tree_node** %op0120, align 8, !dbg !8201
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1121, metadata !8203, metadata !DIExpression()), !dbg !8204
  %95 = load %union.tree_node*, %union.tree_node** %oldop1, align 8, !dbg !8205
  store %union.tree_node* %95, %union.tree_node** %op1121, align 8, !dbg !8204
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2122, metadata !8206, metadata !DIExpression()), !dbg !8207
  %96 = load %union.tree_node*, %union.tree_node** %oldop2, align 8, !dbg !8208
  store %union.tree_node* %96, %union.tree_node** %op2122, align 8, !dbg !8207
  call void @llvm.dbg.declare(metadata %union.tree_node** %type123, metadata !8209, metadata !DIExpression()), !dbg !8210
  %97 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %operand, align 8, !dbg !8211
  %type124 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %97, i32 0, i32 1, !dbg !8212
  %98 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !8212
  store %union.tree_node* %98, %union.tree_node** %type123, align 8, !dbg !8210
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct* %newop, metadata !8213, metadata !DIExpression()), !dbg !8214
  %99 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %operand, align 8, !dbg !8215
  %100 = bitcast %struct.vn_reference_op_struct* %newop to i8*, !dbg !8216
  %101 = bitcast %struct.vn_reference_op_struct* %99 to i8*, !dbg !8216
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 40, i1 false), !dbg !8216
  %102 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8217
  %tobool125 = icmp ne %union.tree_node* %102, null, !dbg !8217
  br i1 %tobool125, label %land.lhs.true126, label %if.end154, !dbg !8219

land.lhs.true126:                                 ; preds = %for.body118
  %103 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8220
  %base127 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !8220
  %104 = bitcast %struct.tree_base* %base127 to i64*, !dbg !8220
  %bf.load128 = load i64, i64* %104, align 8, !dbg !8220
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !8220
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !8220
  %cmp131 = icmp eq i32 %bf.cast130, 141, !dbg !8221
  br i1 %cmp131, label %if.then133, label %if.end154, !dbg !8222

if.then133:                                       ; preds = %land.lhs.true126
  call void @llvm.dbg.declare(metadata i32* %op_val_id134, metadata !8223, metadata !DIExpression()), !dbg !8225
  %105 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8226
  %call135 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %105), !dbg !8227
  %value_id136 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call135, i32 0, i32 2, !dbg !8228
  %106 = load i32, i32* %value_id136, align 8, !dbg !8228
  store i32 %106, i32* %op_val_id134, align 4, !dbg !8225
  %107 = load i32, i32* %op_val_id134, align 4, !dbg !8229
  %108 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8230
  %109 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8231
  %call137 = call %struct.pre_expr_d* @find_leader_in_sets(i32 %107, %struct.bitmap_set* %108, %struct.bitmap_set* %109), !dbg !8232
  store %struct.pre_expr_d* %call137, %struct.pre_expr_d** %leader119, align 8, !dbg !8233
  %110 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8234
  %111 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8235
  %112 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8236
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8237
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8238
  %call138 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %110, %struct.bitmap_set* %111, %struct.bitmap_set* %112, %struct.basic_block_def* %113, %struct.basic_block_def* %114), !dbg !8239
  store %struct.pre_expr_d* %call138, %struct.pre_expr_d** %opresult, align 8, !dbg !8240
  %115 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8241
  %tobool139 = icmp ne %struct.pre_expr_d* %115, null, !dbg !8241
  br i1 %tobool139, label %land.lhs.true140, label %if.else149, !dbg !8243

land.lhs.true140:                                 ; preds = %if.then133
  %116 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8244
  %117 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8245
  %cmp141 = icmp ne %struct.pre_expr_d* %116, %117, !dbg !8246
  br i1 %cmp141, label %if.then143, label %if.else149, !dbg !8247

if.then143:                                       ; preds = %land.lhs.true140
  call void @llvm.dbg.declare(metadata %union.tree_node** %name144, metadata !8248, metadata !DIExpression()), !dbg !8250
  %118 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8251
  %call145 = call %union.tree_node* @get_representative_for(%struct.pre_expr_d* %118), !dbg !8252
  store %union.tree_node* %call145, %union.tree_node** %name144, align 8, !dbg !8250
  %119 = load %union.tree_node*, %union.tree_node** %name144, align 8, !dbg !8253
  %tobool146 = icmp ne %union.tree_node* %119, null, !dbg !8253
  br i1 %tobool146, label %if.end148, label %if.then147, !dbg !8255

if.then147:                                       ; preds = %if.then143
  br label %for.end310, !dbg !8256

if.end148:                                        ; preds = %if.then143
  %120 = load %union.tree_node*, %union.tree_node** %name144, align 8, !dbg !8257
  store %union.tree_node* %120, %union.tree_node** %op0120, align 8, !dbg !8258
  br label %if.end153, !dbg !8259

if.else149:                                       ; preds = %land.lhs.true140, %if.then133
  %121 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8260
  %tobool150 = icmp ne %struct.pre_expr_d* %121, null, !dbg !8260
  br i1 %tobool150, label %if.end152, label %if.then151, !dbg !8262

if.then151:                                       ; preds = %if.else149
  br label %for.end310, !dbg !8263

if.end152:                                        ; preds = %if.else149
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.end148
  br label %if.end154, !dbg !8264

if.end154:                                        ; preds = %if.end153, %land.lhs.true126, %for.body118
  %122 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8265
  %123 = load %union.tree_node*, %union.tree_node** %oldop0, align 8, !dbg !8266
  %cmp155 = icmp ne %union.tree_node* %122, %123, !dbg !8267
  %conv156 = zext i1 %cmp155 to i32, !dbg !8267
  %124 = load i8, i8* %changed111, align 1, !dbg !8268
  %conv157 = zext i8 %124 to i32, !dbg !8268
  %or158 = or i32 %conv157, %conv156, !dbg !8268
  %conv159 = trunc i32 %or158 to i8, !dbg !8268
  store i8 %conv159, i8* %changed111, align 1, !dbg !8268
  %125 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8269
  %tobool160 = icmp ne %union.tree_node* %125, null, !dbg !8269
  br i1 %tobool160, label %land.lhs.true161, label %if.else189, !dbg !8271

land.lhs.true161:                                 ; preds = %if.end154
  %126 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8272
  %base162 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !8272
  %127 = bitcast %struct.tree_base* %base162 to i64*, !dbg !8272
  %bf.load163 = load i64, i64* %127, align 8, !dbg !8272
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !8272
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !8272
  %cmp166 = icmp eq i32 %bf.cast165, 141, !dbg !8273
  br i1 %cmp166, label %if.then168, label %if.else189, !dbg !8274

if.then168:                                       ; preds = %land.lhs.true161
  call void @llvm.dbg.declare(metadata i32* %op_val_id169, metadata !8275, metadata !DIExpression()), !dbg !8277
  %128 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8278
  %call170 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %128), !dbg !8279
  %value_id171 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call170, i32 0, i32 2, !dbg !8280
  %129 = load i32, i32* %value_id171, align 8, !dbg !8280
  store i32 %129, i32* %op_val_id169, align 4, !dbg !8277
  %130 = load i32, i32* %op_val_id169, align 4, !dbg !8281
  %131 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8282
  %132 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8283
  %call172 = call %struct.pre_expr_d* @find_leader_in_sets(i32 %130, %struct.bitmap_set* %131, %struct.bitmap_set* %132), !dbg !8284
  store %struct.pre_expr_d* %call172, %struct.pre_expr_d** %leader119, align 8, !dbg !8285
  %133 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8286
  %134 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8287
  %135 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8288
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8289
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8290
  %call173 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %133, %struct.bitmap_set* %134, %struct.bitmap_set* %135, %struct.basic_block_def* %136, %struct.basic_block_def* %137), !dbg !8291
  store %struct.pre_expr_d* %call173, %struct.pre_expr_d** %opresult, align 8, !dbg !8292
  %138 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8293
  %tobool174 = icmp ne %struct.pre_expr_d* %138, null, !dbg !8293
  br i1 %tobool174, label %land.lhs.true175, label %if.else184, !dbg !8295

land.lhs.true175:                                 ; preds = %if.then168
  %139 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8296
  %140 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8297
  %cmp176 = icmp ne %struct.pre_expr_d* %139, %140, !dbg !8298
  br i1 %cmp176, label %if.then178, label %if.else184, !dbg !8299

if.then178:                                       ; preds = %land.lhs.true175
  call void @llvm.dbg.declare(metadata %union.tree_node** %name179, metadata !8300, metadata !DIExpression()), !dbg !8302
  %141 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8303
  %call180 = call %union.tree_node* @get_representative_for(%struct.pre_expr_d* %141), !dbg !8304
  store %union.tree_node* %call180, %union.tree_node** %name179, align 8, !dbg !8302
  %142 = load %union.tree_node*, %union.tree_node** %name179, align 8, !dbg !8305
  %tobool181 = icmp ne %union.tree_node* %142, null, !dbg !8305
  br i1 %tobool181, label %if.end183, label %if.then182, !dbg !8307

if.then182:                                       ; preds = %if.then178
  br label %for.end310, !dbg !8308

if.end183:                                        ; preds = %if.then178
  %143 = load %union.tree_node*, %union.tree_node** %name179, align 8, !dbg !8309
  store %union.tree_node* %143, %union.tree_node** %op1121, align 8, !dbg !8310
  br label %if.end188, !dbg !8311

if.else184:                                       ; preds = %land.lhs.true175, %if.then168
  %144 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8312
  %tobool185 = icmp ne %struct.pre_expr_d* %144, null, !dbg !8312
  br i1 %tobool185, label %if.end187, label %if.then186, !dbg !8314

if.then186:                                       ; preds = %if.else184
  br label %for.end310, !dbg !8315

if.end187:                                        ; preds = %if.else184
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.end183
  br label %if.end196, !dbg !8316

if.else189:                                       ; preds = %land.lhs.true161, %if.end154
  %145 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8317
  %tobool190 = icmp ne %union.tree_node* %145, null, !dbg !8317
  br i1 %tobool190, label %land.lhs.true191, label %if.end195, !dbg !8319

land.lhs.true191:                                 ; preds = %if.else189
  %146 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8320
  %call192 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %146), !dbg !8321
  %tobool193 = icmp ne i8 %call192, 0, !dbg !8321
  br i1 %tobool193, label %if.end195, label %if.then194, !dbg !8322

if.then194:                                       ; preds = %land.lhs.true191
  br label %for.end310, !dbg !8323

if.end195:                                        ; preds = %land.lhs.true191, %if.else189
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.end188
  %147 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8324
  %148 = load %union.tree_node*, %union.tree_node** %oldop1, align 8, !dbg !8325
  %cmp197 = icmp ne %union.tree_node* %147, %148, !dbg !8326
  %conv198 = zext i1 %cmp197 to i32, !dbg !8326
  %149 = load i8, i8* %changed111, align 1, !dbg !8327
  %conv199 = zext i8 %149 to i32, !dbg !8327
  %or200 = or i32 %conv199, %conv198, !dbg !8327
  %conv201 = trunc i32 %or200 to i8, !dbg !8327
  store i8 %conv201, i8* %changed111, align 1, !dbg !8327
  %150 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8328
  %tobool202 = icmp ne %union.tree_node* %150, null, !dbg !8328
  br i1 %tobool202, label %land.lhs.true203, label %if.else231, !dbg !8330

land.lhs.true203:                                 ; preds = %if.end196
  %151 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8331
  %base204 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !8331
  %152 = bitcast %struct.tree_base* %base204 to i64*, !dbg !8331
  %bf.load205 = load i64, i64* %152, align 8, !dbg !8331
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !8331
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !8331
  %cmp208 = icmp eq i32 %bf.cast207, 141, !dbg !8332
  br i1 %cmp208, label %if.then210, label %if.else231, !dbg !8333

if.then210:                                       ; preds = %land.lhs.true203
  call void @llvm.dbg.declare(metadata i32* %op_val_id211, metadata !8334, metadata !DIExpression()), !dbg !8336
  %153 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8337
  %call212 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %153), !dbg !8338
  %value_id213 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call212, i32 0, i32 2, !dbg !8339
  %154 = load i32, i32* %value_id213, align 8, !dbg !8339
  store i32 %154, i32* %op_val_id211, align 4, !dbg !8336
  %155 = load i32, i32* %op_val_id211, align 4, !dbg !8340
  %156 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8341
  %157 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8342
  %call214 = call %struct.pre_expr_d* @find_leader_in_sets(i32 %155, %struct.bitmap_set* %156, %struct.bitmap_set* %157), !dbg !8343
  store %struct.pre_expr_d* %call214, %struct.pre_expr_d** %leader119, align 8, !dbg !8344
  %158 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8345
  %159 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8346
  %160 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8347
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8348
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8349
  %call215 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %158, %struct.bitmap_set* %159, %struct.bitmap_set* %160, %struct.basic_block_def* %161, %struct.basic_block_def* %162), !dbg !8350
  store %struct.pre_expr_d* %call215, %struct.pre_expr_d** %opresult, align 8, !dbg !8351
  %163 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8352
  %tobool216 = icmp ne %struct.pre_expr_d* %163, null, !dbg !8352
  br i1 %tobool216, label %land.lhs.true217, label %if.else226, !dbg !8354

land.lhs.true217:                                 ; preds = %if.then210
  %164 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8355
  %165 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader119, align 8, !dbg !8356
  %cmp218 = icmp ne %struct.pre_expr_d* %164, %165, !dbg !8357
  br i1 %cmp218, label %if.then220, label %if.else226, !dbg !8358

if.then220:                                       ; preds = %land.lhs.true217
  call void @llvm.dbg.declare(metadata %union.tree_node** %name221, metadata !8359, metadata !DIExpression()), !dbg !8361
  %166 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8362
  %call222 = call %union.tree_node* @get_representative_for(%struct.pre_expr_d* %166), !dbg !8363
  store %union.tree_node* %call222, %union.tree_node** %name221, align 8, !dbg !8361
  %167 = load %union.tree_node*, %union.tree_node** %name221, align 8, !dbg !8364
  %tobool223 = icmp ne %union.tree_node* %167, null, !dbg !8364
  br i1 %tobool223, label %if.end225, label %if.then224, !dbg !8366

if.then224:                                       ; preds = %if.then220
  br label %for.end310, !dbg !8367

if.end225:                                        ; preds = %if.then220
  %168 = load %union.tree_node*, %union.tree_node** %name221, align 8, !dbg !8368
  store %union.tree_node* %168, %union.tree_node** %op2122, align 8, !dbg !8369
  br label %if.end230, !dbg !8370

if.else226:                                       ; preds = %land.lhs.true217, %if.then210
  %169 = load %struct.pre_expr_d*, %struct.pre_expr_d** %opresult, align 8, !dbg !8371
  %tobool227 = icmp ne %struct.pre_expr_d* %169, null, !dbg !8371
  br i1 %tobool227, label %if.end229, label %if.then228, !dbg !8373

if.then228:                                       ; preds = %if.else226
  br label %for.end310, !dbg !8374

if.end229:                                        ; preds = %if.else226
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.end225
  br label %if.end238, !dbg !8375

if.else231:                                       ; preds = %land.lhs.true203, %if.end196
  %170 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8376
  %tobool232 = icmp ne %union.tree_node* %170, null, !dbg !8376
  br i1 %tobool232, label %land.lhs.true233, label %if.end237, !dbg !8378

land.lhs.true233:                                 ; preds = %if.else231
  %171 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8379
  %call234 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %171), !dbg !8380
  %tobool235 = icmp ne i8 %call234, 0, !dbg !8380
  br i1 %tobool235, label %if.end237, label %if.then236, !dbg !8381

if.then236:                                       ; preds = %land.lhs.true233
  br label %for.end310, !dbg !8382

if.end237:                                        ; preds = %land.lhs.true233, %if.else231
  br label %if.end238

if.end238:                                        ; preds = %if.end237, %if.end230
  %172 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8383
  %173 = load %union.tree_node*, %union.tree_node** %oldop2, align 8, !dbg !8384
  %cmp239 = icmp ne %union.tree_node* %172, %173, !dbg !8385
  %conv240 = zext i1 %cmp239 to i32, !dbg !8385
  %174 = load i8, i8* %changed111, align 1, !dbg !8386
  %conv241 = zext i8 %174 to i32, !dbg !8386
  %or242 = or i32 %conv241, %conv240, !dbg !8386
  %conv243 = trunc i32 %or242 to i8, !dbg !8386
  store i8 %conv243, i8* %changed111, align 1, !dbg !8386
  %175 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8387
  %tobool244 = icmp ne %struct.VEC_vn_reference_op_s_heap* %175, null, !dbg !8387
  br i1 %tobool244, label %if.end253, label %if.then245, !dbg !8389

if.then245:                                       ; preds = %if.end238
  %176 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8390
  %tobool246 = icmp ne %struct.VEC_vn_reference_op_s_heap* %176, null, !dbg !8390
  br i1 %tobool246, label %cond.true247, label %cond.false249, !dbg !8390

cond.true247:                                     ; preds = %if.then245
  %177 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8390
  %base248 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %177, i32 0, i32 0, !dbg !8390
  br label %cond.end250, !dbg !8390

cond.false249:                                    ; preds = %if.then245
  br label %cond.end250, !dbg !8390

cond.end250:                                      ; preds = %cond.false249, %cond.true247
  %cond251 = phi %struct.VEC_vn_reference_op_s_base* [ %base248, %cond.true247 ], [ null, %cond.false249 ], !dbg !8390
  %call252 = call %struct.VEC_vn_reference_op_s_heap* @VEC_vn_reference_op_s_heap_copy(%struct.VEC_vn_reference_op_s_base* %cond251), !dbg !8390
  store %struct.VEC_vn_reference_op_s_heap* %call252, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8391
  br label %if.end253, !dbg !8392

if.end253:                                        ; preds = %cond.end250, %if.end238
  %opcode254 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 0, !dbg !8393
  %178 = load i32, i32* %opcode254, align 8, !dbg !8393
  %cmp255 = icmp eq i32 %178, 141, !dbg !8395
  br i1 %cmp255, label %land.lhs.true257, label %if.end270, !dbg !8396

land.lhs.true257:                                 ; preds = %if.end253
  %179 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8397
  %base258 = bitcast %union.tree_node* %179 to %struct.tree_base*, !dbg !8397
  %180 = bitcast %struct.tree_base* %base258 to i64*, !dbg !8397
  %bf.load259 = load i64, i64* %180, align 8, !dbg !8397
  %bf.clear260 = and i64 %bf.load259, 65535, !dbg !8397
  %bf.cast261 = trunc i64 %bf.clear260 to i32, !dbg !8397
  %cmp262 = icmp ne i32 %bf.cast261, 141, !dbg !8398
  br i1 %cmp262, label %if.then264, label %if.end270, !dbg !8399

if.then264:                                       ; preds = %land.lhs.true257
  %181 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8400
  %base265 = bitcast %union.tree_node* %181 to %struct.tree_base*, !dbg !8400
  %182 = bitcast %struct.tree_base* %base265 to i64*, !dbg !8400
  %bf.load266 = load i64, i64* %182, align 8, !dbg !8400
  %bf.clear267 = and i64 %bf.load266, 65535, !dbg !8400
  %bf.cast268 = trunc i64 %bf.clear267 to i32, !dbg !8400
  %opcode269 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 0, !dbg !8401
  store i32 %bf.cast268, i32* %opcode269, align 8, !dbg !8402
  br label %if.end270, !dbg !8403

if.end270:                                        ; preds = %if.then264, %land.lhs.true257, %if.end253
  %183 = load %union.tree_node*, %union.tree_node** %type123, align 8, !dbg !8404
  %type271 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 1, !dbg !8405
  store %union.tree_node* %183, %union.tree_node** %type271, align 8, !dbg !8406
  %184 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8407
  %op0272 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 2, !dbg !8408
  store %union.tree_node* %184, %union.tree_node** %op0272, align 8, !dbg !8409
  %185 = load %union.tree_node*, %union.tree_node** %op1121, align 8, !dbg !8410
  %op1273 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 3, !dbg !8411
  store %union.tree_node* %185, %union.tree_node** %op1273, align 8, !dbg !8412
  %186 = load %union.tree_node*, %union.tree_node** %op2122, align 8, !dbg !8413
  %op2274 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %newop, i32 0, i32 4, !dbg !8414
  store %union.tree_node* %186, %union.tree_node** %op2274, align 8, !dbg !8415
  %187 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8416
  %tobool275 = icmp ne %struct.VEC_vn_reference_op_s_heap* %187, null, !dbg !8416
  br i1 %tobool275, label %cond.true276, label %cond.false278, !dbg !8416

cond.true276:                                     ; preds = %if.end270
  %188 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8416
  %base277 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %188, i32 0, i32 0, !dbg !8416
  br label %cond.end279, !dbg !8416

cond.false278:                                    ; preds = %if.end270
  br label %cond.end279, !dbg !8416

cond.end279:                                      ; preds = %cond.false278, %cond.true276
  %cond280 = phi %struct.VEC_vn_reference_op_s_base* [ %base277, %cond.true276 ], [ null, %cond.false278 ], !dbg !8416
  %189 = load i32, i32* %j, align 4, !dbg !8416
  %call281 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %cond280, i32 %189, %struct.vn_reference_op_struct* %newop), !dbg !8416
  %190 = load i32, i32* %j, align 4, !dbg !8417
  %cmp282 = icmp ugt i32 %190, 0, !dbg !8419
  br i1 %cmp282, label %land.lhs.true284, label %if.end306, !dbg !8420

land.lhs.true284:                                 ; preds = %cond.end279
  %191 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8421
  %tobool285 = icmp ne %union.tree_node* %191, null, !dbg !8421
  br i1 %tobool285, label %land.lhs.true286, label %if.end306, !dbg !8422

land.lhs.true286:                                 ; preds = %land.lhs.true284
  %192 = load %union.tree_node*, %union.tree_node** %op0120, align 8, !dbg !8423
  %base287 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !8423
  %193 = bitcast %struct.tree_base* %base287 to i64*, !dbg !8423
  %bf.load288 = load i64, i64* %193, align 8, !dbg !8423
  %bf.clear289 = and i64 %bf.load288, 65535, !dbg !8423
  %bf.cast290 = trunc i64 %bf.clear289 to i32, !dbg !8423
  %cmp291 = icmp eq i32 %bf.cast290, 121, !dbg !8424
  br i1 %cmp291, label %land.lhs.true293, label %if.end306, !dbg !8425

land.lhs.true293:                                 ; preds = %land.lhs.true286
  %194 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8426
  %tobool294 = icmp ne %struct.VEC_vn_reference_op_s_heap* %194, null, !dbg !8426
  br i1 %tobool294, label %cond.true295, label %cond.false297, !dbg !8426

cond.true295:                                     ; preds = %land.lhs.true293
  %195 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8426
  %base296 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %195, i32 0, i32 0, !dbg !8426
  br label %cond.end298, !dbg !8426

cond.false297:                                    ; preds = %land.lhs.true293
  br label %cond.end298, !dbg !8426

cond.end298:                                      ; preds = %cond.false297, %cond.true295
  %cond299 = phi %struct.VEC_vn_reference_op_s_base* [ %base296, %cond.true295 ], [ null, %cond.false297 ], !dbg !8426
  %196 = load i32, i32* %j, align 4, !dbg !8426
  %sub300 = sub i32 %196, 1, !dbg !8426
  %call301 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond299, i32 %sub300), !dbg !8426
  %opcode302 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %call301, i32 0, i32 0, !dbg !8427
  %197 = load i32, i32* %opcode302, align 8, !dbg !8427
  %cmp303 = icmp eq i32 %197, 47, !dbg !8428
  br i1 %cmp303, label %if.then305, label %if.end306, !dbg !8429

if.then305:                                       ; preds = %cond.end298
  call void @vn_reference_fold_indirect(%struct.VEC_vn_reference_op_s_heap** %newoperands, i32* %j), !dbg !8430
  br label %if.end306, !dbg !8430

if.end306:                                        ; preds = %if.then305, %cond.end298, %land.lhs.true286, %land.lhs.true284, %cond.end279
  br label %for.inc307, !dbg !8431

for.inc307:                                       ; preds = %if.end306
  %198 = load i32, i32* %i112, align 4, !dbg !8432
  %inc308 = add i32 %198, 1, !dbg !8432
  store i32 %inc308, i32* %i112, align 4, !dbg !8432
  %199 = load i32, i32* %j, align 4, !dbg !8433
  %inc309 = add i32 %199, 1, !dbg !8433
  store i32 %inc309, i32* %j, align 4, !dbg !8433
  br label %for.cond113, !dbg !8434, !llvm.loop !8435

for.end310:                                       ; preds = %if.then236, %if.then228, %if.then224, %if.then194, %if.then186, %if.then182, %if.then151, %if.then147, %cond.end
  %200 = load i32, i32* %i112, align 4, !dbg !8437
  %201 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8439
  %tobool311 = icmp ne %struct.VEC_vn_reference_op_s_heap* %201, null, !dbg !8439
  br i1 %tobool311, label %cond.true312, label %cond.false314, !dbg !8439

cond.true312:                                     ; preds = %for.end310
  %202 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !8439
  %base313 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %202, i32 0, i32 0, !dbg !8439
  br label %cond.end315, !dbg !8439

cond.false314:                                    ; preds = %for.end310
  br label %cond.end315, !dbg !8439

cond.end315:                                      ; preds = %cond.false314, %cond.true312
  %cond316 = phi %struct.VEC_vn_reference_op_s_base* [ %base313, %cond.true312 ], [ null, %cond.false314 ], !dbg !8439
  %call317 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond316), !dbg !8439
  %cmp318 = icmp ne i32 %200, %call317, !dbg !8440
  br i1 %cmp318, label %if.then320, label %if.end324, !dbg !8441

if.then320:                                       ; preds = %cond.end315
  %203 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8442
  %tobool321 = icmp ne %struct.VEC_vn_reference_op_s_heap* %203, null, !dbg !8442
  br i1 %tobool321, label %if.then322, label %if.end323, !dbg !8445

if.then322:                                       ; preds = %if.then320
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %newoperands), !dbg !8446
  br label %if.end323, !dbg !8446

if.end323:                                        ; preds = %if.then322, %if.then320
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8447
  br label %return, !dbg !8447

if.end324:                                        ; preds = %cond.end315
  %204 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8448
  %tobool325 = icmp ne %union.tree_node* %204, null, !dbg !8448
  br i1 %tobool325, label %if.then326, label %if.end333, !dbg !8450

if.then326:                                       ; preds = %if.end324
  %205 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8451
  %206 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8453
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %206, i32 0, i32 3, !dbg !8454
  %207 = load i32, i32* %set, align 8, !dbg !8454
  %208 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8455
  %type327 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %208, i32 0, i32 4, !dbg !8456
  %209 = load %union.tree_node*, %union.tree_node** %type327, align 8, !dbg !8456
  %210 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8457
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8458
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8459
  %call328 = call %union.tree_node* @translate_vuse_through_block(%struct.VEC_vn_reference_op_s_heap* %205, i32 %207, %union.tree_node* %209, %union.tree_node* %210, %struct.basic_block_def* %211, %struct.basic_block_def* %212, i8* %same_valid), !dbg !8460
  store %union.tree_node* %call328, %union.tree_node** %newvuse, align 8, !dbg !8461
  %213 = load %union.tree_node*, %union.tree_node** %newvuse, align 8, !dbg !8462
  %cmp329 = icmp eq %union.tree_node* %213, null, !dbg !8464
  br i1 %cmp329, label %if.then331, label %if.end332, !dbg !8465

if.then331:                                       ; preds = %if.then326
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %newoperands), !dbg !8466
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8468
  br label %return, !dbg !8468

if.end332:                                        ; preds = %if.then326
  br label %if.end333, !dbg !8469

if.end333:                                        ; preds = %if.end332, %if.end324
  %214 = load i8, i8* %changed111, align 1, !dbg !8470
  %conv334 = zext i8 %214 to i32, !dbg !8470
  %tobool335 = icmp ne i32 %conv334, 0, !dbg !8470
  br i1 %tobool335, label %if.then338, label %lor.lhs.false, !dbg !8472

lor.lhs.false:                                    ; preds = %if.end333
  %215 = load %union.tree_node*, %union.tree_node** %newvuse, align 8, !dbg !8473
  %216 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8474
  %cmp336 = icmp ne %union.tree_node* %215, %216, !dbg !8475
  br i1 %cmp336, label %if.then338, label %if.end399, !dbg !8476

if.then338:                                       ; preds = %lor.lhs.false, %if.end333
  call void @llvm.dbg.declare(metadata i32* %new_val_id339, metadata !8477, metadata !DIExpression()), !dbg !8479
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %constant340, metadata !8480, metadata !DIExpression()), !dbg !8481
  call void @llvm.dbg.declare(metadata %union.tree_node** %result341, metadata !8482, metadata !DIExpression()), !dbg !8483
  %217 = load %union.tree_node*, %union.tree_node** %newvuse, align 8, !dbg !8484
  %218 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8485
  %set342 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %218, i32 0, i32 3, !dbg !8486
  %219 = load i32, i32* %set342, align 8, !dbg !8486
  %220 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8487
  %type343 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %220, i32 0, i32 4, !dbg !8488
  %221 = load %union.tree_node*, %union.tree_node** %type343, align 8, !dbg !8488
  %222 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8489
  %call344 = call %union.tree_node* @vn_reference_lookup_pieces(%union.tree_node* %217, i32 %219, %union.tree_node* %221, %struct.VEC_vn_reference_op_s_heap* %222, %struct.vn_reference_s** %newref, i8 zeroext 1), !dbg !8490
  store %union.tree_node* %call344, %union.tree_node** %result341, align 8, !dbg !8483
  %223 = load %struct.vn_reference_s*, %struct.vn_reference_s** %newref, align 8, !dbg !8491
  %tobool345 = icmp ne %struct.vn_reference_s* %223, null, !dbg !8491
  br i1 %tobool345, label %if.then346, label %if.end347, !dbg !8493

if.then346:                                       ; preds = %if.then338
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %newoperands), !dbg !8494
  br label %if.end347, !dbg !8494

if.end347:                                        ; preds = %if.then346, %if.then338
  %224 = load %union.tree_node*, %union.tree_node** %result341, align 8, !dbg !8495
  %tobool348 = icmp ne %union.tree_node* %224, null, !dbg !8495
  br i1 %tobool348, label %land.lhs.true349, label %if.end360, !dbg !8497

land.lhs.true349:                                 ; preds = %if.end347
  %225 = load %union.tree_node*, %union.tree_node** %result341, align 8, !dbg !8498
  %call350 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %225), !dbg !8499
  %conv351 = zext i8 %call350 to i32, !dbg !8499
  %tobool352 = icmp ne i32 %conv351, 0, !dbg !8499
  br i1 %tobool352, label %if.then353, label %if.end360, !dbg !8500

if.then353:                                       ; preds = %land.lhs.true349
  %226 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8501
  %tobool354 = icmp ne %struct.VEC_vn_reference_op_s_heap* %226, null, !dbg !8501
  br i1 %tobool354, label %cond.true355, label %cond.false356, !dbg !8501

cond.true355:                                     ; preds = %if.then353
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1722, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8501
  br label %cond.end357, !dbg !8501

cond.false356:                                    ; preds = %if.then353
  br label %cond.end357, !dbg !8501

cond.end357:                                      ; preds = %cond.false356, %cond.true355
  %cond358 = phi i32 [ 0, %cond.true355 ], [ 0, %cond.false356 ], !dbg !8501
  %227 = load %union.tree_node*, %union.tree_node** %result341, align 8, !dbg !8503
  %call359 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %227), !dbg !8504
  store %struct.pre_expr_d* %call359, %struct.pre_expr_d** %retval, align 8, !dbg !8505
  br label %return, !dbg !8505

if.end360:                                        ; preds = %land.lhs.true349, %if.end347
  %228 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !8506
  %call361 = call i8* @pool_alloc(%struct.alloc_pool_def* %228), !dbg !8507
  %229 = bitcast i8* %call361 to %struct.pre_expr_d*, !dbg !8508
  store %struct.pre_expr_d* %229, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8509
  %230 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8510
  %kind362 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %230, i32 0, i32 0, !dbg !8511
  store i32 2, i32* %kind362, align 8, !dbg !8512
  %231 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8513
  %id363 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %231, i32 0, i32 1, !dbg !8514
  store i32 0, i32* %id363, align 4, !dbg !8515
  %232 = load %struct.vn_reference_s*, %struct.vn_reference_s** %newref, align 8, !dbg !8516
  %tobool364 = icmp ne %struct.vn_reference_s* %232, null, !dbg !8516
  br i1 %tobool364, label %if.then365, label %if.else375, !dbg !8518

if.then365:                                       ; preds = %if.end360
  %233 = load %struct.vn_reference_s*, %struct.vn_reference_s** %newref, align 8, !dbg !8519
  %234 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8521
  %u366 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %234, i32 0, i32 2, !dbg !8521
  %reference367 = bitcast %union.pre_expr_union_d* %u366 to %struct.vn_reference_s**, !dbg !8521
  store %struct.vn_reference_s* %233, %struct.vn_reference_s** %reference367, align 8, !dbg !8522
  %235 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8523
  %call368 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %235), !dbg !8524
  store %struct.pre_expr_d* %call368, %struct.pre_expr_d** %constant340, align 8, !dbg !8525
  %236 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant340, align 8, !dbg !8526
  %237 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8528
  %cmp369 = icmp ne %struct.pre_expr_d* %236, %237, !dbg !8529
  br i1 %cmp369, label %if.then371, label %if.end372, !dbg !8530

if.then371:                                       ; preds = %if.then365
  %238 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant340, align 8, !dbg !8531
  store %struct.pre_expr_d* %238, %struct.pre_expr_d** %retval, align 8, !dbg !8532
  br label %return, !dbg !8532

if.end372:                                        ; preds = %if.then365
  %239 = load %struct.vn_reference_s*, %struct.vn_reference_s** %newref, align 8, !dbg !8533
  %value_id373 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %239, i32 0, i32 0, !dbg !8534
  %240 = load i32, i32* %value_id373, align 8, !dbg !8534
  store i32 %240, i32* %new_val_id339, align 4, !dbg !8535
  %241 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8536
  %call374 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %241), !dbg !8537
  br label %if.end398, !dbg !8538

if.else375:                                       ; preds = %if.end360
  %242 = load i8, i8* %changed111, align 1, !dbg !8539
  %conv376 = zext i8 %242 to i32, !dbg !8539
  %tobool377 = icmp ne i32 %conv376, 0, !dbg !8539
  br i1 %tobool377, label %if.then380, label %lor.lhs.false378, !dbg !8542

lor.lhs.false378:                                 ; preds = %if.else375
  %243 = load i8, i8* %same_valid, align 1, !dbg !8543
  %tobool379 = icmp ne i8 %243, 0, !dbg !8543
  br i1 %tobool379, label %if.else384, label %if.then380, !dbg !8544

if.then380:                                       ; preds = %lor.lhs.false378, %if.else375
  %call381 = call i32 @get_next_value_id(), !dbg !8545
  store i32 %call381, i32* %new_val_id339, align 4, !dbg !8547
  %call382 = call i32 @get_max_value_id(), !dbg !8548
  %add383 = add i32 %call382, 1, !dbg !8548
  call void @VEC_bitmap_set_t_heap_safe_grow_cleared(%struct.VEC_bitmap_set_t_heap** @value_expressions, i32 %add383), !dbg !8548
  br label %if.end386, !dbg !8549

if.else384:                                       ; preds = %lor.lhs.false378
  %244 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8550
  %value_id385 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %244, i32 0, i32 0, !dbg !8551
  %245 = load i32, i32* %value_id385, align 8, !dbg !8551
  store i32 %245, i32* %new_val_id339, align 4, !dbg !8552
  br label %if.end386

if.end386:                                        ; preds = %if.else384, %if.then380
  %246 = load %union.tree_node*, %union.tree_node** %newvuse, align 8, !dbg !8553
  %247 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8554
  %set387 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %247, i32 0, i32 3, !dbg !8555
  %248 = load i32, i32* %set387, align 8, !dbg !8555
  %249 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !8556
  %type388 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %249, i32 0, i32 4, !dbg !8557
  %250 = load %union.tree_node*, %union.tree_node** %type388, align 8, !dbg !8557
  %251 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8558
  %252 = load %union.tree_node*, %union.tree_node** %result341, align 8, !dbg !8559
  %253 = load i32, i32* %new_val_id339, align 4, !dbg !8560
  %call389 = call %struct.vn_reference_s* @vn_reference_insert_pieces(%union.tree_node* %246, i32 %248, %union.tree_node* %250, %struct.VEC_vn_reference_op_s_heap* %251, %union.tree_node* %252, i32 %253), !dbg !8561
  store %struct.vn_reference_s* %call389, %struct.vn_reference_s** %newref, align 8, !dbg !8562
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %newoperands, align 8, !dbg !8563
  %254 = load %struct.vn_reference_s*, %struct.vn_reference_s** %newref, align 8, !dbg !8564
  %255 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8565
  %u390 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %255, i32 0, i32 2, !dbg !8565
  %reference391 = bitcast %union.pre_expr_union_d* %u390 to %struct.vn_reference_s**, !dbg !8565
  store %struct.vn_reference_s* %254, %struct.vn_reference_s** %reference391, align 8, !dbg !8566
  %256 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8567
  %call392 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %256), !dbg !8568
  store %struct.pre_expr_d* %call392, %struct.pre_expr_d** %constant340, align 8, !dbg !8569
  %257 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant340, align 8, !dbg !8570
  %258 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8572
  %cmp393 = icmp ne %struct.pre_expr_d* %257, %258, !dbg !8573
  br i1 %cmp393, label %if.then395, label %if.end396, !dbg !8574

if.then395:                                       ; preds = %if.end386
  %259 = load %struct.pre_expr_d*, %struct.pre_expr_d** %constant340, align 8, !dbg !8575
  store %struct.pre_expr_d* %259, %struct.pre_expr_d** %retval, align 8, !dbg !8576
  br label %return, !dbg !8576

if.end396:                                        ; preds = %if.end386
  %260 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8577
  %call397 = call i32 @get_or_alloc_expression_id(%struct.pre_expr_d* %260), !dbg !8578
  br label %if.end398

if.end398:                                        ; preds = %if.end396, %if.end372
  %261 = load i32, i32* %new_val_id339, align 4, !dbg !8579
  %262 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8580
  call void @add_to_value(i32 %261, %struct.pre_expr_d* %262), !dbg !8581
  br label %if.end399, !dbg !8582

if.end399:                                        ; preds = %if.end398, %lor.lhs.false
  call void @VEC_vn_reference_op_s_heap_free(%struct.VEC_vn_reference_op_s_heap** %newoperands), !dbg !8583
  %263 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8584
  store %struct.pre_expr_d* %263, %struct.pre_expr_d** %retval, align 8, !dbg !8585
  br label %return, !dbg !8585

sw.bb400:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8586, metadata !DIExpression()), !dbg !8588
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi, align 8, !dbg !8588
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8589, metadata !DIExpression()), !dbg !8590
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !8591, metadata !DIExpression()), !dbg !8592
  call void @llvm.dbg.declare(metadata %union.tree_node** %name401, metadata !8593, metadata !DIExpression()), !dbg !8594
  %264 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8595
  %u402 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %264, i32 0, i32 2, !dbg !8595
  %name403 = bitcast %union.pre_expr_union_d* %u402 to %union.tree_node**, !dbg !8595
  %265 = load %union.tree_node*, %union.tree_node** %name403, align 8, !dbg !8595
  store %union.tree_node* %265, %union.tree_node** %name401, align 8, !dbg !8594
  %266 = load %union.tree_node*, %union.tree_node** %name401, align 8, !dbg !8596
  %ssa_name = bitcast %union.tree_node* %266 to %struct.tree_ssa_name*, !dbg !8596
  %def_stmt404 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8596
  %267 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt404, align 8, !dbg !8596
  store %union.gimple_statement_d* %267, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8597
  %268 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8598
  %call405 = call i32 @gimple_code(%union.gimple_statement_d* %268), !dbg !8600
  %cmp406 = icmp eq i32 %call405, 16, !dbg !8601
  br i1 %cmp406, label %land.lhs.true408, label %if.else413, !dbg !8602

land.lhs.true408:                                 ; preds = %sw.bb400
  %269 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8603
  %call409 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %269), !dbg !8604
  %270 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !8605
  %cmp410 = icmp eq %struct.basic_block_def* %call409, %270, !dbg !8606
  br i1 %cmp410, label %if.then412, label %if.else413, !dbg !8607

if.then412:                                       ; preds = %land.lhs.true408
  %271 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8608
  store %union.gimple_statement_d* %271, %union.gimple_statement_d** %phi, align 8, !dbg !8609
  br label %if.end414, !dbg !8610

if.else413:                                       ; preds = %land.lhs.true408, %sw.bb400
  %272 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8611
  store %struct.pre_expr_d* %272, %struct.pre_expr_d** %retval, align 8, !dbg !8612
  br label %return, !dbg !8612

if.end414:                                        ; preds = %if.then412
  %273 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8613
  %274 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8614
  %call415 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %274), !dbg !8615
  %call416 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %273, %struct.basic_block_def* %call415), !dbg !8616
  store %struct.edge_def* %call416, %struct.edge_def** %e, align 8, !dbg !8617
  %275 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8618
  %tobool417 = icmp ne %struct.edge_def* %275, null, !dbg !8618
  br i1 %tobool417, label %if.then418, label %if.end448, !dbg !8620

if.then418:                                       ; preds = %if.end414
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8621, metadata !DIExpression()), !dbg !8623
  %276 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8624
  %277 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8624
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %277, i32 0, i32 6, !dbg !8624
  %278 = load i32, i32* %dest_idx, align 4, !dbg !8624
  %call419 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %276, i32 %278), !dbg !8624
  %call420 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call419), !dbg !8624
  store %union.tree_node* %call420, %union.tree_node** %def, align 8, !dbg !8623
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %newexpr, metadata !8625, metadata !DIExpression()), !dbg !8626
  %279 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8627
  %base421 = bitcast %union.tree_node* %279 to %struct.tree_base*, !dbg !8627
  %280 = bitcast %struct.tree_base* %base421 to i64*, !dbg !8627
  %bf.load422 = load i64, i64* %280, align 8, !dbg !8627
  %bf.clear423 = and i64 %bf.load422, 65535, !dbg !8627
  %bf.cast424 = trunc i64 %bf.clear423 to i32, !dbg !8627
  %cmp425 = icmp eq i32 %bf.cast424, 141, !dbg !8629
  br i1 %cmp425, label %if.then427, label %if.end429, !dbg !8630

if.then427:                                       ; preds = %if.then418
  %281 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8631
  %call428 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %281), !dbg !8632
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call428, i32 0, i32 0, !dbg !8633
  %282 = load %union.tree_node*, %union.tree_node** %valnum, align 8, !dbg !8633
  store %union.tree_node* %282, %union.tree_node** %def, align 8, !dbg !8634
  br label %if.end429, !dbg !8635

if.end429:                                        ; preds = %if.then427, %if.then418
  %283 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8636
  %call430 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %283), !dbg !8638
  %tobool431 = icmp ne i8 %call430, 0, !dbg !8638
  br i1 %tobool431, label %if.then432, label %if.end434, !dbg !8639

if.then432:                                       ; preds = %if.end429
  %284 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8640
  %call433 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %284), !dbg !8641
  store %struct.pre_expr_d* %call433, %struct.pre_expr_d** %retval, align 8, !dbg !8642
  br label %return, !dbg !8642

if.end434:                                        ; preds = %if.end429
  %285 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8643
  %base435 = bitcast %union.tree_node* %285 to %struct.tree_base*, !dbg !8643
  %286 = bitcast %struct.tree_base* %base435 to i64*, !dbg !8643
  %bf.load436 = load i64, i64* %286, align 8, !dbg !8643
  %bf.clear437 = and i64 %bf.load436, 65535, !dbg !8643
  %bf.cast438 = trunc i64 %bf.clear437 to i32, !dbg !8643
  %cmp439 = icmp eq i32 %bf.cast438, 141, !dbg !8645
  br i1 %cmp439, label %land.lhs.true441, label %if.end446, !dbg !8646

land.lhs.true441:                                 ; preds = %if.end434
  %287 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8647
  %call442 = call zeroext i8 @ssa_undefined_value_p(%union.tree_node* %287), !dbg !8648
  %conv443 = zext i8 %call442 to i32, !dbg !8648
  %tobool444 = icmp ne i32 %conv443, 0, !dbg !8648
  br i1 %tobool444, label %if.then445, label %if.end446, !dbg !8649

if.then445:                                       ; preds = %land.lhs.true441
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8650
  br label %return, !dbg !8650

if.end446:                                        ; preds = %land.lhs.true441, %if.end434
  %288 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8651
  %call447 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %288), !dbg !8652
  store %struct.pre_expr_d* %call447, %struct.pre_expr_d** %newexpr, align 8, !dbg !8653
  %289 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8654
  store %struct.pre_expr_d* %289, %struct.pre_expr_d** %retval, align 8, !dbg !8655
  br label %return, !dbg !8655

if.end448:                                        ; preds = %if.end414
  %290 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !8656
  store %struct.pre_expr_d* %290, %struct.pre_expr_d** %retval, align 8, !dbg !8657
  br label %return, !dbg !8657

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1806, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8658
  br label %sw.epilog, !dbg !8659

sw.epilog:                                        ; preds = %sw.default
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !8660
  br label %return, !dbg !8660

return:                                           ; preds = %sw.epilog, %if.end448, %if.end446, %if.then445, %if.then432, %if.else413, %if.end399, %if.then395, %if.then371, %cond.end357, %if.then331, %if.end323, %if.end106, %if.then102, %if.then74, %if.then62, %if.then26, %if.then20
  %291 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !8661
  ret %struct.pre_expr_d* %291, !dbg !8661
}

; Function Attrs: noinline nounwind uwtable
define internal void @phi_trans_add(%struct.pre_expr_d* %e, %struct.pre_expr_d* %v, %struct.basic_block_def* %pred) #0 !dbg !8662 {
entry:
  %e.addr = alloca %struct.pre_expr_d*, align 8
  %v.addr = alloca %struct.pre_expr_d*, align 8
  %pred.addr = alloca %struct.basic_block_def*, align 8
  %slot = alloca i8**, align 8
  %new_pair = alloca %struct.expr_pred_trans_d*, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !8665, metadata !DIExpression()), !dbg !8666
  store %struct.pre_expr_d* %v, %struct.pre_expr_d** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %v.addr, metadata !8667, metadata !DIExpression()), !dbg !8668
  store %struct.basic_block_def* %pred, %struct.basic_block_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred.addr, metadata !8669, metadata !DIExpression()), !dbg !8670
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8671, metadata !DIExpression()), !dbg !8672
  call void @llvm.dbg.declare(metadata %struct.expr_pred_trans_d** %new_pair, metadata !8673, metadata !DIExpression()), !dbg !8674
  %call = call i8* @xmalloc(i64 32), !dbg !8675
  %0 = bitcast i8* %call to %struct.expr_pred_trans_d*, !dbg !8675
  store %struct.expr_pred_trans_d* %0, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8674
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8676
  %2 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8677
  %e1 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %2, i32 0, i32 0, !dbg !8678
  store %struct.pre_expr_d* %1, %struct.pre_expr_d** %e1, align 8, !dbg !8679
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8680
  %4 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8681
  %pred2 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %4, i32 0, i32 1, !dbg !8682
  store %struct.basic_block_def* %3, %struct.basic_block_def** %pred2, align 8, !dbg !8683
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %v.addr, align 8, !dbg !8684
  %6 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8685
  %v3 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %6, i32 0, i32 2, !dbg !8686
  store %struct.pre_expr_d* %5, %struct.pre_expr_d** %v3, align 8, !dbg !8687
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8688
  %8 = bitcast %struct.pre_expr_d* %7 to i8*, !dbg !8688
  %call4 = call i32 @pre_expr_hash(i8* %8), !dbg !8689
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %pred.addr, align 8, !dbg !8690
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !8691
  %10 = load i32, i32* %index, align 8, !dbg !8691
  %call5 = call i32 @iterative_hash_hashval_t(i32 %call4, i32 %10), !dbg !8692
  %11 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8693
  %hashcode = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %11, i32 0, i32 3, !dbg !8694
  store i32 %call5, i32* %hashcode, align 8, !dbg !8695
  %12 = load %struct.htab*, %struct.htab** @phi_translate_table, align 8, !dbg !8696
  %13 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8697
  %14 = bitcast %struct.expr_pred_trans_d* %13 to i8*, !dbg !8697
  %15 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8698
  %hashcode6 = getelementptr inbounds %struct.expr_pred_trans_d, %struct.expr_pred_trans_d* %15, i32 0, i32 3, !dbg !8699
  %16 = load i32, i32* %hashcode6, align 8, !dbg !8699
  %call7 = call i8** @htab_find_slot_with_hash(%struct.htab* %12, i8* %14, i32 %16, i32 1), !dbg !8700
  store i8** %call7, i8*** %slot, align 8, !dbg !8701
  %17 = load i8**, i8*** %slot, align 8, !dbg !8702
  %18 = load i8*, i8** %17, align 8, !dbg !8704
  %tobool = icmp ne i8* %18, null, !dbg !8704
  br i1 %tobool, label %if.then, label %if.end, !dbg !8705

if.then:                                          ; preds = %entry
  %19 = load i8**, i8*** %slot, align 8, !dbg !8706
  %20 = load i8*, i8** %19, align 8, !dbg !8707
  call void @free(i8* %20), !dbg !8708
  br label %if.end, !dbg !8708

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.expr_pred_trans_d*, %struct.expr_pred_trans_d** %new_pair, align 8, !dbg !8709
  %22 = bitcast %struct.expr_pred_trans_d* %21 to i8*, !dbg !8710
  %23 = load i8**, i8*** %slot, align 8, !dbg !8711
  store i8* %22, i8** %23, align 8, !dbg !8712
  ret void, !dbg !8713
}

declare dso_local i32 @iterative_hash_hashval_t(i32, i32) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @find_leader_in_sets(i32 %val, %struct.bitmap_set* %set1, %struct.bitmap_set* %set2) #0 !dbg !8714 {
entry:
  %val.addr = alloca i32, align 4
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %result = alloca %struct.pre_expr_d*, align 8
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !8717, metadata !DIExpression()), !dbg !8718
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !8719, metadata !DIExpression()), !dbg !8720
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !8721, metadata !DIExpression()), !dbg !8722
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %result, metadata !8723, metadata !DIExpression()), !dbg !8724
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !8725
  %1 = load i32, i32* %val.addr, align 4, !dbg !8726
  %call = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %0, i32 %1, %union.gimple_statement_d* null), !dbg !8727
  store %struct.pre_expr_d* %call, %struct.pre_expr_d** %result, align 8, !dbg !8728
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8729
  %tobool = icmp ne %struct.pre_expr_d* %2, null, !dbg !8729
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8731

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8732
  %tobool1 = icmp ne %struct.bitmap_set* %3, null, !dbg !8732
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8733

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !8734
  %5 = load i32, i32* %val.addr, align 4, !dbg !8735
  %call2 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %4, i32 %5, %union.gimple_statement_d* null), !dbg !8736
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %result, align 8, !dbg !8737
  br label %if.end, !dbg !8738

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %result, align 8, !dbg !8739
  ret %struct.pre_expr_d* %6, !dbg !8740
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_representative_for(%struct.pre_expr_d* %e) #0 !dbg !8741 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.pre_expr_d*, align 8
  %exprtype = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %value_id = alloca i32, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %exprs = alloca %struct.bitmap_set*, align 8
  %rep = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !8744, metadata !DIExpression()), !dbg !8745
  call void @llvm.dbg.declare(metadata %union.tree_node** %exprtype, metadata !8746, metadata !DIExpression()), !dbg !8747
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !8748, metadata !DIExpression()), !dbg !8749
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !8750, metadata !DIExpression()), !dbg !8751
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8752
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %0), !dbg !8753
  store i32 %call, i32* %value_id, align 4, !dbg !8751
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8754
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %1, i32 0, i32 0, !dbg !8755
  %2 = load i32, i32* %kind, align 8, !dbg !8755
  switch i32 %2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb2
    i32 1, label %sw.bb4
    i32 2, label %sw.bb4
  ], !dbg !8756

sw.bb:                                            ; preds = %entry
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8757
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 2, !dbg !8757
  %name1 = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !8757
  %4 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !8757
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !8759
  br label %return, !dbg !8759

sw.bb2:                                           ; preds = %entry
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8760
  %u3 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 2, !dbg !8760
  %constant = bitcast %union.pre_expr_union_d* %u3 to %union.tree_node**, !dbg !8760
  %6 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !8760
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !8761
  br label %return, !dbg !8761

sw.bb4:                                           ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8762, metadata !DIExpression()), !dbg !8764
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !8765, metadata !DIExpression()), !dbg !8766
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprs, metadata !8767, metadata !DIExpression()), !dbg !8768
  %7 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !8769
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %7, null, !dbg !8769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8769

cond.true:                                        ; preds = %sw.bb4
  %8 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !8769
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %8, i32 0, i32 0, !dbg !8769
  br label %cond.end, !dbg !8769

cond.false:                                       ; preds = %sw.bb4
  br label %cond.end, !dbg !8769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8769
  %9 = load i32, i32* %value_id, align 4, !dbg !8769
  %call5 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %9), !dbg !8769
  store %struct.bitmap_set* %call5, %struct.bitmap_set** %exprs, align 8, !dbg !8768
  %10 = load %struct.bitmap_set*, %struct.bitmap_set** %exprs, align 8, !dbg !8770
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %10, i32 0, i32 0, !dbg !8770
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !8770
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %11, i32 0, i32* %i), !dbg !8770
  br label %for.cond, !dbg !8770

for.cond:                                         ; preds = %for.inc, %cond.end
  %call6 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8772
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8770
  br i1 %tobool7, label %for.body, label %for.end, !dbg !8770

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %rep, metadata !8774, metadata !DIExpression()), !dbg !8776
  %12 = load i32, i32* %i, align 4, !dbg !8777
  %call8 = call %struct.pre_expr_d* @expression_for_id(i32 %12), !dbg !8778
  store %struct.pre_expr_d* %call8, %struct.pre_expr_d** %rep, align 8, !dbg !8776
  %13 = load %struct.pre_expr_d*, %struct.pre_expr_d** %rep, align 8, !dbg !8779
  %kind9 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %13, i32 0, i32 0, !dbg !8781
  %14 = load i32, i32* %kind9, align 8, !dbg !8781
  %cmp = icmp eq i32 %14, 0, !dbg !8782
  br i1 %cmp, label %if.then, label %if.end, !dbg !8783

if.then:                                          ; preds = %for.body
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %rep, align 8, !dbg !8784
  %u10 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %15, i32 0, i32 2, !dbg !8784
  %name11 = bitcast %union.pre_expr_union_d* %u10 to %union.tree_node**, !dbg !8784
  %16 = load %union.tree_node*, %union.tree_node** %name11, align 8, !dbg !8784
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !8785
  br label %return, !dbg !8785

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !8786

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8772
  br label %for.cond, !dbg !8772, !llvm.loop !8787

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !8789

sw.epilog:                                        ; preds = %entry, %for.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8790
  %tobool12 = icmp ne %struct._IO_FILE* %17, null, !dbg !8790
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !8792

if.then13:                                        ; preds = %sw.epilog
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8793
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.41, i64 0, i64 0)), !dbg !8795
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8796
  %20 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8797
  call void @print_pre_expr(%struct._IO_FILE* %19, %struct.pre_expr_d* %20), !dbg !8798
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8799
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8800
  br label %if.end16, !dbg !8801

if.end16:                                         ; preds = %if.then13, %sw.epilog
  %22 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8802
  %call17 = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %22), !dbg !8803
  store %union.tree_node* %call17, %union.tree_node** %exprtype, align 8, !dbg !8804
  %23 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !8805
  %tobool18 = icmp ne %union.tree_node* %23, null, !dbg !8805
  br i1 %tobool18, label %lor.lhs.false, label %if.then20, !dbg !8807

lor.lhs.false:                                    ; preds = %if.end16
  %24 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !8808
  %25 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !8809
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !8809
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8809
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8809
  %cmp19 = icmp ne %union.tree_node* %24, %26, !dbg !8810
  br i1 %cmp19, label %if.then20, label %if.end23, !dbg !8811

if.then20:                                        ; preds = %lor.lhs.false, %if.end16
  %27 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !8812
  %call21 = call %union.tree_node* @create_tmp_var(%union.tree_node* %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0)), !dbg !8814
  store %union.tree_node* %call21, %union.tree_node** @pretemp, align 8, !dbg !8815
  %28 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !8816
  %call22 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %28), !dbg !8817
  br label %if.end23, !dbg !8818

if.end23:                                         ; preds = %if.then20, %lor.lhs.false
  %29 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !8819
  %call24 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !8820
  %call25 = call %union.tree_node* @make_ssa_name(%union.tree_node* %29, %union.gimple_statement_d* %call24), !dbg !8821
  store %union.tree_node* %call25, %union.tree_node** %name, align 8, !dbg !8822
  %30 = load i32, i32* %value_id, align 4, !dbg !8823
  %31 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8824
  %call26 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %31), !dbg !8825
  %value_id27 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call26, i32 0, i32 2, !dbg !8826
  store i32 %30, i32* %value_id27, align 8, !dbg !8827
  %32 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8828
  %kind28 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %32, i32 0, i32 0, !dbg !8830
  %33 = load i32, i32* %kind28, align 8, !dbg !8830
  %cmp29 = icmp eq i32 %33, 3, !dbg !8831
  br i1 %cmp29, label %if.then30, label %if.else, !dbg !8832

if.then30:                                        ; preds = %if.end23
  %34 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8833
  %u31 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %34, i32 0, i32 2, !dbg !8833
  %constant32 = bitcast %union.pre_expr_union_d* %u31 to %union.tree_node**, !dbg !8833
  %35 = load %union.tree_node*, %union.tree_node** %constant32, align 8, !dbg !8833
  %36 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8834
  %call33 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %36), !dbg !8835
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call33, i32 0, i32 0, !dbg !8836
  store %union.tree_node* %35, %union.tree_node** %valnum, align 8, !dbg !8837
  br label %if.end36, !dbg !8835

if.else:                                          ; preds = %if.end23
  %37 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8838
  %38 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8839
  %call34 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %38), !dbg !8840
  %valnum35 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call34, i32 0, i32 0, !dbg !8841
  store %union.tree_node* %37, %union.tree_node** %valnum35, align 8, !dbg !8842
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then30
  %39 = load i32, i32* %value_id, align 4, !dbg !8843
  %40 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8844
  %call37 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %40), !dbg !8845
  call void @add_to_value(i32 %39, %struct.pre_expr_d* %call37), !dbg !8846
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8847
  %tobool38 = icmp ne %struct._IO_FILE* %41, null, !dbg !8847
  br i1 %tobool38, label %if.then39, label %if.end43, !dbg !8849

if.then39:                                        ; preds = %if.end36
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8850
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.43, i64 0, i64 0)), !dbg !8852
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8853
  %44 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8854
  call void @print_generic_expr(%struct._IO_FILE* %43, %union.tree_node* %44, i32 0), !dbg !8855
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8856
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.44, i64 0, i64 0)), !dbg !8857
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8858
  %47 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8859
  call void @print_pre_expr(%struct._IO_FILE* %46, %struct.pre_expr_d* %47), !dbg !8860
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8861
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8862
  br label %if.end43, !dbg !8863

if.end43:                                         ; preds = %if.then39, %if.end36
  %49 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8864
  store %union.tree_node* %49, %union.tree_node** %retval, align 8, !dbg !8865
  br label %return, !dbg !8865

return:                                           ; preds = %if.end43, %if.then, %sw.bb2, %sw.bb
  %50 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8866
  ret %union.tree_node* %50, !dbg !8866
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %constant) #0 !dbg !8867 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %constant.addr = alloca %union.tree_node*, align 8
  %result_id = alloca i32, align 4
  %value_id = alloca i32, align 4
  %expr = alloca %struct.pre_expr_d, align 8
  %newexpr = alloca %struct.pre_expr_d*, align 8
  store %union.tree_node* %constant, %union.tree_node** %constant.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant.addr, metadata !8868, metadata !DIExpression()), !dbg !8869
  call void @llvm.dbg.declare(metadata i32* %result_id, metadata !8870, metadata !DIExpression()), !dbg !8871
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !8872, metadata !DIExpression()), !dbg !8873
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %expr, metadata !8874, metadata !DIExpression()), !dbg !8875
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %newexpr, metadata !8876, metadata !DIExpression()), !dbg !8877
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %expr, i32 0, i32 0, !dbg !8878
  store i32 3, i32* %kind, align 8, !dbg !8879
  %0 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !8880
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %expr, i32 0, i32 2, !dbg !8881
  %constant1 = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !8881
  store %union.tree_node* %0, %union.tree_node** %constant1, align 8, !dbg !8882
  %call = call i32 @lookup_expression_id(%struct.pre_expr_d* %expr), !dbg !8883
  store i32 %call, i32* %result_id, align 4, !dbg !8884
  %1 = load i32, i32* %result_id, align 4, !dbg !8885
  %cmp = icmp ne i32 %1, 0, !dbg !8887
  br i1 %cmp, label %if.then, label %if.end, !dbg !8888

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %result_id, align 4, !dbg !8889
  %call2 = call %struct.pre_expr_d* @expression_for_id(i32 %2), !dbg !8890
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %retval, align 8, !dbg !8891
  br label %return, !dbg !8891

if.end:                                           ; preds = %entry
  %3 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !8892
  %call3 = call i8* @pool_alloc(%struct.alloc_pool_def* %3), !dbg !8893
  %4 = bitcast i8* %call3 to %struct.pre_expr_d*, !dbg !8894
  store %struct.pre_expr_d* %4, %struct.pre_expr_d** %newexpr, align 8, !dbg !8895
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8896
  %kind4 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 0, !dbg !8897
  store i32 3, i32* %kind4, align 8, !dbg !8898
  %6 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !8899
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8900
  %u5 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 2, !dbg !8900
  %constant6 = bitcast %union.pre_expr_union_d* %u5 to %union.tree_node**, !dbg !8900
  store %union.tree_node* %6, %union.tree_node** %constant6, align 8, !dbg !8901
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8902
  %call7 = call i32 @alloc_expression_id(%struct.pre_expr_d* %8), !dbg !8903
  %9 = load %union.tree_node*, %union.tree_node** %constant.addr, align 8, !dbg !8904
  %call8 = call i32 @get_or_alloc_constant_value_id(%union.tree_node* %9), !dbg !8905
  store i32 %call8, i32* %value_id, align 4, !dbg !8906
  %10 = load i32, i32* %value_id, align 4, !dbg !8907
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8908
  call void @add_to_value(i32 %10, %struct.pre_expr_d* %11), !dbg !8909
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newexpr, align 8, !dbg !8910
  store %struct.pre_expr_d* %12, %struct.pre_expr_d** %retval, align 8, !dbg !8911
  br label %return, !dbg !8911

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !8912
  ret %struct.pre_expr_d* %13, !dbg !8912
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %e) #0 !dbg !8913 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %e.addr = alloca %struct.pre_expr_d*, align 8
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %naryop0 = alloca %union.tree_node*, align 8
  %naryop1 = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %rep0 = alloca %struct.pre_expr_d*, align 8
  %vrep0 = alloca i32, align 4
  %const0 = alloca %union.tree_node*, align 8
  %rep1 = alloca %struct.pre_expr_d*, align 8
  %vrep1 = alloca i32, align 4
  %const1 = alloca %union.tree_node*, align 8
  %naryop081 = alloca %union.tree_node*, align 8
  %const084 = alloca %union.tree_node*, align 8
  %result85 = alloca %union.tree_node*, align 8
  %rep089 = alloca %struct.pre_expr_d*, align 8
  %vrep091 = alloca i32, align 4
  %type1 = alloca %union.tree_node*, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %operands = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %op119 = alloca %struct.vn_reference_op_struct*, align 8
  %arg0 = alloca %struct.vn_reference_op_struct*, align 8
  %arg1 = alloca %struct.vn_reference_op_struct*, align 8
  %anyconst = alloca i8, align 1
  %folded = alloca %union.tree_node*, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !8916, metadata !DIExpression()), !dbg !8917
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8918
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !8919
  %1 = load i32, i32* %kind, align 8, !dbg !8919
  switch i32 %1, label %sw.default268 [
    i32 3, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb116
  ], !dbg !8920

sw.bb:                                            ; preds = %entry
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8921
  store %struct.pre_expr_d* %2, %struct.pre_expr_d** %retval, align 8, !dbg !8923
  br label %return, !dbg !8923

sw.bb1:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !8924, metadata !DIExpression()), !dbg !8926
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8927
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 2, !dbg !8927
  %nary2 = bitcast %union.pre_expr_union_d* %u to %struct.vn_nary_op_s**, !dbg !8927
  %4 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary2, align 8, !dbg !8927
  store %struct.vn_nary_op_s* %4, %struct.vn_nary_op_s** %nary, align 8, !dbg !8926
  %5 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8928
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %5, i32 0, i32 1, !dbg !8928
  %bf.load = load i32, i32* %opcode, align 4, !dbg !8928
  %bf.clear = and i32 %bf.load, 65535, !dbg !8928
  %idxprom = sext i32 %bf.clear to i64, !dbg !8928
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8928
  %6 = load i32, i32* %arrayidx, align 4, !dbg !8928
  switch i32 %6, label %sw.default [
    i32 10, label %sw.bb3
    i32 7, label %sw.bb22
    i32 5, label %sw.bb22
    i32 4, label %sw.bb60
    i32 6, label %sw.bb80
  ], !dbg !8929

sw.bb3:                                           ; preds = %sw.bb1
  %7 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8930
  %opcode4 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %7, i32 0, i32 1, !dbg !8933
  %bf.load5 = load i32, i32* %opcode4, align 4, !dbg !8933
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8933
  %cmp = icmp eq i32 %bf.clear6, 96, !dbg !8934
  br i1 %cmp, label %if.then, label %if.end, !dbg !8935

if.then:                                          ; preds = %sw.bb3
  br label %do_unary, !dbg !8936

if.end:                                           ; preds = %sw.bb3
  %8 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8937
  %opcode7 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %8, i32 0, i32 1, !dbg !8939
  %bf.load8 = load i32, i32* %opcode7, align 4, !dbg !8939
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !8939
  %cmp10 = icmp ne i32 %bf.clear9, 93, !dbg !8940
  br i1 %cmp10, label %land.lhs.true, label %if.end21, !dbg !8941

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8942
  %opcode11 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %9, i32 0, i32 1, !dbg !8943
  %bf.load12 = load i32, i32* %opcode11, align 4, !dbg !8943
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !8943
  %cmp14 = icmp ne i32 %bf.clear13, 94, !dbg !8944
  br i1 %cmp14, label %land.lhs.true15, label %if.end21, !dbg !8945

land.lhs.true15:                                  ; preds = %land.lhs.true
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8946
  %opcode16 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %10, i32 0, i32 1, !dbg !8947
  %bf.load17 = load i32, i32* %opcode16, align 4, !dbg !8947
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !8947
  %cmp19 = icmp ne i32 %bf.clear18, 95, !dbg !8948
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !8949

if.then20:                                        ; preds = %land.lhs.true15
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !8950
  store %struct.pre_expr_d* %11, %struct.pre_expr_d** %retval, align 8, !dbg !8951
  br label %return, !dbg !8951

if.end21:                                         ; preds = %land.lhs.true15, %land.lhs.true, %if.end
  br label %sw.bb22, !dbg !8952

sw.bb22:                                          ; preds = %sw.bb1, %sw.bb1, %if.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %naryop0, metadata !8953, metadata !DIExpression()), !dbg !8955
  %12 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8956
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %12, i32 0, i32 5, !dbg !8957
  %arrayidx23 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !8956
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx23, align 8, !dbg !8956
  store %union.tree_node* %13, %union.tree_node** %naryop0, align 8, !dbg !8955
  call void @llvm.dbg.declare(metadata %union.tree_node** %naryop1, metadata !8958, metadata !DIExpression()), !dbg !8959
  %14 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !8960
  %op24 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %14, i32 0, i32 5, !dbg !8961
  %arrayidx25 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op24, i64 0, i64 1, !dbg !8960
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !8960
  store %union.tree_node* %15, %union.tree_node** %naryop1, align 8, !dbg !8959
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !8962, metadata !DIExpression()), !dbg !8963
  %16 = load %union.tree_node*, %union.tree_node** %naryop0, align 8, !dbg !8964
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %16), !dbg !8966
  %tobool = icmp ne i8 %call, 0, !dbg !8966
  br i1 %tobool, label %if.end34, label %if.then26, !dbg !8967

if.then26:                                        ; preds = %sw.bb22
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %rep0, metadata !8968, metadata !DIExpression()), !dbg !8970
  %17 = load %union.tree_node*, %union.tree_node** %naryop0, align 8, !dbg !8971
  %call27 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %17), !dbg !8972
  store %struct.pre_expr_d* %call27, %struct.pre_expr_d** %rep0, align 8, !dbg !8970
  call void @llvm.dbg.declare(metadata i32* %vrep0, metadata !8973, metadata !DIExpression()), !dbg !8974
  %18 = load %struct.pre_expr_d*, %struct.pre_expr_d** %rep0, align 8, !dbg !8975
  %call28 = call i32 @get_expr_value_id(%struct.pre_expr_d* %18), !dbg !8976
  store i32 %call28, i32* %vrep0, align 4, !dbg !8974
  call void @llvm.dbg.declare(metadata %union.tree_node** %const0, metadata !8977, metadata !DIExpression()), !dbg !8978
  %19 = load i32, i32* %vrep0, align 4, !dbg !8979
  %call29 = call %union.tree_node* @get_constant_for_value_id(i32 %19), !dbg !8980
  store %union.tree_node* %call29, %union.tree_node** %const0, align 8, !dbg !8978
  %20 = load %union.tree_node*, %union.tree_node** %const0, align 8, !dbg !8981
  %tobool30 = icmp ne %union.tree_node* %20, null, !dbg !8981
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !8983

if.then31:                                        ; preds = %if.then26
  %21 = load %union.tree_node*, %union.tree_node** %naryop0, align 8, !dbg !8984
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8984
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8984
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8984
  %23 = load %union.tree_node*, %union.tree_node** %const0, align 8, !dbg !8984
  %call32 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %22, %union.tree_node* %23), !dbg !8984
  store %union.tree_node* %call32, %union.tree_node** %naryop0, align 8, !dbg !8985
  br label %if.end33, !dbg !8986

if.end33:                                         ; preds = %if.then31, %if.then26
  br label %if.end34, !dbg !8987

if.end34:                                         ; preds = %if.end33, %sw.bb22
  %24 = load %union.tree_node*, %union.tree_node** %naryop1, align 8, !dbg !8988
  %call35 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %24), !dbg !8990
  %tobool36 = icmp ne i8 %call35, 0, !dbg !8990
  br i1 %tobool36, label %if.end47, label %if.then37, !dbg !8991

if.then37:                                        ; preds = %if.end34
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %rep1, metadata !8992, metadata !DIExpression()), !dbg !8994
  %25 = load %union.tree_node*, %union.tree_node** %naryop1, align 8, !dbg !8995
  %call38 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %25), !dbg !8996
  store %struct.pre_expr_d* %call38, %struct.pre_expr_d** %rep1, align 8, !dbg !8994
  call void @llvm.dbg.declare(metadata i32* %vrep1, metadata !8997, metadata !DIExpression()), !dbg !8998
  %26 = load %struct.pre_expr_d*, %struct.pre_expr_d** %rep1, align 8, !dbg !8999
  %call39 = call i32 @get_expr_value_id(%struct.pre_expr_d* %26), !dbg !9000
  store i32 %call39, i32* %vrep1, align 4, !dbg !8998
  call void @llvm.dbg.declare(metadata %union.tree_node** %const1, metadata !9001, metadata !DIExpression()), !dbg !9002
  %27 = load i32, i32* %vrep1, align 4, !dbg !9003
  %call40 = call %union.tree_node* @get_constant_for_value_id(i32 %27), !dbg !9004
  store %union.tree_node* %call40, %union.tree_node** %const1, align 8, !dbg !9002
  %28 = load %union.tree_node*, %union.tree_node** %const1, align 8, !dbg !9005
  %tobool41 = icmp ne %union.tree_node* %28, null, !dbg !9005
  br i1 %tobool41, label %if.then42, label %if.end46, !dbg !9007

if.then42:                                        ; preds = %if.then37
  %29 = load %union.tree_node*, %union.tree_node** %naryop1, align 8, !dbg !9008
  %common43 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !9008
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !9008
  %30 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !9008
  %31 = load %union.tree_node*, %union.tree_node** %const1, align 8, !dbg !9008
  %call45 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %30, %union.tree_node* %31), !dbg !9008
  store %union.tree_node* %call45, %union.tree_node** %naryop1, align 8, !dbg !9009
  br label %if.end46, !dbg !9010

if.end46:                                         ; preds = %if.then42, %if.then37
  br label %if.end47, !dbg !9011

if.end47:                                         ; preds = %if.end46, %if.end34
  %32 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9012
  %opcode48 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %32, i32 0, i32 1, !dbg !9012
  %bf.load49 = load i32, i32* %opcode48, align 4, !dbg !9012
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !9012
  %33 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9012
  %type51 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %33, i32 0, i32 4, !dbg !9012
  %34 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !9012
  %35 = load %union.tree_node*, %union.tree_node** %naryop0, align 8, !dbg !9012
  %36 = load %union.tree_node*, %union.tree_node** %naryop1, align 8, !dbg !9012
  %call52 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %bf.clear50, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !9012
  store %union.tree_node* %call52, %union.tree_node** %result, align 8, !dbg !9013
  %37 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9014
  %tobool53 = icmp ne %union.tree_node* %37, null, !dbg !9014
  br i1 %tobool53, label %land.lhs.true54, label %if.end59, !dbg !9016

land.lhs.true54:                                  ; preds = %if.end47
  %38 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9017
  %call55 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %38), !dbg !9018
  %conv = zext i8 %call55 to i32, !dbg !9018
  %tobool56 = icmp ne i32 %conv, 0, !dbg !9018
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !9019

if.then57:                                        ; preds = %land.lhs.true54
  %39 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9020
  %call58 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %39), !dbg !9021
  store %struct.pre_expr_d* %call58, %struct.pre_expr_d** %retval, align 8, !dbg !9022
  br label %return, !dbg !9022

if.end59:                                         ; preds = %land.lhs.true54, %if.end47
  %40 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9023
  store %struct.pre_expr_d* %40, %struct.pre_expr_d** %retval, align 8, !dbg !9024
  br label %return, !dbg !9024

sw.bb60:                                          ; preds = %sw.bb1
  %41 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9025
  %opcode61 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %41, i32 0, i32 1, !dbg !9027
  %bf.load62 = load i32, i32* %opcode61, align 4, !dbg !9027
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !9027
  %cmp64 = icmp ne i32 %bf.clear63, 43, !dbg !9028
  br i1 %cmp64, label %land.lhs.true66, label %if.end79, !dbg !9029

land.lhs.true66:                                  ; preds = %sw.bb60
  %42 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9030
  %opcode67 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %42, i32 0, i32 1, !dbg !9031
  %bf.load68 = load i32, i32* %opcode67, align 4, !dbg !9031
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !9031
  %cmp70 = icmp ne i32 %bf.clear69, 44, !dbg !9032
  br i1 %cmp70, label %land.lhs.true72, label %if.end79, !dbg !9033

land.lhs.true72:                                  ; preds = %land.lhs.true66
  %43 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9034
  %opcode73 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %43, i32 0, i32 1, !dbg !9035
  %bf.load74 = load i32, i32* %opcode73, align 4, !dbg !9035
  %bf.clear75 = and i32 %bf.load74, 65535, !dbg !9035
  %cmp76 = icmp ne i32 %bf.clear75, 118, !dbg !9036
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !9037

if.then78:                                        ; preds = %land.lhs.true72
  %44 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9038
  store %struct.pre_expr_d* %44, %struct.pre_expr_d** %retval, align 8, !dbg !9039
  br label %return, !dbg !9039

if.end79:                                         ; preds = %land.lhs.true72, %land.lhs.true66, %sw.bb60
  br label %sw.bb80, !dbg !9040

sw.bb80:                                          ; preds = %sw.bb1, %if.end79
  br label %do_unary, !dbg !9040

do_unary:                                         ; preds = %sw.bb80, %if.then
  call void @llvm.dbg.label(metadata !9041), !dbg !9042
  call void @llvm.dbg.declare(metadata %union.tree_node** %naryop081, metadata !9043, metadata !DIExpression()), !dbg !9045
  %45 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9046
  %op82 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %45, i32 0, i32 5, !dbg !9047
  %arrayidx83 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op82, i64 0, i64 0, !dbg !9046
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx83, align 8, !dbg !9046
  store %union.tree_node* %46, %union.tree_node** %naryop081, align 8, !dbg !9045
  call void @llvm.dbg.declare(metadata %union.tree_node** %const084, metadata !9048, metadata !DIExpression()), !dbg !9049
  call void @llvm.dbg.declare(metadata %union.tree_node** %result85, metadata !9050, metadata !DIExpression()), !dbg !9051
  %47 = load %union.tree_node*, %union.tree_node** %naryop081, align 8, !dbg !9052
  %call86 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %47), !dbg !9054
  %tobool87 = icmp ne i8 %call86, 0, !dbg !9054
  br i1 %tobool87, label %if.then88, label %if.else, !dbg !9055

if.then88:                                        ; preds = %do_unary
  %48 = load %union.tree_node*, %union.tree_node** %naryop081, align 8, !dbg !9056
  store %union.tree_node* %48, %union.tree_node** %const084, align 8, !dbg !9057
  br label %if.end94, !dbg !9058

if.else:                                          ; preds = %do_unary
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %rep089, metadata !9059, metadata !DIExpression()), !dbg !9061
  %49 = load %union.tree_node*, %union.tree_node** %naryop081, align 8, !dbg !9062
  %call90 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %49), !dbg !9063
  store %struct.pre_expr_d* %call90, %struct.pre_expr_d** %rep089, align 8, !dbg !9061
  call void @llvm.dbg.declare(metadata i32* %vrep091, metadata !9064, metadata !DIExpression()), !dbg !9065
  %50 = load %struct.pre_expr_d*, %struct.pre_expr_d** %rep089, align 8, !dbg !9066
  %call92 = call i32 @get_expr_value_id(%struct.pre_expr_d* %50), !dbg !9067
  store i32 %call92, i32* %vrep091, align 4, !dbg !9065
  %51 = load i32, i32* %vrep091, align 4, !dbg !9068
  %call93 = call %union.tree_node* @get_constant_for_value_id(i32 %51), !dbg !9069
  store %union.tree_node* %call93, %union.tree_node** %const084, align 8, !dbg !9070
  br label %if.end94

if.end94:                                         ; preds = %if.else, %if.then88
  store %union.tree_node* null, %union.tree_node** %result85, align 8, !dbg !9071
  %52 = load %union.tree_node*, %union.tree_node** %const084, align 8, !dbg !9072
  %tobool95 = icmp ne %union.tree_node* %52, null, !dbg !9072
  br i1 %tobool95, label %if.then96, label %if.end107, !dbg !9074

if.then96:                                        ; preds = %if.end94
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !9075, metadata !DIExpression()), !dbg !9077
  %53 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9078
  %op97 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %53, i32 0, i32 5, !dbg !9078
  %arrayidx98 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op97, i64 0, i64 0, !dbg !9078
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx98, align 8, !dbg !9078
  %common99 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !9078
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !9078
  %55 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !9078
  store %union.tree_node* %55, %union.tree_node** %type1, align 8, !dbg !9077
  %56 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9079
  %57 = load %union.tree_node*, %union.tree_node** %const084, align 8, !dbg !9079
  %call101 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %56, %union.tree_node* %57), !dbg !9079
  store %union.tree_node* %call101, %union.tree_node** %const084, align 8, !dbg !9080
  %58 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9081
  %opcode102 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %58, i32 0, i32 1, !dbg !9081
  %bf.load103 = load i32, i32* %opcode102, align 4, !dbg !9081
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !9081
  %59 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9081
  %type105 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %59, i32 0, i32 4, !dbg !9081
  %60 = load %union.tree_node*, %union.tree_node** %type105, align 8, !dbg !9081
  %61 = load %union.tree_node*, %union.tree_node** %const084, align 8, !dbg !9081
  %call106 = call %union.tree_node* @fold_unary_loc(i32 0, i32 %bf.clear104, %union.tree_node* %60, %union.tree_node* %61), !dbg !9081
  store %union.tree_node* %call106, %union.tree_node** %result85, align 8, !dbg !9082
  br label %if.end107, !dbg !9083

if.end107:                                        ; preds = %if.then96, %if.end94
  %62 = load %union.tree_node*, %union.tree_node** %result85, align 8, !dbg !9084
  %tobool108 = icmp ne %union.tree_node* %62, null, !dbg !9084
  br i1 %tobool108, label %land.lhs.true109, label %if.end115, !dbg !9086

land.lhs.true109:                                 ; preds = %if.end107
  %63 = load %union.tree_node*, %union.tree_node** %result85, align 8, !dbg !9087
  %call110 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %63), !dbg !9088
  %conv111 = zext i8 %call110 to i32, !dbg !9088
  %tobool112 = icmp ne i32 %conv111, 0, !dbg !9088
  br i1 %tobool112, label %if.then113, label %if.end115, !dbg !9089

if.then113:                                       ; preds = %land.lhs.true109
  %64 = load %union.tree_node*, %union.tree_node** %result85, align 8, !dbg !9090
  %call114 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %64), !dbg !9091
  store %struct.pre_expr_d* %call114, %struct.pre_expr_d** %retval, align 8, !dbg !9092
  br label %return, !dbg !9092

if.end115:                                        ; preds = %land.lhs.true109, %if.end107
  %65 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9093
  store %struct.pre_expr_d* %65, %struct.pre_expr_d** %retval, align 8, !dbg !9094
  br label %return, !dbg !9094

sw.default:                                       ; preds = %sw.bb1
  %66 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9095
  store %struct.pre_expr_d* %66, %struct.pre_expr_d** %retval, align 8, !dbg !9096
  br label %return, !dbg !9096

sw.bb116:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !9097, metadata !DIExpression()), !dbg !9099
  %67 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9100
  %u117 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %67, i32 0, i32 2, !dbg !9100
  %reference = bitcast %union.pre_expr_union_d* %u117 to %struct.vn_reference_s**, !dbg !9100
  %68 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !9100
  store %struct.vn_reference_s* %68, %struct.vn_reference_s** %ref, align 8, !dbg !9099
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands, metadata !9101, metadata !DIExpression()), !dbg !9102
  %69 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !9103
  %operands118 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %69, i32 0, i32 5, !dbg !9104
  %70 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands118, align 8, !dbg !9104
  store %struct.VEC_vn_reference_op_s_heap* %70, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9102
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %op119, metadata !9105, metadata !DIExpression()), !dbg !9106
  %71 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9107
  %tobool120 = icmp ne %struct.VEC_vn_reference_op_s_heap* %71, null, !dbg !9107
  br i1 %tobool120, label %cond.true, label %cond.false, !dbg !9107

cond.true:                                        ; preds = %sw.bb116
  %72 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9107
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %72, i32 0, i32 0, !dbg !9107
  br label %cond.end, !dbg !9107

cond.false:                                       ; preds = %sw.bb116
  br label %cond.end, !dbg !9107

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9107
  %call121 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond, i32 0), !dbg !9107
  store %struct.vn_reference_op_struct* %call121, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9108
  %73 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9109
  %opcode122 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %73, i32 0, i32 0, !dbg !9111
  %74 = load i32, i32* %opcode122, align 8, !dbg !9111
  %cmp123 = icmp eq i32 %74, 59, !dbg !9112
  br i1 %cmp123, label %land.lhs.true125, label %if.end267, !dbg !9113

land.lhs.true125:                                 ; preds = %cond.end
  %75 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9114
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %75, i32 0, i32 2, !dbg !9114
  %76 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9114
  %base126 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !9114
  %77 = bitcast %struct.tree_base* %base126 to i64*, !dbg !9114
  %bf.load127 = load i64, i64* %77, align 8, !dbg !9114
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !9114
  %bf.cast = trunc i64 %bf.clear128 to i32, !dbg !9114
  %cmp129 = icmp eq i32 %bf.cast, 121, !dbg !9115
  br i1 %cmp129, label %land.lhs.true131, label %if.end267, !dbg !9116

land.lhs.true131:                                 ; preds = %land.lhs.true125
  %78 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9117
  %op0132 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %78, i32 0, i32 2, !dbg !9117
  %79 = load %union.tree_node*, %union.tree_node** %op0132, align 8, !dbg !9117
  %exp = bitcast %union.tree_node* %79 to %struct.tree_exp*, !dbg !9117
  %operands133 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9117
  %arrayidx134 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands133, i64 0, i64 0, !dbg !9117
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx134, align 8, !dbg !9117
  %base135 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !9117
  %81 = bitcast %struct.tree_base* %base135 to i64*, !dbg !9117
  %bf.load136 = load i64, i64* %81, align 8, !dbg !9117
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !9117
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !9117
  %cmp139 = icmp eq i32 %bf.cast138, 29, !dbg !9118
  br i1 %cmp139, label %land.lhs.true141, label %if.end267, !dbg !9119

land.lhs.true141:                                 ; preds = %land.lhs.true131
  %82 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9120
  %op0142 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %82, i32 0, i32 2, !dbg !9120
  %83 = load %union.tree_node*, %union.tree_node** %op0142, align 8, !dbg !9120
  %exp143 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !9120
  %operands144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 3, !dbg !9120
  %arrayidx145 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands144, i64 0, i64 0, !dbg !9120
  %84 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8, !dbg !9120
  %function_decl = bitcast %union.tree_node* %84 to %struct.tree_function_decl*, !dbg !9120
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9120
  %bf.load146 = load i32, i32* %built_in_class, align 8, !dbg !9120
  %bf.lshr = lshr i32 %bf.load146, 11, !dbg !9120
  %bf.clear147 = and i32 %bf.lshr, 3, !dbg !9120
  %cmp148 = icmp ne i32 %bf.clear147, 0, !dbg !9120
  br i1 %cmp148, label %land.lhs.true150, label %if.end267, !dbg !9121

land.lhs.true150:                                 ; preds = %land.lhs.true141
  %85 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9122
  %tobool151 = icmp ne %struct.VEC_vn_reference_op_s_heap* %85, null, !dbg !9122
  br i1 %tobool151, label %cond.true152, label %cond.false154, !dbg !9122

cond.true152:                                     ; preds = %land.lhs.true150
  %86 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9122
  %base153 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %86, i32 0, i32 0, !dbg !9122
  br label %cond.end155, !dbg !9122

cond.false154:                                    ; preds = %land.lhs.true150
  br label %cond.end155, !dbg !9122

cond.end155:                                      ; preds = %cond.false154, %cond.true152
  %cond156 = phi %struct.VEC_vn_reference_op_s_base* [ %base153, %cond.true152 ], [ null, %cond.false154 ], !dbg !9122
  %call157 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond156), !dbg !9122
  %cmp158 = icmp uge i32 %call157, 2, !dbg !9123
  br i1 %cmp158, label %land.lhs.true160, label %if.end267, !dbg !9124

land.lhs.true160:                                 ; preds = %cond.end155
  %87 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9125
  %tobool161 = icmp ne %struct.VEC_vn_reference_op_s_heap* %87, null, !dbg !9125
  br i1 %tobool161, label %cond.true162, label %cond.false164, !dbg !9125

cond.true162:                                     ; preds = %land.lhs.true160
  %88 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9125
  %base163 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %88, i32 0, i32 0, !dbg !9125
  br label %cond.end165, !dbg !9125

cond.false164:                                    ; preds = %land.lhs.true160
  br label %cond.end165, !dbg !9125

cond.end165:                                      ; preds = %cond.false164, %cond.true162
  %cond166 = phi %struct.VEC_vn_reference_op_s_base* [ %base163, %cond.true162 ], [ null, %cond.false164 ], !dbg !9125
  %call167 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond166), !dbg !9125
  %cmp168 = icmp ule i32 %call167, 3, !dbg !9126
  br i1 %cmp168, label %if.then170, label %if.end267, !dbg !9127

if.then170:                                       ; preds = %cond.end165
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %arg0, metadata !9128, metadata !DIExpression()), !dbg !9130
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %arg1, metadata !9131, metadata !DIExpression()), !dbg !9132
  store %struct.vn_reference_op_struct* null, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9132
  call void @llvm.dbg.declare(metadata i8* %anyconst, metadata !9133, metadata !DIExpression()), !dbg !9134
  store i8 0, i8* %anyconst, align 1, !dbg !9134
  %89 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9135
  %tobool171 = icmp ne %struct.VEC_vn_reference_op_s_heap* %89, null, !dbg !9135
  br i1 %tobool171, label %cond.true172, label %cond.false174, !dbg !9135

cond.true172:                                     ; preds = %if.then170
  %90 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9135
  %base173 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %90, i32 0, i32 0, !dbg !9135
  br label %cond.end175, !dbg !9135

cond.false174:                                    ; preds = %if.then170
  br label %cond.end175, !dbg !9135

cond.end175:                                      ; preds = %cond.false174, %cond.true172
  %cond176 = phi %struct.VEC_vn_reference_op_s_base* [ %base173, %cond.true172 ], [ null, %cond.false174 ], !dbg !9135
  %call177 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond176, i32 1), !dbg !9135
  store %struct.vn_reference_op_struct* %call177, %struct.vn_reference_op_struct** %arg0, align 8, !dbg !9136
  %91 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9137
  %tobool178 = icmp ne %struct.VEC_vn_reference_op_s_heap* %91, null, !dbg !9137
  br i1 %tobool178, label %cond.true179, label %cond.false181, !dbg !9137

cond.true179:                                     ; preds = %cond.end175
  %92 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9137
  %base180 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %92, i32 0, i32 0, !dbg !9137
  br label %cond.end182, !dbg !9137

cond.false181:                                    ; preds = %cond.end175
  br label %cond.end182, !dbg !9137

cond.end182:                                      ; preds = %cond.false181, %cond.true179
  %cond183 = phi %struct.VEC_vn_reference_op_s_base* [ %base180, %cond.true179 ], [ null, %cond.false181 ], !dbg !9137
  %call184 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond183), !dbg !9137
  %cmp185 = icmp ugt i32 %call184, 2, !dbg !9139
  br i1 %cmp185, label %if.then187, label %if.end195, !dbg !9140

if.then187:                                       ; preds = %cond.end182
  %93 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9141
  %tobool188 = icmp ne %struct.VEC_vn_reference_op_s_heap* %93, null, !dbg !9141
  br i1 %tobool188, label %cond.true189, label %cond.false191, !dbg !9141

cond.true189:                                     ; preds = %if.then187
  %94 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !9141
  %base190 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %94, i32 0, i32 0, !dbg !9141
  br label %cond.end192, !dbg !9141

cond.false191:                                    ; preds = %if.then187
  br label %cond.end192, !dbg !9141

cond.end192:                                      ; preds = %cond.false191, %cond.true189
  %cond193 = phi %struct.VEC_vn_reference_op_s_base* [ %base190, %cond.true189 ], [ null, %cond.false191 ], !dbg !9141
  %call194 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond193, i32 2), !dbg !9141
  store %struct.vn_reference_op_struct* %call194, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9142
  br label %if.end195, !dbg !9143

if.end195:                                        ; preds = %cond.end192, %cond.end182
  %95 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg0, align 8, !dbg !9144
  %opcode196 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %95, i32 0, i32 0, !dbg !9144
  %96 = load i32, i32* %opcode196, align 8, !dbg !9144
  %idxprom197 = sext i32 %96 to i64, !dbg !9144
  %arrayidx198 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom197, !dbg !9144
  %97 = load i32, i32* %arrayidx198, align 4, !dbg !9144
  %cmp199 = icmp eq i32 %97, 1, !dbg !9146
  br i1 %cmp199, label %if.then209, label %lor.lhs.false, !dbg !9147

lor.lhs.false:                                    ; preds = %if.end195
  %98 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg0, align 8, !dbg !9148
  %opcode201 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %98, i32 0, i32 0, !dbg !9149
  %99 = load i32, i32* %opcode201, align 8, !dbg !9149
  %cmp202 = icmp eq i32 %99, 121, !dbg !9150
  br i1 %cmp202, label %land.lhs.true204, label %if.end210, !dbg !9151

land.lhs.true204:                                 ; preds = %lor.lhs.false
  %100 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg0, align 8, !dbg !9152
  %op0205 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %100, i32 0, i32 2, !dbg !9153
  %101 = load %union.tree_node*, %union.tree_node** %op0205, align 8, !dbg !9153
  %call206 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %101), !dbg !9154
  %conv207 = zext i8 %call206 to i32, !dbg !9154
  %tobool208 = icmp ne i32 %conv207, 0, !dbg !9154
  br i1 %tobool208, label %if.then209, label %if.end210, !dbg !9155

if.then209:                                       ; preds = %land.lhs.true204, %if.end195
  store i8 1, i8* %anyconst, align 1, !dbg !9156
  br label %if.end210, !dbg !9157

if.end210:                                        ; preds = %if.then209, %land.lhs.true204, %lor.lhs.false
  %102 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9158
  %tobool211 = icmp ne %struct.vn_reference_op_struct* %102, null, !dbg !9158
  br i1 %tobool211, label %land.lhs.true212, label %if.end228, !dbg !9160

land.lhs.true212:                                 ; preds = %if.end210
  %103 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9161
  %opcode213 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %103, i32 0, i32 0, !dbg !9161
  %104 = load i32, i32* %opcode213, align 8, !dbg !9161
  %idxprom214 = sext i32 %104 to i64, !dbg !9161
  %arrayidx215 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom214, !dbg !9161
  %105 = load i32, i32* %arrayidx215, align 4, !dbg !9161
  %cmp216 = icmp eq i32 %105, 1, !dbg !9162
  br i1 %cmp216, label %if.then227, label %lor.lhs.false218, !dbg !9163

lor.lhs.false218:                                 ; preds = %land.lhs.true212
  %106 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9164
  %opcode219 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %106, i32 0, i32 0, !dbg !9165
  %107 = load i32, i32* %opcode219, align 8, !dbg !9165
  %cmp220 = icmp eq i32 %107, 121, !dbg !9166
  br i1 %cmp220, label %land.lhs.true222, label %if.end228, !dbg !9167

land.lhs.true222:                                 ; preds = %lor.lhs.false218
  %108 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9168
  %op0223 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %108, i32 0, i32 2, !dbg !9169
  %109 = load %union.tree_node*, %union.tree_node** %op0223, align 8, !dbg !9169
  %call224 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %109), !dbg !9170
  %conv225 = zext i8 %call224 to i32, !dbg !9170
  %tobool226 = icmp ne i32 %conv225, 0, !dbg !9170
  br i1 %tobool226, label %if.then227, label %if.end228, !dbg !9171

if.then227:                                       ; preds = %land.lhs.true222, %land.lhs.true212
  store i8 1, i8* %anyconst, align 1, !dbg !9172
  br label %if.end228, !dbg !9173

if.end228:                                        ; preds = %if.then227, %land.lhs.true222, %lor.lhs.false218, %if.end210
  %110 = load i8, i8* %anyconst, align 1, !dbg !9174
  %tobool229 = icmp ne i8 %110, 0, !dbg !9174
  br i1 %tobool229, label %if.then230, label %if.end266, !dbg !9176

if.then230:                                       ; preds = %if.end228
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded, metadata !9177, metadata !DIExpression()), !dbg !9179
  %111 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op119, align 8, !dbg !9180
  %op0231 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %111, i32 0, i32 2, !dbg !9180
  %112 = load %union.tree_node*, %union.tree_node** %op0231, align 8, !dbg !9180
  %exp232 = bitcast %union.tree_node* %112 to %struct.tree_exp*, !dbg !9180
  %operands233 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp232, i32 0, i32 3, !dbg !9180
  %arrayidx234 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands233, i64 0, i64 0, !dbg !9180
  %113 = load %union.tree_node*, %union.tree_node** %arrayidx234, align 8, !dbg !9180
  %114 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9180
  %tobool235 = icmp ne %struct.vn_reference_op_struct* %114, null, !dbg !9180
  %115 = zext i1 %tobool235 to i64, !dbg !9180
  %cond236 = select i1 %tobool235, i32 2, i32 1, !dbg !9180
  %116 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg0, align 8, !dbg !9180
  %op0237 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %116, i32 0, i32 2, !dbg !9180
  %117 = load %union.tree_node*, %union.tree_node** %op0237, align 8, !dbg !9180
  %118 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9180
  %tobool238 = icmp ne %struct.vn_reference_op_struct* %118, null, !dbg !9180
  br i1 %tobool238, label %cond.true239, label %cond.false241, !dbg !9180

cond.true239:                                     ; preds = %if.then230
  %119 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %arg1, align 8, !dbg !9180
  %op0240 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %119, i32 0, i32 2, !dbg !9180
  %120 = load %union.tree_node*, %union.tree_node** %op0240, align 8, !dbg !9180
  br label %cond.end242, !dbg !9180

cond.false241:                                    ; preds = %if.then230
  br label %cond.end242, !dbg !9180

cond.end242:                                      ; preds = %cond.false241, %cond.true239
  %cond243 = phi %union.tree_node* [ %120, %cond.true239 ], [ null, %cond.false241 ], !dbg !9180
  %call244 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %113, i32 %cond236, %union.tree_node* %117, %union.tree_node* %cond243), !dbg !9180
  store %union.tree_node* %call244, %union.tree_node** %folded, align 8, !dbg !9179
  %121 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9181
  %tobool245 = icmp ne %union.tree_node* %121, null, !dbg !9181
  br i1 %tobool245, label %land.lhs.true246, label %if.end257, !dbg !9183

land.lhs.true246:                                 ; preds = %cond.end242
  %122 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9184
  %base247 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !9184
  %123 = bitcast %struct.tree_base* %base247 to i64*, !dbg !9184
  %bf.load248 = load i64, i64* %123, align 8, !dbg !9184
  %bf.clear249 = and i64 %bf.load248, 65535, !dbg !9184
  %bf.cast250 = trunc i64 %bf.clear249 to i32, !dbg !9184
  %cmp251 = icmp eq i32 %bf.cast250, 116, !dbg !9185
  br i1 %cmp251, label %if.then253, label %if.end257, !dbg !9186

if.then253:                                       ; preds = %land.lhs.true246
  %124 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9187
  %exp254 = bitcast %union.tree_node* %124 to %struct.tree_exp*, !dbg !9187
  %operands255 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp254, i32 0, i32 3, !dbg !9187
  %arrayidx256 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands255, i64 0, i64 0, !dbg !9187
  %125 = load %union.tree_node*, %union.tree_node** %arrayidx256, align 8, !dbg !9187
  store %union.tree_node* %125, %union.tree_node** %folded, align 8, !dbg !9188
  br label %if.end257, !dbg !9189

if.end257:                                        ; preds = %if.then253, %land.lhs.true246, %cond.end242
  %126 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9190
  %tobool258 = icmp ne %union.tree_node* %126, null, !dbg !9190
  br i1 %tobool258, label %land.lhs.true259, label %if.end265, !dbg !9192

land.lhs.true259:                                 ; preds = %if.end257
  %127 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9193
  %call260 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %127), !dbg !9194
  %conv261 = zext i8 %call260 to i32, !dbg !9194
  %tobool262 = icmp ne i32 %conv261, 0, !dbg !9194
  br i1 %tobool262, label %if.then263, label %if.end265, !dbg !9195

if.then263:                                       ; preds = %land.lhs.true259
  %128 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !9196
  %call264 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %128), !dbg !9197
  store %struct.pre_expr_d* %call264, %struct.pre_expr_d** %retval, align 8, !dbg !9198
  br label %return, !dbg !9198

if.end265:                                        ; preds = %land.lhs.true259, %if.end257
  br label %if.end266, !dbg !9199

if.end266:                                        ; preds = %if.end265, %if.end228
  br label %if.end267, !dbg !9200

if.end267:                                        ; preds = %if.end266, %cond.end165, %cond.end155, %land.lhs.true141, %land.lhs.true131, %land.lhs.true125, %cond.end
  %129 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9201
  store %struct.pre_expr_d* %129, %struct.pre_expr_d** %retval, align 8, !dbg !9202
  br label %return, !dbg !9202

sw.default268:                                    ; preds = %entry
  %130 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9203
  store %struct.pre_expr_d* %130, %struct.pre_expr_d** %retval, align 8, !dbg !9204
  br label %return, !dbg !9204

return:                                           ; preds = %sw.default268, %if.end267, %if.then263, %sw.default, %if.end115, %if.then113, %if.then78, %if.end59, %if.then57, %if.then20, %sw.bb
  %131 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !9205
  ret %struct.pre_expr_d* %131, !dbg !9205
}

declare dso_local i32 @get_next_value_id() #2

declare dso_local %struct.vn_nary_op_s* @vn_nary_op_insert_pieces(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_vn_reference_op_s_heap* @VEC_vn_reference_op_s_heap_copy(%struct.VEC_vn_reference_op_s_base* %vec_) #0 !dbg !9206 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !9209, metadata !DIExpression()), !dbg !9210
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !9211, metadata !DIExpression()), !dbg !9210
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9210
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !9210
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9210

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9210
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !9210
  %2 = load i32, i32* %num, align 8, !dbg !9210
  br label %cond.end, !dbg !9210

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9210

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9210
  %conv = zext i32 %cond to i64, !dbg !9210
  store i64 %conv, i64* %len_, align 8, !dbg !9210
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %new_vec_, metadata !9212, metadata !DIExpression()), !dbg !9210
  store %struct.VEC_vn_reference_op_s_heap* null, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !9210
  %3 = load i64, i64* %len_, align 8, !dbg !9213
  %tobool1 = icmp ne i64 %3, 0, !dbg !9213
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9210

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !9215
  %conv2 = trunc i64 %4 to i32, !dbg !9215
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 40), !dbg !9215
  %5 = bitcast i8* %call to %struct.VEC_vn_reference_op_s_heap*, !dbg !9215
  store %struct.VEC_vn_reference_op_s_heap* %5, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !9215
  %6 = load i64, i64* %len_, align 8, !dbg !9215
  %conv3 = trunc i64 %6 to i32, !dbg !9215
  %7 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !9215
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %7, i32 0, i32 0, !dbg !9215
  %num4 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %base, i32 0, i32 0, !dbg !9215
  store i32 %conv3, i32* %num4, align 8, !dbg !9215
  %8 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !9215
  %base5 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %8, i32 0, i32 0, !dbg !9215
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %base5, i32 0, i32 2, !dbg !9215
  %arraydecay = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 0, !dbg !9215
  %9 = bitcast %struct.vn_reference_op_struct* %arraydecay to i8*, !dbg !9215
  %10 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9215
  %vec6 = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %10, i32 0, i32 2, !dbg !9215
  %arraydecay7 = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec6, i64 0, i64 0, !dbg !9215
  %11 = bitcast %struct.vn_reference_op_struct* %arraydecay7 to i8*, !dbg !9215
  %12 = load i64, i64* %len_, align 8, !dbg !9215
  %mul = mul i64 40, %12, !dbg !9215
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !9215
  br label %if.end, !dbg !9215

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %new_vec_, align 8, !dbg !9210
  ret %struct.VEC_vn_reference_op_s_heap* %13, !dbg !9210
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_replace(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_, %struct.vn_reference_op_struct* %obj_) #0 !dbg !9217 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.vn_reference_op_struct*, align 8
  %slot_ = alloca %struct.vn_reference_op_struct*, align 8
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !9222, metadata !DIExpression()), !dbg !9223
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9224, metadata !DIExpression()), !dbg !9223
  store %struct.vn_reference_op_struct* %obj_, %struct.vn_reference_op_struct** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %obj_.addr, metadata !9225, metadata !DIExpression()), !dbg !9223
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %slot_, metadata !9226, metadata !DIExpression()), !dbg !9223
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !9223
  %1 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9223
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %1, i32 0, i32 0, !dbg !9223
  %2 = load i32, i32* %num, align 8, !dbg !9223
  %cmp = icmp ult i32 %0, %2, !dbg !9223
  %conv = zext i1 %cmp to i32, !dbg !9223
  %3 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9223
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %3, i32 0, i32 2, !dbg !9223
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !9223
  %idxprom = zext i32 %4 to i64, !dbg !9223
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !9223
  store %struct.vn_reference_op_struct* %arrayidx, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !9223
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !9227
  %tobool = icmp ne %struct.vn_reference_op_struct* %5, null, !dbg !9227
  br i1 %tobool, label %if.then, label %if.end, !dbg !9223

if.then:                                          ; preds = %entry
  %6 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !9227
  %7 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %obj_.addr, align 8, !dbg !9227
  %8 = bitcast %struct.vn_reference_op_struct* %6 to i8*, !dbg !9227
  %9 = bitcast %struct.vn_reference_op_struct* %7 to i8*, !dbg !9227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 40, i1 false), !dbg !9227
  br label %if.end, !dbg !9227

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %slot_, align 8, !dbg !9223
  ret %struct.vn_reference_op_struct* %10, !dbg !9223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %vec_, i32 %ix_) #0 !dbg !9229 {
entry:
  %vec_.addr = alloca %struct.VEC_vn_reference_op_s_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_vn_reference_op_s_base* %vec_, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_base** %vec_.addr, metadata !9232, metadata !DIExpression()), !dbg !9233
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9234, metadata !DIExpression()), !dbg !9233
  %0 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9233
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_base* %0, null, !dbg !9233
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9233

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9233
  %2 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9233
  %num = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %2, i32 0, i32 0, !dbg !9233
  %3 = load i32, i32* %num, align 8, !dbg !9233
  %cmp = icmp ult i32 %1, %3, !dbg !9233
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9235
  %land.ext = zext i1 %4 to i32, !dbg !9233
  %5 = load %struct.VEC_vn_reference_op_s_base*, %struct.VEC_vn_reference_op_s_base** %vec_.addr, align 8, !dbg !9233
  %vec = getelementptr inbounds %struct.VEC_vn_reference_op_s_base, %struct.VEC_vn_reference_op_s_base* %5, i32 0, i32 2, !dbg !9233
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9233
  %idxprom = zext i32 %6 to i64, !dbg !9233
  %arrayidx = getelementptr inbounds [1 x %struct.vn_reference_op_struct], [1 x %struct.vn_reference_op_struct]* %vec, i64 0, i64 %idxprom, !dbg !9233
  ret %struct.vn_reference_op_struct* %arrayidx, !dbg !9233
}

declare dso_local void @vn_reference_fold_indirect(%struct.VEC_vn_reference_op_s_heap**, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @translate_vuse_through_block(%struct.VEC_vn_reference_op_s_heap* %operands, i32 %set, %union.tree_node* %type, %union.tree_node* %vuse, %struct.basic_block_def* %phiblock, %struct.basic_block_def* %block, i8* %same_valid) #0 !dbg !9236 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %operands.addr = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %set.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  %phiblock.addr = alloca %struct.basic_block_def*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %same_valid.addr = alloca i8*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %ref = alloca %struct.ao_ref_s, align 8
  %e = alloca %struct.edge_def*, align 8
  %use_oracle = alloca i8, align 1
  %visited = alloca %struct.bitmap_head_def*, align 8
  store %struct.VEC_vn_reference_op_s_heap* %operands, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %operands.addr, metadata !9239, metadata !DIExpression()), !dbg !9240
  store i32 %set, i32* %set.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %set.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9243, metadata !DIExpression()), !dbg !9244
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !9245, metadata !DIExpression()), !dbg !9246
  store %struct.basic_block_def* %phiblock, %struct.basic_block_def** %phiblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %phiblock.addr, metadata !9247, metadata !DIExpression()), !dbg !9248
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !9249, metadata !DIExpression()), !dbg !9250
  store i8* %same_valid, i8** %same_valid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %same_valid.addr, metadata !9251, metadata !DIExpression()), !dbg !9252
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !9253, metadata !DIExpression()), !dbg !9254
  %0 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !9255
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !9255
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9255
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9255
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %phi, align 8, !dbg !9254
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %ref, metadata !9256, metadata !DIExpression()), !dbg !9267
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9268, metadata !DIExpression()), !dbg !9269
  store %struct.edge_def* null, %struct.edge_def** %e, align 8, !dbg !9269
  call void @llvm.dbg.declare(metadata i8* %use_oracle, metadata !9270, metadata !DIExpression()), !dbg !9271
  %2 = load i8*, i8** %same_valid.addr, align 8, !dbg !9272
  store i8 1, i8* %2, align 1, !dbg !9273
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9274
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %3), !dbg !9276
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !9277
  %cmp = icmp ne %struct.basic_block_def* %call, %4, !dbg !9278
  br i1 %cmp, label %if.then, label %if.end, !dbg !9279

if.then:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !9280
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !9281
  br label %return, !dbg !9281

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %set.addr, align 4, !dbg !9282
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9283
  %8 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands.addr, align 8, !dbg !9284
  %call1 = call zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s* %ref, i32 %6, %union.tree_node* %7, %struct.VEC_vn_reference_op_s_heap* %8), !dbg !9285
  store i8 %call1, i8* %use_oracle, align 1, !dbg !9286
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9287
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !9289
  %cmp3 = icmp eq i32 %call2, 16, !dbg !9290
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !9291

if.then4:                                         ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !9292
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !9293
  %call5 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11), !dbg !9294
  store %struct.edge_def* %call5, %struct.edge_def** %e, align 8, !dbg !9295
  br label %if.end23, !dbg !9296

if.else:                                          ; preds = %if.end
  %12 = load i8, i8* %use_oracle, align 1, !dbg !9297
  %tobool = icmp ne i8 %12, 0, !dbg !9297
  br i1 %tobool, label %if.then6, label %if.else21, !dbg !9299

if.then6:                                         ; preds = %if.else
  br label %while.cond, !dbg !9300

while.cond:                                       ; preds = %if.end20, %if.then6
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9301
  %call7 = call zeroext i8 @stmt_may_clobber_ref_p_1(%union.gimple_statement_d* %13, %struct.ao_ref_s* %ref), !dbg !9302
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9303
  %lnot = xor i1 %tobool8, true, !dbg !9303
  br i1 %lnot, label %while.body, label %while.end, !dbg !9300

while.body:                                       ; preds = %while.cond
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9304
  %call9 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %14), !dbg !9306
  store %union.tree_node* %call9, %union.tree_node** %vuse.addr, align 8, !dbg !9307
  %15 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !9308
  %ssa_name10 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !9308
  %def_stmt11 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 2, !dbg !9308
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt11, align 8, !dbg !9308
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %phi, align 8, !dbg !9309
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9310
  %call12 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %17), !dbg !9312
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !9313
  %cmp13 = icmp ne %struct.basic_block_def* %call12, %18, !dbg !9314
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !9315

if.then14:                                        ; preds = %while.body
  %19 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !9316
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !9317
  br label %return, !dbg !9317

if.end15:                                         ; preds = %while.body
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9318
  %call16 = call i32 @gimple_code(%union.gimple_statement_d* %20), !dbg !9320
  %cmp17 = icmp eq i32 %call16, 16, !dbg !9321
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !9322

if.then18:                                        ; preds = %if.end15
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !9323
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %phiblock.addr, align 8, !dbg !9325
  %call19 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %21, %struct.basic_block_def* %22), !dbg !9326
  store %struct.edge_def* %call19, %struct.edge_def** %e, align 8, !dbg !9327
  br label %while.end, !dbg !9328

if.end20:                                         ; preds = %if.end15
  br label %while.cond, !dbg !9300, !llvm.loop !9329

while.end:                                        ; preds = %if.then18, %while.cond
  br label %if.end22, !dbg !9300

if.else21:                                        ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9331
  br label %return, !dbg !9331

if.end22:                                         ; preds = %while.end
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then4
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9332
  %tobool24 = icmp ne %struct.edge_def* %23, null, !dbg !9332
  br i1 %tobool24, label %if.then25, label %if.end42, !dbg !9334

if.then25:                                        ; preds = %if.end23
  %24 = load i8, i8* %use_oracle, align 1, !dbg !9335
  %tobool26 = icmp ne i8 %24, 0, !dbg !9335
  br i1 %tobool26, label %if.then27, label %if.else32, !dbg !9338

if.then27:                                        ; preds = %if.then25
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !9339, metadata !DIExpression()), !dbg !9341
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !9341
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9342
  %call28 = call %union.tree_node* @get_continuation_for_phi(%union.gimple_statement_d* %25, %struct.ao_ref_s* %ref, %struct.bitmap_head_def** %visited), !dbg !9343
  store %union.tree_node* %call28, %union.tree_node** %vuse.addr, align 8, !dbg !9344
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !9345
  %tobool29 = icmp ne %struct.bitmap_head_def* %26, null, !dbg !9345
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !9347

if.then30:                                        ; preds = %if.then27
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !9348
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %27), !dbg !9348
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !9348
  br label %if.end31, !dbg !9348

if.end31:                                         ; preds = %if.then30, %if.then27
  br label %if.end33, !dbg !9349

if.else32:                                        ; preds = %if.then25
  store %union.tree_node* null, %union.tree_node** %vuse.addr, align 8, !dbg !9350
  br label %if.end33

if.end33:                                         ; preds = %if.else32, %if.end31
  %28 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !9351
  %tobool34 = icmp ne %union.tree_node* %28, null, !dbg !9351
  br i1 %tobool34, label %if.end38, label %if.then35, !dbg !9353

if.then35:                                        ; preds = %if.end33
  %29 = load i8*, i8** %same_valid.addr, align 8, !dbg !9354
  store i8 0, i8* %29, align 1, !dbg !9356
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9357
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9357
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 6, !dbg !9357
  %32 = load i32, i32* %dest_idx, align 4, !dbg !9357
  %call36 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %30, i32 %32), !dbg !9357
  %call37 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call36), !dbg !9357
  store %union.tree_node* %call37, %union.tree_node** %vuse.addr, align 8, !dbg !9358
  br label %if.end38, !dbg !9359

if.end38:                                         ; preds = %if.then35, %if.end33
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9360
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9360
  %dest_idx39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 6, !dbg !9360
  %35 = load i32, i32* %dest_idx39, align 4, !dbg !9360
  %call40 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %33, i32 %35), !dbg !9360
  %call41 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call40), !dbg !9360
  store %union.tree_node* %call41, %union.tree_node** %retval, align 8, !dbg !9361
  br label %return, !dbg !9361

if.end42:                                         ; preds = %if.end23
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9362
  br label %return, !dbg !9362

return:                                           ; preds = %if.end42, %if.end38, %if.else21, %if.then14, %if.then
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9363
  ret %union.tree_node* %36, !dbg !9363
}

declare dso_local %struct.vn_reference_s* @vn_reference_insert_pieces(%union.tree_node*, i32, %union.tree_node*, %struct.VEC_vn_reference_op_s_heap*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !9364 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9367, metadata !DIExpression()), !dbg !9368
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9369
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9370
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !9371
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9371
  ret %struct.basic_block_def* %1, !dbg !9372
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %set, i32 %val, %union.gimple_statement_d* %stmt) #0 !dbg !9373 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %set.addr = alloca %struct.bitmap_set*, align 8
  %val.addr = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i11 = alloca i32, align 4
  %bi12 = alloca %struct.bitmap_iterator, align 8
  %exprset13 = alloca %struct.bitmap_set*, align 8
  %val27 = alloca %struct.pre_expr_d*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !9376, metadata !DIExpression()), !dbg !9377
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9380, metadata !DIExpression()), !dbg !9381
  %0 = load i32, i32* %val.addr, align 4, !dbg !9382
  %call = call zeroext i8 @value_id_constant_p(i32 %0), !dbg !9384
  %tobool = icmp ne i8 %call, 0, !dbg !9384
  br i1 %tobool, label %if.then, label %if.end7, !dbg !9385

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9386, metadata !DIExpression()), !dbg !9388
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !9389, metadata !DIExpression()), !dbg !9390
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !9391, metadata !DIExpression()), !dbg !9392
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9393
  %tobool1 = icmp ne %struct.VEC_bitmap_set_t_heap* %1, null, !dbg !9393
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !9393

cond.true:                                        ; preds = %if.then
  %2 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9393
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %2, i32 0, i32 0, !dbg !9393
  br label %cond.end, !dbg !9393

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9393
  %3 = load i32, i32* %val.addr, align 4, !dbg !9393
  %call2 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %3), !dbg !9393
  store %struct.bitmap_set* %call2, %struct.bitmap_set** %exprset, align 8, !dbg !9392
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !9394
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 0, !dbg !9394
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !9394
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !9394
  br label %for.cond, !dbg !9394

for.cond:                                         ; preds = %for.inc, %cond.end
  %call3 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9396
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9394
  br i1 %tobool4, label %for.body, label %for.end, !dbg !9394

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !9398, metadata !DIExpression()), !dbg !9400
  %6 = load i32, i32* %i, align 4, !dbg !9401
  %call5 = call %struct.pre_expr_d* @expression_for_id(i32 %6), !dbg !9402
  store %struct.pre_expr_d* %call5, %struct.pre_expr_d** %expr, align 8, !dbg !9400
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !9403
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 0, !dbg !9405
  %8 = load i32, i32* %kind, align 8, !dbg !9405
  %cmp = icmp eq i32 %8, 3, !dbg !9406
  br i1 %cmp, label %if.then6, label %if.end, !dbg !9407

if.then6:                                         ; preds = %for.body
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !9408
  store %struct.pre_expr_d* %9, %struct.pre_expr_d** %retval, align 8, !dbg !9409
  br label %return, !dbg !9409

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9410

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9396
  br label %for.cond, !dbg !9396, !llvm.loop !9411

for.end:                                          ; preds = %for.cond
  br label %if.end7, !dbg !9413

if.end7:                                          ; preds = %for.end, %entry
  %10 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9414
  %11 = load i32, i32* %val.addr, align 4, !dbg !9416
  %call8 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %10, i32 %11), !dbg !9417
  %tobool9 = icmp ne i8 %call8, 0, !dbg !9417
  br i1 %tobool9, label %if.then10, label %if.end46, !dbg !9418

if.then10:                                        ; preds = %if.end7
  call void @llvm.dbg.declare(metadata i32* %i11, metadata !9419, metadata !DIExpression()), !dbg !9421
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi12, metadata !9422, metadata !DIExpression()), !dbg !9423
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset13, metadata !9424, metadata !DIExpression()), !dbg !9425
  %12 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9426
  %tobool14 = icmp ne %struct.VEC_bitmap_set_t_heap* %12, null, !dbg !9426
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !9426

cond.true15:                                      ; preds = %if.then10
  %13 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9426
  %base16 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %13, i32 0, i32 0, !dbg !9426
  br label %cond.end18, !dbg !9426

cond.false17:                                     ; preds = %if.then10
  br label %cond.end18, !dbg !9426

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_bitmap_set_t_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !9426
  %14 = load i32, i32* %val.addr, align 4, !dbg !9426
  %call20 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond19, i32 %14), !dbg !9426
  store %struct.bitmap_set* %call20, %struct.bitmap_set** %exprset13, align 8, !dbg !9425
  %15 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset13, align 8, !dbg !9427
  %expressions21 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %15, i32 0, i32 0, !dbg !9427
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions21, align 8, !dbg !9427
  %17 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9427
  %expressions22 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %17, i32 0, i32 0, !dbg !9427
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions22, align 8, !dbg !9427
  call void @bmp_iter_and_init(%struct.bitmap_iterator* %bi12, %struct.bitmap_head_def* %16, %struct.bitmap_head_def* %18, i32 0, i32* %i11), !dbg !9427
  br label %for.cond23, !dbg !9427

for.cond23:                                       ; preds = %for.inc44, %cond.end18
  %call24 = call zeroext i8 @bmp_iter_and(%struct.bitmap_iterator* %bi12, i32* %i11), !dbg !9429
  %tobool25 = icmp ne i8 %call24, 0, !dbg !9427
  br i1 %tobool25, label %for.body26, label %for.end45, !dbg !9427

for.body26:                                       ; preds = %for.cond23
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %val27, metadata !9431, metadata !DIExpression()), !dbg !9433
  %19 = load i32, i32* %i11, align 4, !dbg !9434
  %call28 = call %struct.pre_expr_d* @expression_for_id(i32 %19), !dbg !9435
  store %struct.pre_expr_d* %call28, %struct.pre_expr_d** %val27, align 8, !dbg !9433
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9436
  %tobool29 = icmp ne %union.gimple_statement_d* %20, null, !dbg !9436
  br i1 %tobool29, label %if.then30, label %if.end43, !dbg !9438

if.then30:                                        ; preds = %for.body26
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !9439, metadata !DIExpression()), !dbg !9441
  %21 = load %struct.pre_expr_d*, %struct.pre_expr_d** %val27, align 8, !dbg !9442
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %21, i32 0, i32 2, !dbg !9442
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !9442
  %22 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9442
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !9442
  %def_stmt31 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9442
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt31, align 8, !dbg !9442
  store %union.gimple_statement_d* %23, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9441
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9443
  %call32 = call i32 @gimple_code(%union.gimple_statement_d* %24), !dbg !9445
  %cmp33 = icmp ne i32 %call32, 16, !dbg !9446
  br i1 %cmp33, label %land.lhs.true, label %if.end42, !dbg !9447

land.lhs.true:                                    ; preds = %if.then30
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9448
  %call34 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %25), !dbg !9449
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9450
  %call35 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %26), !dbg !9451
  %cmp36 = icmp eq %struct.basic_block_def* %call34, %call35, !dbg !9452
  br i1 %cmp36, label %land.lhs.true37, label %if.end42, !dbg !9453

land.lhs.true37:                                  ; preds = %land.lhs.true
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9454
  %call38 = call i32 @gimple_uid(%union.gimple_statement_d* %27), !dbg !9455
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9456
  %call39 = call i32 @gimple_uid(%union.gimple_statement_d* %28), !dbg !9457
  %cmp40 = icmp uge i32 %call38, %call39, !dbg !9458
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !9459

if.then41:                                        ; preds = %land.lhs.true37
  br label %for.inc44, !dbg !9460

if.end42:                                         ; preds = %land.lhs.true37, %land.lhs.true, %if.then30
  br label %if.end43, !dbg !9461

if.end43:                                         ; preds = %if.end42, %for.body26
  %29 = load %struct.pre_expr_d*, %struct.pre_expr_d** %val27, align 8, !dbg !9462
  store %struct.pre_expr_d* %29, %struct.pre_expr_d** %retval, align 8, !dbg !9463
  br label %return, !dbg !9463

for.inc44:                                        ; preds = %if.then41
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi12, i32* %i11), !dbg !9429
  br label %for.cond23, !dbg !9429, !llvm.loop !9464

for.end45:                                        ; preds = %for.cond23
  br label %if.end46, !dbg !9466

if.end46:                                         ; preds = %for.end45, %if.end7
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !9467
  br label %return, !dbg !9467

return:                                           ; preds = %if.end46, %if.end43, %if.then6
  %30 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !9468
  ret %struct.pre_expr_d* %30, !dbg !9468
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %set, i32 %value_id) #0 !dbg !9469 {
entry:
  %retval = alloca i8, align 1
  %set.addr = alloca %struct.bitmap_set*, align 8
  %value_id.addr = alloca i32, align 4
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !9472, metadata !DIExpression()), !dbg !9473
  store i32 %value_id, i32* %value_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value_id.addr, metadata !9474, metadata !DIExpression()), !dbg !9475
  %0 = load i32, i32* %value_id.addr, align 4, !dbg !9476
  %call = call zeroext i8 @value_id_constant_p(i32 %0), !dbg !9478
  %tobool = icmp ne i8 %call, 0, !dbg !9478
  br i1 %tobool, label %if.then, label %if.end, !dbg !9479

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9480
  br label %return, !dbg !9480

if.end:                                           ; preds = %entry
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9481
  %tobool1 = icmp ne %struct.bitmap_set* %1, null, !dbg !9481
  br i1 %tobool1, label %lor.lhs.false, label %if.then3, !dbg !9483

lor.lhs.false:                                    ; preds = %if.end
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9484
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 0, !dbg !9484
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !9484
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !9484
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !9484
  %tobool2 = icmp ne %struct.bitmap_element_def* %4, null, !dbg !9484
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !9485

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !9486
  br label %return, !dbg !9486

if.end4:                                          ; preds = %lor.lhs.false
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9487
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %5, i32 0, i32 1, !dbg !9488
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !9488
  %7 = load i32, i32* %value_id.addr, align 4, !dbg !9489
  %call5 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %7), !dbg !9490
  %conv = trunc i32 %call5 to i8, !dbg !9490
  store i8 %conv, i8* %retval, align 1, !dbg !9491
  br label %return, !dbg !9491

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !9492
  ret i8 %8, !dbg !9492
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_and_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map1, %struct.bitmap_head_def* %map2, i32 %start_bit, i32* %bit_no) #0 !dbg !9493 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map1.addr = alloca %struct.bitmap_head_def*, align 8
  %map2.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !9496, metadata !DIExpression()), !dbg !9497
  store %struct.bitmap_head_def* %map1, %struct.bitmap_head_def** %map1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map1.addr, metadata !9498, metadata !DIExpression()), !dbg !9499
  store %struct.bitmap_head_def* %map2, %struct.bitmap_head_def** %map2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map2.addr, metadata !9500, metadata !DIExpression()), !dbg !9501
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !9502, metadata !DIExpression()), !dbg !9503
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !9504, metadata !DIExpression()), !dbg !9505
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map1.addr, align 8, !dbg !9506
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !9507
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !9507
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9508
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !9509
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !9510
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map2.addr, align 8, !dbg !9511
  %first1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !9512
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first1, align 8, !dbg !9512
  %5 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9513
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %5, i32 0, i32 1, !dbg !9514
  store %struct.bitmap_element_def* %4, %struct.bitmap_element_def** %elt2, align 8, !dbg !9515
  br label %while.body, !dbg !9516

while.body:                                       ; preds = %entry, %if.end6
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9517
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !9520
  %7 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt12, align 8, !dbg !9520
  %tobool = icmp ne %struct.bitmap_element_def* %7, null, !dbg !9517
  br i1 %tobool, label %if.end, label %if.then, !dbg !9521

if.then:                                          ; preds = %while.body
  %8 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9522
  %elt23 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %8, i32 0, i32 1, !dbg !9524
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt23, align 8, !dbg !9525
  br label %while.end, !dbg !9526

if.end:                                           ; preds = %while.body
  %9 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9527
  %elt14 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %9, i32 0, i32 0, !dbg !9529
  %10 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt14, align 8, !dbg !9529
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %10, i32 0, i32 2, !dbg !9530
  %11 = load i32, i32* %indx, align 8, !dbg !9530
  %12 = load i32, i32* %start_bit.addr, align 4, !dbg !9531
  %div = udiv i32 %12, 128, !dbg !9532
  %cmp = icmp uge i32 %11, %div, !dbg !9533
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !9534

if.then5:                                         ; preds = %if.end
  br label %while.end, !dbg !9535

if.end6:                                          ; preds = %if.end
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9536
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 0, !dbg !9537
  %14 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt17, align 8, !dbg !9537
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %14, i32 0, i32 0, !dbg !9538
  %15 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !9538
  %16 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9539
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %16, i32 0, i32 0, !dbg !9540
  store %struct.bitmap_element_def* %15, %struct.bitmap_element_def** %elt18, align 8, !dbg !9541
  br label %while.body, !dbg !9516, !llvm.loop !9542

while.end:                                        ; preds = %if.then5, %if.then
  br label %while.body9, !dbg !9544

while.body9:                                      ; preds = %while.end, %if.end22
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9545
  %elt210 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 1, !dbg !9548
  %18 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt210, align 8, !dbg !9548
  %tobool11 = icmp ne %struct.bitmap_element_def* %18, null, !dbg !9545
  br i1 %tobool11, label %if.end15, label %if.then12, !dbg !9549

if.then12:                                        ; preds = %while.body9
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9550
  %elt213 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 1, !dbg !9552
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt213, align 8, !dbg !9553
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9554
  %elt114 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 0, !dbg !9555
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt114, align 8, !dbg !9556
  br label %while.end26, !dbg !9557

if.end15:                                         ; preds = %while.body9
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9558
  %elt216 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 1, !dbg !9560
  %22 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt216, align 8, !dbg !9560
  %indx17 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %22, i32 0, i32 2, !dbg !9561
  %23 = load i32, i32* %indx17, align 8, !dbg !9561
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9562
  %elt118 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !9563
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt118, align 8, !dbg !9563
  %indx19 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 2, !dbg !9564
  %26 = load i32, i32* %indx19, align 8, !dbg !9564
  %cmp20 = icmp uge i32 %23, %26, !dbg !9565
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !9566

if.then21:                                        ; preds = %if.end15
  br label %while.end26, !dbg !9567

if.end22:                                         ; preds = %if.end15
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9568
  %elt223 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 1, !dbg !9569
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt223, align 8, !dbg !9569
  %next24 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !9570
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next24, align 8, !dbg !9570
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9571
  %elt225 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 1, !dbg !9572
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt225, align 8, !dbg !9573
  br label %while.body9, !dbg !9544, !llvm.loop !9574

while.end26:                                      ; preds = %if.then21, %if.then12
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9576
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !9578
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !9578
  %indx28 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %32, i32 0, i32 2, !dbg !9579
  %33 = load i32, i32* %indx28, align 8, !dbg !9579
  %34 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9580
  %elt229 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %34, i32 0, i32 1, !dbg !9581
  %35 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt229, align 8, !dbg !9581
  %indx30 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %35, i32 0, i32 2, !dbg !9582
  %36 = load i32, i32* %indx30, align 8, !dbg !9582
  %cmp31 = icmp eq i32 %33, %36, !dbg !9583
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !9584

if.then32:                                        ; preds = %while.end26
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9585
  %elt133 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 0, !dbg !9588
  %38 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt133, align 8, !dbg !9588
  %indx34 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %38, i32 0, i32 2, !dbg !9589
  %39 = load i32, i32* %indx34, align 8, !dbg !9589
  %40 = load i32, i32* %start_bit.addr, align 4, !dbg !9590
  %div35 = udiv i32 %40, 128, !dbg !9591
  %cmp36 = icmp ne i32 %39, %div35, !dbg !9592
  br i1 %cmp36, label %if.then37, label %if.end40, !dbg !9593

if.then37:                                        ; preds = %if.then32
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9594
  %elt138 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 0, !dbg !9595
  %42 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt138, align 8, !dbg !9595
  %indx39 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %42, i32 0, i32 2, !dbg !9596
  %43 = load i32, i32* %indx39, align 8, !dbg !9596
  %mul = mul i32 %43, 128, !dbg !9597
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !9598
  br label %if.end40, !dbg !9599

if.end40:                                         ; preds = %if.then37, %if.then32
  %44 = load i32, i32* %start_bit.addr, align 4, !dbg !9600
  %div41 = udiv i32 %44, 64, !dbg !9601
  %rem = urem i32 %div41, 2, !dbg !9602
  %45 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9603
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %45, i32 0, i32 2, !dbg !9604
  store i32 %rem, i32* %word_no, align 8, !dbg !9605
  %46 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9606
  %elt142 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %46, i32 0, i32 0, !dbg !9607
  %47 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt142, align 8, !dbg !9607
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %47, i32 0, i32 3, !dbg !9608
  %48 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9609
  %word_no43 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %48, i32 0, i32 2, !dbg !9610
  %49 = load i32, i32* %word_no43, align 8, !dbg !9610
  %idxprom = zext i32 %49 to i64, !dbg !9606
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !9606
  %50 = load i64, i64* %arrayidx, align 8, !dbg !9606
  %51 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9611
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %51, i32 0, i32 1, !dbg !9612
  %52 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !9612
  %bits45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %52, i32 0, i32 3, !dbg !9613
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9614
  %word_no46 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 2, !dbg !9615
  %54 = load i32, i32* %word_no46, align 8, !dbg !9615
  %idxprom47 = zext i32 %54 to i64, !dbg !9611
  %arrayidx48 = getelementptr inbounds [2 x i64], [2 x i64]* %bits45, i64 0, i64 %idxprom47, !dbg !9611
  %55 = load i64, i64* %arrayidx48, align 8, !dbg !9611
  %and = and i64 %50, %55, !dbg !9616
  %56 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9617
  %bits49 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %56, i32 0, i32 3, !dbg !9618
  store i64 %and, i64* %bits49, align 8, !dbg !9619
  %57 = load i32, i32* %start_bit.addr, align 4, !dbg !9620
  %rem50 = urem i32 %57, 64, !dbg !9621
  %58 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9622
  %bits51 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %58, i32 0, i32 3, !dbg !9623
  %59 = load i64, i64* %bits51, align 8, !dbg !9624
  %sh_prom = zext i32 %rem50 to i64, !dbg !9624
  %shr = lshr i64 %59, %sh_prom, !dbg !9624
  store i64 %shr, i64* %bits51, align 8, !dbg !9624
  br label %if.end54, !dbg !9625

if.else:                                          ; preds = %while.end26
  %60 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9626
  %word_no52 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %60, i32 0, i32 2, !dbg !9628
  store i32 1, i32* %word_no52, align 8, !dbg !9629
  %61 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9630
  %bits53 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %61, i32 0, i32 3, !dbg !9631
  store i64 0, i64* %bits53, align 8, !dbg !9632
  br label %if.end54

if.end54:                                         ; preds = %if.else, %if.end40
  %62 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9633
  %bits55 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %62, i32 0, i32 3, !dbg !9634
  %63 = load i64, i64* %bits55, align 8, !dbg !9634
  %tobool56 = icmp ne i64 %63, 0, !dbg !9635
  %lnot = xor i1 %tobool56, true, !dbg !9635
  %lnot.ext = zext i1 %lnot to i32, !dbg !9635
  %64 = load i32, i32* %start_bit.addr, align 4, !dbg !9636
  %add = add i32 %64, %lnot.ext, !dbg !9636
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !9636
  %65 = load i32, i32* %start_bit.addr, align 4, !dbg !9637
  %66 = load i32*, i32** %bit_no.addr, align 8, !dbg !9638
  store i32 %65, i32* %66, align 4, !dbg !9639
  ret void, !dbg !9640
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_and(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !9641 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !9642, metadata !DIExpression()), !dbg !9643
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !9644, metadata !DIExpression()), !dbg !9645
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9646
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !9648
  %1 = load i64, i64* %bits, align 8, !dbg !9648
  %tobool = icmp ne i64 %1, 0, !dbg !9646
  br i1 %tobool, label %if.then, label %if.end, !dbg !9649

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !9650

next_bit:                                         ; preds = %if.then20, %if.then
  call void @llvm.dbg.label(metadata !9651), !dbg !9653
  br label %while.cond, !dbg !9654

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9655
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !9656
  %3 = load i64, i64* %bits1, align 8, !dbg !9656
  %and = and i64 %3, 1, !dbg !9657
  %tobool2 = icmp ne i64 %and, 0, !dbg !9658
  %lnot = xor i1 %tobool2, true, !dbg !9658
  br i1 %lnot, label %while.body, label %while.end, !dbg !9654

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9659
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !9661
  %5 = load i64, i64* %bits3, align 8, !dbg !9662
  %shr = lshr i64 %5, 1, !dbg !9662
  store i64 %shr, i64* %bits3, align 8, !dbg !9662
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !9663
  %7 = load i32, i32* %6, align 4, !dbg !9664
  %add = add i32 %7, 1, !dbg !9664
  store i32 %add, i32* %6, align 4, !dbg !9664
  br label %while.cond, !dbg !9654, !llvm.loop !9665

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !9667
  br label %return, !dbg !9667

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !9668
  %9 = load i32, i32* %8, align 4, !dbg !9669
  %add4 = add i32 %9, 64, !dbg !9670
  %sub = sub i32 %add4, 1, !dbg !9671
  %div = udiv i32 %sub, 64, !dbg !9672
  %mul = mul i32 %div, 64, !dbg !9673
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !9674
  store i32 %mul, i32* %10, align 4, !dbg !9675
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9676
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !9677
  %12 = load i32, i32* %word_no, align 8, !dbg !9678
  %inc = add i32 %12, 1, !dbg !9678
  store i32 %inc, i32* %word_no, align 8, !dbg !9678
  br label %while.body6, !dbg !9679

while.body6:                                      ; preds = %if.end, %do.end58
  br label %while.cond7, !dbg !9680

while.cond7:                                      ; preds = %if.end21, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9682
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !9683
  %14 = load i32, i32* %word_no8, align 8, !dbg !9683
  %cmp = icmp ne i32 %14, 2, !dbg !9684
  br i1 %cmp, label %while.body9, label %while.end25, !dbg !9680

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9685
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !9687
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !9687
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !9688
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9689
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !9690
  %18 = load i32, i32* %word_no11, align 8, !dbg !9690
  %idxprom = zext i32 %18 to i64, !dbg !9685
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !9685
  %19 = load i64, i64* %arrayidx, align 8, !dbg !9685
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9691
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 1, !dbg !9692
  %21 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt2, align 8, !dbg !9692
  %bits12 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %21, i32 0, i32 3, !dbg !9693
  %22 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9694
  %word_no13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %22, i32 0, i32 2, !dbg !9695
  %23 = load i32, i32* %word_no13, align 8, !dbg !9695
  %idxprom14 = zext i32 %23 to i64, !dbg !9691
  %arrayidx15 = getelementptr inbounds [2 x i64], [2 x i64]* %bits12, i64 0, i64 %idxprom14, !dbg !9691
  %24 = load i64, i64* %arrayidx15, align 8, !dbg !9691
  %and16 = and i64 %19, %24, !dbg !9696
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9697
  %bits17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 3, !dbg !9698
  store i64 %and16, i64* %bits17, align 8, !dbg !9699
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9700
  %bits18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 3, !dbg !9702
  %27 = load i64, i64* %bits18, align 8, !dbg !9702
  %tobool19 = icmp ne i64 %27, 0, !dbg !9700
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !9703

if.then20:                                        ; preds = %while.body9
  br label %next_bit, !dbg !9704

if.end21:                                         ; preds = %while.body9
  %28 = load i32*, i32** %bit_no.addr, align 8, !dbg !9705
  %29 = load i32, i32* %28, align 4, !dbg !9706
  %add22 = add i32 %29, 64, !dbg !9706
  store i32 %add22, i32* %28, align 4, !dbg !9706
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9707
  %word_no23 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 2, !dbg !9708
  %31 = load i32, i32* %word_no23, align 8, !dbg !9709
  %inc24 = add i32 %31, 1, !dbg !9709
  store i32 %inc24, i32* %word_no23, align 8, !dbg !9709
  br label %while.cond7, !dbg !9680, !llvm.loop !9710

while.end25:                                      ; preds = %while.cond7
  br label %do.body, !dbg !9712

do.body:                                          ; preds = %do.cond52, %while.end25
  br label %do.body26, !dbg !9713

do.body26:                                        ; preds = %do.cond, %do.body
  %32 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9715
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %32, i32 0, i32 0, !dbg !9717
  %33 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !9717
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %33, i32 0, i32 0, !dbg !9718
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !9718
  %35 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9719
  %elt128 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %35, i32 0, i32 0, !dbg !9720
  store %struct.bitmap_element_def* %34, %struct.bitmap_element_def** %elt128, align 8, !dbg !9721
  %36 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9722
  %elt129 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %36, i32 0, i32 0, !dbg !9724
  %37 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt129, align 8, !dbg !9724
  %tobool30 = icmp ne %struct.bitmap_element_def* %37, null, !dbg !9722
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !9725

if.then31:                                        ; preds = %do.body26
  store i8 0, i8* %retval, align 1, !dbg !9726
  br label %return, !dbg !9726

if.end32:                                         ; preds = %do.body26
  br label %do.cond, !dbg !9727

do.cond:                                          ; preds = %if.end32
  %38 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9728
  %elt133 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %38, i32 0, i32 0, !dbg !9729
  %39 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt133, align 8, !dbg !9729
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %39, i32 0, i32 2, !dbg !9730
  %40 = load i32, i32* %indx, align 8, !dbg !9730
  %41 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9731
  %elt234 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %41, i32 0, i32 1, !dbg !9732
  %42 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt234, align 8, !dbg !9732
  %indx35 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %42, i32 0, i32 2, !dbg !9733
  %43 = load i32, i32* %indx35, align 8, !dbg !9733
  %cmp36 = icmp ult i32 %40, %43, !dbg !9734
  br i1 %cmp36, label %do.body26, label %do.end, !dbg !9727, !llvm.loop !9735

do.end:                                           ; preds = %do.cond
  br label %while.cond37, !dbg !9737

while.cond37:                                     ; preds = %if.end50, %do.end
  %44 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9738
  %elt238 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %44, i32 0, i32 1, !dbg !9739
  %45 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt238, align 8, !dbg !9739
  %indx39 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %45, i32 0, i32 2, !dbg !9740
  %46 = load i32, i32* %indx39, align 8, !dbg !9740
  %47 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9741
  %elt140 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %47, i32 0, i32 0, !dbg !9742
  %48 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt140, align 8, !dbg !9742
  %indx41 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %48, i32 0, i32 2, !dbg !9743
  %49 = load i32, i32* %indx41, align 8, !dbg !9743
  %cmp42 = icmp ult i32 %46, %49, !dbg !9744
  br i1 %cmp42, label %while.body43, label %while.end51, !dbg !9737

while.body43:                                     ; preds = %while.cond37
  %50 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9745
  %elt244 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %50, i32 0, i32 1, !dbg !9747
  %51 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt244, align 8, !dbg !9747
  %next45 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %51, i32 0, i32 0, !dbg !9748
  %52 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next45, align 8, !dbg !9748
  %53 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9749
  %elt246 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %53, i32 0, i32 1, !dbg !9750
  store %struct.bitmap_element_def* %52, %struct.bitmap_element_def** %elt246, align 8, !dbg !9751
  %54 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9752
  %elt247 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %54, i32 0, i32 1, !dbg !9754
  %55 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt247, align 8, !dbg !9754
  %tobool48 = icmp ne %struct.bitmap_element_def* %55, null, !dbg !9752
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !9755

if.then49:                                        ; preds = %while.body43
  store i8 0, i8* %retval, align 1, !dbg !9756
  br label %return, !dbg !9756

if.end50:                                         ; preds = %while.body43
  br label %while.cond37, !dbg !9737, !llvm.loop !9757

while.end51:                                      ; preds = %while.cond37
  br label %do.cond52, !dbg !9759

do.cond52:                                        ; preds = %while.end51
  %56 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9760
  %elt153 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %56, i32 0, i32 0, !dbg !9761
  %57 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt153, align 8, !dbg !9761
  %indx54 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %57, i32 0, i32 2, !dbg !9762
  %58 = load i32, i32* %indx54, align 8, !dbg !9762
  %59 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9763
  %elt255 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %59, i32 0, i32 1, !dbg !9764
  %60 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt255, align 8, !dbg !9764
  %indx56 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %60, i32 0, i32 2, !dbg !9765
  %61 = load i32, i32* %indx56, align 8, !dbg !9765
  %cmp57 = icmp ne i32 %58, %61, !dbg !9766
  br i1 %cmp57, label %do.body, label %do.end58, !dbg !9759, !llvm.loop !9767

do.end58:                                         ; preds = %do.cond52
  %62 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9769
  %elt159 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %62, i32 0, i32 0, !dbg !9770
  %63 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt159, align 8, !dbg !9770
  %indx60 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %63, i32 0, i32 2, !dbg !9771
  %64 = load i32, i32* %indx60, align 8, !dbg !9771
  %mul61 = mul i32 %64, 128, !dbg !9772
  %65 = load i32*, i32** %bit_no.addr, align 8, !dbg !9773
  store i32 %mul61, i32* %65, align 4, !dbg !9774
  %66 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !9775
  %word_no62 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %66, i32 0, i32 2, !dbg !9776
  store i32 0, i32* %word_no62, align 8, !dbg !9777
  br label %while.body6, !dbg !9679, !llvm.loop !9778

return:                                           ; preds = %if.then49, %if.then31, %while.end
  %67 = load i8, i8* %retval, align 1, !dbg !9780
  ret i8 %67, !dbg !9780
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !9781 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9782, metadata !DIExpression()), !dbg !9783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9784
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9785
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !9786
  %1 = load i32, i32* %uid, align 4, !dbg !9786
  ret i32 %1, !dbg !9787
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_expr_type(%struct.pre_expr_d* %e) #0 !dbg !9788 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %e, %struct.pre_expr_d** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e.addr, metadata !9789, metadata !DIExpression()), !dbg !9790
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9791
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !9792
  %1 = load i32, i32* %kind, align 8, !dbg !9792
  switch i32 %1, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb1
    i32 2, label %sw.bb5
    i32 1, label %sw.bb8
  ], !dbg !9793

sw.bb:                                            ; preds = %entry
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9794
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %2, i32 0, i32 2, !dbg !9794
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !9794
  %3 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9794
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !9794
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9794
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9794
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !9796
  br label %return, !dbg !9796

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9797
  %u2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 2, !dbg !9797
  %constant = bitcast %union.pre_expr_union_d* %u2 to %union.tree_node**, !dbg !9797
  %6 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !9797
  %common3 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !9797
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !9797
  %7 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !9797
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !9798
  br label %return, !dbg !9798

sw.bb5:                                           ; preds = %entry
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9799
  %u6 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %8, i32 0, i32 2, !dbg !9799
  %reference = bitcast %union.pre_expr_union_d* %u6 to %struct.vn_reference_s**, !dbg !9799
  %9 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !9799
  %type7 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %9, i32 0, i32 4, !dbg !9800
  %10 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !9800
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !9801
  br label %return, !dbg !9801

sw.bb8:                                           ; preds = %entry
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e.addr, align 8, !dbg !9802
  %u9 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %11, i32 0, i32 2, !dbg !9802
  %nary = bitcast %union.pre_expr_union_d* %u9 to %struct.vn_nary_op_s**, !dbg !9802
  %12 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !9802
  %type10 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %12, i32 0, i32 4, !dbg !9803
  %13 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !9803
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !9804
  br label %return, !dbg !9804

sw.epilog:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1397, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9805
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9806
  br label %return, !dbg !9806

return:                                           ; preds = %sw.epilog, %sw.bb8, %sw.bb5, %sw.bb1, %sw.bb
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9807
  ret %union.tree_node* %14, !dbg !9807
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.var_ann_d* @get_var_ann(%union.tree_node* %var) #0 !dbg !9808 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %p = alloca %struct.var_ann_d**, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9812, metadata !DIExpression()), !dbg !9813
  call void @llvm.dbg.declare(metadata %struct.var_ann_d*** %p, metadata !9814, metadata !DIExpression()), !dbg !9816
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9817
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9817
  %bf.load = load i64, i64* %1, align 8, !dbg !9817
  %bf.clear = and i64 %bf.load, 65535, !dbg !9817
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9817
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !9817
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9817

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %var_decl = bitcast %union.tree_node* %2 to %struct.tree_var_decl*, !dbg !9817
  %ann = getelementptr inbounds %struct.tree_var_decl, %struct.tree_var_decl* %var_decl, i32 0, i32 1, !dbg !9817
  br label %cond.end19, !dbg !9817

cond.false:                                       ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9817
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9817
  %bf.load2 = load i64, i64* %4, align 8, !dbg !9817
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9817
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9817
  %cmp5 = icmp eq i32 %bf.cast4, 34, !dbg !9817
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !9817

cond.true6:                                       ; preds = %cond.false
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %parm_decl = bitcast %union.tree_node* %5 to %struct.tree_parm_decl*, !dbg !9817
  %ann7 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 2, !dbg !9817
  br label %cond.end17, !dbg !9817

cond.false8:                                      ; preds = %cond.false
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9817
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !9817
  %bf.load10 = load i64, i64* %7, align 8, !dbg !9817
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !9817
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !9817
  %cmp13 = icmp eq i32 %bf.cast12, 36, !dbg !9817
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !9817

cond.true14:                                      ; preds = %cond.false8
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9817
  %result_decl = bitcast %union.tree_node* %8 to %struct.tree_result_decl*, !dbg !9817
  %ann15 = getelementptr inbounds %struct.tree_result_decl, %struct.tree_result_decl* %result_decl, i32 0, i32 1, !dbg !9817
  br label %cond.end, !dbg !9817

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end, !dbg !9817

cond.end:                                         ; preds = %cond.false16, %cond.true14
  %cond = phi %struct.var_ann_d** [ %ann15, %cond.true14 ], [ null, %cond.false16 ], !dbg !9817
  br label %cond.end17, !dbg !9817

cond.end17:                                       ; preds = %cond.end, %cond.true6
  %cond18 = phi %struct.var_ann_d** [ %ann7, %cond.true6 ], [ %cond, %cond.end ], !dbg !9817
  br label %cond.end19, !dbg !9817

cond.end19:                                       ; preds = %cond.end17, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %ann, %cond.true ], [ %cond18, %cond.end17 ], !dbg !9817
  store %struct.var_ann_d** %cond20, %struct.var_ann_d*** %p, align 8, !dbg !9816
  %9 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !9818
  %tobool = icmp ne %struct.var_ann_d** %9, null, !dbg !9818
  br i1 %tobool, label %cond.false22, label %cond.true21, !dbg !9818

cond.true21:                                      ; preds = %cond.end19
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.30, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9818
  br label %cond.end23, !dbg !9818

cond.false22:                                     ; preds = %cond.end19
  br label %cond.end23, !dbg !9818

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !9818
  %10 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !9819
  %11 = load %struct.var_ann_d*, %struct.var_ann_d** %10, align 8, !dbg !9820
  %tobool25 = icmp ne %struct.var_ann_d* %11, null, !dbg !9820
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !9820

cond.true26:                                      ; preds = %cond.end23
  %12 = load %struct.var_ann_d**, %struct.var_ann_d*** %p, align 8, !dbg !9821
  %13 = load %struct.var_ann_d*, %struct.var_ann_d** %12, align 8, !dbg !9822
  br label %cond.end28, !dbg !9820

cond.false27:                                     ; preds = %cond.end23
  %14 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9823
  %call = call %struct.var_ann_d* @create_var_ann(%union.tree_node* %14), !dbg !9824
  br label %cond.end28, !dbg !9820

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.var_ann_d* [ %13, %cond.true26 ], [ %call, %cond.false27 ], !dbg !9820
  ret %struct.var_ann_d* %cond29, !dbg !9825
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !9826 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9829, metadata !DIExpression()), !dbg !9830
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9831, metadata !DIExpression()), !dbg !9832
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9833
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9833
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9834
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9835
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !9836
  ret %union.tree_node* %call, !dbg !9837
}

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node*) #2

declare dso_local %struct.var_ann_d* @create_var_ann(%union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %t) #0 !dbg !9838 {
entry:
  %retval = alloca %struct.pre_expr_d*, align 8
  %t.addr = alloca %union.tree_node*, align 8
  %result = alloca %struct.vn_nary_op_s*, align 8
  %result_id = alloca i32, align 4
  %e = alloca %struct.pre_expr_d*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9839, metadata !DIExpression()), !dbg !9840
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9841
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9841
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9841
  %bf.load = load i64, i64* %1, align 8, !dbg !9841
  %bf.clear = and i64 %bf.load, 65535, !dbg !9841
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9841
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !9843
  br i1 %cmp, label %if.then, label %if.else, !dbg !9844

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9845
  %call = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %2), !dbg !9846
  store %struct.pre_expr_d* %call, %struct.pre_expr_d** %retval, align 8, !dbg !9847
  br label %return, !dbg !9847

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9848
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %3), !dbg !9850
  %tobool = icmp ne i8 %call1, 0, !dbg !9850
  br i1 %tobool, label %if.then2, label %if.else4, !dbg !9851

if.then2:                                         ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9852
  %call3 = call %struct.pre_expr_d* @get_or_alloc_expr_for_constant(%union.tree_node* %4), !dbg !9853
  store %struct.pre_expr_d* %call3, %struct.pre_expr_d** %retval, align 8, !dbg !9854
  br label %return, !dbg !9854

if.else4:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %result, metadata !9855, metadata !DIExpression()), !dbg !9857
  call void @llvm.dbg.declare(metadata i32* %result_id, metadata !9858, metadata !DIExpression()), !dbg !9859
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9860
  %call5 = call %union.tree_node* @vn_nary_op_lookup(%union.tree_node* %5, %struct.vn_nary_op_s** %result), !dbg !9861
  %6 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %result, align 8, !dbg !9862
  %cmp6 = icmp ne %struct.vn_nary_op_s* %6, null, !dbg !9864
  br i1 %cmp6, label %if.then7, label %if.end14, !dbg !9865

if.then7:                                         ; preds = %if.else4
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e, metadata !9866, metadata !DIExpression()), !dbg !9868
  %7 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !9869
  %call8 = call i8* @pool_alloc(%struct.alloc_pool_def* %7), !dbg !9870
  %8 = bitcast i8* %call8 to %struct.pre_expr_d*, !dbg !9871
  store %struct.pre_expr_d* %8, %struct.pre_expr_d** %e, align 8, !dbg !9868
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9872
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %9, i32 0, i32 0, !dbg !9873
  store i32 1, i32* %kind, align 8, !dbg !9874
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %result, align 8, !dbg !9875
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9876
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %11, i32 0, i32 2, !dbg !9876
  %nary = bitcast %union.pre_expr_union_d* %u to %struct.vn_nary_op_s**, !dbg !9876
  store %struct.vn_nary_op_s* %10, %struct.vn_nary_op_s** %nary, align 8, !dbg !9877
  %12 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9878
  %call9 = call i32 @lookup_expression_id(%struct.pre_expr_d* %12), !dbg !9879
  store i32 %call9, i32* %result_id, align 4, !dbg !9880
  %13 = load i32, i32* %result_id, align 4, !dbg !9881
  %cmp10 = icmp ne i32 %13, 0, !dbg !9883
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !9884

if.then11:                                        ; preds = %if.then7
  %14 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @pre_expr_pool, align 8, !dbg !9885
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9887
  %16 = bitcast %struct.pre_expr_d* %15 to i8*, !dbg !9887
  call void @pool_free(%struct.alloc_pool_def* %14, i8* %16), !dbg !9888
  %17 = load i32, i32* %result_id, align 4, !dbg !9889
  %call12 = call %struct.pre_expr_d* @expression_for_id(i32 %17), !dbg !9890
  store %struct.pre_expr_d* %call12, %struct.pre_expr_d** %e, align 8, !dbg !9891
  %18 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9892
  store %struct.pre_expr_d* %18, %struct.pre_expr_d** %retval, align 8, !dbg !9893
  br label %return, !dbg !9893

if.end:                                           ; preds = %if.then7
  %19 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9894
  %call13 = call i32 @alloc_expression_id(%struct.pre_expr_d* %19), !dbg !9895
  %20 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !9896
  store %struct.pre_expr_d* %20, %struct.pre_expr_d** %retval, align 8, !dbg !9897
  br label %return, !dbg !9897

if.end14:                                         ; preds = %if.else4
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %retval, align 8, !dbg !9898
  br label %return, !dbg !9898

return:                                           ; preds = %if.end16, %if.end, %if.then11, %if.then2, %if.then
  %21 = load %struct.pre_expr_d*, %struct.pre_expr_d** %retval, align 8, !dbg !9899
  ret %struct.pre_expr_d* %21, !dbg !9899
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_constant_for_value_id(i32 %v) #0 !dbg !9900 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %v.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !9903, metadata !DIExpression()), !dbg !9904
  %0 = load i32, i32* %v.addr, align 4, !dbg !9905
  %call = call zeroext i8 @value_id_constant_p(i32 %0), !dbg !9907
  %tobool = icmp ne i8 %call, 0, !dbg !9907
  br i1 %tobool, label %if.then, label %if.end7, !dbg !9908

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9909, metadata !DIExpression()), !dbg !9911
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !9912, metadata !DIExpression()), !dbg !9913
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !9914, metadata !DIExpression()), !dbg !9915
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9916
  %tobool1 = icmp ne %struct.VEC_bitmap_set_t_heap* %1, null, !dbg !9916
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !9916

cond.true:                                        ; preds = %if.then
  %2 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9916
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %2, i32 0, i32 0, !dbg !9916
  br label %cond.end, !dbg !9916

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9916

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9916
  %3 = load i32, i32* %v.addr, align 4, !dbg !9916
  %call2 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %3), !dbg !9916
  store %struct.bitmap_set* %call2, %struct.bitmap_set** %exprset, align 8, !dbg !9915
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !9917
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %4, i32 0, i32 0, !dbg !9917
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !9917
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %5, i32 0, i32* %i), !dbg !9917
  br label %for.cond, !dbg !9917

for.cond:                                         ; preds = %for.inc, %cond.end
  %call3 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9919
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9917
  br i1 %tobool4, label %for.body, label %for.end, !dbg !9917

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !9921, metadata !DIExpression()), !dbg !9923
  %6 = load i32, i32* %i, align 4, !dbg !9924
  %call5 = call %struct.pre_expr_d* @expression_for_id(i32 %6), !dbg !9925
  store %struct.pre_expr_d* %call5, %struct.pre_expr_d** %expr, align 8, !dbg !9923
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !9926
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 0, !dbg !9928
  %8 = load i32, i32* %kind, align 8, !dbg !9928
  %cmp = icmp eq i32 %8, 3, !dbg !9929
  br i1 %cmp, label %if.then6, label %if.end, !dbg !9930

if.then6:                                         ; preds = %for.body
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !9931
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %9, i32 0, i32 2, !dbg !9931
  %constant = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !9931
  %10 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !9931
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !9932
  br label %return, !dbg !9932

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9933

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9919
  br label %for.cond, !dbg !9919, !llvm.loop !9934

for.end:                                          ; preds = %for.cond
  br label %if.end7, !dbg !9936

if.end7:                                          ; preds = %for.end, %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9937
  br label %return, !dbg !9937

return:                                           ; preds = %if.end7, %if.then6
  %11 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9938
  ret %union.tree_node* %11, !dbg !9938
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_unary_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_call_expr_loc(i32, %union.tree_node*, i32, ...) #2

declare dso_local %union.tree_node* @vn_nary_op_lookup(%union.tree_node*, %struct.vn_nary_op_s**) #2

declare dso_local void @pool_free(%struct.alloc_pool_def*, i8*) #2

declare dso_local zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s*, i32, %union.tree_node*, %struct.VEC_vn_reference_op_s_heap*) #2

declare dso_local zeroext i8 @stmt_may_clobber_ref_p_1(%union.gimple_statement_d*, %struct.ao_ref_s*) #2

declare dso_local %union.tree_node* @get_continuation_for_phi(%union.gimple_statement_d*, %struct.ao_ref_s*, %struct.bitmap_head_def**) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_set_replace_value(%struct.bitmap_set* %set, i32 %lookfor, %struct.pre_expr_d* %expr) #0 !dbg !9939 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %lookfor.addr = alloca i32, align 4
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !9942, metadata !DIExpression()), !dbg !9943
  store i32 %lookfor, i32* %lookfor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lookfor.addr, metadata !9944, metadata !DIExpression()), !dbg !9945
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !9946, metadata !DIExpression()), !dbg !9947
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !9948, metadata !DIExpression()), !dbg !9949
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9950, metadata !DIExpression()), !dbg !9951
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !9952, metadata !DIExpression()), !dbg !9953
  %0 = load i32, i32* %lookfor.addr, align 4, !dbg !9954
  %call = call zeroext i8 @value_id_constant_p(i32 %0), !dbg !9956
  %tobool = icmp ne i8 %call, 0, !dbg !9956
  br i1 %tobool, label %if.then, label %if.end, !dbg !9957

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !9958

if.end:                                           ; preds = %entry
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9959
  %2 = load i32, i32* %lookfor.addr, align 4, !dbg !9961
  %call1 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %1, i32 %2), !dbg !9962
  %tobool2 = icmp ne i8 %call1, 0, !dbg !9962
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !9963

if.then3:                                         ; preds = %if.end
  br label %for.end, !dbg !9964

if.end4:                                          ; preds = %if.end
  %3 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9965
  %tobool5 = icmp ne %struct.VEC_bitmap_set_t_heap* %3, null, !dbg !9965
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !9965

cond.true:                                        ; preds = %if.end4
  %4 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !9965
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %4, i32 0, i32 0, !dbg !9965
  br label %cond.end, !dbg !9965

cond.false:                                       ; preds = %if.end4
  br label %cond.end, !dbg !9965

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9965
  %5 = load i32, i32* %lookfor.addr, align 4, !dbg !9965
  %call6 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %5), !dbg !9965
  store %struct.bitmap_set* %call6, %struct.bitmap_set** %exprset, align 8, !dbg !9966
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !9967
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %6, i32 0, i32 0, !dbg !9967
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !9967
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %7, i32 0, i32* %i), !dbg !9967
  br label %for.cond, !dbg !9967

for.cond:                                         ; preds = %for.inc, %cond.end
  %call7 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9969
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9967
  br i1 %tobool8, label %for.body, label %for.end, !dbg !9967

for.body:                                         ; preds = %for.cond
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9971
  %expressions9 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %8, i32 0, i32 0, !dbg !9974
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions9, align 8, !dbg !9974
  %10 = load i32, i32* %i, align 4, !dbg !9975
  %call10 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %9, i32 %10), !dbg !9976
  %tobool11 = icmp ne i32 %call10, 0, !dbg !9976
  br i1 %tobool11, label %if.then12, label %if.end18, !dbg !9977

if.then12:                                        ; preds = %for.body
  %11 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9978
  %expressions13 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %11, i32 0, i32 0, !dbg !9980
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions13, align 8, !dbg !9980
  %13 = load i32, i32* %i, align 4, !dbg !9981
  %call14 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %12, i32 %13), !dbg !9982
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !9983
  %expressions15 = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %14, i32 0, i32 0, !dbg !9984
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions15, align 8, !dbg !9984
  %16 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !9985
  %call16 = call i32 @get_expression_id(%struct.pre_expr_d* %16), !dbg !9986
  %call17 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %15, i32 %call16), !dbg !9987
  br label %for.end, !dbg !9988

if.end18:                                         ; preds = %for.body
  br label %for.inc, !dbg !9989

for.inc:                                          ; preds = %if.end18
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !9969
  br label %for.cond, !dbg !9969, !llvm.loop !9990

for.end:                                          ; preds = %if.then, %if.then3, %if.then12, %for.cond
  ret void, !dbg !9992
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_expression_id(%struct.pre_expr_d* %expr) #0 !dbg !9993 {
entry:
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !9994, metadata !DIExpression()), !dbg !9995
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !9996
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 1, !dbg !9997
  %1 = load i32, i32* %id, align 4, !dbg !9997
  ret i32 %1, !dbg !9998
}

declare dso_local void @bitmap_and_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @bitmap_and_compl(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @valid_in_sets(%struct.bitmap_set* %set1, %struct.bitmap_set* %set2, %struct.pre_expr_d* %expr, %struct.basic_block_def* %block) #0 !dbg !9999 {
entry:
  %retval = alloca i8, align 1
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %temp = alloca %struct.pre_expr_d, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %vro = alloca %struct.vn_reference_op_struct*, align 8
  %i39 = alloca i32, align 4
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !10002, metadata !DIExpression()), !dbg !10003
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !10004, metadata !DIExpression()), !dbg !10005
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !10006, metadata !DIExpression()), !dbg !10007
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10008, metadata !DIExpression()), !dbg !10009
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10010
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 0, !dbg !10011
  %1 = load i32, i32* %kind, align 8, !dbg !10011
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb37
  ], !dbg !10012

sw.bb:                                            ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10013
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 2, !dbg !10013
  %3 = load i8*, i8** %aux, align 8, !dbg !10013
  %4 = bitcast i8* %3 to %struct.bb_bitmap_sets*, !dbg !10013
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %4, i32 0, i32 3, !dbg !10013
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !10013
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10015
  %call = call zeroext i8 @bitmap_set_contains_expr(%struct.bitmap_set* %5, %struct.pre_expr_d* %6), !dbg !10016
  store i8 %call, i8* %retval, align 1, !dbg !10017
  br label %return, !dbg !10017

sw.bb1:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10018, metadata !DIExpression()), !dbg !10020
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !10021, metadata !DIExpression()), !dbg !10022
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10023
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 2, !dbg !10023
  %nary2 = bitcast %union.pre_expr_union_d* %u to %struct.vn_nary_op_s**, !dbg !10023
  %8 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary2, align 8, !dbg !10023
  store %struct.vn_nary_op_s* %8, %struct.vn_nary_op_s** %nary, align 8, !dbg !10022
  store i32 0, i32* %i, align 4, !dbg !10024
  br label %for.cond, !dbg !10026

for.cond:                                         ; preds = %for.inc, %sw.bb1
  %9 = load i32, i32* %i, align 4, !dbg !10027
  %10 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !10029
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %10, i32 0, i32 1, !dbg !10030
  %bf.load = load i32, i32* %length, align 4, !dbg !10030
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10030
  %cmp = icmp ult i32 %9, %bf.lshr, !dbg !10031
  br i1 %cmp, label %for.body, label %for.end, !dbg !10032

for.body:                                         ; preds = %for.cond
  %11 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !10033
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %11, i32 0, i32 5, !dbg !10033
  %12 = load i32, i32* %i, align 4, !dbg !10033
  %idxprom = zext i32 %12 to i64, !dbg !10033
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !10033
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10033
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10033
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !10033
  %bf.load3 = load i64, i64* %14, align 8, !dbg !10033
  %bf.clear = and i64 %bf.load3, 65535, !dbg !10033
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10033
  %cmp4 = icmp eq i32 %bf.cast, 141, !dbg !10036
  br i1 %cmp4, label %if.then, label %if.end24, !dbg !10037

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %temp, metadata !10038, metadata !DIExpression()), !dbg !10040
  %kind5 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 0, !dbg !10041
  store i32 0, i32* %kind5, align 8, !dbg !10042
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10043
  store i32 0, i32* %id, align 4, !dbg !10044
  %15 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !10045
  %op6 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %15, i32 0, i32 5, !dbg !10046
  %16 = load i32, i32* %i, align 4, !dbg !10047
  %idxprom7 = zext i32 %16 to i64, !dbg !10045
  %arrayidx8 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op6, i64 0, i64 %idxprom7, !dbg !10045
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !10045
  %u9 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 2, !dbg !10048
  %name = bitcast %union.pre_expr_union_d* %u9 to %union.tree_node**, !dbg !10048
  store %union.tree_node* %17, %union.tree_node** %name, align 8, !dbg !10049
  %call10 = call i32 @lookup_expression_id(%struct.pre_expr_d* %temp), !dbg !10050
  %id11 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10051
  store i32 %call10, i32* %id11, align 4, !dbg !10052
  %id12 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10053
  %18 = load i32, i32* %id12, align 4, !dbg !10053
  %cmp13 = icmp eq i32 %18, 0, !dbg !10055
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !10056

if.then14:                                        ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !10057
  br label %return, !dbg !10057

if.end:                                           ; preds = %if.then
  %19 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10058
  %call15 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp), !dbg !10058
  %call16 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %19, i32 %call15), !dbg !10058
  %conv = zext i8 %call16 to i32, !dbg !10058
  %tobool = icmp ne i32 %conv, 0, !dbg !10058
  br i1 %tobool, label %if.end23, label %lor.lhs.false, !dbg !10058

lor.lhs.false:                                    ; preds = %if.end
  %20 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10058
  %tobool17 = icmp ne %struct.bitmap_set* %20, null, !dbg !10058
  br i1 %tobool17, label %land.lhs.true, label %if.then22, !dbg !10058

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10058
  %call18 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp), !dbg !10058
  %call19 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %21, i32 %call18), !dbg !10058
  %conv20 = zext i8 %call19 to i32, !dbg !10058
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !10058
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !10060

if.then22:                                        ; preds = %land.lhs.true, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !10061
  br label %return, !dbg !10061

if.end23:                                         ; preds = %land.lhs.true, %if.end
  br label %if.end24, !dbg !10062

if.end24:                                         ; preds = %if.end23, %for.body
  br label %for.inc, !dbg !10063

for.inc:                                          ; preds = %if.end24
  %22 = load i32, i32* %i, align 4, !dbg !10064
  %inc = add i32 %22, 1, !dbg !10064
  store i32 %inc, i32* %i, align 4, !dbg !10064
  br label %for.cond, !dbg !10065, !llvm.loop !10066

for.end:                                          ; preds = %for.cond
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10068
  %aux25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 2, !dbg !10068
  %24 = load i8*, i8** %aux25, align 8, !dbg !10068
  %25 = bitcast i8* %24 to %struct.bb_bitmap_sets*, !dbg !10068
  %contains_may_not_return_call = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %25, i32 0, i32 8, !dbg !10068
  %bf.load26 = load i8, i8* %contains_may_not_return_call, align 8, !dbg !10068
  %bf.lshr27 = lshr i8 %bf.load26, 2, !dbg !10068
  %bf.clear28 = and i8 %bf.lshr27, 1, !dbg !10068
  %bf.cast29 = zext i8 %bf.clear28 to i32, !dbg !10068
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !10068
  br i1 %tobool30, label %land.lhs.true31, label %if.end36, !dbg !10070

land.lhs.true31:                                  ; preds = %for.end
  %26 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !10071
  %call32 = call zeroext i8 @vn_nary_may_trap(%struct.vn_nary_op_s* %26), !dbg !10072
  %conv33 = zext i8 %call32 to i32, !dbg !10072
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !10072
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !10073

if.then35:                                        ; preds = %land.lhs.true31
  store i8 0, i8* %retval, align 1, !dbg !10074
  br label %return, !dbg !10074

if.end36:                                         ; preds = %land.lhs.true31, %for.end
  store i8 1, i8* %retval, align 1, !dbg !10075
  br label %return, !dbg !10075

sw.bb37:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !10076, metadata !DIExpression()), !dbg !10078
  %27 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10079
  %u38 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %27, i32 0, i32 2, !dbg !10079
  %reference = bitcast %union.pre_expr_union_d* %u38 to %struct.vn_reference_s**, !dbg !10079
  %28 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !10079
  store %struct.vn_reference_s* %28, %struct.vn_reference_s** %ref, align 8, !dbg !10078
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro, metadata !10080, metadata !DIExpression()), !dbg !10081
  call void @llvm.dbg.declare(metadata i32* %i39, metadata !10082, metadata !DIExpression()), !dbg !10083
  store i32 0, i32* %i39, align 4, !dbg !10084
  br label %for.cond40, !dbg !10086

for.cond40:                                       ; preds = %for.inc51, %sw.bb37
  %29 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !10087
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %29, i32 0, i32 5, !dbg !10087
  %30 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !10087
  %tobool41 = icmp ne %struct.VEC_vn_reference_op_s_heap* %30, null, !dbg !10087
  br i1 %tobool41, label %cond.true, label %cond.false, !dbg !10087

cond.true:                                        ; preds = %for.cond40
  %31 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !10087
  %operands42 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %31, i32 0, i32 5, !dbg !10087
  %32 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands42, align 8, !dbg !10087
  %base43 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %32, i32 0, i32 0, !dbg !10087
  br label %cond.end, !dbg !10087

cond.false:                                       ; preds = %for.cond40
  br label %cond.end, !dbg !10087

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base43, %cond.true ], [ null, %cond.false ], !dbg !10087
  %33 = load i32, i32* %i39, align 4, !dbg !10087
  %call44 = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %33, %struct.vn_reference_op_struct** %vro), !dbg !10087
  %tobool45 = icmp ne i32 %call44, 0, !dbg !10089
  br i1 %tobool45, label %for.body46, label %for.end53, !dbg !10089

for.body46:                                       ; preds = %cond.end
  %34 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10090
  %35 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10093
  %36 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro, align 8, !dbg !10094
  %call47 = call zeroext i8 @vro_valid_in_sets(%struct.bitmap_set* %34, %struct.bitmap_set* %35, %struct.vn_reference_op_struct* %36), !dbg !10095
  %tobool48 = icmp ne i8 %call47, 0, !dbg !10095
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !10096

if.then49:                                        ; preds = %for.body46
  store i8 0, i8* %retval, align 1, !dbg !10097
  br label %return, !dbg !10097

if.end50:                                         ; preds = %for.body46
  br label %for.inc51, !dbg !10098

for.inc51:                                        ; preds = %if.end50
  %37 = load i32, i32* %i39, align 4, !dbg !10099
  %inc52 = add i32 %37, 1, !dbg !10099
  store i32 %inc52, i32* %i39, align 4, !dbg !10099
  br label %for.cond40, !dbg !10100, !llvm.loop !10101

for.end53:                                        ; preds = %cond.end
  %38 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !10103
  %vuse = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %38, i32 0, i32 2, !dbg !10105
  %39 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10105
  %tobool54 = icmp ne %union.tree_node* %39, null, !dbg !10103
  br i1 %tobool54, label %if.then55, label %if.end70, !dbg !10106

if.then55:                                        ; preds = %for.end53
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !10107, metadata !DIExpression()), !dbg !10109
  %40 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !10110
  %vuse56 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %40, i32 0, i32 2, !dbg !10110
  %41 = load %union.tree_node*, %union.tree_node** %vuse56, align 8, !dbg !10110
  %ssa_name = bitcast %union.tree_node* %41 to %struct.tree_ssa_name*, !dbg !10110
  %def_stmt57 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !10110
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt57, align 8, !dbg !10110
  store %union.gimple_statement_d* %42, %union.gimple_statement_d** %def_stmt, align 8, !dbg !10109
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !10111
  %call58 = call zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %43), !dbg !10113
  %tobool59 = icmp ne i8 %call58, 0, !dbg !10113
  br i1 %tobool59, label %if.end69, label %land.lhs.true60, !dbg !10114

land.lhs.true60:                                  ; preds = %if.then55
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !10115
  %call61 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %44), !dbg !10116
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10117
  %cmp62 = icmp ne %struct.basic_block_def* %call61, %45, !dbg !10118
  br i1 %cmp62, label %land.lhs.true64, label %if.end69, !dbg !10119

land.lhs.true64:                                  ; preds = %land.lhs.true60
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10120
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !10121
  %call65 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %47), !dbg !10122
  %call66 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %46, %struct.basic_block_def* %call65), !dbg !10123
  %tobool67 = icmp ne i8 %call66, 0, !dbg !10123
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !10124

if.then68:                                        ; preds = %land.lhs.true64
  store i8 0, i8* %retval, align 1, !dbg !10125
  br label %return, !dbg !10125

if.end69:                                         ; preds = %land.lhs.true64, %land.lhs.true60, %if.then55
  br label %if.end70, !dbg !10126

if.end70:                                         ; preds = %if.end69, %for.end53
  %48 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10127
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10128
  %call71 = call zeroext i8 @value_dies_in_block_x(%struct.pre_expr_d* %48, %struct.basic_block_def* %49), !dbg !10129
  %tobool72 = icmp ne i8 %call71, 0, !dbg !10130
  %lnot = xor i1 %tobool72, true, !dbg !10130
  %lnot.ext = zext i1 %lnot to i32, !dbg !10130
  %conv73 = trunc i32 %lnot.ext to i8, !dbg !10130
  store i8 %conv73, i8* %retval, align 1, !dbg !10131
  br label %return, !dbg !10131

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10132
  br label %sw.epilog, !dbg !10133

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !10134
  br label %return, !dbg !10134

return:                                           ; preds = %sw.epilog, %if.end70, %if.then68, %if.then49, %if.end36, %if.then35, %if.then22, %if.then14, %sw.bb
  %50 = load i8, i8* %retval, align 1, !dbg !10135
  ret i8 %50, !dbg !10135
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_remove_from_set(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr) #0 !dbg !10136 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %val = alloca i32, align 4
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !10137, metadata !DIExpression()), !dbg !10138
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !10139, metadata !DIExpression()), !dbg !10140
  call void @llvm.dbg.declare(metadata i32* %val, metadata !10141, metadata !DIExpression()), !dbg !10142
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10143
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %0), !dbg !10144
  store i32 %call, i32* %val, align 4, !dbg !10142
  %1 = load i32, i32* %val, align 4, !dbg !10145
  %call1 = call zeroext i8 @value_id_constant_p(i32 %1), !dbg !10147
  %tobool = icmp ne i8 %call1, 0, !dbg !10147
  br i1 %tobool, label %if.end, label %if.then, !dbg !10148

if.then:                                          ; preds = %entry
  %2 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !10149
  %values = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %2, i32 0, i32 1, !dbg !10151
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %values, align 8, !dbg !10151
  %4 = load i32, i32* %val, align 4, !dbg !10152
  %call2 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %3, i32 %4), !dbg !10153
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !10154
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %5, i32 0, i32 0, !dbg !10155
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !10155
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10156
  %call3 = call i32 @get_expression_id(%struct.pre_expr_d* %7), !dbg !10157
  %call4 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %6, i32 %call3), !dbg !10158
  br label %if.end, !dbg !10159

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10160
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bitmap_set_contains_expr(%struct.bitmap_set* %set, %struct.pre_expr_d* %expr) #0 !dbg !10161 {
entry:
  %set.addr = alloca %struct.bitmap_set*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  store %struct.bitmap_set* %set, %struct.bitmap_set** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set.addr, metadata !10164, metadata !DIExpression()), !dbg !10165
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !10166, metadata !DIExpression()), !dbg !10167
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set.addr, align 8, !dbg !10168
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %0, i32 0, i32 0, !dbg !10169
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !10169
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10170
  %call = call i32 @get_expression_id(%struct.pre_expr_d* %2), !dbg !10171
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %call), !dbg !10172
  %conv = trunc i32 %call1 to i8, !dbg !10172
  ret i8 %conv, !dbg !10173
}

declare dso_local zeroext i8 @vn_nary_may_trap(%struct.vn_nary_op_s*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @vro_valid_in_sets(%struct.bitmap_set* %set1, %struct.bitmap_set* %set2, %struct.vn_reference_op_struct* %vro) #0 !dbg !10174 {
entry:
  %retval = alloca i8, align 1
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %vro.addr = alloca %struct.vn_reference_op_struct*, align 8
  %temp = alloca %struct.pre_expr_d, align 8
  %temp29 = alloca %struct.pre_expr_d, align 8
  %temp66 = alloca %struct.pre_expr_d, align 8
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !10177, metadata !DIExpression()), !dbg !10178
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !10179, metadata !DIExpression()), !dbg !10180
  store %struct.vn_reference_op_struct* %vro, %struct.vn_reference_op_struct** %vro.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %vro.addr, metadata !10181, metadata !DIExpression()), !dbg !10182
  %0 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10183
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %0, i32 0, i32 2, !dbg !10185
  %1 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !10185
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !10183
  br i1 %tobool, label %land.lhs.true, label %if.end18, !dbg !10186

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10187
  %op01 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %2, i32 0, i32 2, !dbg !10187
  %3 = load %union.tree_node*, %union.tree_node** %op01, align 8, !dbg !10187
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10187
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10187
  %bf.load = load i64, i64* %4, align 8, !dbg !10187
  %bf.clear = and i64 %bf.load, 65535, !dbg !10187
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10187
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !10188
  br i1 %cmp, label %if.then, label %if.end18, !dbg !10189

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %temp, metadata !10190, metadata !DIExpression()), !dbg !10192
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 0, !dbg !10193
  store i32 0, i32* %kind, align 8, !dbg !10194
  %id = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10195
  store i32 0, i32* %id, align 4, !dbg !10196
  %5 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10197
  %op02 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %5, i32 0, i32 2, !dbg !10198
  %6 = load %union.tree_node*, %union.tree_node** %op02, align 8, !dbg !10198
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 2, !dbg !10199
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !10199
  store %union.tree_node* %6, %union.tree_node** %name, align 8, !dbg !10200
  %call = call i32 @lookup_expression_id(%struct.pre_expr_d* %temp), !dbg !10201
  %id3 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10202
  store i32 %call, i32* %id3, align 4, !dbg !10203
  %id4 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp, i32 0, i32 1, !dbg !10204
  %7 = load i32, i32* %id4, align 4, !dbg !10204
  %cmp5 = icmp eq i32 %7, 0, !dbg !10206
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !10207

if.then6:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !10208
  br label %return, !dbg !10208

if.end:                                           ; preds = %if.then
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10209
  %call7 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp), !dbg !10209
  %call8 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %8, i32 %call7), !dbg !10209
  %conv = zext i8 %call8 to i32, !dbg !10209
  %tobool9 = icmp ne i32 %conv, 0, !dbg !10209
  br i1 %tobool9, label %if.end17, label %lor.lhs.false, !dbg !10209

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10209
  %tobool10 = icmp ne %struct.bitmap_set* %9, null, !dbg !10209
  br i1 %tobool10, label %land.lhs.true11, label %if.then16, !dbg !10209

land.lhs.true11:                                  ; preds = %lor.lhs.false
  %10 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10209
  %call12 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp), !dbg !10209
  %call13 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %10, i32 %call12), !dbg !10209
  %conv14 = zext i8 %call13 to i32, !dbg !10209
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !10209
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !10211

if.then16:                                        ; preds = %land.lhs.true11, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !10212
  br label %return, !dbg !10212

if.end17:                                         ; preds = %land.lhs.true11, %if.end
  br label %if.end18, !dbg !10213

if.end18:                                         ; preds = %if.end17, %land.lhs.true, %entry
  %11 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10214
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %11, i32 0, i32 3, !dbg !10216
  %12 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !10216
  %tobool19 = icmp ne %union.tree_node* %12, null, !dbg !10214
  br i1 %tobool19, label %land.lhs.true20, label %if.end55, !dbg !10217

land.lhs.true20:                                  ; preds = %if.end18
  %13 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10218
  %op121 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %13, i32 0, i32 3, !dbg !10218
  %14 = load %union.tree_node*, %union.tree_node** %op121, align 8, !dbg !10218
  %base22 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !10218
  %15 = bitcast %struct.tree_base* %base22 to i64*, !dbg !10218
  %bf.load23 = load i64, i64* %15, align 8, !dbg !10218
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !10218
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !10218
  %cmp26 = icmp eq i32 %bf.cast25, 141, !dbg !10219
  br i1 %cmp26, label %if.then28, label %if.end55, !dbg !10220

if.then28:                                        ; preds = %land.lhs.true20
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %temp29, metadata !10221, metadata !DIExpression()), !dbg !10223
  %kind30 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp29, i32 0, i32 0, !dbg !10224
  store i32 0, i32* %kind30, align 8, !dbg !10225
  %id31 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp29, i32 0, i32 1, !dbg !10226
  store i32 0, i32* %id31, align 4, !dbg !10227
  %16 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10228
  %op132 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %16, i32 0, i32 3, !dbg !10229
  %17 = load %union.tree_node*, %union.tree_node** %op132, align 8, !dbg !10229
  %u33 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp29, i32 0, i32 2, !dbg !10230
  %name34 = bitcast %union.pre_expr_union_d* %u33 to %union.tree_node**, !dbg !10230
  store %union.tree_node* %17, %union.tree_node** %name34, align 8, !dbg !10231
  %call35 = call i32 @lookup_expression_id(%struct.pre_expr_d* %temp29), !dbg !10232
  %id36 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp29, i32 0, i32 1, !dbg !10233
  store i32 %call35, i32* %id36, align 4, !dbg !10234
  %id37 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp29, i32 0, i32 1, !dbg !10235
  %18 = load i32, i32* %id37, align 4, !dbg !10235
  %cmp38 = icmp eq i32 %18, 0, !dbg !10237
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !10238

if.then40:                                        ; preds = %if.then28
  store i8 0, i8* %retval, align 1, !dbg !10239
  br label %return, !dbg !10239

if.end41:                                         ; preds = %if.then28
  %19 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10240
  %call42 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp29), !dbg !10240
  %call43 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %19, i32 %call42), !dbg !10240
  %conv44 = zext i8 %call43 to i32, !dbg !10240
  %tobool45 = icmp ne i32 %conv44, 0, !dbg !10240
  br i1 %tobool45, label %if.end54, label %lor.lhs.false46, !dbg !10240

lor.lhs.false46:                                  ; preds = %if.end41
  %20 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10240
  %tobool47 = icmp ne %struct.bitmap_set* %20, null, !dbg !10240
  br i1 %tobool47, label %land.lhs.true48, label %if.then53, !dbg !10240

land.lhs.true48:                                  ; preds = %lor.lhs.false46
  %21 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10240
  %call49 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp29), !dbg !10240
  %call50 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %21, i32 %call49), !dbg !10240
  %conv51 = zext i8 %call50 to i32, !dbg !10240
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !10240
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !10242

if.then53:                                        ; preds = %land.lhs.true48, %lor.lhs.false46
  store i8 0, i8* %retval, align 1, !dbg !10243
  br label %return, !dbg !10243

if.end54:                                         ; preds = %land.lhs.true48, %if.end41
  br label %if.end55, !dbg !10244

if.end55:                                         ; preds = %if.end54, %land.lhs.true20, %if.end18
  %22 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10245
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %22, i32 0, i32 4, !dbg !10247
  %23 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !10247
  %tobool56 = icmp ne %union.tree_node* %23, null, !dbg !10245
  br i1 %tobool56, label %land.lhs.true57, label %if.end92, !dbg !10248

land.lhs.true57:                                  ; preds = %if.end55
  %24 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10249
  %op258 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %24, i32 0, i32 4, !dbg !10249
  %25 = load %union.tree_node*, %union.tree_node** %op258, align 8, !dbg !10249
  %base59 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !10249
  %26 = bitcast %struct.tree_base* %base59 to i64*, !dbg !10249
  %bf.load60 = load i64, i64* %26, align 8, !dbg !10249
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !10249
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !10249
  %cmp63 = icmp eq i32 %bf.cast62, 141, !dbg !10250
  br i1 %cmp63, label %if.then65, label %if.end92, !dbg !10251

if.then65:                                        ; preds = %land.lhs.true57
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d* %temp66, metadata !10252, metadata !DIExpression()), !dbg !10254
  %kind67 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp66, i32 0, i32 0, !dbg !10255
  store i32 0, i32* %kind67, align 8, !dbg !10256
  %id68 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp66, i32 0, i32 1, !dbg !10257
  store i32 0, i32* %id68, align 4, !dbg !10258
  %27 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %vro.addr, align 8, !dbg !10259
  %op269 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %27, i32 0, i32 4, !dbg !10260
  %28 = load %union.tree_node*, %union.tree_node** %op269, align 8, !dbg !10260
  %u70 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp66, i32 0, i32 2, !dbg !10261
  %name71 = bitcast %union.pre_expr_union_d* %u70 to %union.tree_node**, !dbg !10261
  store %union.tree_node* %28, %union.tree_node** %name71, align 8, !dbg !10262
  %call72 = call i32 @lookup_expression_id(%struct.pre_expr_d* %temp66), !dbg !10263
  %id73 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp66, i32 0, i32 1, !dbg !10264
  store i32 %call72, i32* %id73, align 4, !dbg !10265
  %id74 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %temp66, i32 0, i32 1, !dbg !10266
  %29 = load i32, i32* %id74, align 4, !dbg !10266
  %cmp75 = icmp eq i32 %29, 0, !dbg !10268
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !10269

if.then77:                                        ; preds = %if.then65
  store i8 0, i8* %retval, align 1, !dbg !10270
  br label %return, !dbg !10270

if.end78:                                         ; preds = %if.then65
  %30 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10271
  %call79 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp66), !dbg !10271
  %call80 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %30, i32 %call79), !dbg !10271
  %conv81 = zext i8 %call80 to i32, !dbg !10271
  %tobool82 = icmp ne i32 %conv81, 0, !dbg !10271
  br i1 %tobool82, label %if.end91, label %lor.lhs.false83, !dbg !10271

lor.lhs.false83:                                  ; preds = %if.end78
  %31 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10271
  %tobool84 = icmp ne %struct.bitmap_set* %31, null, !dbg !10271
  br i1 %tobool84, label %land.lhs.true85, label %if.then90, !dbg !10271

land.lhs.true85:                                  ; preds = %lor.lhs.false83
  %32 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10271
  %call86 = call i32 @get_expr_value_id(%struct.pre_expr_d* %temp66), !dbg !10271
  %call87 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %32, i32 %call86), !dbg !10271
  %conv88 = zext i8 %call87 to i32, !dbg !10271
  %tobool89 = icmp ne i32 %conv88, 0, !dbg !10271
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !10273

if.then90:                                        ; preds = %land.lhs.true85, %lor.lhs.false83
  store i8 0, i8* %retval, align 1, !dbg !10274
  br label %return, !dbg !10274

if.end91:                                         ; preds = %land.lhs.true85, %if.end78
  br label %if.end92, !dbg !10275

if.end92:                                         ; preds = %if.end91, %land.lhs.true57, %if.end55
  store i8 1, i8* %retval, align 1, !dbg !10276
  br label %return, !dbg !10276

return:                                           ; preds = %if.end92, %if.then90, %if.then77, %if.then53, %if.then40, %if.then16, %if.then6
  %33 = load i8, i8* %retval, align 1, !dbg !10277
  ret i8 %33, !dbg !10277
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @value_dies_in_block_x(%struct.pre_expr_d* %expr, %struct.basic_block_def* %block) #0 !dbg !10278 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %vuse = alloca %union.tree_node*, align 8
  %refx = alloca %struct.vn_reference_s*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %id = alloca i32, align 4
  %res = alloca i8, align 1
  %ref = alloca %struct.ao_ref_s, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %def_vuse = alloca %union.tree_node*, align 8
  %def_vdef = alloca %union.tree_node*, align 8
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !10281, metadata !DIExpression()), !dbg !10282
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10283, metadata !DIExpression()), !dbg !10284
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse, metadata !10285, metadata !DIExpression()), !dbg !10286
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10287
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 2, !dbg !10287
  %reference = bitcast %union.pre_expr_union_d* %u to %struct.vn_reference_s**, !dbg !10287
  %1 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !10287
  %vuse1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %1, i32 0, i32 2, !dbg !10288
  %2 = load %union.tree_node*, %union.tree_node** %vuse1, align 8, !dbg !10288
  store %union.tree_node* %2, %union.tree_node** %vuse, align 8, !dbg !10286
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %refx, metadata !10289, metadata !DIExpression()), !dbg !10290
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10291
  %u2 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 2, !dbg !10291
  %reference3 = bitcast %union.pre_expr_union_d* %u2 to %struct.vn_reference_s**, !dbg !10291
  %4 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference3, align 8, !dbg !10291
  store %struct.vn_reference_s* %4, %struct.vn_reference_s** %refx, align 8, !dbg !10290
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !10292, metadata !DIExpression()), !dbg !10293
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10294, metadata !DIExpression()), !dbg !10295
  call void @llvm.dbg.declare(metadata i32* %id, metadata !10296, metadata !DIExpression()), !dbg !10297
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !10298
  %call = call i32 @get_expression_id(%struct.pre_expr_d* %5), !dbg !10299
  store i32 %call, i32* %id, align 4, !dbg !10297
  call void @llvm.dbg.declare(metadata i8* %res, metadata !10300, metadata !DIExpression()), !dbg !10301
  store i8 0, i8* %res, align 1, !dbg !10301
  call void @llvm.dbg.declare(metadata %struct.ao_ref_s* %ref, metadata !10302, metadata !DIExpression()), !dbg !10303
  %6 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10304
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !10304
  br i1 %tobool, label %if.end, label %if.then, !dbg !10306

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10307
  br label %return, !dbg !10307

if.end:                                           ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10308
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 2, !dbg !10308
  %8 = load i8*, i8** %aux, align 8, !dbg !10308
  %9 = bitcast i8* %8 to %struct.bb_bitmap_sets*, !dbg !10308
  %expr_dies = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %9, i32 0, i32 7, !dbg !10308
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies, align 8, !dbg !10308
  %tobool4 = icmp ne %struct.bitmap_head_def* %10, null, !dbg !10308
  br i1 %tobool4, label %land.lhs.true, label %if.end14, !dbg !10310

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10311
  %aux5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 2, !dbg !10311
  %12 = load i8*, i8** %aux5, align 8, !dbg !10311
  %13 = bitcast i8* %12 to %struct.bb_bitmap_sets*, !dbg !10311
  %expr_dies6 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %13, i32 0, i32 7, !dbg !10311
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies6, align 8, !dbg !10311
  %15 = load i32, i32* %id, align 4, !dbg !10312
  %mul = mul i32 %15, 2, !dbg !10313
  %call7 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %14, i32 %mul), !dbg !10314
  %tobool8 = icmp ne i32 %call7, 0, !dbg !10314
  br i1 %tobool8, label %if.then9, label %if.end14, !dbg !10315

if.then9:                                         ; preds = %land.lhs.true
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10316
  %aux10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 2, !dbg !10316
  %17 = load i8*, i8** %aux10, align 8, !dbg !10316
  %18 = bitcast i8* %17 to %struct.bb_bitmap_sets*, !dbg !10316
  %expr_dies11 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %18, i32 0, i32 7, !dbg !10316
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies11, align 8, !dbg !10316
  %20 = load i32, i32* %id, align 4, !dbg !10317
  %mul12 = mul i32 %20, 2, !dbg !10318
  %add = add i32 %mul12, 1, !dbg !10319
  %call13 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %19, i32 %add), !dbg !10320
  %conv = trunc i32 %call13 to i8, !dbg !10320
  store i8 %conv, i8* %retval, align 1, !dbg !10321
  br label %return, !dbg !10321

if.end14:                                         ; preds = %land.lhs.true, %if.end
  %base = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %ref, i32 0, i32 1, !dbg !10322
  store %union.tree_node* null, %union.tree_node** %base, align 8, !dbg !10323
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10324
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %21), !dbg !10326
  %22 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10326
  %23 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false), !dbg !10326
  br label %for.cond, !dbg !10327

for.cond:                                         ; preds = %for.inc, %if.end14
  %call15 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10328
  %tobool16 = icmp ne i8 %call15, 0, !dbg !10330
  %lnot = xor i1 %tobool16, true, !dbg !10330
  br i1 %lnot, label %for.body, label %for.end, !dbg !10331

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def_vuse, metadata !10332, metadata !DIExpression()), !dbg !10334
  call void @llvm.dbg.declare(metadata %union.tree_node** %def_vdef, metadata !10335, metadata !DIExpression()), !dbg !10336
  %call17 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10337
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %def, align 8, !dbg !10338
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !10339
  %call18 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %24), !dbg !10340
  store %union.tree_node* %call18, %union.tree_node** %def_vuse, align 8, !dbg !10341
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !10342
  %call19 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %25), !dbg !10343
  store %union.tree_node* %call19, %union.tree_node** %def_vdef, align 8, !dbg !10344
  %26 = load %union.tree_node*, %union.tree_node** %def_vuse, align 8, !dbg !10345
  %tobool20 = icmp ne %union.tree_node* %26, null, !dbg !10345
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !10347

if.then21:                                        ; preds = %for.body
  br label %for.inc, !dbg !10348

if.end22:                                         ; preds = %for.body
  %27 = load %union.tree_node*, %union.tree_node** %def_vdef, align 8, !dbg !10349
  %tobool23 = icmp ne %union.tree_node* %27, null, !dbg !10349
  br i1 %tobool23, label %if.end28, label %if.then24, !dbg !10351

if.then24:                                        ; preds = %if.end22
  %28 = load %union.tree_node*, %union.tree_node** %def_vuse, align 8, !dbg !10352
  %29 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10355
  %cmp = icmp eq %union.tree_node* %28, %29, !dbg !10356
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !10357

if.then26:                                        ; preds = %if.then24
  br label %for.end, !dbg !10358

if.end27:                                         ; preds = %if.then24
  br label %for.inc, !dbg !10359

if.end28:                                         ; preds = %if.end22
  %base29 = getelementptr inbounds %struct.ao_ref_s, %struct.ao_ref_s* %ref, i32 0, i32 1, !dbg !10360
  %30 = load %union.tree_node*, %union.tree_node** %base29, align 8, !dbg !10360
  %cmp30 = icmp eq %union.tree_node* %30, null, !dbg !10362
  br i1 %cmp30, label %land.lhs.true32, label %if.end36, !dbg !10363

land.lhs.true32:                                  ; preds = %if.end28
  %31 = load %struct.vn_reference_s*, %struct.vn_reference_s** %refx, align 8, !dbg !10364
  %set = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %31, i32 0, i32 3, !dbg !10365
  %32 = load i32, i32* %set, align 8, !dbg !10365
  %33 = load %struct.vn_reference_s*, %struct.vn_reference_s** %refx, align 8, !dbg !10366
  %type = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %33, i32 0, i32 4, !dbg !10367
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10367
  %35 = load %struct.vn_reference_s*, %struct.vn_reference_s** %refx, align 8, !dbg !10368
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %35, i32 0, i32 5, !dbg !10369
  %36 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !10369
  %call33 = call zeroext i8 @ao_ref_init_from_vn_reference(%struct.ao_ref_s* %ref, i32 %32, %union.tree_node* %34, %struct.VEC_vn_reference_op_s_heap* %36), !dbg !10370
  %tobool34 = icmp ne i8 %call33, 0, !dbg !10370
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !10371

if.then35:                                        ; preds = %land.lhs.true32
  store i8 1, i8* %res, align 1, !dbg !10372
  br label %for.end, !dbg !10374

if.end36:                                         ; preds = %land.lhs.true32, %if.end28
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !10375
  %call37 = call zeroext i8 @stmt_may_clobber_ref_p_1(%union.gimple_statement_d* %37, %struct.ao_ref_s* %ref), !dbg !10377
  %tobool38 = icmp ne i8 %call37, 0, !dbg !10377
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !10378

if.then39:                                        ; preds = %if.end36
  store i8 1, i8* %res, align 1, !dbg !10379
  br label %for.end, !dbg !10381

if.end40:                                         ; preds = %if.end36
  br label %for.inc, !dbg !10382

for.inc:                                          ; preds = %if.end40, %if.end27, %if.then21
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10383
  br label %for.cond, !dbg !10384, !llvm.loop !10385

for.end:                                          ; preds = %if.then39, %if.then35, %if.then26, %for.cond
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10387
  %aux41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 2, !dbg !10387
  %39 = load i8*, i8** %aux41, align 8, !dbg !10387
  %40 = bitcast i8* %39 to %struct.bb_bitmap_sets*, !dbg !10387
  %expr_dies42 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %40, i32 0, i32 7, !dbg !10387
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies42, align 8, !dbg !10387
  %tobool43 = icmp ne %struct.bitmap_head_def* %41, null, !dbg !10387
  br i1 %tobool43, label %if.end48, label %if.then44, !dbg !10389

if.then44:                                        ; preds = %for.end
  %call45 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !10390
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10391
  %aux46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 2, !dbg !10391
  %43 = load i8*, i8** %aux46, align 8, !dbg !10391
  %44 = bitcast i8* %43 to %struct.bb_bitmap_sets*, !dbg !10391
  %expr_dies47 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %44, i32 0, i32 7, !dbg !10391
  store %struct.bitmap_head_def* %call45, %struct.bitmap_head_def** %expr_dies47, align 8, !dbg !10392
  br label %if.end48, !dbg !10391

if.end48:                                         ; preds = %if.then44, %for.end
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10393
  %aux49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 2, !dbg !10393
  %46 = load i8*, i8** %aux49, align 8, !dbg !10393
  %47 = bitcast i8* %46 to %struct.bb_bitmap_sets*, !dbg !10393
  %expr_dies50 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %47, i32 0, i32 7, !dbg !10393
  %48 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies50, align 8, !dbg !10393
  %49 = load i32, i32* %id, align 4, !dbg !10394
  %mul51 = mul i32 %49, 2, !dbg !10395
  %call52 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %48, i32 %mul51), !dbg !10396
  %50 = load i8, i8* %res, align 1, !dbg !10397
  %tobool53 = icmp ne i8 %50, 0, !dbg !10397
  br i1 %tobool53, label %if.then54, label %if.end60, !dbg !10399

if.then54:                                        ; preds = %if.end48
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10400
  %aux55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 2, !dbg !10400
  %52 = load i8*, i8** %aux55, align 8, !dbg !10400
  %53 = bitcast i8* %52 to %struct.bb_bitmap_sets*, !dbg !10400
  %expr_dies56 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %53, i32 0, i32 7, !dbg !10400
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expr_dies56, align 8, !dbg !10400
  %55 = load i32, i32* %id, align 4, !dbg !10401
  %mul57 = mul i32 %55, 2, !dbg !10402
  %add58 = add i32 %mul57, 1, !dbg !10403
  %call59 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %54, i32 %add58), !dbg !10404
  br label %if.end60, !dbg !10404

if.end60:                                         ; preds = %if.then54, %if.end48
  %56 = load i8, i8* %res, align 1, !dbg !10405
  store i8 %56, i8* %retval, align 1, !dbg !10406
  br label %return, !dbg !10406

return:                                           ; preds = %if.end60, %if.then9, %if.then
  %57 = load i8, i8* %retval, align 1, !dbg !10407
  ret i8 %57, !dbg !10407
}

declare dso_local zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !10408 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !10411, metadata !DIExpression()), !dbg !10412
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !10412
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !10412
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10412

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !10412
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !10412
  %2 = load i32, i32* %num, align 8, !dbg !10412
  br label %cond.end, !dbg !10412

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10412

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !10412
  ret i32 %cond, !dbg !10412
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_set_subtract_values(%struct.bitmap_set* %a, %struct.bitmap_set* %b) #0 !dbg !10413 {
entry:
  %a.addr = alloca %struct.bitmap_set*, align 8
  %b.addr = alloca %struct.bitmap_set*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %temp = alloca %struct.bitmap_head_def*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  store %struct.bitmap_set* %a, %struct.bitmap_set** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %a.addr, metadata !10414, metadata !DIExpression()), !dbg !10415
  store %struct.bitmap_set* %b, %struct.bitmap_set** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %b.addr, metadata !10416, metadata !DIExpression()), !dbg !10417
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10418, metadata !DIExpression()), !dbg !10419
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10420, metadata !DIExpression()), !dbg !10421
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %temp, metadata !10422, metadata !DIExpression()), !dbg !10423
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @grand_bitmap_obstack), !dbg !10424
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %temp, align 8, !dbg !10423
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !10425
  %1 = load %struct.bitmap_set*, %struct.bitmap_set** %a.addr, align 8, !dbg !10426
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %1, i32 0, i32 0, !dbg !10427
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !10427
  call void @bitmap_copy(%struct.bitmap_head_def* %0, %struct.bitmap_head_def* %2), !dbg !10428
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !10429
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %3, i32 0, i32* %i), !dbg !10429
  br label %for.cond, !dbg !10429

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10431
  %tobool = icmp ne i8 %call1, 0, !dbg !10429
  br i1 %tobool, label %for.body, label %for.end, !dbg !10429

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !10433, metadata !DIExpression()), !dbg !10435
  %4 = load i32, i32* %i, align 4, !dbg !10436
  %call2 = call %struct.pre_expr_d* @expression_for_id(i32 %4), !dbg !10437
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %expr, align 8, !dbg !10435
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %b.addr, align 8, !dbg !10438
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10440
  %call3 = call i32 @get_expr_value_id(%struct.pre_expr_d* %6), !dbg !10441
  %call4 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %5, i32 %call3), !dbg !10442
  %tobool5 = icmp ne i8 %call4, 0, !dbg !10442
  br i1 %tobool5, label %if.then, label %if.end, !dbg !10443

if.then:                                          ; preds = %for.body
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %a.addr, align 8, !dbg !10444
  %8 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10445
  call void @bitmap_remove_from_set(%struct.bitmap_set* %7, %struct.pre_expr_d* %8), !dbg !10446
  br label %if.end, !dbg !10446

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !10447

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10431
  br label %for.cond, !dbg !10431, !llvm.loop !10448

for.end:                                          ; preds = %for.cond
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !10450
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %9), !dbg !10450
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %temp, align 8, !dbg !10450
  ret void, !dbg !10451
}

; Function Attrs: noinline nounwind uwtable
define internal void @dependent_clean(%struct.bitmap_set* %set1, %struct.bitmap_set* %set2, %struct.basic_block_def* %block) #0 !dbg !10452 {
entry:
  %set1.addr = alloca %struct.bitmap_set*, align 8
  %set2.addr = alloca %struct.bitmap_set*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %exprs = alloca %struct.VEC_pre_expr_heap*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  store %struct.bitmap_set* %set1, %struct.bitmap_set** %set1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set1.addr, metadata !10455, metadata !DIExpression()), !dbg !10456
  store %struct.bitmap_set* %set2, %struct.bitmap_set** %set2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %set2.addr, metadata !10457, metadata !DIExpression()), !dbg !10458
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10459, metadata !DIExpression()), !dbg !10460
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %exprs, metadata !10461, metadata !DIExpression()), !dbg !10462
  %0 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10463
  %call = call %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %0), !dbg !10464
  store %struct.VEC_pre_expr_heap* %call, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10462
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !10465, metadata !DIExpression()), !dbg !10466
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10467, metadata !DIExpression()), !dbg !10468
  store i32 0, i32* %i, align 4, !dbg !10469
  br label %for.cond, !dbg !10471

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10472
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %1, null, !dbg !10472
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10472

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10472
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %2, i32 0, i32 0, !dbg !10472
  br label %cond.end, !dbg !10472

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10472

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10472
  %3 = load i32, i32* %i, align 4, !dbg !10472
  %call1 = call i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %cond, i32 %3, %struct.pre_expr_d** %expr), !dbg !10472
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10474
  br i1 %tobool2, label %for.body, label %for.end, !dbg !10474

for.body:                                         ; preds = %cond.end
  %4 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10475
  %5 = load %struct.bitmap_set*, %struct.bitmap_set** %set2.addr, align 8, !dbg !10478
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10479
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10480
  %call3 = call zeroext i8 @valid_in_sets(%struct.bitmap_set* %4, %struct.bitmap_set* %5, %struct.pre_expr_d* %6, %struct.basic_block_def* %7), !dbg !10481
  %tobool4 = icmp ne i8 %call3, 0, !dbg !10481
  br i1 %tobool4, label %if.end, label %if.then, !dbg !10482

if.then:                                          ; preds = %for.body
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %set1.addr, align 8, !dbg !10483
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10484
  call void @bitmap_remove_from_set(%struct.bitmap_set* %8, %struct.pre_expr_d* %9), !dbg !10485
  br label %if.end, !dbg !10485

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !10486

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !10487
  %inc = add nsw i32 %10, 1, !dbg !10487
  store i32 %inc, i32* %i, align 4, !dbg !10487
  br label %for.cond, !dbg !10488, !llvm.loop !10489

for.end:                                          ; preds = %cond.end
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %exprs), !dbg !10491
  ret void, !dbg !10492
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @insert_aux(%struct.basic_block_def* %block) #0 !dbg !10493 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %new_stuff = alloca i8, align 1
  %dom = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %newset = alloca %struct.bitmap_set*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10496, metadata !DIExpression()), !dbg !10497
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !10498, metadata !DIExpression()), !dbg !10499
  call void @llvm.dbg.declare(metadata i8* %new_stuff, metadata !10500, metadata !DIExpression()), !dbg !10501
  store i8 0, i8* %new_stuff, align 1, !dbg !10501
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10502
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !10502
  br i1 %tobool, label %if.then, label %if.end27, !dbg !10504

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom, metadata !10505, metadata !DIExpression()), !dbg !10507
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10508
  %call = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %1), !dbg !10509
  store %struct.basic_block_def* %call, %struct.basic_block_def** %dom, align 8, !dbg !10510
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !10511
  %tobool1 = icmp ne %struct.basic_block_def* %2, null, !dbg !10511
  br i1 %tobool1, label %if.then2, label %if.end26, !dbg !10513

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10514, metadata !DIExpression()), !dbg !10516
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10517, metadata !DIExpression()), !dbg !10518
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %newset, metadata !10519, metadata !DIExpression()), !dbg !10520
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !10521
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !10521
  %4 = load i8*, i8** %aux, align 8, !dbg !10521
  %5 = bitcast i8* %4 to %struct.bb_bitmap_sets*, !dbg !10521
  %new_sets = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %5, i32 0, i32 6, !dbg !10521
  %6 = load %struct.bitmap_set*, %struct.bitmap_set** %new_sets, align 8, !dbg !10521
  store %struct.bitmap_set* %6, %struct.bitmap_set** %newset, align 8, !dbg !10520
  %7 = load %struct.bitmap_set*, %struct.bitmap_set** %newset, align 8, !dbg !10522
  %tobool3 = icmp ne %struct.bitmap_set* %7, null, !dbg !10522
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !10524

if.then4:                                         ; preds = %if.then2
  %8 = load %struct.bitmap_set*, %struct.bitmap_set** %newset, align 8, !dbg !10525
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %8, i32 0, i32 0, !dbg !10525
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !10525
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %9, i32 0, i32* %i), !dbg !10525
  br label %for.cond, !dbg !10525

for.cond:                                         ; preds = %for.inc, %if.then4
  %call5 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10528
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10525
  br i1 %tobool6, label %for.body, label %for.end, !dbg !10525

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !10530, metadata !DIExpression()), !dbg !10532
  %10 = load i32, i32* %i, align 4, !dbg !10533
  %call7 = call %struct.pre_expr_d* @expression_for_id(i32 %10), !dbg !10534
  store %struct.pre_expr_d* %call7, %struct.pre_expr_d** %expr, align 8, !dbg !10532
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10535
  %aux8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 2, !dbg !10535
  %12 = load i8*, i8** %aux8, align 8, !dbg !10535
  %13 = bitcast i8* %12 to %struct.bb_bitmap_sets*, !dbg !10535
  %new_sets9 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %13, i32 0, i32 6, !dbg !10535
  %14 = load %struct.bitmap_set*, %struct.bitmap_set** %new_sets9, align 8, !dbg !10535
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10536
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %14, %struct.pre_expr_d* %15), !dbg !10537
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10538
  %aux10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 2, !dbg !10538
  %17 = load i8*, i8** %aux10, align 8, !dbg !10538
  %18 = bitcast i8* %17 to %struct.bb_bitmap_sets*, !dbg !10538
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %18, i32 0, i32 3, !dbg !10538
  %19 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !10538
  %20 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10539
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %19, %struct.pre_expr_d* %20), !dbg !10540
  br label %for.inc, !dbg !10541

for.inc:                                          ; preds = %for.body
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10528
  br label %for.cond, !dbg !10528, !llvm.loop !10542

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !10544

if.end:                                           ; preds = %for.end, %if.then2
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10545
  %call11 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %21), !dbg !10547
  %tobool12 = icmp ne i8 %call11, 0, !dbg !10547
  br i1 %tobool12, label %if.end25, label %if.then13, !dbg !10548

if.then13:                                        ; preds = %if.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10549
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !10551
  %call14 = call zeroext i8 @do_regular_insertion(%struct.basic_block_def* %22, %struct.basic_block_def* %23), !dbg !10552
  %conv = zext i8 %call14 to i32, !dbg !10552
  %24 = load i8, i8* %new_stuff, align 1, !dbg !10553
  %conv15 = zext i8 %24 to i32, !dbg !10553
  %or = or i32 %conv15, %conv, !dbg !10553
  %conv16 = trunc i32 %or to i8, !dbg !10553
  store i8 %conv16, i8* %new_stuff, align 1, !dbg !10553
  %25 = load i8, i8* @do_partial_partial, align 1, !dbg !10554
  %tobool17 = icmp ne i8 %25, 0, !dbg !10554
  br i1 %tobool17, label %if.then18, label %if.end24, !dbg !10556

if.then18:                                        ; preds = %if.then13
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10557
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dom, align 8, !dbg !10558
  %call19 = call zeroext i8 @do_partial_partial_insertion(%struct.basic_block_def* %26, %struct.basic_block_def* %27), !dbg !10559
  %conv20 = zext i8 %call19 to i32, !dbg !10559
  %28 = load i8, i8* %new_stuff, align 1, !dbg !10560
  %conv21 = zext i8 %28 to i32, !dbg !10560
  %or22 = or i32 %conv21, %conv20, !dbg !10560
  %conv23 = trunc i32 %or22 to i8, !dbg !10560
  store i8 %conv23, i8* %new_stuff, align 1, !dbg !10560
  br label %if.end24, !dbg !10561

if.end24:                                         ; preds = %if.then18, %if.then13
  br label %if.end25, !dbg !10562

if.end25:                                         ; preds = %if.end24, %if.end
  br label %if.end26, !dbg !10563

if.end26:                                         ; preds = %if.end25, %if.then
  br label %if.end27, !dbg !10564

if.end27:                                         ; preds = %if.end26, %entry
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10565
  %call28 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %29), !dbg !10567
  store %struct.basic_block_def* %call28, %struct.basic_block_def** %son, align 8, !dbg !10568
  br label %for.cond29, !dbg !10569

for.cond29:                                       ; preds = %for.inc37, %if.end27
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !10570
  %tobool30 = icmp ne %struct.basic_block_def* %30, null, !dbg !10572
  br i1 %tobool30, label %for.body31, label %for.end39, !dbg !10572

for.body31:                                       ; preds = %for.cond29
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !10573
  %call32 = call zeroext i8 @insert_aux(%struct.basic_block_def* %31), !dbg !10575
  %conv33 = zext i8 %call32 to i32, !dbg !10575
  %32 = load i8, i8* %new_stuff, align 1, !dbg !10576
  %conv34 = zext i8 %32 to i32, !dbg !10576
  %or35 = or i32 %conv34, %conv33, !dbg !10576
  %conv36 = trunc i32 %or35 to i8, !dbg !10576
  store i8 %conv36, i8* %new_stuff, align 1, !dbg !10576
  br label %for.inc37, !dbg !10577

for.inc37:                                        ; preds = %for.body31
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !10578
  %call38 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %33), !dbg !10579
  store %struct.basic_block_def* %call38, %struct.basic_block_def** %son, align 8, !dbg !10580
  br label %for.cond29, !dbg !10581, !llvm.loop !10582

for.end39:                                        ; preds = %for.cond29
  %34 = load i8, i8* %new_stuff, align 1, !dbg !10584
  ret i8 %34, !dbg !10585
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !10586 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10587, metadata !DIExpression()), !dbg !10588
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10589
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !10589
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !10589
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !10589
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10589

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10589
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !10589
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !10589
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !10589
  br label %cond.end, !dbg !10589

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10589

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10589
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !10589
  %cmp = icmp eq i32 %call, 1, !dbg !10590
  %conv = zext i1 %cmp to i32, !dbg !10590
  %conv2 = trunc i32 %conv to i8, !dbg !10589
  ret i8 %conv2, !dbg !10591
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_regular_insertion(%struct.basic_block_def* %block, %struct.basic_block_def* %dom) #0 !dbg !10592 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %dom.addr = alloca %struct.basic_block_def*, align 8
  %new_stuff = alloca i8, align 1
  %exprs = alloca %struct.VEC_pre_expr_heap*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  %avail = alloca %struct.pre_expr_d**, align 8
  %val = alloca i32, align 4
  %by_some = alloca i8, align 1
  %cant_insert = alloca i8, align 1
  %all_same = alloca i8, align 1
  %first_s = alloca %struct.pre_expr_d*, align 8
  %pred = alloca %struct.edge_def*, align 8
  %bprime = alloca %struct.basic_block_def*, align 8
  %eprime = alloca %struct.pre_expr_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %edoubleprime = alloca %struct.pre_expr_d*, align 8
  %do_insertion = alloca i8, align 1
  %tmp = alloca %struct.edge_iterator, align 8
  %vprime = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  %new_val = alloca i32, align 4
  %expr111 = alloca %struct.pre_expr_d*, align 8
  %info = alloca %struct.vn_ssa_aux*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10595, metadata !DIExpression()), !dbg !10596
  store %struct.basic_block_def* %dom, %struct.basic_block_def** %dom.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom.addr, metadata !10597, metadata !DIExpression()), !dbg !10598
  call void @llvm.dbg.declare(metadata i8* %new_stuff, metadata !10599, metadata !DIExpression()), !dbg !10600
  store i8 0, i8* %new_stuff, align 1, !dbg !10600
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %exprs, metadata !10601, metadata !DIExpression()), !dbg !10602
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10603
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !10603
  %1 = load i8*, i8** %aux, align 8, !dbg !10603
  %2 = bitcast i8* %1 to %struct.bb_bitmap_sets*, !dbg !10603
  %antic_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %2, i32 0, i32 4, !dbg !10603
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in, align 8, !dbg !10603
  %call = call %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %3), !dbg !10604
  store %struct.VEC_pre_expr_heap* %call, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10602
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !10605, metadata !DIExpression()), !dbg !10606
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10607, metadata !DIExpression()), !dbg !10608
  store i32 0, i32* %i, align 4, !dbg !10609
  br label %for.cond, !dbg !10611

for.cond:                                         ; preds = %for.inc136, %entry
  %4 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10612
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %4, null, !dbg !10612
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10612

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10612
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %5, i32 0, i32 0, !dbg !10612
  br label %cond.end, !dbg !10612

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10612

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10612
  %6 = load i32, i32* %i, align 4, !dbg !10612
  %call1 = call i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %cond, i32 %6, %struct.pre_expr_d** %expr), !dbg !10612
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10614
  br i1 %tobool2, label %for.body, label %for.end138, !dbg !10614

for.body:                                         ; preds = %cond.end
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10615
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 0, !dbg !10618
  %8 = load i32, i32* %kind, align 8, !dbg !10618
  %cmp = icmp ne i32 %8, 0, !dbg !10619
  br i1 %cmp, label %if.then, label %if.end135, !dbg !10620

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d*** %avail, metadata !10621, metadata !DIExpression()), !dbg !10623
  call void @llvm.dbg.declare(metadata i32* %val, metadata !10624, metadata !DIExpression()), !dbg !10625
  call void @llvm.dbg.declare(metadata i8* %by_some, metadata !10626, metadata !DIExpression()), !dbg !10627
  store i8 0, i8* %by_some, align 1, !dbg !10627
  call void @llvm.dbg.declare(metadata i8* %cant_insert, metadata !10628, metadata !DIExpression()), !dbg !10629
  store i8 0, i8* %cant_insert, align 1, !dbg !10629
  call void @llvm.dbg.declare(metadata i8* %all_same, metadata !10630, metadata !DIExpression()), !dbg !10631
  store i8 1, i8* %all_same, align 1, !dbg !10631
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %first_s, metadata !10632, metadata !DIExpression()), !dbg !10633
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %first_s, align 8, !dbg !10633
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pred, metadata !10634, metadata !DIExpression()), !dbg !10635
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bprime, metadata !10636, metadata !DIExpression()), !dbg !10637
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %eprime, metadata !10638, metadata !DIExpression()), !dbg !10639
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %eprime, align 8, !dbg !10639
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10640, metadata !DIExpression()), !dbg !10641
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %edoubleprime, metadata !10642, metadata !DIExpression()), !dbg !10643
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10643
  call void @llvm.dbg.declare(metadata i8* %do_insertion, metadata !10644, metadata !DIExpression()), !dbg !10645
  store i8 0, i8* %do_insertion, align 1, !dbg !10645
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10646
  %call3 = call i32 @get_expr_value_id(%struct.pre_expr_d* %9), !dbg !10647
  store i32 %call3, i32* %val, align 4, !dbg !10648
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10649
  %aux4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 2, !dbg !10649
  %11 = load i8*, i8** %aux4, align 8, !dbg !10649
  %12 = bitcast i8* %11 to %struct.bb_bitmap_sets*, !dbg !10649
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %12, i32 0, i32 1, !dbg !10649
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !10649
  %14 = load i32, i32* %val, align 4, !dbg !10651
  %call5 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %13, i32 %14), !dbg !10652
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10652
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !10653

if.then7:                                         ; preds = %if.then
  br label %for.inc136, !dbg !10654

if.end:                                           ; preds = %if.then
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dom.addr, align 8, !dbg !10655
  %aux8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 2, !dbg !10655
  %16 = load i8*, i8** %aux8, align 8, !dbg !10655
  %17 = bitcast i8* %16 to %struct.bb_bitmap_sets*, !dbg !10655
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %17, i32 0, i32 3, !dbg !10655
  %18 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !10655
  %19 = load i32, i32* %val, align 4, !dbg !10657
  %call9 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %18, i32 %19), !dbg !10658
  %tobool10 = icmp ne i8 %call9, 0, !dbg !10658
  br i1 %tobool10, label %if.then11, label %if.end17, !dbg !10659

if.then11:                                        ; preds = %if.end
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10660
  %tobool12 = icmp ne %struct._IO_FILE* %20, null, !dbg !10660
  br i1 %tobool12, label %land.lhs.true, label %if.end16, !dbg !10663

land.lhs.true:                                    ; preds = %if.then11
  %21 = load i32, i32* @dump_flags, align 4, !dbg !10664
  %and = and i32 %21, 8, !dbg !10665
  %tobool13 = icmp ne i32 %and, 0, !dbg !10665
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !10666

if.then14:                                        ; preds = %land.lhs.true
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10667
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.48, i64 0, i64 0)), !dbg !10668
  br label %if.end16, !dbg !10668

if.end16:                                         ; preds = %if.then14, %land.lhs.true, %if.then11
  br label %for.inc136, !dbg !10669

if.end17:                                         ; preds = %if.end
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10670
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !10670
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10670
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10670
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 5, !dbg !10670
  %25 = load i32, i32* %x_last_basic_block, align 8, !dbg !10670
  %conv = sext i32 %25 to i64, !dbg !10670
  %call18 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !10670
  %26 = bitcast i8* %call18 to %struct.pre_expr_d**, !dbg !10670
  store %struct.pre_expr_d** %26, %struct.pre_expr_d*** %avail, align 8, !dbg !10671
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10672
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !10672
  %call19 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10672
  %28 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10672
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !10672
  %30 = extractvalue { i32, %struct.VEC_edge_gc** } %call19, 0, !dbg !10672
  store i32 %30, i32* %29, align 8, !dbg !10672
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !10672
  %32 = extractvalue { i32, %struct.VEC_edge_gc** } %call19, 1, !dbg !10672
  store %struct.VEC_edge_gc** %32, %struct.VEC_edge_gc*** %31, align 8, !dbg !10672
  %33 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10672
  %34 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10672
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 16, i1 false), !dbg !10672
  br label %for.cond20, !dbg !10672

for.cond20:                                       ; preds = %for.inc, %if.end17
  %35 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10674
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 0, !dbg !10674
  %37 = load i32, i32* %36, align 8, !dbg !10674
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 1, !dbg !10674
  %39 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %38, align 8, !dbg !10674
  %call21 = call zeroext i8 @ei_cond(i32 %37, %struct.VEC_edge_gc** %39, %struct.edge_def** %pred), !dbg !10674
  %tobool22 = icmp ne i8 %call21, 0, !dbg !10672
  br i1 %tobool22, label %for.body23, label %for.end, !dbg !10672

for.body23:                                       ; preds = %for.cond20
  call void @llvm.dbg.declare(metadata i32* %vprime, metadata !10676, metadata !DIExpression()), !dbg !10678
  %40 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10679
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 7, !dbg !10679
  %41 = load i32, i32* %flags, align 8, !dbg !10679
  %and24 = and i32 %41, 16, !dbg !10679
  %tobool25 = icmp ne i32 %and24, 0, !dbg !10679
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !10679

cond.true26:                                      ; preds = %for.body23
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10679
  br label %cond.end28, !dbg !10679

cond.false27:                                     ; preds = %for.body23
  br label %cond.end28, !dbg !10679

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !10679
  %42 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10680
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 0, !dbg !10681
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10681
  store %struct.basic_block_def* %43, %struct.basic_block_def** %bprime, align 8, !dbg !10682
  %44 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10683
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10684
  %aux30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 2, !dbg !10684
  %46 = load i8*, i8** %aux30, align 8, !dbg !10684
  %47 = bitcast i8* %46 to %struct.bb_bitmap_sets*, !dbg !10684
  %antic_in31 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %47, i32 0, i32 4, !dbg !10684
  %48 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in31, align 8, !dbg !10684
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10685
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10686
  %call32 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %44, %struct.bitmap_set* %48, %struct.bitmap_set* null, %struct.basic_block_def* %49, %struct.basic_block_def* %50), !dbg !10687
  store %struct.pre_expr_d* %call32, %struct.pre_expr_d** %eprime, align 8, !dbg !10688
  %51 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10689
  %cmp33 = icmp eq %struct.pre_expr_d* %51, null, !dbg !10691
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !10692

if.then35:                                        ; preds = %cond.end28
  store i8 1, i8* %cant_insert, align 1, !dbg !10693
  br label %for.end, !dbg !10695

if.end36:                                         ; preds = %cond.end28
  %52 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10696
  %call37 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %52), !dbg !10697
  store %struct.pre_expr_d* %call37, %struct.pre_expr_d** %eprime, align 8, !dbg !10698
  %53 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10699
  %call38 = call i32 @get_expr_value_id(%struct.pre_expr_d* %53), !dbg !10700
  store i32 %call38, i32* %vprime, align 4, !dbg !10701
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10702
  %aux39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 2, !dbg !10702
  %55 = load i8*, i8** %aux39, align 8, !dbg !10702
  %56 = bitcast i8* %55 to %struct.bb_bitmap_sets*, !dbg !10702
  %avail_out40 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %56, i32 0, i32 3, !dbg !10702
  %57 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out40, align 8, !dbg !10702
  %58 = load i32, i32* %vprime, align 4, !dbg !10703
  %call41 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %57, i32 %58, %union.gimple_statement_d* null), !dbg !10704
  store %struct.pre_expr_d* %call41, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10705
  %59 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10706
  %cmp42 = icmp eq %struct.pre_expr_d* %59, null, !dbg !10708
  br i1 %cmp42, label %if.then44, label %if.else, !dbg !10709

if.then44:                                        ; preds = %if.end36
  %60 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10710
  %61 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10712
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10713
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 9, !dbg !10714
  %63 = load i32, i32* %index, align 8, !dbg !10714
  %idxprom = sext i32 %63 to i64, !dbg !10712
  %arrayidx = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %61, i64 %idxprom, !dbg !10712
  store %struct.pre_expr_d* %60, %struct.pre_expr_d** %arrayidx, align 8, !dbg !10715
  store i8 0, i8* %all_same, align 1, !dbg !10716
  br label %if.end61, !dbg !10717

if.else:                                          ; preds = %if.end36
  %64 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10718
  %65 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10720
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10721
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 9, !dbg !10722
  %67 = load i32, i32* %index45, align 8, !dbg !10722
  %idxprom46 = sext i32 %67 to i64, !dbg !10720
  %arrayidx47 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %65, i64 %idxprom46, !dbg !10720
  store %struct.pre_expr_d* %64, %struct.pre_expr_d** %arrayidx47, align 8, !dbg !10723
  store i8 1, i8* %by_some, align 1, !dbg !10724
  %68 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10725
  %call48 = call zeroext i8 @optimize_edge_for_speed_p(%struct.edge_def* %68), !dbg !10727
  %tobool49 = icmp ne i8 %call48, 0, !dbg !10727
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !10728

if.then50:                                        ; preds = %if.else
  store i8 1, i8* %do_insertion, align 1, !dbg !10729
  br label %if.end51, !dbg !10730

if.end51:                                         ; preds = %if.then50, %if.else
  %69 = load %struct.pre_expr_d*, %struct.pre_expr_d** %first_s, align 8, !dbg !10731
  %cmp52 = icmp eq %struct.pre_expr_d* %69, null, !dbg !10733
  br i1 %cmp52, label %if.then54, label %if.else55, !dbg !10734

if.then54:                                        ; preds = %if.end51
  %70 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10735
  store %struct.pre_expr_d* %70, %struct.pre_expr_d** %first_s, align 8, !dbg !10736
  br label %if.end60, !dbg !10737

if.else55:                                        ; preds = %if.end51
  %71 = load %struct.pre_expr_d*, %struct.pre_expr_d** %first_s, align 8, !dbg !10738
  %72 = bitcast %struct.pre_expr_d* %71 to i8*, !dbg !10738
  %73 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10740
  %74 = bitcast %struct.pre_expr_d* %73 to i8*, !dbg !10740
  %call56 = call i32 @pre_expr_eq(i8* %72, i8* %74), !dbg !10741
  %tobool57 = icmp ne i32 %call56, 0, !dbg !10741
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !10742

if.then58:                                        ; preds = %if.else55
  store i8 0, i8* %all_same, align 1, !dbg !10743
  br label %if.end59, !dbg !10744

if.end59:                                         ; preds = %if.then58, %if.else55
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then54
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then44
  br label %for.inc, !dbg !10745

for.inc:                                          ; preds = %if.end61
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10674
  br label %for.cond20, !dbg !10674, !llvm.loop !10746

for.end:                                          ; preds = %if.then35, %for.cond20
  %75 = load i8, i8* %cant_insert, align 1, !dbg !10748
  %tobool62 = icmp ne i8 %75, 0, !dbg !10748
  br i1 %tobool62, label %if.else81, label %land.lhs.true63, !dbg !10750

land.lhs.true63:                                  ; preds = %for.end
  %76 = load i8, i8* %all_same, align 1, !dbg !10751
  %tobool64 = icmp ne i8 %76, 0, !dbg !10751
  br i1 %tobool64, label %if.else81, label %land.lhs.true65, !dbg !10752

land.lhs.true65:                                  ; preds = %land.lhs.true63
  %77 = load i8, i8* %by_some, align 1, !dbg !10753
  %conv66 = zext i8 %77 to i32, !dbg !10753
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !10753
  br i1 %tobool67, label %land.lhs.true68, label %if.else81, !dbg !10754

land.lhs.true68:                                  ; preds = %land.lhs.true65
  %78 = load i8, i8* %do_insertion, align 1, !dbg !10755
  %conv69 = zext i8 %78 to i32, !dbg !10755
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !10755
  br i1 %tobool70, label %land.lhs.true71, label %if.else81, !dbg !10756

land.lhs.true71:                                  ; preds = %land.lhs.true68
  %call72 = call zeroext i8 @dbg_cnt(i32 25), !dbg !10757
  %conv73 = zext i8 %call72 to i32, !dbg !10757
  %tobool74 = icmp ne i32 %conv73, 0, !dbg !10757
  br i1 %tobool74, label %if.then75, label %if.else81, !dbg !10758

if.then75:                                        ; preds = %land.lhs.true71
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10759
  %80 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10762
  %call76 = call i32 @get_expression_id(%struct.pre_expr_d* %80), !dbg !10763
  %81 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10764
  %call77 = call zeroext i8 @insert_into_preds_of_block(%struct.basic_block_def* %79, i32 %call76, %struct.pre_expr_d** %81), !dbg !10765
  %tobool78 = icmp ne i8 %call77, 0, !dbg !10765
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !10766

if.then79:                                        ; preds = %if.then75
  store i8 1, i8* %new_stuff, align 1, !dbg !10767
  br label %if.end80, !dbg !10768

if.end80:                                         ; preds = %if.then79, %if.then75
  br label %if.end134, !dbg !10769

if.else81:                                        ; preds = %land.lhs.true71, %land.lhs.true68, %land.lhs.true65, %land.lhs.true63, %for.end
  %82 = load i8, i8* %cant_insert, align 1, !dbg !10770
  %tobool82 = icmp ne i8 %82, 0, !dbg !10770
  br i1 %tobool82, label %if.end133, label %land.lhs.true83, !dbg !10772

land.lhs.true83:                                  ; preds = %if.else81
  %83 = load i8, i8* %all_same, align 1, !dbg !10773
  %conv84 = zext i8 %83 to i32, !dbg !10773
  %tobool85 = icmp ne i32 %conv84, 0, !dbg !10773
  br i1 %tobool85, label %land.lhs.true86, label %if.end133, !dbg !10774

land.lhs.true86:                                  ; preds = %land.lhs.true83
  %84 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10775
  %tobool87 = icmp ne %struct.pre_expr_d* %84, null, !dbg !10775
  br i1 %tobool87, label %land.lhs.true88, label %if.end133, !dbg !10776

land.lhs.true88:                                  ; preds = %land.lhs.true86
  %85 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10777
  %kind89 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %85, i32 0, i32 0, !dbg !10778
  %86 = load i32, i32* %kind89, align 8, !dbg !10778
  %cmp90 = icmp eq i32 %86, 3, !dbg !10779
  br i1 %cmp90, label %land.lhs.true95, label %lor.lhs.false, !dbg !10780

lor.lhs.false:                                    ; preds = %land.lhs.true88
  %87 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10781
  %kind92 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %87, i32 0, i32 0, !dbg !10782
  %88 = load i32, i32* %kind92, align 8, !dbg !10782
  %cmp93 = icmp eq i32 %88, 0, !dbg !10783
  br i1 %cmp93, label %land.lhs.true95, label %if.end133, !dbg !10784

land.lhs.true95:                                  ; preds = %lor.lhs.false, %land.lhs.true88
  %89 = load i32, i32* %val, align 4, !dbg !10785
  %call96 = call zeroext i8 @value_id_constant_p(i32 %89), !dbg !10786
  %tobool97 = icmp ne i8 %call96, 0, !dbg !10786
  br i1 %tobool97, label %if.end133, label %if.then98, !dbg !10787

if.then98:                                        ; preds = %land.lhs.true95
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10788, metadata !DIExpression()), !dbg !10790
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10791, metadata !DIExpression()), !dbg !10792
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !10793, metadata !DIExpression()), !dbg !10794
  %90 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !10795
  %tobool99 = icmp ne %struct.VEC_bitmap_set_t_heap* %90, null, !dbg !10795
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !10795

cond.true100:                                     ; preds = %if.then98
  %91 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !10795
  %base101 = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %91, i32 0, i32 0, !dbg !10795
  br label %cond.end103, !dbg !10795

cond.false102:                                    ; preds = %if.then98
  br label %cond.end103, !dbg !10795

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_bitmap_set_t_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !10795
  %92 = load i32, i32* %val, align 4, !dbg !10795
  %call105 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond104, i32 %92), !dbg !10795
  store %struct.bitmap_set* %call105, %struct.bitmap_set** %exprset, align 8, !dbg !10794
  call void @llvm.dbg.declare(metadata i32* %new_val, metadata !10796, metadata !DIExpression()), !dbg !10797
  %93 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10798
  %call106 = call i32 @get_expr_value_id(%struct.pre_expr_d* %93), !dbg !10799
  store i32 %call106, i32* %new_val, align 4, !dbg !10797
  %94 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !10800
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %94, i32 0, i32 0, !dbg !10800
  %95 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !10800
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %95, i32 0, i32* %j), !dbg !10800
  br label %for.cond107, !dbg !10800

for.cond107:                                      ; preds = %for.inc131, %cond.end103
  %call108 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !10802
  %tobool109 = icmp ne i8 %call108, 0, !dbg !10800
  br i1 %tobool109, label %for.body110, label %for.end132, !dbg !10800

for.body110:                                      ; preds = %for.cond107
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr111, metadata !10804, metadata !DIExpression()), !dbg !10806
  %96 = load i32, i32* %j, align 4, !dbg !10807
  %call112 = call %struct.pre_expr_d* @expression_for_id(i32 %96), !dbg !10808
  store %struct.pre_expr_d* %call112, %struct.pre_expr_d** %expr111, align 8, !dbg !10806
  %97 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr111, align 8, !dbg !10809
  %kind113 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %97, i32 0, i32 0, !dbg !10811
  %98 = load i32, i32* %kind113, align 8, !dbg !10811
  %cmp114 = icmp eq i32 %98, 0, !dbg !10812
  br i1 %cmp114, label %if.then116, label %if.end130, !dbg !10813

if.then116:                                       ; preds = %for.body110
  call void @llvm.dbg.declare(metadata %struct.vn_ssa_aux** %info, metadata !10814, metadata !DIExpression()), !dbg !10830
  %99 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr111, align 8, !dbg !10831
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %99, i32 0, i32 2, !dbg !10831
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !10831
  %100 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10831
  %call117 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %100), !dbg !10832
  store %struct.vn_ssa_aux* %call117, %struct.vn_ssa_aux** %info, align 8, !dbg !10830
  %101 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10833
  %kind118 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %101, i32 0, i32 0, !dbg !10835
  %102 = load i32, i32* %kind118, align 8, !dbg !10835
  %cmp119 = icmp eq i32 %102, 3, !dbg !10836
  br i1 %cmp119, label %if.then121, label %if.else123, !dbg !10837

if.then121:                                       ; preds = %if.then116
  %103 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10838
  %u122 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %103, i32 0, i32 2, !dbg !10838
  %constant = bitcast %union.pre_expr_union_d* %u122 to %union.tree_node**, !dbg !10838
  %104 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !10838
  %105 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !10840
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %105, i32 0, i32 0, !dbg !10841
  store %union.tree_node* %104, %union.tree_node** %valnum, align 8, !dbg !10842
  %106 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 4), align 4, !dbg !10843
  %inc = add nsw i32 %106, 1, !dbg !10843
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 4), align 4, !dbg !10843
  br label %if.end129, !dbg !10844

if.else123:                                       ; preds = %if.then116
  %107 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10845
  %u124 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %107, i32 0, i32 2, !dbg !10845
  %name125 = bitcast %union.pre_expr_union_d* %u124 to %union.tree_node**, !dbg !10845
  %108 = load %union.tree_node*, %union.tree_node** %name125, align 8, !dbg !10845
  %call126 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %108), !dbg !10846
  %valnum127 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call126, i32 0, i32 0, !dbg !10847
  %109 = load %union.tree_node*, %union.tree_node** %valnum127, align 8, !dbg !10847
  %110 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !10848
  %valnum128 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %110, i32 0, i32 0, !dbg !10849
  store %union.tree_node* %109, %union.tree_node** %valnum128, align 8, !dbg !10850
  br label %if.end129

if.end129:                                        ; preds = %if.else123, %if.then121
  %111 = load i32, i32* %new_val, align 4, !dbg !10851
  %112 = load %struct.vn_ssa_aux*, %struct.vn_ssa_aux** %info, align 8, !dbg !10852
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %112, i32 0, i32 2, !dbg !10853
  store i32 %111, i32* %value_id, align 8, !dbg !10854
  br label %if.end130, !dbg !10855

if.end130:                                        ; preds = %if.end129, %for.body110
  br label %for.inc131, !dbg !10856

for.inc131:                                       ; preds = %if.end130
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !10802
  br label %for.cond107, !dbg !10802, !llvm.loop !10857

for.end132:                                       ; preds = %for.cond107
  br label %if.end133, !dbg !10859

if.end133:                                        ; preds = %for.end132, %land.lhs.true95, %lor.lhs.false, %land.lhs.true86, %land.lhs.true83, %if.else81
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end80
  %113 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10860
  %114 = bitcast %struct.pre_expr_d** %113 to i8*, !dbg !10860
  call void @free(i8* %114), !dbg !10861
  br label %if.end135, !dbg !10862

if.end135:                                        ; preds = %if.end134, %for.body
  br label %for.inc136, !dbg !10863

for.inc136:                                       ; preds = %if.end135, %if.end16, %if.then7
  %115 = load i32, i32* %i, align 4, !dbg !10864
  %inc137 = add nsw i32 %115, 1, !dbg !10864
  store i32 %inc137, i32* %i, align 4, !dbg !10864
  br label %for.cond, !dbg !10865, !llvm.loop !10866

for.end138:                                       ; preds = %cond.end
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %exprs), !dbg !10868
  %116 = load i8, i8* %new_stuff, align 1, !dbg !10869
  ret i8 %116, !dbg !10870
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @do_partial_partial_insertion(%struct.basic_block_def* %block, %struct.basic_block_def* %dom) #0 !dbg !10871 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %dom.addr = alloca %struct.basic_block_def*, align 8
  %new_stuff = alloca i8, align 1
  %exprs = alloca %struct.VEC_pre_expr_heap*, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %i = alloca i32, align 4
  %avail = alloca %struct.pre_expr_d**, align 8
  %val = alloca i32, align 4
  %by_all = alloca i8, align 1
  %cant_insert = alloca i8, align 1
  %pred = alloca %struct.edge_def*, align 8
  %bprime = alloca %struct.basic_block_def*, align 8
  %eprime = alloca %struct.pre_expr_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %vprime = alloca i32, align 4
  %edoubleprime = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !10872, metadata !DIExpression()), !dbg !10873
  store %struct.basic_block_def* %dom, %struct.basic_block_def** %dom.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom.addr, metadata !10874, metadata !DIExpression()), !dbg !10875
  call void @llvm.dbg.declare(metadata i8* %new_stuff, metadata !10876, metadata !DIExpression()), !dbg !10877
  store i8 0, i8* %new_stuff, align 1, !dbg !10877
  call void @llvm.dbg.declare(metadata %struct.VEC_pre_expr_heap** %exprs, metadata !10878, metadata !DIExpression()), !dbg !10879
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10880
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !10880
  %1 = load i8*, i8** %aux, align 8, !dbg !10880
  %2 = bitcast i8* %1 to %struct.bb_bitmap_sets*, !dbg !10880
  %pa_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %2, i32 0, i32 5, !dbg !10880
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in, align 8, !dbg !10880
  %call = call %struct.VEC_pre_expr_heap* @sorted_array_from_bitmap_set(%struct.bitmap_set* %3), !dbg !10881
  store %struct.VEC_pre_expr_heap* %call, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10879
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !10882, metadata !DIExpression()), !dbg !10883
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10884, metadata !DIExpression()), !dbg !10885
  store i32 0, i32* %i, align 4, !dbg !10886
  br label %for.cond, !dbg !10888

for.cond:                                         ; preds = %for.inc56, %entry
  %4 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10889
  %tobool = icmp ne %struct.VEC_pre_expr_heap* %4, null, !dbg !10889
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10889

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_pre_expr_heap*, %struct.VEC_pre_expr_heap** %exprs, align 8, !dbg !10889
  %base = getelementptr inbounds %struct.VEC_pre_expr_heap, %struct.VEC_pre_expr_heap* %5, i32 0, i32 0, !dbg !10889
  br label %cond.end, !dbg !10889

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_pre_expr_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10889
  %6 = load i32, i32* %i, align 4, !dbg !10889
  %call1 = call i32 @VEC_pre_expr_base_iterate(%struct.VEC_pre_expr_base* %cond, i32 %6, %struct.pre_expr_d** %expr), !dbg !10889
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10891
  br i1 %tobool2, label %for.body, label %for.end58, !dbg !10891

for.body:                                         ; preds = %cond.end
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10892
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 0, !dbg !10895
  %8 = load i32, i32* %kind, align 8, !dbg !10895
  %cmp = icmp ne i32 %8, 0, !dbg !10896
  br i1 %cmp, label %if.then, label %if.end55, !dbg !10897

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d*** %avail, metadata !10898, metadata !DIExpression()), !dbg !10900
  call void @llvm.dbg.declare(metadata i32* %val, metadata !10901, metadata !DIExpression()), !dbg !10902
  call void @llvm.dbg.declare(metadata i8* %by_all, metadata !10903, metadata !DIExpression()), !dbg !10904
  store i8 1, i8* %by_all, align 1, !dbg !10904
  call void @llvm.dbg.declare(metadata i8* %cant_insert, metadata !10905, metadata !DIExpression()), !dbg !10906
  store i8 0, i8* %cant_insert, align 1, !dbg !10906
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pred, metadata !10907, metadata !DIExpression()), !dbg !10908
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bprime, metadata !10909, metadata !DIExpression()), !dbg !10910
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %eprime, metadata !10911, metadata !DIExpression()), !dbg !10912
  store %struct.pre_expr_d* null, %struct.pre_expr_d** %eprime, align 8, !dbg !10912
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10913, metadata !DIExpression()), !dbg !10914
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10915
  %call3 = call i32 @get_expr_value_id(%struct.pre_expr_d* %9), !dbg !10916
  store i32 %call3, i32* %val, align 4, !dbg !10917
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10918
  %aux4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 2, !dbg !10918
  %11 = load i8*, i8** %aux4, align 8, !dbg !10918
  %12 = bitcast i8* %11 to %struct.bb_bitmap_sets*, !dbg !10918
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %12, i32 0, i32 1, !dbg !10918
  %13 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !10918
  %14 = load i32, i32* %val, align 4, !dbg !10920
  %call5 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %13, i32 %14), !dbg !10921
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10921
  br i1 %tobool6, label %if.then7, label %if.end, !dbg !10922

if.then7:                                         ; preds = %if.then
  br label %for.inc56, !dbg !10923

if.end:                                           ; preds = %if.then
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dom.addr, align 8, !dbg !10924
  %aux8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 2, !dbg !10924
  %16 = load i8*, i8** %aux8, align 8, !dbg !10924
  %17 = bitcast i8* %16 to %struct.bb_bitmap_sets*, !dbg !10924
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %17, i32 0, i32 3, !dbg !10924
  %18 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !10924
  %19 = load i32, i32* %val, align 4, !dbg !10926
  %call9 = call zeroext i8 @bitmap_set_contains_value(%struct.bitmap_set* %18, i32 %19), !dbg !10927
  %tobool10 = icmp ne i8 %call9, 0, !dbg !10927
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !10928

if.then11:                                        ; preds = %if.end
  br label %for.inc56, !dbg !10929

if.end12:                                         ; preds = %if.end
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10930
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !10930
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10930
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10930
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 5, !dbg !10930
  %22 = load i32, i32* %x_last_basic_block, align 8, !dbg !10930
  %conv = sext i32 %22 to i64, !dbg !10930
  %call13 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !10930
  %23 = bitcast i8* %call13 to %struct.pre_expr_d**, !dbg !10930
  store %struct.pre_expr_d** %23, %struct.pre_expr_d*** %avail, align 8, !dbg !10931
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10932
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 0, !dbg !10932
  %call14 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10932
  %25 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10932
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !10932
  %27 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 0, !dbg !10932
  store i32 %27, i32* %26, align 8, !dbg !10932
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !10932
  %29 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 1, !dbg !10932
  store %struct.VEC_edge_gc** %29, %struct.VEC_edge_gc*** %28, align 8, !dbg !10932
  %30 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10932
  %31 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10932
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false), !dbg !10932
  br label %for.cond15, !dbg !10932

for.cond15:                                       ; preds = %for.inc, %if.end12
  %32 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10934
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 0, !dbg !10934
  %34 = load i32, i32* %33, align 8, !dbg !10934
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 1, !dbg !10934
  %36 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %35, align 8, !dbg !10934
  %call16 = call zeroext i8 @ei_cond(i32 %34, %struct.VEC_edge_gc** %36, %struct.edge_def** %pred), !dbg !10934
  %tobool17 = icmp ne i8 %call16, 0, !dbg !10932
  br i1 %tobool17, label %for.body18, label %for.end, !dbg !10932

for.body18:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i32* %vprime, metadata !10936, metadata !DIExpression()), !dbg !10938
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %edoubleprime, metadata !10939, metadata !DIExpression()), !dbg !10940
  %37 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10941
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 7, !dbg !10941
  %38 = load i32, i32* %flags, align 8, !dbg !10941
  %and = and i32 %38, 16, !dbg !10941
  %tobool19 = icmp ne i32 %and, 0, !dbg !10941
  br i1 %tobool19, label %cond.true20, label %cond.false21, !dbg !10941

cond.true20:                                      ; preds = %for.body18
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3659, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10941
  br label %cond.end22, !dbg !10941

cond.false21:                                     ; preds = %for.body18
  br label %cond.end22, !dbg !10941

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !10941
  %39 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !10942
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 0, !dbg !10943
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10943
  store %struct.basic_block_def* %40, %struct.basic_block_def** %bprime, align 8, !dbg !10944
  %41 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10945
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10946
  %aux24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 2, !dbg !10946
  %43 = load i8*, i8** %aux24, align 8, !dbg !10946
  %44 = bitcast i8* %43 to %struct.bb_bitmap_sets*, !dbg !10946
  %antic_in = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %44, i32 0, i32 4, !dbg !10946
  %45 = load %struct.bitmap_set*, %struct.bitmap_set** %antic_in, align 8, !dbg !10946
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10947
  %aux25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 2, !dbg !10947
  %47 = load i8*, i8** %aux25, align 8, !dbg !10947
  %48 = bitcast i8* %47 to %struct.bb_bitmap_sets*, !dbg !10947
  %pa_in26 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %48, i32 0, i32 5, !dbg !10947
  %49 = load %struct.bitmap_set*, %struct.bitmap_set** %pa_in26, align 8, !dbg !10947
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10948
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10949
  %call27 = call %struct.pre_expr_d* @phi_translate(%struct.pre_expr_d* %41, %struct.bitmap_set* %45, %struct.bitmap_set* %49, %struct.basic_block_def* %50, %struct.basic_block_def* %51), !dbg !10950
  store %struct.pre_expr_d* %call27, %struct.pre_expr_d** %eprime, align 8, !dbg !10951
  %52 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10952
  %cmp28 = icmp eq %struct.pre_expr_d* %52, null, !dbg !10954
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !10955

if.then30:                                        ; preds = %cond.end22
  store i8 1, i8* %cant_insert, align 1, !dbg !10956
  br label %for.end, !dbg !10958

if.end31:                                         ; preds = %cond.end22
  %53 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10959
  %call32 = call %struct.pre_expr_d* @fully_constant_expression(%struct.pre_expr_d* %53), !dbg !10960
  store %struct.pre_expr_d* %call32, %struct.pre_expr_d** %eprime, align 8, !dbg !10961
  %54 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !10962
  %call33 = call i32 @get_expr_value_id(%struct.pre_expr_d* %54), !dbg !10963
  store i32 %call33, i32* %vprime, align 4, !dbg !10964
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10965
  %aux34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 2, !dbg !10965
  %56 = load i8*, i8** %aux34, align 8, !dbg !10965
  %57 = bitcast i8* %56 to %struct.bb_bitmap_sets*, !dbg !10965
  %avail_out35 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %57, i32 0, i32 3, !dbg !10965
  %58 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out35, align 8, !dbg !10965
  %59 = load i32, i32* %vprime, align 4, !dbg !10966
  %call36 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %58, i32 %59, %union.gimple_statement_d* null), !dbg !10967
  store %struct.pre_expr_d* %call36, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10968
  %60 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10969
  %cmp37 = icmp eq %struct.pre_expr_d* %60, null, !dbg !10971
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !10972

if.then39:                                        ; preds = %if.end31
  store i8 0, i8* %by_all, align 1, !dbg !10973
  br label %for.end, !dbg !10975

if.else:                                          ; preds = %if.end31
  %61 = load %struct.pre_expr_d*, %struct.pre_expr_d** %edoubleprime, align 8, !dbg !10976
  %62 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10977
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !10978
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 9, !dbg !10979
  %64 = load i32, i32* %index, align 8, !dbg !10979
  %idxprom = sext i32 %64 to i64, !dbg !10977
  %arrayidx = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %62, i64 %idxprom, !dbg !10977
  store %struct.pre_expr_d* %61, %struct.pre_expr_d** %arrayidx, align 8, !dbg !10980
  br label %if.end40

if.end40:                                         ; preds = %if.else
  br label %for.inc, !dbg !10981

for.inc:                                          ; preds = %if.end40
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10934
  br label %for.cond15, !dbg !10934, !llvm.loop !10982

for.end:                                          ; preds = %if.then39, %if.then30, %for.cond15
  %65 = load i8, i8* %cant_insert, align 1, !dbg !10984
  %tobool41 = icmp ne i8 %65, 0, !dbg !10984
  br i1 %tobool41, label %if.end54, label %land.lhs.true, !dbg !10986

land.lhs.true:                                    ; preds = %for.end
  %66 = load i8, i8* %by_all, align 1, !dbg !10987
  %conv42 = zext i8 %66 to i32, !dbg !10987
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !10987
  br i1 %tobool43, label %land.lhs.true44, label %if.end54, !dbg !10988

land.lhs.true44:                                  ; preds = %land.lhs.true
  %call45 = call zeroext i8 @dbg_cnt(i32 25), !dbg !10989
  %conv46 = zext i8 %call45 to i32, !dbg !10989
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !10989
  br i1 %tobool47, label %if.then48, label %if.end54, !dbg !10990

if.then48:                                        ; preds = %land.lhs.true44
  %67 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 2), align 4, !dbg !10991
  %inc = add nsw i32 %67, 1, !dbg !10991
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 2), align 4, !dbg !10991
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !10993
  %69 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !10995
  %call49 = call i32 @get_expression_id(%struct.pre_expr_d* %69), !dbg !10996
  %70 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !10997
  %call50 = call zeroext i8 @insert_into_preds_of_block(%struct.basic_block_def* %68, i32 %call49, %struct.pre_expr_d** %70), !dbg !10998
  %tobool51 = icmp ne i8 %call50, 0, !dbg !10998
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !10999

if.then52:                                        ; preds = %if.then48
  store i8 1, i8* %new_stuff, align 1, !dbg !11000
  br label %if.end53, !dbg !11001

if.end53:                                         ; preds = %if.then52, %if.then48
  br label %if.end54, !dbg !11002

if.end54:                                         ; preds = %if.end53, %land.lhs.true44, %land.lhs.true, %for.end
  %71 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail, align 8, !dbg !11003
  %72 = bitcast %struct.pre_expr_d** %71 to i8*, !dbg !11003
  call void @free(i8* %72), !dbg !11004
  br label %if.end55, !dbg !11005

if.end55:                                         ; preds = %if.end54, %for.body
  br label %for.inc56, !dbg !11006

for.inc56:                                        ; preds = %if.end55, %if.then11, %if.then7
  %73 = load i32, i32* %i, align 4, !dbg !11007
  %inc57 = add nsw i32 %73, 1, !dbg !11007
  store i32 %inc57, i32* %i, align 4, !dbg !11007
  br label %for.cond, !dbg !11008, !llvm.loop !11009

for.end58:                                        ; preds = %cond.end
  call void @VEC_pre_expr_heap_free(%struct.VEC_pre_expr_heap** %exprs), !dbg !11011
  %74 = load i8, i8* %new_stuff, align 1, !dbg !11012
  ret i8 %74, !dbg !11013
}

declare dso_local zeroext i8 @optimize_edge_for_speed_p(%struct.edge_def*) #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @insert_into_preds_of_block(%struct.basic_block_def* %block, i32 %exprnum, %struct.pre_expr_d** %avail) #0 !dbg !11014 {
entry:
  %retval = alloca i8, align 1
  %block.addr = alloca %struct.basic_block_def*, align 8
  %exprnum.addr = alloca i32, align 4
  %avail.addr = alloca %struct.pre_expr_d**, align 8
  %expr = alloca %struct.pre_expr_d*, align 8
  %newphi = alloca %struct.pre_expr_d*, align 8
  %val = alloca i32, align 4
  %pred = alloca %struct.edge_def*, align 8
  %insertions = alloca i8, align 1
  %nophi = alloca i8, align 1
  %bprime = alloca %struct.basic_block_def*, align 8
  %eprime = alloca %struct.pre_expr_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %type = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %firstinsideloop = alloca i8, align 1
  %secondinsideloop = alloca i8, align 1
  %tmp = alloca %struct.edge_iterator, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %builtexpr = alloca %union.tree_node*, align 8
  %constant = alloca %union.tree_node*, align 8
  %builtexpr85 = alloca %union.tree_node*, align 8
  %forcedexpr = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp105 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %builtexpr132 = alloca %union.tree_node*, align 8
  %forcedexpr133 = alloca %union.tree_node*, align 8
  %gsi150 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp151 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt157 = alloca %union.gimple_statement_d*, align 8
  %tmp223 = alloca %struct.edge_iterator, align 8
  %ae = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !11017, metadata !DIExpression()), !dbg !11018
  store i32 %exprnum, i32* %exprnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %exprnum.addr, metadata !11019, metadata !DIExpression()), !dbg !11020
  store %struct.pre_expr_d** %avail, %struct.pre_expr_d*** %avail.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d*** %avail.addr, metadata !11021, metadata !DIExpression()), !dbg !11022
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr, metadata !11023, metadata !DIExpression()), !dbg !11024
  %0 = load i32, i32* %exprnum.addr, align 4, !dbg !11025
  %call = call %struct.pre_expr_d* @expression_for_id(i32 %0), !dbg !11026
  store %struct.pre_expr_d* %call, %struct.pre_expr_d** %expr, align 8, !dbg !11024
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %newphi, metadata !11027, metadata !DIExpression()), !dbg !11028
  call void @llvm.dbg.declare(metadata i32* %val, metadata !11029, metadata !DIExpression()), !dbg !11030
  %1 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !11031
  %call1 = call i32 @get_expr_value_id(%struct.pre_expr_d* %1), !dbg !11032
  store i32 %call1, i32* %val, align 4, !dbg !11030
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pred, metadata !11033, metadata !DIExpression()), !dbg !11034
  call void @llvm.dbg.declare(metadata i8* %insertions, metadata !11035, metadata !DIExpression()), !dbg !11036
  store i8 0, i8* %insertions, align 1, !dbg !11036
  call void @llvm.dbg.declare(metadata i8* %nophi, metadata !11037, metadata !DIExpression()), !dbg !11038
  store i8 0, i8* %nophi, align 1, !dbg !11038
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bprime, metadata !11039, metadata !DIExpression()), !dbg !11040
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %eprime, metadata !11041, metadata !DIExpression()), !dbg !11042
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !11043, metadata !DIExpression()), !dbg !11044
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !11045, metadata !DIExpression()), !dbg !11046
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !11047
  %call2 = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %2), !dbg !11048
  store %union.tree_node* %call2, %union.tree_node** %type, align 8, !dbg !11046
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !11049, metadata !DIExpression()), !dbg !11050
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !11051, metadata !DIExpression()), !dbg !11052
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11053
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !11053
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11055

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !11056
  %and = and i32 %4, 8, !dbg !11057
  %tobool3 = icmp ne i32 %and, 0, !dbg !11057
  br i1 %tobool3, label %if.then, label %if.end, !dbg !11058

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11059
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.49, i64 0, i64 0)), !dbg !11061
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11062
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !11063
  call void @print_pre_expr(%struct._IO_FILE* %6, %struct.pre_expr_d* %7), !dbg !11064
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11065
  %9 = load i32, i32* %val, align 4, !dbg !11066
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i64 0, i64 0), i32 %9), !dbg !11067
  br label %if.end, !dbg !11068

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11069
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 10, !dbg !11071
  %11 = load i32, i32* %loop_depth, align 4, !dbg !11071
  %cmp = icmp sgt i32 %11, 0, !dbg !11072
  br i1 %cmp, label %land.lhs.true6, label %if.end51, !dbg !11073

land.lhs.true6:                                   ; preds = %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11074
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !11074
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !11074
  %tobool7 = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !11074
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !11074

cond.true:                                        ; preds = %land.lhs.true6
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11074
  %preds8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 0, !dbg !11074
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds8, align 8, !dbg !11074
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !11074
  br label %cond.end, !dbg !11074

cond.false:                                       ; preds = %land.lhs.true6
  br label %cond.end, !dbg !11074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11074
  %call9 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11074
  %cmp10 = icmp eq i32 %call9, 2, !dbg !11075
  br i1 %cmp10, label %if.then11, label %if.end51, !dbg !11076

if.then11:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %firstinsideloop, metadata !11077, metadata !DIExpression()), !dbg !11079
  store i8 0, i8* %firstinsideloop, align 1, !dbg !11079
  call void @llvm.dbg.declare(metadata i8* %secondinsideloop, metadata !11080, metadata !DIExpression()), !dbg !11081
  store i8 0, i8* %secondinsideloop, align 1, !dbg !11081
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11082
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 3, !dbg !11083
  %17 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !11083
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11084
  %preds12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !11084
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds12, align 8, !dbg !11084
  %tobool13 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !11084
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !11084

cond.true14:                                      ; preds = %if.then11
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11084
  %preds15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 0, !dbg !11084
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds15, align 8, !dbg !11084
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !11084
  br label %cond.end18, !dbg !11084

cond.false17:                                     ; preds = %if.then11
  br label %cond.end18, !dbg !11084

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !11084
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 0), !dbg !11084
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call20, i32 0, i32 0, !dbg !11085
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !11085
  %call21 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %17, %struct.basic_block_def* %22), !dbg !11086
  store i8 %call21, i8* %firstinsideloop, align 1, !dbg !11087
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11088
  %loop_father22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 3, !dbg !11089
  %24 = load %struct.loop*, %struct.loop** %loop_father22, align 8, !dbg !11089
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11090
  %preds23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 0, !dbg !11090
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds23, align 8, !dbg !11090
  %tobool24 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !11090
  br i1 %tobool24, label %cond.true25, label %cond.false28, !dbg !11090

cond.true25:                                      ; preds = %cond.end18
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11090
  %preds26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !11090
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds26, align 8, !dbg !11090
  %base27 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !11090
  br label %cond.end29, !dbg !11090

cond.false28:                                     ; preds = %cond.end18
  br label %cond.end29, !dbg !11090

cond.end29:                                       ; preds = %cond.false28, %cond.true25
  %cond30 = phi %struct.VEC_edge_base* [ %base27, %cond.true25 ], [ null, %cond.false28 ], !dbg !11090
  %call31 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond30, i32 1), !dbg !11090
  %src32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call31, i32 0, i32 0, !dbg !11091
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src32, align 8, !dbg !11091
  %call33 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %24, %struct.basic_block_def* %29), !dbg !11092
  store i8 %call33, i8* %secondinsideloop, align 1, !dbg !11093
  %30 = load i8, i8* %firstinsideloop, align 1, !dbg !11094
  %conv = zext i8 %30 to i32, !dbg !11094
  %31 = load i8, i8* %secondinsideloop, align 1, !dbg !11096
  %conv34 = zext i8 %31 to i32, !dbg !11096
  %xor = xor i32 %conv, %conv34, !dbg !11097
  %tobool35 = icmp ne i32 %xor, 0, !dbg !11097
  br i1 %tobool35, label %land.lhs.true36, label %if.end50, !dbg !11098

land.lhs.true36:                                  ; preds = %cond.end29
  %32 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !11099
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %32, i32 0, i32 0, !dbg !11100
  %33 = load i32, i32* %kind, align 8, !dbg !11100
  %cmp37 = icmp ne i32 %33, 2, !dbg !11101
  br i1 %cmp37, label %if.then42, label %lor.lhs.false, !dbg !11102

lor.lhs.false:                                    ; preds = %land.lhs.true36
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11103
  %35 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr, align 8, !dbg !11104
  %call39 = call zeroext i8 @inhibit_phi_insertion(%struct.basic_block_def* %34, %struct.pre_expr_d* %35), !dbg !11105
  %conv40 = zext i8 %call39 to i32, !dbg !11105
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !11105
  br i1 %tobool41, label %if.then42, label %if.end50, !dbg !11106

if.then42:                                        ; preds = %lor.lhs.false, %land.lhs.true36
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11107
  %tobool43 = icmp ne %struct._IO_FILE* %36, null, !dbg !11107
  br i1 %tobool43, label %land.lhs.true44, label %if.end49, !dbg !11110

land.lhs.true44:                                  ; preds = %if.then42
  %37 = load i32, i32* @dump_flags, align 4, !dbg !11111
  %and45 = and i32 %37, 8, !dbg !11112
  %tobool46 = icmp ne i32 %and45, 0, !dbg !11112
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !11113

if.then47:                                        ; preds = %land.lhs.true44
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11114
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.51, i64 0, i64 0)), !dbg !11115
  br label %if.end49, !dbg !11115

if.end49:                                         ; preds = %if.then47, %land.lhs.true44, %if.then42
  store i8 1, i8* %nophi, align 1, !dbg !11116
  br label %if.end50, !dbg !11117

if.end50:                                         ; preds = %if.end49, %lor.lhs.false, %cond.end29
  br label %if.end51, !dbg !11118

if.end51:                                         ; preds = %if.end50, %cond.end, %if.end
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11119
  %preds52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 0, !dbg !11119
  %call53 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds52), !dbg !11119
  %40 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !11119
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %40, i32 0, i32 0, !dbg !11119
  %42 = extractvalue { i32, %struct.VEC_edge_gc** } %call53, 0, !dbg !11119
  store i32 %42, i32* %41, align 8, !dbg !11119
  %43 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %40, i32 0, i32 1, !dbg !11119
  %44 = extractvalue { i32, %struct.VEC_edge_gc** } %call53, 1, !dbg !11119
  store %struct.VEC_edge_gc** %44, %struct.VEC_edge_gc*** %43, align 8, !dbg !11119
  %45 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11119
  %46 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !11119
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 16, i1 false), !dbg !11119
  br label %for.cond, !dbg !11119

for.cond:                                         ; preds = %for.inc171, %if.end51
  %47 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11121
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %47, i32 0, i32 0, !dbg !11121
  %49 = load i32, i32* %48, align 8, !dbg !11121
  %50 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %47, i32 0, i32 1, !dbg !11121
  %51 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %50, align 8, !dbg !11121
  %call54 = call zeroext i8 @ei_cond(i32 %49, %struct.VEC_edge_gc** %51, %struct.edge_def** %pred), !dbg !11121
  %tobool55 = icmp ne i8 %call54, 0, !dbg !11119
  br i1 %tobool55, label %for.body, label %for.end172, !dbg !11119

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !11123, metadata !DIExpression()), !dbg !11125
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !11125
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtexpr, metadata !11126, metadata !DIExpression()), !dbg !11127
  %52 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11128
  %src56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 0, !dbg !11129
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src56, align 8, !dbg !11129
  store %struct.basic_block_def* %53, %struct.basic_block_def** %bprime, align 8, !dbg !11130
  %54 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11131
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !11132
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 9, !dbg !11133
  %56 = load i32, i32* %index, align 8, !dbg !11133
  %idxprom = sext i32 %56 to i64, !dbg !11131
  %arrayidx = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %54, i64 %idxprom, !dbg !11131
  %57 = load %struct.pre_expr_d*, %struct.pre_expr_d** %arrayidx, align 8, !dbg !11131
  store %struct.pre_expr_d* %57, %struct.pre_expr_d** %eprime, align 8, !dbg !11134
  %58 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11135
  %kind57 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %58, i32 0, i32 0, !dbg !11137
  %59 = load i32, i32* %kind57, align 8, !dbg !11137
  %cmp58 = icmp ne i32 %59, 0, !dbg !11138
  br i1 %cmp58, label %land.lhs.true60, label %if.else, !dbg !11139

land.lhs.true60:                                  ; preds = %for.body
  %60 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11140
  %kind61 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %60, i32 0, i32 0, !dbg !11141
  %61 = load i32, i32* %kind61, align 8, !dbg !11141
  %cmp62 = icmp ne i32 %61, 3, !dbg !11142
  br i1 %cmp62, label %if.then64, label %if.else, !dbg !11143

if.then64:                                        ; preds = %land.lhs.true60
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !11144
  %63 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11146
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11147
  %call65 = call %union.tree_node* @create_expression_by_pieces(%struct.basic_block_def* %62, %struct.pre_expr_d* %63, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* null, %union.tree_node* %64), !dbg !11148
  store %union.tree_node* %call65, %union.tree_node** %builtexpr, align 8, !dbg !11149
  %65 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11150
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 7, !dbg !11150
  %66 = load i32, i32* %flags, align 8, !dbg !11150
  %and66 = and i32 %66, 2, !dbg !11150
  %tobool67 = icmp ne i32 %and66, 0, !dbg !11150
  br i1 %tobool67, label %cond.true68, label %cond.false69, !dbg !11150

cond.true68:                                      ; preds = %if.then64
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3302, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11150
  br label %cond.end70, !dbg !11150

cond.false69:                                     ; preds = %if.then64
  br label %cond.end70, !dbg !11150

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i32 [ 0, %cond.true68 ], [ 0, %cond.false69 ], !dbg !11150
  %67 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11151
  %68 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11152
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %67, %struct.gimple_seq_d* %68), !dbg !11153
  %69 = load %union.tree_node*, %union.tree_node** %builtexpr, align 8, !dbg !11154
  %call72 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %69), !dbg !11155
  %70 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11156
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !11157
  %index73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 9, !dbg !11158
  %72 = load i32, i32* %index73, align 8, !dbg !11158
  %idxprom74 = sext i32 %72 to i64, !dbg !11156
  %arrayidx75 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %70, i64 %idxprom74, !dbg !11156
  store %struct.pre_expr_d* %call72, %struct.pre_expr_d** %arrayidx75, align 8, !dbg !11159
  store i8 1, i8* %insertions, align 1, !dbg !11160
  br label %if.end170, !dbg !11161

if.else:                                          ; preds = %land.lhs.true60, %for.body
  %73 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11162
  %kind76 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %73, i32 0, i32 0, !dbg !11164
  %74 = load i32, i32* %kind76, align 8, !dbg !11164
  %cmp77 = icmp eq i32 %74, 3, !dbg !11165
  br i1 %cmp77, label %if.then79, label %if.else120, !dbg !11166

if.then79:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %constant, metadata !11167, metadata !DIExpression()), !dbg !11169
  %75 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11170
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %75, i32 0, i32 2, !dbg !11170
  %constant80 = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !11170
  %76 = load %union.tree_node*, %union.tree_node** %constant80, align 8, !dbg !11170
  store %union.tree_node* %76, %union.tree_node** %constant, align 8, !dbg !11169
  %77 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11171
  %78 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !11173
  %common = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !11173
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11173
  %79 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !11173
  %call82 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %77, %union.tree_node* %79), !dbg !11174
  %tobool83 = icmp ne i8 %call82, 0, !dbg !11174
  br i1 %tobool83, label %if.end119, label %if.then84, !dbg !11175

if.then84:                                        ; preds = %if.then79
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtexpr85, metadata !11176, metadata !DIExpression()), !dbg !11178
  %80 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11179
  %81 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !11179
  %call86 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %80, %union.tree_node* %81), !dbg !11179
  store %union.tree_node* %call86, %union.tree_node** %builtexpr85, align 8, !dbg !11178
  %82 = load %union.tree_node*, %union.tree_node** %builtexpr85, align 8, !dbg !11180
  %call87 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %82), !dbg !11182
  %tobool88 = icmp ne i8 %call87, 0, !dbg !11182
  br i1 %tobool88, label %if.end118, label %if.then89, !dbg !11183

if.then89:                                        ; preds = %if.then84
  call void @llvm.dbg.declare(metadata %union.tree_node** %forcedexpr, metadata !11184, metadata !DIExpression()), !dbg !11186
  %83 = load %union.tree_node*, %union.tree_node** %builtexpr85, align 8, !dbg !11187
  %call90 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %83, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !11188
  store %union.tree_node* %call90, %union.tree_node** %forcedexpr, align 8, !dbg !11186
  %84 = load %union.tree_node*, %union.tree_node** %forcedexpr, align 8, !dbg !11189
  %call91 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %84), !dbg !11191
  %tobool92 = icmp ne i8 %call91, 0, !dbg !11191
  br i1 %tobool92, label %if.end117, label %if.then93, !dbg !11192

if.then93:                                        ; preds = %if.then89
  %85 = load %union.tree_node*, %union.tree_node** %forcedexpr, align 8, !dbg !11193
  %86 = load %union.tree_node*, %union.tree_node** %builtexpr85, align 8, !dbg !11196
  %cmp94 = icmp ne %union.tree_node* %85, %86, !dbg !11197
  br i1 %cmp94, label %if.then96, label %if.end102, !dbg !11198

if.then96:                                        ; preds = %if.then93
  %87 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11199
  %u97 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %87, i32 0, i32 2, !dbg !11199
  %constant98 = bitcast %union.pre_expr_union_d* %u97 to %union.tree_node**, !dbg !11199
  %88 = load %union.tree_node*, %union.tree_node** %constant98, align 8, !dbg !11199
  %89 = load %union.tree_node*, %union.tree_node** %forcedexpr, align 8, !dbg !11201
  %call99 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %89), !dbg !11202
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call99, i32 0, i32 0, !dbg !11203
  store %union.tree_node* %88, %union.tree_node** %valnum, align 8, !dbg !11204
  %90 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11205
  %call100 = call i32 @get_expr_value_id(%struct.pre_expr_d* %90), !dbg !11206
  %91 = load %union.tree_node*, %union.tree_node** %forcedexpr, align 8, !dbg !11207
  %call101 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %91), !dbg !11208
  %value_id = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call101, i32 0, i32 2, !dbg !11209
  store i32 %call100, i32* %value_id, align 8, !dbg !11210
  br label %if.end102, !dbg !11211

if.end102:                                        ; preds = %if.then96, %if.then93
  %92 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11212
  %tobool103 = icmp ne %struct.gimple_seq_d* %92, null, !dbg !11212
  br i1 %tobool103, label %if.then104, label %if.end112, !dbg !11214

if.then104:                                       ; preds = %if.end102
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11215, metadata !DIExpression()), !dbg !11217
  %93 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11218
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp105, %struct.gimple_seq_d* %93), !dbg !11219
  %94 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11219
  %95 = bitcast %struct.gimple_stmt_iterator* %tmp105 to i8*, !dbg !11219
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 24, i1 false), !dbg !11219
  br label %for.cond106, !dbg !11220

for.cond106:                                      ; preds = %for.inc, %if.then104
  %call107 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11221
  %tobool108 = icmp ne i8 %call107, 0, !dbg !11224
  %lnot = xor i1 %tobool108, true, !dbg !11224
  br i1 %lnot, label %for.body109, label %for.end, !dbg !11225

for.body109:                                      ; preds = %for.cond106
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11226, metadata !DIExpression()), !dbg !11228
  %call110 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11229
  store %union.gimple_statement_d* %call110, %union.gimple_statement_d** %stmt, align 8, !dbg !11228
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11230
  %call111 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @inserted_exprs, %union.gimple_statement_d* %96), !dbg !11230
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11231
  call void @gimple_set_plf(%union.gimple_statement_d* %97, i32 1, i8 zeroext 0), !dbg !11232
  br label %for.inc, !dbg !11233

for.inc:                                          ; preds = %for.body109
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !11234
  br label %for.cond106, !dbg !11235, !llvm.loop !11236

for.end:                                          ; preds = %for.cond106
  %98 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11238
  %99 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11239
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %98, %struct.gimple_seq_d* %99), !dbg !11240
  br label %if.end112, !dbg !11241

if.end112:                                        ; preds = %for.end, %if.end102
  %100 = load %union.tree_node*, %union.tree_node** %forcedexpr, align 8, !dbg !11242
  %call113 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %100), !dbg !11243
  %101 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11244
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !11245
  %index114 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 9, !dbg !11246
  %103 = load i32, i32* %index114, align 8, !dbg !11246
  %idxprom115 = sext i32 %103 to i64, !dbg !11244
  %arrayidx116 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %101, i64 %idxprom115, !dbg !11244
  store %struct.pre_expr_d* %call113, %struct.pre_expr_d** %arrayidx116, align 8, !dbg !11247
  br label %if.end117, !dbg !11248

if.end117:                                        ; preds = %if.end112, %if.then89
  br label %if.end118, !dbg !11249

if.end118:                                        ; preds = %if.end117, %if.then84
  br label %if.end119, !dbg !11250

if.end119:                                        ; preds = %if.end118, %if.then79
  br label %if.end169, !dbg !11251

if.else120:                                       ; preds = %if.else
  %104 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11252
  %kind121 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %104, i32 0, i32 0, !dbg !11254
  %105 = load i32, i32* %kind121, align 8, !dbg !11254
  %cmp122 = icmp eq i32 %105, 0, !dbg !11255
  br i1 %cmp122, label %if.then124, label %if.end168, !dbg !11256

if.then124:                                       ; preds = %if.else120
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !11257, metadata !DIExpression()), !dbg !11259
  %106 = load %struct.pre_expr_d*, %struct.pre_expr_d** %eprime, align 8, !dbg !11260
  %u125 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %106, i32 0, i32 2, !dbg !11260
  %name126 = bitcast %union.pre_expr_union_d* %u125 to %union.tree_node**, !dbg !11260
  %107 = load %union.tree_node*, %union.tree_node** %name126, align 8, !dbg !11260
  store %union.tree_node* %107, %union.tree_node** %name, align 8, !dbg !11259
  %108 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11261
  %109 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11263
  %common127 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !11263
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !11263
  %110 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !11263
  %call129 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %108, %union.tree_node* %110), !dbg !11264
  %tobool130 = icmp ne i8 %call129, 0, !dbg !11264
  br i1 %tobool130, label %if.end167, label %if.then131, !dbg !11265

if.then131:                                       ; preds = %if.then124
  call void @llvm.dbg.declare(metadata %union.tree_node** %builtexpr132, metadata !11266, metadata !DIExpression()), !dbg !11268
  call void @llvm.dbg.declare(metadata %union.tree_node** %forcedexpr133, metadata !11269, metadata !DIExpression()), !dbg !11270
  %111 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11271
  %112 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11271
  %call134 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %111, %union.tree_node* %112), !dbg !11271
  store %union.tree_node* %call134, %union.tree_node** %builtexpr132, align 8, !dbg !11272
  %113 = load %union.tree_node*, %union.tree_node** %builtexpr132, align 8, !dbg !11273
  %call135 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %113, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !11274
  store %union.tree_node* %call135, %union.tree_node** %forcedexpr133, align 8, !dbg !11275
  %114 = load %union.tree_node*, %union.tree_node** %forcedexpr133, align 8, !dbg !11276
  %115 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11278
  %cmp136 = icmp ne %union.tree_node* %114, %115, !dbg !11279
  br i1 %cmp136, label %if.then138, label %if.end147, !dbg !11280

if.then138:                                       ; preds = %if.then131
  %116 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11281
  %call139 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %116), !dbg !11283
  %valnum140 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call139, i32 0, i32 0, !dbg !11284
  %117 = load %union.tree_node*, %union.tree_node** %valnum140, align 8, !dbg !11284
  %118 = load %union.tree_node*, %union.tree_node** %forcedexpr133, align 8, !dbg !11285
  %call141 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %118), !dbg !11286
  %valnum142 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call141, i32 0, i32 0, !dbg !11287
  store %union.tree_node* %117, %union.tree_node** %valnum142, align 8, !dbg !11288
  %119 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11289
  %call143 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %119), !dbg !11290
  %value_id144 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call143, i32 0, i32 2, !dbg !11291
  %120 = load i32, i32* %value_id144, align 8, !dbg !11291
  %121 = load %union.tree_node*, %union.tree_node** %forcedexpr133, align 8, !dbg !11292
  %call145 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %121), !dbg !11293
  %value_id146 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call145, i32 0, i32 2, !dbg !11294
  store i32 %120, i32* %value_id146, align 8, !dbg !11295
  br label %if.end147, !dbg !11296

if.end147:                                        ; preds = %if.then138, %if.then131
  %122 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11297
  %tobool148 = icmp ne %struct.gimple_seq_d* %122, null, !dbg !11297
  br i1 %tobool148, label %if.then149, label %if.end162, !dbg !11299

if.then149:                                       ; preds = %if.end147
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi150, metadata !11300, metadata !DIExpression()), !dbg !11302
  %123 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11303
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp151, %struct.gimple_seq_d* %123), !dbg !11304
  %124 = bitcast %struct.gimple_stmt_iterator* %gsi150 to i8*, !dbg !11304
  %125 = bitcast %struct.gimple_stmt_iterator* %tmp151 to i8*, !dbg !11304
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 24, i1 false), !dbg !11304
  br label %for.cond152, !dbg !11305

for.cond152:                                      ; preds = %for.inc160, %if.then149
  %call153 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi150), !dbg !11306
  %tobool154 = icmp ne i8 %call153, 0, !dbg !11309
  %lnot155 = xor i1 %tobool154, true, !dbg !11309
  br i1 %lnot155, label %for.body156, label %for.end161, !dbg !11310

for.body156:                                      ; preds = %for.cond152
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt157, metadata !11311, metadata !DIExpression()), !dbg !11313
  %call158 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi150), !dbg !11314
  store %union.gimple_statement_d* %call158, %union.gimple_statement_d** %stmt157, align 8, !dbg !11313
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt157, align 8, !dbg !11315
  %call159 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @inserted_exprs, %union.gimple_statement_d* %126), !dbg !11315
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt157, align 8, !dbg !11316
  call void @gimple_set_plf(%union.gimple_statement_d* %127, i32 1, i8 zeroext 0), !dbg !11317
  br label %for.inc160, !dbg !11318

for.inc160:                                       ; preds = %for.body156
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi150), !dbg !11319
  br label %for.cond152, !dbg !11320, !llvm.loop !11321

for.end161:                                       ; preds = %for.cond152
  %128 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11323
  %129 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !11324
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %128, %struct.gimple_seq_d* %129), !dbg !11325
  br label %if.end162, !dbg !11326

if.end162:                                        ; preds = %for.end161, %if.end147
  %130 = load %union.tree_node*, %union.tree_node** %forcedexpr133, align 8, !dbg !11327
  %call163 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %130), !dbg !11328
  %131 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11329
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %bprime, align 8, !dbg !11330
  %index164 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 9, !dbg !11331
  %133 = load i32, i32* %index164, align 8, !dbg !11331
  %idxprom165 = sext i32 %133 to i64, !dbg !11329
  %arrayidx166 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %131, i64 %idxprom165, !dbg !11329
  store %struct.pre_expr_d* %call163, %struct.pre_expr_d** %arrayidx166, align 8, !dbg !11332
  br label %if.end167, !dbg !11333

if.end167:                                        ; preds = %if.end162, %if.then124
  br label %if.end168, !dbg !11334

if.end168:                                        ; preds = %if.end167, %if.else120
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end119
  br label %if.end170

if.end170:                                        ; preds = %if.end169, %cond.end70
  br label %for.inc171, !dbg !11335

for.inc171:                                       ; preds = %if.end170
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11121
  br label %for.cond, !dbg !11121, !llvm.loop !11336

for.end172:                                       ; preds = %for.cond
  %134 = load i8, i8* %nophi, align 1, !dbg !11338
  %conv173 = zext i8 %134 to i32, !dbg !11338
  %tobool174 = icmp ne i32 %conv173, 0, !dbg !11338
  br i1 %tobool174, label %land.lhs.true175, label %if.else179, !dbg !11340

land.lhs.true175:                                 ; preds = %for.end172
  %135 = load i8, i8* %insertions, align 1, !dbg !11341
  %conv176 = zext i8 %135 to i32, !dbg !11341
  %tobool177 = icmp ne i32 %conv176, 0, !dbg !11341
  br i1 %tobool177, label %if.then178, label %if.else179, !dbg !11342

if.then178:                                       ; preds = %land.lhs.true175
  store i8 1, i8* %retval, align 1, !dbg !11343
  br label %return, !dbg !11343

if.else179:                                       ; preds = %land.lhs.true175, %for.end172
  %136 = load i8, i8* %nophi, align 1, !dbg !11344
  %conv180 = zext i8 %136 to i32, !dbg !11344
  %tobool181 = icmp ne i32 %conv180, 0, !dbg !11344
  br i1 %tobool181, label %land.lhs.true182, label %if.end185, !dbg !11346

land.lhs.true182:                                 ; preds = %if.else179
  %137 = load i8, i8* %insertions, align 1, !dbg !11347
  %tobool183 = icmp ne i8 %137, 0, !dbg !11347
  br i1 %tobool183, label %if.end185, label %if.then184, !dbg !11348

if.then184:                                       ; preds = %land.lhs.true182
  store i8 0, i8* %retval, align 1, !dbg !11349
  br label %return, !dbg !11349

if.end185:                                        ; preds = %land.lhs.true182, %if.else179
  br label %if.end186

if.end186:                                        ; preds = %if.end185
  %138 = load %union.tree_node*, %union.tree_node** @prephitemp, align 8, !dbg !11350
  %tobool187 = icmp ne %union.tree_node* %138, null, !dbg !11350
  br i1 %tobool187, label %lor.lhs.false188, label %if.then193, !dbg !11352

lor.lhs.false188:                                 ; preds = %if.end186
  %139 = load %union.tree_node*, %union.tree_node** @prephitemp, align 8, !dbg !11353
  %common189 = bitcast %union.tree_node* %139 to %struct.tree_common*, !dbg !11353
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !11353
  %140 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !11353
  %141 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11354
  %cmp191 = icmp ne %union.tree_node* %140, %141, !dbg !11355
  br i1 %cmp191, label %if.then193, label %if.end196, !dbg !11356

if.then193:                                       ; preds = %lor.lhs.false188, %if.end186
  %142 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11357
  %call194 = call %union.tree_node* @create_tmp_var(%union.tree_node* %142, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i64 0, i64 0)), !dbg !11359
  store %union.tree_node* %call194, %union.tree_node** @prephitemp, align 8, !dbg !11360
  %143 = load %union.tree_node*, %union.tree_node** @prephitemp, align 8, !dbg !11361
  %call195 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %143), !dbg !11362
  br label %if.end196, !dbg !11363

if.end196:                                        ; preds = %if.then193, %lor.lhs.false188
  %144 = load %union.tree_node*, %union.tree_node** @prephitemp, align 8, !dbg !11364
  store %union.tree_node* %144, %union.tree_node** %temp, align 8, !dbg !11365
  %145 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11366
  %call197 = call zeroext i8 @add_referenced_var(%union.tree_node* %145), !dbg !11367
  %146 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11368
  %base198 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !11368
  %147 = bitcast %struct.tree_base* %base198 to i64*, !dbg !11368
  %bf.load = load i64, i64* %147, align 8, !dbg !11368
  %bf.clear = and i64 %bf.load, 65535, !dbg !11368
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11368
  %cmp199 = icmp eq i32 %bf.cast, 13, !dbg !11370
  br i1 %cmp199, label %if.then208, label %lor.lhs.false201, !dbg !11371

lor.lhs.false201:                                 ; preds = %if.end196
  %148 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11372
  %base202 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !11372
  %149 = bitcast %struct.tree_base* %base202 to i64*, !dbg !11372
  %bf.load203 = load i64, i64* %149, align 8, !dbg !11372
  %bf.clear204 = and i64 %bf.load203, 65535, !dbg !11372
  %bf.cast205 = trunc i64 %bf.clear204 to i32, !dbg !11372
  %cmp206 = icmp eq i32 %bf.cast205, 14, !dbg !11373
  br i1 %cmp206, label %if.then208, label %if.end211, !dbg !11374

if.then208:                                       ; preds = %lor.lhs.false201, %if.end196
  %150 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11375
  %decl_common = bitcast %union.tree_node* %150 to %struct.tree_decl_common*, !dbg !11375
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11375
  %151 = bitcast i40* %gimple_reg_flag to i64*, !dbg !11375
  %bf.load209 = load i64, i64* %151, align 8, !dbg !11376
  %bf.clear210 = and i64 %bf.load209, -134217729, !dbg !11376
  %bf.set = or i64 %bf.clear210, 134217728, !dbg !11376
  store i64 %bf.set, i64* %151, align 8, !dbg !11376
  br label %if.end211, !dbg !11375

if.end211:                                        ; preds = %if.then208, %lor.lhs.false201
  %152 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11377
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11378
  %call212 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %152, %struct.basic_block_def* %153), !dbg !11379
  store %union.gimple_statement_d* %call212, %union.gimple_statement_d** %phi, align 8, !dbg !11380
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11381
  call void @gimple_set_plf(%union.gimple_statement_d* %154, i32 1, i8 zeroext 0), !dbg !11382
  %155 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11383
  %call213 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %155), !dbg !11384
  %156 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11385
  %call214 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %156), !dbg !11386
  %call215 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %call214), !dbg !11387
  %valnum216 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call215, i32 0, i32 0, !dbg !11388
  store %union.tree_node* %call213, %union.tree_node** %valnum216, align 8, !dbg !11389
  %157 = load i32, i32* %val, align 4, !dbg !11390
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11391
  %call217 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %158), !dbg !11392
  %call218 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %call217), !dbg !11393
  %value_id219 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call218, i32 0, i32 2, !dbg !11394
  store i32 %157, i32* %value_id219, align 8, !dbg !11395
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11396
  %call220 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @inserted_exprs, %union.gimple_statement_d* %159), !dbg !11396
  %160 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @inserted_phi_names, align 8, !dbg !11397
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11398
  %call221 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %161), !dbg !11398
  %ssa_name = bitcast %union.tree_node* %call221 to %struct.tree_ssa_name*, !dbg !11398
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !11398
  %162 = load i32, i32* %version, align 8, !dbg !11398
  %call222 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %160, i32 %162), !dbg !11399
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11400
  %preds224 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %163, i32 0, i32 0, !dbg !11400
  %call225 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds224), !dbg !11400
  %164 = bitcast %struct.edge_iterator* %tmp223 to { i32, %struct.VEC_edge_gc** }*, !dbg !11400
  %165 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %164, i32 0, i32 0, !dbg !11400
  %166 = extractvalue { i32, %struct.VEC_edge_gc** } %call225, 0, !dbg !11400
  store i32 %166, i32* %165, align 8, !dbg !11400
  %167 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %164, i32 0, i32 1, !dbg !11400
  %168 = extractvalue { i32, %struct.VEC_edge_gc** } %call225, 1, !dbg !11400
  store %struct.VEC_edge_gc** %168, %struct.VEC_edge_gc*** %167, align 8, !dbg !11400
  %169 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11400
  %170 = bitcast %struct.edge_iterator* %tmp223 to i8*, !dbg !11400
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %169, i8* align 8 %170, i64 16, i1 false), !dbg !11400
  br label %for.cond226, !dbg !11400

for.cond226:                                      ; preds = %for.inc260, %if.end211
  %171 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11402
  %172 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %171, i32 0, i32 0, !dbg !11402
  %173 = load i32, i32* %172, align 8, !dbg !11402
  %174 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %171, i32 0, i32 1, !dbg !11402
  %175 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %174, align 8, !dbg !11402
  %call227 = call zeroext i8 @ei_cond(i32 %173, %struct.VEC_edge_gc** %175, %struct.edge_def** %pred), !dbg !11402
  %tobool228 = icmp ne i8 %call227, 0, !dbg !11400
  br i1 %tobool228, label %for.body229, label %for.end261, !dbg !11400

for.body229:                                      ; preds = %for.cond226
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %ae, metadata !11404, metadata !DIExpression()), !dbg !11406
  %176 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11407
  %177 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11408
  %src230 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %177, i32 0, i32 0, !dbg !11409
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %src230, align 8, !dbg !11409
  %index231 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 9, !dbg !11410
  %179 = load i32, i32* %index231, align 8, !dbg !11410
  %idxprom232 = sext i32 %179 to i64, !dbg !11407
  %arrayidx233 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %176, i64 %idxprom232, !dbg !11407
  %180 = load %struct.pre_expr_d*, %struct.pre_expr_d** %arrayidx233, align 8, !dbg !11407
  store %struct.pre_expr_d* %180, %struct.pre_expr_d** %ae, align 8, !dbg !11406
  %181 = load %struct.pre_expr_d*, %struct.pre_expr_d** %ae, align 8, !dbg !11411
  %call234 = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %181), !dbg !11411
  %182 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11411
  %cmp235 = icmp eq %union.tree_node* %call234, %182, !dbg !11411
  br i1 %cmp235, label %cond.false243, label %lor.lhs.false237, !dbg !11411

lor.lhs.false237:                                 ; preds = %for.body229
  %183 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11411
  %184 = load %struct.pre_expr_d*, %struct.pre_expr_d** %ae, align 8, !dbg !11411
  %call238 = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %184), !dbg !11411
  %call239 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %183, %union.tree_node* %call238), !dbg !11411
  %conv240 = zext i8 %call239 to i32, !dbg !11411
  %tobool241 = icmp ne i32 %conv240, 0, !dbg !11411
  br i1 %tobool241, label %cond.false243, label %cond.true242, !dbg !11411

cond.true242:                                     ; preds = %lor.lhs.false237
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3417, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11411
  br label %cond.end244, !dbg !11411

cond.false243:                                    ; preds = %lor.lhs.false237, %for.body229
  br label %cond.end244, !dbg !11411

cond.end244:                                      ; preds = %cond.false243, %cond.true242
  %cond245 = phi i32 [ 0, %cond.true242 ], [ 0, %cond.false243 ], !dbg !11411
  %185 = load %struct.pre_expr_d*, %struct.pre_expr_d** %ae, align 8, !dbg !11412
  %kind246 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %185, i32 0, i32 0, !dbg !11414
  %186 = load i32, i32* %kind246, align 8, !dbg !11414
  %cmp247 = icmp eq i32 %186, 3, !dbg !11415
  br i1 %cmp247, label %if.then249, label %if.else252, !dbg !11416

if.then249:                                       ; preds = %cond.end244
  %187 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11417
  %188 = load %struct.pre_expr_d*, %struct.pre_expr_d** %ae, align 8, !dbg !11418
  %u250 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %188, i32 0, i32 2, !dbg !11418
  %constant251 = bitcast %union.pre_expr_union_d* %u250 to %union.tree_node**, !dbg !11418
  %189 = load %union.tree_node*, %union.tree_node** %constant251, align 8, !dbg !11418
  %190 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11419
  call void @add_phi_arg(%union.gimple_statement_d* %187, %union.tree_node* %189, %struct.edge_def* %190, i32 0), !dbg !11420
  br label %if.end259, !dbg !11420

if.else252:                                       ; preds = %cond.end244
  %191 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11421
  %192 = load %struct.pre_expr_d**, %struct.pre_expr_d*** %avail.addr, align 8, !dbg !11422
  %193 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11422
  %src253 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %193, i32 0, i32 0, !dbg !11422
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %src253, align 8, !dbg !11422
  %index254 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %194, i32 0, i32 9, !dbg !11422
  %195 = load i32, i32* %index254, align 8, !dbg !11422
  %idxprom255 = sext i32 %195 to i64, !dbg !11422
  %arrayidx256 = getelementptr inbounds %struct.pre_expr_d*, %struct.pre_expr_d** %192, i64 %idxprom255, !dbg !11422
  %196 = load %struct.pre_expr_d*, %struct.pre_expr_d** %arrayidx256, align 8, !dbg !11422
  %u257 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %196, i32 0, i32 2, !dbg !11422
  %name258 = bitcast %union.pre_expr_union_d* %u257 to %union.tree_node**, !dbg !11422
  %197 = load %union.tree_node*, %union.tree_node** %name258, align 8, !dbg !11422
  %198 = load %struct.edge_def*, %struct.edge_def** %pred, align 8, !dbg !11423
  call void @add_phi_arg(%union.gimple_statement_d* %191, %union.tree_node* %197, %struct.edge_def* %198, i32 0), !dbg !11424
  br label %if.end259

if.end259:                                        ; preds = %if.else252, %if.then249
  br label %for.inc260, !dbg !11425

for.inc260:                                       ; preds = %if.end259
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11402
  br label %for.cond226, !dbg !11402, !llvm.loop !11426

for.end261:                                       ; preds = %for.cond226
  %199 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11428
  %call262 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %199), !dbg !11429
  %call263 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %call262), !dbg !11430
  store %struct.pre_expr_d* %call263, %struct.pre_expr_d** %newphi, align 8, !dbg !11431
  %200 = load i32, i32* %val, align 4, !dbg !11432
  %201 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newphi, align 8, !dbg !11433
  call void @add_to_value(i32 %200, %struct.pre_expr_d* %201), !dbg !11434
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11435
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %202, i32 0, i32 2, !dbg !11435
  %203 = load i8*, i8** %aux, align 8, !dbg !11435
  %204 = bitcast i8* %203 to %struct.bb_bitmap_sets*, !dbg !11435
  %phi_gen = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %204, i32 0, i32 1, !dbg !11435
  %205 = load %struct.bitmap_set*, %struct.bitmap_set** %phi_gen, align 8, !dbg !11435
  %206 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newphi, align 8, !dbg !11436
  call void @bitmap_insert_into_set(%struct.bitmap_set* %205, %struct.pre_expr_d* %206), !dbg !11437
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11438
  %aux264 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %207, i32 0, i32 2, !dbg !11438
  %208 = load i8*, i8** %aux264, align 8, !dbg !11438
  %209 = bitcast i8* %208 to %struct.bb_bitmap_sets*, !dbg !11438
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %209, i32 0, i32 3, !dbg !11438
  %210 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !11438
  %211 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newphi, align 8, !dbg !11439
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %210, %struct.pre_expr_d* %211), !dbg !11440
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11441
  %aux265 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %212, i32 0, i32 2, !dbg !11441
  %213 = load i8*, i8** %aux265, align 8, !dbg !11441
  %214 = bitcast i8* %213 to %struct.bb_bitmap_sets*, !dbg !11441
  %new_sets = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %214, i32 0, i32 6, !dbg !11441
  %215 = load %struct.bitmap_set*, %struct.bitmap_set** %new_sets, align 8, !dbg !11441
  %216 = load %struct.pre_expr_d*, %struct.pre_expr_d** %newphi, align 8, !dbg !11442
  call void @bitmap_insert_into_set(%struct.bitmap_set* %215, %struct.pre_expr_d* %216), !dbg !11443
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11444
  %tobool266 = icmp ne %struct._IO_FILE* %217, null, !dbg !11444
  br i1 %tobool266, label %land.lhs.true267, label %if.end274, !dbg !11446

land.lhs.true267:                                 ; preds = %for.end261
  %218 = load i32, i32* @dump_flags, align 4, !dbg !11447
  %and268 = and i32 %218, 8, !dbg !11448
  %tobool269 = icmp ne i32 %and268, 0, !dbg !11448
  br i1 %tobool269, label %if.then270, label %if.end274, !dbg !11449

if.then270:                                       ; preds = %land.lhs.true267
  %219 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11450
  %call271 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %219, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0)), !dbg !11452
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11453
  %221 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !11454
  call void @print_gimple_stmt(%struct._IO_FILE* %220, %union.gimple_statement_d* %221, i32 0, i32 0), !dbg !11455
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11456
  %223 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11457
  %index272 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %223, i32 0, i32 9, !dbg !11458
  %224 = load i32, i32* %index272, align 8, !dbg !11458
  %call273 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.54, i64 0, i64 0), i32 %224), !dbg !11459
  br label %if.end274, !dbg !11460

if.end274:                                        ; preds = %if.then270, %land.lhs.true267, %for.end261
  %225 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 3), align 4, !dbg !11461
  %inc = add nsw i32 %225, 1, !dbg !11461
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 3), align 4, !dbg !11461
  store i8 1, i8* %retval, align 1, !dbg !11462
  br label %return, !dbg !11462

return:                                           ; preds = %if.end274, %if.then184, %if.then178
  %226 = load i8, i8* %retval, align 1, !dbg !11463
  ret i8 %226, !dbg !11463
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @inhibit_phi_insertion(%struct.basic_block_def* %bb, %struct.pre_expr_d* %expr) #0 !dbg !11464 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %vr = alloca %struct.vn_reference_s*, align 8
  %ops = alloca %struct.VEC_vn_reference_op_s_heap*, align 8
  %op = alloca %struct.vn_reference_op_struct*, align 8
  %i = alloca i32, align 4
  %defbb = alloca %struct.basic_block_def*, align 8
  %iv = alloca %struct.affine_iv, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11467, metadata !DIExpression()), !dbg !11468
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !11469, metadata !DIExpression()), !dbg !11470
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %vr, metadata !11471, metadata !DIExpression()), !dbg !11472
  %0 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11473
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %0, i32 0, i32 2, !dbg !11473
  %reference = bitcast %union.pre_expr_union_d* %u to %struct.vn_reference_s**, !dbg !11473
  %1 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !11473
  store %struct.vn_reference_s* %1, %struct.vn_reference_s** %vr, align 8, !dbg !11472
  call void @llvm.dbg.declare(metadata %struct.VEC_vn_reference_op_s_heap** %ops, metadata !11474, metadata !DIExpression()), !dbg !11475
  %2 = load %struct.vn_reference_s*, %struct.vn_reference_s** %vr, align 8, !dbg !11476
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %2, i32 0, i32 5, !dbg !11477
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !11477
  store %struct.VEC_vn_reference_op_s_heap* %3, %struct.VEC_vn_reference_op_s_heap** %ops, align 8, !dbg !11475
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %op, metadata !11478, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11480, metadata !DIExpression()), !dbg !11481
  %4 = load i32, i32* @flag_tree_vectorize, align 4, !dbg !11482
  %tobool = icmp ne i32 %4, 0, !dbg !11482
  br i1 %tobool, label %if.end, label %if.then, !dbg !11484

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11485
  br label %return, !dbg !11485

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !11486
  br label %for.cond, !dbg !11488

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops, align 8, !dbg !11489
  %tobool1 = icmp ne %struct.VEC_vn_reference_op_s_heap* %5, null, !dbg !11489
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !11489

cond.true:                                        ; preds = %for.cond
  %6 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %ops, align 8, !dbg !11489
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %6, i32 0, i32 0, !dbg !11489
  br label %cond.end, !dbg !11489

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !11489

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11489
  %7 = load i32, i32* %i, align 4, !dbg !11489
  %call = call i32 @VEC_vn_reference_op_s_base_iterate(%struct.VEC_vn_reference_op_s_base* %cond, i32 %7, %struct.vn_reference_op_struct** %op), !dbg !11489
  %tobool2 = icmp ne i32 %call, 0, !dbg !11491
  br i1 %tobool2, label %for.body, label %for.end, !dbg !11491

for.body:                                         ; preds = %cond.end
  %8 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !11492
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %8, i32 0, i32 0, !dbg !11494
  %9 = load i32, i32* %opcode, align 8, !dbg !11494
  switch i32 %9, label %sw.default [
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 141, label %sw.bb6
  ], !dbg !11495

sw.bb:                                            ; preds = %for.body, %for.body
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !11496
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %10, i32 0, i32 2, !dbg !11496
  %11 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !11496
  %base3 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !11496
  %12 = bitcast %struct.tree_base* %base3 to i64*, !dbg !11496
  %bf.load = load i64, i64* %12, align 8, !dbg !11496
  %bf.clear = and i64 %bf.load, 65535, !dbg !11496
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11496
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !11499
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !11500

if.then4:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !11501

if.end5:                                          ; preds = %sw.bb
  br label %sw.bb6, !dbg !11502

sw.bb6:                                           ; preds = %for.body, %if.end5
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %defbb, metadata !11503, metadata !DIExpression()), !dbg !11505
  %13 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !11506
  %op07 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %13, i32 0, i32 2, !dbg !11506
  %14 = load %union.tree_node*, %union.tree_node** %op07, align 8, !dbg !11506
  %ssa_name = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !11506
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !11506
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !11506
  %call8 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %15), !dbg !11507
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %defbb, align 8, !dbg !11505
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !11508, metadata !DIExpression()), !dbg !11515
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %defbb, align 8, !dbg !11516
  %tobool9 = icmp ne %struct.basic_block_def* %16, null, !dbg !11516
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !11518

if.then10:                                        ; preds = %sw.bb6
  br label %sw.epilog, !dbg !11519

if.end11:                                         ; preds = %sw.bb6
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11520
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 3, !dbg !11522
  %18 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !11522
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %defbb, align 8, !dbg !11523
  %call12 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %18, %struct.basic_block_def* %19), !dbg !11524
  %tobool13 = icmp ne i8 %call12, 0, !dbg !11524
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !11525

if.then14:                                        ; preds = %if.end11
  br label %sw.epilog, !dbg !11526

if.end15:                                         ; preds = %if.end11
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11527
  %loop_father16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 3, !dbg !11529
  %21 = load %struct.loop*, %struct.loop** %loop_father16, align 8, !dbg !11529
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11530
  %loop_father17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 3, !dbg !11531
  %23 = load %struct.loop*, %struct.loop** %loop_father17, align 8, !dbg !11531
  %24 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %op, align 8, !dbg !11532
  %op018 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %24, i32 0, i32 2, !dbg !11533
  %25 = load %union.tree_node*, %union.tree_node** %op018, align 8, !dbg !11533
  %call19 = call zeroext i8 @simple_iv(%struct.loop* %21, %struct.loop* %23, %union.tree_node* %25, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !11534
  %tobool20 = icmp ne i8 %call19, 0, !dbg !11534
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !11535

if.then21:                                        ; preds = %if.end15
  store i8 1, i8* %retval, align 1, !dbg !11536
  br label %return, !dbg !11536

if.end22:                                         ; preds = %if.end15
  br label %sw.epilog, !dbg !11537

sw.default:                                       ; preds = %for.body
  br label %sw.epilog, !dbg !11538

sw.epilog:                                        ; preds = %sw.default, %if.end22, %if.then14, %if.then10, %if.then4
  br label %for.inc, !dbg !11539

for.inc:                                          ; preds = %sw.epilog
  %26 = load i32, i32* %i, align 4, !dbg !11540
  %inc = add i32 %26, 1, !dbg !11540
  store i32 %inc, i32* %i, align 4, !dbg !11540
  br label %for.cond, !dbg !11541, !llvm.loop !11542

for.end:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !11544
  br label %return, !dbg !11544

return:                                           ; preds = %for.end, %if.then21, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !11545
  ret i8 %27, !dbg !11545
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_expression_by_pieces(%struct.basic_block_def* %block, %struct.pre_expr_d* %expr, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %domstmt, %union.tree_node* %type) #0 !dbg !11546 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %domstmt.addr = alloca %union.gimple_statement_d*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %folded = alloca %union.tree_node*, align 8
  %forced_stmts = alloca %struct.gimple_seq_d*, align 8
  %value_id = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %exprtype = alloca %union.tree_node*, align 8
  %nameexpr = alloca %struct.pre_expr_d*, align 8
  %newstmt = alloca %union.gimple_statement_d*, align 8
  %ref = alloca %struct.vn_reference_s*, align 8
  %nary = alloca %struct.vn_nary_op_s*, align 8
  %op1 = alloca %struct.pre_expr_d*, align 8
  %op2 = alloca %struct.pre_expr_d*, align 8
  %genop1 = alloca %union.tree_node*, align 8
  %genop2 = alloca %union.tree_node*, align 8
  %op140 = alloca %struct.pre_expr_d*, align 8
  %genop144 = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %forcedname = alloca %union.tree_node*, align 8
  %nameexpr76 = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !11550, metadata !DIExpression()), !dbg !11551
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !11552, metadata !DIExpression()), !dbg !11553
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !11554, metadata !DIExpression()), !dbg !11555
  store %union.gimple_statement_d* %domstmt, %union.gimple_statement_d** %domstmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %domstmt.addr, metadata !11556, metadata !DIExpression()), !dbg !11557
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !11558, metadata !DIExpression()), !dbg !11559
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !11560, metadata !DIExpression()), !dbg !11561
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !11562, metadata !DIExpression()), !dbg !11563
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded, metadata !11564, metadata !DIExpression()), !dbg !11565
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %forced_stmts, metadata !11566, metadata !DIExpression()), !dbg !11567
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %forced_stmts, align 8, !dbg !11567
  call void @llvm.dbg.declare(metadata i32* %value_id, metadata !11568, metadata !DIExpression()), !dbg !11569
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11570, metadata !DIExpression()), !dbg !11571
  call void @llvm.dbg.declare(metadata %union.tree_node** %exprtype, metadata !11572, metadata !DIExpression()), !dbg !11573
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11574
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !11574
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11574

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !11575
  br label %cond.end, !dbg !11574

cond.false:                                       ; preds = %entry
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11576
  %call = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %2), !dbg !11577
  br label %cond.end, !dbg !11574

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %1, %cond.true ], [ %call, %cond.false ], !dbg !11574
  store %union.tree_node* %cond, %union.tree_node** %exprtype, align 8, !dbg !11573
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %nameexpr, metadata !11578, metadata !DIExpression()), !dbg !11579
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %newstmt, metadata !11580, metadata !DIExpression()), !dbg !11581
  %3 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11582
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %3, i32 0, i32 0, !dbg !11583
  %4 = load i32, i32* %kind, align 8, !dbg !11583
  switch i32 %4, label %sw.default59 [
    i32 0, label %sw.bb
    i32 3, label %sw.bb2
    i32 2, label %sw.bb4
    i32 1, label %sw.bb7
  ], !dbg !11584

sw.bb:                                            ; preds = %cond.end
  %5 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11585
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %5, i32 0, i32 2, !dbg !11585
  %name1 = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !11585
  %6 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !11585
  store %union.tree_node* %6, %union.tree_node** %folded, align 8, !dbg !11587
  br label %sw.epilog60, !dbg !11588

sw.bb2:                                           ; preds = %cond.end
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11589
  %u3 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 2, !dbg !11589
  %constant = bitcast %union.pre_expr_union_d* %u3 to %union.tree_node**, !dbg !11589
  %8 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !11589
  store %union.tree_node* %8, %union.tree_node** %folded, align 8, !dbg !11590
  br label %sw.epilog60, !dbg !11591

sw.bb4:                                           ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref, metadata !11592, metadata !DIExpression()), !dbg !11594
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11595
  %u5 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %9, i32 0, i32 2, !dbg !11595
  %reference = bitcast %union.pre_expr_union_d* %u5 to %struct.vn_reference_s**, !dbg !11595
  %10 = load %struct.vn_reference_s*, %struct.vn_reference_s** %reference, align 8, !dbg !11595
  store %struct.vn_reference_s* %10, %struct.vn_reference_s** %ref, align 8, !dbg !11594
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11596
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref, align 8, !dbg !11597
  %13 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11598
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11599
  %call6 = call %union.tree_node* @create_component_ref_by_pieces(%struct.basic_block_def* %11, %struct.vn_reference_s* %12, %struct.gimple_seq_d** %13, %union.gimple_statement_d* %14), !dbg !11600
  store %union.tree_node* %call6, %union.tree_node** %folded, align 8, !dbg !11601
  br label %sw.epilog60, !dbg !11602

sw.bb7:                                           ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.vn_nary_op_s** %nary, metadata !11603, metadata !DIExpression()), !dbg !11605
  %15 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11606
  %u8 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %15, i32 0, i32 2, !dbg !11606
  %nary9 = bitcast %union.pre_expr_union_d* %u8 to %struct.vn_nary_op_s**, !dbg !11606
  %16 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary9, align 8, !dbg !11606
  store %struct.vn_nary_op_s* %16, %struct.vn_nary_op_s** %nary, align 8, !dbg !11605
  %17 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11607
  %length = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %17, i32 0, i32 1, !dbg !11608
  %bf.load = load i32, i32* %length, align 4, !dbg !11608
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11608
  switch i32 %bf.lshr, label %sw.default [
    i32 2, label %sw.bb10
    i32 1, label %sw.bb39
  ], !dbg !11609

sw.bb10:                                          ; preds = %sw.bb7
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op1, metadata !11610, metadata !DIExpression()), !dbg !11613
  %18 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11614
  %op = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %18, i32 0, i32 5, !dbg !11615
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !11614
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11614
  %call11 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %19), !dbg !11616
  store %struct.pre_expr_d* %call11, %struct.pre_expr_d** %op1, align 8, !dbg !11613
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op2, metadata !11617, metadata !DIExpression()), !dbg !11618
  %20 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11619
  %op12 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %20, i32 0, i32 5, !dbg !11620
  %arrayidx13 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op12, i64 0, i64 1, !dbg !11619
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !11619
  %call14 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %21), !dbg !11621
  store %struct.pre_expr_d* %call14, %struct.pre_expr_d** %op2, align 8, !dbg !11618
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop1, metadata !11622, metadata !DIExpression()), !dbg !11623
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11624
  %23 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op1, align 8, !dbg !11625
  %24 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11626
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11627
  %call15 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %22, %struct.pre_expr_d* %23, %struct.gimple_seq_d** %24, %union.gimple_statement_d* %25), !dbg !11628
  store %union.tree_node* %call15, %union.tree_node** %genop1, align 8, !dbg !11623
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop2, metadata !11629, metadata !DIExpression()), !dbg !11630
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11631
  %27 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op2, align 8, !dbg !11632
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11633
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11634
  %call16 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %26, %struct.pre_expr_d* %27, %struct.gimple_seq_d** %28, %union.gimple_statement_d* %29), !dbg !11635
  store %union.tree_node* %call16, %union.tree_node** %genop2, align 8, !dbg !11630
  %30 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !11636
  %tobool17 = icmp ne %union.tree_node* %30, null, !dbg !11636
  br i1 %tobool17, label %lor.lhs.false, label %if.then, !dbg !11638

lor.lhs.false:                                    ; preds = %sw.bb10
  %31 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !11639
  %tobool18 = icmp ne %union.tree_node* %31, null, !dbg !11639
  br i1 %tobool18, label %if.end, label %if.then, !dbg !11640

if.then:                                          ; preds = %lor.lhs.false, %sw.bb10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11641
  br label %return, !dbg !11641

if.end:                                           ; preds = %lor.lhs.false
  %32 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11642
  %opcode = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %32, i32 0, i32 1, !dbg !11644
  %bf.load19 = load i32, i32* %opcode, align 4, !dbg !11644
  %bf.clear = and i32 %bf.load19, 65535, !dbg !11644
  %cmp = icmp eq i32 %bf.clear, 66, !dbg !11645
  br i1 %cmp, label %if.then20, label %if.else, !dbg !11646

if.then20:                                        ; preds = %if.end
  %33 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11647
  %type21 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %33, i32 0, i32 4, !dbg !11647
  %34 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !11647
  %35 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !11647
  %call22 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %34, %union.tree_node* %35), !dbg !11647
  store %union.tree_node* %call22, %union.tree_node** %genop1, align 8, !dbg !11649
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !11650
  %37 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !11650
  %call23 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %36, %union.tree_node* %37), !dbg !11650
  store %union.tree_node* %call23, %union.tree_node** %genop2, align 8, !dbg !11651
  br label %if.end33, !dbg !11652

if.else:                                          ; preds = %if.end
  %38 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11653
  %op24 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %38, i32 0, i32 5, !dbg !11653
  %arrayidx25 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op24, i64 0, i64 0, !dbg !11653
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !11653
  %common = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !11653
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11653
  %40 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !11653
  %41 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !11653
  %call27 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %40, %union.tree_node* %41), !dbg !11653
  store %union.tree_node* %call27, %union.tree_node** %genop1, align 8, !dbg !11655
  %42 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11656
  %op28 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %42, i32 0, i32 5, !dbg !11656
  %arrayidx29 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op28, i64 0, i64 1, !dbg !11656
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !11656
  %common30 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !11656
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !11656
  %44 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !11656
  %45 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !11656
  %call32 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %44, %union.tree_node* %45), !dbg !11656
  store %union.tree_node* %call32, %union.tree_node** %genop2, align 8, !dbg !11657
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then20
  %46 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11658
  %opcode34 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %46, i32 0, i32 1, !dbg !11658
  %bf.load35 = load i32, i32* %opcode34, align 4, !dbg !11658
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !11658
  %47 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11658
  %type37 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %47, i32 0, i32 4, !dbg !11658
  %48 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !11658
  %49 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !11658
  %50 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !11658
  %call38 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %bf.clear36, %union.tree_node* %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !11658
  store %union.tree_node* %call38, %union.tree_node** %folded, align 8, !dbg !11659
  br label %sw.epilog, !dbg !11660

sw.bb39:                                          ; preds = %sw.bb7
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op140, metadata !11661, metadata !DIExpression()), !dbg !11663
  %51 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11664
  %op41 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %51, i32 0, i32 5, !dbg !11665
  %arrayidx42 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op41, i64 0, i64 0, !dbg !11664
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx42, align 8, !dbg !11664
  %call43 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %52), !dbg !11666
  store %struct.pre_expr_d* %call43, %struct.pre_expr_d** %op140, align 8, !dbg !11663
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop144, metadata !11667, metadata !DIExpression()), !dbg !11668
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11669
  %54 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op140, align 8, !dbg !11670
  %55 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11671
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11672
  %call45 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %53, %struct.pre_expr_d* %54, %struct.gimple_seq_d** %55, %union.gimple_statement_d* %56), !dbg !11673
  store %union.tree_node* %call45, %union.tree_node** %genop144, align 8, !dbg !11668
  %57 = load %union.tree_node*, %union.tree_node** %genop144, align 8, !dbg !11674
  %tobool46 = icmp ne %union.tree_node* %57, null, !dbg !11674
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !11676

if.then47:                                        ; preds = %sw.bb39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11677
  br label %return, !dbg !11677

if.end48:                                         ; preds = %sw.bb39
  %58 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11678
  %op49 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %58, i32 0, i32 5, !dbg !11678
  %arrayidx50 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %op49, i64 0, i64 0, !dbg !11678
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !11678
  %common51 = bitcast %union.tree_node* %59 to %struct.tree_common*, !dbg !11678
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !11678
  %60 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !11678
  %61 = load %union.tree_node*, %union.tree_node** %genop144, align 8, !dbg !11678
  %call53 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %60, %union.tree_node* %61), !dbg !11678
  store %union.tree_node* %call53, %union.tree_node** %genop144, align 8, !dbg !11679
  %62 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11680
  %opcode54 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %62, i32 0, i32 1, !dbg !11680
  %bf.load55 = load i32, i32* %opcode54, align 4, !dbg !11680
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !11680
  %63 = load %struct.vn_nary_op_s*, %struct.vn_nary_op_s** %nary, align 8, !dbg !11680
  %type57 = getelementptr inbounds %struct.vn_nary_op_s, %struct.vn_nary_op_s* %63, i32 0, i32 4, !dbg !11680
  %64 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !11680
  %65 = load %union.tree_node*, %union.tree_node** %genop144, align 8, !dbg !11680
  %call58 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %bf.clear56, %union.tree_node* %64, %union.tree_node* %65), !dbg !11680
  store %union.tree_node* %call58, %union.tree_node** %folded, align 8, !dbg !11681
  br label %sw.epilog, !dbg !11682

sw.default:                                       ; preds = %sw.bb7
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11683
  br label %return, !dbg !11683

sw.epilog:                                        ; preds = %if.end48, %if.end33
  br label %sw.epilog60, !dbg !11684

sw.default59:                                     ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11685
  br label %return, !dbg !11685

sw.epilog60:                                      ; preds = %sw.epilog, %sw.bb4, %sw.bb2, %sw.bb
  %66 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11686
  %67 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11688
  %common61 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !11688
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !11688
  %68 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !11688
  %call63 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %66, %union.tree_node* %68), !dbg !11689
  %tobool64 = icmp ne i8 %call63, 0, !dbg !11689
  br i1 %tobool64, label %if.end67, label %if.then65, !dbg !11690

if.then65:                                        ; preds = %sw.epilog60
  %69 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11691
  %70 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11691
  %call66 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %69, %union.tree_node* %70), !dbg !11691
  store %union.tree_node* %call66, %union.tree_node** %folded, align 8, !dbg !11692
  br label %if.end67, !dbg !11693

if.end67:                                         ; preds = %if.then65, %sw.epilog60
  %71 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11694
  %call68 = call %union.tree_node* @unshare_expr(%union.tree_node* %71), !dbg !11695
  %call69 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call68, %struct.gimple_seq_d** %forced_stmts, i8 zeroext 0, %union.tree_node* null), !dbg !11696
  store %union.tree_node* %call69, %union.tree_node** %folded, align 8, !dbg !11697
  %72 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %forced_stmts, align 8, !dbg !11698
  %tobool70 = icmp ne %struct.gimple_seq_d* %72, null, !dbg !11698
  br i1 %tobool70, label %if.then71, label %if.end94, !dbg !11700

if.then71:                                        ; preds = %if.end67
  %73 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %forced_stmts, align 8, !dbg !11701
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %73), !dbg !11703
  %74 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11703
  %75 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 24, i1 false), !dbg !11703
  br label %for.cond, !dbg !11704

for.cond:                                         ; preds = %for.inc, %if.then71
  %call72 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11705
  %tobool73 = icmp ne i8 %call72, 0, !dbg !11708
  %lnot = xor i1 %tobool73, true, !dbg !11708
  br i1 %lnot, label %for.body, label %for.end, !dbg !11709

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11710, metadata !DIExpression()), !dbg !11712
  %call74 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11713
  store %union.gimple_statement_d* %call74, %union.gimple_statement_d** %stmt, align 8, !dbg !11712
  call void @llvm.dbg.declare(metadata %union.tree_node** %forcedname, metadata !11714, metadata !DIExpression()), !dbg !11715
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11716
  %call75 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %76), !dbg !11717
  store %union.tree_node* %call75, %union.tree_node** %forcedname, align 8, !dbg !11715
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %nameexpr76, metadata !11718, metadata !DIExpression()), !dbg !11719
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11720
  %call77 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @inserted_exprs, %union.gimple_statement_d* %77), !dbg !11720
  %78 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11721
  %base = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !11721
  %79 = bitcast %struct.tree_base* %base to i64*, !dbg !11721
  %bf.load78 = load i64, i64* %79, align 8, !dbg !11721
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !11721
  %bf.cast = trunc i64 %bf.clear79 to i32, !dbg !11721
  %cmp80 = icmp eq i32 %bf.cast, 141, !dbg !11723
  br i1 %cmp80, label %if.then81, label %if.end93, !dbg !11724

if.then81:                                        ; preds = %for.body
  %80 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11725
  %81 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11727
  %call82 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %81), !dbg !11728
  %valnum = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call82, i32 0, i32 0, !dbg !11729
  store %union.tree_node* %80, %union.tree_node** %valnum, align 8, !dbg !11730
  %call83 = call i32 @get_next_value_id(), !dbg !11731
  %82 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11732
  %call84 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %82), !dbg !11733
  %value_id85 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call84, i32 0, i32 2, !dbg !11734
  store i32 %call83, i32* %value_id85, align 8, !dbg !11735
  %83 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11736
  %call86 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %83), !dbg !11737
  store %struct.pre_expr_d* %call86, %struct.pre_expr_d** %nameexpr76, align 8, !dbg !11738
  %84 = load %union.tree_node*, %union.tree_node** %forcedname, align 8, !dbg !11739
  %call87 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %84), !dbg !11740
  %value_id88 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call87, i32 0, i32 2, !dbg !11741
  %85 = load i32, i32* %value_id88, align 8, !dbg !11741
  %86 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr76, align 8, !dbg !11742
  call void @add_to_value(i32 %85, %struct.pre_expr_d* %86), !dbg !11743
  %87 = load i8, i8* @in_fre, align 1, !dbg !11744
  %tobool89 = icmp ne i8 %87, 0, !dbg !11744
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !11746

if.then90:                                        ; preds = %if.then81
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11747
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 2, !dbg !11747
  %89 = load i8*, i8** %aux, align 8, !dbg !11747
  %90 = bitcast i8* %89 to %struct.bb_bitmap_sets*, !dbg !11747
  %new_sets = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %90, i32 0, i32 6, !dbg !11747
  %91 = load %struct.bitmap_set*, %struct.bitmap_set** %new_sets, align 8, !dbg !11747
  %92 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr76, align 8, !dbg !11748
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %91, %struct.pre_expr_d* %92), !dbg !11749
  br label %if.end91, !dbg !11749

if.end91:                                         ; preds = %if.then90, %if.then81
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11750
  %aux92 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 2, !dbg !11750
  %94 = load i8*, i8** %aux92, align 8, !dbg !11750
  %95 = bitcast i8* %94 to %struct.bb_bitmap_sets*, !dbg !11750
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %95, i32 0, i32 3, !dbg !11750
  %96 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !11750
  %97 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr76, align 8, !dbg !11751
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %96, %struct.pre_expr_d* %97), !dbg !11752
  br label %if.end93, !dbg !11753

if.end93:                                         ; preds = %if.end91, %for.body
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11754
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %98), !dbg !11755
  br label %for.inc, !dbg !11756

for.inc:                                          ; preds = %if.end93
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !11757
  br label %for.cond, !dbg !11758, !llvm.loop !11759

for.end:                                          ; preds = %for.cond
  %99 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11761
  %100 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %forced_stmts, align 8, !dbg !11762
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %99, %struct.gimple_seq_d* %100), !dbg !11763
  br label %if.end94, !dbg !11764

if.end94:                                         ; preds = %for.end, %if.end67
  %101 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !11765
  %tobool95 = icmp ne %union.tree_node* %101, null, !dbg !11765
  br i1 %tobool95, label %lor.lhs.false96, label %if.then100, !dbg !11767

lor.lhs.false96:                                  ; preds = %if.end94
  %102 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11768
  %103 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !11769
  %common97 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !11769
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !11769
  %104 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !11769
  %cmp99 = icmp ne %union.tree_node* %102, %104, !dbg !11770
  br i1 %cmp99, label %if.then100, label %if.end103, !dbg !11771

if.then100:                                       ; preds = %lor.lhs.false96, %if.end94
  %105 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11772
  %call101 = call %union.tree_node* @create_tmp_var(%union.tree_node* %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0)), !dbg !11774
  store %union.tree_node* %call101, %union.tree_node** @pretemp, align 8, !dbg !11775
  %106 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !11776
  %call102 = call %struct.var_ann_d* @get_var_ann(%union.tree_node* %106), !dbg !11777
  br label %if.end103, !dbg !11778

if.end103:                                        ; preds = %if.then100, %lor.lhs.false96
  %107 = load %union.tree_node*, %union.tree_node** @pretemp, align 8, !dbg !11779
  store %union.tree_node* %107, %union.tree_node** %temp, align 8, !dbg !11780
  %108 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11781
  %call104 = call zeroext i8 @add_referenced_var(%union.tree_node* %108), !dbg !11782
  %109 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11783
  %base105 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !11783
  %110 = bitcast %struct.tree_base* %base105 to i64*, !dbg !11783
  %bf.load106 = load i64, i64* %110, align 8, !dbg !11783
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !11783
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !11783
  %cmp109 = icmp eq i32 %bf.cast108, 13, !dbg !11785
  br i1 %cmp109, label %if.then116, label %lor.lhs.false110, !dbg !11786

lor.lhs.false110:                                 ; preds = %if.end103
  %111 = load %union.tree_node*, %union.tree_node** %exprtype, align 8, !dbg !11787
  %base111 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !11787
  %112 = bitcast %struct.tree_base* %base111 to i64*, !dbg !11787
  %bf.load112 = load i64, i64* %112, align 8, !dbg !11787
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !11787
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !11787
  %cmp115 = icmp eq i32 %bf.cast114, 14, !dbg !11788
  br i1 %cmp115, label %if.then116, label %if.end119, !dbg !11789

if.then116:                                       ; preds = %lor.lhs.false110, %if.end103
  %113 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11790
  %decl_common = bitcast %union.tree_node* %113 to %struct.tree_decl_common*, !dbg !11790
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11790
  %114 = bitcast i40* %gimple_reg_flag to i64*, !dbg !11790
  %bf.load117 = load i64, i64* %114, align 8, !dbg !11791
  %bf.clear118 = and i64 %bf.load117, -134217729, !dbg !11791
  %bf.set = or i64 %bf.clear118, 134217728, !dbg !11791
  store i64 %bf.set, i64* %114, align 8, !dbg !11791
  br label %if.end119, !dbg !11790

if.end119:                                        ; preds = %if.then116, %lor.lhs.false110
  %115 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11792
  %116 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !11792
  %call120 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %115, %union.tree_node* %116), !dbg !11792
  store %union.gimple_statement_d* %call120, %union.gimple_statement_d** %newstmt, align 8, !dbg !11793
  %117 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !11794
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11795
  %call121 = call %union.tree_node* @make_ssa_name(%union.tree_node* %117, %union.gimple_statement_d* %118), !dbg !11796
  store %union.tree_node* %call121, %union.tree_node** %name, align 8, !dbg !11797
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11798
  %120 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11799
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %119, %union.tree_node* %120), !dbg !11800
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11801
  call void @gimple_set_plf(%union.gimple_statement_d* %121, i32 1, i8 zeroext 0), !dbg !11802
  %122 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11803
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11804
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %122, %union.gimple_statement_d* %123), !dbg !11805
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11806
  %call122 = call %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** @inserted_exprs, %union.gimple_statement_d* %124), !dbg !11806
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11807
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %125), !dbg !11808
  %126 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11809
  %127 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11810
  %call123 = call %struct.vn_ssa_aux* @VN_INFO_GET(%union.tree_node* %127), !dbg !11811
  %valnum124 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call123, i32 0, i32 0, !dbg !11812
  store %union.tree_node* %126, %union.tree_node** %valnum124, align 8, !dbg !11813
  %128 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11814
  %call125 = call i32 @get_expr_value_id(%struct.pre_expr_d* %128), !dbg !11815
  store i32 %call125, i32* %value_id, align 4, !dbg !11816
  %129 = load i32, i32* %value_id, align 4, !dbg !11817
  %130 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11818
  %call126 = call %struct.vn_ssa_aux* @VN_INFO(%union.tree_node* %130), !dbg !11819
  %value_id127 = getelementptr inbounds %struct.vn_ssa_aux, %struct.vn_ssa_aux* %call126, i32 0, i32 2, !dbg !11820
  store i32 %129, i32* %value_id127, align 8, !dbg !11821
  %131 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11822
  %call128 = call %struct.pre_expr_d* @get_or_alloc_expr_for_name(%union.tree_node* %131), !dbg !11823
  store %struct.pre_expr_d* %call128, %struct.pre_expr_d** %nameexpr, align 8, !dbg !11824
  %132 = load i32, i32* %value_id, align 4, !dbg !11825
  %133 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr, align 8, !dbg !11826
  call void @add_to_value(i32 %132, %struct.pre_expr_d* %133), !dbg !11827
  %134 = load i8, i8* @in_fre, align 1, !dbg !11828
  %tobool129 = icmp ne i8 %134, 0, !dbg !11828
  br i1 %tobool129, label %if.end133, label %if.then130, !dbg !11830

if.then130:                                       ; preds = %if.end119
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11831
  %aux131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %135, i32 0, i32 2, !dbg !11831
  %136 = load i8*, i8** %aux131, align 8, !dbg !11831
  %137 = bitcast i8* %136 to %struct.bb_bitmap_sets*, !dbg !11831
  %new_sets132 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %137, i32 0, i32 6, !dbg !11831
  %138 = load %struct.bitmap_set*, %struct.bitmap_set** %new_sets132, align 8, !dbg !11831
  %139 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr, align 8, !dbg !11832
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %138, %struct.pre_expr_d* %139), !dbg !11833
  br label %if.end133, !dbg !11833

if.end133:                                        ; preds = %if.then130, %if.end119
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11834
  %aux134 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 2, !dbg !11834
  %141 = load i8*, i8** %aux134, align 8, !dbg !11834
  %142 = bitcast i8* %141 to %struct.bb_bitmap_sets*, !dbg !11834
  %avail_out135 = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %142, i32 0, i32 3, !dbg !11834
  %143 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out135, align 8, !dbg !11834
  %144 = load %struct.pre_expr_d*, %struct.pre_expr_d** %nameexpr, align 8, !dbg !11835
  call void @bitmap_value_replace_in_set(%struct.bitmap_set* %143, %struct.pre_expr_d* %144), !dbg !11836
  %145 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 1), align 4, !dbg !11837
  %inc = add nsw i32 %145, 1, !dbg !11837
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @pre_stats, i32 0, i32 1), align 4, !dbg !11837
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11838
  %tobool136 = icmp ne %struct._IO_FILE* %146, null, !dbg !11838
  br i1 %tobool136, label %land.lhs.true, label %if.end141, !dbg !11840

land.lhs.true:                                    ; preds = %if.end133
  %147 = load i32, i32* @dump_flags, align 4, !dbg !11841
  %and = and i32 %147, 8, !dbg !11842
  %tobool137 = icmp ne i32 %and, 0, !dbg !11842
  br i1 %tobool137, label %if.then138, label %if.end141, !dbg !11843

if.then138:                                       ; preds = %land.lhs.true
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11844
  %call139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i64 0, i64 0)), !dbg !11846
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11847
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newstmt, align 8, !dbg !11848
  call void @print_gimple_stmt(%struct._IO_FILE* %149, %union.gimple_statement_d* %150, i32 0, i32 0), !dbg !11849
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11850
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11851
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %152, i32 0, i32 9, !dbg !11852
  %153 = load i32, i32* %index, align 8, !dbg !11852
  %call140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.56, i64 0, i64 0), i32 %153), !dbg !11853
  br label %if.end141, !dbg !11854

if.end141:                                        ; preds = %if.then138, %land.lhs.true, %if.end133
  %154 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11855
  store %union.tree_node* %154, %union.tree_node** %retval, align 8, !dbg !11856
  br label %return, !dbg !11856

return:                                           ; preds = %if.end141, %sw.default59, %sw.default, %if.then47, %if.then
  %155 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11857
  ret %union.tree_node* %155, !dbg !11857
}

declare dso_local void @gsi_insert_seq_on_edge(%struct.edge_def*, %struct.gimple_seq_d*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !11858 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !11861, metadata !DIExpression()), !dbg !11862
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !11863, metadata !DIExpression()), !dbg !11864
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !11865
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !11866
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !11867
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !11868
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !11869
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !11870
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !11871
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !11872
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !11872
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !11873
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !11874

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !11875
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !11875
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !11876
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11876
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !11877
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !11878

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !11879
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !11879
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !11880
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !11880
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !11881
  br label %cond.end, !dbg !11878

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !11878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !11878
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !11882
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !11883
  ret void, !dbg !11884
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_component_ref_by_pieces(%struct.basic_block_def* %block, %struct.vn_reference_s* %ref, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %domstmt) #0 !dbg !11885 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %ref.addr = alloca %struct.vn_reference_s*, align 8
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %domstmt.addr = alloca %union.gimple_statement_d*, align 8
  %op = alloca i32, align 4
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !11888, metadata !DIExpression()), !dbg !11889
  store %struct.vn_reference_s* %ref, %struct.vn_reference_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref.addr, metadata !11890, metadata !DIExpression()), !dbg !11891
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !11892, metadata !DIExpression()), !dbg !11893
  store %union.gimple_statement_d* %domstmt, %union.gimple_statement_d** %domstmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %domstmt.addr, metadata !11894, metadata !DIExpression()), !dbg !11895
  call void @llvm.dbg.declare(metadata i32* %op, metadata !11896, metadata !DIExpression()), !dbg !11897
  store i32 0, i32* %op, align 4, !dbg !11897
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11898
  %1 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !11899
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11900
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11901
  %call = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %0, %struct.vn_reference_s* %1, i32* %op, %struct.gimple_seq_d** %2, %union.gimple_statement_d* %3), !dbg !11902
  ret %union.tree_node* %call, !dbg !11903
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %block, %struct.pre_expr_d* %expr, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %domstmt) #0 !dbg !11904 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %expr.addr = alloca %struct.pre_expr_d*, align 8
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %domstmt.addr = alloca %union.gimple_statement_d*, align 8
  %leader = alloca %struct.pre_expr_d*, align 8
  %genop = alloca %union.tree_node*, align 8
  %exprset = alloca %struct.bitmap_set*, align 8
  %lookfor = alloca i32, align 4
  %handled = alloca i8, align 1
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %temp = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !11907, metadata !DIExpression()), !dbg !11908
  store %struct.pre_expr_d* %expr, %struct.pre_expr_d** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %expr.addr, metadata !11909, metadata !DIExpression()), !dbg !11910
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !11911, metadata !DIExpression()), !dbg !11912
  store %union.gimple_statement_d* %domstmt, %union.gimple_statement_d** %domstmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %domstmt.addr, metadata !11913, metadata !DIExpression()), !dbg !11914
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %leader, metadata !11915, metadata !DIExpression()), !dbg !11916
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11917
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !11917
  %1 = load i8*, i8** %aux, align 8, !dbg !11917
  %2 = bitcast i8* %1 to %struct.bb_bitmap_sets*, !dbg !11917
  %avail_out = getelementptr inbounds %struct.bb_bitmap_sets, %struct.bb_bitmap_sets* %2, i32 0, i32 3, !dbg !11917
  %3 = load %struct.bitmap_set*, %struct.bitmap_set** %avail_out, align 8, !dbg !11917
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11918
  %call = call i32 @get_expr_value_id(%struct.pre_expr_d* %4), !dbg !11919
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11920
  %call1 = call %struct.pre_expr_d* @bitmap_find_leader(%struct.bitmap_set* %3, i32 %call, %union.gimple_statement_d* %5), !dbg !11921
  store %struct.pre_expr_d* %call1, %struct.pre_expr_d** %leader, align 8, !dbg !11916
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop, metadata !11922, metadata !DIExpression()), !dbg !11923
  store %union.tree_node* null, %union.tree_node** %genop, align 8, !dbg !11923
  %6 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !11924
  %tobool = icmp ne %struct.pre_expr_d* %6, null, !dbg !11924
  br i1 %tobool, label %if.then, label %if.end8, !dbg !11926

if.then:                                          ; preds = %entry
  %7 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !11927
  %kind = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %7, i32 0, i32 0, !dbg !11930
  %8 = load i32, i32* %kind, align 8, !dbg !11930
  %cmp = icmp eq i32 %8, 0, !dbg !11931
  br i1 %cmp, label %if.then2, label %if.else, !dbg !11932

if.then2:                                         ; preds = %if.then
  %9 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !11933
  %u = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %9, i32 0, i32 2, !dbg !11933
  %name = bitcast %union.pre_expr_union_d* %u to %union.tree_node**, !dbg !11933
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11933
  store %union.tree_node* %10, %union.tree_node** %genop, align 8, !dbg !11934
  br label %if.end7, !dbg !11935

if.else:                                          ; preds = %if.then
  %11 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !11936
  %kind3 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %11, i32 0, i32 0, !dbg !11938
  %12 = load i32, i32* %kind3, align 8, !dbg !11938
  %cmp4 = icmp eq i32 %12, 3, !dbg !11939
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !11940

if.then5:                                         ; preds = %if.else
  %13 = load %struct.pre_expr_d*, %struct.pre_expr_d** %leader, align 8, !dbg !11941
  %u6 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %13, i32 0, i32 2, !dbg !11941
  %constant = bitcast %union.pre_expr_union_d* %u6 to %union.tree_node**, !dbg !11941
  %14 = load %union.tree_node*, %union.tree_node** %constant, align 8, !dbg !11941
  store %union.tree_node* %14, %union.tree_node** %genop, align 8, !dbg !11942
  br label %if.end, !dbg !11943

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8, !dbg !11944

if.end8:                                          ; preds = %if.end7, %entry
  %15 = load %union.tree_node*, %union.tree_node** %genop, align 8, !dbg !11945
  %cmp9 = icmp eq %union.tree_node* %15, null, !dbg !11947
  br i1 %cmp9, label %land.lhs.true, label %if.end34, !dbg !11948

land.lhs.true:                                    ; preds = %if.end8
  %16 = load i8, i8* @in_fre, align 1, !dbg !11949
  %tobool10 = icmp ne i8 %16, 0, !dbg !11949
  br i1 %tobool10, label %if.end34, label %if.then11, !dbg !11950

if.then11:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.bitmap_set** %exprset, metadata !11951, metadata !DIExpression()), !dbg !11953
  call void @llvm.dbg.declare(metadata i32* %lookfor, metadata !11954, metadata !DIExpression()), !dbg !11955
  %17 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11956
  %call12 = call i32 @get_expr_value_id(%struct.pre_expr_d* %17), !dbg !11957
  store i32 %call12, i32* %lookfor, align 4, !dbg !11955
  call void @llvm.dbg.declare(metadata i8* %handled, metadata !11958, metadata !DIExpression()), !dbg !11959
  store i8 0, i8* %handled, align 1, !dbg !11959
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !11960, metadata !DIExpression()), !dbg !11961
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11962, metadata !DIExpression()), !dbg !11963
  %18 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !11964
  %tobool13 = icmp ne %struct.VEC_bitmap_set_t_heap* %18, null, !dbg !11964
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !11964

cond.true:                                        ; preds = %if.then11
  %19 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** @value_expressions, align 8, !dbg !11964
  %base = getelementptr inbounds %struct.VEC_bitmap_set_t_heap, %struct.VEC_bitmap_set_t_heap* %19, i32 0, i32 0, !dbg !11964
  br label %cond.end, !dbg !11964

cond.false:                                       ; preds = %if.then11
  br label %cond.end, !dbg !11964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_bitmap_set_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11964
  %20 = load i32, i32* %lookfor, align 4, !dbg !11964
  %call14 = call %struct.bitmap_set* @VEC_bitmap_set_t_base_index(%struct.VEC_bitmap_set_t_base* %cond, i32 %20), !dbg !11964
  store %struct.bitmap_set* %call14, %struct.bitmap_set** %exprset, align 8, !dbg !11965
  %21 = load %struct.bitmap_set*, %struct.bitmap_set** %exprset, align 8, !dbg !11966
  %expressions = getelementptr inbounds %struct.bitmap_set, %struct.bitmap_set* %21, i32 0, i32 0, !dbg !11966
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %expressions, align 8, !dbg !11966
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %22, i32 0, i32* %i), !dbg !11966
  br label %for.cond, !dbg !11966

for.cond:                                         ; preds = %for.inc, %cond.end
  %call15 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11968
  %tobool16 = icmp ne i8 %call15, 0, !dbg !11966
  br i1 %tobool16, label %for.body, label %for.end, !dbg !11966

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %temp, metadata !11970, metadata !DIExpression()), !dbg !11972
  %23 = load i32, i32* %i, align 4, !dbg !11973
  %call17 = call %struct.pre_expr_d* @expression_for_id(i32 %23), !dbg !11974
  store %struct.pre_expr_d* %call17, %struct.pre_expr_d** %temp, align 8, !dbg !11972
  %24 = load %struct.pre_expr_d*, %struct.pre_expr_d** %temp, align 8, !dbg !11975
  %kind18 = getelementptr inbounds %struct.pre_expr_d, %struct.pre_expr_d* %24, i32 0, i32 0, !dbg !11977
  %25 = load i32, i32* %kind18, align 8, !dbg !11977
  %cmp19 = icmp ne i32 %25, 0, !dbg !11978
  br i1 %cmp19, label %if.then20, label %if.end23, !dbg !11979

if.then20:                                        ; preds = %for.body
  store i8 1, i8* %handled, align 1, !dbg !11980
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !11982
  %27 = load %struct.pre_expr_d*, %struct.pre_expr_d** %temp, align 8, !dbg !11983
  %28 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !11984
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11985
  %30 = load %struct.pre_expr_d*, %struct.pre_expr_d** %expr.addr, align 8, !dbg !11986
  %call21 = call %union.tree_node* @get_expr_type(%struct.pre_expr_d* %30), !dbg !11987
  %call22 = call %union.tree_node* @create_expression_by_pieces(%struct.basic_block_def* %26, %struct.pre_expr_d* %27, %struct.gimple_seq_d** %28, %union.gimple_statement_d* %29, %union.tree_node* %call21), !dbg !11988
  store %union.tree_node* %call22, %union.tree_node** %genop, align 8, !dbg !11989
  br label %for.end, !dbg !11990

if.end23:                                         ; preds = %for.body
  br label %for.inc, !dbg !11991

for.inc:                                          ; preds = %if.end23
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !11968
  br label %for.cond, !dbg !11968, !llvm.loop !11992

for.end:                                          ; preds = %if.then20, %for.cond
  %31 = load i8, i8* %handled, align 1, !dbg !11994
  %tobool24 = icmp ne i8 %31, 0, !dbg !11994
  br i1 %tobool24, label %if.end28, label %land.lhs.true25, !dbg !11996

land.lhs.true25:                                  ; preds = %for.end
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !11997
  %tobool26 = icmp ne %union.gimple_statement_d* %32, null, !dbg !11997
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !11998

if.then27:                                        ; preds = %land.lhs.true25
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !11999
  br label %return, !dbg !11999

if.end28:                                         ; preds = %land.lhs.true25, %for.end
  %33 = load i8, i8* %handled, align 1, !dbg !12000
  %tobool29 = icmp ne i8 %33, 0, !dbg !12000
  br i1 %tobool29, label %cond.false31, label %cond.true30, !dbg !12000

cond.true30:                                      ; preds = %if.end28
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2986, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12000
  br label %cond.end32, !dbg !12000

cond.false31:                                     ; preds = %if.end28
  br label %cond.end32, !dbg !12000

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !12000
  br label %if.end34, !dbg !12001

if.end34:                                         ; preds = %cond.end32, %land.lhs.true, %if.end8
  %34 = load %union.tree_node*, %union.tree_node** %genop, align 8, !dbg !12002
  store %union.tree_node* %34, %union.tree_node** %retval, align 8, !dbg !12003
  br label %return, !dbg !12003

return:                                           ; preds = %if.end34, %if.then27
  %35 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12004
  ret %union.tree_node* %35, !dbg !12004
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !12005 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12008, metadata !DIExpression()), !dbg !12009
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !12010, metadata !DIExpression()), !dbg !12011
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12012
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12013
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !12014
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12015
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !12015
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !12017

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12018
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !12018
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !12018
  %bf.load = load i64, i64* %4, align 8, !dbg !12018
  %bf.clear = and i64 %bf.load, 65535, !dbg !12018
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12018
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !12019
  br i1 %cmp, label %if.then, label %if.end, !dbg !12020

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12021
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12022
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !12022
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !12022
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !12023
  br label %if.end, !dbg !12022

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !12024
}

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %block, %struct.vn_reference_s* %ref, i32* %operand, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %domstmt) #0 !dbg !12025 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %block.addr = alloca %struct.basic_block_def*, align 8
  %ref.addr = alloca %struct.vn_reference_s*, align 8
  %operand.addr = alloca i32*, align 8
  %stmts.addr = alloca %struct.gimple_seq_d**, align 8
  %domstmt.addr = alloca %union.gimple_statement_d*, align 8
  %currop = alloca %struct.vn_reference_op_struct*, align 8
  %genop = alloca %union.tree_node*, align 8
  %folded = alloca %union.tree_node*, align 8
  %sc = alloca %union.tree_node*, align 8
  %nargs = alloca i32, align 4
  %args = alloca %union.tree_node**, align 8
  %scexpr = alloca %struct.pre_expr_d*, align 8
  %nextop = alloca %struct.vn_reference_op_struct*, align 8
  %op0expr = alloca %struct.pre_expr_d*, align 8
  %genop0 = alloca %union.tree_node*, align 8
  %baseop = alloca %union.tree_node*, align 8
  %folded101 = alloca %union.tree_node*, align 8
  %genop0102 = alloca %union.tree_node*, align 8
  %folded111 = alloca %union.tree_node*, align 8
  %genop1 = alloca %union.tree_node*, align 8
  %folded133 = alloca %union.tree_node*, align 8
  %genop0134 = alloca %union.tree_node*, align 8
  %op1expr = alloca %struct.pre_expr_d*, align 8
  %op2expr = alloca %struct.pre_expr_d*, align 8
  %genop1140 = alloca %union.tree_node*, align 8
  %genop2 = alloca %union.tree_node*, align 8
  %genop0155 = alloca %union.tree_node*, align 8
  %genop1156 = alloca %union.tree_node*, align 8
  %op1expr158 = alloca %struct.pre_expr_d*, align 8
  %genop2159 = alloca %union.tree_node*, align 8
  %op2expr161 = alloca %struct.pre_expr_d*, align 8
  %genop3 = alloca %union.tree_node*, align 8
  %op3expr = alloca %struct.pre_expr_d*, align 8
  %elmt_type = alloca %union.tree_node*, align 8
  %op0199 = alloca %union.tree_node*, align 8
  %op1200 = alloca %union.tree_node*, align 8
  %genop2201 = alloca %union.tree_node*, align 8
  %op2expr203 = alloca %struct.pre_expr_d*, align 8
  %op0expr221 = alloca %struct.pre_expr_d*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !12028, metadata !DIExpression()), !dbg !12029
  store %struct.vn_reference_s* %ref, %struct.vn_reference_s** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vn_reference_s** %ref.addr, metadata !12030, metadata !DIExpression()), !dbg !12031
  store i32* %operand, i32** %operand.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %operand.addr, metadata !12032, metadata !DIExpression()), !dbg !12033
  store %struct.gimple_seq_d** %stmts, %struct.gimple_seq_d*** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %stmts.addr, metadata !12034, metadata !DIExpression()), !dbg !12035
  store %union.gimple_statement_d* %domstmt, %union.gimple_statement_d** %domstmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %domstmt.addr, metadata !12036, metadata !DIExpression()), !dbg !12037
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %currop, metadata !12038, metadata !DIExpression()), !dbg !12039
  %0 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12040
  %operands = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %0, i32 0, i32 5, !dbg !12040
  %1 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands, align 8, !dbg !12040
  %tobool = icmp ne %struct.VEC_vn_reference_op_s_heap* %1, null, !dbg !12040
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12040

cond.true:                                        ; preds = %entry
  %2 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12040
  %operands1 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %2, i32 0, i32 5, !dbg !12040
  %3 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands1, align 8, !dbg !12040
  %base = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %3, i32 0, i32 0, !dbg !12040
  br label %cond.end, !dbg !12040

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12040

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vn_reference_op_s_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12040
  %4 = load i32*, i32** %operand.addr, align 8, !dbg !12040
  %5 = load i32, i32* %4, align 4, !dbg !12040
  %call = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond, i32 %5), !dbg !12040
  store %struct.vn_reference_op_struct* %call, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12039
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop, metadata !12041, metadata !DIExpression()), !dbg !12042
  %6 = load i32*, i32** %operand.addr, align 8, !dbg !12043
  %7 = load i32, i32* %6, align 4, !dbg !12044
  %inc = add i32 %7, 1, !dbg !12044
  store i32 %inc, i32* %6, align 4, !dbg !12044
  %8 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12045
  %opcode = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %8, i32 0, i32 0, !dbg !12046
  %9 = load i32, i32* %opcode, align 8, !dbg !12046
  switch i32 %9, label %sw.default [
    i32 59, label %sw.bb
    i32 152, label %sw.bb43
    i32 121, label %sw.bb87
    i32 43, label %sw.bb100
    i32 44, label %sw.bb100
    i32 118, label %sw.bb100
    i32 48, label %sw.bb110
    i32 49, label %sw.bb110
    i32 47, label %sw.bb110
    i32 42, label %sw.bb132
    i32 46, label %sw.bb154
    i32 45, label %sw.bb154
    i32 41, label %sw.bb198
    i32 141, label %sw.bb220
    i32 28, label %sw.bb225
    i32 23, label %sw.bb225
    i32 26, label %sw.bb225
    i32 27, label %sw.bb225
    i32 24, label %sw.bb225
    i32 51, label %sw.bb225
    i32 32, label %sw.bb225
    i32 34, label %sw.bb225
    i32 33, label %sw.bb225
    i32 36, label %sw.bb225
    i32 29, label %sw.bb225
  ], !dbg !12047

sw.bb:                                            ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded, metadata !12048, metadata !DIExpression()), !dbg !12051
  call void @llvm.dbg.declare(metadata %union.tree_node** %sc, metadata !12052, metadata !DIExpression()), !dbg !12053
  %10 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12054
  %op1 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %10, i32 0, i32 3, !dbg !12055
  %11 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !12055
  store %union.tree_node* %11, %union.tree_node** %sc, align 8, !dbg !12053
  call void @llvm.dbg.declare(metadata i32* %nargs, metadata !12056, metadata !DIExpression()), !dbg !12057
  store i32 0, i32* %nargs, align 4, !dbg !12057
  call void @llvm.dbg.declare(metadata %union.tree_node*** %args, metadata !12058, metadata !DIExpression()), !dbg !12059
  %12 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12060
  %operands2 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %12, i32 0, i32 5, !dbg !12060
  %13 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands2, align 8, !dbg !12060
  %tobool3 = icmp ne %struct.VEC_vn_reference_op_s_heap* %13, null, !dbg !12060
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !12060

cond.true4:                                       ; preds = %sw.bb
  %14 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12060
  %operands5 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %14, i32 0, i32 5, !dbg !12060
  %15 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands5, align 8, !dbg !12060
  %base6 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %15, i32 0, i32 0, !dbg !12060
  br label %cond.end8, !dbg !12060

cond.false7:                                      ; preds = %sw.bb
  br label %cond.end8, !dbg !12060

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_vn_reference_op_s_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !12060
  %call10 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond9), !dbg !12060
  %sub = sub i32 %call10, 1, !dbg !12060
  %conv = zext i32 %sub to i64, !dbg !12060
  %mul = mul i64 8, %conv, !dbg !12060
  %call11 = call i8* @xmalloc(i64 %mul), !dbg !12060
  %16 = bitcast i8* %call11 to %union.tree_node**, !dbg !12060
  store %union.tree_node** %16, %union.tree_node*** %args, align 8, !dbg !12059
  br label %while.cond, !dbg !12061

while.cond:                                       ; preds = %while.body, %cond.end8
  %17 = load i32*, i32** %operand.addr, align 8, !dbg !12062
  %18 = load i32, i32* %17, align 4, !dbg !12063
  %19 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12064
  %operands12 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %19, i32 0, i32 5, !dbg !12064
  %20 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands12, align 8, !dbg !12064
  %tobool13 = icmp ne %struct.VEC_vn_reference_op_s_heap* %20, null, !dbg !12064
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !12064

cond.true14:                                      ; preds = %while.cond
  %21 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12064
  %operands15 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %21, i32 0, i32 5, !dbg !12064
  %22 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands15, align 8, !dbg !12064
  %base16 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %22, i32 0, i32 0, !dbg !12064
  br label %cond.end18, !dbg !12064

cond.false17:                                     ; preds = %while.cond
  br label %cond.end18, !dbg !12064

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_vn_reference_op_s_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !12064
  %call20 = call i32 @VEC_vn_reference_op_s_base_length(%struct.VEC_vn_reference_op_s_base* %cond19), !dbg !12064
  %cmp = icmp ult i32 %18, %call20, !dbg !12065
  br i1 %cmp, label %while.body, label %while.end, !dbg !12061

while.body:                                       ; preds = %cond.end18
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12066
  %24 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12068
  %25 = load i32*, i32** %operand.addr, align 8, !dbg !12069
  %26 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12070
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12071
  %call22 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %23, %struct.vn_reference_s* %24, i32* %25, %struct.gimple_seq_d** %26, %union.gimple_statement_d* %27), !dbg !12072
  %28 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !12073
  %29 = load i32, i32* %nargs, align 4, !dbg !12074
  %idxprom = zext i32 %29 to i64, !dbg !12073
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %28, i64 %idxprom, !dbg !12073
  store %union.tree_node* %call22, %union.tree_node** %arrayidx, align 8, !dbg !12075
  %30 = load i32, i32* %nargs, align 4, !dbg !12076
  %inc23 = add i32 %30, 1, !dbg !12076
  store i32 %inc23, i32* %nargs, align 4, !dbg !12076
  br label %while.cond, !dbg !12061, !llvm.loop !12077

while.end:                                        ; preds = %cond.end18
  %31 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12079
  %type = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %31, i32 0, i32 1, !dbg !12079
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12079
  %33 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12079
  %op0 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %33, i32 0, i32 2, !dbg !12079
  %34 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !12079
  %base24 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !12079
  %35 = bitcast %struct.tree_base* %base24 to i64*, !dbg !12079
  %bf.load = load i64, i64* %35, align 8, !dbg !12079
  %bf.clear = and i64 %bf.load, 65535, !dbg !12079
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12079
  %cmp25 = icmp eq i32 %bf.cast, 29, !dbg !12079
  br i1 %cmp25, label %cond.true27, label %cond.false30, !dbg !12079

cond.true27:                                      ; preds = %while.end
  %36 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12079
  %op028 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %36, i32 0, i32 2, !dbg !12079
  %37 = load %union.tree_node*, %union.tree_node** %op028, align 8, !dbg !12079
  %call29 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %37), !dbg !12079
  br label %cond.end32, !dbg !12079

cond.false30:                                     ; preds = %while.end
  %38 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12079
  %op031 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %38, i32 0, i32 2, !dbg !12079
  %39 = load %union.tree_node*, %union.tree_node** %op031, align 8, !dbg !12079
  br label %cond.end32, !dbg !12079

cond.end32:                                       ; preds = %cond.false30, %cond.true27
  %cond33 = phi %union.tree_node* [ %call29, %cond.true27 ], [ %39, %cond.false30 ], !dbg !12079
  %40 = load i32, i32* %nargs, align 4, !dbg !12079
  %41 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !12079
  %call34 = call %union.tree_node* @build_call_array_loc(i32 0, %union.tree_node* %32, %union.tree_node* %cond33, i32 %40, %union.tree_node** %41), !dbg !12079
  store %union.tree_node* %call34, %union.tree_node** %folded, align 8, !dbg !12080
  %42 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !12081
  %43 = bitcast %union.tree_node** %42 to i8*, !dbg !12081
  call void @free(i8* %43), !dbg !12082
  %44 = load %union.tree_node*, %union.tree_node** %sc, align 8, !dbg !12083
  %tobool35 = icmp ne %union.tree_node* %44, null, !dbg !12083
  br i1 %tobool35, label %if.then, label %if.end42, !dbg !12085

if.then:                                          ; preds = %cond.end32
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %scexpr, metadata !12086, metadata !DIExpression()), !dbg !12088
  %45 = load %union.tree_node*, %union.tree_node** %sc, align 8, !dbg !12089
  %call36 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %45), !dbg !12090
  store %struct.pre_expr_d* %call36, %struct.pre_expr_d** %scexpr, align 8, !dbg !12088
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12091
  %47 = load %struct.pre_expr_d*, %struct.pre_expr_d** %scexpr, align 8, !dbg !12092
  %48 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12093
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12094
  %call37 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %46, %struct.pre_expr_d* %47, %struct.gimple_seq_d** %48, %union.gimple_statement_d* %49), !dbg !12095
  store %union.tree_node* %call37, %union.tree_node** %sc, align 8, !dbg !12096
  %50 = load %union.tree_node*, %union.tree_node** %sc, align 8, !dbg !12097
  %tobool38 = icmp ne %union.tree_node* %50, null, !dbg !12097
  br i1 %tobool38, label %if.end, label %if.then39, !dbg !12099

if.then39:                                        ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12100
  br label %return, !dbg !12100

if.end:                                           ; preds = %if.then
  %51 = load %union.tree_node*, %union.tree_node** %sc, align 8, !dbg !12101
  %52 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !12102
  %exp = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !12102
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !12102
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 2, !dbg !12102
  store %union.tree_node* %51, %union.tree_node** %arrayidx41, align 8, !dbg !12103
  br label %if.end42, !dbg !12104

if.end42:                                         ; preds = %if.end, %cond.end32
  %53 = load %union.tree_node*, %union.tree_node** %folded, align 8, !dbg !12105
  store %union.tree_node* %53, %union.tree_node** %retval, align 8, !dbg !12106
  br label %return, !dbg !12106

sw.bb43:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.vn_reference_op_struct** %nextop, metadata !12107, metadata !DIExpression()), !dbg !12109
  %54 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12110
  %operands44 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %54, i32 0, i32 5, !dbg !12110
  %55 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands44, align 8, !dbg !12110
  %tobool45 = icmp ne %struct.VEC_vn_reference_op_s_heap* %55, null, !dbg !12110
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !12110

cond.true46:                                      ; preds = %sw.bb43
  %56 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12110
  %operands47 = getelementptr inbounds %struct.vn_reference_s, %struct.vn_reference_s* %56, i32 0, i32 5, !dbg !12110
  %57 = load %struct.VEC_vn_reference_op_s_heap*, %struct.VEC_vn_reference_op_s_heap** %operands47, align 8, !dbg !12110
  %base48 = getelementptr inbounds %struct.VEC_vn_reference_op_s_heap, %struct.VEC_vn_reference_op_s_heap* %57, i32 0, i32 0, !dbg !12110
  br label %cond.end50, !dbg !12110

cond.false49:                                     ; preds = %sw.bb43
  br label %cond.end50, !dbg !12110

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_vn_reference_op_s_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !12110
  %58 = load i32*, i32** %operand.addr, align 8, !dbg !12110
  %59 = load i32, i32* %58, align 4, !dbg !12110
  %call52 = call %struct.vn_reference_op_struct* @VEC_vn_reference_op_s_base_index(%struct.VEC_vn_reference_op_s_base* %cond51, i32 %59), !dbg !12110
  store %struct.vn_reference_op_struct* %call52, %struct.vn_reference_op_struct** %nextop, align 8, !dbg !12109
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op0expr, metadata !12111, metadata !DIExpression()), !dbg !12112
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop0, metadata !12113, metadata !DIExpression()), !dbg !12114
  store %union.tree_node* null, %union.tree_node** %genop0, align 8, !dbg !12114
  call void @llvm.dbg.declare(metadata %union.tree_node** %baseop, metadata !12115, metadata !DIExpression()), !dbg !12116
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12117
  %61 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12118
  %62 = load i32*, i32** %operand.addr, align 8, !dbg !12119
  %63 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12120
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12121
  %call53 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %60, %struct.vn_reference_s* %61, i32* %62, %struct.gimple_seq_d** %63, %union.gimple_statement_d* %64), !dbg !12122
  store %union.tree_node* %call53, %union.tree_node** %baseop, align 8, !dbg !12116
  %65 = load %union.tree_node*, %union.tree_node** %baseop, align 8, !dbg !12123
  %tobool54 = icmp ne %union.tree_node* %65, null, !dbg !12123
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !12125

if.then55:                                        ; preds = %cond.end50
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12126
  br label %return, !dbg !12126

if.end56:                                         ; preds = %cond.end50
  %66 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12127
  %op057 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %66, i32 0, i32 2, !dbg !12129
  %67 = load %union.tree_node*, %union.tree_node** %op057, align 8, !dbg !12129
  %tobool58 = icmp ne %union.tree_node* %67, null, !dbg !12127
  br i1 %tobool58, label %if.then59, label %if.end66, !dbg !12130

if.then59:                                        ; preds = %if.end56
  %68 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12131
  %op060 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %68, i32 0, i32 2, !dbg !12133
  %69 = load %union.tree_node*, %union.tree_node** %op060, align 8, !dbg !12133
  %call61 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %69), !dbg !12134
  store %struct.pre_expr_d* %call61, %struct.pre_expr_d** %op0expr, align 8, !dbg !12135
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12136
  %71 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op0expr, align 8, !dbg !12137
  %72 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12138
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12139
  %call62 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %70, %struct.pre_expr_d* %71, %struct.gimple_seq_d** %72, %union.gimple_statement_d* %73), !dbg !12140
  store %union.tree_node* %call62, %union.tree_node** %genop0, align 8, !dbg !12141
  %74 = load %union.tree_node*, %union.tree_node** %genop0, align 8, !dbg !12142
  %tobool63 = icmp ne %union.tree_node* %74, null, !dbg !12142
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !12144

if.then64:                                        ; preds = %if.then59
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12145
  br label %return, !dbg !12145

if.end65:                                         ; preds = %if.then59
  br label %if.end66, !dbg !12146

if.end66:                                         ; preds = %if.end65, %if.end56
  %75 = load %union.tree_node*, %union.tree_node** %baseop, align 8, !dbg !12147
  %base67 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !12147
  %76 = bitcast %struct.tree_base* %base67 to i64*, !dbg !12147
  %bf.load68 = load i64, i64* %76, align 8, !dbg !12147
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !12147
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !12147
  %idxprom71 = sext i32 %bf.cast70 to i64, !dbg !12147
  %arrayidx72 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom71, !dbg !12147
  %77 = load i32, i32* %arrayidx72, align 4, !dbg !12147
  %cmp73 = icmp eq i32 %77, 3, !dbg !12147
  br i1 %cmp73, label %if.then75, label %if.else, !dbg !12149

if.then75:                                        ; preds = %if.end66
  %78 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12150
  %type76 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %78, i32 0, i32 1, !dbg !12150
  %79 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !12150
  %80 = load %union.tree_node*, %union.tree_node** %baseop, align 8, !dbg !12150
  %81 = load %union.tree_node*, %union.tree_node** %genop0, align 8, !dbg !12150
  %82 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12150
  %op177 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %82, i32 0, i32 3, !dbg !12150
  %83 = load %union.tree_node*, %union.tree_node** %op177, align 8, !dbg !12150
  %84 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12150
  %op2 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %84, i32 0, i32 4, !dbg !12150
  %85 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !12150
  %86 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %nextop, align 8, !dbg !12150
  %op178 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %86, i32 0, i32 3, !dbg !12150
  %87 = load %union.tree_node*, %union.tree_node** %op178, align 8, !dbg !12150
  %call79 = call %union.tree_node* @unshare_expr(%union.tree_node* %87), !dbg !12150
  %call80 = call %union.tree_node* @build6_stat(i32 152, %union.tree_node* %79, %union.tree_node* %80, %union.tree_node* null, %union.tree_node* %81, %union.tree_node* %83, %union.tree_node* %85, %union.tree_node* %call79), !dbg !12150
  store %union.tree_node* %call80, %union.tree_node** %retval, align 8, !dbg !12151
  br label %return, !dbg !12151

if.else:                                          ; preds = %if.end66
  %88 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12152
  %type81 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %88, i32 0, i32 1, !dbg !12152
  %89 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !12152
  %90 = load %union.tree_node*, %union.tree_node** %baseop, align 8, !dbg !12152
  %91 = load %union.tree_node*, %union.tree_node** %genop0, align 8, !dbg !12152
  %92 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12152
  %op182 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %92, i32 0, i32 3, !dbg !12152
  %93 = load %union.tree_node*, %union.tree_node** %op182, align 8, !dbg !12152
  %94 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12152
  %op283 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %94, i32 0, i32 4, !dbg !12152
  %95 = load %union.tree_node*, %union.tree_node** %op283, align 8, !dbg !12152
  %96 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %nextop, align 8, !dbg !12152
  %op184 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %96, i32 0, i32 3, !dbg !12152
  %97 = load %union.tree_node*, %union.tree_node** %op184, align 8, !dbg !12152
  %call85 = call %union.tree_node* @unshare_expr(%union.tree_node* %97), !dbg !12152
  %call86 = call %union.tree_node* @build6_stat(i32 152, %union.tree_node* %89, %union.tree_node* null, %union.tree_node* %90, %union.tree_node* %91, %union.tree_node* %93, %union.tree_node* %95, %union.tree_node* %call85), !dbg !12152
  store %union.tree_node* %call86, %union.tree_node** %retval, align 8, !dbg !12153
  br label %return, !dbg !12153

sw.bb87:                                          ; preds = %cond.end
  %98 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12154
  %op088 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %98, i32 0, i32 2, !dbg !12156
  %99 = load %union.tree_node*, %union.tree_node** %op088, align 8, !dbg !12156
  %tobool89 = icmp ne %union.tree_node* %99, null, !dbg !12154
  br i1 %tobool89, label %if.then90, label %if.end99, !dbg !12157

if.then90:                                        ; preds = %sw.bb87
  %100 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12158
  %op091 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %100, i32 0, i32 2, !dbg !12158
  %101 = load %union.tree_node*, %union.tree_node** %op091, align 8, !dbg !12158
  %call92 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %101), !dbg !12158
  %tobool93 = icmp ne i8 %call92, 0, !dbg !12158
  br i1 %tobool93, label %cond.false95, label %cond.true94, !dbg !12158

cond.true94:                                      ; preds = %if.then90
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2751, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12158
  br label %cond.end96, !dbg !12158

cond.false95:                                     ; preds = %if.then90
  br label %cond.end96, !dbg !12158

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ 0, %cond.true94 ], [ 0, %cond.false95 ], !dbg !12158
  %102 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12160
  %op098 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %102, i32 0, i32 2, !dbg !12161
  %103 = load %union.tree_node*, %union.tree_node** %op098, align 8, !dbg !12161
  store %union.tree_node* %103, %union.tree_node** %retval, align 8, !dbg !12162
  br label %return, !dbg !12162

if.end99:                                         ; preds = %sw.bb87
  br label %sw.bb100, !dbg !12156

sw.bb100:                                         ; preds = %cond.end, %cond.end, %cond.end, %if.end99
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded101, metadata !12163, metadata !DIExpression()), !dbg !12165
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop0102, metadata !12166, metadata !DIExpression()), !dbg !12167
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12168
  %105 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12169
  %106 = load i32*, i32** %operand.addr, align 8, !dbg !12170
  %107 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12171
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12172
  %call103 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %104, %struct.vn_reference_s* %105, i32* %106, %struct.gimple_seq_d** %107, %union.gimple_statement_d* %108), !dbg !12173
  store %union.tree_node* %call103, %union.tree_node** %genop0102, align 8, !dbg !12167
  %109 = load %union.tree_node*, %union.tree_node** %genop0102, align 8, !dbg !12174
  %tobool104 = icmp ne %union.tree_node* %109, null, !dbg !12174
  br i1 %tobool104, label %if.end106, label %if.then105, !dbg !12176

if.then105:                                       ; preds = %sw.bb100
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12177
  br label %return, !dbg !12177

if.end106:                                        ; preds = %sw.bb100
  %110 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12178
  %opcode107 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %110, i32 0, i32 0, !dbg !12178
  %111 = load i32, i32* %opcode107, align 8, !dbg !12178
  %112 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12178
  %type108 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %112, i32 0, i32 1, !dbg !12178
  %113 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !12178
  %114 = load %union.tree_node*, %union.tree_node** %genop0102, align 8, !dbg !12178
  %call109 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %111, %union.tree_node* %113, %union.tree_node* %114), !dbg !12178
  store %union.tree_node* %call109, %union.tree_node** %folded101, align 8, !dbg !12179
  %115 = load %union.tree_node*, %union.tree_node** %folded101, align 8, !dbg !12180
  store %union.tree_node* %115, %union.tree_node** %retval, align 8, !dbg !12181
  br label %return, !dbg !12181

sw.bb110:                                         ; preds = %cond.end, %cond.end, %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded111, metadata !12182, metadata !DIExpression()), !dbg !12184
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop1, metadata !12185, metadata !DIExpression()), !dbg !12186
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12187
  %117 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12188
  %118 = load i32*, i32** %operand.addr, align 8, !dbg !12189
  %119 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12190
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12191
  %call112 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %116, %struct.vn_reference_s* %117, i32* %118, %struct.gimple_seq_d** %119, %union.gimple_statement_d* %120), !dbg !12192
  store %union.tree_node* %call112, %union.tree_node** %genop1, align 8, !dbg !12186
  %121 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !12193
  %tobool113 = icmp ne %union.tree_node* %121, null, !dbg !12193
  br i1 %tobool113, label %if.end115, label %if.then114, !dbg !12195

if.then114:                                       ; preds = %sw.bb110
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12196
  br label %return, !dbg !12196

if.end115:                                        ; preds = %sw.bb110
  %122 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12197
  %type116 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %122, i32 0, i32 1, !dbg !12197
  %123 = load %union.tree_node*, %union.tree_node** %type116, align 8, !dbg !12197
  %call117 = call %union.tree_node* @build_pointer_type(%union.tree_node* %123), !dbg !12197
  %124 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !12197
  %call118 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call117, %union.tree_node* %124), !dbg !12197
  store %union.tree_node* %call118, %union.tree_node** %genop1, align 8, !dbg !12198
  %125 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12199
  %opcode119 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %125, i32 0, i32 0, !dbg !12201
  %126 = load i32, i32* %opcode119, align 8, !dbg !12201
  %cmp120 = icmp eq i32 %126, 49, !dbg !12202
  br i1 %cmp120, label %if.then122, label %if.else127, !dbg !12203

if.then122:                                       ; preds = %if.end115
  %127 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12204
  %opcode123 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %127, i32 0, i32 0, !dbg !12204
  %128 = load i32, i32* %opcode123, align 8, !dbg !12204
  %129 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12204
  %type124 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %129, i32 0, i32 1, !dbg !12204
  %130 = load %union.tree_node*, %union.tree_node** %type124, align 8, !dbg !12204
  %131 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !12204
  %132 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12204
  %op1125 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %132, i32 0, i32 3, !dbg !12204
  %133 = load %union.tree_node*, %union.tree_node** %op1125, align 8, !dbg !12204
  %call126 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %128, %union.tree_node* %130, %union.tree_node* %131, %union.tree_node* %133), !dbg !12204
  store %union.tree_node* %call126, %union.tree_node** %folded111, align 8, !dbg !12205
  br label %if.end131, !dbg !12206

if.else127:                                       ; preds = %if.end115
  %134 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12207
  %opcode128 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %134, i32 0, i32 0, !dbg !12207
  %135 = load i32, i32* %opcode128, align 8, !dbg !12207
  %136 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12207
  %type129 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %136, i32 0, i32 1, !dbg !12207
  %137 = load %union.tree_node*, %union.tree_node** %type129, align 8, !dbg !12207
  %138 = load %union.tree_node*, %union.tree_node** %genop1, align 8, !dbg !12207
  %call130 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %135, %union.tree_node* %137, %union.tree_node* %138), !dbg !12207
  store %union.tree_node* %call130, %union.tree_node** %folded111, align 8, !dbg !12208
  br label %if.end131

if.end131:                                        ; preds = %if.else127, %if.then122
  %139 = load %union.tree_node*, %union.tree_node** %folded111, align 8, !dbg !12209
  store %union.tree_node* %139, %union.tree_node** %retval, align 8, !dbg !12210
  br label %return, !dbg !12210

sw.bb132:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %folded133, metadata !12211, metadata !DIExpression()), !dbg !12213
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop0134, metadata !12214, metadata !DIExpression()), !dbg !12215
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12216
  %141 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12217
  %142 = load i32*, i32** %operand.addr, align 8, !dbg !12218
  %143 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12219
  %144 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12220
  %call135 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %140, %struct.vn_reference_s* %141, i32* %142, %struct.gimple_seq_d** %143, %union.gimple_statement_d* %144), !dbg !12221
  store %union.tree_node* %call135, %union.tree_node** %genop0134, align 8, !dbg !12215
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op1expr, metadata !12222, metadata !DIExpression()), !dbg !12223
  %145 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12224
  %op0136 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %145, i32 0, i32 2, !dbg !12225
  %146 = load %union.tree_node*, %union.tree_node** %op0136, align 8, !dbg !12225
  %call137 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %146), !dbg !12226
  store %struct.pre_expr_d* %call137, %struct.pre_expr_d** %op1expr, align 8, !dbg !12223
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op2expr, metadata !12227, metadata !DIExpression()), !dbg !12228
  %147 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12229
  %op1138 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %147, i32 0, i32 3, !dbg !12230
  %148 = load %union.tree_node*, %union.tree_node** %op1138, align 8, !dbg !12230
  %call139 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %148), !dbg !12231
  store %struct.pre_expr_d* %call139, %struct.pre_expr_d** %op2expr, align 8, !dbg !12228
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop1140, metadata !12232, metadata !DIExpression()), !dbg !12233
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop2, metadata !12234, metadata !DIExpression()), !dbg !12235
  %149 = load %union.tree_node*, %union.tree_node** %genop0134, align 8, !dbg !12236
  %tobool141 = icmp ne %union.tree_node* %149, null, !dbg !12236
  br i1 %tobool141, label %if.end143, label %if.then142, !dbg !12238

if.then142:                                       ; preds = %sw.bb132
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12239
  br label %return, !dbg !12239

if.end143:                                        ; preds = %sw.bb132
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12240
  %151 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op1expr, align 8, !dbg !12241
  %152 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12242
  %153 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12243
  %call144 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %150, %struct.pre_expr_d* %151, %struct.gimple_seq_d** %152, %union.gimple_statement_d* %153), !dbg !12244
  store %union.tree_node* %call144, %union.tree_node** %genop1140, align 8, !dbg !12245
  %154 = load %union.tree_node*, %union.tree_node** %genop1140, align 8, !dbg !12246
  %tobool145 = icmp ne %union.tree_node* %154, null, !dbg !12246
  br i1 %tobool145, label %if.end147, label %if.then146, !dbg !12248

if.then146:                                       ; preds = %if.end143
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12249
  br label %return, !dbg !12249

if.end147:                                        ; preds = %if.end143
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12250
  %156 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op2expr, align 8, !dbg !12251
  %157 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12252
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12253
  %call148 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %155, %struct.pre_expr_d* %156, %struct.gimple_seq_d** %157, %union.gimple_statement_d* %158), !dbg !12254
  store %union.tree_node* %call148, %union.tree_node** %genop2, align 8, !dbg !12255
  %159 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !12256
  %tobool149 = icmp ne %union.tree_node* %159, null, !dbg !12256
  br i1 %tobool149, label %if.end151, label %if.then150, !dbg !12258

if.then150:                                       ; preds = %if.end147
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12259
  br label %return, !dbg !12259

if.end151:                                        ; preds = %if.end147
  %160 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12260
  %type152 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %160, i32 0, i32 1, !dbg !12260
  %161 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !12260
  %162 = load %union.tree_node*, %union.tree_node** %genop0134, align 8, !dbg !12260
  %163 = load %union.tree_node*, %union.tree_node** %genop1140, align 8, !dbg !12260
  %164 = load %union.tree_node*, %union.tree_node** %genop2, align 8, !dbg !12260
  %call153 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 42, %union.tree_node* %161, %union.tree_node* %162, %union.tree_node* %163, %union.tree_node* %164), !dbg !12260
  store %union.tree_node* %call153, %union.tree_node** %folded133, align 8, !dbg !12261
  %165 = load %union.tree_node*, %union.tree_node** %folded133, align 8, !dbg !12262
  store %union.tree_node* %165, %union.tree_node** %retval, align 8, !dbg !12263
  br label %return, !dbg !12263

sw.bb154:                                         ; preds = %cond.end, %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop0155, metadata !12264, metadata !DIExpression()), !dbg !12266
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop1156, metadata !12267, metadata !DIExpression()), !dbg !12268
  %166 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12269
  %op0157 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %166, i32 0, i32 2, !dbg !12270
  %167 = load %union.tree_node*, %union.tree_node** %op0157, align 8, !dbg !12270
  store %union.tree_node* %167, %union.tree_node** %genop1156, align 8, !dbg !12268
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op1expr158, metadata !12271, metadata !DIExpression()), !dbg !12272
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop2159, metadata !12273, metadata !DIExpression()), !dbg !12274
  %168 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12275
  %op1160 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %168, i32 0, i32 3, !dbg !12276
  %169 = load %union.tree_node*, %union.tree_node** %op1160, align 8, !dbg !12276
  store %union.tree_node* %169, %union.tree_node** %genop2159, align 8, !dbg !12274
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op2expr161, metadata !12277, metadata !DIExpression()), !dbg !12278
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop3, metadata !12279, metadata !DIExpression()), !dbg !12280
  %170 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12281
  %op2162 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %170, i32 0, i32 4, !dbg !12282
  %171 = load %union.tree_node*, %union.tree_node** %op2162, align 8, !dbg !12282
  store %union.tree_node* %171, %union.tree_node** %genop3, align 8, !dbg !12280
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op3expr, metadata !12283, metadata !DIExpression()), !dbg !12284
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12285
  %173 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12286
  %174 = load i32*, i32** %operand.addr, align 8, !dbg !12287
  %175 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12288
  %176 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12289
  %call163 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %172, %struct.vn_reference_s* %173, i32* %174, %struct.gimple_seq_d** %175, %union.gimple_statement_d* %176), !dbg !12290
  store %union.tree_node* %call163, %union.tree_node** %genop0155, align 8, !dbg !12291
  %177 = load %union.tree_node*, %union.tree_node** %genop0155, align 8, !dbg !12292
  %tobool164 = icmp ne %union.tree_node* %177, null, !dbg !12292
  br i1 %tobool164, label %if.end166, label %if.then165, !dbg !12294

if.then165:                                       ; preds = %sw.bb154
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12295
  br label %return, !dbg !12295

if.end166:                                        ; preds = %sw.bb154
  %178 = load %union.tree_node*, %union.tree_node** %genop1156, align 8, !dbg !12296
  %call167 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %178), !dbg !12297
  store %struct.pre_expr_d* %call167, %struct.pre_expr_d** %op1expr158, align 8, !dbg !12298
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12299
  %180 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op1expr158, align 8, !dbg !12300
  %181 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12301
  %182 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12302
  %call168 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %179, %struct.pre_expr_d* %180, %struct.gimple_seq_d** %181, %union.gimple_statement_d* %182), !dbg !12303
  store %union.tree_node* %call168, %union.tree_node** %genop1156, align 8, !dbg !12304
  %183 = load %union.tree_node*, %union.tree_node** %genop1156, align 8, !dbg !12305
  %tobool169 = icmp ne %union.tree_node* %183, null, !dbg !12305
  br i1 %tobool169, label %if.end171, label %if.then170, !dbg !12307

if.then170:                                       ; preds = %if.end166
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12308
  br label %return, !dbg !12308

if.end171:                                        ; preds = %if.end166
  %184 = load %union.tree_node*, %union.tree_node** %genop2159, align 8, !dbg !12309
  %tobool172 = icmp ne %union.tree_node* %184, null, !dbg !12309
  br i1 %tobool172, label %if.then173, label %if.end179, !dbg !12311

if.then173:                                       ; preds = %if.end171
  %185 = load %union.tree_node*, %union.tree_node** %genop2159, align 8, !dbg !12312
  %call174 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %185), !dbg !12314
  store %struct.pre_expr_d* %call174, %struct.pre_expr_d** %op2expr161, align 8, !dbg !12315
  %186 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12316
  %187 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op2expr161, align 8, !dbg !12317
  %188 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12318
  %189 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12319
  %call175 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %186, %struct.pre_expr_d* %187, %struct.gimple_seq_d** %188, %union.gimple_statement_d* %189), !dbg !12320
  store %union.tree_node* %call175, %union.tree_node** %genop2159, align 8, !dbg !12321
  %190 = load %union.tree_node*, %union.tree_node** %genop2159, align 8, !dbg !12322
  %tobool176 = icmp ne %union.tree_node* %190, null, !dbg !12322
  br i1 %tobool176, label %if.end178, label %if.then177, !dbg !12324

if.then177:                                       ; preds = %if.then173
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12325
  br label %return, !dbg !12325

if.end178:                                        ; preds = %if.then173
  br label %if.end179, !dbg !12326

if.end179:                                        ; preds = %if.end178, %if.end171
  %191 = load %union.tree_node*, %union.tree_node** %genop3, align 8, !dbg !12327
  %tobool180 = icmp ne %union.tree_node* %191, null, !dbg !12327
  br i1 %tobool180, label %if.then181, label %if.end194, !dbg !12329

if.then181:                                       ; preds = %if.end179
  call void @llvm.dbg.declare(metadata %union.tree_node** %elmt_type, metadata !12330, metadata !DIExpression()), !dbg !12332
  %192 = load %union.tree_node*, %union.tree_node** %genop0155, align 8, !dbg !12333
  %common = bitcast %union.tree_node* %192 to %struct.tree_common*, !dbg !12333
  %type182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12333
  %193 = load %union.tree_node*, %union.tree_node** %type182, align 8, !dbg !12333
  %common183 = bitcast %union.tree_node* %193 to %struct.tree_common*, !dbg !12333
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !12333
  %194 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !12333
  store %union.tree_node* %194, %union.tree_node** %elmt_type, align 8, !dbg !12332
  %195 = load %union.tree_node*, %union.tree_node** %genop3, align 8, !dbg !12334
  %196 = load %union.tree_node*, %union.tree_node** %elmt_type, align 8, !dbg !12334
  %type185 = bitcast %union.tree_node* %196 to %struct.tree_type*, !dbg !12334
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type185, i32 0, i32 7, !dbg !12334
  %197 = load i32, i32* %align, align 8, !dbg !12334
  %div = udiv i32 %197, 8, !dbg !12334
  %conv186 = zext i32 %div to i64, !dbg !12334
  %call187 = call %union.tree_node* @size_int_kind(i64 %conv186, i32 0), !dbg !12334
  %call188 = call %union.tree_node* @size_binop_loc(i32 0, i32 76, %union.tree_node* %195, %union.tree_node* %call187), !dbg !12334
  store %union.tree_node* %call188, %union.tree_node** %genop3, align 8, !dbg !12335
  %198 = load %union.tree_node*, %union.tree_node** %genop3, align 8, !dbg !12336
  %call189 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %198), !dbg !12337
  store %struct.pre_expr_d* %call189, %struct.pre_expr_d** %op3expr, align 8, !dbg !12338
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12339
  %200 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op3expr, align 8, !dbg !12340
  %201 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12341
  %202 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12342
  %call190 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %199, %struct.pre_expr_d* %200, %struct.gimple_seq_d** %201, %union.gimple_statement_d* %202), !dbg !12343
  store %union.tree_node* %call190, %union.tree_node** %genop3, align 8, !dbg !12344
  %203 = load %union.tree_node*, %union.tree_node** %genop3, align 8, !dbg !12345
  %tobool191 = icmp ne %union.tree_node* %203, null, !dbg !12345
  br i1 %tobool191, label %if.end193, label %if.then192, !dbg !12347

if.then192:                                       ; preds = %if.then181
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12348
  br label %return, !dbg !12348

if.end193:                                        ; preds = %if.then181
  br label %if.end194, !dbg !12349

if.end194:                                        ; preds = %if.end193, %if.end179
  %204 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12350
  %opcode195 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %204, i32 0, i32 0, !dbg !12350
  %205 = load i32, i32* %opcode195, align 8, !dbg !12350
  %206 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12350
  %type196 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %206, i32 0, i32 1, !dbg !12350
  %207 = load %union.tree_node*, %union.tree_node** %type196, align 8, !dbg !12350
  %208 = load %union.tree_node*, %union.tree_node** %genop0155, align 8, !dbg !12350
  %209 = load %union.tree_node*, %union.tree_node** %genop1156, align 8, !dbg !12350
  %210 = load %union.tree_node*, %union.tree_node** %genop2159, align 8, !dbg !12350
  %211 = load %union.tree_node*, %union.tree_node** %genop3, align 8, !dbg !12350
  %call197 = call %union.tree_node* @build4_stat(i32 %205, %union.tree_node* %207, %union.tree_node* %208, %union.tree_node* %209, %union.tree_node* %210, %union.tree_node* %211), !dbg !12350
  store %union.tree_node* %call197, %union.tree_node** %retval, align 8, !dbg !12351
  br label %return, !dbg !12351

sw.bb198:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0199, metadata !12352, metadata !DIExpression()), !dbg !12354
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1200, metadata !12355, metadata !DIExpression()), !dbg !12356
  call void @llvm.dbg.declare(metadata %union.tree_node** %genop2201, metadata !12357, metadata !DIExpression()), !dbg !12358
  %212 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12359
  %op1202 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %212, i32 0, i32 3, !dbg !12360
  %213 = load %union.tree_node*, %union.tree_node** %op1202, align 8, !dbg !12360
  store %union.tree_node* %213, %union.tree_node** %genop2201, align 8, !dbg !12358
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op2expr203, metadata !12361, metadata !DIExpression()), !dbg !12362
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12363
  %215 = load %struct.vn_reference_s*, %struct.vn_reference_s** %ref.addr, align 8, !dbg !12364
  %216 = load i32*, i32** %operand.addr, align 8, !dbg !12365
  %217 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12366
  %218 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12367
  %call204 = call %union.tree_node* @create_component_ref_by_pieces_1(%struct.basic_block_def* %214, %struct.vn_reference_s* %215, i32* %216, %struct.gimple_seq_d** %217, %union.gimple_statement_d* %218), !dbg !12368
  store %union.tree_node* %call204, %union.tree_node** %op0199, align 8, !dbg !12369
  %219 = load %union.tree_node*, %union.tree_node** %op0199, align 8, !dbg !12370
  %tobool205 = icmp ne %union.tree_node* %219, null, !dbg !12370
  br i1 %tobool205, label %if.end207, label %if.then206, !dbg !12372

if.then206:                                       ; preds = %sw.bb198
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12373
  br label %return, !dbg !12373

if.end207:                                        ; preds = %sw.bb198
  %220 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12374
  %op0208 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %220, i32 0, i32 2, !dbg !12375
  %221 = load %union.tree_node*, %union.tree_node** %op0208, align 8, !dbg !12375
  store %union.tree_node* %221, %union.tree_node** %op1200, align 8, !dbg !12376
  %222 = load %union.tree_node*, %union.tree_node** %genop2201, align 8, !dbg !12377
  %tobool209 = icmp ne %union.tree_node* %222, null, !dbg !12377
  br i1 %tobool209, label %if.then210, label %if.end216, !dbg !12379

if.then210:                                       ; preds = %if.end207
  %223 = load %union.tree_node*, %union.tree_node** %genop2201, align 8, !dbg !12380
  %call211 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %223), !dbg !12382
  store %struct.pre_expr_d* %call211, %struct.pre_expr_d** %op2expr203, align 8, !dbg !12383
  %224 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12384
  %225 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op2expr203, align 8, !dbg !12385
  %226 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12386
  %227 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12387
  %call212 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %224, %struct.pre_expr_d* %225, %struct.gimple_seq_d** %226, %union.gimple_statement_d* %227), !dbg !12388
  store %union.tree_node* %call212, %union.tree_node** %genop2201, align 8, !dbg !12389
  %228 = load %union.tree_node*, %union.tree_node** %genop2201, align 8, !dbg !12390
  %tobool213 = icmp ne %union.tree_node* %228, null, !dbg !12390
  br i1 %tobool213, label %if.end215, label %if.then214, !dbg !12392

if.then214:                                       ; preds = %if.then210
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12393
  br label %return, !dbg !12393

if.end215:                                        ; preds = %if.then210
  br label %if.end216, !dbg !12394

if.end216:                                        ; preds = %if.end215, %if.end207
  %229 = load %union.tree_node*, %union.tree_node** %op1200, align 8, !dbg !12395
  %common217 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !12395
  %type218 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common217, i32 0, i32 2, !dbg !12395
  %230 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !12395
  %231 = load %union.tree_node*, %union.tree_node** %op0199, align 8, !dbg !12395
  %232 = load %union.tree_node*, %union.tree_node** %op1200, align 8, !dbg !12395
  %233 = load %union.tree_node*, %union.tree_node** %genop2201, align 8, !dbg !12395
  %call219 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 41, %union.tree_node* %230, %union.tree_node* %231, %union.tree_node* %232, %union.tree_node* %233), !dbg !12395
  store %union.tree_node* %call219, %union.tree_node** %retval, align 8, !dbg !12396
  br label %return, !dbg !12396

sw.bb220:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %op0expr221, metadata !12397, metadata !DIExpression()), !dbg !12399
  %234 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12400
  %op0222 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %234, i32 0, i32 2, !dbg !12401
  %235 = load %union.tree_node*, %union.tree_node** %op0222, align 8, !dbg !12401
  %call223 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %235), !dbg !12402
  store %struct.pre_expr_d* %call223, %struct.pre_expr_d** %op0expr221, align 8, !dbg !12399
  %236 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !12403
  %237 = load %struct.pre_expr_d*, %struct.pre_expr_d** %op0expr221, align 8, !dbg !12404
  %238 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %stmts.addr, align 8, !dbg !12405
  %239 = load %union.gimple_statement_d*, %union.gimple_statement_d** %domstmt.addr, align 8, !dbg !12406
  %call224 = call %union.tree_node* @find_or_generate_expression(%struct.basic_block_def* %236, %struct.pre_expr_d* %237, %struct.gimple_seq_d** %238, %union.gimple_statement_d* %239), !dbg !12407
  store %union.tree_node* %call224, %union.tree_node** %genop, align 8, !dbg !12408
  %240 = load %union.tree_node*, %union.tree_node** %genop, align 8, !dbg !12409
  store %union.tree_node* %240, %union.tree_node** %retval, align 8, !dbg !12410
  br label %return, !dbg !12410

sw.bb225:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %241 = load %struct.vn_reference_op_struct*, %struct.vn_reference_op_struct** %currop, align 8, !dbg !12411
  %op0226 = getelementptr inbounds %struct.vn_reference_op_struct, %struct.vn_reference_op_struct* %241, i32 0, i32 2, !dbg !12412
  %242 = load %union.tree_node*, %union.tree_node** %op0226, align 8, !dbg !12412
  store %union.tree_node* %242, %union.tree_node** %retval, align 8, !dbg !12413
  br label %return, !dbg !12413

sw.default:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2904, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12414
  br label %sw.epilog, !dbg !12415

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12416
  br label %return, !dbg !12416

return:                                           ; preds = %sw.epilog, %sw.bb225, %sw.bb220, %if.end216, %if.then214, %if.then206, %if.end194, %if.then192, %if.then177, %if.then170, %if.then165, %if.end151, %if.then150, %if.then146, %if.then142, %if.end131, %if.then114, %if.end106, %if.then105, %cond.end96, %if.else, %if.then75, %if.then64, %if.then55, %if.end42, %if.then39
  %243 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12417
  ret %union.tree_node* %243, !dbg !12417
}

declare dso_local %union.tree_node* @build_call_array_loc(i32, %union.tree_node*, %union.tree_node*, i32, %union.tree_node**) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build6_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !12418 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12421, metadata !DIExpression()), !dbg !12422
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !12423, metadata !DIExpression()), !dbg !12424
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !12425, metadata !DIExpression()), !dbg !12426
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12427
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !12427
  %conv = zext i8 %call to i32, !dbg !12427
  %tobool = icmp ne i32 %conv, 0, !dbg !12427
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !12427

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !12427
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12427
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !12427
  %cmp = icmp ult i32 %1, %call1, !dbg !12427
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12427

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12427
  br label %cond.end, !dbg !12427

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12427
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12428
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12429
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !12430
  %5 = load i32, i32* %i.addr, align 4, !dbg !12431
  %idxprom = zext i32 %5 to i64, !dbg !12430
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !12430
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !12432
  ret void, !dbg !12433
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !12434 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12435, metadata !DIExpression()), !dbg !12436
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12437
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !12438
  %conv = zext i8 %call to i32, !dbg !12438
  %tobool = icmp ne i32 %conv, 0, !dbg !12438
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !12439

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12440
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !12441
  %conv2 = zext i8 %call1 to i32, !dbg !12441
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !12441
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !12442

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12443
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !12444
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !12445
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !12446
  br label %lor.end, !dbg !12439

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !12439
  %conv6 = trunc i32 %lor.ext to i8, !dbg !12447
  ret i8 %conv6, !dbg !12448
}

declare dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

declare dso_local void @print_gimple_expr(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !12449 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !12452, metadata !DIExpression()), !dbg !12453
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12454
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !12456
  %tobool = icmp ne i8 %call, 0, !dbg !12456
  br i1 %tobool, label %if.then, label %if.end, !dbg !12457

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12458
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !12460
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !12461
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !12462
  br label %if.end, !dbg !12463

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12464
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_PRE_operation(%union.tree_node* %op) #0 !dbg !12465 {
entry:
  %op.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !12468, metadata !DIExpression()), !dbg !12469
  %0 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12470
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12470
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12470
  %bf.load = load i64, i64* %1, align 8, !dbg !12470
  %bf.clear = and i64 %bf.load, 65535, !dbg !12470
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12470
  %idxprom = sext i32 %bf.cast to i64, !dbg !12470
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !12470
  %2 = load i32, i32* %arrayidx, align 4, !dbg !12470
  %cmp = icmp eq i32 %2, 6, !dbg !12470
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !12471

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12472
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !12472
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !12472
  %bf.load2 = load i64, i64* %4, align 8, !dbg !12472
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !12472
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !12472
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !12472
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !12472
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !12472
  %cmp7 = icmp eq i32 %5, 7, !dbg !12472
  br i1 %cmp7, label %lor.end, label %lor.lhs.false8, !dbg !12473

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12474
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !12474
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !12474
  %bf.load10 = load i64, i64* %7, align 8, !dbg !12474
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !12474
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !12474
  %idxprom13 = sext i32 %bf.cast12 to i64, !dbg !12474
  %arrayidx14 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom13, !dbg !12474
  %8 = load i32, i32* %arrayidx14, align 4, !dbg !12474
  %cmp15 = icmp eq i32 %8, 5, !dbg !12474
  br i1 %cmp15, label %lor.end, label %lor.lhs.false16, !dbg !12475

lor.lhs.false16:                                  ; preds = %lor.lhs.false8
  %9 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12476
  %base17 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !12476
  %10 = bitcast %struct.tree_base* %base17 to i64*, !dbg !12476
  %bf.load18 = load i64, i64* %10, align 8, !dbg !12476
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !12476
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !12476
  %cmp21 = icmp eq i32 %bf.cast20, 47, !dbg !12477
  br i1 %cmp21, label %lor.end, label %lor.lhs.false22, !dbg !12478

lor.lhs.false22:                                  ; preds = %lor.lhs.false16
  %11 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12479
  %base23 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12479
  %12 = bitcast %struct.tree_base* %base23 to i64*, !dbg !12479
  %bf.load24 = load i64, i64* %12, align 8, !dbg !12479
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !12479
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !12479
  %cmp27 = icmp eq i32 %bf.cast26, 41, !dbg !12480
  br i1 %cmp27, label %lor.end, label %lor.lhs.false28, !dbg !12481

lor.lhs.false28:                                  ; preds = %lor.lhs.false22
  %13 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12482
  %base29 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !12482
  %14 = bitcast %struct.tree_base* %base29 to i64*, !dbg !12482
  %bf.load30 = load i64, i64* %14, align 8, !dbg !12482
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !12482
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !12482
  %cmp33 = icmp eq i32 %bf.cast32, 118, !dbg !12483
  br i1 %cmp33, label %lor.end, label %lor.lhs.false34, !dbg !12484

lor.lhs.false34:                                  ; preds = %lor.lhs.false28
  %15 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12485
  %base35 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !12485
  %16 = bitcast %struct.tree_base* %base35 to i64*, !dbg !12485
  %bf.load36 = load i64, i64* %16, align 8, !dbg !12485
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !12485
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !12485
  %cmp39 = icmp eq i32 %bf.cast38, 59, !dbg !12486
  br i1 %cmp39, label %lor.end, label %lor.rhs, !dbg !12487

lor.rhs:                                          ; preds = %lor.lhs.false34
  %17 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !12488
  %base40 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !12488
  %18 = bitcast %struct.tree_base* %base40 to i64*, !dbg !12488
  %bf.load41 = load i64, i64* %18, align 8, !dbg !12488
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !12488
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !12488
  %cmp44 = icmp eq i32 %bf.cast43, 45, !dbg !12489
  br label %lor.end, !dbg !12487

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false34, %lor.lhs.false28, %lor.lhs.false22, %lor.lhs.false16, %lor.lhs.false8, %lor.lhs.false, %entry
  %19 = phi i1 [ true, %lor.lhs.false34 ], [ true, %lor.lhs.false28 ], [ true, %lor.lhs.false22 ], [ true, %lor.lhs.false16 ], [ true, %lor.lhs.false8 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp44, %lor.rhs ]
  %lor.ext = zext i1 %19 to i32, !dbg !12487
  %conv = trunc i32 %lor.ext to i8, !dbg !12470
  ret i8 %conv, !dbg !12490
}

declare dso_local %union.tree_node* @vn_get_expr_for(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @do_SCCVN_insertion(%union.gimple_statement_d* %stmt, %union.tree_node* %ssa_vn) #0 !dbg !12491 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ssa_vn.addr = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %expr = alloca %union.tree_node*, align 8
  %e = alloca %struct.pre_expr_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !12494, metadata !DIExpression()), !dbg !12495
  store %union.tree_node* %ssa_vn, %union.tree_node** %ssa_vn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_vn.addr, metadata !12496, metadata !DIExpression()), !dbg !12497
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12498, metadata !DIExpression()), !dbg !12499
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12500
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !12501
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !12499
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12502, metadata !DIExpression()), !dbg !12503
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !12504, metadata !DIExpression()), !dbg !12505
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !12505
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !12506, metadata !DIExpression()), !dbg !12507
  call void @llvm.dbg.declare(metadata %struct.pre_expr_d** %e, metadata !12508, metadata !DIExpression()), !dbg !12509
  %1 = load %union.tree_node*, %union.tree_node** %ssa_vn.addr, align 8, !dbg !12510
  %call1 = call %union.tree_node* @vn_get_expr_for(%union.tree_node* %1), !dbg !12511
  %call2 = call %struct.pre_expr_d* @get_or_alloc_expr_for(%union.tree_node* %call1), !dbg !12512
  store %struct.pre_expr_d* %call2, %struct.pre_expr_d** %e, align 8, !dbg !12513
  %2 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !12514
  %cmp = icmp eq %struct.pre_expr_d* %2, null, !dbg !12516
  br i1 %cmp, label %if.then, label %if.end, !dbg !12517

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12518
  br label %return, !dbg !12518

if.end:                                           ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12519
  %4 = load %struct.pre_expr_d*, %struct.pre_expr_d** %e, align 8, !dbg !12520
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12521
  %call3 = call %union.tree_node* @create_expression_by_pieces(%struct.basic_block_def* %3, %struct.pre_expr_d* %4, %struct.gimple_seq_d** %stmts, %union.gimple_statement_d* %5, %union.tree_node* null), !dbg !12522
  store %union.tree_node* %call3, %union.tree_node** %expr, align 8, !dbg !12523
  %6 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12524
  %cmp4 = icmp eq %union.tree_node* %6, null, !dbg !12526
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !12527

if.then5:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12528
  br label %return, !dbg !12528

if.end6:                                          ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !12529
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %7), !dbg !12530
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12530
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !12530
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !12531
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %gsi, %struct.gimple_seq_d* %10, i32 1), !dbg !12532
  %11 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12533
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !12534
  br label %return, !dbg !12534

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12535
  ret %union.tree_node* %12, !dbg !12535
}

declare dso_local zeroext i8 @may_propagate_copy(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !12536 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12537, metadata !DIExpression()), !dbg !12538
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12539
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !12540
  ret %union.tree_node* %call, !dbg !12541
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !12542 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12543, metadata !DIExpression()), !dbg !12544
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12545
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !12546
  ret %union.tree_node* %call, !dbg !12547
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !12548 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12549, metadata !DIExpression()), !dbg !12550
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12551
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !12552
  ret %union.tree_node* %call, !dbg !12553
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !12554 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12555, metadata !DIExpression()), !dbg !12556
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12557
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !12558
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !12559
  %bf.load = load i32, i32* %1, align 8, !dbg !12559
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12559
  ret i32 %bf.lshr, !dbg !12560
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_false(%union.gimple_statement_d* %gs) #0 !dbg !12561 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12562, metadata !DIExpression()), !dbg !12563
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12564
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !12565
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !12566
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12567
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !12568
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !12569
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12570
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !12571
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !12572
  %bf.load = load i32, i32* %5, align 8, !dbg !12573
  %bf.clear = and i32 %bf.load, 65535, !dbg !12573
  %bf.set = or i32 %bf.clear, 6619136, !dbg !12573
  store i32 %bf.set, i32* %5, align 8, !dbg !12573
  ret void, !dbg !12574
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_true(%union.gimple_statement_d* %gs) #0 !dbg !12575 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12576, metadata !DIExpression()), !dbg !12577
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12578
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !12579
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !12580
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12581
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !12582
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !12583
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12584
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !12585
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !12586
  %bf.load = load i32, i32* %5, align 8, !dbg !12587
  %bf.clear = and i32 %bf.load, 65535, !dbg !12587
  %bf.set = or i32 %bf.clear, 6619136, !dbg !12587
  store i32 %bf.set, i32* %5, align 8, !dbg !12587
  ret void, !dbg !12588
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_fn(%union.gimple_statement_d* %gs, %union.tree_node* %fn) #0 !dbg !12589 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12590, metadata !DIExpression()), !dbg !12591
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !12592, metadata !DIExpression()), !dbg !12593
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12594
  %1 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !12595
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !12596
  ret void, !dbg !12597
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !12598 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12599, metadata !DIExpression()), !dbg !12600
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12601
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !12602
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !12603
  ret %union.tree_node** %result, !dbg !12604
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !12605 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12606, metadata !DIExpression()), !dbg !12607
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !12608, metadata !DIExpression()), !dbg !12609
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12610
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !12611
  br label %while.cond, !dbg !12612

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !12613
  %tobool = icmp ne i8 %call, 0, !dbg !12613
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !12614

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !12615
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !12616
  %cmp = icmp eq i32 %call2, 4, !dbg !12617
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !12618
  br i1 %1, label %while.body, label %while.end, !dbg !12612

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !12619
  br label %while.cond, !dbg !12612, !llvm.loop !12620

while.end:                                        ; preds = %land.end
  ret void, !dbg !12622
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_imm_use(%union.tree_node* %var, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #0 !dbg !12623 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !12627, metadata !DIExpression()), !dbg !12628
  store %struct.ssa_use_operand_d** %use_p, %struct.ssa_use_operand_d*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d*** %use_p.addr, metadata !12629, metadata !DIExpression()), !dbg !12630
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !12631, metadata !DIExpression()), !dbg !12632
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !12633, metadata !DIExpression()), !dbg !12634
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !12635
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !12635
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !12635
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12634
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12636
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12638
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !12639
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !12639
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !12640
  br i1 %cmp, label %if.then, label %if.end, !dbg !12641

if.then:                                          ; preds = %entry
  br label %return_false, !dbg !12642

return_false:                                     ; preds = %if.then14, %if.else, %if.then
  call void @llvm.dbg.label(metadata !12643), !dbg !12645
  %4 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !12646
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %4, align 8, !dbg !12647
  %5 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !12648
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %5, align 8, !dbg !12649
  store i8 0, i8* %retval, align 1, !dbg !12650
  br label %return, !dbg !12650

if.end:                                           ; preds = %entry
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12651
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12653
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 1, !dbg !12654
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !12654
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !12655
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !12655
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %6, %9, !dbg !12656
  br i1 %cmp3, label %if.then4, label %if.end12, !dbg !12657

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12658
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 1, !dbg !12658
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !12658
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !12658
  %stmt6 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !12658
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !12658
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %12), !dbg !12661
  %tobool = icmp ne i8 %call, 0, !dbg !12661
  br i1 %tobool, label %if.else, label %if.then7, !dbg !12662

if.then7:                                         ; preds = %if.then4
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12663
  %next8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %13, i32 0, i32 1, !dbg !12665
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next8, align 8, !dbg !12665
  %15 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !12666
  store %struct.ssa_use_operand_d* %14, %struct.ssa_use_operand_d** %15, align 8, !dbg !12667
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12668
  %next9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 1, !dbg !12669
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next9, align 8, !dbg !12669
  %loc10 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %17, i32 0, i32 2, !dbg !12670
  %stmt11 = bitcast %union.anon* %loc10 to %union.gimple_statement_d**, !dbg !12671
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt11, align 8, !dbg !12671
  %19 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !12672
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %19, align 8, !dbg !12673
  store i8 1, i8* %retval, align 1, !dbg !12674
  br label %return, !dbg !12674

if.else:                                          ; preds = %if.then4
  br label %return_false, !dbg !12675

if.end12:                                         ; preds = %if.end
  %20 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !12676
  %tobool13 = icmp ne i32 %20, 0, !dbg !12676
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !12678

if.then14:                                        ; preds = %if.end12
  br label %return_false, !dbg !12679

if.end15:                                         ; preds = %if.end12
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !12680
  %22 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !12681
  %23 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !12682
  %call16 = call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %21, %struct.ssa_use_operand_d** %22, %union.gimple_statement_d** %23), !dbg !12683
  store i8 %call16, i8* %retval, align 1, !dbg !12684
  br label %return, !dbg !12684

return:                                           ; preds = %if.end15, %if.then7, %return_false
  %24 = load i8, i8* %retval, align 1, !dbg !12685
  ret i8 %24, !dbg !12685
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !12686 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !12689, metadata !DIExpression()), !dbg !12690
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !12691, metadata !DIExpression()), !dbg !12692
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !12693
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !12694
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12695
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !12696
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !12697
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !12697
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !12698
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !12699
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !12700
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !12701
  ret void, !dbg !12702
}

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !12703 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12704, metadata !DIExpression()), !dbg !12705
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12706
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !12707
  %cmp = icmp eq i32 %call, 6, !dbg !12708
  %conv = zext i1 %cmp to i32, !dbg !12708
  %conv1 = trunc i32 %conv to i8, !dbg !12707
  ret i8 %conv1, !dbg !12709
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !12710 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12711, metadata !DIExpression()), !dbg !12712
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12713
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !12714
  ret %union.tree_node* %call, !dbg !12715
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !12716 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12717, metadata !DIExpression()), !dbg !12718
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !12719, metadata !DIExpression()), !dbg !12720
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12721
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !12722
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !12723
  ret void, !dbg !12724
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !12725 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12726, metadata !DIExpression()), !dbg !12727
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !12728, metadata !DIExpression()), !dbg !12729
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12730
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !12731
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !12732
  ret void, !dbg !12733
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !12734 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !12735, metadata !DIExpression()), !dbg !12736
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !12737
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !12738
  %cmp = icmp eq i32 %call, 2, !dbg !12739
  %conv = zext i1 %cmp to i32, !dbg !12739
  %conv1 = trunc i32 %conv to i8, !dbg !12738
  ret i8 %conv1, !dbg !12740
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !12741 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !12744, metadata !DIExpression()), !dbg !12745
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12746
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !12748
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12748
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !12749
  br i1 %cmp, label %if.then, label %if.end, !dbg !12750

if.then:                                          ; preds = %entry
  br label %return, !dbg !12751

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12752
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !12753
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !12753
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12754
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !12755
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !12755
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !12756
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !12757
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12758
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !12759
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !12759
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12760
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !12761
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !12761
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !12762
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !12763
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12764
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !12765
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !12766
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12767
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !12768
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !12769
  br label %return, !dbg !12770

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !12770
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !12771 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !12774, metadata !DIExpression()), !dbg !12775
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !12776, metadata !DIExpression()), !dbg !12777
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !12778, metadata !DIExpression()), !dbg !12779
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !12780
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !12780
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !12782

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !12783
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !12783
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !12783
  %bf.load = load i64, i64* %2, align 8, !dbg !12783
  %bf.clear = and i64 %bf.load, 65535, !dbg !12783
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12783
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !12784
  br i1 %cmp, label %if.then, label %if.else, !dbg !12785

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12786
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !12787
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12788
  br label %if.end, !dbg !12786

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !12789
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !12789
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !12789
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !12791
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12792
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !12793
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !12794
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12795
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !12796 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !12799, metadata !DIExpression()), !dbg !12800
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !12801, metadata !DIExpression()), !dbg !12802
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !12803
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12804
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !12805
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12806
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !12807
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !12808
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !12808
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12809
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !12810
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !12811
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12812
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !12813
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !12814
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !12814
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !12815
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !12816
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !12817
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !12818
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !12819
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !12820
  ret void, !dbg !12821
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_bitmap_set_t_heap_free(%struct.VEC_bitmap_set_t_heap** %vec_) #0 !dbg !12822 {
entry:
  %vec_.addr = alloca %struct.VEC_bitmap_set_t_heap**, align 8
  store %struct.VEC_bitmap_set_t_heap** %vec_, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_bitmap_set_t_heap*** %vec_.addr, metadata !12825, metadata !DIExpression()), !dbg !12826
  %0 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !12827
  %1 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %0, align 8, !dbg !12827
  %tobool = icmp ne %struct.VEC_bitmap_set_t_heap* %1, null, !dbg !12827
  br i1 %tobool, label %if.then, label %if.end, !dbg !12826

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !12827
  %3 = load %struct.VEC_bitmap_set_t_heap*, %struct.VEC_bitmap_set_t_heap** %2, align 8, !dbg !12827
  %4 = bitcast %struct.VEC_bitmap_set_t_heap* %3 to i8*, !dbg !12827
  call void @free(i8* %4), !dbg !12827
  br label %if.end, !dbg !12827

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_bitmap_set_t_heap**, %struct.VEC_bitmap_set_t_heap*** %vec_.addr, align 8, !dbg !12826
  store %struct.VEC_bitmap_set_t_heap* null, %struct.VEC_bitmap_set_t_heap** %5, align 8, !dbg !12826
  ret void, !dbg !12826
}

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_unsigned_heap_free(%struct.VEC_unsigned_heap** %vec_) #0 !dbg !12829 {
entry:
  %vec_.addr = alloca %struct.VEC_unsigned_heap**, align 8
  store %struct.VEC_unsigned_heap** %vec_, %struct.VEC_unsigned_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_unsigned_heap*** %vec_.addr, metadata !12832, metadata !DIExpression()), !dbg !12833
  %0 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12834
  %1 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %0, align 8, !dbg !12834
  %tobool = icmp ne %struct.VEC_unsigned_heap* %1, null, !dbg !12834
  br i1 %tobool, label %if.then, label %if.end, !dbg !12833

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12834
  %3 = load %struct.VEC_unsigned_heap*, %struct.VEC_unsigned_heap** %2, align 8, !dbg !12834
  %4 = bitcast %struct.VEC_unsigned_heap* %3 to i8*, !dbg !12834
  call void @free(i8* %4), !dbg !12834
  br label %if.end, !dbg !12834

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_unsigned_heap**, %struct.VEC_unsigned_heap*** %vec_.addr, align 8, !dbg !12833
  store %struct.VEC_unsigned_heap* null, %struct.VEC_unsigned_heap** %5, align 8, !dbg !12833
  ret void, !dbg !12833
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def*) #2

declare dso_local zeroext i8 @cleanup_tree_cfg() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2649, !2650, !2651}
!llvm.ident = !{!2652}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "value_expressions", scope: !2, file: !3, line: 379, type: !1026, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1024, globals: !2537, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-pre.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !12, !140, !335, !344, !348, !354, !359, !364, !382, !389, !396, !403, !579, !584, !597, !607, !612, !650, !657, !661, !675, !809, !835, !841, !847, !970, !1012, !1019}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pre_expr_kind", file: !3, line: 157, baseType: !6, size: 32, elements: !7)
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !{!8, !9, !10, !11}
!8 = !DIEnumerator(name: "NAME", value: 0, isUnsigned: true)
!9 = !DIEnumerator(name: "NARY", value: 1, isUnsigned: true)
!10 = !DIEnumerator(name: "REFERENCE", value: 2, isUnsigned: true)
!11 = !DIEnumerator(name: "CONSTANT", value: 3, isUnsigned: true)
!12 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !13, line: 7, baseType: !6, size: 32, elements: !14)
!13 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!14 = !{!15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139}
!15 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!16 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!17 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!18 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!19 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!20 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!21 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!22 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!23 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!24 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!25 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!26 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!27 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!28 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!29 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!30 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!31 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!32 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!33 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!34 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!35 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!36 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!37 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!38 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!39 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!40 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!41 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!42 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!43 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!44 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!45 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!46 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!47 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!48 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!49 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!50 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!51 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!52 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!53 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!54 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!55 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!56 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!57 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!58 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!59 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!60 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!61 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!62 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!63 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!64 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!65 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!66 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!67 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!68 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!69 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!70 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!71 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!72 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!73 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!74 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!75 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!76 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!77 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!78 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!79 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!80 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!81 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!82 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!83 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!84 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!85 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!86 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!87 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!88 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!89 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!90 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!91 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!92 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!93 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!94 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!95 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!96 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!97 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!98 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!99 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!100 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!101 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!138 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!139 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !141, line: 39, baseType: !6, size: 32, elements: !142)
!141 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!142 = !{!143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334}
!143 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!144 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!145 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!146 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!147 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!148 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!149 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!150 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!151 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!152 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!153 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!154 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!155 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!156 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!157 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!158 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!159 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!160 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!161 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!162 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!163 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!164 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!165 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!166 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!167 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!168 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!169 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!170 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!171 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!172 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!173 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!174 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!175 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!176 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!177 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!178 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!179 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!180 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!181 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!182 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!183 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!184 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!185 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!186 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!187 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!188 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!189 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!190 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!191 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!192 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!193 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!194 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!195 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!196 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!197 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!198 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!199 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!200 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!201 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!202 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!203 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!204 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!205 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!206 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!207 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!208 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!209 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!210 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!211 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!212 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!213 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!214 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!215 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!216 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!217 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!218 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!219 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!220 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!221 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!222 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!223 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!224 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!225 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!226 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!227 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!228 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!229 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!230 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!231 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!233 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!234 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!235 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!240 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!241 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!242 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!243 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!244 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!245 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!246 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!247 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!248 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!249 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!250 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!251 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!252 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!253 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!254 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!255 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!256 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!257 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!258 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!259 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!260 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!261 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!262 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!263 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!264 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!265 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!266 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!267 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!268 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!269 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!270 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!271 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!272 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!273 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!274 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!275 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!276 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!277 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!278 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!279 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!280 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!281 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!282 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!283 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!284 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!285 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!286 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!287 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!288 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!289 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!290 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!291 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!292 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!293 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!294 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!295 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!307 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!308 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!309 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!310 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!311 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!312 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!328 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!329 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!330 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!331 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!332 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!333 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!334 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !336, line: 31, baseType: !6, size: 32, elements: !337)
!336 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!337 = !{!338, !339, !340, !341, !342, !343}
!338 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!340 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!341 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!342 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!343 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!344 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !336, line: 91, baseType: !6, size: 32, elements: !345)
!345 = !{!346, !347}
!346 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!347 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !349, line: 363, baseType: !6, size: 32, elements: !350)
!349 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!350 = !{!351, !352, !353}
!351 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!352 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!353 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !349, line: 355, baseType: !6, size: 32, elements: !355)
!355 = !{!356, !357, !358}
!356 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!358 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !360, line: 474, baseType: !6, size: 32, elements: !361)
!360 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!361 = !{!362, !363}
!362 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!363 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!364 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !141, line: 280, baseType: !6, size: 32, elements: !365)
!365 = !{!366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381}
!366 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!382 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !141, line: 1817, baseType: !6, size: 32, elements: !383)
!383 = !{!384, !385, !386, !387, !388}
!384 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!389 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !141, line: 1805, baseType: !6, size: 32, elements: !390)
!390 = !{!391, !392, !393, !394, !395}
!391 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!395 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!396 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !397, line: 104, baseType: !6, size: 32, elements: !398)
!397 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!398 = !{!399, !400, !401, !402}
!399 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!400 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !404, line: 74, baseType: !6, size: 32, elements: !405)
!404 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!405 = !{!406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578}
!406 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!578 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!579 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !580, line: 147, baseType: !6, size: 32, elements: !581)
!580 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!581 = !{!582, !583}
!582 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!583 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!584 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !141, line: 58, baseType: !6, size: 32, elements: !585)
!585 = !{!586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596}
!586 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!587 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!588 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!589 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!590 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!591 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!592 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!593 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!594 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!595 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!596 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!597 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !336, line: 170, baseType: !6, size: 32, elements: !598)
!598 = !{!599, !600, !601, !602, !603, !604, !605, !606}
!599 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!600 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!601 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!602 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!603 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!604 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!605 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!606 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!607 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plf_mask", file: !608, line: 130, baseType: !6, size: 32, elements: !609)
!608 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!609 = !{!610, !611}
!610 = !DIEnumerator(name: "GF_PLF_1", value: 1, isUnsigned: true)
!611 = !DIEnumerator(name: "GF_PLF_2", value: 2, isUnsigned: true)
!612 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !608, line: 51, baseType: !6, size: 32, elements: !613)
!613 = !{!614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649}
!614 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!634 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!635 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!636 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!637 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!638 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!639 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!640 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!641 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!642 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!646 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!647 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!648 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!649 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!650 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !651, line: 119, baseType: !6, size: 32, elements: !652)
!651 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!652 = !{!653, !654, !655, !656}
!653 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!654 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!655 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!656 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!657 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !349, line: 912, baseType: !6, size: 32, elements: !658)
!658 = !{!659, !660}
!659 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!660 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!661 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !349, line: 295, baseType: !6, size: 32, elements: !662)
!662 = !{!663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674}
!663 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!664 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!665 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!666 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!667 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!668 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!669 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!670 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!671 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!672 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!673 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!674 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!675 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !141, line: 3410, baseType: !6, size: 32, elements: !676)
!676 = !{!677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808}
!677 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!801 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!802 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!803 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!804 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!805 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!806 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!807 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!808 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!809 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !608, line: 727, baseType: !6, size: 32, elements: !810)
!810 = !{!811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834}
!811 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!812 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!813 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!814 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!815 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!816 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!817 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!818 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!819 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!820 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!821 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!822 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!823 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!824 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!825 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!826 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!827 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!828 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!829 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!830 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!831 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!832 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!833 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!834 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!835 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !608, line: 80, baseType: !6, size: 32, elements: !836)
!836 = !{!837, !838, !839, !840}
!837 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!838 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!839 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!840 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!841 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !141, line: 205, baseType: !6, size: 32, elements: !842)
!842 = !{!843, !844, !845, !846}
!843 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!847 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !848, line: 82, baseType: !6, size: 32, elements: !849)
!848 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!849 = !{!850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969}
!850 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!851 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!852 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!853 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!854 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!855 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!856 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!857 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!858 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!859 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!860 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!861 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!862 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!863 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!864 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!865 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!866 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!867 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!868 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!869 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!870 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!871 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!872 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!873 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!874 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!875 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!876 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!877 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!878 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!879 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!880 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!881 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!882 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!883 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!884 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!885 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!886 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!887 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!888 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!889 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!890 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!891 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!892 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!893 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!894 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!895 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!896 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!897 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!898 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!899 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!900 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!901 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!902 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!903 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!904 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!905 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!906 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!907 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!908 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!909 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!910 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!911 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!912 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!913 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!914 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!915 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!916 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!917 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!918 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!919 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!920 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!921 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!922 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!923 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!924 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!925 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!926 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!927 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!928 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!929 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!930 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!931 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!932 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!933 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!934 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!935 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!936 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!937 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!938 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!939 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!940 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!941 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!942 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!943 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!944 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!945 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!946 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!947 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!948 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!949 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!950 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!951 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!952 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!953 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!954 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!955 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!956 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!957 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!958 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!959 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!960 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!961 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!962 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!963 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!964 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!965 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!966 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!967 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!968 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!969 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!970 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !971, line: 27, baseType: !6, size: 32, elements: !972)
!971 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!972 = !{!973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011}
!973 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!974 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!975 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!976 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!977 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!978 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!979 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!980 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!981 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!982 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!983 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!984 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!985 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!986 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!987 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!988 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!989 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!990 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!991 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!992 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!993 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!994 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!995 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!996 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!997 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!998 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!999 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!1000 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!1001 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!1002 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!1003 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!1004 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!1005 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!1006 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!1007 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!1008 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!1009 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!1010 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!1011 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!1012 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !141, line: 4288, baseType: !6, size: 32, elements: !1013)
!1013 = !{!1014, !1015, !1016, !1017, !1018}
!1014 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1015 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1016 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1017 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1018 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1019 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !608, line: 4603, baseType: !6, size: 32, elements: !1020)
!1020 = !{!1021, !1022, !1023}
!1021 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1022 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1023 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1024 = !{!6, !1025, !1026, !1038, !1112, !2459, !2471, !2484, !140, !2499, !1100, !1386, !1123, !2504, !2485, !2505, !1061, !2512, !2521, !2523, !1387, !2524, !1420, !1084, !835, !2526, !2531, !1246, !2438, !1043, !2532, !1838, !2533, !2534}
!1025 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1027, size: 64)
!1027 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_set_t_heap", file: !3, line: 378, baseType: !1028)
!1028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_set_t_heap", file: !3, line: 378, size: 128, elements: !1029)
!1029 = !{!1030}
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1028, file: !3, line: 378, baseType: !1031, size: 128)
!1031 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_bitmap_set_t_base", file: !3, line: 377, baseType: !1032)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_bitmap_set_t_base", file: !3, line: 377, size: 128, elements: !1033)
!1033 = !{!1034, !1035, !1036}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1032, file: !3, line: 377, baseType: !6, size: 32)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1032, file: !3, line: 377, baseType: !6, size: 32, offset: 32)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1032, file: !3, line: 377, baseType: !1037, size: 64, offset: 64)
!1037 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1038, size: 64, elements: !1110)
!1038 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_set_t", file: !3, line: 368, baseType: !1039)
!1039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1040, size: 64)
!1040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_set", file: !3, line: 364, size: 128, elements: !1041)
!1041 = !{!1042, !1109}
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "expressions", scope: !1040, file: !3, line: 366, baseType: !1043, size: 64)
!1043 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1044, line: 47, baseType: !1045)
!1044 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1046, size: 64)
!1046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1047, line: 75, size: 256, elements: !1048)
!1047 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1048 = !{!1049, !1064, !1065, !1066}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1046, file: !1047, line: 76, baseType: !1050, size: 64)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64)
!1051 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1047, line: 68, baseType: !1052)
!1052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1047, line: 63, size: 320, elements: !1053)
!1053 = !{!1054, !1056, !1057, !1058}
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1052, file: !1047, line: 64, baseType: !1055, size: 64)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1052, size: 64)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1052, file: !1047, line: 65, baseType: !1055, size: 64, offset: 64)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1052, file: !1047, line: 66, baseType: !6, size: 32, offset: 128)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1052, file: !1047, line: 67, baseType: !1059, size: 128, offset: 192)
!1059 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1060, size: 128, elements: !1062)
!1060 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1047, line: 29, baseType: !1061)
!1061 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1062 = !{!1063}
!1063 = !DISubrange(count: 2)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1046, file: !1047, line: 77, baseType: !1050, size: 64, offset: 64)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1046, file: !1047, line: 78, baseType: !6, size: 32, offset: 128)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1046, file: !1047, line: 79, baseType: !1067, size: 64, offset: 192)
!1067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1068, size: 64)
!1068 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1047, line: 49, baseType: !1069)
!1069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1047, line: 45, size: 832, elements: !1070)
!1070 = !{!1071, !1072, !1073}
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1069, file: !1047, line: 46, baseType: !1055, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1069, file: !1047, line: 47, baseType: !1045, size: 64, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1069, file: !1047, line: 48, baseType: !1074, size: 704, offset: 128)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1075, line: 164, size: 704, elements: !1076)
!1075 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1076 = !{!1077, !1079, !1091, !1092, !1093, !1094, !1095, !1096, !1101, !1105, !1106, !1107, !1108}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1074, file: !1075, line: 166, baseType: !1078, size: 64)
!1078 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1074, file: !1075, line: 167, baseType: !1080, size: 64, offset: 64)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1075, line: 157, size: 192, elements: !1082)
!1082 = !{!1083, !1086, !1087}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1081, file: !1075, line: 159, baseType: !1084, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1085, size: 64)
!1085 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1081, file: !1075, line: 160, baseType: !1080, size: 64, offset: 64)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1081, file: !1075, line: 161, baseType: !1088, size: 32, offset: 128)
!1088 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 32, elements: !1089)
!1089 = !{!1090}
!1090 = !DISubrange(count: 4)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1074, file: !1075, line: 168, baseType: !1084, size: 64, offset: 128)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1074, file: !1075, line: 169, baseType: !1084, size: 64, offset: 192)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1074, file: !1075, line: 170, baseType: !1084, size: 64, offset: 256)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1074, file: !1075, line: 171, baseType: !1078, size: 64, offset: 320)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1074, file: !1075, line: 172, baseType: !1025, size: 32, offset: 384)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1074, file: !1075, line: 176, baseType: !1097, size: 64, offset: 448)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64)
!1098 = !DISubroutineType(types: !1099)
!1099 = !{!1080, !1100, !1078}
!1100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1074, file: !1075, line: 177, baseType: !1102, size: 64, offset: 512)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{null, !1100, !1080}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1074, file: !1075, line: 178, baseType: !1100, size: 64, offset: 576)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1074, file: !1075, line: 179, baseType: !6, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1074, file: !1075, line: 180, baseType: !6, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1074, file: !1075, line: 184, baseType: !6, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1040, file: !3, line: 367, baseType: !1043, size: 64, offset: 64)
!1110 = !{!1111}
!1111 = !DISubrange(count: 1)
!1112 = !DIDerivedType(tag: DW_TAG_typedef, name: "pre_expr", file: !3, line: 178, baseType: !1113)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pre_expr_d", file: !3, line: 173, size: 128, elements: !1115)
!1115 = !{!1116, !1117, !1118}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !1114, file: !3, line: 175, baseType: !5, size: 32)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1114, file: !3, line: 176, baseType: !6, size: 32, offset: 32)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1114, file: !3, line: 177, baseType: !1119, size: 64, offset: 64)
!1119 = !DIDerivedType(tag: DW_TAG_typedef, name: "pre_expr_union", file: !3, line: 171, baseType: !1120)
!1120 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "pre_expr_union_d", file: !3, line: 165, size: 64, elements: !1121)
!1121 = !{!1122, !2412, !2413, !2427}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1120, file: !3, line: 167, baseType: !1123, size: 64)
!1123 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1044, line: 56, baseType: !1124)
!1124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!1125 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !141, line: 3371, size: 1792, elements: !1126)
!1126 = !{!1127, !1160, !1166, !1177, !1196, !1207, !1212, !1219, !1225, !1239, !1251, !1289, !1742, !1770, !1787, !1788, !1793, !1802, !1808, !1813, !1817, !1821, !2063, !2110, !2116, !2122, !2129, !2142, !2156, !2173, !2185, !2207, !2222, !2394}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1125, file: !141, line: 3372, baseType: !1128, size: 64)
!1128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !141, line: 360, size: 64, elements: !1129)
!1129 = !{!1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159}
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1128, file: !141, line: 361, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1128, file: !141, line: 363, baseType: !6, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1128, file: !141, line: 364, baseType: !6, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1128, file: !141, line: 365, baseType: !6, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1128, file: !141, line: 366, baseType: !6, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1128, file: !141, line: 367, baseType: !6, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1128, file: !141, line: 368, baseType: !6, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1128, file: !141, line: 369, baseType: !6, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1128, file: !141, line: 370, baseType: !6, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1128, file: !141, line: 372, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1128, file: !141, line: 373, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1128, file: !141, line: 374, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1128, file: !141, line: 375, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1128, file: !141, line: 376, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1128, file: !141, line: 377, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1128, file: !141, line: 378, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1128, file: !141, line: 379, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1128, file: !141, line: 381, baseType: !6, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1128, file: !141, line: 382, baseType: !6, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1128, file: !141, line: 383, baseType: !6, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1128, file: !141, line: 384, baseType: !6, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1128, file: !141, line: 385, baseType: !6, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1128, file: !141, line: 386, baseType: !6, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1128, file: !141, line: 387, baseType: !6, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1128, file: !141, line: 388, baseType: !6, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1128, file: !141, line: 390, baseType: !6, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1128, file: !141, line: 391, baseType: !6, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1128, file: !141, line: 392, baseType: !6, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1128, file: !141, line: 394, baseType: !6, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1128, file: !141, line: 399, baseType: !6, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1125, file: !141, line: 3373, baseType: !1161, size: 192)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !141, line: 402, size: 192, elements: !1162)
!1162 = !{!1163, !1164, !1165}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1161, file: !141, line: 403, baseType: !1128, size: 64)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1161, file: !141, line: 404, baseType: !1123, size: 64, offset: 64)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1161, file: !141, line: 405, baseType: !1123, size: 64, offset: 128)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1125, file: !141, line: 3374, baseType: !1167, size: 320)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !141, line: 1384, size: 320, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1167, file: !141, line: 1385, baseType: !1161, size: 192)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1167, file: !141, line: 1386, baseType: !1171, size: 128, offset: 192)
!1171 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1172, line: 58, baseType: !1173)
!1172 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1173 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1172, line: 54, size: 128, elements: !1174)
!1174 = !{!1175, !1176}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1173, file: !1172, line: 56, baseType: !1061, size: 64)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1173, file: !1172, line: 57, baseType: !1078, size: 64, offset: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1125, file: !141, line: 3375, baseType: !1178, size: 256)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !141, line: 1397, size: 256, elements: !1179)
!1179 = !{!1180, !1181}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1178, file: !141, line: 1398, baseType: !1161, size: 192)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1178, file: !141, line: 1399, baseType: !1182, size: 64, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1183, size: 64)
!1183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1184, line: 52, size: 256, elements: !1185)
!1184 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1185 = !{!1186, !1187, !1188, !1189, !1190, !1191, !1192}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1183, file: !1184, line: 56, baseType: !6, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1183, file: !1184, line: 57, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1183, file: !1184, line: 58, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1183, file: !1184, line: 59, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1183, file: !1184, line: 60, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1183, file: !1184, line: 61, baseType: !6, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1183, file: !1184, line: 62, baseType: !1193, size: 192, offset: 64)
!1193 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1061, size: 192, elements: !1194)
!1194 = !{!1195}
!1195 = !DISubrange(count: 3)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1125, file: !141, line: 3376, baseType: !1197, size: 256)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !141, line: 1408, size: 256, elements: !1198)
!1198 = !{!1199, !1200}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1197, file: !141, line: 1409, baseType: !1161, size: 192)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1197, file: !141, line: 1410, baseType: !1201, size: 64, offset: 192)
!1201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1202, size: 64)
!1202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1203, line: 27, size: 192, elements: !1204)
!1203 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1204 = !{!1205, !1206}
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1202, file: !1203, line: 29, baseType: !1171, size: 128)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1202, file: !1203, line: 30, baseType: !12, size: 32, offset: 128)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1125, file: !141, line: 3377, baseType: !1208, size: 256)
!1208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !141, line: 1437, size: 256, elements: !1209)
!1209 = !{!1210, !1211}
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1208, file: !141, line: 1438, baseType: !1161, size: 192)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1208, file: !141, line: 1439, baseType: !1123, size: 64, offset: 192)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1125, file: !141, line: 3378, baseType: !1213, size: 256)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !141, line: 1418, size: 256, elements: !1214)
!1214 = !{!1215, !1216, !1217}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1213, file: !141, line: 1419, baseType: !1161, size: 192)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1213, file: !141, line: 1420, baseType: !1025, size: 32, offset: 192)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1213, file: !141, line: 1421, baseType: !1218, size: 8, offset: 224)
!1218 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 8, elements: !1110)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1125, file: !141, line: 3379, baseType: !1220, size: 320)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !141, line: 1428, size: 320, elements: !1221)
!1221 = !{!1222, !1223, !1224}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1220, file: !141, line: 1429, baseType: !1161, size: 192)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1220, file: !141, line: 1430, baseType: !1123, size: 64, offset: 192)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1220, file: !141, line: 1431, baseType: !1123, size: 64, offset: 256)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1125, file: !141, line: 3380, baseType: !1226, size: 320)
!1226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !141, line: 1460, size: 320, elements: !1227)
!1227 = !{!1228, !1229}
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1226, file: !141, line: 1461, baseType: !1161, size: 192)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1226, file: !141, line: 1462, baseType: !1230, size: 128, offset: 192)
!1230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1231, line: 31, size: 128, elements: !1232)
!1231 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1232 = !{!1233, !1237, !1238}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1230, file: !1231, line: 32, baseType: !1234, size: 64)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1236)
!1236 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1230, file: !1231, line: 33, baseType: !6, size: 32, offset: 64)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1230, file: !1231, line: 34, baseType: !6, size: 32, offset: 96)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1125, file: !141, line: 3381, baseType: !1240, size: 384)
!1240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !141, line: 2507, size: 384, elements: !1241)
!1241 = !{!1242, !1243, !1248, !1249, !1250}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1240, file: !141, line: 2508, baseType: !1161, size: 192)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1240, file: !141, line: 2509, baseType: !1244, size: 32, offset: 192)
!1244 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1245, line: 58, baseType: !1246)
!1245 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1246 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1247, line: 44, baseType: !6)
!1247 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1240, file: !141, line: 2510, baseType: !6, size: 32, offset: 224)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1240, file: !141, line: 2511, baseType: !1123, size: 64, offset: 256)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1240, file: !141, line: 2512, baseType: !1123, size: 64, offset: 320)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1125, file: !141, line: 3382, baseType: !1252, size: 896)
!1252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !141, line: 2652, size: 896, elements: !1253)
!1253 = !{!1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1252, file: !141, line: 2653, baseType: !1240, size: 384)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1252, file: !141, line: 2654, baseType: !1123, size: 64, offset: 384)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1252, file: !141, line: 2656, baseType: !6, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1252, file: !141, line: 2658, baseType: !6, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1252, file: !141, line: 2659, baseType: !6, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1252, file: !141, line: 2660, baseType: !6, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1252, file: !141, line: 2661, baseType: !6, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1252, file: !141, line: 2662, baseType: !6, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1252, file: !141, line: 2663, baseType: !6, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1252, file: !141, line: 2664, baseType: !6, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1252, file: !141, line: 2666, baseType: !6, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1252, file: !141, line: 2667, baseType: !6, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1252, file: !141, line: 2668, baseType: !6, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1252, file: !141, line: 2669, baseType: !6, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1252, file: !141, line: 2670, baseType: !6, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1252, file: !141, line: 2671, baseType: !6, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1252, file: !141, line: 2672, baseType: !6, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1252, file: !141, line: 2673, baseType: !6, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1252, file: !141, line: 2674, baseType: !6, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1252, file: !141, line: 2678, baseType: !6, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1252, file: !141, line: 2682, baseType: !6, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1252, file: !141, line: 2685, baseType: !6, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1252, file: !141, line: 2688, baseType: !6, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1252, file: !141, line: 2690, baseType: !6, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1252, file: !141, line: 2692, baseType: !6, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1252, file: !141, line: 2695, baseType: !6, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1252, file: !141, line: 2698, baseType: !6, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1252, file: !141, line: 2703, baseType: !6, size: 32, offset: 512)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1252, file: !141, line: 2705, baseType: !1123, size: 64, offset: 576)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1252, file: !141, line: 2706, baseType: !1123, size: 64, offset: 640)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1252, file: !141, line: 2707, baseType: !1123, size: 64, offset: 704)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1252, file: !141, line: 2708, baseType: !1123, size: 64, offset: 768)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1252, file: !141, line: 2711, baseType: !1287, size: 64, offset: 832)
!1287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1288, size: 64)
!1288 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !141, line: 2711, flags: DIFlagFwdDecl)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1125, file: !141, line: 3383, baseType: !1290, size: 960)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !141, line: 2756, size: 960, elements: !1291)
!1291 = !{!1292, !1293}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1290, file: !141, line: 2757, baseType: !1252, size: 896)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1290, file: !141, line: 2758, baseType: !1294, size: 64, offset: 896)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1044, line: 50, baseType: !1295)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1297, line: 240, size: 384, elements: !1298)
!1297 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1298 = !{!1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1296, file: !1297, line: 242, baseType: !6, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1296, file: !1297, line: 245, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1296, file: !1297, line: 252, baseType: !6, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1296, file: !1297, line: 257, baseType: !6, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1296, file: !1297, line: 265, baseType: !6, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1296, file: !1297, line: 277, baseType: !6, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1296, file: !1297, line: 291, baseType: !6, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1296, file: !1297, line: 298, baseType: !6, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1296, file: !1297, line: 305, baseType: !6, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1296, file: !1297, line: 310, baseType: !6, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1296, file: !1297, line: 321, baseType: !1310, size: 320, offset: 64)
!1310 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1297, line: 315, size: 320, elements: !1311)
!1311 = !{!1312, !1709, !1711, !1740, !1741}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1310, file: !1297, line: 316, baseType: !1313, size: 64)
!1313 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1314, size: 64, elements: !1110)
!1314 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1297, line: 183, baseType: !1315)
!1315 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1297, line: 166, size: 64, elements: !1316)
!1316 = !{!1317, !1318, !1319, !1322, !1323, !1331, !1332, !1344, !1347, !1348, !1349, !1686, !1699, !1706}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1315, file: !1297, line: 168, baseType: !1025, size: 32)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1315, file: !1297, line: 169, baseType: !6, size: 32)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1315, file: !1297, line: 170, baseType: !1320, size: 64)
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64)
!1321 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1085)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1315, file: !1297, line: 171, baseType: !1294, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1315, file: !1297, line: 172, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1044, line: 53, baseType: !1325)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1297, line: 359, size: 128, elements: !1327)
!1327 = !{!1328, !1329}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1326, file: !1297, line: 360, baseType: !1025, size: 32)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1326, file: !1297, line: 361, baseType: !1330, size: 64, offset: 64)
!1330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 64, elements: !1110)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1315, file: !1297, line: 173, baseType: !12, size: 32)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1315, file: !1297, line: 174, baseType: !1333, size: 32)
!1333 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1297, line: 133, baseType: !1334)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1297, line: 115, size: 32, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1334, file: !1297, line: 118, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1334, file: !1297, line: 120, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1334, file: !1297, line: 121, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1334, file: !1297, line: 123, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1334, file: !1297, line: 125, baseType: !6, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1334, file: !1297, line: 127, baseType: !6, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1334, file: !1297, line: 130, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1334, file: !1297, line: 132, baseType: !6, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1315, file: !1297, line: 175, baseType: !1345, size: 64)
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1346, size: 64)
!1346 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1297, line: 175, flags: DIFlagFwdDecl)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1315, file: !1297, line: 176, baseType: !1045, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1315, file: !1297, line: 177, baseType: !1123, size: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1315, file: !1297, line: 178, baseType: !1350, size: 64)
!1350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1351, size: 64)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !349, line: 217, size: 832, elements: !1352)
!1352 = !{!1353, !1598, !1599, !1600, !1656, !1660, !1661, !1662, !1680, !1681, !1682, !1683, !1684, !1685}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1351, file: !349, line: 219, baseType: !1354, size: 64)
!1354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1355, size: 64)
!1355 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !349, line: 151, baseType: !1356)
!1356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !349, line: 151, size: 128, elements: !1357)
!1357 = !{!1358}
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1356, file: !349, line: 151, baseType: !1359, size: 128)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !349, line: 150, baseType: !1360)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !349, line: 150, size: 128, elements: !1361)
!1361 = !{!1362, !1363, !1364}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1360, file: !349, line: 150, baseType: !6, size: 32)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1360, file: !349, line: 150, baseType: !6, size: 32, offset: 32)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1360, file: !349, line: 150, baseType: !1365, size: 64, offset: 64)
!1365 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1366, size: 64, elements: !1110)
!1366 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1044, line: 108, baseType: !1367)
!1367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1368, size: 64)
!1368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !349, line: 122, size: 512, elements: !1369)
!1369 = !{!1370, !1371, !1372, !1590, !1591, !1592, !1593, !1594, !1595, !1596}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1368, file: !349, line: 124, baseType: !1350, size: 64)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1368, file: !349, line: 125, baseType: !1350, size: 64, offset: 64)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1368, file: !349, line: 131, baseType: !1373, size: 64, offset: 128)
!1373 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !349, line: 128, size: 64, elements: !1374)
!1374 = !{!1375, !1589}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1373, file: !349, line: 129, baseType: !1376, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1044, line: 66, baseType: !1377)
!1377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1378, size: 64)
!1378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !608, line: 143, size: 192, elements: !1379)
!1379 = !{!1380, !1587, !1588}
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1378, file: !608, line: 145, baseType: !1381, size: 64)
!1381 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1044, line: 69, baseType: !1382)
!1382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1383, size: 64)
!1383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !608, line: 136, size: 192, elements: !1384)
!1384 = !{!1385, !1585, !1586}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1383, file: !608, line: 137, baseType: !1386, size: 64)
!1386 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1044, line: 58, baseType: !1387)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !608, line: 737, size: 768, elements: !1389)
!1389 = !{!1390, !1407, !1440, !1446, !1451, !1456, !1463, !1469, !1475, !1480, !1494, !1499, !1505, !1510, !1520, !1525, !1543, !1550, !1557, !1563, !1568, !1574, !1580}
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1388, file: !608, line: 738, baseType: !1391, size: 256)
!1391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !608, line: 271, size: 256, elements: !1392)
!1392 = !{!1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406}
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1391, file: !608, line: 274, baseType: !6, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1391, file: !608, line: 277, baseType: !6, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1391, file: !608, line: 281, baseType: !6, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1391, file: !608, line: 284, baseType: !6, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1391, file: !608, line: 291, baseType: !6, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1391, file: !608, line: 295, baseType: !6, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1391, file: !608, line: 298, baseType: !6, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1391, file: !608, line: 301, baseType: !6, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1391, file: !608, line: 307, baseType: !6, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1391, file: !608, line: 312, baseType: !6, size: 32, offset: 32)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1391, file: !608, line: 316, baseType: !1244, size: 32, offset: 64)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1391, file: !608, line: 319, baseType: !6, size: 32, offset: 96)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1391, file: !608, line: 323, baseType: !1350, size: 64, offset: 128)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1391, file: !608, line: 327, baseType: !1123, size: 64, offset: 192)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1388, file: !608, line: 739, baseType: !1408, size: 448)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !608, line: 350, size: 448, elements: !1409)
!1409 = !{!1410, !1438}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1408, file: !608, line: 353, baseType: !1411, size: 384)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !608, line: 333, size: 384, elements: !1412)
!1412 = !{!1413, !1414, !1421}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1411, file: !608, line: 336, baseType: !1391, size: 256)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1411, file: !608, line: 343, baseType: !1415, size: 64, offset: 256)
!1415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1416, size: 64)
!1416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !651, line: 37, size: 128, elements: !1417)
!1417 = !{!1418, !1419}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1416, file: !651, line: 39, baseType: !1415, size: 64)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1416, file: !651, line: 40, baseType: !1420, size: 64, offset: 64)
!1420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1123, size: 64)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1411, file: !608, line: 344, baseType: !1422, size: 64, offset: 320)
!1422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !651, line: 45, size: 320, elements: !1424)
!1424 = !{!1425, !1426}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1423, file: !651, line: 47, baseType: !1422, size: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1423, file: !651, line: 48, baseType: !1427, size: 256, offset: 64)
!1427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !141, line: 1883, size: 256, elements: !1428)
!1428 = !{!1429, !1431, !1432, !1437}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1427, file: !141, line: 1884, baseType: !1430, size: 64)
!1430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1427, size: 64)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1427, file: !141, line: 1885, baseType: !1430, size: 64, offset: 64)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1427, file: !141, line: 1891, baseType: !1433, size: 64, offset: 128)
!1433 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1427, file: !141, line: 1891, size: 64, elements: !1434)
!1434 = !{!1435, !1436}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1433, file: !141, line: 1891, baseType: !1386, size: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1433, file: !141, line: 1891, baseType: !1123, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1427, file: !141, line: 1892, baseType: !1420, size: 64, offset: 192)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1408, file: !608, line: 359, baseType: !1439, size: 64, offset: 384)
!1439 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1123, size: 64, elements: !1110)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1388, file: !608, line: 740, baseType: !1441, size: 512)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !608, line: 365, size: 512, elements: !1442)
!1442 = !{!1443, !1444, !1445}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1441, file: !608, line: 368, baseType: !1411, size: 384)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1441, file: !608, line: 373, baseType: !1123, size: 64, offset: 384)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1441, file: !608, line: 374, baseType: !1123, size: 64, offset: 448)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1388, file: !608, line: 741, baseType: !1447, size: 576)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !608, line: 380, size: 576, elements: !1448)
!1448 = !{!1449, !1450}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1447, file: !608, line: 383, baseType: !1441, size: 512)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1447, file: !608, line: 389, baseType: !1439, size: 64, offset: 512)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1388, file: !608, line: 742, baseType: !1452, size: 320)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !608, line: 395, size: 320, elements: !1453)
!1453 = !{!1454, !1455}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1452, file: !608, line: 397, baseType: !1391, size: 256)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1452, file: !608, line: 400, baseType: !1376, size: 64, offset: 256)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1388, file: !608, line: 743, baseType: !1457, size: 448)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !608, line: 406, size: 448, elements: !1458)
!1458 = !{!1459, !1460, !1461, !1462}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1457, file: !608, line: 408, baseType: !1391, size: 256)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1457, file: !608, line: 412, baseType: !1123, size: 64, offset: 256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1457, file: !608, line: 420, baseType: !1123, size: 64, offset: 320)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1457, file: !608, line: 423, baseType: !1376, size: 64, offset: 384)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1388, file: !608, line: 744, baseType: !1464, size: 384)
!1464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !608, line: 429, size: 384, elements: !1465)
!1465 = !{!1466, !1467, !1468}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1464, file: !608, line: 431, baseType: !1391, size: 256)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1464, file: !608, line: 434, baseType: !1123, size: 64, offset: 256)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1464, file: !608, line: 437, baseType: !1376, size: 64, offset: 320)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1388, file: !608, line: 745, baseType: !1470, size: 384)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !608, line: 443, size: 384, elements: !1471)
!1471 = !{!1472, !1473, !1474}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1470, file: !608, line: 445, baseType: !1391, size: 256)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1470, file: !608, line: 449, baseType: !1123, size: 64, offset: 256)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1470, file: !608, line: 453, baseType: !1376, size: 64, offset: 320)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1388, file: !608, line: 746, baseType: !1476, size: 320)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !608, line: 459, size: 320, elements: !1477)
!1477 = !{!1478, !1479}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1476, file: !608, line: 461, baseType: !1391, size: 256)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1476, file: !608, line: 464, baseType: !1123, size: 64, offset: 256)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1388, file: !608, line: 747, baseType: !1481, size: 768)
!1481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !608, line: 469, size: 768, elements: !1482)
!1482 = !{!1483, !1484, !1485, !1486, !1487}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1481, file: !608, line: 471, baseType: !1391, size: 256)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1481, file: !608, line: 474, baseType: !6, size: 32, offset: 256)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1481, file: !608, line: 475, baseType: !6, size: 32, offset: 288)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1481, file: !608, line: 478, baseType: !1123, size: 64, offset: 320)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1481, file: !608, line: 481, baseType: !1488, size: 384, offset: 384)
!1488 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1489, size: 384, elements: !1110)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !141, line: 1917, size: 384, elements: !1490)
!1490 = !{!1491, !1492, !1493}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1489, file: !141, line: 1920, baseType: !1427, size: 256)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1489, file: !141, line: 1921, baseType: !1123, size: 64, offset: 256)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1489, file: !141, line: 1922, baseType: !1244, size: 32, offset: 320)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1388, file: !608, line: 748, baseType: !1495, size: 320)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !608, line: 487, size: 320, elements: !1496)
!1496 = !{!1497, !1498}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1495, file: !608, line: 490, baseType: !1391, size: 256)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1495, file: !608, line: 494, baseType: !1025, size: 32, offset: 256)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1388, file: !608, line: 749, baseType: !1500, size: 384)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !608, line: 500, size: 384, elements: !1501)
!1501 = !{!1502, !1503, !1504}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1500, file: !608, line: 502, baseType: !1391, size: 256)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1500, file: !608, line: 506, baseType: !1376, size: 64, offset: 256)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1500, file: !608, line: 510, baseType: !1376, size: 64, offset: 320)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1388, file: !608, line: 750, baseType: !1506, size: 320)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !608, line: 529, size: 320, elements: !1507)
!1507 = !{!1508, !1509}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1506, file: !608, line: 531, baseType: !1391, size: 256)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1506, file: !608, line: 540, baseType: !1376, size: 64, offset: 256)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1388, file: !608, line: 751, baseType: !1511, size: 704)
!1511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !608, line: 546, size: 704, elements: !1512)
!1512 = !{!1513, !1514, !1515, !1516, !1517, !1518, !1519}
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1511, file: !608, line: 549, baseType: !1441, size: 512)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1511, file: !608, line: 553, baseType: !1320, size: 64, offset: 512)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1511, file: !608, line: 557, baseType: !1236, size: 8, offset: 576)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1511, file: !608, line: 558, baseType: !1236, size: 8, offset: 584)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1511, file: !608, line: 559, baseType: !1236, size: 8, offset: 592)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1511, file: !608, line: 560, baseType: !1236, size: 8, offset: 600)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1511, file: !608, line: 566, baseType: !1439, size: 64, offset: 640)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1388, file: !608, line: 752, baseType: !1521, size: 384)
!1521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !608, line: 571, size: 384, elements: !1522)
!1522 = !{!1523, !1524}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1521, file: !608, line: 573, baseType: !1452, size: 320)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1521, file: !608, line: 577, baseType: !1123, size: 64, offset: 320)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1388, file: !608, line: 753, baseType: !1526, size: 576)
!1526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !608, line: 600, size: 576, elements: !1527)
!1527 = !{!1528, !1529, !1530, !1533, !1542}
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1526, file: !608, line: 602, baseType: !1452, size: 320)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1526, file: !608, line: 605, baseType: !1123, size: 64, offset: 320)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1526, file: !608, line: 609, baseType: !1531, size: 64, offset: 384)
!1531 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1532, line: 46, baseType: !1061)
!1532 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1526, file: !608, line: 612, baseType: !1534, size: 64, offset: 448)
!1534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1535, size: 64)
!1535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !608, line: 581, size: 320, elements: !1536)
!1536 = !{!1537, !1538, !1539, !1540, !1541}
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1535, file: !608, line: 583, baseType: !140, size: 32)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1535, file: !608, line: 586, baseType: !1123, size: 64, offset: 64)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1535, file: !608, line: 589, baseType: !1123, size: 64, offset: 128)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1535, file: !608, line: 592, baseType: !1123, size: 64, offset: 192)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1535, file: !608, line: 595, baseType: !1123, size: 64, offset: 256)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1526, file: !608, line: 616, baseType: !1376, size: 64, offset: 512)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1388, file: !608, line: 754, baseType: !1544, size: 512)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !608, line: 622, size: 512, elements: !1545)
!1545 = !{!1546, !1547, !1548, !1549}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1544, file: !608, line: 624, baseType: !1452, size: 320)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1544, file: !608, line: 628, baseType: !1123, size: 64, offset: 320)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1544, file: !608, line: 632, baseType: !1123, size: 64, offset: 384)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1544, file: !608, line: 636, baseType: !1123, size: 64, offset: 448)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1388, file: !608, line: 755, baseType: !1551, size: 704)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !608, line: 642, size: 704, elements: !1552)
!1552 = !{!1553, !1554, !1555, !1556}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1551, file: !608, line: 644, baseType: !1544, size: 512)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1551, file: !608, line: 648, baseType: !1123, size: 64, offset: 512)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1551, file: !608, line: 652, baseType: !1123, size: 64, offset: 576)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1551, file: !608, line: 653, baseType: !1123, size: 64, offset: 640)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1388, file: !608, line: 756, baseType: !1558, size: 448)
!1558 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !608, line: 663, size: 448, elements: !1559)
!1559 = !{!1560, !1561, !1562}
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1558, file: !608, line: 665, baseType: !1452, size: 320)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1558, file: !608, line: 668, baseType: !1123, size: 64, offset: 320)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1558, file: !608, line: 673, baseType: !1123, size: 64, offset: 384)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1388, file: !608, line: 757, baseType: !1564, size: 384)
!1564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !608, line: 694, size: 384, elements: !1565)
!1565 = !{!1566, !1567}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1564, file: !608, line: 696, baseType: !1452, size: 320)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1564, file: !608, line: 699, baseType: !1123, size: 64, offset: 320)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1388, file: !608, line: 758, baseType: !1569, size: 384)
!1569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !608, line: 681, size: 384, elements: !1570)
!1570 = !{!1571, !1572, !1573}
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1569, file: !608, line: 683, baseType: !1391, size: 256)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1569, file: !608, line: 686, baseType: !1123, size: 64, offset: 256)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1569, file: !608, line: 689, baseType: !1123, size: 64, offset: 320)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1388, file: !608, line: 759, baseType: !1575, size: 384)
!1575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !608, line: 707, size: 384, elements: !1576)
!1576 = !{!1577, !1578, !1579}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1575, file: !608, line: 709, baseType: !1391, size: 256)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1575, file: !608, line: 712, baseType: !1123, size: 64, offset: 256)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1575, file: !608, line: 712, baseType: !1123, size: 64, offset: 320)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1388, file: !608, line: 760, baseType: !1581, size: 320)
!1581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !608, line: 718, size: 320, elements: !1582)
!1582 = !{!1583, !1584}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1581, file: !608, line: 720, baseType: !1391, size: 256)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1581, file: !608, line: 723, baseType: !1123, size: 64, offset: 256)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1383, file: !608, line: 138, baseType: !1382, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1383, file: !608, line: 139, baseType: !1382, size: 64, offset: 128)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1378, file: !608, line: 146, baseType: !1381, size: 64, offset: 64)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1378, file: !608, line: 152, baseType: !1376, size: 64, offset: 128)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1373, file: !349, line: 130, baseType: !1294, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1368, file: !349, line: 134, baseType: !1100, size: 64, offset: 192)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1368, file: !349, line: 137, baseType: !1123, size: 64, offset: 256)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1368, file: !349, line: 138, baseType: !1244, size: 32, offset: 320)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1368, file: !349, line: 142, baseType: !6, size: 32, offset: 352)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1368, file: !349, line: 144, baseType: !1025, size: 32, offset: 384)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1368, file: !349, line: 145, baseType: !1025, size: 32, offset: 416)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1368, file: !349, line: 146, baseType: !1597, size: 64, offset: 448)
!1597 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !349, line: 119, baseType: !1078)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1351, file: !349, line: 220, baseType: !1354, size: 64, offset: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1351, file: !349, line: 223, baseType: !1100, size: 64, offset: 128)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1351, file: !349, line: 226, baseType: !1601, size: 64, offset: 192)
!1601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1602, size: 64)
!1602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !336, line: 100, size: 1216, elements: !1603)
!1603 = !{!1604, !1605, !1606, !1607, !1608, !1613, !1614, !1615, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1646, !1654, !1655}
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1602, file: !336, line: 102, baseType: !1025, size: 32)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1602, file: !336, line: 105, baseType: !6, size: 32, offset: 32)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1602, file: !336, line: 108, baseType: !1350, size: 64, offset: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1602, file: !336, line: 111, baseType: !1350, size: 64, offset: 128)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1602, file: !336, line: 114, baseType: !1609, size: 64, offset: 192)
!1609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !336, line: 41, size: 64, elements: !1610)
!1610 = !{!1611, !1612}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1609, file: !336, line: 42, baseType: !335, size: 32)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1609, file: !336, line: 43, baseType: !6, size: 32, offset: 32)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1602, file: !336, line: 117, baseType: !6, size: 32, offset: 256)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1602, file: !336, line: 120, baseType: !6, size: 32, offset: 288)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1602, file: !336, line: 123, baseType: !1616, size: 64, offset: 320)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !336, line: 87, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !336, line: 87, size: 128, elements: !1619)
!1619 = !{!1620}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1618, file: !336, line: 87, baseType: !1621, size: 128)
!1621 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !336, line: 85, baseType: !1622)
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !336, line: 85, size: 128, elements: !1623)
!1623 = !{!1624, !1625, !1626}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1622, file: !336, line: 85, baseType: !6, size: 32)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1622, file: !336, line: 85, baseType: !6, size: 32, offset: 32)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1622, file: !336, line: 85, baseType: !1627, size: 64, offset: 64)
!1627 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1628, size: 64, elements: !1110)
!1628 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !336, line: 84, baseType: !1601)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1602, file: !336, line: 126, baseType: !1601, size: 64, offset: 384)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1602, file: !336, line: 129, baseType: !1601, size: 64, offset: 448)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1602, file: !336, line: 132, baseType: !1100, size: 64, offset: 512)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1602, file: !336, line: 139, baseType: !1123, size: 64, offset: 576)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1602, file: !336, line: 143, baseType: !1171, size: 128, offset: 640)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1602, file: !336, line: 146, baseType: !1171, size: 128, offset: 768)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1602, file: !336, line: 148, baseType: !1236, size: 8, offset: 896)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1602, file: !336, line: 149, baseType: !1236, size: 8, offset: 904)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1602, file: !336, line: 153, baseType: !344, size: 32, offset: 928)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1602, file: !336, line: 156, baseType: !1639, size: 64, offset: 960)
!1639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1640, size: 64)
!1640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !336, line: 48, size: 320, elements: !1641)
!1641 = !{!1642, !1643, !1644, !1645}
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1640, file: !336, line: 50, baseType: !1386, size: 64)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1640, file: !336, line: 59, baseType: !1171, size: 128, offset: 64)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1640, file: !336, line: 64, baseType: !1236, size: 8, offset: 192)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1640, file: !336, line: 67, baseType: !1639, size: 64, offset: 256)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1602, file: !336, line: 159, baseType: !1647, size: 64, offset: 1024)
!1647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1648, size: 64)
!1648 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !336, line: 72, size: 256, elements: !1649)
!1649 = !{!1650, !1651, !1652, !1653}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1648, file: !336, line: 74, baseType: !1367, size: 64)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1648, file: !336, line: 77, baseType: !1647, size: 64, offset: 64)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1648, file: !336, line: 78, baseType: !1647, size: 64, offset: 128)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1648, file: !336, line: 81, baseType: !1647, size: 64, offset: 192)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1602, file: !336, line: 162, baseType: !1236, size: 8, offset: 1088)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1602, file: !336, line: 166, baseType: !1123, size: 64, offset: 1152)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1351, file: !349, line: 229, baseType: !1657, size: 128, offset: 256)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 128, elements: !1062)
!1658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1659, size: 64)
!1659 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !349, line: 229, flags: DIFlagFwdDecl)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1351, file: !349, line: 232, baseType: !1350, size: 64, offset: 384)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1351, file: !349, line: 233, baseType: !1350, size: 64, offset: 448)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1351, file: !349, line: 238, baseType: !1663, size: 64, offset: 512)
!1663 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !349, line: 235, size: 64, elements: !1664)
!1664 = !{!1665, !1671}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1663, file: !349, line: 236, baseType: !1666, size: 64)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !349, line: 273, size: 128, elements: !1668)
!1668 = !{!1669, !1670}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1667, file: !349, line: 275, baseType: !1376, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1667, file: !349, line: 278, baseType: !1376, size: 64, offset: 64)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1663, file: !349, line: 237, baseType: !1672, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1673, size: 64)
!1673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !349, line: 259, size: 320, elements: !1674)
!1674 = !{!1675, !1676, !1677, !1678, !1679}
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1673, file: !349, line: 261, baseType: !1294, size: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1673, file: !349, line: 262, baseType: !1294, size: 64, offset: 64)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1673, file: !349, line: 266, baseType: !1294, size: 64, offset: 128)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1673, file: !349, line: 267, baseType: !1294, size: 64, offset: 192)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1673, file: !349, line: 270, baseType: !1025, size: 32, offset: 256)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1351, file: !349, line: 241, baseType: !1597, size: 64, offset: 576)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1351, file: !349, line: 244, baseType: !1025, size: 32, offset: 640)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1351, file: !349, line: 247, baseType: !1025, size: 32, offset: 672)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1351, file: !349, line: 250, baseType: !1025, size: 32, offset: 704)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1351, file: !349, line: 253, baseType: !1025, size: 32, offset: 736)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1351, file: !349, line: 256, baseType: !1025, size: 32, offset: 768)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1315, file: !1297, line: 179, baseType: !1687, size: 64)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1297, line: 150, baseType: !1689)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1297, line: 142, size: 320, elements: !1690)
!1690 = !{!1691, !1692, !1693, !1694, !1697, !1698}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1689, file: !1297, line: 144, baseType: !1123, size: 64)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1689, file: !1297, line: 145, baseType: !1294, size: 64, offset: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1689, file: !1297, line: 146, baseType: !1294, size: 64, offset: 128)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1689, file: !1297, line: 147, baseType: !1695, size: 32, offset: 192)
!1695 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1696, line: 31, baseType: !1025)
!1696 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1689, file: !1297, line: 148, baseType: !6, size: 32, offset: 224)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1689, file: !1297, line: 149, baseType: !1236, size: 8, offset: 256)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1315, file: !1297, line: 180, baseType: !1700, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1701, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1297, line: 162, baseType: !1702)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1297, line: 159, size: 128, elements: !1703)
!1703 = !{!1704, !1705}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1702, file: !1297, line: 160, baseType: !1123, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1702, file: !1297, line: 161, baseType: !1078, size: 64, offset: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1315, file: !1297, line: 181, baseType: !1707, size: 64)
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1708, size: 64)
!1708 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1297, line: 181, flags: DIFlagFwdDecl)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1310, file: !1297, line: 317, baseType: !1710, size: 64)
!1710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1078, size: 64, elements: !1110)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1310, file: !1297, line: 318, baseType: !1712, size: 320)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1297, line: 188, size: 320, elements: !1713)
!1713 = !{!1714, !1716, !1739}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1712, file: !1297, line: 190, baseType: !1715, size: 192)
!1715 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1314, size: 192, elements: !1194)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1712, file: !1297, line: 193, baseType: !1717, size: 64, offset: 192)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1718, size: 64)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1297, line: 206, size: 320, elements: !1719)
!1719 = !{!1720, !1724, !1725, !1726, !1738}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1718, file: !1297, line: 208, baseType: !1721, size: 64)
!1721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1722, size: 64)
!1722 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1044, line: 62, baseType: !1723)
!1723 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1044, line: 61, flags: DIFlagFwdDecl)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1718, file: !1297, line: 211, baseType: !6, size: 32, offset: 64)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1718, file: !1297, line: 214, baseType: !1078, size: 64, offset: 128)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1718, file: !1297, line: 224, baseType: !1727, size: 64, offset: 192)
!1727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1728, size: 64)
!1728 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1297, line: 202, baseType: !1729)
!1729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1297, line: 202, size: 128, elements: !1730)
!1730 = !{!1731}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1729, file: !1297, line: 202, baseType: !1732, size: 128)
!1732 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1297, line: 200, baseType: !1733)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1297, line: 200, size: 128, elements: !1734)
!1734 = !{!1735, !1736, !1737}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1733, file: !1297, line: 200, baseType: !6, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1733, file: !1297, line: 200, baseType: !6, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1733, file: !1297, line: 200, baseType: !1330, size: 64, offset: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1718, file: !1297, line: 234, baseType: !1727, size: 64, offset: 256)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1712, file: !1297, line: 197, baseType: !1078, size: 64, offset: 256)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1310, file: !1297, line: 319, baseType: !1183, size: 256)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1310, file: !1297, line: 320, baseType: !1202, size: 192)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1125, file: !141, line: 3384, baseType: !1743, size: 1472)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !141, line: 3114, size: 1472, elements: !1744)
!1744 = !{!1745, !1766, !1767, !1768, !1769}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1743, file: !141, line: 3115, baseType: !1746, size: 1216)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !141, line: 2984, size: 1216, elements: !1747)
!1747 = !{!1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1746, file: !141, line: 2985, baseType: !1290, size: 960)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1746, file: !141, line: 2986, baseType: !1123, size: 64, offset: 960)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1746, file: !141, line: 2987, baseType: !1123, size: 64, offset: 1024)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1746, file: !141, line: 2988, baseType: !1123, size: 64, offset: 1088)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1746, file: !141, line: 2991, baseType: !6, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1746, file: !141, line: 2992, baseType: !6, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1746, file: !141, line: 2993, baseType: !6, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1746, file: !141, line: 2994, baseType: !6, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1746, file: !141, line: 2995, baseType: !6, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1746, file: !141, line: 2996, baseType: !6, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1746, file: !141, line: 2998, baseType: !6, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1746, file: !141, line: 3000, baseType: !6, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1746, file: !141, line: 3002, baseType: !6, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1746, file: !141, line: 3003, baseType: !6, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1746, file: !141, line: 3004, baseType: !6, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1746, file: !141, line: 3005, baseType: !6, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1746, file: !141, line: 3007, baseType: !6, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1746, file: !141, line: 3010, baseType: !6, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1743, file: !141, line: 3117, baseType: !1123, size: 64, offset: 1216)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1743, file: !141, line: 3119, baseType: !1123, size: 64, offset: 1280)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1743, file: !141, line: 3121, baseType: !1123, size: 64, offset: 1344)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1743, file: !141, line: 3123, baseType: !1123, size: 64, offset: 1408)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1125, file: !141, line: 3385, baseType: !1771, size: 1088)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !141, line: 2874, size: 1088, elements: !1772)
!1772 = !{!1773, !1774, !1775}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1771, file: !141, line: 2875, baseType: !1290, size: 960)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1771, file: !141, line: 2876, baseType: !1294, size: 64, offset: 960)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1771, file: !141, line: 2877, baseType: !1776, size: 64, offset: 1024)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1778, line: 172, size: 128, elements: !1779)
!1778 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1779 = !{!1780, !1781, !1782, !1783, !1784, !1785, !1786}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1777, file: !1778, line: 174, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1777, file: !1778, line: 178, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1777, file: !1778, line: 183, baseType: !6, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1777, file: !1778, line: 187, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1777, file: !1778, line: 192, baseType: !6, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1777, file: !1778, line: 195, baseType: !6, size: 32, offset: 32)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1777, file: !1778, line: 199, baseType: !1123, size: 64, offset: 64)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1125, file: !141, line: 3386, baseType: !1746, size: 1216)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1125, file: !141, line: 3387, baseType: !1789, size: 1280)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !141, line: 3093, size: 1280, elements: !1790)
!1790 = !{!1791, !1792}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1789, file: !141, line: 3094, baseType: !1746, size: 1216)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1789, file: !141, line: 3095, baseType: !1776, size: 64, offset: 1216)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1125, file: !141, line: 3388, baseType: !1794, size: 1216)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !141, line: 2824, size: 1216, elements: !1795)
!1795 = !{!1796, !1797, !1798, !1799, !1800, !1801}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1794, file: !141, line: 2825, baseType: !1252, size: 896)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1794, file: !141, line: 2827, baseType: !1123, size: 64, offset: 896)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1794, file: !141, line: 2828, baseType: !1123, size: 64, offset: 960)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1794, file: !141, line: 2829, baseType: !1123, size: 64, offset: 1024)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1794, file: !141, line: 2830, baseType: !1123, size: 64, offset: 1088)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1794, file: !141, line: 2831, baseType: !1123, size: 64, offset: 1152)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1125, file: !141, line: 3389, baseType: !1803, size: 1024)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !141, line: 2850, size: 1024, elements: !1804)
!1804 = !{!1805, !1806, !1807}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1803, file: !141, line: 2851, baseType: !1290, size: 960)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1803, file: !141, line: 2852, baseType: !1025, size: 32, offset: 960)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1803, file: !141, line: 2853, baseType: !1025, size: 32, offset: 992)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1125, file: !141, line: 3390, baseType: !1809, size: 1024)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !141, line: 2857, size: 1024, elements: !1810)
!1810 = !{!1811, !1812}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1809, file: !141, line: 2858, baseType: !1290, size: 960)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1809, file: !141, line: 2859, baseType: !1776, size: 64, offset: 960)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1125, file: !141, line: 3391, baseType: !1814, size: 960)
!1814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !141, line: 2862, size: 960, elements: !1815)
!1815 = !{!1816}
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1814, file: !141, line: 2863, baseType: !1290, size: 960)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1125, file: !141, line: 3392, baseType: !1818, size: 1472)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !141, line: 3304, size: 1472, elements: !1819)
!1819 = !{!1820}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1818, file: !141, line: 3305, baseType: !1743, size: 1472)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1125, file: !141, line: 3393, baseType: !1822, size: 1792)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !141, line: 3248, size: 1792, elements: !1823)
!1823 = !{!1824, !1825, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1822, file: !141, line: 3249, baseType: !1743, size: 1472)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1822, file: !141, line: 3251, baseType: !1826, size: 64, offset: 1472)
!1826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1827, size: 64)
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1828, line: 463, size: 1152, elements: !1829)
!1828 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1829 = !{!1830, !1833, !1864, !1865, !1978, !1986, !1987, !1988, !1989, !1990, !1991, !2015, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1827, file: !1828, line: 464, baseType: !1831, size: 64)
!1831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1832, size: 64)
!1832 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1828, line: 464, flags: DIFlagFwdDecl)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1827, file: !1828, line: 467, baseType: !1834, size: 64, offset: 64)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1835, size: 64)
!1835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !349, line: 374, size: 640, elements: !1836)
!1836 = !{!1837, !1839, !1840, !1853, !1854, !1855, !1856, !1857, !1858, !1860, !1862, !1863}
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1835, file: !349, line: 377, baseType: !1838, size: 64)
!1838 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1044, line: 111, baseType: !1350)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1835, file: !349, line: 378, baseType: !1838, size: 64, offset: 64)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1835, file: !349, line: 381, baseType: !1841, size: 64, offset: 128)
!1841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1842, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !349, line: 282, baseType: !1843)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !349, line: 282, size: 128, elements: !1844)
!1844 = !{!1845}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1843, file: !349, line: 282, baseType: !1846, size: 128)
!1846 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !349, line: 281, baseType: !1847)
!1847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !349, line: 281, size: 128, elements: !1848)
!1848 = !{!1849, !1850, !1851}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1847, file: !349, line: 281, baseType: !6, size: 32)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1847, file: !349, line: 281, baseType: !6, size: 32, offset: 32)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1847, file: !349, line: 281, baseType: !1852, size: 64, offset: 64)
!1852 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1838, size: 64, elements: !1110)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1835, file: !349, line: 384, baseType: !1025, size: 32, offset: 192)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1835, file: !349, line: 387, baseType: !1025, size: 32, offset: 224)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1835, file: !349, line: 390, baseType: !1025, size: 32, offset: 256)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1835, file: !349, line: 394, baseType: !1841, size: 64, offset: 320)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1835, file: !349, line: 396, baseType: !348, size: 32, offset: 384)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1835, file: !349, line: 399, baseType: !1859, size: 64, offset: 416)
!1859 = !DICompositeType(tag: DW_TAG_array_type, baseType: !354, size: 64, elements: !1062)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1835, file: !349, line: 402, baseType: !1861, size: 64, offset: 480)
!1861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64, elements: !1062)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1835, file: !349, line: 406, baseType: !1025, size: 32, offset: 544)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1835, file: !349, line: 409, baseType: !1025, size: 32, offset: 576)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1827, file: !1828, line: 470, baseType: !1377, size: 64, offset: 128)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1827, file: !1828, line: 473, baseType: !1866, size: 64, offset: 192)
!1866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1867, size: 64)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1778, line: 39, size: 1152, elements: !1868)
!1868 = !{!1869, !1918, !1931, !1943, !1944, !1955, !1956, !1960, !1961, !1962, !1963, !1964}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1867, file: !1778, line: 41, baseType: !1870, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !580, line: 144, baseType: !1871)
!1871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1872, size: 64)
!1872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !580, line: 100, size: 896, elements: !1873)
!1873 = !{!1874, !1882, !1887, !1892, !1894, !1895, !1896, !1897, !1898, !1899, !1904, !1906, !1907, !1912, !1917}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1872, file: !580, line: 102, baseType: !1875, size: 64)
!1875 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !580, line: 52, baseType: !1876)
!1876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1877, size: 64)
!1877 = !DISubroutineType(types: !1878)
!1878 = !{!1879, !1880}
!1879 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !580, line: 47, baseType: !6)
!1880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1881, size: 64)
!1881 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1872, file: !580, line: 105, baseType: !1883, size: 64, offset: 64)
!1883 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !580, line: 59, baseType: !1884)
!1884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1885, size: 64)
!1885 = !DISubroutineType(types: !1886)
!1886 = !{!1025, !1880, !1880}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1872, file: !580, line: 108, baseType: !1888, size: 64, offset: 128)
!1888 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !580, line: 63, baseType: !1889)
!1889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1890, size: 64)
!1890 = !DISubroutineType(types: !1891)
!1891 = !{null, !1100}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1872, file: !580, line: 111, baseType: !1893, size: 64, offset: 192)
!1893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1100, size: 64)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1872, file: !580, line: 114, baseType: !1531, size: 64, offset: 256)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1872, file: !580, line: 117, baseType: !1531, size: 64, offset: 320)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1872, file: !580, line: 120, baseType: !1531, size: 64, offset: 384)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1872, file: !580, line: 124, baseType: !6, size: 32, offset: 448)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1872, file: !580, line: 128, baseType: !6, size: 32, offset: 480)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1872, file: !580, line: 131, baseType: !1900, size: 64, offset: 512)
!1900 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !580, line: 75, baseType: !1901)
!1901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1902, size: 64)
!1902 = !DISubroutineType(types: !1903)
!1903 = !{!1100, !1531, !1531}
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1872, file: !580, line: 132, baseType: !1905, size: 64, offset: 576)
!1905 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !580, line: 78, baseType: !1889)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1872, file: !580, line: 135, baseType: !1100, size: 64, offset: 640)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1872, file: !580, line: 136, baseType: !1908, size: 64, offset: 704)
!1908 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !580, line: 82, baseType: !1909)
!1909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1910, size: 64)
!1910 = !DISubroutineType(types: !1911)
!1911 = !{!1100, !1100, !1531, !1531}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1872, file: !580, line: 137, baseType: !1913, size: 64, offset: 768)
!1913 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !580, line: 83, baseType: !1914)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1915, size: 64)
!1915 = !DISubroutineType(types: !1916)
!1916 = !{null, !1100, !1100}
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1872, file: !580, line: 141, baseType: !6, size: 32, offset: 832)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1867, file: !1778, line: 48, baseType: !1919, size: 64, offset: 64)
!1919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1920, size: 64)
!1920 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !608, line: 35, baseType: !1921)
!1921 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !608, line: 35, size: 128, elements: !1922)
!1922 = !{!1923}
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1921, file: !608, line: 35, baseType: !1924, size: 128)
!1924 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !608, line: 33, baseType: !1925)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !608, line: 33, size: 128, elements: !1926)
!1926 = !{!1927, !1928, !1929}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1925, file: !608, line: 33, baseType: !6, size: 32)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1925, file: !608, line: 33, baseType: !6, size: 32, offset: 32)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1925, file: !608, line: 33, baseType: !1930, size: 64, offset: 64)
!1930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1386, size: 64, elements: !1110)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1867, file: !1778, line: 51, baseType: !1932, size: 64, offset: 128)
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1933, size: 64)
!1933 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !141, line: 183, baseType: !1934)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !141, line: 183, size: 128, elements: !1935)
!1935 = !{!1936}
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1934, file: !141, line: 183, baseType: !1937, size: 128)
!1937 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !141, line: 182, baseType: !1938)
!1938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !141, line: 182, size: 128, elements: !1939)
!1939 = !{!1940, !1941, !1942}
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1938, file: !141, line: 182, baseType: !6, size: 32)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1938, file: !141, line: 182, baseType: !6, size: 32, offset: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1938, file: !141, line: 182, baseType: !1439, size: 64, offset: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1867, file: !1778, line: 54, baseType: !1123, size: 64, offset: 192)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1867, file: !1778, line: 57, baseType: !1945, size: 128, offset: 256)
!1945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1946, line: 31, size: 128, elements: !1947)
!1946 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1947 = !{!1948, !1949, !1950, !1951, !1952, !1953, !1954}
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1945, file: !1946, line: 35, baseType: !6, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1945, file: !1946, line: 39, baseType: !6, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1945, file: !1946, line: 42, baseType: !6, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1945, file: !1946, line: 46, baseType: !6, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1945, file: !1946, line: 50, baseType: !6, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1945, file: !1946, line: 53, baseType: !6, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1945, file: !1946, line: 56, baseType: !1043, size: 64, offset: 64)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1867, file: !1778, line: 60, baseType: !1945, size: 128, offset: 384)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1867, file: !1778, line: 64, baseType: !1957, size: 64, offset: 512)
!1957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1958, size: 64)
!1958 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1959, line: 33, flags: DIFlagFwdDecl)
!1959 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1867, file: !1778, line: 67, baseType: !1123, size: 64, offset: 576)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1867, file: !1778, line: 73, baseType: !1870, size: 64, offset: 640)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1867, file: !1778, line: 77, baseType: !1043, size: 64, offset: 704)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1867, file: !1778, line: 80, baseType: !6, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1867, file: !1778, line: 82, baseType: !1965, size: 320, offset: 832)
!1965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !651, line: 62, size: 320, elements: !1966)
!1966 = !{!1967, !1973, !1974, !1975, !1976, !1977}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1965, file: !651, line: 63, baseType: !1968, size: 64)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !651, line: 56, size: 128, elements: !1970)
!1970 = !{!1971, !1972}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1969, file: !651, line: 57, baseType: !1968, size: 64)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1969, file: !651, line: 58, baseType: !1218, size: 8, offset: 64)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1965, file: !651, line: 64, baseType: !6, size: 32, offset: 64)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1965, file: !651, line: 66, baseType: !6, size: 32, offset: 96)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1965, file: !651, line: 68, baseType: !1236, size: 8, offset: 128)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1965, file: !651, line: 70, baseType: !1415, size: 64, offset: 192)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1965, file: !651, line: 71, baseType: !1422, size: 64, offset: 256)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1827, file: !1828, line: 476, baseType: !1979, size: 64, offset: 256)
!1979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1980, size: 64)
!1980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !336, line: 187, size: 256, elements: !1981)
!1981 = !{!1982, !1983, !1984, !1985}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1980, file: !336, line: 189, baseType: !1025, size: 32)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1980, file: !336, line: 192, baseType: !1616, size: 64, offset: 64)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1980, file: !336, line: 197, baseType: !1870, size: 64, offset: 128)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1980, file: !336, line: 200, baseType: !1601, size: 64, offset: 192)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1827, file: !1828, line: 479, baseType: !1870, size: 64, offset: 320)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1827, file: !1828, line: 484, baseType: !1123, size: 64, offset: 384)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1827, file: !1828, line: 488, baseType: !1123, size: 64, offset: 448)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1827, file: !1828, line: 493, baseType: !1123, size: 64, offset: 512)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1827, file: !1828, line: 496, baseType: !1123, size: 64, offset: 576)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1827, file: !1828, line: 501, baseType: !1992, size: 64, offset: 640)
!1992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1993, size: 64)
!1993 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !360, line: 2355, size: 576, elements: !1994)
!1994 = !{!1995, !1998, !1999, !2000, !2001, !2003, !2004, !2009, !2010, !2011, !2012, !2013, !2014}
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1993, file: !360, line: 2356, baseType: !1996, size: 64)
!1996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1997, size: 64)
!1997 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !360, line: 2356, flags: DIFlagFwdDecl)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1993, file: !360, line: 2357, baseType: !1320, size: 64, offset: 64)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1993, file: !360, line: 2358, baseType: !1025, size: 32, offset: 128)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1993, file: !360, line: 2359, baseType: !1025, size: 32, offset: 160)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1993, file: !360, line: 2360, baseType: !2002, size: 128, offset: 192)
!2002 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1025, size: 128, elements: !1089)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1993, file: !360, line: 2364, baseType: !1025, size: 32, offset: 320)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1993, file: !360, line: 2367, baseType: !2005, size: 128, offset: 384)
!2005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !360, line: 2349, size: 128, elements: !2006)
!2006 = !{!2007, !2008}
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2005, file: !360, line: 2351, baseType: !1294, size: 64)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2005, file: !360, line: 2352, baseType: !1078, size: 64, offset: 64)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1993, file: !360, line: 2371, baseType: !359, size: 32, offset: 512)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1993, file: !360, line: 2374, baseType: !6, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1993, file: !360, line: 2377, baseType: !6, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1993, file: !360, line: 2381, baseType: !6, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1993, file: !360, line: 2392, baseType: !6, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1993, file: !360, line: 2396, baseType: !6, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1827, file: !1828, line: 504, baseType: !2016, size: 64, offset: 704)
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2017 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1828, line: 504, flags: DIFlagFwdDecl)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1827, file: !1828, line: 507, baseType: !1870, size: 64, offset: 768)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1827, file: !1828, line: 510, baseType: !1025, size: 32, offset: 832)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1827, file: !1828, line: 513, baseType: !1025, size: 32, offset: 864)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1827, file: !1828, line: 516, baseType: !1244, size: 32, offset: 896)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1827, file: !1828, line: 519, baseType: !1244, size: 32, offset: 928)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1827, file: !1828, line: 522, baseType: !6, size: 32, offset: 960)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1827, file: !1828, line: 523, baseType: !6, size: 32, offset: 992)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1827, file: !1828, line: 528, baseType: !1320, size: 64, offset: 1024)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1827, file: !1828, line: 535, baseType: !6, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1827, file: !1828, line: 539, baseType: !6, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1827, file: !1828, line: 543, baseType: !6, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1827, file: !1828, line: 546, baseType: !6, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1827, file: !1828, line: 550, baseType: !6, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1827, file: !1828, line: 554, baseType: !6, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1827, file: !1828, line: 559, baseType: !6, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1827, file: !1828, line: 562, baseType: !6, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1827, file: !1828, line: 571, baseType: !6, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1827, file: !1828, line: 573, baseType: !6, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1827, file: !1828, line: 574, baseType: !6, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1827, file: !1828, line: 581, baseType: !6, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1827, file: !1828, line: 585, baseType: !6, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1827, file: !1828, line: 588, baseType: !6, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1827, file: !1828, line: 592, baseType: !6, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1827, file: !1828, line: 598, baseType: !6, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1822, file: !141, line: 3254, baseType: !1123, size: 64, offset: 1536)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1822, file: !141, line: 3257, baseType: !1123, size: 64, offset: 1600)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1822, file: !141, line: 3258, baseType: !1123, size: 64, offset: 1664)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1822, file: !141, line: 3264, baseType: !6, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1822, file: !141, line: 3265, baseType: !6, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1822, file: !141, line: 3267, baseType: !6, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1822, file: !141, line: 3268, baseType: !6, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1822, file: !141, line: 3269, baseType: !6, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1822, file: !141, line: 3271, baseType: !6, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1822, file: !141, line: 3272, baseType: !6, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1822, file: !141, line: 3273, baseType: !6, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1822, file: !141, line: 3274, baseType: !6, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1822, file: !141, line: 3275, baseType: !6, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1822, file: !141, line: 3276, baseType: !6, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1822, file: !141, line: 3277, baseType: !6, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1822, file: !141, line: 3279, baseType: !6, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1822, file: !141, line: 3280, baseType: !6, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1822, file: !141, line: 3281, baseType: !6, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1822, file: !141, line: 3282, baseType: !6, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1822, file: !141, line: 3283, baseType: !6, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1822, file: !141, line: 3284, baseType: !6, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1125, file: !141, line: 3394, baseType: !2064, size: 1344)
!2064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !141, line: 2279, size: 1344, elements: !2065)
!2065 = !{!2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107}
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2064, file: !141, line: 2280, baseType: !1161, size: 192)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2064, file: !141, line: 2281, baseType: !1123, size: 64, offset: 192)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2064, file: !141, line: 2282, baseType: !1123, size: 64, offset: 256)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2064, file: !141, line: 2283, baseType: !1123, size: 64, offset: 320)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2064, file: !141, line: 2284, baseType: !1123, size: 64, offset: 384)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2064, file: !141, line: 2285, baseType: !6, size: 32, offset: 448)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2064, file: !141, line: 2287, baseType: !6, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2064, file: !141, line: 2288, baseType: !6, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2064, file: !141, line: 2289, baseType: !6, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2064, file: !141, line: 2290, baseType: !6, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2064, file: !141, line: 2291, baseType: !6, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2064, file: !141, line: 2292, baseType: !6, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2064, file: !141, line: 2294, baseType: !6, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2064, file: !141, line: 2296, baseType: !6, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2064, file: !141, line: 2297, baseType: !6, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2064, file: !141, line: 2298, baseType: !6, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2064, file: !141, line: 2299, baseType: !6, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2064, file: !141, line: 2300, baseType: !6, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2064, file: !141, line: 2301, baseType: !6, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2064, file: !141, line: 2302, baseType: !6, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2064, file: !141, line: 2303, baseType: !6, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2064, file: !141, line: 2305, baseType: !6, size: 32, offset: 512)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2064, file: !141, line: 2306, baseType: !1695, size: 32, offset: 544)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2064, file: !141, line: 2307, baseType: !1123, size: 64, offset: 576)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2064, file: !141, line: 2308, baseType: !1123, size: 64, offset: 640)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2064, file: !141, line: 2314, baseType: !2092, size: 64, offset: 704)
!2092 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !141, line: 2309, size: 64, elements: !2093)
!2093 = !{!2094, !2095, !2096}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2092, file: !141, line: 2310, baseType: !1025, size: 32)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2092, file: !141, line: 2311, baseType: !1320, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2092, file: !141, line: 2312, baseType: !2097, size: 64)
!2097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2098, size: 64)
!2098 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !141, line: 2277, flags: DIFlagFwdDecl)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2064, file: !141, line: 2315, baseType: !1123, size: 64, offset: 768)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2064, file: !141, line: 2316, baseType: !1123, size: 64, offset: 832)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2064, file: !141, line: 2317, baseType: !1123, size: 64, offset: 896)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2064, file: !141, line: 2318, baseType: !1123, size: 64, offset: 960)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2064, file: !141, line: 2319, baseType: !1123, size: 64, offset: 1024)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2064, file: !141, line: 2320, baseType: !1123, size: 64, offset: 1088)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2064, file: !141, line: 2321, baseType: !1123, size: 64, offset: 1152)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2064, file: !141, line: 2322, baseType: !1123, size: 64, offset: 1216)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2064, file: !141, line: 2324, baseType: !2108, size: 64, offset: 1280)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !141, line: 2324, flags: DIFlagFwdDecl)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1125, file: !141, line: 3395, baseType: !2111, size: 320)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !141, line: 1469, size: 320, elements: !2112)
!2112 = !{!2113, !2114, !2115}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2111, file: !141, line: 1470, baseType: !1161, size: 192)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2111, file: !141, line: 1471, baseType: !1123, size: 64, offset: 192)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2111, file: !141, line: 1472, baseType: !1123, size: 64, offset: 256)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1125, file: !141, line: 3396, baseType: !2117, size: 320)
!2117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !141, line: 1482, size: 320, elements: !2118)
!2118 = !{!2119, !2120, !2121}
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2117, file: !141, line: 1483, baseType: !1161, size: 192)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2117, file: !141, line: 1484, baseType: !1025, size: 32, offset: 192)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2117, file: !141, line: 1485, baseType: !1439, size: 64, offset: 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1125, file: !141, line: 3397, baseType: !2123, size: 384)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !141, line: 1829, size: 384, elements: !2124)
!2124 = !{!2125, !2126, !2127, !2128}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2123, file: !141, line: 1830, baseType: !1161, size: 192)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2123, file: !141, line: 1831, baseType: !1244, size: 32, offset: 192)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2123, file: !141, line: 1832, baseType: !1123, size: 64, offset: 256)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2123, file: !141, line: 1835, baseType: !1439, size: 64, offset: 320)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1125, file: !141, line: 3398, baseType: !2130, size: 704)
!2130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !141, line: 1898, size: 704, elements: !2131)
!2131 = !{!2132, !2133, !2134, !2135, !2136, !2141}
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2130, file: !141, line: 1899, baseType: !1161, size: 192)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2130, file: !141, line: 1902, baseType: !1123, size: 64, offset: 192)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2130, file: !141, line: 1905, baseType: !1386, size: 64, offset: 256)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2130, file: !141, line: 1908, baseType: !6, size: 32, offset: 320)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2130, file: !141, line: 1911, baseType: !2137, size: 64, offset: 384)
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2138, size: 64)
!2138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1778, line: 117, size: 128, elements: !2139)
!2139 = !{!2140}
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2138, file: !1778, line: 120, baseType: !1945, size: 128)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2130, file: !141, line: 1914, baseType: !1427, size: 256, offset: 448)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1125, file: !141, line: 3399, baseType: !2143, size: 704)
!2143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !141, line: 2008, size: 704, elements: !2144)
!2144 = !{!2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2143, file: !141, line: 2009, baseType: !1161, size: 192)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2143, file: !141, line: 2011, baseType: !6, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2143, file: !141, line: 2012, baseType: !6, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2143, file: !141, line: 2014, baseType: !1244, size: 32, offset: 224)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2143, file: !141, line: 2016, baseType: !1123, size: 64, offset: 256)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2143, file: !141, line: 2017, baseType: !1932, size: 64, offset: 320)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2143, file: !141, line: 2019, baseType: !1123, size: 64, offset: 384)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2143, file: !141, line: 2020, baseType: !1123, size: 64, offset: 448)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2143, file: !141, line: 2021, baseType: !1123, size: 64, offset: 512)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2143, file: !141, line: 2022, baseType: !1123, size: 64, offset: 576)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2143, file: !141, line: 2023, baseType: !1123, size: 64, offset: 640)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1125, file: !141, line: 3400, baseType: !2157, size: 832)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !141, line: 2430, size: 832, elements: !2158)
!2158 = !{!2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2157, file: !141, line: 2431, baseType: !1161, size: 192)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2157, file: !141, line: 2433, baseType: !1123, size: 64, offset: 192)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2157, file: !141, line: 2434, baseType: !1123, size: 64, offset: 256)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2157, file: !141, line: 2435, baseType: !1123, size: 64, offset: 320)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2157, file: !141, line: 2436, baseType: !1123, size: 64, offset: 384)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2157, file: !141, line: 2437, baseType: !1932, size: 64, offset: 448)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2157, file: !141, line: 2438, baseType: !1123, size: 64, offset: 512)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2157, file: !141, line: 2440, baseType: !1123, size: 64, offset: 576)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2157, file: !141, line: 2441, baseType: !1123, size: 64, offset: 640)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2157, file: !141, line: 2443, baseType: !2169, size: 128, offset: 704)
!2169 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !141, line: 182, baseType: !2170)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !141, line: 182, size: 128, elements: !2171)
!2171 = !{!2172}
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2170, file: !141, line: 182, baseType: !1937, size: 128)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1125, file: !141, line: 3401, baseType: !2174, size: 320)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !141, line: 3327, size: 320, elements: !2175)
!2175 = !{!2176, !2177, !2184}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2174, file: !141, line: 3329, baseType: !1161, size: 192)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2174, file: !141, line: 3330, baseType: !2178, size: 64, offset: 192)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !141, line: 3320, size: 192, elements: !2180)
!2180 = !{!2181, !2182, !2183}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2179, file: !141, line: 3322, baseType: !2178, size: 64)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2179, file: !141, line: 3323, baseType: !2178, size: 64, offset: 64)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2179, file: !141, line: 3324, baseType: !1123, size: 64, offset: 128)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2174, file: !141, line: 3331, baseType: !2178, size: 64, offset: 256)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1125, file: !141, line: 3402, baseType: !2186, size: 256)
!2186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !141, line: 1540, size: 256, elements: !2187)
!2187 = !{!2188, !2189}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2186, file: !141, line: 1541, baseType: !1161, size: 192)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2186, file: !141, line: 1542, baseType: !2190, size: 64, offset: 192)
!2190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!2191 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !141, line: 1538, baseType: !2192)
!2192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !141, line: 1538, size: 192, elements: !2193)
!2193 = !{!2194}
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2192, file: !141, line: 1538, baseType: !2195, size: 192)
!2195 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !141, line: 1537, baseType: !2196)
!2196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !141, line: 1537, size: 192, elements: !2197)
!2197 = !{!2198, !2199, !2200}
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2196, file: !141, line: 1537, baseType: !6, size: 32)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2196, file: !141, line: 1537, baseType: !6, size: 32, offset: 32)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2196, file: !141, line: 1537, baseType: !2201, size: 128, offset: 64)
!2201 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2202, size: 128, elements: !1110)
!2202 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !141, line: 1535, baseType: !2203)
!2203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !141, line: 1532, size: 128, elements: !2204)
!2204 = !{!2205, !2206}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2203, file: !141, line: 1533, baseType: !1123, size: 64)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2203, file: !141, line: 1534, baseType: !1123, size: 64, offset: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1125, file: !141, line: 3403, baseType: !2208, size: 512)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !141, line: 1938, size: 512, elements: !2209)
!2209 = !{!2210, !2211, !2212, !2213, !2219, !2220, !2221}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2208, file: !141, line: 1939, baseType: !1161, size: 192)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2208, file: !141, line: 1940, baseType: !1244, size: 32, offset: 192)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2208, file: !141, line: 1941, baseType: !364, size: 32, offset: 224)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2208, file: !141, line: 1946, baseType: !2214, size: 32, offset: 256)
!2214 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !141, line: 1942, size: 32, elements: !2215)
!2215 = !{!2216, !2217, !2218}
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2214, file: !141, line: 1943, baseType: !382, size: 32)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2214, file: !141, line: 1944, baseType: !389, size: 32)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2214, file: !141, line: 1945, baseType: !140, size: 32)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2208, file: !141, line: 1950, baseType: !1376, size: 64, offset: 320)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2208, file: !141, line: 1951, baseType: !1376, size: 64, offset: 384)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2208, file: !141, line: 1953, baseType: !1439, size: 64, offset: 448)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1125, file: !141, line: 3404, baseType: !2223, size: 1664)
!2223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !141, line: 3337, size: 1664, elements: !2224)
!2224 = !{!2225, !2226}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2223, file: !141, line: 3338, baseType: !1161, size: 192)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2223, file: !141, line: 3341, baseType: !2227, size: 1472, offset: 192)
!2227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2228, line: 410, size: 1472, elements: !2229)
!2228 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2229 = !{!2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2227, file: !2228, line: 412, baseType: !1025, size: 32)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2227, file: !2228, line: 413, baseType: !1025, size: 32, offset: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2227, file: !2228, line: 414, baseType: !1025, size: 32, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2227, file: !2228, line: 415, baseType: !1025, size: 32, offset: 96)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2227, file: !2228, line: 416, baseType: !1025, size: 32, offset: 128)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2227, file: !2228, line: 417, baseType: !1025, size: 32, offset: 160)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2227, file: !2228, line: 418, baseType: !1236, size: 8, offset: 192)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2227, file: !2228, line: 419, baseType: !1236, size: 8, offset: 200)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2227, file: !2228, line: 420, baseType: !2239, size: 8, offset: 208)
!2239 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2227, file: !2228, line: 421, baseType: !2239, size: 8, offset: 216)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2227, file: !2228, line: 422, baseType: !2239, size: 8, offset: 224)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2227, file: !2228, line: 423, baseType: !2239, size: 8, offset: 232)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2227, file: !2228, line: 424, baseType: !2239, size: 8, offset: 240)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2227, file: !2228, line: 425, baseType: !2239, size: 8, offset: 248)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2227, file: !2228, line: 426, baseType: !2239, size: 8, offset: 256)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2227, file: !2228, line: 427, baseType: !2239, size: 8, offset: 264)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2227, file: !2228, line: 428, baseType: !2239, size: 8, offset: 272)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2227, file: !2228, line: 429, baseType: !2239, size: 8, offset: 280)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2227, file: !2228, line: 430, baseType: !2239, size: 8, offset: 288)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2227, file: !2228, line: 431, baseType: !2239, size: 8, offset: 296)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2227, file: !2228, line: 432, baseType: !2239, size: 8, offset: 304)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2227, file: !2228, line: 433, baseType: !2239, size: 8, offset: 312)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2227, file: !2228, line: 434, baseType: !2239, size: 8, offset: 320)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2227, file: !2228, line: 435, baseType: !2239, size: 8, offset: 328)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2227, file: !2228, line: 436, baseType: !2239, size: 8, offset: 336)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2227, file: !2228, line: 437, baseType: !2239, size: 8, offset: 344)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2227, file: !2228, line: 438, baseType: !2239, size: 8, offset: 352)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2227, file: !2228, line: 439, baseType: !2239, size: 8, offset: 360)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2227, file: !2228, line: 440, baseType: !2239, size: 8, offset: 368)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2227, file: !2228, line: 441, baseType: !2239, size: 8, offset: 376)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2227, file: !2228, line: 442, baseType: !2239, size: 8, offset: 384)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2227, file: !2228, line: 443, baseType: !2239, size: 8, offset: 392)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2227, file: !2228, line: 444, baseType: !2239, size: 8, offset: 400)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2227, file: !2228, line: 445, baseType: !2239, size: 8, offset: 408)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2227, file: !2228, line: 446, baseType: !2239, size: 8, offset: 416)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2227, file: !2228, line: 447, baseType: !2239, size: 8, offset: 424)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2227, file: !2228, line: 448, baseType: !2239, size: 8, offset: 432)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2227, file: !2228, line: 449, baseType: !2239, size: 8, offset: 440)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2227, file: !2228, line: 450, baseType: !2239, size: 8, offset: 448)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2227, file: !2228, line: 451, baseType: !2239, size: 8, offset: 456)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2227, file: !2228, line: 452, baseType: !2239, size: 8, offset: 464)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2227, file: !2228, line: 453, baseType: !2239, size: 8, offset: 472)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2227, file: !2228, line: 454, baseType: !2239, size: 8, offset: 480)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2227, file: !2228, line: 455, baseType: !2239, size: 8, offset: 488)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2227, file: !2228, line: 456, baseType: !2239, size: 8, offset: 496)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2227, file: !2228, line: 457, baseType: !2239, size: 8, offset: 504)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2227, file: !2228, line: 458, baseType: !2239, size: 8, offset: 512)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2227, file: !2228, line: 459, baseType: !2239, size: 8, offset: 520)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2227, file: !2228, line: 460, baseType: !2239, size: 8, offset: 528)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2227, file: !2228, line: 461, baseType: !2239, size: 8, offset: 536)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2227, file: !2228, line: 462, baseType: !2239, size: 8, offset: 544)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2227, file: !2228, line: 463, baseType: !2239, size: 8, offset: 552)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2227, file: !2228, line: 464, baseType: !2239, size: 8, offset: 560)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2227, file: !2228, line: 465, baseType: !2239, size: 8, offset: 568)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2227, file: !2228, line: 466, baseType: !2239, size: 8, offset: 576)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2227, file: !2228, line: 467, baseType: !2239, size: 8, offset: 584)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2227, file: !2228, line: 468, baseType: !2239, size: 8, offset: 592)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2227, file: !2228, line: 469, baseType: !2239, size: 8, offset: 600)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2227, file: !2228, line: 470, baseType: !2239, size: 8, offset: 608)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2227, file: !2228, line: 471, baseType: !2239, size: 8, offset: 616)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2227, file: !2228, line: 472, baseType: !2239, size: 8, offset: 624)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2227, file: !2228, line: 473, baseType: !2239, size: 8, offset: 632)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2227, file: !2228, line: 474, baseType: !2239, size: 8, offset: 640)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2227, file: !2228, line: 475, baseType: !2239, size: 8, offset: 648)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2227, file: !2228, line: 476, baseType: !2239, size: 8, offset: 656)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2227, file: !2228, line: 477, baseType: !2239, size: 8, offset: 664)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2227, file: !2228, line: 478, baseType: !2239, size: 8, offset: 672)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2227, file: !2228, line: 479, baseType: !2239, size: 8, offset: 680)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2227, file: !2228, line: 480, baseType: !2239, size: 8, offset: 688)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2227, file: !2228, line: 481, baseType: !2239, size: 8, offset: 696)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2227, file: !2228, line: 482, baseType: !2239, size: 8, offset: 704)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2227, file: !2228, line: 483, baseType: !2239, size: 8, offset: 712)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2227, file: !2228, line: 484, baseType: !2239, size: 8, offset: 720)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2227, file: !2228, line: 485, baseType: !2239, size: 8, offset: 728)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2227, file: !2228, line: 486, baseType: !2239, size: 8, offset: 736)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2227, file: !2228, line: 487, baseType: !2239, size: 8, offset: 744)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2227, file: !2228, line: 488, baseType: !2239, size: 8, offset: 752)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2227, file: !2228, line: 489, baseType: !2239, size: 8, offset: 760)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2227, file: !2228, line: 490, baseType: !2239, size: 8, offset: 768)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2227, file: !2228, line: 491, baseType: !2239, size: 8, offset: 776)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2227, file: !2228, line: 492, baseType: !2239, size: 8, offset: 784)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2227, file: !2228, line: 493, baseType: !2239, size: 8, offset: 792)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2227, file: !2228, line: 494, baseType: !2239, size: 8, offset: 800)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2227, file: !2228, line: 495, baseType: !2239, size: 8, offset: 808)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2227, file: !2228, line: 496, baseType: !2239, size: 8, offset: 816)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2227, file: !2228, line: 497, baseType: !2239, size: 8, offset: 824)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2227, file: !2228, line: 498, baseType: !2239, size: 8, offset: 832)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2227, file: !2228, line: 499, baseType: !2239, size: 8, offset: 840)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2227, file: !2228, line: 500, baseType: !2239, size: 8, offset: 848)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2227, file: !2228, line: 501, baseType: !2239, size: 8, offset: 856)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2227, file: !2228, line: 502, baseType: !2239, size: 8, offset: 864)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2227, file: !2228, line: 503, baseType: !2239, size: 8, offset: 872)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2227, file: !2228, line: 504, baseType: !2239, size: 8, offset: 880)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2227, file: !2228, line: 505, baseType: !2239, size: 8, offset: 888)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2227, file: !2228, line: 506, baseType: !2239, size: 8, offset: 896)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2227, file: !2228, line: 507, baseType: !2239, size: 8, offset: 904)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2227, file: !2228, line: 508, baseType: !2239, size: 8, offset: 912)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2227, file: !2228, line: 509, baseType: !2239, size: 8, offset: 920)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2227, file: !2228, line: 510, baseType: !2239, size: 8, offset: 928)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2227, file: !2228, line: 511, baseType: !2239, size: 8, offset: 936)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2227, file: !2228, line: 512, baseType: !2239, size: 8, offset: 944)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2227, file: !2228, line: 513, baseType: !2239, size: 8, offset: 952)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2227, file: !2228, line: 514, baseType: !2239, size: 8, offset: 960)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2227, file: !2228, line: 515, baseType: !2239, size: 8, offset: 968)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2227, file: !2228, line: 516, baseType: !2239, size: 8, offset: 976)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2227, file: !2228, line: 517, baseType: !2239, size: 8, offset: 984)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2227, file: !2228, line: 518, baseType: !2239, size: 8, offset: 992)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2227, file: !2228, line: 519, baseType: !2239, size: 8, offset: 1000)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2227, file: !2228, line: 520, baseType: !2239, size: 8, offset: 1008)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2227, file: !2228, line: 521, baseType: !2239, size: 8, offset: 1016)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2227, file: !2228, line: 522, baseType: !2239, size: 8, offset: 1024)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2227, file: !2228, line: 523, baseType: !2239, size: 8, offset: 1032)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2227, file: !2228, line: 524, baseType: !2239, size: 8, offset: 1040)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2227, file: !2228, line: 525, baseType: !2239, size: 8, offset: 1048)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2227, file: !2228, line: 526, baseType: !2239, size: 8, offset: 1056)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2227, file: !2228, line: 527, baseType: !2239, size: 8, offset: 1064)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2227, file: !2228, line: 528, baseType: !2239, size: 8, offset: 1072)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2227, file: !2228, line: 529, baseType: !2239, size: 8, offset: 1080)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2227, file: !2228, line: 530, baseType: !2239, size: 8, offset: 1088)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2227, file: !2228, line: 531, baseType: !2239, size: 8, offset: 1096)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2227, file: !2228, line: 532, baseType: !2239, size: 8, offset: 1104)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2227, file: !2228, line: 533, baseType: !2239, size: 8, offset: 1112)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2227, file: !2228, line: 534, baseType: !2239, size: 8, offset: 1120)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2227, file: !2228, line: 535, baseType: !2239, size: 8, offset: 1128)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2227, file: !2228, line: 536, baseType: !2239, size: 8, offset: 1136)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2227, file: !2228, line: 537, baseType: !2239, size: 8, offset: 1144)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2227, file: !2228, line: 538, baseType: !2239, size: 8, offset: 1152)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2227, file: !2228, line: 539, baseType: !2239, size: 8, offset: 1160)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2227, file: !2228, line: 540, baseType: !2239, size: 8, offset: 1168)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2227, file: !2228, line: 541, baseType: !2239, size: 8, offset: 1176)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2227, file: !2228, line: 542, baseType: !2239, size: 8, offset: 1184)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2227, file: !2228, line: 543, baseType: !2239, size: 8, offset: 1192)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2227, file: !2228, line: 544, baseType: !2239, size: 8, offset: 1200)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2227, file: !2228, line: 545, baseType: !2239, size: 8, offset: 1208)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2227, file: !2228, line: 546, baseType: !2239, size: 8, offset: 1216)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2227, file: !2228, line: 547, baseType: !2239, size: 8, offset: 1224)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2227, file: !2228, line: 548, baseType: !2239, size: 8, offset: 1232)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2227, file: !2228, line: 549, baseType: !2239, size: 8, offset: 1240)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2227, file: !2228, line: 550, baseType: !2239, size: 8, offset: 1248)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2227, file: !2228, line: 551, baseType: !2239, size: 8, offset: 1256)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2227, file: !2228, line: 552, baseType: !2239, size: 8, offset: 1264)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2227, file: !2228, line: 553, baseType: !2239, size: 8, offset: 1272)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2227, file: !2228, line: 554, baseType: !2239, size: 8, offset: 1280)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2227, file: !2228, line: 555, baseType: !2239, size: 8, offset: 1288)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2227, file: !2228, line: 556, baseType: !2239, size: 8, offset: 1296)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2227, file: !2228, line: 557, baseType: !2239, size: 8, offset: 1304)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2227, file: !2228, line: 558, baseType: !2239, size: 8, offset: 1312)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2227, file: !2228, line: 559, baseType: !2239, size: 8, offset: 1320)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2227, file: !2228, line: 560, baseType: !2239, size: 8, offset: 1328)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2227, file: !2228, line: 561, baseType: !2239, size: 8, offset: 1336)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2227, file: !2228, line: 562, baseType: !2239, size: 8, offset: 1344)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2227, file: !2228, line: 563, baseType: !2239, size: 8, offset: 1352)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2227, file: !2228, line: 564, baseType: !2239, size: 8, offset: 1360)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2227, file: !2228, line: 565, baseType: !2239, size: 8, offset: 1368)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2227, file: !2228, line: 566, baseType: !2239, size: 8, offset: 1376)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2227, file: !2228, line: 567, baseType: !2239, size: 8, offset: 1384)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2227, file: !2228, line: 568, baseType: !2239, size: 8, offset: 1392)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2227, file: !2228, line: 569, baseType: !2239, size: 8, offset: 1400)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2227, file: !2228, line: 570, baseType: !2239, size: 8, offset: 1408)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2227, file: !2228, line: 571, baseType: !2239, size: 8, offset: 1416)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2227, file: !2228, line: 572, baseType: !2239, size: 8, offset: 1424)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2227, file: !2228, line: 573, baseType: !2239, size: 8, offset: 1432)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2227, file: !2228, line: 574, baseType: !2239, size: 8, offset: 1440)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1125, file: !141, line: 3405, baseType: !2395, size: 384)
!2395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !141, line: 3352, size: 384, elements: !2396)
!2396 = !{!2397, !2398}
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2395, file: !141, line: 3353, baseType: !1161, size: 192)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2395, file: !141, line: 3356, baseType: !2399, size: 192, offset: 192)
!2399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2228, line: 578, size: 192, elements: !2400)
!2400 = !{!2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411}
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2399, file: !2228, line: 580, baseType: !1025, size: 32)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2399, file: !2228, line: 581, baseType: !1025, size: 32, offset: 32)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2399, file: !2228, line: 582, baseType: !1025, size: 32, offset: 64)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2399, file: !2228, line: 583, baseType: !1025, size: 32, offset: 96)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2399, file: !2228, line: 584, baseType: !1236, size: 8, offset: 128)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2399, file: !2228, line: 585, baseType: !1236, size: 8, offset: 136)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2399, file: !2228, line: 586, baseType: !1236, size: 8, offset: 144)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2399, file: !2228, line: 587, baseType: !1236, size: 8, offset: 152)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2399, file: !2228, line: 588, baseType: !1236, size: 8, offset: 160)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2399, file: !2228, line: 589, baseType: !1236, size: 8, offset: 168)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2399, file: !2228, line: 590, baseType: !1236, size: 8, offset: 176)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !1120, file: !3, line: 168, baseType: !1123, size: 64)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "nary", scope: !1120, file: !3, line: 169, baseType: !2414, size: 64)
!2414 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_nary_op_t", file: !2415, line: 46, baseType: !2416)
!2415 = !DIFile(filename: "./tree-ssa-sccvn.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2417, size: 64)
!2417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_nary_op_s", file: !2415, line: 36, size: 512, elements: !2418)
!2418 = !{!2419, !2420, !2421, !2422, !2423, !2424, !2425}
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2417, file: !2415, line: 39, baseType: !6, size: 32)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "opcode", scope: !2417, file: !2415, line: 40, baseType: !6, size: 16, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2417, file: !2415, line: 41, baseType: !6, size: 16, offset: 48, flags: DIFlagBitField, extraData: i64 32)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2417, file: !2415, line: 42, baseType: !1879, size: 32, offset: 64)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2417, file: !2415, line: 43, baseType: !1123, size: 64, offset: 128)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2417, file: !2415, line: 44, baseType: !1123, size: 64, offset: 192)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2417, file: !2415, line: 45, baseType: !2426, size: 256, offset: 256)
!2426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1123, size: 256, elements: !1089)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "reference", scope: !1120, file: !3, line: 170, baseType: !2428, size: 64)
!2428 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_t", file: !2415, line: 103, baseType: !2429)
!2429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2430, size: 64)
!2430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_reference_s", file: !2415, line: 93, size: 384, elements: !2431)
!2431 = !{!2432, !2433, !2434, !2435, !2436, !2437, !2458}
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !2430, file: !2415, line: 96, baseType: !6, size: 32)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2430, file: !2415, line: 97, baseType: !1879, size: 32, offset: 32)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2430, file: !2415, line: 98, baseType: !1123, size: 64, offset: 64)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !2430, file: !2415, line: 99, baseType: !1695, size: 32, offset: 128)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2430, file: !2415, line: 100, baseType: !1123, size: 64, offset: 192)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2430, file: !2415, line: 101, baseType: !2438, size: 64, offset: 256)
!2438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2439, size: 64)
!2439 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_reference_op_s_heap", file: !2415, line: 84, baseType: !2440)
!2440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_reference_op_s_heap", file: !2415, line: 84, size: 384, elements: !2441)
!2441 = !{!2442}
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2440, file: !2415, line: 84, baseType: !2443, size: 384)
!2443 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vn_reference_op_s_base", file: !2415, line: 83, baseType: !2444)
!2444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vn_reference_op_s_base", file: !2415, line: 83, size: 384, elements: !2445)
!2445 = !{!2446, !2447, !2448}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2444, file: !2415, line: 83, baseType: !6, size: 32)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2444, file: !2415, line: 83, baseType: !6, size: 32, offset: 32)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2444, file: !2415, line: 83, baseType: !2449, size: 320, offset: 64)
!2449 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2450, size: 320, elements: !1110)
!2450 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_op_s", file: !2415, line: 79, baseType: !2451)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_reference_op_struct", file: !2415, line: 72, size: 320, elements: !2452)
!2452 = !{!2453, !2454, !2455, !2456, !2457}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "opcode", scope: !2451, file: !2415, line: 74, baseType: !140, size: 32)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2451, file: !2415, line: 75, baseType: !1123, size: 64, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "op0", scope: !2451, file: !2415, line: 76, baseType: !1123, size: 64, offset: 128)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "op1", scope: !2451, file: !2415, line: 77, baseType: !1123, size: 64, offset: 192)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "op2", scope: !2451, file: !2415, line: 78, baseType: !1123, size: 64, offset: 256)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2430, file: !2415, line: 102, baseType: !1123, size: 64, offset: 320)
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2460, size: 64)
!2460 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_pre_expr_heap", file: !3, line: 242, baseType: !2461)
!2461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_pre_expr_heap", file: !3, line: 242, size: 128, elements: !2462)
!2462 = !{!2463}
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2461, file: !3, line: 242, baseType: !2464, size: 128)
!2464 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_pre_expr_base", file: !3, line: 241, baseType: !2465)
!2465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_pre_expr_base", file: !3, line: 241, size: 128, elements: !2466)
!2466 = !{!2467, !2468, !2469}
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2465, file: !3, line: 241, baseType: !6, size: 32)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2465, file: !3, line: 241, baseType: !6, size: 32, offset: 32)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2465, file: !3, line: 241, baseType: !2470, size: 64, offset: 64)
!2470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1112, size: 64, elements: !1110)
!2471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_heap", file: !2473, line: 35, baseType: !2474)
!2473 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_heap", file: !2473, line: 35, size: 96, elements: !2475)
!2475 = !{!2476}
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2474, file: !2473, line: 35, baseType: !2477, size: 96)
!2477 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_unsigned_base", file: !2473, line: 34, baseType: !2478)
!2478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_unsigned_base", file: !2473, line: 34, size: 96, elements: !2479)
!2479 = !{!2480, !2481, !2482}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2478, file: !2473, line: 34, baseType: !6, size: 32)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2478, file: !2473, line: 34, baseType: !6, size: 32, offset: 32)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2478, file: !2473, line: 34, baseType: !2483, size: 32, offset: 64)
!2483 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 32, elements: !1110)
!2484 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_value_sets_t", file: !3, line: 425, baseType: !2485)
!2485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2486, size: 64)
!2486 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bb_bitmap_sets", file: !3, line: 382, size: 576, elements: !2487)
!2487 = !{!2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498}
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "exp_gen", scope: !2486, file: !3, line: 386, baseType: !1038, size: 64)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "phi_gen", scope: !2486, file: !3, line: 390, baseType: !1038, size: 64, offset: 64)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "tmp_gen", scope: !2486, file: !3, line: 394, baseType: !1038, size: 64, offset: 128)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "avail_out", scope: !2486, file: !3, line: 398, baseType: !1038, size: 64, offset: 192)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "antic_in", scope: !2486, file: !3, line: 402, baseType: !1038, size: 64, offset: 256)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "pa_in", scope: !2486, file: !3, line: 406, baseType: !1038, size: 64, offset: 320)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "new_sets", scope: !2486, file: !3, line: 411, baseType: !1038, size: 64, offset: 384)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "expr_dies", scope: !2486, file: !3, line: 414, baseType: !1043, size: 64, offset: 448)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2486, file: !3, line: 417, baseType: !6, size: 1, offset: 512, flags: DIFlagBitField, extraData: i64 512)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "deferred", scope: !2486, file: !3, line: 421, baseType: !6, size: 1, offset: 513, flags: DIFlagBitField, extraData: i64 512)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "contains_may_not_return_call", scope: !2486, file: !3, line: 424, baseType: !6, size: 1, offset: 514, flags: DIFlagBitField, extraData: i64 512)
!2499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2500, size: 64)
!2500 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !608, line: 34, baseType: !2501)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !608, line: 34, size: 128, elements: !2502)
!2502 = !{!2503}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2501, file: !608, line: 34, baseType: !1924, size: 128)
!2504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!2505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2506, size: 64)
!2506 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !349, line: 682, baseType: !2507)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !349, line: 679, size: 128, elements: !2508)
!2508 = !{!2509, !2510}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2507, file: !349, line: 680, baseType: !6, size: 32)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2507, file: !349, line: 681, baseType: !2511, size: 64, offset: 64)
!2511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1354, size: 64)
!2512 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_expr_pred_trans_t", file: !3, line: 521, baseType: !2513)
!2513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2514, size: 64)
!2514 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2515)
!2515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "expr_pred_trans_d", file: !3, line: 506, size: 256, elements: !2516)
!2516 = !{!2517, !2518, !2519, !2520}
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2515, file: !3, line: 509, baseType: !1112, size: 64)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "pred", scope: !2515, file: !3, line: 512, baseType: !1838, size: 64, offset: 64)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !2515, file: !3, line: 515, baseType: !1112, size: 64, offset: 128)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "hashcode", scope: !2515, file: !3, line: 519, baseType: !1879, size: 32, offset: 192)
!2521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2522, size: 64)
!2522 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1114)
!2523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1838, size: 64)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1388)
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2527, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !349, line: 283, baseType: !2528)
!2528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !349, line: 283, size: 128, elements: !2529)
!2529 = !{!2530}
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2528, file: !349, line: 283, baseType: !1846, size: 128)
!2531 = !DIDerivedType(tag: DW_TAG_typedef, name: "expr_pred_trans_t", file: !3, line: 520, baseType: !2532)
!2532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2515, size: 64)
!2533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1112, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !651, line: 30, baseType: !2535)
!2535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2536, size: 64)
!2536 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !141, line: 1893, baseType: !1427)
!2537 = !{!2538, !2566, !0, !2568, !2591, !2593, !2595, !2597, !2599, !2601, !2603, !2605, !2607, !2609, !2611, !2613, !2615, !2617, !2619, !2621, !2623, !2625, !2638, !2640}
!2538 = !DIGlobalVariableExpression(var: !2539, expr: !DIExpression())
!2539 = distinct !DIGlobalVariable(name: "pass_pre", scope: !2, file: !3, line: 4822, type: !2540, isLocal: false, isDefinition: true)
!2540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !397, line: 156, size: 640, elements: !2541)
!2541 = !{!2542}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2540, file: !397, line: 158, baseType: !2543, size: 640)
!2543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !397, line: 114, size: 640, elements: !2544)
!2544 = !{!2545, !2546, !2547, !2551, !2555, !2557, !2558, !2559, !2561, !2562, !2563, !2564, !2565}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2543, file: !397, line: 117, baseType: !396, size: 32)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2543, file: !397, line: 121, baseType: !1320, size: 64, offset: 64)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2543, file: !397, line: 125, baseType: !2548, size: 64, offset: 128)
!2548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2549, size: 64)
!2549 = !DISubroutineType(types: !2550)
!2550 = !{!1236}
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2543, file: !397, line: 130, baseType: !2552, size: 64, offset: 192)
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2553 = !DISubroutineType(types: !2554)
!2554 = !{!6}
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2543, file: !397, line: 133, baseType: !2556, size: 64, offset: 256)
!2556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2543, size: 64)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2543, file: !397, line: 136, baseType: !2556, size: 64, offset: 320)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2543, file: !397, line: 139, baseType: !1025, size: 32, offset: 384)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2543, file: !397, line: 143, baseType: !2560, size: 32, offset: 416)
!2560 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !404, line: 80, baseType: !403)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2543, file: !397, line: 146, baseType: !6, size: 32, offset: 448)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2543, file: !397, line: 147, baseType: !6, size: 32, offset: 480)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2543, file: !397, line: 148, baseType: !6, size: 32, offset: 512)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2543, file: !397, line: 151, baseType: !6, size: 32, offset: 544)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2543, file: !397, line: 152, baseType: !6, size: 32, offset: 576)
!2566 = !DIGlobalVariableExpression(var: !2567, expr: !DIExpression())
!2567 = distinct !DIGlobalVariable(name: "pass_fre", scope: !2, file: !3, line: 4858, type: !2540, isLocal: false, isDefinition: true)
!2568 = !DIGlobalVariableExpression(var: !2569, expr: !DIExpression())
!2569 = distinct !DIGlobalVariable(name: "bitmap_set_pool", scope: !2, file: !3, line: 483, type: !2570, isLocal: true, isDefinition: true)
!2570 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2571, line: 58, baseType: !2572)
!2571 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2571, line: 32, size: 704, elements: !2574)
!2574 = !{!2575, !2576, !2577, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2573, file: !2571, line: 34, baseType: !1320, size: 64)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2573, file: !2571, line: 38, baseType: !1531, size: 64, offset: 64)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2573, file: !2571, line: 41, baseType: !2578, size: 64, offset: 128)
!2578 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2571, line: 30, baseType: !2579)
!2579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2580, size: 64)
!2580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2571, line: 26, size: 64, elements: !2581)
!2581 = !{!2582}
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2580, file: !2571, line: 28, baseType: !2579, size: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2573, file: !2571, line: 45, baseType: !1084, size: 64, offset: 192)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2573, file: !2571, line: 49, baseType: !1531, size: 64, offset: 256)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2573, file: !2571, line: 51, baseType: !1531, size: 64, offset: 320)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2573, file: !2571, line: 52, baseType: !1531, size: 64, offset: 384)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2573, file: !2571, line: 53, baseType: !1531, size: 64, offset: 448)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2573, file: !2571, line: 54, baseType: !2578, size: 64, offset: 512)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2573, file: !2571, line: 55, baseType: !1531, size: 64, offset: 576)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2573, file: !2571, line: 56, baseType: !1531, size: 64, offset: 640)
!2591 = !DIGlobalVariableExpression(var: !2592, expr: !DIExpression())
!2592 = distinct !DIGlobalVariable(name: "grand_bitmap_obstack", scope: !2, file: !3, line: 484, type: !1068, isLocal: true, isDefinition: true)
!2593 = !DIGlobalVariableExpression(var: !2594, expr: !DIExpression())
!2594 = distinct !DIGlobalVariable(name: "name_to_id", scope: !2, file: !3, line: 245, type: !2471, isLocal: true, isDefinition: true)
!2595 = !DIGlobalVariableExpression(var: !2596, expr: !DIExpression())
!2596 = distinct !DIGlobalVariable(name: "expression_to_id", scope: !2, file: !3, line: 244, type: !1870, isLocal: true, isDefinition: true)
!2597 = !DIGlobalVariableExpression(var: !2598, expr: !DIExpression())
!2598 = distinct !DIGlobalVariable(name: "next_expression_id", scope: !2, file: !3, line: 238, type: !6, isLocal: true, isDefinition: true)
!2599 = !DIGlobalVariableExpression(var: !2600, expr: !DIExpression())
!2600 = distinct !DIGlobalVariable(name: "expressions", scope: !2, file: !3, line: 243, type: !2459, isLocal: true, isDefinition: true)
!2601 = !DIGlobalVariableExpression(var: !2602, expr: !DIExpression())
!2602 = distinct !DIGlobalVariable(name: "do_partial_partial", scope: !2, file: !3, line: 464, type: !1236, isLocal: true, isDefinition: true)
!2603 = !DIGlobalVariableExpression(var: !2604, expr: !DIExpression())
!2604 = distinct !DIGlobalVariable(name: "inserted_exprs", scope: !2, file: !3, line: 2667, type: !2499, isLocal: true, isDefinition: true)
!2605 = !DIGlobalVariableExpression(var: !2606, expr: !DIExpression())
!2606 = distinct !DIGlobalVariable(name: "in_fre", scope: !2, file: !3, line: 360, type: !1236, isLocal: true, isDefinition: true)
!2607 = !DIGlobalVariableExpression(var: !2608, expr: !DIExpression())
!2608 = distinct !DIGlobalVariable(name: "need_creation", scope: !2, file: !3, line: 2673, type: !2499, isLocal: true, isDefinition: true)
!2609 = !DIGlobalVariableExpression(var: !2610, expr: !DIExpression())
!2610 = distinct !DIGlobalVariable(name: "pretemp", scope: !2, file: !3, line: 490, type: !1123, isLocal: true, isDefinition: true)
!2611 = !DIGlobalVariableExpression(var: !2612, expr: !DIExpression())
!2612 = distinct !DIGlobalVariable(name: "storetemp", scope: !2, file: !3, line: 491, type: !1123, isLocal: true, isDefinition: true)
!2613 = !DIGlobalVariableExpression(var: !2614, expr: !DIExpression())
!2614 = distinct !DIGlobalVariable(name: "prephitemp", scope: !2, file: !3, line: 492, type: !1123, isLocal: true, isDefinition: true)
!2615 = !DIGlobalVariableExpression(var: !2616, expr: !DIExpression())
!2616 = distinct !DIGlobalVariable(name: "postorder", scope: !2, file: !3, line: 441, type: !2504, isLocal: true, isDefinition: true)
!2617 = !DIGlobalVariableExpression(var: !2618, expr: !DIExpression())
!2618 = distinct !DIGlobalVariable(name: "inserted_phi_names", scope: !2, file: !3, line: 2668, type: !1043, isLocal: true, isDefinition: true)
!2619 = !DIGlobalVariableExpression(var: !2620, expr: !DIExpression())
!2620 = distinct !DIGlobalVariable(name: "phi_translate_table", scope: !2, file: !3, line: 501, type: !1870, isLocal: true, isDefinition: true)
!2621 = !DIGlobalVariableExpression(var: !2622, expr: !DIExpression())
!2622 = distinct !DIGlobalVariable(name: "pre_expr_pool", scope: !2, file: !3, line: 335, type: !2570, isLocal: true, isDefinition: true)
!2623 = !DIGlobalVariableExpression(var: !2624, expr: !DIExpression())
!2624 = distinct !DIGlobalVariable(name: "need_eh_cleanup", scope: !2, file: !3, line: 496, type: !1043, isLocal: true, isDefinition: true)
!2625 = !DIGlobalVariableExpression(var: !2626, expr: !DIExpression())
!2626 = distinct !DIGlobalVariable(name: "has_abnormal_preds", scope: !2, file: !3, line: 2195, type: !2627, isLocal: true, isDefinition: true)
!2627 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2628, line: 45, baseType: !2629)
!2628 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2630, size: 64)
!2630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2628, line: 39, size: 192, elements: !2631)
!2631 = !{!2632, !2634, !2635, !2636}
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2630, file: !2628, line: 41, baseType: !2633, size: 64)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1236, size: 64)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2630, file: !2628, line: 42, baseType: !6, size: 32, offset: 64)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2630, file: !2628, line: 43, baseType: !6, size: 32, offset: 96)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2630, file: !2628, line: 44, baseType: !2637, size: 64, offset: 128)
!2637 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1061, size: 64, elements: !1110)
!2638 = !DIGlobalVariableExpression(var: !2639, expr: !DIExpression())
!2639 = distinct !DIGlobalVariable(name: "changed_blocks", scope: !2, file: !3, line: 2200, type: !2627, isLocal: true, isDefinition: true)
!2640 = !DIGlobalVariableExpression(var: !2641, expr: !DIExpression())
!2641 = distinct !DIGlobalVariable(name: "pre_stats", scope: !2, file: !3, line: 462, type: !2642, isLocal: true, isDefinition: true)
!2642 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 445, size: 160, elements: !2643)
!2643 = !{!2644, !2645, !2646, !2647, !2648}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "eliminations", scope: !2642, file: !3, line: 448, baseType: !1025, size: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "insertions", scope: !2642, file: !3, line: 451, baseType: !1025, size: 32, offset: 32)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "pa_insert", scope: !2642, file: !3, line: 454, baseType: !1025, size: 32, offset: 64)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "phis", scope: !2642, file: !3, line: 457, baseType: !1025, size: 32, offset: 96)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "constified", scope: !2642, file: !3, line: 460, baseType: !1025, size: 32, offset: 128)
!2649 = !{i32 7, !"Dwarf Version", i32 4}
!2650 = !{i32 2, !"Debug Info Version", i32 3}
!2651 = !{i32 1, !"wchar_size", i32 4}
!2652 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2653 = distinct !DISubprogram(name: "add_to_value", scope: !3, file: !3, line: 597, type: !2654, scopeLine: 598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2654 = !DISubroutineType(types: !2655)
!2655 = !{null, !6, !1112}
!2656 = !{}
!2657 = !DILocalVariable(name: "v", arg: 1, scope: !2653, file: !3, line: 597, type: !6)
!2658 = !DILocation(line: 597, column: 28, scope: !2653)
!2659 = !DILocalVariable(name: "e", arg: 2, scope: !2653, file: !3, line: 597, type: !1112)
!2660 = !DILocation(line: 597, column: 40, scope: !2653)
!2661 = !DILocalVariable(name: "set", scope: !2653, file: !3, line: 599, type: !1038)
!2662 = !DILocation(line: 599, column: 16, scope: !2653)
!2663 = !DILocation(line: 601, column: 3, scope: !2653)
!2664 = !DILocation(line: 603, column: 7, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2653, file: !3, line: 603, column: 7)
!2666 = !DILocation(line: 603, column: 12, scope: !2665)
!2667 = !DILocation(line: 603, column: 9, scope: !2665)
!2668 = !DILocation(line: 603, column: 7, scope: !2653)
!2669 = !DILocation(line: 605, column: 7, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2665, file: !3, line: 604, column: 5)
!2671 = !DILocation(line: 607, column: 5, scope: !2670)
!2672 = !DILocation(line: 609, column: 9, scope: !2653)
!2673 = !DILocation(line: 609, column: 7, scope: !2653)
!2674 = !DILocation(line: 610, column: 8, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2653, file: !3, line: 610, column: 7)
!2676 = !DILocation(line: 610, column: 7, scope: !2653)
!2677 = !DILocation(line: 612, column: 13, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !2675, file: !3, line: 611, column: 5)
!2679 = !DILocation(line: 612, column: 11, scope: !2678)
!2680 = !DILocation(line: 613, column: 7, scope: !2678)
!2681 = !DILocation(line: 614, column: 5, scope: !2678)
!2682 = !DILocation(line: 616, column: 29, scope: !2653)
!2683 = !DILocation(line: 616, column: 34, scope: !2653)
!2684 = !DILocation(line: 616, column: 37, scope: !2653)
!2685 = !DILocation(line: 616, column: 3, scope: !2653)
!2686 = !DILocation(line: 617, column: 1, scope: !2653)
!2687 = distinct !DISubprogram(name: "get_expr_value_id", scope: !3, file: !3, line: 633, type: !2688, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2688 = !DISubroutineType(types: !2689)
!2689 = !{!6, !1112}
!2690 = !DILocalVariable(name: "expr", arg: 1, scope: !2687, file: !3, line: 633, type: !1112)
!2691 = !DILocation(line: 633, column: 29, scope: !2687)
!2692 = !DILocation(line: 635, column: 11, scope: !2687)
!2693 = !DILocation(line: 635, column: 17, scope: !2687)
!2694 = !DILocation(line: 635, column: 3, scope: !2687)
!2695 = !DILocalVariable(name: "id", scope: !2696, file: !3, line: 639, type: !6)
!2696 = distinct !DILexicalBlock(scope: !2697, file: !3, line: 638, column: 7)
!2697 = distinct !DILexicalBlock(scope: !2687, file: !3, line: 636, column: 5)
!2698 = !DILocation(line: 639, column: 15, scope: !2696)
!2699 = !DILocation(line: 640, column: 30, scope: !2696)
!2700 = !DILocation(line: 640, column: 7, scope: !2696)
!2701 = !DILocation(line: 640, column: 5, scope: !2696)
!2702 = !DILocation(line: 641, column: 6, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 641, column: 6)
!2704 = !DILocation(line: 641, column: 9, scope: !2703)
!2705 = !DILocation(line: 641, column: 6, scope: !2696)
!2706 = !DILocation(line: 643, column: 43, scope: !2707)
!2707 = distinct !DILexicalBlock(scope: !2703, file: !3, line: 642, column: 4)
!2708 = !DILocation(line: 643, column: 11, scope: !2707)
!2709 = !DILocation(line: 643, column: 9, scope: !2707)
!2710 = !DILocation(line: 644, column: 20, scope: !2707)
!2711 = !DILocation(line: 644, column: 24, scope: !2707)
!2712 = !DILocation(line: 644, column: 6, scope: !2707)
!2713 = !DILocation(line: 645, column: 4, scope: !2707)
!2714 = !DILocation(line: 646, column: 9, scope: !2696)
!2715 = !DILocation(line: 646, column: 2, scope: !2696)
!2716 = !DILocation(line: 649, column: 23, scope: !2697)
!2717 = !DILocation(line: 649, column: 14, scope: !2697)
!2718 = !DILocation(line: 649, column: 46, scope: !2697)
!2719 = !DILocation(line: 649, column: 7, scope: !2697)
!2720 = !DILocation(line: 651, column: 14, scope: !2697)
!2721 = !DILocation(line: 651, column: 36, scope: !2697)
!2722 = !DILocation(line: 651, column: 7, scope: !2697)
!2723 = !DILocation(line: 653, column: 14, scope: !2697)
!2724 = !DILocation(line: 653, column: 41, scope: !2697)
!2725 = !DILocation(line: 653, column: 7, scope: !2697)
!2726 = !DILocation(line: 655, column: 7, scope: !2697)
!2727 = !DILocation(line: 656, column: 5, scope: !2697)
!2728 = !DILocation(line: 658, column: 5, scope: !2687)
!2729 = !DILocation(line: 660, column: 1, scope: !2687)
!2730 = distinct !DISubprogram(name: "VEC_bitmap_set_t_base_length", scope: !3, file: !3, line: 377, type: !2731, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2731 = !DISubroutineType(types: !2732)
!2732 = !{!6, !2733}
!2733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2734, size: 64)
!2734 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1031)
!2735 = !DILocalVariable(name: "vec_", arg: 1, scope: !2730, file: !3, line: 377, type: !2733)
!2736 = !DILocation(line: 377, column: 1, scope: !2730)
!2737 = distinct !DISubprogram(name: "VEC_bitmap_set_t_heap_safe_grow_cleared", scope: !3, file: !3, line: 378, type: !2738, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2738 = !DISubroutineType(types: !2739)
!2739 = !{null, !2740, !1025}
!2740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1026, size: 64)
!2741 = !DILocalVariable(name: "vec_", arg: 1, scope: !2737, file: !3, line: 378, type: !2740)
!2742 = !DILocation(line: 378, column: 1, scope: !2737)
!2743 = !DILocalVariable(name: "size_", arg: 2, scope: !2737, file: !3, line: 378, type: !1025)
!2744 = !DILocalVariable(name: "oldsize", scope: !2737, file: !3, line: 378, type: !1025)
!2745 = distinct !DISubprogram(name: "VEC_bitmap_set_t_base_index", scope: !3, file: !3, line: 377, type: !2746, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2746 = !DISubroutineType(types: !2747)
!2747 = !{!1038, !2733, !6}
!2748 = !DILocalVariable(name: "vec_", arg: 1, scope: !2745, file: !3, line: 377, type: !2733)
!2749 = !DILocation(line: 377, column: 1, scope: !2745)
!2750 = !DILocalVariable(name: "ix_", arg: 2, scope: !2745, file: !3, line: 377, type: !6)
!2751 = !DILocation(line: 0, scope: !2745)
!2752 = distinct !DISubprogram(name: "bitmap_set_new", scope: !3, file: !3, line: 622, type: !2753, scopeLine: 623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2753 = !DISubroutineType(types: !2754)
!2754 = !{!1038}
!2755 = !DILocalVariable(name: "ret", scope: !2752, file: !3, line: 624, type: !1038)
!2756 = !DILocation(line: 624, column: 16, scope: !2752)
!2757 = !DILocation(line: 624, column: 49, scope: !2752)
!2758 = !DILocation(line: 624, column: 37, scope: !2752)
!2759 = !DILocation(line: 624, column: 22, scope: !2752)
!2760 = !DILocation(line: 625, column: 22, scope: !2752)
!2761 = !DILocation(line: 625, column: 3, scope: !2752)
!2762 = !DILocation(line: 625, column: 8, scope: !2752)
!2763 = !DILocation(line: 625, column: 20, scope: !2752)
!2764 = !DILocation(line: 626, column: 17, scope: !2752)
!2765 = !DILocation(line: 626, column: 3, scope: !2752)
!2766 = !DILocation(line: 626, column: 8, scope: !2752)
!2767 = !DILocation(line: 626, column: 15, scope: !2752)
!2768 = !DILocation(line: 627, column: 10, scope: !2752)
!2769 = !DILocation(line: 627, column: 3, scope: !2752)
!2770 = distinct !DISubprogram(name: "VEC_bitmap_set_t_base_replace", scope: !3, file: !3, line: 377, type: !2771, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2771 = !DISubroutineType(types: !2772)
!2772 = !{!1038, !2773, !6, !1038}
!2773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!2774 = !DILocalVariable(name: "vec_", arg: 1, scope: !2770, file: !3, line: 377, type: !2773)
!2775 = !DILocation(line: 377, column: 1, scope: !2770)
!2776 = !DILocalVariable(name: "ix_", arg: 2, scope: !2770, file: !3, line: 377, type: !6)
!2777 = !DILocalVariable(name: "obj_", arg: 3, scope: !2770, file: !3, line: 377, type: !1038)
!2778 = !DILocalVariable(name: "old_obj_", scope: !2770, file: !3, line: 377, type: !1038)
!2779 = distinct !DISubprogram(name: "bitmap_insert_into_set_1", scope: !3, file: !3, line: 676, type: !2780, scopeLine: 678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2780 = !DISubroutineType(types: !2781)
!2781 = !{null, !1038, !1112, !6, !1236}
!2782 = !DILocalVariable(name: "set", arg: 1, scope: !2779, file: !3, line: 676, type: !1038)
!2783 = !DILocation(line: 676, column: 40, scope: !2779)
!2784 = !DILocalVariable(name: "expr", arg: 2, scope: !2779, file: !3, line: 676, type: !1112)
!2785 = !DILocation(line: 676, column: 54, scope: !2779)
!2786 = !DILocalVariable(name: "val", arg: 3, scope: !2779, file: !3, line: 677, type: !6)
!2787 = !DILocation(line: 677, column: 19, scope: !2779)
!2788 = !DILocalVariable(name: "allow_constants", arg: 4, scope: !2779, file: !3, line: 677, type: !1236)
!2789 = !DILocation(line: 677, column: 29, scope: !2779)
!2790 = !DILocation(line: 679, column: 7, scope: !2791)
!2791 = distinct !DILexicalBlock(scope: !2779, file: !3, line: 679, column: 7)
!2792 = !DILocation(line: 679, column: 23, scope: !2791)
!2793 = !DILocation(line: 679, column: 48, scope: !2791)
!2794 = !DILocation(line: 679, column: 27, scope: !2791)
!2795 = !DILocation(line: 679, column: 7, scope: !2779)
!2796 = !DILocation(line: 683, column: 23, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2791, file: !3, line: 680, column: 5)
!2798 = !DILocation(line: 683, column: 28, scope: !2797)
!2799 = !DILocation(line: 683, column: 36, scope: !2797)
!2800 = !DILocation(line: 683, column: 7, scope: !2797)
!2801 = !DILocation(line: 684, column: 23, scope: !2797)
!2802 = !DILocation(line: 684, column: 28, scope: !2797)
!2803 = !DILocation(line: 684, column: 69, scope: !2797)
!2804 = !DILocation(line: 684, column: 41, scope: !2797)
!2805 = !DILocation(line: 684, column: 7, scope: !2797)
!2806 = !DILocation(line: 685, column: 5, scope: !2797)
!2807 = !DILocation(line: 686, column: 1, scope: !2779)
!2808 = distinct !DISubprogram(name: "debug_pre_expr", scope: !3, file: !3, line: 999, type: !2809, scopeLine: 1000, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{null, !1112}
!2811 = !DILocalVariable(name: "e", arg: 1, scope: !2808, file: !3, line: 999, type: !1112)
!2812 = !DILocation(line: 999, column: 26, scope: !2808)
!2813 = !DILocation(line: 1001, column: 19, scope: !2808)
!2814 = !DILocation(line: 1001, column: 27, scope: !2808)
!2815 = !DILocation(line: 1001, column: 3, scope: !2808)
!2816 = !DILocation(line: 1002, column: 12, scope: !2808)
!2817 = !DILocation(line: 1002, column: 3, scope: !2808)
!2818 = !DILocation(line: 1003, column: 1, scope: !2808)
!2819 = distinct !DISubprogram(name: "print_pre_expr", scope: !3, file: !3, line: 920, type: !2820, scopeLine: 921, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!2820 = !DISubroutineType(types: !2821)
!2821 = !{null, !2822, !2873}
!2822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2823, size: 64)
!2823 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2824, line: 7, baseType: !2825)
!2824 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2826, line: 49, size: 1728, elements: !2827)
!2826 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2827 = !{!2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2843, !2845, !2846, !2847, !2850, !2852, !2853, !2854, !2857, !2859, !2862, !2865, !2866, !2867, !2868, !2869}
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2825, file: !2826, line: 51, baseType: !1025, size: 32)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2825, file: !2826, line: 54, baseType: !1084, size: 64, offset: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2825, file: !2826, line: 55, baseType: !1084, size: 64, offset: 128)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2825, file: !2826, line: 56, baseType: !1084, size: 64, offset: 192)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2825, file: !2826, line: 57, baseType: !1084, size: 64, offset: 256)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2825, file: !2826, line: 58, baseType: !1084, size: 64, offset: 320)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2825, file: !2826, line: 59, baseType: !1084, size: 64, offset: 384)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2825, file: !2826, line: 60, baseType: !1084, size: 64, offset: 448)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2825, file: !2826, line: 61, baseType: !1084, size: 64, offset: 512)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2825, file: !2826, line: 64, baseType: !1084, size: 64, offset: 576)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2825, file: !2826, line: 65, baseType: !1084, size: 64, offset: 640)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2825, file: !2826, line: 66, baseType: !1084, size: 64, offset: 704)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2825, file: !2826, line: 68, baseType: !2841, size: 64, offset: 768)
!2841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2842, size: 64)
!2842 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2826, line: 36, flags: DIFlagFwdDecl)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2825, file: !2826, line: 70, baseType: !2844, size: 64, offset: 832)
!2844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2825, size: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2825, file: !2826, line: 72, baseType: !1025, size: 32, offset: 896)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2825, file: !2826, line: 73, baseType: !1025, size: 32, offset: 928)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2825, file: !2826, line: 74, baseType: !2848, size: 64, offset: 960)
!2848 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2849, line: 152, baseType: !1078)
!2849 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2825, file: !2826, line: 77, baseType: !2851, size: 16, offset: 1024)
!2851 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2825, file: !2826, line: 78, baseType: !2239, size: 8, offset: 1040)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2825, file: !2826, line: 79, baseType: !1218, size: 8, offset: 1048)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2825, file: !2826, line: 81, baseType: !2855, size: 64, offset: 1088)
!2855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2856, size: 64)
!2856 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2826, line: 43, baseType: null)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2825, file: !2826, line: 89, baseType: !2858, size: 64, offset: 1152)
!2858 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2849, line: 153, baseType: !1078)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2825, file: !2826, line: 91, baseType: !2860, size: 64, offset: 1216)
!2860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2861, size: 64)
!2861 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2826, line: 37, flags: DIFlagFwdDecl)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2825, file: !2826, line: 92, baseType: !2863, size: 64, offset: 1280)
!2863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2864, size: 64)
!2864 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2826, line: 38, flags: DIFlagFwdDecl)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2825, file: !2826, line: 93, baseType: !2844, size: 64, offset: 1344)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2825, file: !2826, line: 94, baseType: !1100, size: 64, offset: 1408)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2825, file: !2826, line: 95, baseType: !1531, size: 64, offset: 1472)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2825, file: !2826, line: 96, baseType: !1025, size: 32, offset: 1536)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2825, file: !2826, line: 98, baseType: !2870, size: 160, offset: 1568)
!2870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 160, elements: !2871)
!2871 = !{!2872}
!2872 = !DISubrange(count: 20)
!2873 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1112)
!2874 = !DILocalVariable(name: "outfile", arg: 1, scope: !2819, file: !3, line: 920, type: !2822)
!2875 = !DILocation(line: 920, column: 23, scope: !2819)
!2876 = !DILocalVariable(name: "expr", arg: 2, scope: !2819, file: !3, line: 920, type: !2873)
!2877 = !DILocation(line: 920, column: 47, scope: !2819)
!2878 = !DILocation(line: 922, column: 11, scope: !2819)
!2879 = !DILocation(line: 922, column: 17, scope: !2819)
!2880 = !DILocation(line: 922, column: 3, scope: !2819)
!2881 = !DILocation(line: 925, column: 27, scope: !2882)
!2882 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 923, column: 5)
!2883 = !DILocation(line: 925, column: 36, scope: !2882)
!2884 = !DILocation(line: 925, column: 7, scope: !2882)
!2885 = !DILocation(line: 926, column: 7, scope: !2882)
!2886 = !DILocation(line: 928, column: 27, scope: !2882)
!2887 = !DILocation(line: 928, column: 36, scope: !2882)
!2888 = !DILocation(line: 928, column: 7, scope: !2882)
!2889 = !DILocation(line: 929, column: 7, scope: !2882)
!2890 = !DILocalVariable(name: "i", scope: !2891, file: !3, line: 932, type: !6)
!2891 = distinct !DILexicalBlock(scope: !2882, file: !3, line: 931, column: 7)
!2892 = !DILocation(line: 932, column: 15, scope: !2891)
!2893 = !DILocalVariable(name: "nary", scope: !2891, file: !3, line: 933, type: !2414)
!2894 = !DILocation(line: 933, column: 15, scope: !2891)
!2895 = !DILocation(line: 933, column: 22, scope: !2891)
!2896 = !DILocation(line: 934, column: 11, scope: !2891)
!2897 = !DILocation(line: 934, column: 44, scope: !2891)
!2898 = !DILocation(line: 934, column: 50, scope: !2891)
!2899 = !DILocation(line: 934, column: 28, scope: !2891)
!2900 = !DILocation(line: 934, column: 2, scope: !2891)
!2901 = !DILocation(line: 935, column: 9, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2891, file: !3, line: 935, column: 2)
!2903 = !DILocation(line: 935, column: 7, scope: !2902)
!2904 = !DILocation(line: 935, column: 14, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2902, file: !3, line: 935, column: 2)
!2906 = !DILocation(line: 935, column: 18, scope: !2905)
!2907 = !DILocation(line: 935, column: 24, scope: !2905)
!2908 = !DILocation(line: 935, column: 16, scope: !2905)
!2909 = !DILocation(line: 935, column: 2, scope: !2902)
!2910 = !DILocation(line: 937, column: 26, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !2905, file: !3, line: 936, column: 4)
!2912 = !DILocation(line: 937, column: 35, scope: !2911)
!2913 = !DILocation(line: 937, column: 41, scope: !2911)
!2914 = !DILocation(line: 937, column: 44, scope: !2911)
!2915 = !DILocation(line: 937, column: 6, scope: !2911)
!2916 = !DILocation(line: 938, column: 10, scope: !2917)
!2917 = distinct !DILexicalBlock(scope: !2911, file: !3, line: 938, column: 10)
!2918 = !DILocation(line: 938, column: 26, scope: !2917)
!2919 = !DILocation(line: 938, column: 32, scope: !2917)
!2920 = !DILocation(line: 938, column: 39, scope: !2917)
!2921 = !DILocation(line: 938, column: 12, scope: !2917)
!2922 = !DILocation(line: 938, column: 10, scope: !2911)
!2923 = !DILocation(line: 939, column: 17, scope: !2917)
!2924 = !DILocation(line: 939, column: 8, scope: !2917)
!2925 = !DILocation(line: 940, column: 4, scope: !2911)
!2926 = !DILocation(line: 935, column: 33, scope: !2905)
!2927 = !DILocation(line: 935, column: 2, scope: !2905)
!2928 = distinct !{!2928, !2909, !2929}
!2929 = !DILocation(line: 940, column: 4, scope: !2902)
!2930 = !DILocation(line: 941, column: 11, scope: !2891)
!2931 = !DILocation(line: 941, column: 2, scope: !2891)
!2932 = !DILocation(line: 943, column: 7, scope: !2882)
!2933 = !DILocalVariable(name: "vro", scope: !2934, file: !3, line: 947, type: !2935)
!2934 = distinct !DILexicalBlock(scope: !2882, file: !3, line: 946, column: 7)
!2935 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_reference_op_t", file: !2415, line: 80, baseType: !2936)
!2936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2450, size: 64)
!2937 = !DILocation(line: 947, column: 20, scope: !2934)
!2938 = !DILocalVariable(name: "i", scope: !2934, file: !3, line: 948, type: !6)
!2939 = !DILocation(line: 948, column: 15, scope: !2934)
!2940 = !DILocalVariable(name: "ref", scope: !2934, file: !3, line: 949, type: !2428)
!2941 = !DILocation(line: 949, column: 17, scope: !2934)
!2942 = !DILocation(line: 949, column: 23, scope: !2934)
!2943 = !DILocation(line: 950, column: 11, scope: !2934)
!2944 = !DILocation(line: 950, column: 2, scope: !2934)
!2945 = !DILocation(line: 951, column: 9, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2934, file: !3, line: 951, column: 2)
!2947 = !DILocation(line: 951, column: 7, scope: !2946)
!2948 = !DILocation(line: 952, column: 7, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 951, column: 2)
!2950 = !DILocation(line: 951, column: 2, scope: !2946)
!2951 = !DILocalVariable(name: "closebrace", scope: !2952, file: !3, line: 955, type: !1236)
!2952 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 954, column: 4)
!2953 = !DILocation(line: 955, column: 11, scope: !2952)
!2954 = !DILocation(line: 956, column: 10, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 956, column: 10)
!2956 = !DILocation(line: 956, column: 15, scope: !2955)
!2957 = !DILocation(line: 956, column: 22, scope: !2955)
!2958 = !DILocation(line: 957, column: 3, scope: !2955)
!2959 = !DILocation(line: 957, column: 6, scope: !2955)
!2960 = !DILocation(line: 957, column: 36, scope: !2955)
!2961 = !DILocation(line: 956, column: 10, scope: !2952)
!2962 = !DILocation(line: 959, column: 12, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2955, file: !3, line: 958, column: 8)
!2964 = !DILocation(line: 959, column: 43, scope: !2963)
!2965 = !DILocation(line: 959, column: 48, scope: !2963)
!2966 = !DILocation(line: 959, column: 27, scope: !2963)
!2967 = !DILocation(line: 959, column: 3, scope: !2963)
!2968 = !DILocation(line: 960, column: 7, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 960, column: 7)
!2970 = !DILocation(line: 960, column: 12, scope: !2969)
!2971 = !DILocation(line: 960, column: 7, scope: !2963)
!2972 = !DILocation(line: 962, column: 16, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2969, file: !3, line: 961, column: 5)
!2974 = !DILocation(line: 962, column: 7, scope: !2973)
!2975 = !DILocation(line: 963, column: 18, scope: !2973)
!2976 = !DILocation(line: 964, column: 5, scope: !2973)
!2977 = !DILocation(line: 965, column: 8, scope: !2963)
!2978 = !DILocation(line: 966, column: 10, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 966, column: 10)
!2980 = !DILocation(line: 966, column: 15, scope: !2979)
!2981 = !DILocation(line: 966, column: 10, scope: !2952)
!2982 = !DILocation(line: 968, column: 23, scope: !2983)
!2983 = distinct !DILexicalBlock(scope: !2979, file: !3, line: 967, column: 8)
!2984 = !DILocation(line: 968, column: 32, scope: !2983)
!2985 = !DILocation(line: 968, column: 37, scope: !2983)
!2986 = !DILocation(line: 968, column: 3, scope: !2983)
!2987 = !DILocation(line: 969, column: 7, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2983, file: !3, line: 969, column: 7)
!2989 = !DILocation(line: 969, column: 12, scope: !2988)
!2990 = !DILocation(line: 969, column: 7, scope: !2983)
!2991 = !DILocation(line: 971, column: 16, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 970, column: 5)
!2993 = !DILocation(line: 971, column: 7, scope: !2992)
!2994 = !DILocation(line: 972, column: 27, scope: !2992)
!2995 = !DILocation(line: 972, column: 36, scope: !2992)
!2996 = !DILocation(line: 972, column: 41, scope: !2992)
!2997 = !DILocation(line: 972, column: 7, scope: !2992)
!2998 = !DILocation(line: 973, column: 5, scope: !2992)
!2999 = !DILocation(line: 974, column: 7, scope: !3000)
!3000 = distinct !DILexicalBlock(scope: !2983, file: !3, line: 974, column: 7)
!3001 = !DILocation(line: 974, column: 12, scope: !3000)
!3002 = !DILocation(line: 974, column: 7, scope: !2983)
!3003 = !DILocation(line: 976, column: 16, scope: !3004)
!3004 = distinct !DILexicalBlock(scope: !3000, file: !3, line: 975, column: 5)
!3005 = !DILocation(line: 976, column: 7, scope: !3004)
!3006 = !DILocation(line: 977, column: 27, scope: !3004)
!3007 = !DILocation(line: 977, column: 36, scope: !3004)
!3008 = !DILocation(line: 977, column: 41, scope: !3004)
!3009 = !DILocation(line: 977, column: 7, scope: !3004)
!3010 = !DILocation(line: 978, column: 5, scope: !3004)
!3011 = !DILocation(line: 979, column: 8, scope: !2983)
!3012 = !DILocation(line: 980, column: 10, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 980, column: 10)
!3014 = !DILocation(line: 980, column: 10, scope: !2952)
!3015 = !DILocation(line: 981, column: 12, scope: !3013)
!3016 = !DILocation(line: 981, column: 3, scope: !3013)
!3017 = !DILocation(line: 982, column: 10, scope: !3018)
!3018 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 982, column: 10)
!3019 = !DILocation(line: 982, column: 15, scope: !3018)
!3020 = !DILocation(line: 982, column: 61, scope: !3018)
!3021 = !DILocation(line: 982, column: 12, scope: !3018)
!3022 = !DILocation(line: 982, column: 10, scope: !2952)
!3023 = !DILocation(line: 983, column: 17, scope: !3018)
!3024 = !DILocation(line: 983, column: 8, scope: !3018)
!3025 = !DILocation(line: 984, column: 4, scope: !2952)
!3026 = !DILocation(line: 953, column: 8, scope: !2949)
!3027 = !DILocation(line: 951, column: 2, scope: !2949)
!3028 = distinct !{!3028, !2950, !3029}
!3029 = !DILocation(line: 984, column: 4, scope: !2946)
!3030 = !DILocation(line: 985, column: 11, scope: !2934)
!3031 = !DILocation(line: 985, column: 2, scope: !2934)
!3032 = !DILocation(line: 986, column: 6, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !2934, file: !3, line: 986, column: 6)
!3034 = !DILocation(line: 986, column: 11, scope: !3033)
!3035 = !DILocation(line: 986, column: 6, scope: !2934)
!3036 = !DILocation(line: 988, column: 15, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 987, column: 4)
!3038 = !DILocation(line: 988, column: 6, scope: !3037)
!3039 = !DILocation(line: 989, column: 26, scope: !3037)
!3040 = !DILocation(line: 989, column: 35, scope: !3037)
!3041 = !DILocation(line: 989, column: 40, scope: !3037)
!3042 = !DILocation(line: 989, column: 6, scope: !3037)
!3043 = !DILocation(line: 990, column: 4, scope: !3037)
!3044 = !DILocation(line: 992, column: 7, scope: !2882)
!3045 = !DILocation(line: 994, column: 1, scope: !2819)
!3046 = distinct !DISubprogram(name: "debug_bitmap_set", scope: !3, file: !3, line: 1036, type: !3047, scopeLine: 1037, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3047 = !DISubroutineType(types: !3048)
!3048 = !{null, !1038}
!3049 = !DILocalVariable(name: "set", arg: 1, scope: !3046, file: !3, line: 1036, type: !1038)
!3050 = !DILocation(line: 1036, column: 32, scope: !3046)
!3051 = !DILocation(line: 1038, column: 21, scope: !3046)
!3052 = !DILocation(line: 1038, column: 29, scope: !3046)
!3053 = !DILocation(line: 1038, column: 3, scope: !3046)
!3054 = !DILocation(line: 1039, column: 1, scope: !3046)
!3055 = distinct !DISubprogram(name: "print_bitmap_set", scope: !3, file: !3, line: 1008, type: !3056, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3056 = !DISubroutineType(types: !3057)
!3057 = !{null, !2822, !1038, !1320, !1025}
!3058 = !DILocalVariable(name: "outfile", arg: 1, scope: !3055, file: !3, line: 1008, type: !2822)
!3059 = !DILocation(line: 1008, column: 25, scope: !3055)
!3060 = !DILocalVariable(name: "set", arg: 2, scope: !3055, file: !3, line: 1008, type: !1038)
!3061 = !DILocation(line: 1008, column: 47, scope: !3055)
!3062 = !DILocalVariable(name: "setname", arg: 3, scope: !3055, file: !3, line: 1009, type: !1320)
!3063 = !DILocation(line: 1009, column: 17, scope: !3055)
!3064 = !DILocalVariable(name: "blockindex", arg: 4, scope: !3055, file: !3, line: 1009, type: !1025)
!3065 = !DILocation(line: 1009, column: 30, scope: !3055)
!3066 = !DILocation(line: 1011, column: 12, scope: !3055)
!3067 = !DILocation(line: 1011, column: 37, scope: !3055)
!3068 = !DILocation(line: 1011, column: 46, scope: !3055)
!3069 = !DILocation(line: 1011, column: 3, scope: !3055)
!3070 = !DILocation(line: 1012, column: 7, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3055, file: !3, line: 1012, column: 7)
!3072 = !DILocation(line: 1012, column: 7, scope: !3055)
!3073 = !DILocalVariable(name: "first", scope: !3074, file: !3, line: 1014, type: !1236)
!3074 = distinct !DILexicalBlock(scope: !3071, file: !3, line: 1013, column: 5)
!3075 = !DILocation(line: 1014, column: 12, scope: !3074)
!3076 = !DILocalVariable(name: "i", scope: !3074, file: !3, line: 1015, type: !6)
!3077 = !DILocation(line: 1015, column: 16, scope: !3074)
!3078 = !DILocalVariable(name: "bi", scope: !3074, file: !3, line: 1016, type: !3079)
!3079 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1047, line: 218, baseType: !3080)
!3080 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1047, line: 203, size: 256, elements: !3081)
!3081 = !{!3082, !3083, !3084, !3085}
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3080, file: !1047, line: 206, baseType: !1050, size: 64)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3080, file: !1047, line: 209, baseType: !1050, size: 64, offset: 64)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3080, file: !1047, line: 212, baseType: !6, size: 32, offset: 128)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3080, file: !1047, line: 217, baseType: !1060, size: 64, offset: 192)
!3086 = !DILocation(line: 1016, column: 23, scope: !3074)
!3087 = !DILocation(line: 1018, column: 7, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3074, file: !3, line: 1018, column: 7)
!3089 = !DILocation(line: 1018, column: 7, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3088, file: !3, line: 1018, column: 7)
!3091 = !DILocalVariable(name: "expr", scope: !3092, file: !3, line: 1020, type: !2873)
!3092 = distinct !DILexicalBlock(scope: !3090, file: !3, line: 1019, column: 2)
!3093 = !DILocation(line: 1020, column: 19, scope: !3092)
!3094 = !DILocation(line: 1020, column: 45, scope: !3092)
!3095 = !DILocation(line: 1020, column: 26, scope: !3092)
!3096 = !DILocation(line: 1022, column: 9, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3092, file: !3, line: 1022, column: 8)
!3098 = !DILocation(line: 1022, column: 8, scope: !3092)
!3099 = !DILocation(line: 1023, column: 15, scope: !3097)
!3100 = !DILocation(line: 1023, column: 6, scope: !3097)
!3101 = !DILocation(line: 1024, column: 10, scope: !3092)
!3102 = !DILocation(line: 1025, column: 20, scope: !3092)
!3103 = !DILocation(line: 1025, column: 29, scope: !3092)
!3104 = !DILocation(line: 1025, column: 4, scope: !3092)
!3105 = !DILocation(line: 1027, column: 13, scope: !3092)
!3106 = !DILocation(line: 1027, column: 52, scope: !3092)
!3107 = !DILocation(line: 1027, column: 33, scope: !3092)
!3108 = !DILocation(line: 1027, column: 4, scope: !3092)
!3109 = !DILocation(line: 1028, column: 2, scope: !3092)
!3110 = distinct !{!3110, !3087, !3111}
!3111 = !DILocation(line: 1028, column: 2, scope: !3088)
!3112 = !DILocation(line: 1029, column: 5, scope: !3074)
!3113 = !DILocation(line: 1030, column: 12, scope: !3055)
!3114 = !DILocation(line: 1030, column: 3, scope: !3055)
!3115 = !DILocation(line: 1031, column: 1, scope: !3055)
!3116 = distinct !DISubprogram(name: "print_value_expressions", scope: !3, file: !3, line: 1044, type: !3117, scopeLine: 1045, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3117 = !DISubroutineType(types: !3118)
!3118 = !{null, !2822, !6}
!3119 = !DILocalVariable(name: "outfile", arg: 1, scope: !3116, file: !3, line: 1044, type: !2822)
!3120 = !DILocation(line: 1044, column: 32, scope: !3116)
!3121 = !DILocalVariable(name: "val", arg: 2, scope: !3116, file: !3, line: 1044, type: !6)
!3122 = !DILocation(line: 1044, column: 54, scope: !3116)
!3123 = !DILocalVariable(name: "set", scope: !3116, file: !3, line: 1046, type: !1038)
!3124 = !DILocation(line: 1046, column: 16, scope: !3116)
!3125 = !DILocation(line: 1046, column: 22, scope: !3116)
!3126 = !DILocation(line: 1047, column: 7, scope: !3127)
!3127 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 1047, column: 7)
!3128 = !DILocation(line: 1047, column: 7, scope: !3116)
!3129 = !DILocalVariable(name: "s", scope: !3130, file: !3, line: 1049, type: !3131)
!3130 = distinct !DILexicalBlock(scope: !3127, file: !3, line: 1048, column: 5)
!3131 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 80, elements: !3132)
!3132 = !{!3133}
!3133 = !DISubrange(count: 10)
!3134 = !DILocation(line: 1049, column: 12, scope: !3130)
!3135 = !DILocation(line: 1050, column: 16, scope: !3130)
!3136 = !DILocation(line: 1050, column: 27, scope: !3130)
!3137 = !DILocation(line: 1050, column: 7, scope: !3130)
!3138 = !DILocation(line: 1051, column: 25, scope: !3130)
!3139 = !DILocation(line: 1051, column: 34, scope: !3130)
!3140 = !DILocation(line: 1051, column: 39, scope: !3130)
!3141 = !DILocation(line: 1051, column: 7, scope: !3130)
!3142 = !DILocation(line: 1052, column: 5, scope: !3130)
!3143 = !DILocation(line: 1053, column: 1, scope: !3116)
!3144 = distinct !DISubprogram(name: "debug_value_expressions", scope: !3, file: !3, line: 1057, type: !3145, scopeLine: 1058, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3145 = !DISubroutineType(types: !3146)
!3146 = !{null, !6}
!3147 = !DILocalVariable(name: "val", arg: 1, scope: !3144, file: !3, line: 1057, type: !6)
!3148 = !DILocation(line: 1057, column: 39, scope: !3144)
!3149 = !DILocation(line: 1059, column: 28, scope: !3144)
!3150 = !DILocation(line: 1059, column: 36, scope: !3144)
!3151 = !DILocation(line: 1059, column: 3, scope: !3144)
!3152 = !DILocation(line: 1060, column: 1, scope: !3144)
!3153 = distinct !DISubprogram(name: "gate_pre", scope: !3, file: !3, line: 4817, type: !2549, scopeLine: 4818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3154 = !DILocation(line: 4819, column: 10, scope: !3153)
!3155 = !DILocation(line: 4819, column: 24, scope: !3153)
!3156 = !DILocation(line: 4819, column: 3, scope: !3153)
!3157 = distinct !DISubprogram(name: "do_pre", scope: !3, file: !3, line: 4811, type: !2553, scopeLine: 4812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3158 = !DILocation(line: 4813, column: 10, scope: !3157)
!3159 = !DILocation(line: 4813, column: 3, scope: !3157)
!3160 = distinct !DISubprogram(name: "gate_fre", scope: !3, file: !3, line: 4853, type: !2549, scopeLine: 4854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3161 = !DILocation(line: 4855, column: 10, scope: !3160)
!3162 = !DILocation(line: 4855, column: 24, scope: !3160)
!3163 = !DILocation(line: 4855, column: 3, scope: !3160)
!3164 = distinct !DISubprogram(name: "execute_fre", scope: !3, file: !3, line: 4847, type: !2553, scopeLine: 4848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3165 = !DILocation(line: 4849, column: 10, scope: !3164)
!3166 = !DILocation(line: 4849, column: 3, scope: !3164)
!3167 = distinct !DISubprogram(name: "VEC_bitmap_set_t_heap_safe_grow", scope: !3, file: !3, line: 378, type: !2738, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3168 = !DILocalVariable(name: "vec_", arg: 1, scope: !3167, file: !3, line: 378, type: !2740)
!3169 = !DILocation(line: 378, column: 1, scope: !3167)
!3170 = !DILocalVariable(name: "size_", arg: 2, scope: !3167, file: !3, line: 378, type: !1025)
!3171 = !DILocation(line: 0, scope: !3167)
!3172 = distinct !DISubprogram(name: "VEC_bitmap_set_t_base_address", scope: !3, file: !3, line: 377, type: !3173, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3173 = !DISubroutineType(types: !3174)
!3174 = !{!3175, !2773}
!3175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1038, size: 64)
!3176 = !DILocalVariable(name: "vec_", arg: 1, scope: !3172, file: !3, line: 377, type: !2773)
!3177 = !DILocation(line: 377, column: 1, scope: !3172)
!3178 = distinct !DISubprogram(name: "VEC_bitmap_set_t_heap_reserve_exact", scope: !3, file: !3, line: 378, type: !3179, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3179 = !DISubroutineType(types: !3180)
!3180 = !{!1025, !2740, !1025}
!3181 = !DILocalVariable(name: "vec_", arg: 1, scope: !3178, file: !3, line: 378, type: !2740)
!3182 = !DILocation(line: 378, column: 1, scope: !3178)
!3183 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3178, file: !3, line: 378, type: !1025)
!3184 = !DILocalVariable(name: "extend", scope: !3178, file: !3, line: 378, type: !1025)
!3185 = !DILocation(line: 378, column: 1, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 378, column: 1)
!3187 = distinct !DISubprogram(name: "VEC_bitmap_set_t_base_space", scope: !3, file: !3, line: 377, type: !3188, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3188 = !DISubroutineType(types: !3189)
!3189 = !{!1025, !2773, !1025}
!3190 = !DILocalVariable(name: "vec_", arg: 1, scope: !3187, file: !3, line: 377, type: !2773)
!3191 = !DILocation(line: 377, column: 1, scope: !3187)
!3192 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3187, file: !3, line: 377, type: !1025)
!3193 = distinct !DISubprogram(name: "get_or_alloc_expression_id", scope: !3, file: !3, line: 310, type: !2688, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3194 = !DILocalVariable(name: "expr", arg: 1, scope: !3193, file: !3, line: 310, type: !1112)
!3195 = !DILocation(line: 310, column: 38, scope: !3193)
!3196 = !DILocalVariable(name: "id", scope: !3193, file: !3, line: 312, type: !6)
!3197 = !DILocation(line: 312, column: 16, scope: !3193)
!3198 = !DILocation(line: 312, column: 43, scope: !3193)
!3199 = !DILocation(line: 312, column: 21, scope: !3193)
!3200 = !DILocation(line: 313, column: 7, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3193, file: !3, line: 313, column: 7)
!3202 = !DILocation(line: 313, column: 10, scope: !3201)
!3203 = !DILocation(line: 313, column: 7, scope: !3193)
!3204 = !DILocation(line: 314, column: 33, scope: !3201)
!3205 = !DILocation(line: 314, column: 12, scope: !3201)
!3206 = !DILocation(line: 314, column: 5, scope: !3201)
!3207 = !DILocation(line: 315, column: 21, scope: !3193)
!3208 = !DILocation(line: 315, column: 10, scope: !3193)
!3209 = !DILocation(line: 315, column: 16, scope: !3193)
!3210 = !DILocation(line: 315, column: 19, scope: !3193)
!3211 = !DILocation(line: 315, column: 3, scope: !3193)
!3212 = !DILocation(line: 316, column: 1, scope: !3193)
!3213 = distinct !DISubprogram(name: "lookup_expression_id", scope: !3, file: !3, line: 286, type: !3214, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3214 = !DISubroutineType(types: !3215)
!3215 = !{!6, !2873}
!3216 = !DILocalVariable(name: "expr", arg: 1, scope: !3213, file: !3, line: 286, type: !2873)
!3217 = !DILocation(line: 286, column: 38, scope: !3213)
!3218 = !DILocalVariable(name: "slot", scope: !3213, file: !3, line: 288, type: !1893)
!3219 = !DILocation(line: 288, column: 10, scope: !3213)
!3220 = !DILocation(line: 290, column: 7, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3213, file: !3, line: 290, column: 7)
!3222 = !DILocation(line: 290, column: 13, scope: !3221)
!3223 = !DILocation(line: 290, column: 18, scope: !3221)
!3224 = !DILocation(line: 290, column: 7, scope: !3213)
!3225 = !DILocalVariable(name: "version", scope: !3226, file: !3, line: 292, type: !6)
!3226 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 291, column: 5)
!3227 = !DILocation(line: 292, column: 16, scope: !3226)
!3228 = !DILocation(line: 292, column: 26, scope: !3226)
!3229 = !DILocation(line: 293, column: 11, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3226, file: !3, line: 293, column: 11)
!3231 = !DILocation(line: 293, column: 48, scope: !3230)
!3232 = !DILocation(line: 293, column: 45, scope: !3230)
!3233 = !DILocation(line: 293, column: 11, scope: !3226)
!3234 = !DILocation(line: 294, column: 2, scope: !3230)
!3235 = !DILocation(line: 295, column: 14, scope: !3226)
!3236 = !DILocation(line: 295, column: 7, scope: !3226)
!3237 = !DILocation(line: 299, column: 30, scope: !3238)
!3238 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 298, column: 5)
!3239 = !DILocation(line: 299, column: 48, scope: !3238)
!3240 = !DILocation(line: 299, column: 14, scope: !3238)
!3241 = !DILocation(line: 299, column: 12, scope: !3238)
!3242 = !DILocation(line: 300, column: 12, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 300, column: 11)
!3244 = !DILocation(line: 300, column: 11, scope: !3238)
!3245 = !DILocation(line: 301, column: 2, scope: !3243)
!3246 = !DILocation(line: 302, column: 26, scope: !3238)
!3247 = !DILocation(line: 302, column: 25, scope: !3238)
!3248 = !DILocation(line: 302, column: 15, scope: !3238)
!3249 = !DILocation(line: 302, column: 33, scope: !3238)
!3250 = !DILocation(line: 302, column: 7, scope: !3238)
!3251 = !DILocation(line: 304, column: 1, scope: !3213)
!3252 = distinct !DISubprogram(name: "alloc_expression_id", scope: !3, file: !3, line: 250, type: !2688, scopeLine: 251, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3253 = !DILocalVariable(name: "expr", arg: 1, scope: !3252, file: !3, line: 250, type: !1112)
!3254 = !DILocation(line: 250, column: 31, scope: !3252)
!3255 = !DILocalVariable(name: "slot", scope: !3252, file: !3, line: 252, type: !1893)
!3256 = !DILocation(line: 252, column: 10, scope: !3252)
!3257 = !DILocation(line: 254, column: 3, scope: !3252)
!3258 = !DILocation(line: 255, column: 32, scope: !3252)
!3259 = !DILocation(line: 255, column: 3, scope: !3252)
!3260 = !DILocation(line: 255, column: 9, scope: !3252)
!3261 = !DILocation(line: 255, column: 12, scope: !3252)
!3262 = !DILocation(line: 256, column: 3, scope: !3252)
!3263 = !DILocation(line: 257, column: 7, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 257, column: 7)
!3265 = !DILocation(line: 257, column: 13, scope: !3264)
!3266 = !DILocation(line: 257, column: 18, scope: !3264)
!3267 = !DILocation(line: 257, column: 7, scope: !3252)
!3268 = !DILocalVariable(name: "version", scope: !3269, file: !3, line: 259, type: !6)
!3269 = distinct !DILexicalBlock(scope: !3264, file: !3, line: 258, column: 5)
!3270 = !DILocation(line: 259, column: 16, scope: !3269)
!3271 = !DILocation(line: 259, column: 26, scope: !3269)
!3272 = !DILocation(line: 263, column: 7, scope: !3269)
!3273 = !DILocation(line: 264, column: 7, scope: !3269)
!3274 = !DILocation(line: 265, column: 7, scope: !3269)
!3275 = !DILocation(line: 266, column: 7, scope: !3269)
!3276 = !DILocation(line: 267, column: 5, scope: !3269)
!3277 = !DILocation(line: 270, column: 30, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3264, file: !3, line: 269, column: 5)
!3279 = !DILocation(line: 270, column: 48, scope: !3278)
!3280 = !DILocation(line: 270, column: 14, scope: !3278)
!3281 = !DILocation(line: 270, column: 12, scope: !3278)
!3282 = !DILocation(line: 271, column: 7, scope: !3278)
!3283 = !DILocation(line: 272, column: 15, scope: !3278)
!3284 = !DILocation(line: 272, column: 8, scope: !3278)
!3285 = !DILocation(line: 272, column: 13, scope: !3278)
!3286 = !DILocation(line: 274, column: 10, scope: !3252)
!3287 = !DILocation(line: 274, column: 29, scope: !3252)
!3288 = !DILocation(line: 274, column: 3, scope: !3252)
!3289 = distinct !DISubprogram(name: "VEC_unsigned_base_length", scope: !2473, file: !2473, line: 34, type: !3290, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3290 = !DISubroutineType(types: !3291)
!3291 = !{!6, !3292}
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2477)
!3294 = !DILocalVariable(name: "vec_", arg: 1, scope: !3289, file: !2473, line: 34, type: !3292)
!3295 = !DILocation(line: 34, column: 1, scope: !3289)
!3296 = distinct !DISubprogram(name: "VEC_unsigned_base_index", scope: !2473, file: !2473, line: 34, type: !3297, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{!6, !3292, !6}
!3299 = !DILocalVariable(name: "vec_", arg: 1, scope: !3296, file: !2473, line: 34, type: !3292)
!3300 = !DILocation(line: 34, column: 1, scope: !3296)
!3301 = !DILocalVariable(name: "ix_", arg: 2, scope: !3296, file: !2473, line: 34, type: !6)
!3302 = !DILocation(line: 0, scope: !3296)
!3303 = distinct !DISubprogram(name: "VEC_pre_expr_heap_safe_push", scope: !3, file: !3, line: 242, type: !3304, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3304 = !DISubroutineType(types: !3305)
!3305 = !{!2533, !3306, !1112}
!3306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2459, size: 64)
!3307 = !DILocalVariable(name: "vec_", arg: 1, scope: !3303, file: !3, line: 242, type: !3306)
!3308 = !DILocation(line: 242, column: 1, scope: !3303)
!3309 = !DILocalVariable(name: "obj_", arg: 2, scope: !3303, file: !3, line: 242, type: !1112)
!3310 = distinct !DISubprogram(name: "VEC_unsigned_heap_reserve", scope: !2473, file: !2473, line: 35, type: !3311, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3311 = !DISubroutineType(types: !3312)
!3312 = !{!1025, !3313, !1025}
!3313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!3314 = !DILocalVariable(name: "vec_", arg: 1, scope: !3310, file: !2473, line: 35, type: !3313)
!3315 = !DILocation(line: 35, column: 1, scope: !3310)
!3316 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3310, file: !2473, line: 35, type: !1025)
!3317 = !DILocalVariable(name: "extend", scope: !3310, file: !2473, line: 35, type: !1025)
!3318 = !DILocation(line: 35, column: 1, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3310, file: !2473, line: 35, column: 1)
!3320 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !141, file: !141, line: 182, type: !3321, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3321 = !DISubroutineType(types: !3322)
!3322 = !{!6, !3323}
!3323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3324, size: 64)
!3324 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1937)
!3325 = !DILocalVariable(name: "vec_", arg: 1, scope: !3320, file: !141, line: 182, type: !3323)
!3326 = !DILocation(line: 182, column: 1, scope: !3320)
!3327 = distinct !DISubprogram(name: "VEC_unsigned_heap_safe_grow_cleared", scope: !2473, file: !2473, line: 35, type: !3328, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3328 = !DISubroutineType(types: !3329)
!3329 = !{null, !3313, !1025}
!3330 = !DILocalVariable(name: "vec_", arg: 1, scope: !3327, file: !2473, line: 35, type: !3313)
!3331 = !DILocation(line: 35, column: 1, scope: !3327)
!3332 = !DILocalVariable(name: "size_", arg: 2, scope: !3327, file: !2473, line: 35, type: !1025)
!3333 = !DILocalVariable(name: "oldsize", scope: !3327, file: !2473, line: 35, type: !1025)
!3334 = distinct !DISubprogram(name: "VEC_unsigned_base_replace", scope: !2473, file: !2473, line: 34, type: !3335, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3335 = !DISubroutineType(types: !3336)
!3336 = !{!6, !3337, !6, !6}
!3337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!3338 = !DILocalVariable(name: "vec_", arg: 1, scope: !3334, file: !2473, line: 34, type: !3337)
!3339 = !DILocation(line: 34, column: 1, scope: !3334)
!3340 = !DILocalVariable(name: "ix_", arg: 2, scope: !3334, file: !2473, line: 34, type: !6)
!3341 = !DILocalVariable(name: "obj_", arg: 3, scope: !3334, file: !2473, line: 34, type: !6)
!3342 = !DILocalVariable(name: "old_obj_", scope: !3334, file: !2473, line: 34, type: !6)
!3343 = distinct !DISubprogram(name: "VEC_pre_expr_heap_reserve", scope: !3, file: !3, line: 242, type: !3344, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3344 = !DISubroutineType(types: !3345)
!3345 = !{!1025, !3306, !1025}
!3346 = !DILocalVariable(name: "vec_", arg: 1, scope: !3343, file: !3, line: 242, type: !3306)
!3347 = !DILocation(line: 242, column: 1, scope: !3343)
!3348 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3343, file: !3, line: 242, type: !1025)
!3349 = !DILocalVariable(name: "extend", scope: !3343, file: !3, line: 242, type: !1025)
!3350 = !DILocation(line: 242, column: 1, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3343, file: !3, line: 242, column: 1)
!3352 = distinct !DISubprogram(name: "VEC_pre_expr_base_quick_push", scope: !3, file: !3, line: 241, type: !3353, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3353 = !DISubroutineType(types: !3354)
!3354 = !{!2533, !3355, !1112}
!3355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2464, size: 64)
!3356 = !DILocalVariable(name: "vec_", arg: 1, scope: !3352, file: !3, line: 241, type: !3355)
!3357 = !DILocation(line: 241, column: 1, scope: !3352)
!3358 = !DILocalVariable(name: "obj_", arg: 2, scope: !3352, file: !3, line: 241, type: !1112)
!3359 = !DILocalVariable(name: "slot_", scope: !3352, file: !3, line: 241, type: !2533)
!3360 = distinct !DISubprogram(name: "VEC_pre_expr_base_space", scope: !3, file: !3, line: 241, type: !3361, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3361 = !DISubroutineType(types: !3362)
!3362 = !{!1025, !3355, !1025}
!3363 = !DILocalVariable(name: "vec_", arg: 1, scope: !3360, file: !3, line: 241, type: !3355)
!3364 = !DILocation(line: 241, column: 1, scope: !3360)
!3365 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3360, file: !3, line: 241, type: !1025)
!3366 = distinct !DISubprogram(name: "VEC_unsigned_base_space", scope: !2473, file: !2473, line: 34, type: !3367, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{!1025, !3337, !1025}
!3369 = !DILocalVariable(name: "vec_", arg: 1, scope: !3366, file: !2473, line: 34, type: !3337)
!3370 = !DILocation(line: 34, column: 1, scope: !3366)
!3371 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3366, file: !2473, line: 34, type: !1025)
!3372 = distinct !DISubprogram(name: "VEC_unsigned_heap_safe_grow", scope: !2473, file: !2473, line: 35, type: !3328, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3373 = !DILocalVariable(name: "vec_", arg: 1, scope: !3372, file: !2473, line: 35, type: !3313)
!3374 = !DILocation(line: 35, column: 1, scope: !3372)
!3375 = !DILocalVariable(name: "size_", arg: 2, scope: !3372, file: !2473, line: 35, type: !1025)
!3376 = !DILocation(line: 0, scope: !3372)
!3377 = distinct !DISubprogram(name: "VEC_unsigned_base_address", scope: !2473, file: !2473, line: 34, type: !3378, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3378 = !DISubroutineType(types: !3379)
!3379 = !{!3380, !3337}
!3380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!3381 = !DILocalVariable(name: "vec_", arg: 1, scope: !3377, file: !2473, line: 34, type: !3337)
!3382 = !DILocation(line: 34, column: 1, scope: !3377)
!3383 = distinct !DISubprogram(name: "VEC_unsigned_heap_reserve_exact", scope: !2473, file: !2473, line: 35, type: !3311, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3384 = !DILocalVariable(name: "vec_", arg: 1, scope: !3383, file: !2473, line: 35, type: !3313)
!3385 = !DILocation(line: 35, column: 1, scope: !3383)
!3386 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3383, file: !2473, line: 35, type: !1025)
!3387 = !DILocalVariable(name: "extend", scope: !3383, file: !2473, line: 35, type: !1025)
!3388 = !DILocation(line: 35, column: 1, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3383, file: !2473, line: 35, column: 1)
!3390 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_iterate", scope: !2415, file: !2415, line: 83, type: !3391, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3391 = !DISubroutineType(types: !3392)
!3392 = !{!1025, !3393, !6, !3394}
!3393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2443, size: 64)
!3394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2936, size: 64)
!3395 = !DILocalVariable(name: "vec_", arg: 1, scope: !3390, file: !2415, line: 83, type: !3393)
!3396 = !DILocation(line: 83, column: 1, scope: !3390)
!3397 = !DILocalVariable(name: "ix_", arg: 2, scope: !3390, file: !2415, line: 83, type: !6)
!3398 = !DILocalVariable(name: "ptr", arg: 3, scope: !3390, file: !2415, line: 83, type: !3394)
!3399 = !DILocation(line: 83, column: 1, scope: !3400)
!3400 = distinct !DILexicalBlock(scope: !3390, file: !2415, line: 83, column: 1)
!3401 = !DILocation(line: 83, column: 1, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3400, file: !2415, line: 83, column: 1)
!3403 = !DILocation(line: 83, column: 1, scope: !3404)
!3404 = distinct !DILexicalBlock(scope: !3400, file: !2415, line: 83, column: 1)
!3405 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_length", scope: !2415, file: !2415, line: 83, type: !3406, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3406 = !DISubroutineType(types: !3407)
!3407 = !{!6, !3408}
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3409, size: 64)
!3409 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2443)
!3410 = !DILocalVariable(name: "vec_", arg: 1, scope: !3405, file: !2415, line: 83, type: !3408)
!3411 = !DILocation(line: 83, column: 1, scope: !3405)
!3412 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1047, file: !1047, line: 224, type: !3413, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3413 = !DISubroutineType(types: !3414)
!3414 = !{null, !3415, !3416, !6, !3380}
!3415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3079, size: 64)
!3416 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1044, line: 48, baseType: !3417)
!3417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3418, size: 64)
!3418 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1046)
!3419 = !DILocalVariable(name: "bi", arg: 1, scope: !3412, file: !1047, line: 224, type: !3415)
!3420 = !DILocation(line: 224, column: 37, scope: !3412)
!3421 = !DILocalVariable(name: "map", arg: 2, scope: !3412, file: !1047, line: 224, type: !3416)
!3422 = !DILocation(line: 224, column: 54, scope: !3412)
!3423 = !DILocalVariable(name: "start_bit", arg: 3, scope: !3412, file: !1047, line: 225, type: !6)
!3424 = !DILocation(line: 225, column: 15, scope: !3412)
!3425 = !DILocalVariable(name: "bit_no", arg: 4, scope: !3412, file: !1047, line: 225, type: !3380)
!3426 = !DILocation(line: 225, column: 36, scope: !3412)
!3427 = !DILocation(line: 227, column: 14, scope: !3412)
!3428 = !DILocation(line: 227, column: 19, scope: !3412)
!3429 = !DILocation(line: 227, column: 3, scope: !3412)
!3430 = !DILocation(line: 227, column: 7, scope: !3412)
!3431 = !DILocation(line: 227, column: 12, scope: !3412)
!3432 = !DILocation(line: 228, column: 3, scope: !3412)
!3433 = !DILocation(line: 228, column: 7, scope: !3412)
!3434 = !DILocation(line: 228, column: 12, scope: !3412)
!3435 = !DILocation(line: 231, column: 3, scope: !3412)
!3436 = !DILocation(line: 233, column: 12, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3438, file: !1047, line: 233, column: 11)
!3438 = distinct !DILexicalBlock(scope: !3412, file: !1047, line: 232, column: 5)
!3439 = !DILocation(line: 233, column: 16, scope: !3437)
!3440 = !DILocation(line: 233, column: 11, scope: !3438)
!3441 = !DILocation(line: 235, column: 4, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3437, file: !1047, line: 234, column: 2)
!3443 = !DILocation(line: 235, column: 8, scope: !3442)
!3444 = !DILocation(line: 235, column: 13, scope: !3442)
!3445 = !DILocation(line: 236, column: 4, scope: !3442)
!3446 = !DILocation(line: 239, column: 11, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3438, file: !1047, line: 239, column: 11)
!3448 = !DILocation(line: 239, column: 15, scope: !3447)
!3449 = !DILocation(line: 239, column: 21, scope: !3447)
!3450 = !DILocation(line: 239, column: 29, scope: !3447)
!3451 = !DILocation(line: 239, column: 39, scope: !3447)
!3452 = !DILocation(line: 239, column: 26, scope: !3447)
!3453 = !DILocation(line: 239, column: 11, scope: !3438)
!3454 = !DILocation(line: 240, column: 2, scope: !3447)
!3455 = !DILocation(line: 241, column: 18, scope: !3438)
!3456 = !DILocation(line: 241, column: 22, scope: !3438)
!3457 = !DILocation(line: 241, column: 28, scope: !3438)
!3458 = !DILocation(line: 241, column: 7, scope: !3438)
!3459 = !DILocation(line: 241, column: 11, scope: !3438)
!3460 = !DILocation(line: 241, column: 16, scope: !3438)
!3461 = distinct !{!3461, !3435, !3462}
!3462 = !DILocation(line: 242, column: 5, scope: !3412)
!3463 = !DILocation(line: 245, column: 7, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3412, file: !1047, line: 245, column: 7)
!3465 = !DILocation(line: 245, column: 11, scope: !3464)
!3466 = !DILocation(line: 245, column: 17, scope: !3464)
!3467 = !DILocation(line: 245, column: 25, scope: !3464)
!3468 = !DILocation(line: 245, column: 35, scope: !3464)
!3469 = !DILocation(line: 245, column: 22, scope: !3464)
!3470 = !DILocation(line: 245, column: 7, scope: !3412)
!3471 = !DILocation(line: 246, column: 17, scope: !3464)
!3472 = !DILocation(line: 246, column: 21, scope: !3464)
!3473 = !DILocation(line: 246, column: 27, scope: !3464)
!3474 = !DILocation(line: 246, column: 32, scope: !3464)
!3475 = !DILocation(line: 246, column: 15, scope: !3464)
!3476 = !DILocation(line: 246, column: 5, scope: !3464)
!3477 = !DILocation(line: 249, column: 17, scope: !3412)
!3478 = !DILocation(line: 249, column: 27, scope: !3412)
!3479 = !DILocation(line: 249, column: 46, scope: !3412)
!3480 = !DILocation(line: 249, column: 3, scope: !3412)
!3481 = !DILocation(line: 249, column: 7, scope: !3412)
!3482 = !DILocation(line: 249, column: 15, scope: !3412)
!3483 = !DILocation(line: 250, column: 14, scope: !3412)
!3484 = !DILocation(line: 250, column: 18, scope: !3412)
!3485 = !DILocation(line: 250, column: 24, scope: !3412)
!3486 = !DILocation(line: 250, column: 29, scope: !3412)
!3487 = !DILocation(line: 250, column: 33, scope: !3412)
!3488 = !DILocation(line: 250, column: 3, scope: !3412)
!3489 = !DILocation(line: 250, column: 7, scope: !3412)
!3490 = !DILocation(line: 250, column: 12, scope: !3412)
!3491 = !DILocation(line: 251, column: 16, scope: !3412)
!3492 = !DILocation(line: 251, column: 26, scope: !3412)
!3493 = !DILocation(line: 251, column: 3, scope: !3412)
!3494 = !DILocation(line: 251, column: 7, scope: !3412)
!3495 = !DILocation(line: 251, column: 12, scope: !3412)
!3496 = !DILocation(line: 257, column: 17, scope: !3412)
!3497 = !DILocation(line: 257, column: 21, scope: !3412)
!3498 = !DILocation(line: 257, column: 16, scope: !3412)
!3499 = !DILocation(line: 257, column: 13, scope: !3412)
!3500 = !DILocation(line: 259, column: 13, scope: !3412)
!3501 = !DILocation(line: 259, column: 4, scope: !3412)
!3502 = !DILocation(line: 259, column: 11, scope: !3412)
!3503 = !DILocation(line: 260, column: 1, scope: !3412)
!3504 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1047, file: !1047, line: 393, type: !3505, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3505 = !DISubroutineType(types: !3506)
!3506 = !{!1236, !3415, !3380}
!3507 = !DILocalVariable(name: "bi", arg: 1, scope: !3504, file: !1047, line: 393, type: !3415)
!3508 = !DILocation(line: 393, column: 32, scope: !3504)
!3509 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3504, file: !1047, line: 393, type: !3380)
!3510 = !DILocation(line: 393, column: 46, scope: !3504)
!3511 = !DILocation(line: 396, column: 7, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3504, file: !1047, line: 396, column: 7)
!3513 = !DILocation(line: 396, column: 11, scope: !3512)
!3514 = !DILocation(line: 396, column: 7, scope: !3504)
!3515 = !DILocation(line: 397, column: 5, scope: !3512)
!3516 = !DILabel(scope: !3517, name: "next_bit", file: !1047, line: 398)
!3517 = distinct !DILexicalBlock(scope: !3512, file: !1047, line: 397, column: 5)
!3518 = !DILocation(line: 398, column: 5, scope: !3517)
!3519 = !DILocation(line: 399, column: 7, scope: !3517)
!3520 = !DILocation(line: 399, column: 16, scope: !3517)
!3521 = !DILocation(line: 399, column: 20, scope: !3517)
!3522 = !DILocation(line: 399, column: 25, scope: !3517)
!3523 = !DILocation(line: 399, column: 14, scope: !3517)
!3524 = !DILocation(line: 401, column: 4, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3517, file: !1047, line: 400, column: 2)
!3526 = !DILocation(line: 401, column: 8, scope: !3525)
!3527 = !DILocation(line: 401, column: 13, scope: !3525)
!3528 = !DILocation(line: 402, column: 5, scope: !3525)
!3529 = !DILocation(line: 402, column: 12, scope: !3525)
!3530 = distinct !{!3530, !3519, !3531}
!3531 = !DILocation(line: 403, column: 2, scope: !3517)
!3532 = !DILocation(line: 404, column: 7, scope: !3517)
!3533 = !DILocation(line: 410, column: 16, scope: !3504)
!3534 = !DILocation(line: 410, column: 15, scope: !3504)
!3535 = !DILocation(line: 410, column: 23, scope: !3504)
!3536 = !DILocation(line: 410, column: 42, scope: !3504)
!3537 = !DILocation(line: 411, column: 7, scope: !3504)
!3538 = !DILocation(line: 411, column: 26, scope: !3504)
!3539 = !DILocation(line: 410, column: 4, scope: !3504)
!3540 = !DILocation(line: 410, column: 11, scope: !3504)
!3541 = !DILocation(line: 412, column: 3, scope: !3504)
!3542 = !DILocation(line: 412, column: 7, scope: !3504)
!3543 = !DILocation(line: 412, column: 14, scope: !3504)
!3544 = !DILocation(line: 414, column: 3, scope: !3504)
!3545 = !DILocation(line: 417, column: 7, scope: !3546)
!3546 = distinct !DILexicalBlock(scope: !3504, file: !1047, line: 415, column: 5)
!3547 = !DILocation(line: 417, column: 14, scope: !3546)
!3548 = !DILocation(line: 417, column: 18, scope: !3546)
!3549 = !DILocation(line: 417, column: 26, scope: !3546)
!3550 = !DILocation(line: 419, column: 15, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3546, file: !1047, line: 418, column: 2)
!3552 = !DILocation(line: 419, column: 19, scope: !3551)
!3553 = !DILocation(line: 419, column: 25, scope: !3551)
!3554 = !DILocation(line: 419, column: 30, scope: !3551)
!3555 = !DILocation(line: 419, column: 34, scope: !3551)
!3556 = !DILocation(line: 419, column: 4, scope: !3551)
!3557 = !DILocation(line: 419, column: 8, scope: !3551)
!3558 = !DILocation(line: 419, column: 13, scope: !3551)
!3559 = !DILocation(line: 420, column: 8, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3551, file: !1047, line: 420, column: 8)
!3561 = !DILocation(line: 420, column: 12, scope: !3560)
!3562 = !DILocation(line: 420, column: 8, scope: !3551)
!3563 = !DILocation(line: 421, column: 6, scope: !3560)
!3564 = !DILocation(line: 422, column: 5, scope: !3551)
!3565 = !DILocation(line: 422, column: 12, scope: !3551)
!3566 = !DILocation(line: 423, column: 4, scope: !3551)
!3567 = !DILocation(line: 423, column: 8, scope: !3551)
!3568 = !DILocation(line: 423, column: 15, scope: !3551)
!3569 = distinct !{!3569, !3545, !3570}
!3570 = !DILocation(line: 424, column: 2, scope: !3546)
!3571 = !DILocation(line: 427, column: 18, scope: !3546)
!3572 = !DILocation(line: 427, column: 22, scope: !3546)
!3573 = !DILocation(line: 427, column: 28, scope: !3546)
!3574 = !DILocation(line: 427, column: 7, scope: !3546)
!3575 = !DILocation(line: 427, column: 11, scope: !3546)
!3576 = !DILocation(line: 427, column: 16, scope: !3546)
!3577 = !DILocation(line: 428, column: 12, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3546, file: !1047, line: 428, column: 11)
!3579 = !DILocation(line: 428, column: 16, scope: !3578)
!3580 = !DILocation(line: 428, column: 11, scope: !3546)
!3581 = !DILocation(line: 429, column: 2, scope: !3578)
!3582 = !DILocation(line: 430, column: 17, scope: !3546)
!3583 = !DILocation(line: 430, column: 21, scope: !3546)
!3584 = !DILocation(line: 430, column: 27, scope: !3546)
!3585 = !DILocation(line: 430, column: 32, scope: !3546)
!3586 = !DILocation(line: 430, column: 8, scope: !3546)
!3587 = !DILocation(line: 430, column: 15, scope: !3546)
!3588 = !DILocation(line: 431, column: 7, scope: !3546)
!3589 = !DILocation(line: 431, column: 11, scope: !3546)
!3590 = !DILocation(line: 431, column: 19, scope: !3546)
!3591 = distinct !{!3591, !3544, !3592}
!3592 = !DILocation(line: 432, column: 5, scope: !3504)
!3593 = !DILocation(line: 433, column: 1, scope: !3504)
!3594 = distinct !DISubprogram(name: "expression_for_id", scope: !3, file: !3, line: 321, type: !3595, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3595 = !DISubroutineType(types: !3596)
!3596 = !{!1112, !6}
!3597 = !DILocalVariable(name: "id", arg: 1, scope: !3594, file: !3, line: 321, type: !6)
!3598 = !DILocation(line: 321, column: 33, scope: !3594)
!3599 = !DILocation(line: 323, column: 10, scope: !3594)
!3600 = !DILocation(line: 323, column: 3, scope: !3594)
!3601 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1047, file: !1047, line: 382, type: !3602, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3602 = !DISubroutineType(types: !3603)
!3603 = !{null, !3415, !3380}
!3604 = !DILocalVariable(name: "bi", arg: 1, scope: !3601, file: !1047, line: 382, type: !3415)
!3605 = !DILocation(line: 382, column: 33, scope: !3601)
!3606 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3601, file: !1047, line: 382, type: !3380)
!3607 = !DILocation(line: 382, column: 47, scope: !3601)
!3608 = !DILocation(line: 384, column: 3, scope: !3601)
!3609 = !DILocation(line: 384, column: 7, scope: !3601)
!3610 = !DILocation(line: 384, column: 12, scope: !3601)
!3611 = !DILocation(line: 385, column: 4, scope: !3601)
!3612 = !DILocation(line: 385, column: 11, scope: !3601)
!3613 = !DILocation(line: 386, column: 1, scope: !3601)
!3614 = distinct !DISubprogram(name: "VEC_pre_expr_base_index", scope: !3, file: !3, line: 241, type: !3615, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3615 = !DISubroutineType(types: !3616)
!3616 = !{!1112, !3617, !6}
!3617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3618, size: 64)
!3618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2464)
!3619 = !DILocalVariable(name: "vec_", arg: 1, scope: !3614, file: !3, line: 241, type: !3617)
!3620 = !DILocation(line: 241, column: 1, scope: !3614)
!3621 = !DILocalVariable(name: "ix_", arg: 2, scope: !3614, file: !3, line: 241, type: !6)
!3622 = !DILocation(line: 0, scope: !3614)
!3623 = distinct !DISubprogram(name: "execute_pre", scope: !3, file: !3, line: 4730, type: !3624, scopeLine: 4731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3624 = !DISubroutineType(types: !3625)
!3625 = !{!6, !1236}
!3626 = !DILocalVariable(name: "do_fre", arg: 1, scope: !3623, file: !3, line: 4730, type: !1236)
!3627 = !DILocation(line: 4730, column: 19, scope: !3623)
!3628 = !DILocalVariable(name: "todo", scope: !3623, file: !3, line: 4732, type: !6)
!3629 = !DILocation(line: 4732, column: 16, scope: !3623)
!3630 = !DILocation(line: 4734, column: 24, scope: !3623)
!3631 = !DILocation(line: 4734, column: 33, scope: !3623)
!3632 = !DILocation(line: 4734, column: 37, scope: !3623)
!3633 = !DILocation(line: 4734, column: 71, scope: !3623)
!3634 = !DILocation(line: 4734, column: 40, scope: !3623)
!3635 = !DILocation(line: 0, scope: !3623)
!3636 = !DILocation(line: 4734, column: 22, scope: !3623)
!3637 = !DILocation(line: 4738, column: 8, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 4738, column: 7)
!3639 = !DILocation(line: 4738, column: 7, scope: !3623)
!3640 = !DILocation(line: 4739, column: 5, scope: !3638)
!3641 = !DILocation(line: 4741, column: 20, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 4741, column: 7)
!3643 = !DILocation(line: 4741, column: 8, scope: !3642)
!3644 = !DILocation(line: 4741, column: 7, scope: !3623)
!3645 = !DILocation(line: 4743, column: 12, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 4743, column: 11)
!3647 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 4742, column: 5)
!3648 = !DILocation(line: 4743, column: 11, scope: !3647)
!3649 = !DILocation(line: 4745, column: 4, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 4744, column: 2)
!3651 = !DILocation(line: 4746, column: 4, scope: !3650)
!3652 = !DILocation(line: 4747, column: 2, scope: !3650)
!3653 = !DILocation(line: 4749, column: 7, scope: !3647)
!3654 = !DILocation(line: 4751, column: 13, scope: !3623)
!3655 = !DILocation(line: 4751, column: 3, scope: !3623)
!3656 = !DILocation(line: 4752, column: 3, scope: !3623)
!3657 = !DILocation(line: 4756, column: 3, scope: !3623)
!3658 = !DILocation(line: 4758, column: 7, scope: !3659)
!3659 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 4758, column: 7)
!3660 = !DILocation(line: 4758, column: 17, scope: !3659)
!3661 = !DILocation(line: 4758, column: 21, scope: !3659)
!3662 = !DILocation(line: 4758, column: 32, scope: !3659)
!3663 = !DILocation(line: 4758, column: 7, scope: !3623)
!3664 = !DILocalVariable(name: "bb", scope: !3665, file: !3, line: 4760, type: !1838)
!3665 = distinct !DILexicalBlock(scope: !3659, file: !3, line: 4759, column: 5)
!3666 = !DILocation(line: 4760, column: 19, scope: !3665)
!3667 = !DILocation(line: 4762, column: 7, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3665, file: !3, line: 4762, column: 7)
!3669 = !DILocation(line: 4762, column: 7, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3668, file: !3, line: 4762, column: 7)
!3671 = !DILocation(line: 4764, column: 22, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 4763, column: 2)
!3673 = !DILocation(line: 4764, column: 33, scope: !3672)
!3674 = !DILocation(line: 4764, column: 58, scope: !3672)
!3675 = !DILocation(line: 4764, column: 62, scope: !3672)
!3676 = !DILocation(line: 4764, column: 4, scope: !3672)
!3677 = !DILocation(line: 4765, column: 22, scope: !3672)
!3678 = !DILocation(line: 4765, column: 33, scope: !3672)
!3679 = !DILocation(line: 4765, column: 58, scope: !3672)
!3680 = !DILocation(line: 4765, column: 62, scope: !3672)
!3681 = !DILocation(line: 4765, column: 4, scope: !3672)
!3682 = !DILocation(line: 4766, column: 22, scope: !3672)
!3683 = !DILocation(line: 4766, column: 33, scope: !3672)
!3684 = !DILocation(line: 4766, column: 58, scope: !3672)
!3685 = !DILocation(line: 4766, column: 62, scope: !3672)
!3686 = !DILocation(line: 4766, column: 4, scope: !3672)
!3687 = !DILocation(line: 4767, column: 22, scope: !3672)
!3688 = !DILocation(line: 4767, column: 33, scope: !3672)
!3689 = !DILocation(line: 4767, column: 62, scope: !3672)
!3690 = !DILocation(line: 4767, column: 66, scope: !3672)
!3691 = !DILocation(line: 4767, column: 4, scope: !3672)
!3692 = !DILocation(line: 4768, column: 2, scope: !3672)
!3693 = distinct !{!3693, !3667, !3694}
!3694 = !DILocation(line: 4768, column: 2, scope: !3668)
!3695 = !DILocation(line: 4769, column: 5, scope: !3665)
!3696 = !DILocation(line: 4776, column: 8, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 4776, column: 7)
!3698 = !DILocation(line: 4776, column: 15, scope: !3697)
!3699 = !DILocation(line: 4776, column: 18, scope: !3697)
!3700 = !DILocation(line: 4776, column: 33, scope: !3697)
!3701 = !DILocation(line: 4776, column: 7, scope: !3623)
!3702 = !DILocation(line: 4778, column: 7, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 4777, column: 5)
!3704 = !DILocation(line: 4779, column: 7, scope: !3703)
!3705 = !DILocation(line: 4780, column: 5, scope: !3703)
!3706 = !DILocation(line: 4783, column: 11, scope: !3623)
!3707 = !DILocation(line: 4783, column: 8, scope: !3623)
!3708 = !DILocation(line: 4785, column: 29, scope: !3623)
!3709 = !DILocation(line: 4785, column: 59, scope: !3623)
!3710 = !DILocation(line: 4785, column: 3, scope: !3623)
!3711 = !DILocation(line: 4786, column: 29, scope: !3623)
!3712 = !DILocation(line: 4786, column: 60, scope: !3623)
!3713 = !DILocation(line: 4786, column: 3, scope: !3623)
!3714 = !DILocation(line: 4787, column: 29, scope: !3623)
!3715 = !DILocation(line: 4787, column: 57, scope: !3623)
!3716 = !DILocation(line: 4787, column: 3, scope: !3623)
!3717 = !DILocation(line: 4788, column: 29, scope: !3623)
!3718 = !DILocation(line: 4788, column: 59, scope: !3623)
!3719 = !DILocation(line: 4788, column: 3, scope: !3623)
!3720 = !DILocation(line: 4789, column: 29, scope: !3623)
!3721 = !DILocation(line: 4789, column: 59, scope: !3623)
!3722 = !DILocation(line: 4789, column: 3, scope: !3623)
!3723 = !DILocation(line: 4794, column: 3, scope: !3623)
!3724 = !DILocation(line: 4795, column: 3, scope: !3623)
!3725 = !DILocation(line: 4797, column: 3, scope: !3623)
!3726 = !DILocation(line: 4798, column: 3, scope: !3623)
!3727 = !DILocation(line: 4799, column: 8, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 4799, column: 7)
!3729 = !DILocation(line: 4799, column: 7, scope: !3623)
!3730 = !DILocation(line: 4800, column: 5, scope: !3728)
!3731 = !DILocation(line: 4802, column: 3, scope: !3623)
!3732 = !DILocation(line: 4803, column: 13, scope: !3623)
!3733 = !DILocation(line: 4803, column: 3, scope: !3623)
!3734 = !DILocation(line: 4805, column: 10, scope: !3623)
!3735 = !DILocation(line: 4805, column: 3, scope: !3623)
!3736 = !DILocation(line: 4806, column: 1, scope: !3623)
!3737 = distinct !DISubprogram(name: "remove_dead_inserted_code", scope: !3, file: !3, line: 4468, type: !3738, scopeLine: 4469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3738 = !DISubroutineType(types: !3739)
!3739 = !{null}
!3740 = !DILocalVariable(name: "worklist", scope: !3737, file: !3, line: 4470, type: !2499)
!3741 = !DILocation(line: 4470, column: 21, scope: !3737)
!3742 = !DILocalVariable(name: "i", scope: !3737, file: !3, line: 4471, type: !1025)
!3743 = !DILocation(line: 4471, column: 7, scope: !3737)
!3744 = !DILocalVariable(name: "t", scope: !3737, file: !3, line: 4472, type: !1386)
!3745 = !DILocation(line: 4472, column: 10, scope: !3737)
!3746 = !DILocation(line: 4474, column: 14, scope: !3737)
!3747 = !DILocation(line: 4474, column: 12, scope: !3737)
!3748 = !DILocation(line: 4475, column: 10, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !3737, file: !3, line: 4475, column: 3)
!3750 = !DILocation(line: 4475, column: 8, scope: !3749)
!3751 = !DILocation(line: 4475, column: 15, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 4475, column: 3)
!3753 = !DILocation(line: 4475, column: 3, scope: !3749)
!3754 = !DILocation(line: 4477, column: 23, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3756, file: !3, line: 4477, column: 11)
!3756 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 4476, column: 5)
!3757 = !DILocation(line: 4477, column: 11, scope: !3755)
!3758 = !DILocation(line: 4477, column: 11, scope: !3756)
!3759 = !DILocation(line: 4478, column: 2, scope: !3755)
!3760 = !DILocation(line: 4479, column: 5, scope: !3756)
!3761 = !DILocation(line: 4475, column: 60, scope: !3752)
!3762 = !DILocation(line: 4475, column: 3, scope: !3752)
!3763 = distinct !{!3763, !3753, !3764}
!3764 = !DILocation(line: 4479, column: 5, scope: !3749)
!3765 = !DILocation(line: 4480, column: 3, scope: !3737)
!3766 = !DILocation(line: 4480, column: 10, scope: !3737)
!3767 = !DILocation(line: 4480, column: 40, scope: !3737)
!3768 = !DILocation(line: 4482, column: 11, scope: !3769)
!3769 = distinct !DILexicalBlock(scope: !3737, file: !3, line: 4481, column: 5)
!3770 = !DILocation(line: 4482, column: 9, scope: !3769)
!3771 = !DILocation(line: 4487, column: 24, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3769, file: !3, line: 4487, column: 11)
!3773 = !DILocation(line: 4487, column: 11, scope: !3772)
!3774 = !DILocation(line: 4487, column: 27, scope: !3772)
!3775 = !DILocation(line: 4487, column: 11, scope: !3769)
!3776 = !DILocalVariable(name: "k", scope: !3777, file: !3, line: 4489, type: !6)
!3777 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 4488, column: 2)
!3778 = !DILocation(line: 4489, column: 13, scope: !3777)
!3779 = !DILocation(line: 4491, column: 4, scope: !3777)
!3780 = !DILocation(line: 4492, column: 11, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 4492, column: 4)
!3782 = !DILocation(line: 4492, column: 9, scope: !3781)
!3783 = !DILocation(line: 4492, column: 16, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3781, file: !3, line: 4492, column: 4)
!3785 = !DILocation(line: 4492, column: 41, scope: !3784)
!3786 = !DILocation(line: 4492, column: 20, scope: !3784)
!3787 = !DILocation(line: 4492, column: 18, scope: !3784)
!3788 = !DILocation(line: 4492, column: 4, scope: !3781)
!3789 = !DILocalVariable(name: "arg", scope: !3790, file: !3, line: 4494, type: !1123)
!3790 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 4493, column: 6)
!3791 = !DILocation(line: 4494, column: 13, scope: !3790)
!3792 = !DILocation(line: 4494, column: 19, scope: !3790)
!3793 = !DILocation(line: 4495, column: 12, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3790, file: !3, line: 4495, column: 12)
!3795 = !DILocation(line: 4495, column: 28, scope: !3794)
!3796 = !DILocation(line: 4495, column: 12, scope: !3790)
!3797 = !DILocalVariable(name: "n", scope: !3798, file: !3, line: 4497, type: !1386)
!3798 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 4496, column: 3)
!3799 = !DILocation(line: 4497, column: 12, scope: !3798)
!3800 = !DILocation(line: 4497, column: 40, scope: !3798)
!3801 = !DILocation(line: 4497, column: 16, scope: !3798)
!3802 = !DILocation(line: 4498, column: 9, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3798, file: !3, line: 4498, column: 9)
!3804 = !DILocation(line: 4498, column: 9, scope: !3798)
!3805 = !DILocation(line: 4499, column: 7, scope: !3803)
!3806 = !DILocation(line: 4500, column: 3, scope: !3798)
!3807 = !DILocation(line: 4501, column: 6, scope: !3790)
!3808 = !DILocation(line: 4492, column: 46, scope: !3784)
!3809 = !DILocation(line: 4492, column: 4, scope: !3784)
!3810 = distinct !{!3810, !3788, !3811}
!3811 = !DILocation(line: 4501, column: 6, scope: !3781)
!3812 = !DILocation(line: 4502, column: 2, scope: !3777)
!3813 = !DILocalVariable(name: "iter", scope: !3814, file: !3, line: 4508, type: !3815)
!3814 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 4504, column: 2)
!3815 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !651, line: 140, baseType: !3816)
!3816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !651, line: 131, size: 320, elements: !3817)
!3817 = !{!3818, !3819, !3820, !3822, !3824, !3825, !3826}
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !3816, file: !651, line: 133, baseType: !1236, size: 8)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !3816, file: !651, line: 134, baseType: !650, size: 32, offset: 32)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !3816, file: !651, line: 135, baseType: !3821, size: 64, offset: 64)
!3821 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !651, line: 42, baseType: !1415)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !3816, file: !651, line: 136, baseType: !3823, size: 64, offset: 128)
!3823 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !651, line: 50, baseType: !1422)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !3816, file: !651, line: 137, baseType: !1025, size: 32, offset: 192)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !3816, file: !651, line: 138, baseType: !1025, size: 32, offset: 224)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !3816, file: !651, line: 139, baseType: !1386, size: 64, offset: 256)
!3827 = !DILocation(line: 4508, column: 16, scope: !3814)
!3828 = !DILocalVariable(name: "use", scope: !3814, file: !3, line: 4509, type: !1123)
!3829 = !DILocation(line: 4509, column: 9, scope: !3814)
!3830 = !DILocation(line: 4516, column: 4, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3814, file: !3, line: 4516, column: 4)
!3832 = !DILocation(line: 4516, column: 4, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3831, file: !3, line: 4516, column: 4)
!3834 = !DILocalVariable(name: "n", scope: !3835, file: !3, line: 4518, type: !1386)
!3835 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 4517, column: 6)
!3836 = !DILocation(line: 4518, column: 15, scope: !3835)
!3837 = !DILocation(line: 4518, column: 43, scope: !3835)
!3838 = !DILocation(line: 4518, column: 19, scope: !3835)
!3839 = !DILocation(line: 4519, column: 12, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 4519, column: 12)
!3841 = !DILocation(line: 4519, column: 12, scope: !3835)
!3842 = !DILocation(line: 4520, column: 3, scope: !3840)
!3843 = !DILocation(line: 4521, column: 6, scope: !3835)
!3844 = distinct !{!3844, !3830, !3845}
!3845 = !DILocation(line: 4521, column: 6, scope: !3831)
!3846 = distinct !{!3846, !3765, !3847}
!3847 = !DILocation(line: 4523, column: 5, scope: !3737)
!3848 = !DILocation(line: 4525, column: 10, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3737, file: !3, line: 4525, column: 3)
!3850 = !DILocation(line: 4525, column: 8, scope: !3849)
!3851 = !DILocation(line: 4525, column: 15, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 4525, column: 3)
!3853 = !DILocation(line: 4525, column: 3, scope: !3849)
!3854 = !DILocation(line: 4527, column: 24, scope: !3855)
!3855 = distinct !DILexicalBlock(scope: !3856, file: !3, line: 4527, column: 11)
!3856 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 4526, column: 5)
!3857 = !DILocation(line: 4527, column: 12, scope: !3855)
!3858 = !DILocation(line: 4527, column: 11, scope: !3856)
!3859 = !DILocalVariable(name: "gsi", scope: !3860, file: !3, line: 4529, type: !3861)
!3860 = distinct !DILexicalBlock(scope: !3855, file: !3, line: 4528, column: 2)
!3861 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !608, line: 265, baseType: !3862)
!3862 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !608, line: 254, size: 192, elements: !3863)
!3863 = !{!3864, !3865, !3866}
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3862, file: !608, line: 257, baseType: !1381, size: 64)
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3862, file: !608, line: 263, baseType: !1376, size: 64, offset: 64)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3862, file: !608, line: 264, baseType: !1838, size: 64, offset: 128)
!3867 = !DILocation(line: 4529, column: 25, scope: !3860)
!3868 = !DILocation(line: 4531, column: 8, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3860, file: !3, line: 4531, column: 8)
!3870 = !DILocation(line: 4531, column: 18, scope: !3869)
!3871 = !DILocation(line: 4531, column: 22, scope: !3869)
!3872 = !DILocation(line: 4531, column: 33, scope: !3869)
!3873 = !DILocation(line: 4531, column: 8, scope: !3860)
!3874 = !DILocation(line: 4533, column: 17, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3869, file: !3, line: 4532, column: 6)
!3876 = !DILocation(line: 4533, column: 8, scope: !3875)
!3877 = !DILocation(line: 4534, column: 27, scope: !3875)
!3878 = !DILocation(line: 4534, column: 38, scope: !3875)
!3879 = !DILocation(line: 4534, column: 8, scope: !3875)
!3880 = !DILocation(line: 4535, column: 6, scope: !3875)
!3881 = !DILocation(line: 4537, column: 24, scope: !3860)
!3882 = !DILocation(line: 4537, column: 10, scope: !3860)
!3883 = !DILocation(line: 4538, column: 21, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3860, file: !3, line: 4538, column: 8)
!3885 = !DILocation(line: 4538, column: 8, scope: !3884)
!3886 = !DILocation(line: 4538, column: 24, scope: !3884)
!3887 = !DILocation(line: 4538, column: 8, scope: !3860)
!3888 = !DILocation(line: 4539, column: 6, scope: !3884)
!3889 = !DILocation(line: 4542, column: 8, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3884, file: !3, line: 4541, column: 6)
!3891 = !DILocation(line: 4543, column: 22, scope: !3890)
!3892 = !DILocation(line: 4543, column: 8, scope: !3890)
!3893 = !DILocation(line: 4545, column: 2, scope: !3860)
!3894 = !DILocation(line: 4546, column: 5, scope: !3856)
!3895 = !DILocation(line: 4525, column: 60, scope: !3852)
!3896 = !DILocation(line: 4525, column: 3, scope: !3852)
!3897 = distinct !{!3897, !3853, !3898}
!3898 = !DILocation(line: 4546, column: 5, scope: !3849)
!3899 = !DILocation(line: 4547, column: 3, scope: !3737)
!3900 = !DILocation(line: 4548, column: 1, scope: !3737)
!3901 = distinct !DISubprogram(name: "init_pre", scope: !3, file: !3, line: 4632, type: !3902, scopeLine: 4633, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3902 = !DISubroutineType(types: !3903)
!3903 = !{null, !1236}
!3904 = !DILocalVariable(name: "do_fre", arg: 1, scope: !3901, file: !3, line: 4632, type: !1236)
!3905 = !DILocation(line: 4632, column: 16, scope: !3901)
!3906 = !DILocalVariable(name: "bb", scope: !3901, file: !3, line: 4634, type: !1838)
!3907 = !DILocation(line: 4634, column: 15, scope: !3901)
!3908 = !DILocation(line: 4636, column: 22, scope: !3901)
!3909 = !DILocation(line: 4637, column: 15, scope: !3901)
!3910 = !DILocation(line: 4638, column: 3, scope: !3901)
!3911 = !DILocation(line: 4639, column: 23, scope: !3901)
!3912 = !DILocation(line: 4639, column: 21, scope: !3901)
!3913 = !DILocation(line: 4640, column: 3, scope: !3901)
!3914 = !DILocation(line: 4642, column: 14, scope: !3901)
!3915 = !DILocation(line: 4644, column: 12, scope: !3901)
!3916 = !DILocation(line: 4644, column: 10, scope: !3901)
!3917 = !DILocation(line: 4646, column: 18, scope: !3901)
!3918 = !DILocation(line: 4647, column: 17, scope: !3901)
!3919 = !DILocation(line: 4648, column: 11, scope: !3901)
!3920 = !DILocation(line: 4649, column: 13, scope: !3901)
!3921 = !DILocation(line: 4650, column: 14, scope: !3901)
!3922 = !DILocation(line: 4652, column: 3, scope: !3901)
!3923 = !DILocation(line: 4653, column: 3, scope: !3901)
!3924 = !DILocation(line: 4656, column: 15, scope: !3901)
!3925 = !DILocation(line: 4656, column: 13, scope: !3901)
!3926 = !DILocation(line: 4657, column: 30, scope: !3901)
!3927 = !DILocation(line: 4657, column: 3, scope: !3901)
!3928 = !DILocation(line: 4659, column: 3, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 4659, column: 3)
!3930 = !DILocation(line: 4659, column: 3, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 4659, column: 3)
!3932 = !DILocation(line: 4660, column: 15, scope: !3931)
!3933 = !DILocation(line: 4660, column: 5, scope: !3931)
!3934 = !DILocation(line: 4660, column: 9, scope: !3931)
!3935 = !DILocation(line: 4660, column: 13, scope: !3931)
!3936 = distinct !{!3936, !3928, !3937}
!3937 = !DILocation(line: 4660, column: 15, scope: !3929)
!3938 = !DILocation(line: 4662, column: 3, scope: !3901)
!3939 = !DILocation(line: 4663, column: 3, scope: !3901)
!3940 = !DILocation(line: 4665, column: 3, scope: !3901)
!3941 = !DILocation(line: 4666, column: 24, scope: !3901)
!3942 = !DILocation(line: 4666, column: 22, scope: !3901)
!3943 = !DILocation(line: 4667, column: 25, scope: !3901)
!3944 = !DILocation(line: 4667, column: 23, scope: !3901)
!3945 = !DILocation(line: 4669, column: 35, scope: !3901)
!3946 = !DILocation(line: 4669, column: 49, scope: !3901)
!3947 = !DILocation(line: 4669, column: 22, scope: !3901)
!3948 = !DILocation(line: 4669, column: 20, scope: !3901)
!3949 = !DILocation(line: 4672, column: 21, scope: !3901)
!3950 = !DILocation(line: 4672, column: 19, scope: !3901)
!3951 = !DILocation(line: 4674, column: 19, scope: !3901)
!3952 = !DILocation(line: 4674, column: 17, scope: !3901)
!3953 = !DILocation(line: 4676, column: 3, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 4676, column: 3)
!3955 = !DILocation(line: 4676, column: 3, scope: !3956)
!3956 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 4676, column: 3)
!3957 = !DILocation(line: 4678, column: 22, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 4677, column: 5)
!3959 = !DILocation(line: 4678, column: 7, scope: !3958)
!3960 = !DILocation(line: 4678, column: 20, scope: !3958)
!3961 = !DILocation(line: 4679, column: 22, scope: !3958)
!3962 = !DILocation(line: 4679, column: 7, scope: !3958)
!3963 = !DILocation(line: 4679, column: 20, scope: !3958)
!3964 = !DILocation(line: 4680, column: 22, scope: !3958)
!3965 = !DILocation(line: 4680, column: 7, scope: !3958)
!3966 = !DILocation(line: 4680, column: 20, scope: !3958)
!3967 = !DILocation(line: 4681, column: 24, scope: !3958)
!3968 = !DILocation(line: 4681, column: 7, scope: !3958)
!3969 = !DILocation(line: 4681, column: 22, scope: !3958)
!3970 = !DILocation(line: 4682, column: 5, scope: !3958)
!3971 = distinct !{!3971, !3953, !3972}
!3972 = !DILocation(line: 4682, column: 5, scope: !3954)
!3973 = !DILocation(line: 4684, column: 21, scope: !3901)
!3974 = !DILocation(line: 4684, column: 19, scope: !3901)
!3975 = !DILocation(line: 4685, column: 1, scope: !3901)
!3976 = distinct !DISubprogram(name: "compute_avail", scope: !3, file: !3, line: 3837, type: !3738, scopeLine: 3838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!3977 = !DILocalVariable(name: "block", scope: !3976, file: !3, line: 3840, type: !1838)
!3978 = !DILocation(line: 3840, column: 15, scope: !3976)
!3979 = !DILocalVariable(name: "son", scope: !3976, file: !3, line: 3840, type: !1838)
!3980 = !DILocation(line: 3840, column: 22, scope: !3976)
!3981 = !DILocalVariable(name: "worklist", scope: !3976, file: !3, line: 3841, type: !2523)
!3982 = !DILocation(line: 3841, column: 16, scope: !3976)
!3983 = !DILocalVariable(name: "sp", scope: !3976, file: !3, line: 3842, type: !1531)
!3984 = !DILocation(line: 3842, column: 10, scope: !3976)
!3985 = !DILocalVariable(name: "i", scope: !3976, file: !3, line: 3843, type: !6)
!3986 = !DILocation(line: 3843, column: 12, scope: !3976)
!3987 = !DILocation(line: 3847, column: 10, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 3847, column: 3)
!3989 = !DILocation(line: 3847, column: 8, scope: !3988)
!3990 = !DILocation(line: 3847, column: 15, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3988, file: !3, line: 3847, column: 3)
!3992 = !DILocation(line: 3847, column: 19, scope: !3991)
!3993 = !DILocation(line: 3847, column: 17, scope: !3991)
!3994 = !DILocation(line: 3847, column: 3, scope: !3988)
!3995 = !DILocalVariable(name: "name", scope: !3996, file: !3, line: 3849, type: !1123)
!3996 = distinct !DILexicalBlock(scope: !3991, file: !3, line: 3848, column: 5)
!3997 = !DILocation(line: 3849, column: 12, scope: !3996)
!3998 = !DILocation(line: 3849, column: 19, scope: !3996)
!3999 = !DILocalVariable(name: "e", scope: !3996, file: !3, line: 3850, type: !1112)
!4000 = !DILocation(line: 3850, column: 16, scope: !3996)
!4001 = !DILocation(line: 3851, column: 12, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !3996, file: !3, line: 3851, column: 11)
!4003 = !DILocation(line: 3852, column: 4, scope: !4002)
!4004 = !DILocation(line: 3852, column: 8, scope: !4002)
!4005 = !DILocation(line: 3853, column: 4, scope: !4002)
!4006 = !DILocation(line: 3853, column: 22, scope: !4002)
!4007 = !DILocation(line: 3853, column: 7, scope: !4002)
!4008 = !DILocation(line: 3854, column: 4, scope: !4002)
!4009 = !DILocation(line: 3854, column: 23, scope: !4002)
!4010 = !DILocation(line: 3854, column: 8, scope: !4002)
!4011 = !DILocation(line: 3851, column: 11, scope: !3996)
!4012 = !DILocation(line: 3855, column: 2, scope: !4002)
!4013 = !DILocation(line: 3857, column: 39, scope: !3996)
!4014 = !DILocation(line: 3857, column: 11, scope: !3996)
!4015 = !DILocation(line: 3857, column: 9, scope: !3996)
!4016 = !DILocation(line: 3858, column: 40, scope: !3996)
!4017 = !DILocation(line: 3858, column: 21, scope: !3996)
!4018 = !DILocation(line: 3858, column: 44, scope: !3996)
!4019 = !DILocation(line: 3858, column: 7, scope: !3996)
!4020 = !DILocation(line: 3859, column: 12, scope: !4021)
!4021 = distinct !DILexicalBlock(scope: !3996, file: !3, line: 3859, column: 11)
!4022 = !DILocation(line: 3859, column: 11, scope: !3996)
!4023 = !DILocation(line: 3860, column: 26, scope: !4021)
!4024 = !DILocation(line: 3860, column: 53, scope: !4021)
!4025 = !DILocation(line: 3860, column: 2, scope: !4021)
!4026 = !DILocation(line: 3861, column: 37, scope: !3996)
!4027 = !DILocation(line: 3861, column: 66, scope: !3996)
!4028 = !DILocation(line: 3861, column: 7, scope: !3996)
!4029 = !DILocation(line: 3862, column: 5, scope: !3996)
!4030 = !DILocation(line: 3847, column: 34, scope: !3991)
!4031 = !DILocation(line: 3847, column: 3, scope: !3991)
!4032 = distinct !{!4032, !3994, !4033}
!4033 = !DILocation(line: 3862, column: 5, scope: !3988)
!4034 = !DILocation(line: 3865, column: 14, scope: !3976)
!4035 = !DILocation(line: 3865, column: 12, scope: !3976)
!4036 = !DILocation(line: 3869, column: 45, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 3869, column: 3)
!4038 = !DILocation(line: 3869, column: 14, scope: !4037)
!4039 = !DILocation(line: 3869, column: 12, scope: !4037)
!4040 = !DILocation(line: 3869, column: 8, scope: !4037)
!4041 = !DILocation(line: 3870, column: 8, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 3869, column: 3)
!4043 = !DILocation(line: 3869, column: 3, scope: !4037)
!4044 = !DILocation(line: 3872, column: 22, scope: !4042)
!4045 = !DILocation(line: 3872, column: 5, scope: !4042)
!4046 = !DILocation(line: 3872, column: 16, scope: !4042)
!4047 = !DILocation(line: 3872, column: 20, scope: !4042)
!4048 = !DILocation(line: 3871, column: 44, scope: !4042)
!4049 = !DILocation(line: 3871, column: 14, scope: !4042)
!4050 = !DILocation(line: 3871, column: 12, scope: !4042)
!4051 = !DILocation(line: 3869, column: 3, scope: !4042)
!4052 = distinct !{!4052, !4043, !4053}
!4053 = !DILocation(line: 3872, column: 22, scope: !4037)
!4054 = !DILocation(line: 3875, column: 3, scope: !3976)
!4055 = !DILocation(line: 3875, column: 10, scope: !3976)
!4056 = !DILocalVariable(name: "gsi", scope: !4057, file: !3, line: 3877, type: !3861)
!4057 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 3876, column: 5)
!4058 = !DILocation(line: 3877, column: 28, scope: !4057)
!4059 = !DILocalVariable(name: "stmt", scope: !4057, file: !3, line: 3878, type: !1386)
!4060 = !DILocation(line: 3878, column: 14, scope: !4057)
!4061 = !DILocalVariable(name: "dom", scope: !4057, file: !3, line: 3879, type: !1838)
!4062 = !DILocation(line: 3879, column: 19, scope: !4057)
!4063 = !DILocalVariable(name: "stmt_uid", scope: !4057, file: !3, line: 3880, type: !6)
!4064 = !DILocation(line: 3880, column: 20, scope: !4057)
!4065 = !DILocation(line: 3883, column: 15, scope: !4057)
!4066 = !DILocation(line: 3883, column: 24, scope: !4057)
!4067 = !DILocation(line: 3883, column: 13, scope: !4057)
!4068 = !DILocation(line: 3887, column: 54, scope: !4057)
!4069 = !DILocation(line: 3887, column: 13, scope: !4057)
!4070 = !DILocation(line: 3887, column: 11, scope: !4057)
!4071 = !DILocation(line: 3888, column: 11, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 3888, column: 11)
!4073 = !DILocation(line: 3888, column: 11, scope: !4057)
!4074 = !DILocation(line: 3889, column: 19, scope: !4072)
!4075 = !DILocation(line: 3889, column: 38, scope: !4072)
!4076 = !DILocation(line: 3889, column: 2, scope: !4072)
!4077 = !DILocation(line: 3892, column: 34, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 3892, column: 7)
!4079 = !DILocation(line: 3892, column: 18, scope: !4078)
!4080 = !DILocation(line: 3892, column: 12, scope: !4078)
!4081 = !DILocation(line: 3892, column: 43, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 3892, column: 7)
!4083 = !DILocation(line: 3892, column: 42, scope: !4082)
!4084 = !DILocation(line: 3892, column: 7, scope: !4078)
!4085 = !DILocation(line: 3893, column: 23, scope: !4082)
!4086 = !DILocation(line: 3893, column: 39, scope: !4082)
!4087 = !DILocation(line: 3893, column: 2, scope: !4082)
!4088 = !DILocation(line: 3892, column: 60, scope: !4082)
!4089 = !DILocation(line: 3892, column: 7, scope: !4082)
!4090 = distinct !{!4090, !4084, !4091}
!4091 = !DILocation(line: 3893, column: 44, scope: !4078)
!4092 = !DILocation(line: 3895, column: 7, scope: !4057)
!4093 = !DILocation(line: 3895, column: 32, scope: !4057)
!4094 = !DILocation(line: 3899, column: 32, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 3899, column: 7)
!4096 = !DILocation(line: 3899, column: 18, scope: !4095)
!4097 = !DILocation(line: 3899, column: 12, scope: !4095)
!4098 = !DILocation(line: 3899, column: 41, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 3899, column: 7)
!4100 = !DILocation(line: 3899, column: 40, scope: !4099)
!4101 = !DILocation(line: 3899, column: 7, scope: !4095)
!4102 = !DILocalVariable(name: "iter", scope: !4103, file: !3, line: 3901, type: !3815)
!4103 = distinct !DILexicalBlock(scope: !4099, file: !3, line: 3900, column: 2)
!4104 = !DILocation(line: 3901, column: 16, scope: !4103)
!4105 = !DILocalVariable(name: "op", scope: !4103, file: !3, line: 3902, type: !1123)
!4106 = !DILocation(line: 3902, column: 9, scope: !4103)
!4107 = !DILocation(line: 3904, column: 11, scope: !4103)
!4108 = !DILocation(line: 3904, column: 9, scope: !4103)
!4109 = !DILocation(line: 3905, column: 20, scope: !4103)
!4110 = !DILocation(line: 3905, column: 34, scope: !4103)
!4111 = !DILocation(line: 3905, column: 4, scope: !4103)
!4112 = !DILocation(line: 3911, column: 24, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 3911, column: 8)
!4114 = !DILocation(line: 3911, column: 8, scope: !4113)
!4115 = !DILocation(line: 3912, column: 8, scope: !4113)
!4116 = !DILocation(line: 3912, column: 28, scope: !4113)
!4117 = !DILocation(line: 3912, column: 12, scope: !4113)
!4118 = !DILocation(line: 3911, column: 8, scope: !4103)
!4119 = !DILocalVariable(name: "flags", scope: !4120, file: !3, line: 3918, type: !1025)
!4120 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 3913, column: 6)
!4121 = !DILocation(line: 3918, column: 12, scope: !4120)
!4122 = !DILocation(line: 3918, column: 39, scope: !4120)
!4123 = !DILocation(line: 3918, column: 20, scope: !4120)
!4124 = !DILocation(line: 3919, column: 14, scope: !4125)
!4125 = distinct !DILexicalBlock(scope: !4120, file: !3, line: 3919, column: 12)
!4126 = !DILocation(line: 3919, column: 20, scope: !4125)
!4127 = !DILocation(line: 3920, column: 5, scope: !4125)
!4128 = !DILocation(line: 3920, column: 9, scope: !4125)
!4129 = !DILocation(line: 3920, column: 15, scope: !4125)
!4130 = !DILocation(line: 3919, column: 12, scope: !4120)
!4131 = !DILocation(line: 3921, column: 3, scope: !4125)
!4132 = !DILocation(line: 3921, column: 28, scope: !4125)
!4133 = !DILocation(line: 3922, column: 6, scope: !4120)
!4134 = !DILocation(line: 3924, column: 4, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 3924, column: 4)
!4136 = !DILocation(line: 3924, column: 4, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 3924, column: 4)
!4138 = !DILocalVariable(name: "e", scope: !4139, file: !3, line: 3926, type: !1112)
!4139 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 3925, column: 6)
!4140 = !DILocation(line: 3926, column: 17, scope: !4139)
!4141 = !DILocation(line: 3926, column: 49, scope: !4139)
!4142 = !DILocation(line: 3926, column: 21, scope: !4139)
!4143 = !DILocation(line: 3928, column: 41, scope: !4139)
!4144 = !DILocation(line: 3928, column: 22, scope: !4139)
!4145 = !DILocation(line: 3928, column: 45, scope: !4139)
!4146 = !DILocation(line: 3928, column: 8, scope: !4139)
!4147 = !DILocation(line: 3929, column: 13, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 3929, column: 12)
!4149 = !DILocation(line: 3929, column: 12, scope: !4139)
!4150 = !DILocation(line: 3930, column: 27, scope: !4148)
!4151 = !DILocation(line: 3930, column: 44, scope: !4148)
!4152 = !DILocation(line: 3930, column: 3, scope: !4148)
!4153 = !DILocation(line: 3931, column: 38, scope: !4139)
!4154 = !DILocation(line: 3931, column: 57, scope: !4139)
!4155 = !DILocation(line: 3931, column: 8, scope: !4139)
!4156 = !DILocation(line: 3932, column: 6, scope: !4139)
!4157 = distinct !{!4157, !4134, !4158}
!4158 = !DILocation(line: 3932, column: 6, scope: !4135)
!4159 = !DILocation(line: 3934, column: 33, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 3934, column: 8)
!4161 = !DILocation(line: 3934, column: 8, scope: !4160)
!4162 = !DILocation(line: 3935, column: 8, scope: !4160)
!4163 = !DILocation(line: 3935, column: 31, scope: !4160)
!4164 = !DILocation(line: 3935, column: 11, scope: !4160)
!4165 = !DILocation(line: 3934, column: 8, scope: !4103)
!4166 = !DILocation(line: 3936, column: 6, scope: !4160)
!4167 = !DILocation(line: 3938, column: 25, scope: !4103)
!4168 = !DILocation(line: 3938, column: 12, scope: !4103)
!4169 = !DILocation(line: 3938, column: 4, scope: !4103)
!4170 = !DILocation(line: 3941, column: 8, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 3941, column: 8)
!4172 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 3939, column: 6)
!4173 = !DILocation(line: 3941, column: 8, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 3941, column: 8)
!4175 = !DILocation(line: 3942, column: 19, scope: !4174)
!4176 = !DILocation(line: 3942, column: 26, scope: !4174)
!4177 = !DILocation(line: 3942, column: 3, scope: !4174)
!4178 = distinct !{!4178, !4170, !4179}
!4179 = !DILocation(line: 3942, column: 28, scope: !4171)
!4180 = !DILocation(line: 3943, column: 8, scope: !4172)
!4181 = !DILocalVariable(name: "ref", scope: !4182, file: !3, line: 3947, type: !2428)
!4182 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 3946, column: 8)
!4183 = !DILocation(line: 3947, column: 18, scope: !4182)
!4184 = !DILocalVariable(name: "i", scope: !4182, file: !3, line: 3948, type: !6)
!4185 = !DILocation(line: 3948, column: 16, scope: !4182)
!4186 = !DILocalVariable(name: "vro", scope: !4182, file: !3, line: 3949, type: !2935)
!4187 = !DILocation(line: 3949, column: 21, scope: !4182)
!4188 = !DILocalVariable(name: "result", scope: !4182, file: !3, line: 3950, type: !1112)
!4189 = !DILocation(line: 3950, column: 12, scope: !4182)
!4190 = !DILocalVariable(name: "ops", scope: !4182, file: !3, line: 3951, type: !2438)
!4191 = !DILocation(line: 3951, column: 33, scope: !4182)
!4192 = !DILocation(line: 3953, column: 31, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 3953, column: 7)
!4194 = !DILocation(line: 3953, column: 8, scope: !4193)
!4195 = !DILocation(line: 3953, column: 7, scope: !4182)
!4196 = !DILocation(line: 3954, column: 5, scope: !4193)
!4197 = !DILocation(line: 3956, column: 33, scope: !4182)
!4198 = !DILocation(line: 3956, column: 3, scope: !4182)
!4199 = !DILocation(line: 3957, column: 44, scope: !4182)
!4200 = !DILocation(line: 3957, column: 31, scope: !4182)
!4201 = !DILocation(line: 3958, column: 28, scope: !4182)
!4202 = !DILocation(line: 3958, column: 10, scope: !4182)
!4203 = !DILocation(line: 3959, column: 10, scope: !4182)
!4204 = !DILocation(line: 3957, column: 3, scope: !4182)
!4205 = !DILocation(line: 3960, column: 3, scope: !4182)
!4206 = !DILocation(line: 3961, column: 8, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 3961, column: 7)
!4208 = !DILocation(line: 3961, column: 7, scope: !4182)
!4209 = !DILocation(line: 3962, column: 5, scope: !4207)
!4210 = !DILocation(line: 3964, column: 10, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 3964, column: 3)
!4212 = !DILocation(line: 3964, column: 8, scope: !4211)
!4213 = !DILocation(line: 3964, column: 15, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 3964, column: 3)
!4215 = !DILocation(line: 3964, column: 3, scope: !4211)
!4216 = !DILocation(line: 3968, column: 11, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 3968, column: 11)
!4218 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 3967, column: 5)
!4219 = !DILocation(line: 3968, column: 16, scope: !4217)
!4220 = !DILocation(line: 3968, column: 20, scope: !4217)
!4221 = !DILocation(line: 3968, column: 23, scope: !4217)
!4222 = !DILocation(line: 3968, column: 44, scope: !4217)
!4223 = !DILocation(line: 3968, column: 11, scope: !4218)
!4224 = !DILocation(line: 3969, column: 25, scope: !4217)
!4225 = !DILocation(line: 3969, column: 32, scope: !4217)
!4226 = !DILocation(line: 3969, column: 37, scope: !4217)
!4227 = !DILocation(line: 3969, column: 9, scope: !4217)
!4228 = !DILocation(line: 3970, column: 11, scope: !4229)
!4229 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 3970, column: 11)
!4230 = !DILocation(line: 3970, column: 16, scope: !4229)
!4231 = !DILocation(line: 3970, column: 20, scope: !4229)
!4232 = !DILocation(line: 3970, column: 23, scope: !4229)
!4233 = !DILocation(line: 3970, column: 44, scope: !4229)
!4234 = !DILocation(line: 3970, column: 11, scope: !4218)
!4235 = !DILocation(line: 3971, column: 25, scope: !4229)
!4236 = !DILocation(line: 3971, column: 32, scope: !4229)
!4237 = !DILocation(line: 3971, column: 37, scope: !4229)
!4238 = !DILocation(line: 3971, column: 9, scope: !4229)
!4239 = !DILocation(line: 3972, column: 11, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 3972, column: 11)
!4241 = !DILocation(line: 3972, column: 16, scope: !4240)
!4242 = !DILocation(line: 3972, column: 20, scope: !4240)
!4243 = !DILocation(line: 3972, column: 23, scope: !4240)
!4244 = !DILocation(line: 3972, column: 44, scope: !4240)
!4245 = !DILocation(line: 3972, column: 11, scope: !4218)
!4246 = !DILocation(line: 3973, column: 25, scope: !4240)
!4247 = !DILocation(line: 3973, column: 32, scope: !4240)
!4248 = !DILocation(line: 3973, column: 37, scope: !4240)
!4249 = !DILocation(line: 3973, column: 9, scope: !4240)
!4250 = !DILocation(line: 3974, column: 5, scope: !4218)
!4251 = !DILocation(line: 3966, column: 14, scope: !4214)
!4252 = !DILocation(line: 3964, column: 3, scope: !4214)
!4253 = distinct !{!4253, !4215, !4254}
!4254 = !DILocation(line: 3974, column: 5, scope: !4211)
!4255 = !DILocation(line: 3975, column: 35, scope: !4182)
!4256 = !DILocation(line: 3975, column: 23, scope: !4182)
!4257 = !DILocation(line: 3975, column: 12, scope: !4182)
!4258 = !DILocation(line: 3975, column: 10, scope: !4182)
!4259 = !DILocation(line: 3976, column: 3, scope: !4182)
!4260 = !DILocation(line: 3976, column: 11, scope: !4182)
!4261 = !DILocation(line: 3976, column: 16, scope: !4182)
!4262 = !DILocation(line: 3977, column: 3, scope: !4182)
!4263 = !DILocation(line: 3977, column: 11, scope: !4182)
!4264 = !DILocation(line: 3977, column: 14, scope: !4182)
!4265 = !DILocation(line: 3978, column: 33, scope: !4182)
!4266 = !DILocation(line: 3978, column: 3, scope: !4182)
!4267 = !DILocation(line: 3978, column: 31, scope: !4182)
!4268 = !DILocation(line: 3980, column: 31, scope: !4182)
!4269 = !DILocation(line: 3980, column: 3, scope: !4182)
!4270 = !DILocation(line: 3981, column: 36, scope: !4182)
!4271 = !DILocation(line: 3981, column: 17, scope: !4182)
!4272 = !DILocation(line: 3981, column: 45, scope: !4182)
!4273 = !DILocation(line: 3981, column: 3, scope: !4182)
!4274 = !DILocation(line: 3982, column: 8, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 3982, column: 7)
!4276 = !DILocation(line: 3982, column: 7, scope: !4182)
!4277 = !DILocation(line: 3983, column: 35, scope: !4275)
!4278 = !DILocation(line: 3983, column: 52, scope: !4275)
!4279 = !DILocation(line: 3983, column: 5, scope: !4275)
!4280 = !DILocation(line: 3984, column: 3, scope: !4182)
!4281 = !DILocalVariable(name: "result", scope: !4282, file: !3, line: 3989, type: !1112)
!4282 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 3988, column: 8)
!4283 = !DILocation(line: 3989, column: 12, scope: !4282)
!4284 = !DILocation(line: 3990, column: 11, scope: !4282)
!4285 = !DILocation(line: 3990, column: 3, scope: !4282)
!4286 = !DILocalVariable(name: "nary", scope: !4287, file: !3, line: 3996, type: !2414)
!4287 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 3995, column: 7)
!4288 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 3991, column: 5)
!4289 = !DILocation(line: 3996, column: 22, scope: !4287)
!4290 = !DILocalVariable(name: "i", scope: !4287, file: !3, line: 3997, type: !6)
!4291 = !DILocation(line: 3997, column: 22, scope: !4287)
!4292 = !DILocation(line: 3999, column: 51, scope: !4287)
!4293 = !DILocation(line: 3999, column: 35, scope: !4287)
!4294 = !DILocation(line: 3999, column: 57, scope: !4287)
!4295 = !DILocation(line: 4000, column: 31, scope: !4287)
!4296 = !DILocation(line: 4000, column: 7, scope: !4287)
!4297 = !DILocation(line: 4001, column: 25, scope: !4287)
!4298 = !DILocation(line: 4001, column: 7, scope: !4287)
!4299 = !DILocation(line: 4002, column: 27, scope: !4287)
!4300 = !DILocation(line: 4002, column: 7, scope: !4287)
!4301 = !DILocation(line: 4003, column: 27, scope: !4287)
!4302 = !DILocation(line: 4003, column: 7, scope: !4287)
!4303 = !DILocation(line: 3999, column: 9, scope: !4287)
!4304 = !DILocation(line: 4006, column: 14, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 4006, column: 13)
!4306 = !DILocation(line: 4006, column: 13, scope: !4287)
!4307 = !DILocation(line: 4007, column: 4, scope: !4305)
!4308 = !DILocation(line: 4009, column: 16, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 4009, column: 9)
!4310 = !DILocation(line: 4009, column: 14, scope: !4309)
!4311 = !DILocation(line: 4009, column: 21, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4309, file: !3, line: 4009, column: 9)
!4313 = !DILocation(line: 4009, column: 25, scope: !4312)
!4314 = !DILocation(line: 4009, column: 31, scope: !4312)
!4315 = !DILocation(line: 4009, column: 23, scope: !4312)
!4316 = !DILocation(line: 4009, column: 9, scope: !4309)
!4317 = !DILocation(line: 4010, column: 8, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 4010, column: 8)
!4319 = !DILocation(line: 4010, column: 32, scope: !4318)
!4320 = !DILocation(line: 4010, column: 8, scope: !4312)
!4321 = !DILocation(line: 4011, column: 22, scope: !4318)
!4322 = !DILocation(line: 4011, column: 29, scope: !4318)
!4323 = !DILocation(line: 4011, column: 35, scope: !4318)
!4324 = !DILocation(line: 4011, column: 38, scope: !4318)
!4325 = !DILocation(line: 4011, column: 6, scope: !4318)
!4326 = !DILocation(line: 4010, column: 35, scope: !4318)
!4327 = !DILocation(line: 4009, column: 40, scope: !4312)
!4328 = !DILocation(line: 4009, column: 9, scope: !4312)
!4329 = distinct !{!4329, !4316, !4330}
!4330 = !DILocation(line: 4011, column: 40, scope: !4309)
!4331 = !DILocation(line: 4013, column: 41, scope: !4287)
!4332 = !DILocation(line: 4013, column: 29, scope: !4287)
!4333 = !DILocation(line: 4013, column: 18, scope: !4287)
!4334 = !DILocation(line: 4013, column: 16, scope: !4287)
!4335 = !DILocation(line: 4014, column: 9, scope: !4287)
!4336 = !DILocation(line: 4014, column: 17, scope: !4287)
!4337 = !DILocation(line: 4014, column: 22, scope: !4287)
!4338 = !DILocation(line: 4015, column: 9, scope: !4287)
!4339 = !DILocation(line: 4015, column: 17, scope: !4287)
!4340 = !DILocation(line: 4015, column: 20, scope: !4287)
!4341 = !DILocation(line: 4016, column: 34, scope: !4287)
!4342 = !DILocation(line: 4016, column: 9, scope: !4287)
!4343 = !DILocation(line: 4016, column: 32, scope: !4287)
!4344 = !DILocation(line: 4017, column: 9, scope: !4287)
!4345 = !DILocalVariable(name: "ref", scope: !4346, file: !3, line: 4023, type: !2428)
!4346 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 4022, column: 7)
!4347 = !DILocation(line: 4023, column: 24, scope: !4346)
!4348 = !DILocalVariable(name: "i", scope: !4346, file: !3, line: 4024, type: !6)
!4349 = !DILocation(line: 4024, column: 22, scope: !4346)
!4350 = !DILocalVariable(name: "vro", scope: !4346, file: !3, line: 4025, type: !2935)
!4351 = !DILocation(line: 4025, column: 27, scope: !4346)
!4352 = !DILocation(line: 4027, column: 50, scope: !4346)
!4353 = !DILocation(line: 4027, column: 30, scope: !4346)
!4354 = !DILocation(line: 4028, column: 22, scope: !4346)
!4355 = !DILocation(line: 4028, column: 9, scope: !4346)
!4356 = !DILocation(line: 4027, column: 9, scope: !4346)
!4357 = !DILocation(line: 4030, column: 14, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4346, file: !3, line: 4030, column: 13)
!4359 = !DILocation(line: 4030, column: 13, scope: !4346)
!4360 = !DILocation(line: 4031, column: 4, scope: !4358)
!4361 = !DILocation(line: 4033, column: 16, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4346, file: !3, line: 4033, column: 9)
!4363 = !DILocation(line: 4033, column: 14, scope: !4362)
!4364 = !DILocation(line: 4033, column: 21, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4362, file: !3, line: 4033, column: 9)
!4366 = !DILocation(line: 4033, column: 9, scope: !4362)
!4367 = !DILocation(line: 4037, column: 10, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 4037, column: 10)
!4369 = distinct !DILexicalBlock(scope: !4365, file: !3, line: 4036, column: 4)
!4370 = !DILocation(line: 4037, column: 15, scope: !4368)
!4371 = !DILocation(line: 4037, column: 19, scope: !4368)
!4372 = !DILocation(line: 4037, column: 22, scope: !4368)
!4373 = !DILocation(line: 4037, column: 43, scope: !4368)
!4374 = !DILocation(line: 4037, column: 10, scope: !4369)
!4375 = !DILocation(line: 4038, column: 24, scope: !4368)
!4376 = !DILocation(line: 4038, column: 31, scope: !4368)
!4377 = !DILocation(line: 4038, column: 36, scope: !4368)
!4378 = !DILocation(line: 4038, column: 8, scope: !4368)
!4379 = !DILocation(line: 4039, column: 10, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 4039, column: 10)
!4381 = !DILocation(line: 4039, column: 15, scope: !4380)
!4382 = !DILocation(line: 4039, column: 19, scope: !4380)
!4383 = !DILocation(line: 4039, column: 22, scope: !4380)
!4384 = !DILocation(line: 4039, column: 43, scope: !4380)
!4385 = !DILocation(line: 4039, column: 10, scope: !4369)
!4386 = !DILocation(line: 4040, column: 24, scope: !4380)
!4387 = !DILocation(line: 4040, column: 31, scope: !4380)
!4388 = !DILocation(line: 4040, column: 36, scope: !4380)
!4389 = !DILocation(line: 4040, column: 8, scope: !4380)
!4390 = !DILocation(line: 4041, column: 10, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 4041, column: 10)
!4392 = !DILocation(line: 4041, column: 15, scope: !4391)
!4393 = !DILocation(line: 4041, column: 19, scope: !4391)
!4394 = !DILocation(line: 4041, column: 22, scope: !4391)
!4395 = !DILocation(line: 4041, column: 43, scope: !4391)
!4396 = !DILocation(line: 4041, column: 10, scope: !4369)
!4397 = !DILocation(line: 4042, column: 24, scope: !4391)
!4398 = !DILocation(line: 4042, column: 31, scope: !4391)
!4399 = !DILocation(line: 4042, column: 36, scope: !4391)
!4400 = !DILocation(line: 4042, column: 8, scope: !4391)
!4401 = !DILocation(line: 4043, column: 4, scope: !4369)
!4402 = !DILocation(line: 4035, column: 20, scope: !4365)
!4403 = !DILocation(line: 4033, column: 9, scope: !4365)
!4404 = distinct !{!4404, !4366, !4405}
!4405 = !DILocation(line: 4043, column: 4, scope: !4362)
!4406 = !DILocation(line: 4044, column: 41, scope: !4346)
!4407 = !DILocation(line: 4044, column: 29, scope: !4346)
!4408 = !DILocation(line: 4044, column: 18, scope: !4346)
!4409 = !DILocation(line: 4044, column: 16, scope: !4346)
!4410 = !DILocation(line: 4045, column: 9, scope: !4346)
!4411 = !DILocation(line: 4045, column: 17, scope: !4346)
!4412 = !DILocation(line: 4045, column: 22, scope: !4346)
!4413 = !DILocation(line: 4046, column: 9, scope: !4346)
!4414 = !DILocation(line: 4046, column: 17, scope: !4346)
!4415 = !DILocation(line: 4046, column: 20, scope: !4346)
!4416 = !DILocation(line: 4047, column: 39, scope: !4346)
!4417 = !DILocation(line: 4047, column: 9, scope: !4346)
!4418 = !DILocation(line: 4047, column: 37, scope: !4346)
!4419 = !DILocation(line: 4048, column: 9, scope: !4346)
!4420 = !DILocation(line: 4055, column: 7, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 4055, column: 7)
!4422 = !DILocation(line: 4055, column: 7, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 4055, column: 7)
!4424 = !DILocation(line: 4056, column: 25, scope: !4423)
!4425 = !DILocation(line: 4056, column: 32, scope: !4423)
!4426 = !DILocation(line: 4056, column: 9, scope: !4423)
!4427 = distinct !{!4427, !4420, !4428}
!4428 = !DILocation(line: 4056, column: 34, scope: !4421)
!4429 = !DILocation(line: 4057, column: 7, scope: !4288)
!4430 = !DILocation(line: 4060, column: 31, scope: !4282)
!4431 = !DILocation(line: 4060, column: 3, scope: !4282)
!4432 = !DILocation(line: 4061, column: 36, scope: !4282)
!4433 = !DILocation(line: 4061, column: 17, scope: !4282)
!4434 = !DILocation(line: 4061, column: 45, scope: !4282)
!4435 = !DILocation(line: 4061, column: 3, scope: !4282)
!4436 = !DILocation(line: 4062, column: 8, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 4062, column: 7)
!4438 = !DILocation(line: 4062, column: 7, scope: !4282)
!4439 = !DILocation(line: 4063, column: 35, scope: !4437)
!4440 = !DILocation(line: 4063, column: 52, scope: !4437)
!4441 = !DILocation(line: 4063, column: 5, scope: !4437)
!4442 = !DILocation(line: 4065, column: 3, scope: !4282)
!4443 = !DILocation(line: 4068, column: 8, scope: !4172)
!4444 = !DILocation(line: 4070, column: 2, scope: !4103)
!4445 = !DILocation(line: 3899, column: 58, scope: !4099)
!4446 = !DILocation(line: 3899, column: 7, scope: !4099)
!4447 = distinct !{!4447, !4101, !4448}
!4448 = !DILocation(line: 4070, column: 2, scope: !4095)
!4449 = !DILocation(line: 4074, column: 49, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 4074, column: 7)
!4451 = !DILocation(line: 4074, column: 18, scope: !4450)
!4452 = !DILocation(line: 4074, column: 16, scope: !4450)
!4453 = !DILocation(line: 4074, column: 12, scope: !4450)
!4454 = !DILocation(line: 4075, column: 5, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 4074, column: 7)
!4456 = !DILocation(line: 4074, column: 7, scope: !4450)
!4457 = !DILocation(line: 4077, column: 19, scope: !4455)
!4458 = !DILocation(line: 4077, column: 2, scope: !4455)
!4459 = !DILocation(line: 4077, column: 13, scope: !4455)
!4460 = !DILocation(line: 4077, column: 17, scope: !4455)
!4461 = !DILocation(line: 4076, column: 41, scope: !4455)
!4462 = !DILocation(line: 4076, column: 11, scope: !4455)
!4463 = !DILocation(line: 4076, column: 9, scope: !4455)
!4464 = !DILocation(line: 4074, column: 7, scope: !4455)
!4465 = distinct !{!4465, !4456, !4466}
!4466 = !DILocation(line: 4077, column: 19, scope: !4450)
!4467 = distinct !{!4467, !4054, !4468}
!4468 = !DILocation(line: 4078, column: 5, scope: !3976)
!4469 = !DILocation(line: 4080, column: 9, scope: !3976)
!4470 = !DILocation(line: 4080, column: 3, scope: !3976)
!4471 = !DILocation(line: 4081, column: 1, scope: !3976)
!4472 = distinct !DISubprogram(name: "compute_antic", scope: !3, file: !3, line: 2533, type: !3738, scopeLine: 2534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!4473 = !DILocalVariable(name: "changed", scope: !4472, file: !3, line: 2535, type: !1236)
!4474 = !DILocation(line: 2535, column: 8, scope: !4472)
!4475 = !DILocalVariable(name: "num_iterations", scope: !4472, file: !3, line: 2536, type: !1025)
!4476 = !DILocation(line: 2536, column: 7, scope: !4472)
!4477 = !DILocalVariable(name: "block", scope: !4472, file: !3, line: 2537, type: !1838)
!4478 = !DILocation(line: 2537, column: 15, scope: !4472)
!4479 = !DILocalVariable(name: "i", scope: !4472, file: !3, line: 2538, type: !1025)
!4480 = !DILocation(line: 2538, column: 7, scope: !4472)
!4481 = !DILocation(line: 2542, column: 39, scope: !4472)
!4482 = !DILocation(line: 2542, column: 24, scope: !4472)
!4483 = !DILocation(line: 2542, column: 22, scope: !4472)
!4484 = !DILocation(line: 2543, column: 17, scope: !4472)
!4485 = !DILocation(line: 2543, column: 3, scope: !4472)
!4486 = !DILocation(line: 2545, column: 3, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 2545, column: 3)
!4488 = !DILocation(line: 2545, column: 3, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 2545, column: 3)
!4490 = !DILocalVariable(name: "ei", scope: !4491, file: !3, line: 2547, type: !2506)
!4491 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 2546, column: 5)
!4492 = !DILocation(line: 2547, column: 21, scope: !4491)
!4493 = !DILocalVariable(name: "e", scope: !4491, file: !3, line: 2548, type: !1366)
!4494 = !DILocation(line: 2548, column: 12, scope: !4491)
!4495 = !DILocation(line: 2550, column: 7, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4491, file: !3, line: 2550, column: 7)
!4497 = !DILocation(line: 2550, column: 7, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 2550, column: 7)
!4499 = !DILocation(line: 2552, column: 4, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 2551, column: 2)
!4501 = !DILocation(line: 2552, column: 7, scope: !4500)
!4502 = !DILocation(line: 2552, column: 13, scope: !4500)
!4503 = !DILocation(line: 2553, column: 8, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 2553, column: 8)
!4505 = !DILocation(line: 2553, column: 11, scope: !4504)
!4506 = !DILocation(line: 2553, column: 17, scope: !4504)
!4507 = !DILocation(line: 2553, column: 8, scope: !4500)
!4508 = !DILocation(line: 2555, column: 17, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 2554, column: 6)
!4510 = !DILocation(line: 2555, column: 37, scope: !4509)
!4511 = !DILocation(line: 2555, column: 44, scope: !4509)
!4512 = !DILocation(line: 2555, column: 8, scope: !4509)
!4513 = !DILocation(line: 2556, column: 8, scope: !4509)
!4514 = !DILocation(line: 2558, column: 2, scope: !4500)
!4515 = distinct !{!4515, !4495, !4516}
!4516 = !DILocation(line: 2558, column: 2, scope: !4496)
!4517 = !DILocation(line: 2560, column: 7, scope: !4491)
!4518 = !DILocation(line: 2560, column: 26, scope: !4491)
!4519 = !DILocation(line: 2561, column: 7, scope: !4491)
!4520 = !DILocation(line: 2561, column: 27, scope: !4491)
!4521 = !DILocation(line: 2564, column: 26, scope: !4491)
!4522 = !DILocation(line: 2564, column: 7, scope: !4491)
!4523 = !DILocation(line: 2564, column: 24, scope: !4491)
!4524 = !DILocation(line: 2565, column: 23, scope: !4491)
!4525 = !DILocation(line: 2565, column: 7, scope: !4491)
!4526 = !DILocation(line: 2565, column: 21, scope: !4491)
!4527 = !DILocation(line: 2566, column: 5, scope: !4491)
!4528 = distinct !{!4528, !4486, !4529}
!4529 = !DILocation(line: 2566, column: 5, scope: !4487)
!4530 = !DILocation(line: 2569, column: 31, scope: !4472)
!4531 = !DILocation(line: 2569, column: 3, scope: !4472)
!4532 = !DILocation(line: 2569, column: 29, scope: !4472)
!4533 = !DILocation(line: 2570, column: 3, scope: !4472)
!4534 = !DILocation(line: 2570, column: 31, scope: !4472)
!4535 = !DILocation(line: 2571, column: 28, scope: !4472)
!4536 = !DILocation(line: 2571, column: 3, scope: !4472)
!4537 = !DILocation(line: 2571, column: 26, scope: !4472)
!4538 = !DILocation(line: 2573, column: 35, scope: !4472)
!4539 = !DILocation(line: 2573, column: 52, scope: !4472)
!4540 = !DILocation(line: 2573, column: 20, scope: !4472)
!4541 = !DILocation(line: 2573, column: 18, scope: !4472)
!4542 = !DILocation(line: 2574, column: 17, scope: !4472)
!4543 = !DILocation(line: 2574, column: 3, scope: !4472)
!4544 = !DILocation(line: 2575, column: 3, scope: !4472)
!4545 = !DILocation(line: 2575, column: 10, scope: !4472)
!4546 = !DILocation(line: 2577, column: 11, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 2577, column: 11)
!4548 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 2576, column: 5)
!4549 = !DILocation(line: 2577, column: 21, scope: !4547)
!4550 = !DILocation(line: 2577, column: 25, scope: !4547)
!4551 = !DILocation(line: 2577, column: 36, scope: !4547)
!4552 = !DILocation(line: 2577, column: 11, scope: !4548)
!4553 = !DILocation(line: 2578, column: 11, scope: !4547)
!4554 = !DILocation(line: 2578, column: 49, scope: !4547)
!4555 = !DILocation(line: 2578, column: 2, scope: !4547)
!4556 = !DILocation(line: 2579, column: 21, scope: !4548)
!4557 = !DILocation(line: 2580, column: 15, scope: !4548)
!4558 = !DILocation(line: 2581, column: 16, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 2581, column: 7)
!4560 = !DILocation(line: 2581, column: 31, scope: !4559)
!4561 = !DILocation(line: 2581, column: 50, scope: !4559)
!4562 = !DILocation(line: 2581, column: 14, scope: !4559)
!4563 = !DILocation(line: 2581, column: 12, scope: !4559)
!4564 = !DILocation(line: 2581, column: 55, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 2581, column: 7)
!4566 = !DILocation(line: 2581, column: 57, scope: !4565)
!4567 = !DILocation(line: 2581, column: 7, scope: !4559)
!4568 = !DILocation(line: 2583, column: 8, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4570, file: !3, line: 2583, column: 8)
!4570 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 2582, column: 2)
!4571 = !DILocation(line: 2583, column: 8, scope: !4570)
!4572 = !DILocalVariable(name: "block", scope: !4573, file: !3, line: 2585, type: !1838)
!4573 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 2584, column: 6)
!4574 = !DILocation(line: 2585, column: 20, scope: !4573)
!4575 = !DILocation(line: 2585, column: 28, scope: !4573)
!4576 = !DILocation(line: 2586, column: 38, scope: !4573)
!4577 = !DILocation(line: 2587, column: 10, scope: !4573)
!4578 = !DILocation(line: 2586, column: 19, scope: !4573)
!4579 = !DILocation(line: 2586, column: 16, scope: !4573)
!4580 = !DILocation(line: 2589, column: 6, scope: !4573)
!4581 = !DILocation(line: 2590, column: 2, scope: !4570)
!4582 = !DILocation(line: 2581, column: 64, scope: !4565)
!4583 = !DILocation(line: 2581, column: 7, scope: !4565)
!4584 = distinct !{!4584, !4567, !4585}
!4585 = !DILocation(line: 2590, column: 2, scope: !4559)
!4586 = distinct !{!4586, !4544, !4587}
!4587 = !DILocation(line: 2595, column: 5, scope: !4472)
!4588 = !DILocation(line: 2597, column: 31, scope: !4472)
!4589 = !DILocation(line: 2598, column: 10, scope: !4472)
!4590 = !DILocation(line: 2597, column: 3, scope: !4472)
!4591 = !DILocation(line: 2600, column: 7, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 2600, column: 7)
!4593 = !DILocation(line: 2600, column: 7, scope: !4472)
!4594 = !DILocation(line: 2602, column: 21, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 2601, column: 5)
!4596 = !DILocation(line: 2602, column: 7, scope: !4595)
!4597 = !DILocation(line: 2603, column: 7, scope: !4595)
!4598 = !DILocation(line: 2604, column: 22, scope: !4595)
!4599 = !DILocation(line: 2605, column: 15, scope: !4595)
!4600 = !DILocation(line: 2606, column: 7, scope: !4595)
!4601 = !DILocation(line: 2606, column: 14, scope: !4595)
!4602 = !DILocation(line: 2608, column: 8, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 2608, column: 8)
!4604 = distinct !DILexicalBlock(scope: !4595, file: !3, line: 2607, column: 2)
!4605 = !DILocation(line: 2608, column: 18, scope: !4603)
!4606 = !DILocation(line: 2608, column: 22, scope: !4603)
!4607 = !DILocation(line: 2608, column: 33, scope: !4603)
!4608 = !DILocation(line: 2608, column: 8, scope: !4604)
!4609 = !DILocation(line: 2609, column: 15, scope: !4603)
!4610 = !DILocation(line: 2609, column: 53, scope: !4603)
!4611 = !DILocation(line: 2609, column: 6, scope: !4603)
!4612 = !DILocation(line: 2610, column: 18, scope: !4604)
!4613 = !DILocation(line: 2611, column: 12, scope: !4604)
!4614 = !DILocation(line: 2612, column: 13, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 2612, column: 4)
!4616 = !DILocation(line: 2612, column: 28, scope: !4615)
!4617 = !DILocation(line: 2612, column: 47, scope: !4615)
!4618 = !DILocation(line: 2612, column: 11, scope: !4615)
!4619 = !DILocation(line: 2612, column: 9, scope: !4615)
!4620 = !DILocation(line: 2612, column: 53, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 2612, column: 4)
!4622 = !DILocation(line: 2612, column: 55, scope: !4621)
!4623 = !DILocation(line: 2612, column: 4, scope: !4615)
!4624 = !DILocation(line: 2614, column: 12, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4626, file: !3, line: 2614, column: 12)
!4626 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 2613, column: 6)
!4627 = !DILocation(line: 2614, column: 12, scope: !4626)
!4628 = !DILocalVariable(name: "block", scope: !4629, file: !3, line: 2616, type: !1838)
!4629 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 2615, column: 3)
!4630 = !DILocation(line: 2616, column: 17, scope: !4629)
!4631 = !DILocation(line: 2616, column: 25, scope: !4629)
!4632 = !DILocation(line: 2618, column: 37, scope: !4629)
!4633 = !DILocation(line: 2619, column: 9, scope: !4629)
!4634 = !DILocation(line: 2618, column: 10, scope: !4629)
!4635 = !DILocation(line: 2618, column: 7, scope: !4629)
!4636 = !DILocation(line: 2621, column: 3, scope: !4629)
!4637 = !DILocation(line: 2622, column: 6, scope: !4626)
!4638 = !DILocation(line: 2612, column: 62, scope: !4621)
!4639 = !DILocation(line: 2612, column: 4, scope: !4621)
!4640 = distinct !{!4640, !4623, !4641}
!4641 = !DILocation(line: 2622, column: 6, scope: !4615)
!4642 = distinct !{!4642, !4600, !4643}
!4643 = !DILocation(line: 2627, column: 2, scope: !4595)
!4644 = !DILocation(line: 2628, column: 35, scope: !4595)
!4645 = !DILocation(line: 2629, column: 7, scope: !4595)
!4646 = !DILocation(line: 2628, column: 7, scope: !4595)
!4647 = !DILocation(line: 2630, column: 5, scope: !4595)
!4648 = !DILocation(line: 2631, column: 3, scope: !4472)
!4649 = !DILocation(line: 2632, column: 3, scope: !4472)
!4650 = !DILocation(line: 2633, column: 1, scope: !4472)
!4651 = distinct !DISubprogram(name: "insert", scope: !3, file: !3, line: 3762, type: !3738, scopeLine: 3763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!4652 = !DILocalVariable(name: "new_stuff", scope: !4651, file: !3, line: 3764, type: !1236)
!4653 = !DILocation(line: 3764, column: 8, scope: !4651)
!4654 = !DILocalVariable(name: "bb", scope: !4651, file: !3, line: 3765, type: !1838)
!4655 = !DILocation(line: 3765, column: 15, scope: !4651)
!4656 = !DILocalVariable(name: "num_iterations", scope: !4651, file: !3, line: 3766, type: !1025)
!4657 = !DILocation(line: 3766, column: 7, scope: !4651)
!4658 = !DILocation(line: 3768, column: 3, scope: !4659)
!4659 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 3768, column: 3)
!4660 = !DILocation(line: 3768, column: 3, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4659, file: !3, line: 3768, column: 3)
!4662 = !DILocation(line: 3769, column: 21, scope: !4661)
!4663 = !DILocation(line: 3769, column: 5, scope: !4661)
!4664 = !DILocation(line: 3769, column: 19, scope: !4661)
!4665 = distinct !{!4665, !4658, !4666}
!4666 = !DILocation(line: 3769, column: 37, scope: !4659)
!4667 = !DILocation(line: 3771, column: 3, scope: !4651)
!4668 = !DILocation(line: 3771, column: 10, scope: !4651)
!4669 = !DILocation(line: 3773, column: 21, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 3772, column: 5)
!4671 = !DILocation(line: 3774, column: 31, scope: !4670)
!4672 = !DILocation(line: 3774, column: 19, scope: !4670)
!4673 = !DILocation(line: 3774, column: 17, scope: !4670)
!4674 = distinct !{!4674, !4667, !4675}
!4675 = !DILocation(line: 3775, column: 5, scope: !4651)
!4676 = !DILocation(line: 3776, column: 31, scope: !4651)
!4677 = !DILocation(line: 3776, column: 58, scope: !4651)
!4678 = !DILocation(line: 3776, column: 3, scope: !4651)
!4679 = !DILocation(line: 3777, column: 1, scope: !4651)
!4680 = distinct !DISubprogram(name: "eliminate", scope: !3, file: !3, line: 4117, type: !2553, scopeLine: 4118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!4681 = !DILocalVariable(name: "to_remove", scope: !4680, file: !3, line: 4119, type: !2499)
!4682 = !DILocation(line: 4119, column: 23, scope: !4680)
!4683 = !DILocalVariable(name: "b", scope: !4680, file: !3, line: 4120, type: !1838)
!4684 = !DILocation(line: 4120, column: 15, scope: !4680)
!4685 = !DILocalVariable(name: "todo", scope: !4680, file: !3, line: 4121, type: !6)
!4686 = !DILocation(line: 4121, column: 16, scope: !4680)
!4687 = !DILocalVariable(name: "gsi", scope: !4680, file: !3, line: 4122, type: !3861)
!4688 = !DILocation(line: 4122, column: 24, scope: !4680)
!4689 = !DILocalVariable(name: "stmt", scope: !4680, file: !3, line: 4123, type: !1386)
!4690 = !DILocation(line: 4123, column: 10, scope: !4680)
!4691 = !DILocalVariable(name: "i", scope: !4680, file: !3, line: 4124, type: !6)
!4692 = !DILocation(line: 4124, column: 12, scope: !4680)
!4693 = !DILocation(line: 4126, column: 3, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 4126, column: 3)
!4695 = !DILocation(line: 4126, column: 3, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 4126, column: 3)
!4697 = !DILocation(line: 4128, column: 32, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 4128, column: 7)
!4699 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 4127, column: 5)
!4700 = !DILocation(line: 4128, column: 18, scope: !4698)
!4701 = !DILocation(line: 4128, column: 12, scope: !4698)
!4702 = !DILocation(line: 4128, column: 37, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 4128, column: 7)
!4704 = !DILocation(line: 4128, column: 36, scope: !4703)
!4705 = !DILocation(line: 4128, column: 7, scope: !4698)
!4706 = !DILocation(line: 4130, column: 11, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 4129, column: 2)
!4708 = !DILocation(line: 4130, column: 9, scope: !4707)
!4709 = !DILocation(line: 4135, column: 24, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 4135, column: 8)
!4711 = !DILocation(line: 4135, column: 8, scope: !4710)
!4712 = !DILocation(line: 4136, column: 8, scope: !4710)
!4713 = !DILocation(line: 4136, column: 11, scope: !4710)
!4714 = !DILocation(line: 4136, column: 45, scope: !4710)
!4715 = !DILocation(line: 4137, column: 8, scope: !4710)
!4716 = !DILocation(line: 4137, column: 43, scope: !4710)
!4717 = !DILocation(line: 4137, column: 12, scope: !4710)
!4718 = !DILocation(line: 4138, column: 8, scope: !4710)
!4719 = !DILocation(line: 4138, column: 37, scope: !4710)
!4720 = !DILocation(line: 4138, column: 13, scope: !4710)
!4721 = !DILocation(line: 4139, column: 5, scope: !4710)
!4722 = !DILocation(line: 4139, column: 54, scope: !4710)
!4723 = !DILocation(line: 4139, column: 34, scope: !4710)
!4724 = !DILocation(line: 4139, column: 9, scope: !4710)
!4725 = !DILocation(line: 4140, column: 8, scope: !4710)
!4726 = !DILocation(line: 4140, column: 38, scope: !4710)
!4727 = !DILocation(line: 4140, column: 12, scope: !4710)
!4728 = !DILocation(line: 4141, column: 8, scope: !4710)
!4729 = !DILocation(line: 4141, column: 43, scope: !4710)
!4730 = !DILocation(line: 4141, column: 27, scope: !4710)
!4731 = !DILocation(line: 4141, column: 12, scope: !4710)
!4732 = !DILocation(line: 4135, column: 8, scope: !4707)
!4733 = !DILocalVariable(name: "lhs", scope: !4734, file: !3, line: 4143, type: !1123)
!4734 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 4142, column: 6)
!4735 = !DILocation(line: 4143, column: 13, scope: !4734)
!4736 = !DILocation(line: 4143, column: 35, scope: !4734)
!4737 = !DILocation(line: 4143, column: 19, scope: !4734)
!4738 = !DILocalVariable(name: "rhs", scope: !4734, file: !3, line: 4144, type: !1123)
!4739 = !DILocation(line: 4144, column: 13, scope: !4734)
!4740 = !DILocalVariable(name: "sprime", scope: !4734, file: !3, line: 4145, type: !1123)
!4741 = !DILocation(line: 4145, column: 13, scope: !4734)
!4742 = !DILocalVariable(name: "lhsexpr", scope: !4734, file: !3, line: 4146, type: !1112)
!4743 = !DILocation(line: 4146, column: 17, scope: !4734)
!4744 = !DILocation(line: 4146, column: 55, scope: !4734)
!4745 = !DILocation(line: 4146, column: 27, scope: !4734)
!4746 = !DILocalVariable(name: "sprimeexpr", scope: !4734, file: !3, line: 4147, type: !1112)
!4747 = !DILocation(line: 4147, column: 17, scope: !4734)
!4748 = !DILocation(line: 4149, column: 36, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 4149, column: 12)
!4750 = !DILocation(line: 4149, column: 12, scope: !4749)
!4751 = !DILocation(line: 4149, column: 12, scope: !4734)
!4752 = !DILocation(line: 4150, column: 29, scope: !4749)
!4753 = !DILocation(line: 4150, column: 9, scope: !4749)
!4754 = !DILocation(line: 4150, column: 7, scope: !4749)
!4755 = !DILocation(line: 4150, column: 3, scope: !4749)
!4756 = !DILocation(line: 4152, column: 41, scope: !4734)
!4757 = !DILocation(line: 4153, column: 32, scope: !4734)
!4758 = !DILocation(line: 4153, column: 13, scope: !4734)
!4759 = !DILocation(line: 4152, column: 21, scope: !4734)
!4760 = !DILocation(line: 4152, column: 19, scope: !4734)
!4761 = !DILocation(line: 4156, column: 12, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 4156, column: 12)
!4763 = !DILocation(line: 4156, column: 12, scope: !4734)
!4764 = !DILocation(line: 4158, column: 9, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 4158, column: 9)
!4766 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 4157, column: 3)
!4767 = !DILocation(line: 4158, column: 21, scope: !4765)
!4768 = !DILocation(line: 4158, column: 26, scope: !4765)
!4769 = !DILocation(line: 4158, column: 9, scope: !4766)
!4770 = !DILocation(line: 4159, column: 16, scope: !4765)
!4771 = !DILocation(line: 4159, column: 14, scope: !4765)
!4772 = !DILocation(line: 4159, column: 7, scope: !4765)
!4773 = !DILocation(line: 4160, column: 14, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 4160, column: 14)
!4775 = !DILocation(line: 4160, column: 26, scope: !4774)
!4776 = !DILocation(line: 4160, column: 31, scope: !4774)
!4777 = !DILocation(line: 4160, column: 14, scope: !4765)
!4778 = !DILocation(line: 4161, column: 16, scope: !4774)
!4779 = !DILocation(line: 4161, column: 14, scope: !4774)
!4780 = !DILocation(line: 4161, column: 7, scope: !4774)
!4781 = !DILocation(line: 4163, column: 7, scope: !4774)
!4782 = !DILocation(line: 4164, column: 3, scope: !4766)
!4783 = !DILocation(line: 4168, column: 13, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 4168, column: 12)
!4785 = !DILocation(line: 4168, column: 20, scope: !4784)
!4786 = !DILocation(line: 4168, column: 57, scope: !4784)
!4787 = !DILocation(line: 4168, column: 48, scope: !4784)
!4788 = !DILocation(line: 4168, column: 63, scope: !4784)
!4789 = !DILocation(line: 4168, column: 23, scope: !4784)
!4790 = !DILocation(line: 4168, column: 12, scope: !4734)
!4791 = !DILocation(line: 4170, column: 23, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 4169, column: 3)
!4793 = !DILocation(line: 4170, column: 14, scope: !4792)
!4794 = !DILocation(line: 4170, column: 29, scope: !4792)
!4795 = !DILocation(line: 4170, column: 12, scope: !4792)
!4796 = !DILocation(line: 4171, column: 37, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 4171, column: 9)
!4798 = !DILocation(line: 4172, column: 9, scope: !4797)
!4799 = !DILocation(line: 4171, column: 10, scope: !4797)
!4800 = !DILocation(line: 4171, column: 9, scope: !4792)
!4801 = !DILocation(line: 4173, column: 16, scope: !4797)
!4802 = !DILocation(line: 4173, column: 14, scope: !4797)
!4803 = !DILocation(line: 4173, column: 7, scope: !4797)
!4804 = !DILocation(line: 4175, column: 9, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 4175, column: 9)
!4806 = !DILocation(line: 4175, column: 19, scope: !4805)
!4807 = !DILocation(line: 4175, column: 23, scope: !4805)
!4808 = !DILocation(line: 4175, column: 34, scope: !4805)
!4809 = !DILocation(line: 4175, column: 9, scope: !4792)
!4810 = !DILocation(line: 4177, column: 18, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 4176, column: 7)
!4812 = !DILocation(line: 4177, column: 9, scope: !4811)
!4813 = !DILocation(line: 4178, column: 28, scope: !4811)
!4814 = !DILocation(line: 4178, column: 39, scope: !4811)
!4815 = !DILocation(line: 4178, column: 9, scope: !4811)
!4816 = !DILocation(line: 4179, column: 18, scope: !4811)
!4817 = !DILocation(line: 4179, column: 9, scope: !4811)
!4818 = !DILocation(line: 4180, column: 29, scope: !4811)
!4819 = !DILocation(line: 4180, column: 40, scope: !4811)
!4820 = !DILocation(line: 4180, column: 9, scope: !4811)
!4821 = !DILocation(line: 4181, column: 18, scope: !4811)
!4822 = !DILocation(line: 4181, column: 9, scope: !4811)
!4823 = !DILocation(line: 4182, column: 28, scope: !4811)
!4824 = !DILocation(line: 4182, column: 39, scope: !4811)
!4825 = !DILocation(line: 4182, column: 9, scope: !4811)
!4826 = !DILocation(line: 4183, column: 7, scope: !4811)
!4827 = !DILocation(line: 4184, column: 27, scope: !4792)
!4828 = !DILocation(line: 4185, column: 43, scope: !4792)
!4829 = !DILocation(line: 4185, column: 5, scope: !4792)
!4830 = !DILocation(line: 4186, column: 12, scope: !4792)
!4831 = !DILocation(line: 4186, column: 10, scope: !4792)
!4832 = !DILocation(line: 4187, column: 18, scope: !4792)
!4833 = !DILocation(line: 4187, column: 5, scope: !4792)
!4834 = !DILocation(line: 4188, column: 5, scope: !4792)
!4835 = !DILocation(line: 4194, column: 13, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 4194, column: 12)
!4837 = !DILocation(line: 4194, column: 20, scope: !4836)
!4838 = !DILocation(line: 4194, column: 23, scope: !4836)
!4839 = !DILocation(line: 4194, column: 33, scope: !4836)
!4840 = !DILocation(line: 4194, column: 30, scope: !4836)
!4841 = !DILocation(line: 4194, column: 12, scope: !4734)
!4842 = !DILocalVariable(name: "val", scope: !4843, file: !3, line: 4196, type: !1123)
!4843 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 4195, column: 3)
!4844 = !DILocation(line: 4196, column: 10, scope: !4843)
!4845 = !DILocation(line: 4196, column: 25, scope: !4843)
!4846 = !DILocation(line: 4196, column: 16, scope: !4843)
!4847 = !DILocation(line: 4196, column: 31, scope: !4843)
!4848 = !DILocation(line: 4197, column: 9, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 4197, column: 9)
!4850 = !DILocation(line: 4197, column: 16, scope: !4849)
!4851 = !DILocation(line: 4197, column: 13, scope: !4849)
!4852 = !DILocation(line: 4198, column: 9, scope: !4849)
!4853 = !DILocation(line: 4198, column: 12, scope: !4849)
!4854 = !DILocation(line: 4198, column: 28, scope: !4849)
!4855 = !DILocation(line: 4199, column: 9, scope: !4849)
!4856 = !DILocation(line: 4199, column: 21, scope: !4849)
!4857 = !DILocation(line: 4199, column: 12, scope: !4849)
!4858 = !DILocation(line: 4199, column: 27, scope: !4849)
!4859 = !DILocation(line: 4200, column: 9, scope: !4849)
!4860 = !DILocation(line: 4200, column: 48, scope: !4849)
!4861 = !DILocation(line: 4200, column: 31, scope: !4849)
!4862 = !DILocation(line: 4200, column: 12, scope: !4849)
!4863 = !DILocation(line: 4197, column: 9, scope: !4843)
!4864 = !DILocation(line: 4201, column: 36, scope: !4849)
!4865 = !DILocation(line: 4201, column: 42, scope: !4849)
!4866 = !DILocation(line: 4201, column: 16, scope: !4849)
!4867 = !DILocation(line: 4201, column: 14, scope: !4849)
!4868 = !DILocation(line: 4201, column: 7, scope: !4849)
!4869 = !DILocation(line: 4202, column: 3, scope: !4843)
!4870 = !DILocation(line: 4203, column: 12, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 4203, column: 12)
!4872 = !DILocation(line: 4204, column: 5, scope: !4871)
!4873 = !DILocation(line: 4204, column: 8, scope: !4871)
!4874 = !DILocation(line: 4204, column: 18, scope: !4871)
!4875 = !DILocation(line: 4204, column: 15, scope: !4871)
!4876 = !DILocation(line: 4205, column: 5, scope: !4871)
!4877 = !DILocation(line: 4205, column: 9, scope: !4871)
!4878 = !DILocation(line: 4205, column: 13, scope: !4871)
!4879 = !DILocation(line: 4206, column: 9, scope: !4871)
!4880 = !DILocation(line: 4206, column: 12, scope: !4871)
!4881 = !DILocation(line: 4206, column: 28, scope: !4871)
!4882 = !DILocation(line: 4207, column: 9, scope: !4871)
!4883 = !DILocation(line: 4207, column: 32, scope: !4871)
!4884 = !DILocation(line: 4207, column: 37, scope: !4871)
!4885 = !DILocation(line: 4207, column: 12, scope: !4871)
!4886 = !DILocation(line: 4203, column: 12, scope: !4734)
!4887 = !DILocation(line: 4209, column: 5, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 4208, column: 3)
!4889 = !DILocation(line: 4211, column: 9, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 4211, column: 9)
!4891 = !DILocation(line: 4211, column: 19, scope: !4890)
!4892 = !DILocation(line: 4211, column: 23, scope: !4890)
!4893 = !DILocation(line: 4211, column: 34, scope: !4890)
!4894 = !DILocation(line: 4211, column: 9, scope: !4888)
!4895 = !DILocation(line: 4213, column: 18, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4890, file: !3, line: 4212, column: 7)
!4897 = !DILocation(line: 4213, column: 9, scope: !4896)
!4898 = !DILocation(line: 4214, column: 28, scope: !4896)
!4899 = !DILocation(line: 4214, column: 39, scope: !4896)
!4900 = !DILocation(line: 4214, column: 9, scope: !4896)
!4901 = !DILocation(line: 4215, column: 18, scope: !4896)
!4902 = !DILocation(line: 4215, column: 9, scope: !4896)
!4903 = !DILocation(line: 4216, column: 29, scope: !4896)
!4904 = !DILocation(line: 4216, column: 40, scope: !4896)
!4905 = !DILocation(line: 4216, column: 9, scope: !4896)
!4906 = !DILocation(line: 4217, column: 18, scope: !4896)
!4907 = !DILocation(line: 4217, column: 9, scope: !4896)
!4908 = !DILocation(line: 4218, column: 28, scope: !4896)
!4909 = !DILocation(line: 4218, column: 39, scope: !4896)
!4910 = !DILocation(line: 4218, column: 9, scope: !4896)
!4911 = !DILocation(line: 4219, column: 7, scope: !4896)
!4912 = !DILocation(line: 4221, column: 9, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 4221, column: 9)
!4914 = !DILocation(line: 4221, column: 28, scope: !4913)
!4915 = !DILocation(line: 4221, column: 9, scope: !4888)
!4916 = !DILocation(line: 4222, column: 23, scope: !4913)
!4917 = !DILocation(line: 4222, column: 7, scope: !4913)
!4918 = !DILocation(line: 4227, column: 11, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 4227, column: 9)
!4920 = !DILocation(line: 4227, column: 15, scope: !4919)
!4921 = !DILocation(line: 4227, column: 18, scope: !4919)
!4922 = !DILocation(line: 4227, column: 34, scope: !4919)
!4923 = !DILocation(line: 4228, column: 9, scope: !4919)
!4924 = !DILocation(line: 4228, column: 58, scope: !4919)
!4925 = !DILocation(line: 4228, column: 40, scope: !4919)
!4926 = !DILocation(line: 4229, column: 12, scope: !4919)
!4927 = !DILocation(line: 4228, column: 13, scope: !4919)
!4928 = !DILocation(line: 4227, column: 9, scope: !4888)
!4929 = !DILocation(line: 4230, column: 16, scope: !4919)
!4930 = !DILocation(line: 4230, column: 14, scope: !4919)
!4931 = !DILocation(line: 4230, column: 7, scope: !4919)
!4932 = !DILocation(line: 4232, column: 27, scope: !4888)
!4933 = !DILocation(line: 4233, column: 43, scope: !4888)
!4934 = !DILocation(line: 4233, column: 5, scope: !4888)
!4935 = !DILocation(line: 4234, column: 12, scope: !4888)
!4936 = !DILocation(line: 4234, column: 10, scope: !4888)
!4937 = !DILocation(line: 4235, column: 18, scope: !4888)
!4938 = !DILocation(line: 4235, column: 5, scope: !4888)
!4939 = !DILocation(line: 4239, column: 41, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 4239, column: 9)
!4941 = !DILocation(line: 4239, column: 47, scope: !4940)
!4942 = !DILocation(line: 4239, column: 9, scope: !4940)
!4943 = !DILocation(line: 4239, column: 9, scope: !4888)
!4944 = !DILocation(line: 4241, column: 25, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 4240, column: 7)
!4946 = !DILocation(line: 4242, column: 22, scope: !4945)
!4947 = !DILocation(line: 4242, column: 11, scope: !4945)
!4948 = !DILocation(line: 4242, column: 29, scope: !4945)
!4949 = !DILocation(line: 4241, column: 9, scope: !4945)
!4950 = !DILocation(line: 4243, column: 13, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 4243, column: 13)
!4952 = !DILocation(line: 4243, column: 23, scope: !4951)
!4953 = !DILocation(line: 4243, column: 27, scope: !4951)
!4954 = !DILocation(line: 4243, column: 38, scope: !4951)
!4955 = !DILocation(line: 4243, column: 13, scope: !4945)
!4956 = !DILocation(line: 4244, column: 13, scope: !4951)
!4957 = !DILocation(line: 4244, column: 4, scope: !4951)
!4958 = !DILocation(line: 4245, column: 7, scope: !4945)
!4959 = !DILocation(line: 4246, column: 3, scope: !4888)
!4960 = !DILocation(line: 4247, column: 6, scope: !4734)
!4961 = !DILocation(line: 4251, column: 37, scope: !4962)
!4962 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 4251, column: 13)
!4963 = !DILocation(line: 4251, column: 13, scope: !4962)
!4964 = !DILocation(line: 4252, column: 6, scope: !4962)
!4965 = !DILocation(line: 4252, column: 44, scope: !4962)
!4966 = !DILocation(line: 4252, column: 25, scope: !4962)
!4967 = !DILocation(line: 4252, column: 10, scope: !4962)
!4968 = !DILocation(line: 4253, column: 6, scope: !4962)
!4969 = !DILocation(line: 4253, column: 10, scope: !4962)
!4970 = !DILocation(line: 4253, column: 48, scope: !4962)
!4971 = !DILocation(line: 4254, column: 10, scope: !4962)
!4972 = !DILocation(line: 4254, column: 58, scope: !4962)
!4973 = !DILocation(line: 4254, column: 38, scope: !4962)
!4974 = !DILocation(line: 4254, column: 13, scope: !4962)
!4975 = !DILocation(line: 4251, column: 13, scope: !4710)
!4976 = !DILocalVariable(name: "rhs", scope: !4977, file: !3, line: 4256, type: !1123)
!4977 = distinct !DILexicalBlock(scope: !4962, file: !3, line: 4255, column: 6)
!4978 = !DILocation(line: 4256, column: 13, scope: !4977)
!4979 = !DILocation(line: 4256, column: 39, scope: !4977)
!4980 = !DILocation(line: 4256, column: 19, scope: !4977)
!4981 = !DILocalVariable(name: "val", scope: !4977, file: !3, line: 4257, type: !1123)
!4982 = !DILocation(line: 4257, column: 13, scope: !4977)
!4983 = !DILocation(line: 4258, column: 54, scope: !4977)
!4984 = !DILocation(line: 4258, column: 35, scope: !4977)
!4985 = !DILocation(line: 4259, column: 20, scope: !4977)
!4986 = !DILocation(line: 4259, column: 7, scope: !4977)
!4987 = !DILocation(line: 4258, column: 14, scope: !4977)
!4988 = !DILocation(line: 4258, column: 12, scope: !4977)
!4989 = !DILocation(line: 4260, column: 12, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 4260, column: 12)
!4991 = !DILocation(line: 4260, column: 28, scope: !4990)
!4992 = !DILocation(line: 4260, column: 12, scope: !4977)
!4993 = !DILocation(line: 4261, column: 18, scope: !4990)
!4994 = !DILocation(line: 4261, column: 9, scope: !4990)
!4995 = !DILocation(line: 4261, column: 24, scope: !4990)
!4996 = !DILocation(line: 4261, column: 7, scope: !4990)
!4997 = !DILocation(line: 4261, column: 3, scope: !4990)
!4998 = !DILocation(line: 4262, column: 12, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 4262, column: 12)
!5000 = !DILocation(line: 4263, column: 5, scope: !4999)
!5001 = !DILocation(line: 4263, column: 25, scope: !4999)
!5002 = !DILocation(line: 4263, column: 30, scope: !4999)
!5003 = !DILocation(line: 4263, column: 8, scope: !4999)
!5004 = !DILocation(line: 4262, column: 12, scope: !4977)
!5005 = !DILocation(line: 4265, column: 9, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 4265, column: 9)
!5007 = distinct !DILexicalBlock(scope: !4999, file: !3, line: 4264, column: 3)
!5008 = !DILocation(line: 4265, column: 19, scope: !5006)
!5009 = !DILocation(line: 4265, column: 23, scope: !5006)
!5010 = !DILocation(line: 4265, column: 34, scope: !5006)
!5011 = !DILocation(line: 4265, column: 9, scope: !5007)
!5012 = !DILocation(line: 4267, column: 18, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5006, file: !3, line: 4266, column: 7)
!5014 = !DILocation(line: 4267, column: 9, scope: !5013)
!5015 = !DILocation(line: 4268, column: 28, scope: !5013)
!5016 = !DILocation(line: 4268, column: 39, scope: !5013)
!5017 = !DILocation(line: 4268, column: 9, scope: !5013)
!5018 = !DILocation(line: 4269, column: 7, scope: !5013)
!5019 = !DILocation(line: 4272, column: 5, scope: !5007)
!5020 = !DILocation(line: 4273, column: 3, scope: !5007)
!5021 = !DILocation(line: 4274, column: 6, scope: !4977)
!5022 = !DILocation(line: 4277, column: 26, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !4962, file: !3, line: 4277, column: 13)
!5024 = !DILocation(line: 4277, column: 13, scope: !5023)
!5025 = !DILocation(line: 4277, column: 32, scope: !5023)
!5026 = !DILocation(line: 4277, column: 13, scope: !4962)
!5027 = !DILocalVariable(name: "op0", scope: !5028, file: !3, line: 4279, type: !1123)
!5028 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 4278, column: 6)
!5029 = !DILocation(line: 4279, column: 13, scope: !5028)
!5030 = !DILocation(line: 4279, column: 36, scope: !5028)
!5031 = !DILocation(line: 4279, column: 19, scope: !5028)
!5032 = !DILocalVariable(name: "op1", scope: !5028, file: !3, line: 4280, type: !1123)
!5033 = !DILocation(line: 4280, column: 13, scope: !5028)
!5034 = !DILocation(line: 4280, column: 36, scope: !5028)
!5035 = !DILocation(line: 4280, column: 19, scope: !5028)
!5036 = !DILocalVariable(name: "result", scope: !5028, file: !3, line: 4281, type: !1123)
!5037 = !DILocation(line: 4281, column: 13, scope: !5028)
!5038 = !DILocation(line: 4283, column: 12, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 4283, column: 12)
!5040 = !DILocation(line: 4283, column: 28, scope: !5039)
!5041 = !DILocation(line: 4283, column: 12, scope: !5028)
!5042 = !DILocation(line: 4284, column: 18, scope: !5039)
!5043 = !DILocation(line: 4284, column: 9, scope: !5039)
!5044 = !DILocation(line: 4284, column: 24, scope: !5039)
!5045 = !DILocation(line: 4284, column: 7, scope: !5039)
!5046 = !DILocation(line: 4284, column: 3, scope: !5039)
!5047 = !DILocation(line: 4285, column: 12, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 4285, column: 12)
!5049 = !DILocation(line: 4285, column: 28, scope: !5048)
!5050 = !DILocation(line: 4285, column: 12, scope: !5028)
!5051 = !DILocation(line: 4286, column: 18, scope: !5048)
!5052 = !DILocation(line: 4286, column: 9, scope: !5048)
!5053 = !DILocation(line: 4286, column: 24, scope: !5048)
!5054 = !DILocation(line: 4286, column: 7, scope: !5048)
!5055 = !DILocation(line: 4286, column: 3, scope: !5048)
!5056 = !DILocation(line: 4287, column: 17, scope: !5028)
!5057 = !DILocation(line: 4287, column: 15, scope: !5028)
!5058 = !DILocation(line: 4289, column: 12, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 4289, column: 12)
!5060 = !DILocation(line: 4289, column: 19, scope: !5059)
!5061 = !DILocation(line: 4289, column: 22, scope: !5059)
!5062 = !DILocation(line: 4289, column: 41, scope: !5059)
!5063 = !DILocation(line: 4289, column: 12, scope: !5028)
!5064 = !DILocation(line: 4291, column: 24, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 4291, column: 9)
!5066 = distinct !DILexicalBlock(scope: !5059, file: !3, line: 4290, column: 3)
!5067 = !DILocation(line: 4291, column: 9, scope: !5065)
!5068 = !DILocation(line: 4291, column: 9, scope: !5066)
!5069 = !DILocation(line: 4292, column: 31, scope: !5065)
!5070 = !DILocation(line: 4292, column: 7, scope: !5065)
!5071 = !DILocation(line: 4294, column: 30, scope: !5065)
!5072 = !DILocation(line: 4294, column: 7, scope: !5065)
!5073 = !DILocation(line: 4295, column: 18, scope: !5066)
!5074 = !DILocation(line: 4295, column: 5, scope: !5066)
!5075 = !DILocation(line: 4296, column: 10, scope: !5066)
!5076 = !DILocation(line: 4297, column: 3, scope: !5066)
!5077 = !DILocation(line: 4298, column: 6, scope: !5028)
!5078 = !DILocation(line: 4301, column: 21, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 4301, column: 8)
!5080 = !DILocation(line: 4301, column: 8, scope: !5079)
!5081 = !DILocation(line: 4301, column: 27, scope: !5079)
!5082 = !DILocation(line: 4302, column: 8, scope: !5079)
!5083 = !DILocation(line: 4302, column: 11, scope: !5079)
!5084 = !DILocation(line: 4302, column: 45, scope: !5079)
!5085 = !DILocation(line: 4301, column: 8, scope: !4707)
!5086 = !DILocalVariable(name: "fn", scope: !5087, file: !3, line: 4304, type: !1123)
!5087 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 4303, column: 6)
!5088 = !DILocation(line: 4304, column: 13, scope: !5087)
!5089 = !DILocation(line: 4304, column: 43, scope: !5087)
!5090 = !DILocation(line: 4304, column: 27, scope: !5087)
!5091 = !DILocation(line: 4304, column: 18, scope: !5087)
!5092 = !DILocation(line: 4304, column: 51, scope: !5087)
!5093 = !DILocation(line: 4305, column: 12, scope: !5094)
!5094 = distinct !DILexicalBlock(scope: !5087, file: !3, line: 4305, column: 12)
!5095 = !DILocation(line: 4305, column: 27, scope: !5094)
!5096 = !DILocation(line: 4306, column: 5, scope: !5094)
!5097 = !DILocation(line: 4306, column: 8, scope: !5094)
!5098 = !DILocation(line: 4306, column: 41, scope: !5094)
!5099 = !DILocation(line: 4305, column: 12, scope: !5087)
!5100 = !DILocation(line: 4308, column: 9, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5102, file: !3, line: 4308, column: 9)
!5102 = distinct !DILexicalBlock(scope: !5094, file: !3, line: 4307, column: 3)
!5103 = !DILocation(line: 4308, column: 19, scope: !5101)
!5104 = !DILocation(line: 4308, column: 23, scope: !5101)
!5105 = !DILocation(line: 4308, column: 34, scope: !5101)
!5106 = !DILocation(line: 4308, column: 9, scope: !5102)
!5107 = !DILocation(line: 4310, column: 18, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 4309, column: 7)
!5109 = !DILocation(line: 4310, column: 9, scope: !5108)
!5110 = !DILocation(line: 4311, column: 29, scope: !5108)
!5111 = !DILocation(line: 4311, column: 40, scope: !5108)
!5112 = !DILocation(line: 4311, column: 9, scope: !5108)
!5113 = !DILocation(line: 4312, column: 18, scope: !5108)
!5114 = !DILocation(line: 4312, column: 9, scope: !5108)
!5115 = !DILocation(line: 4313, column: 28, scope: !5108)
!5116 = !DILocation(line: 4313, column: 39, scope: !5108)
!5117 = !DILocation(line: 4313, column: 9, scope: !5108)
!5118 = !DILocation(line: 4314, column: 7, scope: !5108)
!5119 = !DILocation(line: 4316, column: 25, scope: !5102)
!5120 = !DILocation(line: 4316, column: 31, scope: !5102)
!5121 = !DILocation(line: 4316, column: 5, scope: !5102)
!5122 = !DILocation(line: 4317, column: 18, scope: !5102)
!5123 = !DILocation(line: 4317, column: 5, scope: !5102)
!5124 = !DILocation(line: 4318, column: 41, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5102, file: !3, line: 4318, column: 9)
!5126 = !DILocation(line: 4318, column: 47, scope: !5125)
!5127 = !DILocation(line: 4318, column: 9, scope: !5125)
!5128 = !DILocation(line: 4318, column: 9, scope: !5102)
!5129 = !DILocation(line: 4320, column: 25, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5125, file: !3, line: 4319, column: 7)
!5131 = !DILocation(line: 4321, column: 22, scope: !5130)
!5132 = !DILocation(line: 4321, column: 11, scope: !5130)
!5133 = !DILocation(line: 4321, column: 29, scope: !5130)
!5134 = !DILocation(line: 4320, column: 9, scope: !5130)
!5135 = !DILocation(line: 4322, column: 13, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5130, file: !3, line: 4322, column: 13)
!5137 = !DILocation(line: 4322, column: 23, scope: !5136)
!5138 = !DILocation(line: 4322, column: 27, scope: !5136)
!5139 = !DILocation(line: 4322, column: 38, scope: !5136)
!5140 = !DILocation(line: 4322, column: 13, scope: !5130)
!5141 = !DILocation(line: 4323, column: 13, scope: !5136)
!5142 = !DILocation(line: 4323, column: 4, scope: !5136)
!5143 = !DILocation(line: 4324, column: 7, scope: !5130)
!5144 = !DILocation(line: 4329, column: 10, scope: !5102)
!5145 = !DILocation(line: 4330, column: 3, scope: !5102)
!5146 = !DILocation(line: 4331, column: 6, scope: !5087)
!5147 = !DILocation(line: 4332, column: 2, scope: !4707)
!5148 = !DILocation(line: 4128, column: 54, scope: !4703)
!5149 = !DILocation(line: 4128, column: 7, scope: !4703)
!5150 = distinct !{!5150, !4705, !5151}
!5151 = !DILocation(line: 4332, column: 2, scope: !4698)
!5152 = !DILocation(line: 4334, column: 34, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 4334, column: 7)
!5154 = !DILocation(line: 4334, column: 18, scope: !5153)
!5155 = !DILocation(line: 4334, column: 12, scope: !5153)
!5156 = !DILocation(line: 4334, column: 39, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 4334, column: 7)
!5158 = !DILocation(line: 4334, column: 38, scope: !5157)
!5159 = !DILocation(line: 4334, column: 7, scope: !5153)
!5160 = !DILocalVariable(name: "stmt", scope: !5161, file: !3, line: 4336, type: !1386)
!5161 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 4335, column: 2)
!5162 = !DILocation(line: 4336, column: 11, scope: !5161)
!5163 = !DILocalVariable(name: "phi", scope: !5161, file: !3, line: 4336, type: !1386)
!5164 = !DILocation(line: 4336, column: 17, scope: !5161)
!5165 = !DILocation(line: 4336, column: 23, scope: !5161)
!5166 = !DILocalVariable(name: "sprime", scope: !5161, file: !3, line: 4337, type: !1123)
!5167 = !DILocation(line: 4337, column: 9, scope: !5161)
!5168 = !DILocalVariable(name: "res", scope: !5161, file: !3, line: 4337, type: !1123)
!5169 = !DILocation(line: 4337, column: 29, scope: !5161)
!5170 = !DILocation(line: 4337, column: 35, scope: !5161)
!5171 = !DILocalVariable(name: "sprimeexpr", scope: !5161, file: !3, line: 4338, type: !1112)
!5172 = !DILocation(line: 4338, column: 13, scope: !5161)
!5173 = !DILocalVariable(name: "resexpr", scope: !5161, file: !3, line: 4338, type: !1112)
!5174 = !DILocation(line: 4338, column: 25, scope: !5161)
!5175 = !DILocalVariable(name: "gsi2", scope: !5161, file: !3, line: 4339, type: !3861)
!5176 = !DILocation(line: 4339, column: 25, scope: !5161)
!5177 = !DILocation(line: 4344, column: 29, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4344, column: 8)
!5179 = !DILocation(line: 4344, column: 8, scope: !5178)
!5180 = !DILocation(line: 4344, column: 34, scope: !5178)
!5181 = !DILocation(line: 4345, column: 8, scope: !5178)
!5182 = !DILocation(line: 4345, column: 27, scope: !5178)
!5183 = !DILocation(line: 4345, column: 12, scope: !5178)
!5184 = !DILocation(line: 4346, column: 8, scope: !5178)
!5185 = !DILocation(line: 4346, column: 25, scope: !5178)
!5186 = !DILocation(line: 4346, column: 45, scope: !5178)
!5187 = !DILocation(line: 4346, column: 11, scope: !5178)
!5188 = !DILocation(line: 4344, column: 8, scope: !5161)
!5189 = !DILocation(line: 4348, column: 8, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5178, file: !3, line: 4347, column: 6)
!5191 = !DILocation(line: 4349, column: 8, scope: !5190)
!5192 = distinct !{!5192, !5159, !5193}
!5193 = !DILocation(line: 4394, column: 2, scope: !5153)
!5194 = !DILocation(line: 4352, column: 42, scope: !5161)
!5195 = !DILocation(line: 4352, column: 14, scope: !5161)
!5196 = !DILocation(line: 4352, column: 12, scope: !5161)
!5197 = !DILocation(line: 4353, column: 37, scope: !5161)
!5198 = !DILocation(line: 4354, column: 28, scope: !5161)
!5199 = !DILocation(line: 4354, column: 9, scope: !5161)
!5200 = !DILocation(line: 4353, column: 17, scope: !5161)
!5201 = !DILocation(line: 4353, column: 15, scope: !5161)
!5202 = !DILocation(line: 4355, column: 8, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4355, column: 8)
!5204 = !DILocation(line: 4355, column: 8, scope: !5161)
!5205 = !DILocation(line: 4357, column: 12, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 4357, column: 12)
!5207 = distinct !DILexicalBlock(scope: !5203, file: !3, line: 4356, column: 6)
!5208 = !DILocation(line: 4357, column: 24, scope: !5206)
!5209 = !DILocation(line: 4357, column: 29, scope: !5206)
!5210 = !DILocation(line: 4357, column: 12, scope: !5207)
!5211 = !DILocation(line: 4358, column: 12, scope: !5206)
!5212 = !DILocation(line: 4358, column: 10, scope: !5206)
!5213 = !DILocation(line: 4358, column: 3, scope: !5206)
!5214 = !DILocation(line: 4359, column: 17, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 4359, column: 17)
!5216 = !DILocation(line: 4359, column: 29, scope: !5215)
!5217 = !DILocation(line: 4359, column: 34, scope: !5215)
!5218 = !DILocation(line: 4359, column: 17, scope: !5206)
!5219 = !DILocation(line: 4360, column: 12, scope: !5215)
!5220 = !DILocation(line: 4360, column: 10, scope: !5215)
!5221 = !DILocation(line: 4360, column: 3, scope: !5215)
!5222 = !DILocation(line: 4362, column: 3, scope: !5215)
!5223 = !DILocation(line: 4363, column: 6, scope: !5207)
!5224 = !DILocation(line: 4364, column: 9, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4364, column: 8)
!5226 = !DILocation(line: 4365, column: 8, scope: !5225)
!5227 = !DILocation(line: 4365, column: 11, scope: !5225)
!5228 = !DILocation(line: 4365, column: 21, scope: !5225)
!5229 = !DILocation(line: 4365, column: 18, scope: !5225)
!5230 = !DILocation(line: 4364, column: 8, scope: !5161)
!5231 = !DILocation(line: 4367, column: 8, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 4366, column: 6)
!5233 = !DILocation(line: 4368, column: 8, scope: !5232)
!5234 = !DILocation(line: 4371, column: 8, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4371, column: 8)
!5236 = !DILocation(line: 4371, column: 18, scope: !5235)
!5237 = !DILocation(line: 4371, column: 22, scope: !5235)
!5238 = !DILocation(line: 4371, column: 33, scope: !5235)
!5239 = !DILocation(line: 4371, column: 8, scope: !5161)
!5240 = !DILocation(line: 4373, column: 17, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 4372, column: 6)
!5242 = !DILocation(line: 4373, column: 8, scope: !5241)
!5243 = !DILocation(line: 4374, column: 28, scope: !5241)
!5244 = !DILocation(line: 4374, column: 39, scope: !5241)
!5245 = !DILocation(line: 4374, column: 8, scope: !5241)
!5246 = !DILocation(line: 4375, column: 17, scope: !5241)
!5247 = !DILocation(line: 4375, column: 8, scope: !5241)
!5248 = !DILocation(line: 4376, column: 28, scope: !5241)
!5249 = !DILocation(line: 4376, column: 39, scope: !5241)
!5250 = !DILocation(line: 4376, column: 8, scope: !5241)
!5251 = !DILocation(line: 4377, column: 17, scope: !5241)
!5252 = !DILocation(line: 4377, column: 8, scope: !5241)
!5253 = !DILocation(line: 4378, column: 6, scope: !5241)
!5254 = !DILocation(line: 4380, column: 4, scope: !5161)
!5255 = !DILocation(line: 4382, column: 36, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4382, column: 8)
!5257 = !DILocation(line: 4382, column: 53, scope: !5256)
!5258 = !DILocation(line: 4382, column: 9, scope: !5256)
!5259 = !DILocation(line: 4382, column: 8, scope: !5161)
!5260 = !DILocation(line: 4383, column: 15, scope: !5256)
!5261 = !DILocation(line: 4383, column: 13, scope: !5256)
!5262 = !DILocation(line: 4383, column: 6, scope: !5256)
!5263 = !DILocation(line: 4384, column: 11, scope: !5161)
!5264 = !DILocation(line: 4384, column: 9, scope: !5161)
!5265 = !DILocation(line: 4385, column: 30, scope: !5161)
!5266 = !DILocation(line: 4385, column: 4, scope: !5161)
!5267 = !DILocation(line: 4385, column: 28, scope: !5161)
!5268 = !DILocation(line: 4386, column: 8, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 4386, column: 8)
!5270 = !DILocation(line: 4386, column: 27, scope: !5269)
!5271 = !DILocation(line: 4386, column: 8, scope: !5161)
!5272 = !DILocation(line: 4387, column: 22, scope: !5269)
!5273 = !DILocation(line: 4387, column: 6, scope: !5269)
!5274 = !DILocation(line: 4389, column: 29, scope: !5161)
!5275 = !DILocation(line: 4389, column: 11, scope: !5161)
!5276 = !DILocation(line: 4390, column: 30, scope: !5161)
!5277 = !DILocation(line: 4390, column: 4, scope: !5161)
!5278 = !DILocation(line: 4392, column: 4, scope: !5161)
!5279 = !DILocation(line: 4393, column: 26, scope: !5161)
!5280 = !DILocation(line: 4334, column: 7, scope: !5157)
!5281 = !DILocation(line: 4395, column: 5, scope: !4699)
!5282 = distinct !{!5282, !4693, !5283}
!5283 = !DILocation(line: 4395, column: 5, scope: !4694)
!5284 = !DILocation(line: 4400, column: 10, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 4400, column: 3)
!5286 = !DILocation(line: 4400, column: 8, scope: !5285)
!5287 = !DILocation(line: 4400, column: 15, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 4400, column: 3)
!5289 = !DILocation(line: 4400, column: 3, scope: !5285)
!5290 = !DILocalVariable(name: "lhs", scope: !5291, file: !3, line: 4402, type: !1123)
!5291 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 4401, column: 5)
!5292 = !DILocation(line: 4402, column: 12, scope: !5291)
!5293 = !DILocation(line: 4402, column: 37, scope: !5291)
!5294 = !DILocation(line: 4402, column: 18, scope: !5291)
!5295 = !DILocalVariable(name: "rhs", scope: !5291, file: !3, line: 4403, type: !1123)
!5296 = !DILocation(line: 4403, column: 12, scope: !5291)
!5297 = !DILocation(line: 4403, column: 38, scope: !5291)
!5298 = !DILocation(line: 4403, column: 18, scope: !5291)
!5299 = !DILocalVariable(name: "use_p", scope: !5291, file: !3, line: 4404, type: !2534)
!5300 = !DILocation(line: 4404, column: 21, scope: !5291)
!5301 = !DILocalVariable(name: "use_stmt", scope: !5291, file: !3, line: 4405, type: !1386)
!5302 = !DILocation(line: 4405, column: 14, scope: !5291)
!5303 = !DILocation(line: 4409, column: 11, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 4409, column: 11)
!5305 = !DILocation(line: 4409, column: 27, scope: !5304)
!5306 = !DILocation(line: 4410, column: 4, scope: !5304)
!5307 = !DILocation(line: 4410, column: 7, scope: !5304)
!5308 = !DILocation(line: 4410, column: 23, scope: !5304)
!5309 = !DILocation(line: 4411, column: 4, scope: !5304)
!5310 = !DILocation(line: 4411, column: 23, scope: !5304)
!5311 = !DILocation(line: 4411, column: 7, scope: !5304)
!5312 = !DILocation(line: 4412, column: 4, scope: !5304)
!5313 = !DILocation(line: 4412, column: 27, scope: !5304)
!5314 = !DILocation(line: 4412, column: 49, scope: !5304)
!5315 = !DILocation(line: 4412, column: 7, scope: !5304)
!5316 = !DILocation(line: 4409, column: 11, scope: !5291)
!5317 = !DILocation(line: 4414, column: 4, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 4413, column: 2)
!5319 = !DILocation(line: 4415, column: 17, scope: !5318)
!5320 = !DILocation(line: 4415, column: 4, scope: !5318)
!5321 = !DILocation(line: 4416, column: 2, scope: !5318)
!5322 = !DILocation(line: 4419, column: 11, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 4419, column: 11)
!5324 = !DILocation(line: 4419, column: 27, scope: !5323)
!5325 = !DILocation(line: 4420, column: 4, scope: !5323)
!5326 = !DILocation(line: 4420, column: 22, scope: !5323)
!5327 = !DILocation(line: 4420, column: 7, scope: !5323)
!5328 = !DILocation(line: 4419, column: 11, scope: !5291)
!5329 = !DILocation(line: 4422, column: 24, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 4421, column: 2)
!5331 = !DILocation(line: 4422, column: 10, scope: !5330)
!5332 = !DILocation(line: 4423, column: 22, scope: !5330)
!5333 = !DILocation(line: 4423, column: 4, scope: !5330)
!5334 = !DILocation(line: 4424, column: 4, scope: !5330)
!5335 = !DILocation(line: 4425, column: 18, scope: !5330)
!5336 = !DILocation(line: 4425, column: 4, scope: !5330)
!5337 = !DILocation(line: 4426, column: 2, scope: !5330)
!5338 = !DILocation(line: 4427, column: 5, scope: !5291)
!5339 = !DILocation(line: 4400, column: 57, scope: !5288)
!5340 = !DILocation(line: 4400, column: 3, scope: !5288)
!5341 = distinct !{!5341, !5289, !5342}
!5342 = !DILocation(line: 4427, column: 5, scope: !5285)
!5343 = !DILocation(line: 4428, column: 3, scope: !4680)
!5344 = !DILocation(line: 4430, column: 10, scope: !4680)
!5345 = !DILocation(line: 4430, column: 3, scope: !4680)
!5346 = distinct !DISubprogram(name: "clear_expression_ids", scope: !3, file: !3, line: 330, type: !3738, scopeLine: 331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5347 = !DILocation(line: 332, column: 3, scope: !5346)
!5348 = !DILocation(line: 333, column: 1, scope: !5346)
!5349 = distinct !DISubprogram(name: "fini_pre", scope: !3, file: !3, line: 4691, type: !3902, scopeLine: 4692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5350 = !DILocalVariable(name: "do_fre", arg: 1, scope: !5349, file: !3, line: 4691, type: !1236)
!5351 = !DILocation(line: 4691, column: 16, scope: !5349)
!5352 = !DILocalVariable(name: "bb", scope: !5349, file: !3, line: 4693, type: !1838)
!5353 = !DILocation(line: 4693, column: 15, scope: !5349)
!5354 = !DILocation(line: 4695, column: 9, scope: !5349)
!5355 = !DILocation(line: 4695, column: 3, scope: !5349)
!5356 = !DILocation(line: 4696, column: 3, scope: !5349)
!5357 = !DILocation(line: 4697, column: 3, scope: !5349)
!5358 = !DILocation(line: 4698, column: 3, scope: !5349)
!5359 = !DILocation(line: 4699, column: 3, scope: !5349)
!5360 = !DILocation(line: 4700, column: 20, scope: !5349)
!5361 = !DILocation(line: 4700, column: 3, scope: !5349)
!5362 = !DILocation(line: 4701, column: 20, scope: !5349)
!5363 = !DILocation(line: 4701, column: 3, scope: !5349)
!5364 = !DILocation(line: 4702, column: 16, scope: !5349)
!5365 = !DILocation(line: 4702, column: 3, scope: !5349)
!5366 = !DILocation(line: 4703, column: 16, scope: !5349)
!5367 = !DILocation(line: 4703, column: 3, scope: !5349)
!5368 = !DILocation(line: 4704, column: 3, scope: !5349)
!5369 = !DILocation(line: 4706, column: 3, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 4706, column: 3)
!5371 = !DILocation(line: 4706, column: 3, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 4706, column: 3)
!5373 = !DILocation(line: 4708, column: 13, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 4707, column: 5)
!5375 = !DILocation(line: 4708, column: 17, scope: !5374)
!5376 = !DILocation(line: 4708, column: 7, scope: !5374)
!5377 = !DILocation(line: 4709, column: 7, scope: !5374)
!5378 = !DILocation(line: 4709, column: 11, scope: !5374)
!5379 = !DILocation(line: 4709, column: 15, scope: !5374)
!5380 = !DILocation(line: 4710, column: 5, scope: !5374)
!5381 = distinct !{!5381, !5369, !5382}
!5382 = !DILocation(line: 4710, column: 5, scope: !5370)
!5383 = !DILocation(line: 4712, column: 3, scope: !5349)
!5384 = !DILocation(line: 4714, column: 8, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 4714, column: 7)
!5386 = !DILocation(line: 4714, column: 7, scope: !5349)
!5387 = !DILocation(line: 4716, column: 39, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 4715, column: 5)
!5389 = !DILocation(line: 4716, column: 7, scope: !5388)
!5390 = !DILocation(line: 4717, column: 7, scope: !5388)
!5391 = !DILocation(line: 4718, column: 5, scope: !5388)
!5392 = !DILocation(line: 4720, column: 3, scope: !5349)
!5393 = !DILocation(line: 4722, column: 8, scope: !5394)
!5394 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 4722, column: 7)
!5395 = !DILocation(line: 4722, column: 7, scope: !5349)
!5396 = !DILocation(line: 4723, column: 5, scope: !5394)
!5397 = !DILocation(line: 4724, column: 1, scope: !5349)
!5398 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !608, file: !608, line: 34, type: !5399, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5399 = !DISubroutineType(types: !5400)
!5400 = !{!2499, !1025}
!5401 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5398, file: !608, line: 34, type: !1025)
!5402 = !DILocation(line: 34, column: 1, scope: !5398)
!5403 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !608, file: !608, line: 33, type: !5404, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5404 = !DISubroutineType(types: !5405)
!5405 = !{!6, !5406}
!5406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5407, size: 64)
!5407 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1924)
!5408 = !DILocalVariable(name: "vec_", arg: 1, scope: !5403, file: !608, line: 33, type: !5406)
!5409 = !DILocation(line: 33, column: 1, scope: !5403)
!5410 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !608, file: !608, line: 33, type: !5411, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5411 = !DISubroutineType(types: !5412)
!5412 = !{!1025, !5406, !6, !5413}
!5413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1386, size: 64)
!5414 = !DILocalVariable(name: "vec_", arg: 1, scope: !5410, file: !608, line: 33, type: !5406)
!5415 = !DILocation(line: 33, column: 1, scope: !5410)
!5416 = !DILocalVariable(name: "ix_", arg: 2, scope: !5410, file: !608, line: 33, type: !6)
!5417 = !DILocalVariable(name: "ptr", arg: 3, scope: !5410, file: !608, line: 33, type: !5413)
!5418 = !DILocation(line: 33, column: 1, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5410, file: !608, line: 33, column: 1)
!5420 = !DILocation(line: 33, column: 1, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5419, file: !608, line: 33, column: 1)
!5422 = !DILocation(line: 33, column: 1, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5419, file: !608, line: 33, column: 1)
!5424 = distinct !DISubprogram(name: "gimple_plf", scope: !608, file: !608, line: 1247, type: !5425, scopeLine: 1248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5425 = !DISubroutineType(types: !5426)
!5426 = !{!6, !1386, !607}
!5427 = !DILocalVariable(name: "stmt", arg: 1, scope: !5424, file: !608, line: 1247, type: !1386)
!5428 = !DILocation(line: 1247, column: 20, scope: !5424)
!5429 = !DILocalVariable(name: "plf", arg: 2, scope: !5424, file: !608, line: 1247, type: !607)
!5430 = !DILocation(line: 1247, column: 40, scope: !5424)
!5431 = !DILocation(line: 1249, column: 10, scope: !5424)
!5432 = !DILocation(line: 1249, column: 16, scope: !5424)
!5433 = !DILocation(line: 1249, column: 23, scope: !5424)
!5434 = !DILocation(line: 1249, column: 45, scope: !5424)
!5435 = !DILocation(line: 1249, column: 27, scope: !5424)
!5436 = !DILocation(line: 1249, column: 3, scope: !5424)
!5437 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !608, file: !608, line: 33, type: !5438, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5438 = !DISubroutineType(types: !5439)
!5439 = !{!5413, !5440, !1386}
!5440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64)
!5441 = !DILocalVariable(name: "vec_", arg: 1, scope: !5437, file: !608, line: 33, type: !5440)
!5442 = !DILocation(line: 33, column: 1, scope: !5437)
!5443 = !DILocalVariable(name: "obj_", arg: 2, scope: !5437, file: !608, line: 33, type: !1386)
!5444 = !DILocalVariable(name: "slot_", scope: !5437, file: !608, line: 33, type: !5413)
!5445 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !608, file: !608, line: 33, type: !5446, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5446 = !DISubroutineType(types: !5447)
!5447 = !{!1386, !5440}
!5448 = !DILocalVariable(name: "vec_", arg: 1, scope: !5445, file: !608, line: 33, type: !5440)
!5449 = !DILocation(line: 33, column: 1, scope: !5445)
!5450 = !DILocalVariable(name: "obj_", scope: !5445, file: !608, line: 33, type: !1386)
!5451 = distinct !DISubprogram(name: "gimple_code", scope: !608, file: !608, line: 1052, type: !5452, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5452 = !DISubroutineType(types: !5453)
!5453 = !{!612, !5454}
!5454 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1044, line: 60, baseType: !2524)
!5455 = !DILocalVariable(name: "g", arg: 1, scope: !5451, file: !608, line: 1052, type: !5454)
!5456 = !DILocation(line: 1052, column: 27, scope: !5451)
!5457 = !DILocation(line: 1054, column: 10, scope: !5451)
!5458 = !DILocation(line: 1054, column: 13, scope: !5451)
!5459 = !DILocation(line: 1054, column: 20, scope: !5451)
!5460 = !DILocation(line: 1054, column: 3, scope: !5451)
!5461 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !608, file: !608, line: 34, type: !5462, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5462 = !DISubroutineType(types: !5463)
!5463 = !{!1025, !5464, !1025}
!5464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2499, size: 64)
!5465 = !DILocalVariable(name: "vec_", arg: 1, scope: !5461, file: !608, line: 34, type: !5464)
!5466 = !DILocation(line: 34, column: 1, scope: !5461)
!5467 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5461, file: !608, line: 34, type: !1025)
!5468 = !DILocalVariable(name: "extend", scope: !5461, file: !608, line: 34, type: !1025)
!5469 = !DILocation(line: 34, column: 1, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5461, file: !608, line: 34, column: 1)
!5471 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !608, file: !608, line: 3061, type: !5472, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5472 = !DISubroutineType(types: !5473)
!5473 = !{!6, !5454}
!5474 = !DILocalVariable(name: "gs", arg: 1, scope: !5471, file: !608, line: 3061, type: !5454)
!5475 = !DILocation(line: 3061, column: 35, scope: !5471)
!5476 = !DILocation(line: 3064, column: 10, scope: !5471)
!5477 = !DILocation(line: 3064, column: 14, scope: !5471)
!5478 = !DILocation(line: 3064, column: 25, scope: !5471)
!5479 = !DILocation(line: 3064, column: 3, scope: !5471)
!5480 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5481, file: !5481, line: 427, type: !5482, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5481 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5482 = !DISubroutineType(types: !5483)
!5483 = !{!1123, !2534}
!5484 = !DILocalVariable(name: "use", arg: 1, scope: !5480, file: !5481, line: 427, type: !2534)
!5485 = !DILocation(line: 427, column: 33, scope: !5480)
!5486 = !DILocation(line: 429, column: 12, scope: !5480)
!5487 = !DILocation(line: 429, column: 17, scope: !5480)
!5488 = !DILocation(line: 429, column: 10, scope: !5480)
!5489 = !DILocation(line: 429, column: 3, scope: !5480)
!5490 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5481, file: !5481, line: 442, type: !5491, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!2534, !1386, !1025}
!5493 = !DILocalVariable(name: "gs", arg: 1, scope: !5490, file: !5481, line: 442, type: !1386)
!5494 = !DILocation(line: 442, column: 36, scope: !5490)
!5495 = !DILocalVariable(name: "i", arg: 2, scope: !5490, file: !5481, line: 442, type: !1025)
!5496 = !DILocation(line: 442, column: 44, scope: !5490)
!5497 = !DILocation(line: 444, column: 27, scope: !5490)
!5498 = !DILocation(line: 444, column: 31, scope: !5490)
!5499 = !DILocation(line: 444, column: 11, scope: !5490)
!5500 = !DILocation(line: 444, column: 35, scope: !5490)
!5501 = !DILocation(line: 444, column: 3, scope: !5490)
!5502 = distinct !DISubprogram(name: "mark_operand_necessary", scope: !3, file: !3, line: 4442, type: !5503, scopeLine: 4443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5503 = !DISubroutineType(types: !5504)
!5504 = !{!1386, !1123}
!5505 = !DILocalVariable(name: "op", arg: 1, scope: !5502, file: !3, line: 4442, type: !1123)
!5506 = !DILocation(line: 4442, column: 30, scope: !5502)
!5507 = !DILocalVariable(name: "stmt", scope: !5502, file: !3, line: 4444, type: !1386)
!5508 = !DILocation(line: 4444, column: 10, scope: !5502)
!5509 = !DILocation(line: 4446, column: 3, scope: !5502)
!5510 = !DILocation(line: 4448, column: 7, scope: !5511)
!5511 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 4448, column: 7)
!5512 = !DILocation(line: 4448, column: 22, scope: !5511)
!5513 = !DILocation(line: 4448, column: 7, scope: !5502)
!5514 = !DILocation(line: 4449, column: 5, scope: !5511)
!5515 = !DILocation(line: 4451, column: 10, scope: !5502)
!5516 = !DILocation(line: 4451, column: 8, scope: !5502)
!5517 = !DILocation(line: 4452, column: 3, scope: !5502)
!5518 = !DILocation(line: 4454, column: 19, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 4454, column: 7)
!5520 = !DILocation(line: 4454, column: 7, scope: !5519)
!5521 = !DILocation(line: 4455, column: 7, scope: !5519)
!5522 = !DILocation(line: 4455, column: 24, scope: !5519)
!5523 = !DILocation(line: 4455, column: 10, scope: !5519)
!5524 = !DILocation(line: 4454, column: 7, scope: !5502)
!5525 = !DILocation(line: 4456, column: 5, scope: !5519)
!5526 = !DILocation(line: 4458, column: 19, scope: !5502)
!5527 = !DILocation(line: 4458, column: 3, scope: !5502)
!5528 = !DILocation(line: 4459, column: 10, scope: !5502)
!5529 = !DILocation(line: 4459, column: 3, scope: !5502)
!5530 = !DILocation(line: 4460, column: 1, scope: !5502)
!5531 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !5481, file: !5481, line: 792, type: !5532, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5532 = !DISubroutineType(types: !5533)
!5533 = !{!1123, !5534, !1386, !1025}
!5534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3815, size: 64)
!5535 = !DILocalVariable(name: "ptr", arg: 1, scope: !5531, file: !5481, line: 792, type: !5534)
!5536 = !DILocation(line: 792, column: 33, scope: !5531)
!5537 = !DILocalVariable(name: "stmt", arg: 2, scope: !5531, file: !5481, line: 792, type: !1386)
!5538 = !DILocation(line: 792, column: 45, scope: !5531)
!5539 = !DILocalVariable(name: "flags", arg: 3, scope: !5531, file: !5481, line: 792, type: !1025)
!5540 = !DILocation(line: 792, column: 55, scope: !5531)
!5541 = !DILocation(line: 794, column: 17, scope: !5531)
!5542 = !DILocation(line: 794, column: 22, scope: !5531)
!5543 = !DILocation(line: 794, column: 28, scope: !5531)
!5544 = !DILocation(line: 794, column: 3, scope: !5531)
!5545 = !DILocation(line: 795, column: 3, scope: !5531)
!5546 = !DILocation(line: 795, column: 8, scope: !5531)
!5547 = !DILocation(line: 795, column: 18, scope: !5531)
!5548 = !DILocation(line: 796, column: 29, scope: !5531)
!5549 = !DILocation(line: 796, column: 10, scope: !5531)
!5550 = !DILocation(line: 796, column: 3, scope: !5531)
!5551 = distinct !DISubprogram(name: "op_iter_done", scope: !5481, file: !5481, line: 652, type: !5552, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5552 = !DISubroutineType(types: !5553)
!5553 = !{!1236, !5554}
!5554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5555, size: 64)
!5555 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3815)
!5556 = !DILocalVariable(name: "ptr", arg: 1, scope: !5551, file: !5481, line: 652, type: !5554)
!5557 = !DILocation(line: 652, column: 34, scope: !5551)
!5558 = !DILocation(line: 654, column: 10, scope: !5551)
!5559 = !DILocation(line: 654, column: 15, scope: !5551)
!5560 = !DILocation(line: 654, column: 3, scope: !5551)
!5561 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !608, file: !608, line: 34, type: !5562, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5562 = !DISubroutineType(types: !5563)
!5563 = !{!5413, !5464, !1386}
!5564 = !DILocalVariable(name: "vec_", arg: 1, scope: !5561, file: !608, line: 34, type: !5464)
!5565 = !DILocation(line: 34, column: 1, scope: !5561)
!5566 = !DILocalVariable(name: "obj_", arg: 2, scope: !5561, file: !608, line: 34, type: !1386)
!5567 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !5481, file: !5481, line: 699, type: !5568, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5568 = !DISubroutineType(types: !5569)
!5569 = !{!1123, !5534}
!5570 = !DILocalVariable(name: "ptr", arg: 1, scope: !5567, file: !5481, line: 699, type: !5534)
!5571 = !DILocation(line: 699, column: 33, scope: !5567)
!5572 = !DILocalVariable(name: "val", scope: !5567, file: !5481, line: 701, type: !1123)
!5573 = !DILocation(line: 701, column: 8, scope: !5567)
!5574 = !DILocation(line: 705, column: 7, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5567, file: !5481, line: 705, column: 7)
!5576 = !DILocation(line: 705, column: 12, scope: !5575)
!5577 = !DILocation(line: 705, column: 7, scope: !5567)
!5578 = !DILocation(line: 707, column: 13, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5575, file: !5481, line: 706, column: 5)
!5580 = !DILocation(line: 707, column: 11, scope: !5579)
!5581 = !DILocation(line: 708, column: 19, scope: !5579)
!5582 = !DILocation(line: 708, column: 24, scope: !5579)
!5583 = !DILocation(line: 708, column: 30, scope: !5579)
!5584 = !DILocation(line: 708, column: 7, scope: !5579)
!5585 = !DILocation(line: 708, column: 12, scope: !5579)
!5586 = !DILocation(line: 708, column: 17, scope: !5579)
!5587 = !DILocation(line: 709, column: 14, scope: !5579)
!5588 = !DILocation(line: 709, column: 7, scope: !5579)
!5589 = !DILocation(line: 711, column: 7, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5567, file: !5481, line: 711, column: 7)
!5591 = !DILocation(line: 711, column: 12, scope: !5590)
!5592 = !DILocation(line: 711, column: 7, scope: !5567)
!5593 = !DILocation(line: 713, column: 13, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5590, file: !5481, line: 712, column: 5)
!5595 = !DILocation(line: 713, column: 11, scope: !5594)
!5596 = !DILocation(line: 714, column: 19, scope: !5594)
!5597 = !DILocation(line: 714, column: 24, scope: !5594)
!5598 = !DILocation(line: 714, column: 30, scope: !5594)
!5599 = !DILocation(line: 714, column: 7, scope: !5594)
!5600 = !DILocation(line: 714, column: 12, scope: !5594)
!5601 = !DILocation(line: 714, column: 17, scope: !5594)
!5602 = !DILocation(line: 715, column: 14, scope: !5594)
!5603 = !DILocation(line: 715, column: 7, scope: !5594)
!5604 = !DILocation(line: 718, column: 3, scope: !5567)
!5605 = !DILocation(line: 718, column: 8, scope: !5567)
!5606 = !DILocation(line: 718, column: 13, scope: !5567)
!5607 = !DILocation(line: 719, column: 3, scope: !5567)
!5608 = !DILocation(line: 721, column: 1, scope: !5567)
!5609 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !608, file: !608, line: 34, type: !5610, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5610 = !DISubroutineType(types: !5611)
!5611 = !{null, !5464}
!5612 = !DILocalVariable(name: "vec_", arg: 1, scope: !5609, file: !608, line: 34, type: !5464)
!5613 = !DILocation(line: 34, column: 1, scope: !5609)
!5614 = !DILocation(line: 34, column: 1, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5609, file: !608, line: 34, column: 1)
!5616 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !608, file: !608, line: 33, type: !5617, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5617 = !DISubroutineType(types: !5618)
!5618 = !{!1025, !5440, !1025}
!5619 = !DILocalVariable(name: "vec_", arg: 1, scope: !5616, file: !608, line: 33, type: !5440)
!5620 = !DILocation(line: 33, column: 1, scope: !5616)
!5621 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5616, file: !608, line: 33, type: !1025)
!5622 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !608, file: !608, line: 3100, type: !5623, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5623 = !DISubroutineType(types: !5624)
!5624 = !{!5625, !1386, !6}
!5625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1489, size: 64)
!5626 = !DILocalVariable(name: "gs", arg: 1, scope: !5622, file: !608, line: 3100, type: !1386)
!5627 = !DILocation(line: 3100, column: 24, scope: !5622)
!5628 = !DILocalVariable(name: "index", arg: 2, scope: !5622, file: !608, line: 3100, type: !6)
!5629 = !DILocation(line: 3100, column: 37, scope: !5622)
!5630 = !DILocation(line: 3103, column: 3, scope: !5622)
!5631 = !DILocation(line: 3104, column: 12, scope: !5622)
!5632 = !DILocation(line: 3104, column: 16, scope: !5622)
!5633 = !DILocation(line: 3104, column: 27, scope: !5622)
!5634 = !DILocation(line: 3104, column: 32, scope: !5622)
!5635 = !DILocation(line: 3104, column: 3, scope: !5622)
!5636 = distinct !DISubprogram(name: "gimple_nop_p", scope: !608, file: !608, line: 4304, type: !5637, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5637 = !DISubroutineType(types: !5638)
!5638 = !{!1236, !5454}
!5639 = !DILocalVariable(name: "g", arg: 1, scope: !5636, file: !608, line: 4304, type: !5454)
!5640 = !DILocation(line: 4304, column: 28, scope: !5636)
!5641 = !DILocation(line: 4306, column: 23, scope: !5636)
!5642 = !DILocation(line: 4306, column: 10, scope: !5636)
!5643 = !DILocation(line: 4306, column: 26, scope: !5636)
!5644 = !DILocation(line: 4306, column: 3, scope: !5636)
!5645 = distinct !DISubprogram(name: "gimple_set_plf", scope: !608, file: !608, line: 1235, type: !5646, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5646 = !DISubroutineType(types: !5647)
!5647 = !{null, !1386, !607, !1236}
!5648 = !DILocalVariable(name: "stmt", arg: 1, scope: !5645, file: !608, line: 1235, type: !1386)
!5649 = !DILocation(line: 1235, column: 24, scope: !5645)
!5650 = !DILocalVariable(name: "plf", arg: 2, scope: !5645, file: !608, line: 1235, type: !607)
!5651 = !DILocation(line: 1235, column: 44, scope: !5645)
!5652 = !DILocalVariable(name: "val_p", arg: 3, scope: !5645, file: !608, line: 1235, type: !1236)
!5653 = !DILocation(line: 1235, column: 54, scope: !5645)
!5654 = !DILocation(line: 1237, column: 7, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5645, file: !608, line: 1237, column: 7)
!5656 = !DILocation(line: 1237, column: 7, scope: !5645)
!5657 = !DILocation(line: 1238, column: 40, scope: !5655)
!5658 = !DILocation(line: 1238, column: 5, scope: !5655)
!5659 = !DILocation(line: 1238, column: 11, scope: !5655)
!5660 = !DILocation(line: 1238, column: 18, scope: !5655)
!5661 = !DILocation(line: 1238, column: 22, scope: !5655)
!5662 = !DILocation(line: 1240, column: 42, scope: !5655)
!5663 = !DILocation(line: 1240, column: 25, scope: !5655)
!5664 = !DILocation(line: 1240, column: 5, scope: !5655)
!5665 = !DILocation(line: 1240, column: 11, scope: !5655)
!5666 = !DILocation(line: 1240, column: 18, scope: !5655)
!5667 = !DILocation(line: 1240, column: 22, scope: !5655)
!5668 = !DILocation(line: 1241, column: 1, scope: !5645)
!5669 = distinct !DISubprogram(name: "op_iter_init", scope: !5481, file: !5481, line: 742, type: !5670, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5670 = !DISubroutineType(types: !5671)
!5671 = !{null, !5534, !1386, !1025}
!5672 = !DILocalVariable(name: "ptr", arg: 1, scope: !5669, file: !5481, line: 742, type: !5534)
!5673 = !DILocation(line: 742, column: 28, scope: !5669)
!5674 = !DILocalVariable(name: "stmt", arg: 2, scope: !5669, file: !5481, line: 742, type: !1386)
!5675 = !DILocation(line: 742, column: 40, scope: !5669)
!5676 = !DILocalVariable(name: "flags", arg: 3, scope: !5669, file: !5481, line: 742, type: !1025)
!5677 = !DILocation(line: 742, column: 50, scope: !5669)
!5678 = !DILocation(line: 746, column: 3, scope: !5669)
!5679 = !DILocation(line: 748, column: 16, scope: !5669)
!5680 = !DILocation(line: 748, column: 22, scope: !5669)
!5681 = !DILocation(line: 748, column: 15, scope: !5669)
!5682 = !DILocation(line: 748, column: 68, scope: !5669)
!5683 = !DILocation(line: 748, column: 52, scope: !5669)
!5684 = !DILocation(line: 748, column: 3, scope: !5669)
!5685 = !DILocation(line: 748, column: 8, scope: !5669)
!5686 = !DILocation(line: 748, column: 13, scope: !5669)
!5687 = !DILocation(line: 749, column: 9, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5669, file: !5481, line: 749, column: 7)
!5689 = !DILocation(line: 749, column: 15, scope: !5688)
!5690 = !DILocation(line: 750, column: 7, scope: !5688)
!5691 = !DILocation(line: 750, column: 10, scope: !5688)
!5692 = !DILocation(line: 750, column: 15, scope: !5688)
!5693 = !DILocation(line: 751, column: 7, scope: !5688)
!5694 = !DILocation(line: 751, column: 23, scope: !5688)
!5695 = !DILocation(line: 751, column: 10, scope: !5688)
!5696 = !DILocation(line: 751, column: 29, scope: !5688)
!5697 = !DILocation(line: 749, column: 7, scope: !5669)
!5698 = !DILocation(line: 752, column: 17, scope: !5688)
!5699 = !DILocation(line: 752, column: 22, scope: !5688)
!5700 = !DILocation(line: 752, column: 28, scope: !5688)
!5701 = !DILocation(line: 752, column: 5, scope: !5688)
!5702 = !DILocation(line: 752, column: 10, scope: !5688)
!5703 = !DILocation(line: 752, column: 15, scope: !5688)
!5704 = !DILocation(line: 753, column: 16, scope: !5669)
!5705 = !DILocation(line: 753, column: 22, scope: !5669)
!5706 = !DILocation(line: 753, column: 15, scope: !5669)
!5707 = !DILocation(line: 753, column: 68, scope: !5669)
!5708 = !DILocation(line: 753, column: 52, scope: !5669)
!5709 = !DILocation(line: 753, column: 3, scope: !5669)
!5710 = !DILocation(line: 753, column: 8, scope: !5669)
!5711 = !DILocation(line: 753, column: 13, scope: !5669)
!5712 = !DILocation(line: 754, column: 9, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5669, file: !5481, line: 754, column: 7)
!5714 = !DILocation(line: 754, column: 15, scope: !5713)
!5715 = !DILocation(line: 755, column: 7, scope: !5713)
!5716 = !DILocation(line: 755, column: 10, scope: !5713)
!5717 = !DILocation(line: 755, column: 15, scope: !5713)
!5718 = !DILocation(line: 756, column: 7, scope: !5713)
!5719 = !DILocation(line: 756, column: 23, scope: !5713)
!5720 = !DILocation(line: 756, column: 10, scope: !5713)
!5721 = !DILocation(line: 756, column: 29, scope: !5713)
!5722 = !DILocation(line: 754, column: 7, scope: !5669)
!5723 = !DILocation(line: 757, column: 17, scope: !5713)
!5724 = !DILocation(line: 757, column: 22, scope: !5713)
!5725 = !DILocation(line: 757, column: 28, scope: !5713)
!5726 = !DILocation(line: 757, column: 5, scope: !5713)
!5727 = !DILocation(line: 757, column: 10, scope: !5713)
!5728 = !DILocation(line: 757, column: 15, scope: !5713)
!5729 = !DILocation(line: 758, column: 3, scope: !5669)
!5730 = !DILocation(line: 758, column: 8, scope: !5669)
!5731 = !DILocation(line: 758, column: 13, scope: !5669)
!5732 = !DILocation(line: 760, column: 3, scope: !5669)
!5733 = !DILocation(line: 760, column: 8, scope: !5669)
!5734 = !DILocation(line: 760, column: 14, scope: !5669)
!5735 = !DILocation(line: 761, column: 3, scope: !5669)
!5736 = !DILocation(line: 761, column: 8, scope: !5669)
!5737 = !DILocation(line: 761, column: 16, scope: !5669)
!5738 = !DILocation(line: 762, column: 3, scope: !5669)
!5739 = !DILocation(line: 762, column: 8, scope: !5669)
!5740 = !DILocation(line: 762, column: 17, scope: !5669)
!5741 = !DILocation(line: 763, column: 1, scope: !5669)
!5742 = distinct !DISubprogram(name: "gimple_def_ops", scope: !608, file: !608, line: 1292, type: !5743, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5743 = !DISubroutineType(types: !5744)
!5744 = !{!1415, !5454}
!5745 = !DILocalVariable(name: "g", arg: 1, scope: !5742, file: !608, line: 1292, type: !5454)
!5746 = !DILocation(line: 1292, column: 30, scope: !5742)
!5747 = !DILocation(line: 1294, column: 24, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5742, file: !608, line: 1294, column: 7)
!5749 = !DILocation(line: 1294, column: 8, scope: !5748)
!5750 = !DILocation(line: 1294, column: 7, scope: !5742)
!5751 = !DILocation(line: 1295, column: 5, scope: !5748)
!5752 = !DILocation(line: 1296, column: 10, scope: !5742)
!5753 = !DILocation(line: 1296, column: 13, scope: !5742)
!5754 = !DILocation(line: 1296, column: 19, scope: !5742)
!5755 = !DILocation(line: 1296, column: 26, scope: !5742)
!5756 = !DILocation(line: 1296, column: 3, scope: !5742)
!5757 = !DILocation(line: 1297, column: 1, scope: !5742)
!5758 = distinct !DISubprogram(name: "gimple_vdef", scope: !608, file: !608, line: 1375, type: !5759, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5759 = !DISubroutineType(types: !5760)
!5760 = !{!1123, !5454}
!5761 = !DILocalVariable(name: "g", arg: 1, scope: !5758, file: !608, line: 1375, type: !5454)
!5762 = !DILocation(line: 1375, column: 27, scope: !5758)
!5763 = !DILocation(line: 1377, column: 28, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5758, file: !608, line: 1377, column: 7)
!5765 = !DILocation(line: 1377, column: 8, scope: !5764)
!5766 = !DILocation(line: 1377, column: 7, scope: !5758)
!5767 = !DILocation(line: 1378, column: 5, scope: !5764)
!5768 = !DILocation(line: 1379, column: 10, scope: !5758)
!5769 = !DILocation(line: 1379, column: 13, scope: !5758)
!5770 = !DILocation(line: 1379, column: 23, scope: !5758)
!5771 = !DILocation(line: 1379, column: 3, scope: !5758)
!5772 = !DILocation(line: 1380, column: 1, scope: !5758)
!5773 = distinct !DISubprogram(name: "gimple_use_ops", scope: !608, file: !608, line: 1313, type: !5774, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5774 = !DISubroutineType(types: !5775)
!5775 = !{!1422, !5454}
!5776 = !DILocalVariable(name: "g", arg: 1, scope: !5773, file: !608, line: 1313, type: !5454)
!5777 = !DILocation(line: 1313, column: 30, scope: !5773)
!5778 = !DILocation(line: 1315, column: 24, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5773, file: !608, line: 1315, column: 7)
!5780 = !DILocation(line: 1315, column: 8, scope: !5779)
!5781 = !DILocation(line: 1315, column: 7, scope: !5773)
!5782 = !DILocation(line: 1316, column: 5, scope: !5779)
!5783 = !DILocation(line: 1317, column: 10, scope: !5773)
!5784 = !DILocation(line: 1317, column: 13, scope: !5773)
!5785 = !DILocation(line: 1317, column: 19, scope: !5773)
!5786 = !DILocation(line: 1317, column: 26, scope: !5773)
!5787 = !DILocation(line: 1317, column: 3, scope: !5773)
!5788 = !DILocation(line: 1318, column: 1, scope: !5773)
!5789 = distinct !DISubprogram(name: "gimple_vuse", scope: !608, file: !608, line: 1365, type: !5759, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5790 = !DILocalVariable(name: "g", arg: 1, scope: !5789, file: !608, line: 1365, type: !5454)
!5791 = !DILocation(line: 1365, column: 27, scope: !5789)
!5792 = !DILocation(line: 1367, column: 28, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5789, file: !608, line: 1367, column: 7)
!5794 = !DILocation(line: 1367, column: 8, scope: !5793)
!5795 = !DILocation(line: 1367, column: 7, scope: !5789)
!5796 = !DILocation(line: 1368, column: 5, scope: !5793)
!5797 = !DILocation(line: 1369, column: 10, scope: !5789)
!5798 = !DILocation(line: 1369, column: 13, scope: !5789)
!5799 = !DILocation(line: 1369, column: 23, scope: !5789)
!5800 = !DILocation(line: 1369, column: 3, scope: !5789)
!5801 = !DILocation(line: 1370, column: 1, scope: !5789)
!5802 = distinct !DISubprogram(name: "gimple_has_ops", scope: !608, file: !608, line: 1274, type: !5637, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5803 = !DILocalVariable(name: "g", arg: 1, scope: !5802, file: !608, line: 1274, type: !5454)
!5804 = !DILocation(line: 1274, column: 30, scope: !5802)
!5805 = !DILocation(line: 1276, column: 23, scope: !5802)
!5806 = !DILocation(line: 1276, column: 10, scope: !5802)
!5807 = !DILocation(line: 1276, column: 26, scope: !5802)
!5808 = !DILocation(line: 1276, column: 41, scope: !5802)
!5809 = !DILocation(line: 1276, column: 57, scope: !5802)
!5810 = !DILocation(line: 1276, column: 44, scope: !5802)
!5811 = !DILocation(line: 1276, column: 60, scope: !5802)
!5812 = !DILocation(line: 0, scope: !5802)
!5813 = !DILocation(line: 1276, column: 3, scope: !5802)
!5814 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !608, file: !608, line: 1283, type: !5637, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5815 = !DILocalVariable(name: "g", arg: 1, scope: !5814, file: !608, line: 1283, type: !5454)
!5816 = !DILocation(line: 1283, column: 34, scope: !5814)
!5817 = !DILocation(line: 1285, column: 23, scope: !5814)
!5818 = !DILocation(line: 1285, column: 10, scope: !5814)
!5819 = !DILocation(line: 1285, column: 26, scope: !5814)
!5820 = !DILocation(line: 1285, column: 43, scope: !5814)
!5821 = !DILocation(line: 1285, column: 59, scope: !5814)
!5822 = !DILocation(line: 1285, column: 46, scope: !5814)
!5823 = !DILocation(line: 1285, column: 62, scope: !5814)
!5824 = !DILocation(line: 0, scope: !5814)
!5825 = !DILocation(line: 1285, column: 3, scope: !5814)
!5826 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5481, file: !5481, line: 434, type: !5827, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5827 = !DISubroutineType(types: !5828)
!5828 = !{!1123, !5829}
!5829 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !651, line: 27, baseType: !1420)
!5830 = !DILocalVariable(name: "def", arg: 1, scope: !5826, file: !5481, line: 434, type: !5829)
!5831 = !DILocation(line: 434, column: 33, scope: !5826)
!5832 = !DILocation(line: 436, column: 11, scope: !5826)
!5833 = !DILocation(line: 436, column: 10, scope: !5826)
!5834 = !DILocation(line: 436, column: 3, scope: !5826)
!5835 = distinct !DISubprogram(name: "VEC_bitmap_set_t_heap_alloc", scope: !3, file: !3, line: 378, type: !5836, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5836 = !DISubroutineType(types: !5837)
!5837 = !{!1026, !1025}
!5838 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5835, file: !3, line: 378, type: !1025)
!5839 = !DILocation(line: 378, column: 1, scope: !5835)
!5840 = distinct !DISubprogram(name: "my_rev_post_order_compute", scope: !3, file: !3, line: 4555, type: !5841, scopeLine: 4556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5841 = !DISubroutineType(types: !5842)
!5842 = !{!1025, !2504, !1236}
!5843 = !DILocalVariable(name: "post_order", arg: 1, scope: !5840, file: !3, line: 4555, type: !2504)
!5844 = !DILocation(line: 4555, column: 33, scope: !5840)
!5845 = !DILocalVariable(name: "include_entry_exit", arg: 2, scope: !5840, file: !3, line: 4555, type: !1236)
!5846 = !DILocation(line: 4555, column: 50, scope: !5840)
!5847 = !DILocalVariable(name: "stack", scope: !5840, file: !3, line: 4557, type: !2505)
!5848 = !DILocation(line: 4557, column: 18, scope: !5840)
!5849 = !DILocalVariable(name: "sp", scope: !5840, file: !3, line: 4558, type: !1025)
!5850 = !DILocation(line: 4558, column: 7, scope: !5840)
!5851 = !DILocalVariable(name: "post_order_num", scope: !5840, file: !3, line: 4559, type: !1025)
!5852 = !DILocation(line: 4559, column: 7, scope: !5840)
!5853 = !DILocalVariable(name: "visited", scope: !5840, file: !3, line: 4560, type: !2627)
!5854 = !DILocation(line: 4560, column: 11, scope: !5840)
!5855 = !DILocalVariable(name: "count", scope: !5840, file: !3, line: 4561, type: !1025)
!5856 = !DILocation(line: 4561, column: 7, scope: !5840)
!5857 = !DILocation(line: 4563, column: 7, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 4563, column: 7)
!5859 = !DILocation(line: 4563, column: 7, scope: !5840)
!5860 = !DILocation(line: 4564, column: 5, scope: !5858)
!5861 = !DILocation(line: 4564, column: 30, scope: !5858)
!5862 = !DILocation(line: 4564, column: 34, scope: !5858)
!5863 = !DILocation(line: 4567, column: 11, scope: !5840)
!5864 = !DILocation(line: 4567, column: 9, scope: !5840)
!5865 = !DILocation(line: 4568, column: 6, scope: !5840)
!5866 = !DILocation(line: 4571, column: 28, scope: !5840)
!5867 = !DILocation(line: 4571, column: 13, scope: !5840)
!5868 = !DILocation(line: 4571, column: 11, scope: !5840)
!5869 = !DILocation(line: 4574, column: 17, scope: !5840)
!5870 = !DILocation(line: 4574, column: 3, scope: !5840)
!5871 = !DILocation(line: 4577, column: 3, scope: !5840)
!5872 = !DILocation(line: 4577, column: 11, scope: !5840)
!5873 = !DILocation(line: 4577, column: 17, scope: !5840)
!5874 = !DILocation(line: 4579, column: 3, scope: !5840)
!5875 = !DILocation(line: 4579, column: 10, scope: !5840)
!5876 = !DILocalVariable(name: "ei", scope: !5877, file: !3, line: 4581, type: !2506)
!5877 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 4580, column: 5)
!5878 = !DILocation(line: 4581, column: 21, scope: !5877)
!5879 = !DILocalVariable(name: "src", scope: !5877, file: !3, line: 4582, type: !1838)
!5880 = !DILocation(line: 4582, column: 19, scope: !5877)
!5881 = !DILocalVariable(name: "dest", scope: !5877, file: !3, line: 4583, type: !1838)
!5882 = !DILocation(line: 4583, column: 19, scope: !5877)
!5883 = !DILocation(line: 4586, column: 12, scope: !5877)
!5884 = !DILocation(line: 4586, column: 18, scope: !5877)
!5885 = !DILocation(line: 4586, column: 21, scope: !5877)
!5886 = !DILocation(line: 4587, column: 13, scope: !5877)
!5887 = !DILocation(line: 4587, column: 27, scope: !5877)
!5888 = !DILocation(line: 4587, column: 11, scope: !5877)
!5889 = !DILocation(line: 4588, column: 14, scope: !5877)
!5890 = !DILocation(line: 4588, column: 28, scope: !5877)
!5891 = !DILocation(line: 4588, column: 12, scope: !5877)
!5892 = !DILocation(line: 4591, column: 11, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 4591, column: 11)
!5894 = !DILocation(line: 4591, column: 18, scope: !5893)
!5895 = !DILocation(line: 4591, column: 15, scope: !5893)
!5896 = !DILocation(line: 4591, column: 34, scope: !5893)
!5897 = !DILocation(line: 4591, column: 39, scope: !5893)
!5898 = !DILocation(line: 4591, column: 11, scope: !5877)
!5899 = !DILocation(line: 4594, column: 20, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 4592, column: 9)
!5901 = !DILocation(line: 4594, column: 29, scope: !5900)
!5902 = !DILocation(line: 4594, column: 34, scope: !5900)
!5903 = !DILocation(line: 4594, column: 11, scope: !5900)
!5904 = !DILocation(line: 4596, column: 15, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 4596, column: 15)
!5906 = !DILocation(line: 4596, column: 39, scope: !5905)
!5907 = !DILocation(line: 4596, column: 15, scope: !5900)
!5908 = !DILocation(line: 4599, column: 13, scope: !5905)
!5909 = !DILocation(line: 4599, column: 21, scope: !5905)
!5910 = !DILocation(line: 4599, column: 27, scope: !5905)
!5911 = !DILocation(line: 4601, column: 44, scope: !5905)
!5912 = !DILocation(line: 4601, column: 49, scope: !5905)
!5913 = !DILocation(line: 4601, column: 13, scope: !5905)
!5914 = !DILocation(line: 4601, column: 38, scope: !5905)
!5915 = !DILocation(line: 4601, column: 42, scope: !5905)
!5916 = !DILocation(line: 4602, column: 9, scope: !5900)
!5917 = !DILocation(line: 4605, column: 15, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 4605, column: 15)
!5919 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 4604, column: 9)
!5920 = !DILocation(line: 4605, column: 40, scope: !5918)
!5921 = !DILocation(line: 4605, column: 43, scope: !5918)
!5922 = !DILocation(line: 4605, column: 51, scope: !5918)
!5923 = !DILocation(line: 4605, column: 48, scope: !5918)
!5924 = !DILocation(line: 4605, column: 15, scope: !5919)
!5925 = !DILocation(line: 4606, column: 44, scope: !5918)
!5926 = !DILocation(line: 4606, column: 50, scope: !5918)
!5927 = !DILocation(line: 4606, column: 13, scope: !5918)
!5928 = !DILocation(line: 4606, column: 38, scope: !5918)
!5929 = !DILocation(line: 4606, column: 42, scope: !5918)
!5930 = !DILocation(line: 4608, column: 16, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 4608, column: 15)
!5932 = !DILocation(line: 4608, column: 15, scope: !5919)
!5933 = !DILocation(line: 4609, column: 23, scope: !5931)
!5934 = !DILocation(line: 4609, column: 29, scope: !5931)
!5935 = !DILocation(line: 4609, column: 32, scope: !5931)
!5936 = !DILocation(line: 4609, column: 13, scope: !5931)
!5937 = !DILocation(line: 4611, column: 15, scope: !5931)
!5938 = distinct !{!5938, !5874, !5939}
!5939 = !DILocation(line: 4613, column: 5, scope: !5840)
!5940 = !DILocation(line: 4615, column: 7, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 4615, column: 7)
!5942 = !DILocation(line: 4615, column: 7, scope: !5840)
!5943 = !DILocation(line: 4617, column: 7, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5941, file: !3, line: 4616, column: 5)
!5945 = !DILocation(line: 4617, column: 32, scope: !5944)
!5946 = !DILocation(line: 4617, column: 36, scope: !5944)
!5947 = !DILocation(line: 4618, column: 15, scope: !5944)
!5948 = !DILocation(line: 4618, column: 13, scope: !5944)
!5949 = !DILocation(line: 4619, column: 5, scope: !5944)
!5950 = !DILocation(line: 4621, column: 13, scope: !5941)
!5951 = !DILocation(line: 4621, column: 28, scope: !5941)
!5952 = !DILocation(line: 4621, column: 11, scope: !5941)
!5953 = !DILocation(line: 4623, column: 9, scope: !5840)
!5954 = !DILocation(line: 4623, column: 3, scope: !5840)
!5955 = !DILocation(line: 4624, column: 3, scope: !5840)
!5956 = !DILocation(line: 4625, column: 10, scope: !5840)
!5957 = !DILocation(line: 4625, column: 3, scope: !5840)
!5958 = distinct !DISubprogram(name: "expr_pred_trans_hash", scope: !3, file: !3, line: 526, type: !1877, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5959 = !DILocalVariable(name: "p", arg: 1, scope: !5958, file: !3, line: 526, type: !1880)
!5960 = !DILocation(line: 526, column: 35, scope: !5958)
!5961 = !DILocalVariable(name: "ve", scope: !5958, file: !3, line: 528, type: !5962)
!5962 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2512)
!5963 = !DILocation(line: 528, column: 33, scope: !5958)
!5964 = !DILocation(line: 528, column: 64, scope: !5958)
!5965 = !DILocation(line: 528, column: 38, scope: !5958)
!5966 = !DILocation(line: 529, column: 10, scope: !5958)
!5967 = !DILocation(line: 529, column: 14, scope: !5958)
!5968 = !DILocation(line: 529, column: 3, scope: !5958)
!5969 = distinct !DISubprogram(name: "expr_pred_trans_eq", scope: !3, file: !3, line: 536, type: !1885, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!5970 = !DILocalVariable(name: "p1", arg: 1, scope: !5969, file: !3, line: 536, type: !1880)
!5971 = !DILocation(line: 536, column: 33, scope: !5969)
!5972 = !DILocalVariable(name: "p2", arg: 2, scope: !5969, file: !3, line: 536, type: !1880)
!5973 = !DILocation(line: 536, column: 49, scope: !5969)
!5974 = !DILocalVariable(name: "ve1", scope: !5969, file: !3, line: 538, type: !5962)
!5975 = !DILocation(line: 538, column: 33, scope: !5969)
!5976 = !DILocation(line: 538, column: 65, scope: !5969)
!5977 = !DILocation(line: 538, column: 39, scope: !5969)
!5978 = !DILocalVariable(name: "ve2", scope: !5969, file: !3, line: 539, type: !5962)
!5979 = !DILocation(line: 539, column: 33, scope: !5969)
!5980 = !DILocation(line: 539, column: 65, scope: !5969)
!5981 = !DILocation(line: 539, column: 39, scope: !5969)
!5982 = !DILocalVariable(name: "b1", scope: !5969, file: !3, line: 540, type: !1838)
!5983 = !DILocation(line: 540, column: 15, scope: !5969)
!5984 = !DILocation(line: 540, column: 20, scope: !5969)
!5985 = !DILocation(line: 540, column: 25, scope: !5969)
!5986 = !DILocalVariable(name: "b2", scope: !5969, file: !3, line: 541, type: !1838)
!5987 = !DILocation(line: 541, column: 15, scope: !5969)
!5988 = !DILocation(line: 541, column: 20, scope: !5969)
!5989 = !DILocation(line: 541, column: 25, scope: !5969)
!5990 = !DILocation(line: 545, column: 7, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5969, file: !3, line: 545, column: 7)
!5992 = !DILocation(line: 545, column: 13, scope: !5991)
!5993 = !DILocation(line: 545, column: 10, scope: !5991)
!5994 = !DILocation(line: 545, column: 7, scope: !5969)
!5995 = !DILocation(line: 546, column: 5, scope: !5991)
!5996 = !DILocation(line: 547, column: 23, scope: !5969)
!5997 = !DILocation(line: 547, column: 28, scope: !5969)
!5998 = !DILocation(line: 547, column: 31, scope: !5969)
!5999 = !DILocation(line: 547, column: 36, scope: !5969)
!6000 = !DILocation(line: 547, column: 10, scope: !5969)
!6001 = !DILocation(line: 547, column: 3, scope: !5969)
!6002 = !DILocation(line: 548, column: 1, scope: !5969)
!6003 = distinct !DISubprogram(name: "pre_expr_hash", scope: !3, file: !3, line: 215, type: !1877, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6004 = !DILocalVariable(name: "p1", arg: 1, scope: !6003, file: !3, line: 215, type: !1880)
!6005 = !DILocation(line: 215, column: 28, scope: !6003)
!6006 = !DILocalVariable(name: "e", scope: !6003, file: !3, line: 217, type: !2521)
!6007 = !DILocation(line: 217, column: 28, scope: !6003)
!6008 = !DILocation(line: 217, column: 60, scope: !6003)
!6009 = !DILocation(line: 217, column: 32, scope: !6003)
!6010 = !DILocation(line: 218, column: 11, scope: !6003)
!6011 = !DILocation(line: 218, column: 14, scope: !6003)
!6012 = !DILocation(line: 218, column: 3, scope: !6003)
!6013 = !DILocation(line: 221, column: 42, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 219, column: 5)
!6015 = !DILocation(line: 221, column: 14, scope: !6014)
!6016 = !DILocation(line: 221, column: 7, scope: !6014)
!6017 = !DILocation(line: 223, column: 14, scope: !6014)
!6018 = !DILocation(line: 223, column: 7, scope: !6014)
!6019 = !DILocation(line: 225, column: 14, scope: !6014)
!6020 = !DILocation(line: 225, column: 33, scope: !6014)
!6021 = !DILocation(line: 225, column: 7, scope: !6014)
!6022 = !DILocation(line: 227, column: 14, scope: !6014)
!6023 = !DILocation(line: 227, column: 38, scope: !6014)
!6024 = !DILocation(line: 227, column: 7, scope: !6014)
!6025 = !DILocation(line: 229, column: 7, scope: !6014)
!6026 = !DILocation(line: 230, column: 5, scope: !6014)
!6027 = !DILocation(line: 232, column: 5, scope: !6003)
!6028 = !DILocation(line: 234, column: 1, scope: !6003)
!6029 = distinct !DISubprogram(name: "pre_expr_eq", scope: !3, file: !3, line: 186, type: !1885, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6030 = !DILocalVariable(name: "p1", arg: 1, scope: !6029, file: !3, line: 186, type: !1880)
!6031 = !DILocation(line: 186, column: 26, scope: !6029)
!6032 = !DILocalVariable(name: "p2", arg: 2, scope: !6029, file: !3, line: 186, type: !1880)
!6033 = !DILocation(line: 186, column: 42, scope: !6029)
!6034 = !DILocalVariable(name: "e1", scope: !6029, file: !3, line: 188, type: !2521)
!6035 = !DILocation(line: 188, column: 28, scope: !6029)
!6036 = !DILocation(line: 188, column: 61, scope: !6029)
!6037 = !DILocation(line: 188, column: 33, scope: !6029)
!6038 = !DILocalVariable(name: "e2", scope: !6029, file: !3, line: 189, type: !2521)
!6039 = !DILocation(line: 189, column: 28, scope: !6029)
!6040 = !DILocation(line: 189, column: 61, scope: !6029)
!6041 = !DILocation(line: 189, column: 33, scope: !6029)
!6042 = !DILocation(line: 191, column: 7, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 191, column: 7)
!6044 = !DILocation(line: 191, column: 11, scope: !6043)
!6045 = !DILocation(line: 191, column: 19, scope: !6043)
!6046 = !DILocation(line: 191, column: 23, scope: !6043)
!6047 = !DILocation(line: 191, column: 16, scope: !6043)
!6048 = !DILocation(line: 191, column: 7, scope: !6029)
!6049 = !DILocation(line: 192, column: 5, scope: !6043)
!6050 = !DILocation(line: 194, column: 11, scope: !6029)
!6051 = !DILocation(line: 194, column: 15, scope: !6029)
!6052 = !DILocation(line: 194, column: 3, scope: !6029)
!6053 = !DILocation(line: 197, column: 40, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 195, column: 5)
!6055 = !DILocation(line: 198, column: 12, scope: !6054)
!6056 = !DILocation(line: 197, column: 14, scope: !6054)
!6057 = !DILocation(line: 197, column: 7, scope: !6054)
!6058 = !DILocation(line: 200, column: 14, scope: !6054)
!6059 = !DILocation(line: 200, column: 36, scope: !6054)
!6060 = !DILocation(line: 200, column: 33, scope: !6054)
!6061 = !DILocation(line: 200, column: 7, scope: !6054)
!6062 = !DILocation(line: 202, column: 29, scope: !6054)
!6063 = !DILocation(line: 202, column: 49, scope: !6054)
!6064 = !DILocation(line: 202, column: 14, scope: !6054)
!6065 = !DILocation(line: 202, column: 7, scope: !6054)
!6066 = !DILocation(line: 204, column: 31, scope: !6054)
!6067 = !DILocation(line: 205, column: 10, scope: !6054)
!6068 = !DILocation(line: 204, column: 14, scope: !6054)
!6069 = !DILocation(line: 204, column: 7, scope: !6054)
!6070 = !DILocation(line: 207, column: 7, scope: !6054)
!6071 = !DILocation(line: 208, column: 5, scope: !6054)
!6072 = !DILocation(line: 210, column: 5, scope: !6029)
!6073 = !DILocation(line: 212, column: 1, scope: !6029)
!6074 = distinct !DISubprogram(name: "ei_start_1", scope: !349, file: !349, line: 696, type: !6075, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6075 = !DISubroutineType(types: !6076)
!6076 = !{!2506, !2511}
!6077 = !DILocalVariable(name: "ev", arg: 1, scope: !6074, file: !349, line: 696, type: !2511)
!6078 = !DILocation(line: 696, column: 28, scope: !6074)
!6079 = !DILocalVariable(name: "i", scope: !6074, file: !349, line: 698, type: !2506)
!6080 = !DILocation(line: 698, column: 17, scope: !6074)
!6081 = !DILocation(line: 700, column: 5, scope: !6074)
!6082 = !DILocation(line: 700, column: 11, scope: !6074)
!6083 = !DILocation(line: 701, column: 17, scope: !6074)
!6084 = !DILocation(line: 701, column: 5, scope: !6074)
!6085 = !DILocation(line: 701, column: 15, scope: !6074)
!6086 = !DILocation(line: 703, column: 3, scope: !6074)
!6087 = distinct !DISubprogram(name: "ei_edge", scope: !349, file: !349, line: 752, type: !6088, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6088 = !DISubroutineType(types: !6089)
!6089 = !{!1366, !2506}
!6090 = !DILocalVariable(name: "i", arg: 1, scope: !6087, file: !349, line: 752, type: !2506)
!6091 = !DILocation(line: 752, column: 24, scope: !6087)
!6092 = !DILocation(line: 754, column: 10, scope: !6087)
!6093 = !DILocation(line: 754, column: 3, scope: !6087)
!6094 = distinct !DISubprogram(name: "SET_BIT", scope: !2628, file: !2628, line: 63, type: !6095, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6095 = !DISubroutineType(types: !6096)
!6096 = !{null, !2627, !6}
!6097 = !DILocalVariable(name: "map", arg: 1, scope: !6094, file: !2628, line: 63, type: !2627)
!6098 = !DILocation(line: 63, column: 18, scope: !6094)
!6099 = !DILocalVariable(name: "bitno", arg: 2, scope: !6094, file: !2628, line: 63, type: !6)
!6100 = !DILocation(line: 63, column: 36, scope: !6094)
!6101 = !DILocation(line: 65, column: 7, scope: !6102)
!6102 = distinct !DILexicalBlock(scope: !6094, file: !2628, line: 65, column: 7)
!6103 = !DILocation(line: 65, column: 12, scope: !6102)
!6104 = !DILocation(line: 65, column: 7, scope: !6094)
!6105 = !DILocalVariable(name: "oldbit", scope: !6106, file: !2628, line: 67, type: !1236)
!6106 = distinct !DILexicalBlock(scope: !6102, file: !2628, line: 66, column: 5)
!6107 = !DILocation(line: 67, column: 12, scope: !6106)
!6108 = !DILocation(line: 68, column: 16, scope: !6106)
!6109 = !DILocation(line: 68, column: 14, scope: !6106)
!6110 = !DILocation(line: 69, column: 12, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6106, file: !2628, line: 69, column: 11)
!6112 = !DILocation(line: 69, column: 11, scope: !6106)
!6113 = !DILocation(line: 70, column: 2, scope: !6111)
!6114 = !DILocation(line: 70, column: 7, scope: !6111)
!6115 = !DILocation(line: 70, column: 16, scope: !6111)
!6116 = !DILocation(line: 70, column: 22, scope: !6111)
!6117 = !DILocation(line: 70, column: 41, scope: !6111)
!6118 = !DILocation(line: 71, column: 5, scope: !6106)
!6119 = !DILocation(line: 73, column: 33, scope: !6094)
!6120 = !DILocation(line: 73, column: 40, scope: !6094)
!6121 = !DILocation(line: 73, column: 29, scope: !6094)
!6122 = !DILocation(line: 72, column: 3, scope: !6094)
!6123 = !DILocation(line: 72, column: 8, scope: !6094)
!6124 = !DILocation(line: 72, column: 13, scope: !6094)
!6125 = !DILocation(line: 72, column: 19, scope: !6094)
!6126 = !DILocation(line: 73, column: 5, scope: !6094)
!6127 = !DILocation(line: 74, column: 1, scope: !6094)
!6128 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !349, file: !349, line: 150, type: !6129, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6129 = !DISubroutineType(types: !6130)
!6130 = !{!6, !6131}
!6131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6132, size: 64)
!6132 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1359)
!6133 = !DILocalVariable(name: "vec_", arg: 1, scope: !6128, file: !349, line: 150, type: !6131)
!6134 = !DILocation(line: 150, column: 1, scope: !6128)
!6135 = distinct !DISubprogram(name: "ei_one_before_end_p", scope: !349, file: !349, line: 729, type: !6136, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6136 = !DISubroutineType(types: !6137)
!6137 = !{!1236, !2506}
!6138 = !DILocalVariable(name: "i", arg: 1, scope: !6135, file: !349, line: 729, type: !2506)
!6139 = !DILocation(line: 729, column: 36, scope: !6135)
!6140 = !DILocation(line: 731, column: 13, scope: !6135)
!6141 = !DILocation(line: 731, column: 19, scope: !6135)
!6142 = !DILocation(line: 731, column: 26, scope: !6135)
!6143 = !DILocation(line: 731, column: 23, scope: !6135)
!6144 = !DILocation(line: 731, column: 10, scope: !6135)
!6145 = !DILocation(line: 731, column: 3, scope: !6135)
!6146 = distinct !DISubprogram(name: "ei_next", scope: !349, file: !349, line: 736, type: !6147, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6147 = !DISubroutineType(types: !6148)
!6148 = !{null, !2505}
!6149 = !DILocalVariable(name: "i", arg: 1, scope: !6146, file: !349, line: 736, type: !2505)
!6150 = !DILocation(line: 736, column: 25, scope: !6146)
!6151 = !DILocation(line: 738, column: 3, scope: !6146)
!6152 = !DILocation(line: 739, column: 3, scope: !6146)
!6153 = !DILocation(line: 739, column: 6, scope: !6146)
!6154 = !DILocation(line: 739, column: 11, scope: !6146)
!6155 = !DILocation(line: 740, column: 1, scope: !6146)
!6156 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !349, file: !349, line: 150, type: !6157, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6157 = !DISubroutineType(types: !6158)
!6158 = !{!1366, !6131, !6}
!6159 = !DILocalVariable(name: "vec_", arg: 1, scope: !6156, file: !349, line: 150, type: !6131)
!6160 = !DILocation(line: 150, column: 1, scope: !6156)
!6161 = !DILocalVariable(name: "ix_", arg: 2, scope: !6156, file: !349, line: 150, type: !6)
!6162 = !DILocation(line: 0, scope: !6156)
!6163 = distinct !DISubprogram(name: "ei_container", scope: !349, file: !349, line: 685, type: !6164, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6164 = !DISubroutineType(types: !6165)
!6165 = !{!1354, !2506}
!6166 = !DILocalVariable(name: "i", arg: 1, scope: !6163, file: !349, line: 685, type: !2506)
!6167 = !DILocation(line: 685, column: 29, scope: !6163)
!6168 = !DILocation(line: 687, column: 3, scope: !6163)
!6169 = !DILocation(line: 688, column: 13, scope: !6163)
!6170 = !DILocation(line: 688, column: 10, scope: !6163)
!6171 = !DILocation(line: 688, column: 3, scope: !6163)
!6172 = distinct !DISubprogram(name: "vn_hash_constant_with_type", scope: !2415, file: !2415, line: 117, type: !6173, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6173 = !DISubroutineType(types: !6174)
!6174 = !{!1879, !1123}
!6175 = !DILocalVariable(name: "constant", arg: 1, scope: !6172, file: !2415, line: 117, type: !1123)
!6176 = !DILocation(line: 117, column: 34, scope: !6172)
!6177 = !DILocalVariable(name: "type", scope: !6172, file: !2415, line: 119, type: !1123)
!6178 = !DILocation(line: 119, column: 8, scope: !6172)
!6179 = !DILocation(line: 119, column: 15, scope: !6172)
!6180 = !DILocation(line: 120, column: 32, scope: !6172)
!6181 = !DILocation(line: 120, column: 11, scope: !6172)
!6182 = !DILocation(line: 121, column: 6, scope: !6172)
!6183 = !DILocation(line: 121, column: 4, scope: !6172)
!6184 = !DILocation(line: 122, column: 7, scope: !6172)
!6185 = !DILocation(line: 123, column: 9, scope: !6172)
!6186 = !DILocation(line: 123, column: 33, scope: !6172)
!6187 = !DILocation(line: 123, column: 31, scope: !6172)
!6188 = !DILocation(line: 122, column: 4, scope: !6172)
!6189 = !DILocation(line: 120, column: 3, scope: !6172)
!6190 = distinct !DISubprogram(name: "vn_constant_eq_with_type", scope: !2415, file: !2415, line: 130, type: !6191, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6191 = !DISubroutineType(types: !6192)
!6192 = !{!1236, !1123, !1123}
!6193 = !DILocalVariable(name: "c1", arg: 1, scope: !6190, file: !2415, line: 130, type: !1123)
!6194 = !DILocation(line: 130, column: 32, scope: !6190)
!6195 = !DILocalVariable(name: "c2", arg: 2, scope: !6190, file: !2415, line: 130, type: !1123)
!6196 = !DILocation(line: 130, column: 41, scope: !6190)
!6197 = !DILocation(line: 132, column: 32, scope: !6190)
!6198 = !DILocation(line: 132, column: 36, scope: !6190)
!6199 = !DILocation(line: 132, column: 11, scope: !6190)
!6200 = !DILocation(line: 133, column: 4, scope: !6190)
!6201 = !DILocation(line: 133, column: 27, scope: !6190)
!6202 = !DILocation(line: 133, column: 43, scope: !6190)
!6203 = !DILocation(line: 133, column: 7, scope: !6190)
!6204 = !DILocation(line: 0, scope: !6190)
!6205 = !DILocation(line: 132, column: 10, scope: !6190)
!6206 = !DILocation(line: 132, column: 3, scope: !6190)
!6207 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !141, file: !141, line: 182, type: !6208, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6208 = !DISubroutineType(types: !6209)
!6209 = !{!1123, !3323, !6}
!6210 = !DILocalVariable(name: "vec_", arg: 1, scope: !6207, file: !141, line: 182, type: !3323)
!6211 = !DILocation(line: 182, column: 1, scope: !6207)
!6212 = !DILocalVariable(name: "ix_", arg: 2, scope: !6207, file: !141, line: 182, type: !6)
!6213 = !DILocation(line: 0, scope: !6207)
!6214 = distinct !DISubprogram(name: "has_zero_uses", scope: !5481, file: !5481, line: 332, type: !6215, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6215 = !DISubroutineType(types: !6216)
!6216 = !{!1236, !6217}
!6217 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1044, line: 59, baseType: !6218)
!6218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6219, size: 64)
!6219 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1125)
!6220 = !DILocalVariable(name: "var", arg: 1, scope: !6214, file: !5481, line: 332, type: !6217)
!6221 = !DILocation(line: 332, column: 27, scope: !6214)
!6222 = !DILocalVariable(name: "ptr", scope: !6214, file: !5481, line: 334, type: !6223)
!6223 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6224)
!6224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6225, size: 64)
!6225 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2536)
!6226 = !DILocation(line: 334, column: 34, scope: !6214)
!6227 = !DILocation(line: 334, column: 42, scope: !6214)
!6228 = !DILocation(line: 337, column: 7, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6214, file: !5481, line: 337, column: 7)
!6230 = !DILocation(line: 337, column: 14, scope: !6229)
!6231 = !DILocation(line: 337, column: 19, scope: !6229)
!6232 = !DILocation(line: 337, column: 11, scope: !6229)
!6233 = !DILocation(line: 337, column: 7, scope: !6214)
!6234 = !DILocation(line: 338, column: 5, scope: !6229)
!6235 = !DILocation(line: 342, column: 8, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6214, file: !5481, line: 342, column: 7)
!6237 = !DILocation(line: 342, column: 7, scope: !6214)
!6238 = !DILocation(line: 343, column: 5, scope: !6236)
!6239 = !DILocation(line: 345, column: 27, scope: !6214)
!6240 = !DILocation(line: 345, column: 10, scope: !6214)
!6241 = !DILocation(line: 345, column: 3, scope: !6214)
!6242 = !DILocation(line: 346, column: 1, scope: !6214)
!6243 = distinct !DISubprogram(name: "get_or_alloc_expr_for_name", scope: !3, file: !3, line: 340, type: !6244, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6244 = !DISubroutineType(types: !6245)
!6245 = !{!1112, !1123}
!6246 = !DILocalVariable(name: "name", arg: 1, scope: !6243, file: !3, line: 340, type: !1123)
!6247 = !DILocation(line: 340, column: 34, scope: !6243)
!6248 = !DILocalVariable(name: "expr", scope: !6243, file: !3, line: 342, type: !1114)
!6249 = !DILocation(line: 342, column: 21, scope: !6243)
!6250 = !DILocalVariable(name: "result", scope: !6243, file: !3, line: 343, type: !1112)
!6251 = !DILocation(line: 343, column: 12, scope: !6243)
!6252 = !DILocalVariable(name: "result_id", scope: !6243, file: !3, line: 344, type: !6)
!6253 = !DILocation(line: 344, column: 16, scope: !6243)
!6254 = !DILocation(line: 346, column: 8, scope: !6243)
!6255 = !DILocation(line: 346, column: 13, scope: !6243)
!6256 = !DILocation(line: 347, column: 8, scope: !6243)
!6257 = !DILocation(line: 347, column: 11, scope: !6243)
!6258 = !DILocation(line: 348, column: 27, scope: !6243)
!6259 = !DILocation(line: 348, column: 3, scope: !6243)
!6260 = !DILocation(line: 348, column: 25, scope: !6243)
!6261 = !DILocation(line: 349, column: 15, scope: !6243)
!6262 = !DILocation(line: 349, column: 13, scope: !6243)
!6263 = !DILocation(line: 350, column: 7, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 350, column: 7)
!6265 = !DILocation(line: 350, column: 17, scope: !6264)
!6266 = !DILocation(line: 350, column: 7, scope: !6243)
!6267 = !DILocation(line: 351, column: 31, scope: !6264)
!6268 = !DILocation(line: 351, column: 12, scope: !6264)
!6269 = !DILocation(line: 351, column: 5, scope: !6264)
!6270 = !DILocation(line: 353, column: 35, scope: !6243)
!6271 = !DILocation(line: 353, column: 23, scope: !6243)
!6272 = !DILocation(line: 353, column: 12, scope: !6243)
!6273 = !DILocation(line: 353, column: 10, scope: !6243)
!6274 = !DILocation(line: 354, column: 3, scope: !6243)
!6275 = !DILocation(line: 354, column: 11, scope: !6243)
!6276 = !DILocation(line: 354, column: 16, scope: !6243)
!6277 = !DILocation(line: 355, column: 28, scope: !6243)
!6278 = !DILocation(line: 355, column: 3, scope: !6243)
!6279 = !DILocation(line: 355, column: 26, scope: !6243)
!6280 = !DILocation(line: 356, column: 24, scope: !6243)
!6281 = !DILocation(line: 356, column: 3, scope: !6243)
!6282 = !DILocation(line: 357, column: 10, scope: !6243)
!6283 = !DILocation(line: 357, column: 3, scope: !6243)
!6284 = !DILocation(line: 358, column: 1, scope: !6243)
!6285 = distinct !DISubprogram(name: "bitmap_insert_into_set", scope: !3, file: !3, line: 691, type: !6286, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6286 = !DISubroutineType(types: !6287)
!6287 = !{null, !1038, !1112}
!6288 = !DILocalVariable(name: "set", arg: 1, scope: !6285, file: !3, line: 691, type: !1038)
!6289 = !DILocation(line: 691, column: 38, scope: !6285)
!6290 = !DILocalVariable(name: "expr", arg: 2, scope: !6285, file: !3, line: 691, type: !1112)
!6291 = !DILocation(line: 691, column: 52, scope: !6285)
!6292 = !DILocation(line: 693, column: 29, scope: !6285)
!6293 = !DILocation(line: 693, column: 34, scope: !6285)
!6294 = !DILocation(line: 693, column: 59, scope: !6285)
!6295 = !DILocation(line: 693, column: 40, scope: !6285)
!6296 = !DILocation(line: 693, column: 3, scope: !6285)
!6297 = !DILocation(line: 694, column: 1, scope: !6285)
!6298 = distinct !DISubprogram(name: "bitmap_value_insert_into_set", scope: !3, file: !3, line: 900, type: !6286, scopeLine: 901, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6299 = !DILocalVariable(name: "set", arg: 1, scope: !6298, file: !3, line: 900, type: !1038)
!6300 = !DILocation(line: 900, column: 44, scope: !6298)
!6301 = !DILocalVariable(name: "expr", arg: 2, scope: !6298, file: !3, line: 900, type: !1112)
!6302 = !DILocation(line: 900, column: 58, scope: !6298)
!6303 = !DILocalVariable(name: "val", scope: !6298, file: !3, line: 902, type: !6)
!6304 = !DILocation(line: 902, column: 16, scope: !6298)
!6305 = !DILocation(line: 902, column: 41, scope: !6298)
!6306 = !DILocation(line: 902, column: 22, scope: !6298)
!6307 = !DILocation(line: 909, column: 28, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 909, column: 7)
!6309 = !DILocation(line: 909, column: 7, scope: !6308)
!6310 = !DILocation(line: 909, column: 7, scope: !6298)
!6311 = !DILocation(line: 910, column: 5, scope: !6308)
!6312 = !DILocation(line: 913, column: 23, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 913, column: 7)
!6314 = !DILocation(line: 913, column: 28, scope: !6313)
!6315 = !DILocation(line: 913, column: 36, scope: !6313)
!6316 = !DILocation(line: 913, column: 7, scope: !6313)
!6317 = !DILocation(line: 913, column: 7, scope: !6298)
!6318 = !DILocation(line: 914, column: 21, scope: !6313)
!6319 = !DILocation(line: 914, column: 26, scope: !6313)
!6320 = !DILocation(line: 914, column: 39, scope: !6313)
!6321 = !DILocation(line: 914, column: 45, scope: !6313)
!6322 = !DILocation(line: 914, column: 5, scope: !6313)
!6323 = !DILocation(line: 915, column: 1, scope: !6298)
!6324 = distinct !DISubprogram(name: "bitmap_set_copy", scope: !3, file: !3, line: 699, type: !6325, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6325 = !DISubroutineType(types: !6326)
!6326 = !{null, !1038, !1038}
!6327 = !DILocalVariable(name: "dest", arg: 1, scope: !6324, file: !3, line: 699, type: !1038)
!6328 = !DILocation(line: 699, column: 31, scope: !6324)
!6329 = !DILocalVariable(name: "orig", arg: 2, scope: !6324, file: !3, line: 699, type: !1038)
!6330 = !DILocation(line: 699, column: 50, scope: !6324)
!6331 = !DILocation(line: 701, column: 16, scope: !6324)
!6332 = !DILocation(line: 701, column: 22, scope: !6324)
!6333 = !DILocation(line: 701, column: 35, scope: !6324)
!6334 = !DILocation(line: 701, column: 41, scope: !6324)
!6335 = !DILocation(line: 701, column: 3, scope: !6324)
!6336 = !DILocation(line: 702, column: 16, scope: !6324)
!6337 = !DILocation(line: 702, column: 22, scope: !6324)
!6338 = !DILocation(line: 702, column: 30, scope: !6324)
!6339 = !DILocation(line: 702, column: 36, scope: !6324)
!6340 = !DILocation(line: 702, column: 3, scope: !6324)
!6341 = !DILocation(line: 703, column: 1, scope: !6324)
!6342 = distinct !DISubprogram(name: "gsi_end_p", scope: !608, file: !608, line: 4467, type: !6343, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6343 = !DISubroutineType(types: !6344)
!6344 = !{!1236, !3861}
!6345 = !DILocalVariable(name: "i", arg: 1, scope: !6342, file: !608, line: 4467, type: !3861)
!6346 = !DILocation(line: 4467, column: 33, scope: !6342)
!6347 = !DILocation(line: 4469, column: 12, scope: !6342)
!6348 = !DILocation(line: 4469, column: 16, scope: !6342)
!6349 = !DILocation(line: 4469, column: 10, scope: !6342)
!6350 = !DILocation(line: 4469, column: 3, scope: !6342)
!6351 = distinct !DISubprogram(name: "make_values_for_phi", scope: !3, file: !3, line: 3798, type: !6352, scopeLine: 3799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6352 = !DISubroutineType(types: !6353)
!6353 = !{null, !1386, !1838}
!6354 = !DILocalVariable(name: "phi", arg: 1, scope: !6351, file: !3, line: 3798, type: !1386)
!6355 = !DILocation(line: 3798, column: 29, scope: !6351)
!6356 = !DILocalVariable(name: "block", arg: 2, scope: !6351, file: !3, line: 3798, type: !1838)
!6357 = !DILocation(line: 3798, column: 46, scope: !6351)
!6358 = !DILocalVariable(name: "result", scope: !6351, file: !3, line: 3800, type: !1123)
!6359 = !DILocation(line: 3800, column: 8, scope: !6351)
!6360 = !DILocation(line: 3800, column: 36, scope: !6351)
!6361 = !DILocation(line: 3800, column: 17, scope: !6351)
!6362 = !DILocation(line: 3804, column: 22, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 3804, column: 7)
!6364 = !DILocation(line: 3804, column: 7, scope: !6363)
!6365 = !DILocation(line: 3804, column: 7, scope: !6351)
!6366 = !DILocalVariable(name: "e", scope: !6367, file: !3, line: 3806, type: !1112)
!6367 = distinct !DILexicalBlock(scope: !6363, file: !3, line: 3805, column: 5)
!6368 = !DILocation(line: 3806, column: 16, scope: !6367)
!6369 = !DILocation(line: 3806, column: 48, scope: !6367)
!6370 = !DILocation(line: 3806, column: 20, scope: !6367)
!6371 = !DILocation(line: 3807, column: 40, scope: !6367)
!6372 = !DILocation(line: 3807, column: 21, scope: !6367)
!6373 = !DILocation(line: 3807, column: 44, scope: !6367)
!6374 = !DILocation(line: 3807, column: 7, scope: !6367)
!6375 = !DILocation(line: 3808, column: 31, scope: !6367)
!6376 = !DILocation(line: 3808, column: 48, scope: !6367)
!6377 = !DILocation(line: 3808, column: 7, scope: !6367)
!6378 = !DILocation(line: 3809, column: 37, scope: !6367)
!6379 = !DILocation(line: 3809, column: 56, scope: !6367)
!6380 = !DILocation(line: 3809, column: 7, scope: !6367)
!6381 = !DILocation(line: 3810, column: 12, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6367, file: !3, line: 3810, column: 11)
!6383 = !DILocation(line: 3810, column: 11, scope: !6367)
!6384 = !DILocalVariable(name: "i", scope: !6385, file: !3, line: 3812, type: !6)
!6385 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 3811, column: 2)
!6386 = !DILocation(line: 3812, column: 13, scope: !6385)
!6387 = !DILocation(line: 3813, column: 11, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 3813, column: 4)
!6389 = !DILocation(line: 3813, column: 9, scope: !6388)
!6390 = !DILocation(line: 3813, column: 16, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6388, file: !3, line: 3813, column: 4)
!6392 = !DILocation(line: 3813, column: 41, scope: !6391)
!6393 = !DILocation(line: 3813, column: 20, scope: !6391)
!6394 = !DILocation(line: 3813, column: 18, scope: !6391)
!6395 = !DILocation(line: 3813, column: 4, scope: !6388)
!6396 = !DILocalVariable(name: "arg", scope: !6397, file: !3, line: 3815, type: !1123)
!6397 = distinct !DILexicalBlock(scope: !6391, file: !3, line: 3814, column: 6)
!6398 = !DILocation(line: 3815, column: 13, scope: !6397)
!6399 = !DILocation(line: 3815, column: 39, scope: !6397)
!6400 = !DILocation(line: 3815, column: 44, scope: !6397)
!6401 = !DILocation(line: 3815, column: 19, scope: !6397)
!6402 = !DILocation(line: 3816, column: 12, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 3816, column: 12)
!6404 = !DILocation(line: 3816, column: 28, scope: !6403)
!6405 = !DILocation(line: 3816, column: 12, scope: !6397)
!6406 = !DILocation(line: 3818, column: 37, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 3817, column: 3)
!6408 = !DILocation(line: 3818, column: 9, scope: !6407)
!6409 = !DILocation(line: 3818, column: 7, scope: !6407)
!6410 = !DILocation(line: 3819, column: 38, scope: !6407)
!6411 = !DILocation(line: 3819, column: 19, scope: !6407)
!6412 = !DILocation(line: 3819, column: 42, scope: !6407)
!6413 = !DILocation(line: 3819, column: 5, scope: !6407)
!6414 = !DILocation(line: 3820, column: 3, scope: !6407)
!6415 = !DILocation(line: 3821, column: 6, scope: !6397)
!6416 = !DILocation(line: 3813, column: 47, scope: !6391)
!6417 = !DILocation(line: 3813, column: 4, scope: !6391)
!6418 = distinct !{!6418, !6395, !6419}
!6419 = !DILocation(line: 3821, column: 6, scope: !6388)
!6420 = !DILocation(line: 3822, column: 2, scope: !6385)
!6421 = !DILocation(line: 3823, column: 5, scope: !6367)
!6422 = !DILocation(line: 3824, column: 1, scope: !6351)
!6423 = distinct !DISubprogram(name: "gsi_stmt", scope: !608, file: !608, line: 4501, type: !6424, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6424 = !DISubroutineType(types: !6425)
!6425 = !{!1386, !3861}
!6426 = !DILocalVariable(name: "i", arg: 1, scope: !6423, file: !608, line: 4501, type: !3861)
!6427 = !DILocation(line: 4501, column: 32, scope: !6423)
!6428 = !DILocation(line: 4503, column: 12, scope: !6423)
!6429 = !DILocation(line: 4503, column: 17, scope: !6423)
!6430 = !DILocation(line: 4503, column: 3, scope: !6423)
!6431 = distinct !DISubprogram(name: "gsi_next", scope: !608, file: !608, line: 4485, type: !6432, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6432 = !DISubroutineType(types: !6433)
!6433 = !{null, !6434}
!6434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3861, size: 64)
!6435 = !DILocalVariable(name: "i", arg: 1, scope: !6431, file: !608, line: 4485, type: !6434)
!6436 = !DILocation(line: 4485, column: 33, scope: !6431)
!6437 = !DILocation(line: 4487, column: 12, scope: !6431)
!6438 = !DILocation(line: 4487, column: 15, scope: !6431)
!6439 = !DILocation(line: 4487, column: 20, scope: !6431)
!6440 = !DILocation(line: 4487, column: 3, scope: !6431)
!6441 = !DILocation(line: 4487, column: 6, scope: !6431)
!6442 = !DILocation(line: 4487, column: 10, scope: !6431)
!6443 = !DILocation(line: 4488, column: 1, scope: !6431)
!6444 = distinct !DISubprogram(name: "gsi_start_bb", scope: !608, file: !608, line: 4418, type: !6445, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6445 = !DISubroutineType(types: !6446)
!6446 = !{!3861, !1838}
!6447 = !DILocalVariable(name: "bb", arg: 1, scope: !6444, file: !608, line: 4418, type: !1838)
!6448 = !DILocation(line: 4418, column: 27, scope: !6444)
!6449 = !DILocalVariable(name: "i", scope: !6444, file: !608, line: 4420, type: !3861)
!6450 = !DILocation(line: 4420, column: 24, scope: !6444)
!6451 = !DILocalVariable(name: "seq", scope: !6444, file: !608, line: 4421, type: !1376)
!6452 = !DILocation(line: 4421, column: 14, scope: !6444)
!6453 = !DILocation(line: 4423, column: 17, scope: !6444)
!6454 = !DILocation(line: 4423, column: 9, scope: !6444)
!6455 = !DILocation(line: 4423, column: 7, scope: !6444)
!6456 = !DILocation(line: 4424, column: 29, scope: !6444)
!6457 = !DILocation(line: 4424, column: 11, scope: !6444)
!6458 = !DILocation(line: 4424, column: 5, scope: !6444)
!6459 = !DILocation(line: 4424, column: 9, scope: !6444)
!6460 = !DILocation(line: 4425, column: 11, scope: !6444)
!6461 = !DILocation(line: 4425, column: 5, scope: !6444)
!6462 = !DILocation(line: 4425, column: 9, scope: !6444)
!6463 = !DILocation(line: 4426, column: 10, scope: !6444)
!6464 = !DILocation(line: 4426, column: 5, scope: !6444)
!6465 = !DILocation(line: 4426, column: 8, scope: !6444)
!6466 = !DILocation(line: 4428, column: 3, scope: !6444)
!6467 = distinct !DISubprogram(name: "gimple_set_uid", scope: !608, file: !608, line: 1256, type: !6468, scopeLine: 1257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6468 = !DISubroutineType(types: !6469)
!6469 = !{null, !1386, !6}
!6470 = !DILocalVariable(name: "g", arg: 1, scope: !6467, file: !608, line: 1256, type: !1386)
!6471 = !DILocation(line: 1256, column: 24, scope: !6467)
!6472 = !DILocalVariable(name: "uid", arg: 2, scope: !6467, file: !608, line: 1256, type: !6)
!6473 = !DILocation(line: 1256, column: 36, scope: !6467)
!6474 = !DILocation(line: 1258, column: 19, scope: !6467)
!6475 = !DILocation(line: 1258, column: 3, scope: !6467)
!6476 = !DILocation(line: 1258, column: 6, scope: !6467)
!6477 = !DILocation(line: 1258, column: 13, scope: !6467)
!6478 = !DILocation(line: 1258, column: 17, scope: !6467)
!6479 = !DILocation(line: 1259, column: 1, scope: !6467)
!6480 = distinct !DISubprogram(name: "is_gimple_call", scope: !608, file: !608, line: 1870, type: !5637, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6481 = !DILocalVariable(name: "gs", arg: 1, scope: !6480, file: !608, line: 1870, type: !5454)
!6482 = !DILocation(line: 1870, column: 30, scope: !6480)
!6483 = !DILocation(line: 1872, column: 23, scope: !6480)
!6484 = !DILocation(line: 1872, column: 10, scope: !6480)
!6485 = !DILocation(line: 1872, column: 27, scope: !6480)
!6486 = !DILocation(line: 1872, column: 3, scope: !6480)
!6487 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !608, file: !608, line: 1477, type: !5637, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6488 = !DILocalVariable(name: "stmt", arg: 1, scope: !6487, file: !608, line: 1477, type: !5454)
!6489 = !DILocation(line: 1477, column: 39, scope: !6487)
!6490 = !DILocation(line: 1479, column: 27, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6487, file: !608, line: 1479, column: 7)
!6492 = !DILocation(line: 1479, column: 7, scope: !6491)
!6493 = !DILocation(line: 1479, column: 7, scope: !6487)
!6494 = !DILocation(line: 1480, column: 12, scope: !6491)
!6495 = !DILocation(line: 1480, column: 18, scope: !6491)
!6496 = !DILocation(line: 1480, column: 25, scope: !6491)
!6497 = !DILocation(line: 1480, column: 5, scope: !6491)
!6498 = !DILocation(line: 1482, column: 5, scope: !6491)
!6499 = !DILocation(line: 1483, column: 1, scope: !6487)
!6500 = distinct !DISubprogram(name: "add_to_exp_gen", scope: !3, file: !3, line: 3783, type: !6501, scopeLine: 3784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6501 = !DISubroutineType(types: !6502)
!6502 = !{null, !1838, !1123}
!6503 = !DILocalVariable(name: "block", arg: 1, scope: !6500, file: !3, line: 3783, type: !1838)
!6504 = !DILocation(line: 3783, column: 29, scope: !6500)
!6505 = !DILocalVariable(name: "op", arg: 2, scope: !6500, file: !3, line: 3783, type: !1123)
!6506 = !DILocation(line: 3783, column: 41, scope: !6500)
!6507 = !DILocation(line: 3785, column: 8, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 3785, column: 7)
!6509 = !DILocation(line: 3785, column: 7, scope: !6500)
!6510 = !DILocalVariable(name: "result", scope: !6511, file: !3, line: 3787, type: !1112)
!6511 = distinct !DILexicalBlock(scope: !6508, file: !3, line: 3786, column: 5)
!6512 = !DILocation(line: 3787, column: 16, scope: !6511)
!6513 = !DILocation(line: 3788, column: 11, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6511, file: !3, line: 3788, column: 11)
!6515 = !DILocation(line: 3788, column: 26, scope: !6514)
!6516 = !DILocation(line: 3788, column: 38, scope: !6514)
!6517 = !DILocation(line: 3788, column: 64, scope: !6514)
!6518 = !DILocation(line: 3788, column: 41, scope: !6514)
!6519 = !DILocation(line: 3788, column: 11, scope: !6511)
!6520 = !DILocation(line: 3789, column: 2, scope: !6514)
!6521 = !DILocation(line: 3790, column: 44, scope: !6511)
!6522 = !DILocation(line: 3790, column: 16, scope: !6511)
!6523 = !DILocation(line: 3790, column: 14, scope: !6511)
!6524 = !DILocation(line: 3791, column: 37, scope: !6511)
!6525 = !DILocation(line: 3791, column: 54, scope: !6511)
!6526 = !DILocation(line: 3791, column: 7, scope: !6511)
!6527 = !DILocation(line: 3792, column: 5, scope: !6511)
!6528 = !DILocation(line: 3793, column: 1, scope: !6500)
!6529 = distinct !DISubprogram(name: "can_value_number_call", scope: !3, file: !3, line: 2639, type: !6530, scopeLine: 2640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6530 = !DISubroutineType(types: !6531)
!6531 = !{!1236, !1386}
!6532 = !DILocalVariable(name: "stmt", arg: 1, scope: !6529, file: !3, line: 2639, type: !1386)
!6533 = !DILocation(line: 2639, column: 31, scope: !6529)
!6534 = !DILocation(line: 2641, column: 26, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 2641, column: 7)
!6536 = !DILocation(line: 2641, column: 7, scope: !6535)
!6537 = !DILocation(line: 2641, column: 32, scope: !6535)
!6538 = !DILocation(line: 2641, column: 7, scope: !6529)
!6539 = !DILocation(line: 2642, column: 5, scope: !6535)
!6540 = !DILocation(line: 2643, column: 3, scope: !6529)
!6541 = !DILocation(line: 2644, column: 1, scope: !6529)
!6542 = distinct !DISubprogram(name: "gimple_expr_type", scope: !608, file: !608, line: 4366, type: !5759, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6543 = !DILocalVariable(name: "stmt", arg: 1, scope: !6542, file: !608, line: 4366, type: !5454)
!6544 = !DILocation(line: 4366, column: 32, scope: !6542)
!6545 = !DILocalVariable(name: "code", scope: !6542, file: !608, line: 4368, type: !612)
!6546 = !DILocation(line: 4368, column: 20, scope: !6542)
!6547 = !DILocation(line: 4368, column: 40, scope: !6542)
!6548 = !DILocation(line: 4368, column: 27, scope: !6542)
!6549 = !DILocation(line: 4370, column: 7, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6542, file: !608, line: 4370, column: 7)
!6551 = !DILocation(line: 4370, column: 12, scope: !6550)
!6552 = !DILocation(line: 4370, column: 29, scope: !6550)
!6553 = !DILocation(line: 4370, column: 32, scope: !6550)
!6554 = !DILocation(line: 4370, column: 37, scope: !6550)
!6555 = !DILocation(line: 4370, column: 7, scope: !6542)
!6556 = !DILocalVariable(name: "type", scope: !6557, file: !608, line: 4372, type: !1123)
!6557 = distinct !DILexicalBlock(scope: !6550, file: !608, line: 4371, column: 5)
!6558 = !DILocation(line: 4372, column: 12, scope: !6557)
!6559 = !DILocation(line: 4377, column: 11, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6557, file: !608, line: 4377, column: 11)
!6561 = !DILocation(line: 4377, column: 16, scope: !6560)
!6562 = !DILocation(line: 4377, column: 11, scope: !6557)
!6563 = !DILocation(line: 4378, column: 34, scope: !6560)
!6564 = !DILocation(line: 4378, column: 9, scope: !6560)
!6565 = !DILocation(line: 4378, column: 7, scope: !6560)
!6566 = !DILocation(line: 4378, column: 2, scope: !6560)
!6567 = !DILocation(line: 4380, column: 34, scope: !6560)
!6568 = !DILocation(line: 4380, column: 10, scope: !6560)
!6569 = !DILocation(line: 4380, column: 2, scope: !6560)
!6570 = !DILocation(line: 4383, column: 13, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6560, file: !608, line: 4381, column: 4)
!6572 = !DILocation(line: 4383, column: 11, scope: !6571)
!6573 = !DILocation(line: 4384, column: 6, scope: !6571)
!6574 = !DILocation(line: 4388, column: 13, scope: !6571)
!6575 = !DILocation(line: 4388, column: 11, scope: !6571)
!6576 = !DILocation(line: 4389, column: 6, scope: !6571)
!6577 = !DILocation(line: 4391, column: 14, scope: !6557)
!6578 = !DILocation(line: 4391, column: 7, scope: !6557)
!6579 = !DILocation(line: 4393, column: 12, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6550, file: !608, line: 4393, column: 12)
!6581 = !DILocation(line: 4393, column: 17, scope: !6580)
!6582 = !DILocation(line: 4393, column: 12, scope: !6550)
!6583 = !DILocation(line: 4394, column: 12, scope: !6580)
!6584 = !DILocation(line: 4394, column: 5, scope: !6580)
!6585 = !DILocation(line: 4396, column: 12, scope: !6580)
!6586 = !DILocation(line: 4396, column: 5, scope: !6580)
!6587 = !DILocation(line: 4397, column: 1, scope: !6542)
!6588 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_free", scope: !2415, file: !2415, line: 84, type: !6589, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6589 = !DISubroutineType(types: !6590)
!6590 = !{null, !6591}
!6591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2438, size: 64)
!6592 = !DILocalVariable(name: "vec_", arg: 1, scope: !6588, file: !2415, line: 84, type: !6591)
!6593 = !DILocation(line: 84, column: 1, scope: !6588)
!6594 = !DILocation(line: 84, column: 1, scope: !6595)
!6595 = distinct !DILexicalBlock(scope: !6588, file: !2415, line: 84, column: 1)
!6596 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !608, file: !608, line: 1815, type: !6597, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6597 = !DISubroutineType(types: !6598)
!6598 = !{!140, !5454}
!6599 = !DILocalVariable(name: "gs", arg: 1, scope: !6596, file: !608, line: 1815, type: !5454)
!6600 = !DILocation(line: 1815, column: 38, scope: !6596)
!6601 = !DILocalVariable(name: "code", scope: !6596, file: !608, line: 1817, type: !140)
!6602 = !DILocation(line: 1817, column: 18, scope: !6596)
!6603 = !DILocation(line: 1820, column: 28, scope: !6596)
!6604 = !DILocation(line: 1820, column: 10, scope: !6596)
!6605 = !DILocation(line: 1820, column: 8, scope: !6596)
!6606 = !DILocation(line: 1821, column: 29, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6596, file: !608, line: 1821, column: 7)
!6608 = !DILocation(line: 1821, column: 7, scope: !6607)
!6609 = !DILocation(line: 1821, column: 35, scope: !6607)
!6610 = !DILocation(line: 1821, column: 7, scope: !6596)
!6611 = !DILocation(line: 1822, column: 12, scope: !6607)
!6612 = !DILocation(line: 1822, column: 10, scope: !6607)
!6613 = !DILocation(line: 1822, column: 5, scope: !6607)
!6614 = !DILocation(line: 1824, column: 10, scope: !6596)
!6615 = !DILocation(line: 1824, column: 3, scope: !6596)
!6616 = distinct !DISubprogram(name: "gimple_num_ops", scope: !608, file: !608, line: 1596, type: !5472, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6617 = !DILocalVariable(name: "gs", arg: 1, scope: !6616, file: !608, line: 1596, type: !5454)
!6618 = !DILocation(line: 1596, column: 30, scope: !6616)
!6619 = !DILocation(line: 1598, column: 10, scope: !6616)
!6620 = !DILocation(line: 1598, column: 14, scope: !6616)
!6621 = !DILocation(line: 1598, column: 21, scope: !6616)
!6622 = !DILocation(line: 1598, column: 3, scope: !6616)
!6623 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !608, file: !608, line: 1727, type: !5759, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6624 = !DILocalVariable(name: "gs", arg: 1, scope: !6623, file: !608, line: 1727, type: !5454)
!6625 = !DILocation(line: 1727, column: 34, scope: !6623)
!6626 = !DILocation(line: 1730, column: 21, scope: !6623)
!6627 = !DILocation(line: 1730, column: 10, scope: !6623)
!6628 = !DILocation(line: 1730, column: 3, scope: !6623)
!6629 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !608, file: !608, line: 1759, type: !5759, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6630 = !DILocalVariable(name: "gs", arg: 1, scope: !6629, file: !608, line: 1759, type: !5454)
!6631 = !DILocation(line: 1759, column: 34, scope: !6629)
!6632 = !DILocation(line: 1763, column: 23, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6629, file: !608, line: 1763, column: 7)
!6634 = !DILocation(line: 1763, column: 7, scope: !6633)
!6635 = !DILocation(line: 1763, column: 27, scope: !6633)
!6636 = !DILocation(line: 1763, column: 7, scope: !6629)
!6637 = !DILocation(line: 1764, column: 23, scope: !6633)
!6638 = !DILocation(line: 1764, column: 12, scope: !6633)
!6639 = !DILocation(line: 1764, column: 5, scope: !6633)
!6640 = !DILocation(line: 1766, column: 5, scope: !6633)
!6641 = !DILocation(line: 1767, column: 1, scope: !6629)
!6642 = distinct !DISubprogram(name: "gimple_phi_result", scope: !608, file: !608, line: 3071, type: !5759, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6643 = !DILocalVariable(name: "gs", arg: 1, scope: !6642, file: !608, line: 3071, type: !5454)
!6644 = !DILocation(line: 3071, column: 33, scope: !6642)
!6645 = !DILocation(line: 3074, column: 10, scope: !6642)
!6646 = !DILocation(line: 3074, column: 14, scope: !6642)
!6647 = !DILocation(line: 3074, column: 25, scope: !6642)
!6648 = !DILocation(line: 3074, column: 3, scope: !6642)
!6649 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !5481, file: !5481, line: 450, type: !6650, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6650 = !DISubroutineType(types: !6651)
!6651 = !{!1123, !1386, !1531}
!6652 = !DILocalVariable(name: "gs", arg: 1, scope: !6649, file: !5481, line: 450, type: !1386)
!6653 = !DILocation(line: 450, column: 28, scope: !6649)
!6654 = !DILocalVariable(name: "index", arg: 2, scope: !6649, file: !5481, line: 450, type: !1531)
!6655 = !DILocation(line: 450, column: 39, scope: !6649)
!6656 = !DILocalVariable(name: "pd", scope: !6649, file: !5481, line: 452, type: !5625)
!6657 = !DILocation(line: 452, column: 21, scope: !6649)
!6658 = !DILocation(line: 452, column: 42, scope: !6649)
!6659 = !DILocation(line: 452, column: 46, scope: !6649)
!6660 = !DILocation(line: 452, column: 26, scope: !6649)
!6661 = !DILocation(line: 453, column: 29, scope: !6649)
!6662 = !DILocation(line: 453, column: 33, scope: !6649)
!6663 = !DILocation(line: 453, column: 10, scope: !6649)
!6664 = !DILocation(line: 453, column: 3, scope: !6649)
!6665 = distinct !DISubprogram(name: "bb_seq", scope: !608, file: !608, line: 237, type: !6666, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6666 = !DISubroutineType(types: !6667)
!6667 = !{!1376, !6668}
!6668 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1044, line: 112, baseType: !6669)
!6669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6670, size: 64)
!6670 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1351)
!6671 = !DILocalVariable(name: "bb", arg: 1, scope: !6665, file: !608, line: 237, type: !6668)
!6672 = !DILocation(line: 237, column: 27, scope: !6665)
!6673 = !DILocation(line: 239, column: 13, scope: !6665)
!6674 = !DILocation(line: 239, column: 17, scope: !6665)
!6675 = !DILocation(line: 239, column: 23, scope: !6665)
!6676 = !DILocation(line: 239, column: 33, scope: !6665)
!6677 = !DILocation(line: 239, column: 36, scope: !6665)
!6678 = !DILocation(line: 239, column: 40, scope: !6665)
!6679 = !DILocation(line: 239, column: 43, scope: !6665)
!6680 = !DILocation(line: 239, column: 10, scope: !6665)
!6681 = !DILocation(line: 239, column: 53, scope: !6665)
!6682 = !DILocation(line: 239, column: 57, scope: !6665)
!6683 = !DILocation(line: 239, column: 60, scope: !6665)
!6684 = !DILocation(line: 239, column: 68, scope: !6665)
!6685 = !DILocation(line: 239, column: 3, scope: !6665)
!6686 = distinct !DISubprogram(name: "gimple_seq_first", scope: !608, file: !608, line: 159, type: !6687, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6687 = !DISubroutineType(types: !6688)
!6688 = !{!1381, !6689}
!6689 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1044, line: 67, baseType: !6690)
!6690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6691, size: 64)
!6691 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1378)
!6692 = !DILocalVariable(name: "s", arg: 1, scope: !6686, file: !608, line: 159, type: !6689)
!6693 = !DILocation(line: 159, column: 36, scope: !6686)
!6694 = !DILocation(line: 161, column: 10, scope: !6686)
!6695 = !DILocation(line: 161, column: 14, scope: !6686)
!6696 = !DILocation(line: 161, column: 17, scope: !6686)
!6697 = !DILocation(line: 161, column: 3, scope: !6686)
!6698 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !608, file: !608, line: 1966, type: !5759, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6699 = !DILocalVariable(name: "gs", arg: 1, scope: !6698, file: !608, line: 1966, type: !5454)
!6700 = !DILocation(line: 1966, column: 39, scope: !6698)
!6701 = !DILocalVariable(name: "fn", scope: !6698, file: !608, line: 1968, type: !1123)
!6702 = !DILocation(line: 1968, column: 8, scope: !6698)
!6703 = !DILocation(line: 1968, column: 29, scope: !6698)
!6704 = !DILocation(line: 1968, column: 13, scope: !6698)
!6705 = !DILocalVariable(name: "type", scope: !6698, file: !608, line: 1969, type: !1123)
!6706 = !DILocation(line: 1969, column: 8, scope: !6698)
!6707 = !DILocation(line: 1969, column: 15, scope: !6698)
!6708 = !DILocation(line: 1972, column: 10, scope: !6698)
!6709 = !DILocation(line: 1972, column: 8, scope: !6698)
!6710 = !DILocation(line: 1976, column: 10, scope: !6698)
!6711 = !DILocation(line: 1976, column: 3, scope: !6698)
!6712 = distinct !DISubprogram(name: "gimple_call_fn", scope: !608, file: !608, line: 1911, type: !5759, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6713 = !DILocalVariable(name: "gs", arg: 1, scope: !6712, file: !608, line: 1911, type: !5454)
!6714 = !DILocation(line: 1911, column: 30, scope: !6712)
!6715 = !DILocation(line: 1914, column: 21, scope: !6712)
!6716 = !DILocation(line: 1914, column: 10, scope: !6712)
!6717 = !DILocation(line: 1914, column: 3, scope: !6712)
!6718 = distinct !DISubprogram(name: "gimple_op", scope: !608, file: !608, line: 1631, type: !6719, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6719 = !DISubroutineType(types: !6720)
!6720 = !{!1123, !5454, !6}
!6721 = !DILocalVariable(name: "gs", arg: 1, scope: !6718, file: !608, line: 1631, type: !5454)
!6722 = !DILocation(line: 1631, column: 25, scope: !6718)
!6723 = !DILocalVariable(name: "i", arg: 2, scope: !6718, file: !608, line: 1631, type: !6)
!6724 = !DILocation(line: 1631, column: 38, scope: !6718)
!6725 = !DILocation(line: 1633, column: 23, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6718, file: !608, line: 1633, column: 7)
!6727 = !DILocation(line: 1633, column: 7, scope: !6726)
!6728 = !DILocation(line: 1633, column: 7, scope: !6718)
!6729 = !DILocation(line: 1638, column: 26, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6726, file: !608, line: 1634, column: 5)
!6731 = !DILocation(line: 1638, column: 14, scope: !6730)
!6732 = !DILocation(line: 1638, column: 50, scope: !6730)
!6733 = !DILocation(line: 1638, column: 7, scope: !6730)
!6734 = !DILocation(line: 1641, column: 5, scope: !6726)
!6735 = !DILocation(line: 1642, column: 1, scope: !6718)
!6736 = distinct !DISubprogram(name: "gimple_ops", scope: !608, file: !608, line: 1614, type: !6737, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6737 = !DISubroutineType(types: !6738)
!6738 = !{!1420, !1386}
!6739 = !DILocalVariable(name: "gs", arg: 1, scope: !6736, file: !608, line: 1614, type: !1386)
!6740 = !DILocation(line: 1614, column: 20, scope: !6736)
!6741 = !DILocalVariable(name: "off", scope: !6736, file: !608, line: 1616, type: !1531)
!6742 = !DILocation(line: 1616, column: 10, scope: !6736)
!6743 = !DILocation(line: 1621, column: 56, scope: !6736)
!6744 = !DILocation(line: 1621, column: 28, scope: !6736)
!6745 = !DILocation(line: 1621, column: 9, scope: !6736)
!6746 = !DILocation(line: 1621, column: 7, scope: !6736)
!6747 = !DILocation(line: 1622, column: 3, scope: !6736)
!6748 = !DILocation(line: 1624, column: 29, scope: !6736)
!6749 = !DILocation(line: 1624, column: 20, scope: !6736)
!6750 = !DILocation(line: 1624, column: 34, scope: !6736)
!6751 = !DILocation(line: 1624, column: 32, scope: !6736)
!6752 = !DILocation(line: 1624, column: 10, scope: !6736)
!6753 = !DILocation(line: 1624, column: 3, scope: !6736)
!6754 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !608, file: !608, line: 1073, type: !6755, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6755 = !DISubroutineType(types: !6756)
!6756 = !{!809, !1386}
!6757 = !DILocalVariable(name: "gs", arg: 1, scope: !6754, file: !608, line: 1073, type: !1386)
!6758 = !DILocation(line: 1073, column: 36, scope: !6754)
!6759 = !DILocation(line: 1075, column: 37, scope: !6754)
!6760 = !DILocation(line: 1075, column: 24, scope: !6754)
!6761 = !DILocation(line: 1075, column: 10, scope: !6754)
!6762 = !DILocation(line: 1075, column: 3, scope: !6754)
!6763 = distinct !DISubprogram(name: "gss_for_code", scope: !608, file: !608, line: 1061, type: !6764, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6764 = !DISubroutineType(types: !6765)
!6765 = !{!809, !612}
!6766 = !DILocalVariable(name: "code", arg: 1, scope: !6763, file: !608, line: 1061, type: !612)
!6767 = !DILocation(line: 1061, column: 32, scope: !6763)
!6768 = !DILocation(line: 1066, column: 24, scope: !6763)
!6769 = !DILocation(line: 1066, column: 10, scope: !6763)
!6770 = !DILocation(line: 1066, column: 3, scope: !6763)
!6771 = distinct !DISubprogram(name: "gimple_expr_code", scope: !608, file: !608, line: 1438, type: !6597, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6772 = !DILocalVariable(name: "stmt", arg: 1, scope: !6771, file: !608, line: 1438, type: !5454)
!6773 = !DILocation(line: 1438, column: 32, scope: !6771)
!6774 = !DILocalVariable(name: "code", scope: !6771, file: !608, line: 1440, type: !612)
!6775 = !DILocation(line: 1440, column: 20, scope: !6771)
!6776 = !DILocation(line: 1440, column: 40, scope: !6771)
!6777 = !DILocation(line: 1440, column: 27, scope: !6771)
!6778 = !DILocation(line: 1441, column: 7, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6771, file: !608, line: 1441, column: 7)
!6780 = !DILocation(line: 1441, column: 12, scope: !6779)
!6781 = !DILocation(line: 1441, column: 29, scope: !6779)
!6782 = !DILocation(line: 1441, column: 32, scope: !6779)
!6783 = !DILocation(line: 1441, column: 37, scope: !6779)
!6784 = !DILocation(line: 1441, column: 7, scope: !6771)
!6785 = !DILocation(line: 1442, column: 29, scope: !6779)
!6786 = !DILocation(line: 1442, column: 35, scope: !6779)
!6787 = !DILocation(line: 1442, column: 42, scope: !6779)
!6788 = !DILocation(line: 1442, column: 5, scope: !6779)
!6789 = !DILocation(line: 1443, column: 12, scope: !6790)
!6790 = distinct !DILexicalBlock(scope: !6779, file: !608, line: 1443, column: 12)
!6791 = !DILocation(line: 1443, column: 17, scope: !6790)
!6792 = !DILocation(line: 1443, column: 12, scope: !6779)
!6793 = !DILocation(line: 1444, column: 5, scope: !6790)
!6794 = !DILocation(line: 1446, column: 5, scope: !6790)
!6795 = !DILocation(line: 1448, column: 5, scope: !6771)
!6796 = !DILocation(line: 1450, column: 1, scope: !6771)
!6797 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !608, file: !608, line: 1686, type: !6798, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6798 = !DISubroutineType(types: !6799)
!6799 = !{!835, !140}
!6800 = !DILocalVariable(name: "code", arg: 1, scope: !6797, file: !608, line: 1686, type: !140)
!6801 = !DILocation(line: 1686, column: 38, scope: !6797)
!6802 = !DILocation(line: 1688, column: 63, scope: !6797)
!6803 = !DILocation(line: 1688, column: 34, scope: !6797)
!6804 = !DILocation(line: 1688, column: 10, scope: !6797)
!6805 = !DILocation(line: 1688, column: 3, scope: !6797)
!6806 = distinct !DISubprogram(name: "ei_cond", scope: !349, file: !349, line: 771, type: !6807, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6807 = !DISubroutineType(types: !6808)
!6808 = !{!1236, !2506, !6809}
!6809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!6810 = !DILocalVariable(name: "ei", arg: 1, scope: !6806, file: !349, line: 771, type: !2506)
!6811 = !DILocation(line: 771, column: 24, scope: !6806)
!6812 = !DILocalVariable(name: "p", arg: 2, scope: !6806, file: !349, line: 771, type: !6809)
!6813 = !DILocation(line: 771, column: 34, scope: !6806)
!6814 = !DILocation(line: 773, column: 8, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6806, file: !349, line: 773, column: 7)
!6816 = !DILocation(line: 773, column: 7, scope: !6806)
!6817 = !DILocation(line: 775, column: 12, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6815, file: !349, line: 774, column: 5)
!6819 = !DILocation(line: 775, column: 8, scope: !6818)
!6820 = !DILocation(line: 775, column: 10, scope: !6818)
!6821 = !DILocation(line: 776, column: 7, scope: !6818)
!6822 = !DILocation(line: 780, column: 8, scope: !6823)
!6823 = distinct !DILexicalBlock(scope: !6815, file: !349, line: 779, column: 5)
!6824 = !DILocation(line: 780, column: 10, scope: !6823)
!6825 = !DILocation(line: 781, column: 7, scope: !6823)
!6826 = !DILocation(line: 783, column: 1, scope: !6806)
!6827 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !349, file: !349, line: 281, type: !6828, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6828 = !DISubroutineType(types: !6829)
!6829 = !{!1838, !6830, !6}
!6830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6831, size: 64)
!6831 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1846)
!6832 = !DILocalVariable(name: "vec_", arg: 1, scope: !6827, file: !349, line: 281, type: !6830)
!6833 = !DILocation(line: 281, column: 1, scope: !6827)
!6834 = !DILocalVariable(name: "ix_", arg: 2, scope: !6827, file: !349, line: 281, type: !6)
!6835 = !DILocation(line: 0, scope: !6827)
!6836 = distinct !DISubprogram(name: "compute_antic_aux", scope: !3, file: !3, line: 2233, type: !6837, scopeLine: 2234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!6837 = !DISubroutineType(types: !6838)
!6838 = !{!1236, !1838, !1236}
!6839 = !DILocalVariable(name: "block", arg: 1, scope: !6836, file: !3, line: 2233, type: !1838)
!6840 = !DILocation(line: 2233, column: 32, scope: !6836)
!6841 = !DILocalVariable(name: "block_has_abnormal_pred_edge", arg: 2, scope: !6836, file: !3, line: 2233, type: !1236)
!6842 = !DILocation(line: 2233, column: 44, scope: !6836)
!6843 = !DILocalVariable(name: "changed", scope: !6836, file: !3, line: 2235, type: !1236)
!6844 = !DILocation(line: 2235, column: 8, scope: !6836)
!6845 = !DILocalVariable(name: "S", scope: !6836, file: !3, line: 2236, type: !1038)
!6846 = !DILocation(line: 2236, column: 16, scope: !6836)
!6847 = !DILocalVariable(name: "old", scope: !6836, file: !3, line: 2236, type: !1038)
!6848 = !DILocation(line: 2236, column: 19, scope: !6836)
!6849 = !DILocalVariable(name: "ANTIC_OUT", scope: !6836, file: !3, line: 2236, type: !1038)
!6850 = !DILocation(line: 2236, column: 24, scope: !6836)
!6851 = !DILocalVariable(name: "bi", scope: !6836, file: !3, line: 2237, type: !3079)
!6852 = !DILocation(line: 2237, column: 19, scope: !6836)
!6853 = !DILocalVariable(name: "bii", scope: !6836, file: !3, line: 2238, type: !6)
!6854 = !DILocation(line: 2238, column: 16, scope: !6836)
!6855 = !DILocalVariable(name: "e", scope: !6836, file: !3, line: 2239, type: !1366)
!6856 = !DILocation(line: 2239, column: 8, scope: !6836)
!6857 = !DILocalVariable(name: "ei", scope: !6836, file: !3, line: 2240, type: !2506)
!6858 = !DILocation(line: 2240, column: 17, scope: !6836)
!6859 = !DILocation(line: 2242, column: 23, scope: !6836)
!6860 = !DILocation(line: 2242, column: 19, scope: !6836)
!6861 = !DILocation(line: 2242, column: 7, scope: !6836)
!6862 = !DILocation(line: 2243, column: 3, scope: !6836)
!6863 = !DILocation(line: 2243, column: 22, scope: !6836)
!6864 = !DILocation(line: 2247, column: 7, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2247, column: 7)
!6866 = !DILocation(line: 2247, column: 7, scope: !6836)
!6867 = !DILocation(line: 2248, column: 5, scope: !6865)
!6868 = !DILocation(line: 2250, column: 9, scope: !6836)
!6869 = !DILocation(line: 2250, column: 7, scope: !6836)
!6870 = !DILocation(line: 2251, column: 15, scope: !6836)
!6871 = !DILocation(line: 2251, column: 13, scope: !6836)
!6872 = !DILocation(line: 2254, column: 7, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2254, column: 7)
!6874 = !DILocation(line: 2254, column: 33, scope: !6873)
!6875 = !DILocation(line: 2254, column: 7, scope: !6836)
!6876 = !DILocation(line: 2258, column: 27, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6873, file: !3, line: 2258, column: 12)
!6878 = !DILocation(line: 2258, column: 12, scope: !6877)
!6879 = !DILocation(line: 2258, column: 12, scope: !6873)
!6880 = !DILocalVariable(name: "succ_bb", scope: !6881, file: !3, line: 2260, type: !1838)
!6881 = distinct !DILexicalBlock(scope: !6877, file: !3, line: 2259, column: 5)
!6882 = !DILocation(line: 2260, column: 19, scope: !6881)
!6883 = !DILocation(line: 2260, column: 42, scope: !6881)
!6884 = !DILocation(line: 2260, column: 29, scope: !6881)
!6885 = !DILocation(line: 2279, column: 42, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6881, file: !3, line: 2279, column: 11)
!6887 = !DILocation(line: 2279, column: 53, scope: !6886)
!6888 = !DILocation(line: 2280, column: 6, scope: !6886)
!6889 = !DILocation(line: 2280, column: 13, scope: !6886)
!6890 = !DILocation(line: 2279, column: 12, scope: !6886)
!6891 = !DILocation(line: 2279, column: 11, scope: !6881)
!6892 = !DILocation(line: 2282, column: 12, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6886, file: !3, line: 2281, column: 2)
!6894 = !DILocation(line: 2283, column: 4, scope: !6893)
!6895 = !DILocation(line: 2285, column: 5, scope: !6881)
!6896 = !DILocalVariable(name: "worklist", scope: !6897, file: !3, line: 2291, type: !2526)
!6897 = distinct !DILexicalBlock(scope: !6877, file: !3, line: 2290, column: 5)
!6898 = !DILocation(line: 2291, column: 32, scope: !6897)
!6899 = !DILocalVariable(name: "i", scope: !6897, file: !3, line: 2292, type: !1531)
!6900 = !DILocation(line: 2292, column: 14, scope: !6897)
!6901 = !DILocalVariable(name: "bprime", scope: !6897, file: !3, line: 2293, type: !1838)
!6902 = !DILocation(line: 2293, column: 19, scope: !6897)
!6903 = !DILocalVariable(name: "first", scope: !6897, file: !3, line: 2293, type: !1838)
!6904 = !DILocation(line: 2293, column: 27, scope: !6897)
!6905 = !DILocation(line: 2295, column: 18, scope: !6897)
!6906 = !DILocation(line: 2295, column: 16, scope: !6897)
!6907 = !DILocation(line: 2296, column: 7, scope: !6908)
!6908 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2296, column: 7)
!6909 = !DILocation(line: 2296, column: 7, scope: !6910)
!6910 = distinct !DILexicalBlock(scope: !6908, file: !3, line: 2296, column: 7)
!6911 = !DILocation(line: 2298, column: 9, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6913, file: !3, line: 2298, column: 8)
!6913 = distinct !DILexicalBlock(scope: !6910, file: !3, line: 2297, column: 2)
!6914 = !DILocation(line: 2299, column: 8, scope: !6912)
!6915 = !DILocation(line: 2299, column: 11, scope: !6912)
!6916 = !DILocation(line: 2298, column: 8, scope: !6913)
!6917 = !DILocation(line: 2300, column: 14, scope: !6912)
!6918 = !DILocation(line: 2300, column: 17, scope: !6912)
!6919 = !DILocation(line: 2300, column: 12, scope: !6912)
!6920 = !DILocation(line: 2300, column: 6, scope: !6912)
!6921 = !DILocation(line: 2301, column: 13, scope: !6922)
!6922 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 2301, column: 13)
!6923 = !DILocation(line: 2301, column: 13, scope: !6912)
!6924 = !DILocation(line: 2302, column: 6, scope: !6922)
!6925 = !DILocation(line: 2303, column: 2, scope: !6913)
!6926 = distinct !{!6926, !6907, !6927}
!6927 = !DILocation(line: 2303, column: 2, scope: !6908)
!6928 = !DILocation(line: 2306, column: 12, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2306, column: 11)
!6930 = !DILocation(line: 2306, column: 11, scope: !6897)
!6931 = !DILocation(line: 2308, column: 13, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6929, file: !3, line: 2307, column: 2)
!6933 = !DILocation(line: 2308, column: 29, scope: !6932)
!6934 = !DILocation(line: 2308, column: 36, scope: !6932)
!6935 = !DILocation(line: 2308, column: 4, scope: !6932)
!6936 = !DILocation(line: 2309, column: 4, scope: !6932)
!6937 = !DILocation(line: 2309, column: 23, scope: !6932)
!6938 = !DILocation(line: 2310, column: 4, scope: !6932)
!6939 = !DILocation(line: 2310, column: 24, scope: !6932)
!6940 = !DILocation(line: 2311, column: 12, scope: !6932)
!6941 = !DILocation(line: 2312, column: 4, scope: !6932)
!6942 = !DILocation(line: 2313, column: 4, scope: !6932)
!6943 = !DILocation(line: 2316, column: 43, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2316, column: 11)
!6945 = !DILocation(line: 2316, column: 32, scope: !6944)
!6946 = !DILocation(line: 2316, column: 12, scope: !6944)
!6947 = !DILocation(line: 2316, column: 11, scope: !6897)
!6948 = !DILocation(line: 2317, column: 21, scope: !6944)
!6949 = !DILocation(line: 2317, column: 32, scope: !6944)
!6950 = !DILocation(line: 2317, column: 50, scope: !6944)
!6951 = !DILocation(line: 2317, column: 57, scope: !6944)
!6952 = !DILocation(line: 2317, column: 2, scope: !6944)
!6953 = !DILocation(line: 2319, column: 19, scope: !6944)
!6954 = !DILocation(line: 2319, column: 30, scope: !6944)
!6955 = !DILocation(line: 2319, column: 2, scope: !6944)
!6956 = !DILocation(line: 2321, column: 14, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2321, column: 7)
!6958 = !DILocation(line: 2321, column: 12, scope: !6957)
!6959 = !DILocation(line: 2321, column: 19, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 2321, column: 7)
!6961 = !DILocation(line: 2321, column: 7, scope: !6957)
!6962 = !DILocation(line: 2323, column: 40, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6964, file: !3, line: 2323, column: 8)
!6964 = distinct !DILexicalBlock(scope: !6960, file: !3, line: 2322, column: 2)
!6965 = !DILocation(line: 2323, column: 29, scope: !6963)
!6966 = !DILocation(line: 2323, column: 9, scope: !6963)
!6967 = !DILocation(line: 2323, column: 8, scope: !6964)
!6968 = !DILocalVariable(name: "tmp", scope: !6969, file: !3, line: 2325, type: !1038)
!6969 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 2324, column: 6)
!6970 = !DILocation(line: 2325, column: 21, scope: !6969)
!6971 = !DILocation(line: 2325, column: 27, scope: !6969)
!6972 = !DILocation(line: 2326, column: 27, scope: !6969)
!6973 = !DILocation(line: 2326, column: 32, scope: !6969)
!6974 = !DILocation(line: 2326, column: 51, scope: !6969)
!6975 = !DILocation(line: 2326, column: 58, scope: !6969)
!6976 = !DILocation(line: 2326, column: 8, scope: !6969)
!6977 = !DILocation(line: 2327, column: 24, scope: !6969)
!6978 = !DILocation(line: 2327, column: 35, scope: !6969)
!6979 = !DILocation(line: 2327, column: 8, scope: !6969)
!6980 = !DILocation(line: 2328, column: 25, scope: !6969)
!6981 = !DILocation(line: 2328, column: 8, scope: !6969)
!6982 = !DILocation(line: 2329, column: 6, scope: !6969)
!6983 = !DILocation(line: 2331, column: 22, scope: !6963)
!6984 = !DILocation(line: 2331, column: 33, scope: !6963)
!6985 = !DILocation(line: 2331, column: 6, scope: !6963)
!6986 = !DILocation(line: 2332, column: 2, scope: !6964)
!6987 = !DILocation(line: 2321, column: 68, scope: !6960)
!6988 = !DILocation(line: 2321, column: 7, scope: !6960)
!6989 = distinct !{!6989, !6961, !6990}
!6990 = !DILocation(line: 2332, column: 2, scope: !6957)
!6991 = !DILocation(line: 2333, column: 7, scope: !6897)
!6992 = !DILocation(line: 2337, column: 28, scope: !6836)
!6993 = !DILocation(line: 2337, column: 39, scope: !6836)
!6994 = !DILocation(line: 2337, column: 7, scope: !6836)
!6995 = !DILocation(line: 2337, column: 5, scope: !6836)
!6996 = !DILocation(line: 2340, column: 43, scope: !6836)
!6997 = !DILocation(line: 2341, column: 8, scope: !6836)
!6998 = !DILocation(line: 2340, column: 22, scope: !6836)
!6999 = !DILocation(line: 2340, column: 3, scope: !6836)
!7000 = !DILocation(line: 2340, column: 20, scope: !6836)
!7001 = !DILocation(line: 2345, column: 3, scope: !7002)
!7002 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2345, column: 3)
!7003 = !DILocation(line: 2345, column: 3, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !7002, file: !3, line: 2345, column: 3)
!7005 = !DILocation(line: 2346, column: 35, scope: !7004)
!7006 = !DILocation(line: 2347, column: 26, scope: !7004)
!7007 = !DILocation(line: 2347, column: 7, scope: !7004)
!7008 = !DILocation(line: 2346, column: 5, scope: !7004)
!7009 = distinct !{!7009, !7001, !7010}
!7010 = !DILocation(line: 2347, column: 30, scope: !7002)
!7011 = !DILocation(line: 2349, column: 10, scope: !6836)
!7012 = !DILocation(line: 2349, column: 28, scope: !6836)
!7013 = !DILocation(line: 2349, column: 3, scope: !6836)
!7014 = !DILocation(line: 2352, column: 8, scope: !7015)
!7015 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2352, column: 7)
!7016 = !DILocation(line: 2352, column: 13, scope: !7015)
!7017 = !DILocation(line: 2352, column: 25, scope: !7015)
!7018 = !DILocation(line: 2352, column: 47, scope: !7015)
!7019 = !DILocation(line: 2352, column: 52, scope: !7015)
!7020 = !DILocation(line: 2352, column: 29, scope: !7015)
!7021 = !DILocation(line: 2352, column: 7, scope: !6836)
!7022 = !DILocation(line: 2354, column: 15, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7015, file: !3, line: 2353, column: 5)
!7024 = !DILocation(line: 2355, column: 16, scope: !7023)
!7025 = !DILocation(line: 2355, column: 32, scope: !7023)
!7026 = !DILocation(line: 2355, column: 39, scope: !7023)
!7027 = !DILocation(line: 2355, column: 7, scope: !7023)
!7028 = !DILocation(line: 2356, column: 7, scope: !7029)
!7029 = distinct !DILexicalBlock(scope: !7023, file: !3, line: 2356, column: 7)
!7030 = !DILocation(line: 2356, column: 7, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 2356, column: 7)
!7032 = !DILocation(line: 2357, column: 11, scope: !7031)
!7033 = !DILocation(line: 2357, column: 27, scope: !7031)
!7034 = !DILocation(line: 2357, column: 30, scope: !7031)
!7035 = !DILocation(line: 2357, column: 35, scope: !7031)
!7036 = !DILocation(line: 2357, column: 2, scope: !7031)
!7037 = distinct !{!7037, !7028, !7038}
!7038 = !DILocation(line: 2357, column: 40, scope: !7029)
!7039 = !DILocation(line: 2358, column: 5, scope: !7023)
!7040 = !DILocation(line: 2360, column: 16, scope: !7015)
!7041 = !DILocation(line: 2360, column: 32, scope: !7015)
!7042 = !DILocation(line: 2360, column: 39, scope: !7015)
!7043 = !DILocation(line: 2360, column: 5, scope: !7015)
!7044 = !DILocation(line: 2352, column: 68, scope: !7015)
!7045 = !DILabel(scope: !6836, name: "maybe_dump_sets", file: !3, line: 2362)
!7046 = !DILocation(line: 2362, column: 2, scope: !6836)
!7047 = !DILocation(line: 2363, column: 7, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2363, column: 7)
!7049 = !DILocation(line: 2363, column: 17, scope: !7048)
!7050 = !DILocation(line: 2363, column: 21, scope: !7048)
!7051 = !DILocation(line: 2363, column: 32, scope: !7048)
!7052 = !DILocation(line: 2363, column: 7, scope: !6836)
!7053 = !DILocation(line: 2365, column: 12, scope: !7054)
!7054 = distinct !DILexicalBlock(scope: !7055, file: !3, line: 2365, column: 11)
!7055 = distinct !DILexicalBlock(scope: !7048, file: !3, line: 2364, column: 5)
!7056 = !DILocation(line: 2365, column: 32, scope: !7054)
!7057 = !DILocation(line: 2365, column: 35, scope: !7054)
!7058 = !DILocation(line: 2365, column: 11, scope: !7055)
!7059 = !DILocation(line: 2367, column: 8, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7061, file: !3, line: 2367, column: 8)
!7061 = distinct !DILexicalBlock(scope: !7054, file: !3, line: 2366, column: 2)
!7062 = !DILocation(line: 2367, column: 8, scope: !7061)
!7063 = !DILocation(line: 2368, column: 24, scope: !7060)
!7064 = !DILocation(line: 2368, column: 35, scope: !7060)
!7065 = !DILocation(line: 2368, column: 59, scope: !7060)
!7066 = !DILocation(line: 2368, column: 66, scope: !7060)
!7067 = !DILocation(line: 2368, column: 6, scope: !7060)
!7068 = !DILocation(line: 2370, column: 22, scope: !7061)
!7069 = !DILocation(line: 2370, column: 33, scope: !7061)
!7070 = !DILocation(line: 2371, column: 8, scope: !7061)
!7071 = !DILocation(line: 2371, column: 15, scope: !7061)
!7072 = !DILocation(line: 2370, column: 4, scope: !7061)
!7073 = !DILocation(line: 2373, column: 8, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7061, file: !3, line: 2373, column: 8)
!7075 = !DILocation(line: 2373, column: 8, scope: !7061)
!7076 = !DILocation(line: 2374, column: 24, scope: !7074)
!7077 = !DILocation(line: 2374, column: 35, scope: !7074)
!7078 = !DILocation(line: 2374, column: 43, scope: !7074)
!7079 = !DILocation(line: 2374, column: 50, scope: !7074)
!7080 = !DILocation(line: 2374, column: 6, scope: !7074)
!7081 = !DILocation(line: 2375, column: 2, scope: !7061)
!7082 = !DILocation(line: 2378, column: 13, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7054, file: !3, line: 2377, column: 2)
!7084 = !DILocation(line: 2380, column: 6, scope: !7083)
!7085 = !DILocation(line: 2380, column: 13, scope: !7083)
!7086 = !DILocation(line: 2378, column: 4, scope: !7083)
!7087 = !DILocation(line: 2382, column: 5, scope: !7055)
!7088 = !DILocation(line: 2383, column: 7, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2383, column: 7)
!7090 = !DILocation(line: 2383, column: 7, scope: !6836)
!7091 = !DILocation(line: 2384, column: 22, scope: !7089)
!7092 = !DILocation(line: 2384, column: 5, scope: !7089)
!7093 = !DILocation(line: 2385, column: 7, scope: !7094)
!7094 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2385, column: 7)
!7095 = !DILocation(line: 2385, column: 7, scope: !6836)
!7096 = !DILocation(line: 2386, column: 22, scope: !7094)
!7097 = !DILocation(line: 2386, column: 5, scope: !7094)
!7098 = !DILocation(line: 2387, column: 7, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 2387, column: 7)
!7100 = !DILocation(line: 2387, column: 7, scope: !6836)
!7101 = !DILocation(line: 2388, column: 22, scope: !7099)
!7102 = !DILocation(line: 2388, column: 5, scope: !7099)
!7103 = !DILocation(line: 2389, column: 10, scope: !6836)
!7104 = !DILocation(line: 2389, column: 3, scope: !6836)
!7105 = distinct !DISubprogram(name: "compute_partial_antic_aux", scope: !3, file: !3, line: 2405, type: !6837, scopeLine: 2407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7106 = !DILocalVariable(name: "block", arg: 1, scope: !7105, file: !3, line: 2405, type: !1838)
!7107 = !DILocation(line: 2405, column: 40, scope: !7105)
!7108 = !DILocalVariable(name: "block_has_abnormal_pred_edge", arg: 2, scope: !7105, file: !3, line: 2406, type: !1236)
!7109 = !DILocation(line: 2406, column: 12, scope: !7105)
!7110 = !DILocalVariable(name: "changed", scope: !7105, file: !3, line: 2408, type: !1236)
!7111 = !DILocation(line: 2408, column: 8, scope: !7105)
!7112 = !DILocalVariable(name: "old_PA_IN", scope: !7105, file: !3, line: 2409, type: !1038)
!7113 = !DILocation(line: 2409, column: 16, scope: !7105)
!7114 = !DILocalVariable(name: "PA_OUT", scope: !7105, file: !3, line: 2410, type: !1038)
!7115 = !DILocation(line: 2410, column: 16, scope: !7105)
!7116 = !DILocalVariable(name: "e", scope: !7105, file: !3, line: 2411, type: !1366)
!7117 = !DILocation(line: 2411, column: 8, scope: !7105)
!7118 = !DILocalVariable(name: "ei", scope: !7105, file: !3, line: 2412, type: !2506)
!7119 = !DILocation(line: 2412, column: 17, scope: !7105)
!7120 = !DILocalVariable(name: "max_pa", scope: !7105, file: !3, line: 2413, type: !1061)
!7121 = !DILocation(line: 2413, column: 17, scope: !7105)
!7122 = !DILocation(line: 2413, column: 26, scope: !7105)
!7123 = !DILocation(line: 2415, column: 22, scope: !7105)
!7124 = !DILocation(line: 2415, column: 13, scope: !7105)
!7125 = !DILocation(line: 2419, column: 7, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2419, column: 7)
!7127 = !DILocation(line: 2419, column: 7, scope: !7105)
!7128 = !DILocation(line: 2420, column: 5, scope: !7126)
!7129 = !DILocation(line: 2425, column: 7, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2425, column: 7)
!7131 = !DILocation(line: 2426, column: 7, scope: !7130)
!7132 = !DILocation(line: 2426, column: 25, scope: !7130)
!7133 = !DILocation(line: 2426, column: 10, scope: !7130)
!7134 = !DILocation(line: 2427, column: 7, scope: !7130)
!7135 = !DILocation(line: 2427, column: 29, scope: !7130)
!7136 = !DILocation(line: 2427, column: 58, scope: !7130)
!7137 = !DILocation(line: 2427, column: 10, scope: !7130)
!7138 = !DILocation(line: 2427, column: 68, scope: !7130)
!7139 = !DILocation(line: 2427, column: 66, scope: !7130)
!7140 = !DILocation(line: 2425, column: 7, scope: !7105)
!7141 = !DILocation(line: 2428, column: 5, scope: !7130)
!7142 = !DILocation(line: 2430, column: 15, scope: !7105)
!7143 = !DILocation(line: 2430, column: 13, scope: !7105)
!7144 = !DILocation(line: 2431, column: 12, scope: !7105)
!7145 = !DILocation(line: 2431, column: 10, scope: !7105)
!7146 = !DILocation(line: 2434, column: 7, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2434, column: 7)
!7148 = !DILocation(line: 2434, column: 33, scope: !7147)
!7149 = !DILocation(line: 2434, column: 7, scope: !7105)
!7150 = !DILocation(line: 2442, column: 27, scope: !7151)
!7151 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 2442, column: 12)
!7152 = !DILocation(line: 2442, column: 12, scope: !7151)
!7153 = !DILocation(line: 2442, column: 12, scope: !7147)
!7154 = !DILocalVariable(name: "succ", scope: !7155, file: !3, line: 2444, type: !1838)
!7155 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 2443, column: 5)
!7156 = !DILocation(line: 2444, column: 19, scope: !7155)
!7157 = !DILocation(line: 2444, column: 39, scope: !7155)
!7158 = !DILocation(line: 2444, column: 26, scope: !7155)
!7159 = !DILocation(line: 2445, column: 31, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 2445, column: 11)
!7161 = !DILocation(line: 2445, column: 13, scope: !7160)
!7162 = !DILocation(line: 2445, column: 39, scope: !7160)
!7163 = !DILocation(line: 2445, column: 45, scope: !7160)
!7164 = !DILocation(line: 2445, column: 11, scope: !7155)
!7165 = !DILocation(line: 2446, column: 21, scope: !7160)
!7166 = !DILocation(line: 2446, column: 29, scope: !7160)
!7167 = !DILocation(line: 2446, column: 43, scope: !7160)
!7168 = !DILocation(line: 2446, column: 50, scope: !7160)
!7169 = !DILocation(line: 2446, column: 2, scope: !7160)
!7170 = !DILocation(line: 2447, column: 5, scope: !7155)
!7171 = !DILocalVariable(name: "worklist", scope: !7172, file: !3, line: 2452, type: !2526)
!7172 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 2451, column: 5)
!7173 = !DILocation(line: 2452, column: 32, scope: !7172)
!7174 = !DILocalVariable(name: "i", scope: !7172, file: !3, line: 2453, type: !1531)
!7175 = !DILocation(line: 2453, column: 14, scope: !7172)
!7176 = !DILocalVariable(name: "bprime", scope: !7172, file: !3, line: 2454, type: !1838)
!7177 = !DILocation(line: 2454, column: 19, scope: !7172)
!7178 = !DILocation(line: 2456, column: 18, scope: !7172)
!7179 = !DILocation(line: 2456, column: 16, scope: !7172)
!7180 = !DILocation(line: 2457, column: 7, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 2457, column: 7)
!7182 = !DILocation(line: 2457, column: 7, scope: !7183)
!7183 = distinct !DILexicalBlock(scope: !7181, file: !3, line: 2457, column: 7)
!7184 = !DILocation(line: 2459, column: 8, scope: !7185)
!7185 = distinct !DILexicalBlock(scope: !7186, file: !3, line: 2459, column: 8)
!7186 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 2458, column: 2)
!7187 = !DILocation(line: 2459, column: 11, scope: !7185)
!7188 = !DILocation(line: 2459, column: 17, scope: !7185)
!7189 = !DILocation(line: 2459, column: 8, scope: !7186)
!7190 = !DILocation(line: 2460, column: 6, scope: !7185)
!7191 = !DILocation(line: 2461, column: 4, scope: !7186)
!7192 = !DILocation(line: 2462, column: 2, scope: !7186)
!7193 = distinct !{!7193, !7180, !7194}
!7194 = !DILocation(line: 2462, column: 2, scope: !7181)
!7195 = !DILocation(line: 2463, column: 11, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 2463, column: 11)
!7197 = !DILocation(line: 2463, column: 46, scope: !7196)
!7198 = !DILocation(line: 2463, column: 11, scope: !7172)
!7199 = !DILocation(line: 2465, column: 11, scope: !7200)
!7200 = distinct !DILexicalBlock(scope: !7201, file: !3, line: 2465, column: 4)
!7201 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 2464, column: 2)
!7202 = !DILocation(line: 2465, column: 9, scope: !7200)
!7203 = !DILocation(line: 2465, column: 16, scope: !7204)
!7204 = distinct !DILexicalBlock(scope: !7200, file: !3, line: 2465, column: 4)
!7205 = !DILocation(line: 2465, column: 4, scope: !7200)
!7206 = !DILocalVariable(name: "i", scope: !7207, file: !3, line: 2467, type: !6)
!7207 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 2466, column: 6)
!7208 = !DILocation(line: 2467, column: 21, scope: !7207)
!7209 = !DILocalVariable(name: "bi", scope: !7207, file: !3, line: 2468, type: !3079)
!7210 = !DILocation(line: 2468, column: 24, scope: !7207)
!7211 = !DILocation(line: 2470, column: 8, scope: !7212)
!7212 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 2470, column: 8)
!7213 = !DILocation(line: 2470, column: 8, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7212, file: !3, line: 2470, column: 8)
!7215 = !DILocation(line: 2471, column: 33, scope: !7214)
!7216 = !DILocation(line: 2472, column: 31, scope: !7214)
!7217 = !DILocation(line: 2472, column: 12, scope: !7214)
!7218 = !DILocation(line: 2471, column: 3, scope: !7214)
!7219 = distinct !{!7219, !7211, !7220}
!7220 = !DILocation(line: 2472, column: 33, scope: !7212)
!7221 = !DILocation(line: 2473, column: 44, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 2473, column: 12)
!7223 = !DILocation(line: 2473, column: 33, scope: !7222)
!7224 = !DILocation(line: 2473, column: 13, scope: !7222)
!7225 = !DILocation(line: 2473, column: 12, scope: !7207)
!7226 = !DILocalVariable(name: "pa_in", scope: !7227, file: !3, line: 2475, type: !1038)
!7227 = distinct !DILexicalBlock(scope: !7222, file: !3, line: 2474, column: 3)
!7228 = !DILocation(line: 2475, column: 18, scope: !7227)
!7229 = !DILocation(line: 2475, column: 26, scope: !7227)
!7230 = !DILocation(line: 2476, column: 24, scope: !7227)
!7231 = !DILocation(line: 2476, column: 31, scope: !7227)
!7232 = !DILocation(line: 2476, column: 47, scope: !7227)
!7233 = !DILocation(line: 2476, column: 54, scope: !7227)
!7234 = !DILocation(line: 2476, column: 5, scope: !7227)
!7235 = !DILocation(line: 2477, column: 5, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7227, file: !3, line: 2477, column: 5)
!7237 = !DILocation(line: 2477, column: 5, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7236, file: !3, line: 2477, column: 5)
!7239 = !DILocation(line: 2478, column: 37, scope: !7238)
!7240 = !DILocation(line: 2479, column: 28, scope: !7238)
!7241 = !DILocation(line: 2479, column: 9, scope: !7238)
!7242 = !DILocation(line: 2478, column: 7, scope: !7238)
!7243 = distinct !{!7243, !7235, !7244}
!7244 = !DILocation(line: 2479, column: 30, scope: !7236)
!7245 = !DILocation(line: 2480, column: 22, scope: !7227)
!7246 = !DILocation(line: 2480, column: 5, scope: !7227)
!7247 = !DILocation(line: 2481, column: 3, scope: !7227)
!7248 = !DILocation(line: 2483, column: 3, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7222, file: !3, line: 2483, column: 3)
!7250 = !DILocation(line: 2483, column: 3, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 2483, column: 3)
!7252 = !DILocation(line: 2484, column: 35, scope: !7251)
!7253 = !DILocation(line: 2485, column: 26, scope: !7251)
!7254 = !DILocation(line: 2485, column: 7, scope: !7251)
!7255 = !DILocation(line: 2484, column: 5, scope: !7251)
!7256 = distinct !{!7256, !7248, !7257}
!7257 = !DILocation(line: 2485, column: 28, scope: !7249)
!7258 = !DILocation(line: 2486, column: 6, scope: !7207)
!7259 = !DILocation(line: 2465, column: 65, scope: !7204)
!7260 = !DILocation(line: 2465, column: 4, scope: !7204)
!7261 = distinct !{!7261, !7205, !7262}
!7262 = !DILocation(line: 2486, column: 6, scope: !7200)
!7263 = !DILocation(line: 2487, column: 2, scope: !7201)
!7264 = !DILocation(line: 2488, column: 7, scope: !7172)
!7265 = !DILocation(line: 2493, column: 40, scope: !7105)
!7266 = !DILocation(line: 2493, column: 48, scope: !7105)
!7267 = !DILocation(line: 2493, column: 19, scope: !7105)
!7268 = !DILocation(line: 2493, column: 3, scope: !7105)
!7269 = !DILocation(line: 2493, column: 17, scope: !7105)
!7270 = !DILocation(line: 2497, column: 20, scope: !7105)
!7271 = !DILocation(line: 2497, column: 35, scope: !7105)
!7272 = !DILocation(line: 2497, column: 43, scope: !7105)
!7273 = !DILocation(line: 2497, column: 60, scope: !7105)
!7274 = !DILocation(line: 2497, column: 3, scope: !7105)
!7275 = !DILocation(line: 2498, column: 20, scope: !7105)
!7276 = !DILocation(line: 2498, column: 35, scope: !7105)
!7277 = !DILocation(line: 2498, column: 48, scope: !7105)
!7278 = !DILocation(line: 2498, column: 65, scope: !7105)
!7279 = !DILocation(line: 2498, column: 3, scope: !7105)
!7280 = !DILocation(line: 2501, column: 31, scope: !7105)
!7281 = !DILocation(line: 2501, column: 46, scope: !7105)
!7282 = !DILocation(line: 2501, column: 3, scope: !7105)
!7283 = !DILocation(line: 2503, column: 20, scope: !7105)
!7284 = !DILocation(line: 2503, column: 35, scope: !7105)
!7285 = !DILocation(line: 2503, column: 53, scope: !7105)
!7286 = !DILocation(line: 2503, column: 3, scope: !7105)
!7287 = !DILocation(line: 2505, column: 26, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2505, column: 7)
!7289 = !DILocation(line: 2505, column: 37, scope: !7288)
!7290 = !DILocation(line: 2505, column: 8, scope: !7288)
!7291 = !DILocation(line: 2505, column: 7, scope: !7105)
!7292 = !DILocation(line: 2507, column: 15, scope: !7293)
!7293 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 2506, column: 5)
!7294 = !DILocation(line: 2508, column: 16, scope: !7293)
!7295 = !DILocation(line: 2508, column: 32, scope: !7293)
!7296 = !DILocation(line: 2508, column: 39, scope: !7293)
!7297 = !DILocation(line: 2508, column: 7, scope: !7293)
!7298 = !DILocation(line: 2509, column: 7, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7293, file: !3, line: 2509, column: 7)
!7300 = !DILocation(line: 2509, column: 7, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2509, column: 7)
!7302 = !DILocation(line: 2510, column: 11, scope: !7301)
!7303 = !DILocation(line: 2510, column: 27, scope: !7301)
!7304 = !DILocation(line: 2510, column: 30, scope: !7301)
!7305 = !DILocation(line: 2510, column: 35, scope: !7301)
!7306 = !DILocation(line: 2510, column: 2, scope: !7301)
!7307 = distinct !{!7307, !7298, !7308}
!7308 = !DILocation(line: 2510, column: 40, scope: !7299)
!7309 = !DILocation(line: 2511, column: 5, scope: !7293)
!7310 = !DILocation(line: 2513, column: 16, scope: !7288)
!7311 = !DILocation(line: 2513, column: 32, scope: !7288)
!7312 = !DILocation(line: 2513, column: 39, scope: !7288)
!7313 = !DILocation(line: 2513, column: 5, scope: !7288)
!7314 = !DILocation(line: 2505, column: 50, scope: !7288)
!7315 = !DILabel(scope: !7105, name: "maybe_dump_sets", file: !3, line: 2515)
!7316 = !DILocation(line: 2515, column: 2, scope: !7105)
!7317 = !DILocation(line: 2516, column: 7, scope: !7318)
!7318 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2516, column: 7)
!7319 = !DILocation(line: 2516, column: 17, scope: !7318)
!7320 = !DILocation(line: 2516, column: 21, scope: !7318)
!7321 = !DILocation(line: 2516, column: 32, scope: !7318)
!7322 = !DILocation(line: 2516, column: 7, scope: !7105)
!7323 = !DILocation(line: 2518, column: 11, scope: !7324)
!7324 = distinct !DILexicalBlock(scope: !7325, file: !3, line: 2518, column: 11)
!7325 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2517, column: 5)
!7326 = !DILocation(line: 2518, column: 11, scope: !7325)
!7327 = !DILocation(line: 2519, column: 20, scope: !7324)
!7328 = !DILocation(line: 2519, column: 31, scope: !7324)
!7329 = !DILocation(line: 2519, column: 49, scope: !7324)
!7330 = !DILocation(line: 2519, column: 56, scope: !7324)
!7331 = !DILocation(line: 2519, column: 2, scope: !7324)
!7332 = !DILocation(line: 2521, column: 25, scope: !7325)
!7333 = !DILocation(line: 2521, column: 36, scope: !7325)
!7334 = !DILocation(line: 2521, column: 60, scope: !7325)
!7335 = !DILocation(line: 2521, column: 67, scope: !7325)
!7336 = !DILocation(line: 2521, column: 7, scope: !7325)
!7337 = !DILocation(line: 2522, column: 5, scope: !7325)
!7338 = !DILocation(line: 2523, column: 7, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2523, column: 7)
!7340 = !DILocation(line: 2523, column: 7, scope: !7105)
!7341 = !DILocation(line: 2524, column: 22, scope: !7339)
!7342 = !DILocation(line: 2524, column: 5, scope: !7339)
!7343 = !DILocation(line: 2525, column: 7, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2525, column: 7)
!7345 = !DILocation(line: 2525, column: 7, scope: !7105)
!7346 = !DILocation(line: 2526, column: 22, scope: !7344)
!7347 = !DILocation(line: 2526, column: 5, scope: !7344)
!7348 = !DILocation(line: 2527, column: 10, scope: !7105)
!7349 = !DILocation(line: 2527, column: 3, scope: !7105)
!7350 = distinct !DISubprogram(name: "ei_end_p", scope: !349, file: !349, line: 721, type: !6136, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7351 = !DILocalVariable(name: "i", arg: 1, scope: !7350, file: !349, line: 721, type: !2506)
!7352 = !DILocation(line: 721, column: 25, scope: !7350)
!7353 = !DILocation(line: 723, column: 13, scope: !7350)
!7354 = !DILocation(line: 723, column: 22, scope: !7350)
!7355 = !DILocation(line: 723, column: 19, scope: !7350)
!7356 = !DILocation(line: 723, column: 10, scope: !7350)
!7357 = !DILocation(line: 723, column: 3, scope: !7350)
!7358 = distinct !DISubprogram(name: "single_succ_p", scope: !349, file: !349, line: 626, type: !7359, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7359 = !DISubroutineType(types: !7360)
!7360 = !{!1236, !6668}
!7361 = !DILocalVariable(name: "bb", arg: 1, scope: !7358, file: !349, line: 626, type: !6668)
!7362 = !DILocation(line: 626, column: 34, scope: !7358)
!7363 = !DILocation(line: 628, column: 10, scope: !7358)
!7364 = !DILocation(line: 628, column: 33, scope: !7358)
!7365 = !DILocation(line: 628, column: 3, scope: !7358)
!7366 = distinct !DISubprogram(name: "single_succ", scope: !349, file: !349, line: 663, type: !7367, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7367 = !DISubroutineType(types: !7368)
!7368 = !{!1838, !6668}
!7369 = !DILocalVariable(name: "bb", arg: 1, scope: !7366, file: !349, line: 663, type: !6668)
!7370 = !DILocation(line: 663, column: 32, scope: !7366)
!7371 = !DILocation(line: 665, column: 28, scope: !7366)
!7372 = !DILocation(line: 665, column: 10, scope: !7366)
!7373 = !DILocation(line: 665, column: 33, scope: !7366)
!7374 = !DILocation(line: 665, column: 3, scope: !7366)
!7375 = distinct !DISubprogram(name: "defer_or_phi_translate_block", scope: !3, file: !3, line: 2207, type: !7376, scopeLine: 2209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7376 = !DISubroutineType(types: !7377)
!7377 = !{!1236, !1038, !1038, !1838, !1838}
!7378 = !DILocalVariable(name: "dest", arg: 1, scope: !7375, file: !3, line: 2207, type: !1038)
!7379 = !DILocation(line: 2207, column: 44, scope: !7375)
!7380 = !DILocalVariable(name: "source", arg: 2, scope: !7375, file: !3, line: 2207, type: !1038)
!7381 = !DILocation(line: 2207, column: 63, scope: !7375)
!7382 = !DILocalVariable(name: "block", arg: 3, scope: !7375, file: !3, line: 2208, type: !1838)
!7383 = !DILocation(line: 2208, column: 22, scope: !7375)
!7384 = !DILocalVariable(name: "phiblock", arg: 4, scope: !7375, file: !3, line: 2208, type: !1838)
!7385 = !DILocation(line: 2208, column: 41, scope: !7375)
!7386 = !DILocation(line: 2210, column: 8, scope: !7387)
!7387 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 2210, column: 7)
!7388 = !DILocation(line: 2210, column: 7, scope: !7375)
!7389 = !DILocation(line: 2212, column: 16, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7387, file: !3, line: 2211, column: 5)
!7391 = !DILocation(line: 2212, column: 32, scope: !7390)
!7392 = !DILocation(line: 2212, column: 39, scope: !7390)
!7393 = !DILocation(line: 2212, column: 7, scope: !7390)
!7394 = !DILocation(line: 2213, column: 7, scope: !7390)
!7395 = !DILocation(line: 2213, column: 26, scope: !7390)
!7396 = !DILocation(line: 2214, column: 7, scope: !7390)
!7397 = !DILocation(line: 2214, column: 27, scope: !7390)
!7398 = !DILocation(line: 2215, column: 7, scope: !7390)
!7399 = !DILocation(line: 2218, column: 24, scope: !7387)
!7400 = !DILocation(line: 2218, column: 30, scope: !7387)
!7401 = !DILocation(line: 2218, column: 38, scope: !7387)
!7402 = !DILocation(line: 2218, column: 45, scope: !7387)
!7403 = !DILocation(line: 2218, column: 5, scope: !7387)
!7404 = !DILocation(line: 2219, column: 3, scope: !7375)
!7405 = !DILocation(line: 2220, column: 1, scope: !7375)
!7406 = distinct !DISubprogram(name: "VEC_basic_block_heap_alloc", scope: !349, file: !349, line: 283, type: !7407, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7407 = !DISubroutineType(types: !7408)
!7408 = !{!2526, !1025}
!7409 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7406, file: !349, line: 283, type: !1025)
!7410 = !DILocation(line: 283, column: 1, scope: !7406)
!7411 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !349, file: !349, line: 281, type: !7412, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7412 = !DISubroutineType(types: !7413)
!7413 = !{!2523, !7414, !1838}
!7414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1846, size: 64)
!7415 = !DILocalVariable(name: "vec_", arg: 1, scope: !7411, file: !349, line: 281, type: !7414)
!7416 = !DILocation(line: 281, column: 1, scope: !7411)
!7417 = !DILocalVariable(name: "obj_", arg: 2, scope: !7411, file: !349, line: 281, type: !1838)
!7418 = !DILocalVariable(name: "slot_", scope: !7411, file: !349, line: 281, type: !2523)
!7419 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !349, file: !349, line: 283, type: !7420, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7420 = !DISubroutineType(types: !7421)
!7421 = !{null, !7422}
!7422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2526, size: 64)
!7423 = !DILocalVariable(name: "vec_", arg: 1, scope: !7419, file: !349, line: 283, type: !7422)
!7424 = !DILocation(line: 283, column: 1, scope: !7419)
!7425 = !DILocation(line: 283, column: 1, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7419, file: !349, line: 283, column: 1)
!7427 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !608, file: !608, line: 215, type: !7428, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7428 = !DISubroutineType(types: !7429)
!7429 = !{!1236, !6689}
!7430 = !DILocalVariable(name: "s", arg: 1, scope: !7427, file: !608, line: 215, type: !6689)
!7431 = !DILocation(line: 215, column: 38, scope: !7427)
!7432 = !DILocation(line: 217, column: 10, scope: !7427)
!7433 = !DILocation(line: 217, column: 12, scope: !7427)
!7434 = !DILocation(line: 217, column: 20, scope: !7427)
!7435 = !DILocation(line: 217, column: 23, scope: !7427)
!7436 = !DILocation(line: 217, column: 26, scope: !7427)
!7437 = !DILocation(line: 217, column: 32, scope: !7427)
!7438 = !DILocation(line: 217, column: 3, scope: !7427)
!7439 = distinct !DISubprogram(name: "phi_nodes", scope: !5481, file: !5481, line: 508, type: !6666, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7440 = !DILocalVariable(name: "bb", arg: 1, scope: !7439, file: !5481, line: 508, type: !6668)
!7441 = !DILocation(line: 508, column: 30, scope: !7439)
!7442 = !DILocation(line: 510, column: 3, scope: !7439)
!7443 = !DILocation(line: 511, column: 8, scope: !7444)
!7444 = distinct !DILexicalBlock(scope: !7439, file: !5481, line: 511, column: 7)
!7445 = !DILocation(line: 511, column: 12, scope: !7444)
!7446 = !DILocation(line: 511, column: 15, scope: !7444)
!7447 = !DILocation(line: 511, column: 7, scope: !7439)
!7448 = !DILocation(line: 512, column: 5, scope: !7444)
!7449 = !DILocation(line: 513, column: 10, scope: !7439)
!7450 = !DILocation(line: 513, column: 14, scope: !7439)
!7451 = !DILocation(line: 513, column: 17, scope: !7439)
!7452 = !DILocation(line: 513, column: 25, scope: !7439)
!7453 = !DILocation(line: 513, column: 3, scope: !7439)
!7454 = !DILocation(line: 514, column: 1, scope: !7439)
!7455 = distinct !DISubprogram(name: "phi_translate_set", scope: !3, file: !3, line: 1856, type: !7456, scopeLine: 1858, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7456 = !DISubroutineType(types: !7457)
!7457 = !{null, !1038, !1038, !1838, !1838}
!7458 = !DILocalVariable(name: "dest", arg: 1, scope: !7455, file: !3, line: 1856, type: !1038)
!7459 = !DILocation(line: 1856, column: 33, scope: !7455)
!7460 = !DILocalVariable(name: "set", arg: 2, scope: !7455, file: !3, line: 1856, type: !1038)
!7461 = !DILocation(line: 1856, column: 52, scope: !7455)
!7462 = !DILocalVariable(name: "pred", arg: 3, scope: !7455, file: !3, line: 1856, type: !1838)
!7463 = !DILocation(line: 1856, column: 69, scope: !7455)
!7464 = !DILocalVariable(name: "phiblock", arg: 4, scope: !7455, file: !3, line: 1857, type: !1838)
!7465 = !DILocation(line: 1857, column: 18, scope: !7455)
!7466 = !DILocalVariable(name: "exprs", scope: !7455, file: !3, line: 1859, type: !2459)
!7467 = !DILocation(line: 1859, column: 25, scope: !7455)
!7468 = !DILocalVariable(name: "expr", scope: !7455, file: !3, line: 1860, type: !1112)
!7469 = !DILocation(line: 1860, column: 12, scope: !7455)
!7470 = !DILocalVariable(name: "i", scope: !7455, file: !3, line: 1861, type: !1025)
!7471 = !DILocation(line: 1861, column: 7, scope: !7455)
!7472 = !DILocation(line: 1863, column: 38, scope: !7473)
!7473 = distinct !DILexicalBlock(scope: !7455, file: !3, line: 1863, column: 7)
!7474 = !DILocation(line: 1863, column: 27, scope: !7473)
!7475 = !DILocation(line: 1863, column: 7, scope: !7473)
!7476 = !DILocation(line: 1863, column: 7, scope: !7455)
!7477 = !DILocation(line: 1865, column: 24, scope: !7478)
!7478 = distinct !DILexicalBlock(scope: !7473, file: !3, line: 1864, column: 5)
!7479 = !DILocation(line: 1865, column: 30, scope: !7478)
!7480 = !DILocation(line: 1865, column: 7, scope: !7478)
!7481 = !DILocation(line: 1866, column: 7, scope: !7478)
!7482 = !DILocation(line: 1869, column: 41, scope: !7455)
!7483 = !DILocation(line: 1869, column: 11, scope: !7455)
!7484 = !DILocation(line: 1869, column: 9, scope: !7455)
!7485 = !DILocation(line: 1870, column: 10, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7455, file: !3, line: 1870, column: 3)
!7487 = !DILocation(line: 1870, column: 8, scope: !7486)
!7488 = !DILocation(line: 1870, column: 15, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 1870, column: 3)
!7490 = !DILocation(line: 1870, column: 3, scope: !7486)
!7491 = !DILocalVariable(name: "translated", scope: !7492, file: !3, line: 1872, type: !1112)
!7492 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 1871, column: 5)
!7493 = !DILocation(line: 1872, column: 16, scope: !7492)
!7494 = !DILocation(line: 1873, column: 35, scope: !7492)
!7495 = !DILocation(line: 1873, column: 41, scope: !7492)
!7496 = !DILocation(line: 1873, column: 52, scope: !7492)
!7497 = !DILocation(line: 1873, column: 58, scope: !7492)
!7498 = !DILocation(line: 1873, column: 20, scope: !7492)
!7499 = !DILocation(line: 1873, column: 18, scope: !7492)
!7500 = !DILocation(line: 1874, column: 12, scope: !7501)
!7501 = distinct !DILexicalBlock(scope: !7492, file: !3, line: 1874, column: 11)
!7502 = !DILocation(line: 1874, column: 11, scope: !7492)
!7503 = !DILocation(line: 1875, column: 2, scope: !7501)
!7504 = !DILocation(line: 1881, column: 11, scope: !7505)
!7505 = distinct !DILexicalBlock(scope: !7492, file: !3, line: 1881, column: 11)
!7506 = !DILocation(line: 1881, column: 23, scope: !7505)
!7507 = !DILocation(line: 1881, column: 28, scope: !7505)
!7508 = !DILocation(line: 1881, column: 11, scope: !7492)
!7509 = !DILocation(line: 1882, column: 31, scope: !7505)
!7510 = !DILocation(line: 1882, column: 37, scope: !7505)
!7511 = !DILocation(line: 1882, column: 2, scope: !7505)
!7512 = !DILocation(line: 1884, column: 32, scope: !7505)
!7513 = !DILocation(line: 1884, column: 38, scope: !7505)
!7514 = !DILocation(line: 1884, column: 2, scope: !7505)
!7515 = !DILocation(line: 1885, column: 5, scope: !7492)
!7516 = !DILocation(line: 1870, column: 56, scope: !7489)
!7517 = !DILocation(line: 1870, column: 3, scope: !7489)
!7518 = distinct !{!7518, !7490, !7519}
!7519 = !DILocation(line: 1885, column: 5, scope: !7486)
!7520 = !DILocation(line: 1886, column: 3, scope: !7455)
!7521 = !DILocation(line: 1887, column: 1, scope: !7455)
!7522 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !349, file: !349, line: 281, type: !7523, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7523 = !DISubroutineType(types: !7524)
!7524 = !{!1025, !6830, !6, !2523}
!7525 = !DILocalVariable(name: "vec_", arg: 1, scope: !7522, file: !349, line: 281, type: !6830)
!7526 = !DILocation(line: 281, column: 1, scope: !7522)
!7527 = !DILocalVariable(name: "ix_", arg: 2, scope: !7522, file: !349, line: 281, type: !6)
!7528 = !DILocalVariable(name: "ptr", arg: 3, scope: !7522, file: !349, line: 281, type: !2523)
!7529 = !DILocation(line: 281, column: 1, scope: !7530)
!7530 = distinct !DILexicalBlock(scope: !7522, file: !349, line: 281, column: 1)
!7531 = !DILocation(line: 281, column: 1, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !7530, file: !349, line: 281, column: 1)
!7533 = !DILocation(line: 281, column: 1, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7530, file: !349, line: 281, column: 1)
!7535 = distinct !DISubprogram(name: "bitmap_set_and", scope: !3, file: !3, line: 753, type: !6325, scopeLine: 754, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7536 = !DILocalVariable(name: "dest", arg: 1, scope: !7535, file: !3, line: 753, type: !1038)
!7537 = !DILocation(line: 753, column: 30, scope: !7535)
!7538 = !DILocalVariable(name: "orig", arg: 2, scope: !7535, file: !3, line: 753, type: !1038)
!7539 = !DILocation(line: 753, column: 49, scope: !7535)
!7540 = !DILocalVariable(name: "bi", scope: !7535, file: !3, line: 755, type: !3079)
!7541 = !DILocation(line: 755, column: 19, scope: !7535)
!7542 = !DILocalVariable(name: "i", scope: !7535, file: !3, line: 756, type: !6)
!7543 = !DILocation(line: 756, column: 16, scope: !7535)
!7544 = !DILocation(line: 758, column: 7, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 758, column: 7)
!7546 = !DILocation(line: 758, column: 15, scope: !7545)
!7547 = !DILocation(line: 758, column: 12, scope: !7545)
!7548 = !DILocation(line: 758, column: 7, scope: !7535)
!7549 = !DILocalVariable(name: "temp", scope: !7550, file: !3, line: 760, type: !1043)
!7550 = distinct !DILexicalBlock(scope: !7545, file: !3, line: 759, column: 5)
!7551 = !DILocation(line: 760, column: 14, scope: !7550)
!7552 = !DILocation(line: 760, column: 21, scope: !7550)
!7553 = !DILocation(line: 762, column: 24, scope: !7550)
!7554 = !DILocation(line: 762, column: 30, scope: !7550)
!7555 = !DILocation(line: 762, column: 38, scope: !7550)
!7556 = !DILocation(line: 762, column: 44, scope: !7550)
!7557 = !DILocation(line: 762, column: 7, scope: !7550)
!7558 = !DILocation(line: 763, column: 20, scope: !7550)
!7559 = !DILocation(line: 763, column: 26, scope: !7550)
!7560 = !DILocation(line: 763, column: 32, scope: !7550)
!7561 = !DILocation(line: 763, column: 7, scope: !7550)
!7562 = !DILocation(line: 764, column: 7, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7550, file: !3, line: 764, column: 7)
!7564 = !DILocation(line: 764, column: 7, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 764, column: 7)
!7566 = !DILocalVariable(name: "expr", scope: !7567, file: !3, line: 766, type: !1112)
!7567 = distinct !DILexicalBlock(scope: !7565, file: !3, line: 765, column: 2)
!7568 = !DILocation(line: 766, column: 13, scope: !7567)
!7569 = !DILocation(line: 766, column: 39, scope: !7567)
!7570 = !DILocation(line: 766, column: 20, scope: !7567)
!7571 = !DILocalVariable(name: "value_id", scope: !7567, file: !3, line: 767, type: !6)
!7572 = !DILocation(line: 767, column: 17, scope: !7567)
!7573 = !DILocation(line: 767, column: 47, scope: !7567)
!7574 = !DILocation(line: 767, column: 28, scope: !7567)
!7575 = !DILocation(line: 768, column: 23, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 768, column: 8)
!7577 = !DILocation(line: 768, column: 29, scope: !7576)
!7578 = !DILocation(line: 768, column: 37, scope: !7576)
!7579 = !DILocation(line: 768, column: 9, scope: !7576)
!7580 = !DILocation(line: 768, column: 8, scope: !7567)
!7581 = !DILocation(line: 769, column: 24, scope: !7576)
!7582 = !DILocation(line: 769, column: 30, scope: !7576)
!7583 = !DILocation(line: 769, column: 43, scope: !7576)
!7584 = !DILocation(line: 769, column: 6, scope: !7576)
!7585 = !DILocation(line: 770, column: 2, scope: !7567)
!7586 = distinct !{!7586, !7562, !7587}
!7587 = !DILocation(line: 770, column: 2, scope: !7563)
!7588 = !DILocation(line: 771, column: 7, scope: !7550)
!7589 = !DILocation(line: 772, column: 5, scope: !7550)
!7590 = !DILocation(line: 773, column: 1, scope: !7535)
!7591 = distinct !DISubprogram(name: "bitmap_set_free", scope: !3, file: !3, line: 708, type: !3047, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7592 = !DILocalVariable(name: "set", arg: 1, scope: !7591, file: !3, line: 708, type: !1038)
!7593 = !DILocation(line: 708, column: 31, scope: !7591)
!7594 = !DILocation(line: 710, column: 3, scope: !7591)
!7595 = !DILocation(line: 711, column: 3, scope: !7591)
!7596 = !DILocation(line: 712, column: 1, scope: !7591)
!7597 = distinct !DISubprogram(name: "bitmap_set_subtract", scope: !3, file: !3, line: 778, type: !7598, scopeLine: 779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7598 = !DISubroutineType(types: !7599)
!7599 = !{!1038, !1038, !1038}
!7600 = !DILocalVariable(name: "dest", arg: 1, scope: !7597, file: !3, line: 778, type: !1038)
!7601 = !DILocation(line: 778, column: 35, scope: !7597)
!7602 = !DILocalVariable(name: "orig", arg: 2, scope: !7597, file: !3, line: 778, type: !1038)
!7603 = !DILocation(line: 778, column: 54, scope: !7597)
!7604 = !DILocalVariable(name: "result", scope: !7597, file: !3, line: 780, type: !1038)
!7605 = !DILocation(line: 780, column: 16, scope: !7597)
!7606 = !DILocation(line: 780, column: 25, scope: !7597)
!7607 = !DILocalVariable(name: "bi", scope: !7597, file: !3, line: 781, type: !3079)
!7608 = !DILocation(line: 781, column: 19, scope: !7597)
!7609 = !DILocalVariable(name: "i", scope: !7597, file: !3, line: 782, type: !6)
!7610 = !DILocation(line: 782, column: 16, scope: !7597)
!7611 = !DILocation(line: 784, column: 21, scope: !7597)
!7612 = !DILocation(line: 784, column: 29, scope: !7597)
!7613 = !DILocation(line: 784, column: 42, scope: !7597)
!7614 = !DILocation(line: 784, column: 48, scope: !7597)
!7615 = !DILocation(line: 785, column: 7, scope: !7597)
!7616 = !DILocation(line: 785, column: 13, scope: !7597)
!7617 = !DILocation(line: 784, column: 3, scope: !7597)
!7618 = !DILocation(line: 787, column: 3, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 787, column: 3)
!7620 = !DILocation(line: 787, column: 3, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7619, file: !3, line: 787, column: 3)
!7622 = !DILocalVariable(name: "expr", scope: !7623, file: !3, line: 789, type: !1112)
!7623 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 788, column: 5)
!7624 = !DILocation(line: 789, column: 16, scope: !7623)
!7625 = !DILocation(line: 789, column: 42, scope: !7623)
!7626 = !DILocation(line: 789, column: 23, scope: !7623)
!7627 = !DILocalVariable(name: "value_id", scope: !7623, file: !3, line: 790, type: !6)
!7628 = !DILocation(line: 790, column: 20, scope: !7623)
!7629 = !DILocation(line: 790, column: 50, scope: !7623)
!7630 = !DILocation(line: 790, column: 31, scope: !7623)
!7631 = !DILocation(line: 791, column: 23, scope: !7623)
!7632 = !DILocation(line: 791, column: 31, scope: !7623)
!7633 = !DILocation(line: 791, column: 39, scope: !7623)
!7634 = !DILocation(line: 791, column: 7, scope: !7623)
!7635 = !DILocation(line: 792, column: 5, scope: !7623)
!7636 = distinct !{!7636, !7618, !7637}
!7637 = !DILocation(line: 792, column: 5, scope: !7619)
!7638 = !DILocation(line: 794, column: 10, scope: !7597)
!7639 = !DILocation(line: 794, column: 3, scope: !7597)
!7640 = distinct !DISubprogram(name: "clean", scope: !3, file: !3, line: 2181, type: !7641, scopeLine: 2182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7641 = !DISubroutineType(types: !7642)
!7642 = !{null, !1038, !1838}
!7643 = !DILocalVariable(name: "set", arg: 1, scope: !7640, file: !3, line: 2181, type: !1038)
!7644 = !DILocation(line: 2181, column: 21, scope: !7640)
!7645 = !DILocalVariable(name: "block", arg: 2, scope: !7640, file: !3, line: 2181, type: !1838)
!7646 = !DILocation(line: 2181, column: 38, scope: !7640)
!7647 = !DILocalVariable(name: "exprs", scope: !7640, file: !3, line: 2183, type: !2459)
!7648 = !DILocation(line: 2183, column: 25, scope: !7640)
!7649 = !DILocation(line: 2183, column: 63, scope: !7640)
!7650 = !DILocation(line: 2183, column: 33, scope: !7640)
!7651 = !DILocalVariable(name: "expr", scope: !7640, file: !3, line: 2184, type: !1112)
!7652 = !DILocation(line: 2184, column: 12, scope: !7640)
!7653 = !DILocalVariable(name: "i", scope: !7640, file: !3, line: 2185, type: !1025)
!7654 = !DILocation(line: 2185, column: 7, scope: !7640)
!7655 = !DILocation(line: 2187, column: 10, scope: !7656)
!7656 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 2187, column: 3)
!7657 = !DILocation(line: 2187, column: 8, scope: !7656)
!7658 = !DILocation(line: 2187, column: 15, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7656, file: !3, line: 2187, column: 3)
!7660 = !DILocation(line: 2187, column: 3, scope: !7656)
!7661 = !DILocation(line: 2189, column: 27, scope: !7662)
!7662 = distinct !DILexicalBlock(scope: !7663, file: !3, line: 2189, column: 11)
!7663 = distinct !DILexicalBlock(scope: !7659, file: !3, line: 2188, column: 5)
!7664 = !DILocation(line: 2189, column: 38, scope: !7662)
!7665 = !DILocation(line: 2189, column: 44, scope: !7662)
!7666 = !DILocation(line: 2189, column: 12, scope: !7662)
!7667 = !DILocation(line: 2189, column: 11, scope: !7663)
!7668 = !DILocation(line: 2190, column: 26, scope: !7662)
!7669 = !DILocation(line: 2190, column: 31, scope: !7662)
!7670 = !DILocation(line: 2190, column: 2, scope: !7662)
!7671 = !DILocation(line: 2191, column: 5, scope: !7663)
!7672 = !DILocation(line: 2187, column: 56, scope: !7659)
!7673 = !DILocation(line: 2187, column: 3, scope: !7659)
!7674 = distinct !{!7674, !7660, !7675}
!7675 = !DILocation(line: 2191, column: 5, scope: !7656)
!7676 = !DILocation(line: 2192, column: 3, scope: !7640)
!7677 = !DILocation(line: 2193, column: 1, scope: !7640)
!7678 = distinct !DISubprogram(name: "bitmap_set_equal", scope: !3, file: !3, line: 877, type: !7679, scopeLine: 878, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7679 = !DISubroutineType(types: !7680)
!7680 = !{!1236, !1038, !1038}
!7681 = !DILocalVariable(name: "a", arg: 1, scope: !7678, file: !3, line: 877, type: !1038)
!7682 = !DILocation(line: 877, column: 32, scope: !7678)
!7683 = !DILocalVariable(name: "b", arg: 2, scope: !7678, file: !3, line: 877, type: !1038)
!7684 = !DILocation(line: 877, column: 48, scope: !7678)
!7685 = !DILocation(line: 879, column: 26, scope: !7678)
!7686 = !DILocation(line: 879, column: 29, scope: !7678)
!7687 = !DILocation(line: 879, column: 37, scope: !7678)
!7688 = !DILocation(line: 879, column: 40, scope: !7678)
!7689 = !DILocation(line: 879, column: 10, scope: !7678)
!7690 = !DILocation(line: 879, column: 3, scope: !7678)
!7691 = distinct !DISubprogram(name: "RESET_BIT", scope: !2628, file: !2628, line: 82, type: !6095, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7692 = !DILocalVariable(name: "map", arg: 1, scope: !7691, file: !2628, line: 82, type: !2627)
!7693 = !DILocation(line: 82, column: 20, scope: !7691)
!7694 = !DILocalVariable(name: "bitno", arg: 2, scope: !7691, file: !2628, line: 82, type: !6)
!7695 = !DILocation(line: 82, column: 39, scope: !7691)
!7696 = !DILocation(line: 84, column: 7, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7691, file: !2628, line: 84, column: 7)
!7698 = !DILocation(line: 84, column: 12, scope: !7697)
!7699 = !DILocation(line: 84, column: 7, scope: !7691)
!7700 = !DILocalVariable(name: "oldbit", scope: !7701, file: !2628, line: 86, type: !1236)
!7701 = distinct !DILexicalBlock(scope: !7697, file: !2628, line: 85, column: 5)
!7702 = !DILocation(line: 86, column: 12, scope: !7701)
!7703 = !DILocation(line: 87, column: 16, scope: !7701)
!7704 = !DILocation(line: 87, column: 14, scope: !7701)
!7705 = !DILocation(line: 88, column: 11, scope: !7706)
!7706 = distinct !DILexicalBlock(scope: !7701, file: !2628, line: 88, column: 11)
!7707 = !DILocation(line: 88, column: 11, scope: !7701)
!7708 = !DILocation(line: 89, column: 2, scope: !7706)
!7709 = !DILocation(line: 89, column: 7, scope: !7706)
!7710 = !DILocation(line: 89, column: 16, scope: !7706)
!7711 = !DILocation(line: 89, column: 22, scope: !7706)
!7712 = !DILocation(line: 89, column: 41, scope: !7706)
!7713 = !DILocation(line: 90, column: 5, scope: !7701)
!7714 = !DILocation(line: 92, column: 35, scope: !7691)
!7715 = !DILocation(line: 92, column: 42, scope: !7691)
!7716 = !DILocation(line: 92, column: 31, scope: !7691)
!7717 = !DILocation(line: 92, column: 8, scope: !7691)
!7718 = !DILocation(line: 91, column: 3, scope: !7691)
!7719 = !DILocation(line: 91, column: 8, scope: !7691)
!7720 = !DILocation(line: 91, column: 13, scope: !7691)
!7721 = !DILocation(line: 91, column: 19, scope: !7691)
!7722 = !DILocation(line: 92, column: 5, scope: !7691)
!7723 = !DILocation(line: 93, column: 1, scope: !7691)
!7724 = distinct !DISubprogram(name: "single_succ_edge", scope: !349, file: !349, line: 643, type: !7725, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7725 = !DISubroutineType(types: !7726)
!7726 = !{!1366, !6668}
!7727 = !DILocalVariable(name: "bb", arg: 1, scope: !7724, file: !349, line: 643, type: !6668)
!7728 = !DILocation(line: 643, column: 37, scope: !7724)
!7729 = !DILocation(line: 645, column: 3, scope: !7724)
!7730 = !DILocation(line: 646, column: 10, scope: !7724)
!7731 = !DILocation(line: 646, column: 3, scope: !7724)
!7732 = distinct !DISubprogram(name: "sorted_array_from_bitmap_set", scope: !3, file: !3, line: 718, type: !7733, scopeLine: 719, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7733 = !DISubroutineType(types: !7734)
!7734 = !{!2459, !1038}
!7735 = !DILocalVariable(name: "set", arg: 1, scope: !7732, file: !3, line: 718, type: !1038)
!7736 = !DILocation(line: 718, column: 44, scope: !7732)
!7737 = !DILocalVariable(name: "i", scope: !7732, file: !3, line: 720, type: !6)
!7738 = !DILocation(line: 720, column: 16, scope: !7732)
!7739 = !DILocalVariable(name: "j", scope: !7732, file: !3, line: 720, type: !6)
!7740 = !DILocation(line: 720, column: 19, scope: !7732)
!7741 = !DILocalVariable(name: "bi", scope: !7732, file: !3, line: 721, type: !3079)
!7742 = !DILocation(line: 721, column: 19, scope: !7732)
!7743 = !DILocalVariable(name: "bj", scope: !7732, file: !3, line: 721, type: !3079)
!7744 = !DILocation(line: 721, column: 23, scope: !7732)
!7745 = !DILocalVariable(name: "result", scope: !7732, file: !3, line: 722, type: !2459)
!7746 = !DILocation(line: 722, column: 24, scope: !7732)
!7747 = !DILocation(line: 725, column: 12, scope: !7732)
!7748 = !DILocation(line: 725, column: 10, scope: !7732)
!7749 = !DILocation(line: 727, column: 3, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 727, column: 3)
!7751 = !DILocation(line: 727, column: 3, scope: !7752)
!7752 = distinct !DILexicalBlock(scope: !7750, file: !3, line: 727, column: 3)
!7753 = !DILocalVariable(name: "exprset", scope: !7754, file: !3, line: 739, type: !1038)
!7754 = distinct !DILexicalBlock(scope: !7752, file: !3, line: 728, column: 5)
!7755 = !DILocation(line: 739, column: 20, scope: !7754)
!7756 = !DILocation(line: 739, column: 30, scope: !7754)
!7757 = !DILocation(line: 740, column: 7, scope: !7758)
!7758 = distinct !DILexicalBlock(scope: !7754, file: !3, line: 740, column: 7)
!7759 = !DILocation(line: 740, column: 7, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7758, file: !3, line: 740, column: 7)
!7761 = !DILocation(line: 742, column: 22, scope: !7762)
!7762 = distinct !DILexicalBlock(scope: !7763, file: !3, line: 742, column: 8)
!7763 = distinct !DILexicalBlock(scope: !7760, file: !3, line: 741, column: 2)
!7764 = !DILocation(line: 742, column: 27, scope: !7762)
!7765 = !DILocation(line: 742, column: 40, scope: !7762)
!7766 = !DILocation(line: 742, column: 8, scope: !7762)
!7767 = !DILocation(line: 742, column: 8, scope: !7763)
!7768 = !DILocation(line: 743, column: 6, scope: !7762)
!7769 = !DILocation(line: 744, column: 9, scope: !7763)
!7770 = distinct !{!7770, !7757, !7771}
!7771 = !DILocation(line: 744, column: 9, scope: !7758)
!7772 = !DILocation(line: 745, column: 5, scope: !7754)
!7773 = distinct !{!7773, !7749, !7774}
!7774 = !DILocation(line: 745, column: 5, scope: !7750)
!7775 = !DILocation(line: 747, column: 10, scope: !7732)
!7776 = !DILocation(line: 747, column: 3, scope: !7732)
!7777 = distinct !DISubprogram(name: "VEC_pre_expr_base_iterate", scope: !3, file: !3, line: 241, type: !7778, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7778 = !DISubroutineType(types: !7779)
!7779 = !{!1025, !3617, !6, !2533}
!7780 = !DILocalVariable(name: "vec_", arg: 1, scope: !7777, file: !3, line: 241, type: !3617)
!7781 = !DILocation(line: 241, column: 1, scope: !7777)
!7782 = !DILocalVariable(name: "ix_", arg: 2, scope: !7777, file: !3, line: 241, type: !6)
!7783 = !DILocalVariable(name: "ptr", arg: 3, scope: !7777, file: !3, line: 241, type: !2533)
!7784 = !DILocation(line: 241, column: 1, scope: !7785)
!7785 = distinct !DILexicalBlock(scope: !7777, file: !3, line: 241, column: 1)
!7786 = !DILocation(line: 241, column: 1, scope: !7787)
!7787 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 241, column: 1)
!7788 = !DILocation(line: 241, column: 1, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 241, column: 1)
!7790 = distinct !DISubprogram(name: "phi_translate", scope: !3, file: !3, line: 1816, type: !7791, scopeLine: 1818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7791 = !DISubroutineType(types: !7792)
!7792 = !{!1112, !1112, !1038, !1038, !1838, !1838}
!7793 = !DILocalVariable(name: "expr", arg: 1, scope: !7790, file: !3, line: 1816, type: !1112)
!7794 = !DILocation(line: 1816, column: 25, scope: !7790)
!7795 = !DILocalVariable(name: "set1", arg: 2, scope: !7790, file: !3, line: 1816, type: !1038)
!7796 = !DILocation(line: 1816, column: 44, scope: !7790)
!7797 = !DILocalVariable(name: "set2", arg: 3, scope: !7790, file: !3, line: 1816, type: !1038)
!7798 = !DILocation(line: 1816, column: 63, scope: !7790)
!7799 = !DILocalVariable(name: "pred", arg: 4, scope: !7790, file: !3, line: 1817, type: !1838)
!7800 = !DILocation(line: 1817, column: 21, scope: !7790)
!7801 = !DILocalVariable(name: "phiblock", arg: 5, scope: !7790, file: !3, line: 1817, type: !1838)
!7802 = !DILocation(line: 1817, column: 39, scope: !7790)
!7803 = !DILocalVariable(name: "phitrans", scope: !7790, file: !3, line: 1819, type: !1112)
!7804 = !DILocation(line: 1819, column: 12, scope: !7790)
!7805 = !DILocation(line: 1821, column: 8, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1821, column: 7)
!7807 = !DILocation(line: 1821, column: 7, scope: !7790)
!7808 = !DILocation(line: 1822, column: 5, scope: !7806)
!7809 = !DILocation(line: 1825, column: 7, scope: !7810)
!7810 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1825, column: 7)
!7811 = !DILocation(line: 1825, column: 13, scope: !7810)
!7812 = !DILocation(line: 1825, column: 18, scope: !7810)
!7813 = !DILocation(line: 1825, column: 7, scope: !7790)
!7814 = !DILocation(line: 1826, column: 12, scope: !7810)
!7815 = !DILocation(line: 1826, column: 5, scope: !7810)
!7816 = !DILocation(line: 1828, column: 47, scope: !7817)
!7817 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1828, column: 7)
!7818 = !DILocation(line: 1828, column: 28, scope: !7817)
!7819 = !DILocation(line: 1828, column: 7, scope: !7817)
!7820 = !DILocation(line: 1828, column: 7, scope: !7790)
!7821 = !DILocation(line: 1829, column: 12, scope: !7817)
!7822 = !DILocation(line: 1829, column: 5, scope: !7817)
!7823 = !DILocation(line: 1831, column: 7, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1831, column: 7)
!7825 = !DILocation(line: 1831, column: 13, scope: !7824)
!7826 = !DILocation(line: 1831, column: 18, scope: !7824)
!7827 = !DILocation(line: 1831, column: 7, scope: !7790)
!7828 = !DILocation(line: 1833, column: 36, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7824, file: !3, line: 1832, column: 5)
!7830 = !DILocation(line: 1833, column: 42, scope: !7829)
!7831 = !DILocation(line: 1833, column: 18, scope: !7829)
!7832 = !DILocation(line: 1833, column: 16, scope: !7829)
!7833 = !DILocation(line: 1834, column: 11, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 1834, column: 11)
!7835 = !DILocation(line: 1834, column: 11, scope: !7829)
!7836 = !DILocation(line: 1835, column: 9, scope: !7834)
!7837 = !DILocation(line: 1835, column: 2, scope: !7834)
!7838 = !DILocation(line: 1836, column: 5, scope: !7829)
!7839 = !DILocation(line: 1839, column: 31, scope: !7790)
!7840 = !DILocation(line: 1839, column: 37, scope: !7790)
!7841 = !DILocation(line: 1839, column: 43, scope: !7790)
!7842 = !DILocation(line: 1839, column: 49, scope: !7790)
!7843 = !DILocation(line: 1839, column: 55, scope: !7790)
!7844 = !DILocation(line: 1839, column: 14, scope: !7790)
!7845 = !DILocation(line: 1839, column: 12, scope: !7790)
!7846 = !DILocation(line: 1843, column: 7, scope: !7847)
!7847 = distinct !DILexicalBlock(scope: !7790, file: !3, line: 1843, column: 7)
!7848 = !DILocation(line: 1844, column: 7, scope: !7847)
!7849 = !DILocation(line: 1844, column: 10, scope: !7847)
!7850 = !DILocation(line: 1844, column: 16, scope: !7847)
!7851 = !DILocation(line: 1844, column: 21, scope: !7847)
!7852 = !DILocation(line: 1843, column: 7, scope: !7790)
!7853 = !DILocation(line: 1845, column: 20, scope: !7847)
!7854 = !DILocation(line: 1845, column: 26, scope: !7847)
!7855 = !DILocation(line: 1845, column: 36, scope: !7847)
!7856 = !DILocation(line: 1845, column: 5, scope: !7847)
!7857 = !DILocation(line: 1847, column: 10, scope: !7790)
!7858 = !DILocation(line: 1847, column: 3, scope: !7790)
!7859 = !DILocation(line: 1848, column: 1, scope: !7790)
!7860 = distinct !DISubprogram(name: "bitmap_value_replace_in_set", scope: !3, file: !3, line: 886, type: !6286, scopeLine: 887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7861 = !DILocalVariable(name: "set", arg: 1, scope: !7860, file: !3, line: 886, type: !1038)
!7862 = !DILocation(line: 886, column: 43, scope: !7860)
!7863 = !DILocalVariable(name: "expr", arg: 2, scope: !7860, file: !3, line: 886, type: !1112)
!7864 = !DILocation(line: 886, column: 57, scope: !7860)
!7865 = !DILocalVariable(name: "val", scope: !7860, file: !3, line: 888, type: !6)
!7866 = !DILocation(line: 888, column: 16, scope: !7860)
!7867 = !DILocation(line: 888, column: 41, scope: !7860)
!7868 = !DILocation(line: 888, column: 22, scope: !7860)
!7869 = !DILocation(line: 890, column: 34, scope: !7870)
!7870 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 890, column: 7)
!7871 = !DILocation(line: 890, column: 39, scope: !7870)
!7872 = !DILocation(line: 890, column: 7, scope: !7870)
!7873 = !DILocation(line: 890, column: 7, scope: !7860)
!7874 = !DILocation(line: 891, column: 31, scope: !7870)
!7875 = !DILocation(line: 891, column: 36, scope: !7870)
!7876 = !DILocation(line: 891, column: 41, scope: !7870)
!7877 = !DILocation(line: 891, column: 5, scope: !7870)
!7878 = !DILocation(line: 893, column: 29, scope: !7870)
!7879 = !DILocation(line: 893, column: 34, scope: !7870)
!7880 = !DILocation(line: 893, column: 5, scope: !7870)
!7881 = !DILocation(line: 894, column: 1, scope: !7860)
!7882 = distinct !DISubprogram(name: "VEC_pre_expr_heap_free", scope: !3, file: !3, line: 242, type: !7883, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7883 = !DISubroutineType(types: !7884)
!7884 = !{null, !3306}
!7885 = !DILocalVariable(name: "vec_", arg: 1, scope: !7882, file: !3, line: 242, type: !3306)
!7886 = !DILocation(line: 242, column: 1, scope: !7882)
!7887 = !DILocation(line: 242, column: 1, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 242, column: 1)
!7889 = distinct !DISubprogram(name: "VEC_pre_expr_heap_alloc", scope: !3, file: !3, line: 242, type: !7890, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7890 = !DISubroutineType(types: !7891)
!7891 = !{!2459, !1025}
!7892 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7889, file: !3, line: 242, type: !1025)
!7893 = !DILocation(line: 242, column: 1, scope: !7889)
!7894 = distinct !DISubprogram(name: "phi_trans_lookup", scope: !3, file: !3, line: 555, type: !7895, scopeLine: 556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7895 = !DISubroutineType(types: !7896)
!7896 = !{!1112, !1112, !1838}
!7897 = !DILocalVariable(name: "e", arg: 1, scope: !7894, file: !3, line: 555, type: !1112)
!7898 = !DILocation(line: 555, column: 28, scope: !7894)
!7899 = !DILocalVariable(name: "pred", arg: 2, scope: !7894, file: !3, line: 555, type: !1838)
!7900 = !DILocation(line: 555, column: 43, scope: !7894)
!7901 = !DILocalVariable(name: "slot", scope: !7894, file: !3, line: 557, type: !1893)
!7902 = !DILocation(line: 557, column: 10, scope: !7894)
!7903 = !DILocalVariable(name: "ept", scope: !7894, file: !3, line: 558, type: !2515)
!7904 = !DILocation(line: 558, column: 28, scope: !7894)
!7905 = !DILocation(line: 560, column: 11, scope: !7894)
!7906 = !DILocation(line: 560, column: 7, scope: !7894)
!7907 = !DILocation(line: 560, column: 9, scope: !7894)
!7908 = !DILocation(line: 561, column: 14, scope: !7894)
!7909 = !DILocation(line: 561, column: 7, scope: !7894)
!7910 = !DILocation(line: 561, column: 12, scope: !7894)
!7911 = !DILocation(line: 562, column: 59, scope: !7894)
!7912 = !DILocation(line: 562, column: 44, scope: !7894)
!7913 = !DILocation(line: 562, column: 63, scope: !7894)
!7914 = !DILocation(line: 562, column: 69, scope: !7894)
!7915 = !DILocation(line: 562, column: 18, scope: !7894)
!7916 = !DILocation(line: 562, column: 7, scope: !7894)
!7917 = !DILocation(line: 562, column: 16, scope: !7894)
!7918 = !DILocation(line: 563, column: 36, scope: !7894)
!7919 = !DILocation(line: 563, column: 57, scope: !7894)
!7920 = !DILocation(line: 563, column: 67, scope: !7894)
!7921 = !DILocation(line: 563, column: 10, scope: !7894)
!7922 = !DILocation(line: 563, column: 8, scope: !7894)
!7923 = !DILocation(line: 565, column: 8, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 565, column: 7)
!7925 = !DILocation(line: 565, column: 7, scope: !7894)
!7926 = !DILocation(line: 566, column: 5, scope: !7924)
!7927 = !DILocation(line: 568, column: 34, scope: !7924)
!7928 = !DILocation(line: 568, column: 33, scope: !7924)
!7929 = !DILocation(line: 568, column: 13, scope: !7924)
!7930 = !DILocation(line: 568, column: 41, scope: !7924)
!7931 = !DILocation(line: 568, column: 5, scope: !7924)
!7932 = !DILocation(line: 569, column: 1, scope: !7894)
!7933 = distinct !DISubprogram(name: "phi_translate_1", scope: !3, file: !3, line: 1495, type: !7791, scopeLine: 1497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!7934 = !DILocalVariable(name: "expr", arg: 1, scope: !7933, file: !3, line: 1495, type: !1112)
!7935 = !DILocation(line: 1495, column: 27, scope: !7933)
!7936 = !DILocalVariable(name: "set1", arg: 2, scope: !7933, file: !3, line: 1495, type: !1038)
!7937 = !DILocation(line: 1495, column: 46, scope: !7933)
!7938 = !DILocalVariable(name: "set2", arg: 3, scope: !7933, file: !3, line: 1495, type: !1038)
!7939 = !DILocation(line: 1495, column: 65, scope: !7933)
!7940 = !DILocalVariable(name: "pred", arg: 4, scope: !7933, file: !3, line: 1496, type: !1838)
!7941 = !DILocation(line: 1496, column: 16, scope: !7933)
!7942 = !DILocalVariable(name: "phiblock", arg: 5, scope: !7933, file: !3, line: 1496, type: !1838)
!7943 = !DILocation(line: 1496, column: 34, scope: !7933)
!7944 = !DILocation(line: 1498, column: 11, scope: !7933)
!7945 = !DILocation(line: 1498, column: 17, scope: !7933)
!7946 = !DILocation(line: 1498, column: 3, scope: !7933)
!7947 = !DILocalVariable(name: "i", scope: !7948, file: !3, line: 1502, type: !6)
!7948 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 1501, column: 7)
!7949 = distinct !DILexicalBlock(scope: !7933, file: !3, line: 1499, column: 5)
!7950 = !DILocation(line: 1502, column: 15, scope: !7948)
!7951 = !DILocalVariable(name: "changed", scope: !7948, file: !3, line: 1503, type: !1236)
!7952 = !DILocation(line: 1503, column: 7, scope: !7948)
!7953 = !DILocalVariable(name: "nary", scope: !7948, file: !3, line: 1504, type: !2414)
!7954 = !DILocation(line: 1504, column: 15, scope: !7948)
!7955 = !DILocation(line: 1504, column: 22, scope: !7948)
!7956 = !DILocalVariable(name: "newnary", scope: !7948, file: !3, line: 1505, type: !2417)
!7957 = !DILocation(line: 1505, column: 22, scope: !7948)
!7958 = !DILocation(line: 1508, column: 2, scope: !7948)
!7959 = !DILocation(line: 1508, column: 20, scope: !7948)
!7960 = !DILocation(line: 1509, column: 29, scope: !7948)
!7961 = !DILocation(line: 1509, column: 35, scope: !7948)
!7962 = !DILocation(line: 1509, column: 27, scope: !7948)
!7963 = !DILocation(line: 1509, column: 24, scope: !7948)
!7964 = !DILocation(line: 1509, column: 22, scope: !7948)
!7965 = !DILocation(line: 1509, column: 6, scope: !7948)
!7966 = !DILocation(line: 1511, column: 9, scope: !7967)
!7967 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 1511, column: 2)
!7968 = !DILocation(line: 1511, column: 7, scope: !7967)
!7969 = !DILocation(line: 1511, column: 14, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7967, file: !3, line: 1511, column: 2)
!7971 = !DILocation(line: 1511, column: 26, scope: !7970)
!7972 = !DILocation(line: 1511, column: 16, scope: !7970)
!7973 = !DILocation(line: 1511, column: 2, scope: !7967)
!7974 = !DILocation(line: 1513, column: 10, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7976, file: !3, line: 1513, column: 10)
!7976 = distinct !DILexicalBlock(scope: !7970, file: !3, line: 1512, column: 4)
!7977 = !DILocation(line: 1513, column: 36, scope: !7975)
!7978 = !DILocation(line: 1513, column: 10, scope: !7976)
!7979 = !DILocation(line: 1514, column: 8, scope: !7975)
!7980 = !DILocalVariable(name: "leader", scope: !7981, file: !3, line: 1517, type: !1112)
!7981 = distinct !DILexicalBlock(scope: !7975, file: !3, line: 1516, column: 8)
!7982 = !DILocation(line: 1517, column: 26, scope: !7981)
!7983 = !DILocalVariable(name: "result", scope: !7981, file: !3, line: 1517, type: !1112)
!7984 = !DILocation(line: 1517, column: 34, scope: !7981)
!7985 = !DILocalVariable(name: "op_val_id", scope: !7981, file: !3, line: 1518, type: !6)
!7986 = !DILocation(line: 1518, column: 16, scope: !7981)
!7987 = !DILocation(line: 1518, column: 45, scope: !7981)
!7988 = !DILocation(line: 1518, column: 48, scope: !7981)
!7989 = !DILocation(line: 1518, column: 37, scope: !7981)
!7990 = !DILocation(line: 1518, column: 28, scope: !7981)
!7991 = !DILocation(line: 1518, column: 53, scope: !7981)
!7992 = !DILocation(line: 1519, column: 33, scope: !7981)
!7993 = !DILocation(line: 1519, column: 44, scope: !7981)
!7994 = !DILocation(line: 1519, column: 50, scope: !7981)
!7995 = !DILocation(line: 1519, column: 12, scope: !7981)
!7996 = !DILocation(line: 1519, column: 10, scope: !7981)
!7997 = !DILocation(line: 1520, column: 41, scope: !7981)
!7998 = !DILocation(line: 1520, column: 49, scope: !7981)
!7999 = !DILocation(line: 1520, column: 55, scope: !7981)
!8000 = !DILocation(line: 1520, column: 61, scope: !7981)
!8001 = !DILocation(line: 1520, column: 67, scope: !7981)
!8002 = !DILocation(line: 1520, column: 26, scope: !7981)
!8003 = !DILocation(line: 1520, column: 24, scope: !7981)
!8004 = !DILocation(line: 1521, column: 7, scope: !8005)
!8005 = distinct !DILexicalBlock(scope: !7981, file: !3, line: 1521, column: 7)
!8006 = !DILocation(line: 1521, column: 14, scope: !8005)
!8007 = !DILocation(line: 1521, column: 17, scope: !8005)
!8008 = !DILocation(line: 1521, column: 27, scope: !8005)
!8009 = !DILocation(line: 1521, column: 24, scope: !8005)
!8010 = !DILocation(line: 1521, column: 7, scope: !7981)
!8011 = !DILocalVariable(name: "name", scope: !8012, file: !3, line: 1523, type: !1123)
!8012 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 1522, column: 5)
!8013 = !DILocation(line: 1523, column: 12, scope: !8012)
!8014 = !DILocation(line: 1523, column: 43, scope: !8012)
!8015 = !DILocation(line: 1523, column: 19, scope: !8012)
!8016 = !DILocation(line: 1524, column: 12, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !8012, file: !3, line: 1524, column: 11)
!8018 = !DILocation(line: 1524, column: 11, scope: !8012)
!8019 = !DILocation(line: 1525, column: 9, scope: !8017)
!8020 = !DILocation(line: 1526, column: 23, scope: !8012)
!8021 = !DILocation(line: 1526, column: 15, scope: !8012)
!8022 = !DILocation(line: 1526, column: 18, scope: !8012)
!8023 = !DILocation(line: 1526, column: 7, scope: !8012)
!8024 = !DILocation(line: 1526, column: 21, scope: !8012)
!8025 = !DILocation(line: 1527, column: 5, scope: !8012)
!8026 = !DILocation(line: 1528, column: 13, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 1528, column: 12)
!8028 = !DILocation(line: 1528, column: 12, scope: !8005)
!8029 = !DILocation(line: 1529, column: 5, scope: !8027)
!8030 = !DILocation(line: 1531, column: 22, scope: !7981)
!8031 = !DILocation(line: 1531, column: 25, scope: !7981)
!8032 = !DILocation(line: 1531, column: 14, scope: !7981)
!8033 = !DILocation(line: 1531, column: 31, scope: !7981)
!8034 = !DILocation(line: 1531, column: 37, scope: !7981)
!8035 = !DILocation(line: 1531, column: 40, scope: !7981)
!8036 = !DILocation(line: 1531, column: 28, scope: !7981)
!8037 = !DILocation(line: 1531, column: 11, scope: !7981)
!8038 = !DILocation(line: 1533, column: 4, scope: !7976)
!8039 = !DILocation(line: 1511, column: 35, scope: !7970)
!8040 = !DILocation(line: 1511, column: 2, scope: !7970)
!8041 = distinct !{!8041, !7973, !8042}
!8042 = !DILocation(line: 1533, column: 4, scope: !7967)
!8043 = !DILocation(line: 1534, column: 6, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !7948, file: !3, line: 1534, column: 6)
!8045 = !DILocation(line: 1534, column: 6, scope: !7948)
!8046 = !DILocalVariable(name: "constant", scope: !8047, file: !3, line: 1536, type: !1112)
!8047 = distinct !DILexicalBlock(scope: !8044, file: !3, line: 1535, column: 4)
!8048 = !DILocation(line: 1536, column: 15, scope: !8047)
!8049 = !DILocalVariable(name: "new_val_id", scope: !8047, file: !3, line: 1537, type: !6)
!8050 = !DILocation(line: 1537, column: 19, scope: !8047)
!8051 = !DILocalVariable(name: "result", scope: !8047, file: !3, line: 1539, type: !1123)
!8052 = !DILocation(line: 1539, column: 11, scope: !8047)
!8053 = !DILocation(line: 1539, column: 54, scope: !8047)
!8054 = !DILocation(line: 1540, column: 19, scope: !8047)
!8055 = !DILocation(line: 1541, column: 19, scope: !8047)
!8056 = !DILocation(line: 1542, column: 19, scope: !8047)
!8057 = !DILocation(line: 1542, column: 11, scope: !8047)
!8058 = !DILocation(line: 1543, column: 19, scope: !8047)
!8059 = !DILocation(line: 1543, column: 11, scope: !8047)
!8060 = !DILocation(line: 1544, column: 19, scope: !8047)
!8061 = !DILocation(line: 1544, column: 11, scope: !8047)
!8062 = !DILocation(line: 1545, column: 19, scope: !8047)
!8063 = !DILocation(line: 1545, column: 11, scope: !8047)
!8064 = !DILocation(line: 1539, column: 20, scope: !8047)
!8065 = !DILocation(line: 1547, column: 10, scope: !8066)
!8066 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 1547, column: 10)
!8067 = !DILocation(line: 1547, column: 17, scope: !8066)
!8068 = !DILocation(line: 1547, column: 45, scope: !8066)
!8069 = !DILocation(line: 1547, column: 20, scope: !8066)
!8070 = !DILocation(line: 1547, column: 10, scope: !8047)
!8071 = !DILocation(line: 1548, column: 47, scope: !8066)
!8072 = !DILocation(line: 1548, column: 15, scope: !8066)
!8073 = !DILocation(line: 1548, column: 8, scope: !8066)
!8074 = !DILocation(line: 1550, column: 36, scope: !8047)
!8075 = !DILocation(line: 1550, column: 24, scope: !8047)
!8076 = !DILocation(line: 1550, column: 13, scope: !8047)
!8077 = !DILocation(line: 1550, column: 11, scope: !8047)
!8078 = !DILocation(line: 1551, column: 6, scope: !8047)
!8079 = !DILocation(line: 1551, column: 12, scope: !8047)
!8080 = !DILocation(line: 1551, column: 17, scope: !8047)
!8081 = !DILocation(line: 1552, column: 6, scope: !8047)
!8082 = !DILocation(line: 1552, column: 12, scope: !8047)
!8083 = !DILocation(line: 1552, column: 15, scope: !8047)
!8084 = !DILocation(line: 1553, column: 10, scope: !8085)
!8085 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 1553, column: 10)
!8086 = !DILocation(line: 1553, column: 10, scope: !8047)
!8087 = !DILocation(line: 1555, column: 26, scope: !8088)
!8088 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 1554, column: 8)
!8089 = !DILocation(line: 1555, column: 3, scope: !8088)
!8090 = !DILocation(line: 1555, column: 24, scope: !8088)
!8091 = !DILocation(line: 1556, column: 41, scope: !8088)
!8092 = !DILocation(line: 1556, column: 14, scope: !8088)
!8093 = !DILocation(line: 1556, column: 12, scope: !8088)
!8094 = !DILocation(line: 1557, column: 7, scope: !8095)
!8095 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 1557, column: 7)
!8096 = !DILocation(line: 1557, column: 19, scope: !8095)
!8097 = !DILocation(line: 1557, column: 16, scope: !8095)
!8098 = !DILocation(line: 1557, column: 7, scope: !8088)
!8099 = !DILocation(line: 1558, column: 12, scope: !8095)
!8100 = !DILocation(line: 1558, column: 5, scope: !8095)
!8101 = !DILocation(line: 1560, column: 16, scope: !8088)
!8102 = !DILocation(line: 1560, column: 22, scope: !8088)
!8103 = !DILocation(line: 1560, column: 14, scope: !8088)
!8104 = !DILocation(line: 1561, column: 31, scope: !8088)
!8105 = !DILocation(line: 1561, column: 3, scope: !8088)
!8106 = !DILocation(line: 1562, column: 8, scope: !8088)
!8107 = !DILocation(line: 1565, column: 16, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8085, file: !3, line: 1564, column: 8)
!8109 = !DILocation(line: 1565, column: 14, scope: !8108)
!8110 = !DILocation(line: 1566, column: 3, scope: !8108)
!8111 = !DILocation(line: 1569, column: 44, scope: !8108)
!8112 = !DILocation(line: 1570, column: 16, scope: !8108)
!8113 = !DILocation(line: 1571, column: 16, scope: !8108)
!8114 = !DILocation(line: 1572, column: 16, scope: !8108)
!8115 = !DILocation(line: 1572, column: 8, scope: !8108)
!8116 = !DILocation(line: 1573, column: 16, scope: !8108)
!8117 = !DILocation(line: 1573, column: 8, scope: !8108)
!8118 = !DILocation(line: 1574, column: 16, scope: !8108)
!8119 = !DILocation(line: 1574, column: 8, scope: !8108)
!8120 = !DILocation(line: 1575, column: 16, scope: !8108)
!8121 = !DILocation(line: 1575, column: 8, scope: !8108)
!8122 = !DILocation(line: 1576, column: 8, scope: !8108)
!8123 = !DILocation(line: 1576, column: 16, scope: !8108)
!8124 = !DILocation(line: 1569, column: 10, scope: !8108)
!8125 = !DILocation(line: 1569, column: 8, scope: !8108)
!8126 = !DILocation(line: 1577, column: 26, scope: !8108)
!8127 = !DILocation(line: 1577, column: 3, scope: !8108)
!8128 = !DILocation(line: 1577, column: 24, scope: !8108)
!8129 = !DILocation(line: 1578, column: 41, scope: !8108)
!8130 = !DILocation(line: 1578, column: 14, scope: !8108)
!8131 = !DILocation(line: 1578, column: 12, scope: !8108)
!8132 = !DILocation(line: 1579, column: 7, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 1579, column: 7)
!8134 = !DILocation(line: 1579, column: 19, scope: !8133)
!8135 = !DILocation(line: 1579, column: 16, scope: !8133)
!8136 = !DILocation(line: 1579, column: 7, scope: !8108)
!8137 = !DILocation(line: 1580, column: 12, scope: !8133)
!8138 = !DILocation(line: 1580, column: 5, scope: !8133)
!8139 = !DILocation(line: 1581, column: 31, scope: !8108)
!8140 = !DILocation(line: 1581, column: 3, scope: !8108)
!8141 = !DILocation(line: 1583, column: 20, scope: !8047)
!8142 = !DILocation(line: 1583, column: 32, scope: !8047)
!8143 = !DILocation(line: 1583, column: 6, scope: !8047)
!8144 = !DILocation(line: 1584, column: 4, scope: !8047)
!8145 = !DILocation(line: 1585, column: 9, scope: !7948)
!8146 = !DILocation(line: 1585, column: 2, scope: !7948)
!8147 = !DILocalVariable(name: "ref", scope: !8148, file: !3, line: 1591, type: !2428)
!8148 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 1590, column: 7)
!8149 = !DILocation(line: 1591, column: 17, scope: !8148)
!8150 = !DILocation(line: 1591, column: 23, scope: !8148)
!8151 = !DILocalVariable(name: "operands", scope: !8148, file: !3, line: 1592, type: !2438)
!8152 = !DILocation(line: 1592, column: 33, scope: !8148)
!8153 = !DILocation(line: 1592, column: 44, scope: !8148)
!8154 = !DILocation(line: 1592, column: 49, scope: !8148)
!8155 = !DILocalVariable(name: "vuse", scope: !8148, file: !3, line: 1593, type: !1123)
!8156 = !DILocation(line: 1593, column: 7, scope: !8148)
!8157 = !DILocation(line: 1593, column: 14, scope: !8148)
!8158 = !DILocation(line: 1593, column: 19, scope: !8148)
!8159 = !DILocalVariable(name: "newvuse", scope: !8148, file: !3, line: 1594, type: !1123)
!8160 = !DILocation(line: 1594, column: 7, scope: !8148)
!8161 = !DILocation(line: 1594, column: 17, scope: !8148)
!8162 = !DILocalVariable(name: "newoperands", scope: !8148, file: !3, line: 1595, type: !2438)
!8163 = !DILocation(line: 1595, column: 33, scope: !8148)
!8164 = !DILocalVariable(name: "changed", scope: !8148, file: !3, line: 1596, type: !1236)
!8165 = !DILocation(line: 1596, column: 7, scope: !8148)
!8166 = !DILocalVariable(name: "same_valid", scope: !8148, file: !3, line: 1596, type: !1236)
!8167 = !DILocation(line: 1596, column: 24, scope: !8148)
!8168 = !DILocalVariable(name: "i", scope: !8148, file: !3, line: 1597, type: !6)
!8169 = !DILocation(line: 1597, column: 15, scope: !8148)
!8170 = !DILocalVariable(name: "j", scope: !8148, file: !3, line: 1597, type: !6)
!8171 = !DILocation(line: 1597, column: 18, scope: !8148)
!8172 = !DILocalVariable(name: "operand", scope: !8148, file: !3, line: 1598, type: !2935)
!8173 = !DILocation(line: 1598, column: 20, scope: !8148)
!8174 = !DILocalVariable(name: "newref", scope: !8148, file: !3, line: 1599, type: !2428)
!8175 = !DILocation(line: 1599, column: 17, scope: !8148)
!8176 = !DILocation(line: 1601, column: 9, scope: !8177)
!8177 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1601, column: 2)
!8178 = !DILocation(line: 1601, column: 16, scope: !8177)
!8179 = !DILocation(line: 1601, column: 7, scope: !8177)
!8180 = !DILocation(line: 1602, column: 7, scope: !8181)
!8181 = distinct !DILexicalBlock(scope: !8177, file: !3, line: 1601, column: 2)
!8182 = !DILocation(line: 1601, column: 2, scope: !8177)
!8183 = !DILocalVariable(name: "opresult", scope: !8184, file: !3, line: 1604, type: !1112)
!8184 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 1603, column: 4)
!8185 = !DILocation(line: 1604, column: 15, scope: !8184)
!8186 = !DILocalVariable(name: "leader", scope: !8184, file: !3, line: 1605, type: !1112)
!8187 = !DILocation(line: 1605, column: 15, scope: !8184)
!8188 = !DILocalVariable(name: "oldop0", scope: !8184, file: !3, line: 1606, type: !1123)
!8189 = !DILocation(line: 1606, column: 11, scope: !8184)
!8190 = !DILocation(line: 1606, column: 20, scope: !8184)
!8191 = !DILocation(line: 1606, column: 29, scope: !8184)
!8192 = !DILocalVariable(name: "oldop1", scope: !8184, file: !3, line: 1607, type: !1123)
!8193 = !DILocation(line: 1607, column: 11, scope: !8184)
!8194 = !DILocation(line: 1607, column: 20, scope: !8184)
!8195 = !DILocation(line: 1607, column: 29, scope: !8184)
!8196 = !DILocalVariable(name: "oldop2", scope: !8184, file: !3, line: 1608, type: !1123)
!8197 = !DILocation(line: 1608, column: 11, scope: !8184)
!8198 = !DILocation(line: 1608, column: 20, scope: !8184)
!8199 = !DILocation(line: 1608, column: 29, scope: !8184)
!8200 = !DILocalVariable(name: "op0", scope: !8184, file: !3, line: 1609, type: !1123)
!8201 = !DILocation(line: 1609, column: 11, scope: !8184)
!8202 = !DILocation(line: 1609, column: 17, scope: !8184)
!8203 = !DILocalVariable(name: "op1", scope: !8184, file: !3, line: 1610, type: !1123)
!8204 = !DILocation(line: 1610, column: 11, scope: !8184)
!8205 = !DILocation(line: 1610, column: 17, scope: !8184)
!8206 = !DILocalVariable(name: "op2", scope: !8184, file: !3, line: 1611, type: !1123)
!8207 = !DILocation(line: 1611, column: 11, scope: !8184)
!8208 = !DILocation(line: 1611, column: 17, scope: !8184)
!8209 = !DILocalVariable(name: "type", scope: !8184, file: !3, line: 1612, type: !1123)
!8210 = !DILocation(line: 1612, column: 11, scope: !8184)
!8211 = !DILocation(line: 1612, column: 18, scope: !8184)
!8212 = !DILocation(line: 1612, column: 27, scope: !8184)
!8213 = !DILocalVariable(name: "newop", scope: !8184, file: !3, line: 1613, type: !2450)
!8214 = !DILocation(line: 1613, column: 24, scope: !8184)
!8215 = !DILocation(line: 1613, column: 33, scope: !8184)
!8216 = !DILocation(line: 1613, column: 32, scope: !8184)
!8217 = !DILocation(line: 1615, column: 10, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1615, column: 10)
!8219 = !DILocation(line: 1615, column: 14, scope: !8218)
!8220 = !DILocation(line: 1615, column: 17, scope: !8218)
!8221 = !DILocation(line: 1615, column: 33, scope: !8218)
!8222 = !DILocation(line: 1615, column: 10, scope: !8184)
!8223 = !DILocalVariable(name: "op_val_id", scope: !8224, file: !3, line: 1617, type: !6)
!8224 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 1616, column: 8)
!8225 = !DILocation(line: 1617, column: 16, scope: !8224)
!8226 = !DILocation(line: 1617, column: 37, scope: !8224)
!8227 = !DILocation(line: 1617, column: 28, scope: !8224)
!8228 = !DILocation(line: 1617, column: 43, scope: !8224)
!8229 = !DILocation(line: 1618, column: 33, scope: !8224)
!8230 = !DILocation(line: 1618, column: 44, scope: !8224)
!8231 = !DILocation(line: 1618, column: 50, scope: !8224)
!8232 = !DILocation(line: 1618, column: 12, scope: !8224)
!8233 = !DILocation(line: 1618, column: 10, scope: !8224)
!8234 = !DILocation(line: 1619, column: 29, scope: !8224)
!8235 = !DILocation(line: 1619, column: 37, scope: !8224)
!8236 = !DILocation(line: 1619, column: 43, scope: !8224)
!8237 = !DILocation(line: 1619, column: 49, scope: !8224)
!8238 = !DILocation(line: 1619, column: 55, scope: !8224)
!8239 = !DILocation(line: 1619, column: 14, scope: !8224)
!8240 = !DILocation(line: 1619, column: 12, scope: !8224)
!8241 = !DILocation(line: 1620, column: 7, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8224, file: !3, line: 1620, column: 7)
!8243 = !DILocation(line: 1620, column: 16, scope: !8242)
!8244 = !DILocation(line: 1620, column: 19, scope: !8242)
!8245 = !DILocation(line: 1620, column: 31, scope: !8242)
!8246 = !DILocation(line: 1620, column: 28, scope: !8242)
!8247 = !DILocation(line: 1620, column: 7, scope: !8224)
!8248 = !DILocalVariable(name: "name", scope: !8249, file: !3, line: 1622, type: !1123)
!8249 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 1621, column: 5)
!8250 = !DILocation(line: 1622, column: 12, scope: !8249)
!8251 = !DILocation(line: 1622, column: 43, scope: !8249)
!8252 = !DILocation(line: 1622, column: 19, scope: !8249)
!8253 = !DILocation(line: 1623, column: 12, scope: !8254)
!8254 = distinct !DILexicalBlock(scope: !8249, file: !3, line: 1623, column: 11)
!8255 = !DILocation(line: 1623, column: 11, scope: !8249)
!8256 = !DILocation(line: 1624, column: 9, scope: !8254)
!8257 = !DILocation(line: 1625, column: 13, scope: !8249)
!8258 = !DILocation(line: 1625, column: 11, scope: !8249)
!8259 = !DILocation(line: 1626, column: 5, scope: !8249)
!8260 = !DILocation(line: 1627, column: 13, scope: !8261)
!8261 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 1627, column: 12)
!8262 = !DILocation(line: 1627, column: 12, scope: !8242)
!8263 = !DILocation(line: 1628, column: 5, scope: !8261)
!8264 = !DILocation(line: 1629, column: 8, scope: !8224)
!8265 = !DILocation(line: 1630, column: 17, scope: !8184)
!8266 = !DILocation(line: 1630, column: 24, scope: !8184)
!8267 = !DILocation(line: 1630, column: 21, scope: !8184)
!8268 = !DILocation(line: 1630, column: 14, scope: !8184)
!8269 = !DILocation(line: 1632, column: 10, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1632, column: 10)
!8271 = !DILocation(line: 1632, column: 14, scope: !8270)
!8272 = !DILocation(line: 1632, column: 17, scope: !8270)
!8273 = !DILocation(line: 1632, column: 33, scope: !8270)
!8274 = !DILocation(line: 1632, column: 10, scope: !8184)
!8275 = !DILocalVariable(name: "op_val_id", scope: !8276, file: !3, line: 1634, type: !6)
!8276 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 1633, column: 8)
!8277 = !DILocation(line: 1634, column: 16, scope: !8276)
!8278 = !DILocation(line: 1634, column: 37, scope: !8276)
!8279 = !DILocation(line: 1634, column: 28, scope: !8276)
!8280 = !DILocation(line: 1634, column: 43, scope: !8276)
!8281 = !DILocation(line: 1635, column: 33, scope: !8276)
!8282 = !DILocation(line: 1635, column: 44, scope: !8276)
!8283 = !DILocation(line: 1635, column: 50, scope: !8276)
!8284 = !DILocation(line: 1635, column: 12, scope: !8276)
!8285 = !DILocation(line: 1635, column: 10, scope: !8276)
!8286 = !DILocation(line: 1636, column: 29, scope: !8276)
!8287 = !DILocation(line: 1636, column: 37, scope: !8276)
!8288 = !DILocation(line: 1636, column: 43, scope: !8276)
!8289 = !DILocation(line: 1636, column: 49, scope: !8276)
!8290 = !DILocation(line: 1636, column: 55, scope: !8276)
!8291 = !DILocation(line: 1636, column: 14, scope: !8276)
!8292 = !DILocation(line: 1636, column: 12, scope: !8276)
!8293 = !DILocation(line: 1637, column: 7, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 1637, column: 7)
!8295 = !DILocation(line: 1637, column: 16, scope: !8294)
!8296 = !DILocation(line: 1637, column: 19, scope: !8294)
!8297 = !DILocation(line: 1637, column: 31, scope: !8294)
!8298 = !DILocation(line: 1637, column: 28, scope: !8294)
!8299 = !DILocation(line: 1637, column: 7, scope: !8276)
!8300 = !DILocalVariable(name: "name", scope: !8301, file: !3, line: 1639, type: !1123)
!8301 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 1638, column: 5)
!8302 = !DILocation(line: 1639, column: 12, scope: !8301)
!8303 = !DILocation(line: 1639, column: 43, scope: !8301)
!8304 = !DILocation(line: 1639, column: 19, scope: !8301)
!8305 = !DILocation(line: 1640, column: 12, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8301, file: !3, line: 1640, column: 11)
!8307 = !DILocation(line: 1640, column: 11, scope: !8301)
!8308 = !DILocation(line: 1641, column: 9, scope: !8306)
!8309 = !DILocation(line: 1642, column: 13, scope: !8301)
!8310 = !DILocation(line: 1642, column: 11, scope: !8301)
!8311 = !DILocation(line: 1643, column: 5, scope: !8301)
!8312 = !DILocation(line: 1644, column: 13, scope: !8313)
!8313 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 1644, column: 12)
!8314 = !DILocation(line: 1644, column: 12, scope: !8294)
!8315 = !DILocation(line: 1645, column: 5, scope: !8313)
!8316 = !DILocation(line: 1646, column: 8, scope: !8276)
!8317 = !DILocation(line: 1648, column: 15, scope: !8318)
!8318 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 1648, column: 15)
!8319 = !DILocation(line: 1648, column: 19, scope: !8318)
!8320 = !DILocation(line: 1648, column: 48, scope: !8318)
!8321 = !DILocation(line: 1648, column: 23, scope: !8318)
!8322 = !DILocation(line: 1648, column: 15, scope: !8270)
!8323 = !DILocation(line: 1649, column: 8, scope: !8318)
!8324 = !DILocation(line: 1650, column: 17, scope: !8184)
!8325 = !DILocation(line: 1650, column: 24, scope: !8184)
!8326 = !DILocation(line: 1650, column: 21, scope: !8184)
!8327 = !DILocation(line: 1650, column: 14, scope: !8184)
!8328 = !DILocation(line: 1651, column: 10, scope: !8329)
!8329 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1651, column: 10)
!8330 = !DILocation(line: 1651, column: 14, scope: !8329)
!8331 = !DILocation(line: 1651, column: 17, scope: !8329)
!8332 = !DILocation(line: 1651, column: 33, scope: !8329)
!8333 = !DILocation(line: 1651, column: 10, scope: !8184)
!8334 = !DILocalVariable(name: "op_val_id", scope: !8335, file: !3, line: 1653, type: !6)
!8335 = distinct !DILexicalBlock(scope: !8329, file: !3, line: 1652, column: 8)
!8336 = !DILocation(line: 1653, column: 16, scope: !8335)
!8337 = !DILocation(line: 1653, column: 37, scope: !8335)
!8338 = !DILocation(line: 1653, column: 28, scope: !8335)
!8339 = !DILocation(line: 1653, column: 43, scope: !8335)
!8340 = !DILocation(line: 1654, column: 33, scope: !8335)
!8341 = !DILocation(line: 1654, column: 44, scope: !8335)
!8342 = !DILocation(line: 1654, column: 50, scope: !8335)
!8343 = !DILocation(line: 1654, column: 12, scope: !8335)
!8344 = !DILocation(line: 1654, column: 10, scope: !8335)
!8345 = !DILocation(line: 1655, column: 29, scope: !8335)
!8346 = !DILocation(line: 1655, column: 37, scope: !8335)
!8347 = !DILocation(line: 1655, column: 43, scope: !8335)
!8348 = !DILocation(line: 1655, column: 49, scope: !8335)
!8349 = !DILocation(line: 1655, column: 55, scope: !8335)
!8350 = !DILocation(line: 1655, column: 14, scope: !8335)
!8351 = !DILocation(line: 1655, column: 12, scope: !8335)
!8352 = !DILocation(line: 1656, column: 7, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8335, file: !3, line: 1656, column: 7)
!8354 = !DILocation(line: 1656, column: 16, scope: !8353)
!8355 = !DILocation(line: 1656, column: 19, scope: !8353)
!8356 = !DILocation(line: 1656, column: 31, scope: !8353)
!8357 = !DILocation(line: 1656, column: 28, scope: !8353)
!8358 = !DILocation(line: 1656, column: 7, scope: !8335)
!8359 = !DILocalVariable(name: "name", scope: !8360, file: !3, line: 1658, type: !1123)
!8360 = distinct !DILexicalBlock(scope: !8353, file: !3, line: 1657, column: 5)
!8361 = !DILocation(line: 1658, column: 12, scope: !8360)
!8362 = !DILocation(line: 1658, column: 43, scope: !8360)
!8363 = !DILocation(line: 1658, column: 19, scope: !8360)
!8364 = !DILocation(line: 1659, column: 12, scope: !8365)
!8365 = distinct !DILexicalBlock(scope: !8360, file: !3, line: 1659, column: 11)
!8366 = !DILocation(line: 1659, column: 11, scope: !8360)
!8367 = !DILocation(line: 1660, column: 9, scope: !8365)
!8368 = !DILocation(line: 1661, column: 13, scope: !8360)
!8369 = !DILocation(line: 1661, column: 11, scope: !8360)
!8370 = !DILocation(line: 1662, column: 5, scope: !8360)
!8371 = !DILocation(line: 1663, column: 13, scope: !8372)
!8372 = distinct !DILexicalBlock(scope: !8353, file: !3, line: 1663, column: 12)
!8373 = !DILocation(line: 1663, column: 12, scope: !8353)
!8374 = !DILocation(line: 1664, column: 5, scope: !8372)
!8375 = !DILocation(line: 1665, column: 8, scope: !8335)
!8376 = !DILocation(line: 1667, column: 15, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8329, file: !3, line: 1667, column: 15)
!8378 = !DILocation(line: 1667, column: 19, scope: !8377)
!8379 = !DILocation(line: 1667, column: 48, scope: !8377)
!8380 = !DILocation(line: 1667, column: 23, scope: !8377)
!8381 = !DILocation(line: 1667, column: 15, scope: !8329)
!8382 = !DILocation(line: 1668, column: 8, scope: !8377)
!8383 = !DILocation(line: 1669, column: 17, scope: !8184)
!8384 = !DILocation(line: 1669, column: 24, scope: !8184)
!8385 = !DILocation(line: 1669, column: 21, scope: !8184)
!8386 = !DILocation(line: 1669, column: 14, scope: !8184)
!8387 = !DILocation(line: 1671, column: 11, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1671, column: 10)
!8389 = !DILocation(line: 1671, column: 10, scope: !8184)
!8390 = !DILocation(line: 1672, column: 22, scope: !8388)
!8391 = !DILocation(line: 1672, column: 20, scope: !8388)
!8392 = !DILocation(line: 1672, column: 8, scope: !8388)
!8393 = !DILocation(line: 1674, column: 16, scope: !8394)
!8394 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1674, column: 10)
!8395 = !DILocation(line: 1674, column: 23, scope: !8394)
!8396 = !DILocation(line: 1674, column: 35, scope: !8394)
!8397 = !DILocation(line: 1674, column: 38, scope: !8394)
!8398 = !DILocation(line: 1674, column: 54, scope: !8394)
!8399 = !DILocation(line: 1674, column: 10, scope: !8184)
!8400 = !DILocation(line: 1675, column: 23, scope: !8394)
!8401 = !DILocation(line: 1675, column: 14, scope: !8394)
!8402 = !DILocation(line: 1675, column: 21, scope: !8394)
!8403 = !DILocation(line: 1675, column: 8, scope: !8394)
!8404 = !DILocation(line: 1676, column: 19, scope: !8184)
!8405 = !DILocation(line: 1676, column: 12, scope: !8184)
!8406 = !DILocation(line: 1676, column: 17, scope: !8184)
!8407 = !DILocation(line: 1677, column: 18, scope: !8184)
!8408 = !DILocation(line: 1677, column: 12, scope: !8184)
!8409 = !DILocation(line: 1677, column: 16, scope: !8184)
!8410 = !DILocation(line: 1678, column: 18, scope: !8184)
!8411 = !DILocation(line: 1678, column: 12, scope: !8184)
!8412 = !DILocation(line: 1678, column: 16, scope: !8184)
!8413 = !DILocation(line: 1679, column: 18, scope: !8184)
!8414 = !DILocation(line: 1679, column: 12, scope: !8184)
!8415 = !DILocation(line: 1679, column: 16, scope: !8184)
!8416 = !DILocation(line: 1680, column: 6, scope: !8184)
!8417 = !DILocation(line: 1683, column: 10, scope: !8418)
!8418 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1683, column: 10)
!8419 = !DILocation(line: 1683, column: 12, scope: !8418)
!8420 = !DILocation(line: 1683, column: 16, scope: !8418)
!8421 = !DILocation(line: 1683, column: 19, scope: !8418)
!8422 = !DILocation(line: 1683, column: 23, scope: !8418)
!8423 = !DILocation(line: 1683, column: 26, scope: !8418)
!8424 = !DILocation(line: 1683, column: 42, scope: !8418)
!8425 = !DILocation(line: 1684, column: 3, scope: !8418)
!8426 = !DILocation(line: 1684, column: 6, scope: !8418)
!8427 = !DILocation(line: 1685, column: 31, scope: !8418)
!8428 = !DILocation(line: 1685, column: 38, scope: !8418)
!8429 = !DILocation(line: 1683, column: 10, scope: !8184)
!8430 = !DILocation(line: 1686, column: 8, scope: !8418)
!8431 = !DILocation(line: 1687, column: 4, scope: !8184)
!8432 = !DILocation(line: 1602, column: 63, scope: !8181)
!8433 = !DILocation(line: 1602, column: 68, scope: !8181)
!8434 = !DILocation(line: 1601, column: 2, scope: !8181)
!8435 = distinct !{!8435, !8182, !8436}
!8436 = !DILocation(line: 1687, column: 4, scope: !8177)
!8437 = !DILocation(line: 1688, column: 6, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1688, column: 6)
!8439 = !DILocation(line: 1688, column: 11, scope: !8438)
!8440 = !DILocation(line: 1688, column: 8, scope: !8438)
!8441 = !DILocation(line: 1688, column: 6, scope: !8148)
!8442 = !DILocation(line: 1690, column: 10, scope: !8443)
!8443 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 1690, column: 10)
!8444 = distinct !DILexicalBlock(scope: !8438, file: !3, line: 1689, column: 4)
!8445 = !DILocation(line: 1690, column: 10, scope: !8444)
!8446 = !DILocation(line: 1691, column: 8, scope: !8443)
!8447 = !DILocation(line: 1692, column: 6, scope: !8444)
!8448 = !DILocation(line: 1695, column: 6, scope: !8449)
!8449 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1695, column: 6)
!8450 = !DILocation(line: 1695, column: 6, scope: !8148)
!8451 = !DILocation(line: 1697, column: 46, scope: !8452)
!8452 = distinct !DILexicalBlock(scope: !8449, file: !3, line: 1696, column: 4)
!8453 = !DILocation(line: 1698, column: 11, scope: !8452)
!8454 = !DILocation(line: 1698, column: 16, scope: !8452)
!8455 = !DILocation(line: 1698, column: 21, scope: !8452)
!8456 = !DILocation(line: 1698, column: 26, scope: !8452)
!8457 = !DILocation(line: 1699, column: 11, scope: !8452)
!8458 = !DILocation(line: 1699, column: 17, scope: !8452)
!8459 = !DILocation(line: 1699, column: 27, scope: !8452)
!8460 = !DILocation(line: 1697, column: 16, scope: !8452)
!8461 = !DILocation(line: 1697, column: 14, scope: !8452)
!8462 = !DILocation(line: 1701, column: 10, scope: !8463)
!8463 = distinct !DILexicalBlock(scope: !8452, file: !3, line: 1701, column: 10)
!8464 = !DILocation(line: 1701, column: 18, scope: !8463)
!8465 = !DILocation(line: 1701, column: 10, scope: !8452)
!8466 = !DILocation(line: 1703, column: 3, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8463, file: !3, line: 1702, column: 8)
!8468 = !DILocation(line: 1704, column: 3, scope: !8467)
!8469 = !DILocation(line: 1706, column: 4, scope: !8452)
!8470 = !DILocation(line: 1708, column: 6, scope: !8471)
!8471 = distinct !DILexicalBlock(scope: !8148, file: !3, line: 1708, column: 6)
!8472 = !DILocation(line: 1708, column: 14, scope: !8471)
!8473 = !DILocation(line: 1708, column: 17, scope: !8471)
!8474 = !DILocation(line: 1708, column: 28, scope: !8471)
!8475 = !DILocation(line: 1708, column: 25, scope: !8471)
!8476 = !DILocation(line: 1708, column: 6, scope: !8148)
!8477 = !DILocalVariable(name: "new_val_id", scope: !8478, file: !3, line: 1710, type: !6)
!8478 = distinct !DILexicalBlock(scope: !8471, file: !3, line: 1709, column: 4)
!8479 = !DILocation(line: 1710, column: 19, scope: !8478)
!8480 = !DILocalVariable(name: "constant", scope: !8478, file: !3, line: 1711, type: !1112)
!8481 = !DILocation(line: 1711, column: 15, scope: !8478)
!8482 = !DILocalVariable(name: "result", scope: !8478, file: !3, line: 1713, type: !1123)
!8483 = !DILocation(line: 1713, column: 11, scope: !8478)
!8484 = !DILocation(line: 1713, column: 48, scope: !8478)
!8485 = !DILocation(line: 1713, column: 57, scope: !8478)
!8486 = !DILocation(line: 1713, column: 62, scope: !8478)
!8487 = !DILocation(line: 1714, column: 13, scope: !8478)
!8488 = !DILocation(line: 1714, column: 18, scope: !8478)
!8489 = !DILocation(line: 1715, column: 13, scope: !8478)
!8490 = !DILocation(line: 1713, column: 20, scope: !8478)
!8491 = !DILocation(line: 1717, column: 10, scope: !8492)
!8492 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 1717, column: 10)
!8493 = !DILocation(line: 1717, column: 10, scope: !8478)
!8494 = !DILocation(line: 1718, column: 8, scope: !8492)
!8495 = !DILocation(line: 1720, column: 10, scope: !8496)
!8496 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 1720, column: 10)
!8497 = !DILocation(line: 1720, column: 17, scope: !8496)
!8498 = !DILocation(line: 1720, column: 45, scope: !8496)
!8499 = !DILocation(line: 1720, column: 20, scope: !8496)
!8500 = !DILocation(line: 1720, column: 10, scope: !8478)
!8501 = !DILocation(line: 1722, column: 10, scope: !8502)
!8502 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 1721, column: 8)
!8503 = !DILocation(line: 1723, column: 49, scope: !8502)
!8504 = !DILocation(line: 1723, column: 17, scope: !8502)
!8505 = !DILocation(line: 1723, column: 10, scope: !8502)
!8506 = !DILocation(line: 1726, column: 36, scope: !8478)
!8507 = !DILocation(line: 1726, column: 24, scope: !8478)
!8508 = !DILocation(line: 1726, column: 13, scope: !8478)
!8509 = !DILocation(line: 1726, column: 11, scope: !8478)
!8510 = !DILocation(line: 1727, column: 6, scope: !8478)
!8511 = !DILocation(line: 1727, column: 12, scope: !8478)
!8512 = !DILocation(line: 1727, column: 17, scope: !8478)
!8513 = !DILocation(line: 1728, column: 6, scope: !8478)
!8514 = !DILocation(line: 1728, column: 12, scope: !8478)
!8515 = !DILocation(line: 1728, column: 15, scope: !8478)
!8516 = !DILocation(line: 1730, column: 10, scope: !8517)
!8517 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 1730, column: 10)
!8518 = !DILocation(line: 1730, column: 10, scope: !8478)
!8519 = !DILocation(line: 1732, column: 31, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 1731, column: 8)
!8521 = !DILocation(line: 1732, column: 3, scope: !8520)
!8522 = !DILocation(line: 1732, column: 29, scope: !8520)
!8523 = !DILocation(line: 1733, column: 41, scope: !8520)
!8524 = !DILocation(line: 1733, column: 14, scope: !8520)
!8525 = !DILocation(line: 1733, column: 12, scope: !8520)
!8526 = !DILocation(line: 1734, column: 7, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 1734, column: 7)
!8528 = !DILocation(line: 1734, column: 19, scope: !8527)
!8529 = !DILocation(line: 1734, column: 16, scope: !8527)
!8530 = !DILocation(line: 1734, column: 7, scope: !8520)
!8531 = !DILocation(line: 1735, column: 12, scope: !8527)
!8532 = !DILocation(line: 1735, column: 5, scope: !8527)
!8533 = !DILocation(line: 1737, column: 16, scope: !8520)
!8534 = !DILocation(line: 1737, column: 24, scope: !8520)
!8535 = !DILocation(line: 1737, column: 14, scope: !8520)
!8536 = !DILocation(line: 1738, column: 31, scope: !8520)
!8537 = !DILocation(line: 1738, column: 3, scope: !8520)
!8538 = !DILocation(line: 1739, column: 8, scope: !8520)
!8539 = !DILocation(line: 1742, column: 7, scope: !8540)
!8540 = distinct !DILexicalBlock(scope: !8541, file: !3, line: 1742, column: 7)
!8541 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 1741, column: 8)
!8542 = !DILocation(line: 1742, column: 15, scope: !8540)
!8543 = !DILocation(line: 1742, column: 19, scope: !8540)
!8544 = !DILocation(line: 1742, column: 7, scope: !8541)
!8545 = !DILocation(line: 1744, column: 20, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !8540, file: !3, line: 1743, column: 5)
!8547 = !DILocation(line: 1744, column: 18, scope: !8546)
!8548 = !DILocation(line: 1745, column: 7, scope: !8546)
!8549 = !DILocation(line: 1748, column: 5, scope: !8546)
!8550 = !DILocation(line: 1750, column: 18, scope: !8540)
!8551 = !DILocation(line: 1750, column: 23, scope: !8540)
!8552 = !DILocation(line: 1750, column: 16, scope: !8540)
!8553 = !DILocation(line: 1751, column: 40, scope: !8541)
!8554 = !DILocation(line: 1751, column: 49, scope: !8541)
!8555 = !DILocation(line: 1751, column: 54, scope: !8541)
!8556 = !DILocation(line: 1752, column: 12, scope: !8541)
!8557 = !DILocation(line: 1752, column: 17, scope: !8541)
!8558 = !DILocation(line: 1753, column: 12, scope: !8541)
!8559 = !DILocation(line: 1754, column: 12, scope: !8541)
!8560 = !DILocation(line: 1754, column: 20, scope: !8541)
!8561 = !DILocation(line: 1751, column: 12, scope: !8541)
!8562 = !DILocation(line: 1751, column: 10, scope: !8541)
!8563 = !DILocation(line: 1755, column: 15, scope: !8541)
!8564 = !DILocation(line: 1756, column: 31, scope: !8541)
!8565 = !DILocation(line: 1756, column: 3, scope: !8541)
!8566 = !DILocation(line: 1756, column: 29, scope: !8541)
!8567 = !DILocation(line: 1757, column: 41, scope: !8541)
!8568 = !DILocation(line: 1757, column: 14, scope: !8541)
!8569 = !DILocation(line: 1757, column: 12, scope: !8541)
!8570 = !DILocation(line: 1758, column: 7, scope: !8571)
!8571 = distinct !DILexicalBlock(scope: !8541, file: !3, line: 1758, column: 7)
!8572 = !DILocation(line: 1758, column: 19, scope: !8571)
!8573 = !DILocation(line: 1758, column: 16, scope: !8571)
!8574 = !DILocation(line: 1758, column: 7, scope: !8541)
!8575 = !DILocation(line: 1759, column: 12, scope: !8571)
!8576 = !DILocation(line: 1759, column: 5, scope: !8571)
!8577 = !DILocation(line: 1760, column: 31, scope: !8541)
!8578 = !DILocation(line: 1760, column: 3, scope: !8541)
!8579 = !DILocation(line: 1762, column: 20, scope: !8478)
!8580 = !DILocation(line: 1762, column: 32, scope: !8478)
!8581 = !DILocation(line: 1762, column: 6, scope: !8478)
!8582 = !DILocation(line: 1763, column: 4, scope: !8478)
!8583 = !DILocation(line: 1764, column: 2, scope: !8148)
!8584 = !DILocation(line: 1765, column: 9, scope: !8148)
!8585 = !DILocation(line: 1765, column: 2, scope: !8148)
!8586 = !DILocalVariable(name: "phi", scope: !8587, file: !3, line: 1771, type: !1386)
!8587 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 1770, column: 7)
!8588 = !DILocation(line: 1771, column: 9, scope: !8587)
!8589 = !DILocalVariable(name: "e", scope: !8587, file: !3, line: 1772, type: !1366)
!8590 = !DILocation(line: 1772, column: 7, scope: !8587)
!8591 = !DILocalVariable(name: "def_stmt", scope: !8587, file: !3, line: 1773, type: !1386)
!8592 = !DILocation(line: 1773, column: 9, scope: !8587)
!8593 = !DILocalVariable(name: "name", scope: !8587, file: !3, line: 1774, type: !1123)
!8594 = !DILocation(line: 1774, column: 7, scope: !8587)
!8595 = !DILocation(line: 1774, column: 14, scope: !8587)
!8596 = !DILocation(line: 1776, column: 13, scope: !8587)
!8597 = !DILocation(line: 1776, column: 11, scope: !8587)
!8598 = !DILocation(line: 1777, column: 19, scope: !8599)
!8599 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 1777, column: 6)
!8600 = !DILocation(line: 1777, column: 6, scope: !8599)
!8601 = !DILocation(line: 1777, column: 29, scope: !8599)
!8602 = !DILocation(line: 1778, column: 6, scope: !8599)
!8603 = !DILocation(line: 1778, column: 20, scope: !8599)
!8604 = !DILocation(line: 1778, column: 9, scope: !8599)
!8605 = !DILocation(line: 1778, column: 33, scope: !8599)
!8606 = !DILocation(line: 1778, column: 30, scope: !8599)
!8607 = !DILocation(line: 1777, column: 6, scope: !8587)
!8608 = !DILocation(line: 1779, column: 10, scope: !8599)
!8609 = !DILocation(line: 1779, column: 8, scope: !8599)
!8610 = !DILocation(line: 1779, column: 4, scope: !8599)
!8611 = !DILocation(line: 1781, column: 11, scope: !8599)
!8612 = !DILocation(line: 1781, column: 4, scope: !8599)
!8613 = !DILocation(line: 1783, column: 17, scope: !8587)
!8614 = !DILocation(line: 1783, column: 34, scope: !8587)
!8615 = !DILocation(line: 1783, column: 23, scope: !8587)
!8616 = !DILocation(line: 1783, column: 6, scope: !8587)
!8617 = !DILocation(line: 1783, column: 4, scope: !8587)
!8618 = !DILocation(line: 1784, column: 6, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 1784, column: 6)
!8620 = !DILocation(line: 1784, column: 6, scope: !8587)
!8621 = !DILocalVariable(name: "def", scope: !8622, file: !3, line: 1786, type: !1123)
!8622 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 1785, column: 4)
!8623 = !DILocation(line: 1786, column: 11, scope: !8622)
!8624 = !DILocation(line: 1786, column: 17, scope: !8622)
!8625 = !DILocalVariable(name: "newexpr", scope: !8622, file: !3, line: 1787, type: !1112)
!8626 = !DILocation(line: 1787, column: 15, scope: !8622)
!8627 = !DILocation(line: 1789, column: 10, scope: !8628)
!8628 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1789, column: 10)
!8629 = !DILocation(line: 1789, column: 26, scope: !8628)
!8630 = !DILocation(line: 1789, column: 10, scope: !8622)
!8631 = !DILocation(line: 1790, column: 23, scope: !8628)
!8632 = !DILocation(line: 1790, column: 14, scope: !8628)
!8633 = !DILocation(line: 1790, column: 29, scope: !8628)
!8634 = !DILocation(line: 1790, column: 12, scope: !8628)
!8635 = !DILocation(line: 1790, column: 8, scope: !8628)
!8636 = !DILocation(line: 1793, column: 35, scope: !8637)
!8637 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1793, column: 10)
!8638 = !DILocation(line: 1793, column: 10, scope: !8637)
!8639 = !DILocation(line: 1793, column: 10, scope: !8622)
!8640 = !DILocation(line: 1794, column: 47, scope: !8637)
!8641 = !DILocation(line: 1794, column: 15, scope: !8637)
!8642 = !DILocation(line: 1794, column: 8, scope: !8637)
!8643 = !DILocation(line: 1796, column: 10, scope: !8644)
!8644 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1796, column: 10)
!8645 = !DILocation(line: 1796, column: 26, scope: !8644)
!8646 = !DILocation(line: 1796, column: 38, scope: !8644)
!8647 = !DILocation(line: 1796, column: 64, scope: !8644)
!8648 = !DILocation(line: 1796, column: 41, scope: !8644)
!8649 = !DILocation(line: 1796, column: 10, scope: !8622)
!8650 = !DILocation(line: 1797, column: 8, scope: !8644)
!8651 = !DILocation(line: 1799, column: 44, scope: !8622)
!8652 = !DILocation(line: 1799, column: 16, scope: !8622)
!8653 = !DILocation(line: 1799, column: 14, scope: !8622)
!8654 = !DILocation(line: 1800, column: 13, scope: !8622)
!8655 = !DILocation(line: 1800, column: 6, scope: !8622)
!8656 = !DILocation(line: 1803, column: 14, scope: !7949)
!8657 = !DILocation(line: 1803, column: 7, scope: !7949)
!8658 = !DILocation(line: 1806, column: 7, scope: !7949)
!8659 = !DILocation(line: 1807, column: 5, scope: !7949)
!8660 = !DILocation(line: 1809, column: 5, scope: !7933)
!8661 = !DILocation(line: 1811, column: 1, scope: !7933)
!8662 = distinct !DISubprogram(name: "phi_trans_add", scope: !3, file: !3, line: 576, type: !8663, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!8663 = !DISubroutineType(types: !8664)
!8664 = !{null, !1112, !1112, !1838}
!8665 = !DILocalVariable(name: "e", arg: 1, scope: !8662, file: !3, line: 576, type: !1112)
!8666 = !DILocation(line: 576, column: 25, scope: !8662)
!8667 = !DILocalVariable(name: "v", arg: 2, scope: !8662, file: !3, line: 576, type: !1112)
!8668 = !DILocation(line: 576, column: 37, scope: !8662)
!8669 = !DILocalVariable(name: "pred", arg: 3, scope: !8662, file: !3, line: 576, type: !1838)
!8670 = !DILocation(line: 576, column: 52, scope: !8662)
!8671 = !DILocalVariable(name: "slot", scope: !8662, file: !3, line: 578, type: !1893)
!8672 = !DILocation(line: 578, column: 10, scope: !8662)
!8673 = !DILocalVariable(name: "new_pair", scope: !8662, file: !3, line: 579, type: !2531)
!8674 = !DILocation(line: 579, column: 21, scope: !8662)
!8675 = !DILocation(line: 579, column: 32, scope: !8662)
!8676 = !DILocation(line: 580, column: 17, scope: !8662)
!8677 = !DILocation(line: 580, column: 3, scope: !8662)
!8678 = !DILocation(line: 580, column: 13, scope: !8662)
!8679 = !DILocation(line: 580, column: 15, scope: !8662)
!8680 = !DILocation(line: 581, column: 20, scope: !8662)
!8681 = !DILocation(line: 581, column: 3, scope: !8662)
!8682 = !DILocation(line: 581, column: 13, scope: !8662)
!8683 = !DILocation(line: 581, column: 18, scope: !8662)
!8684 = !DILocation(line: 582, column: 17, scope: !8662)
!8685 = !DILocation(line: 582, column: 3, scope: !8662)
!8686 = !DILocation(line: 582, column: 13, scope: !8662)
!8687 = !DILocation(line: 582, column: 15, scope: !8662)
!8688 = !DILocation(line: 583, column: 65, scope: !8662)
!8689 = !DILocation(line: 583, column: 50, scope: !8662)
!8690 = !DILocation(line: 584, column: 8, scope: !8662)
!8691 = !DILocation(line: 584, column: 14, scope: !8662)
!8692 = !DILocation(line: 583, column: 24, scope: !8662)
!8693 = !DILocation(line: 583, column: 3, scope: !8662)
!8694 = !DILocation(line: 583, column: 13, scope: !8662)
!8695 = !DILocation(line: 583, column: 22, scope: !8662)
!8696 = !DILocation(line: 586, column: 36, scope: !8662)
!8697 = !DILocation(line: 586, column: 57, scope: !8662)
!8698 = !DILocation(line: 587, column: 8, scope: !8662)
!8699 = !DILocation(line: 587, column: 18, scope: !8662)
!8700 = !DILocation(line: 586, column: 10, scope: !8662)
!8701 = !DILocation(line: 586, column: 8, scope: !8662)
!8702 = !DILocation(line: 588, column: 8, scope: !8703)
!8703 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 588, column: 7)
!8704 = !DILocation(line: 588, column: 7, scope: !8703)
!8705 = !DILocation(line: 588, column: 7, scope: !8662)
!8706 = !DILocation(line: 589, column: 12, scope: !8703)
!8707 = !DILocation(line: 589, column: 11, scope: !8703)
!8708 = !DILocation(line: 589, column: 5, scope: !8703)
!8709 = !DILocation(line: 590, column: 20, scope: !8662)
!8710 = !DILocation(line: 590, column: 11, scope: !8662)
!8711 = !DILocation(line: 590, column: 4, scope: !8662)
!8712 = !DILocation(line: 590, column: 9, scope: !8662)
!8713 = !DILocation(line: 591, column: 1, scope: !8662)
!8714 = distinct !DISubprogram(name: "find_leader_in_sets", scope: !3, file: !3, line: 1371, type: !8715, scopeLine: 1372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!8715 = !DISubroutineType(types: !8716)
!8716 = !{!1112, !6, !1038, !1038}
!8717 = !DILocalVariable(name: "val", arg: 1, scope: !8714, file: !3, line: 1371, type: !6)
!8718 = !DILocation(line: 1371, column: 35, scope: !8714)
!8719 = !DILocalVariable(name: "set1", arg: 2, scope: !8714, file: !3, line: 1371, type: !1038)
!8720 = !DILocation(line: 1371, column: 53, scope: !8714)
!8721 = !DILocalVariable(name: "set2", arg: 3, scope: !8714, file: !3, line: 1371, type: !1038)
!8722 = !DILocation(line: 1371, column: 72, scope: !8714)
!8723 = !DILocalVariable(name: "result", scope: !8714, file: !3, line: 1373, type: !1112)
!8724 = !DILocation(line: 1373, column: 12, scope: !8714)
!8725 = !DILocation(line: 1375, column: 32, scope: !8714)
!8726 = !DILocation(line: 1375, column: 38, scope: !8714)
!8727 = !DILocation(line: 1375, column: 12, scope: !8714)
!8728 = !DILocation(line: 1375, column: 10, scope: !8714)
!8729 = !DILocation(line: 1376, column: 8, scope: !8730)
!8730 = distinct !DILexicalBlock(scope: !8714, file: !3, line: 1376, column: 7)
!8731 = !DILocation(line: 1376, column: 15, scope: !8730)
!8732 = !DILocation(line: 1376, column: 18, scope: !8730)
!8733 = !DILocation(line: 1376, column: 7, scope: !8714)
!8734 = !DILocation(line: 1377, column: 34, scope: !8730)
!8735 = !DILocation(line: 1377, column: 40, scope: !8730)
!8736 = !DILocation(line: 1377, column: 14, scope: !8730)
!8737 = !DILocation(line: 1377, column: 12, scope: !8730)
!8738 = !DILocation(line: 1377, column: 5, scope: !8730)
!8739 = !DILocation(line: 1378, column: 10, scope: !8714)
!8740 = !DILocation(line: 1378, column: 3, scope: !8714)
!8741 = distinct !DISubprogram(name: "get_representative_for", scope: !3, file: !3, line: 1412, type: !8742, scopeLine: 1413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!8742 = !DISubroutineType(types: !8743)
!8743 = !{!1123, !2873}
!8744 = !DILocalVariable(name: "e", arg: 1, scope: !8741, file: !3, line: 1412, type: !2873)
!8745 = !DILocation(line: 1412, column: 40, scope: !8741)
!8746 = !DILocalVariable(name: "exprtype", scope: !8741, file: !3, line: 1414, type: !1123)
!8747 = !DILocation(line: 1414, column: 8, scope: !8741)
!8748 = !DILocalVariable(name: "name", scope: !8741, file: !3, line: 1415, type: !1123)
!8749 = !DILocation(line: 1415, column: 8, scope: !8741)
!8750 = !DILocalVariable(name: "value_id", scope: !8741, file: !3, line: 1416, type: !6)
!8751 = !DILocation(line: 1416, column: 16, scope: !8741)
!8752 = !DILocation(line: 1416, column: 46, scope: !8741)
!8753 = !DILocation(line: 1416, column: 27, scope: !8741)
!8754 = !DILocation(line: 1418, column: 11, scope: !8741)
!8755 = !DILocation(line: 1418, column: 14, scope: !8741)
!8756 = !DILocation(line: 1418, column: 3, scope: !8741)
!8757 = !DILocation(line: 1421, column: 14, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 1419, column: 5)
!8759 = !DILocation(line: 1421, column: 7, scope: !8758)
!8760 = !DILocation(line: 1423, column: 14, scope: !8758)
!8761 = !DILocation(line: 1423, column: 7, scope: !8758)
!8762 = !DILocalVariable(name: "i", scope: !8763, file: !3, line: 1429, type: !6)
!8763 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 1426, column: 7)
!8764 = !DILocation(line: 1429, column: 15, scope: !8763)
!8765 = !DILocalVariable(name: "bi", scope: !8763, file: !3, line: 1430, type: !3079)
!8766 = !DILocation(line: 1430, column: 18, scope: !8763)
!8767 = !DILocalVariable(name: "exprs", scope: !8763, file: !3, line: 1431, type: !1038)
!8768 = !DILocation(line: 1431, column: 15, scope: !8763)
!8769 = !DILocation(line: 1431, column: 23, scope: !8763)
!8770 = !DILocation(line: 1433, column: 2, scope: !8771)
!8771 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 1433, column: 2)
!8772 = !DILocation(line: 1433, column: 2, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 1433, column: 2)
!8774 = !DILocalVariable(name: "rep", scope: !8775, file: !3, line: 1435, type: !1112)
!8775 = distinct !DILexicalBlock(scope: !8773, file: !3, line: 1434, column: 4)
!8776 = !DILocation(line: 1435, column: 15, scope: !8775)
!8777 = !DILocation(line: 1435, column: 40, scope: !8775)
!8778 = !DILocation(line: 1435, column: 21, scope: !8775)
!8779 = !DILocation(line: 1436, column: 10, scope: !8780)
!8780 = distinct !DILexicalBlock(scope: !8775, file: !3, line: 1436, column: 10)
!8781 = !DILocation(line: 1436, column: 15, scope: !8780)
!8782 = !DILocation(line: 1436, column: 20, scope: !8780)
!8783 = !DILocation(line: 1436, column: 10, scope: !8775)
!8784 = !DILocation(line: 1437, column: 15, scope: !8780)
!8785 = !DILocation(line: 1437, column: 8, scope: !8780)
!8786 = !DILocation(line: 1438, column: 4, scope: !8775)
!8787 = distinct !{!8787, !8770, !8788}
!8788 = !DILocation(line: 1438, column: 4, scope: !8771)
!8789 = !DILocation(line: 1440, column: 7, scope: !8758)
!8790 = !DILocation(line: 1446, column: 7, scope: !8791)
!8791 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 1446, column: 7)
!8792 = !DILocation(line: 1446, column: 7, scope: !8741)
!8793 = !DILocation(line: 1448, column: 16, scope: !8794)
!8794 = distinct !DILexicalBlock(scope: !8791, file: !3, line: 1447, column: 5)
!8795 = !DILocation(line: 1448, column: 7, scope: !8794)
!8796 = !DILocation(line: 1450, column: 23, scope: !8794)
!8797 = !DILocation(line: 1450, column: 34, scope: !8794)
!8798 = !DILocation(line: 1450, column: 7, scope: !8794)
!8799 = !DILocation(line: 1451, column: 16, scope: !8794)
!8800 = !DILocation(line: 1451, column: 7, scope: !8794)
!8801 = !DILocation(line: 1452, column: 5, scope: !8794)
!8802 = !DILocation(line: 1454, column: 29, scope: !8741)
!8803 = !DILocation(line: 1454, column: 14, scope: !8741)
!8804 = !DILocation(line: 1454, column: 12, scope: !8741)
!8805 = !DILocation(line: 1458, column: 8, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 1458, column: 7)
!8807 = !DILocation(line: 1458, column: 16, scope: !8806)
!8808 = !DILocation(line: 1458, column: 19, scope: !8806)
!8809 = !DILocation(line: 1458, column: 31, scope: !8806)
!8810 = !DILocation(line: 1458, column: 28, scope: !8806)
!8811 = !DILocation(line: 1458, column: 7, scope: !8741)
!8812 = !DILocation(line: 1460, column: 33, scope: !8813)
!8813 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 1459, column: 5)
!8814 = !DILocation(line: 1460, column: 17, scope: !8813)
!8815 = !DILocation(line: 1460, column: 15, scope: !8813)
!8816 = !DILocation(line: 1461, column: 20, scope: !8813)
!8817 = !DILocation(line: 1461, column: 7, scope: !8813)
!8818 = !DILocation(line: 1462, column: 5, scope: !8813)
!8819 = !DILocation(line: 1464, column: 25, scope: !8741)
!8820 = !DILocation(line: 1464, column: 34, scope: !8741)
!8821 = !DILocation(line: 1464, column: 10, scope: !8741)
!8822 = !DILocation(line: 1464, column: 8, scope: !8741)
!8823 = !DILocation(line: 1465, column: 34, scope: !8741)
!8824 = !DILocation(line: 1465, column: 16, scope: !8741)
!8825 = !DILocation(line: 1465, column: 3, scope: !8741)
!8826 = !DILocation(line: 1465, column: 23, scope: !8741)
!8827 = !DILocation(line: 1465, column: 32, scope: !8741)
!8828 = !DILocation(line: 1466, column: 7, scope: !8829)
!8829 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 1466, column: 7)
!8830 = !DILocation(line: 1466, column: 10, scope: !8829)
!8831 = !DILocation(line: 1466, column: 15, scope: !8829)
!8832 = !DILocation(line: 1466, column: 7, scope: !8741)
!8833 = !DILocation(line: 1467, column: 30, scope: !8829)
!8834 = !DILocation(line: 1467, column: 14, scope: !8829)
!8835 = !DILocation(line: 1467, column: 5, scope: !8829)
!8836 = !DILocation(line: 1467, column: 21, scope: !8829)
!8837 = !DILocation(line: 1467, column: 28, scope: !8829)
!8838 = !DILocation(line: 1469, column: 30, scope: !8829)
!8839 = !DILocation(line: 1469, column: 14, scope: !8829)
!8840 = !DILocation(line: 1469, column: 5, scope: !8829)
!8841 = !DILocation(line: 1469, column: 21, scope: !8829)
!8842 = !DILocation(line: 1469, column: 28, scope: !8829)
!8843 = !DILocation(line: 1471, column: 17, scope: !8741)
!8844 = !DILocation(line: 1471, column: 55, scope: !8741)
!8845 = !DILocation(line: 1471, column: 27, scope: !8741)
!8846 = !DILocation(line: 1471, column: 3, scope: !8741)
!8847 = !DILocation(line: 1472, column: 7, scope: !8848)
!8848 = distinct !DILexicalBlock(scope: !8741, file: !3, line: 1472, column: 7)
!8849 = !DILocation(line: 1472, column: 7, scope: !8741)
!8850 = !DILocation(line: 1474, column: 16, scope: !8851)
!8851 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 1473, column: 5)
!8852 = !DILocation(line: 1474, column: 7, scope: !8851)
!8853 = !DILocation(line: 1475, column: 27, scope: !8851)
!8854 = !DILocation(line: 1475, column: 38, scope: !8851)
!8855 = !DILocation(line: 1475, column: 7, scope: !8851)
!8856 = !DILocation(line: 1476, column: 16, scope: !8851)
!8857 = !DILocation(line: 1476, column: 7, scope: !8851)
!8858 = !DILocation(line: 1477, column: 23, scope: !8851)
!8859 = !DILocation(line: 1477, column: 34, scope: !8851)
!8860 = !DILocation(line: 1477, column: 7, scope: !8851)
!8861 = !DILocation(line: 1478, column: 16, scope: !8851)
!8862 = !DILocation(line: 1478, column: 7, scope: !8851)
!8863 = !DILocation(line: 1479, column: 5, scope: !8851)
!8864 = !DILocation(line: 1481, column: 10, scope: !8741)
!8865 = !DILocation(line: 1481, column: 3, scope: !8741)
!8866 = !DILocation(line: 1482, column: 1, scope: !8741)
!8867 = distinct !DISubprogram(name: "get_or_alloc_expr_for_constant", scope: !3, file: !3, line: 1066, type: !6244, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!8868 = !DILocalVariable(name: "constant", arg: 1, scope: !8867, file: !3, line: 1066, type: !1123)
!8869 = !DILocation(line: 1066, column: 38, scope: !8867)
!8870 = !DILocalVariable(name: "result_id", scope: !8867, file: !3, line: 1068, type: !6)
!8871 = !DILocation(line: 1068, column: 16, scope: !8867)
!8872 = !DILocalVariable(name: "value_id", scope: !8867, file: !3, line: 1069, type: !6)
!8873 = !DILocation(line: 1069, column: 16, scope: !8867)
!8874 = !DILocalVariable(name: "expr", scope: !8867, file: !3, line: 1070, type: !1114)
!8875 = !DILocation(line: 1070, column: 21, scope: !8867)
!8876 = !DILocalVariable(name: "newexpr", scope: !8867, file: !3, line: 1071, type: !1112)
!8877 = !DILocation(line: 1071, column: 12, scope: !8867)
!8878 = !DILocation(line: 1073, column: 8, scope: !8867)
!8879 = !DILocation(line: 1073, column: 13, scope: !8867)
!8880 = !DILocation(line: 1074, column: 31, scope: !8867)
!8881 = !DILocation(line: 1074, column: 3, scope: !8867)
!8882 = !DILocation(line: 1074, column: 29, scope: !8867)
!8883 = !DILocation(line: 1075, column: 15, scope: !8867)
!8884 = !DILocation(line: 1075, column: 13, scope: !8867)
!8885 = !DILocation(line: 1076, column: 7, scope: !8886)
!8886 = distinct !DILexicalBlock(scope: !8867, file: !3, line: 1076, column: 7)
!8887 = !DILocation(line: 1076, column: 17, scope: !8886)
!8888 = !DILocation(line: 1076, column: 7, scope: !8867)
!8889 = !DILocation(line: 1077, column: 31, scope: !8886)
!8890 = !DILocation(line: 1077, column: 12, scope: !8886)
!8891 = !DILocation(line: 1077, column: 5, scope: !8886)
!8892 = !DILocation(line: 1079, column: 36, scope: !8867)
!8893 = !DILocation(line: 1079, column: 24, scope: !8867)
!8894 = !DILocation(line: 1079, column: 13, scope: !8867)
!8895 = !DILocation(line: 1079, column: 11, scope: !8867)
!8896 = !DILocation(line: 1080, column: 3, scope: !8867)
!8897 = !DILocation(line: 1080, column: 12, scope: !8867)
!8898 = !DILocation(line: 1080, column: 17, scope: !8867)
!8899 = !DILocation(line: 1081, column: 33, scope: !8867)
!8900 = !DILocation(line: 1081, column: 3, scope: !8867)
!8901 = !DILocation(line: 1081, column: 31, scope: !8867)
!8902 = !DILocation(line: 1082, column: 24, scope: !8867)
!8903 = !DILocation(line: 1082, column: 3, scope: !8867)
!8904 = !DILocation(line: 1083, column: 46, scope: !8867)
!8905 = !DILocation(line: 1083, column: 14, scope: !8867)
!8906 = !DILocation(line: 1083, column: 12, scope: !8867)
!8907 = !DILocation(line: 1084, column: 17, scope: !8867)
!8908 = !DILocation(line: 1084, column: 27, scope: !8867)
!8909 = !DILocation(line: 1084, column: 3, scope: !8867)
!8910 = !DILocation(line: 1085, column: 10, scope: !8867)
!8911 = !DILocation(line: 1085, column: 3, scope: !8867)
!8912 = !DILocation(line: 1086, column: 1, scope: !8867)
!8913 = distinct !DISubprogram(name: "fully_constant_expression", scope: !3, file: !3, line: 1151, type: !8914, scopeLine: 1152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!8914 = !DISubroutineType(types: !8915)
!8915 = !{!1112, !1112}
!8916 = !DILocalVariable(name: "e", arg: 1, scope: !8913, file: !3, line: 1151, type: !1112)
!8917 = !DILocation(line: 1151, column: 37, scope: !8913)
!8918 = !DILocation(line: 1153, column: 11, scope: !8913)
!8919 = !DILocation(line: 1153, column: 14, scope: !8913)
!8920 = !DILocation(line: 1153, column: 3, scope: !8913)
!8921 = !DILocation(line: 1156, column: 14, scope: !8922)
!8922 = distinct !DILexicalBlock(scope: !8913, file: !3, line: 1154, column: 5)
!8923 = !DILocation(line: 1156, column: 7, scope: !8922)
!8924 = !DILocalVariable(name: "nary", scope: !8925, file: !3, line: 1159, type: !2414)
!8925 = distinct !DILexicalBlock(scope: !8922, file: !3, line: 1158, column: 7)
!8926 = !DILocation(line: 1159, column: 15, scope: !8925)
!8927 = !DILocation(line: 1159, column: 22, scope: !8925)
!8928 = !DILocation(line: 1160, column: 10, scope: !8925)
!8929 = !DILocation(line: 1160, column: 2, scope: !8925)
!8930 = !DILocation(line: 1163, column: 10, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 1163, column: 10)
!8932 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 1161, column: 4)
!8933 = !DILocation(line: 1163, column: 16, scope: !8931)
!8934 = !DILocation(line: 1163, column: 23, scope: !8931)
!8935 = !DILocation(line: 1163, column: 10, scope: !8932)
!8936 = !DILocation(line: 1164, column: 8, scope: !8931)
!8937 = !DILocation(line: 1165, column: 10, scope: !8938)
!8938 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 1165, column: 10)
!8939 = !DILocation(line: 1165, column: 16, scope: !8938)
!8940 = !DILocation(line: 1165, column: 23, scope: !8938)
!8941 = !DILocation(line: 1166, column: 3, scope: !8938)
!8942 = !DILocation(line: 1166, column: 6, scope: !8938)
!8943 = !DILocation(line: 1166, column: 12, scope: !8938)
!8944 = !DILocation(line: 1166, column: 19, scope: !8938)
!8945 = !DILocation(line: 1167, column: 3, scope: !8938)
!8946 = !DILocation(line: 1167, column: 6, scope: !8938)
!8947 = !DILocation(line: 1167, column: 12, scope: !8938)
!8948 = !DILocation(line: 1167, column: 19, scope: !8938)
!8949 = !DILocation(line: 1165, column: 10, scope: !8932)
!8950 = !DILocation(line: 1168, column: 15, scope: !8938)
!8951 = !DILocation(line: 1168, column: 8, scope: !8938)
!8952 = !DILocation(line: 1167, column: 22, scope: !8938)
!8953 = !DILocalVariable(name: "naryop0", scope: !8954, file: !3, line: 1175, type: !1123)
!8954 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 1172, column: 6)
!8955 = !DILocation(line: 1175, column: 13, scope: !8954)
!8956 = !DILocation(line: 1175, column: 23, scope: !8954)
!8957 = !DILocation(line: 1175, column: 29, scope: !8954)
!8958 = !DILocalVariable(name: "naryop1", scope: !8954, file: !3, line: 1176, type: !1123)
!8959 = !DILocation(line: 1176, column: 13, scope: !8954)
!8960 = !DILocation(line: 1176, column: 23, scope: !8954)
!8961 = !DILocation(line: 1176, column: 29, scope: !8954)
!8962 = !DILocalVariable(name: "result", scope: !8954, file: !3, line: 1177, type: !1123)
!8963 = !DILocation(line: 1177, column: 13, scope: !8954)
!8964 = !DILocation(line: 1178, column: 38, scope: !8965)
!8965 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 1178, column: 12)
!8966 = !DILocation(line: 1178, column: 13, scope: !8965)
!8967 = !DILocation(line: 1178, column: 12, scope: !8954)
!8968 = !DILocalVariable(name: "rep0", scope: !8969, file: !3, line: 1180, type: !1112)
!8969 = distinct !DILexicalBlock(scope: !8965, file: !3, line: 1179, column: 3)
!8970 = !DILocation(line: 1180, column: 14, scope: !8969)
!8971 = !DILocation(line: 1180, column: 44, scope: !8969)
!8972 = !DILocation(line: 1180, column: 21, scope: !8969)
!8973 = !DILocalVariable(name: "vrep0", scope: !8969, file: !3, line: 1181, type: !6)
!8974 = !DILocation(line: 1181, column: 18, scope: !8969)
!8975 = !DILocation(line: 1181, column: 45, scope: !8969)
!8976 = !DILocation(line: 1181, column: 26, scope: !8969)
!8977 = !DILocalVariable(name: "const0", scope: !8969, file: !3, line: 1182, type: !1123)
!8978 = !DILocation(line: 1182, column: 10, scope: !8969)
!8979 = !DILocation(line: 1182, column: 46, scope: !8969)
!8980 = !DILocation(line: 1182, column: 19, scope: !8969)
!8981 = !DILocation(line: 1183, column: 9, scope: !8982)
!8982 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 1183, column: 9)
!8983 = !DILocation(line: 1183, column: 9, scope: !8969)
!8984 = !DILocation(line: 1184, column: 17, scope: !8982)
!8985 = !DILocation(line: 1184, column: 15, scope: !8982)
!8986 = !DILocation(line: 1184, column: 7, scope: !8982)
!8987 = !DILocation(line: 1185, column: 3, scope: !8969)
!8988 = !DILocation(line: 1186, column: 38, scope: !8989)
!8989 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 1186, column: 12)
!8990 = !DILocation(line: 1186, column: 13, scope: !8989)
!8991 = !DILocation(line: 1186, column: 12, scope: !8954)
!8992 = !DILocalVariable(name: "rep1", scope: !8993, file: !3, line: 1188, type: !1112)
!8993 = distinct !DILexicalBlock(scope: !8989, file: !3, line: 1187, column: 3)
!8994 = !DILocation(line: 1188, column: 14, scope: !8993)
!8995 = !DILocation(line: 1188, column: 44, scope: !8993)
!8996 = !DILocation(line: 1188, column: 21, scope: !8993)
!8997 = !DILocalVariable(name: "vrep1", scope: !8993, file: !3, line: 1189, type: !6)
!8998 = !DILocation(line: 1189, column: 18, scope: !8993)
!8999 = !DILocation(line: 1189, column: 45, scope: !8993)
!9000 = !DILocation(line: 1189, column: 26, scope: !8993)
!9001 = !DILocalVariable(name: "const1", scope: !8993, file: !3, line: 1190, type: !1123)
!9002 = !DILocation(line: 1190, column: 10, scope: !8993)
!9003 = !DILocation(line: 1190, column: 46, scope: !8993)
!9004 = !DILocation(line: 1190, column: 19, scope: !8993)
!9005 = !DILocation(line: 1191, column: 9, scope: !9006)
!9006 = distinct !DILexicalBlock(scope: !8993, file: !3, line: 1191, column: 9)
!9007 = !DILocation(line: 1191, column: 9, scope: !8993)
!9008 = !DILocation(line: 1192, column: 17, scope: !9006)
!9009 = !DILocation(line: 1192, column: 15, scope: !9006)
!9010 = !DILocation(line: 1192, column: 7, scope: !9006)
!9011 = !DILocation(line: 1193, column: 3, scope: !8993)
!9012 = !DILocation(line: 1194, column: 17, scope: !8954)
!9013 = !DILocation(line: 1194, column: 15, scope: !8954)
!9014 = !DILocation(line: 1196, column: 12, scope: !9015)
!9015 = distinct !DILexicalBlock(scope: !8954, file: !3, line: 1196, column: 12)
!9016 = !DILocation(line: 1196, column: 19, scope: !9015)
!9017 = !DILocation(line: 1196, column: 47, scope: !9015)
!9018 = !DILocation(line: 1196, column: 22, scope: !9015)
!9019 = !DILocation(line: 1196, column: 12, scope: !8954)
!9020 = !DILocation(line: 1197, column: 42, scope: !9015)
!9021 = !DILocation(line: 1197, column: 10, scope: !9015)
!9022 = !DILocation(line: 1197, column: 3, scope: !9015)
!9023 = !DILocation(line: 1202, column: 15, scope: !8954)
!9024 = !DILocation(line: 1202, column: 8, scope: !8954)
!9025 = !DILocation(line: 1205, column: 10, scope: !9026)
!9026 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 1205, column: 10)
!9027 = !DILocation(line: 1205, column: 16, scope: !9026)
!9028 = !DILocation(line: 1205, column: 23, scope: !9026)
!9029 = !DILocation(line: 1206, column: 3, scope: !9026)
!9030 = !DILocation(line: 1206, column: 6, scope: !9026)
!9031 = !DILocation(line: 1206, column: 12, scope: !9026)
!9032 = !DILocation(line: 1206, column: 19, scope: !9026)
!9033 = !DILocation(line: 1207, column: 3, scope: !9026)
!9034 = !DILocation(line: 1207, column: 6, scope: !9026)
!9035 = !DILocation(line: 1207, column: 12, scope: !9026)
!9036 = !DILocation(line: 1207, column: 19, scope: !9026)
!9037 = !DILocation(line: 1205, column: 10, scope: !8932)
!9038 = !DILocation(line: 1208, column: 15, scope: !9026)
!9039 = !DILocation(line: 1208, column: 8, scope: !9026)
!9040 = !DILocation(line: 1207, column: 22, scope: !9026)
!9041 = !DILabel(scope: !8932, name: "do_unary", file: !3, line: 1211)
!9042 = !DILocation(line: 1211, column: 1, scope: !8932)
!9043 = !DILocalVariable(name: "naryop0", scope: !9044, file: !3, line: 1215, type: !1123)
!9044 = distinct !DILexicalBlock(scope: !8932, file: !3, line: 1212, column: 6)
!9045 = !DILocation(line: 1215, column: 13, scope: !9044)
!9046 = !DILocation(line: 1215, column: 23, scope: !9044)
!9047 = !DILocation(line: 1215, column: 29, scope: !9044)
!9048 = !DILocalVariable(name: "const0", scope: !9044, file: !3, line: 1216, type: !1123)
!9049 = !DILocation(line: 1216, column: 13, scope: !9044)
!9050 = !DILocalVariable(name: "result", scope: !9044, file: !3, line: 1216, type: !1123)
!9051 = !DILocation(line: 1216, column: 21, scope: !9044)
!9052 = !DILocation(line: 1217, column: 37, scope: !9053)
!9053 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 1217, column: 12)
!9054 = !DILocation(line: 1217, column: 12, scope: !9053)
!9055 = !DILocation(line: 1217, column: 12, scope: !9044)
!9056 = !DILocation(line: 1218, column: 12, scope: !9053)
!9057 = !DILocation(line: 1218, column: 10, scope: !9053)
!9058 = !DILocation(line: 1218, column: 3, scope: !9053)
!9059 = !DILocalVariable(name: "rep0", scope: !9060, file: !3, line: 1221, type: !1112)
!9060 = distinct !DILexicalBlock(scope: !9053, file: !3, line: 1220, column: 3)
!9061 = !DILocation(line: 1221, column: 14, scope: !9060)
!9062 = !DILocation(line: 1221, column: 44, scope: !9060)
!9063 = !DILocation(line: 1221, column: 21, scope: !9060)
!9064 = !DILocalVariable(name: "vrep0", scope: !9060, file: !3, line: 1222, type: !6)
!9065 = !DILocation(line: 1222, column: 18, scope: !9060)
!9066 = !DILocation(line: 1222, column: 45, scope: !9060)
!9067 = !DILocation(line: 1222, column: 26, scope: !9060)
!9068 = !DILocation(line: 1223, column: 41, scope: !9060)
!9069 = !DILocation(line: 1223, column: 14, scope: !9060)
!9070 = !DILocation(line: 1223, column: 12, scope: !9060)
!9071 = !DILocation(line: 1225, column: 15, scope: !9044)
!9072 = !DILocation(line: 1226, column: 12, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 1226, column: 12)
!9074 = !DILocation(line: 1226, column: 12, scope: !9044)
!9075 = !DILocalVariable(name: "type1", scope: !9076, file: !3, line: 1228, type: !1123)
!9076 = distinct !DILexicalBlock(scope: !9073, file: !3, line: 1227, column: 3)
!9077 = !DILocation(line: 1228, column: 10, scope: !9076)
!9078 = !DILocation(line: 1228, column: 18, scope: !9076)
!9079 = !DILocation(line: 1229, column: 14, scope: !9076)
!9080 = !DILocation(line: 1229, column: 12, scope: !9076)
!9081 = !DILocation(line: 1230, column: 14, scope: !9076)
!9082 = !DILocation(line: 1230, column: 12, scope: !9076)
!9083 = !DILocation(line: 1231, column: 3, scope: !9076)
!9084 = !DILocation(line: 1232, column: 12, scope: !9085)
!9085 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 1232, column: 12)
!9086 = !DILocation(line: 1232, column: 19, scope: !9085)
!9087 = !DILocation(line: 1232, column: 47, scope: !9085)
!9088 = !DILocation(line: 1232, column: 22, scope: !9085)
!9089 = !DILocation(line: 1232, column: 12, scope: !9044)
!9090 = !DILocation(line: 1233, column: 42, scope: !9085)
!9091 = !DILocation(line: 1233, column: 10, scope: !9085)
!9092 = !DILocation(line: 1233, column: 3, scope: !9085)
!9093 = !DILocation(line: 1234, column: 15, scope: !9044)
!9094 = !DILocation(line: 1234, column: 8, scope: !9044)
!9095 = !DILocation(line: 1237, column: 13, scope: !8932)
!9096 = !DILocation(line: 1237, column: 6, scope: !8932)
!9097 = !DILocalVariable(name: "ref", scope: !9098, file: !3, line: 1242, type: !2428)
!9098 = distinct !DILexicalBlock(scope: !8922, file: !3, line: 1241, column: 7)
!9099 = !DILocation(line: 1242, column: 17, scope: !9098)
!9100 = !DILocation(line: 1242, column: 23, scope: !9098)
!9101 = !DILocalVariable(name: "operands", scope: !9098, file: !3, line: 1243, type: !2438)
!9102 = !DILocation(line: 1243, column: 33, scope: !9098)
!9103 = !DILocation(line: 1243, column: 44, scope: !9098)
!9104 = !DILocation(line: 1243, column: 49, scope: !9098)
!9105 = !DILocalVariable(name: "op", scope: !9098, file: !3, line: 1244, type: !2935)
!9106 = !DILocation(line: 1244, column: 20, scope: !9098)
!9107 = !DILocation(line: 1248, column: 7, scope: !9098)
!9108 = !DILocation(line: 1248, column: 5, scope: !9098)
!9109 = !DILocation(line: 1249, column: 6, scope: !9110)
!9110 = distinct !DILexicalBlock(scope: !9098, file: !3, line: 1249, column: 6)
!9111 = !DILocation(line: 1249, column: 10, scope: !9110)
!9112 = !DILocation(line: 1249, column: 17, scope: !9110)
!9113 = !DILocation(line: 1250, column: 6, scope: !9110)
!9114 = !DILocation(line: 1250, column: 9, scope: !9110)
!9115 = !DILocation(line: 1250, column: 29, scope: !9110)
!9116 = !DILocation(line: 1251, column: 6, scope: !9110)
!9117 = !DILocation(line: 1251, column: 9, scope: !9110)
!9118 = !DILocation(line: 1251, column: 47, scope: !9110)
!9119 = !DILocation(line: 1252, column: 6, scope: !9110)
!9120 = !DILocation(line: 1252, column: 9, scope: !9110)
!9121 = !DILocation(line: 1253, column: 6, scope: !9110)
!9122 = !DILocation(line: 1253, column: 9, scope: !9110)
!9123 = !DILocation(line: 1253, column: 50, scope: !9110)
!9124 = !DILocation(line: 1254, column: 6, scope: !9110)
!9125 = !DILocation(line: 1254, column: 9, scope: !9110)
!9126 = !DILocation(line: 1254, column: 50, scope: !9110)
!9127 = !DILocation(line: 1249, column: 6, scope: !9098)
!9128 = !DILocalVariable(name: "arg0", scope: !9129, file: !3, line: 1256, type: !2935)
!9129 = distinct !DILexicalBlock(scope: !9110, file: !3, line: 1255, column: 4)
!9130 = !DILocation(line: 1256, column: 24, scope: !9129)
!9131 = !DILocalVariable(name: "arg1", scope: !9129, file: !3, line: 1256, type: !2935)
!9132 = !DILocation(line: 1256, column: 30, scope: !9129)
!9133 = !DILocalVariable(name: "anyconst", scope: !9129, file: !3, line: 1257, type: !1236)
!9134 = !DILocation(line: 1257, column: 11, scope: !9129)
!9135 = !DILocation(line: 1258, column: 13, scope: !9129)
!9136 = !DILocation(line: 1258, column: 11, scope: !9129)
!9137 = !DILocation(line: 1259, column: 10, scope: !9138)
!9138 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 1259, column: 10)
!9139 = !DILocation(line: 1259, column: 51, scope: !9138)
!9140 = !DILocation(line: 1259, column: 10, scope: !9129)
!9141 = !DILocation(line: 1260, column: 15, scope: !9138)
!9142 = !DILocation(line: 1260, column: 13, scope: !9138)
!9143 = !DILocation(line: 1260, column: 8, scope: !9138)
!9144 = !DILocation(line: 1261, column: 10, scope: !9145)
!9145 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 1261, column: 10)
!9146 = !DILocation(line: 1261, column: 41, scope: !9145)
!9147 = !DILocation(line: 1262, column: 3, scope: !9145)
!9148 = !DILocation(line: 1262, column: 7, scope: !9145)
!9149 = !DILocation(line: 1262, column: 13, scope: !9145)
!9150 = !DILocation(line: 1262, column: 20, scope: !9145)
!9151 = !DILocation(line: 1263, column: 7, scope: !9145)
!9152 = !DILocation(line: 1263, column: 35, scope: !9145)
!9153 = !DILocation(line: 1263, column: 41, scope: !9145)
!9154 = !DILocation(line: 1263, column: 10, scope: !9145)
!9155 = !DILocation(line: 1261, column: 10, scope: !9129)
!9156 = !DILocation(line: 1264, column: 17, scope: !9145)
!9157 = !DILocation(line: 1264, column: 8, scope: !9145)
!9158 = !DILocation(line: 1265, column: 10, scope: !9159)
!9159 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 1265, column: 10)
!9160 = !DILocation(line: 1266, column: 3, scope: !9159)
!9161 = !DILocation(line: 1266, column: 7, scope: !9159)
!9162 = !DILocation(line: 1266, column: 38, scope: !9159)
!9163 = !DILocation(line: 1267, column: 7, scope: !9159)
!9164 = !DILocation(line: 1267, column: 11, scope: !9159)
!9165 = !DILocation(line: 1267, column: 17, scope: !9159)
!9166 = !DILocation(line: 1267, column: 24, scope: !9159)
!9167 = !DILocation(line: 1268, column: 4, scope: !9159)
!9168 = !DILocation(line: 1268, column: 32, scope: !9159)
!9169 = !DILocation(line: 1268, column: 38, scope: !9159)
!9170 = !DILocation(line: 1268, column: 7, scope: !9159)
!9171 = !DILocation(line: 1265, column: 10, scope: !9129)
!9172 = !DILocation(line: 1269, column: 17, scope: !9159)
!9173 = !DILocation(line: 1269, column: 8, scope: !9159)
!9174 = !DILocation(line: 1270, column: 10, scope: !9175)
!9175 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 1270, column: 10)
!9176 = !DILocation(line: 1270, column: 10, scope: !9129)
!9177 = !DILocalVariable(name: "folded", scope: !9178, file: !3, line: 1272, type: !1123)
!9178 = distinct !DILexicalBlock(scope: !9175, file: !3, line: 1271, column: 8)
!9179 = !DILocation(line: 1272, column: 8, scope: !9178)
!9180 = !DILocation(line: 1272, column: 17, scope: !9178)
!9181 = !DILocation(line: 1276, column: 7, scope: !9182)
!9182 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 1276, column: 7)
!9183 = !DILocation(line: 1277, column: 7, scope: !9182)
!9184 = !DILocation(line: 1277, column: 10, scope: !9182)
!9185 = !DILocation(line: 1277, column: 29, scope: !9182)
!9186 = !DILocation(line: 1276, column: 7, scope: !9178)
!9187 = !DILocation(line: 1278, column: 14, scope: !9182)
!9188 = !DILocation(line: 1278, column: 12, scope: !9182)
!9189 = !DILocation(line: 1278, column: 5, scope: !9182)
!9190 = !DILocation(line: 1279, column: 7, scope: !9191)
!9191 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 1279, column: 7)
!9192 = !DILocation(line: 1280, column: 7, scope: !9191)
!9193 = !DILocation(line: 1280, column: 35, scope: !9191)
!9194 = !DILocation(line: 1280, column: 10, scope: !9191)
!9195 = !DILocation(line: 1279, column: 7, scope: !9178)
!9196 = !DILocation(line: 1281, column: 44, scope: !9191)
!9197 = !DILocation(line: 1281, column: 12, scope: !9191)
!9198 = !DILocation(line: 1281, column: 5, scope: !9191)
!9199 = !DILocation(line: 1282, column: 8, scope: !9178)
!9200 = !DILocation(line: 1283, column: 4, scope: !9129)
!9201 = !DILocation(line: 1284, column: 11, scope: !9098)
!9202 = !DILocation(line: 1284, column: 4, scope: !9098)
!9203 = !DILocation(line: 1287, column: 14, scope: !8922)
!9204 = !DILocation(line: 1287, column: 7, scope: !8922)
!9205 = !DILocation(line: 1290, column: 1, scope: !8913)
!9206 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_heap_copy", scope: !2415, file: !2415, line: 84, type: !9207, scopeLine: 84, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9207 = !DISubroutineType(types: !9208)
!9208 = !{!2438, !3393}
!9209 = !DILocalVariable(name: "vec_", arg: 1, scope: !9206, file: !2415, line: 84, type: !3393)
!9210 = !DILocation(line: 84, column: 1, scope: !9206)
!9211 = !DILocalVariable(name: "len_", scope: !9206, file: !2415, line: 84, type: !1531)
!9212 = !DILocalVariable(name: "new_vec_", scope: !9206, file: !2415, line: 84, type: !2438)
!9213 = !DILocation(line: 84, column: 1, scope: !9214)
!9214 = distinct !DILexicalBlock(scope: !9206, file: !2415, line: 84, column: 1)
!9215 = !DILocation(line: 84, column: 1, scope: !9216)
!9216 = distinct !DILexicalBlock(scope: !9214, file: !2415, line: 84, column: 1)
!9217 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_replace", scope: !2415, file: !2415, line: 83, type: !9218, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9218 = !DISubroutineType(types: !9219)
!9219 = !{!2936, !3393, !6, !9220}
!9220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9221, size: 64)
!9221 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2450)
!9222 = !DILocalVariable(name: "vec_", arg: 1, scope: !9217, file: !2415, line: 83, type: !3393)
!9223 = !DILocation(line: 83, column: 1, scope: !9217)
!9224 = !DILocalVariable(name: "ix_", arg: 2, scope: !9217, file: !2415, line: 83, type: !6)
!9225 = !DILocalVariable(name: "obj_", arg: 3, scope: !9217, file: !2415, line: 83, type: !9220)
!9226 = !DILocalVariable(name: "slot_", scope: !9217, file: !2415, line: 83, type: !2936)
!9227 = !DILocation(line: 83, column: 1, scope: !9228)
!9228 = distinct !DILexicalBlock(scope: !9217, file: !2415, line: 83, column: 1)
!9229 = distinct !DISubprogram(name: "VEC_vn_reference_op_s_base_index", scope: !2415, file: !2415, line: 83, type: !9230, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9230 = !DISubroutineType(types: !9231)
!9231 = !{!2936, !3393, !6}
!9232 = !DILocalVariable(name: "vec_", arg: 1, scope: !9229, file: !2415, line: 83, type: !3393)
!9233 = !DILocation(line: 83, column: 1, scope: !9229)
!9234 = !DILocalVariable(name: "ix_", arg: 2, scope: !9229, file: !2415, line: 83, type: !6)
!9235 = !DILocation(line: 0, scope: !9229)
!9236 = distinct !DISubprogram(name: "translate_vuse_through_block", scope: !3, file: !3, line: 1297, type: !9237, scopeLine: 1301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9237 = !DISubroutineType(types: !9238)
!9238 = !{!1123, !2438, !1695, !1123, !1123, !1838, !1838, !2633}
!9239 = !DILocalVariable(name: "operands", arg: 1, scope: !9236, file: !3, line: 1297, type: !2438)
!9240 = !DILocation(line: 1297, column: 62, scope: !9236)
!9241 = !DILocalVariable(name: "set", arg: 2, scope: !9236, file: !3, line: 1298, type: !1695)
!9242 = !DILocation(line: 1298, column: 25, scope: !9236)
!9243 = !DILocalVariable(name: "type", arg: 3, scope: !9236, file: !3, line: 1298, type: !1123)
!9244 = !DILocation(line: 1298, column: 35, scope: !9236)
!9245 = !DILocalVariable(name: "vuse", arg: 4, scope: !9236, file: !3, line: 1298, type: !1123)
!9246 = !DILocation(line: 1298, column: 46, scope: !9236)
!9247 = !DILocalVariable(name: "phiblock", arg: 5, scope: !9236, file: !3, line: 1299, type: !1838)
!9248 = !DILocation(line: 1299, column: 22, scope: !9236)
!9249 = !DILocalVariable(name: "block", arg: 6, scope: !9236, file: !3, line: 1300, type: !1838)
!9250 = !DILocation(line: 1300, column: 22, scope: !9236)
!9251 = !DILocalVariable(name: "same_valid", arg: 7, scope: !9236, file: !3, line: 1300, type: !2633)
!9252 = !DILocation(line: 1300, column: 35, scope: !9236)
!9253 = !DILocalVariable(name: "phi", scope: !9236, file: !3, line: 1302, type: !1386)
!9254 = !DILocation(line: 1302, column: 10, scope: !9236)
!9255 = !DILocation(line: 1302, column: 16, scope: !9236)
!9256 = !DILocalVariable(name: "ref", scope: !9236, file: !3, line: 1303, type: !9257)
!9257 = !DIDerivedType(tag: DW_TAG_typedef, name: "ao_ref", file: !1946, line: 86, baseType: !9258)
!9258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ao_ref_s", file: !1946, line: 63, size: 384, elements: !9259)
!9259 = !{!9260, !9261, !9262, !9263, !9264, !9265, !9266}
!9260 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !9258, file: !1946, line: 67, baseType: !1123, size: 64)
!9261 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !9258, file: !1946, line: 73, baseType: !1123, size: 64, offset: 64)
!9262 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !9258, file: !1946, line: 75, baseType: !1078, size: 64, offset: 128)
!9263 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !9258, file: !1946, line: 77, baseType: !1078, size: 64, offset: 192)
!9264 = !DIDerivedType(tag: DW_TAG_member, name: "max_size", scope: !9258, file: !1946, line: 79, baseType: !1078, size: 64, offset: 256)
!9265 = !DIDerivedType(tag: DW_TAG_member, name: "ref_alias_set", scope: !9258, file: !1946, line: 82, baseType: !1695, size: 32, offset: 320)
!9266 = !DIDerivedType(tag: DW_TAG_member, name: "base_alias_set", scope: !9258, file: !1946, line: 85, baseType: !1695, size: 32, offset: 352)
!9267 = !DILocation(line: 1303, column: 10, scope: !9236)
!9268 = !DILocalVariable(name: "e", scope: !9236, file: !3, line: 1304, type: !1366)
!9269 = !DILocation(line: 1304, column: 8, scope: !9236)
!9270 = !DILocalVariable(name: "use_oracle", scope: !9236, file: !3, line: 1305, type: !1236)
!9271 = !DILocation(line: 1305, column: 8, scope: !9236)
!9272 = !DILocation(line: 1307, column: 4, scope: !9236)
!9273 = !DILocation(line: 1307, column: 15, scope: !9236)
!9274 = !DILocation(line: 1309, column: 18, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9236, file: !3, line: 1309, column: 7)
!9276 = !DILocation(line: 1309, column: 7, scope: !9275)
!9277 = !DILocation(line: 1309, column: 26, scope: !9275)
!9278 = !DILocation(line: 1309, column: 23, scope: !9275)
!9279 = !DILocation(line: 1309, column: 7, scope: !9236)
!9280 = !DILocation(line: 1310, column: 12, scope: !9275)
!9281 = !DILocation(line: 1310, column: 5, scope: !9275)
!9282 = !DILocation(line: 1312, column: 53, scope: !9236)
!9283 = !DILocation(line: 1312, column: 58, scope: !9236)
!9284 = !DILocation(line: 1312, column: 64, scope: !9236)
!9285 = !DILocation(line: 1312, column: 16, scope: !9236)
!9286 = !DILocation(line: 1312, column: 14, scope: !9236)
!9287 = !DILocation(line: 1317, column: 20, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !9236, file: !3, line: 1317, column: 7)
!9289 = !DILocation(line: 1317, column: 7, scope: !9288)
!9290 = !DILocation(line: 1317, column: 25, scope: !9288)
!9291 = !DILocation(line: 1317, column: 7, scope: !9236)
!9292 = !DILocation(line: 1318, column: 20, scope: !9288)
!9293 = !DILocation(line: 1318, column: 27, scope: !9288)
!9294 = !DILocation(line: 1318, column: 9, scope: !9288)
!9295 = !DILocation(line: 1318, column: 7, scope: !9288)
!9296 = !DILocation(line: 1318, column: 5, scope: !9288)
!9297 = !DILocation(line: 1319, column: 12, scope: !9298)
!9298 = distinct !DILexicalBlock(scope: !9288, file: !3, line: 1319, column: 12)
!9299 = !DILocation(line: 1319, column: 12, scope: !9288)
!9300 = !DILocation(line: 1320, column: 5, scope: !9298)
!9301 = !DILocation(line: 1320, column: 39, scope: !9298)
!9302 = !DILocation(line: 1320, column: 13, scope: !9298)
!9303 = !DILocation(line: 1320, column: 12, scope: !9298)
!9304 = !DILocation(line: 1322, column: 22, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9298, file: !3, line: 1321, column: 7)
!9306 = !DILocation(line: 1322, column: 9, scope: !9305)
!9307 = !DILocation(line: 1322, column: 7, scope: !9305)
!9308 = !DILocation(line: 1323, column: 8, scope: !9305)
!9309 = !DILocation(line: 1323, column: 6, scope: !9305)
!9310 = !DILocation(line: 1324, column: 17, scope: !9311)
!9311 = distinct !DILexicalBlock(scope: !9305, file: !3, line: 1324, column: 6)
!9312 = !DILocation(line: 1324, column: 6, scope: !9311)
!9313 = !DILocation(line: 1324, column: 25, scope: !9311)
!9314 = !DILocation(line: 1324, column: 22, scope: !9311)
!9315 = !DILocation(line: 1324, column: 6, scope: !9305)
!9316 = !DILocation(line: 1325, column: 11, scope: !9311)
!9317 = !DILocation(line: 1325, column: 4, scope: !9311)
!9318 = !DILocation(line: 1326, column: 19, scope: !9319)
!9319 = distinct !DILexicalBlock(scope: !9305, file: !3, line: 1326, column: 6)
!9320 = !DILocation(line: 1326, column: 6, scope: !9319)
!9321 = !DILocation(line: 1326, column: 24, scope: !9319)
!9322 = !DILocation(line: 1326, column: 6, scope: !9305)
!9323 = !DILocation(line: 1328, column: 21, scope: !9324)
!9324 = distinct !DILexicalBlock(scope: !9319, file: !3, line: 1327, column: 4)
!9325 = !DILocation(line: 1328, column: 28, scope: !9324)
!9326 = !DILocation(line: 1328, column: 10, scope: !9324)
!9327 = !DILocation(line: 1328, column: 8, scope: !9324)
!9328 = !DILocation(line: 1329, column: 6, scope: !9324)
!9329 = distinct !{!9329, !9300, !9330}
!9330 = !DILocation(line: 1331, column: 7, scope: !9298)
!9331 = !DILocation(line: 1333, column: 5, scope: !9298)
!9332 = !DILocation(line: 1335, column: 7, scope: !9333)
!9333 = distinct !DILexicalBlock(scope: !9236, file: !3, line: 1335, column: 7)
!9334 = !DILocation(line: 1335, column: 7, scope: !9236)
!9335 = !DILocation(line: 1337, column: 11, scope: !9336)
!9336 = distinct !DILexicalBlock(scope: !9337, file: !3, line: 1337, column: 11)
!9337 = distinct !DILexicalBlock(scope: !9333, file: !3, line: 1336, column: 5)
!9338 = !DILocation(line: 1337, column: 11, scope: !9337)
!9339 = !DILocalVariable(name: "visited", scope: !9340, file: !3, line: 1339, type: !1043)
!9340 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 1338, column: 2)
!9341 = !DILocation(line: 1339, column: 11, scope: !9340)
!9342 = !DILocation(line: 1342, column: 37, scope: !9340)
!9343 = !DILocation(line: 1342, column: 11, scope: !9340)
!9344 = !DILocation(line: 1342, column: 9, scope: !9340)
!9345 = !DILocation(line: 1343, column: 8, scope: !9346)
!9346 = distinct !DILexicalBlock(scope: !9340, file: !3, line: 1343, column: 8)
!9347 = !DILocation(line: 1343, column: 8, scope: !9340)
!9348 = !DILocation(line: 1344, column: 6, scope: !9346)
!9349 = !DILocation(line: 1345, column: 2, scope: !9340)
!9350 = !DILocation(line: 1347, column: 7, scope: !9336)
!9351 = !DILocation(line: 1348, column: 12, scope: !9352)
!9352 = distinct !DILexicalBlock(scope: !9337, file: !3, line: 1348, column: 11)
!9353 = !DILocation(line: 1348, column: 11, scope: !9337)
!9354 = !DILocation(line: 1352, column: 5, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9352, file: !3, line: 1349, column: 2)
!9356 = !DILocation(line: 1352, column: 16, scope: !9355)
!9357 = !DILocation(line: 1353, column: 11, scope: !9355)
!9358 = !DILocation(line: 1353, column: 9, scope: !9355)
!9359 = !DILocation(line: 1354, column: 2, scope: !9355)
!9360 = !DILocation(line: 1360, column: 14, scope: !9337)
!9361 = !DILocation(line: 1360, column: 7, scope: !9337)
!9362 = !DILocation(line: 1363, column: 3, scope: !9236)
!9363 = !DILocation(line: 1364, column: 1, scope: !9236)
!9364 = distinct !DISubprogram(name: "gimple_bb", scope: !608, file: !608, line: 1112, type: !9365, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9365 = !DISubroutineType(types: !9366)
!9366 = !{!1350, !5454}
!9367 = !DILocalVariable(name: "g", arg: 1, scope: !9364, file: !608, line: 1112, type: !5454)
!9368 = !DILocation(line: 1112, column: 25, scope: !9364)
!9369 = !DILocation(line: 1114, column: 10, scope: !9364)
!9370 = !DILocation(line: 1114, column: 13, scope: !9364)
!9371 = !DILocation(line: 1114, column: 20, scope: !9364)
!9372 = !DILocation(line: 1114, column: 3, scope: !9364)
!9373 = distinct !DISubprogram(name: "bitmap_find_leader", scope: !3, file: !3, line: 1895, type: !9374, scopeLine: 1896, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9374 = !DISubroutineType(types: !9375)
!9375 = !{!1112, !1038, !6, !1386}
!9376 = !DILocalVariable(name: "set", arg: 1, scope: !9373, file: !3, line: 1895, type: !1038)
!9377 = !DILocation(line: 1895, column: 34, scope: !9373)
!9378 = !DILocalVariable(name: "val", arg: 2, scope: !9373, file: !3, line: 1895, type: !6)
!9379 = !DILocation(line: 1895, column: 52, scope: !9373)
!9380 = !DILocalVariable(name: "stmt", arg: 3, scope: !9373, file: !3, line: 1895, type: !1386)
!9381 = !DILocation(line: 1895, column: 64, scope: !9373)
!9382 = !DILocation(line: 1897, column: 28, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 1897, column: 7)
!9384 = !DILocation(line: 1897, column: 7, scope: !9383)
!9385 = !DILocation(line: 1897, column: 7, scope: !9373)
!9386 = !DILocalVariable(name: "i", scope: !9387, file: !3, line: 1899, type: !6)
!9387 = distinct !DILexicalBlock(scope: !9383, file: !3, line: 1898, column: 5)
!9388 = !DILocation(line: 1899, column: 20, scope: !9387)
!9389 = !DILocalVariable(name: "bi", scope: !9387, file: !3, line: 1900, type: !3079)
!9390 = !DILocation(line: 1900, column: 23, scope: !9387)
!9391 = !DILocalVariable(name: "exprset", scope: !9387, file: !3, line: 1901, type: !1038)
!9392 = !DILocation(line: 1901, column: 20, scope: !9387)
!9393 = !DILocation(line: 1901, column: 30, scope: !9387)
!9394 = !DILocation(line: 1903, column: 7, scope: !9395)
!9395 = distinct !DILexicalBlock(scope: !9387, file: !3, line: 1903, column: 7)
!9396 = !DILocation(line: 1903, column: 7, scope: !9397)
!9397 = distinct !DILexicalBlock(scope: !9395, file: !3, line: 1903, column: 7)
!9398 = !DILocalVariable(name: "expr", scope: !9399, file: !3, line: 1905, type: !1112)
!9399 = distinct !DILexicalBlock(scope: !9397, file: !3, line: 1904, column: 2)
!9400 = !DILocation(line: 1905, column: 13, scope: !9399)
!9401 = !DILocation(line: 1905, column: 39, scope: !9399)
!9402 = !DILocation(line: 1905, column: 20, scope: !9399)
!9403 = !DILocation(line: 1906, column: 8, scope: !9404)
!9404 = distinct !DILexicalBlock(scope: !9399, file: !3, line: 1906, column: 8)
!9405 = !DILocation(line: 1906, column: 14, scope: !9404)
!9406 = !DILocation(line: 1906, column: 19, scope: !9404)
!9407 = !DILocation(line: 1906, column: 8, scope: !9399)
!9408 = !DILocation(line: 1907, column: 13, scope: !9404)
!9409 = !DILocation(line: 1907, column: 6, scope: !9404)
!9410 = !DILocation(line: 1908, column: 2, scope: !9399)
!9411 = distinct !{!9411, !9394, !9412}
!9412 = !DILocation(line: 1908, column: 2, scope: !9395)
!9413 = !DILocation(line: 1909, column: 5, scope: !9387)
!9414 = !DILocation(line: 1910, column: 34, scope: !9415)
!9415 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 1910, column: 7)
!9416 = !DILocation(line: 1910, column: 39, scope: !9415)
!9417 = !DILocation(line: 1910, column: 7, scope: !9415)
!9418 = !DILocation(line: 1910, column: 7, scope: !9373)
!9419 = !DILocalVariable(name: "i", scope: !9420, file: !3, line: 1923, type: !6)
!9420 = distinct !DILexicalBlock(scope: !9415, file: !3, line: 1911, column: 5)
!9421 = !DILocation(line: 1923, column: 20, scope: !9420)
!9422 = !DILocalVariable(name: "bi", scope: !9420, file: !3, line: 1924, type: !3079)
!9423 = !DILocation(line: 1924, column: 23, scope: !9420)
!9424 = !DILocalVariable(name: "exprset", scope: !9420, file: !3, line: 1925, type: !1038)
!9425 = !DILocation(line: 1925, column: 20, scope: !9420)
!9426 = !DILocation(line: 1925, column: 30, scope: !9420)
!9427 = !DILocation(line: 1927, column: 7, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9420, file: !3, line: 1927, column: 7)
!9429 = !DILocation(line: 1927, column: 7, scope: !9430)
!9430 = distinct !DILexicalBlock(scope: !9428, file: !3, line: 1927, column: 7)
!9431 = !DILocalVariable(name: "val", scope: !9432, file: !3, line: 1930, type: !1112)
!9432 = distinct !DILexicalBlock(scope: !9430, file: !3, line: 1929, column: 2)
!9433 = !DILocation(line: 1930, column: 13, scope: !9432)
!9434 = !DILocation(line: 1930, column: 38, scope: !9432)
!9435 = !DILocation(line: 1930, column: 19, scope: !9432)
!9436 = !DILocation(line: 1933, column: 8, scope: !9437)
!9437 = distinct !DILexicalBlock(scope: !9432, file: !3, line: 1933, column: 8)
!9438 = !DILocation(line: 1933, column: 8, scope: !9432)
!9439 = !DILocalVariable(name: "def_stmt", scope: !9440, file: !3, line: 1935, type: !1386)
!9440 = distinct !DILexicalBlock(scope: !9437, file: !3, line: 1934, column: 6)
!9441 = !DILocation(line: 1935, column: 15, scope: !9440)
!9442 = !DILocation(line: 1935, column: 26, scope: !9440)
!9443 = !DILocation(line: 1936, column: 25, scope: !9444)
!9444 = distinct !DILexicalBlock(scope: !9440, file: !3, line: 1936, column: 12)
!9445 = !DILocation(line: 1936, column: 12, scope: !9444)
!9446 = !DILocation(line: 1936, column: 35, scope: !9444)
!9447 = !DILocation(line: 1937, column: 5, scope: !9444)
!9448 = !DILocation(line: 1937, column: 19, scope: !9444)
!9449 = !DILocation(line: 1937, column: 8, scope: !9444)
!9450 = !DILocation(line: 1937, column: 43, scope: !9444)
!9451 = !DILocation(line: 1937, column: 32, scope: !9444)
!9452 = !DILocation(line: 1937, column: 29, scope: !9444)
!9453 = !DILocation(line: 1938, column: 5, scope: !9444)
!9454 = !DILocation(line: 1938, column: 20, scope: !9444)
!9455 = !DILocation(line: 1938, column: 8, scope: !9444)
!9456 = !DILocation(line: 1938, column: 45, scope: !9444)
!9457 = !DILocation(line: 1938, column: 33, scope: !9444)
!9458 = !DILocation(line: 1938, column: 30, scope: !9444)
!9459 = !DILocation(line: 1936, column: 12, scope: !9440)
!9460 = !DILocation(line: 1939, column: 3, scope: !9444)
!9461 = !DILocation(line: 1940, column: 6, scope: !9440)
!9462 = !DILocation(line: 1941, column: 11, scope: !9432)
!9463 = !DILocation(line: 1941, column: 4, scope: !9432)
!9464 = distinct !{!9464, !9427, !9465}
!9465 = !DILocation(line: 1942, column: 2, scope: !9428)
!9466 = !DILocation(line: 1943, column: 5, scope: !9420)
!9467 = !DILocation(line: 1944, column: 3, scope: !9373)
!9468 = !DILocation(line: 1945, column: 1, scope: !9373)
!9469 = distinct !DISubprogram(name: "bitmap_set_contains_value", scope: !3, file: !3, line: 820, type: !9470, scopeLine: 821, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9470 = !DISubroutineType(types: !9471)
!9471 = !{!1236, !1038, !6}
!9472 = !DILocalVariable(name: "set", arg: 1, scope: !9469, file: !3, line: 820, type: !1038)
!9473 = !DILocation(line: 820, column: 41, scope: !9469)
!9474 = !DILocalVariable(name: "value_id", arg: 2, scope: !9469, file: !3, line: 820, type: !6)
!9475 = !DILocation(line: 820, column: 59, scope: !9469)
!9476 = !DILocation(line: 822, column: 28, scope: !9477)
!9477 = distinct !DILexicalBlock(scope: !9469, file: !3, line: 822, column: 7)
!9478 = !DILocation(line: 822, column: 7, scope: !9477)
!9479 = !DILocation(line: 822, column: 7, scope: !9469)
!9480 = !DILocation(line: 823, column: 5, scope: !9477)
!9481 = !DILocation(line: 825, column: 8, scope: !9482)
!9482 = distinct !DILexicalBlock(scope: !9469, file: !3, line: 825, column: 7)
!9483 = !DILocation(line: 825, column: 12, scope: !9482)
!9484 = !DILocation(line: 825, column: 15, scope: !9482)
!9485 = !DILocation(line: 825, column: 7, scope: !9469)
!9486 = !DILocation(line: 826, column: 5, scope: !9482)
!9487 = !DILocation(line: 828, column: 24, scope: !9469)
!9488 = !DILocation(line: 828, column: 29, scope: !9469)
!9489 = !DILocation(line: 828, column: 37, scope: !9469)
!9490 = !DILocation(line: 828, column: 10, scope: !9469)
!9491 = !DILocation(line: 828, column: 3, scope: !9469)
!9492 = !DILocation(line: 829, column: 1, scope: !9469)
!9493 = distinct !DISubprogram(name: "bmp_iter_and_init", scope: !1047, file: !1047, line: 266, type: !9494, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9494 = !DISubroutineType(types: !9495)
!9495 = !{null, !3415, !3416, !3416, !6, !3380}
!9496 = !DILocalVariable(name: "bi", arg: 1, scope: !9493, file: !1047, line: 266, type: !3415)
!9497 = !DILocation(line: 266, column: 37, scope: !9493)
!9498 = !DILocalVariable(name: "map1", arg: 2, scope: !9493, file: !1047, line: 266, type: !3416)
!9499 = !DILocation(line: 266, column: 54, scope: !9493)
!9500 = !DILocalVariable(name: "map2", arg: 3, scope: !9493, file: !1047, line: 266, type: !3416)
!9501 = !DILocation(line: 266, column: 73, scope: !9493)
!9502 = !DILocalVariable(name: "start_bit", arg: 4, scope: !9493, file: !1047, line: 267, type: !6)
!9503 = !DILocation(line: 267, column: 15, scope: !9493)
!9504 = !DILocalVariable(name: "bit_no", arg: 5, scope: !9493, file: !1047, line: 267, type: !3380)
!9505 = !DILocation(line: 267, column: 36, scope: !9493)
!9506 = !DILocation(line: 269, column: 14, scope: !9493)
!9507 = !DILocation(line: 269, column: 20, scope: !9493)
!9508 = !DILocation(line: 269, column: 3, scope: !9493)
!9509 = !DILocation(line: 269, column: 7, scope: !9493)
!9510 = !DILocation(line: 269, column: 12, scope: !9493)
!9511 = !DILocation(line: 270, column: 14, scope: !9493)
!9512 = !DILocation(line: 270, column: 20, scope: !9493)
!9513 = !DILocation(line: 270, column: 3, scope: !9493)
!9514 = !DILocation(line: 270, column: 7, scope: !9493)
!9515 = !DILocation(line: 270, column: 12, scope: !9493)
!9516 = !DILocation(line: 274, column: 3, scope: !9493)
!9517 = !DILocation(line: 276, column: 12, scope: !9518)
!9518 = distinct !DILexicalBlock(scope: !9519, file: !1047, line: 276, column: 11)
!9519 = distinct !DILexicalBlock(scope: !9493, file: !1047, line: 275, column: 5)
!9520 = !DILocation(line: 276, column: 16, scope: !9518)
!9521 = !DILocation(line: 276, column: 11, scope: !9519)
!9522 = !DILocation(line: 278, column: 4, scope: !9523)
!9523 = distinct !DILexicalBlock(scope: !9518, file: !1047, line: 277, column: 2)
!9524 = !DILocation(line: 278, column: 8, scope: !9523)
!9525 = !DILocation(line: 278, column: 13, scope: !9523)
!9526 = !DILocation(line: 279, column: 4, scope: !9523)
!9527 = !DILocation(line: 282, column: 11, scope: !9528)
!9528 = distinct !DILexicalBlock(scope: !9519, file: !1047, line: 282, column: 11)
!9529 = !DILocation(line: 282, column: 15, scope: !9528)
!9530 = !DILocation(line: 282, column: 21, scope: !9528)
!9531 = !DILocation(line: 282, column: 29, scope: !9528)
!9532 = !DILocation(line: 282, column: 39, scope: !9528)
!9533 = !DILocation(line: 282, column: 26, scope: !9528)
!9534 = !DILocation(line: 282, column: 11, scope: !9519)
!9535 = !DILocation(line: 283, column: 2, scope: !9528)
!9536 = !DILocation(line: 284, column: 18, scope: !9519)
!9537 = !DILocation(line: 284, column: 22, scope: !9519)
!9538 = !DILocation(line: 284, column: 28, scope: !9519)
!9539 = !DILocation(line: 284, column: 7, scope: !9519)
!9540 = !DILocation(line: 284, column: 11, scope: !9519)
!9541 = !DILocation(line: 284, column: 16, scope: !9519)
!9542 = distinct !{!9542, !9516, !9543}
!9543 = !DILocation(line: 285, column: 5, scope: !9493)
!9544 = !DILocation(line: 288, column: 3, scope: !9493)
!9545 = !DILocation(line: 290, column: 12, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !9547, file: !1047, line: 290, column: 11)
!9547 = distinct !DILexicalBlock(scope: !9493, file: !1047, line: 289, column: 5)
!9548 = !DILocation(line: 290, column: 16, scope: !9546)
!9549 = !DILocation(line: 290, column: 11, scope: !9547)
!9550 = !DILocation(line: 292, column: 15, scope: !9551)
!9551 = distinct !DILexicalBlock(scope: !9546, file: !1047, line: 291, column: 2)
!9552 = !DILocation(line: 292, column: 19, scope: !9551)
!9553 = !DILocation(line: 292, column: 24, scope: !9551)
!9554 = !DILocation(line: 292, column: 4, scope: !9551)
!9555 = !DILocation(line: 292, column: 8, scope: !9551)
!9556 = !DILocation(line: 292, column: 13, scope: !9551)
!9557 = !DILocation(line: 293, column: 4, scope: !9551)
!9558 = !DILocation(line: 296, column: 11, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9547, file: !1047, line: 296, column: 11)
!9560 = !DILocation(line: 296, column: 15, scope: !9559)
!9561 = !DILocation(line: 296, column: 21, scope: !9559)
!9562 = !DILocation(line: 296, column: 29, scope: !9559)
!9563 = !DILocation(line: 296, column: 33, scope: !9559)
!9564 = !DILocation(line: 296, column: 39, scope: !9559)
!9565 = !DILocation(line: 296, column: 26, scope: !9559)
!9566 = !DILocation(line: 296, column: 11, scope: !9547)
!9567 = !DILocation(line: 297, column: 2, scope: !9559)
!9568 = !DILocation(line: 298, column: 18, scope: !9547)
!9569 = !DILocation(line: 298, column: 22, scope: !9547)
!9570 = !DILocation(line: 298, column: 28, scope: !9547)
!9571 = !DILocation(line: 298, column: 7, scope: !9547)
!9572 = !DILocation(line: 298, column: 11, scope: !9547)
!9573 = !DILocation(line: 298, column: 16, scope: !9547)
!9574 = distinct !{!9574, !9544, !9575}
!9575 = !DILocation(line: 299, column: 5, scope: !9493)
!9576 = !DILocation(line: 302, column: 7, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9493, file: !1047, line: 302, column: 7)
!9578 = !DILocation(line: 302, column: 11, scope: !9577)
!9579 = !DILocation(line: 302, column: 17, scope: !9577)
!9580 = !DILocation(line: 302, column: 25, scope: !9577)
!9581 = !DILocation(line: 302, column: 29, scope: !9577)
!9582 = !DILocation(line: 302, column: 35, scope: !9577)
!9583 = !DILocation(line: 302, column: 22, scope: !9577)
!9584 = !DILocation(line: 302, column: 7, scope: !9493)
!9585 = !DILocation(line: 306, column: 11, scope: !9586)
!9586 = distinct !DILexicalBlock(scope: !9587, file: !1047, line: 306, column: 11)
!9587 = distinct !DILexicalBlock(scope: !9577, file: !1047, line: 303, column: 5)
!9588 = !DILocation(line: 306, column: 15, scope: !9586)
!9589 = !DILocation(line: 306, column: 21, scope: !9586)
!9590 = !DILocation(line: 306, column: 29, scope: !9586)
!9591 = !DILocation(line: 306, column: 39, scope: !9586)
!9592 = !DILocation(line: 306, column: 26, scope: !9586)
!9593 = !DILocation(line: 306, column: 11, scope: !9587)
!9594 = !DILocation(line: 307, column: 14, scope: !9586)
!9595 = !DILocation(line: 307, column: 18, scope: !9586)
!9596 = !DILocation(line: 307, column: 24, scope: !9586)
!9597 = !DILocation(line: 307, column: 29, scope: !9586)
!9598 = !DILocation(line: 307, column: 12, scope: !9586)
!9599 = !DILocation(line: 307, column: 2, scope: !9586)
!9600 = !DILocation(line: 309, column: 21, scope: !9587)
!9601 = !DILocation(line: 309, column: 31, scope: !9587)
!9602 = !DILocation(line: 309, column: 50, scope: !9587)
!9603 = !DILocation(line: 309, column: 7, scope: !9587)
!9604 = !DILocation(line: 309, column: 11, scope: !9587)
!9605 = !DILocation(line: 309, column: 19, scope: !9587)
!9606 = !DILocation(line: 310, column: 18, scope: !9587)
!9607 = !DILocation(line: 310, column: 22, scope: !9587)
!9608 = !DILocation(line: 310, column: 28, scope: !9587)
!9609 = !DILocation(line: 310, column: 33, scope: !9587)
!9610 = !DILocation(line: 310, column: 37, scope: !9587)
!9611 = !DILocation(line: 310, column: 48, scope: !9587)
!9612 = !DILocation(line: 310, column: 52, scope: !9587)
!9613 = !DILocation(line: 310, column: 58, scope: !9587)
!9614 = !DILocation(line: 310, column: 63, scope: !9587)
!9615 = !DILocation(line: 310, column: 67, scope: !9587)
!9616 = !DILocation(line: 310, column: 46, scope: !9587)
!9617 = !DILocation(line: 310, column: 7, scope: !9587)
!9618 = !DILocation(line: 310, column: 11, scope: !9587)
!9619 = !DILocation(line: 310, column: 16, scope: !9587)
!9620 = !DILocation(line: 311, column: 20, scope: !9587)
!9621 = !DILocation(line: 311, column: 30, scope: !9587)
!9622 = !DILocation(line: 311, column: 7, scope: !9587)
!9623 = !DILocation(line: 311, column: 11, scope: !9587)
!9624 = !DILocation(line: 311, column: 16, scope: !9587)
!9625 = !DILocation(line: 312, column: 5, scope: !9587)
!9626 = !DILocation(line: 317, column: 7, scope: !9627)
!9627 = distinct !DILexicalBlock(scope: !9577, file: !1047, line: 314, column: 5)
!9628 = !DILocation(line: 317, column: 11, scope: !9627)
!9629 = !DILocation(line: 317, column: 19, scope: !9627)
!9630 = !DILocation(line: 318, column: 7, scope: !9627)
!9631 = !DILocation(line: 318, column: 11, scope: !9627)
!9632 = !DILocation(line: 318, column: 16, scope: !9627)
!9633 = !DILocation(line: 325, column: 17, scope: !9493)
!9634 = !DILocation(line: 325, column: 21, scope: !9493)
!9635 = !DILocation(line: 325, column: 16, scope: !9493)
!9636 = !DILocation(line: 325, column: 13, scope: !9493)
!9637 = !DILocation(line: 327, column: 13, scope: !9493)
!9638 = !DILocation(line: 327, column: 4, scope: !9493)
!9639 = !DILocation(line: 327, column: 11, scope: !9493)
!9640 = !DILocation(line: 328, column: 1, scope: !9493)
!9641 = distinct !DISubprogram(name: "bmp_iter_and", scope: !1047, file: !1047, line: 440, type: !3505, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9642 = !DILocalVariable(name: "bi", arg: 1, scope: !9641, file: !1047, line: 440, type: !3415)
!9643 = !DILocation(line: 440, column: 32, scope: !9641)
!9644 = !DILocalVariable(name: "bit_no", arg: 2, scope: !9641, file: !1047, line: 440, type: !3380)
!9645 = !DILocation(line: 440, column: 46, scope: !9641)
!9646 = !DILocation(line: 443, column: 7, scope: !9647)
!9647 = distinct !DILexicalBlock(scope: !9641, file: !1047, line: 443, column: 7)
!9648 = !DILocation(line: 443, column: 11, scope: !9647)
!9649 = !DILocation(line: 443, column: 7, scope: !9641)
!9650 = !DILocation(line: 444, column: 5, scope: !9647)
!9651 = !DILabel(scope: !9652, name: "next_bit", file: !1047, line: 445)
!9652 = distinct !DILexicalBlock(scope: !9647, file: !1047, line: 444, column: 5)
!9653 = !DILocation(line: 445, column: 5, scope: !9652)
!9654 = !DILocation(line: 446, column: 7, scope: !9652)
!9655 = !DILocation(line: 446, column: 16, scope: !9652)
!9656 = !DILocation(line: 446, column: 20, scope: !9652)
!9657 = !DILocation(line: 446, column: 25, scope: !9652)
!9658 = !DILocation(line: 446, column: 14, scope: !9652)
!9659 = !DILocation(line: 448, column: 4, scope: !9660)
!9660 = distinct !DILexicalBlock(scope: !9652, file: !1047, line: 447, column: 2)
!9661 = !DILocation(line: 448, column: 8, scope: !9660)
!9662 = !DILocation(line: 448, column: 13, scope: !9660)
!9663 = !DILocation(line: 449, column: 5, scope: !9660)
!9664 = !DILocation(line: 449, column: 12, scope: !9660)
!9665 = distinct !{!9665, !9654, !9666}
!9666 = !DILocation(line: 450, column: 2, scope: !9652)
!9667 = !DILocation(line: 451, column: 7, scope: !9652)
!9668 = !DILocation(line: 457, column: 16, scope: !9641)
!9669 = !DILocation(line: 457, column: 15, scope: !9641)
!9670 = !DILocation(line: 457, column: 23, scope: !9641)
!9671 = !DILocation(line: 457, column: 42, scope: !9641)
!9672 = !DILocation(line: 458, column: 7, scope: !9641)
!9673 = !DILocation(line: 458, column: 26, scope: !9641)
!9674 = !DILocation(line: 457, column: 4, scope: !9641)
!9675 = !DILocation(line: 457, column: 11, scope: !9641)
!9676 = !DILocation(line: 459, column: 3, scope: !9641)
!9677 = !DILocation(line: 459, column: 7, scope: !9641)
!9678 = !DILocation(line: 459, column: 14, scope: !9641)
!9679 = !DILocation(line: 461, column: 3, scope: !9641)
!9680 = !DILocation(line: 464, column: 7, scope: !9681)
!9681 = distinct !DILexicalBlock(scope: !9641, file: !1047, line: 462, column: 5)
!9682 = !DILocation(line: 464, column: 14, scope: !9681)
!9683 = !DILocation(line: 464, column: 18, scope: !9681)
!9684 = !DILocation(line: 464, column: 26, scope: !9681)
!9685 = !DILocation(line: 466, column: 15, scope: !9686)
!9686 = distinct !DILexicalBlock(scope: !9681, file: !1047, line: 465, column: 2)
!9687 = !DILocation(line: 466, column: 19, scope: !9686)
!9688 = !DILocation(line: 466, column: 25, scope: !9686)
!9689 = !DILocation(line: 466, column: 30, scope: !9686)
!9690 = !DILocation(line: 466, column: 34, scope: !9686)
!9691 = !DILocation(line: 466, column: 45, scope: !9686)
!9692 = !DILocation(line: 466, column: 49, scope: !9686)
!9693 = !DILocation(line: 466, column: 55, scope: !9686)
!9694 = !DILocation(line: 466, column: 60, scope: !9686)
!9695 = !DILocation(line: 466, column: 64, scope: !9686)
!9696 = !DILocation(line: 466, column: 43, scope: !9686)
!9697 = !DILocation(line: 466, column: 4, scope: !9686)
!9698 = !DILocation(line: 466, column: 8, scope: !9686)
!9699 = !DILocation(line: 466, column: 13, scope: !9686)
!9700 = !DILocation(line: 467, column: 8, scope: !9701)
!9701 = distinct !DILexicalBlock(scope: !9686, file: !1047, line: 467, column: 8)
!9702 = !DILocation(line: 467, column: 12, scope: !9701)
!9703 = !DILocation(line: 467, column: 8, scope: !9686)
!9704 = !DILocation(line: 468, column: 6, scope: !9701)
!9705 = !DILocation(line: 469, column: 5, scope: !9686)
!9706 = !DILocation(line: 469, column: 12, scope: !9686)
!9707 = !DILocation(line: 470, column: 4, scope: !9686)
!9708 = !DILocation(line: 470, column: 8, scope: !9686)
!9709 = !DILocation(line: 470, column: 15, scope: !9686)
!9710 = distinct !{!9710, !9680, !9711}
!9711 = !DILocation(line: 471, column: 2, scope: !9681)
!9712 = !DILocation(line: 474, column: 7, scope: !9681)
!9713 = !DILocation(line: 478, column: 4, scope: !9714)
!9714 = distinct !DILexicalBlock(scope: !9681, file: !1047, line: 475, column: 2)
!9715 = !DILocation(line: 480, column: 19, scope: !9716)
!9716 = distinct !DILexicalBlock(scope: !9714, file: !1047, line: 479, column: 6)
!9717 = !DILocation(line: 480, column: 23, scope: !9716)
!9718 = !DILocation(line: 480, column: 29, scope: !9716)
!9719 = !DILocation(line: 480, column: 8, scope: !9716)
!9720 = !DILocation(line: 480, column: 12, scope: !9716)
!9721 = !DILocation(line: 480, column: 17, scope: !9716)
!9722 = !DILocation(line: 481, column: 13, scope: !9723)
!9723 = distinct !DILexicalBlock(scope: !9716, file: !1047, line: 481, column: 12)
!9724 = !DILocation(line: 481, column: 17, scope: !9723)
!9725 = !DILocation(line: 481, column: 12, scope: !9716)
!9726 = !DILocation(line: 482, column: 3, scope: !9723)
!9727 = !DILocation(line: 483, column: 6, scope: !9716)
!9728 = !DILocation(line: 484, column: 11, scope: !9714)
!9729 = !DILocation(line: 484, column: 15, scope: !9714)
!9730 = !DILocation(line: 484, column: 21, scope: !9714)
!9731 = !DILocation(line: 484, column: 28, scope: !9714)
!9732 = !DILocation(line: 484, column: 32, scope: !9714)
!9733 = !DILocation(line: 484, column: 38, scope: !9714)
!9734 = !DILocation(line: 484, column: 26, scope: !9714)
!9735 = distinct !{!9735, !9713, !9736}
!9736 = !DILocation(line: 484, column: 42, scope: !9714)
!9737 = !DILocation(line: 488, column: 4, scope: !9714)
!9738 = !DILocation(line: 488, column: 11, scope: !9714)
!9739 = !DILocation(line: 488, column: 15, scope: !9714)
!9740 = !DILocation(line: 488, column: 21, scope: !9714)
!9741 = !DILocation(line: 488, column: 28, scope: !9714)
!9742 = !DILocation(line: 488, column: 32, scope: !9714)
!9743 = !DILocation(line: 488, column: 38, scope: !9714)
!9744 = !DILocation(line: 488, column: 26, scope: !9714)
!9745 = !DILocation(line: 490, column: 19, scope: !9746)
!9746 = distinct !DILexicalBlock(scope: !9714, file: !1047, line: 489, column: 6)
!9747 = !DILocation(line: 490, column: 23, scope: !9746)
!9748 = !DILocation(line: 490, column: 29, scope: !9746)
!9749 = !DILocation(line: 490, column: 8, scope: !9746)
!9750 = !DILocation(line: 490, column: 12, scope: !9746)
!9751 = !DILocation(line: 490, column: 17, scope: !9746)
!9752 = !DILocation(line: 491, column: 13, scope: !9753)
!9753 = distinct !DILexicalBlock(scope: !9746, file: !1047, line: 491, column: 12)
!9754 = !DILocation(line: 491, column: 17, scope: !9753)
!9755 = !DILocation(line: 491, column: 12, scope: !9746)
!9756 = !DILocation(line: 492, column: 3, scope: !9753)
!9757 = distinct !{!9757, !9737, !9758}
!9758 = !DILocation(line: 493, column: 6, scope: !9714)
!9759 = !DILocation(line: 494, column: 2, scope: !9714)
!9760 = !DILocation(line: 495, column: 14, scope: !9681)
!9761 = !DILocation(line: 495, column: 18, scope: !9681)
!9762 = !DILocation(line: 495, column: 24, scope: !9681)
!9763 = !DILocation(line: 495, column: 32, scope: !9681)
!9764 = !DILocation(line: 495, column: 36, scope: !9681)
!9765 = !DILocation(line: 495, column: 42, scope: !9681)
!9766 = !DILocation(line: 495, column: 29, scope: !9681)
!9767 = distinct !{!9767, !9712, !9768}
!9768 = !DILocation(line: 495, column: 46, scope: !9681)
!9769 = !DILocation(line: 497, column: 17, scope: !9681)
!9770 = !DILocation(line: 497, column: 21, scope: !9681)
!9771 = !DILocation(line: 497, column: 27, scope: !9681)
!9772 = !DILocation(line: 497, column: 32, scope: !9681)
!9773 = !DILocation(line: 497, column: 8, scope: !9681)
!9774 = !DILocation(line: 497, column: 15, scope: !9681)
!9775 = !DILocation(line: 498, column: 7, scope: !9681)
!9776 = !DILocation(line: 498, column: 11, scope: !9681)
!9777 = !DILocation(line: 498, column: 19, scope: !9681)
!9778 = distinct !{!9778, !9679, !9779}
!9779 = !DILocation(line: 499, column: 5, scope: !9641)
!9780 = !DILocation(line: 500, column: 1, scope: !9641)
!9781 = distinct !DISubprogram(name: "gimple_uid", scope: !608, file: !608, line: 1265, type: !5472, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9782 = !DILocalVariable(name: "g", arg: 1, scope: !9781, file: !608, line: 1265, type: !5454)
!9783 = !DILocation(line: 1265, column: 26, scope: !9781)
!9784 = !DILocation(line: 1267, column: 10, scope: !9781)
!9785 = !DILocation(line: 1267, column: 13, scope: !9781)
!9786 = !DILocation(line: 1267, column: 20, scope: !9781)
!9787 = !DILocation(line: 1267, column: 3, scope: !9781)
!9788 = distinct !DISubprogram(name: "get_expr_type", scope: !3, file: !3, line: 1384, type: !8742, scopeLine: 1385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9789 = !DILocalVariable(name: "e", arg: 1, scope: !9788, file: !3, line: 1384, type: !2873)
!9790 = !DILocation(line: 1384, column: 31, scope: !9788)
!9791 = !DILocation(line: 1386, column: 11, scope: !9788)
!9792 = !DILocation(line: 1386, column: 14, scope: !9788)
!9793 = !DILocation(line: 1386, column: 3, scope: !9788)
!9794 = !DILocation(line: 1389, column: 14, scope: !9795)
!9795 = distinct !DILexicalBlock(scope: !9788, file: !3, line: 1387, column: 5)
!9796 = !DILocation(line: 1389, column: 7, scope: !9795)
!9797 = !DILocation(line: 1391, column: 14, scope: !9795)
!9798 = !DILocation(line: 1391, column: 7, scope: !9795)
!9799 = !DILocation(line: 1393, column: 14, scope: !9795)
!9800 = !DILocation(line: 1393, column: 38, scope: !9795)
!9801 = !DILocation(line: 1393, column: 7, scope: !9795)
!9802 = !DILocation(line: 1395, column: 14, scope: !9795)
!9803 = !DILocation(line: 1395, column: 33, scope: !9795)
!9804 = !DILocation(line: 1395, column: 7, scope: !9795)
!9805 = !DILocation(line: 1397, column: 3, scope: !9788)
!9806 = !DILocation(line: 1399, column: 5, scope: !9788)
!9807 = !DILocation(line: 1401, column: 1, scope: !9788)
!9808 = distinct !DISubprogram(name: "get_var_ann", scope: !5481, file: !5481, line: 141, type: !9809, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9809 = !DISubroutineType(types: !9810)
!9810 = !{!9811, !1123}
!9811 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !1778, line: 297, baseType: !1776)
!9812 = !DILocalVariable(name: "var", arg: 1, scope: !9808, file: !5481, line: 141, type: !1123)
!9813 = !DILocation(line: 141, column: 19, scope: !9808)
!9814 = !DILocalVariable(name: "p", scope: !9808, file: !5481, line: 143, type: !9815)
!9815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9811, size: 64)
!9816 = !DILocation(line: 143, column: 14, scope: !9808)
!9817 = !DILocation(line: 143, column: 18, scope: !9808)
!9818 = !DILocation(line: 144, column: 3, scope: !9808)
!9819 = !DILocation(line: 145, column: 11, scope: !9808)
!9820 = !DILocation(line: 145, column: 10, scope: !9808)
!9821 = !DILocation(line: 145, column: 16, scope: !9808)
!9822 = !DILocation(line: 145, column: 15, scope: !9808)
!9823 = !DILocation(line: 145, column: 36, scope: !9808)
!9824 = !DILocation(line: 145, column: 20, scope: !9808)
!9825 = !DILocation(line: 145, column: 3, scope: !9808)
!9826 = distinct !DISubprogram(name: "make_ssa_name", scope: !5481, file: !5481, line: 1245, type: !9827, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9827 = !DISubroutineType(types: !9828)
!9828 = !{!1123, !1123, !1386}
!9829 = !DILocalVariable(name: "var", arg: 1, scope: !9826, file: !5481, line: 1245, type: !1123)
!9830 = !DILocation(line: 1245, column: 21, scope: !9826)
!9831 = !DILocalVariable(name: "stmt", arg: 2, scope: !9826, file: !5481, line: 1245, type: !1386)
!9832 = !DILocation(line: 1245, column: 33, scope: !9826)
!9833 = !DILocation(line: 1247, column: 28, scope: !9826)
!9834 = !DILocation(line: 1247, column: 34, scope: !9826)
!9835 = !DILocation(line: 1247, column: 39, scope: !9826)
!9836 = !DILocation(line: 1247, column: 10, scope: !9826)
!9837 = !DILocation(line: 1247, column: 3, scope: !9826)
!9838 = distinct !DISubprogram(name: "get_or_alloc_expr_for", scope: !3, file: !3, line: 1114, type: !6244, scopeLine: 1115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9839 = !DILocalVariable(name: "t", arg: 1, scope: !9838, file: !3, line: 1114, type: !1123)
!9840 = !DILocation(line: 1114, column: 29, scope: !9838)
!9841 = !DILocation(line: 1116, column: 7, scope: !9842)
!9842 = distinct !DILexicalBlock(scope: !9838, file: !3, line: 1116, column: 7)
!9843 = !DILocation(line: 1116, column: 21, scope: !9842)
!9844 = !DILocation(line: 1116, column: 7, scope: !9838)
!9845 = !DILocation(line: 1117, column: 40, scope: !9842)
!9846 = !DILocation(line: 1117, column: 12, scope: !9842)
!9847 = !DILocation(line: 1117, column: 5, scope: !9842)
!9848 = !DILocation(line: 1118, column: 37, scope: !9849)
!9849 = distinct !DILexicalBlock(scope: !9842, file: !3, line: 1118, column: 12)
!9850 = !DILocation(line: 1118, column: 12, scope: !9849)
!9851 = !DILocation(line: 1118, column: 12, scope: !9842)
!9852 = !DILocation(line: 1119, column: 44, scope: !9849)
!9853 = !DILocation(line: 1119, column: 12, scope: !9849)
!9854 = !DILocation(line: 1119, column: 5, scope: !9849)
!9855 = !DILocalVariable(name: "result", scope: !9856, file: !3, line: 1125, type: !2414)
!9856 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 1121, column: 5)
!9857 = !DILocation(line: 1125, column: 20, scope: !9856)
!9858 = !DILocalVariable(name: "result_id", scope: !9856, file: !3, line: 1126, type: !6)
!9859 = !DILocation(line: 1126, column: 20, scope: !9856)
!9860 = !DILocation(line: 1127, column: 26, scope: !9856)
!9861 = !DILocation(line: 1127, column: 7, scope: !9856)
!9862 = !DILocation(line: 1128, column: 11, scope: !9863)
!9863 = distinct !DILexicalBlock(scope: !9856, file: !3, line: 1128, column: 11)
!9864 = !DILocation(line: 1128, column: 18, scope: !9863)
!9865 = !DILocation(line: 1128, column: 11, scope: !9856)
!9866 = !DILocalVariable(name: "e", scope: !9867, file: !3, line: 1130, type: !1112)
!9867 = distinct !DILexicalBlock(scope: !9863, file: !3, line: 1129, column: 2)
!9868 = !DILocation(line: 1130, column: 13, scope: !9867)
!9869 = !DILocation(line: 1130, column: 40, scope: !9867)
!9870 = !DILocation(line: 1130, column: 28, scope: !9867)
!9871 = !DILocation(line: 1130, column: 17, scope: !9867)
!9872 = !DILocation(line: 1131, column: 4, scope: !9867)
!9873 = !DILocation(line: 1131, column: 7, scope: !9867)
!9874 = !DILocation(line: 1131, column: 12, scope: !9867)
!9875 = !DILocation(line: 1132, column: 24, scope: !9867)
!9876 = !DILocation(line: 1132, column: 4, scope: !9867)
!9877 = !DILocation(line: 1132, column: 22, scope: !9867)
!9878 = !DILocation(line: 1133, column: 38, scope: !9867)
!9879 = !DILocation(line: 1133, column: 16, scope: !9867)
!9880 = !DILocation(line: 1133, column: 14, scope: !9867)
!9881 = !DILocation(line: 1134, column: 8, scope: !9882)
!9882 = distinct !DILexicalBlock(scope: !9867, file: !3, line: 1134, column: 8)
!9883 = !DILocation(line: 1134, column: 18, scope: !9882)
!9884 = !DILocation(line: 1134, column: 8, scope: !9867)
!9885 = !DILocation(line: 1136, column: 19, scope: !9886)
!9886 = distinct !DILexicalBlock(scope: !9882, file: !3, line: 1135, column: 6)
!9887 = !DILocation(line: 1136, column: 34, scope: !9886)
!9888 = !DILocation(line: 1136, column: 8, scope: !9886)
!9889 = !DILocation(line: 1137, column: 31, scope: !9886)
!9890 = !DILocation(line: 1137, column: 12, scope: !9886)
!9891 = !DILocation(line: 1137, column: 10, scope: !9886)
!9892 = !DILocation(line: 1138, column: 15, scope: !9886)
!9893 = !DILocation(line: 1138, column: 8, scope: !9886)
!9894 = !DILocation(line: 1140, column: 25, scope: !9867)
!9895 = !DILocation(line: 1140, column: 4, scope: !9867)
!9896 = !DILocation(line: 1141, column: 11, scope: !9867)
!9897 = !DILocation(line: 1141, column: 4, scope: !9867)
!9898 = !DILocation(line: 1144, column: 3, scope: !9838)
!9899 = !DILocation(line: 1145, column: 1, scope: !9838)
!9900 = distinct !DISubprogram(name: "get_constant_for_value_id", scope: !3, file: !3, line: 1093, type: !9901, scopeLine: 1094, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9901 = !DISubroutineType(types: !9902)
!9902 = !{!1123, !6}
!9903 = !DILocalVariable(name: "v", arg: 1, scope: !9900, file: !3, line: 1093, type: !6)
!9904 = !DILocation(line: 1093, column: 41, scope: !9900)
!9905 = !DILocation(line: 1095, column: 28, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9900, file: !3, line: 1095, column: 7)
!9907 = !DILocation(line: 1095, column: 7, scope: !9906)
!9908 = !DILocation(line: 1095, column: 7, scope: !9900)
!9909 = !DILocalVariable(name: "i", scope: !9910, file: !3, line: 1097, type: !6)
!9910 = distinct !DILexicalBlock(scope: !9906, file: !3, line: 1096, column: 5)
!9911 = !DILocation(line: 1097, column: 20, scope: !9910)
!9912 = !DILocalVariable(name: "bi", scope: !9910, file: !3, line: 1098, type: !3079)
!9913 = !DILocation(line: 1098, column: 23, scope: !9910)
!9914 = !DILocalVariable(name: "exprset", scope: !9910, file: !3, line: 1099, type: !1038)
!9915 = !DILocation(line: 1099, column: 20, scope: !9910)
!9916 = !DILocation(line: 1099, column: 30, scope: !9910)
!9917 = !DILocation(line: 1101, column: 7, scope: !9918)
!9918 = distinct !DILexicalBlock(scope: !9910, file: !3, line: 1101, column: 7)
!9919 = !DILocation(line: 1101, column: 7, scope: !9920)
!9920 = distinct !DILexicalBlock(scope: !9918, file: !3, line: 1101, column: 7)
!9921 = !DILocalVariable(name: "expr", scope: !9922, file: !3, line: 1103, type: !1112)
!9922 = distinct !DILexicalBlock(scope: !9920, file: !3, line: 1102, column: 2)
!9923 = !DILocation(line: 1103, column: 13, scope: !9922)
!9924 = !DILocation(line: 1103, column: 39, scope: !9922)
!9925 = !DILocation(line: 1103, column: 20, scope: !9922)
!9926 = !DILocation(line: 1104, column: 8, scope: !9927)
!9927 = distinct !DILexicalBlock(scope: !9922, file: !3, line: 1104, column: 8)
!9928 = !DILocation(line: 1104, column: 14, scope: !9927)
!9929 = !DILocation(line: 1104, column: 19, scope: !9927)
!9930 = !DILocation(line: 1104, column: 8, scope: !9922)
!9931 = !DILocation(line: 1105, column: 13, scope: !9927)
!9932 = !DILocation(line: 1105, column: 6, scope: !9927)
!9933 = !DILocation(line: 1106, column: 2, scope: !9922)
!9934 = distinct !{!9934, !9917, !9935}
!9935 = !DILocation(line: 1106, column: 2, scope: !9918)
!9936 = !DILocation(line: 1107, column: 5, scope: !9910)
!9937 = !DILocation(line: 1108, column: 3, scope: !9900)
!9938 = !DILocation(line: 1109, column: 1, scope: !9900)
!9939 = distinct !DISubprogram(name: "bitmap_set_replace_value", scope: !3, file: !3, line: 840, type: !9940, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9940 = !DISubroutineType(types: !9941)
!9941 = !{null, !1038, !6, !2873}
!9942 = !DILocalVariable(name: "set", arg: 1, scope: !9939, file: !3, line: 840, type: !1038)
!9943 = !DILocation(line: 840, column: 40, scope: !9939)
!9944 = !DILocalVariable(name: "lookfor", arg: 2, scope: !9939, file: !3, line: 840, type: !6)
!9945 = !DILocation(line: 840, column: 58, scope: !9939)
!9946 = !DILocalVariable(name: "expr", arg: 3, scope: !9939, file: !3, line: 841, type: !2873)
!9947 = !DILocation(line: 841, column: 21, scope: !9939)
!9948 = !DILocalVariable(name: "exprset", scope: !9939, file: !3, line: 843, type: !1038)
!9949 = !DILocation(line: 843, column: 16, scope: !9939)
!9950 = !DILocalVariable(name: "i", scope: !9939, file: !3, line: 844, type: !6)
!9951 = !DILocation(line: 844, column: 16, scope: !9939)
!9952 = !DILocalVariable(name: "bi", scope: !9939, file: !3, line: 845, type: !3079)
!9953 = !DILocation(line: 845, column: 19, scope: !9939)
!9954 = !DILocation(line: 847, column: 28, scope: !9955)
!9955 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 847, column: 7)
!9956 = !DILocation(line: 847, column: 7, scope: !9955)
!9957 = !DILocation(line: 847, column: 7, scope: !9939)
!9958 = !DILocation(line: 848, column: 5, scope: !9955)
!9959 = !DILocation(line: 850, column: 35, scope: !9960)
!9960 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 850, column: 7)
!9961 = !DILocation(line: 850, column: 40, scope: !9960)
!9962 = !DILocation(line: 850, column: 8, scope: !9960)
!9963 = !DILocation(line: 850, column: 7, scope: !9939)
!9964 = !DILocation(line: 851, column: 5, scope: !9960)
!9965 = !DILocation(line: 862, column: 13, scope: !9939)
!9966 = !DILocation(line: 862, column: 11, scope: !9939)
!9967 = !DILocation(line: 863, column: 3, scope: !9968)
!9968 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 863, column: 3)
!9969 = !DILocation(line: 863, column: 3, scope: !9970)
!9970 = distinct !DILexicalBlock(scope: !9968, file: !3, line: 863, column: 3)
!9971 = !DILocation(line: 865, column: 25, scope: !9972)
!9972 = distinct !DILexicalBlock(scope: !9973, file: !3, line: 865, column: 11)
!9973 = distinct !DILexicalBlock(scope: !9970, file: !3, line: 864, column: 5)
!9974 = !DILocation(line: 865, column: 30, scope: !9972)
!9975 = !DILocation(line: 865, column: 43, scope: !9972)
!9976 = !DILocation(line: 865, column: 11, scope: !9972)
!9977 = !DILocation(line: 865, column: 11, scope: !9973)
!9978 = !DILocation(line: 867, column: 22, scope: !9979)
!9979 = distinct !DILexicalBlock(scope: !9972, file: !3, line: 866, column: 2)
!9980 = !DILocation(line: 867, column: 27, scope: !9979)
!9981 = !DILocation(line: 867, column: 40, scope: !9979)
!9982 = !DILocation(line: 867, column: 4, scope: !9979)
!9983 = !DILocation(line: 868, column: 20, scope: !9979)
!9984 = !DILocation(line: 868, column: 25, scope: !9979)
!9985 = !DILocation(line: 868, column: 57, scope: !9979)
!9986 = !DILocation(line: 868, column: 38, scope: !9979)
!9987 = !DILocation(line: 868, column: 4, scope: !9979)
!9988 = !DILocation(line: 869, column: 4, scope: !9979)
!9989 = !DILocation(line: 871, column: 5, scope: !9973)
!9990 = distinct !{!9990, !9967, !9991}
!9991 = !DILocation(line: 871, column: 5, scope: !9968)
!9992 = !DILocation(line: 872, column: 1, scope: !9939)
!9993 = distinct !DISubprogram(name: "get_expression_id", scope: !3, file: !3, line: 280, type: !3214, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!9994 = !DILocalVariable(name: "expr", arg: 1, scope: !9993, file: !3, line: 280, type: !2873)
!9995 = !DILocation(line: 280, column: 35, scope: !9993)
!9996 = !DILocation(line: 282, column: 10, scope: !9993)
!9997 = !DILocation(line: 282, column: 16, scope: !9993)
!9998 = !DILocation(line: 282, column: 3, scope: !9993)
!9999 = distinct !DISubprogram(name: "valid_in_sets", scope: !3, file: !3, line: 2088, type: !10000, scopeLine: 2090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10000 = !DISubroutineType(types: !10001)
!10001 = !{!1236, !1038, !1038, !1112, !1838}
!10002 = !DILocalVariable(name: "set1", arg: 1, scope: !9999, file: !3, line: 2088, type: !1038)
!10003 = !DILocation(line: 2088, column: 29, scope: !9999)
!10004 = !DILocalVariable(name: "set2", arg: 2, scope: !9999, file: !3, line: 2088, type: !1038)
!10005 = !DILocation(line: 2088, column: 48, scope: !9999)
!10006 = !DILocalVariable(name: "expr", arg: 3, scope: !9999, file: !3, line: 2088, type: !1112)
!10007 = !DILocation(line: 2088, column: 63, scope: !9999)
!10008 = !DILocalVariable(name: "block", arg: 4, scope: !9999, file: !3, line: 2089, type: !1838)
!10009 = !DILocation(line: 2089, column: 21, scope: !9999)
!10010 = !DILocation(line: 2091, column: 11, scope: !9999)
!10011 = !DILocation(line: 2091, column: 17, scope: !9999)
!10012 = !DILocation(line: 2091, column: 3, scope: !9999)
!10013 = !DILocation(line: 2094, column: 40, scope: !10014)
!10014 = distinct !DILexicalBlock(scope: !9999, file: !3, line: 2092, column: 5)
!10015 = !DILocation(line: 2094, column: 59, scope: !10014)
!10016 = !DILocation(line: 2094, column: 14, scope: !10014)
!10017 = !DILocation(line: 2094, column: 7, scope: !10014)
!10018 = !DILocalVariable(name: "i", scope: !10019, file: !3, line: 2097, type: !6)
!10019 = distinct !DILexicalBlock(scope: !10014, file: !3, line: 2096, column: 7)
!10020 = !DILocation(line: 2097, column: 15, scope: !10019)
!10021 = !DILocalVariable(name: "nary", scope: !10019, file: !3, line: 2098, type: !2414)
!10022 = !DILocation(line: 2098, column: 15, scope: !10019)
!10023 = !DILocation(line: 2098, column: 22, scope: !10019)
!10024 = !DILocation(line: 2099, column: 9, scope: !10025)
!10025 = distinct !DILexicalBlock(scope: !10019, file: !3, line: 2099, column: 2)
!10026 = !DILocation(line: 2099, column: 7, scope: !10025)
!10027 = !DILocation(line: 2099, column: 14, scope: !10028)
!10028 = distinct !DILexicalBlock(scope: !10025, file: !3, line: 2099, column: 2)
!10029 = !DILocation(line: 2099, column: 18, scope: !10028)
!10030 = !DILocation(line: 2099, column: 24, scope: !10028)
!10031 = !DILocation(line: 2099, column: 16, scope: !10028)
!10032 = !DILocation(line: 2099, column: 2, scope: !10025)
!10033 = !DILocation(line: 2101, column: 10, scope: !10034)
!10034 = distinct !DILexicalBlock(scope: !10035, file: !3, line: 2101, column: 10)
!10035 = distinct !DILexicalBlock(scope: !10028, file: !3, line: 2100, column: 4)
!10036 = !DILocation(line: 2101, column: 34, scope: !10034)
!10037 = !DILocation(line: 2101, column: 10, scope: !10035)
!10038 = !DILocalVariable(name: "temp", scope: !10039, file: !3, line: 2103, type: !1114)
!10039 = distinct !DILexicalBlock(scope: !10034, file: !3, line: 2102, column: 8)
!10040 = !DILocation(line: 2103, column: 21, scope: !10039)
!10041 = !DILocation(line: 2104, column: 8, scope: !10039)
!10042 = !DILocation(line: 2104, column: 13, scope: !10039)
!10043 = !DILocation(line: 2105, column: 8, scope: !10039)
!10044 = !DILocation(line: 2105, column: 11, scope: !10039)
!10045 = !DILocation(line: 2106, column: 27, scope: !10039)
!10046 = !DILocation(line: 2106, column: 33, scope: !10039)
!10047 = !DILocation(line: 2106, column: 36, scope: !10039)
!10048 = !DILocation(line: 2106, column: 3, scope: !10039)
!10049 = !DILocation(line: 2106, column: 25, scope: !10039)
!10050 = !DILocation(line: 2107, column: 13, scope: !10039)
!10051 = !DILocation(line: 2107, column: 8, scope: !10039)
!10052 = !DILocation(line: 2107, column: 11, scope: !10039)
!10053 = !DILocation(line: 2108, column: 12, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 2108, column: 7)
!10055 = !DILocation(line: 2108, column: 15, scope: !10054)
!10056 = !DILocation(line: 2108, column: 7, scope: !10039)
!10057 = !DILocation(line: 2109, column: 5, scope: !10054)
!10058 = !DILocation(line: 2110, column: 8, scope: !10059)
!10059 = distinct !DILexicalBlock(scope: !10039, file: !3, line: 2110, column: 7)
!10060 = !DILocation(line: 2110, column: 7, scope: !10039)
!10061 = !DILocation(line: 2112, column: 5, scope: !10059)
!10062 = !DILocation(line: 2113, column: 8, scope: !10039)
!10063 = !DILocation(line: 2114, column: 4, scope: !10035)
!10064 = !DILocation(line: 2099, column: 33, scope: !10028)
!10065 = !DILocation(line: 2099, column: 2, scope: !10028)
!10066 = distinct !{!10066, !10032, !10067}
!10067 = !DILocation(line: 2114, column: 4, scope: !10025)
!10068 = !DILocation(line: 2119, column: 6, scope: !10069)
!10069 = distinct !DILexicalBlock(scope: !10019, file: !3, line: 2119, column: 6)
!10070 = !DILocation(line: 2120, column: 6, scope: !10069)
!10071 = !DILocation(line: 2120, column: 27, scope: !10069)
!10072 = !DILocation(line: 2120, column: 9, scope: !10069)
!10073 = !DILocation(line: 2119, column: 6, scope: !10019)
!10074 = !DILocation(line: 2121, column: 4, scope: !10069)
!10075 = !DILocation(line: 2122, column: 2, scope: !10019)
!10076 = !DILocalVariable(name: "ref", scope: !10077, file: !3, line: 2127, type: !2428)
!10077 = distinct !DILexicalBlock(scope: !10014, file: !3, line: 2126, column: 7)
!10078 = !DILocation(line: 2127, column: 17, scope: !10077)
!10079 = !DILocation(line: 2127, column: 23, scope: !10077)
!10080 = !DILocalVariable(name: "vro", scope: !10077, file: !3, line: 2128, type: !2935)
!10081 = !DILocation(line: 2128, column: 20, scope: !10077)
!10082 = !DILocalVariable(name: "i", scope: !10077, file: !3, line: 2129, type: !6)
!10083 = !DILocation(line: 2129, column: 15, scope: !10077)
!10084 = !DILocation(line: 2131, column: 9, scope: !10085)
!10085 = distinct !DILexicalBlock(scope: !10077, file: !3, line: 2131, column: 2)
!10086 = !DILocation(line: 2131, column: 7, scope: !10085)
!10087 = !DILocation(line: 2131, column: 14, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10085, file: !3, line: 2131, column: 2)
!10089 = !DILocation(line: 2131, column: 2, scope: !10085)
!10090 = !DILocation(line: 2133, column: 30, scope: !10091)
!10091 = distinct !DILexicalBlock(scope: !10092, file: !3, line: 2133, column: 10)
!10092 = distinct !DILexicalBlock(scope: !10088, file: !3, line: 2132, column: 4)
!10093 = !DILocation(line: 2133, column: 36, scope: !10091)
!10094 = !DILocation(line: 2133, column: 42, scope: !10091)
!10095 = !DILocation(line: 2133, column: 11, scope: !10091)
!10096 = !DILocation(line: 2133, column: 10, scope: !10092)
!10097 = !DILocation(line: 2134, column: 8, scope: !10091)
!10098 = !DILocation(line: 2135, column: 4, scope: !10092)
!10099 = !DILocation(line: 2131, column: 71, scope: !10088)
!10100 = !DILocation(line: 2131, column: 2, scope: !10088)
!10101 = distinct !{!10101, !10089, !10102}
!10102 = !DILocation(line: 2135, column: 4, scope: !10085)
!10103 = !DILocation(line: 2136, column: 6, scope: !10104)
!10104 = distinct !DILexicalBlock(scope: !10077, file: !3, line: 2136, column: 6)
!10105 = !DILocation(line: 2136, column: 11, scope: !10104)
!10106 = !DILocation(line: 2136, column: 6, scope: !10077)
!10107 = !DILocalVariable(name: "def_stmt", scope: !10108, file: !3, line: 2138, type: !1386)
!10108 = distinct !DILexicalBlock(scope: !10104, file: !3, line: 2137, column: 4)
!10109 = !DILocation(line: 2138, column: 13, scope: !10108)
!10110 = !DILocation(line: 2138, column: 24, scope: !10108)
!10111 = !DILocation(line: 2139, column: 25, scope: !10112)
!10112 = distinct !DILexicalBlock(scope: !10108, file: !3, line: 2139, column: 10)
!10113 = !DILocation(line: 2139, column: 11, scope: !10112)
!10114 = !DILocation(line: 2140, column: 3, scope: !10112)
!10115 = !DILocation(line: 2140, column: 17, scope: !10112)
!10116 = !DILocation(line: 2140, column: 6, scope: !10112)
!10117 = !DILocation(line: 2140, column: 30, scope: !10112)
!10118 = !DILocation(line: 2140, column: 27, scope: !10112)
!10119 = !DILocation(line: 2141, column: 3, scope: !10112)
!10120 = !DILocation(line: 2142, column: 9, scope: !10112)
!10121 = !DILocation(line: 2142, column: 27, scope: !10112)
!10122 = !DILocation(line: 2142, column: 16, scope: !10112)
!10123 = !DILocation(line: 2141, column: 7, scope: !10112)
!10124 = !DILocation(line: 2139, column: 10, scope: !10108)
!10125 = !DILocation(line: 2143, column: 8, scope: !10112)
!10126 = !DILocation(line: 2144, column: 4, scope: !10108)
!10127 = !DILocation(line: 2145, column: 33, scope: !10077)
!10128 = !DILocation(line: 2145, column: 39, scope: !10077)
!10129 = !DILocation(line: 2145, column: 10, scope: !10077)
!10130 = !DILocation(line: 2145, column: 9, scope: !10077)
!10131 = !DILocation(line: 2145, column: 2, scope: !10077)
!10132 = !DILocation(line: 2148, column: 7, scope: !10014)
!10133 = !DILocation(line: 2149, column: 5, scope: !10014)
!10134 = !DILocation(line: 2151, column: 5, scope: !9999)
!10135 = !DILocation(line: 2153, column: 1, scope: !9999)
!10136 = distinct !DISubprogram(name: "bitmap_remove_from_set", scope: !3, file: !3, line: 665, type: !6286, scopeLine: 666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10137 = !DILocalVariable(name: "set", arg: 1, scope: !10136, file: !3, line: 665, type: !1038)
!10138 = !DILocation(line: 665, column: 38, scope: !10136)
!10139 = !DILocalVariable(name: "expr", arg: 2, scope: !10136, file: !3, line: 665, type: !1112)
!10140 = !DILocation(line: 665, column: 52, scope: !10136)
!10141 = !DILocalVariable(name: "val", scope: !10136, file: !3, line: 667, type: !6)
!10142 = !DILocation(line: 667, column: 16, scope: !10136)
!10143 = !DILocation(line: 667, column: 42, scope: !10136)
!10144 = !DILocation(line: 667, column: 23, scope: !10136)
!10145 = !DILocation(line: 668, column: 29, scope: !10146)
!10146 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 668, column: 7)
!10147 = !DILocation(line: 668, column: 8, scope: !10146)
!10148 = !DILocation(line: 668, column: 7, scope: !10136)
!10149 = !DILocation(line: 670, column: 25, scope: !10150)
!10150 = distinct !DILexicalBlock(scope: !10146, file: !3, line: 669, column: 5)
!10151 = !DILocation(line: 670, column: 30, scope: !10150)
!10152 = !DILocation(line: 670, column: 38, scope: !10150)
!10153 = !DILocation(line: 670, column: 7, scope: !10150)
!10154 = !DILocation(line: 671, column: 25, scope: !10150)
!10155 = !DILocation(line: 671, column: 30, scope: !10150)
!10156 = !DILocation(line: 671, column: 62, scope: !10150)
!10157 = !DILocation(line: 671, column: 43, scope: !10150)
!10158 = !DILocation(line: 671, column: 7, scope: !10150)
!10159 = !DILocation(line: 672, column: 5, scope: !10150)
!10160 = !DILocation(line: 673, column: 1, scope: !10136)
!10161 = distinct !DISubprogram(name: "bitmap_set_contains_expr", scope: !3, file: !3, line: 832, type: !10162, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10162 = !DISubroutineType(types: !10163)
!10163 = !{!1236, !1038, !2873}
!10164 = !DILocalVariable(name: "set", arg: 1, scope: !10161, file: !3, line: 832, type: !1038)
!10165 = !DILocation(line: 832, column: 40, scope: !10161)
!10166 = !DILocalVariable(name: "expr", arg: 2, scope: !10161, file: !3, line: 832, type: !2873)
!10167 = !DILocation(line: 832, column: 60, scope: !10161)
!10168 = !DILocation(line: 834, column: 24, scope: !10161)
!10169 = !DILocation(line: 834, column: 29, scope: !10161)
!10170 = !DILocation(line: 834, column: 61, scope: !10161)
!10171 = !DILocation(line: 834, column: 42, scope: !10161)
!10172 = !DILocation(line: 834, column: 10, scope: !10161)
!10173 = !DILocation(line: 834, column: 3, scope: !10161)
!10174 = distinct !DISubprogram(name: "vro_valid_in_sets", scope: !3, file: !3, line: 2034, type: !10175, scopeLine: 2036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10175 = !DISubroutineType(types: !10176)
!10176 = !{!1236, !1038, !1038, !2935}
!10177 = !DILocalVariable(name: "set1", arg: 1, scope: !10174, file: !3, line: 2034, type: !1038)
!10178 = !DILocation(line: 2034, column: 33, scope: !10174)
!10179 = !DILocalVariable(name: "set2", arg: 2, scope: !10174, file: !3, line: 2034, type: !1038)
!10180 = !DILocation(line: 2034, column: 52, scope: !10174)
!10181 = !DILocalVariable(name: "vro", arg: 3, scope: !10174, file: !3, line: 2035, type: !2935)
!10182 = !DILocation(line: 2035, column: 24, scope: !10174)
!10183 = !DILocation(line: 2037, column: 7, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10174, file: !3, line: 2037, column: 7)
!10185 = !DILocation(line: 2037, column: 12, scope: !10184)
!10186 = !DILocation(line: 2037, column: 16, scope: !10184)
!10187 = !DILocation(line: 2037, column: 19, scope: !10184)
!10188 = !DILocation(line: 2037, column: 40, scope: !10184)
!10189 = !DILocation(line: 2037, column: 7, scope: !10174)
!10190 = !DILocalVariable(name: "temp", scope: !10191, file: !3, line: 2039, type: !1114)
!10191 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 2038, column: 5)
!10192 = !DILocation(line: 2039, column: 25, scope: !10191)
!10193 = !DILocation(line: 2040, column: 12, scope: !10191)
!10194 = !DILocation(line: 2040, column: 17, scope: !10191)
!10195 = !DILocation(line: 2041, column: 12, scope: !10191)
!10196 = !DILocation(line: 2041, column: 15, scope: !10191)
!10197 = !DILocation(line: 2042, column: 31, scope: !10191)
!10198 = !DILocation(line: 2042, column: 36, scope: !10191)
!10199 = !DILocation(line: 2042, column: 7, scope: !10191)
!10200 = !DILocation(line: 2042, column: 29, scope: !10191)
!10201 = !DILocation(line: 2043, column: 17, scope: !10191)
!10202 = !DILocation(line: 2043, column: 12, scope: !10191)
!10203 = !DILocation(line: 2043, column: 15, scope: !10191)
!10204 = !DILocation(line: 2044, column: 16, scope: !10205)
!10205 = distinct !DILexicalBlock(scope: !10191, file: !3, line: 2044, column: 11)
!10206 = !DILocation(line: 2044, column: 19, scope: !10205)
!10207 = !DILocation(line: 2044, column: 11, scope: !10191)
!10208 = !DILocation(line: 2045, column: 2, scope: !10205)
!10209 = !DILocation(line: 2046, column: 12, scope: !10210)
!10210 = distinct !DILexicalBlock(scope: !10191, file: !3, line: 2046, column: 11)
!10211 = !DILocation(line: 2046, column: 11, scope: !10191)
!10212 = !DILocation(line: 2048, column: 2, scope: !10210)
!10213 = !DILocation(line: 2049, column: 5, scope: !10191)
!10214 = !DILocation(line: 2050, column: 7, scope: !10215)
!10215 = distinct !DILexicalBlock(scope: !10174, file: !3, line: 2050, column: 7)
!10216 = !DILocation(line: 2050, column: 12, scope: !10215)
!10217 = !DILocation(line: 2050, column: 16, scope: !10215)
!10218 = !DILocation(line: 2050, column: 19, scope: !10215)
!10219 = !DILocation(line: 2050, column: 40, scope: !10215)
!10220 = !DILocation(line: 2050, column: 7, scope: !10174)
!10221 = !DILocalVariable(name: "temp", scope: !10222, file: !3, line: 2052, type: !1114)
!10222 = distinct !DILexicalBlock(scope: !10215, file: !3, line: 2051, column: 5)
!10223 = !DILocation(line: 2052, column: 25, scope: !10222)
!10224 = !DILocation(line: 2053, column: 12, scope: !10222)
!10225 = !DILocation(line: 2053, column: 17, scope: !10222)
!10226 = !DILocation(line: 2054, column: 12, scope: !10222)
!10227 = !DILocation(line: 2054, column: 15, scope: !10222)
!10228 = !DILocation(line: 2055, column: 31, scope: !10222)
!10229 = !DILocation(line: 2055, column: 36, scope: !10222)
!10230 = !DILocation(line: 2055, column: 7, scope: !10222)
!10231 = !DILocation(line: 2055, column: 29, scope: !10222)
!10232 = !DILocation(line: 2056, column: 17, scope: !10222)
!10233 = !DILocation(line: 2056, column: 12, scope: !10222)
!10234 = !DILocation(line: 2056, column: 15, scope: !10222)
!10235 = !DILocation(line: 2057, column: 16, scope: !10236)
!10236 = distinct !DILexicalBlock(scope: !10222, file: !3, line: 2057, column: 11)
!10237 = !DILocation(line: 2057, column: 19, scope: !10236)
!10238 = !DILocation(line: 2057, column: 11, scope: !10222)
!10239 = !DILocation(line: 2058, column: 2, scope: !10236)
!10240 = !DILocation(line: 2059, column: 12, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10222, file: !3, line: 2059, column: 11)
!10242 = !DILocation(line: 2059, column: 11, scope: !10222)
!10243 = !DILocation(line: 2061, column: 2, scope: !10241)
!10244 = !DILocation(line: 2062, column: 5, scope: !10222)
!10245 = !DILocation(line: 2064, column: 7, scope: !10246)
!10246 = distinct !DILexicalBlock(scope: !10174, file: !3, line: 2064, column: 7)
!10247 = !DILocation(line: 2064, column: 12, scope: !10246)
!10248 = !DILocation(line: 2064, column: 16, scope: !10246)
!10249 = !DILocation(line: 2064, column: 19, scope: !10246)
!10250 = !DILocation(line: 2064, column: 40, scope: !10246)
!10251 = !DILocation(line: 2064, column: 7, scope: !10174)
!10252 = !DILocalVariable(name: "temp", scope: !10253, file: !3, line: 2066, type: !1114)
!10253 = distinct !DILexicalBlock(scope: !10246, file: !3, line: 2065, column: 5)
!10254 = !DILocation(line: 2066, column: 25, scope: !10253)
!10255 = !DILocation(line: 2067, column: 12, scope: !10253)
!10256 = !DILocation(line: 2067, column: 17, scope: !10253)
!10257 = !DILocation(line: 2068, column: 12, scope: !10253)
!10258 = !DILocation(line: 2068, column: 15, scope: !10253)
!10259 = !DILocation(line: 2069, column: 31, scope: !10253)
!10260 = !DILocation(line: 2069, column: 36, scope: !10253)
!10261 = !DILocation(line: 2069, column: 7, scope: !10253)
!10262 = !DILocation(line: 2069, column: 29, scope: !10253)
!10263 = !DILocation(line: 2070, column: 17, scope: !10253)
!10264 = !DILocation(line: 2070, column: 12, scope: !10253)
!10265 = !DILocation(line: 2070, column: 15, scope: !10253)
!10266 = !DILocation(line: 2071, column: 16, scope: !10267)
!10267 = distinct !DILexicalBlock(scope: !10253, file: !3, line: 2071, column: 11)
!10268 = !DILocation(line: 2071, column: 19, scope: !10267)
!10269 = !DILocation(line: 2071, column: 11, scope: !10253)
!10270 = !DILocation(line: 2072, column: 2, scope: !10267)
!10271 = !DILocation(line: 2073, column: 12, scope: !10272)
!10272 = distinct !DILexicalBlock(scope: !10253, file: !3, line: 2073, column: 11)
!10273 = !DILocation(line: 2073, column: 11, scope: !10253)
!10274 = !DILocation(line: 2075, column: 2, scope: !10272)
!10275 = !DILocation(line: 2076, column: 5, scope: !10253)
!10276 = !DILocation(line: 2078, column: 3, scope: !10174)
!10277 = !DILocation(line: 2079, column: 1, scope: !10174)
!10278 = distinct !DISubprogram(name: "value_dies_in_block_x", scope: !3, file: !3, line: 1955, type: !10279, scopeLine: 1956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10279 = !DISubroutineType(types: !10280)
!10280 = !{!1236, !1112, !1838}
!10281 = !DILocalVariable(name: "expr", arg: 1, scope: !10278, file: !3, line: 1955, type: !1112)
!10282 = !DILocation(line: 1955, column: 33, scope: !10278)
!10283 = !DILocalVariable(name: "block", arg: 2, scope: !10278, file: !3, line: 1955, type: !1838)
!10284 = !DILocation(line: 1955, column: 51, scope: !10278)
!10285 = !DILocalVariable(name: "vuse", scope: !10278, file: !3, line: 1957, type: !1123)
!10286 = !DILocation(line: 1957, column: 8, scope: !10278)
!10287 = !DILocation(line: 1957, column: 15, scope: !10278)
!10288 = !DILocation(line: 1957, column: 42, scope: !10278)
!10289 = !DILocalVariable(name: "refx", scope: !10278, file: !3, line: 1958, type: !2428)
!10290 = !DILocation(line: 1958, column: 18, scope: !10278)
!10291 = !DILocation(line: 1958, column: 25, scope: !10278)
!10292 = !DILocalVariable(name: "def", scope: !10278, file: !3, line: 1959, type: !1386)
!10293 = !DILocation(line: 1959, column: 10, scope: !10278)
!10294 = !DILocalVariable(name: "gsi", scope: !10278, file: !3, line: 1960, type: !3861)
!10295 = !DILocation(line: 1960, column: 24, scope: !10278)
!10296 = !DILocalVariable(name: "id", scope: !10278, file: !3, line: 1961, type: !6)
!10297 = !DILocation(line: 1961, column: 12, scope: !10278)
!10298 = !DILocation(line: 1961, column: 36, scope: !10278)
!10299 = !DILocation(line: 1961, column: 17, scope: !10278)
!10300 = !DILocalVariable(name: "res", scope: !10278, file: !3, line: 1962, type: !1236)
!10301 = !DILocation(line: 1962, column: 8, scope: !10278)
!10302 = !DILocalVariable(name: "ref", scope: !10278, file: !3, line: 1963, type: !9257)
!10303 = !DILocation(line: 1963, column: 10, scope: !10278)
!10304 = !DILocation(line: 1965, column: 8, scope: !10305)
!10305 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 1965, column: 7)
!10306 = !DILocation(line: 1965, column: 7, scope: !10278)
!10307 = !DILocation(line: 1966, column: 5, scope: !10305)
!10308 = !DILocation(line: 1969, column: 7, scope: !10309)
!10309 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 1969, column: 7)
!10310 = !DILocation(line: 1970, column: 7, scope: !10309)
!10311 = !DILocation(line: 1970, column: 24, scope: !10309)
!10312 = !DILocation(line: 1970, column: 43, scope: !10309)
!10313 = !DILocation(line: 1970, column: 46, scope: !10309)
!10314 = !DILocation(line: 1970, column: 10, scope: !10309)
!10315 = !DILocation(line: 1969, column: 7, scope: !10278)
!10316 = !DILocation(line: 1971, column: 26, scope: !10309)
!10317 = !DILocation(line: 1971, column: 45, scope: !10309)
!10318 = !DILocation(line: 1971, column: 48, scope: !10309)
!10319 = !DILocation(line: 1971, column: 52, scope: !10309)
!10320 = !DILocation(line: 1971, column: 12, scope: !10309)
!10321 = !DILocation(line: 1971, column: 5, scope: !10309)
!10322 = !DILocation(line: 1978, column: 7, scope: !10278)
!10323 = !DILocation(line: 1978, column: 12, scope: !10278)
!10324 = !DILocation(line: 1979, column: 28, scope: !10325)
!10325 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 1979, column: 3)
!10326 = !DILocation(line: 1979, column: 14, scope: !10325)
!10327 = !DILocation(line: 1979, column: 8, scope: !10325)
!10328 = !DILocation(line: 1979, column: 37, scope: !10329)
!10329 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 1979, column: 3)
!10330 = !DILocation(line: 1979, column: 36, scope: !10329)
!10331 = !DILocation(line: 1979, column: 3, scope: !10325)
!10332 = !DILocalVariable(name: "def_vuse", scope: !10333, file: !3, line: 1981, type: !1123)
!10333 = distinct !DILexicalBlock(scope: !10329, file: !3, line: 1980, column: 5)
!10334 = !DILocation(line: 1981, column: 12, scope: !10333)
!10335 = !DILocalVariable(name: "def_vdef", scope: !10333, file: !3, line: 1981, type: !1123)
!10336 = !DILocation(line: 1981, column: 22, scope: !10333)
!10337 = !DILocation(line: 1982, column: 13, scope: !10333)
!10338 = !DILocation(line: 1982, column: 11, scope: !10333)
!10339 = !DILocation(line: 1983, column: 31, scope: !10333)
!10340 = !DILocation(line: 1983, column: 18, scope: !10333)
!10341 = !DILocation(line: 1983, column: 16, scope: !10333)
!10342 = !DILocation(line: 1984, column: 31, scope: !10333)
!10343 = !DILocation(line: 1984, column: 18, scope: !10333)
!10344 = !DILocation(line: 1984, column: 16, scope: !10333)
!10345 = !DILocation(line: 1987, column: 12, scope: !10346)
!10346 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 1987, column: 11)
!10347 = !DILocation(line: 1987, column: 11, scope: !10333)
!10348 = !DILocation(line: 1988, column: 2, scope: !10346)
!10349 = !DILocation(line: 1991, column: 12, scope: !10350)
!10350 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 1991, column: 11)
!10351 = !DILocation(line: 1991, column: 11, scope: !10333)
!10352 = !DILocation(line: 1994, column: 8, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10354, file: !3, line: 1994, column: 8)
!10354 = distinct !DILexicalBlock(scope: !10350, file: !3, line: 1992, column: 2)
!10355 = !DILocation(line: 1994, column: 20, scope: !10353)
!10356 = !DILocation(line: 1994, column: 17, scope: !10353)
!10357 = !DILocation(line: 1994, column: 8, scope: !10354)
!10358 = !DILocation(line: 1995, column: 6, scope: !10353)
!10359 = !DILocation(line: 1997, column: 4, scope: !10354)
!10360 = !DILocation(line: 2001, column: 15, scope: !10361)
!10361 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 2001, column: 11)
!10362 = !DILocation(line: 2001, column: 20, scope: !10361)
!10363 = !DILocation(line: 2002, column: 4, scope: !10361)
!10364 = !DILocation(line: 2002, column: 45, scope: !10361)
!10365 = !DILocation(line: 2002, column: 51, scope: !10361)
!10366 = !DILocation(line: 2002, column: 56, scope: !10361)
!10367 = !DILocation(line: 2002, column: 62, scope: !10361)
!10368 = !DILocation(line: 2003, column: 11, scope: !10361)
!10369 = !DILocation(line: 2003, column: 17, scope: !10361)
!10370 = !DILocation(line: 2002, column: 8, scope: !10361)
!10371 = !DILocation(line: 2001, column: 11, scope: !10333)
!10372 = !DILocation(line: 2005, column: 8, scope: !10373)
!10373 = distinct !DILexicalBlock(scope: !10361, file: !3, line: 2004, column: 2)
!10374 = !DILocation(line: 2006, column: 4, scope: !10373)
!10375 = !DILocation(line: 2009, column: 37, scope: !10376)
!10376 = distinct !DILexicalBlock(scope: !10333, file: !3, line: 2009, column: 11)
!10377 = !DILocation(line: 2009, column: 11, scope: !10376)
!10378 = !DILocation(line: 2009, column: 11, scope: !10333)
!10379 = !DILocation(line: 2011, column: 8, scope: !10380)
!10380 = distinct !DILexicalBlock(scope: !10376, file: !3, line: 2010, column: 2)
!10381 = !DILocation(line: 2012, column: 4, scope: !10380)
!10382 = !DILocation(line: 2014, column: 5, scope: !10333)
!10383 = !DILocation(line: 1979, column: 54, scope: !10329)
!10384 = !DILocation(line: 1979, column: 3, scope: !10329)
!10385 = distinct !{!10385, !10331, !10386}
!10386 = !DILocation(line: 2014, column: 5, scope: !10325)
!10387 = !DILocation(line: 2017, column: 8, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 2017, column: 7)
!10389 = !DILocation(line: 2017, column: 7, scope: !10278)
!10390 = !DILocation(line: 2018, column: 25, scope: !10388)
!10391 = !DILocation(line: 2018, column: 5, scope: !10388)
!10392 = !DILocation(line: 2018, column: 23, scope: !10388)
!10393 = !DILocation(line: 2019, column: 19, scope: !10278)
!10394 = !DILocation(line: 2019, column: 38, scope: !10278)
!10395 = !DILocation(line: 2019, column: 41, scope: !10278)
!10396 = !DILocation(line: 2019, column: 3, scope: !10278)
!10397 = !DILocation(line: 2020, column: 7, scope: !10398)
!10398 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 2020, column: 7)
!10399 = !DILocation(line: 2020, column: 7, scope: !10278)
!10400 = !DILocation(line: 2021, column: 21, scope: !10398)
!10401 = !DILocation(line: 2021, column: 40, scope: !10398)
!10402 = !DILocation(line: 2021, column: 43, scope: !10398)
!10403 = !DILocation(line: 2021, column: 47, scope: !10398)
!10404 = !DILocation(line: 2021, column: 5, scope: !10398)
!10405 = !DILocation(line: 2023, column: 10, scope: !10278)
!10406 = !DILocation(line: 2023, column: 3, scope: !10278)
!10407 = !DILocation(line: 2024, column: 1, scope: !10278)
!10408 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !349, file: !349, line: 281, type: !10409, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10409 = !DISubroutineType(types: !10410)
!10410 = !{!6, !6830}
!10411 = !DILocalVariable(name: "vec_", arg: 1, scope: !10408, file: !349, line: 281, type: !6830)
!10412 = !DILocation(line: 281, column: 1, scope: !10408)
!10413 = distinct !DISubprogram(name: "bitmap_set_subtract_values", scope: !3, file: !3, line: 800, type: !6325, scopeLine: 801, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10414 = !DILocalVariable(name: "a", arg: 1, scope: !10413, file: !3, line: 800, type: !1038)
!10415 = !DILocation(line: 800, column: 42, scope: !10413)
!10416 = !DILocalVariable(name: "b", arg: 2, scope: !10413, file: !3, line: 800, type: !1038)
!10417 = !DILocation(line: 800, column: 58, scope: !10413)
!10418 = !DILocalVariable(name: "i", scope: !10413, file: !3, line: 802, type: !6)
!10419 = !DILocation(line: 802, column: 16, scope: !10413)
!10420 = !DILocalVariable(name: "bi", scope: !10413, file: !3, line: 803, type: !3079)
!10421 = !DILocation(line: 803, column: 19, scope: !10413)
!10422 = !DILocalVariable(name: "temp", scope: !10413, file: !3, line: 804, type: !1043)
!10423 = !DILocation(line: 804, column: 10, scope: !10413)
!10424 = !DILocation(line: 804, column: 17, scope: !10413)
!10425 = !DILocation(line: 806, column: 16, scope: !10413)
!10426 = !DILocation(line: 806, column: 22, scope: !10413)
!10427 = !DILocation(line: 806, column: 25, scope: !10413)
!10428 = !DILocation(line: 806, column: 3, scope: !10413)
!10429 = !DILocation(line: 807, column: 3, scope: !10430)
!10430 = distinct !DILexicalBlock(scope: !10413, file: !3, line: 807, column: 3)
!10431 = !DILocation(line: 807, column: 3, scope: !10432)
!10432 = distinct !DILexicalBlock(scope: !10430, file: !3, line: 807, column: 3)
!10433 = !DILocalVariable(name: "expr", scope: !10434, file: !3, line: 809, type: !1112)
!10434 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 808, column: 5)
!10435 = !DILocation(line: 809, column: 16, scope: !10434)
!10436 = !DILocation(line: 809, column: 42, scope: !10434)
!10437 = !DILocation(line: 809, column: 23, scope: !10434)
!10438 = !DILocation(line: 810, column: 38, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10434, file: !3, line: 810, column: 11)
!10440 = !DILocation(line: 810, column: 60, scope: !10439)
!10441 = !DILocation(line: 810, column: 41, scope: !10439)
!10442 = !DILocation(line: 810, column: 11, scope: !10439)
!10443 = !DILocation(line: 810, column: 11, scope: !10434)
!10444 = !DILocation(line: 811, column: 26, scope: !10439)
!10445 = !DILocation(line: 811, column: 29, scope: !10439)
!10446 = !DILocation(line: 811, column: 2, scope: !10439)
!10447 = !DILocation(line: 812, column: 5, scope: !10434)
!10448 = distinct !{!10448, !10429, !10449}
!10449 = !DILocation(line: 812, column: 5, scope: !10430)
!10450 = !DILocation(line: 813, column: 3, scope: !10413)
!10451 = !DILocation(line: 814, column: 1, scope: !10413)
!10452 = distinct !DISubprogram(name: "dependent_clean", scope: !3, file: !3, line: 2162, type: !10453, scopeLine: 2163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10453 = !DISubroutineType(types: !10454)
!10454 = !{null, !1038, !1038, !1838}
!10455 = !DILocalVariable(name: "set1", arg: 1, scope: !10452, file: !3, line: 2162, type: !1038)
!10456 = !DILocation(line: 2162, column: 31, scope: !10452)
!10457 = !DILocalVariable(name: "set2", arg: 2, scope: !10452, file: !3, line: 2162, type: !1038)
!10458 = !DILocation(line: 2162, column: 50, scope: !10452)
!10459 = !DILocalVariable(name: "block", arg: 3, scope: !10452, file: !3, line: 2162, type: !1838)
!10460 = !DILocation(line: 2162, column: 68, scope: !10452)
!10461 = !DILocalVariable(name: "exprs", scope: !10452, file: !3, line: 2164, type: !2459)
!10462 = !DILocation(line: 2164, column: 25, scope: !10452)
!10463 = !DILocation(line: 2164, column: 63, scope: !10452)
!10464 = !DILocation(line: 2164, column: 33, scope: !10452)
!10465 = !DILocalVariable(name: "expr", scope: !10452, file: !3, line: 2165, type: !1112)
!10466 = !DILocation(line: 2165, column: 12, scope: !10452)
!10467 = !DILocalVariable(name: "i", scope: !10452, file: !3, line: 2166, type: !1025)
!10468 = !DILocation(line: 2166, column: 7, scope: !10452)
!10469 = !DILocation(line: 2168, column: 10, scope: !10470)
!10470 = distinct !DILexicalBlock(scope: !10452, file: !3, line: 2168, column: 3)
!10471 = !DILocation(line: 2168, column: 8, scope: !10470)
!10472 = !DILocation(line: 2168, column: 15, scope: !10473)
!10473 = distinct !DILexicalBlock(scope: !10470, file: !3, line: 2168, column: 3)
!10474 = !DILocation(line: 2168, column: 3, scope: !10470)
!10475 = !DILocation(line: 2170, column: 27, scope: !10476)
!10476 = distinct !DILexicalBlock(scope: !10477, file: !3, line: 2170, column: 11)
!10477 = distinct !DILexicalBlock(scope: !10473, file: !3, line: 2169, column: 5)
!10478 = !DILocation(line: 2170, column: 33, scope: !10476)
!10479 = !DILocation(line: 2170, column: 39, scope: !10476)
!10480 = !DILocation(line: 2170, column: 45, scope: !10476)
!10481 = !DILocation(line: 2170, column: 12, scope: !10476)
!10482 = !DILocation(line: 2170, column: 11, scope: !10477)
!10483 = !DILocation(line: 2171, column: 26, scope: !10476)
!10484 = !DILocation(line: 2171, column: 32, scope: !10476)
!10485 = !DILocation(line: 2171, column: 2, scope: !10476)
!10486 = !DILocation(line: 2172, column: 5, scope: !10477)
!10487 = !DILocation(line: 2168, column: 56, scope: !10473)
!10488 = !DILocation(line: 2168, column: 3, scope: !10473)
!10489 = distinct !{!10489, !10474, !10490}
!10490 = !DILocation(line: 2172, column: 5, scope: !10470)
!10491 = !DILocation(line: 2173, column: 3, scope: !10452)
!10492 = !DILocation(line: 2174, column: 1, scope: !10452)
!10493 = distinct !DISubprogram(name: "insert_aux", scope: !3, file: !3, line: 3714, type: !10494, scopeLine: 3715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10494 = !DISubroutineType(types: !10495)
!10495 = !{!1236, !1838}
!10496 = !DILocalVariable(name: "block", arg: 1, scope: !10493, file: !3, line: 3714, type: !1838)
!10497 = !DILocation(line: 3714, column: 25, scope: !10493)
!10498 = !DILocalVariable(name: "son", scope: !10493, file: !3, line: 3716, type: !1838)
!10499 = !DILocation(line: 3716, column: 15, scope: !10493)
!10500 = !DILocalVariable(name: "new_stuff", scope: !10493, file: !3, line: 3717, type: !1236)
!10501 = !DILocation(line: 3717, column: 8, scope: !10493)
!10502 = !DILocation(line: 3719, column: 7, scope: !10503)
!10503 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 3719, column: 7)
!10504 = !DILocation(line: 3719, column: 7, scope: !10493)
!10505 = !DILocalVariable(name: "dom", scope: !10506, file: !3, line: 3721, type: !1838)
!10506 = distinct !DILexicalBlock(scope: !10503, file: !3, line: 3720, column: 5)
!10507 = !DILocation(line: 3721, column: 19, scope: !10506)
!10508 = !DILocation(line: 3722, column: 54, scope: !10506)
!10509 = !DILocation(line: 3722, column: 13, scope: !10506)
!10510 = !DILocation(line: 3722, column: 11, scope: !10506)
!10511 = !DILocation(line: 3723, column: 11, scope: !10512)
!10512 = distinct !DILexicalBlock(scope: !10506, file: !3, line: 3723, column: 11)
!10513 = !DILocation(line: 3723, column: 11, scope: !10506)
!10514 = !DILocalVariable(name: "i", scope: !10515, file: !3, line: 3725, type: !6)
!10515 = distinct !DILexicalBlock(scope: !10512, file: !3, line: 3724, column: 2)
!10516 = !DILocation(line: 3725, column: 13, scope: !10515)
!10517 = !DILocalVariable(name: "bi", scope: !10515, file: !3, line: 3726, type: !3079)
!10518 = !DILocation(line: 3726, column: 20, scope: !10515)
!10519 = !DILocalVariable(name: "newset", scope: !10515, file: !3, line: 3727, type: !1038)
!10520 = !DILocation(line: 3727, column: 17, scope: !10515)
!10521 = !DILocation(line: 3727, column: 26, scope: !10515)
!10522 = !DILocation(line: 3728, column: 8, scope: !10523)
!10523 = distinct !DILexicalBlock(scope: !10515, file: !3, line: 3728, column: 8)
!10524 = !DILocation(line: 3728, column: 8, scope: !10515)
!10525 = !DILocation(line: 3734, column: 8, scope: !10526)
!10526 = distinct !DILexicalBlock(scope: !10527, file: !3, line: 3734, column: 8)
!10527 = distinct !DILexicalBlock(scope: !10523, file: !3, line: 3729, column: 6)
!10528 = !DILocation(line: 3734, column: 8, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10526, file: !3, line: 3734, column: 8)
!10530 = !DILocalVariable(name: "expr", scope: !10531, file: !3, line: 3736, type: !1112)
!10531 = distinct !DILexicalBlock(scope: !10529, file: !3, line: 3735, column: 3)
!10532 = !DILocation(line: 3736, column: 14, scope: !10531)
!10533 = !DILocation(line: 3736, column: 40, scope: !10531)
!10534 = !DILocation(line: 3736, column: 21, scope: !10531)
!10535 = !DILocation(line: 3737, column: 34, scope: !10531)
!10536 = !DILocation(line: 3737, column: 52, scope: !10531)
!10537 = !DILocation(line: 3737, column: 5, scope: !10531)
!10538 = !DILocation(line: 3738, column: 34, scope: !10531)
!10539 = !DILocation(line: 3738, column: 53, scope: !10531)
!10540 = !DILocation(line: 3738, column: 5, scope: !10531)
!10541 = !DILocation(line: 3739, column: 3, scope: !10531)
!10542 = distinct !{!10542, !10525, !10543}
!10543 = !DILocation(line: 3739, column: 3, scope: !10526)
!10544 = !DILocation(line: 3740, column: 6, scope: !10527)
!10545 = !DILocation(line: 3741, column: 24, scope: !10546)
!10546 = distinct !DILexicalBlock(scope: !10515, file: !3, line: 3741, column: 8)
!10547 = !DILocation(line: 3741, column: 9, scope: !10546)
!10548 = !DILocation(line: 3741, column: 8, scope: !10515)
!10549 = !DILocation(line: 3743, column: 43, scope: !10550)
!10550 = distinct !DILexicalBlock(scope: !10546, file: !3, line: 3742, column: 6)
!10551 = !DILocation(line: 3743, column: 50, scope: !10550)
!10552 = !DILocation(line: 3743, column: 21, scope: !10550)
!10553 = !DILocation(line: 3743, column: 18, scope: !10550)
!10554 = !DILocation(line: 3744, column: 12, scope: !10555)
!10555 = distinct !DILexicalBlock(scope: !10550, file: !3, line: 3744, column: 12)
!10556 = !DILocation(line: 3744, column: 12, scope: !10550)
!10557 = !DILocation(line: 3745, column: 46, scope: !10555)
!10558 = !DILocation(line: 3745, column: 53, scope: !10555)
!10559 = !DILocation(line: 3745, column: 16, scope: !10555)
!10560 = !DILocation(line: 3745, column: 13, scope: !10555)
!10561 = !DILocation(line: 3745, column: 3, scope: !10555)
!10562 = !DILocation(line: 3746, column: 6, scope: !10550)
!10563 = !DILocation(line: 3747, column: 2, scope: !10515)
!10564 = !DILocation(line: 3748, column: 5, scope: !10506)
!10565 = !DILocation(line: 3749, column: 45, scope: !10566)
!10566 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 3749, column: 3)
!10567 = !DILocation(line: 3749, column: 14, scope: !10566)
!10568 = !DILocation(line: 3749, column: 12, scope: !10566)
!10569 = !DILocation(line: 3749, column: 8, scope: !10566)
!10570 = !DILocation(line: 3750, column: 8, scope: !10571)
!10571 = distinct !DILexicalBlock(scope: !10566, file: !3, line: 3749, column: 3)
!10572 = !DILocation(line: 3749, column: 3, scope: !10566)
!10573 = !DILocation(line: 3753, column: 32, scope: !10574)
!10574 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3752, column: 5)
!10575 = !DILocation(line: 3753, column: 20, scope: !10574)
!10576 = !DILocation(line: 3753, column: 17, scope: !10574)
!10577 = !DILocation(line: 3754, column: 5, scope: !10574)
!10578 = !DILocation(line: 3751, column: 44, scope: !10571)
!10579 = !DILocation(line: 3751, column: 14, scope: !10571)
!10580 = !DILocation(line: 3751, column: 12, scope: !10571)
!10581 = !DILocation(line: 3749, column: 3, scope: !10571)
!10582 = distinct !{!10582, !10572, !10583}
!10583 = !DILocation(line: 3754, column: 5, scope: !10566)
!10584 = !DILocation(line: 3756, column: 10, scope: !10493)
!10585 = !DILocation(line: 3756, column: 3, scope: !10493)
!10586 = distinct !DISubprogram(name: "single_pred_p", scope: !349, file: !349, line: 634, type: !7359, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10587 = !DILocalVariable(name: "bb", arg: 1, scope: !10586, file: !349, line: 634, type: !6668)
!10588 = !DILocation(line: 634, column: 34, scope: !10586)
!10589 = !DILocation(line: 636, column: 10, scope: !10586)
!10590 = !DILocation(line: 636, column: 33, scope: !10586)
!10591 = !DILocation(line: 636, column: 3, scope: !10586)
!10592 = distinct !DISubprogram(name: "do_regular_insertion", scope: !3, file: !3, line: 3479, type: !10593, scopeLine: 3480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10593 = !DISubroutineType(types: !10594)
!10594 = !{!1236, !1838, !1838}
!10595 = !DILocalVariable(name: "block", arg: 1, scope: !10592, file: !3, line: 3479, type: !1838)
!10596 = !DILocation(line: 3479, column: 35, scope: !10592)
!10597 = !DILocalVariable(name: "dom", arg: 2, scope: !10592, file: !3, line: 3479, type: !1838)
!10598 = !DILocation(line: 3479, column: 54, scope: !10592)
!10599 = !DILocalVariable(name: "new_stuff", scope: !10592, file: !3, line: 3481, type: !1236)
!10600 = !DILocation(line: 3481, column: 8, scope: !10592)
!10601 = !DILocalVariable(name: "exprs", scope: !10592, file: !3, line: 3482, type: !2459)
!10602 = !DILocation(line: 3482, column: 25, scope: !10592)
!10603 = !DILocation(line: 3482, column: 63, scope: !10592)
!10604 = !DILocation(line: 3482, column: 33, scope: !10592)
!10605 = !DILocalVariable(name: "expr", scope: !10592, file: !3, line: 3483, type: !1112)
!10606 = !DILocation(line: 3483, column: 12, scope: !10592)
!10607 = !DILocalVariable(name: "i", scope: !10592, file: !3, line: 3484, type: !1025)
!10608 = !DILocation(line: 3484, column: 7, scope: !10592)
!10609 = !DILocation(line: 3486, column: 10, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10592, file: !3, line: 3486, column: 3)
!10611 = !DILocation(line: 3486, column: 8, scope: !10610)
!10612 = !DILocation(line: 3486, column: 15, scope: !10613)
!10613 = distinct !DILexicalBlock(scope: !10610, file: !3, line: 3486, column: 3)
!10614 = !DILocation(line: 3486, column: 3, scope: !10610)
!10615 = !DILocation(line: 3488, column: 11, scope: !10616)
!10616 = distinct !DILexicalBlock(scope: !10617, file: !3, line: 3488, column: 11)
!10617 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 3487, column: 5)
!10618 = !DILocation(line: 3488, column: 17, scope: !10616)
!10619 = !DILocation(line: 3488, column: 22, scope: !10616)
!10620 = !DILocation(line: 3488, column: 11, scope: !10617)
!10621 = !DILocalVariable(name: "avail", scope: !10622, file: !3, line: 3490, type: !2533)
!10622 = distinct !DILexicalBlock(scope: !10616, file: !3, line: 3489, column: 2)
!10623 = !DILocation(line: 3490, column: 14, scope: !10622)
!10624 = !DILocalVariable(name: "val", scope: !10622, file: !3, line: 3491, type: !6)
!10625 = !DILocation(line: 3491, column: 17, scope: !10622)
!10626 = !DILocalVariable(name: "by_some", scope: !10622, file: !3, line: 3492, type: !1236)
!10627 = !DILocation(line: 3492, column: 9, scope: !10622)
!10628 = !DILocalVariable(name: "cant_insert", scope: !10622, file: !3, line: 3493, type: !1236)
!10629 = !DILocation(line: 3493, column: 9, scope: !10622)
!10630 = !DILocalVariable(name: "all_same", scope: !10622, file: !3, line: 3494, type: !1236)
!10631 = !DILocation(line: 3494, column: 9, scope: !10622)
!10632 = !DILocalVariable(name: "first_s", scope: !10622, file: !3, line: 3495, type: !1112)
!10633 = !DILocation(line: 3495, column: 13, scope: !10622)
!10634 = !DILocalVariable(name: "pred", scope: !10622, file: !3, line: 3496, type: !1366)
!10635 = !DILocation(line: 3496, column: 9, scope: !10622)
!10636 = !DILocalVariable(name: "bprime", scope: !10622, file: !3, line: 3497, type: !1838)
!10637 = !DILocation(line: 3497, column: 16, scope: !10622)
!10638 = !DILocalVariable(name: "eprime", scope: !10622, file: !3, line: 3498, type: !1112)
!10639 = !DILocation(line: 3498, column: 13, scope: !10622)
!10640 = !DILocalVariable(name: "ei", scope: !10622, file: !3, line: 3499, type: !2506)
!10641 = !DILocation(line: 3499, column: 18, scope: !10622)
!10642 = !DILocalVariable(name: "edoubleprime", scope: !10622, file: !3, line: 3500, type: !1112)
!10643 = !DILocation(line: 3500, column: 13, scope: !10622)
!10644 = !DILocalVariable(name: "do_insertion", scope: !10622, file: !3, line: 3501, type: !1236)
!10645 = !DILocation(line: 3501, column: 9, scope: !10622)
!10646 = !DILocation(line: 3503, column: 29, scope: !10622)
!10647 = !DILocation(line: 3503, column: 10, scope: !10622)
!10648 = !DILocation(line: 3503, column: 8, scope: !10622)
!10649 = !DILocation(line: 3504, column: 35, scope: !10650)
!10650 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 3504, column: 8)
!10651 = !DILocation(line: 3504, column: 52, scope: !10650)
!10652 = !DILocation(line: 3504, column: 8, scope: !10650)
!10653 = !DILocation(line: 3504, column: 8, scope: !10622)
!10654 = !DILocation(line: 3505, column: 6, scope: !10650)
!10655 = !DILocation(line: 3506, column: 35, scope: !10656)
!10656 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 3506, column: 8)
!10657 = !DILocation(line: 3506, column: 52, scope: !10656)
!10658 = !DILocation(line: 3506, column: 8, scope: !10656)
!10659 = !DILocation(line: 3506, column: 8, scope: !10622)
!10660 = !DILocation(line: 3508, column: 12, scope: !10661)
!10661 = distinct !DILexicalBlock(scope: !10662, file: !3, line: 3508, column: 12)
!10662 = distinct !DILexicalBlock(scope: !10656, file: !3, line: 3507, column: 6)
!10663 = !DILocation(line: 3508, column: 22, scope: !10661)
!10664 = !DILocation(line: 3508, column: 26, scope: !10661)
!10665 = !DILocation(line: 3508, column: 37, scope: !10661)
!10666 = !DILocation(line: 3508, column: 12, scope: !10662)
!10667 = !DILocation(line: 3509, column: 12, scope: !10661)
!10668 = !DILocation(line: 3509, column: 3, scope: !10661)
!10669 = !DILocation(line: 3510, column: 8, scope: !10662)
!10670 = !DILocation(line: 3513, column: 12, scope: !10622)
!10671 = !DILocation(line: 3513, column: 10, scope: !10622)
!10672 = !DILocation(line: 3514, column: 4, scope: !10673)
!10673 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 3514, column: 4)
!10674 = !DILocation(line: 3514, column: 4, scope: !10675)
!10675 = distinct !DILexicalBlock(scope: !10673, file: !3, line: 3514, column: 4)
!10676 = !DILocalVariable(name: "vprime", scope: !10677, file: !3, line: 3516, type: !6)
!10677 = distinct !DILexicalBlock(scope: !10675, file: !3, line: 3515, column: 6)
!10678 = !DILocation(line: 3516, column: 21, scope: !10677)
!10679 = !DILocation(line: 3520, column: 8, scope: !10677)
!10680 = !DILocation(line: 3521, column: 17, scope: !10677)
!10681 = !DILocation(line: 3521, column: 23, scope: !10677)
!10682 = !DILocation(line: 3521, column: 15, scope: !10677)
!10683 = !DILocation(line: 3522, column: 32, scope: !10677)
!10684 = !DILocation(line: 3522, column: 38, scope: !10677)
!10685 = !DILocation(line: 3523, column: 11, scope: !10677)
!10686 = !DILocation(line: 3523, column: 19, scope: !10677)
!10687 = !DILocation(line: 3522, column: 17, scope: !10677)
!10688 = !DILocation(line: 3522, column: 15, scope: !10677)
!10689 = !DILocation(line: 3534, column: 12, scope: !10690)
!10690 = distinct !DILexicalBlock(scope: !10677, file: !3, line: 3534, column: 12)
!10691 = !DILocation(line: 3534, column: 19, scope: !10690)
!10692 = !DILocation(line: 3534, column: 12, scope: !10677)
!10693 = !DILocation(line: 3536, column: 17, scope: !10694)
!10694 = distinct !DILexicalBlock(scope: !10690, file: !3, line: 3535, column: 3)
!10695 = !DILocation(line: 3537, column: 5, scope: !10694)
!10696 = !DILocation(line: 3540, column: 44, scope: !10677)
!10697 = !DILocation(line: 3540, column: 17, scope: !10677)
!10698 = !DILocation(line: 3540, column: 15, scope: !10677)
!10699 = !DILocation(line: 3541, column: 36, scope: !10677)
!10700 = !DILocation(line: 3541, column: 17, scope: !10677)
!10701 = !DILocation(line: 3541, column: 15, scope: !10677)
!10702 = !DILocation(line: 3542, column: 43, scope: !10677)
!10703 = !DILocation(line: 3543, column: 8, scope: !10677)
!10704 = !DILocation(line: 3542, column: 23, scope: !10677)
!10705 = !DILocation(line: 3542, column: 21, scope: !10677)
!10706 = !DILocation(line: 3544, column: 12, scope: !10707)
!10707 = distinct !DILexicalBlock(scope: !10677, file: !3, line: 3544, column: 12)
!10708 = !DILocation(line: 3544, column: 25, scope: !10707)
!10709 = !DILocation(line: 3544, column: 12, scope: !10677)
!10710 = !DILocation(line: 3546, column: 28, scope: !10711)
!10711 = distinct !DILexicalBlock(scope: !10707, file: !3, line: 3545, column: 3)
!10712 = !DILocation(line: 3546, column: 5, scope: !10711)
!10713 = !DILocation(line: 3546, column: 11, scope: !10711)
!10714 = !DILocation(line: 3546, column: 19, scope: !10711)
!10715 = !DILocation(line: 3546, column: 26, scope: !10711)
!10716 = !DILocation(line: 3547, column: 14, scope: !10711)
!10717 = !DILocation(line: 3548, column: 3, scope: !10711)
!10718 = !DILocation(line: 3551, column: 28, scope: !10719)
!10719 = distinct !DILexicalBlock(scope: !10707, file: !3, line: 3550, column: 3)
!10720 = !DILocation(line: 3551, column: 5, scope: !10719)
!10721 = !DILocation(line: 3551, column: 11, scope: !10719)
!10722 = !DILocation(line: 3551, column: 19, scope: !10719)
!10723 = !DILocation(line: 3551, column: 26, scope: !10719)
!10724 = !DILocation(line: 3552, column: 13, scope: !10719)
!10725 = !DILocation(line: 3555, column: 36, scope: !10726)
!10726 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 3555, column: 9)
!10727 = !DILocation(line: 3555, column: 9, scope: !10726)
!10728 = !DILocation(line: 3555, column: 9, scope: !10719)
!10729 = !DILocation(line: 3556, column: 20, scope: !10726)
!10730 = !DILocation(line: 3556, column: 7, scope: !10726)
!10731 = !DILocation(line: 3557, column: 9, scope: !10732)
!10732 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 3557, column: 9)
!10733 = !DILocation(line: 3557, column: 17, scope: !10732)
!10734 = !DILocation(line: 3557, column: 9, scope: !10719)
!10735 = !DILocation(line: 3558, column: 17, scope: !10732)
!10736 = !DILocation(line: 3558, column: 15, scope: !10732)
!10737 = !DILocation(line: 3558, column: 7, scope: !10732)
!10738 = !DILocation(line: 3559, column: 28, scope: !10739)
!10739 = distinct !DILexicalBlock(scope: !10732, file: !3, line: 3559, column: 14)
!10740 = !DILocation(line: 3559, column: 37, scope: !10739)
!10741 = !DILocation(line: 3559, column: 15, scope: !10739)
!10742 = !DILocation(line: 3559, column: 14, scope: !10732)
!10743 = !DILocation(line: 3560, column: 16, scope: !10739)
!10744 = !DILocation(line: 3560, column: 7, scope: !10739)
!10745 = !DILocation(line: 3562, column: 6, scope: !10677)
!10746 = distinct !{!10746, !10672, !10747}
!10747 = !DILocation(line: 3562, column: 6, scope: !10673)
!10748 = !DILocation(line: 3567, column: 9, scope: !10749)
!10749 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 3567, column: 8)
!10750 = !DILocation(line: 3567, column: 21, scope: !10749)
!10751 = !DILocation(line: 3567, column: 25, scope: !10749)
!10752 = !DILocation(line: 3567, column: 34, scope: !10749)
!10753 = !DILocation(line: 3567, column: 37, scope: !10749)
!10754 = !DILocation(line: 3567, column: 45, scope: !10749)
!10755 = !DILocation(line: 3567, column: 48, scope: !10749)
!10756 = !DILocation(line: 3568, column: 8, scope: !10749)
!10757 = !DILocation(line: 3568, column: 11, scope: !10749)
!10758 = !DILocation(line: 3567, column: 8, scope: !10622)
!10759 = !DILocation(line: 3570, column: 40, scope: !10760)
!10760 = distinct !DILexicalBlock(scope: !10761, file: !3, line: 3570, column: 12)
!10761 = distinct !DILexicalBlock(scope: !10749, file: !3, line: 3569, column: 6)
!10762 = !DILocation(line: 3570, column: 66, scope: !10760)
!10763 = !DILocation(line: 3570, column: 47, scope: !10760)
!10764 = !DILocation(line: 3571, column: 12, scope: !10760)
!10765 = !DILocation(line: 3570, column: 12, scope: !10760)
!10766 = !DILocation(line: 3570, column: 12, scope: !10761)
!10767 = !DILocation(line: 3572, column: 13, scope: !10760)
!10768 = !DILocation(line: 3572, column: 3, scope: !10760)
!10769 = !DILocation(line: 3573, column: 6, scope: !10761)
!10770 = !DILocation(line: 3577, column: 14, scope: !10771)
!10771 = distinct !DILexicalBlock(scope: !10749, file: !3, line: 3577, column: 13)
!10772 = !DILocation(line: 3577, column: 26, scope: !10771)
!10773 = !DILocation(line: 3577, column: 29, scope: !10771)
!10774 = !DILocation(line: 3577, column: 38, scope: !10771)
!10775 = !DILocation(line: 3577, column: 41, scope: !10771)
!10776 = !DILocation(line: 3578, column: 6, scope: !10771)
!10777 = !DILocation(line: 3578, column: 10, scope: !10771)
!10778 = !DILocation(line: 3578, column: 24, scope: !10771)
!10779 = !DILocation(line: 3578, column: 29, scope: !10771)
!10780 = !DILocation(line: 3579, column: 10, scope: !10771)
!10781 = !DILocation(line: 3579, column: 13, scope: !10771)
!10782 = !DILocation(line: 3579, column: 27, scope: !10771)
!10783 = !DILocation(line: 3579, column: 32, scope: !10771)
!10784 = !DILocation(line: 3580, column: 6, scope: !10771)
!10785 = !DILocation(line: 3580, column: 31, scope: !10771)
!10786 = !DILocation(line: 3580, column: 10, scope: !10771)
!10787 = !DILocation(line: 3577, column: 13, scope: !10749)
!10788 = !DILocalVariable(name: "j", scope: !10789, file: !3, line: 3582, type: !6)
!10789 = distinct !DILexicalBlock(scope: !10771, file: !3, line: 3581, column: 6)
!10790 = !DILocation(line: 3582, column: 21, scope: !10789)
!10791 = !DILocalVariable(name: "bi", scope: !10789, file: !3, line: 3583, type: !3079)
!10792 = !DILocation(line: 3583, column: 24, scope: !10789)
!10793 = !DILocalVariable(name: "exprset", scope: !10789, file: !3, line: 3584, type: !1038)
!10794 = !DILocation(line: 3584, column: 21, scope: !10789)
!10795 = !DILocation(line: 3584, column: 31, scope: !10789)
!10796 = !DILocalVariable(name: "new_val", scope: !10789, file: !3, line: 3587, type: !6)
!10797 = !DILocation(line: 3587, column: 21, scope: !10789)
!10798 = !DILocation(line: 3587, column: 50, scope: !10789)
!10799 = !DILocation(line: 3587, column: 31, scope: !10789)
!10800 = !DILocation(line: 3588, column: 8, scope: !10801)
!10801 = distinct !DILexicalBlock(scope: !10789, file: !3, line: 3588, column: 8)
!10802 = !DILocation(line: 3588, column: 8, scope: !10803)
!10803 = distinct !DILexicalBlock(scope: !10801, file: !3, line: 3588, column: 8)
!10804 = !DILocalVariable(name: "expr", scope: !10805, file: !3, line: 3590, type: !1112)
!10805 = distinct !DILexicalBlock(scope: !10803, file: !3, line: 3589, column: 3)
!10806 = !DILocation(line: 3590, column: 14, scope: !10805)
!10807 = !DILocation(line: 3590, column: 40, scope: !10805)
!10808 = !DILocation(line: 3590, column: 21, scope: !10805)
!10809 = !DILocation(line: 3592, column: 9, scope: !10810)
!10810 = distinct !DILexicalBlock(scope: !10805, file: !3, line: 3592, column: 9)
!10811 = !DILocation(line: 3592, column: 15, scope: !10810)
!10812 = !DILocation(line: 3592, column: 20, scope: !10810)
!10813 = !DILocation(line: 3592, column: 9, scope: !10805)
!10814 = !DILocalVariable(name: "info", scope: !10815, file: !3, line: 3594, type: !10816)
!10815 = distinct !DILexicalBlock(scope: !10810, file: !3, line: 3593, column: 7)
!10816 = !DIDerivedType(tag: DW_TAG_typedef, name: "vn_ssa_aux_t", file: !2415, line: 164, baseType: !10817)
!10817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10818, size: 64)
!10818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vn_ssa_aux", file: !2415, line: 136, size: 256, elements: !10819)
!10819 = !{!10820, !10821, !10822, !10823, !10824, !10825, !10826, !10827, !10828, !10829}
!10820 = !DIDerivedType(tag: DW_TAG_member, name: "valnum", scope: !10818, file: !2415, line: 139, baseType: !1123, size: 64)
!10821 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !10818, file: !2415, line: 141, baseType: !1123, size: 64, offset: 64)
!10822 = !DIDerivedType(tag: DW_TAG_member, name: "value_id", scope: !10818, file: !2415, line: 144, baseType: !6, size: 32, offset: 128)
!10823 = !DIDerivedType(tag: DW_TAG_member, name: "dfsnum", scope: !10818, file: !2415, line: 147, baseType: !6, size: 32, offset: 160)
!10824 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !10818, file: !2415, line: 148, baseType: !6, size: 32, offset: 192)
!10825 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !10818, file: !2415, line: 149, baseType: !6, size: 1, offset: 224, flags: DIFlagBitField, extraData: i64 224)
!10826 = !DIDerivedType(tag: DW_TAG_member, name: "on_sccstack", scope: !10818, file: !2415, line: 150, baseType: !6, size: 1, offset: 225, flags: DIFlagBitField, extraData: i64 224)
!10827 = !DIDerivedType(tag: DW_TAG_member, name: "has_constants", scope: !10818, file: !2415, line: 153, baseType: !6, size: 1, offset: 226, flags: DIFlagBitField, extraData: i64 224)
!10828 = !DIDerivedType(tag: DW_TAG_member, name: "use_processed", scope: !10818, file: !2415, line: 158, baseType: !6, size: 1, offset: 227, flags: DIFlagBitField, extraData: i64 224)
!10829 = !DIDerivedType(tag: DW_TAG_member, name: "needs_insertion", scope: !10818, file: !2415, line: 163, baseType: !6, size: 1, offset: 228, flags: DIFlagBitField, extraData: i64 224)
!10830 = !DILocation(line: 3594, column: 22, scope: !10815)
!10831 = !DILocation(line: 3594, column: 38, scope: !10815)
!10832 = !DILocation(line: 3594, column: 29, scope: !10815)
!10833 = !DILocation(line: 3597, column: 13, scope: !10834)
!10834 = distinct !DILexicalBlock(scope: !10815, file: !3, line: 3597, column: 13)
!10835 = !DILocation(line: 3597, column: 27, scope: !10834)
!10836 = !DILocation(line: 3597, column: 32, scope: !10834)
!10837 = !DILocation(line: 3597, column: 13, scope: !10815)
!10838 = !DILocation(line: 3599, column: 21, scope: !10839)
!10839 = distinct !DILexicalBlock(scope: !10834, file: !3, line: 3598, column: 4)
!10840 = !DILocation(line: 3599, column: 6, scope: !10839)
!10841 = !DILocation(line: 3599, column: 12, scope: !10839)
!10842 = !DILocation(line: 3599, column: 19, scope: !10839)
!10843 = !DILocation(line: 3600, column: 26, scope: !10839)
!10844 = !DILocation(line: 3601, column: 4, scope: !10839)
!10845 = !DILocation(line: 3603, column: 28, scope: !10834)
!10846 = !DILocation(line: 3603, column: 19, scope: !10834)
!10847 = !DILocation(line: 3603, column: 59, scope: !10834)
!10848 = !DILocation(line: 3603, column: 4, scope: !10834)
!10849 = !DILocation(line: 3603, column: 10, scope: !10834)
!10850 = !DILocation(line: 3603, column: 17, scope: !10834)
!10851 = !DILocation(line: 3604, column: 26, scope: !10815)
!10852 = !DILocation(line: 3604, column: 9, scope: !10815)
!10853 = !DILocation(line: 3604, column: 15, scope: !10815)
!10854 = !DILocation(line: 3604, column: 24, scope: !10815)
!10855 = !DILocation(line: 3605, column: 7, scope: !10815)
!10856 = !DILocation(line: 3606, column: 3, scope: !10805)
!10857 = distinct !{!10857, !10800, !10858}
!10858 = !DILocation(line: 3606, column: 3, scope: !10801)
!10859 = !DILocation(line: 3607, column: 6, scope: !10789)
!10860 = !DILocation(line: 3608, column: 10, scope: !10622)
!10861 = !DILocation(line: 3608, column: 4, scope: !10622)
!10862 = !DILocation(line: 3609, column: 2, scope: !10622)
!10863 = !DILocation(line: 3610, column: 5, scope: !10617)
!10864 = !DILocation(line: 3486, column: 56, scope: !10613)
!10865 = !DILocation(line: 3486, column: 3, scope: !10613)
!10866 = distinct !{!10866, !10614, !10867}
!10867 = !DILocation(line: 3610, column: 5, scope: !10610)
!10868 = !DILocation(line: 3612, column: 3, scope: !10592)
!10869 = !DILocation(line: 3613, column: 10, scope: !10592)
!10870 = !DILocation(line: 3613, column: 3, scope: !10592)
!10871 = distinct !DISubprogram(name: "do_partial_partial_insertion", scope: !3, file: !3, line: 3625, type: !10593, scopeLine: 3626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!10872 = !DILocalVariable(name: "block", arg: 1, scope: !10871, file: !3, line: 3625, type: !1838)
!10873 = !DILocation(line: 3625, column: 43, scope: !10871)
!10874 = !DILocalVariable(name: "dom", arg: 2, scope: !10871, file: !3, line: 3625, type: !1838)
!10875 = !DILocation(line: 3625, column: 62, scope: !10871)
!10876 = !DILocalVariable(name: "new_stuff", scope: !10871, file: !3, line: 3627, type: !1236)
!10877 = !DILocation(line: 3627, column: 8, scope: !10871)
!10878 = !DILocalVariable(name: "exprs", scope: !10871, file: !3, line: 3628, type: !2459)
!10879 = !DILocation(line: 3628, column: 25, scope: !10871)
!10880 = !DILocation(line: 3628, column: 63, scope: !10871)
!10881 = !DILocation(line: 3628, column: 33, scope: !10871)
!10882 = !DILocalVariable(name: "expr", scope: !10871, file: !3, line: 3629, type: !1112)
!10883 = !DILocation(line: 3629, column: 12, scope: !10871)
!10884 = !DILocalVariable(name: "i", scope: !10871, file: !3, line: 3630, type: !1025)
!10885 = !DILocation(line: 3630, column: 7, scope: !10871)
!10886 = !DILocation(line: 3632, column: 10, scope: !10887)
!10887 = distinct !DILexicalBlock(scope: !10871, file: !3, line: 3632, column: 3)
!10888 = !DILocation(line: 3632, column: 8, scope: !10887)
!10889 = !DILocation(line: 3632, column: 15, scope: !10890)
!10890 = distinct !DILexicalBlock(scope: !10887, file: !3, line: 3632, column: 3)
!10891 = !DILocation(line: 3632, column: 3, scope: !10887)
!10892 = !DILocation(line: 3634, column: 11, scope: !10893)
!10893 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 3634, column: 11)
!10894 = distinct !DILexicalBlock(scope: !10890, file: !3, line: 3633, column: 5)
!10895 = !DILocation(line: 3634, column: 17, scope: !10893)
!10896 = !DILocation(line: 3634, column: 22, scope: !10893)
!10897 = !DILocation(line: 3634, column: 11, scope: !10894)
!10898 = !DILocalVariable(name: "avail", scope: !10899, file: !3, line: 3636, type: !2533)
!10899 = distinct !DILexicalBlock(scope: !10893, file: !3, line: 3635, column: 2)
!10900 = !DILocation(line: 3636, column: 14, scope: !10899)
!10901 = !DILocalVariable(name: "val", scope: !10899, file: !3, line: 3637, type: !6)
!10902 = !DILocation(line: 3637, column: 17, scope: !10899)
!10903 = !DILocalVariable(name: "by_all", scope: !10899, file: !3, line: 3638, type: !1236)
!10904 = !DILocation(line: 3638, column: 9, scope: !10899)
!10905 = !DILocalVariable(name: "cant_insert", scope: !10899, file: !3, line: 3639, type: !1236)
!10906 = !DILocation(line: 3639, column: 9, scope: !10899)
!10907 = !DILocalVariable(name: "pred", scope: !10899, file: !3, line: 3640, type: !1366)
!10908 = !DILocation(line: 3640, column: 9, scope: !10899)
!10909 = !DILocalVariable(name: "bprime", scope: !10899, file: !3, line: 3641, type: !1838)
!10910 = !DILocation(line: 3641, column: 16, scope: !10899)
!10911 = !DILocalVariable(name: "eprime", scope: !10899, file: !3, line: 3642, type: !1112)
!10912 = !DILocation(line: 3642, column: 13, scope: !10899)
!10913 = !DILocalVariable(name: "ei", scope: !10899, file: !3, line: 3643, type: !2506)
!10914 = !DILocation(line: 3643, column: 18, scope: !10899)
!10915 = !DILocation(line: 3645, column: 29, scope: !10899)
!10916 = !DILocation(line: 3645, column: 10, scope: !10899)
!10917 = !DILocation(line: 3645, column: 8, scope: !10899)
!10918 = !DILocation(line: 3646, column: 35, scope: !10919)
!10919 = distinct !DILexicalBlock(scope: !10899, file: !3, line: 3646, column: 8)
!10920 = !DILocation(line: 3646, column: 52, scope: !10919)
!10921 = !DILocation(line: 3646, column: 8, scope: !10919)
!10922 = !DILocation(line: 3646, column: 8, scope: !10899)
!10923 = !DILocation(line: 3647, column: 6, scope: !10919)
!10924 = !DILocation(line: 3648, column: 35, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10899, file: !3, line: 3648, column: 8)
!10926 = !DILocation(line: 3648, column: 52, scope: !10925)
!10927 = !DILocation(line: 3648, column: 8, scope: !10925)
!10928 = !DILocation(line: 3648, column: 8, scope: !10899)
!10929 = !DILocation(line: 3649, column: 6, scope: !10925)
!10930 = !DILocation(line: 3651, column: 12, scope: !10899)
!10931 = !DILocation(line: 3651, column: 10, scope: !10899)
!10932 = !DILocation(line: 3652, column: 4, scope: !10933)
!10933 = distinct !DILexicalBlock(scope: !10899, file: !3, line: 3652, column: 4)
!10934 = !DILocation(line: 3652, column: 4, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !10933, file: !3, line: 3652, column: 4)
!10936 = !DILocalVariable(name: "vprime", scope: !10937, file: !3, line: 3654, type: !6)
!10937 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 3653, column: 6)
!10938 = !DILocation(line: 3654, column: 21, scope: !10937)
!10939 = !DILocalVariable(name: "edoubleprime", scope: !10937, file: !3, line: 3655, type: !1112)
!10940 = !DILocation(line: 3655, column: 17, scope: !10937)
!10941 = !DILocation(line: 3659, column: 8, scope: !10937)
!10942 = !DILocation(line: 3660, column: 17, scope: !10937)
!10943 = !DILocation(line: 3660, column: 23, scope: !10937)
!10944 = !DILocation(line: 3660, column: 15, scope: !10937)
!10945 = !DILocation(line: 3661, column: 32, scope: !10937)
!10946 = !DILocation(line: 3661, column: 38, scope: !10937)
!10947 = !DILocation(line: 3662, column: 11, scope: !10937)
!10948 = !DILocation(line: 3663, column: 11, scope: !10937)
!10949 = !DILocation(line: 3663, column: 19, scope: !10937)
!10950 = !DILocation(line: 3661, column: 17, scope: !10937)
!10951 = !DILocation(line: 3661, column: 15, scope: !10937)
!10952 = !DILocation(line: 3674, column: 12, scope: !10953)
!10953 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 3674, column: 12)
!10954 = !DILocation(line: 3674, column: 19, scope: !10953)
!10955 = !DILocation(line: 3674, column: 12, scope: !10937)
!10956 = !DILocation(line: 3676, column: 17, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !10953, file: !3, line: 3675, column: 3)
!10958 = !DILocation(line: 3677, column: 5, scope: !10957)
!10959 = !DILocation(line: 3680, column: 44, scope: !10937)
!10960 = !DILocation(line: 3680, column: 17, scope: !10937)
!10961 = !DILocation(line: 3680, column: 15, scope: !10937)
!10962 = !DILocation(line: 3681, column: 36, scope: !10937)
!10963 = !DILocation(line: 3681, column: 17, scope: !10937)
!10964 = !DILocation(line: 3681, column: 15, scope: !10937)
!10965 = !DILocation(line: 3682, column: 43, scope: !10937)
!10966 = !DILocation(line: 3683, column: 8, scope: !10937)
!10967 = !DILocation(line: 3682, column: 23, scope: !10937)
!10968 = !DILocation(line: 3682, column: 21, scope: !10937)
!10969 = !DILocation(line: 3684, column: 12, scope: !10970)
!10970 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 3684, column: 12)
!10971 = !DILocation(line: 3684, column: 25, scope: !10970)
!10972 = !DILocation(line: 3684, column: 12, scope: !10937)
!10973 = !DILocation(line: 3686, column: 12, scope: !10974)
!10974 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 3685, column: 3)
!10975 = !DILocation(line: 3687, column: 5, scope: !10974)
!10976 = !DILocation(line: 3690, column: 26, scope: !10970)
!10977 = !DILocation(line: 3690, column: 3, scope: !10970)
!10978 = !DILocation(line: 3690, column: 9, scope: !10970)
!10979 = !DILocation(line: 3690, column: 17, scope: !10970)
!10980 = !DILocation(line: 3690, column: 24, scope: !10970)
!10981 = !DILocation(line: 3692, column: 6, scope: !10937)
!10982 = distinct !{!10982, !10932, !10983}
!10983 = !DILocation(line: 3692, column: 6, scope: !10933)
!10984 = !DILocation(line: 3698, column: 9, scope: !10985)
!10985 = distinct !DILexicalBlock(scope: !10899, file: !3, line: 3698, column: 8)
!10986 = !DILocation(line: 3698, column: 21, scope: !10985)
!10987 = !DILocation(line: 3698, column: 24, scope: !10985)
!10988 = !DILocation(line: 3698, column: 31, scope: !10985)
!10989 = !DILocation(line: 3698, column: 34, scope: !10985)
!10990 = !DILocation(line: 3698, column: 8, scope: !10899)
!10991 = !DILocation(line: 3700, column: 27, scope: !10992)
!10992 = distinct !DILexicalBlock(scope: !10985, file: !3, line: 3699, column: 6)
!10993 = !DILocation(line: 3701, column: 40, scope: !10994)
!10994 = distinct !DILexicalBlock(scope: !10992, file: !3, line: 3701, column: 12)
!10995 = !DILocation(line: 3701, column: 66, scope: !10994)
!10996 = !DILocation(line: 3701, column: 47, scope: !10994)
!10997 = !DILocation(line: 3702, column: 12, scope: !10994)
!10998 = !DILocation(line: 3701, column: 12, scope: !10994)
!10999 = !DILocation(line: 3701, column: 12, scope: !10992)
!11000 = !DILocation(line: 3703, column: 13, scope: !10994)
!11001 = !DILocation(line: 3703, column: 3, scope: !10994)
!11002 = !DILocation(line: 3704, column: 6, scope: !10992)
!11003 = !DILocation(line: 3705, column: 10, scope: !10899)
!11004 = !DILocation(line: 3705, column: 4, scope: !10899)
!11005 = !DILocation(line: 3706, column: 2, scope: !10899)
!11006 = !DILocation(line: 3707, column: 5, scope: !10894)
!11007 = !DILocation(line: 3632, column: 56, scope: !10890)
!11008 = !DILocation(line: 3632, column: 3, scope: !10890)
!11009 = distinct !{!11009, !10891, !11010}
!11010 = !DILocation(line: 3707, column: 5, scope: !10887)
!11011 = !DILocation(line: 3709, column: 3, scope: !10871)
!11012 = !DILocation(line: 3710, column: 10, scope: !10871)
!11013 = !DILocation(line: 3710, column: 3, scope: !10871)
!11014 = distinct !DISubprogram(name: "insert_into_preds_of_block", scope: !3, file: !3, line: 3245, type: !11015, scopeLine: 3247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11015 = !DISubroutineType(types: !11016)
!11016 = !{!1236, !1838, !6, !2533}
!11017 = !DILocalVariable(name: "block", arg: 1, scope: !11014, file: !3, line: 3245, type: !1838)
!11018 = !DILocation(line: 3245, column: 41, scope: !11014)
!11019 = !DILocalVariable(name: "exprnum", arg: 2, scope: !11014, file: !3, line: 3245, type: !6)
!11020 = !DILocation(line: 3245, column: 61, scope: !11014)
!11021 = !DILocalVariable(name: "avail", arg: 3, scope: !11014, file: !3, line: 3246, type: !2533)
!11022 = !DILocation(line: 3246, column: 18, scope: !11014)
!11023 = !DILocalVariable(name: "expr", scope: !11014, file: !3, line: 3248, type: !1112)
!11024 = !DILocation(line: 3248, column: 12, scope: !11014)
!11025 = !DILocation(line: 3248, column: 38, scope: !11014)
!11026 = !DILocation(line: 3248, column: 19, scope: !11014)
!11027 = !DILocalVariable(name: "newphi", scope: !11014, file: !3, line: 3249, type: !1112)
!11028 = !DILocation(line: 3249, column: 12, scope: !11014)
!11029 = !DILocalVariable(name: "val", scope: !11014, file: !3, line: 3250, type: !6)
!11030 = !DILocation(line: 3250, column: 16, scope: !11014)
!11031 = !DILocation(line: 3250, column: 41, scope: !11014)
!11032 = !DILocation(line: 3250, column: 22, scope: !11014)
!11033 = !DILocalVariable(name: "pred", scope: !11014, file: !3, line: 3251, type: !1366)
!11034 = !DILocation(line: 3251, column: 8, scope: !11014)
!11035 = !DILocalVariable(name: "insertions", scope: !11014, file: !3, line: 3252, type: !1236)
!11036 = !DILocation(line: 3252, column: 8, scope: !11014)
!11037 = !DILocalVariable(name: "nophi", scope: !11014, file: !3, line: 3253, type: !1236)
!11038 = !DILocation(line: 3253, column: 8, scope: !11014)
!11039 = !DILocalVariable(name: "bprime", scope: !11014, file: !3, line: 3254, type: !1838)
!11040 = !DILocation(line: 3254, column: 15, scope: !11014)
!11041 = !DILocalVariable(name: "eprime", scope: !11014, file: !3, line: 3255, type: !1112)
!11042 = !DILocation(line: 3255, column: 12, scope: !11014)
!11043 = !DILocalVariable(name: "ei", scope: !11014, file: !3, line: 3256, type: !2506)
!11044 = !DILocation(line: 3256, column: 17, scope: !11014)
!11045 = !DILocalVariable(name: "type", scope: !11014, file: !3, line: 3257, type: !1123)
!11046 = !DILocation(line: 3257, column: 8, scope: !11014)
!11047 = !DILocation(line: 3257, column: 30, scope: !11014)
!11048 = !DILocation(line: 3257, column: 15, scope: !11014)
!11049 = !DILocalVariable(name: "temp", scope: !11014, file: !3, line: 3258, type: !1123)
!11050 = !DILocation(line: 3258, column: 8, scope: !11014)
!11051 = !DILocalVariable(name: "phi", scope: !11014, file: !3, line: 3259, type: !1386)
!11052 = !DILocation(line: 3259, column: 10, scope: !11014)
!11053 = !DILocation(line: 3261, column: 7, scope: !11054)
!11054 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3261, column: 7)
!11055 = !DILocation(line: 3261, column: 17, scope: !11054)
!11056 = !DILocation(line: 3261, column: 21, scope: !11054)
!11057 = !DILocation(line: 3261, column: 32, scope: !11054)
!11058 = !DILocation(line: 3261, column: 7, scope: !11014)
!11059 = !DILocation(line: 3263, column: 16, scope: !11060)
!11060 = distinct !DILexicalBlock(scope: !11054, file: !3, line: 3262, column: 5)
!11061 = !DILocation(line: 3263, column: 7, scope: !11060)
!11062 = !DILocation(line: 3264, column: 23, scope: !11060)
!11063 = !DILocation(line: 3264, column: 34, scope: !11060)
!11064 = !DILocation(line: 3264, column: 7, scope: !11060)
!11065 = !DILocation(line: 3265, column: 16, scope: !11060)
!11066 = !DILocation(line: 3265, column: 40, scope: !11060)
!11067 = !DILocation(line: 3265, column: 7, scope: !11060)
!11068 = !DILocation(line: 3266, column: 5, scope: !11060)
!11069 = !DILocation(line: 3269, column: 7, scope: !11070)
!11070 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3269, column: 7)
!11071 = !DILocation(line: 3269, column: 14, scope: !11070)
!11072 = !DILocation(line: 3269, column: 25, scope: !11070)
!11073 = !DILocation(line: 3269, column: 29, scope: !11070)
!11074 = !DILocation(line: 3269, column: 32, scope: !11070)
!11075 = !DILocation(line: 3269, column: 58, scope: !11070)
!11076 = !DILocation(line: 3269, column: 7, scope: !11014)
!11077 = !DILocalVariable(name: "firstinsideloop", scope: !11078, file: !3, line: 3271, type: !1236)
!11078 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 3270, column: 5)
!11079 = !DILocation(line: 3271, column: 12, scope: !11078)
!11080 = !DILocalVariable(name: "secondinsideloop", scope: !11078, file: !3, line: 3272, type: !1236)
!11081 = !DILocation(line: 3272, column: 12, scope: !11078)
!11082 = !DILocation(line: 3273, column: 48, scope: !11078)
!11083 = !DILocation(line: 3273, column: 55, scope: !11078)
!11084 = !DILocation(line: 3274, column: 13, scope: !11078)
!11085 = !DILocation(line: 3274, column: 35, scope: !11078)
!11086 = !DILocation(line: 3273, column: 25, scope: !11078)
!11087 = !DILocation(line: 3273, column: 23, scope: !11078)
!11088 = !DILocation(line: 3275, column: 49, scope: !11078)
!11089 = !DILocation(line: 3275, column: 56, scope: !11078)
!11090 = !DILocation(line: 3276, column: 7, scope: !11078)
!11091 = !DILocation(line: 3276, column: 29, scope: !11078)
!11092 = !DILocation(line: 3275, column: 26, scope: !11078)
!11093 = !DILocation(line: 3275, column: 24, scope: !11078)
!11094 = !DILocation(line: 3278, column: 12, scope: !11095)
!11095 = distinct !DILexicalBlock(scope: !11078, file: !3, line: 3278, column: 11)
!11096 = !DILocation(line: 3278, column: 30, scope: !11095)
!11097 = !DILocation(line: 3278, column: 28, scope: !11095)
!11098 = !DILocation(line: 3279, column: 4, scope: !11095)
!11099 = !DILocation(line: 3279, column: 8, scope: !11095)
!11100 = !DILocation(line: 3279, column: 14, scope: !11095)
!11101 = !DILocation(line: 3279, column: 19, scope: !11095)
!11102 = !DILocation(line: 3280, column: 8, scope: !11095)
!11103 = !DILocation(line: 3280, column: 34, scope: !11095)
!11104 = !DILocation(line: 3280, column: 41, scope: !11095)
!11105 = !DILocation(line: 3280, column: 11, scope: !11095)
!11106 = !DILocation(line: 3278, column: 11, scope: !11078)
!11107 = !DILocation(line: 3282, column: 8, scope: !11108)
!11108 = distinct !DILexicalBlock(scope: !11109, file: !3, line: 3282, column: 8)
!11109 = distinct !DILexicalBlock(scope: !11095, file: !3, line: 3281, column: 2)
!11110 = !DILocation(line: 3282, column: 18, scope: !11108)
!11111 = !DILocation(line: 3282, column: 22, scope: !11108)
!11112 = !DILocation(line: 3282, column: 33, scope: !11108)
!11113 = !DILocation(line: 3282, column: 8, scope: !11109)
!11114 = !DILocation(line: 3283, column: 15, scope: !11108)
!11115 = !DILocation(line: 3283, column: 6, scope: !11108)
!11116 = !DILocation(line: 3284, column: 10, scope: !11109)
!11117 = !DILocation(line: 3285, column: 2, scope: !11109)
!11118 = !DILocation(line: 3286, column: 5, scope: !11078)
!11119 = !DILocation(line: 3289, column: 3, scope: !11120)
!11120 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3289, column: 3)
!11121 = !DILocation(line: 3289, column: 3, scope: !11122)
!11122 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 3289, column: 3)
!11123 = !DILocalVariable(name: "stmts", scope: !11124, file: !3, line: 3291, type: !1376)
!11124 = distinct !DILexicalBlock(scope: !11122, file: !3, line: 3290, column: 5)
!11125 = !DILocation(line: 3291, column: 18, scope: !11124)
!11126 = !DILocalVariable(name: "builtexpr", scope: !11124, file: !3, line: 3292, type: !1123)
!11127 = !DILocation(line: 3292, column: 12, scope: !11124)
!11128 = !DILocation(line: 3293, column: 16, scope: !11124)
!11129 = !DILocation(line: 3293, column: 22, scope: !11124)
!11130 = !DILocation(line: 3293, column: 14, scope: !11124)
!11131 = !DILocation(line: 3294, column: 16, scope: !11124)
!11132 = !DILocation(line: 3294, column: 22, scope: !11124)
!11133 = !DILocation(line: 3294, column: 30, scope: !11124)
!11134 = !DILocation(line: 3294, column: 14, scope: !11124)
!11135 = !DILocation(line: 3296, column: 11, scope: !11136)
!11136 = distinct !DILexicalBlock(scope: !11124, file: !3, line: 3296, column: 11)
!11137 = !DILocation(line: 3296, column: 19, scope: !11136)
!11138 = !DILocation(line: 3296, column: 24, scope: !11136)
!11139 = !DILocation(line: 3296, column: 32, scope: !11136)
!11140 = !DILocation(line: 3296, column: 35, scope: !11136)
!11141 = !DILocation(line: 3296, column: 43, scope: !11136)
!11142 = !DILocation(line: 3296, column: 48, scope: !11136)
!11143 = !DILocation(line: 3296, column: 11, scope: !11124)
!11144 = !DILocation(line: 3298, column: 45, scope: !11145)
!11145 = distinct !DILexicalBlock(scope: !11136, file: !3, line: 3297, column: 2)
!11146 = !DILocation(line: 3299, column: 10, scope: !11145)
!11147 = !DILocation(line: 3301, column: 10, scope: !11145)
!11148 = !DILocation(line: 3298, column: 16, scope: !11145)
!11149 = !DILocation(line: 3298, column: 14, scope: !11145)
!11150 = !DILocation(line: 3302, column: 4, scope: !11145)
!11151 = !DILocation(line: 3303, column: 28, scope: !11145)
!11152 = !DILocation(line: 3303, column: 34, scope: !11145)
!11153 = !DILocation(line: 3303, column: 4, scope: !11145)
!11154 = !DILocation(line: 3304, column: 55, scope: !11145)
!11155 = !DILocation(line: 3304, column: 27, scope: !11145)
!11156 = !DILocation(line: 3304, column: 4, scope: !11145)
!11157 = !DILocation(line: 3304, column: 10, scope: !11145)
!11158 = !DILocation(line: 3304, column: 18, scope: !11145)
!11159 = !DILocation(line: 3304, column: 25, scope: !11145)
!11160 = !DILocation(line: 3305, column: 15, scope: !11145)
!11161 = !DILocation(line: 3306, column: 2, scope: !11145)
!11162 = !DILocation(line: 3307, column: 16, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11136, file: !3, line: 3307, column: 16)
!11164 = !DILocation(line: 3307, column: 24, scope: !11163)
!11165 = !DILocation(line: 3307, column: 29, scope: !11163)
!11166 = !DILocation(line: 3307, column: 16, scope: !11136)
!11167 = !DILocalVariable(name: "constant", scope: !11168, file: !3, line: 3312, type: !1123)
!11168 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 3308, column: 2)
!11169 = !DILocation(line: 3312, column: 9, scope: !11168)
!11170 = !DILocation(line: 3312, column: 20, scope: !11168)
!11171 = !DILocation(line: 3313, column: 36, scope: !11172)
!11172 = distinct !DILexicalBlock(scope: !11168, file: !3, line: 3313, column: 8)
!11173 = !DILocation(line: 3313, column: 42, scope: !11172)
!11174 = !DILocation(line: 3313, column: 9, scope: !11172)
!11175 = !DILocation(line: 3313, column: 8, scope: !11168)
!11176 = !DILocalVariable(name: "builtexpr", scope: !11177, file: !3, line: 3315, type: !1123)
!11177 = distinct !DILexicalBlock(scope: !11172, file: !3, line: 3314, column: 6)
!11178 = !DILocation(line: 3315, column: 13, scope: !11177)
!11179 = !DILocation(line: 3315, column: 25, scope: !11177)
!11180 = !DILocation(line: 3316, column: 38, scope: !11181)
!11181 = distinct !DILexicalBlock(scope: !11177, file: !3, line: 3316, column: 12)
!11182 = !DILocation(line: 3316, column: 13, scope: !11181)
!11183 = !DILocation(line: 3316, column: 12, scope: !11177)
!11184 = !DILocalVariable(name: "forcedexpr", scope: !11185, file: !3, line: 3318, type: !1123)
!11185 = distinct !DILexicalBlock(scope: !11181, file: !3, line: 3317, column: 3)
!11186 = !DILocation(line: 3318, column: 10, scope: !11185)
!11187 = !DILocation(line: 3318, column: 45, scope: !11185)
!11188 = !DILocation(line: 3318, column: 23, scope: !11185)
!11189 = !DILocation(line: 3321, column: 35, scope: !11190)
!11190 = distinct !DILexicalBlock(scope: !11185, file: !3, line: 3321, column: 9)
!11191 = !DILocation(line: 3321, column: 10, scope: !11190)
!11192 = !DILocation(line: 3321, column: 9, scope: !11185)
!11193 = !DILocation(line: 3323, column: 13, scope: !11194)
!11194 = distinct !DILexicalBlock(scope: !11195, file: !3, line: 3323, column: 13)
!11195 = distinct !DILexicalBlock(scope: !11190, file: !3, line: 3322, column: 7)
!11196 = !DILocation(line: 3323, column: 27, scope: !11194)
!11197 = !DILocation(line: 3323, column: 24, scope: !11194)
!11198 = !DILocation(line: 3323, column: 13, scope: !11195)
!11199 = !DILocation(line: 3325, column: 41, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11194, file: !3, line: 3324, column: 4)
!11201 = !DILocation(line: 3325, column: 19, scope: !11200)
!11202 = !DILocation(line: 3325, column: 6, scope: !11200)
!11203 = !DILocation(line: 3325, column: 32, scope: !11200)
!11204 = !DILocation(line: 3325, column: 39, scope: !11200)
!11205 = !DILocation(line: 3326, column: 58, scope: !11200)
!11206 = !DILocation(line: 3326, column: 39, scope: !11200)
!11207 = !DILocation(line: 3326, column: 15, scope: !11200)
!11208 = !DILocation(line: 3326, column: 6, scope: !11200)
!11209 = !DILocation(line: 3326, column: 28, scope: !11200)
!11210 = !DILocation(line: 3326, column: 37, scope: !11200)
!11211 = !DILocation(line: 3327, column: 4, scope: !11200)
!11212 = !DILocation(line: 3328, column: 13, scope: !11213)
!11213 = distinct !DILexicalBlock(scope: !11195, file: !3, line: 3328, column: 13)
!11214 = !DILocation(line: 3328, column: 13, scope: !11195)
!11215 = !DILocalVariable(name: "gsi", scope: !11216, file: !3, line: 3330, type: !3861)
!11216 = distinct !DILexicalBlock(scope: !11213, file: !3, line: 3329, column: 4)
!11217 = !DILocation(line: 3330, column: 27, scope: !11216)
!11218 = !DILocation(line: 3331, column: 23, scope: !11216)
!11219 = !DILocation(line: 3331, column: 12, scope: !11216)
!11220 = !DILocation(line: 3332, column: 6, scope: !11216)
!11221 = !DILocation(line: 3332, column: 14, scope: !11222)
!11222 = distinct !DILexicalBlock(scope: !11223, file: !3, line: 3332, column: 6)
!11223 = distinct !DILexicalBlock(scope: !11216, file: !3, line: 3332, column: 6)
!11224 = !DILocation(line: 3332, column: 13, scope: !11222)
!11225 = !DILocation(line: 3332, column: 6, scope: !11223)
!11226 = !DILocalVariable(name: "stmt", scope: !11227, file: !3, line: 3334, type: !1386)
!11227 = distinct !DILexicalBlock(scope: !11222, file: !3, line: 3333, column: 8)
!11228 = !DILocation(line: 3334, column: 17, scope: !11227)
!11229 = !DILocation(line: 3334, column: 24, scope: !11227)
!11230 = !DILocation(line: 3335, column: 10, scope: !11227)
!11231 = !DILocation(line: 3336, column: 26, scope: !11227)
!11232 = !DILocation(line: 3336, column: 10, scope: !11227)
!11233 = !DILocation(line: 3337, column: 8, scope: !11227)
!11234 = !DILocation(line: 3332, column: 31, scope: !11222)
!11235 = !DILocation(line: 3332, column: 6, scope: !11222)
!11236 = distinct !{!11236, !11225, !11237}
!11237 = !DILocation(line: 3337, column: 8, scope: !11223)
!11238 = !DILocation(line: 3338, column: 30, scope: !11216)
!11239 = !DILocation(line: 3338, column: 36, scope: !11216)
!11240 = !DILocation(line: 3338, column: 6, scope: !11216)
!11241 = !DILocation(line: 3339, column: 4, scope: !11216)
!11242 = !DILocation(line: 3340, column: 60, scope: !11195)
!11243 = !DILocation(line: 3340, column: 32, scope: !11195)
!11244 = !DILocation(line: 3340, column: 9, scope: !11195)
!11245 = !DILocation(line: 3340, column: 15, scope: !11195)
!11246 = !DILocation(line: 3340, column: 23, scope: !11195)
!11247 = !DILocation(line: 3340, column: 30, scope: !11195)
!11248 = !DILocation(line: 3341, column: 7, scope: !11195)
!11249 = !DILocation(line: 3342, column: 3, scope: !11185)
!11250 = !DILocation(line: 3343, column: 6, scope: !11177)
!11251 = !DILocation(line: 3344, column: 2, scope: !11168)
!11252 = !DILocation(line: 3345, column: 16, scope: !11253)
!11253 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 3345, column: 16)
!11254 = !DILocation(line: 3345, column: 24, scope: !11253)
!11255 = !DILocation(line: 3345, column: 29, scope: !11253)
!11256 = !DILocation(line: 3345, column: 16, scope: !11163)
!11257 = !DILocalVariable(name: "name", scope: !11258, file: !3, line: 3351, type: !1123)
!11258 = distinct !DILexicalBlock(scope: !11253, file: !3, line: 3346, column: 2)
!11259 = !DILocation(line: 3351, column: 9, scope: !11258)
!11260 = !DILocation(line: 3351, column: 16, scope: !11258)
!11261 = !DILocation(line: 3352, column: 36, scope: !11262)
!11262 = distinct !DILexicalBlock(scope: !11258, file: !3, line: 3352, column: 8)
!11263 = !DILocation(line: 3352, column: 42, scope: !11262)
!11264 = !DILocation(line: 3352, column: 9, scope: !11262)
!11265 = !DILocation(line: 3352, column: 8, scope: !11258)
!11266 = !DILocalVariable(name: "builtexpr", scope: !11267, file: !3, line: 3354, type: !1123)
!11267 = distinct !DILexicalBlock(scope: !11262, file: !3, line: 3353, column: 6)
!11268 = !DILocation(line: 3354, column: 13, scope: !11267)
!11269 = !DILocalVariable(name: "forcedexpr", scope: !11267, file: !3, line: 3355, type: !1123)
!11270 = !DILocation(line: 3355, column: 13, scope: !11267)
!11271 = !DILocation(line: 3356, column: 20, scope: !11267)
!11272 = !DILocation(line: 3356, column: 18, scope: !11267)
!11273 = !DILocation(line: 3357, column: 43, scope: !11267)
!11274 = !DILocation(line: 3357, column: 21, scope: !11267)
!11275 = !DILocation(line: 3357, column: 19, scope: !11267)
!11276 = !DILocation(line: 3361, column: 12, scope: !11277)
!11277 = distinct !DILexicalBlock(scope: !11267, file: !3, line: 3361, column: 12)
!11278 = !DILocation(line: 3361, column: 26, scope: !11277)
!11279 = !DILocation(line: 3361, column: 23, scope: !11277)
!11280 = !DILocation(line: 3361, column: 12, scope: !11267)
!11281 = !DILocation(line: 3363, column: 49, scope: !11282)
!11282 = distinct !DILexicalBlock(scope: !11277, file: !3, line: 3362, column: 3)
!11283 = !DILocation(line: 3363, column: 40, scope: !11282)
!11284 = !DILocation(line: 3363, column: 56, scope: !11282)
!11285 = !DILocation(line: 3363, column: 18, scope: !11282)
!11286 = !DILocation(line: 3363, column: 5, scope: !11282)
!11287 = !DILocation(line: 3363, column: 31, scope: !11282)
!11288 = !DILocation(line: 3363, column: 38, scope: !11282)
!11289 = !DILocation(line: 3364, column: 47, scope: !11282)
!11290 = !DILocation(line: 3364, column: 38, scope: !11282)
!11291 = !DILocation(line: 3364, column: 54, scope: !11282)
!11292 = !DILocation(line: 3364, column: 14, scope: !11282)
!11293 = !DILocation(line: 3364, column: 5, scope: !11282)
!11294 = !DILocation(line: 3364, column: 27, scope: !11282)
!11295 = !DILocation(line: 3364, column: 36, scope: !11282)
!11296 = !DILocation(line: 3365, column: 3, scope: !11282)
!11297 = !DILocation(line: 3367, column: 12, scope: !11298)
!11298 = distinct !DILexicalBlock(scope: !11267, file: !3, line: 3367, column: 12)
!11299 = !DILocation(line: 3367, column: 12, scope: !11267)
!11300 = !DILocalVariable(name: "gsi", scope: !11301, file: !3, line: 3369, type: !3861)
!11301 = distinct !DILexicalBlock(scope: !11298, file: !3, line: 3368, column: 3)
!11302 = !DILocation(line: 3369, column: 26, scope: !11301)
!11303 = !DILocation(line: 3370, column: 22, scope: !11301)
!11304 = !DILocation(line: 3370, column: 11, scope: !11301)
!11305 = !DILocation(line: 3371, column: 5, scope: !11301)
!11306 = !DILocation(line: 3371, column: 13, scope: !11307)
!11307 = distinct !DILexicalBlock(scope: !11308, file: !3, line: 3371, column: 5)
!11308 = distinct !DILexicalBlock(scope: !11301, file: !3, line: 3371, column: 5)
!11309 = !DILocation(line: 3371, column: 12, scope: !11307)
!11310 = !DILocation(line: 3371, column: 5, scope: !11308)
!11311 = !DILocalVariable(name: "stmt", scope: !11312, file: !3, line: 3373, type: !1386)
!11312 = distinct !DILexicalBlock(scope: !11307, file: !3, line: 3372, column: 7)
!11313 = !DILocation(line: 3373, column: 16, scope: !11312)
!11314 = !DILocation(line: 3373, column: 23, scope: !11312)
!11315 = !DILocation(line: 3374, column: 9, scope: !11312)
!11316 = !DILocation(line: 3375, column: 25, scope: !11312)
!11317 = !DILocation(line: 3375, column: 9, scope: !11312)
!11318 = !DILocation(line: 3376, column: 7, scope: !11312)
!11319 = !DILocation(line: 3371, column: 30, scope: !11307)
!11320 = !DILocation(line: 3371, column: 5, scope: !11307)
!11321 = distinct !{!11321, !11310, !11322}
!11322 = !DILocation(line: 3376, column: 7, scope: !11308)
!11323 = !DILocation(line: 3377, column: 29, scope: !11301)
!11324 = !DILocation(line: 3377, column: 35, scope: !11301)
!11325 = !DILocation(line: 3377, column: 5, scope: !11301)
!11326 = !DILocation(line: 3378, column: 3, scope: !11301)
!11327 = !DILocation(line: 3379, column: 59, scope: !11267)
!11328 = !DILocation(line: 3379, column: 31, scope: !11267)
!11329 = !DILocation(line: 3379, column: 8, scope: !11267)
!11330 = !DILocation(line: 3379, column: 14, scope: !11267)
!11331 = !DILocation(line: 3379, column: 22, scope: !11267)
!11332 = !DILocation(line: 3379, column: 29, scope: !11267)
!11333 = !DILocation(line: 3380, column: 6, scope: !11267)
!11334 = !DILocation(line: 3381, column: 2, scope: !11258)
!11335 = !DILocation(line: 3382, column: 5, scope: !11124)
!11336 = distinct !{!11336, !11119, !11337}
!11337 = !DILocation(line: 3382, column: 5, scope: !11120)
!11338 = !DILocation(line: 3387, column: 7, scope: !11339)
!11339 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3387, column: 7)
!11340 = !DILocation(line: 3387, column: 13, scope: !11339)
!11341 = !DILocation(line: 3387, column: 16, scope: !11339)
!11342 = !DILocation(line: 3387, column: 7, scope: !11014)
!11343 = !DILocation(line: 3388, column: 5, scope: !11339)
!11344 = !DILocation(line: 3389, column: 12, scope: !11345)
!11345 = distinct !DILexicalBlock(scope: !11339, file: !3, line: 3389, column: 12)
!11346 = !DILocation(line: 3389, column: 18, scope: !11345)
!11347 = !DILocation(line: 3389, column: 22, scope: !11345)
!11348 = !DILocation(line: 3389, column: 12, scope: !11339)
!11349 = !DILocation(line: 3390, column: 5, scope: !11345)
!11350 = !DILocation(line: 3393, column: 8, scope: !11351)
!11351 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3393, column: 7)
!11352 = !DILocation(line: 3393, column: 19, scope: !11351)
!11353 = !DILocation(line: 3393, column: 22, scope: !11351)
!11354 = !DILocation(line: 3393, column: 48, scope: !11351)
!11355 = !DILocation(line: 3393, column: 45, scope: !11351)
!11356 = !DILocation(line: 3393, column: 7, scope: !11014)
!11357 = !DILocation(line: 3395, column: 36, scope: !11358)
!11358 = distinct !DILexicalBlock(scope: !11351, file: !3, line: 3394, column: 5)
!11359 = !DILocation(line: 3395, column: 20, scope: !11358)
!11360 = !DILocation(line: 3395, column: 18, scope: !11358)
!11361 = !DILocation(line: 3396, column: 20, scope: !11358)
!11362 = !DILocation(line: 3396, column: 7, scope: !11358)
!11363 = !DILocation(line: 3397, column: 5, scope: !11358)
!11364 = !DILocation(line: 3399, column: 10, scope: !11014)
!11365 = !DILocation(line: 3399, column: 8, scope: !11014)
!11366 = !DILocation(line: 3400, column: 23, scope: !11014)
!11367 = !DILocation(line: 3400, column: 3, scope: !11014)
!11368 = !DILocation(line: 3402, column: 7, scope: !11369)
!11369 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3402, column: 7)
!11370 = !DILocation(line: 3402, column: 24, scope: !11369)
!11371 = !DILocation(line: 3403, column: 7, scope: !11369)
!11372 = !DILocation(line: 3403, column: 10, scope: !11369)
!11373 = !DILocation(line: 3403, column: 27, scope: !11369)
!11374 = !DILocation(line: 3402, column: 7, scope: !11014)
!11375 = !DILocation(line: 3404, column: 5, scope: !11369)
!11376 = !DILocation(line: 3404, column: 30, scope: !11369)
!11377 = !DILocation(line: 3405, column: 26, scope: !11014)
!11378 = !DILocation(line: 3405, column: 32, scope: !11014)
!11379 = !DILocation(line: 3405, column: 9, scope: !11014)
!11380 = !DILocation(line: 3405, column: 7, scope: !11014)
!11381 = !DILocation(line: 3407, column: 19, scope: !11014)
!11382 = !DILocation(line: 3407, column: 3, scope: !11014)
!11383 = !DILocation(line: 3408, column: 70, scope: !11014)
!11384 = !DILocation(line: 3408, column: 51, scope: !11014)
!11385 = !DILocation(line: 3408, column: 35, scope: !11014)
!11386 = !DILocation(line: 3408, column: 16, scope: !11014)
!11387 = !DILocation(line: 3408, column: 3, scope: !11014)
!11388 = !DILocation(line: 3408, column: 42, scope: !11014)
!11389 = !DILocation(line: 3408, column: 49, scope: !11014)
!11390 = !DILocation(line: 3409, column: 49, scope: !11014)
!11391 = !DILocation(line: 3409, column: 31, scope: !11014)
!11392 = !DILocation(line: 3409, column: 12, scope: !11014)
!11393 = !DILocation(line: 3409, column: 3, scope: !11014)
!11394 = !DILocation(line: 3409, column: 38, scope: !11014)
!11395 = !DILocation(line: 3409, column: 47, scope: !11014)
!11396 = !DILocation(line: 3410, column: 3, scope: !11014)
!11397 = !DILocation(line: 3411, column: 19, scope: !11014)
!11398 = !DILocation(line: 3412, column: 5, scope: !11014)
!11399 = !DILocation(line: 3411, column: 3, scope: !11014)
!11400 = !DILocation(line: 3413, column: 3, scope: !11401)
!11401 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3413, column: 3)
!11402 = !DILocation(line: 3413, column: 3, scope: !11403)
!11403 = distinct !DILexicalBlock(scope: !11401, file: !3, line: 3413, column: 3)
!11404 = !DILocalVariable(name: "ae", scope: !11405, file: !3, line: 3415, type: !1112)
!11405 = distinct !DILexicalBlock(scope: !11403, file: !3, line: 3414, column: 5)
!11406 = !DILocation(line: 3415, column: 16, scope: !11405)
!11407 = !DILocation(line: 3415, column: 21, scope: !11405)
!11408 = !DILocation(line: 3415, column: 27, scope: !11405)
!11409 = !DILocation(line: 3415, column: 33, scope: !11405)
!11410 = !DILocation(line: 3415, column: 38, scope: !11405)
!11411 = !DILocation(line: 3416, column: 7, scope: !11405)
!11412 = !DILocation(line: 3418, column: 11, scope: !11413)
!11413 = distinct !DILexicalBlock(scope: !11405, file: !3, line: 3418, column: 11)
!11414 = !DILocation(line: 3418, column: 15, scope: !11413)
!11415 = !DILocation(line: 3418, column: 20, scope: !11413)
!11416 = !DILocation(line: 3418, column: 11, scope: !11405)
!11417 = !DILocation(line: 3419, column: 15, scope: !11413)
!11418 = !DILocation(line: 3419, column: 20, scope: !11413)
!11419 = !DILocation(line: 3419, column: 44, scope: !11413)
!11420 = !DILocation(line: 3419, column: 2, scope: !11413)
!11421 = !DILocation(line: 3421, column: 15, scope: !11413)
!11422 = !DILocation(line: 3421, column: 20, scope: !11413)
!11423 = !DILocation(line: 3421, column: 61, scope: !11413)
!11424 = !DILocation(line: 3421, column: 2, scope: !11413)
!11425 = !DILocation(line: 3423, column: 5, scope: !11405)
!11426 = distinct !{!11426, !11400, !11427}
!11427 = !DILocation(line: 3423, column: 5, scope: !11401)
!11428 = !DILocation(line: 3425, column: 59, scope: !11014)
!11429 = !DILocation(line: 3425, column: 40, scope: !11014)
!11430 = !DILocation(line: 3425, column: 12, scope: !11014)
!11431 = !DILocation(line: 3425, column: 10, scope: !11014)
!11432 = !DILocation(line: 3426, column: 17, scope: !11014)
!11433 = !DILocation(line: 3426, column: 22, scope: !11014)
!11434 = !DILocation(line: 3426, column: 3, scope: !11014)
!11435 = !DILocation(line: 3442, column: 27, scope: !11014)
!11436 = !DILocation(line: 3442, column: 44, scope: !11014)
!11437 = !DILocation(line: 3442, column: 3, scope: !11014)
!11438 = !DILocation(line: 3443, column: 32, scope: !11014)
!11439 = !DILocation(line: 3444, column: 11, scope: !11014)
!11440 = !DILocation(line: 3443, column: 3, scope: !11014)
!11441 = !DILocation(line: 3445, column: 27, scope: !11014)
!11442 = !DILocation(line: 3446, column: 6, scope: !11014)
!11443 = !DILocation(line: 3445, column: 3, scope: !11014)
!11444 = !DILocation(line: 3448, column: 7, scope: !11445)
!11445 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 3448, column: 7)
!11446 = !DILocation(line: 3448, column: 17, scope: !11445)
!11447 = !DILocation(line: 3448, column: 21, scope: !11445)
!11448 = !DILocation(line: 3448, column: 32, scope: !11445)
!11449 = !DILocation(line: 3448, column: 7, scope: !11014)
!11450 = !DILocation(line: 3450, column: 16, scope: !11451)
!11451 = distinct !DILexicalBlock(scope: !11445, file: !3, line: 3449, column: 5)
!11452 = !DILocation(line: 3450, column: 7, scope: !11451)
!11453 = !DILocation(line: 3451, column: 26, scope: !11451)
!11454 = !DILocation(line: 3451, column: 37, scope: !11451)
!11455 = !DILocation(line: 3451, column: 7, scope: !11451)
!11456 = !DILocation(line: 3452, column: 16, scope: !11451)
!11457 = !DILocation(line: 3452, column: 45, scope: !11451)
!11458 = !DILocation(line: 3452, column: 52, scope: !11451)
!11459 = !DILocation(line: 3452, column: 7, scope: !11451)
!11460 = !DILocation(line: 3453, column: 5, scope: !11451)
!11461 = !DILocation(line: 3454, column: 17, scope: !11014)
!11462 = !DILocation(line: 3455, column: 3, scope: !11014)
!11463 = !DILocation(line: 3456, column: 1, scope: !11014)
!11464 = distinct !DISubprogram(name: "inhibit_phi_insertion", scope: !3, file: !3, line: 3189, type: !11465, scopeLine: 3190, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11465 = !DISubroutineType(types: !11466)
!11466 = !{!1236, !1838, !1112}
!11467 = !DILocalVariable(name: "bb", arg: 1, scope: !11464, file: !3, line: 3189, type: !1838)
!11468 = !DILocation(line: 3189, column: 36, scope: !11464)
!11469 = !DILocalVariable(name: "expr", arg: 2, scope: !11464, file: !3, line: 3189, type: !1112)
!11470 = !DILocation(line: 3189, column: 49, scope: !11464)
!11471 = !DILocalVariable(name: "vr", scope: !11464, file: !3, line: 3191, type: !2428)
!11472 = !DILocation(line: 3191, column: 18, scope: !11464)
!11473 = !DILocation(line: 3191, column: 23, scope: !11464)
!11474 = !DILocalVariable(name: "ops", scope: !11464, file: !3, line: 3192, type: !2438)
!11475 = !DILocation(line: 3192, column: 34, scope: !11464)
!11476 = !DILocation(line: 3192, column: 40, scope: !11464)
!11477 = !DILocation(line: 3192, column: 44, scope: !11464)
!11478 = !DILocalVariable(name: "op", scope: !11464, file: !3, line: 3193, type: !2935)
!11479 = !DILocation(line: 3193, column: 21, scope: !11464)
!11480 = !DILocalVariable(name: "i", scope: !11464, file: !3, line: 3194, type: !6)
!11481 = !DILocation(line: 3194, column: 12, scope: !11464)
!11482 = !DILocation(line: 3197, column: 8, scope: !11483)
!11483 = distinct !DILexicalBlock(scope: !11464, file: !3, line: 3197, column: 7)
!11484 = !DILocation(line: 3197, column: 7, scope: !11464)
!11485 = !DILocation(line: 3198, column: 5, scope: !11483)
!11486 = !DILocation(line: 3204, column: 10, scope: !11487)
!11487 = distinct !DILexicalBlock(scope: !11464, file: !3, line: 3204, column: 3)
!11488 = !DILocation(line: 3204, column: 8, scope: !11487)
!11489 = !DILocation(line: 3204, column: 15, scope: !11490)
!11490 = distinct !DILexicalBlock(scope: !11487, file: !3, line: 3204, column: 3)
!11491 = !DILocation(line: 3204, column: 3, scope: !11487)
!11492 = !DILocation(line: 3206, column: 15, scope: !11493)
!11493 = distinct !DILexicalBlock(scope: !11490, file: !3, line: 3205, column: 5)
!11494 = !DILocation(line: 3206, column: 19, scope: !11493)
!11495 = !DILocation(line: 3206, column: 7, scope: !11493)
!11496 = !DILocation(line: 3210, column: 8, scope: !11497)
!11497 = distinct !DILexicalBlock(scope: !11498, file: !3, line: 3210, column: 8)
!11498 = distinct !DILexicalBlock(scope: !11493, file: !3, line: 3207, column: 2)
!11499 = !DILocation(line: 3210, column: 28, scope: !11497)
!11500 = !DILocation(line: 3210, column: 8, scope: !11498)
!11501 = !DILocation(line: 3211, column: 6, scope: !11497)
!11502 = !DILocation(line: 3210, column: 31, scope: !11497)
!11503 = !DILocalVariable(name: "defbb", scope: !11504, file: !3, line: 3215, type: !1838)
!11504 = distinct !DILexicalBlock(scope: !11498, file: !3, line: 3214, column: 4)
!11505 = !DILocation(line: 3215, column: 18, scope: !11504)
!11506 = !DILocation(line: 3215, column: 37, scope: !11504)
!11507 = !DILocation(line: 3215, column: 26, scope: !11504)
!11508 = !DILocalVariable(name: "iv", scope: !11504, file: !3, line: 3216, type: !11509)
!11509 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1778, line: 651, baseType: !11510)
!11510 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1778, line: 644, size: 192, elements: !11511)
!11511 = !{!11512, !11513, !11514}
!11512 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !11510, file: !1778, line: 647, baseType: !1123, size: 64)
!11513 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !11510, file: !1778, line: 647, baseType: !1123, size: 64, offset: 64)
!11514 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !11510, file: !1778, line: 650, baseType: !1236, size: 8, offset: 128)
!11515 = !DILocation(line: 3216, column: 16, scope: !11504)
!11516 = !DILocation(line: 3218, column: 11, scope: !11517)
!11517 = distinct !DILexicalBlock(scope: !11504, file: !3, line: 3218, column: 10)
!11518 = !DILocation(line: 3218, column: 10, scope: !11504)
!11519 = !DILocation(line: 3219, column: 8, scope: !11517)
!11520 = !DILocation(line: 3221, column: 34, scope: !11521)
!11521 = distinct !DILexicalBlock(scope: !11504, file: !3, line: 3221, column: 10)
!11522 = !DILocation(line: 3221, column: 38, scope: !11521)
!11523 = !DILocation(line: 3221, column: 51, scope: !11521)
!11524 = !DILocation(line: 3221, column: 11, scope: !11521)
!11525 = !DILocation(line: 3221, column: 10, scope: !11504)
!11526 = !DILocation(line: 3222, column: 8, scope: !11521)
!11527 = !DILocation(line: 3225, column: 21, scope: !11528)
!11528 = distinct !DILexicalBlock(scope: !11504, file: !3, line: 3225, column: 10)
!11529 = !DILocation(line: 3225, column: 25, scope: !11528)
!11530 = !DILocation(line: 3225, column: 38, scope: !11528)
!11531 = !DILocation(line: 3225, column: 42, scope: !11528)
!11532 = !DILocation(line: 3226, column: 7, scope: !11528)
!11533 = !DILocation(line: 3226, column: 11, scope: !11528)
!11534 = !DILocation(line: 3225, column: 10, scope: !11528)
!11535 = !DILocation(line: 3225, column: 10, scope: !11504)
!11536 = !DILocation(line: 3227, column: 8, scope: !11528)
!11537 = !DILocation(line: 3230, column: 6, scope: !11504)
!11538 = !DILocation(line: 3233, column: 4, scope: !11498)
!11539 = !DILocation(line: 3235, column: 5, scope: !11493)
!11540 = !DILocation(line: 3204, column: 60, scope: !11490)
!11541 = !DILocation(line: 3204, column: 3, scope: !11490)
!11542 = distinct !{!11542, !11491, !11543}
!11543 = !DILocation(line: 3235, column: 5, scope: !11487)
!11544 = !DILocation(line: 3236, column: 3, scope: !11464)
!11545 = !DILocation(line: 3237, column: 1, scope: !11464)
!11546 = distinct !DISubprogram(name: "create_expression_by_pieces", scope: !3, file: !3, line: 3012, type: !11547, scopeLine: 3014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11547 = !DISubroutineType(types: !11548)
!11548 = !{!1123, !1838, !1112, !11549, !1386, !1123}
!11549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1376, size: 64)
!11550 = !DILocalVariable(name: "block", arg: 1, scope: !11546, file: !3, line: 3012, type: !1838)
!11551 = !DILocation(line: 3012, column: 42, scope: !11546)
!11552 = !DILocalVariable(name: "expr", arg: 2, scope: !11546, file: !3, line: 3012, type: !1112)
!11553 = !DILocation(line: 3012, column: 58, scope: !11546)
!11554 = !DILocalVariable(name: "stmts", arg: 3, scope: !11546, file: !3, line: 3013, type: !11549)
!11555 = !DILocation(line: 3013, column: 21, scope: !11546)
!11556 = !DILocalVariable(name: "domstmt", arg: 4, scope: !11546, file: !3, line: 3013, type: !1386)
!11557 = !DILocation(line: 3013, column: 35, scope: !11546)
!11558 = !DILocalVariable(name: "type", arg: 5, scope: !11546, file: !3, line: 3013, type: !1123)
!11559 = !DILocation(line: 3013, column: 49, scope: !11546)
!11560 = !DILocalVariable(name: "temp", scope: !11546, file: !3, line: 3015, type: !1123)
!11561 = !DILocation(line: 3015, column: 8, scope: !11546)
!11562 = !DILocalVariable(name: "name", scope: !11546, file: !3, line: 3015, type: !1123)
!11563 = !DILocation(line: 3015, column: 14, scope: !11546)
!11564 = !DILocalVariable(name: "folded", scope: !11546, file: !3, line: 3016, type: !1123)
!11565 = !DILocation(line: 3016, column: 8, scope: !11546)
!11566 = !DILocalVariable(name: "forced_stmts", scope: !11546, file: !3, line: 3017, type: !1376)
!11567 = !DILocation(line: 3017, column: 14, scope: !11546)
!11568 = !DILocalVariable(name: "value_id", scope: !11546, file: !3, line: 3018, type: !6)
!11569 = !DILocation(line: 3018, column: 16, scope: !11546)
!11570 = !DILocalVariable(name: "gsi", scope: !11546, file: !3, line: 3019, type: !3861)
!11571 = !DILocation(line: 3019, column: 24, scope: !11546)
!11572 = !DILocalVariable(name: "exprtype", scope: !11546, file: !3, line: 3020, type: !1123)
!11573 = !DILocation(line: 3020, column: 8, scope: !11546)
!11574 = !DILocation(line: 3020, column: 19, scope: !11546)
!11575 = !DILocation(line: 3020, column: 26, scope: !11546)
!11576 = !DILocation(line: 3020, column: 48, scope: !11546)
!11577 = !DILocation(line: 3020, column: 33, scope: !11546)
!11578 = !DILocalVariable(name: "nameexpr", scope: !11546, file: !3, line: 3021, type: !1112)
!11579 = !DILocation(line: 3021, column: 12, scope: !11546)
!11580 = !DILocalVariable(name: "newstmt", scope: !11546, file: !3, line: 3022, type: !1386)
!11581 = !DILocation(line: 3022, column: 10, scope: !11546)
!11582 = !DILocation(line: 3024, column: 11, scope: !11546)
!11583 = !DILocation(line: 3024, column: 17, scope: !11546)
!11584 = !DILocation(line: 3024, column: 3, scope: !11546)
!11585 = !DILocation(line: 3029, column: 16, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3025, column: 5)
!11587 = !DILocation(line: 3029, column: 14, scope: !11586)
!11588 = !DILocation(line: 3030, column: 7, scope: !11586)
!11589 = !DILocation(line: 3032, column: 16, scope: !11586)
!11590 = !DILocation(line: 3032, column: 14, scope: !11586)
!11591 = !DILocation(line: 3033, column: 7, scope: !11586)
!11592 = !DILocalVariable(name: "ref", scope: !11593, file: !3, line: 3036, type: !2428)
!11593 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 3035, column: 7)
!11594 = !DILocation(line: 3036, column: 17, scope: !11593)
!11595 = !DILocation(line: 3036, column: 23, scope: !11593)
!11596 = !DILocation(line: 3037, column: 43, scope: !11593)
!11597 = !DILocation(line: 3037, column: 50, scope: !11593)
!11598 = !DILocation(line: 3037, column: 55, scope: !11593)
!11599 = !DILocation(line: 3037, column: 62, scope: !11593)
!11600 = !DILocation(line: 3037, column: 11, scope: !11593)
!11601 = !DILocation(line: 3037, column: 9, scope: !11593)
!11602 = !DILocation(line: 3039, column: 7, scope: !11586)
!11603 = !DILocalVariable(name: "nary", scope: !11604, file: !3, line: 3042, type: !2414)
!11604 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 3041, column: 7)
!11605 = !DILocation(line: 3042, column: 15, scope: !11604)
!11606 = !DILocation(line: 3042, column: 22, scope: !11604)
!11607 = !DILocation(line: 3043, column: 10, scope: !11604)
!11608 = !DILocation(line: 3043, column: 16, scope: !11604)
!11609 = !DILocation(line: 3043, column: 2, scope: !11604)
!11610 = !DILocalVariable(name: "op1", scope: !11611, file: !3, line: 3047, type: !1112)
!11611 = distinct !DILexicalBlock(scope: !11612, file: !3, line: 3046, column: 6)
!11612 = distinct !DILexicalBlock(scope: !11604, file: !3, line: 3044, column: 4)
!11613 = !DILocation(line: 3047, column: 17, scope: !11611)
!11614 = !DILocation(line: 3047, column: 46, scope: !11611)
!11615 = !DILocation(line: 3047, column: 52, scope: !11611)
!11616 = !DILocation(line: 3047, column: 23, scope: !11611)
!11617 = !DILocalVariable(name: "op2", scope: !11611, file: !3, line: 3048, type: !1112)
!11618 = !DILocation(line: 3048, column: 17, scope: !11611)
!11619 = !DILocation(line: 3048, column: 46, scope: !11611)
!11620 = !DILocation(line: 3048, column: 52, scope: !11611)
!11621 = !DILocation(line: 3048, column: 23, scope: !11611)
!11622 = !DILocalVariable(name: "genop1", scope: !11611, file: !3, line: 3049, type: !1123)
!11623 = !DILocation(line: 3049, column: 13, scope: !11611)
!11624 = !DILocation(line: 3049, column: 51, scope: !11611)
!11625 = !DILocation(line: 3049, column: 58, scope: !11611)
!11626 = !DILocation(line: 3050, column: 9, scope: !11611)
!11627 = !DILocation(line: 3050, column: 16, scope: !11611)
!11628 = !DILocation(line: 3049, column: 22, scope: !11611)
!11629 = !DILocalVariable(name: "genop2", scope: !11611, file: !3, line: 3051, type: !1123)
!11630 = !DILocation(line: 3051, column: 13, scope: !11611)
!11631 = !DILocation(line: 3051, column: 51, scope: !11611)
!11632 = !DILocation(line: 3051, column: 58, scope: !11611)
!11633 = !DILocation(line: 3052, column: 9, scope: !11611)
!11634 = !DILocation(line: 3052, column: 16, scope: !11611)
!11635 = !DILocation(line: 3051, column: 22, scope: !11611)
!11636 = !DILocation(line: 3053, column: 13, scope: !11637)
!11637 = distinct !DILexicalBlock(scope: !11611, file: !3, line: 3053, column: 12)
!11638 = !DILocation(line: 3053, column: 20, scope: !11637)
!11639 = !DILocation(line: 3053, column: 24, scope: !11637)
!11640 = !DILocation(line: 3053, column: 12, scope: !11611)
!11641 = !DILocation(line: 3054, column: 3, scope: !11637)
!11642 = !DILocation(line: 3057, column: 12, scope: !11643)
!11643 = distinct !DILexicalBlock(scope: !11611, file: !3, line: 3057, column: 12)
!11644 = !DILocation(line: 3057, column: 18, scope: !11643)
!11645 = !DILocation(line: 3057, column: 25, scope: !11643)
!11646 = !DILocation(line: 3057, column: 12, scope: !11611)
!11647 = !DILocation(line: 3059, column: 14, scope: !11648)
!11648 = distinct !DILexicalBlock(scope: !11643, file: !3, line: 3058, column: 3)
!11649 = !DILocation(line: 3059, column: 12, scope: !11648)
!11650 = !DILocation(line: 3060, column: 14, scope: !11648)
!11651 = !DILocation(line: 3060, column: 12, scope: !11648)
!11652 = !DILocation(line: 3061, column: 3, scope: !11648)
!11653 = !DILocation(line: 3064, column: 14, scope: !11654)
!11654 = distinct !DILexicalBlock(scope: !11643, file: !3, line: 3063, column: 3)
!11655 = !DILocation(line: 3064, column: 12, scope: !11654)
!11656 = !DILocation(line: 3065, column: 14, scope: !11654)
!11657 = !DILocation(line: 3065, column: 12, scope: !11654)
!11658 = !DILocation(line: 3068, column: 17, scope: !11611)
!11659 = !DILocation(line: 3068, column: 15, scope: !11611)
!11660 = !DILocation(line: 3071, column: 6, scope: !11612)
!11661 = !DILocalVariable(name: "op1", scope: !11662, file: !3, line: 3074, type: !1112)
!11662 = distinct !DILexicalBlock(scope: !11612, file: !3, line: 3073, column: 6)
!11663 = !DILocation(line: 3074, column: 17, scope: !11662)
!11664 = !DILocation(line: 3074, column: 46, scope: !11662)
!11665 = !DILocation(line: 3074, column: 52, scope: !11662)
!11666 = !DILocation(line: 3074, column: 23, scope: !11662)
!11667 = !DILocalVariable(name: "genop1", scope: !11662, file: !3, line: 3075, type: !1123)
!11668 = !DILocation(line: 3075, column: 13, scope: !11662)
!11669 = !DILocation(line: 3075, column: 51, scope: !11662)
!11670 = !DILocation(line: 3075, column: 58, scope: !11662)
!11671 = !DILocation(line: 3076, column: 9, scope: !11662)
!11672 = !DILocation(line: 3076, column: 16, scope: !11662)
!11673 = !DILocation(line: 3075, column: 22, scope: !11662)
!11674 = !DILocation(line: 3077, column: 13, scope: !11675)
!11675 = distinct !DILexicalBlock(scope: !11662, file: !3, line: 3077, column: 12)
!11676 = !DILocation(line: 3077, column: 12, scope: !11662)
!11677 = !DILocation(line: 3078, column: 3, scope: !11675)
!11678 = !DILocation(line: 3079, column: 17, scope: !11662)
!11679 = !DILocation(line: 3079, column: 15, scope: !11662)
!11680 = !DILocation(line: 3081, column: 17, scope: !11662)
!11681 = !DILocation(line: 3081, column: 15, scope: !11662)
!11682 = !DILocation(line: 3084, column: 6, scope: !11612)
!11683 = !DILocation(line: 3086, column: 6, scope: !11612)
!11684 = !DILocation(line: 3089, column: 7, scope: !11586)
!11685 = !DILocation(line: 3091, column: 7, scope: !11586)
!11686 = !DILocation(line: 3094, column: 35, scope: !11687)
!11687 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3094, column: 7)
!11688 = !DILocation(line: 3094, column: 45, scope: !11687)
!11689 = !DILocation(line: 3094, column: 8, scope: !11687)
!11690 = !DILocation(line: 3094, column: 7, scope: !11546)
!11691 = !DILocation(line: 3095, column: 14, scope: !11687)
!11692 = !DILocation(line: 3095, column: 12, scope: !11687)
!11693 = !DILocation(line: 3095, column: 5, scope: !11687)
!11694 = !DILocation(line: 3101, column: 48, scope: !11546)
!11695 = !DILocation(line: 3101, column: 34, scope: !11546)
!11696 = !DILocation(line: 3101, column: 12, scope: !11546)
!11697 = !DILocation(line: 3101, column: 10, scope: !11546)
!11698 = !DILocation(line: 3106, column: 7, scope: !11699)
!11699 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3106, column: 7)
!11700 = !DILocation(line: 3106, column: 7, scope: !11546)
!11701 = !DILocation(line: 3108, column: 24, scope: !11702)
!11702 = distinct !DILexicalBlock(scope: !11699, file: !3, line: 3107, column: 5)
!11703 = !DILocation(line: 3108, column: 13, scope: !11702)
!11704 = !DILocation(line: 3109, column: 7, scope: !11702)
!11705 = !DILocation(line: 3109, column: 15, scope: !11706)
!11706 = distinct !DILexicalBlock(scope: !11707, file: !3, line: 3109, column: 7)
!11707 = distinct !DILexicalBlock(scope: !11702, file: !3, line: 3109, column: 7)
!11708 = !DILocation(line: 3109, column: 14, scope: !11706)
!11709 = !DILocation(line: 3109, column: 7, scope: !11707)
!11710 = !DILocalVariable(name: "stmt", scope: !11711, file: !3, line: 3111, type: !1386)
!11711 = distinct !DILexicalBlock(scope: !11706, file: !3, line: 3110, column: 2)
!11712 = !DILocation(line: 3111, column: 11, scope: !11711)
!11713 = !DILocation(line: 3111, column: 18, scope: !11711)
!11714 = !DILocalVariable(name: "forcedname", scope: !11711, file: !3, line: 3112, type: !1123)
!11715 = !DILocation(line: 3112, column: 9, scope: !11711)
!11716 = !DILocation(line: 3112, column: 38, scope: !11711)
!11717 = !DILocation(line: 3112, column: 22, scope: !11711)
!11718 = !DILocalVariable(name: "nameexpr", scope: !11711, file: !3, line: 3113, type: !1112)
!11719 = !DILocation(line: 3113, column: 13, scope: !11711)
!11720 = !DILocation(line: 3115, column: 4, scope: !11711)
!11721 = !DILocation(line: 3116, column: 8, scope: !11722)
!11722 = distinct !DILexicalBlock(scope: !11711, file: !3, line: 3116, column: 8)
!11723 = !DILocation(line: 3116, column: 31, scope: !11722)
!11724 = !DILocation(line: 3116, column: 8, scope: !11711)
!11725 = !DILocation(line: 3118, column: 43, scope: !11726)
!11726 = distinct !DILexicalBlock(scope: !11722, file: !3, line: 3117, column: 6)
!11727 = !DILocation(line: 3118, column: 21, scope: !11726)
!11728 = !DILocation(line: 3118, column: 8, scope: !11726)
!11729 = !DILocation(line: 3118, column: 34, scope: !11726)
!11730 = !DILocation(line: 3118, column: 41, scope: !11726)
!11731 = !DILocation(line: 3119, column: 41, scope: !11726)
!11732 = !DILocation(line: 3119, column: 17, scope: !11726)
!11733 = !DILocation(line: 3119, column: 8, scope: !11726)
!11734 = !DILocation(line: 3119, column: 30, scope: !11726)
!11735 = !DILocation(line: 3119, column: 39, scope: !11726)
!11736 = !DILocation(line: 3120, column: 47, scope: !11726)
!11737 = !DILocation(line: 3120, column: 19, scope: !11726)
!11738 = !DILocation(line: 3120, column: 17, scope: !11726)
!11739 = !DILocation(line: 3121, column: 31, scope: !11726)
!11740 = !DILocation(line: 3121, column: 22, scope: !11726)
!11741 = !DILocation(line: 3121, column: 44, scope: !11726)
!11742 = !DILocation(line: 3121, column: 54, scope: !11726)
!11743 = !DILocation(line: 3121, column: 8, scope: !11726)
!11744 = !DILocation(line: 3122, column: 13, scope: !11745)
!11745 = distinct !DILexicalBlock(scope: !11726, file: !3, line: 3122, column: 12)
!11746 = !DILocation(line: 3122, column: 12, scope: !11726)
!11747 = !DILocation(line: 3123, column: 32, scope: !11745)
!11748 = !DILocation(line: 3123, column: 50, scope: !11745)
!11749 = !DILocation(line: 3123, column: 3, scope: !11745)
!11750 = !DILocation(line: 3124, column: 37, scope: !11726)
!11751 = !DILocation(line: 3124, column: 56, scope: !11726)
!11752 = !DILocation(line: 3124, column: 8, scope: !11726)
!11753 = !DILocation(line: 3125, column: 6, scope: !11726)
!11754 = !DILocation(line: 3126, column: 31, scope: !11711)
!11755 = !DILocation(line: 3126, column: 4, scope: !11711)
!11756 = !DILocation(line: 3127, column: 2, scope: !11711)
!11757 = !DILocation(line: 3109, column: 32, scope: !11706)
!11758 = !DILocation(line: 3109, column: 7, scope: !11706)
!11759 = distinct !{!11759, !11709, !11760}
!11760 = !DILocation(line: 3127, column: 2, scope: !11707)
!11761 = !DILocation(line: 3128, column: 27, scope: !11702)
!11762 = !DILocation(line: 3128, column: 34, scope: !11702)
!11763 = !DILocation(line: 3128, column: 7, scope: !11702)
!11764 = !DILocation(line: 3129, column: 5, scope: !11702)
!11765 = !DILocation(line: 3133, column: 8, scope: !11766)
!11766 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3133, column: 7)
!11767 = !DILocation(line: 3133, column: 16, scope: !11766)
!11768 = !DILocation(line: 3133, column: 19, scope: !11766)
!11769 = !DILocation(line: 3133, column: 31, scope: !11766)
!11770 = !DILocation(line: 3133, column: 28, scope: !11766)
!11771 = !DILocation(line: 3133, column: 7, scope: !11546)
!11772 = !DILocation(line: 3135, column: 33, scope: !11773)
!11773 = distinct !DILexicalBlock(scope: !11766, file: !3, line: 3134, column: 5)
!11774 = !DILocation(line: 3135, column: 17, scope: !11773)
!11775 = !DILocation(line: 3135, column: 15, scope: !11773)
!11776 = !DILocation(line: 3136, column: 20, scope: !11773)
!11777 = !DILocation(line: 3136, column: 7, scope: !11773)
!11778 = !DILocation(line: 3137, column: 5, scope: !11773)
!11779 = !DILocation(line: 3139, column: 10, scope: !11546)
!11780 = !DILocation(line: 3139, column: 8, scope: !11546)
!11781 = !DILocation(line: 3140, column: 23, scope: !11546)
!11782 = !DILocation(line: 3140, column: 3, scope: !11546)
!11783 = !DILocation(line: 3142, column: 7, scope: !11784)
!11784 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3142, column: 7)
!11785 = !DILocation(line: 3142, column: 28, scope: !11784)
!11786 = !DILocation(line: 3143, column: 7, scope: !11784)
!11787 = !DILocation(line: 3143, column: 10, scope: !11784)
!11788 = !DILocation(line: 3143, column: 31, scope: !11784)
!11789 = !DILocation(line: 3142, column: 7, scope: !11546)
!11790 = !DILocation(line: 3144, column: 5, scope: !11784)
!11791 = !DILocation(line: 3144, column: 30, scope: !11784)
!11792 = !DILocation(line: 3146, column: 13, scope: !11546)
!11793 = !DILocation(line: 3146, column: 11, scope: !11546)
!11794 = !DILocation(line: 3147, column: 25, scope: !11546)
!11795 = !DILocation(line: 3147, column: 31, scope: !11546)
!11796 = !DILocation(line: 3147, column: 10, scope: !11546)
!11797 = !DILocation(line: 3147, column: 8, scope: !11546)
!11798 = !DILocation(line: 3148, column: 26, scope: !11546)
!11799 = !DILocation(line: 3148, column: 35, scope: !11546)
!11800 = !DILocation(line: 3148, column: 3, scope: !11546)
!11801 = !DILocation(line: 3149, column: 19, scope: !11546)
!11802 = !DILocation(line: 3149, column: 3, scope: !11546)
!11803 = !DILocation(line: 3151, column: 24, scope: !11546)
!11804 = !DILocation(line: 3151, column: 31, scope: !11546)
!11805 = !DILocation(line: 3151, column: 3, scope: !11546)
!11806 = !DILocation(line: 3152, column: 3, scope: !11546)
!11807 = !DILocation(line: 3155, column: 30, scope: !11546)
!11808 = !DILocation(line: 3155, column: 3, scope: !11546)
!11809 = !DILocation(line: 3162, column: 32, scope: !11546)
!11810 = !DILocation(line: 3162, column: 16, scope: !11546)
!11811 = !DILocation(line: 3162, column: 3, scope: !11546)
!11812 = !DILocation(line: 3162, column: 23, scope: !11546)
!11813 = !DILocation(line: 3162, column: 30, scope: !11546)
!11814 = !DILocation(line: 3163, column: 33, scope: !11546)
!11815 = !DILocation(line: 3163, column: 14, scope: !11546)
!11816 = !DILocation(line: 3163, column: 12, scope: !11546)
!11817 = !DILocation(line: 3164, column: 30, scope: !11546)
!11818 = !DILocation(line: 3164, column: 12, scope: !11546)
!11819 = !DILocation(line: 3164, column: 3, scope: !11546)
!11820 = !DILocation(line: 3164, column: 19, scope: !11546)
!11821 = !DILocation(line: 3164, column: 28, scope: !11546)
!11822 = !DILocation(line: 3165, column: 42, scope: !11546)
!11823 = !DILocation(line: 3165, column: 14, scope: !11546)
!11824 = !DILocation(line: 3165, column: 12, scope: !11546)
!11825 = !DILocation(line: 3166, column: 17, scope: !11546)
!11826 = !DILocation(line: 3166, column: 27, scope: !11546)
!11827 = !DILocation(line: 3166, column: 3, scope: !11546)
!11828 = !DILocation(line: 3167, column: 8, scope: !11829)
!11829 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3167, column: 7)
!11830 = !DILocation(line: 3167, column: 7, scope: !11546)
!11831 = !DILocation(line: 3168, column: 34, scope: !11829)
!11832 = !DILocation(line: 3168, column: 52, scope: !11829)
!11833 = !DILocation(line: 3168, column: 5, scope: !11829)
!11834 = !DILocation(line: 3169, column: 32, scope: !11546)
!11835 = !DILocation(line: 3169, column: 51, scope: !11546)
!11836 = !DILocation(line: 3169, column: 3, scope: !11546)
!11837 = !DILocation(line: 3171, column: 23, scope: !11546)
!11838 = !DILocation(line: 3172, column: 7, scope: !11839)
!11839 = distinct !DILexicalBlock(scope: !11546, file: !3, line: 3172, column: 7)
!11840 = !DILocation(line: 3172, column: 17, scope: !11839)
!11841 = !DILocation(line: 3172, column: 21, scope: !11839)
!11842 = !DILocation(line: 3172, column: 32, scope: !11839)
!11843 = !DILocation(line: 3172, column: 7, scope: !11546)
!11844 = !DILocation(line: 3174, column: 16, scope: !11845)
!11845 = distinct !DILexicalBlock(scope: !11839, file: !3, line: 3173, column: 5)
!11846 = !DILocation(line: 3174, column: 7, scope: !11845)
!11847 = !DILocation(line: 3175, column: 26, scope: !11845)
!11848 = !DILocation(line: 3175, column: 37, scope: !11845)
!11849 = !DILocation(line: 3175, column: 7, scope: !11845)
!11850 = !DILocation(line: 3176, column: 16, scope: !11845)
!11851 = !DILocation(line: 3176, column: 51, scope: !11845)
!11852 = !DILocation(line: 3176, column: 58, scope: !11845)
!11853 = !DILocation(line: 3176, column: 7, scope: !11845)
!11854 = !DILocation(line: 3177, column: 5, scope: !11845)
!11855 = !DILocation(line: 3179, column: 10, scope: !11546)
!11856 = !DILocation(line: 3179, column: 3, scope: !11546)
!11857 = !DILocation(line: 3180, column: 1, scope: !11546)
!11858 = distinct !DISubprogram(name: "gsi_start", scope: !608, file: !608, line: 4403, type: !11859, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11859 = !DISubroutineType(types: !11860)
!11860 = !{!3861, !1376}
!11861 = !DILocalVariable(name: "seq", arg: 1, scope: !11858, file: !608, line: 4403, type: !1376)
!11862 = !DILocation(line: 4403, column: 23, scope: !11858)
!11863 = !DILocalVariable(name: "i", scope: !11858, file: !608, line: 4405, type: !3861)
!11864 = !DILocation(line: 4405, column: 24, scope: !11858)
!11865 = !DILocation(line: 4407, column: 29, scope: !11858)
!11866 = !DILocation(line: 4407, column: 11, scope: !11858)
!11867 = !DILocation(line: 4407, column: 5, scope: !11858)
!11868 = !DILocation(line: 4407, column: 9, scope: !11858)
!11869 = !DILocation(line: 4408, column: 11, scope: !11858)
!11870 = !DILocation(line: 4408, column: 5, scope: !11858)
!11871 = !DILocation(line: 4408, column: 9, scope: !11858)
!11872 = !DILocation(line: 4409, column: 13, scope: !11858)
!11873 = !DILocation(line: 4409, column: 11, scope: !11858)
!11874 = !DILocation(line: 4409, column: 17, scope: !11858)
!11875 = !DILocation(line: 4409, column: 22, scope: !11858)
!11876 = !DILocation(line: 4409, column: 27, scope: !11858)
!11877 = !DILocation(line: 4409, column: 20, scope: !11858)
!11878 = !DILocation(line: 4409, column: 10, scope: !11858)
!11879 = !DILocation(line: 4409, column: 48, scope: !11858)
!11880 = !DILocation(line: 4409, column: 53, scope: !11858)
!11881 = !DILocation(line: 4409, column: 35, scope: !11858)
!11882 = !DILocation(line: 4409, column: 5, scope: !11858)
!11883 = !DILocation(line: 4409, column: 8, scope: !11858)
!11884 = !DILocation(line: 4411, column: 3, scope: !11858)
!11885 = distinct !DISubprogram(name: "create_component_ref_by_pieces", scope: !3, file: !3, line: 2924, type: !11886, scopeLine: 2926, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11886 = !DISubroutineType(types: !11887)
!11887 = !{!1123, !1838, !2428, !11549, !1386}
!11888 = !DILocalVariable(name: "block", arg: 1, scope: !11885, file: !3, line: 2924, type: !1838)
!11889 = !DILocation(line: 2924, column: 45, scope: !11885)
!11890 = !DILocalVariable(name: "ref", arg: 2, scope: !11885, file: !3, line: 2924, type: !2428)
!11891 = !DILocation(line: 2924, column: 67, scope: !11885)
!11892 = !DILocalVariable(name: "stmts", arg: 3, scope: !11885, file: !3, line: 2925, type: !11549)
!11893 = !DILocation(line: 2925, column: 17, scope: !11885)
!11894 = !DILocalVariable(name: "domstmt", arg: 4, scope: !11885, file: !3, line: 2925, type: !1386)
!11895 = !DILocation(line: 2925, column: 31, scope: !11885)
!11896 = !DILocalVariable(name: "op", scope: !11885, file: !3, line: 2927, type: !6)
!11897 = !DILocation(line: 2927, column: 16, scope: !11885)
!11898 = !DILocation(line: 2928, column: 44, scope: !11885)
!11899 = !DILocation(line: 2928, column: 51, scope: !11885)
!11900 = !DILocation(line: 2928, column: 61, scope: !11885)
!11901 = !DILocation(line: 2928, column: 68, scope: !11885)
!11902 = !DILocation(line: 2928, column: 10, scope: !11885)
!11903 = !DILocation(line: 2928, column: 3, scope: !11885)
!11904 = distinct !DISubprogram(name: "find_or_generate_expression", scope: !3, file: !3, line: 2945, type: !11905, scopeLine: 2947, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!11905 = !DISubroutineType(types: !11906)
!11906 = !{!1123, !1838, !1112, !11549, !1386}
!11907 = !DILocalVariable(name: "block", arg: 1, scope: !11904, file: !3, line: 2945, type: !1838)
!11908 = !DILocation(line: 2945, column: 42, scope: !11904)
!11909 = !DILocalVariable(name: "expr", arg: 2, scope: !11904, file: !3, line: 2945, type: !1112)
!11910 = !DILocation(line: 2945, column: 58, scope: !11904)
!11911 = !DILocalVariable(name: "stmts", arg: 3, scope: !11904, file: !3, line: 2946, type: !11549)
!11912 = !DILocation(line: 2946, column: 21, scope: !11904)
!11913 = !DILocalVariable(name: "domstmt", arg: 4, scope: !11904, file: !3, line: 2946, type: !1386)
!11914 = !DILocation(line: 2946, column: 35, scope: !11904)
!11915 = !DILocalVariable(name: "leader", scope: !11904, file: !3, line: 2948, type: !1112)
!11916 = !DILocation(line: 2948, column: 12, scope: !11904)
!11917 = !DILocation(line: 2948, column: 41, scope: !11904)
!11918 = !DILocation(line: 2949, column: 25, scope: !11904)
!11919 = !DILocation(line: 2949, column: 6, scope: !11904)
!11920 = !DILocation(line: 2949, column: 32, scope: !11904)
!11921 = !DILocation(line: 2948, column: 21, scope: !11904)
!11922 = !DILocalVariable(name: "genop", scope: !11904, file: !3, line: 2950, type: !1123)
!11923 = !DILocation(line: 2950, column: 8, scope: !11904)
!11924 = !DILocation(line: 2951, column: 7, scope: !11925)
!11925 = distinct !DILexicalBlock(scope: !11904, file: !3, line: 2951, column: 7)
!11926 = !DILocation(line: 2951, column: 7, scope: !11904)
!11927 = !DILocation(line: 2953, column: 11, scope: !11928)
!11928 = distinct !DILexicalBlock(scope: !11929, file: !3, line: 2953, column: 11)
!11929 = distinct !DILexicalBlock(scope: !11925, file: !3, line: 2952, column: 5)
!11930 = !DILocation(line: 2953, column: 19, scope: !11928)
!11931 = !DILocation(line: 2953, column: 24, scope: !11928)
!11932 = !DILocation(line: 2953, column: 11, scope: !11929)
!11933 = !DILocation(line: 2954, column: 10, scope: !11928)
!11934 = !DILocation(line: 2954, column: 8, scope: !11928)
!11935 = !DILocation(line: 2954, column: 2, scope: !11928)
!11936 = !DILocation(line: 2955, column: 16, scope: !11937)
!11937 = distinct !DILexicalBlock(scope: !11928, file: !3, line: 2955, column: 16)
!11938 = !DILocation(line: 2955, column: 24, scope: !11937)
!11939 = !DILocation(line: 2955, column: 29, scope: !11937)
!11940 = !DILocation(line: 2955, column: 16, scope: !11928)
!11941 = !DILocation(line: 2956, column: 10, scope: !11937)
!11942 = !DILocation(line: 2956, column: 8, scope: !11937)
!11943 = !DILocation(line: 2956, column: 2, scope: !11937)
!11944 = !DILocation(line: 2957, column: 5, scope: !11929)
!11945 = !DILocation(line: 2961, column: 7, scope: !11946)
!11946 = distinct !DILexicalBlock(scope: !11904, file: !3, line: 2961, column: 7)
!11947 = !DILocation(line: 2961, column: 13, scope: !11946)
!11948 = !DILocation(line: 2962, column: 7, scope: !11946)
!11949 = !DILocation(line: 2962, column: 11, scope: !11946)
!11950 = !DILocation(line: 2961, column: 7, scope: !11904)
!11951 = !DILocalVariable(name: "exprset", scope: !11952, file: !3, line: 2964, type: !1038)
!11952 = distinct !DILexicalBlock(scope: !11946, file: !3, line: 2963, column: 5)
!11953 = !DILocation(line: 2964, column: 20, scope: !11952)
!11954 = !DILocalVariable(name: "lookfor", scope: !11952, file: !3, line: 2965, type: !6)
!11955 = !DILocation(line: 2965, column: 20, scope: !11952)
!11956 = !DILocation(line: 2965, column: 49, scope: !11952)
!11957 = !DILocation(line: 2965, column: 30, scope: !11952)
!11958 = !DILocalVariable(name: "handled", scope: !11952, file: !3, line: 2966, type: !1236)
!11959 = !DILocation(line: 2966, column: 12, scope: !11952)
!11960 = !DILocalVariable(name: "bi", scope: !11952, file: !3, line: 2967, type: !3079)
!11961 = !DILocation(line: 2967, column: 23, scope: !11952)
!11962 = !DILocalVariable(name: "i", scope: !11952, file: !3, line: 2968, type: !6)
!11963 = !DILocation(line: 2968, column: 20, scope: !11952)
!11964 = !DILocation(line: 2970, column: 17, scope: !11952)
!11965 = !DILocation(line: 2970, column: 15, scope: !11952)
!11966 = !DILocation(line: 2971, column: 7, scope: !11967)
!11967 = distinct !DILexicalBlock(scope: !11952, file: !3, line: 2971, column: 7)
!11968 = !DILocation(line: 2971, column: 7, scope: !11969)
!11969 = distinct !DILexicalBlock(scope: !11967, file: !3, line: 2971, column: 7)
!11970 = !DILocalVariable(name: "temp", scope: !11971, file: !3, line: 2973, type: !1112)
!11971 = distinct !DILexicalBlock(scope: !11969, file: !3, line: 2972, column: 2)
!11972 = !DILocation(line: 2973, column: 13, scope: !11971)
!11973 = !DILocation(line: 2973, column: 39, scope: !11971)
!11974 = !DILocation(line: 2973, column: 20, scope: !11971)
!11975 = !DILocation(line: 2974, column: 8, scope: !11976)
!11976 = distinct !DILexicalBlock(scope: !11971, file: !3, line: 2974, column: 8)
!11977 = !DILocation(line: 2974, column: 14, scope: !11976)
!11978 = !DILocation(line: 2974, column: 19, scope: !11976)
!11979 = !DILocation(line: 2974, column: 8, scope: !11971)
!11980 = !DILocation(line: 2976, column: 16, scope: !11981)
!11981 = distinct !DILexicalBlock(scope: !11976, file: !3, line: 2975, column: 6)
!11982 = !DILocation(line: 2977, column: 45, scope: !11981)
!11983 = !DILocation(line: 2977, column: 52, scope: !11981)
!11984 = !DILocation(line: 2977, column: 58, scope: !11981)
!11985 = !DILocation(line: 2978, column: 10, scope: !11981)
!11986 = !DILocation(line: 2979, column: 25, scope: !11981)
!11987 = !DILocation(line: 2979, column: 10, scope: !11981)
!11988 = !DILocation(line: 2977, column: 16, scope: !11981)
!11989 = !DILocation(line: 2977, column: 14, scope: !11981)
!11990 = !DILocation(line: 2980, column: 8, scope: !11981)
!11991 = !DILocation(line: 2982, column: 2, scope: !11971)
!11992 = distinct !{!11992, !11966, !11993}
!11993 = !DILocation(line: 2982, column: 2, scope: !11967)
!11994 = !DILocation(line: 2983, column: 12, scope: !11995)
!11995 = distinct !DILexicalBlock(scope: !11952, file: !3, line: 2983, column: 11)
!11996 = !DILocation(line: 2983, column: 20, scope: !11995)
!11997 = !DILocation(line: 2983, column: 23, scope: !11995)
!11998 = !DILocation(line: 2983, column: 11, scope: !11952)
!11999 = !DILocation(line: 2984, column: 2, scope: !11995)
!12000 = !DILocation(line: 2986, column: 7, scope: !11952)
!12001 = !DILocation(line: 2987, column: 5, scope: !11952)
!12002 = !DILocation(line: 2988, column: 10, scope: !11904)
!12003 = !DILocation(line: 2988, column: 3, scope: !11904)
!12004 = !DILocation(line: 2989, column: 1, scope: !11904)
!12005 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !608, file: !608, line: 1714, type: !12006, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12006 = !DISubroutineType(types: !12007)
!12007 = !{null, !1386, !1123}
!12008 = !DILocalVariable(name: "gs", arg: 1, scope: !12005, file: !608, line: 1714, type: !1386)
!12009 = !DILocation(line: 1714, column: 31, scope: !12005)
!12010 = !DILocalVariable(name: "lhs", arg: 2, scope: !12005, file: !608, line: 1714, type: !1123)
!12011 = !DILocation(line: 1714, column: 40, scope: !12005)
!12012 = !DILocation(line: 1717, column: 18, scope: !12005)
!12013 = !DILocation(line: 1717, column: 25, scope: !12005)
!12014 = !DILocation(line: 1717, column: 3, scope: !12005)
!12015 = !DILocation(line: 1719, column: 7, scope: !12016)
!12016 = distinct !DILexicalBlock(scope: !12005, file: !608, line: 1719, column: 7)
!12017 = !DILocation(line: 1719, column: 11, scope: !12016)
!12018 = !DILocation(line: 1719, column: 14, scope: !12016)
!12019 = !DILocation(line: 1719, column: 30, scope: !12016)
!12020 = !DILocation(line: 1719, column: 7, scope: !12005)
!12021 = !DILocation(line: 1720, column: 31, scope: !12016)
!12022 = !DILocation(line: 1720, column: 5, scope: !12016)
!12023 = !DILocation(line: 1720, column: 29, scope: !12016)
!12024 = !DILocation(line: 1721, column: 1, scope: !12005)
!12025 = distinct !DISubprogram(name: "create_component_ref_by_pieces_1", scope: !3, file: !3, line: 2678, type: !12026, scopeLine: 2681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12026 = !DISubroutineType(types: !12027)
!12027 = !{!1123, !1838, !2428, !3380, !11549, !1386}
!12028 = !DILocalVariable(name: "block", arg: 1, scope: !12025, file: !3, line: 2678, type: !1838)
!12029 = !DILocation(line: 2678, column: 47, scope: !12025)
!12030 = !DILocalVariable(name: "ref", arg: 2, scope: !12025, file: !3, line: 2678, type: !2428)
!12031 = !DILocation(line: 2678, column: 69, scope: !12025)
!12032 = !DILocalVariable(name: "operand", arg: 3, scope: !12025, file: !3, line: 2679, type: !3380)
!12033 = !DILocation(line: 2679, column: 21, scope: !12025)
!12034 = !DILocalVariable(name: "stmts", arg: 4, scope: !12025, file: !3, line: 2679, type: !11549)
!12035 = !DILocation(line: 2679, column: 42, scope: !12025)
!12036 = !DILocalVariable(name: "domstmt", arg: 5, scope: !12025, file: !3, line: 2680, type: !1386)
!12037 = !DILocation(line: 2680, column: 14, scope: !12025)
!12038 = !DILocalVariable(name: "currop", scope: !12025, file: !3, line: 2682, type: !2935)
!12039 = !DILocation(line: 2682, column: 21, scope: !12025)
!12040 = !DILocation(line: 2682, column: 30, scope: !12025)
!12041 = !DILocalVariable(name: "genop", scope: !12025, file: !3, line: 2684, type: !1123)
!12042 = !DILocation(line: 2684, column: 8, scope: !12025)
!12043 = !DILocation(line: 2685, column: 6, scope: !12025)
!12044 = !DILocation(line: 2685, column: 3, scope: !12025)
!12045 = !DILocation(line: 2686, column: 11, scope: !12025)
!12046 = !DILocation(line: 2686, column: 19, scope: !12025)
!12047 = !DILocation(line: 2686, column: 3, scope: !12025)
!12048 = !DILocalVariable(name: "folded", scope: !12049, file: !3, line: 2690, type: !1123)
!12049 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2689, column: 7)
!12050 = distinct !DILexicalBlock(scope: !12025, file: !3, line: 2687, column: 5)
!12051 = !DILocation(line: 2690, column: 7, scope: !12049)
!12052 = !DILocalVariable(name: "sc", scope: !12049, file: !3, line: 2690, type: !1123)
!12053 = !DILocation(line: 2690, column: 15, scope: !12049)
!12054 = !DILocation(line: 2690, column: 20, scope: !12049)
!12055 = !DILocation(line: 2690, column: 28, scope: !12049)
!12056 = !DILocalVariable(name: "nargs", scope: !12049, file: !3, line: 2691, type: !6)
!12057 = !DILocation(line: 2691, column: 15, scope: !12049)
!12058 = !DILocalVariable(name: "args", scope: !12049, file: !3, line: 2692, type: !1420)
!12059 = !DILocation(line: 2692, column: 8, scope: !12049)
!12060 = !DILocation(line: 2692, column: 15, scope: !12049)
!12061 = !DILocation(line: 2694, column: 2, scope: !12049)
!12062 = !DILocation(line: 2694, column: 10, scope: !12049)
!12063 = !DILocation(line: 2694, column: 9, scope: !12049)
!12064 = !DILocation(line: 2694, column: 20, scope: !12049)
!12065 = !DILocation(line: 2694, column: 18, scope: !12049)
!12066 = !DILocation(line: 2696, column: 54, scope: !12067)
!12067 = distinct !DILexicalBlock(scope: !12049, file: !3, line: 2695, column: 4)
!12068 = !DILocation(line: 2696, column: 61, scope: !12067)
!12069 = !DILocation(line: 2697, column: 12, scope: !12067)
!12070 = !DILocation(line: 2697, column: 21, scope: !12067)
!12071 = !DILocation(line: 2698, column: 12, scope: !12067)
!12072 = !DILocation(line: 2696, column: 20, scope: !12067)
!12073 = !DILocation(line: 2696, column: 6, scope: !12067)
!12074 = !DILocation(line: 2696, column: 11, scope: !12067)
!12075 = !DILocation(line: 2696, column: 18, scope: !12067)
!12076 = !DILocation(line: 2699, column: 11, scope: !12067)
!12077 = distinct !{!12077, !12061, !12078}
!12078 = !DILocation(line: 2700, column: 4, scope: !12049)
!12079 = !DILocation(line: 2701, column: 11, scope: !12049)
!12080 = !DILocation(line: 2701, column: 9, scope: !12049)
!12081 = !DILocation(line: 2706, column: 8, scope: !12049)
!12082 = !DILocation(line: 2706, column: 2, scope: !12049)
!12083 = !DILocation(line: 2707, column: 6, scope: !12084)
!12084 = distinct !DILexicalBlock(scope: !12049, file: !3, line: 2707, column: 6)
!12085 = !DILocation(line: 2707, column: 6, scope: !12049)
!12086 = !DILocalVariable(name: "scexpr", scope: !12087, file: !3, line: 2709, type: !1112)
!12087 = distinct !DILexicalBlock(scope: !12084, file: !3, line: 2708, column: 4)
!12088 = !DILocation(line: 2709, column: 15, scope: !12087)
!12089 = !DILocation(line: 2709, column: 47, scope: !12087)
!12090 = !DILocation(line: 2709, column: 24, scope: !12087)
!12091 = !DILocation(line: 2710, column: 40, scope: !12087)
!12092 = !DILocation(line: 2710, column: 47, scope: !12087)
!12093 = !DILocation(line: 2710, column: 55, scope: !12087)
!12094 = !DILocation(line: 2710, column: 62, scope: !12087)
!12095 = !DILocation(line: 2710, column: 11, scope: !12087)
!12096 = !DILocation(line: 2710, column: 9, scope: !12087)
!12097 = !DILocation(line: 2711, column: 11, scope: !12098)
!12098 = distinct !DILexicalBlock(scope: !12087, file: !3, line: 2711, column: 10)
!12099 = !DILocation(line: 2711, column: 10, scope: !12087)
!12100 = !DILocation(line: 2712, column: 8, scope: !12098)
!12101 = !DILocation(line: 2713, column: 40, scope: !12087)
!12102 = !DILocation(line: 2713, column: 6, scope: !12087)
!12103 = !DILocation(line: 2713, column: 38, scope: !12087)
!12104 = !DILocation(line: 2714, column: 4, scope: !12087)
!12105 = !DILocation(line: 2715, column: 9, scope: !12049)
!12106 = !DILocation(line: 2715, column: 2, scope: !12049)
!12107 = !DILocalVariable(name: "nextop", scope: !12108, file: !3, line: 2720, type: !2935)
!12108 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2719, column: 7)
!12109 = !DILocation(line: 2720, column: 20, scope: !12108)
!12110 = !DILocation(line: 2720, column: 29, scope: !12108)
!12111 = !DILocalVariable(name: "op0expr", scope: !12108, file: !3, line: 2722, type: !1112)
!12112 = !DILocation(line: 2722, column: 11, scope: !12108)
!12113 = !DILocalVariable(name: "genop0", scope: !12108, file: !3, line: 2723, type: !1123)
!12114 = !DILocation(line: 2723, column: 7, scope: !12108)
!12115 = !DILocalVariable(name: "baseop", scope: !12108, file: !3, line: 2724, type: !1123)
!12116 = !DILocation(line: 2724, column: 7, scope: !12108)
!12117 = !DILocation(line: 2724, column: 50, scope: !12108)
!12118 = !DILocation(line: 2724, column: 57, scope: !12108)
!12119 = !DILocation(line: 2724, column: 62, scope: !12108)
!12120 = !DILocation(line: 2725, column: 8, scope: !12108)
!12121 = !DILocation(line: 2725, column: 15, scope: !12108)
!12122 = !DILocation(line: 2724, column: 16, scope: !12108)
!12123 = !DILocation(line: 2726, column: 7, scope: !12124)
!12124 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2726, column: 6)
!12125 = !DILocation(line: 2726, column: 6, scope: !12108)
!12126 = !DILocation(line: 2727, column: 4, scope: !12124)
!12127 = !DILocation(line: 2728, column: 6, scope: !12128)
!12128 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2728, column: 6)
!12129 = !DILocation(line: 2728, column: 14, scope: !12128)
!12130 = !DILocation(line: 2728, column: 6, scope: !12108)
!12131 = !DILocation(line: 2730, column: 39, scope: !12132)
!12132 = distinct !DILexicalBlock(scope: !12128, file: !3, line: 2729, column: 4)
!12133 = !DILocation(line: 2730, column: 47, scope: !12132)
!12134 = !DILocation(line: 2730, column: 16, scope: !12132)
!12135 = !DILocation(line: 2730, column: 14, scope: !12132)
!12136 = !DILocation(line: 2731, column: 44, scope: !12132)
!12137 = !DILocation(line: 2731, column: 51, scope: !12132)
!12138 = !DILocation(line: 2732, column: 9, scope: !12132)
!12139 = !DILocation(line: 2732, column: 16, scope: !12132)
!12140 = !DILocation(line: 2731, column: 15, scope: !12132)
!12141 = !DILocation(line: 2731, column: 13, scope: !12132)
!12142 = !DILocation(line: 2733, column: 11, scope: !12143)
!12143 = distinct !DILexicalBlock(scope: !12132, file: !3, line: 2733, column: 10)
!12144 = !DILocation(line: 2733, column: 10, scope: !12132)
!12145 = !DILocation(line: 2734, column: 8, scope: !12143)
!12146 = !DILocation(line: 2735, column: 4, scope: !12132)
!12147 = !DILocation(line: 2736, column: 6, scope: !12148)
!12148 = distinct !DILexicalBlock(scope: !12108, file: !3, line: 2736, column: 6)
!12149 = !DILocation(line: 2736, column: 6, scope: !12108)
!12150 = !DILocation(line: 2737, column: 11, scope: !12148)
!12151 = !DILocation(line: 2737, column: 4, scope: !12148)
!12152 = !DILocation(line: 2742, column: 11, scope: !12148)
!12153 = !DILocation(line: 2742, column: 4, scope: !12148)
!12154 = !DILocation(line: 2749, column: 11, scope: !12155)
!12155 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2749, column: 11)
!12156 = !DILocation(line: 2749, column: 19, scope: !12155)
!12157 = !DILocation(line: 2749, column: 11, scope: !12050)
!12158 = !DILocation(line: 2751, column: 4, scope: !12159)
!12159 = distinct !DILexicalBlock(scope: !12155, file: !3, line: 2750, column: 2)
!12160 = !DILocation(line: 2752, column: 11, scope: !12159)
!12161 = !DILocation(line: 2752, column: 19, scope: !12159)
!12162 = !DILocation(line: 2752, column: 4, scope: !12159)
!12163 = !DILocalVariable(name: "folded", scope: !12164, file: !3, line: 2759, type: !1123)
!12164 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2758, column: 7)
!12165 = !DILocation(line: 2759, column: 7, scope: !12164)
!12166 = !DILocalVariable(name: "genop0", scope: !12164, file: !3, line: 2760, type: !1123)
!12167 = !DILocation(line: 2760, column: 7, scope: !12164)
!12168 = !DILocation(line: 2760, column: 50, scope: !12164)
!12169 = !DILocation(line: 2760, column: 57, scope: !12164)
!12170 = !DILocation(line: 2761, column: 8, scope: !12164)
!12171 = !DILocation(line: 2762, column: 8, scope: !12164)
!12172 = !DILocation(line: 2762, column: 15, scope: !12164)
!12173 = !DILocation(line: 2760, column: 16, scope: !12164)
!12174 = !DILocation(line: 2763, column: 7, scope: !12175)
!12175 = distinct !DILexicalBlock(scope: !12164, file: !3, line: 2763, column: 6)
!12176 = !DILocation(line: 2763, column: 6, scope: !12164)
!12177 = !DILocation(line: 2764, column: 4, scope: !12175)
!12178 = !DILocation(line: 2765, column: 11, scope: !12164)
!12179 = !DILocation(line: 2765, column: 9, scope: !12164)
!12180 = !DILocation(line: 2767, column: 9, scope: !12164)
!12181 = !DILocation(line: 2767, column: 2, scope: !12164)
!12182 = !DILocalVariable(name: "folded", scope: !12183, file: !3, line: 2774, type: !1123)
!12183 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2773, column: 7)
!12184 = !DILocation(line: 2774, column: 7, scope: !12183)
!12185 = !DILocalVariable(name: "genop1", scope: !12183, file: !3, line: 2775, type: !1123)
!12186 = !DILocation(line: 2775, column: 7, scope: !12183)
!12187 = !DILocation(line: 2775, column: 50, scope: !12183)
!12188 = !DILocation(line: 2775, column: 57, scope: !12183)
!12189 = !DILocation(line: 2776, column: 8, scope: !12183)
!12190 = !DILocation(line: 2777, column: 8, scope: !12183)
!12191 = !DILocation(line: 2777, column: 15, scope: !12183)
!12192 = !DILocation(line: 2775, column: 16, scope: !12183)
!12193 = !DILocation(line: 2778, column: 7, scope: !12194)
!12194 = distinct !DILexicalBlock(scope: !12183, file: !3, line: 2778, column: 6)
!12195 = !DILocation(line: 2778, column: 6, scope: !12183)
!12196 = !DILocation(line: 2779, column: 4, scope: !12194)
!12197 = !DILocation(line: 2780, column: 11, scope: !12183)
!12198 = !DILocation(line: 2780, column: 9, scope: !12183)
!12199 = !DILocation(line: 2783, column: 6, scope: !12200)
!12200 = distinct !DILexicalBlock(scope: !12183, file: !3, line: 2783, column: 6)
!12201 = !DILocation(line: 2783, column: 14, scope: !12200)
!12202 = !DILocation(line: 2783, column: 21, scope: !12200)
!12203 = !DILocation(line: 2783, column: 6, scope: !12183)
!12204 = !DILocation(line: 2784, column: 13, scope: !12200)
!12205 = !DILocation(line: 2784, column: 11, scope: !12200)
!12206 = !DILocation(line: 2784, column: 4, scope: !12200)
!12207 = !DILocation(line: 2787, column: 13, scope: !12200)
!12208 = !DILocation(line: 2787, column: 11, scope: !12200)
!12209 = !DILocation(line: 2789, column: 9, scope: !12183)
!12210 = !DILocation(line: 2789, column: 2, scope: !12183)
!12211 = !DILocalVariable(name: "folded", scope: !12212, file: !3, line: 2794, type: !1123)
!12212 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2793, column: 7)
!12213 = !DILocation(line: 2794, column: 7, scope: !12212)
!12214 = !DILocalVariable(name: "genop0", scope: !12212, file: !3, line: 2795, type: !1123)
!12215 = !DILocation(line: 2795, column: 7, scope: !12212)
!12216 = !DILocation(line: 2795, column: 50, scope: !12212)
!12217 = !DILocation(line: 2795, column: 57, scope: !12212)
!12218 = !DILocation(line: 2795, column: 62, scope: !12212)
!12219 = !DILocation(line: 2796, column: 8, scope: !12212)
!12220 = !DILocation(line: 2796, column: 15, scope: !12212)
!12221 = !DILocation(line: 2795, column: 16, scope: !12212)
!12222 = !DILocalVariable(name: "op1expr", scope: !12212, file: !3, line: 2797, type: !1112)
!12223 = !DILocation(line: 2797, column: 11, scope: !12212)
!12224 = !DILocation(line: 2797, column: 44, scope: !12212)
!12225 = !DILocation(line: 2797, column: 52, scope: !12212)
!12226 = !DILocation(line: 2797, column: 21, scope: !12212)
!12227 = !DILocalVariable(name: "op2expr", scope: !12212, file: !3, line: 2798, type: !1112)
!12228 = !DILocation(line: 2798, column: 11, scope: !12212)
!12229 = !DILocation(line: 2798, column: 44, scope: !12212)
!12230 = !DILocation(line: 2798, column: 52, scope: !12212)
!12231 = !DILocation(line: 2798, column: 21, scope: !12212)
!12232 = !DILocalVariable(name: "genop1", scope: !12212, file: !3, line: 2799, type: !1123)
!12233 = !DILocation(line: 2799, column: 7, scope: !12212)
!12234 = !DILocalVariable(name: "genop2", scope: !12212, file: !3, line: 2800, type: !1123)
!12235 = !DILocation(line: 2800, column: 7, scope: !12212)
!12236 = !DILocation(line: 2802, column: 7, scope: !12237)
!12237 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 2802, column: 6)
!12238 = !DILocation(line: 2802, column: 6, scope: !12212)
!12239 = !DILocation(line: 2803, column: 4, scope: !12237)
!12240 = !DILocation(line: 2804, column: 40, scope: !12212)
!12241 = !DILocation(line: 2804, column: 47, scope: !12212)
!12242 = !DILocation(line: 2804, column: 56, scope: !12212)
!12243 = !DILocation(line: 2804, column: 63, scope: !12212)
!12244 = !DILocation(line: 2804, column: 11, scope: !12212)
!12245 = !DILocation(line: 2804, column: 9, scope: !12212)
!12246 = !DILocation(line: 2805, column: 7, scope: !12247)
!12247 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 2805, column: 6)
!12248 = !DILocation(line: 2805, column: 6, scope: !12212)
!12249 = !DILocation(line: 2806, column: 4, scope: !12247)
!12250 = !DILocation(line: 2807, column: 40, scope: !12212)
!12251 = !DILocation(line: 2807, column: 47, scope: !12212)
!12252 = !DILocation(line: 2807, column: 56, scope: !12212)
!12253 = !DILocation(line: 2807, column: 63, scope: !12212)
!12254 = !DILocation(line: 2807, column: 11, scope: !12212)
!12255 = !DILocation(line: 2807, column: 9, scope: !12212)
!12256 = !DILocation(line: 2808, column: 7, scope: !12257)
!12257 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 2808, column: 6)
!12258 = !DILocation(line: 2808, column: 6, scope: !12212)
!12259 = !DILocation(line: 2809, column: 4, scope: !12257)
!12260 = !DILocation(line: 2810, column: 11, scope: !12212)
!12261 = !DILocation(line: 2810, column: 9, scope: !12212)
!12262 = !DILocation(line: 2812, column: 9, scope: !12212)
!12263 = !DILocation(line: 2812, column: 2, scope: !12212)
!12264 = !DILocalVariable(name: "genop0", scope: !12265, file: !3, line: 2821, type: !1123)
!12265 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2820, column: 7)
!12266 = !DILocation(line: 2821, column: 7, scope: !12265)
!12267 = !DILocalVariable(name: "genop1", scope: !12265, file: !3, line: 2822, type: !1123)
!12268 = !DILocation(line: 2822, column: 7, scope: !12265)
!12269 = !DILocation(line: 2822, column: 16, scope: !12265)
!12270 = !DILocation(line: 2822, column: 24, scope: !12265)
!12271 = !DILocalVariable(name: "op1expr", scope: !12265, file: !3, line: 2823, type: !1112)
!12272 = !DILocation(line: 2823, column: 11, scope: !12265)
!12273 = !DILocalVariable(name: "genop2", scope: !12265, file: !3, line: 2824, type: !1123)
!12274 = !DILocation(line: 2824, column: 7, scope: !12265)
!12275 = !DILocation(line: 2824, column: 16, scope: !12265)
!12276 = !DILocation(line: 2824, column: 24, scope: !12265)
!12277 = !DILocalVariable(name: "op2expr", scope: !12265, file: !3, line: 2825, type: !1112)
!12278 = !DILocation(line: 2825, column: 11, scope: !12265)
!12279 = !DILocalVariable(name: "genop3", scope: !12265, file: !3, line: 2826, type: !1123)
!12280 = !DILocation(line: 2826, column: 7, scope: !12265)
!12281 = !DILocation(line: 2826, column: 16, scope: !12265)
!12282 = !DILocation(line: 2826, column: 24, scope: !12265)
!12283 = !DILocalVariable(name: "op3expr", scope: !12265, file: !3, line: 2827, type: !1112)
!12284 = !DILocation(line: 2827, column: 11, scope: !12265)
!12285 = !DILocation(line: 2828, column: 45, scope: !12265)
!12286 = !DILocation(line: 2828, column: 52, scope: !12265)
!12287 = !DILocation(line: 2828, column: 57, scope: !12265)
!12288 = !DILocation(line: 2829, column: 10, scope: !12265)
!12289 = !DILocation(line: 2829, column: 17, scope: !12265)
!12290 = !DILocation(line: 2828, column: 11, scope: !12265)
!12291 = !DILocation(line: 2828, column: 9, scope: !12265)
!12292 = !DILocation(line: 2830, column: 7, scope: !12293)
!12293 = distinct !DILexicalBlock(scope: !12265, file: !3, line: 2830, column: 6)
!12294 = !DILocation(line: 2830, column: 6, scope: !12265)
!12295 = !DILocation(line: 2831, column: 4, scope: !12293)
!12296 = !DILocation(line: 2832, column: 35, scope: !12265)
!12297 = !DILocation(line: 2832, column: 12, scope: !12265)
!12298 = !DILocation(line: 2832, column: 10, scope: !12265)
!12299 = !DILocation(line: 2833, column: 40, scope: !12265)
!12300 = !DILocation(line: 2833, column: 47, scope: !12265)
!12301 = !DILocation(line: 2833, column: 56, scope: !12265)
!12302 = !DILocation(line: 2833, column: 63, scope: !12265)
!12303 = !DILocation(line: 2833, column: 11, scope: !12265)
!12304 = !DILocation(line: 2833, column: 9, scope: !12265)
!12305 = !DILocation(line: 2834, column: 7, scope: !12306)
!12306 = distinct !DILexicalBlock(scope: !12265, file: !3, line: 2834, column: 6)
!12307 = !DILocation(line: 2834, column: 6, scope: !12265)
!12308 = !DILocation(line: 2835, column: 4, scope: !12306)
!12309 = !DILocation(line: 2836, column: 6, scope: !12310)
!12310 = distinct !DILexicalBlock(scope: !12265, file: !3, line: 2836, column: 6)
!12311 = !DILocation(line: 2836, column: 6, scope: !12265)
!12312 = !DILocation(line: 2838, column: 39, scope: !12313)
!12313 = distinct !DILexicalBlock(scope: !12310, file: !3, line: 2837, column: 4)
!12314 = !DILocation(line: 2838, column: 16, scope: !12313)
!12315 = !DILocation(line: 2838, column: 14, scope: !12313)
!12316 = !DILocation(line: 2839, column: 44, scope: !12313)
!12317 = !DILocation(line: 2839, column: 51, scope: !12313)
!12318 = !DILocation(line: 2839, column: 60, scope: !12313)
!12319 = !DILocation(line: 2840, column: 9, scope: !12313)
!12320 = !DILocation(line: 2839, column: 15, scope: !12313)
!12321 = !DILocation(line: 2839, column: 13, scope: !12313)
!12322 = !DILocation(line: 2841, column: 11, scope: !12323)
!12323 = distinct !DILexicalBlock(scope: !12313, file: !3, line: 2841, column: 10)
!12324 = !DILocation(line: 2841, column: 10, scope: !12313)
!12325 = !DILocation(line: 2842, column: 8, scope: !12323)
!12326 = !DILocation(line: 2843, column: 4, scope: !12313)
!12327 = !DILocation(line: 2844, column: 6, scope: !12328)
!12328 = distinct !DILexicalBlock(scope: !12265, file: !3, line: 2844, column: 6)
!12329 = !DILocation(line: 2844, column: 6, scope: !12265)
!12330 = !DILocalVariable(name: "elmt_type", scope: !12331, file: !3, line: 2846, type: !1123)
!12331 = distinct !DILexicalBlock(scope: !12328, file: !3, line: 2845, column: 4)
!12332 = !DILocation(line: 2846, column: 11, scope: !12331)
!12333 = !DILocation(line: 2846, column: 23, scope: !12331)
!12334 = !DILocation(line: 2847, column: 15, scope: !12331)
!12335 = !DILocation(line: 2847, column: 13, scope: !12331)
!12336 = !DILocation(line: 2849, column: 39, scope: !12331)
!12337 = !DILocation(line: 2849, column: 16, scope: !12331)
!12338 = !DILocation(line: 2849, column: 14, scope: !12331)
!12339 = !DILocation(line: 2850, column: 44, scope: !12331)
!12340 = !DILocation(line: 2850, column: 51, scope: !12331)
!12341 = !DILocation(line: 2850, column: 60, scope: !12331)
!12342 = !DILocation(line: 2851, column: 9, scope: !12331)
!12343 = !DILocation(line: 2850, column: 15, scope: !12331)
!12344 = !DILocation(line: 2850, column: 13, scope: !12331)
!12345 = !DILocation(line: 2852, column: 11, scope: !12346)
!12346 = distinct !DILexicalBlock(scope: !12331, file: !3, line: 2852, column: 10)
!12347 = !DILocation(line: 2852, column: 10, scope: !12331)
!12348 = !DILocation(line: 2853, column: 8, scope: !12346)
!12349 = !DILocation(line: 2854, column: 4, scope: !12331)
!12350 = !DILocation(line: 2855, column: 9, scope: !12265)
!12351 = !DILocation(line: 2855, column: 2, scope: !12265)
!12352 = !DILocalVariable(name: "op0", scope: !12353, file: !3, line: 2860, type: !1123)
!12353 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2859, column: 7)
!12354 = !DILocation(line: 2860, column: 7, scope: !12353)
!12355 = !DILocalVariable(name: "op1", scope: !12353, file: !3, line: 2861, type: !1123)
!12356 = !DILocation(line: 2861, column: 7, scope: !12353)
!12357 = !DILocalVariable(name: "genop2", scope: !12353, file: !3, line: 2862, type: !1123)
!12358 = !DILocation(line: 2862, column: 7, scope: !12353)
!12359 = !DILocation(line: 2862, column: 16, scope: !12353)
!12360 = !DILocation(line: 2862, column: 24, scope: !12353)
!12361 = !DILocalVariable(name: "op2expr", scope: !12353, file: !3, line: 2863, type: !1112)
!12362 = !DILocation(line: 2863, column: 11, scope: !12353)
!12363 = !DILocation(line: 2864, column: 42, scope: !12353)
!12364 = !DILocation(line: 2864, column: 49, scope: !12353)
!12365 = !DILocation(line: 2864, column: 54, scope: !12353)
!12366 = !DILocation(line: 2865, column: 7, scope: !12353)
!12367 = !DILocation(line: 2865, column: 14, scope: !12353)
!12368 = !DILocation(line: 2864, column: 8, scope: !12353)
!12369 = !DILocation(line: 2864, column: 6, scope: !12353)
!12370 = !DILocation(line: 2866, column: 7, scope: !12371)
!12371 = distinct !DILexicalBlock(scope: !12353, file: !3, line: 2866, column: 6)
!12372 = !DILocation(line: 2866, column: 6, scope: !12353)
!12373 = !DILocation(line: 2867, column: 4, scope: !12371)
!12374 = !DILocation(line: 2870, column: 8, scope: !12353)
!12375 = !DILocation(line: 2870, column: 16, scope: !12353)
!12376 = !DILocation(line: 2870, column: 6, scope: !12353)
!12377 = !DILocation(line: 2871, column: 6, scope: !12378)
!12378 = distinct !DILexicalBlock(scope: !12353, file: !3, line: 2871, column: 6)
!12379 = !DILocation(line: 2871, column: 6, scope: !12353)
!12380 = !DILocation(line: 2873, column: 39, scope: !12381)
!12381 = distinct !DILexicalBlock(scope: !12378, file: !3, line: 2872, column: 4)
!12382 = !DILocation(line: 2873, column: 16, scope: !12381)
!12383 = !DILocation(line: 2873, column: 14, scope: !12381)
!12384 = !DILocation(line: 2874, column: 44, scope: !12381)
!12385 = !DILocation(line: 2874, column: 51, scope: !12381)
!12386 = !DILocation(line: 2874, column: 60, scope: !12381)
!12387 = !DILocation(line: 2875, column: 9, scope: !12381)
!12388 = !DILocation(line: 2874, column: 15, scope: !12381)
!12389 = !DILocation(line: 2874, column: 13, scope: !12381)
!12390 = !DILocation(line: 2876, column: 11, scope: !12391)
!12391 = distinct !DILexicalBlock(scope: !12381, file: !3, line: 2876, column: 10)
!12392 = !DILocation(line: 2876, column: 10, scope: !12381)
!12393 = !DILocation(line: 2877, column: 8, scope: !12391)
!12394 = !DILocation(line: 2878, column: 4, scope: !12381)
!12395 = !DILocation(line: 2880, column: 9, scope: !12353)
!12396 = !DILocation(line: 2880, column: 2, scope: !12353)
!12397 = !DILocalVariable(name: "op0expr", scope: !12398, file: !3, line: 2886, type: !1112)
!12398 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 2885, column: 7)
!12399 = !DILocation(line: 2886, column: 11, scope: !12398)
!12400 = !DILocation(line: 2886, column: 44, scope: !12398)
!12401 = !DILocation(line: 2886, column: 52, scope: !12398)
!12402 = !DILocation(line: 2886, column: 21, scope: !12398)
!12403 = !DILocation(line: 2887, column: 39, scope: !12398)
!12404 = !DILocation(line: 2887, column: 46, scope: !12398)
!12405 = !DILocation(line: 2887, column: 55, scope: !12398)
!12406 = !DILocation(line: 2887, column: 62, scope: !12398)
!12407 = !DILocation(line: 2887, column: 10, scope: !12398)
!12408 = !DILocation(line: 2887, column: 8, scope: !12398)
!12409 = !DILocation(line: 2888, column: 9, scope: !12398)
!12410 = !DILocation(line: 2888, column: 2, scope: !12398)
!12411 = !DILocation(line: 2901, column: 14, scope: !12050)
!12412 = !DILocation(line: 2901, column: 22, scope: !12050)
!12413 = !DILocation(line: 2901, column: 7, scope: !12050)
!12414 = !DILocation(line: 2904, column: 7, scope: !12050)
!12415 = !DILocation(line: 2905, column: 5, scope: !12050)
!12416 = !DILocation(line: 2907, column: 5, scope: !12025)
!12417 = !DILocation(line: 2909, column: 1, scope: !12025)
!12418 = distinct !DISubprogram(name: "gimple_set_op", scope: !608, file: !608, line: 1663, type: !12419, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12419 = !DISubroutineType(types: !12420)
!12420 = !{null, !1386, !6, !1123}
!12421 = !DILocalVariable(name: "gs", arg: 1, scope: !12418, file: !608, line: 1663, type: !1386)
!12422 = !DILocation(line: 1663, column: 23, scope: !12418)
!12423 = !DILocalVariable(name: "i", arg: 2, scope: !12418, file: !608, line: 1663, type: !6)
!12424 = !DILocation(line: 1663, column: 36, scope: !12418)
!12425 = !DILocalVariable(name: "op", arg: 3, scope: !12418, file: !608, line: 1663, type: !1123)
!12426 = !DILocation(line: 1663, column: 44, scope: !12418)
!12427 = !DILocation(line: 1665, column: 3, scope: !12418)
!12428 = !DILocation(line: 1671, column: 24, scope: !12418)
!12429 = !DILocation(line: 1671, column: 15, scope: !12418)
!12430 = !DILocation(line: 1671, column: 3, scope: !12418)
!12431 = !DILocation(line: 1671, column: 19, scope: !12418)
!12432 = !DILocation(line: 1671, column: 22, scope: !12418)
!12433 = !DILocation(line: 1672, column: 1, scope: !12418)
!12434 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !608, file: !608, line: 2210, type: !6530, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12435 = !DILocalVariable(name: "stmt", arg: 1, scope: !12434, file: !608, line: 2210, type: !1386)
!12436 = !DILocation(line: 2210, column: 24, scope: !12434)
!12437 = !DILocation(line: 2212, column: 29, scope: !12434)
!12438 = !DILocation(line: 2212, column: 11, scope: !12434)
!12439 = !DILocation(line: 2213, column: 4, scope: !12434)
!12440 = !DILocation(line: 2213, column: 24, scope: !12434)
!12441 = !DILocation(line: 2213, column: 8, scope: !12434)
!12442 = !DILocation(line: 2214, column: 8, scope: !12434)
!12443 = !DILocation(line: 2214, column: 28, scope: !12434)
!12444 = !DILocation(line: 2214, column: 11, scope: !12434)
!12445 = !DILocation(line: 2214, column: 34, scope: !12434)
!12446 = !DILocation(line: 0, scope: !12434)
!12447 = !DILocation(line: 2212, column: 10, scope: !12434)
!12448 = !DILocation(line: 2212, column: 3, scope: !12434)
!12449 = distinct !DISubprogram(name: "update_stmt", scope: !608, file: !608, line: 1456, type: !12450, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12450 = !DISubroutineType(types: !12451)
!12451 = !{null, !1386}
!12452 = !DILocalVariable(name: "s", arg: 1, scope: !12449, file: !608, line: 1456, type: !1386)
!12453 = !DILocation(line: 1456, column: 21, scope: !12449)
!12454 = !DILocation(line: 1458, column: 23, scope: !12455)
!12455 = distinct !DILexicalBlock(scope: !12449, file: !608, line: 1458, column: 7)
!12456 = !DILocation(line: 1458, column: 7, scope: !12455)
!12457 = !DILocation(line: 1458, column: 7, scope: !12449)
!12458 = !DILocation(line: 1460, column: 28, scope: !12459)
!12459 = distinct !DILexicalBlock(scope: !12455, file: !608, line: 1459, column: 5)
!12460 = !DILocation(line: 1460, column: 7, scope: !12459)
!12461 = !DILocation(line: 1461, column: 29, scope: !12459)
!12462 = !DILocation(line: 1461, column: 7, scope: !12459)
!12463 = !DILocation(line: 1462, column: 5, scope: !12459)
!12464 = !DILocation(line: 1463, column: 1, scope: !12449)
!12465 = distinct !DISubprogram(name: "can_PRE_operation", scope: !3, file: !3, line: 2651, type: !12466, scopeLine: 2652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12466 = !DISubroutineType(types: !12467)
!12467 = !{!1236, !1123}
!12468 = !DILocalVariable(name: "op", arg: 1, scope: !12465, file: !3, line: 2651, type: !1123)
!12469 = !DILocation(line: 2651, column: 25, scope: !12465)
!12470 = !DILocation(line: 2653, column: 10, scope: !12465)
!12471 = !DILocation(line: 2654, column: 5, scope: !12465)
!12472 = !DILocation(line: 2654, column: 8, scope: !12465)
!12473 = !DILocation(line: 2655, column: 5, scope: !12465)
!12474 = !DILocation(line: 2655, column: 8, scope: !12465)
!12475 = !DILocation(line: 2656, column: 5, scope: !12465)
!12476 = !DILocation(line: 2656, column: 8, scope: !12465)
!12477 = !DILocation(line: 2656, column: 23, scope: !12465)
!12478 = !DILocation(line: 2657, column: 5, scope: !12465)
!12479 = !DILocation(line: 2657, column: 8, scope: !12465)
!12480 = !DILocation(line: 2657, column: 23, scope: !12465)
!12481 = !DILocation(line: 2658, column: 5, scope: !12465)
!12482 = !DILocation(line: 2658, column: 8, scope: !12465)
!12483 = !DILocation(line: 2658, column: 23, scope: !12465)
!12484 = !DILocation(line: 2659, column: 5, scope: !12465)
!12485 = !DILocation(line: 2659, column: 8, scope: !12465)
!12486 = !DILocation(line: 2659, column: 23, scope: !12465)
!12487 = !DILocation(line: 2660, column: 5, scope: !12465)
!12488 = !DILocation(line: 2660, column: 8, scope: !12465)
!12489 = !DILocation(line: 2660, column: 23, scope: !12465)
!12490 = !DILocation(line: 2653, column: 3, scope: !12465)
!12491 = distinct !DISubprogram(name: "do_SCCVN_insertion", scope: !3, file: !3, line: 4089, type: !12492, scopeLine: 4090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12492 = !DISubroutineType(types: !12493)
!12493 = !{!1123, !1386, !1123}
!12494 = !DILocalVariable(name: "stmt", arg: 1, scope: !12491, file: !3, line: 4089, type: !1386)
!12495 = !DILocation(line: 4089, column: 28, scope: !12491)
!12496 = !DILocalVariable(name: "ssa_vn", arg: 2, scope: !12491, file: !3, line: 4089, type: !1123)
!12497 = !DILocation(line: 4089, column: 39, scope: !12491)
!12498 = !DILocalVariable(name: "bb", scope: !12491, file: !3, line: 4091, type: !1838)
!12499 = !DILocation(line: 4091, column: 15, scope: !12491)
!12500 = !DILocation(line: 4091, column: 31, scope: !12491)
!12501 = !DILocation(line: 4091, column: 20, scope: !12491)
!12502 = !DILocalVariable(name: "gsi", scope: !12491, file: !3, line: 4092, type: !3861)
!12503 = !DILocation(line: 4092, column: 24, scope: !12491)
!12504 = !DILocalVariable(name: "stmts", scope: !12491, file: !3, line: 4093, type: !1376)
!12505 = !DILocation(line: 4093, column: 14, scope: !12491)
!12506 = !DILocalVariable(name: "expr", scope: !12491, file: !3, line: 4094, type: !1123)
!12507 = !DILocation(line: 4094, column: 8, scope: !12491)
!12508 = !DILocalVariable(name: "e", scope: !12491, file: !3, line: 4095, type: !1112)
!12509 = !DILocation(line: 4095, column: 12, scope: !12491)
!12510 = !DILocation(line: 4099, column: 47, scope: !12491)
!12511 = !DILocation(line: 4099, column: 30, scope: !12491)
!12512 = !DILocation(line: 4099, column: 7, scope: !12491)
!12513 = !DILocation(line: 4099, column: 5, scope: !12491)
!12514 = !DILocation(line: 4100, column: 7, scope: !12515)
!12515 = distinct !DILexicalBlock(scope: !12491, file: !3, line: 4100, column: 7)
!12516 = !DILocation(line: 4100, column: 9, scope: !12515)
!12517 = !DILocation(line: 4100, column: 7, scope: !12491)
!12518 = !DILocation(line: 4101, column: 5, scope: !12515)
!12519 = !DILocation(line: 4105, column: 39, scope: !12491)
!12520 = !DILocation(line: 4105, column: 43, scope: !12491)
!12521 = !DILocation(line: 4105, column: 54, scope: !12491)
!12522 = !DILocation(line: 4105, column: 10, scope: !12491)
!12523 = !DILocation(line: 4105, column: 8, scope: !12491)
!12524 = !DILocation(line: 4106, column: 7, scope: !12525)
!12525 = distinct !DILexicalBlock(scope: !12491, file: !3, line: 4106, column: 7)
!12526 = !DILocation(line: 4106, column: 12, scope: !12525)
!12527 = !DILocation(line: 4106, column: 7, scope: !12491)
!12528 = !DILocation(line: 4107, column: 5, scope: !12525)
!12529 = !DILocation(line: 4108, column: 23, scope: !12491)
!12530 = !DILocation(line: 4108, column: 9, scope: !12491)
!12531 = !DILocation(line: 4109, column: 32, scope: !12491)
!12532 = !DILocation(line: 4109, column: 3, scope: !12491)
!12533 = !DILocation(line: 4111, column: 10, scope: !12491)
!12534 = !DILocation(line: 4111, column: 3, scope: !12491)
!12535 = !DILocation(line: 4112, column: 1, scope: !12491)
!12536 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !608, file: !608, line: 1694, type: !5759, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12537 = !DILocalVariable(name: "gs", arg: 1, scope: !12536, file: !608, line: 1694, type: !5454)
!12538 = !DILocation(line: 1694, column: 33, scope: !12536)
!12539 = !DILocation(line: 1697, column: 21, scope: !12536)
!12540 = !DILocation(line: 1697, column: 10, scope: !12536)
!12541 = !DILocation(line: 1697, column: 3, scope: !12536)
!12542 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !608, file: !608, line: 2241, type: !5759, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12543 = !DILocalVariable(name: "gs", arg: 1, scope: !12542, file: !608, line: 2241, type: !5454)
!12544 = !DILocation(line: 2241, column: 31, scope: !12542)
!12545 = !DILocation(line: 2244, column: 21, scope: !12542)
!12546 = !DILocation(line: 2244, column: 10, scope: !12542)
!12547 = !DILocation(line: 2244, column: 3, scope: !12542)
!12548 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !608, file: !608, line: 2271, type: !5759, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12549 = !DILocalVariable(name: "gs", arg: 1, scope: !12548, file: !608, line: 2271, type: !5454)
!12550 = !DILocation(line: 2271, column: 31, scope: !12548)
!12551 = !DILocation(line: 2274, column: 21, scope: !12548)
!12552 = !DILocation(line: 2274, column: 10, scope: !12548)
!12553 = !DILocation(line: 2274, column: 3, scope: !12548)
!12554 = distinct !DISubprogram(name: "gimple_cond_code", scope: !608, file: !608, line: 2221, type: !6597, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12555 = !DILocalVariable(name: "gs", arg: 1, scope: !12554, file: !608, line: 2221, type: !5454)
!12556 = !DILocation(line: 2221, column: 32, scope: !12554)
!12557 = !DILocation(line: 2224, column: 27, scope: !12554)
!12558 = !DILocation(line: 2224, column: 31, scope: !12554)
!12559 = !DILocation(line: 2224, column: 38, scope: !12554)
!12560 = !DILocation(line: 2224, column: 3, scope: !12554)
!12561 = distinct !DISubprogram(name: "gimple_cond_make_false", scope: !608, file: !608, line: 2346, type: !12450, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12562 = !DILocalVariable(name: "gs", arg: 1, scope: !12561, file: !608, line: 2346, type: !1386)
!12563 = !DILocation(line: 2346, column: 32, scope: !12561)
!12564 = !DILocation(line: 2348, column: 24, scope: !12561)
!12565 = !DILocation(line: 2348, column: 28, scope: !12561)
!12566 = !DILocation(line: 2348, column: 3, scope: !12561)
!12567 = !DILocation(line: 2349, column: 24, scope: !12561)
!12568 = !DILocation(line: 2349, column: 28, scope: !12561)
!12569 = !DILocation(line: 2349, column: 3, scope: !12561)
!12570 = !DILocation(line: 2350, column: 3, scope: !12561)
!12571 = !DILocation(line: 2350, column: 7, scope: !12561)
!12572 = !DILocation(line: 2350, column: 14, scope: !12561)
!12573 = !DILocation(line: 2350, column: 22, scope: !12561)
!12574 = !DILocation(line: 2351, column: 1, scope: !12561)
!12575 = distinct !DISubprogram(name: "gimple_cond_make_true", scope: !608, file: !608, line: 2357, type: !12450, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12576 = !DILocalVariable(name: "gs", arg: 1, scope: !12575, file: !608, line: 2357, type: !1386)
!12577 = !DILocation(line: 2357, column: 31, scope: !12575)
!12578 = !DILocation(line: 2359, column: 24, scope: !12575)
!12579 = !DILocation(line: 2359, column: 28, scope: !12575)
!12580 = !DILocation(line: 2359, column: 3, scope: !12575)
!12581 = !DILocation(line: 2360, column: 24, scope: !12575)
!12582 = !DILocation(line: 2360, column: 28, scope: !12575)
!12583 = !DILocation(line: 2360, column: 3, scope: !12575)
!12584 = !DILocation(line: 2361, column: 3, scope: !12575)
!12585 = !DILocation(line: 2361, column: 7, scope: !12575)
!12586 = !DILocation(line: 2361, column: 14, scope: !12575)
!12587 = !DILocation(line: 2361, column: 22, scope: !12575)
!12588 = !DILocation(line: 2362, column: 1, scope: !12575)
!12589 = distinct !DISubprogram(name: "gimple_call_set_fn", scope: !608, file: !608, line: 1932, type: !12006, scopeLine: 1933, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12590 = !DILocalVariable(name: "gs", arg: 1, scope: !12589, file: !608, line: 1932, type: !1386)
!12591 = !DILocation(line: 1932, column: 28, scope: !12589)
!12592 = !DILocalVariable(name: "fn", arg: 2, scope: !12589, file: !608, line: 1932, type: !1123)
!12593 = !DILocation(line: 1932, column: 37, scope: !12589)
!12594 = !DILocation(line: 1935, column: 18, scope: !12589)
!12595 = !DILocation(line: 1935, column: 25, scope: !12589)
!12596 = !DILocation(line: 1935, column: 3, scope: !12589)
!12597 = !DILocation(line: 1936, column: 1, scope: !12589)
!12598 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !608, file: !608, line: 3080, type: !6737, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12599 = !DILocalVariable(name: "gs", arg: 1, scope: !12598, file: !608, line: 3080, type: !1386)
!12600 = !DILocation(line: 3080, column: 31, scope: !12598)
!12601 = !DILocation(line: 3083, column: 11, scope: !12598)
!12602 = !DILocation(line: 3083, column: 15, scope: !12598)
!12603 = !DILocation(line: 3083, column: 26, scope: !12598)
!12604 = !DILocation(line: 3083, column: 3, scope: !12598)
!12605 = distinct !DISubprogram(name: "gsi_after_labels", scope: !608, file: !608, line: 4510, type: !6445, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12606 = !DILocalVariable(name: "bb", arg: 1, scope: !12605, file: !608, line: 4510, type: !1838)
!12607 = !DILocation(line: 4510, column: 31, scope: !12605)
!12608 = !DILocalVariable(name: "gsi", scope: !12605, file: !608, line: 4512, type: !3861)
!12609 = !DILocation(line: 4512, column: 24, scope: !12605)
!12610 = !DILocation(line: 4512, column: 44, scope: !12605)
!12611 = !DILocation(line: 4512, column: 30, scope: !12605)
!12612 = !DILocation(line: 4514, column: 3, scope: !12605)
!12613 = !DILocation(line: 4514, column: 11, scope: !12605)
!12614 = !DILocation(line: 4514, column: 27, scope: !12605)
!12615 = !DILocation(line: 4514, column: 43, scope: !12605)
!12616 = !DILocation(line: 4514, column: 30, scope: !12605)
!12617 = !DILocation(line: 4514, column: 59, scope: !12605)
!12618 = !DILocation(line: 0, scope: !12605)
!12619 = !DILocation(line: 4515, column: 5, scope: !12605)
!12620 = distinct !{!12620, !12612, !12621}
!12621 = !DILocation(line: 4515, column: 19, scope: !12605)
!12622 = !DILocation(line: 4517, column: 3, scope: !12605)
!12623 = distinct !DISubprogram(name: "single_imm_use", scope: !5481, file: !5481, line: 373, type: !12624, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12624 = !DISubroutineType(types: !12625)
!12625 = !{!1236, !6217, !12626, !5413}
!12626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2534, size: 64)
!12627 = !DILocalVariable(name: "var", arg: 1, scope: !12623, file: !5481, line: 373, type: !6217)
!12628 = !DILocation(line: 373, column: 28, scope: !12623)
!12629 = !DILocalVariable(name: "use_p", arg: 2, scope: !12623, file: !5481, line: 373, type: !12626)
!12630 = !DILocation(line: 373, column: 48, scope: !12623)
!12631 = !DILocalVariable(name: "stmt", arg: 3, scope: !12623, file: !5481, line: 373, type: !5413)
!12632 = !DILocation(line: 373, column: 63, scope: !12623)
!12633 = !DILocalVariable(name: "ptr", scope: !12623, file: !5481, line: 375, type: !6223)
!12634 = !DILocation(line: 375, column: 34, scope: !12623)
!12635 = !DILocation(line: 375, column: 42, scope: !12623)
!12636 = !DILocation(line: 378, column: 7, scope: !12637)
!12637 = distinct !DILexicalBlock(scope: !12623, file: !5481, line: 378, column: 7)
!12638 = !DILocation(line: 378, column: 14, scope: !12637)
!12639 = !DILocation(line: 378, column: 19, scope: !12637)
!12640 = !DILocation(line: 378, column: 11, scope: !12637)
!12641 = !DILocation(line: 378, column: 7, scope: !12623)
!12642 = !DILocation(line: 379, column: 5, scope: !12637)
!12643 = !DILabel(scope: !12644, name: "return_false", file: !5481, line: 380)
!12644 = distinct !DILexicalBlock(scope: !12637, file: !5481, line: 379, column: 5)
!12645 = !DILocation(line: 380, column: 5, scope: !12644)
!12646 = !DILocation(line: 381, column: 8, scope: !12644)
!12647 = !DILocation(line: 381, column: 14, scope: !12644)
!12648 = !DILocation(line: 382, column: 8, scope: !12644)
!12649 = !DILocation(line: 382, column: 13, scope: !12644)
!12650 = !DILocation(line: 383, column: 7, scope: !12644)
!12651 = !DILocation(line: 387, column: 7, scope: !12652)
!12652 = distinct !DILexicalBlock(scope: !12623, file: !5481, line: 387, column: 7)
!12653 = !DILocation(line: 387, column: 14, scope: !12652)
!12654 = !DILocation(line: 387, column: 19, scope: !12652)
!12655 = !DILocation(line: 387, column: 25, scope: !12652)
!12656 = !DILocation(line: 387, column: 11, scope: !12652)
!12657 = !DILocation(line: 387, column: 7, scope: !12623)
!12658 = !DILocation(line: 389, column: 29, scope: !12659)
!12659 = distinct !DILexicalBlock(scope: !12660, file: !5481, line: 389, column: 11)
!12660 = distinct !DILexicalBlock(scope: !12652, file: !5481, line: 388, column: 5)
!12661 = !DILocation(line: 389, column: 12, scope: !12659)
!12662 = !DILocation(line: 389, column: 11, scope: !12660)
!12663 = !DILocation(line: 391, column: 13, scope: !12664)
!12664 = distinct !DILexicalBlock(scope: !12659, file: !5481, line: 390, column: 2)
!12665 = !DILocation(line: 391, column: 18, scope: !12664)
!12666 = !DILocation(line: 391, column: 5, scope: !12664)
!12667 = !DILocation(line: 391, column: 11, scope: !12664)
!12668 = !DILocation(line: 392, column: 12, scope: !12664)
!12669 = !DILocation(line: 392, column: 17, scope: !12664)
!12670 = !DILocation(line: 392, column: 23, scope: !12664)
!12671 = !DILocation(line: 392, column: 27, scope: !12664)
!12672 = !DILocation(line: 392, column: 5, scope: !12664)
!12673 = !DILocation(line: 392, column: 10, scope: !12664)
!12674 = !DILocation(line: 393, column: 4, scope: !12664)
!12675 = !DILocation(line: 396, column: 2, scope: !12659)
!12676 = !DILocation(line: 400, column: 8, scope: !12677)
!12677 = distinct !DILexicalBlock(scope: !12623, file: !5481, line: 400, column: 7)
!12678 = !DILocation(line: 400, column: 7, scope: !12623)
!12679 = !DILocation(line: 401, column: 5, scope: !12677)
!12680 = !DILocation(line: 403, column: 28, scope: !12623)
!12681 = !DILocation(line: 403, column: 33, scope: !12623)
!12682 = !DILocation(line: 403, column: 40, scope: !12623)
!12683 = !DILocation(line: 403, column: 10, scope: !12623)
!12684 = !DILocation(line: 403, column: 3, scope: !12623)
!12685 = !DILocation(line: 404, column: 1, scope: !12623)
!12686 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !5481, file: !5481, line: 233, type: !12687, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12687 = !DISubroutineType(types: !12688)
!12688 = !{null, !2534, !1123}
!12689 = !DILocalVariable(name: "use", arg: 1, scope: !12686, file: !5481, line: 233, type: !2534)
!12690 = !DILocation(line: 233, column: 37, scope: !12686)
!12691 = !DILocalVariable(name: "val", arg: 2, scope: !12686, file: !5481, line: 233, type: !1123)
!12692 = !DILocation(line: 233, column: 47, scope: !12686)
!12693 = !DILocation(line: 235, column: 19, scope: !12686)
!12694 = !DILocation(line: 235, column: 3, scope: !12686)
!12695 = !DILocation(line: 236, column: 17, scope: !12686)
!12696 = !DILocation(line: 236, column: 5, scope: !12686)
!12697 = !DILocation(line: 236, column: 10, scope: !12686)
!12698 = !DILocation(line: 236, column: 15, scope: !12686)
!12699 = !DILocation(line: 237, column: 17, scope: !12686)
!12700 = !DILocation(line: 237, column: 22, scope: !12686)
!12701 = !DILocation(line: 237, column: 3, scope: !12686)
!12702 = !DILocation(line: 238, column: 1, scope: !12686)
!12703 = distinct !DISubprogram(name: "is_gimple_assign", scope: !608, file: !608, line: 1677, type: !5637, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12704 = !DILocalVariable(name: "gs", arg: 1, scope: !12703, file: !608, line: 1677, type: !5454)
!12705 = !DILocation(line: 1677, column: 32, scope: !12703)
!12706 = !DILocation(line: 1679, column: 23, scope: !12703)
!12707 = !DILocation(line: 1679, column: 10, scope: !12703)
!12708 = !DILocation(line: 1679, column: 27, scope: !12703)
!12709 = !DILocation(line: 1679, column: 3, scope: !12703)
!12710 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !608, file: !608, line: 1878, type: !5759, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12711 = !DILocalVariable(name: "gs", arg: 1, scope: !12710, file: !608, line: 1878, type: !5454)
!12712 = !DILocation(line: 1878, column: 31, scope: !12710)
!12713 = !DILocation(line: 1881, column: 21, scope: !12710)
!12714 = !DILocation(line: 1881, column: 10, scope: !12710)
!12715 = !DILocation(line: 1881, column: 3, scope: !12710)
!12716 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !608, file: !608, line: 2261, type: !12006, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12717 = !DILocalVariable(name: "gs", arg: 1, scope: !12716, file: !608, line: 2261, type: !1386)
!12718 = !DILocation(line: 2261, column: 29, scope: !12716)
!12719 = !DILocalVariable(name: "lhs", arg: 2, scope: !12716, file: !608, line: 2261, type: !1123)
!12720 = !DILocation(line: 2261, column: 38, scope: !12716)
!12721 = !DILocation(line: 2264, column: 18, scope: !12716)
!12722 = !DILocation(line: 2264, column: 25, scope: !12716)
!12723 = !DILocation(line: 2264, column: 3, scope: !12716)
!12724 = !DILocation(line: 2265, column: 1, scope: !12716)
!12725 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !608, file: !608, line: 2292, type: !12006, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12726 = !DILocalVariable(name: "gs", arg: 1, scope: !12725, file: !608, line: 2292, type: !1386)
!12727 = !DILocation(line: 2292, column: 29, scope: !12725)
!12728 = !DILocalVariable(name: "rhs", arg: 2, scope: !12725, file: !608, line: 2292, type: !1123)
!12729 = !DILocation(line: 2292, column: 38, scope: !12725)
!12730 = !DILocation(line: 2295, column: 18, scope: !12725)
!12731 = !DILocation(line: 2295, column: 25, scope: !12725)
!12732 = !DILocation(line: 2295, column: 3, scope: !12725)
!12733 = !DILocation(line: 2296, column: 1, scope: !12725)
!12734 = distinct !DISubprogram(name: "is_gimple_debug", scope: !608, file: !608, line: 3249, type: !5637, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12735 = !DILocalVariable(name: "gs", arg: 1, scope: !12734, file: !608, line: 3249, type: !5454)
!12736 = !DILocation(line: 3249, column: 31, scope: !12734)
!12737 = !DILocation(line: 3251, column: 23, scope: !12734)
!12738 = !DILocation(line: 3251, column: 10, scope: !12734)
!12739 = !DILocation(line: 3251, column: 27, scope: !12734)
!12740 = !DILocation(line: 3251, column: 3, scope: !12734)
!12741 = distinct !DISubprogram(name: "delink_imm_use", scope: !5481, file: !5481, line: 188, type: !12742, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12742 = !DISubroutineType(types: !12743)
!12743 = !{null, !2535}
!12744 = !DILocalVariable(name: "linknode", arg: 1, scope: !12741, file: !5481, line: 188, type: !2535)
!12745 = !DILocation(line: 188, column: 36, scope: !12741)
!12746 = !DILocation(line: 191, column: 7, scope: !12747)
!12747 = distinct !DILexicalBlock(scope: !12741, file: !5481, line: 191, column: 7)
!12748 = !DILocation(line: 191, column: 17, scope: !12747)
!12749 = !DILocation(line: 191, column: 22, scope: !12747)
!12750 = !DILocation(line: 191, column: 7, scope: !12741)
!12751 = !DILocation(line: 192, column: 5, scope: !12747)
!12752 = !DILocation(line: 194, column: 26, scope: !12741)
!12753 = !DILocation(line: 194, column: 36, scope: !12741)
!12754 = !DILocation(line: 194, column: 3, scope: !12741)
!12755 = !DILocation(line: 194, column: 13, scope: !12741)
!12756 = !DILocation(line: 194, column: 19, scope: !12741)
!12757 = !DILocation(line: 194, column: 24, scope: !12741)
!12758 = !DILocation(line: 195, column: 26, scope: !12741)
!12759 = !DILocation(line: 195, column: 36, scope: !12741)
!12760 = !DILocation(line: 195, column: 3, scope: !12741)
!12761 = !DILocation(line: 195, column: 13, scope: !12741)
!12762 = !DILocation(line: 195, column: 19, scope: !12741)
!12763 = !DILocation(line: 195, column: 24, scope: !12741)
!12764 = !DILocation(line: 196, column: 3, scope: !12741)
!12765 = !DILocation(line: 196, column: 13, scope: !12741)
!12766 = !DILocation(line: 196, column: 18, scope: !12741)
!12767 = !DILocation(line: 197, column: 3, scope: !12741)
!12768 = !DILocation(line: 197, column: 13, scope: !12741)
!12769 = !DILocation(line: 197, column: 18, scope: !12741)
!12770 = !DILocation(line: 198, column: 1, scope: !12741)
!12771 = distinct !DISubprogram(name: "link_imm_use", scope: !5481, file: !5481, line: 214, type: !12772, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12772 = !DISubroutineType(types: !12773)
!12773 = !{null, !2535, !1123}
!12774 = !DILocalVariable(name: "linknode", arg: 1, scope: !12771, file: !5481, line: 214, type: !2535)
!12775 = !DILocation(line: 214, column: 34, scope: !12771)
!12776 = !DILocalVariable(name: "def", arg: 2, scope: !12771, file: !5481, line: 214, type: !1123)
!12777 = !DILocation(line: 214, column: 49, scope: !12771)
!12778 = !DILocalVariable(name: "root", scope: !12771, file: !5481, line: 216, type: !2535)
!12779 = !DILocation(line: 216, column: 22, scope: !12771)
!12780 = !DILocation(line: 218, column: 8, scope: !12781)
!12781 = distinct !DILexicalBlock(scope: !12771, file: !5481, line: 218, column: 7)
!12782 = !DILocation(line: 218, column: 12, scope: !12781)
!12783 = !DILocation(line: 218, column: 15, scope: !12781)
!12784 = !DILocation(line: 218, column: 31, scope: !12781)
!12785 = !DILocation(line: 218, column: 7, scope: !12771)
!12786 = !DILocation(line: 219, column: 5, scope: !12781)
!12787 = !DILocation(line: 219, column: 15, scope: !12781)
!12788 = !DILocation(line: 219, column: 20, scope: !12781)
!12789 = !DILocation(line: 222, column: 16, scope: !12790)
!12790 = distinct !DILexicalBlock(scope: !12781, file: !5481, line: 221, column: 5)
!12791 = !DILocation(line: 222, column: 12, scope: !12790)
!12792 = !DILocation(line: 227, column: 29, scope: !12790)
!12793 = !DILocation(line: 227, column: 39, scope: !12790)
!12794 = !DILocation(line: 227, column: 7, scope: !12790)
!12795 = !DILocation(line: 229, column: 1, scope: !12771)
!12796 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5481, file: !5481, line: 202, type: !12797, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12797 = !DISubroutineType(types: !12798)
!12798 = !{null, !2535, !2535}
!12799 = !DILocalVariable(name: "linknode", arg: 1, scope: !12796, file: !5481, line: 202, type: !2535)
!12800 = !DILocation(line: 202, column: 42, scope: !12796)
!12801 = !DILocalVariable(name: "list", arg: 2, scope: !12796, file: !5481, line: 202, type: !2535)
!12802 = !DILocation(line: 202, column: 71, scope: !12796)
!12803 = !DILocation(line: 206, column: 20, scope: !12796)
!12804 = !DILocation(line: 206, column: 3, scope: !12796)
!12805 = !DILocation(line: 206, column: 13, scope: !12796)
!12806 = !DILocation(line: 206, column: 18, scope: !12796)
!12807 = !DILocation(line: 207, column: 20, scope: !12796)
!12808 = !DILocation(line: 207, column: 26, scope: !12796)
!12809 = !DILocation(line: 207, column: 3, scope: !12796)
!12810 = !DILocation(line: 207, column: 13, scope: !12796)
!12811 = !DILocation(line: 207, column: 18, scope: !12796)
!12812 = !DILocation(line: 208, column: 22, scope: !12796)
!12813 = !DILocation(line: 208, column: 3, scope: !12796)
!12814 = !DILocation(line: 208, column: 9, scope: !12796)
!12815 = !DILocation(line: 208, column: 15, scope: !12796)
!12816 = !DILocation(line: 208, column: 20, scope: !12796)
!12817 = !DILocation(line: 209, column: 16, scope: !12796)
!12818 = !DILocation(line: 209, column: 3, scope: !12796)
!12819 = !DILocation(line: 209, column: 9, scope: !12796)
!12820 = !DILocation(line: 209, column: 14, scope: !12796)
!12821 = !DILocation(line: 210, column: 1, scope: !12796)
!12822 = distinct !DISubprogram(name: "VEC_bitmap_set_t_heap_free", scope: !3, file: !3, line: 378, type: !12823, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12823 = !DISubroutineType(types: !12824)
!12824 = !{null, !2740}
!12825 = !DILocalVariable(name: "vec_", arg: 1, scope: !12822, file: !3, line: 378, type: !2740)
!12826 = !DILocation(line: 378, column: 1, scope: !12822)
!12827 = !DILocation(line: 378, column: 1, scope: !12828)
!12828 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 378, column: 1)
!12829 = distinct !DISubprogram(name: "VEC_unsigned_heap_free", scope: !2473, file: !2473, line: 35, type: !12830, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2656)
!12830 = !DISubroutineType(types: !12831)
!12831 = !{null, !3313}
!12832 = !DILocalVariable(name: "vec_", arg: 1, scope: !12829, file: !2473, line: 35, type: !3313)
!12833 = !DILocation(line: 35, column: 1, scope: !12829)
!12834 = !DILocation(line: 35, column: 1, scope: !12835)
!12835 = distinct !DILexicalBlock(scope: !12829, file: !2473, line: 35, column: 1)
