; ModuleID = 'blender/source/blender/editors/space_sequencer/sequencer_edit.c'
source_filename = "blender/source/blender/editors/space_sequencer/sequencer_edit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.EnumPropertyItem = type { i32, i8*, i32, i8*, i8* }
%struct.Global = type { %struct.Main*, [1024 x i8], [1024 x i8], i8, i8, i8, %struct.ListBase, i8, i8, i8, i16, i16, i16, i8, i16, i32, i32, i8, i32, i32, [200 x i8] }
%struct.Main = type { %struct.Main*, %struct.Main*, [1024 x i8], i16, i16, i16, i16, i64, [16 x i8], i16, %struct.Library*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, [256 x i8], %struct.EvaluationContext*, %struct.MainLock* }
%struct.Library = type { %struct.ID, %struct.ID*, %struct.FileData*, [1024 x i8], [1024 x i8], %struct.Library*, %struct.PackedFile* }
%struct.ID = type { i8*, i8*, %struct.ID*, %struct.Library*, [66 x i8], i16, i32, i32, i32, %struct.IDProperty* }
%struct.IDProperty = type { %struct.IDProperty*, %struct.IDProperty*, i8, i8, i16, [64 x i8], i32, %struct.IDPropertyData, i32, i32 }
%struct.IDPropertyData = type { i8*, %struct.ListBase, i32, i32 }
%struct.FileData = type opaque
%struct.PackedFile = type opaque
%struct.EvaluationContext = type opaque
%struct.MainLock = type opaque
%struct.ListBase = type { i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.StructRNA = type opaque
%struct.Sequence = type { %struct.Sequence*, %struct.Sequence*, i8*, i8*, [64 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, i16, i16, i32, i32, %struct.Strip*, %struct.Ipo*, %struct.Scene*, %struct.Object*, %struct.MovieClip*, %struct.Mask*, %struct.anim*, float, float, %struct.Sequence*, %struct.Sequence*, %struct.Sequence*, %struct.ListBase, %struct.bSound*, i8*, float, float, float, float, i8*, i32, i32, i32, float, i32, i8, [3 x i8], %struct.ListBase }
%struct.Strip = type { %struct.Strip*, %struct.Strip*, i32, i32, i32, i32, %struct.StripElem*, [768 x i8], %struct.StripProxy*, %struct.StripCrop*, %struct.StripTransform*, %struct.StripColorBalance*, %struct.ColorManagedColorspaceSettings }
%struct.StripElem = type { [256 x i8], i32, i32 }
%struct.StripProxy = type { [768 x i8], [256 x i8], %struct.anim*, i16, i16, i16, i16 }
%struct.StripCrop = type { i32, i32, i32, i32 }
%struct.StripTransform = type { i32, i32 }
%struct.StripColorBalance = type { [3 x float], [3 x float], [3 x float], i32, i32 }
%struct.ColorManagedColorspaceSettings = type { [64 x i8] }
%struct.Ipo = type opaque
%struct.Scene = type { %struct.ID, %struct.AnimData*, %struct.Object*, %struct.World*, %struct.Scene*, %struct.ListBase, %struct.Base*, %struct.Object*, [3 x float], [3 x float], [3 x float], [3 x float], i32, i32, i32, i16, i8, [1 x i8], %struct.bNodeTree*, %struct.Editing*, %struct.ToolSettings*, %struct.SceneStats*, %struct.RenderData, %struct.AudioData, %struct.ListBase, %struct.ListBase, i8*, i8*, i8*, i8*, i8*, %struct.DagForest*, i16, i16, i32, %struct.ListBase, %struct.GameFraming, %struct.GameData, %struct.UnitSettings, %struct.bGPdata*, %struct.PhysicsSettings, %struct.MovieClip*, i64, i64, %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings, %struct.ColorManagedColorspaceSettings, %struct.RigidBodyWorld* }
%struct.AnimData = type opaque
%struct.World = type opaque
%struct.Base = type { %struct.Base*, %struct.Base*, i32, i32, i32, i16, i16, %struct.Object* }
%struct.bNodeTree = type { %struct.ID, %struct.AnimData*, %struct.bNodeTreeType*, [64 x i8], %struct.StructRNA*, %struct.bGPdata*, [2 x float], %struct.ListBase, %struct.ListBase, i32, i32, i32, i32, i32, i16, i16, i32, i32, i16, i16, i32, %struct.rctf, %struct.ListBase, %struct.ListBase, %struct.bNodeInstanceHash*, %struct.bNodeInstanceKey, i32, %struct.bNodeTreeExec*, void (i8*, float)*, void (i8*, i8*)*, i32 (i8*)*, void (i8*)*, i8*, i8*, i8*, i8* }
%struct.bNodeTreeType = type opaque
%struct.rctf = type { float, float, float, float }
%struct.bNodeInstanceHash = type opaque
%struct.bNodeInstanceKey = type { i32 }
%struct.bNodeTreeExec = type opaque
%struct.Editing = type { %struct.ListBase*, %struct.ListBase, %struct.ListBase, %struct.Sequence*, [1024 x i8], [1024 x i8], i32, i32, i32, i32, %struct.rctf }
%struct.ToolSettings = type { %struct.VPaint*, %struct.VPaint*, %struct.Sculpt*, %struct.UvSculpt*, float, float, float, i16, i16, i8, i8, i8, i8, float, i16, i8, [5 x i8], %struct.ImagePaintSettings, %struct.ParticleEditSettings, float, float, i16, i16, i8, [1 x i8], i16, float, float, float, float, float, float, float, float, float, float, i16, i8, i8, [3 x i8], i8, %struct.Object*, i8, i8, i8, i8, i8, [8 x i8], [8 x i8], i8, i8, i8, i8, i8, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i16, i16, i32, float, float, %struct.UnifiedPaintSettings, %struct.MeshStatVis }
%struct.VPaint = type { %struct.Paint, i16, i16, i32, i32*, %struct.MDeformVert*, i8* }
%struct.Paint = type { %struct.Brush*, %struct.Palette*, i8*, [4 x i8], i32, i32, i32 }
%struct.Brush = type opaque
%struct.Palette = type opaque
%struct.MDeformVert = type opaque
%struct.Sculpt = type { %struct.Paint, i32, [3 x i32], float, i32, float, float, %struct.Object*, i8* }
%struct.UvSculpt = type { %struct.Paint }
%struct.ImagePaintSettings = type { %struct.Paint, i16, i16, i16, i16, [2 x i16], i32, i8*, %struct.Image*, %struct.Image*, %struct.Image*, [3 x float], float }
%struct.Image = type { %struct.ID, [1024 x i8], %struct.MovieCache*, %struct.GPUTexture*, %struct.anim*, %struct.RenderResult*, [8 x %struct.RenderResult*], i16, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i32, i32*, %struct.PackedFile*, %struct.PreviewImage*, float, i32, i16, i16, i32, i32, i8, i8, i16, [4 x float], float, float, %struct.ColorManagedColorspaceSettings, i8, [7 x i8], [8 x %struct.RenderSlot] }
%struct.MovieCache = type opaque
%struct.GPUTexture = type opaque
%struct.RenderResult = type opaque
%struct.PreviewImage = type { [2 x i32], [2 x i32], [2 x i16], [2 x i16], [2 x i32*], [2 x %struct.GPUTexture*] }
%struct.RenderSlot = type { [64 x i8] }
%struct.ParticleEditSettings = type { i16, i16, i16, i16, [7 x %struct.ParticleBrushData], i8*, float, float, i32, i32, i32, i32, %struct.Scene*, %struct.Object* }
%struct.ParticleBrushData = type { i16, i16, i16, i16, i32, float }
%struct.UnifiedPaintSettings = type { i32, float, float, float, [3 x float], [3 x float], i32, [2 x float], float, i32, i32, i8, [7 x i8], float, [2 x float], i32, float, [2 x float], [2 x float], i32, %struct.ColorSpace*, float, i32 }
%struct.ColorSpace = type opaque
%struct.MeshStatVis = type { i8, [2 x i8], i8, float, float, float, float, i8, [3 x i8], float, float, float, float }
%struct.SceneStats = type opaque
%struct.RenderData = type { %struct.ImageFormatData, %struct.AviCodecData*, %struct.QuicktimeCodecData*, %struct.QuicktimeCodecSettings, %struct.FFMpegCodecData, i32, i32, i32, float, i32, i32, i32, i32, i16, i16, float, float, float, float, float, i16, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i32, i32, i16, i16, i32, i32, i16, i16, i16, i16, i16, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, %struct.rctf, %struct.rctf, %struct.rcti, %struct.ListBase, i16, i16, float, float, float, float, i32, float, float, float, float, i16, i16, i16, i16, i16, i16, float, float, i16, i16, float, float, [1024 x i8], i32, i16, i16, [768 x i8], [4 x float], [4 x float], i8, i8, i8, [5 x i8], i32, i16, i16, float, float, i16, i16, float, i16, i16, i32, i16, i16, i16, i16, float, float, %struct.Text*, i32, float, [32 x i8], %struct.BakeData, i32, i32 }
%struct.ImageFormatData = type { i8, i8, i8, i8, i8, i8, i8, i8, i16, i16, float, i8, i8, [6 x i8], %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings }
%struct.AviCodecData = type { i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [128 x i8] }
%struct.QuicktimeCodecData = type { i8*, i8*, i32, i32, [128 x i8] }
%struct.QuicktimeCodecSettings = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32 }
%struct.FFMpegCodecData = type { i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, %struct.IDProperty* }
%struct.rcti = type { i32, i32, i32, i32 }
%struct.Text = type opaque
%struct.BakeData = type { %struct.ImageFormatData, [1024 x i8], i16, i16, i16, i16, float, float, [3 x i8], i8, i8, [3 x i8], [64 x i8] }
%struct.AudioData = type { i32, float, float, float, i32, i16, i16, float, float }
%struct.DagForest = type opaque
%struct.GameFraming = type { [3 x float], i8, i8, i8, i8 }
%struct.GameData = type { %struct.GameFraming, i16, i16, i16, i16, i16, i16, i16, i16, i16, [3 x i16], %struct.GameDome, i16, i16, float, %struct.RecastData, float, float, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, float, float, float, float, float }
%struct.GameDome = type { i16, i16, i16, i16, float, float, %struct.Text* }
%struct.RecastData = type { float, float, float, float, float, float, float, float, float, float, i32, float, float, i16, i16 }
%struct.UnitSettings = type { float, i8, i8, i16 }
%struct.bGPdata = type opaque
%struct.PhysicsSettings = type { [3 x float], i32, i32, i32 }
%struct.ColorManagedViewSettings = type { i32, i32, [64 x i8], [64 x i8], float, float, %struct.CurveMapping*, i8* }
%struct.CurveMapping = type { i32, i32, i32, i32, %struct.rctf, %struct.rctf, [4 x %struct.CurveMap], [3 x float], [3 x float], [3 x float], [3 x float] }
%struct.CurveMap = type { i16, i16, float, float, float, [2 x float], [2 x float], %struct.CurveMapPoint*, %struct.CurveMapPoint*, %struct.CurveMapPoint*, [2 x float], [2 x float] }
%struct.CurveMapPoint = type { float, float, i16, i16 }
%struct.ColorManagedDisplaySettings = type { [64 x i8] }
%struct.RigidBodyWorld = type opaque
%struct.Object = type opaque
%struct.MovieClip = type { %struct.ID, %struct.AnimData*, [1024 x i8], i32, i32, [2 x i32], float, float, %struct.anim*, %struct.MovieClipCache*, %struct.bGPdata*, %struct.MovieTracking, i8*, %struct.MovieClipProxy, i32, i32, i32, i32, %struct.ColorManagedColorspaceSettings }
%struct.MovieClipCache = type opaque
%struct.MovieTracking = type { %struct.MovieTrackingSettings, %struct.MovieTrackingCamera, %struct.ListBase, %struct.ListBase, %struct.MovieTrackingReconstruction, %struct.MovieTrackingStabilization, %struct.MovieTrackingTrack*, %struct.MovieTrackingPlaneTrack*, %struct.ListBase, i32, i32, %struct.MovieTrackingStats*, %struct.MovieTrackingDopesheet }
%struct.MovieTrackingSettings = type { i32, i16, i16, float, i16, i16, i16, i16, i16, i16, float, i16, i16, i32, i32, i32, i16, i16, float, i32, i32, float, float, i32 }
%struct.MovieTrackingCamera = type { i8*, i16, i16, float, float, float, i16, i16, [2 x float], float, float, float, float, float }
%struct.MovieTrackingReconstruction = type { i32, float, i32, i32, %struct.MovieReconstructedCamera* }
%struct.MovieReconstructedCamera = type { i32, float, [4 x [4 x float]] }
%struct.MovieTrackingStabilization = type { i32, i32, i32, float, %struct.MovieTrackingTrack*, float, float, float, i32, i32, float }
%struct.MovieTrackingTrack = type { %struct.MovieTrackingTrack*, %struct.MovieTrackingTrack*, [64 x i8], [2 x float], [2 x float], [2 x float], [2 x float], [2 x float], i32, i32, %struct.MovieTrackingMarker*, [3 x float], float, i32, i32, i32, [3 x float], i16, i16, i16, i16, i32, float, %struct.bGPdata*, float, float }
%struct.MovieTrackingMarker = type { [2 x float], [4 x [2 x float]], [2 x float], [2 x float], i32, i32 }
%struct.MovieTrackingPlaneTrack = type { %struct.MovieTrackingPlaneTrack*, %struct.MovieTrackingPlaneTrack*, [64 x i8], %struct.MovieTrackingTrack**, i32, i32, %struct.MovieTrackingPlaneMarker*, i32, i32, %struct.Image*, float, i32 }
%struct.MovieTrackingPlaneMarker = type { [4 x [2 x float]], i32, i32 }
%struct.MovieTrackingStats = type { [256 x i8] }
%struct.MovieTrackingDopesheet = type { i32, i16, i16, %struct.ListBase, %struct.ListBase, i32, i32 }
%struct.MovieClipProxy = type { [768 x i8], i16, i16, i16, i16 }
%struct.Mask = type opaque
%struct.anim = type opaque
%struct.bSound = type opaque
%struct.View2D = type { %struct.rctf, %struct.rctf, %struct.rcti, %struct.rcti, %struct.rcti, [2 x float], [2 x float], float, float, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, float*, i32, i32, %struct.SmoothView2DStore*, %struct.wmTimer* }
%struct.SmoothView2DStore = type opaque
%struct.wmTimer = type { %struct.wmTimer*, %struct.wmTimer*, %struct.wmWindow*, double, i32, i8*, double, double, double, double, double, i32 }
%struct.wmWindow = type { %struct.wmWindow*, %struct.wmWindow*, i8*, %struct.bScreen*, %struct.bScreen*, [64 x i8], i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i32, i16, i16, %struct.wmEvent*, %struct.wmSubWindow*, %struct.wmGesture*, i32, i32, i8*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase }
%struct.bScreen = type { %struct.ID, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.Scene*, %struct.Scene*, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, %struct.wmTimer*, i8* }
%struct.wmEvent = type { %struct.wmEvent*, %struct.wmEvent*, i16, i16, i32, i32, [2 x i32], [6 x i8], i8, i8, i16, i16, i32, i32, double, i32, i32, i16, i16, i16, i16, i16, i16, i8*, %struct.wmTabletData*, i16, i16, i32, i8* }
%struct.wmTabletData = type { i32, float, float, float }
%struct.wmSubWindow = type opaque
%struct.wmGesture = type { %struct.wmGesture*, %struct.wmGesture*, i32, i32, i32, i32, i32, i32, i8*, i8* }
%struct.SeqIterator = type { %struct.Sequence**, i32, i32, %struct.Sequence*, i32 }
%struct.bContext = type opaque
%struct.SpaceSeq = type { %struct.SpaceLink*, %struct.SpaceLink*, %struct.ListBase, i32, float, [8 x i16], %struct.View2D, float, float, i16, i16, i16, i16, i32, float, i32, i32, %struct.bGPdata*, %struct.SequencerScopes }
%struct.SpaceLink = type { %struct.SpaceLink*, %struct.SpaceLink*, %struct.ListBase, i32, float, [8 x i16] }
%struct.SequencerScopes = type { %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf* }
%struct.ImBuf = type opaque
%struct.wmOperatorType = type { i8*, i8*, i8*, i8*, i32 (%struct.bContext*, %struct.wmOperator*)*, i8 (%struct.bContext*, %struct.wmOperator*)*, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)*, void (%struct.bContext*, %struct.wmOperator*)*, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)*, i32 (%struct.bContext*)*, void (%struct.bContext*, %struct.wmOperator*)*, %struct.StructRNA*, %struct.IDProperty*, %struct.PropertyRNA*, %struct.ListBase, %struct.wmKeyMap*, i8*, i32 (%struct.bContext*, %struct.wmOperatorType*)*, %struct.ExtensionRNA, i16 }
%struct.wmOperator = type { %struct.wmOperator*, %struct.wmOperator*, [64 x i8], %struct.IDProperty*, %struct.wmOperatorType*, i8*, i8*, %struct.PointerRNA*, %struct.ReportList*, %struct.ListBase, %struct.wmOperator*, %struct.uiLayout*, i16, [3 x i16] }
%struct.PointerRNA = type { %struct.anon, %struct.StructRNA*, i8* }
%struct.anon = type { i8* }
%struct.ReportList = type { %struct.ListBase, i32, i32, i32, i32, %struct.wmTimer* }
%struct.uiLayout = type opaque
%struct.PropertyRNA = type opaque
%struct.wmKeyMap = type { %struct.wmKeyMap*, %struct.wmKeyMap*, %struct.ListBase, %struct.ListBase, [64 x i8], i16, i16, i16, i16, i32 (%struct.bContext*)*, i8* }
%struct.ExtensionRNA = type { i8*, %struct.StructRNA*, i32 (%struct.bContext*, %struct.PointerRNA*, %struct.FunctionRNA*, %struct.ParameterList*)*, void (i8*)* }
%struct.FunctionRNA = type opaque
%struct.ParameterList = type { i8*, %struct.FunctionRNA*, i32, i32, i32 }
%struct.SlipData = type { [2 x i32], [2 x float], %struct.TransSeq*, %struct.Sequence**, i8*, i32, i8, i32 }
%struct.TransSeq = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.wmEventHandler = type opaque
%struct.ScrArea = type { %struct.ScrArea*, %struct.ScrArea*, %struct.ScrVert*, %struct.ScrVert*, %struct.ScrVert*, %struct.ScrVert*, %struct.bScreen*, %struct.rcti, i8, i8, i16, i16, i16, i16, i16, i16, i8, i8, %struct.SpaceType*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase }
%struct.ScrVert = type { %struct.ScrVert*, %struct.ScrVert*, %struct.ScrVert*, %struct.vec2s, i16, i16 }
%struct.vec2s = type { i16, i16 }
%struct.SpaceType = type opaque
%struct.ARegion = type { %struct.ARegion*, %struct.ARegion*, %struct.View2D, %struct.rcti, %struct.rcti, i16, i16, i16, i16, i16, i16, float, i16, i16, i16, i16, i16, i16, i16, i16, %struct.ARegionType*, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.wmTimer*, i8*, i8* }
%struct.ARegionType = type opaque
%struct.MetaStack = type { %struct.MetaStack*, %struct.MetaStack*, %struct.ListBase*, %struct.Sequence*, [2 x i32] }
%struct.SeqEffectHandle = type { i8, i8, void (%struct.Sequence*)*, i32 ()*, void (%struct.Sequence*)*, void (%struct.Sequence*, %struct.Sequence*)*, void (%struct.Sequence*)*, i32 (%struct.Sequence*, float, float)*, void (%struct.Sequence*, i16, float*, float*)*, void (%struct.Sequence*, float, float*, float*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, %struct.ImBuf* (%struct.SeqRenderData*, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*)*, void (%struct.SeqRenderData*, %struct.Sequence*, float, float, float, %struct.ImBuf*, %struct.ImBuf*, %struct.ImBuf*, i32, i32, %struct.ImBuf*)* }
%struct.SeqRenderData = type { %struct.EvaluationContext*, %struct.Main*, %struct.Scene*, i32, i32, i32, i32, float, i8, i8 }
%struct.CollectionPropertyIterator = type { %struct.PointerRNA, %struct.PointerRNA, %struct.PropertyRNA*, %union.anon, i32, i32, %struct.PointerRNA, i32 }
%union.anon = type { %struct.ArrayIterator }
%struct.ArrayIterator = type { i8*, i8*, i8*, i32, i32, i32 (%struct.CollectionPropertyIterator*, i8*)* }
%struct.SequenceModifierData = type { %struct.SequenceModifierData*, %struct.SequenceModifierData*, i32, i32, [64 x i8], i32, i32, %struct.Sequence*, %struct.Mask* }
%struct.wmJob = type opaque
%struct.ProxyBuildJob = type { %struct.Scene*, %struct.Main*, %struct.ListBase, i32 }
%struct.SeqIndexBuildContext = type opaque
%struct.LinkData = type { %struct.LinkData*, %struct.LinkData*, i8* }
%struct.wmWindowManager = type { %struct.ID, %struct.wmWindow*, %struct.wmWindow*, %struct.ListBase, i32, i16, i16, %struct.ListBase, %struct.ListBase, %struct.ReportList, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.wmKeyConfig*, %struct.wmKeyConfig*, %struct.wmKeyConfig*, %struct.ListBase, %struct.wmTimer*, i8, [7 x i8] }
%struct.wmKeyConfig = type { %struct.wmKeyConfig*, %struct.wmKeyConfig*, [64 x i8], [64 x i8], %struct.ListBase, i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"CROSS\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"Crossfade\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"Crossfade effect strip type\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"ADD\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Add\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"Add effect strip type\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"SUBTRACT\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Subtract\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"Subtract effect strip type\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"ALPHA_OVER\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"Alpha Over\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"Alpha Over effect strip type\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"ALPHA_UNDER\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"Alpha Under\00", align 1
@.str.14 = private unnamed_addr constant [30 x i8] c"Alpha Under effect strip type\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"GAMMA_CROSS\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"Gamma Cross\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"Gamma Cross effect strip type\00", align 1
@.str.18 = private unnamed_addr constant [9 x i8] c"MULTIPLY\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"Multiply\00", align 1
@.str.20 = private unnamed_addr constant [27 x i8] c"Multiply effect strip type\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"OVER_DROP\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"Alpha Over Drop\00", align 1
@.str.23 = private unnamed_addr constant [34 x i8] c"Alpha Over Drop effect strip type\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"WIPE\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"Wipe\00", align 1
@.str.26 = private unnamed_addr constant [23 x i8] c"Wipe effect strip type\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"GLOW\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"Glow\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c"Glow effect strip type\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"TRANSFORM\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1
@.str.32 = private unnamed_addr constant [28 x i8] c"Transform effect strip type\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"COLOR\00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c"Color\00", align 1
@.str.35 = private unnamed_addr constant [24 x i8] c"Color effect strip type\00", align 1
@.str.36 = private unnamed_addr constant [6 x i8] c"SPEED\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"Speed\00", align 1
@.str.38 = private unnamed_addr constant [9 x i8] c"MULTICAM\00", align 1
@.str.39 = private unnamed_addr constant [18 x i8] c"Multicam Selector\00", align 1
@.str.40 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"ADJUSTMENT\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"Adjustment Layer\00", align 1
@.str.43 = private unnamed_addr constant [14 x i8] c"GAUSSIAN_BLUR\00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c"Gaussian Blur\00", align 1
@sequencer_prop_effect_types = dso_local global [17 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 10, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 11, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 12, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.18, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.20, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 15, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.26, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 27, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 29, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.35, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.38, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 31, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 40, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem zeroinitializer], align 16, !dbg !0
@.str.45 = private unnamed_addr constant [5 x i8] c"LEFT\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Left\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"RIGHT\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"Right\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"BOTH\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"Both\00", align 1
@prop_side_types = dso_local global [4 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem zeroinitializer], align 16, !dbg !1755
@.str.51 = private unnamed_addr constant [46 x i8] c"Cannot apply effects to audio sequence strips\00", align 1
@.str.52 = private unnamed_addr constant [51 x i8] c"Cannot apply effect to more than 3 sequence strips\00", align 1
@.str.53 = private unnamed_addr constant [47 x i8] c"At least one selected sequence strip is needed\00", align 1
@.str.54 = private unnamed_addr constant [38 x i8] c"2 selected sequence strips are needed\00", align 1
@.str.55 = private unnamed_addr constant [38 x i8] c"TODO: in what cases does this happen?\00", align 1
@.str.56 = private unnamed_addr constant [12 x i8] c"Remove Gaps\00", align 1
@.str.57 = private unnamed_addr constant [24 x i8] c"SEQUENCER_OT_gap_remove\00", align 1
@.str.58 = private unnamed_addr constant [108 x i8] c"Remove gap at current frame to first strip at the right, independent of selection or locked state of strips\00", align 1
@.str.59 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.60 = private unnamed_addr constant [9 x i8] c"All Gaps\00", align 1
@.str.61 = private unnamed_addr constant [38 x i8] c"Do all gaps to right of current frame\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"Insert Gaps\00", align 1
@.str.63 = private unnamed_addr constant [24 x i8] c"SEQUENCER_OT_gap_insert\00", align 1
@.str.64 = private unnamed_addr constant [109 x i8] c"Insert gap at current frame to first strips at the right, independent of selection or locked state of strips\00", align 1
@.str.65 = private unnamed_addr constant [7 x i8] c"frames\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"Frames\00", align 1
@.str.67 = private unnamed_addr constant [37 x i8] c"Frames to insert after current strip\00", align 1
@.str.68 = private unnamed_addr constant [12 x i8] c"Snap Strips\00", align 1
@.str.69 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_snap\00", align 1
@.str.70 = private unnamed_addr constant [44 x i8] c"Frame where selected strips will be snapped\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"Frame\00", align 1
@.str.73 = private unnamed_addr constant [12 x i8] c"Trim Strips\00", align 1
@.str.74 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_slip\00", align 1
@.str.75 = private unnamed_addr constant [38 x i8] c"Trim the contents of the active strip\00", align 1
@.str.76 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.77 = private unnamed_addr constant [7 x i8] c"Offset\00", align 1
@.str.78 = private unnamed_addr constant [32 x i8] c"Offset to the data of the strip\00", align 1
@.str.79 = private unnamed_addr constant [12 x i8] c"Mute Strips\00", align 1
@.str.80 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_mute\00", align 1
@.str.81 = private unnamed_addr constant [21 x i8] c"Mute selected strips\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"unselected\00", align 1
@.str.83 = private unnamed_addr constant [11 x i8] c"Unselected\00", align 1
@.str.84 = private unnamed_addr constant [44 x i8] c"Mute unselected rather than selected strips\00", align 1
@.str.85 = private unnamed_addr constant [15 x i8] c"Un-Mute Strips\00", align 1
@.str.86 = private unnamed_addr constant [20 x i8] c"SEQUENCER_OT_unmute\00", align 1
@.str.87 = private unnamed_addr constant [47 x i8] c"Un-Mute unselected rather than selected strips\00", align 1
@.str.88 = private unnamed_addr constant [46 x i8] c"UnMute unselected rather than selected strips\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c"Lock Strips\00", align 1
@.str.90 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_lock\00", align 1
@.str.91 = private unnamed_addr constant [54 x i8] c"Lock the active strip so that it can't be transformed\00", align 1
@.str.92 = private unnamed_addr constant [14 x i8] c"UnLock Strips\00", align 1
@.str.93 = private unnamed_addr constant [20 x i8] c"SEQUENCER_OT_unlock\00", align 1
@.str.94 = private unnamed_addr constant [56 x i8] c"Unlock the active strip so that it can't be transformed\00", align 1
@.str.95 = private unnamed_addr constant [14 x i8] c"Reload Strips\00", align 1
@.str.96 = private unnamed_addr constant [20 x i8] c"SEQUENCER_OT_reload\00", align 1
@.str.97 = private unnamed_addr constant [31 x i8] c"Reload strips in the sequencer\00", align 1
@.str.98 = private unnamed_addr constant [14 x i8] c"adjust_length\00", align 1
@.str.99 = private unnamed_addr constant [14 x i8] c"Adjust Length\00", align 1
@.str.100 = private unnamed_addr constant [45 x i8] c"Adjust length of strips to their data length\00", align 1
@.str.101 = private unnamed_addr constant [18 x i8] c"Refresh Sequencer\00", align 1
@.str.102 = private unnamed_addr constant [25 x i8] c"SEQUENCER_OT_refresh_all\00", align 1
@.str.103 = private unnamed_addr constant [29 x i8] c"Refresh the sequencer editor\00", align 1
@.str.104 = private unnamed_addr constant [16 x i8] c"Reassign Inputs\00", align 1
@.str.105 = private unnamed_addr constant [29 x i8] c"SEQUENCER_OT_reassign_inputs\00", align 1
@.str.106 = private unnamed_addr constant [41 x i8] c"Reassign the inputs for the effect strip\00", align 1
@.str.107 = private unnamed_addr constant [12 x i8] c"Swap Inputs\00", align 1
@.str.108 = private unnamed_addr constant [25 x i8] c"SEQUENCER_OT_swap_inputs\00", align 1
@.str.109 = private unnamed_addr constant [47 x i8] c"Swap the first two inputs for the effect strip\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"Cut Strips\00", align 1
@.str.111 = private unnamed_addr constant [17 x i8] c"SEQUENCER_OT_cut\00", align 1
@.str.112 = private unnamed_addr constant [24 x i8] c"Cut the selected strips\00", align 1
@.str.113 = private unnamed_addr constant [40 x i8] c"Frame where selected strips will be cut\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@prop_cut_types = internal global [3 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.207, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.208, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.209, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.210, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem zeroinitializer], align 16, !dbg !1766
@.str.115 = private unnamed_addr constant [5 x i8] c"Type\00", align 1
@.str.116 = private unnamed_addr constant [47 x i8] c"The type of cut operation to perform on strips\00", align 1
@.str.117 = private unnamed_addr constant [5 x i8] c"side\00", align 1
@.str.118 = private unnamed_addr constant [5 x i8] c"Side\00", align 1
@.str.119 = private unnamed_addr constant [45 x i8] c"The side that remains selected after cutting\00", align 1
@.str.120 = private unnamed_addr constant [17 x i8] c"Duplicate Strips\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"SEQUENCER_OT_duplicate\00", align 1
@.str.122 = private unnamed_addr constant [30 x i8] c"Duplicate the selected strips\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@transform_mode_types = external dso_local global [0 x %struct.EnumPropertyItem], align 8
@.str.124 = private unnamed_addr constant [5 x i8] c"Mode\00", align 1
@.str.125 = private unnamed_addr constant [13 x i8] c"Erase Strips\00", align 1
@.str.126 = private unnamed_addr constant [20 x i8] c"SEQUENCER_OT_delete\00", align 1
@.str.127 = private unnamed_addr constant [41 x i8] c"Erase selected strips from the sequencer\00", align 1
@.str.128 = private unnamed_addr constant [19 x i8] c"Clear Strip Offset\00", align 1
@.str.129 = private unnamed_addr constant [26 x i8] c"SEQUENCER_OT_offset_clear\00", align 1
@.str.130 = private unnamed_addr constant [50 x i8] c"Clear strip offsets from the start and end frames\00", align 1
@.str.131 = private unnamed_addr constant [16 x i8] c"Separate Images\00", align 1
@.str.132 = private unnamed_addr constant [29 x i8] c"SEQUENCER_OT_images_separate\00", align 1
@.str.133 = private unnamed_addr constant [60 x i8] c"On image sequence strips, it returns a strip for each image\00", align 1
@.str.134 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.135 = private unnamed_addr constant [7 x i8] c"Length\00", align 1
@.str.136 = private unnamed_addr constant [21 x i8] c"Length of each frame\00", align 1
@.str.137 = private unnamed_addr constant [18 x i8] c"Toggle Meta Strip\00", align 1
@.str.138 = private unnamed_addr constant [25 x i8] c"SEQUENCER_OT_meta_toggle\00", align 1
@.str.139 = private unnamed_addr constant [45 x i8] c"Toggle a metastrip (to edit enclosed strips)\00", align 1
@.str.140 = private unnamed_addr constant [16 x i8] c"Make Meta Strip\00", align 1
@.str.141 = private unnamed_addr constant [23 x i8] c"SEQUENCER_OT_meta_make\00", align 1
@.str.142 = private unnamed_addr constant [39 x i8] c"Group selected strips into a metastrip\00", align 1
@.str.143 = private unnamed_addr constant [13 x i8] c"UnMeta Strip\00", align 1
@.str.144 = private unnamed_addr constant [27 x i8] c"SEQUENCER_OT_meta_separate\00", align 1
@.str.145 = private unnamed_addr constant [54 x i8] c"Put the contents of a metastrip back in the sequencer\00", align 1
@.str.146 = private unnamed_addr constant [9 x i8] c"View All\00", align 1
@.str.147 = private unnamed_addr constant [22 x i8] c"SEQUENCER_OT_view_all\00", align 1
@.str.148 = private unnamed_addr constant [37 x i8] c"View all the strips in the sequencer\00", align 1
@.str.149 = private unnamed_addr constant [30 x i8] c"SEQUENCER_OT_view_all_preview\00", align 1
@.str.150 = private unnamed_addr constant [32 x i8] c"Zoom preview to fit in the area\00", align 1
@.str.151 = private unnamed_addr constant [26 x i8] c"Sequencer View Zoom Ratio\00", align 1
@.str.152 = private unnamed_addr constant [29 x i8] c"SEQUENCER_OT_view_zoom_ratio\00", align 1
@.str.153 = private unnamed_addr constant [39 x i8] c"Change zoom ratio of sequencer preview\00", align 1
@.str.154 = private unnamed_addr constant [6 x i8] c"ratio\00", align 1
@.str.155 = private unnamed_addr constant [6 x i8] c"Ratio\00", align 1
@.str.156 = private unnamed_addr constant [65 x i8] c"Zoom ratio, 1.0 is 1:1, higher is zoomed in, lower is zoomed out\00", align 1
@.str.157 = private unnamed_addr constant [12 x i8] c"View Toggle\00", align 1
@.str.158 = private unnamed_addr constant [25 x i8] c"SEQUENCER_OT_view_toggle\00", align 1
@.str.159 = private unnamed_addr constant [57 x i8] c"Toggle between sequencer views (sequence, preview, both)\00", align 1
@.str.160 = private unnamed_addr constant [14 x i8] c"View Selected\00", align 1
@.str.161 = private unnamed_addr constant [27 x i8] c"SEQUENCER_OT_view_selected\00", align 1
@.str.162 = private unnamed_addr constant [42 x i8] c"Zoom the sequencer on the selected strips\00", align 1
@.str.163 = private unnamed_addr constant [14 x i8] c"Jump to Strip\00", align 1
@.str.164 = private unnamed_addr constant [24 x i8] c"SEQUENCER_OT_strip_jump\00", align 1
@.str.165 = private unnamed_addr constant [34 x i8] c"Move frame to previous edit point\00", align 1
@.str.166 = private unnamed_addr constant [5 x i8] c"next\00", align 1
@.str.167 = private unnamed_addr constant [11 x i8] c"Next Strip\00", align 1
@.str.168 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@.str.169 = private unnamed_addr constant [17 x i8] c"Use strip center\00", align 1
@.str.170 = private unnamed_addr constant [11 x i8] c"Swap Strip\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_swap\00", align 1
@.str.172 = private unnamed_addr constant [50 x i8] c"Swap active strip with strip to the right or left\00", align 1
@prop_side_lr_types = internal global [3 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem zeroinitializer], align 16, !dbg !1769
@.str.173 = private unnamed_addr constant [26 x i8] c"Side of the strip to swap\00", align 1
@.str.174 = private unnamed_addr constant [16 x i8] c"Set Render Size\00", align 1
@.str.175 = private unnamed_addr constant [24 x i8] c"SEQUENCER_OT_rendersize\00", align 1
@.str.176 = private unnamed_addr constant [48 x i8] c"Set render size and aspect from active sequence\00", align 1
@.str.177 = private unnamed_addr constant [5 x i8] c"Copy\00", align 1
@.str.178 = private unnamed_addr constant [18 x i8] c"SEQUENCER_OT_copy\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"Paste\00", align 1
@.str.180 = private unnamed_addr constant [19 x i8] c"SEQUENCER_OT_paste\00", align 1
@.str.181 = private unnamed_addr constant [20 x i8] c"Sequencer Swap Data\00", align 1
@.str.182 = private unnamed_addr constant [23 x i8] c"SEQUENCER_OT_swap_data\00", align 1
@.str.183 = private unnamed_addr constant [24 x i8] c"Swap 2 sequencer strips\00", align 1
@.str.184 = private unnamed_addr constant [19 x i8] c"Border Offset View\00", align 1
@.str.185 = private unnamed_addr constant [31 x i8] c"SEQUENCER_OT_view_ghost_border\00", align 1
@.str.186 = private unnamed_addr constant [54 x i8] c"Set the boundaries of the border used for offset-view\00", align 1
@.str.187 = private unnamed_addr constant [35 x i8] c"Rebuild Proxy and Timecode Indices\00", align 1
@.str.188 = private unnamed_addr constant [27 x i8] c"SEQUENCER_OT_rebuild_proxy\00", align 1
@.str.189 = private unnamed_addr constant [71 x i8] c"Rebuild all selected proxies and timecode indices using the job system\00", align 1
@.str.190 = private unnamed_addr constant [20 x i8] c"Change Effect Input\00", align 1
@.str.191 = private unnamed_addr constant [33 x i8] c"SEQUENCER_OT_change_effect_input\00", align 1
@.str.192 = private unnamed_addr constant [5 x i8] c"swap\00", align 1
@prop_change_effect_input_types = internal global [4 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.221, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.224, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem { i32 2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.225, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i32 0, i32 0) }, %struct.EnumPropertyItem zeroinitializer], align 16, !dbg !1771
@.str.193 = private unnamed_addr constant [5 x i8] c"Swap\00", align 1
@.str.194 = private unnamed_addr constant [26 x i8] c"The effect inputs to swap\00", align 1
@.str.195 = private unnamed_addr constant [19 x i8] c"Change Effect Type\00", align 1
@.str.196 = private unnamed_addr constant [32 x i8] c"SEQUENCER_OT_change_effect_type\00", align 1
@.str.197 = private unnamed_addr constant [22 x i8] c"Sequencer effect type\00", align 1
@.str.198 = private unnamed_addr constant [18 x i8] c"Change Data/Files\00", align 1
@.str.199 = private unnamed_addr constant [25 x i8] c"SEQUENCER_OT_change_path\00", align 1
@MEM_mallocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.200 = private unnamed_addr constant [9 x i8] c"trimdata\00", align 1
@.str.201 = private unnamed_addr constant [19 x i8] c"trimdata_transform\00", align 1
@.str.202 = private unnamed_addr constant [19 x i8] c"trimdata_sequences\00", align 1
@.str.203 = private unnamed_addr constant [14 x i8] c"trimdata_trim\00", align 1
@.str.204 = private unnamed_addr constant [16 x i8] c"Trim offset: %d\00", align 1
@MEM_freeN = external dso_local global void (i8*)*, align 8
@.str.205 = private unnamed_addr constant [42 x i8] c"Cannot reassign inputs: no cycles allowed\00", align 1
@.str.206 = private unnamed_addr constant [24 x i8] c"No valid inputs to swap\00", align 1
@.str.207 = private unnamed_addr constant [5 x i8] c"SOFT\00", align 1
@.str.208 = private unnamed_addr constant [5 x i8] c"Soft\00", align 1
@.str.209 = private unnamed_addr constant [5 x i8] c"HARD\00", align 1
@.str.210 = private unnamed_addr constant [5 x i8] c"Hard\00", align 1
@MEM_reallocN_id = external dso_local global i8* (i8*, i64, i8*)*, align 8
@__func__.sequencer_separate_images_exec = private unnamed_addr constant [31 x i8] c"sequencer_separate_images_exec\00", align 1
@.str.211 = private unnamed_addr constant [10 x i8] c"metastack\00", align 1
@.str.212 = private unnamed_addr constant [50 x i8] c"Please select more than one or all related strips\00", align 1
@.str.213 = private unnamed_addr constant [10 x i8] c"MetaStrip\00", align 1
@MEM_callocN = external dso_local global i8* (i64, i8*)*, align 8
@.str.214 = private unnamed_addr constant [10 x i8] c"metastrip\00", align 1
@G = external dso_local global %struct.Global, align 8
@.str.215 = private unnamed_addr constant [33 x i8] c"Please select all related strips\00", align 1
@seqbase_clipboard = external dso_local global %struct.ListBase, align 8
@seqbase_clipboard_frame = external dso_local global i32, align 4
@.str.216 = private unnamed_addr constant [25 x i8] c"Please select two strips\00", align 1
@.str.217 = private unnamed_addr constant [17 x i8] c"Building Proxies\00", align 1
@.str.218 = private unnamed_addr constant [18 x i8] c"proxy rebuild job\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.219 = private unnamed_addr constant [45 x i8] c"Canceling proxy rebuild on users request...\0A\00", align 1
@.str.220 = private unnamed_addr constant [47 x i8] c"One of the effect inputs is unset, cannot swap\00", align 1
@.str.221 = private unnamed_addr constant [4 x i8] c"A_B\00", align 1
@.str.222 = private unnamed_addr constant [7 x i8] c"A -> B\00", align 1
@.str.223 = private unnamed_addr constant [4 x i8] c"B_C\00", align 1
@.str.224 = private unnamed_addr constant [7 x i8] c"B -> C\00", align 1
@.str.225 = private unnamed_addr constant [4 x i8] c"A_C\00", align 1
@.str.226 = private unnamed_addr constant [7 x i8] c"A -> C\00", align 1
@.str.227 = private unnamed_addr constant [35 x i8] c"New effect needs more input strips\00", align 1
@.str.228 = private unnamed_addr constant [14 x i8] c"relative_path\00", align 1
@.str.229 = private unnamed_addr constant [6 x i8] c"files\00", align 1
@.str.230 = private unnamed_addr constant [10 x i8] c"directory\00", align 1
@.str.231 = private unnamed_addr constant [10 x i8] c"stripelem\00", align 1
@.str.232 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@RNA_Sequence = external dso_local global %struct.StructRNA, align 1
@.str.233 = private unnamed_addr constant [9 x i8] c"filepath\00", align 1
@.str.234 = private unnamed_addr constant [13 x i8] c"filter_movie\00", align 1
@.str.235 = private unnamed_addr constant [13 x i8] c"filter_image\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @seq_rectf(%struct.Sequence* %seq, %struct.rctf* %rectf) #0 !dbg !1780 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %rectf.addr = alloca %struct.rctf*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !1785, metadata !DIExpression()), !dbg !1786
  store %struct.rctf* %rectf, %struct.rctf** %rectf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rctf** %rectf.addr, metadata !1787, metadata !DIExpression()), !dbg !1788
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1789
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 11, !dbg !1791
  %1 = load i32, i32* %startstill, align 8, !dbg !1791
  %tobool = icmp ne i32 %1, 0, !dbg !1789
  br i1 %tobool, label %if.then, label %if.else, !dbg !1792

if.then:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1793
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 8, !dbg !1794
  %3 = load i32, i32* %start, align 4, !dbg !1794
  %conv = sitofp i32 %3 to float, !dbg !1793
  %4 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1795
  %xmin = getelementptr inbounds %struct.rctf, %struct.rctf* %4, i32 0, i32 0, !dbg !1796
  store float %conv, float* %xmin, align 4, !dbg !1797
  br label %if.end, !dbg !1795

if.else:                                          ; preds = %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1798
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 15, !dbg !1799
  %6 = load i32, i32* %startdisp, align 8, !dbg !1799
  %conv1 = sitofp i32 %6 to float, !dbg !1798
  %7 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1800
  %xmin2 = getelementptr inbounds %struct.rctf, %struct.rctf* %7, i32 0, i32 0, !dbg !1801
  store float %conv1, float* %xmin2, align 4, !dbg !1802
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1803
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 13, !dbg !1804
  %9 = load i32, i32* %machine, align 8, !dbg !1804
  %conv3 = sitofp i32 %9 to float, !dbg !1803
  %add = fadd float %conv3, 0x3FC99999A0000000, !dbg !1805
  %10 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1806
  %ymin = getelementptr inbounds %struct.rctf, %struct.rctf* %10, i32 0, i32 2, !dbg !1807
  store float %add, float* %ymin, align 4, !dbg !1808
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1809
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 12, !dbg !1811
  %12 = load i32, i32* %endstill, align 4, !dbg !1811
  %tobool4 = icmp ne i32 %12, 0, !dbg !1809
  br i1 %tobool4, label %if.then5, label %if.else9, !dbg !1812

if.then5:                                         ; preds = %if.end
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1813
  %start6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 8, !dbg !1814
  %14 = load i32, i32* %start6, align 4, !dbg !1814
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1815
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 7, !dbg !1816
  %16 = load i32, i32* %len, align 8, !dbg !1816
  %add7 = add nsw i32 %14, %16, !dbg !1817
  %conv8 = sitofp i32 %add7 to float, !dbg !1813
  %17 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1818
  %xmax = getelementptr inbounds %struct.rctf, %struct.rctf* %17, i32 0, i32 1, !dbg !1819
  store float %conv8, float* %xmax, align 4, !dbg !1820
  br label %if.end12, !dbg !1818

if.else9:                                         ; preds = %if.end
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1821
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 16, !dbg !1822
  %19 = load i32, i32* %enddisp, align 4, !dbg !1822
  %conv10 = sitofp i32 %19 to float, !dbg !1821
  %20 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1823
  %xmax11 = getelementptr inbounds %struct.rctf, %struct.rctf* %20, i32 0, i32 1, !dbg !1824
  store float %conv10, float* %xmax11, align 4, !dbg !1825
  br label %if.end12

if.end12:                                         ; preds = %if.else9, %if.then5
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !1826
  %machine13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 13, !dbg !1827
  %22 = load i32, i32* %machine13, align 8, !dbg !1827
  %conv14 = sitofp i32 %22 to float, !dbg !1826
  %add15 = fadd float %conv14, 0x3FE99999A0000000, !dbg !1828
  %23 = load %struct.rctf*, %struct.rctf** %rectf.addr, align 8, !dbg !1829
  %ymax = getelementptr inbounds %struct.rctf, %struct.rctf* %23, i32 0, i32 3, !dbg !1830
  store float %add15, float* %ymax, align 4, !dbg !1831
  ret void, !dbg !1832
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @boundbox_seq(%struct.Scene* %scene, %struct.rctf* %rect) #0 !dbg !1833 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %rect.addr = alloca %struct.rctf*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %min = alloca [2 x float], align 4
  %max = alloca [2 x float], align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !1836, metadata !DIExpression()), !dbg !1837
  store %struct.rctf* %rect, %struct.rctf** %rect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rctf** %rect.addr, metadata !1838, metadata !DIExpression()), !dbg !1839
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !1840, metadata !DIExpression()), !dbg !1841
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !1842, metadata !DIExpression()), !dbg !1845
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !1846
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !1847
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !1845
  call void @llvm.dbg.declare(metadata [2 x float]* %min, metadata !1848, metadata !DIExpression()), !dbg !1849
  call void @llvm.dbg.declare(metadata [2 x float]* %max, metadata !1850, metadata !DIExpression()), !dbg !1851
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !1852
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !1854
  br i1 %cmp, label %if.then, label %if.end, !dbg !1855

if.then:                                          ; preds = %entry
  br label %return, !dbg !1856

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 0, !dbg !1857
  store float 0.000000e+00, float* %arrayidx, align 4, !dbg !1858
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !1859
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %2, i32 0, i32 22, !dbg !1859
  %efra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 7, !dbg !1859
  %3 = load i32, i32* %efra, align 8, !dbg !1859
  %add = add nsw i32 %3, 1, !dbg !1860
  %conv = sitofp i32 %add to float, !dbg !1859
  %arrayidx1 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 0, !dbg !1861
  store float %conv, float* %arrayidx1, align 4, !dbg !1862
  %arrayidx2 = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 1, !dbg !1863
  store float 0.000000e+00, float* %arrayidx2, align 4, !dbg !1864
  %arrayidx3 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 1, !dbg !1865
  store float 8.000000e+00, float* %arrayidx3, align 4, !dbg !1866
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !1867
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !1868
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !1868
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !1869
  %6 = load i8*, i8** %first, align 8, !dbg !1869
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !1867
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !1870
  br label %while.cond, !dbg !1871

while.cond:                                       ; preds = %if.end35, %if.end
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1872
  %tobool = icmp ne %struct.Sequence* %8, null, !dbg !1871
  br i1 %tobool, label %while.body, label %while.end, !dbg !1871

while.body:                                       ; preds = %while.cond
  %arrayidx4 = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 0, !dbg !1873
  %9 = load float, float* %arrayidx4, align 4, !dbg !1873
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1876
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 15, !dbg !1877
  %11 = load i32, i32* %startdisp, align 8, !dbg !1877
  %sub = sub nsw i32 %11, 1, !dbg !1878
  %conv5 = sitofp i32 %sub to float, !dbg !1876
  %cmp6 = fcmp ogt float %9, %conv5, !dbg !1879
  br i1 %cmp6, label %if.then8, label %if.end13, !dbg !1880

if.then8:                                         ; preds = %while.body
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1881
  %startdisp9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 15, !dbg !1882
  %13 = load i32, i32* %startdisp9, align 8, !dbg !1882
  %sub10 = sub nsw i32 %13, 1, !dbg !1883
  %conv11 = sitofp i32 %sub10 to float, !dbg !1881
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 0, !dbg !1884
  store float %conv11, float* %arrayidx12, align 4, !dbg !1885
  br label %if.end13, !dbg !1884

if.end13:                                         ; preds = %if.then8, %while.body
  %arrayidx14 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 0, !dbg !1886
  %14 = load float, float* %arrayidx14, align 4, !dbg !1886
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1888
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 16, !dbg !1889
  %16 = load i32, i32* %enddisp, align 4, !dbg !1889
  %add15 = add nsw i32 %16, 1, !dbg !1890
  %conv16 = sitofp i32 %add15 to float, !dbg !1888
  %cmp17 = fcmp olt float %14, %conv16, !dbg !1891
  br i1 %cmp17, label %if.then19, label %if.end24, !dbg !1892

if.then19:                                        ; preds = %if.end13
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1893
  %enddisp20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 16, !dbg !1894
  %18 = load i32, i32* %enddisp20, align 4, !dbg !1894
  %add21 = add nsw i32 %18, 1, !dbg !1895
  %conv22 = sitofp i32 %add21 to float, !dbg !1893
  %arrayidx23 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 0, !dbg !1896
  store float %conv22, float* %arrayidx23, align 4, !dbg !1897
  br label %if.end24, !dbg !1896

if.end24:                                         ; preds = %if.then19, %if.end13
  %arrayidx25 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 1, !dbg !1898
  %19 = load float, float* %arrayidx25, align 4, !dbg !1898
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1900
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 13, !dbg !1901
  %21 = load i32, i32* %machine, align 8, !dbg !1901
  %add26 = add nsw i32 %21, 2, !dbg !1902
  %conv27 = sitofp i32 %add26 to float, !dbg !1900
  %cmp28 = fcmp olt float %19, %conv27, !dbg !1903
  br i1 %cmp28, label %if.then30, label %if.end35, !dbg !1904

if.then30:                                        ; preds = %if.end24
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1905
  %machine31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 13, !dbg !1906
  %23 = load i32, i32* %machine31, align 8, !dbg !1906
  %add32 = add nsw i32 %23, 2, !dbg !1907
  %conv33 = sitofp i32 %add32 to float, !dbg !1905
  %arrayidx34 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 1, !dbg !1908
  store float %conv33, float* %arrayidx34, align 4, !dbg !1909
  br label %if.end35, !dbg !1908

if.end35:                                         ; preds = %if.then30, %if.end24
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1910
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !1911
  %25 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !1911
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !1912
  br label %while.cond, !dbg !1871, !llvm.loop !1913

while.end:                                        ; preds = %while.cond
  %arrayidx36 = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 0, !dbg !1915
  %26 = load float, float* %arrayidx36, align 4, !dbg !1915
  %27 = load %struct.rctf*, %struct.rctf** %rect.addr, align 8, !dbg !1916
  %xmin = getelementptr inbounds %struct.rctf, %struct.rctf* %27, i32 0, i32 0, !dbg !1917
  store float %26, float* %xmin, align 4, !dbg !1918
  %arrayidx37 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 0, !dbg !1919
  %28 = load float, float* %arrayidx37, align 4, !dbg !1919
  %29 = load %struct.rctf*, %struct.rctf** %rect.addr, align 8, !dbg !1920
  %xmax = getelementptr inbounds %struct.rctf, %struct.rctf* %29, i32 0, i32 1, !dbg !1921
  store float %28, float* %xmax, align 4, !dbg !1922
  %arrayidx38 = getelementptr inbounds [2 x float], [2 x float]* %min, i64 0, i64 1, !dbg !1923
  %30 = load float, float* %arrayidx38, align 4, !dbg !1923
  %31 = load %struct.rctf*, %struct.rctf** %rect.addr, align 8, !dbg !1924
  %ymin = getelementptr inbounds %struct.rctf, %struct.rctf* %31, i32 0, i32 2, !dbg !1925
  store float %30, float* %ymin, align 4, !dbg !1926
  %arrayidx39 = getelementptr inbounds [2 x float], [2 x float]* %max, i64 0, i64 1, !dbg !1927
  %32 = load float, float* %arrayidx39, align 4, !dbg !1927
  %33 = load %struct.rctf*, %struct.rctf** %rect.addr, align 8, !dbg !1928
  %ymax = getelementptr inbounds %struct.rctf, %struct.rctf* %33, i32 0, i32 3, !dbg !1929
  store float %32, float* %ymax, align 4, !dbg !1930
  br label %return, !dbg !1931

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !1931
}

declare dso_local %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @find_neighboring_sequence(%struct.Scene* %scene, %struct.Sequence* %test, i32 %lr, i32 %sel) #0 !dbg !1932 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %test.addr = alloca %struct.Sequence*, align 8
  %lr.addr = alloca i32, align 4
  %sel.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !1935, metadata !DIExpression()), !dbg !1936
  store %struct.Sequence* %test, %struct.Sequence** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %test.addr, metadata !1937, metadata !DIExpression()), !dbg !1938
  store i32 %lr, i32* %lr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lr.addr, metadata !1939, metadata !DIExpression()), !dbg !1940
  store i32 %sel, i32* %sel.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sel.addr, metadata !1941, metadata !DIExpression()), !dbg !1942
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !1943, metadata !DIExpression()), !dbg !1944
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !1945, metadata !DIExpression()), !dbg !1946
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !1947
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !1948
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !1946
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !1949
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !1951
  br i1 %cmp, label %if.then, label %if.end, !dbg !1952

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !1953
  br label %return, !dbg !1953

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %sel.addr, align 4, !dbg !1954
  %cmp1 = icmp sgt i32 %2, 0, !dbg !1956
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !1957

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %sel.addr, align 4, !dbg !1958
  br label %if.end3, !dbg !1959

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !1960
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 0, !dbg !1962
  %4 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !1962
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %4, i32 0, i32 0, !dbg !1963
  %5 = load i8*, i8** %first, align 8, !dbg !1963
  %6 = bitcast i8* %5 to %struct.Sequence*, !dbg !1960
  store %struct.Sequence* %6, %struct.Sequence** %seq, align 8, !dbg !1964
  br label %for.cond, !dbg !1965

for.cond:                                         ; preds = %for.inc, %if.end3
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1966
  %tobool = icmp ne %struct.Sequence* %7, null, !dbg !1968
  br i1 %tobool, label %for.body, label %for.end, !dbg !1968

for.body:                                         ; preds = %for.cond
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1969
  %9 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !1972
  %cmp4 = icmp ne %struct.Sequence* %8, %9, !dbg !1973
  br i1 %cmp4, label %land.lhs.true, label %if.end28, !dbg !1974

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !1975
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 13, !dbg !1976
  %11 = load i32, i32* %machine, align 8, !dbg !1976
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1977
  %machine5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 13, !dbg !1978
  %13 = load i32, i32* %machine5, align 8, !dbg !1978
  %cmp6 = icmp eq i32 %11, %13, !dbg !1979
  br i1 %cmp6, label %land.lhs.true7, label %if.end28, !dbg !1980

land.lhs.true7:                                   ; preds = %land.lhs.true
  %14 = load i32, i32* %sel.addr, align 4, !dbg !1981
  %cmp8 = icmp eq i32 %14, -1, !dbg !1982
  br i1 %cmp8, label %if.then18, label %lor.lhs.false, !dbg !1983

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %15 = load i32, i32* %sel.addr, align 4, !dbg !1984
  %tobool9 = icmp ne i32 %15, 0, !dbg !1984
  br i1 %tobool9, label %land.lhs.true10, label %lor.lhs.false12, !dbg !1985

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1986
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 5, !dbg !1987
  %17 = load i32, i32* %flag, align 8, !dbg !1987
  %and = and i32 %17, 1, !dbg !1988
  %tobool11 = icmp ne i32 %and, 0, !dbg !1988
  br i1 %tobool11, label %if.then18, label %lor.lhs.false12, !dbg !1989

lor.lhs.false12:                                  ; preds = %land.lhs.true10, %lor.lhs.false
  %18 = load i32, i32* %sel.addr, align 4, !dbg !1990
  %cmp13 = icmp eq i32 %18, 0, !dbg !1991
  br i1 %cmp13, label %land.lhs.true14, label %if.end28, !dbg !1992

land.lhs.true14:                                  ; preds = %lor.lhs.false12
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !1993
  %flag15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 5, !dbg !1994
  %20 = load i32, i32* %flag15, align 8, !dbg !1994
  %and16 = and i32 %20, 1, !dbg !1995
  %cmp17 = icmp eq i32 %and16, 0, !dbg !1996
  br i1 %cmp17, label %if.then18, label %if.end28, !dbg !1997

if.then18:                                        ; preds = %land.lhs.true14, %land.lhs.true10, %land.lhs.true7
  %21 = load i32, i32* %lr.addr, align 4, !dbg !1998
  switch i32 %21, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb22
  ], !dbg !2000

sw.bb:                                            ; preds = %if.then18
  %22 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !2001
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 15, !dbg !2004
  %23 = load i32, i32* %startdisp, align 8, !dbg !2004
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2005
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 16, !dbg !2006
  %25 = load i32, i32* %enddisp, align 4, !dbg !2006
  %cmp19 = icmp eq i32 %23, %25, !dbg !2007
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !2008

if.then20:                                        ; preds = %sw.bb
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2009
  store %struct.Sequence* %26, %struct.Sequence** %retval, align 8, !dbg !2011
  br label %return, !dbg !2011

if.end21:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !2012

sw.bb22:                                          ; preds = %if.then18
  %27 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !2013
  %enddisp23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 16, !dbg !2015
  %28 = load i32, i32* %enddisp23, align 4, !dbg !2015
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2016
  %startdisp24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 15, !dbg !2017
  %30 = load i32, i32* %startdisp24, align 8, !dbg !2017
  %cmp25 = icmp eq i32 %28, %30, !dbg !2018
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !2019

if.then26:                                        ; preds = %sw.bb22
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2020
  store %struct.Sequence* %31, %struct.Sequence** %retval, align 8, !dbg !2022
  br label %return, !dbg !2022

if.end27:                                         ; preds = %sw.bb22
  br label %sw.epilog, !dbg !2023

sw.epilog:                                        ; preds = %if.then18, %if.end27, %if.end21
  br label %if.end28, !dbg !2024

if.end28:                                         ; preds = %sw.epilog, %land.lhs.true14, %lor.lhs.false12, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2025

for.inc:                                          ; preds = %if.end28
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2026
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 0, !dbg !2027
  %33 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2027
  store %struct.Sequence* %33, %struct.Sequence** %seq, align 8, !dbg !2028
  br label %for.cond, !dbg !2029, !llvm.loop !2030

for.end:                                          ; preds = %for.cond
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !2032
  br label %return, !dbg !2032

return:                                           ; preds = %for.end, %if.then26, %if.then20, %if.then
  %34 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !2033
  ret %struct.Sequence* %34, !dbg !2033
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.Sequence* @find_nearest_seq(%struct.Scene* %scene, %struct.View2D* %v2d, i32* %hand, i32* %mval) #0 !dbg !2034 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %v2d.addr = alloca %struct.View2D*, align 8
  %hand.addr = alloca i32*, align 8
  %mval.addr = alloca i32*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %x = alloca float, align 4
  %y = alloca float, align 4
  %pixelx = alloca float, align 4
  %handsize = alloca float, align 4
  %displen = alloca float, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2041, metadata !DIExpression()), !dbg !2042
  store %struct.View2D* %v2d, %struct.View2D** %v2d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d.addr, metadata !2043, metadata !DIExpression()), !dbg !2044
  store i32* %hand, i32** %hand.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %hand.addr, metadata !2045, metadata !DIExpression()), !dbg !2046
  store i32* %mval, i32** %mval.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %mval.addr, metadata !2047, metadata !DIExpression()), !dbg !2048
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2049, metadata !DIExpression()), !dbg !2050
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2051, metadata !DIExpression()), !dbg !2052
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2053
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !2054
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !2052
  call void @llvm.dbg.declare(metadata float* %x, metadata !2055, metadata !DIExpression()), !dbg !2056
  call void @llvm.dbg.declare(metadata float* %y, metadata !2057, metadata !DIExpression()), !dbg !2058
  call void @llvm.dbg.declare(metadata float* %pixelx, metadata !2059, metadata !DIExpression()), !dbg !2060
  call void @llvm.dbg.declare(metadata float* %handsize, metadata !2061, metadata !DIExpression()), !dbg !2062
  call void @llvm.dbg.declare(metadata float* %displen, metadata !2063, metadata !DIExpression()), !dbg !2064
  %1 = load i32*, i32** %hand.addr, align 8, !dbg !2065
  store i32 0, i32* %1, align 4, !dbg !2066
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2067
  %cmp = icmp eq %struct.Editing* %2, null, !dbg !2069
  br i1 %cmp, label %if.then, label %if.end, !dbg !2070

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !2071
  br label %return, !dbg !2071

if.end:                                           ; preds = %entry
  %3 = load %struct.View2D*, %struct.View2D** %v2d.addr, align 8, !dbg !2072
  %cur = getelementptr inbounds %struct.View2D, %struct.View2D* %3, i32 0, i32 1, !dbg !2073
  %call1 = call float @BLI_rctf_size_x(%struct.rctf* %cur), !dbg !2074
  %4 = load %struct.View2D*, %struct.View2D** %v2d.addr, align 8, !dbg !2075
  %mask = getelementptr inbounds %struct.View2D, %struct.View2D* %4, i32 0, i32 4, !dbg !2076
  %call2 = call i32 @BLI_rcti_size_x(%struct.rcti* %mask), !dbg !2077
  %conv = sitofp i32 %call2 to float, !dbg !2077
  %div = fdiv float %call1, %conv, !dbg !2078
  store float %div, float* %pixelx, align 4, !dbg !2079
  %5 = load %struct.View2D*, %struct.View2D** %v2d.addr, align 8, !dbg !2080
  %6 = load i32*, i32** %mval.addr, align 8, !dbg !2081
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 0, !dbg !2081
  %7 = load i32, i32* %arrayidx, align 4, !dbg !2081
  %conv3 = sitofp i32 %7 to float, !dbg !2081
  %8 = load i32*, i32** %mval.addr, align 8, !dbg !2082
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 1, !dbg !2082
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !2082
  %conv5 = sitofp i32 %9 to float, !dbg !2082
  call void @UI_view2d_region_to_view(%struct.View2D* %5, float %conv3, float %conv5, float* %x, float* %y), !dbg !2083
  %10 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2084
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %10, i32 0, i32 0, !dbg !2085
  %11 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !2085
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %11, i32 0, i32 0, !dbg !2086
  %12 = load i8*, i8** %first, align 8, !dbg !2086
  %13 = bitcast i8* %12 to %struct.Sequence*, !dbg !2084
  store %struct.Sequence* %13, %struct.Sequence** %seq, align 8, !dbg !2087
  br label %while.cond, !dbg !2088

while.cond:                                       ; preds = %if.end84, %if.end
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2089
  %tobool = icmp ne %struct.Sequence* %14, null, !dbg !2088
  br i1 %tobool, label %while.body, label %while.end, !dbg !2088

while.body:                                       ; preds = %while.cond
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2090
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 13, !dbg !2093
  %16 = load i32, i32* %machine, align 8, !dbg !2093
  %17 = load float, float* %y, align 4, !dbg !2094
  %conv6 = fptosi float %17 to i32, !dbg !2095
  %cmp7 = icmp eq i32 %16, %conv6, !dbg !2096
  br i1 %cmp7, label %if.then9, label %if.end84, !dbg !2097

if.then9:                                         ; preds = %while.body
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2098
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 15, !dbg !2101
  %19 = load i32, i32* %startdisp, align 8, !dbg !2101
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2102
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 16, !dbg !2103
  %21 = load i32, i32* %enddisp, align 4, !dbg !2103
  %cmp10 = icmp slt i32 %19, %21, !dbg !2104
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !2105

land.lhs.true:                                    ; preds = %if.then9
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2106
  %startdisp12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 15, !dbg !2107
  %23 = load i32, i32* %startdisp12, align 8, !dbg !2107
  %conv13 = sitofp i32 %23 to float, !dbg !2106
  %24 = load float, float* %x, align 4, !dbg !2108
  %cmp14 = fcmp ole float %conv13, %24, !dbg !2109
  br i1 %cmp14, label %land.lhs.true16, label %lor.lhs.false, !dbg !2110

land.lhs.true16:                                  ; preds = %land.lhs.true
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2111
  %enddisp17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 16, !dbg !2112
  %26 = load i32, i32* %enddisp17, align 4, !dbg !2112
  %conv18 = sitofp i32 %26 to float, !dbg !2111
  %27 = load float, float* %x, align 4, !dbg !2113
  %cmp19 = fcmp oge float %conv18, %27, !dbg !2114
  br i1 %cmp19, label %if.then35, label %lor.lhs.false, !dbg !2115

lor.lhs.false:                                    ; preds = %land.lhs.true16, %land.lhs.true, %if.then9
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2116
  %startdisp21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 15, !dbg !2117
  %29 = load i32, i32* %startdisp21, align 8, !dbg !2117
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2118
  %enddisp22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 16, !dbg !2119
  %31 = load i32, i32* %enddisp22, align 4, !dbg !2119
  %cmp23 = icmp sgt i32 %29, %31, !dbg !2120
  br i1 %cmp23, label %land.lhs.true25, label %if.end83, !dbg !2121

land.lhs.true25:                                  ; preds = %lor.lhs.false
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2122
  %startdisp26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 15, !dbg !2123
  %33 = load i32, i32* %startdisp26, align 8, !dbg !2123
  %conv27 = sitofp i32 %33 to float, !dbg !2122
  %34 = load float, float* %x, align 4, !dbg !2124
  %cmp28 = fcmp oge float %conv27, %34, !dbg !2125
  br i1 %cmp28, label %land.lhs.true30, label %if.end83, !dbg !2126

land.lhs.true30:                                  ; preds = %land.lhs.true25
  %35 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2127
  %enddisp31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 16, !dbg !2128
  %36 = load i32, i32* %enddisp31, align 4, !dbg !2128
  %conv32 = sitofp i32 %36 to float, !dbg !2127
  %37 = load float, float* %x, align 4, !dbg !2129
  %cmp33 = fcmp ole float %conv32, %37, !dbg !2130
  br i1 %cmp33, label %if.then35, label %if.end83, !dbg !2131

if.then35:                                        ; preds = %land.lhs.true30, %land.lhs.true16
  %38 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2132
  %call36 = call zeroext i8 @BKE_sequence_tx_test(%struct.Sequence* %38), !dbg !2135
  %tobool37 = icmp ne i8 %call36, 0, !dbg !2135
  br i1 %tobool37, label %if.then38, label %if.end82, !dbg !2136

if.then38:                                        ; preds = %if.then35
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2137
  %handsize39 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 19, !dbg !2139
  %40 = load float, float* %handsize39, align 8, !dbg !2139
  store float %40, float* %handsize, align 4, !dbg !2140
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2141
  %startdisp40 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 15, !dbg !2142
  %42 = load i32, i32* %startdisp40, align 8, !dbg !2142
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2143
  %enddisp41 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 16, !dbg !2144
  %44 = load i32, i32* %enddisp41, align 4, !dbg !2144
  %sub = sub nsw i32 %42, %44, !dbg !2145
  %call42 = call i32 @abs(i32 %sub) #6, !dbg !2146
  %conv43 = sitofp i32 %call42 to float, !dbg !2147
  store float %conv43, float* %displen, align 4, !dbg !2148
  %45 = load float, float* %displen, align 4, !dbg !2149
  %46 = load float, float* %pixelx, align 4, !dbg !2151
  %div44 = fdiv float %45, %46, !dbg !2152
  %cmp45 = fcmp ogt float %div44, 1.600000e+01, !dbg !2153
  br i1 %cmp45, label %if.then47, label %if.end81, !dbg !2154

if.then47:                                        ; preds = %if.then38
  %47 = load float, float* %displen, align 4, !dbg !2155
  %div48 = fdiv float %47, 3.000000e+00, !dbg !2158
  %48 = load float, float* %pixelx, align 4, !dbg !2159
  %mul = fmul float 3.000000e+01, %48, !dbg !2160
  %cmp49 = fcmp olt float %div48, %mul, !dbg !2161
  br i1 %cmp49, label %if.then51, label %if.else, !dbg !2162

if.then51:                                        ; preds = %if.then47
  %49 = load float, float* %displen, align 4, !dbg !2163
  %div52 = fdiv float %49, 3.000000e+00, !dbg !2165
  store float %div52, float* %handsize, align 4, !dbg !2166
  br label %if.end66, !dbg !2167

if.else:                                          ; preds = %if.then47
  %50 = load float, float* %handsize, align 4, !dbg !2168
  %51 = load float, float* %pixelx, align 4, !dbg !2168
  %mul53 = fmul float 7.000000e+00, %51, !dbg !2168
  %cmp54 = fcmp olt float %50, %mul53, !dbg !2168
  br i1 %cmp54, label %if.then56, label %if.else58, !dbg !2172

if.then56:                                        ; preds = %if.else
  %52 = load float, float* %pixelx, align 4, !dbg !2168
  %mul57 = fmul float 7.000000e+00, %52, !dbg !2168
  store float %mul57, float* %handsize, align 4, !dbg !2168
  br label %if.end65, !dbg !2168

if.else58:                                        ; preds = %if.else
  %53 = load float, float* %handsize, align 4, !dbg !2173
  %54 = load float, float* %pixelx, align 4, !dbg !2173
  %mul59 = fmul float 3.000000e+01, %54, !dbg !2173
  %cmp60 = fcmp ogt float %53, %mul59, !dbg !2173
  br i1 %cmp60, label %if.then62, label %if.end64, !dbg !2168

if.then62:                                        ; preds = %if.else58
  %55 = load float, float* %pixelx, align 4, !dbg !2173
  %mul63 = fmul float 3.000000e+01, %55, !dbg !2173
  store float %mul63, float* %handsize, align 4, !dbg !2173
  br label %if.end64, !dbg !2173

if.end64:                                         ; preds = %if.then62, %if.else58
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then56
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then51
  %56 = load float, float* %handsize, align 4, !dbg !2175
  %57 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2177
  %startdisp67 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %57, i32 0, i32 15, !dbg !2178
  %58 = load i32, i32* %startdisp67, align 8, !dbg !2178
  %conv68 = sitofp i32 %58 to float, !dbg !2177
  %add = fadd float %56, %conv68, !dbg !2179
  %59 = load float, float* %x, align 4, !dbg !2180
  %cmp69 = fcmp oge float %add, %59, !dbg !2181
  br i1 %cmp69, label %if.then71, label %if.else72, !dbg !2182

if.then71:                                        ; preds = %if.end66
  %60 = load i32*, i32** %hand.addr, align 8, !dbg !2183
  store i32 1, i32* %60, align 4, !dbg !2184
  br label %if.end80, !dbg !2185

if.else72:                                        ; preds = %if.end66
  %61 = load float, float* %handsize, align 4, !dbg !2186
  %fneg = fneg float %61, !dbg !2188
  %62 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2189
  %enddisp73 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 16, !dbg !2190
  %63 = load i32, i32* %enddisp73, align 4, !dbg !2190
  %conv74 = sitofp i32 %63 to float, !dbg !2189
  %add75 = fadd float %fneg, %conv74, !dbg !2191
  %64 = load float, float* %x, align 4, !dbg !2192
  %cmp76 = fcmp ole float %add75, %64, !dbg !2193
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !2194

if.then78:                                        ; preds = %if.else72
  %65 = load i32*, i32** %hand.addr, align 8, !dbg !2195
  store i32 2, i32* %65, align 4, !dbg !2196
  br label %if.end79, !dbg !2197

if.end79:                                         ; preds = %if.then78, %if.else72
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then71
  br label %if.end81, !dbg !2198

if.end81:                                         ; preds = %if.end80, %if.then38
  br label %if.end82, !dbg !2199

if.end82:                                         ; preds = %if.end81, %if.then35
  %66 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2200
  store %struct.Sequence* %66, %struct.Sequence** %retval, align 8, !dbg !2201
  br label %return, !dbg !2201

if.end83:                                         ; preds = %land.lhs.true30, %land.lhs.true25, %lor.lhs.false
  br label %if.end84, !dbg !2202

if.end84:                                         ; preds = %if.end83, %while.body
  %67 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2203
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 0, !dbg !2204
  %68 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2204
  store %struct.Sequence* %68, %struct.Sequence** %seq, align 8, !dbg !2205
  br label %while.cond, !dbg !2088, !llvm.loop !2206

while.end:                                        ; preds = %while.cond
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !2208
  br label %return, !dbg !2208

return:                                           ; preds = %while.end, %if.end82, %if.then
  %69 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !2209
  ret %struct.Sequence* %69, !dbg !2209
}

; Function Attrs: noinline nounwind uwtable
define internal float @BLI_rctf_size_x(%struct.rctf* %rct) #0 !dbg !2210 {
entry:
  %rct.addr = alloca %struct.rctf*, align 8
  store %struct.rctf* %rct, %struct.rctf** %rct.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rctf** %rct.addr, metadata !2216, metadata !DIExpression()), !dbg !2217
  %0 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !2218
  %xmax = getelementptr inbounds %struct.rctf, %struct.rctf* %0, i32 0, i32 1, !dbg !2219
  %1 = load float, float* %xmax, align 4, !dbg !2219
  %2 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !2220
  %xmin = getelementptr inbounds %struct.rctf, %struct.rctf* %2, i32 0, i32 0, !dbg !2221
  %3 = load float, float* %xmin, align 4, !dbg !2221
  %sub = fsub float %1, %3, !dbg !2222
  ret float %sub, !dbg !2223
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @BLI_rcti_size_x(%struct.rcti* %rct) #0 !dbg !2224 {
entry:
  %rct.addr = alloca %struct.rcti*, align 8
  store %struct.rcti* %rct, %struct.rcti** %rct.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rcti** %rct.addr, metadata !2229, metadata !DIExpression()), !dbg !2230
  %0 = load %struct.rcti*, %struct.rcti** %rct.addr, align 8, !dbg !2231
  %xmax = getelementptr inbounds %struct.rcti, %struct.rcti* %0, i32 0, i32 1, !dbg !2232
  %1 = load i32, i32* %xmax, align 4, !dbg !2232
  %2 = load %struct.rcti*, %struct.rcti** %rct.addr, align 8, !dbg !2233
  %xmin = getelementptr inbounds %struct.rcti, %struct.rcti* %2, i32 0, i32 0, !dbg !2234
  %3 = load i32, i32* %xmin, align 4, !dbg !2234
  %sub = sub nsw i32 %1, %3, !dbg !2235
  ret i32 %sub, !dbg !2236
}

declare dso_local void @UI_view2d_region_to_view(%struct.View2D*, float, float, float*, float*) #2

declare dso_local zeroext i8 @BKE_sequence_tx_test(%struct.Sequence*) #2

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @ED_sequencer_deselect_all(%struct.Scene* %scene) #0 !dbg !2237 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %iter_macro = alloca %struct.SeqIterator, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2240, metadata !DIExpression()), !dbg !2241
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2242, metadata !DIExpression()), !dbg !2243
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2244, metadata !DIExpression()), !dbg !2245
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2246
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !2247
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !2245
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2248
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !2250
  br i1 %cmp, label %if.then, label %if.end, !dbg !2251

if.then:                                          ; preds = %entry
  br label %return, !dbg !2252

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro, metadata !2253, metadata !DIExpression()), !dbg !2264
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2265
  call void @BKE_sequence_iterator_begin(%struct.Editing* %2, %struct.SeqIterator* %iter_macro, i8 zeroext 1), !dbg !2265
  br label %for.cond, !dbg !2265

for.cond:                                         ; preds = %for.inc, %if.end
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 4, !dbg !2267
  %3 = load i32, i32* %valid, align 8, !dbg !2267
  %tobool = icmp ne i32 %3, 0, !dbg !2265
  br i1 %tobool, label %for.body, label %for.end, !dbg !2265

for.body:                                         ; preds = %for.cond
  %seq1 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 3, !dbg !2269
  %4 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2269
  store %struct.Sequence* %4, %struct.Sequence** %seq, align 8, !dbg !2269
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2271
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 5, !dbg !2273
  %6 = load i32, i32* %flag, align 8, !dbg !2274
  %and = and i32 %6, -8, !dbg !2274
  store i32 %and, i32* %flag, align 8, !dbg !2274
  br label %for.inc, !dbg !2275

for.inc:                                          ; preds = %for.body
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro), !dbg !2267
  br label %for.cond, !dbg !2267, !llvm.loop !2276

for.end:                                          ; preds = %for.cond
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro), !dbg !2278
  br label %return, !dbg !2279

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !2279
}

declare dso_local void @BKE_sequence_iterator_begin(%struct.Editing*, %struct.SeqIterator*, i8 zeroext) #2

declare dso_local void @BKE_sequence_iterator_next(%struct.SeqIterator*) #2

declare dso_local void @BKE_sequence_iterator_end(%struct.SeqIterator*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @recurs_sel_seq(%struct.Sequence* %seqm) #0 !dbg !2280 {
entry:
  %seqm.addr = alloca %struct.Sequence*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seqm, %struct.Sequence** %seqm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqm.addr, metadata !2283, metadata !DIExpression()), !dbg !2284
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2285, metadata !DIExpression()), !dbg !2286
  %0 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !2287
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 36, !dbg !2288
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !2289
  %1 = load i8*, i8** %first, align 8, !dbg !2289
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !2287
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !2290
  br label %while.cond, !dbg !2291

while.cond:                                       ; preds = %if.end17, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2292
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !2291
  br i1 %tobool, label %while.body, label %while.end, !dbg !2291

while.body:                                       ; preds = %while.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !2293
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 5, !dbg !2296
  %5 = load i32, i32* %flag, align 8, !dbg !2296
  %and = and i32 %5, 6, !dbg !2297
  %tobool1 = icmp ne i32 %and, 0, !dbg !2297
  br i1 %tobool1, label %if.then, label %if.else, !dbg !2298

if.then:                                          ; preds = %while.body
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2299
  %flag2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 5, !dbg !2300
  %7 = load i32, i32* %flag2, align 8, !dbg !2301
  %and3 = and i32 %7, -8, !dbg !2301
  store i32 %and3, i32* %flag2, align 8, !dbg !2301
  br label %if.end12, !dbg !2299

if.else:                                          ; preds = %while.body
  %8 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !2302
  %flag4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 5, !dbg !2304
  %9 = load i32, i32* %flag4, align 8, !dbg !2304
  %and5 = and i32 %9, 1, !dbg !2305
  %tobool6 = icmp ne i32 %and5, 0, !dbg !2305
  br i1 %tobool6, label %if.then7, label %if.else9, !dbg !2306

if.then7:                                         ; preds = %if.else
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2307
  %flag8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 5, !dbg !2308
  %11 = load i32, i32* %flag8, align 8, !dbg !2309
  %or = or i32 %11, 1, !dbg !2309
  store i32 %or, i32* %flag8, align 8, !dbg !2309
  br label %if.end, !dbg !2307

if.else9:                                         ; preds = %if.else
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2310
  %flag10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 5, !dbg !2311
  %13 = load i32, i32* %flag10, align 8, !dbg !2312
  %and11 = and i32 %13, -8, !dbg !2312
  store i32 %and11, i32* %flag10, align 8, !dbg !2312
  br label %if.end

if.end:                                           ; preds = %if.else9, %if.then7
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2313
  %seqbase13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 36, !dbg !2315
  %first14 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase13, i32 0, i32 0, !dbg !2316
  %15 = load i8*, i8** %first14, align 8, !dbg !2316
  %tobool15 = icmp ne i8* %15, null, !dbg !2313
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !2317

if.then16:                                        ; preds = %if.end12
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2318
  call void @recurs_sel_seq(%struct.Sequence* %16), !dbg !2319
  br label %if.end17, !dbg !2319

if.end17:                                         ; preds = %if.then16, %if.end12
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2320
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 0, !dbg !2321
  %18 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2321
  store %struct.Sequence* %18, %struct.Sequence** %seq, align 8, !dbg !2322
  br label %while.cond, !dbg !2291, !llvm.loop !2323

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2325
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ED_space_sequencer_maskedit_mask_poll(%struct.bContext* %C) #0 !dbg !2326 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2332, metadata !DIExpression()), !dbg !2333
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2334
  %call = call i32 @ED_space_sequencer_maskedit_poll(%struct.bContext* %0), !dbg !2335
  ret i32 %call, !dbg !2336
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ED_space_sequencer_maskedit_poll(%struct.bContext* %C) #0 !dbg !2337 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %sseq = alloca %struct.SpaceSeq*, align 8
  %scene = alloca %struct.Scene*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2338, metadata !DIExpression()), !dbg !2339
  call void @llvm.dbg.declare(metadata %struct.SpaceSeq** %sseq, metadata !2340, metadata !DIExpression()), !dbg !2341
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2342
  %call = call %struct.SpaceSeq* @CTX_wm_space_seq(%struct.bContext* %0), !dbg !2343
  store %struct.SpaceSeq* %call, %struct.SpaceSeq** %sseq, align 8, !dbg !2341
  %1 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !2344
  %tobool = icmp ne %struct.SpaceSeq* %1, null, !dbg !2344
  br i1 %tobool, label %if.then, label %if.end, !dbg !2346

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !2347, metadata !DIExpression()), !dbg !2349
  %2 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2350
  %call1 = call %struct.Scene* @CTX_data_scene(%struct.bContext* %2), !dbg !2351
  store %struct.Scene* %call1, %struct.Scene** %scene, align 8, !dbg !2349
  %3 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !2352
  %4 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2353
  %call2 = call zeroext i8 @ED_space_sequencer_check_show_maskedit(%struct.SpaceSeq* %3, %struct.Scene* %4), !dbg !2354
  %conv = zext i8 %call2 to i32, !dbg !2354
  store i32 %conv, i32* %retval, align 4, !dbg !2355
  br label %return, !dbg !2355

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2356
  br label %return, !dbg !2356

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !2357
  ret i32 %5, !dbg !2357
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ED_space_sequencer_check_show_maskedit(%struct.SpaceSeq* %sseq, %struct.Scene* %scene) #0 !dbg !2358 {
entry:
  %retval = alloca i8, align 1
  %sseq.addr = alloca %struct.SpaceSeq*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  store %struct.SpaceSeq* %sseq, %struct.SpaceSeq** %sseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceSeq** %sseq.addr, metadata !2361, metadata !DIExpression()), !dbg !2362
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2363, metadata !DIExpression()), !dbg !2364
  %0 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2365
  %tobool = icmp ne %struct.SpaceSeq* %0, null, !dbg !2365
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2367

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2368
  %mainb = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %1, i32 0, i32 9, !dbg !2369
  %2 = load i16, i16* %mainb, align 8, !dbg !2369
  %conv = sext i16 %2 to i32, !dbg !2368
  %cmp = icmp eq i32 %conv, 1, !dbg !2370
  br i1 %cmp, label %if.then, label %if.end, !dbg !2371

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2372
  %call = call %struct.Mask* @BKE_sequencer_mask_get(%struct.Scene* %3), !dbg !2374
  %cmp2 = icmp ne %struct.Mask* %call, null, !dbg !2375
  %conv3 = zext i1 %cmp2 to i32, !dbg !2375
  %conv4 = trunc i32 %conv3 to i8, !dbg !2376
  store i8 %conv4, i8* %retval, align 1, !dbg !2377
  br label %return, !dbg !2377

if.end:                                           ; preds = %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !2378
  br label %return, !dbg !2378

return:                                           ; preds = %if.end, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !2379
  ret i8 %4, !dbg !2379
}

declare dso_local %struct.Mask* @BKE_sequencer_mask_get(%struct.Scene*) #2

declare dso_local %struct.SpaceSeq* @CTX_wm_space_seq(%struct.bContext*) #2

declare dso_local %struct.Scene* @CTX_data_scene(%struct.bContext*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ED_space_sequencer_check_show_imbuf(%struct.SpaceSeq* %sseq) #0 !dbg !2380 {
entry:
  %sseq.addr = alloca %struct.SpaceSeq*, align 8
  store %struct.SpaceSeq* %sseq, %struct.SpaceSeq** %sseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SpaceSeq** %sseq.addr, metadata !2383, metadata !DIExpression()), !dbg !2384
  %0 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2385
  %view = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %0, i32 0, i32 15, !dbg !2385
  %1 = load i32, i32* %view, align 8, !dbg !2385
  %cmp = icmp eq i32 %1, 2, !dbg !2385
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !2385

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2385
  %view1 = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %2, i32 0, i32 15, !dbg !2385
  %3 = load i32, i32* %view1, align 8, !dbg !2385
  %cmp2 = icmp eq i32 %3, 3, !dbg !2385
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !2386

land.rhs:                                         ; preds = %lor.lhs.false, %entry
  %4 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2387
  %mainb = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %4, i32 0, i32 9, !dbg !2387
  %5 = load i16, i16* %mainb, align 8, !dbg !2387
  %conv = sext i16 %5 to i32, !dbg !2387
  %cmp3 = icmp eq i32 %conv, 0, !dbg !2387
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !2387

lor.rhs:                                          ; preds = %land.rhs
  %6 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq.addr, align 8, !dbg !2387
  %mainb5 = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %6, i32 0, i32 9, !dbg !2387
  %7 = load i16, i16* %mainb5, align 8, !dbg !2387
  %conv6 = sext i16 %7 to i32, !dbg !2387
  %cmp7 = icmp eq i32 %conv6, 1, !dbg !2387
  br label %lor.end, !dbg !2387

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp7, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.lhs.false
  %9 = phi i1 [ false, %lor.lhs.false ], [ %8, %lor.end ], !dbg !2388
  %land.ext = zext i1 %9 to i32, !dbg !2386
  %conv9 = trunc i32 %land.ext to i8, !dbg !2389
  ret i8 %conv9, !dbg !2390
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @seq_effect_find_selected(%struct.Scene* %scene, %struct.Sequence* %activeseq, i32 %type, %struct.Sequence** %selseq1, %struct.Sequence** %selseq2, %struct.Sequence** %selseq3, i8** %error_str) #0 !dbg !2391 {
entry:
  %retval = alloca i32, align 4
  %scene.addr = alloca %struct.Scene*, align 8
  %activeseq.addr = alloca %struct.Sequence*, align 8
  %type.addr = alloca i32, align 4
  %selseq1.addr = alloca %struct.Sequence**, align 8
  %selseq2.addr = alloca %struct.Sequence**, align 8
  %selseq3.addr = alloca %struct.Sequence**, align 8
  %error_str.addr = alloca i8**, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq1 = alloca %struct.Sequence*, align 8
  %seq2 = alloca %struct.Sequence*, align 8
  %seq3 = alloca %struct.Sequence*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %tmp = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !2395, metadata !DIExpression()), !dbg !2396
  store %struct.Sequence* %activeseq, %struct.Sequence** %activeseq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %activeseq.addr, metadata !2397, metadata !DIExpression()), !dbg !2398
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2399, metadata !DIExpression()), !dbg !2400
  store %struct.Sequence** %selseq1, %struct.Sequence*** %selseq1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %selseq1.addr, metadata !2401, metadata !DIExpression()), !dbg !2402
  store %struct.Sequence** %selseq2, %struct.Sequence*** %selseq2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %selseq2.addr, metadata !2403, metadata !DIExpression()), !dbg !2404
  store %struct.Sequence** %selseq3, %struct.Sequence*** %selseq3.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %selseq3.addr, metadata !2405, metadata !DIExpression()), !dbg !2406
  store i8** %error_str, i8*** %error_str.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %error_str.addr, metadata !2407, metadata !DIExpression()), !dbg !2408
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2409, metadata !DIExpression()), !dbg !2410
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2411
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !2412
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !2410
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq1, metadata !2413, metadata !DIExpression()), !dbg !2414
  store %struct.Sequence* null, %struct.Sequence** %seq1, align 8, !dbg !2414
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq2, metadata !2415, metadata !DIExpression()), !dbg !2416
  store %struct.Sequence* null, %struct.Sequence** %seq2, align 8, !dbg !2416
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq3, metadata !2417, metadata !DIExpression()), !dbg !2418
  store %struct.Sequence* null, %struct.Sequence** %seq3, align 8, !dbg !2418
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2419, metadata !DIExpression()), !dbg !2420
  %1 = load i8**, i8*** %error_str.addr, align 8, !dbg !2421
  store i8* null, i8** %1, align 8, !dbg !2422
  %2 = load %struct.Sequence*, %struct.Sequence** %activeseq.addr, align 8, !dbg !2423
  %tobool = icmp ne %struct.Sequence* %2, null, !dbg !2423
  br i1 %tobool, label %if.end, label %if.then, !dbg !2425

if.then:                                          ; preds = %entry
  %3 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !2426
  %call1 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %3), !dbg !2427
  store %struct.Sequence* %call1, %struct.Sequence** %seq2, align 8, !dbg !2428
  br label %if.end, !dbg !2429

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2430
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !2432
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !2432
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !2433
  %6 = load i8*, i8** %first, align 8, !dbg !2433
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !2430
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !2434
  br label %for.cond, !dbg !2435

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2436
  %tobool2 = icmp ne %struct.Sequence* %8, null, !dbg !2438
  br i1 %tobool2, label %for.body, label %for.end, !dbg !2438

for.body:                                         ; preds = %for.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2439
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !2442
  %10 = load i32, i32* %flag, align 8, !dbg !2442
  %and = and i32 %10, 1, !dbg !2443
  %tobool3 = icmp ne i32 %and, 0, !dbg !2443
  br i1 %tobool3, label %if.then4, label %if.end26, !dbg !2444

if.then4:                                         ; preds = %for.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2445
  %type5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !2448
  %12 = load i32, i32* %type5, align 4, !dbg !2448
  %cmp = icmp eq i32 %12, 4, !dbg !2449
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !2450

land.lhs.true:                                    ; preds = %if.then4
  %13 = load i32, i32* %type.addr, align 4, !dbg !2451
  %call6 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %13), !dbg !2452
  %cmp7 = icmp ne i32 %call6, 0, !dbg !2453
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !2454

if.then8:                                         ; preds = %land.lhs.true
  %14 = load i8**, i8*** %error_str.addr, align 8, !dbg !2455
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.51, i64 0, i64 0), i8** %14, align 8, !dbg !2457
  store i32 0, i32* %retval, align 4, !dbg !2458
  br label %return, !dbg !2458

if.end9:                                          ; preds = %land.lhs.true, %if.then4
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2459
  %16 = load %struct.Sequence*, %struct.Sequence** %activeseq.addr, align 8, !dbg !2461
  %cmp10 = icmp ne %struct.Sequence* %15, %16, !dbg !2462
  br i1 %cmp10, label %land.lhs.true11, label %if.end25, !dbg !2463

land.lhs.true11:                                  ; preds = %if.end9
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2464
  %18 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2465
  %cmp12 = icmp ne %struct.Sequence* %17, %18, !dbg !2466
  br i1 %cmp12, label %if.then13, label %if.end25, !dbg !2467

if.then13:                                        ; preds = %land.lhs.true11
  %19 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2468
  %cmp14 = icmp eq %struct.Sequence* %19, null, !dbg !2471
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !2472

if.then15:                                        ; preds = %if.then13
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2473
  store %struct.Sequence* %20, %struct.Sequence** %seq2, align 8, !dbg !2474
  br label %if.end24, !dbg !2475

if.else:                                          ; preds = %if.then13
  %21 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2476
  %cmp16 = icmp eq %struct.Sequence* %21, null, !dbg !2478
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !2479

if.then17:                                        ; preds = %if.else
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2480
  store %struct.Sequence* %22, %struct.Sequence** %seq1, align 8, !dbg !2481
  br label %if.end23, !dbg !2482

if.else18:                                        ; preds = %if.else
  %23 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2483
  %cmp19 = icmp eq %struct.Sequence* %23, null, !dbg !2485
  br i1 %cmp19, label %if.then20, label %if.else21, !dbg !2486

if.then20:                                        ; preds = %if.else18
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2487
  store %struct.Sequence* %24, %struct.Sequence** %seq3, align 8, !dbg !2488
  br label %if.end22, !dbg !2489

if.else21:                                        ; preds = %if.else18
  %25 = load i8**, i8*** %error_str.addr, align 8, !dbg !2490
  store i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.52, i64 0, i64 0), i8** %25, align 8, !dbg !2492
  store i32 0, i32* %retval, align 4, !dbg !2493
  br label %return, !dbg !2493

if.end22:                                         ; preds = %if.then20
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then17
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then15
  br label %if.end25, !dbg !2494

if.end25:                                         ; preds = %if.end24, %land.lhs.true11, %if.end9
  br label %if.end26, !dbg !2495

if.end26:                                         ; preds = %if.end25, %for.body
  br label %for.inc, !dbg !2496

for.inc:                                          ; preds = %if.end26
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2497
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 0, !dbg !2498
  %27 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !2498
  store %struct.Sequence* %27, %struct.Sequence** %seq, align 8, !dbg !2499
  br label %for.cond, !dbg !2500, !llvm.loop !2501

for.end:                                          ; preds = %for.cond
  %28 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2503
  %cmp27 = icmp ne %struct.Sequence* %28, null, !dbg !2505
  br i1 %cmp27, label %land.lhs.true28, label %if.end31, !dbg !2506

land.lhs.true28:                                  ; preds = %for.end
  %29 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2507
  %cmp29 = icmp ne %struct.Sequence* %29, null, !dbg !2508
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !2509

if.then30:                                        ; preds = %land.lhs.true28
  call void @llvm.dbg.declare(metadata %struct.Sequence** %tmp, metadata !2510, metadata !DIExpression()), !dbg !2512
  %30 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2513
  store %struct.Sequence* %30, %struct.Sequence** %tmp, align 8, !dbg !2512
  %31 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2514
  store %struct.Sequence* %31, %struct.Sequence** %seq2, align 8, !dbg !2515
  %32 = load %struct.Sequence*, %struct.Sequence** %tmp, align 8, !dbg !2516
  store %struct.Sequence* %32, %struct.Sequence** %seq3, align 8, !dbg !2517
  br label %if.end31, !dbg !2518

if.end31:                                         ; preds = %if.then30, %land.lhs.true28, %for.end
  %33 = load i32, i32* %type.addr, align 4, !dbg !2519
  %call32 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %33), !dbg !2520
  switch i32 %call32, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb33
    i32 2, label %sw.bb43
  ], !dbg !2521

sw.bb:                                            ; preds = %if.end31
  %34 = load %struct.Sequence**, %struct.Sequence*** %selseq3.addr, align 8, !dbg !2522
  store %struct.Sequence* null, %struct.Sequence** %34, align 8, !dbg !2524
  %35 = load %struct.Sequence**, %struct.Sequence*** %selseq2.addr, align 8, !dbg !2525
  store %struct.Sequence* null, %struct.Sequence** %35, align 8, !dbg !2526
  %36 = load %struct.Sequence**, %struct.Sequence*** %selseq1.addr, align 8, !dbg !2527
  store %struct.Sequence* null, %struct.Sequence** %36, align 8, !dbg !2528
  store i32 1, i32* %retval, align 4, !dbg !2529
  br label %return, !dbg !2529

sw.bb33:                                          ; preds = %if.end31
  %37 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2530
  %cmp34 = icmp eq %struct.Sequence* %37, null, !dbg !2532
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !2533

if.then35:                                        ; preds = %sw.bb33
  %38 = load i8**, i8*** %error_str.addr, align 8, !dbg !2534
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.53, i64 0, i64 0), i8** %38, align 8, !dbg !2536
  store i32 0, i32* %retval, align 4, !dbg !2537
  br label %return, !dbg !2537

if.end36:                                         ; preds = %sw.bb33
  %39 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2538
  %cmp37 = icmp eq %struct.Sequence* %39, null, !dbg !2540
  br i1 %cmp37, label %if.then38, label %if.end39, !dbg !2541

if.then38:                                        ; preds = %if.end36
  %40 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2542
  store %struct.Sequence* %40, %struct.Sequence** %seq1, align 8, !dbg !2543
  br label %if.end39, !dbg !2544

if.end39:                                         ; preds = %if.then38, %if.end36
  %41 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2545
  %cmp40 = icmp eq %struct.Sequence* %41, null, !dbg !2547
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !2548

if.then41:                                        ; preds = %if.end39
  %42 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2549
  store %struct.Sequence* %42, %struct.Sequence** %seq3, align 8, !dbg !2550
  br label %if.end42, !dbg !2551

if.end42:                                         ; preds = %if.then41, %if.end39
  br label %sw.bb43, !dbg !2552

sw.bb43:                                          ; preds = %if.end31, %if.end42
  %43 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2553
  %cmp44 = icmp eq %struct.Sequence* %43, null, !dbg !2555
  br i1 %cmp44, label %if.then46, label %lor.lhs.false, !dbg !2556

lor.lhs.false:                                    ; preds = %sw.bb43
  %44 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2557
  %cmp45 = icmp eq %struct.Sequence* %44, null, !dbg !2558
  br i1 %cmp45, label %if.then46, label %if.end47, !dbg !2559

if.then46:                                        ; preds = %lor.lhs.false, %sw.bb43
  %45 = load i8**, i8*** %error_str.addr, align 8, !dbg !2560
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.54, i64 0, i64 0), i8** %45, align 8, !dbg !2562
  store i32 0, i32* %retval, align 4, !dbg !2563
  br label %return, !dbg !2563

if.end47:                                         ; preds = %lor.lhs.false
  %46 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2564
  %cmp48 = icmp eq %struct.Sequence* %46, null, !dbg !2566
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !2567

if.then49:                                        ; preds = %if.end47
  %47 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2568
  store %struct.Sequence* %47, %struct.Sequence** %seq3, align 8, !dbg !2569
  br label %if.end50, !dbg !2570

if.end50:                                         ; preds = %if.then49, %if.end47
  br label %sw.epilog, !dbg !2571

sw.epilog:                                        ; preds = %if.end31, %if.end50
  %48 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2572
  %cmp51 = icmp eq %struct.Sequence* %48, null, !dbg !2574
  br i1 %cmp51, label %land.lhs.true52, label %if.end57, !dbg !2575

land.lhs.true52:                                  ; preds = %sw.epilog
  %49 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2576
  %cmp53 = icmp eq %struct.Sequence* %49, null, !dbg !2577
  br i1 %cmp53, label %land.lhs.true54, label %if.end57, !dbg !2578

land.lhs.true54:                                  ; preds = %land.lhs.true52
  %50 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2579
  %cmp55 = icmp eq %struct.Sequence* %50, null, !dbg !2580
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !2581

if.then56:                                        ; preds = %land.lhs.true54
  %51 = load i8**, i8*** %error_str.addr, align 8, !dbg !2582
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.55, i64 0, i64 0), i8** %51, align 8, !dbg !2584
  store i32 0, i32* %retval, align 4, !dbg !2585
  br label %return, !dbg !2585

if.end57:                                         ; preds = %land.lhs.true54, %land.lhs.true52, %sw.epilog
  %52 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !2586
  %53 = load %struct.Sequence**, %struct.Sequence*** %selseq1.addr, align 8, !dbg !2587
  store %struct.Sequence* %52, %struct.Sequence** %53, align 8, !dbg !2588
  %54 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !2589
  %55 = load %struct.Sequence**, %struct.Sequence*** %selseq2.addr, align 8, !dbg !2590
  store %struct.Sequence* %54, %struct.Sequence** %55, align 8, !dbg !2591
  %56 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !2592
  %57 = load %struct.Sequence**, %struct.Sequence*** %selseq3.addr, align 8, !dbg !2593
  store %struct.Sequence* %56, %struct.Sequence** %57, align 8, !dbg !2594
  store i32 1, i32* %retval, align 4, !dbg !2595
  br label %return, !dbg !2595

return:                                           ; preds = %if.end57, %if.then56, %if.then46, %if.then35, %sw.bb, %if.else21, %if.then8
  %58 = load i32, i32* %retval, align 4, !dbg !2596
  ret i32 %58, !dbg !2596
}

declare dso_local %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene*) #2

declare dso_local i32 @BKE_sequence_effect_get_num_inputs(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_gap_remove(%struct.wmOperatorType* %ot) #0 !dbg !2597 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !2723, metadata !DIExpression()), !dbg !2724
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2725
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !2726
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.56, i64 0, i64 0), i8** %name, align 8, !dbg !2727
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2728
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !2729
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.57, i64 0, i64 0), i8** %idname, align 8, !dbg !2730
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2731
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !2732
  store i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.58, i64 0, i64 0), i8** %description, align 8, !dbg !2733
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2734
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !2735
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_gap_remove_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !2736
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2737
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !2738
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !2739
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2740
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !2741
  store i16 3, i16* %flag, align 8, !dbg !2742
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2743
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !2744
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !2744
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !2743
  %call = call %struct.PropertyRNA* @RNA_def_boolean(i8* %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.61, i64 0, i64 0)), !dbg !2745
  ret void, !dbg !2746
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_gap_remove_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !2747 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %rectf = alloca %struct.rctf, align 4
  %cfra = alloca i32, align 4
  %efra = alloca i32, align 4
  %sfra = alloca i32, align 4
  %first = alloca i8, align 1
  %done = alloca i8, align 1
  %do_all = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2752, metadata !DIExpression()), !dbg !2753
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !2754, metadata !DIExpression()), !dbg !2755
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !2756, metadata !DIExpression()), !dbg !2757
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2758
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !2759
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !2757
  call void @llvm.dbg.declare(metadata %struct.rctf* %rectf, metadata !2760, metadata !DIExpression()), !dbg !2761
  call void @llvm.dbg.declare(metadata i32* %cfra, metadata !2762, metadata !DIExpression()), !dbg !2763
  call void @llvm.dbg.declare(metadata i32* %efra, metadata !2764, metadata !DIExpression()), !dbg !2765
  call void @llvm.dbg.declare(metadata i32* %sfra, metadata !2766, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.declare(metadata i8* %first, metadata !2768, metadata !DIExpression()), !dbg !2769
  store i8 0, i8* %first, align 1, !dbg !2769
  call void @llvm.dbg.declare(metadata i8* %done, metadata !2770, metadata !DIExpression()), !dbg !2771
  call void @llvm.dbg.declare(metadata i8* %do_all, metadata !2772, metadata !DIExpression()), !dbg !2773
  %1 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !2774
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %1, i32 0, i32 7, !dbg !2775
  %2 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !2775
  %call1 = call i32 @RNA_boolean_get(%struct.PointerRNA* %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i64 0, i64 0)), !dbg !2776
  %conv = trunc i32 %call1 to i8, !dbg !2776
  store i8 %conv, i8* %do_all, align 1, !dbg !2773
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2777
  call void @boundbox_seq(%struct.Scene* %3, %struct.rctf* %rectf), !dbg !2778
  %xmin = getelementptr inbounds %struct.rctf, %struct.rctf* %rectf, i32 0, i32 0, !dbg !2779
  %4 = load float, float* %xmin, align 4, !dbg !2779
  %conv2 = fptosi float %4 to i32, !dbg !2780
  store i32 %conv2, i32* %sfra, align 4, !dbg !2781
  %xmax = getelementptr inbounds %struct.rctf, %struct.rctf* %rectf, i32 0, i32 1, !dbg !2782
  %5 = load float, float* %xmax, align 4, !dbg !2782
  %conv3 = fptosi float %5 to i32, !dbg !2783
  store i32 %conv3, i32* %efra, align 4, !dbg !2784
  %6 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2785
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %6, i32 0, i32 22, !dbg !2785
  %cfra4 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !2785
  %7 = load i32, i32* %cfra4, align 8, !dbg !2785
  store i32 %7, i32* %cfra, align 4, !dbg !2787
  br label %for.cond, !dbg !2788

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %cfra, align 4, !dbg !2789
  %9 = load i32, i32* %sfra, align 4, !dbg !2791
  %cmp = icmp sge i32 %8, %9, !dbg !2792
  br i1 %cmp, label %for.body, label %for.end, !dbg !2793

for.body:                                         ; preds = %for.cond
  %10 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2794
  %11 = load i32, i32* %cfra, align 4, !dbg !2797
  %call6 = call i32 @BKE_sequencer_evaluate_frame(%struct.Scene* %10, i32 %11), !dbg !2798
  %tobool = icmp ne i32 %call6, 0, !dbg !2798
  br i1 %tobool, label %if.then, label %if.end, !dbg !2799

if.then:                                          ; preds = %for.body
  store i8 1, i8* %first, align 1, !dbg !2800
  br label %for.end, !dbg !2802

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2803

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %cfra, align 4, !dbg !2804
  %dec = add nsw i32 %12, -1, !dbg !2804
  store i32 %dec, i32* %cfra, align 4, !dbg !2804
  br label %for.cond, !dbg !2805, !llvm.loop !2806

for.end:                                          ; preds = %if.then, %for.cond
  br label %for.cond7, !dbg !2808

for.cond7:                                        ; preds = %for.inc42, %for.end
  %13 = load i32, i32* %cfra, align 4, !dbg !2809
  %14 = load i32, i32* %efra, align 4, !dbg !2812
  %cmp8 = icmp slt i32 %13, %14, !dbg !2813
  br i1 %cmp8, label %for.body10, label %for.end43, !dbg !2814

for.body10:                                       ; preds = %for.cond7
  %15 = load i8, i8* %first, align 1, !dbg !2815
  %conv11 = zext i8 %15 to i32, !dbg !2815
  %cmp12 = icmp eq i32 %conv11, 0, !dbg !2818
  br i1 %cmp12, label %if.then14, label %if.else, !dbg !2819

if.then14:                                        ; preds = %for.body10
  %16 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2820
  %17 = load i32, i32* %cfra, align 4, !dbg !2823
  %call15 = call i32 @BKE_sequencer_evaluate_frame(%struct.Scene* %16, i32 %17), !dbg !2824
  %tobool16 = icmp ne i32 %call15, 0, !dbg !2824
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !2825

if.then17:                                        ; preds = %if.then14
  store i8 1, i8* %first, align 1, !dbg !2826
  br label %if.end18, !dbg !2827

if.end18:                                         ; preds = %if.then17, %if.then14
  br label %if.end41, !dbg !2828

if.else:                                          ; preds = %for.body10
  %18 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2829
  %19 = load i32, i32* %cfra, align 4, !dbg !2831
  %call19 = call i32 @BKE_sequencer_evaluate_frame(%struct.Scene* %18, i32 %19), !dbg !2832
  %cmp20 = icmp eq i32 %call19, 0, !dbg !2833
  br i1 %cmp20, label %if.then22, label %if.end40, !dbg !2834

if.then22:                                        ; preds = %if.else
  store i8 1, i8* %done, align 1, !dbg !2835
  br label %while.cond, !dbg !2837

while.cond:                                       ; preds = %if.end31, %if.then22
  %20 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2838
  %21 = load i32, i32* %cfra, align 4, !dbg !2839
  %call23 = call i32 @BKE_sequencer_evaluate_frame(%struct.Scene* %20, i32 %21), !dbg !2840
  %cmp24 = icmp eq i32 %call23, 0, !dbg !2841
  br i1 %cmp24, label %while.body, label %while.end, !dbg !2837

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2842
  %23 = load i32, i32* %cfra, align 4, !dbg !2844
  %call26 = call zeroext i8 @sequence_offset_after_frame(%struct.Scene* %22, i32 -1, i32 %23), !dbg !2845
  store i8 %call26, i8* %done, align 1, !dbg !2846
  %24 = load i8, i8* %done, align 1, !dbg !2847
  %conv27 = zext i8 %24 to i32, !dbg !2847
  %cmp28 = icmp eq i32 %conv27, 0, !dbg !2849
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !2850

if.then30:                                        ; preds = %while.body
  br label %while.end, !dbg !2851

if.end31:                                         ; preds = %while.body
  br label %while.cond, !dbg !2837, !llvm.loop !2852

while.end:                                        ; preds = %if.then30, %while.cond
  %25 = load i8, i8* %done, align 1, !dbg !2854
  %conv32 = zext i8 %25 to i32, !dbg !2854
  %cmp33 = icmp eq i32 %conv32, 0, !dbg !2856
  br i1 %cmp33, label %if.then38, label %lor.lhs.false, !dbg !2857

lor.lhs.false:                                    ; preds = %while.end
  %26 = load i8, i8* %do_all, align 1, !dbg !2858
  %conv35 = zext i8 %26 to i32, !dbg !2858
  %cmp36 = icmp eq i32 %conv35, 0, !dbg !2859
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !2860

if.then38:                                        ; preds = %lor.lhs.false, %while.end
  br label %for.end43, !dbg !2861

if.end39:                                         ; preds = %lor.lhs.false
  br label %if.end40, !dbg !2862

if.end40:                                         ; preds = %if.end39, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end18
  br label %for.inc42, !dbg !2863

for.inc42:                                        ; preds = %if.end41
  %27 = load i32, i32* %cfra, align 4, !dbg !2864
  %inc = add nsw i32 %27, 1, !dbg !2864
  store i32 %inc, i32* %cfra, align 4, !dbg !2864
  br label %for.cond7, !dbg !2865, !llvm.loop !2866

for.end43:                                        ; preds = %if.then38, %for.cond7
  %28 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2868
  %29 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2869
  %30 = bitcast %struct.Scene* %29 to i8*, !dbg !2869
  call void @WM_event_add_notifier(%struct.bContext* %28, i32 67502080, i8* %30), !dbg !2870
  ret i32 4, !dbg !2871
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sequencer_edit_poll(%struct.bContext* %C) #0 !dbg !2872 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2873, metadata !DIExpression()), !dbg !2874
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2875
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !2876
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %call, i8 zeroext 0), !dbg !2877
  %cmp = icmp ne %struct.Editing* %call1, null, !dbg !2878
  %conv = zext i1 %cmp to i32, !dbg !2878
  ret i32 %conv, !dbg !2879
}

declare dso_local %struct.PropertyRNA* @RNA_def_boolean(i8*, i8*, i32, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_gap_insert(%struct.wmOperatorType* %ot) #0 !dbg !2880 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !2881, metadata !DIExpression()), !dbg !2882
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2883
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !2884
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i64 0, i64 0), i8** %name, align 8, !dbg !2885
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2886
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !2887
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.63, i64 0, i64 0), i8** %idname, align 8, !dbg !2888
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2889
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !2890
  store i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.64, i64 0, i64 0), i8** %description, align 8, !dbg !2891
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2892
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !2893
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_gap_insert_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !2894
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2895
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !2896
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !2897
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2898
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !2899
  store i16 3, i16* %flag, align 8, !dbg !2900
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2901
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !2902
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !2902
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !2901
  %call = call %struct.PropertyRNA* @RNA_def_int(i8* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i64 0, i64 0), i32 10, i32 0, i32 2147483647, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.67, i64 0, i64 0), i32 0, i32 1000), !dbg !2903
  ret void, !dbg !2904
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_gap_insert_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !2905 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %frames = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2906, metadata !DIExpression()), !dbg !2907
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !2908, metadata !DIExpression()), !dbg !2909
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !2910, metadata !DIExpression()), !dbg !2911
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2912
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !2913
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !2911
  call void @llvm.dbg.declare(metadata i32* %frames, metadata !2914, metadata !DIExpression()), !dbg !2915
  %1 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !2916
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %1, i32 0, i32 7, !dbg !2917
  %2 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !2917
  %call1 = call i32 @RNA_int_get(%struct.PointerRNA* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.65, i64 0, i64 0)), !dbg !2918
  store i32 %call1, i32* %frames, align 4, !dbg !2915
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2919
  %4 = load i32, i32* %frames, align 4, !dbg !2920
  %5 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2921
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %5, i32 0, i32 22, !dbg !2921
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !2921
  %6 = load i32, i32* %cfra, align 8, !dbg !2921
  %call2 = call zeroext i8 @sequence_offset_after_frame(%struct.Scene* %3, i32 %4, i32 %6), !dbg !2922
  %7 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2923
  %8 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !2924
  %9 = bitcast %struct.Scene* %8 to i8*, !dbg !2924
  call void @WM_event_add_notifier(%struct.bContext* %7, i32 67502080, i8* %9), !dbg !2925
  ret i32 4, !dbg !2926
}

declare dso_local %struct.PropertyRNA* @RNA_def_int(i8*, i8*, i32, i32, i32, i8*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sequencer_strip_has_path_poll(%struct.bContext* %C) #0 !dbg !2927 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2928, metadata !DIExpression()), !dbg !2929
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2930, metadata !DIExpression()), !dbg !2931
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !2932, metadata !DIExpression()), !dbg !2933
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2934
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !2935
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %call, i8 zeroext 0), !dbg !2936
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !2937
  %cmp = icmp ne %struct.Editing* %call1, null, !dbg !2938
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !2939

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2940
  %act_seq = getelementptr inbounds %struct.Editing, %struct.Editing* %1, i32 0, i32 3, !dbg !2941
  %2 = load %struct.Sequence*, %struct.Sequence** %act_seq, align 8, !dbg !2941
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !2942
  %cmp2 = icmp ne %struct.Sequence* %2, null, !dbg !2943
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !2944

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2945
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 6, !dbg !2945
  %4 = load i32, i32* %type, align 4, !dbg !2945
  %cmp3 = icmp eq i32 %4, 3, !dbg !2945
  br i1 %cmp3, label %lor.end, label %lor.lhs.false, !dbg !2945

lor.lhs.false:                                    ; preds = %land.rhs
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2945
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !2945
  %6 = load i32, i32* %type4, align 4, !dbg !2945
  %cmp5 = icmp eq i32 %6, 0, !dbg !2945
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !2945

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2945
  %type7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !2945
  %8 = load i32, i32* %type7, align 4, !dbg !2945
  %cmp8 = icmp eq i32 %8, 4, !dbg !2945
  br i1 %cmp8, label %lor.end, label %lor.rhs, !dbg !2945

lor.rhs:                                          ; preds = %lor.lhs.false6
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !2945
  %type9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 6, !dbg !2945
  %10 = load i32, i32* %type9, align 4, !dbg !2945
  %cmp10 = icmp eq i32 %10, 5, !dbg !2945
  br label %lor.end, !dbg !2945

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false6, %lor.lhs.false, %land.rhs
  %11 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp10, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %11, %lor.end ], !dbg !2946
  %land.ext = zext i1 %12 to i32, !dbg !2944
  ret i32 %land.ext, !dbg !2947
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sequencer_view_poll(%struct.bContext* %C) #0 !dbg !2948 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %sseq = alloca %struct.SpaceSeq*, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !2949, metadata !DIExpression()), !dbg !2950
  call void @llvm.dbg.declare(metadata %struct.SpaceSeq** %sseq, metadata !2951, metadata !DIExpression()), !dbg !2952
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2953
  %call = call %struct.SpaceSeq* @CTX_wm_space_seq(%struct.bContext* %0), !dbg !2954
  store %struct.SpaceSeq* %call, %struct.SpaceSeq** %sseq, align 8, !dbg !2952
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !2955, metadata !DIExpression()), !dbg !2956
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !2957
  %call1 = call %struct.Scene* @CTX_data_scene(%struct.bContext* %1), !dbg !2958
  %call2 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %call1, i8 zeroext 0), !dbg !2959
  store %struct.Editing* %call2, %struct.Editing** %ed, align 8, !dbg !2956
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !2960
  %tobool = icmp ne %struct.Editing* %2, null, !dbg !2960
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2962

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !2963
  %tobool3 = icmp ne %struct.SpaceSeq* %3, null, !dbg !2963
  br i1 %tobool3, label %land.lhs.true4, label %if.end, !dbg !2964

land.lhs.true4:                                   ; preds = %land.lhs.true
  %4 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !2965
  %mainb = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %4, i32 0, i32 9, !dbg !2966
  %5 = load i16, i16* %mainb, align 8, !dbg !2966
  %conv = sext i16 %5 to i32, !dbg !2965
  %cmp = icmp eq i32 %conv, 1, !dbg !2967
  br i1 %cmp, label %if.then, label %if.end, !dbg !2968

if.then:                                          ; preds = %land.lhs.true4
  store i32 1, i32* %retval, align 4, !dbg !2969
  br label %return, !dbg !2969

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !2970
  br label %return, !dbg !2970

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !2971
  ret i32 %6, !dbg !2971
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_snap(%struct.wmOperatorType* %ot) #0 !dbg !2972 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !2973, metadata !DIExpression()), !dbg !2974
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2975
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !2976
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i64 0, i64 0), i8** %name, align 8, !dbg !2977
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2978
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !2979
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69, i64 0, i64 0), i8** %idname, align 8, !dbg !2980
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2981
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !2982
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.70, i64 0, i64 0), i8** %description, align 8, !dbg !2983
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2984
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 6, !dbg !2985
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_snap_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !2986
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2987
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 4, !dbg !2988
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_snap_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !2989
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2990
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 9, !dbg !2991
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !2992
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2993
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 19, !dbg !2994
  store i16 3, i16* %flag, align 8, !dbg !2995
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !2996
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %7, i32 0, i32 11, !dbg !2997
  %8 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !2997
  %9 = bitcast %struct.StructRNA* %8 to i8*, !dbg !2996
  %call = call %struct.PropertyRNA* @RNA_def_int(i8* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0), i32 0, i32 -2147483648, i32 2147483647, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.70, i64 0, i64 0), i32 -2147483648, i32 2147483647), !dbg !2998
  ret void, !dbg !2999
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_snap_invoke(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %UNUSED_event) #0 !dbg !3000 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %UNUSED_event.addr = alloca %struct.wmEvent*, align 8
  %scene = alloca %struct.Scene*, align 8
  %snap_frame = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3006, metadata !DIExpression()), !dbg !3007
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3008, metadata !DIExpression()), !dbg !3009
  store %struct.wmEvent* %UNUSED_event, %struct.wmEvent** %UNUSED_event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %UNUSED_event.addr, metadata !3010, metadata !DIExpression()), !dbg !3011
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3012, metadata !DIExpression()), !dbg !3013
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3014
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3015
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3013
  call void @llvm.dbg.declare(metadata i32* %snap_frame, metadata !3016, metadata !DIExpression()), !dbg !3017
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3018
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %1, i32 0, i32 22, !dbg !3018
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !3018
  %2 = load i32, i32* %cfra, align 8, !dbg !3018
  store i32 %2, i32* %snap_frame, align 4, !dbg !3019
  %3 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3020
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %3, i32 0, i32 7, !dbg !3021
  %4 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3021
  %5 = load i32, i32* %snap_frame, align 4, !dbg !3022
  call void @RNA_int_set(%struct.PointerRNA* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0), i32 %5), !dbg !3023
  %6 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3024
  %7 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3025
  %call1 = call i32 @sequencer_snap_exec(%struct.bContext* %6, %struct.wmOperator* %7), !dbg !3026
  ret i32 %call1, !dbg !3027
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_snap_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !3028 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %snap_frame = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3029, metadata !DIExpression()), !dbg !3030
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3031, metadata !DIExpression()), !dbg !3032
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3033, metadata !DIExpression()), !dbg !3034
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3035
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3036
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3034
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3037, metadata !DIExpression()), !dbg !3038
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3039
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !3040
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !3038
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !3041, metadata !DIExpression()), !dbg !3042
  call void @llvm.dbg.declare(metadata i32* %snap_frame, metadata !3043, metadata !DIExpression()), !dbg !3044
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3045
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !3046
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3046
  %call2 = call i32 @RNA_int_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0)), !dbg !3047
  store i32 %call2, i32* %snap_frame, align 4, !dbg !3048
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3049
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !3051
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3051
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !3052
  %6 = load i8*, i8** %first, align 8, !dbg !3052
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !3049
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !3053
  br label %for.cond, !dbg !3054

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3055
  %tobool = icmp ne %struct.Sequence* %8, null, !dbg !3057
  br i1 %tobool, label %for.body, label %for.end, !dbg !3057

for.body:                                         ; preds = %for.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3058
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !3061
  %10 = load i32, i32* %flag, align 8, !dbg !3061
  %and = and i32 %10, 1, !dbg !3062
  %tobool3 = icmp ne i32 %and, 0, !dbg !3062
  br i1 %tobool3, label %land.lhs.true, label %if.end27, !dbg !3063

land.lhs.true:                                    ; preds = %for.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3064
  %depth = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 14, !dbg !3065
  %12 = load i32, i32* %depth, align 4, !dbg !3065
  %cmp = icmp eq i32 %12, 0, !dbg !3066
  br i1 %cmp, label %land.lhs.true4, label %land.lhs.true8, !dbg !3067

land.lhs.true4:                                   ; preds = %land.lhs.true
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3068
  %flag5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 5, !dbg !3069
  %14 = load i32, i32* %flag5, align 8, !dbg !3069
  %and6 = and i32 %14, 16384, !dbg !3070
  %tobool7 = icmp ne i32 %and6, 0, !dbg !3070
  br i1 %tobool7, label %if.end27, label %land.lhs.true8, !dbg !3071

land.lhs.true8:                                   ; preds = %land.lhs.true4, %land.lhs.true
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3072
  %call9 = call zeroext i8 @BKE_sequence_tx_test(%struct.Sequence* %15), !dbg !3073
  %conv = zext i8 %call9 to i32, !dbg !3073
  %tobool10 = icmp ne i32 %conv, 0, !dbg !3073
  br i1 %tobool10, label %if.then, label %if.end27, !dbg !3074

if.then:                                          ; preds = %land.lhs.true8
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3075
  %flag11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 5, !dbg !3078
  %17 = load i32, i32* %flag11, align 8, !dbg !3078
  %and12 = and i32 %17, 6, !dbg !3079
  %cmp13 = icmp eq i32 %and12, 0, !dbg !3080
  br i1 %cmp13, label %if.then15, label %if.else, !dbg !3081

if.then15:                                        ; preds = %if.then
  %18 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3082
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3084
  %20 = load i32, i32* %snap_frame, align 4, !dbg !3085
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3086
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 9, !dbg !3087
  %22 = load i32, i32* %startofs, align 8, !dbg !3087
  %sub = sub nsw i32 %20, %22, !dbg !3088
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3089
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 11, !dbg !3090
  %24 = load i32, i32* %startstill, align 8, !dbg !3090
  %add = add nsw i32 %sub, %24, !dbg !3091
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3092
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 8, !dbg !3093
  %26 = load i32, i32* %start, align 4, !dbg !3093
  %sub16 = sub nsw i32 %add, %26, !dbg !3094
  call void @BKE_sequence_translate(%struct.Scene* %18, %struct.Sequence* %19, i32 %sub16), !dbg !3095
  br label %if.end26, !dbg !3096

if.else:                                          ; preds = %if.then
  %27 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3097
  %flag17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 5, !dbg !3100
  %28 = load i32, i32* %flag17, align 8, !dbg !3100
  %and18 = and i32 %28, 2, !dbg !3101
  %tobool19 = icmp ne i32 %and18, 0, !dbg !3101
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !3102

if.then20:                                        ; preds = %if.else
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3103
  %30 = load i32, i32* %snap_frame, align 4, !dbg !3105
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %29, i32 %30), !dbg !3106
  br label %if.end, !dbg !3107

if.else21:                                        ; preds = %if.else
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3108
  %32 = load i32, i32* %snap_frame, align 4, !dbg !3110
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %31, i32 %32), !dbg !3111
  br label %if.end

if.end:                                           ; preds = %if.else21, %if.then20
  %33 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3112
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3113
  %flag22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 5, !dbg !3114
  %35 = load i32, i32* %flag22, align 8, !dbg !3114
  %and23 = and i32 %35, 2, !dbg !3115
  %36 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3116
  %flag24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 5, !dbg !3117
  %37 = load i32, i32* %flag24, align 8, !dbg !3117
  %and25 = and i32 %37, 4, !dbg !3118
  call void @BKE_sequence_tx_handle_xlimits(%struct.Sequence* %33, i32 %and23, i32 %and25), !dbg !3119
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then15
  %38 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3120
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3121
  call void @BKE_sequence_calc(%struct.Scene* %38, %struct.Sequence* %39), !dbg !3122
  br label %if.end27, !dbg !3123

if.end27:                                         ; preds = %if.end26, %land.lhs.true8, %land.lhs.true4, %for.body
  br label %for.inc, !dbg !3124

for.inc:                                          ; preds = %if.end27
  %40 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3125
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 0, !dbg !3126
  %41 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !3126
  store %struct.Sequence* %41, %struct.Sequence** %seq, align 8, !dbg !3127
  br label %for.cond, !dbg !3128, !llvm.loop !3129

for.end:                                          ; preds = %for.cond
  %42 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3131
  %seqbasep28 = getelementptr inbounds %struct.Editing, %struct.Editing* %42, i32 0, i32 0, !dbg !3133
  %43 = load %struct.ListBase*, %struct.ListBase** %seqbasep28, align 8, !dbg !3133
  %first29 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %43, i32 0, i32 0, !dbg !3134
  %44 = load i8*, i8** %first29, align 8, !dbg !3134
  %45 = bitcast i8* %44 to %struct.Sequence*, !dbg !3131
  store %struct.Sequence* %45, %struct.Sequence** %seq, align 8, !dbg !3135
  br label %for.cond30, !dbg !3136

for.cond30:                                       ; preds = %for.inc86, %for.end
  %46 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3137
  %tobool31 = icmp ne %struct.Sequence* %46, null, !dbg !3139
  br i1 %tobool31, label %for.body32, label %for.end88, !dbg !3139

for.body32:                                       ; preds = %for.cond30
  %47 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3140
  %flag33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 5, !dbg !3143
  %48 = load i32, i32* %flag33, align 8, !dbg !3143
  %and34 = and i32 %48, 1, !dbg !3144
  %tobool35 = icmp ne i32 %and34, 0, !dbg !3144
  br i1 %tobool35, label %land.lhs.true36, label %if.else54, !dbg !3145

land.lhs.true36:                                  ; preds = %for.body32
  %49 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3146
  %depth37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 14, !dbg !3147
  %50 = load i32, i32* %depth37, align 4, !dbg !3147
  %cmp38 = icmp eq i32 %50, 0, !dbg !3148
  br i1 %cmp38, label %land.lhs.true40, label %if.then44, !dbg !3149

land.lhs.true40:                                  ; preds = %land.lhs.true36
  %51 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3150
  %flag41 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 5, !dbg !3151
  %52 = load i32, i32* %flag41, align 8, !dbg !3151
  %and42 = and i32 %52, 16384, !dbg !3152
  %tobool43 = icmp ne i32 %and42, 0, !dbg !3152
  br i1 %tobool43, label %if.else54, label %if.then44, !dbg !3153

if.then44:                                        ; preds = %land.lhs.true40, %land.lhs.true36
  %53 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3154
  %flag45 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 5, !dbg !3156
  %54 = load i32, i32* %flag45, align 8, !dbg !3157
  %and46 = and i32 %54, -9, !dbg !3157
  store i32 %and46, i32* %flag45, align 8, !dbg !3157
  %55 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3158
  %seqbasep47 = getelementptr inbounds %struct.Editing, %struct.Editing* %55, i32 0, i32 0, !dbg !3160
  %56 = load %struct.ListBase*, %struct.ListBase** %seqbasep47, align 8, !dbg !3160
  %57 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3161
  %call48 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %56, %struct.Sequence* %57), !dbg !3162
  %tobool49 = icmp ne i8 %call48, 0, !dbg !3162
  br i1 %tobool49, label %if.then50, label %if.end53, !dbg !3163

if.then50:                                        ; preds = %if.then44
  %58 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3164
  %seqbasep51 = getelementptr inbounds %struct.Editing, %struct.Editing* %58, i32 0, i32 0, !dbg !3166
  %59 = load %struct.ListBase*, %struct.ListBase** %seqbasep51, align 8, !dbg !3166
  %60 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3167
  %61 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3168
  %call52 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %59, %struct.Sequence* %60, %struct.Scene* %61), !dbg !3169
  br label %if.end53, !dbg !3170

if.end53:                                         ; preds = %if.then50, %if.then44
  br label %if.end85, !dbg !3171

if.else54:                                        ; preds = %land.lhs.true40, %for.body32
  %62 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3172
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 6, !dbg !3174
  %63 = load i32, i32* %type, align 4, !dbg !3174
  %and55 = and i32 %63, 8, !dbg !3175
  %tobool56 = icmp ne i32 %and55, 0, !dbg !3175
  br i1 %tobool56, label %if.then57, label %if.end84, !dbg !3176

if.then57:                                        ; preds = %if.else54
  %64 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3177
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 33, !dbg !3180
  %65 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !3180
  %tobool58 = icmp ne %struct.Sequence* %65, null, !dbg !3177
  br i1 %tobool58, label %land.lhs.true59, label %if.else65, !dbg !3181

land.lhs.true59:                                  ; preds = %if.then57
  %66 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3182
  %seq160 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 33, !dbg !3183
  %67 = load %struct.Sequence*, %struct.Sequence** %seq160, align 8, !dbg !3183
  %flag61 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 5, !dbg !3184
  %68 = load i32, i32* %flag61, align 8, !dbg !3184
  %and62 = and i32 %68, 1, !dbg !3185
  %tobool63 = icmp ne i32 %and62, 0, !dbg !3185
  br i1 %tobool63, label %if.then64, label %if.else65, !dbg !3186

if.then64:                                        ; preds = %land.lhs.true59
  %69 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3187
  %70 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3188
  call void @BKE_sequence_calc(%struct.Scene* %69, %struct.Sequence* %70), !dbg !3189
  br label %if.end83, !dbg !3189

if.else65:                                        ; preds = %land.lhs.true59, %if.then57
  %71 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3190
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %71, i32 0, i32 34, !dbg !3192
  %72 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !3192
  %tobool66 = icmp ne %struct.Sequence* %72, null, !dbg !3190
  br i1 %tobool66, label %land.lhs.true67, label %if.else73, !dbg !3193

land.lhs.true67:                                  ; preds = %if.else65
  %73 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3194
  %seq268 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %73, i32 0, i32 34, !dbg !3195
  %74 = load %struct.Sequence*, %struct.Sequence** %seq268, align 8, !dbg !3195
  %flag69 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %74, i32 0, i32 5, !dbg !3196
  %75 = load i32, i32* %flag69, align 8, !dbg !3196
  %and70 = and i32 %75, 1, !dbg !3197
  %tobool71 = icmp ne i32 %and70, 0, !dbg !3197
  br i1 %tobool71, label %if.then72, label %if.else73, !dbg !3198

if.then72:                                        ; preds = %land.lhs.true67
  %76 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3199
  %77 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3200
  call void @BKE_sequence_calc(%struct.Scene* %76, %struct.Sequence* %77), !dbg !3201
  br label %if.end82, !dbg !3201

if.else73:                                        ; preds = %land.lhs.true67, %if.else65
  %78 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3202
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %78, i32 0, i32 35, !dbg !3204
  %79 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !3204
  %tobool74 = icmp ne %struct.Sequence* %79, null, !dbg !3202
  br i1 %tobool74, label %land.lhs.true75, label %if.end81, !dbg !3205

land.lhs.true75:                                  ; preds = %if.else73
  %80 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3206
  %seq376 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %80, i32 0, i32 35, !dbg !3207
  %81 = load %struct.Sequence*, %struct.Sequence** %seq376, align 8, !dbg !3207
  %flag77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %81, i32 0, i32 5, !dbg !3208
  %82 = load i32, i32* %flag77, align 8, !dbg !3208
  %and78 = and i32 %82, 1, !dbg !3209
  %tobool79 = icmp ne i32 %and78, 0, !dbg !3209
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !3210

if.then80:                                        ; preds = %land.lhs.true75
  %83 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3211
  %84 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3212
  call void @BKE_sequence_calc(%struct.Scene* %83, %struct.Sequence* %84), !dbg !3213
  br label %if.end81, !dbg !3213

if.end81:                                         ; preds = %if.then80, %land.lhs.true75, %if.else73
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then72
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then64
  br label %if.end84, !dbg !3214

if.end84:                                         ; preds = %if.end83, %if.else54
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end53
  br label %for.inc86, !dbg !3215

for.inc86:                                        ; preds = %if.end85
  %85 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3216
  %next87 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 0, !dbg !3217
  %86 = load %struct.Sequence*, %struct.Sequence** %next87, align 8, !dbg !3217
  store %struct.Sequence* %86, %struct.Sequence** %seq, align 8, !dbg !3218
  br label %for.cond30, !dbg !3219, !llvm.loop !3220

for.end88:                                        ; preds = %for.cond30
  %87 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3222
  call void @BKE_sequencer_sort(%struct.Scene* %87), !dbg !3223
  %88 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3224
  %89 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3225
  %90 = bitcast %struct.Scene* %89 to i8*, !dbg !3225
  call void @WM_event_add_notifier(%struct.bContext* %88, i32 67502080, i8* %90), !dbg !3226
  ret i32 4, !dbg !3227
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_slip(%struct.wmOperatorType* %ot) #0 !dbg !3228 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !3229, metadata !DIExpression()), !dbg !3230
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3231
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !3232
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73, i64 0, i64 0), i8** %name, align 8, !dbg !3233
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3234
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !3235
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.74, i64 0, i64 0), i8** %idname, align 8, !dbg !3236
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3237
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !3238
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.75, i64 0, i64 0), i8** %description, align 8, !dbg !3239
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3240
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 6, !dbg !3241
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_slip_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !3242
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3243
  %modal = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 8, !dbg !3244
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_slip_modal, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %modal, align 8, !dbg !3245
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3246
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 4, !dbg !3247
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_slip_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !3248
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3249
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 9, !dbg !3250
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !3251
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3252
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %7, i32 0, i32 19, !dbg !3253
  store i16 3, i16* %flag, align 8, !dbg !3254
  %8 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3255
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %8, i32 0, i32 11, !dbg !3256
  %9 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !3256
  %10 = bitcast %struct.StructRNA* %9 to i8*, !dbg !3255
  %call = call %struct.PropertyRNA* @RNA_def_int(i8* %10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i64 0, i64 0), i32 0, i32 -2147483648, i32 2147483647, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.78, i64 0, i64 0), i32 -2147483648, i32 2147483647), !dbg !3257
  ret void, !dbg !3258
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_slip_invoke(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %event) #0 !dbg !3259 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %event.addr = alloca %struct.wmEvent*, align 8
  %data = alloca %struct.SlipData*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %mouseloc = alloca [2 x float], align 4
  %num_seq = alloca i32, align 4
  %i = alloca i32, align 4
  %v2d = alloca %struct.View2D*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3260, metadata !DIExpression()), !dbg !3261
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3262, metadata !DIExpression()), !dbg !3263
  store %struct.wmEvent* %event, %struct.wmEvent** %event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %event.addr, metadata !3264, metadata !DIExpression()), !dbg !3265
  call void @llvm.dbg.declare(metadata %struct.SlipData** %data, metadata !3266, metadata !DIExpression()), !dbg !3267
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3268, metadata !DIExpression()), !dbg !3269
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3270
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3271
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3269
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3272, metadata !DIExpression()), !dbg !3273
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3274
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !3275
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !3273
  call void @llvm.dbg.declare(metadata [2 x float]* %mouseloc, metadata !3276, metadata !DIExpression()), !dbg !3277
  call void @llvm.dbg.declare(metadata i32* %num_seq, metadata !3278, metadata !DIExpression()), !dbg !3279
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3280, metadata !DIExpression()), !dbg !3281
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !3282, metadata !DIExpression()), !dbg !3283
  %2 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3284
  %call2 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %2), !dbg !3285
  store %struct.View2D* %call2, %struct.View2D** %v2d, align 8, !dbg !3283
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3286
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 0, !dbg !3287
  %4 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3287
  %call3 = call i32 @slip_count_sequences_rec(%struct.ListBase* %4, i8 zeroext 1), !dbg !3288
  store i32 %call3, i32* %num_seq, align 4, !dbg !3289
  %5 = load i32, i32* %num_seq, align 4, !dbg !3290
  %cmp = icmp eq i32 %5, 0, !dbg !3292
  br i1 %cmp, label %if.then, label %if.end, !dbg !3293

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !3294
  br label %return, !dbg !3294

if.end:                                           ; preds = %entry
  %6 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3295
  %call4 = call i8* %6(i64 56, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.200, i64 0, i64 0)), !dbg !3295
  %7 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3296
  %customdata = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %7, i32 0, i32 5, !dbg !3297
  store i8* %call4, i8** %customdata, align 8, !dbg !3298
  %8 = bitcast i8* %call4 to %struct.SlipData*, !dbg !3296
  store %struct.SlipData* %8, %struct.SlipData** %data, align 8, !dbg !3299
  %9 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3300
  %10 = load i32, i32* %num_seq, align 4, !dbg !3301
  %conv = sext i32 %10 to i64, !dbg !3301
  %mul = mul i64 %conv, 44, !dbg !3302
  %call5 = call i8* %9(i64 %mul, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.201, i64 0, i64 0)), !dbg !3300
  %11 = bitcast i8* %call5 to %struct.TransSeq*, !dbg !3300
  %12 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3303
  %ts = getelementptr inbounds %struct.SlipData, %struct.SlipData* %12, i32 0, i32 2, !dbg !3304
  store %struct.TransSeq* %11, %struct.TransSeq** %ts, align 8, !dbg !3305
  %13 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3306
  %14 = load i32, i32* %num_seq, align 4, !dbg !3307
  %conv6 = sext i32 %14 to i64, !dbg !3307
  %mul7 = mul i64 %conv6, 8, !dbg !3308
  %call8 = call i8* %13(i64 %mul7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.202, i64 0, i64 0)), !dbg !3306
  %15 = bitcast i8* %call8 to %struct.Sequence**, !dbg !3306
  %16 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3309
  %seq_array = getelementptr inbounds %struct.SlipData, %struct.SlipData* %16, i32 0, i32 3, !dbg !3310
  store %struct.Sequence** %15, %struct.Sequence*** %seq_array, align 8, !dbg !3311
  %17 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3312
  %18 = load i32, i32* %num_seq, align 4, !dbg !3313
  %conv9 = sext i32 %18 to i64, !dbg !3313
  %mul10 = mul i64 %conv9, 1, !dbg !3314
  %call11 = call i8* %17(i64 %mul10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.203, i64 0, i64 0)), !dbg !3312
  %19 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3315
  %trim = getelementptr inbounds %struct.SlipData, %struct.SlipData* %19, i32 0, i32 4, !dbg !3316
  store i8* %call11, i8** %trim, align 8, !dbg !3317
  %20 = load i32, i32* %num_seq, align 4, !dbg !3318
  %21 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3319
  %num_seq12 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %21, i32 0, i32 5, !dbg !3320
  store i32 %20, i32* %num_seq12, align 8, !dbg !3321
  %22 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3322
  %seqbasep13 = getelementptr inbounds %struct.Editing, %struct.Editing* %22, i32 0, i32 0, !dbg !3323
  %23 = load %struct.ListBase*, %struct.ListBase** %seqbasep13, align 8, !dbg !3323
  %24 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3324
  %seq_array14 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %24, i32 0, i32 3, !dbg !3325
  %25 = load %struct.Sequence**, %struct.Sequence*** %seq_array14, align 8, !dbg !3325
  %26 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3326
  %trim15 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %26, i32 0, i32 4, !dbg !3327
  %27 = load i8*, i8** %trim15, align 8, !dbg !3327
  %call16 = call i32 @slip_add_sequences_rec(%struct.ListBase* %23, %struct.Sequence** %25, i8* %27, i32 0, i8 zeroext 1), !dbg !3328
  store i32 0, i32* %i, align 4, !dbg !3329
  br label %for.cond, !dbg !3331

for.cond:                                         ; preds = %for.inc, %if.end
  %28 = load i32, i32* %i, align 4, !dbg !3332
  %29 = load i32, i32* %num_seq, align 4, !dbg !3334
  %cmp17 = icmp slt i32 %28, %29, !dbg !3335
  br i1 %cmp17, label %for.body, label %for.end, !dbg !3336

for.body:                                         ; preds = %for.cond
  %30 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3337
  %ts19 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %30, i32 0, i32 2, !dbg !3339
  %31 = load %struct.TransSeq*, %struct.TransSeq** %ts19, align 8, !dbg !3339
  %32 = load i32, i32* %i, align 4, !dbg !3340
  %idx.ext = sext i32 %32 to i64, !dbg !3341
  %add.ptr = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %31, i64 %idx.ext, !dbg !3341
  %33 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3342
  %seq_array20 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %33, i32 0, i32 3, !dbg !3343
  %34 = load %struct.Sequence**, %struct.Sequence*** %seq_array20, align 8, !dbg !3343
  %35 = load i32, i32* %i, align 4, !dbg !3344
  %idxprom = sext i32 %35 to i64, !dbg !3342
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %34, i64 %idxprom, !dbg !3342
  %36 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !3342
  call void @transseq_backup(%struct.TransSeq* %add.ptr, %struct.Sequence* %36), !dbg !3345
  br label %for.inc, !dbg !3346

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %i, align 4, !dbg !3347
  %inc = add nsw i32 %37, 1, !dbg !3347
  store i32 %inc, i32* %i, align 4, !dbg !3347
  br label %for.cond, !dbg !3348, !llvm.loop !3349

for.end:                                          ; preds = %for.cond
  %38 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !3351
  %39 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3352
  %mval = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %39, i32 0, i32 6, !dbg !3353
  %arrayidx21 = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 0, !dbg !3352
  %40 = load i32, i32* %arrayidx21, align 4, !dbg !3352
  %conv22 = sitofp i32 %40 to float, !dbg !3352
  %41 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3354
  %mval23 = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %41, i32 0, i32 6, !dbg !3355
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* %mval23, i64 0, i64 1, !dbg !3354
  %42 = load i32, i32* %arrayidx24, align 4, !dbg !3354
  %conv25 = sitofp i32 %42 to float, !dbg !3354
  %arrayidx26 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !3356
  %arrayidx27 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 1, !dbg !3357
  call void @UI_view2d_region_to_view(%struct.View2D* %38, float %conv22, float %conv25, float* %arrayidx26, float* %arrayidx27), !dbg !3358
  %43 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3359
  %init_mouse = getelementptr inbounds %struct.SlipData, %struct.SlipData* %43, i32 0, i32 0, !dbg !3360
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %init_mouse, i64 0, i64 0, !dbg !3359
  %44 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3361
  %mval28 = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %44, i32 0, i32 6, !dbg !3362
  %arraydecay29 = getelementptr inbounds [2 x i32], [2 x i32]* %mval28, i64 0, i64 0, !dbg !3361
  call void @copy_v2_v2_int(i32* %arraydecay, i32* %arraydecay29), !dbg !3363
  %45 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3364
  %init_mouseloc = getelementptr inbounds %struct.SlipData, %struct.SlipData* %45, i32 0, i32 1, !dbg !3365
  %arraydecay30 = getelementptr inbounds [2 x float], [2 x float]* %init_mouseloc, i64 0, i64 0, !dbg !3364
  %arraydecay31 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !3366
  call void @copy_v2_v2(float* %arraydecay30, float* %arraydecay31), !dbg !3367
  %46 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3368
  %slow = getelementptr inbounds %struct.SlipData, %struct.SlipData* %46, i32 0, i32 6, !dbg !3369
  store i8 0, i8* %slow, align 4, !dbg !3370
  %47 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3371
  %48 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3372
  %call32 = call %struct.wmEventHandler* @WM_event_add_modal_handler(%struct.bContext* %47, %struct.wmOperator* %48), !dbg !3373
  store i32 1, i32* %retval, align 4, !dbg !3374
  br label %return, !dbg !3374

return:                                           ; preds = %for.end, %if.then
  %49 = load i32, i32* %retval, align 4, !dbg !3375
  ret i32 %49, !dbg !3375
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_slip_modal(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %event) #0 !dbg !3376 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %event.addr = alloca %struct.wmEvent*, align 8
  %scene = alloca %struct.Scene*, align 8
  %data = alloca %struct.SlipData*, align 8
  %sa = alloca %struct.ScrArea*, align 8
  %mouseloc = alloca [2 x float], align 4
  %offset = alloca i32, align 4
  %mouse_x = alloca i32, align 4
  %v2d = alloca %struct.View2D*, align 8
  %msg = alloca [40 x i8], align 16
  %i = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3377, metadata !DIExpression()), !dbg !3378
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3379, metadata !DIExpression()), !dbg !3380
  store %struct.wmEvent* %event, %struct.wmEvent** %event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %event.addr, metadata !3381, metadata !DIExpression()), !dbg !3382
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3383, metadata !DIExpression()), !dbg !3384
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3385
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3386
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3384
  call void @llvm.dbg.declare(metadata %struct.SlipData** %data, metadata !3387, metadata !DIExpression()), !dbg !3388
  %1 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3389
  %customdata = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %1, i32 0, i32 5, !dbg !3390
  %2 = load i8*, i8** %customdata, align 8, !dbg !3390
  %3 = bitcast i8* %2 to %struct.SlipData*, !dbg !3391
  store %struct.SlipData* %3, %struct.SlipData** %data, align 8, !dbg !3388
  call void @llvm.dbg.declare(metadata %struct.ScrArea** %sa, metadata !3392, metadata !DIExpression()), !dbg !3441
  %4 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3442
  %call1 = call %struct.ScrArea* @CTX_wm_area(%struct.bContext* %4), !dbg !3443
  store %struct.ScrArea* %call1, %struct.ScrArea** %sa, align 8, !dbg !3441
  %5 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3444
  %type = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %5, i32 0, i32 2, !dbg !3445
  %6 = load i16, i16* %type, align 8, !dbg !3445
  %conv = sext i16 %6 to i32, !dbg !3444
  switch i32 %conv, label %sw.default [
    i32 4, label %sw.bb
    i32 1, label %sw.bb24
    i32 218, label %sw.bb29
    i32 3, label %sw.bb29
    i32 216, label %sw.bb53
    i32 217, label %sw.bb53
  ], !dbg !3446

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata [2 x float]* %mouseloc, metadata !3447, metadata !DIExpression()), !dbg !3450
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3451, metadata !DIExpression()), !dbg !3452
  call void @llvm.dbg.declare(metadata i32* %mouse_x, metadata !3453, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !3455, metadata !DIExpression()), !dbg !3456
  %7 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3457
  %call2 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %7), !dbg !3458
  store %struct.View2D* %call2, %struct.View2D** %v2d, align 8, !dbg !3456
  %8 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3459
  %slow = getelementptr inbounds %struct.SlipData, %struct.SlipData* %8, i32 0, i32 6, !dbg !3461
  %9 = load i8, i8* %slow, align 4, !dbg !3461
  %tobool = icmp ne i8 %9, 0, !dbg !3459
  br i1 %tobool, label %if.then, label %if.else, !dbg !3462

if.then:                                          ; preds = %sw.bb
  %10 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3463
  %mval = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %10, i32 0, i32 6, !dbg !3465
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 0, !dbg !3463
  %11 = load i32, i32* %arrayidx, align 4, !dbg !3463
  %12 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3466
  %slow_offset = getelementptr inbounds %struct.SlipData, %struct.SlipData* %12, i32 0, i32 7, !dbg !3467
  %13 = load i32, i32* %slow_offset, align 8, !dbg !3467
  %sub = sub nsw i32 %11, %13, !dbg !3468
  store i32 %sub, i32* %mouse_x, align 4, !dbg !3469
  %14 = load i32, i32* %mouse_x, align 4, !dbg !3470
  %conv3 = sitofp i32 %14 to float, !dbg !3470
  %mul = fmul float %conv3, 0x3FB99999A0000000, !dbg !3470
  %conv4 = fptosi float %mul to i32, !dbg !3470
  store i32 %conv4, i32* %mouse_x, align 4, !dbg !3470
  %15 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3471
  %slow_offset5 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %15, i32 0, i32 7, !dbg !3472
  %16 = load i32, i32* %slow_offset5, align 8, !dbg !3472
  %17 = load i32, i32* %mouse_x, align 4, !dbg !3473
  %add = add nsw i32 %17, %16, !dbg !3473
  store i32 %add, i32* %mouse_x, align 4, !dbg !3473
  br label %if.end, !dbg !3474

if.else:                                          ; preds = %sw.bb
  %18 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3475
  %mval6 = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %18, i32 0, i32 6, !dbg !3477
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %mval6, i64 0, i64 0, !dbg !3475
  %19 = load i32, i32* %arrayidx7, align 4, !dbg !3475
  store i32 %19, i32* %mouse_x, align 4, !dbg !3478
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !3479
  %21 = load i32, i32* %mouse_x, align 4, !dbg !3480
  %conv8 = sitofp i32 %21 to float, !dbg !3480
  %arrayidx9 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !3481
  %arrayidx10 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 1, !dbg !3482
  call void @UI_view2d_region_to_view(%struct.View2D* %20, float %conv8, float 0.000000e+00, float* %arrayidx9, float* %arrayidx10), !dbg !3483
  %arrayidx11 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !3484
  %22 = load float, float* %arrayidx11, align 4, !dbg !3484
  %23 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3485
  %init_mouseloc = getelementptr inbounds %struct.SlipData, %struct.SlipData* %23, i32 0, i32 1, !dbg !3486
  %arrayidx12 = getelementptr inbounds [2 x float], [2 x float]* %init_mouseloc, i64 0, i64 0, !dbg !3485
  %24 = load float, float* %arrayidx12, align 8, !dbg !3485
  %sub13 = fsub float %22, %24, !dbg !3487
  %conv14 = fptosi float %sub13 to i32, !dbg !3484
  store i32 %conv14, i32* %offset, align 4, !dbg !3488
  %25 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3489
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %25, i32 0, i32 7, !dbg !3490
  %26 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3490
  %27 = load i32, i32* %offset, align 4, !dbg !3491
  call void @RNA_int_set(%struct.PointerRNA* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i64 0, i64 0), i32 %27), !dbg !3492
  %28 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3493
  %tobool15 = icmp ne %struct.ScrArea* %28, null, !dbg !3493
  br i1 %tobool15, label %if.then16, label %if.end19, !dbg !3495

if.then16:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata [40 x i8]* %msg, metadata !3496, metadata !DIExpression()), !dbg !3501
  %arraydecay = getelementptr inbounds [40 x i8], [40 x i8]* %msg, i64 0, i64 0, !dbg !3502
  %29 = load i32, i32* %offset, align 4, !dbg !3503
  %call17 = call i64 (i8*, i64, i8*, ...) @BLI_snprintf(i8* %arraydecay, i64 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.204, i64 0, i64 0), i32 %29), !dbg !3504
  %30 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3505
  %arraydecay18 = getelementptr inbounds [40 x i8], [40 x i8]* %msg, i64 0, i64 0, !dbg !3506
  call void @ED_area_headerprint(%struct.ScrArea* %30, i8* %arraydecay18), !dbg !3507
  br label %if.end19, !dbg !3508

if.end19:                                         ; preds = %if.then16, %if.end
  %31 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3509
  %32 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3511
  %33 = load i32, i32* %offset, align 4, !dbg !3512
  %call20 = call zeroext i8 @sequencer_slip_recursively(%struct.Scene* %31, %struct.SlipData* %32, i32 %33), !dbg !3513
  %tobool21 = icmp ne i8 %call20, 0, !dbg !3513
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !3514

if.then22:                                        ; preds = %if.end19
  %34 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3515
  %35 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3517
  %36 = bitcast %struct.Scene* %35 to i8*, !dbg !3517
  call void @WM_event_add_notifier(%struct.bContext* %34, i32 67502080, i8* %36), !dbg !3518
  br label %if.end23, !dbg !3519

if.end23:                                         ; preds = %if.then22, %if.end19
  br label %sw.epilog, !dbg !3520

sw.bb24:                                          ; preds = %entry
  %37 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3521
  %38 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3523
  %seq_array = getelementptr inbounds %struct.SlipData, %struct.SlipData* %38, i32 0, i32 3, !dbg !3524
  %39 = load %struct.Sequence**, %struct.Sequence*** %seq_array, align 8, !dbg !3524
  %40 = bitcast %struct.Sequence** %39 to i8*, !dbg !3523
  call void %37(i8* %40), !dbg !3521
  %41 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3525
  %42 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3526
  %trim = getelementptr inbounds %struct.SlipData, %struct.SlipData* %42, i32 0, i32 4, !dbg !3527
  %43 = load i8*, i8** %trim, align 8, !dbg !3527
  call void %41(i8* %43), !dbg !3525
  %44 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3528
  %45 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3529
  %ts = getelementptr inbounds %struct.SlipData, %struct.SlipData* %45, i32 0, i32 2, !dbg !3530
  %46 = load %struct.TransSeq*, %struct.TransSeq** %ts, align 8, !dbg !3530
  %47 = bitcast %struct.TransSeq* %46 to i8*, !dbg !3529
  call void %44(i8* %47), !dbg !3528
  %48 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3531
  %49 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3532
  %50 = bitcast %struct.SlipData* %49 to i8*, !dbg !3532
  call void %48(i8* %50), !dbg !3531
  %51 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3533
  %customdata25 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %51, i32 0, i32 5, !dbg !3534
  store i8* null, i8** %customdata25, align 8, !dbg !3535
  %52 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3536
  %tobool26 = icmp ne %struct.ScrArea* %52, null, !dbg !3536
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !3538

if.then27:                                        ; preds = %sw.bb24
  %53 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3539
  call void @ED_area_headerprint(%struct.ScrArea* %53, i8* null), !dbg !3541
  br label %if.end28, !dbg !3542

if.end28:                                         ; preds = %if.then27, %sw.bb24
  %54 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3543
  %55 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3544
  %56 = bitcast %struct.Scene* %55 to i8*, !dbg !3544
  call void @WM_event_add_notifier(%struct.bContext* %54, i32 67502080, i8* %56), !dbg !3545
  store i32 4, i32* %retval, align 4, !dbg !3546
  br label %return, !dbg !3546

sw.bb29:                                          ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3547, metadata !DIExpression()), !dbg !3549
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3550, metadata !DIExpression()), !dbg !3551
  %57 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3552
  %call30 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %57, i8 zeroext 0), !dbg !3553
  store %struct.Editing* %call30, %struct.Editing** %ed, align 8, !dbg !3551
  store i32 0, i32* %i, align 4, !dbg !3554
  br label %for.cond, !dbg !3556

for.cond:                                         ; preds = %for.inc, %sw.bb29
  %58 = load i32, i32* %i, align 4, !dbg !3557
  %59 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3559
  %num_seq = getelementptr inbounds %struct.SlipData, %struct.SlipData* %59, i32 0, i32 5, !dbg !3560
  %60 = load i32, i32* %num_seq, align 8, !dbg !3560
  %cmp = icmp slt i32 %58, %60, !dbg !3561
  br i1 %cmp, label %for.body, label %for.end, !dbg !3562

for.body:                                         ; preds = %for.cond
  %61 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3563
  %ts32 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %61, i32 0, i32 2, !dbg !3565
  %62 = load %struct.TransSeq*, %struct.TransSeq** %ts32, align 8, !dbg !3565
  %63 = load i32, i32* %i, align 4, !dbg !3566
  %idx.ext = sext i32 %63 to i64, !dbg !3567
  %add.ptr = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %62, i64 %idx.ext, !dbg !3567
  %64 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3568
  %seq_array33 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %64, i32 0, i32 3, !dbg !3569
  %65 = load %struct.Sequence**, %struct.Sequence*** %seq_array33, align 8, !dbg !3569
  %66 = load i32, i32* %i, align 4, !dbg !3570
  %idxprom = sext i32 %66 to i64, !dbg !3568
  %arrayidx34 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %65, i64 %idxprom, !dbg !3568
  %67 = load %struct.Sequence*, %struct.Sequence** %arrayidx34, align 8, !dbg !3568
  call void @transseq_restore(%struct.TransSeq* %add.ptr, %struct.Sequence* %67), !dbg !3571
  br label %for.inc, !dbg !3572

for.inc:                                          ; preds = %for.body
  %68 = load i32, i32* %i, align 4, !dbg !3573
  %inc = add nsw i32 %68, 1, !dbg !3573
  store i32 %inc, i32* %i, align 4, !dbg !3573
  br label %for.cond, !dbg !3574, !llvm.loop !3575

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3577
  br label %for.cond35, !dbg !3579

for.cond35:                                       ; preds = %for.inc43, %for.end
  %69 = load i32, i32* %i, align 4, !dbg !3580
  %70 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3582
  %num_seq36 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %70, i32 0, i32 5, !dbg !3583
  %71 = load i32, i32* %num_seq36, align 8, !dbg !3583
  %cmp37 = icmp slt i32 %69, %71, !dbg !3584
  br i1 %cmp37, label %for.body39, label %for.end45, !dbg !3585

for.body39:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !3586, metadata !DIExpression()), !dbg !3588
  %72 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3589
  %seq_array40 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %72, i32 0, i32 3, !dbg !3590
  %73 = load %struct.Sequence**, %struct.Sequence*** %seq_array40, align 8, !dbg !3590
  %74 = load i32, i32* %i, align 4, !dbg !3591
  %idxprom41 = sext i32 %74 to i64, !dbg !3589
  %arrayidx42 = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %73, i64 %idxprom41, !dbg !3589
  %75 = load %struct.Sequence*, %struct.Sequence** %arrayidx42, align 8, !dbg !3589
  store %struct.Sequence* %75, %struct.Sequence** %seq, align 8, !dbg !3588
  %76 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3592
  %77 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3593
  call void @BKE_sequence_reload_new_file(%struct.Scene* %76, %struct.Sequence* %77, i8 zeroext 0), !dbg !3594
  %78 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3595
  %79 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3596
  call void @BKE_sequence_calc(%struct.Scene* %78, %struct.Sequence* %79), !dbg !3597
  br label %for.inc43, !dbg !3598

for.inc43:                                        ; preds = %for.body39
  %80 = load i32, i32* %i, align 4, !dbg !3599
  %inc44 = add nsw i32 %80, 1, !dbg !3599
  store i32 %inc44, i32* %i, align 4, !dbg !3599
  br label %for.cond35, !dbg !3600, !llvm.loop !3601

for.end45:                                        ; preds = %for.cond35
  %81 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3603
  %82 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3604
  %seq_array46 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %82, i32 0, i32 3, !dbg !3605
  %83 = load %struct.Sequence**, %struct.Sequence*** %seq_array46, align 8, !dbg !3605
  %84 = bitcast %struct.Sequence** %83 to i8*, !dbg !3604
  call void %81(i8* %84), !dbg !3603
  %85 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3606
  %86 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3607
  %ts47 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %86, i32 0, i32 2, !dbg !3608
  %87 = load %struct.TransSeq*, %struct.TransSeq** %ts47, align 8, !dbg !3608
  %88 = bitcast %struct.TransSeq* %87 to i8*, !dbg !3607
  call void %85(i8* %88), !dbg !3606
  %89 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3609
  %90 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3610
  %trim48 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %90, i32 0, i32 4, !dbg !3611
  %91 = load i8*, i8** %trim48, align 8, !dbg !3611
  call void %89(i8* %91), !dbg !3609
  %92 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3612
  %93 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3613
  %94 = bitcast %struct.SlipData* %93 to i8*, !dbg !3613
  call void %92(i8* %94), !dbg !3612
  %95 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3614
  %customdata49 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %95, i32 0, i32 5, !dbg !3615
  store i8* null, i8** %customdata49, align 8, !dbg !3616
  %96 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3617
  %97 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3618
  %98 = bitcast %struct.Scene* %97 to i8*, !dbg !3618
  call void @WM_event_add_notifier(%struct.bContext* %96, i32 67502080, i8* %98), !dbg !3619
  %99 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3620
  %100 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3621
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %100, i32 0, i32 1, !dbg !3622
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %99, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !3623
  %101 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3624
  %tobool50 = icmp ne %struct.ScrArea* %101, null, !dbg !3624
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !3626

if.then51:                                        ; preds = %for.end45
  %102 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !3627
  call void @ED_area_headerprint(%struct.ScrArea* %102, i8* null), !dbg !3629
  br label %if.end52, !dbg !3630

if.end52:                                         ; preds = %if.then51, %for.end45
  store i32 2, i32* %retval, align 4, !dbg !3631
  br label %return, !dbg !3631

sw.bb53:                                          ; preds = %entry, %entry
  %103 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3632
  %val = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %103, i32 0, i32 3, !dbg !3634
  %104 = load i16, i16* %val, align 2, !dbg !3634
  %conv54 = sext i16 %104 to i32, !dbg !3632
  %cmp55 = icmp eq i32 %conv54, 1, !dbg !3635
  br i1 %cmp55, label %if.then57, label %if.else62, !dbg !3636

if.then57:                                        ; preds = %sw.bb53
  %105 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3637
  %slow58 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %105, i32 0, i32 6, !dbg !3639
  store i8 1, i8* %slow58, align 4, !dbg !3640
  %106 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3641
  %mval59 = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %106, i32 0, i32 6, !dbg !3642
  %arrayidx60 = getelementptr inbounds [2 x i32], [2 x i32]* %mval59, i64 0, i64 0, !dbg !3641
  %107 = load i32, i32* %arrayidx60, align 4, !dbg !3641
  %108 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3643
  %slow_offset61 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %108, i32 0, i32 7, !dbg !3644
  store i32 %107, i32* %slow_offset61, align 8, !dbg !3645
  br label %if.end70, !dbg !3646

if.else62:                                        ; preds = %sw.bb53
  %109 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !3647
  %val63 = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %109, i32 0, i32 3, !dbg !3649
  %110 = load i16, i16* %val63, align 2, !dbg !3649
  %conv64 = sext i16 %110 to i32, !dbg !3647
  %cmp65 = icmp eq i32 %conv64, 2, !dbg !3650
  br i1 %cmp65, label %if.then67, label %if.end69, !dbg !3651

if.then67:                                        ; preds = %if.else62
  %111 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3652
  %slow68 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %111, i32 0, i32 6, !dbg !3654
  store i8 0, i8* %slow68, align 4, !dbg !3655
  br label %if.end69, !dbg !3656

if.end69:                                         ; preds = %if.then67, %if.else62
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.then57
  br label %sw.epilog, !dbg !3657

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !3658

sw.epilog:                                        ; preds = %sw.default, %if.end70, %if.end23
  store i32 1, i32* %retval, align 4, !dbg !3659
  br label %return, !dbg !3659

return:                                           ; preds = %sw.epilog, %if.end52, %if.end28
  %112 = load i32, i32* %retval, align 4, !dbg !3660
  ret i32 %112, !dbg !3660
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_slip_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !3661 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %data = alloca %struct.SlipData*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %num_seq = alloca i32, align 4
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  %success = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3662, metadata !DIExpression()), !dbg !3663
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  call void @llvm.dbg.declare(metadata %struct.SlipData** %data, metadata !3666, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3668, metadata !DIExpression()), !dbg !3669
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3670
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3671
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3669
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3672, metadata !DIExpression()), !dbg !3673
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3674
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !3675
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !3673
  call void @llvm.dbg.declare(metadata i32* %num_seq, metadata !3676, metadata !DIExpression()), !dbg !3677
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3678, metadata !DIExpression()), !dbg !3679
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !3680, metadata !DIExpression()), !dbg !3681
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3682
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !3683
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3683
  %call2 = call i32 @RNA_int_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76, i64 0, i64 0)), !dbg !3684
  store i32 %call2, i32* %offset, align 4, !dbg !3681
  call void @llvm.dbg.declare(metadata i8* %success, metadata !3685, metadata !DIExpression()), !dbg !3686
  store i8 0, i8* %success, align 1, !dbg !3686
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3687
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !3688
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3688
  %call3 = call i32 @slip_count_sequences_rec(%struct.ListBase* %5, i8 zeroext 1), !dbg !3689
  store i32 %call3, i32* %num_seq, align 4, !dbg !3690
  %6 = load i32, i32* %num_seq, align 4, !dbg !3691
  %cmp = icmp eq i32 %6, 0, !dbg !3693
  br i1 %cmp, label %if.then, label %if.end, !dbg !3694

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !3695
  br label %return, !dbg !3695

if.end:                                           ; preds = %entry
  %7 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3696
  %call4 = call i8* %7(i64 56, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.200, i64 0, i64 0)), !dbg !3696
  %8 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3697
  %customdata = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %8, i32 0, i32 5, !dbg !3698
  store i8* %call4, i8** %customdata, align 8, !dbg !3699
  %9 = bitcast i8* %call4 to %struct.SlipData*, !dbg !3697
  store %struct.SlipData* %9, %struct.SlipData** %data, align 8, !dbg !3700
  %10 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3701
  %11 = load i32, i32* %num_seq, align 4, !dbg !3702
  %conv = sext i32 %11 to i64, !dbg !3702
  %mul = mul i64 %conv, 44, !dbg !3703
  %call5 = call i8* %10(i64 %mul, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.201, i64 0, i64 0)), !dbg !3701
  %12 = bitcast i8* %call5 to %struct.TransSeq*, !dbg !3701
  %13 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3704
  %ts = getelementptr inbounds %struct.SlipData, %struct.SlipData* %13, i32 0, i32 2, !dbg !3705
  store %struct.TransSeq* %12, %struct.TransSeq** %ts, align 8, !dbg !3706
  %14 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3707
  %15 = load i32, i32* %num_seq, align 4, !dbg !3708
  %conv6 = sext i32 %15 to i64, !dbg !3708
  %mul7 = mul i64 %conv6, 8, !dbg !3709
  %call8 = call i8* %14(i64 %mul7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.202, i64 0, i64 0)), !dbg !3707
  %16 = bitcast i8* %call8 to %struct.Sequence**, !dbg !3707
  %17 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3710
  %seq_array = getelementptr inbounds %struct.SlipData, %struct.SlipData* %17, i32 0, i32 3, !dbg !3711
  store %struct.Sequence** %16, %struct.Sequence*** %seq_array, align 8, !dbg !3712
  %18 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !3713
  %19 = load i32, i32* %num_seq, align 4, !dbg !3714
  %conv9 = sext i32 %19 to i64, !dbg !3714
  %mul10 = mul i64 %conv9, 1, !dbg !3715
  %call11 = call i8* %18(i64 %mul10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.203, i64 0, i64 0)), !dbg !3713
  %20 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3716
  %trim = getelementptr inbounds %struct.SlipData, %struct.SlipData* %20, i32 0, i32 4, !dbg !3717
  store i8* %call11, i8** %trim, align 8, !dbg !3718
  %21 = load i32, i32* %num_seq, align 4, !dbg !3719
  %22 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3720
  %num_seq12 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %22, i32 0, i32 5, !dbg !3721
  store i32 %21, i32* %num_seq12, align 8, !dbg !3722
  %23 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3723
  %seqbasep13 = getelementptr inbounds %struct.Editing, %struct.Editing* %23, i32 0, i32 0, !dbg !3724
  %24 = load %struct.ListBase*, %struct.ListBase** %seqbasep13, align 8, !dbg !3724
  %25 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3725
  %seq_array14 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %25, i32 0, i32 3, !dbg !3726
  %26 = load %struct.Sequence**, %struct.Sequence*** %seq_array14, align 8, !dbg !3726
  %27 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3727
  %trim15 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %27, i32 0, i32 4, !dbg !3728
  %28 = load i8*, i8** %trim15, align 8, !dbg !3728
  %call16 = call i32 @slip_add_sequences_rec(%struct.ListBase* %24, %struct.Sequence** %26, i8* %28, i32 0, i8 zeroext 1), !dbg !3729
  store i32 0, i32* %i, align 4, !dbg !3730
  br label %for.cond, !dbg !3732

for.cond:                                         ; preds = %for.inc, %if.end
  %29 = load i32, i32* %i, align 4, !dbg !3733
  %30 = load i32, i32* %num_seq, align 4, !dbg !3735
  %cmp17 = icmp slt i32 %29, %30, !dbg !3736
  br i1 %cmp17, label %for.body, label %for.end, !dbg !3737

for.body:                                         ; preds = %for.cond
  %31 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3738
  %ts19 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %31, i32 0, i32 2, !dbg !3740
  %32 = load %struct.TransSeq*, %struct.TransSeq** %ts19, align 8, !dbg !3740
  %33 = load i32, i32* %i, align 4, !dbg !3741
  %idx.ext = sext i32 %33 to i64, !dbg !3742
  %add.ptr = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %32, i64 %idx.ext, !dbg !3742
  %34 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3743
  %seq_array20 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %34, i32 0, i32 3, !dbg !3744
  %35 = load %struct.Sequence**, %struct.Sequence*** %seq_array20, align 8, !dbg !3744
  %36 = load i32, i32* %i, align 4, !dbg !3745
  %idxprom = sext i32 %36 to i64, !dbg !3743
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %35, i64 %idxprom, !dbg !3743
  %37 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !3743
  call void @transseq_backup(%struct.TransSeq* %add.ptr, %struct.Sequence* %37), !dbg !3746
  br label %for.inc, !dbg !3747

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4, !dbg !3748
  %inc = add nsw i32 %38, 1, !dbg !3748
  store i32 %inc, i32* %i, align 4, !dbg !3748
  br label %for.cond, !dbg !3749, !llvm.loop !3750

for.end:                                          ; preds = %for.cond
  %39 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3752
  %40 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3753
  %41 = load i32, i32* %offset, align 4, !dbg !3754
  %call21 = call zeroext i8 @sequencer_slip_recursively(%struct.Scene* %39, %struct.SlipData* %40, i32 %41), !dbg !3755
  store i8 %call21, i8* %success, align 1, !dbg !3756
  %42 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3757
  %43 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3758
  %seq_array22 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %43, i32 0, i32 3, !dbg !3759
  %44 = load %struct.Sequence**, %struct.Sequence*** %seq_array22, align 8, !dbg !3759
  %45 = bitcast %struct.Sequence** %44 to i8*, !dbg !3758
  call void %42(i8* %45), !dbg !3757
  %46 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3760
  %47 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3761
  %trim23 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %47, i32 0, i32 4, !dbg !3762
  %48 = load i8*, i8** %trim23, align 8, !dbg !3762
  call void %46(i8* %48), !dbg !3760
  %49 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3763
  %50 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3764
  %ts24 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %50, i32 0, i32 2, !dbg !3765
  %51 = load %struct.TransSeq*, %struct.TransSeq** %ts24, align 8, !dbg !3765
  %52 = bitcast %struct.TransSeq* %51 to i8*, !dbg !3764
  call void %49(i8* %52), !dbg !3763
  %53 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !3766
  %54 = load %struct.SlipData*, %struct.SlipData** %data, align 8, !dbg !3767
  %55 = bitcast %struct.SlipData* %54 to i8*, !dbg !3767
  call void %53(i8* %55), !dbg !3766
  %56 = load i8, i8* %success, align 1, !dbg !3768
  %tobool = icmp ne i8 %56, 0, !dbg !3768
  br i1 %tobool, label %if.then25, label %if.else, !dbg !3770

if.then25:                                        ; preds = %for.end
  store i32 4, i32* %retval, align 4, !dbg !3771
  br label %return, !dbg !3771

if.else:                                          ; preds = %for.end
  store i32 2, i32* %retval, align 4, !dbg !3772
  br label %return, !dbg !3772

return:                                           ; preds = %if.else, %if.then25, %if.then
  %57 = load i32, i32* %retval, align 4, !dbg !3773
  ret i32 %57, !dbg !3773
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_mute(%struct.wmOperatorType* %ot) #0 !dbg !3774 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !3775, metadata !DIExpression()), !dbg !3776
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3777
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !3778
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79, i64 0, i64 0), i8** %name, align 8, !dbg !3779
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3780
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !3781
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.80, i64 0, i64 0), i8** %idname, align 8, !dbg !3782
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3783
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !3784
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.81, i64 0, i64 0), i8** %description, align 8, !dbg !3785
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3786
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !3787
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_mute_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !3788
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3789
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !3790
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !3791
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3792
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !3793
  store i16 3, i16* %flag, align 8, !dbg !3794
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3795
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !3796
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !3796
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !3795
  %call = call %struct.PropertyRNA* @RNA_def_boolean(i8* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.84, i64 0, i64 0)), !dbg !3797
  ret void, !dbg !3798
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_mute_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !3799 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %selected = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3800, metadata !DIExpression()), !dbg !3801
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3802, metadata !DIExpression()), !dbg !3803
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3804, metadata !DIExpression()), !dbg !3805
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3806
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3807
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3805
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3808, metadata !DIExpression()), !dbg !3809
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3810
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !3811
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !3809
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !3812, metadata !DIExpression()), !dbg !3813
  call void @llvm.dbg.declare(metadata i8* %selected, metadata !3814, metadata !DIExpression()), !dbg !3815
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3816
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !3817
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3817
  %call2 = call i32 @RNA_boolean_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i64 0, i64 0)), !dbg !3818
  %tobool = icmp ne i32 %call2, 0, !dbg !3819
  %lnot = xor i1 %tobool, true, !dbg !3819
  %lnot.ext = zext i1 %lnot to i32, !dbg !3819
  %conv = trunc i32 %lnot.ext to i8, !dbg !3819
  store i8 %conv, i8* %selected, align 1, !dbg !3820
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3821
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !3823
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3823
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !3824
  %6 = load i8*, i8** %first, align 8, !dbg !3824
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !3821
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !3825
  br label %for.cond, !dbg !3826

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3827
  %tobool3 = icmp ne %struct.Sequence* %8, null, !dbg !3829
  br i1 %tobool3, label %for.body, label %for.end, !dbg !3829

for.body:                                         ; preds = %for.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3830
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !3833
  %10 = load i32, i32* %flag, align 8, !dbg !3833
  %and = and i32 %10, 16384, !dbg !3834
  %cmp = icmp eq i32 %and, 0, !dbg !3835
  br i1 %cmp, label %if.then, label %if.end21, !dbg !3836

if.then:                                          ; preds = %for.body
  %11 = load i8, i8* %selected, align 1, !dbg !3837
  %tobool5 = icmp ne i8 %11, 0, !dbg !3837
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3840

if.then6:                                         ; preds = %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3841
  %flag7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 5, !dbg !3844
  %13 = load i32, i32* %flag7, align 8, !dbg !3844
  %and8 = and i32 %13, 1, !dbg !3845
  %tobool9 = icmp ne i32 %and8, 0, !dbg !3845
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !3846

if.then10:                                        ; preds = %if.then6
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3847
  %flag11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 5, !dbg !3849
  %15 = load i32, i32* %flag11, align 8, !dbg !3850
  %or = or i32 %15, 32, !dbg !3850
  store i32 %or, i32* %flag11, align 8, !dbg !3850
  %16 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3851
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3852
  call void @BKE_sequence_invalidate_dependent(%struct.Scene* %16, %struct.Sequence* %17), !dbg !3853
  br label %if.end, !dbg !3854

if.end:                                           ; preds = %if.then10, %if.then6
  br label %if.end20, !dbg !3855

if.else:                                          ; preds = %if.then
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3856
  %flag12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 5, !dbg !3859
  %19 = load i32, i32* %flag12, align 8, !dbg !3859
  %and13 = and i32 %19, 1, !dbg !3860
  %cmp14 = icmp eq i32 %and13, 0, !dbg !3861
  br i1 %cmp14, label %if.then16, label %if.end19, !dbg !3862

if.then16:                                        ; preds = %if.else
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3863
  %flag17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 5, !dbg !3865
  %21 = load i32, i32* %flag17, align 8, !dbg !3866
  %or18 = or i32 %21, 32, !dbg !3866
  store i32 %or18, i32* %flag17, align 8, !dbg !3866
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3867
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3868
  call void @BKE_sequence_invalidate_dependent(%struct.Scene* %22, %struct.Sequence* %23), !dbg !3869
  br label %if.end19, !dbg !3870

if.end19:                                         ; preds = %if.then16, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.end
  br label %if.end21, !dbg !3871

if.end21:                                         ; preds = %if.end20, %for.body
  br label %for.inc, !dbg !3872

for.inc:                                          ; preds = %if.end21
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3873
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !3874
  %25 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !3874
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !3875
  br label %for.cond, !dbg !3876, !llvm.loop !3877

for.end:                                          ; preds = %for.cond
  %26 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3879
  call void @BKE_sequencer_update_muting(%struct.Editing* %26), !dbg !3880
  %27 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3881
  %28 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3882
  %29 = bitcast %struct.Scene* %28 to i8*, !dbg !3882
  call void @WM_event_add_notifier(%struct.bContext* %27, i32 67502080, i8* %29), !dbg !3883
  ret i32 4, !dbg !3884
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_unmute(%struct.wmOperatorType* %ot) #0 !dbg !3885 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !3886, metadata !DIExpression()), !dbg !3887
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3888
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !3889
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.85, i64 0, i64 0), i8** %name, align 8, !dbg !3890
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3891
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !3892
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.86, i64 0, i64 0), i8** %idname, align 8, !dbg !3893
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3894
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !3895
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.87, i64 0, i64 0), i8** %description, align 8, !dbg !3896
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3897
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !3898
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_unmute_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !3899
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3900
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !3901
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !3902
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3903
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !3904
  store i16 3, i16* %flag, align 8, !dbg !3905
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3906
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !3907
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !3907
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !3906
  %call = call %struct.PropertyRNA* @RNA_def_boolean(i8* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.83, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.88, i64 0, i64 0)), !dbg !3908
  ret void, !dbg !3909
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_unmute_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !3910 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %selected = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !3911, metadata !DIExpression()), !dbg !3912
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !3913, metadata !DIExpression()), !dbg !3914
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !3915, metadata !DIExpression()), !dbg !3916
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3917
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !3918
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !3916
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !3919, metadata !DIExpression()), !dbg !3920
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3921
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !3922
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !3920
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !3923, metadata !DIExpression()), !dbg !3924
  call void @llvm.dbg.declare(metadata i8* %selected, metadata !3925, metadata !DIExpression()), !dbg !3926
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !3927
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !3928
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !3928
  %call2 = call i32 @RNA_boolean_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i64 0, i64 0)), !dbg !3929
  %tobool = icmp ne i32 %call2, 0, !dbg !3930
  %lnot = xor i1 %tobool, true, !dbg !3930
  %lnot.ext = zext i1 %lnot to i32, !dbg !3930
  %conv = trunc i32 %lnot.ext to i8, !dbg !3930
  store i8 %conv, i8* %selected, align 1, !dbg !3931
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3932
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !3934
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !3934
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !3935
  %6 = load i8*, i8** %first, align 8, !dbg !3935
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !3932
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !3936
  br label %for.cond, !dbg !3937

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3938
  %tobool3 = icmp ne %struct.Sequence* %8, null, !dbg !3940
  br i1 %tobool3, label %for.body, label %for.end, !dbg !3940

for.body:                                         ; preds = %for.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3941
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !3944
  %10 = load i32, i32* %flag, align 8, !dbg !3944
  %and = and i32 %10, 16384, !dbg !3945
  %cmp = icmp eq i32 %and, 0, !dbg !3946
  br i1 %cmp, label %if.then, label %if.end22, !dbg !3947

if.then:                                          ; preds = %for.body
  %11 = load i8, i8* %selected, align 1, !dbg !3948
  %tobool5 = icmp ne i8 %11, 0, !dbg !3948
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3951

if.then6:                                         ; preds = %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3952
  %flag7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 5, !dbg !3955
  %13 = load i32, i32* %flag7, align 8, !dbg !3955
  %and8 = and i32 %13, 1, !dbg !3956
  %tobool9 = icmp ne i32 %and8, 0, !dbg !3956
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !3957

if.then10:                                        ; preds = %if.then6
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3958
  %flag11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 5, !dbg !3960
  %15 = load i32, i32* %flag11, align 8, !dbg !3961
  %and12 = and i32 %15, -33, !dbg !3961
  store i32 %and12, i32* %flag11, align 8, !dbg !3961
  %16 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3962
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3963
  call void @BKE_sequence_invalidate_dependent(%struct.Scene* %16, %struct.Sequence* %17), !dbg !3964
  br label %if.end, !dbg !3965

if.end:                                           ; preds = %if.then10, %if.then6
  br label %if.end21, !dbg !3966

if.else:                                          ; preds = %if.then
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3967
  %flag13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 5, !dbg !3970
  %19 = load i32, i32* %flag13, align 8, !dbg !3970
  %and14 = and i32 %19, 1, !dbg !3971
  %cmp15 = icmp eq i32 %and14, 0, !dbg !3972
  br i1 %cmp15, label %if.then17, label %if.end20, !dbg !3973

if.then17:                                        ; preds = %if.else
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3974
  %flag18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 5, !dbg !3976
  %21 = load i32, i32* %flag18, align 8, !dbg !3977
  %and19 = and i32 %21, -33, !dbg !3977
  store i32 %and19, i32* %flag18, align 8, !dbg !3977
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3978
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3979
  call void @BKE_sequence_invalidate_dependent(%struct.Scene* %22, %struct.Sequence* %23), !dbg !3980
  br label %if.end20, !dbg !3981

if.end20:                                         ; preds = %if.then17, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.end
  br label %if.end22, !dbg !3982

if.end22:                                         ; preds = %if.end21, %for.body
  br label %for.inc, !dbg !3983

for.inc:                                          ; preds = %if.end22
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !3984
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !3985
  %25 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !3985
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !3986
  br label %for.cond, !dbg !3987, !llvm.loop !3988

for.end:                                          ; preds = %for.cond
  %26 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !3990
  call void @BKE_sequencer_update_muting(%struct.Editing* %26), !dbg !3991
  %27 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !3992
  %28 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !3993
  %29 = bitcast %struct.Scene* %28 to i8*, !dbg !3993
  call void @WM_event_add_notifier(%struct.bContext* %27, i32 67502080, i8* %29), !dbg !3994
  ret i32 4, !dbg !3995
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_lock(%struct.wmOperatorType* %ot) #0 !dbg !3996 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !3997, metadata !DIExpression()), !dbg !3998
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !3999
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4000
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i64 0, i64 0), i8** %name, align 8, !dbg !4001
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4002
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4003
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.90, i64 0, i64 0), i8** %idname, align 8, !dbg !4004
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4005
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4006
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.91, i64 0, i64 0), i8** %description, align 8, !dbg !4007
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4008
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4009
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_lock_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4010
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4011
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4012
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4013
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4014
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4015
  store i16 3, i16* %flag, align 8, !dbg !4016
  ret void, !dbg !4017
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_lock_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !4018 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4019, metadata !DIExpression()), !dbg !4020
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4023, metadata !DIExpression()), !dbg !4024
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4025
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4026
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4024
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4027, metadata !DIExpression()), !dbg !4028
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4029
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4030
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4028
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4031, metadata !DIExpression()), !dbg !4032
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4033
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !4035
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4035
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !4036
  %4 = load i8*, i8** %first, align 8, !dbg !4036
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !4033
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !4037
  br label %for.cond, !dbg !4038

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4039
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !4041
  br i1 %tobool, label %for.body, label %for.end, !dbg !4041

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4042
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !4045
  %8 = load i32, i32* %flag, align 8, !dbg !4045
  %and = and i32 %8, 1, !dbg !4046
  %tobool2 = icmp ne i32 %and, 0, !dbg !4046
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4047

if.then:                                          ; preds = %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4048
  %flag3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !4050
  %10 = load i32, i32* %flag3, align 8, !dbg !4051
  %or = or i32 %10, 16384, !dbg !4051
  store i32 %or, i32* %flag3, align 8, !dbg !4051
  br label %if.end, !dbg !4052

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4053

for.inc:                                          ; preds = %if.end
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4054
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 0, !dbg !4055
  %12 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4055
  store %struct.Sequence* %12, %struct.Sequence** %seq, align 8, !dbg !4056
  br label %for.cond, !dbg !4057, !llvm.loop !4058

for.end:                                          ; preds = %for.cond
  %13 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4060
  %14 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4061
  %15 = bitcast %struct.Scene* %14 to i8*, !dbg !4061
  call void @WM_event_add_notifier(%struct.bContext* %13, i32 67502080, i8* %15), !dbg !4062
  ret i32 4, !dbg !4063
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_unlock(%struct.wmOperatorType* %ot) #0 !dbg !4064 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4065, metadata !DIExpression()), !dbg !4066
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4067
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4068
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.92, i64 0, i64 0), i8** %name, align 8, !dbg !4069
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4070
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4071
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.93, i64 0, i64 0), i8** %idname, align 8, !dbg !4072
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4073
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4074
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.94, i64 0, i64 0), i8** %description, align 8, !dbg !4075
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4076
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4077
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_unlock_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4078
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4079
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4080
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4081
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4082
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4083
  store i16 3, i16* %flag, align 8, !dbg !4084
  ret void, !dbg !4085
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_unlock_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !4086 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4087, metadata !DIExpression()), !dbg !4088
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !4089, metadata !DIExpression()), !dbg !4090
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4091, metadata !DIExpression()), !dbg !4092
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4093
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4094
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4092
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4095, metadata !DIExpression()), !dbg !4096
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4097
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4098
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4096
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4099, metadata !DIExpression()), !dbg !4100
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4101
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !4103
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4103
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !4104
  %4 = load i8*, i8** %first, align 8, !dbg !4104
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !4101
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !4105
  br label %for.cond, !dbg !4106

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4107
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !4109
  br i1 %tobool, label %for.body, label %for.end, !dbg !4109

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4110
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !4113
  %8 = load i32, i32* %flag, align 8, !dbg !4113
  %and = and i32 %8, 1, !dbg !4114
  %tobool2 = icmp ne i32 %and, 0, !dbg !4114
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4115

if.then:                                          ; preds = %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4116
  %flag3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !4118
  %10 = load i32, i32* %flag3, align 8, !dbg !4119
  %and4 = and i32 %10, -16385, !dbg !4119
  store i32 %and4, i32* %flag3, align 8, !dbg !4119
  br label %if.end, !dbg !4120

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4121

for.inc:                                          ; preds = %if.end
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4122
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 0, !dbg !4123
  %12 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4123
  store %struct.Sequence* %12, %struct.Sequence** %seq, align 8, !dbg !4124
  br label %for.cond, !dbg !4125, !llvm.loop !4126

for.end:                                          ; preds = %for.cond
  %13 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4128
  %14 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4129
  %15 = bitcast %struct.Scene* %14 to i8*, !dbg !4129
  call void @WM_event_add_notifier(%struct.bContext* %13, i32 67502080, i8* %15), !dbg !4130
  ret i32 4, !dbg !4131
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_reload(%struct.wmOperatorType* %ot) #0 !dbg !4132 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  %prop = alloca %struct.PropertyRNA*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4133, metadata !DIExpression()), !dbg !4134
  call void @llvm.dbg.declare(metadata %struct.PropertyRNA** %prop, metadata !4135, metadata !DIExpression()), !dbg !4136
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4137
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4138
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.95, i64 0, i64 0), i8** %name, align 8, !dbg !4139
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4140
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4141
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.96, i64 0, i64 0), i8** %idname, align 8, !dbg !4142
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4143
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4144
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.97, i64 0, i64 0), i8** %description, align 8, !dbg !4145
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4146
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4147
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_reload_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4148
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4149
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4150
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4151
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4152
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4153
  store i16 1, i16* %flag, align 8, !dbg !4154
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4155
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !4156
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !4156
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !4155
  %call = call %struct.PropertyRNA* @RNA_def_boolean(i8* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.99, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.100, i64 0, i64 0)), !dbg !4157
  store %struct.PropertyRNA* %call, %struct.PropertyRNA** %prop, align 8, !dbg !4158
  %9 = load %struct.PropertyRNA*, %struct.PropertyRNA** %prop, align 8, !dbg !4159
  call void @RNA_def_property_flag(%struct.PropertyRNA* %9, i32 268435456), !dbg !4160
  ret void, !dbg !4161
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_reload_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !4162 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %adjust_length = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4167, metadata !DIExpression()), !dbg !4168
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4169
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4170
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4168
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4171, metadata !DIExpression()), !dbg !4172
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4173
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4174
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4172
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4175, metadata !DIExpression()), !dbg !4176
  call void @llvm.dbg.declare(metadata i8* %adjust_length, metadata !4177, metadata !DIExpression()), !dbg !4179
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4180
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !4181
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !4181
  %call2 = call i32 @RNA_boolean_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98, i64 0, i64 0)), !dbg !4182
  %conv = trunc i32 %call2 to i8, !dbg !4182
  store i8 %conv, i8* %adjust_length, align 1, !dbg !4179
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4183
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !4185
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4185
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !4186
  %6 = load i8*, i8** %first, align 8, !dbg !4186
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !4183
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !4187
  br label %for.cond, !dbg !4188

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4189
  %tobool = icmp ne %struct.Sequence* %8, null, !dbg !4191
  br i1 %tobool, label %for.body, label %for.end, !dbg !4191

for.body:                                         ; preds = %for.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4192
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !4195
  %10 = load i32, i32* %flag, align 8, !dbg !4195
  %and = and i32 %10, 1, !dbg !4196
  %tobool3 = icmp ne i32 %and, 0, !dbg !4196
  br i1 %tobool3, label %if.then, label %if.end15, !dbg !4197

if.then:                                          ; preds = %for.body
  %11 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4198
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4200
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %11, %struct.Sequence* %12, i32 0, i32 1), !dbg !4201
  %13 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4202
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4203
  %15 = load i8, i8* %adjust_length, align 1, !dbg !4204
  %tobool4 = icmp ne i8 %15, 0, !dbg !4205
  %lnot = xor i1 %tobool4, true, !dbg !4205
  %lnot.ext = zext i1 %lnot to i32, !dbg !4205
  %conv5 = trunc i32 %lnot.ext to i8, !dbg !4205
  call void @BKE_sequence_reload_new_file(%struct.Scene* %13, %struct.Sequence* %14, i8 zeroext %conv5), !dbg !4206
  %16 = load i8, i8* %adjust_length, align 1, !dbg !4207
  %tobool6 = icmp ne i8 %16, 0, !dbg !4207
  br i1 %tobool6, label %if.then7, label %if.end14, !dbg !4209

if.then7:                                         ; preds = %if.then
  %17 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4210
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %17, i32 0, i32 0, !dbg !4213
  %18 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !4213
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4214
  %call9 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %18, %struct.Sequence* %19), !dbg !4215
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4215
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !4216

if.then11:                                        ; preds = %if.then7
  %20 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4217
  %seqbasep12 = getelementptr inbounds %struct.Editing, %struct.Editing* %20, i32 0, i32 0, !dbg !4218
  %21 = load %struct.ListBase*, %struct.ListBase** %seqbasep12, align 8, !dbg !4218
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4219
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4220
  %call13 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %21, %struct.Sequence* %22, %struct.Scene* %23), !dbg !4221
  br label %if.end, !dbg !4221

if.end:                                           ; preds = %if.then11, %if.then7
  br label %if.end14, !dbg !4222

if.end14:                                         ; preds = %if.end, %if.then
  br label %if.end15, !dbg !4223

if.end15:                                         ; preds = %if.end14, %for.body
  br label %for.inc, !dbg !4224

for.inc:                                          ; preds = %if.end15
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4225
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !4226
  %25 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4226
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !4227
  br label %for.cond, !dbg !4228, !llvm.loop !4229

for.end:                                          ; preds = %for.cond
  %26 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4231
  %27 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4232
  %28 = bitcast %struct.Scene* %27 to i8*, !dbg !4232
  call void @WM_event_add_notifier(%struct.bContext* %26, i32 67502080, i8* %28), !dbg !4233
  ret i32 4, !dbg !4234
}

declare dso_local void @RNA_def_property_flag(%struct.PropertyRNA*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_refresh_all(%struct.wmOperatorType* %ot) #0 !dbg !4235 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4236, metadata !DIExpression()), !dbg !4237
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4238
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4239
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.101, i64 0, i64 0), i8** %name, align 8, !dbg !4240
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4241
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4242
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.102, i64 0, i64 0), i8** %idname, align 8, !dbg !4243
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4244
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4245
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.103, i64 0, i64 0), i8** %description, align 8, !dbg !4246
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4247
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4248
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_refresh_all_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4249
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4250
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4251
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4252
  ret void, !dbg !4253
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_refresh_all_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !4254 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4255, metadata !DIExpression()), !dbg !4256
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !4257, metadata !DIExpression()), !dbg !4258
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4259, metadata !DIExpression()), !dbg !4260
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4261
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4262
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4260
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4263, metadata !DIExpression()), !dbg !4264
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4265
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4266
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4264
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4267
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4268
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 1, !dbg !4269
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %2, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !4270
  %4 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4271
  %5 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4272
  %6 = bitcast %struct.Scene* %5 to i8*, !dbg !4272
  call void @WM_event_add_notifier(%struct.bContext* %4, i32 67502080, i8* %6), !dbg !4273
  ret i32 4, !dbg !4274
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_reassign_inputs(%struct.wmOperatorType* %ot) #0 !dbg !4275 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4278
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4279
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.104, i64 0, i64 0), i8** %name, align 8, !dbg !4280
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4281
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4282
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.105, i64 0, i64 0), i8** %idname, align 8, !dbg !4283
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4284
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4285
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.106, i64 0, i64 0), i8** %description, align 8, !dbg !4286
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4287
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4288
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_reassign_inputs_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4289
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4290
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4291
  store i32 (%struct.bContext*)* @sequencer_effect_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4292
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4293
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4294
  store i16 3, i16* %flag, align 8, !dbg !4295
  ret void, !dbg !4296
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_reassign_inputs_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !4297 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %seq1 = alloca %struct.Sequence*, align 8
  %seq2 = alloca %struct.Sequence*, align 8
  %seq3 = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  %error_msg = alloca i8*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4298, metadata !DIExpression()), !dbg !4299
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4300, metadata !DIExpression()), !dbg !4301
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4302, metadata !DIExpression()), !dbg !4303
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4304
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4305
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4303
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq1, metadata !4306, metadata !DIExpression()), !dbg !4307
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq2, metadata !4308, metadata !DIExpression()), !dbg !4309
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq3, metadata !4310, metadata !DIExpression()), !dbg !4311
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !4312, metadata !DIExpression()), !dbg !4313
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4314
  %call1 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %1), !dbg !4315
  store %struct.Sequence* %call1, %struct.Sequence** %last_seq, align 8, !dbg !4313
  call void @llvm.dbg.declare(metadata i8** %error_msg, metadata !4316, metadata !DIExpression()), !dbg !4317
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4318
  %3 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4320
  %4 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4321
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !4322
  %5 = load i32, i32* %type, align 4, !dbg !4322
  %call2 = call i32 @seq_effect_find_selected(%struct.Scene* %2, %struct.Sequence* %3, i32 %5, %struct.Sequence** %seq1, %struct.Sequence** %seq2, %struct.Sequence** %seq3, i8** %error_msg), !dbg !4323
  %tobool = icmp ne i32 %call2, 0, !dbg !4323
  br i1 %tobool, label %if.end, label %if.then, !dbg !4324

if.then:                                          ; preds = %entry
  %6 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4325
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %6, i32 0, i32 8, !dbg !4327
  %7 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !4327
  %8 = load i8*, i8** %error_msg, align 8, !dbg !4328
  call void @BKE_report(%struct.ReportList* %7, i32 32, i8* %8), !dbg !4329
  store i32 2, i32* %retval, align 4, !dbg !4330
  br label %return, !dbg !4330

if.end:                                           ; preds = %entry
  %9 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4331
  %10 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4333
  %call3 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %9, %struct.Sequence* %10), !dbg !4334
  %conv = zext i8 %call3 to i32, !dbg !4334
  %tobool4 = icmp ne i32 %conv, 0, !dbg !4334
  br i1 %tobool4, label %if.then12, label %lor.lhs.false, !dbg !4335

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !4336
  %12 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4337
  %call5 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %11, %struct.Sequence* %12), !dbg !4338
  %conv6 = zext i8 %call5 to i32, !dbg !4338
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !4338
  br i1 %tobool7, label %if.then12, label %lor.lhs.false8, !dbg !4339

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %13 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !4340
  %14 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4341
  %call9 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %13, %struct.Sequence* %14), !dbg !4342
  %conv10 = zext i8 %call9 to i32, !dbg !4342
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4342
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !4343

if.then12:                                        ; preds = %lor.lhs.false8, %lor.lhs.false, %if.end
  %15 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4344
  %reports13 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %15, i32 0, i32 8, !dbg !4346
  %16 = load %struct.ReportList*, %struct.ReportList** %reports13, align 8, !dbg !4346
  call void @BKE_report(%struct.ReportList* %16, i32 32, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.205, i64 0, i64 0)), !dbg !4347
  store i32 2, i32* %retval, align 4, !dbg !4348
  br label %return, !dbg !4348

if.end14:                                         ; preds = %lor.lhs.false8
  %17 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4349
  %18 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4350
  %seq115 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 33, !dbg !4351
  store %struct.Sequence* %17, %struct.Sequence** %seq115, align 8, !dbg !4352
  %19 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !4353
  %20 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4354
  %seq216 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 34, !dbg !4355
  store %struct.Sequence* %19, %struct.Sequence** %seq216, align 8, !dbg !4356
  %21 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !4357
  %22 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4358
  %seq317 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 35, !dbg !4359
  store %struct.Sequence* %21, %struct.Sequence** %seq317, align 8, !dbg !4360
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4361
  %24 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4362
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %23, %struct.Sequence* %24, i32 1, i32 1), !dbg !4363
  %25 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4364
  %26 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4365
  %27 = bitcast %struct.Scene* %26 to i8*, !dbg !4365
  call void @WM_event_add_notifier(%struct.bContext* %25, i32 67502080, i8* %27), !dbg !4366
  store i32 4, i32* %retval, align 4, !dbg !4367
  br label %return, !dbg !4367

return:                                           ; preds = %if.end14, %if.then12, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !4368
  ret i32 %28, !dbg !4368
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_effect_poll(%struct.bContext* %C) #0 !dbg !4369 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4370, metadata !DIExpression()), !dbg !4371
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4372, metadata !DIExpression()), !dbg !4373
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4374
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4375
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4373
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4376, metadata !DIExpression()), !dbg !4377
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4378
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4379
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4377
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4380
  %tobool = icmp ne %struct.Editing* %2, null, !dbg !4380
  br i1 %tobool, label %if.then, label %if.end6, !dbg !4382

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !4383, metadata !DIExpression()), !dbg !4385
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4386
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %3), !dbg !4387
  store %struct.Sequence* %call2, %struct.Sequence** %last_seq, align 8, !dbg !4385
  %4 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4388
  %tobool3 = icmp ne %struct.Sequence* %4, null, !dbg !4388
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !4390

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4391
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !4392
  %6 = load i32, i32* %type, align 4, !dbg !4392
  %and = and i32 %6, 8, !dbg !4393
  %tobool4 = icmp ne i32 %and, 0, !dbg !4393
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !4394

if.then5:                                         ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !4395
  br label %return, !dbg !4395

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %if.end6, !dbg !4397

if.end6:                                          ; preds = %if.end, %entry
  store i32 0, i32* %retval, align 4, !dbg !4398
  br label %return, !dbg !4398

return:                                           ; preds = %if.end6, %if.then5
  %7 = load i32, i32* %retval, align 4, !dbg !4399
  ret i32 %7, !dbg !4399
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_swap_inputs(%struct.wmOperatorType* %ot) #0 !dbg !4400 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4401, metadata !DIExpression()), !dbg !4402
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4403
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4404
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.107, i64 0, i64 0), i8** %name, align 8, !dbg !4405
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4406
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4407
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.108, i64 0, i64 0), i8** %idname, align 8, !dbg !4408
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4409
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4410
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.109, i64 0, i64 0), i8** %description, align 8, !dbg !4411
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4412
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4413
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_swap_inputs_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4414
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4415
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4416
  store i32 (%struct.bContext*)* @sequencer_effect_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4417
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4418
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4419
  store i16 3, i16* %flag, align 8, !dbg !4420
  ret void, !dbg !4421
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_swap_inputs_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !4422 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4423, metadata !DIExpression()), !dbg !4424
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4425, metadata !DIExpression()), !dbg !4426
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4427, metadata !DIExpression()), !dbg !4428
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4429
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4430
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4428
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4431, metadata !DIExpression()), !dbg !4432
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !4433, metadata !DIExpression()), !dbg !4434
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4435
  %call1 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %1), !dbg !4436
  store %struct.Sequence* %call1, %struct.Sequence** %last_seq, align 8, !dbg !4434
  %2 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4437
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 33, !dbg !4439
  %3 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4439
  %cmp = icmp eq %struct.Sequence* %3, null, !dbg !4440
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4441

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4442
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 34, !dbg !4443
  %5 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !4443
  %cmp2 = icmp eq %struct.Sequence* %5, null, !dbg !4444
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4445

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4446
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %6, i32 0, i32 8, !dbg !4448
  %7 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !4448
  call void @BKE_report(%struct.ReportList* %7, i32 32, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.206, i64 0, i64 0)), !dbg !4449
  store i32 2, i32* %retval, align 4, !dbg !4450
  br label %return, !dbg !4450

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4451
  %seq13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 33, !dbg !4452
  %9 = load %struct.Sequence*, %struct.Sequence** %seq13, align 8, !dbg !4452
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !4453
  %10 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4454
  %seq24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 34, !dbg !4455
  %11 = load %struct.Sequence*, %struct.Sequence** %seq24, align 8, !dbg !4455
  %12 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4456
  %seq15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 33, !dbg !4457
  store %struct.Sequence* %11, %struct.Sequence** %seq15, align 8, !dbg !4458
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4459
  %14 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4460
  %seq26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 34, !dbg !4461
  store %struct.Sequence* %13, %struct.Sequence** %seq26, align 8, !dbg !4462
  %15 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4463
  %16 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !4464
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %15, %struct.Sequence* %16, i32 1, i32 1), !dbg !4465
  %17 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4466
  %18 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4467
  %19 = bitcast %struct.Scene* %18 to i8*, !dbg !4467
  call void @WM_event_add_notifier(%struct.bContext* %17, i32 67502080, i8* %19), !dbg !4468
  store i32 4, i32* %retval, align 4, !dbg !4469
  br label %return, !dbg !4469

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !4470
  ret i32 %20, !dbg !4470
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_cut(%struct.wmOperatorType* %ot) #0 !dbg !4471 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4472, metadata !DIExpression()), !dbg !4473
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4474
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4475
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i64 0, i64 0), i8** %name, align 8, !dbg !4476
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4477
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4478
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.111, i64 0, i64 0), i8** %idname, align 8, !dbg !4479
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4480
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4481
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.112, i64 0, i64 0), i8** %description, align 8, !dbg !4482
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4483
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 6, !dbg !4484
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_cut_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !4485
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4486
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 4, !dbg !4487
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_cut_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4488
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4489
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 9, !dbg !4490
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4491
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4492
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 19, !dbg !4493
  store i16 3, i16* %flag, align 8, !dbg !4494
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4495
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %7, i32 0, i32 11, !dbg !4496
  %8 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !4496
  %9 = bitcast %struct.StructRNA* %8 to i8*, !dbg !4495
  %call = call %struct.PropertyRNA* @RNA_def_int(i8* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0), i32 0, i32 -2147483648, i32 2147483647, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.113, i64 0, i64 0), i32 -2147483648, i32 2147483647), !dbg !4497
  %10 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4498
  %srna1 = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %10, i32 0, i32 11, !dbg !4499
  %11 = load %struct.StructRNA*, %struct.StructRNA** %srna1, align 8, !dbg !4499
  %12 = bitcast %struct.StructRNA* %11 to i8*, !dbg !4498
  %call2 = call %struct.PropertyRNA* @RNA_def_enum(i8* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([3 x %struct.EnumPropertyItem], [3 x %struct.EnumPropertyItem]* @prop_cut_types, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.116, i64 0, i64 0)), !dbg !4500
  %13 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4501
  %srna3 = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %13, i32 0, i32 11, !dbg !4502
  %14 = load %struct.StructRNA*, %struct.StructRNA** %srna3, align 8, !dbg !4502
  %15 = bitcast %struct.StructRNA* %14 to i8*, !dbg !4501
  %call4 = call %struct.PropertyRNA* @RNA_def_enum(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([4 x %struct.EnumPropertyItem], [4 x %struct.EnumPropertyItem]* @prop_side_types, i64 0, i64 0), i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.118, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.119, i64 0, i64 0)), !dbg !4503
  ret void, !dbg !4504
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_cut_invoke(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %event) #0 !dbg !4505 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %event.addr = alloca %struct.wmEvent*, align 8
  %scene = alloca %struct.Scene*, align 8
  %v2d = alloca %struct.View2D*, align 8
  %cut_side = alloca i32, align 4
  %cut_frame = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4506, metadata !DIExpression()), !dbg !4507
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4508, metadata !DIExpression()), !dbg !4509
  store %struct.wmEvent* %event, %struct.wmEvent** %event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %event.addr, metadata !4510, metadata !DIExpression()), !dbg !4511
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4512, metadata !DIExpression()), !dbg !4513
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4514
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4515
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4513
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !4516, metadata !DIExpression()), !dbg !4517
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4518
  %call1 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %1), !dbg !4519
  store %struct.View2D* %call1, %struct.View2D** %v2d, align 8, !dbg !4517
  call void @llvm.dbg.declare(metadata i32* %cut_side, metadata !4520, metadata !DIExpression()), !dbg !4521
  store i32 3, i32* %cut_side, align 4, !dbg !4521
  call void @llvm.dbg.declare(metadata i32* %cut_frame, metadata !4522, metadata !DIExpression()), !dbg !4523
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4524
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %2, i32 0, i32 22, !dbg !4524
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !4524
  %3 = load i32, i32* %cfra, align 8, !dbg !4524
  store i32 %3, i32* %cut_frame, align 4, !dbg !4523
  %4 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4525
  %call2 = call i32 @ED_operator_sequencer_active(%struct.bContext* %4), !dbg !4527
  %tobool = icmp ne i32 %call2, 0, !dbg !4527
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4528

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !4529
  %tobool3 = icmp ne %struct.View2D* %5, null, !dbg !4529
  br i1 %tobool3, label %if.then, label %if.end, !dbg !4530

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !4531
  %7 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !4532
  %mval = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %7, i32 0, i32 6, !dbg !4533
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 0, !dbg !4532
  %8 = load i32, i32* %arrayidx, align 4, !dbg !4532
  %conv = trunc i32 %8 to i16, !dbg !4532
  %9 = load i32, i32* %cut_frame, align 4, !dbg !4534
  %call4 = call i32 @mouse_frame_side(%struct.View2D* %6, i16 signext %conv, i32 %9), !dbg !4535
  store i32 %call4, i32* %cut_side, align 4, !dbg !4536
  br label %if.end, !dbg !4537

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4538
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %10, i32 0, i32 7, !dbg !4539
  %11 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !4539
  %12 = load i32, i32* %cut_frame, align 4, !dbg !4540
  call void @RNA_int_set(%struct.PointerRNA* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0), i32 %12), !dbg !4541
  %13 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4542
  %ptr5 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %13, i32 0, i32 7, !dbg !4543
  %14 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr5, align 8, !dbg !4543
  %15 = load i32, i32* %cut_side, align 4, !dbg !4544
  call void @RNA_enum_set(%struct.PointerRNA* %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0), i32 %15), !dbg !4545
  %16 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4546
  %17 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4547
  %call6 = call i32 @sequencer_cut_exec(%struct.bContext* %16, %struct.wmOperator* %17), !dbg !4548
  ret i32 %call6, !dbg !4549
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_cut_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !4550 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %cut_side = alloca i32, align 4
  %cut_hard = alloca i32, align 4
  %cut_frame = alloca i32, align 4
  %changed = alloca i8, align 1
  %seq = alloca %struct.Sequence*, align 8
  %iter_macro = alloca %struct.SeqIterator, align 8
  %iter_macro28 = alloca %struct.SeqIterator, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4551, metadata !DIExpression()), !dbg !4552
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4553, metadata !DIExpression()), !dbg !4554
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4555, metadata !DIExpression()), !dbg !4556
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4557
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4558
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4556
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4559, metadata !DIExpression()), !dbg !4560
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4561
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4562
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4560
  call void @llvm.dbg.declare(metadata i32* %cut_side, metadata !4563, metadata !DIExpression()), !dbg !4564
  call void @llvm.dbg.declare(metadata i32* %cut_hard, metadata !4565, metadata !DIExpression()), !dbg !4566
  call void @llvm.dbg.declare(metadata i32* %cut_frame, metadata !4567, metadata !DIExpression()), !dbg !4568
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4569, metadata !DIExpression()), !dbg !4570
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4571
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !4572
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !4572
  %call2 = call i32 @RNA_int_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i64 0, i64 0)), !dbg !4573
  store i32 %call2, i32* %cut_frame, align 4, !dbg !4574
  %4 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4575
  %ptr3 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %4, i32 0, i32 7, !dbg !4576
  %5 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr3, align 8, !dbg !4576
  %call4 = call i32 @RNA_enum_get(%struct.PointerRNA* %5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0)), !dbg !4577
  store i32 %call4, i32* %cut_hard, align 4, !dbg !4578
  %6 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4579
  %ptr5 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %6, i32 0, i32 7, !dbg !4580
  %7 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr5, align 8, !dbg !4580
  %call6 = call i32 @RNA_enum_get(%struct.PointerRNA* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0)), !dbg !4581
  store i32 %call6, i32* %cut_side, align 4, !dbg !4582
  %8 = load i32, i32* %cut_hard, align 4, !dbg !4583
  %cmp = icmp eq i32 %8, 1, !dbg !4585
  br i1 %cmp, label %if.then, label %if.else, !dbg !4586

if.then:                                          ; preds = %entry
  %9 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4587
  %10 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4589
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %10, i32 0, i32 0, !dbg !4590
  %11 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4590
  %12 = load i32, i32* %cut_frame, align 4, !dbg !4591
  %call7 = call zeroext i8 @cut_seq_list(%struct.Scene* %9, %struct.ListBase* %11, i32 %12, %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)* @cut_seq_hard), !dbg !4592
  store i8 %call7, i8* %changed, align 1, !dbg !4593
  br label %if.end, !dbg !4594

if.else:                                          ; preds = %entry
  %13 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4595
  %14 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4597
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %14, i32 0, i32 0, !dbg !4598
  %15 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !4598
  %16 = load i32, i32* %cut_frame, align 4, !dbg !4599
  %call9 = call zeroext i8 @cut_seq_list(%struct.Scene* %13, %struct.ListBase* %15, i32 %16, %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)* @cut_seq_soft), !dbg !4600
  store i8 %call9, i8* %changed, align 1, !dbg !4601
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = load i8, i8* %changed, align 1, !dbg !4602
  %tobool = icmp ne i8 %17, 0, !dbg !4602
  br i1 %tobool, label %if.then10, label %if.end42, !dbg !4604

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4605, metadata !DIExpression()), !dbg !4607
  %18 = load i32, i32* %cut_side, align 4, !dbg !4608
  %cmp11 = icmp ne i32 %18, 3, !dbg !4610
  br i1 %cmp11, label %if.then12, label %if.end27, !dbg !4611

if.then12:                                        ; preds = %if.then10
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro, metadata !4612, metadata !DIExpression()), !dbg !4615
  %19 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4616
  call void @BKE_sequence_iterator_begin(%struct.Editing* %19, %struct.SeqIterator* %iter_macro, i8 zeroext 1), !dbg !4616
  br label %for.cond, !dbg !4616

for.cond:                                         ; preds = %for.inc, %if.then12
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 4, !dbg !4618
  %20 = load i32, i32* %valid, align 8, !dbg !4618
  %tobool13 = icmp ne i32 %20, 0, !dbg !4616
  br i1 %tobool13, label %for.body, label %for.end, !dbg !4616

for.body:                                         ; preds = %for.cond
  %seq14 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 3, !dbg !4620
  %21 = load %struct.Sequence*, %struct.Sequence** %seq14, align 8, !dbg !4620
  store %struct.Sequence* %21, %struct.Sequence** %seq, align 8, !dbg !4620
  %22 = load i32, i32* %cut_side, align 4, !dbg !4622
  %cmp15 = icmp eq i32 %22, 1, !dbg !4625
  br i1 %cmp15, label %if.then16, label %if.else20, !dbg !4626

if.then16:                                        ; preds = %for.body
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4627
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 15, !dbg !4630
  %24 = load i32, i32* %startdisp, align 8, !dbg !4630
  %25 = load i32, i32* %cut_frame, align 4, !dbg !4631
  %cmp17 = icmp sge i32 %24, %25, !dbg !4632
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !4633

if.then18:                                        ; preds = %if.then16
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4634
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 5, !dbg !4636
  %27 = load i32, i32* %flag, align 8, !dbg !4637
  %and = and i32 %27, -8, !dbg !4637
  store i32 %and, i32* %flag, align 8, !dbg !4637
  br label %if.end19, !dbg !4638

if.end19:                                         ; preds = %if.then18, %if.then16
  br label %if.end26, !dbg !4639

if.else20:                                        ; preds = %for.body
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4640
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 16, !dbg !4643
  %29 = load i32, i32* %enddisp, align 4, !dbg !4643
  %30 = load i32, i32* %cut_frame, align 4, !dbg !4644
  %cmp21 = icmp sle i32 %29, %30, !dbg !4645
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !4646

if.then22:                                        ; preds = %if.else20
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4647
  %flag23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 5, !dbg !4649
  %32 = load i32, i32* %flag23, align 8, !dbg !4650
  %and24 = and i32 %32, -8, !dbg !4650
  store i32 %and24, i32* %flag23, align 8, !dbg !4650
  br label %if.end25, !dbg !4651

if.end25:                                         ; preds = %if.then22, %if.else20
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end19
  br label %for.inc, !dbg !4652

for.inc:                                          ; preds = %if.end26
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro), !dbg !4618
  br label %for.cond, !dbg !4618, !llvm.loop !4653

for.end:                                          ; preds = %for.cond
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro), !dbg !4655
  br label %if.end27, !dbg !4656

if.end27:                                         ; preds = %for.end, %if.then10
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro28, metadata !4657, metadata !DIExpression()), !dbg !4659
  %33 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4660
  call void @BKE_sequence_iterator_begin(%struct.Editing* %33, %struct.SeqIterator* %iter_macro28, i8 zeroext 1), !dbg !4660
  br label %for.cond29, !dbg !4660

for.cond29:                                       ; preds = %for.inc40, %if.end27
  %valid30 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro28, i32 0, i32 4, !dbg !4662
  %34 = load i32, i32* %valid30, align 8, !dbg !4662
  %tobool31 = icmp ne i32 %34, 0, !dbg !4660
  br i1 %tobool31, label %for.body32, label %for.end41, !dbg !4660

for.body32:                                       ; preds = %for.cond29
  %seq33 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro28, i32 0, i32 3, !dbg !4664
  %35 = load %struct.Sequence*, %struct.Sequence** %seq33, align 8, !dbg !4664
  store %struct.Sequence* %35, %struct.Sequence** %seq, align 8, !dbg !4664
  %36 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4666
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 33, !dbg !4669
  %37 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !4669
  %tobool34 = icmp ne %struct.Sequence* %37, null, !dbg !4666
  br i1 %tobool34, label %if.then38, label %lor.lhs.false, !dbg !4670

lor.lhs.false:                                    ; preds = %for.body32
  %38 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4671
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 34, !dbg !4672
  %39 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !4672
  %tobool35 = icmp ne %struct.Sequence* %39, null, !dbg !4671
  br i1 %tobool35, label %if.then38, label %lor.lhs.false36, !dbg !4673

lor.lhs.false36:                                  ; preds = %lor.lhs.false
  %40 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4674
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 35, !dbg !4675
  %41 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !4675
  %tobool37 = icmp ne %struct.Sequence* %41, null, !dbg !4674
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !4676

if.then38:                                        ; preds = %lor.lhs.false36, %lor.lhs.false, %for.body32
  %42 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4677
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4679
  call void @BKE_sequence_calc(%struct.Scene* %42, %struct.Sequence* %43), !dbg !4680
  br label %if.end39, !dbg !4681

if.end39:                                         ; preds = %if.then38, %lor.lhs.false36
  br label %for.inc40, !dbg !4682

for.inc40:                                        ; preds = %if.end39
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro28), !dbg !4662
  br label %for.cond29, !dbg !4662, !llvm.loop !4683

for.end41:                                        ; preds = %for.cond29
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro28), !dbg !4685
  %44 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4686
  call void @BKE_sequencer_sort(%struct.Scene* %44), !dbg !4687
  br label %if.end42, !dbg !4688

if.end42:                                         ; preds = %for.end41, %if.end
  %45 = load i8, i8* %changed, align 1, !dbg !4689
  %tobool43 = icmp ne i8 %45, 0, !dbg !4689
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !4691

if.then44:                                        ; preds = %if.end42
  %46 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4692
  %47 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4694
  %48 = bitcast %struct.Scene* %47 to i8*, !dbg !4694
  call void @WM_event_add_notifier(%struct.bContext* %46, i32 67502080, i8* %48), !dbg !4695
  store i32 4, i32* %retval, align 4, !dbg !4696
  br label %return, !dbg !4696

if.else45:                                        ; preds = %if.end42
  store i32 2, i32* %retval, align 4, !dbg !4697
  br label %return, !dbg !4697

return:                                           ; preds = %if.else45, %if.then44
  %49 = load i32, i32* %retval, align 4, !dbg !4699
  ret i32 %49, !dbg !4699
}

declare dso_local %struct.PropertyRNA* @RNA_def_enum(i8*, i8*, %struct.EnumPropertyItem*, i32, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_duplicate(%struct.wmOperatorType* %ot) #0 !dbg !4700 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4707
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4708
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.120, i64 0, i64 0), i8** %name, align 8, !dbg !4709
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4710
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4711
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.121, i64 0, i64 0), i8** %idname, align 8, !dbg !4712
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4713
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4714
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.122, i64 0, i64 0), i8** %description, align 8, !dbg !4715
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4716
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !4717
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_add_duplicate_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4718
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4719
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !4720
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !4721
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4722
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !4723
  store i16 3, i16* %flag, align 8, !dbg !4724
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4725
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !4726
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !4726
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !4725
  %call = call %struct.PropertyRNA* @RNA_def_enum(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([0 x %struct.EnumPropertyItem], [0 x %struct.EnumPropertyItem]* @transform_mode_types, i64 0, i64 0), i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.124, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0)), !dbg !4727
  ret void, !dbg !4728
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_add_duplicate_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !4729 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %nseqbase = alloca %struct.ListBase, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4730, metadata !DIExpression()), !dbg !4731
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !4732, metadata !DIExpression()), !dbg !4733
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4734, metadata !DIExpression()), !dbg !4735
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4736
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4737
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4735
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4738, metadata !DIExpression()), !dbg !4739
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4740
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4741
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4739
  call void @llvm.dbg.declare(metadata %struct.ListBase* %nseqbase, metadata !4742, metadata !DIExpression()), !dbg !4743
  %2 = bitcast %struct.ListBase* %nseqbase to i8*, !dbg !4743
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false), !dbg !4743
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4744
  %cmp = icmp eq %struct.Editing* %3, null, !dbg !4746
  br i1 %cmp, label %if.then, label %if.end, !dbg !4747

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !4748
  br label %return, !dbg !4748

if.end:                                           ; preds = %entry
  %4 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4749
  %5 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4750
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %5, i32 0, i32 0, !dbg !4751
  %6 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4751
  call void @BKE_sequence_base_dupli_recursive(%struct.Scene* %4, %struct.Scene* null, %struct.ListBase* %nseqbase, %struct.ListBase* %6, i32 2), !dbg !4752
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !4753
  %7 = load i8*, i8** %first, align 8, !dbg !4753
  %tobool = icmp ne i8* %7, null, !dbg !4755
  br i1 %tobool, label %if.then2, label %if.end7, !dbg !4756

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4757, metadata !DIExpression()), !dbg !4759
  %first3 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !4760
  %8 = load i8*, i8** %first3, align 8, !dbg !4760
  %9 = bitcast i8* %8 to %struct.Sequence*, !dbg !4761
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !4759
  %10 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4762
  %seqbasep4 = getelementptr inbounds %struct.Editing, %struct.Editing* %10, i32 0, i32 0, !dbg !4763
  %11 = load %struct.ListBase*, %struct.ListBase** %seqbasep4, align 8, !dbg !4763
  call void @BLI_movelisttolist(%struct.ListBase* %11, %struct.ListBase* %nseqbase), !dbg !4764
  br label %for.cond, !dbg !4765

for.cond:                                         ; preds = %for.inc, %if.then2
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4766
  %tobool5 = icmp ne %struct.Sequence* %12, null, !dbg !4769
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4769

for.body:                                         ; preds = %for.cond
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4770
  %14 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4771
  %15 = bitcast %struct.Scene* %14 to i8*, !dbg !4771
  %call6 = call i32 @BKE_sequencer_recursive_apply(%struct.Sequence* %13, i32 (%struct.Sequence*, i8*)* @apply_unique_name_cb, i8* %15), !dbg !4772
  br label %for.inc, !dbg !4772

for.inc:                                          ; preds = %for.body
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4773
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 0, !dbg !4774
  %17 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4774
  store %struct.Sequence* %17, %struct.Sequence** %seq, align 8, !dbg !4775
  br label %for.cond, !dbg !4776, !llvm.loop !4777

for.end:                                          ; preds = %for.cond
  %18 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4779
  %19 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4780
  %20 = bitcast %struct.Scene* %19 to i8*, !dbg !4780
  call void @WM_event_add_notifier(%struct.bContext* %18, i32 67502080, i8* %20), !dbg !4781
  store i32 4, i32* %retval, align 4, !dbg !4782
  br label %return, !dbg !4782

if.end7:                                          ; preds = %if.end
  store i32 2, i32* %retval, align 4, !dbg !4783
  br label %return, !dbg !4783

return:                                           ; preds = %if.end7, %for.end, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !4784
  ret i32 %21, !dbg !4784
}

declare dso_local i32 @ED_operator_sequencer_active(%struct.bContext*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_delete(%struct.wmOperatorType* %ot) #0 !dbg !4785 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !4786, metadata !DIExpression()), !dbg !4787
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4788
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !4789
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.125, i64 0, i64 0), i8** %name, align 8, !dbg !4790
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4791
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !4792
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.126, i64 0, i64 0), i8** %idname, align 8, !dbg !4793
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4794
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !4795
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.127, i64 0, i64 0), i8** %description, align 8, !dbg !4796
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4797
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 6, !dbg !4798
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_delete_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !4799
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4800
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 4, !dbg !4801
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_delete_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !4802
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4803
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 9, !dbg !4804
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !4805
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !4806
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 19, !dbg !4807
  store i16 3, i16* %flag, align 8, !dbg !4808
  ret void, !dbg !4809
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_delete_invoke(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %event) #0 !dbg !4810 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %event.addr = alloca %struct.wmEvent*, align 8
  %ar = alloca %struct.ARegion*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4811, metadata !DIExpression()), !dbg !4812
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !4813, metadata !DIExpression()), !dbg !4814
  store %struct.wmEvent* %event, %struct.wmEvent** %event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %event.addr, metadata !4815, metadata !DIExpression()), !dbg !4816
  call void @llvm.dbg.declare(metadata %struct.ARegion** %ar, metadata !4817, metadata !DIExpression()), !dbg !4856
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4857
  %call = call %struct.ARegion* @CTX_wm_region(%struct.bContext* %0), !dbg !4858
  store %struct.ARegion* %call, %struct.ARegion** %ar, align 8, !dbg !4856
  %1 = load %struct.ARegion*, %struct.ARegion** %ar, align 8, !dbg !4859
  %regiontype = getelementptr inbounds %struct.ARegion, %struct.ARegion* %1, i32 0, i32 8, !dbg !4861
  %2 = load i16, i16* %regiontype, align 2, !dbg !4861
  %conv = sext i16 %2 to i32, !dbg !4859
  %cmp = icmp eq i32 %conv, 0, !dbg !4862
  br i1 %cmp, label %if.then, label %if.end5, !dbg !4863

if.then:                                          ; preds = %entry
  %3 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !4864
  %mval = getelementptr inbounds %struct.wmEvent, %struct.wmEvent* %3, i32 0, i32 6, !dbg !4867
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 1, !dbg !4864
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4864
  %cmp2 = icmp sle i32 %4, 30, !dbg !4868
  br i1 %cmp2, label %if.then4, label %if.end, !dbg !4869

if.then4:                                         ; preds = %if.then
  store i32 8, i32* %retval, align 4, !dbg !4870
  br label %return, !dbg !4870

if.end:                                           ; preds = %if.then
  br label %if.end5, !dbg !4871

if.end5:                                          ; preds = %if.end, %entry
  %5 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4872
  %6 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !4873
  %7 = load %struct.wmEvent*, %struct.wmEvent** %event.addr, align 8, !dbg !4874
  %call6 = call i32 @WM_operator_confirm(%struct.bContext* %5, %struct.wmOperator* %6, %struct.wmEvent* %7), !dbg !4875
  store i32 %call6, i32* %retval, align 4, !dbg !4876
  br label %return, !dbg !4876

return:                                           ; preds = %if.end5, %if.then4
  %8 = load i32, i32* %retval, align 4, !dbg !4877
  ret i32 %8, !dbg !4877
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_delete_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !4878 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %ms = alloca %struct.MetaStack*, align 8
  %nothingSelected = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !4879, metadata !DIExpression()), !dbg !4880
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !4881, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !4883, metadata !DIExpression()), !dbg !4884
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !4885
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !4886
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !4884
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !4887, metadata !DIExpression()), !dbg !4888
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4889
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !4890
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !4888
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !4891, metadata !DIExpression()), !dbg !4892
  call void @llvm.dbg.declare(metadata %struct.MetaStack** %ms, metadata !4893, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.declare(metadata i8* %nothingSelected, metadata !4905, metadata !DIExpression()), !dbg !4906
  store i8 1, i8* %nothingSelected, align 1, !dbg !4906
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4907
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !4908
  store %struct.Sequence* %call2, %struct.Sequence** %seq, align 8, !dbg !4909
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4910
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !4910
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4912

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4913
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 5, !dbg !4914
  %5 = load i32, i32* %flag, align 8, !dbg !4914
  %and = and i32 %5, 1, !dbg !4915
  %tobool3 = icmp ne i32 %and, 0, !dbg !4915
  br i1 %tobool3, label %if.then, label %if.else, !dbg !4916

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %nothingSelected, align 1, !dbg !4917
  br label %if.end9, !dbg !4919

if.else:                                          ; preds = %land.lhs.true, %entry
  %6 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4920
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %6, i32 0, i32 0, !dbg !4923
  %7 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !4923
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %7, i32 0, i32 0, !dbg !4924
  %8 = load i8*, i8** %first, align 8, !dbg !4924
  %9 = bitcast i8* %8 to %struct.Sequence*, !dbg !4920
  store %struct.Sequence* %9, %struct.Sequence** %seq, align 8, !dbg !4925
  br label %for.cond, !dbg !4926

for.cond:                                         ; preds = %for.inc, %if.else
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4927
  %tobool4 = icmp ne %struct.Sequence* %10, null, !dbg !4929
  br i1 %tobool4, label %for.body, label %for.end, !dbg !4929

for.body:                                         ; preds = %for.cond
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4930
  %flag5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 5, !dbg !4933
  %12 = load i32, i32* %flag5, align 8, !dbg !4933
  %and6 = and i32 %12, 1, !dbg !4934
  %tobool7 = icmp ne i32 %and6, 0, !dbg !4934
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !4935

if.then8:                                         ; preds = %for.body
  store i8 0, i8* %nothingSelected, align 1, !dbg !4936
  br label %for.end, !dbg !4938

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4939

for.inc:                                          ; preds = %if.end
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4940
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 0, !dbg !4941
  %14 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !4941
  store %struct.Sequence* %14, %struct.Sequence** %seq, align 8, !dbg !4942
  br label %for.cond, !dbg !4943, !llvm.loop !4944

for.end:                                          ; preds = %if.then8, %for.cond
  br label %if.end9

if.end9:                                          ; preds = %for.end, %if.then
  %15 = load i8, i8* %nothingSelected, align 1, !dbg !4946
  %tobool10 = icmp ne i8 %15, 0, !dbg !4946
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !4948

if.then11:                                        ; preds = %if.end9
  store i32 4, i32* %retval, align 4, !dbg !4949
  br label %return, !dbg !4949

if.end12:                                         ; preds = %if.end9
  %16 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4950
  %seqbasep13 = getelementptr inbounds %struct.Editing, %struct.Editing* %16, i32 0, i32 0, !dbg !4952
  %17 = load %struct.ListBase*, %struct.ListBase** %seqbasep13, align 8, !dbg !4952
  %first14 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %17, i32 0, i32 0, !dbg !4953
  %18 = load i8*, i8** %first14, align 8, !dbg !4953
  %19 = bitcast i8* %18 to %struct.Sequence*, !dbg !4950
  store %struct.Sequence* %19, %struct.Sequence** %seq, align 8, !dbg !4954
  br label %for.cond15, !dbg !4955

for.cond15:                                       ; preds = %for.inc29, %if.end12
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4956
  %tobool16 = icmp ne %struct.Sequence* %20, null, !dbg !4958
  br i1 %tobool16, label %for.body17, label %for.end31, !dbg !4958

for.body17:                                       ; preds = %for.cond15
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4959
  %flag18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 5, !dbg !4962
  %22 = load i32, i32* %flag18, align 8, !dbg !4962
  %and19 = and i32 %22, 1, !dbg !4963
  %tobool20 = icmp ne i32 %and19, 0, !dbg !4963
  br i1 %tobool20, label %if.else27, label %if.then21, !dbg !4964

if.then21:                                        ; preds = %for.body17
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4965
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 6, !dbg !4968
  %24 = load i32, i32* %type, align 4, !dbg !4968
  %and22 = and i32 %24, 8, !dbg !4969
  %tobool23 = icmp ne i32 %and22, 0, !dbg !4969
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !4970

if.then24:                                        ; preds = %if.then21
  %25 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4971
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4973
  %call25 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %25, %struct.Sequence* %26), !dbg !4974
  br label %if.end26, !dbg !4975

if.end26:                                         ; preds = %if.then24, %if.then21
  br label %if.end28, !dbg !4976

if.else27:                                        ; preds = %for.body17
  %27 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4977
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4979
  call void @del_seq_clear_modifiers_recurs(%struct.Scene* %27, %struct.Sequence* %28), !dbg !4980
  br label %if.end28

if.end28:                                         ; preds = %if.else27, %if.end26
  br label %for.inc29, !dbg !4981

for.inc29:                                        ; preds = %if.end28
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4982
  %next30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 0, !dbg !4983
  %30 = load %struct.Sequence*, %struct.Sequence** %next30, align 8, !dbg !4983
  store %struct.Sequence* %30, %struct.Sequence** %seq, align 8, !dbg !4984
  br label %for.cond15, !dbg !4985, !llvm.loop !4986

for.end31:                                        ; preds = %for.cond15
  %31 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4988
  %32 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4989
  %seqbasep32 = getelementptr inbounds %struct.Editing, %struct.Editing* %32, i32 0, i32 0, !dbg !4990
  %33 = load %struct.ListBase*, %struct.ListBase** %seqbasep32, align 8, !dbg !4990
  call void @recurs_del_seq_flag(%struct.Scene* %31, %struct.ListBase* %33, i16 signext 1, i16 signext 0), !dbg !4991
  %34 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !4992
  %seqbasep33 = getelementptr inbounds %struct.Editing, %struct.Editing* %34, i32 0, i32 0, !dbg !4993
  %35 = load %struct.ListBase*, %struct.ListBase** %seqbasep33, align 8, !dbg !4993
  %first34 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %35, i32 0, i32 0, !dbg !4994
  %36 = load i8*, i8** %first34, align 8, !dbg !4994
  %37 = bitcast i8* %36 to %struct.Sequence*, !dbg !4992
  store %struct.Sequence* %37, %struct.Sequence** %seq, align 8, !dbg !4995
  br label %while.cond, !dbg !4996

while.cond:                                       ; preds = %while.body, %for.end31
  %38 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !4997
  %tobool35 = icmp ne %struct.Sequence* %38, null, !dbg !4996
  br i1 %tobool35, label %while.body, label %while.end, !dbg !4996

while.body:                                       ; preds = %while.cond
  %39 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !4998
  %40 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5000
  call void @BKE_sequence_calc(%struct.Scene* %39, %struct.Sequence* %40), !dbg !5001
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5002
  %next36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 0, !dbg !5003
  %42 = load %struct.Sequence*, %struct.Sequence** %next36, align 8, !dbg !5003
  store %struct.Sequence* %42, %struct.Sequence** %seq, align 8, !dbg !5004
  br label %while.cond, !dbg !4996, !llvm.loop !5005

while.end:                                        ; preds = %while.cond
  %43 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5007
  %metastack = getelementptr inbounds %struct.Editing, %struct.Editing* %43, i32 0, i32 2, !dbg !5008
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %metastack, i32 0, i32 1, !dbg !5009
  %44 = load i8*, i8** %last, align 8, !dbg !5009
  %45 = bitcast i8* %44 to %struct.MetaStack*, !dbg !5007
  store %struct.MetaStack* %45, %struct.MetaStack** %ms, align 8, !dbg !5010
  br label %while.cond37, !dbg !5011

while.cond37:                                     ; preds = %while.body39, %while.end
  %46 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5012
  %tobool38 = icmp ne %struct.MetaStack* %46, null, !dbg !5011
  br i1 %tobool38, label %while.body39, label %while.end40, !dbg !5011

while.body39:                                     ; preds = %while.cond37
  %47 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5013
  %48 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5015
  %parseq = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %48, i32 0, i32 3, !dbg !5016
  %49 = load %struct.Sequence*, %struct.Sequence** %parseq, align 8, !dbg !5016
  call void @BKE_sequence_calc(%struct.Scene* %47, %struct.Sequence* %49), !dbg !5017
  %50 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5018
  %prev = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %50, i32 0, i32 1, !dbg !5019
  %51 = load %struct.MetaStack*, %struct.MetaStack** %prev, align 8, !dbg !5019
  store %struct.MetaStack* %51, %struct.MetaStack** %ms, align 8, !dbg !5020
  br label %while.cond37, !dbg !5011, !llvm.loop !5021

while.end40:                                      ; preds = %while.cond37
  %52 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5023
  %53 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5024
  %54 = bitcast %struct.Scene* %53 to i8*, !dbg !5024
  call void @WM_event_add_notifier(%struct.bContext* %52, i32 67502080, i8* %54), !dbg !5025
  store i32 4, i32* %retval, align 4, !dbg !5026
  br label %return, !dbg !5026

return:                                           ; preds = %while.end40, %if.then11
  %55 = load i32, i32* %retval, align 4, !dbg !5027
  ret i32 %55, !dbg !5027
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_offset_clear(%struct.wmOperatorType* %ot) #0 !dbg !5028 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5029, metadata !DIExpression()), !dbg !5030
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5031
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5032
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.128, i64 0, i64 0), i8** %name, align 8, !dbg !5033
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5034
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5035
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.129, i64 0, i64 0), i8** %idname, align 8, !dbg !5036
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5037
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5038
  store i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.130, i64 0, i64 0), i8** %description, align 8, !dbg !5039
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5040
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5041
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_offset_clear_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5042
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5043
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5044
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !5045
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5046
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5047
  store i16 3, i16* %flag, align 8, !dbg !5048
  ret void, !dbg !5049
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_offset_clear_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !5050 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5051, metadata !DIExpression()), !dbg !5052
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !5053, metadata !DIExpression()), !dbg !5054
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !5055, metadata !DIExpression()), !dbg !5056
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5057
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5058
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !5056
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5059, metadata !DIExpression()), !dbg !5060
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5061
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5062
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !5060
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !5063, metadata !DIExpression()), !dbg !5064
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5065
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !5067
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5067
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !5068
  %4 = load i8*, i8** %first, align 8, !dbg !5068
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !5065
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !5069
  br label %for.cond, !dbg !5070

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5071
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !5073
  br i1 %tobool, label %for.body, label %for.end, !dbg !5073

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5074
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !5077
  %8 = load i32, i32* %type, align 4, !dbg !5077
  %and = and i32 %8, 8, !dbg !5078
  %cmp = icmp eq i32 %and, 0, !dbg !5079
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5080

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5081
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !5082
  %10 = load i32, i32* %flag, align 8, !dbg !5082
  %and2 = and i32 %10, 1, !dbg !5083
  %tobool3 = icmp ne i32 %and2, 0, !dbg !5083
  br i1 %tobool3, label %if.then, label %if.end, !dbg !5084

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5085
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 12, !dbg !5087
  store i32 0, i32* %endstill, align 4, !dbg !5088
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5089
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 11, !dbg !5090
  store i32 0, i32* %startstill, align 8, !dbg !5091
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5092
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 10, !dbg !5093
  store i32 0, i32* %endofs, align 4, !dbg !5094
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5095
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 9, !dbg !5096
  store i32 0, i32* %startofs, align 8, !dbg !5097
  br label %if.end, !dbg !5098

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5099

for.inc:                                          ; preds = %if.end
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5100
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 0, !dbg !5101
  %16 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !5101
  store %struct.Sequence* %16, %struct.Sequence** %seq, align 8, !dbg !5102
  br label %for.cond, !dbg !5103, !llvm.loop !5104

for.end:                                          ; preds = %for.cond
  %17 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5106
  %seqbasep4 = getelementptr inbounds %struct.Editing, %struct.Editing* %17, i32 0, i32 0, !dbg !5107
  %18 = load %struct.ListBase*, %struct.ListBase** %seqbasep4, align 8, !dbg !5107
  %first5 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %18, i32 0, i32 0, !dbg !5108
  %19 = load i8*, i8** %first5, align 8, !dbg !5108
  %20 = bitcast i8* %19 to %struct.Sequence*, !dbg !5106
  store %struct.Sequence* %20, %struct.Sequence** %seq, align 8, !dbg !5109
  br label %while.cond, !dbg !5110

while.cond:                                       ; preds = %while.body, %for.end
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5111
  %tobool6 = icmp ne %struct.Sequence* %21, null, !dbg !5110
  br i1 %tobool6, label %while.body, label %while.end, !dbg !5110

while.body:                                       ; preds = %while.cond
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5112
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5114
  call void @BKE_sequence_calc(%struct.Scene* %22, %struct.Sequence* %23), !dbg !5115
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5116
  %next7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !5117
  %25 = load %struct.Sequence*, %struct.Sequence** %next7, align 8, !dbg !5117
  store %struct.Sequence* %25, %struct.Sequence** %seq, align 8, !dbg !5118
  br label %while.cond, !dbg !5110, !llvm.loop !5119

while.end:                                        ; preds = %while.cond
  %26 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5121
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %26, i32 0, i32 0, !dbg !5123
  %27 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !5123
  %first9 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %27, i32 0, i32 0, !dbg !5124
  %28 = load i8*, i8** %first9, align 8, !dbg !5124
  %29 = bitcast i8* %28 to %struct.Sequence*, !dbg !5121
  store %struct.Sequence* %29, %struct.Sequence** %seq, align 8, !dbg !5125
  br label %for.cond10, !dbg !5126

for.cond10:                                       ; preds = %for.inc29, %while.end
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5127
  %tobool11 = icmp ne %struct.Sequence* %30, null, !dbg !5129
  br i1 %tobool11, label %for.body12, label %for.end31, !dbg !5129

for.body12:                                       ; preds = %for.cond10
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5130
  %type13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 6, !dbg !5133
  %32 = load i32, i32* %type13, align 4, !dbg !5133
  %and14 = and i32 %32, 8, !dbg !5134
  %cmp15 = icmp eq i32 %and14, 0, !dbg !5135
  br i1 %cmp15, label %land.lhs.true16, label %if.end28, !dbg !5136

land.lhs.true16:                                  ; preds = %for.body12
  %33 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5137
  %flag17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 5, !dbg !5138
  %34 = load i32, i32* %flag17, align 8, !dbg !5138
  %and18 = and i32 %34, 1, !dbg !5139
  %tobool19 = icmp ne i32 %and18, 0, !dbg !5139
  br i1 %tobool19, label %if.then20, label %if.end28, !dbg !5140

if.then20:                                        ; preds = %land.lhs.true16
  %35 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5141
  %seqbasep21 = getelementptr inbounds %struct.Editing, %struct.Editing* %35, i32 0, i32 0, !dbg !5144
  %36 = load %struct.ListBase*, %struct.ListBase** %seqbasep21, align 8, !dbg !5144
  %37 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5145
  %call22 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %36, %struct.Sequence* %37), !dbg !5146
  %tobool23 = icmp ne i8 %call22, 0, !dbg !5146
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !5147

if.then24:                                        ; preds = %if.then20
  %38 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5148
  %seqbasep25 = getelementptr inbounds %struct.Editing, %struct.Editing* %38, i32 0, i32 0, !dbg !5150
  %39 = load %struct.ListBase*, %struct.ListBase** %seqbasep25, align 8, !dbg !5150
  %40 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5151
  %41 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5152
  %call26 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %39, %struct.Sequence* %40, %struct.Scene* %41), !dbg !5153
  br label %if.end27, !dbg !5154

if.end27:                                         ; preds = %if.then24, %if.then20
  br label %if.end28, !dbg !5155

if.end28:                                         ; preds = %if.end27, %land.lhs.true16, %for.body12
  br label %for.inc29, !dbg !5156

for.inc29:                                        ; preds = %if.end28
  %42 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5157
  %next30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 0, !dbg !5158
  %43 = load %struct.Sequence*, %struct.Sequence** %next30, align 8, !dbg !5158
  store %struct.Sequence* %43, %struct.Sequence** %seq, align 8, !dbg !5159
  br label %for.cond10, !dbg !5160, !llvm.loop !5161

for.end31:                                        ; preds = %for.cond10
  %44 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5163
  %45 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5164
  %46 = bitcast %struct.Scene* %45 to i8*, !dbg !5164
  call void @WM_event_add_notifier(%struct.bContext* %44, i32 67502080, i8* %46), !dbg !5165
  ret i32 4, !dbg !5166
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_images_separate(%struct.wmOperatorType* %ot) #0 !dbg !5167 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5168, metadata !DIExpression()), !dbg !5169
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5170
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5171
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.131, i64 0, i64 0), i8** %name, align 8, !dbg !5172
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5173
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5174
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.132, i64 0, i64 0), i8** %idname, align 8, !dbg !5175
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5176
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5177
  store i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.133, i64 0, i64 0), i8** %description, align 8, !dbg !5178
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5179
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5180
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_separate_images_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5181
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5182
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 6, !dbg !5183
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @WM_operator_props_popup, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !5184
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5185
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 9, !dbg !5186
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !5187
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5188
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 19, !dbg !5189
  store i16 3, i16* %flag, align 8, !dbg !5190
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5191
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %7, i32 0, i32 11, !dbg !5192
  %8 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !5192
  %9 = bitcast %struct.StructRNA* %8 to i8*, !dbg !5191
  %call = call %struct.PropertyRNA* @RNA_def_int(i8* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.134, i64 0, i64 0), i32 1, i32 1, i32 2147483647, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.135, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.136, i64 0, i64 0), i32 1, i32 1000), !dbg !5193
  ret void, !dbg !5194
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_separate_images_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !5195 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %seq_new = alloca %struct.Sequence*, align 8
  %strip_new = alloca %struct.Strip*, align 8
  %se = alloca %struct.StripElem*, align 8
  %se_new = alloca %struct.StripElem*, align 8
  %start_ofs = alloca i32, align 4
  %cfra = alloca i32, align 4
  %frame_end = alloca i32, align 4
  %step = alloca i32, align 4
  %seq_next = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5196, metadata !DIExpression()), !dbg !5197
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !5198, metadata !DIExpression()), !dbg !5199
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !5200, metadata !DIExpression()), !dbg !5201
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5202
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5203
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !5201
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5204, metadata !DIExpression()), !dbg !5205
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5206
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5207
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !5205
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !5208, metadata !DIExpression()), !dbg !5209
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_new, metadata !5210, metadata !DIExpression()), !dbg !5211
  call void @llvm.dbg.declare(metadata %struct.Strip** %strip_new, metadata !5212, metadata !DIExpression()), !dbg !5213
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se, metadata !5214, metadata !DIExpression()), !dbg !5215
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se_new, metadata !5216, metadata !DIExpression()), !dbg !5217
  call void @llvm.dbg.declare(metadata i32* %start_ofs, metadata !5218, metadata !DIExpression()), !dbg !5219
  call void @llvm.dbg.declare(metadata i32* %cfra, metadata !5220, metadata !DIExpression()), !dbg !5221
  call void @llvm.dbg.declare(metadata i32* %frame_end, metadata !5222, metadata !DIExpression()), !dbg !5223
  call void @llvm.dbg.declare(metadata i32* %step, metadata !5224, metadata !DIExpression()), !dbg !5225
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !5226
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !5227
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !5227
  %call2 = call i32 @RNA_int_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.134, i64 0, i64 0)), !dbg !5228
  store i32 %call2, i32* %step, align 4, !dbg !5225
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5229
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !5230
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5230
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !5231
  %6 = load i8*, i8** %first, align 8, !dbg !5231
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !5229
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !5232
  br label %while.cond, !dbg !5233

while.cond:                                       ; preds = %if.end34, %entry
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5234
  %tobool = icmp ne %struct.Sequence* %8, null, !dbg !5233
  br i1 %tobool, label %while.body, label %while.end35, !dbg !5233

while.body:                                       ; preds = %while.cond
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5235
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 5, !dbg !5238
  %10 = load i32, i32* %flag, align 8, !dbg !5238
  %and = and i32 %10, 1, !dbg !5239
  %tobool3 = icmp ne i32 %and, 0, !dbg !5239
  br i1 %tobool3, label %land.lhs.true, label %if.else, !dbg !5240

land.lhs.true:                                    ; preds = %while.body
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5241
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 6, !dbg !5242
  %12 = load i32, i32* %type, align 4, !dbg !5242
  %cmp = icmp eq i32 %12, 0, !dbg !5243
  br i1 %cmp, label %land.lhs.true4, label %if.else, !dbg !5244

land.lhs.true4:                                   ; preds = %land.lhs.true
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5245
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 7, !dbg !5246
  %14 = load i32, i32* %len, align 8, !dbg !5246
  %cmp5 = icmp sgt i32 %14, 1, !dbg !5247
  br i1 %cmp5, label %if.then, label %if.else, !dbg !5248

if.then:                                          ; preds = %land.lhs.true4
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_next, metadata !5249, metadata !DIExpression()), !dbg !5251
  %15 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5252
  %seqbasep6 = getelementptr inbounds %struct.Editing, %struct.Editing* %15, i32 0, i32 0, !dbg !5253
  %16 = load %struct.ListBase*, %struct.ListBase** %seqbasep6, align 8, !dbg !5253
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5254
  %18 = bitcast %struct.Sequence* %17 to i8*, !dbg !5254
  call void @BLI_remlink(%struct.ListBase* %16, i8* %18), !dbg !5255
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5256
  %call7 = call i32 @BKE_sequence_tx_get_final_left(%struct.Sequence* %19, i8 zeroext 0), !dbg !5257
  store i32 %call7, i32* %cfra, align 4, !dbg !5258
  store i32 %call7, i32* %start_ofs, align 4, !dbg !5259
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5260
  %call8 = call i32 @BKE_sequence_tx_get_final_right(%struct.Sequence* %20, i8 zeroext 0), !dbg !5261
  store i32 %call8, i32* %frame_end, align 4, !dbg !5262
  br label %while.cond9, !dbg !5263

while.cond9:                                      ; preds = %if.end32, %if.then
  %21 = load i32, i32* %cfra, align 4, !dbg !5264
  %22 = load i32, i32* %frame_end, align 4, !dbg !5265
  %cmp10 = icmp slt i32 %21, %22, !dbg !5266
  br i1 %cmp10, label %while.body11, label %while.end, !dbg !5263

while.body11:                                     ; preds = %while.cond9
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5267
  %24 = load i32, i32* %cfra, align 4, !dbg !5269
  %call12 = call %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence* %23, i32 %24), !dbg !5270
  store %struct.StripElem* %call12, %struct.StripElem** %se, align 8, !dbg !5271
  %25 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5272
  %26 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5273
  %27 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5274
  %call13 = call %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %25, %struct.Scene* %26, %struct.Sequence* %27, i32 1), !dbg !5275
  store %struct.Sequence* %call13, %struct.Sequence** %seq_new, align 8, !dbg !5276
  %28 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5277
  %seqbasep14 = getelementptr inbounds %struct.Editing, %struct.Editing* %28, i32 0, i32 0, !dbg !5278
  %29 = load %struct.ListBase*, %struct.ListBase** %seqbasep14, align 8, !dbg !5278
  %30 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5279
  %31 = bitcast %struct.Sequence* %30 to i8*, !dbg !5279
  call void @BLI_addtail(%struct.ListBase* %29, i8* %31), !dbg !5280
  %32 = load i32, i32* %start_ofs, align 4, !dbg !5281
  %33 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5282
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 8, !dbg !5283
  store i32 %32, i32* %start, align 4, !dbg !5284
  %34 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5285
  %type15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 6, !dbg !5286
  store i32 0, i32* %type15, align 4, !dbg !5287
  %35 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5288
  %len16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 7, !dbg !5289
  store i32 1, i32* %len16, align 8, !dbg !5290
  %36 = load i32, i32* %step, align 4, !dbg !5291
  %sub = sub nsw i32 %36, 1, !dbg !5292
  %37 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5293
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 12, !dbg !5294
  store i32 %sub, i32* %endstill, align 4, !dbg !5295
  %38 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5296
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 24, !dbg !5297
  %39 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !5297
  store %struct.Strip* %39, %struct.Strip** %strip_new, align 8, !dbg !5298
  %40 = load %struct.Strip*, %struct.Strip** %strip_new, align 8, !dbg !5299
  %us = getelementptr inbounds %struct.Strip, %struct.Strip* %40, i32 0, i32 2, !dbg !5300
  store i32 1, i32* %us, align 8, !dbg !5301
  %41 = load i8* (i8*, i64, i8*)*, i8* (i8*, i64, i8*)** @MEM_reallocN_id, align 8, !dbg !5302
  %42 = load %struct.Strip*, %struct.Strip** %strip_new, align 8, !dbg !5302
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %42, i32 0, i32 6, !dbg !5302
  %43 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !5302
  %44 = bitcast %struct.StripElem* %43 to i8*, !dbg !5302
  %call17 = call i8* %41(i8* %44, i64 264, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.sequencer_separate_images_exec, i64 0, i64 0)), !dbg !5302
  %45 = bitcast i8* %call17 to %struct.StripElem*, !dbg !5302
  store %struct.StripElem* %45, %struct.StripElem** %se_new, align 8, !dbg !5303
  %46 = load %struct.StripElem*, %struct.StripElem** %se_new, align 8, !dbg !5304
  %name = getelementptr inbounds %struct.StripElem, %struct.StripElem* %46, i32 0, i32 0, !dbg !5305
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i64 0, i64 0, !dbg !5304
  %47 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !5306
  %name18 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %47, i32 0, i32 0, !dbg !5307
  %arraydecay19 = getelementptr inbounds [256 x i8], [256 x i8]* %name18, i64 0, i64 0, !dbg !5306
  %call20 = call i8* @BLI_strncpy(i8* %arraydecay, i8* %arraydecay19, i64 256), !dbg !5308
  %48 = load %struct.StripElem*, %struct.StripElem** %se_new, align 8, !dbg !5309
  %49 = load %struct.Strip*, %struct.Strip** %strip_new, align 8, !dbg !5310
  %stripdata21 = getelementptr inbounds %struct.Strip, %struct.Strip* %49, i32 0, i32 6, !dbg !5311
  store %struct.StripElem* %48, %struct.StripElem** %stripdata21, align 8, !dbg !5312
  %50 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5313
  %51 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5314
  call void @BKE_sequence_calc(%struct.Scene* %50, %struct.Sequence* %51), !dbg !5315
  %52 = load i32, i32* %step, align 4, !dbg !5316
  %cmp22 = icmp sgt i32 %52, 1, !dbg !5318
  br i1 %cmp22, label %if.then23, label %if.end32, !dbg !5319

if.then23:                                        ; preds = %while.body11
  %53 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5320
  %flag24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 5, !dbg !5322
  %54 = load i32, i32* %flag24, align 8, !dbg !5323
  %and25 = and i32 %54, -9, !dbg !5323
  store i32 %and25, i32* %flag24, align 8, !dbg !5323
  %55 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5324
  %seqbasep26 = getelementptr inbounds %struct.Editing, %struct.Editing* %55, i32 0, i32 0, !dbg !5326
  %56 = load %struct.ListBase*, %struct.ListBase** %seqbasep26, align 8, !dbg !5326
  %57 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5327
  %call27 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %56, %struct.Sequence* %57), !dbg !5328
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5328
  br i1 %tobool28, label %if.then29, label %if.end, !dbg !5329

if.then29:                                        ; preds = %if.then23
  %58 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5330
  %seqbasep30 = getelementptr inbounds %struct.Editing, %struct.Editing* %58, i32 0, i32 0, !dbg !5332
  %59 = load %struct.ListBase*, %struct.ListBase** %seqbasep30, align 8, !dbg !5332
  %60 = load %struct.Sequence*, %struct.Sequence** %seq_new, align 8, !dbg !5333
  %61 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5334
  %call31 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %59, %struct.Sequence* %60, %struct.Scene* %61), !dbg !5335
  br label %if.end, !dbg !5336

if.end:                                           ; preds = %if.then29, %if.then23
  br label %if.end32, !dbg !5337

if.end32:                                         ; preds = %if.end, %while.body11
  %62 = load i32, i32* %cfra, align 4, !dbg !5338
  %inc = add nsw i32 %62, 1, !dbg !5338
  store i32 %inc, i32* %cfra, align 4, !dbg !5338
  %63 = load i32, i32* %step, align 4, !dbg !5339
  %64 = load i32, i32* %start_ofs, align 4, !dbg !5340
  %add = add nsw i32 %64, %63, !dbg !5340
  store i32 %add, i32* %start_ofs, align 4, !dbg !5340
  br label %while.cond9, !dbg !5263, !llvm.loop !5341

while.end:                                        ; preds = %while.cond9
  %65 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5343
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %65, i32 0, i32 0, !dbg !5344
  %66 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !5344
  store %struct.Sequence* %66, %struct.Sequence** %seq_next, align 8, !dbg !5345
  %67 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5346
  %68 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5347
  call void @BKE_sequence_free(%struct.Scene* %67, %struct.Sequence* %68), !dbg !5348
  %69 = load %struct.Sequence*, %struct.Sequence** %seq_next, align 8, !dbg !5349
  store %struct.Sequence* %69, %struct.Sequence** %seq, align 8, !dbg !5350
  br label %if.end34, !dbg !5351

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %while.body
  %70 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5352
  %next33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 0, !dbg !5354
  %71 = load %struct.Sequence*, %struct.Sequence** %next33, align 8, !dbg !5354
  store %struct.Sequence* %71, %struct.Sequence** %seq, align 8, !dbg !5355
  br label %if.end34

if.end34:                                         ; preds = %if.else, %while.end
  br label %while.cond, !dbg !5233, !llvm.loop !5356

while.end35:                                      ; preds = %while.cond
  %72 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5358
  call void @BKE_sequencer_sort(%struct.Scene* %72), !dbg !5359
  %73 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5360
  %74 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5361
  %75 = bitcast %struct.Scene* %74 to i8*, !dbg !5361
  call void @WM_event_add_notifier(%struct.bContext* %73, i32 67502080, i8* %75), !dbg !5362
  ret i32 4, !dbg !5363
}

declare dso_local i32 @WM_operator_props_popup(%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_meta_toggle(%struct.wmOperatorType* %ot) #0 !dbg !5364 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5365, metadata !DIExpression()), !dbg !5366
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5367
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5368
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.137, i64 0, i64 0), i8** %name, align 8, !dbg !5369
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5370
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5371
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.138, i64 0, i64 0), i8** %idname, align 8, !dbg !5372
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5373
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5374
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.139, i64 0, i64 0), i8** %description, align 8, !dbg !5375
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5376
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5377
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_meta_toggle_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5378
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5379
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5380
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !5381
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5382
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5383
  store i16 3, i16* %flag, align 8, !dbg !5384
  ret void, !dbg !5385
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_meta_toggle_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !5386 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  %ms = alloca %struct.MetaStack*, align 8
  %seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5387, metadata !DIExpression()), !dbg !5388
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !5391, metadata !DIExpression()), !dbg !5392
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5393
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5394
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !5392
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5395, metadata !DIExpression()), !dbg !5396
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5397
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5398
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !5396
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !5399, metadata !DIExpression()), !dbg !5400
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5401
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !5402
  store %struct.Sequence* %call2, %struct.Sequence** %last_seq, align 8, !dbg !5400
  call void @llvm.dbg.declare(metadata %struct.MetaStack** %ms, metadata !5403, metadata !DIExpression()), !dbg !5404
  %3 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5405
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !5405
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5407

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5408
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !5409
  %5 = load i32, i32* %type, align 4, !dbg !5409
  %cmp = icmp eq i32 %5, 1, !dbg !5410
  br i1 %cmp, label %land.lhs.true3, label %if.else, !dbg !5411

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5412
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 5, !dbg !5413
  %7 = load i32, i32* %flag, align 8, !dbg !5413
  %and = and i32 %7, 1, !dbg !5414
  %tobool4 = icmp ne i32 %and, 0, !dbg !5414
  br i1 %tobool4, label %if.then, label %if.else, !dbg !5415

if.then:                                          ; preds = %land.lhs.true3
  %8 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_mallocN, align 8, !dbg !5416
  %call5 = call i8* %8(i64 40, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i64 0, i64 0)), !dbg !5416
  %9 = bitcast i8* %call5 to %struct.MetaStack*, !dbg !5416
  store %struct.MetaStack* %9, %struct.MetaStack** %ms, align 8, !dbg !5418
  %10 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5419
  %metastack = getelementptr inbounds %struct.Editing, %struct.Editing* %10, i32 0, i32 2, !dbg !5420
  %11 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5421
  %12 = bitcast %struct.MetaStack* %11 to i8*, !dbg !5421
  call void @BLI_addtail(%struct.ListBase* %metastack, i8* %12), !dbg !5422
  %13 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5423
  %14 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5424
  %parseq = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %14, i32 0, i32 3, !dbg !5425
  store %struct.Sequence* %13, %struct.Sequence** %parseq, align 8, !dbg !5426
  %15 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5427
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %15, i32 0, i32 0, !dbg !5428
  %16 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5428
  %17 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5429
  %oldbasep = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %17, i32 0, i32 2, !dbg !5430
  store %struct.ListBase* %16, %struct.ListBase** %oldbasep, align 8, !dbg !5431
  %18 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5432
  %disp_range = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %18, i32 0, i32 4, !dbg !5433
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range, i64 0, i64 0, !dbg !5432
  %19 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5434
  %parseq6 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %19, i32 0, i32 3, !dbg !5435
  %20 = load %struct.Sequence*, %struct.Sequence** %parseq6, align 8, !dbg !5435
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 15, !dbg !5436
  call void @copy_v2_v2_int(i32* %arraydecay, i32* %startdisp), !dbg !5437
  %21 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5438
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 36, !dbg !5439
  %22 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5440
  %seqbasep7 = getelementptr inbounds %struct.Editing, %struct.Editing* %22, i32 0, i32 0, !dbg !5441
  store %struct.ListBase* %seqbase, %struct.ListBase** %seqbasep7, align 8, !dbg !5442
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5443
  call void @BKE_sequencer_active_set(%struct.Scene* %23, %struct.Sequence* null), !dbg !5444
  br label %if.end39, !dbg !5445

if.else:                                          ; preds = %land.lhs.true3, %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !5446, metadata !DIExpression()), !dbg !5448
  %24 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5449
  %metastack8 = getelementptr inbounds %struct.Editing, %struct.Editing* %24, i32 0, i32 2, !dbg !5451
  %call9 = call zeroext i8 @BLI_listbase_is_empty(%struct.ListBase* %metastack8), !dbg !5452
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5452
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !5453

if.then11:                                        ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !5454
  br label %return, !dbg !5454

if.end:                                           ; preds = %if.else
  %25 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5455
  %metastack12 = getelementptr inbounds %struct.Editing, %struct.Editing* %25, i32 0, i32 2, !dbg !5456
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %metastack12, i32 0, i32 1, !dbg !5457
  %26 = load i8*, i8** %last, align 8, !dbg !5457
  %27 = bitcast i8* %26 to %struct.MetaStack*, !dbg !5455
  store %struct.MetaStack* %27, %struct.MetaStack** %ms, align 8, !dbg !5458
  %28 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5459
  %metastack13 = getelementptr inbounds %struct.Editing, %struct.Editing* %28, i32 0, i32 2, !dbg !5460
  %29 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5461
  %30 = bitcast %struct.MetaStack* %29 to i8*, !dbg !5461
  call void @BLI_remlink(%struct.ListBase* %metastack13, i8* %30), !dbg !5462
  %31 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5463
  %oldbasep14 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %31, i32 0, i32 2, !dbg !5464
  %32 = load %struct.ListBase*, %struct.ListBase** %oldbasep14, align 8, !dbg !5464
  %33 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5465
  %seqbasep15 = getelementptr inbounds %struct.Editing, %struct.Editing* %33, i32 0, i32 0, !dbg !5466
  store %struct.ListBase* %32, %struct.ListBase** %seqbasep15, align 8, !dbg !5467
  %34 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5468
  %disp_range16 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %34, i32 0, i32 4, !dbg !5470
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range16, i64 0, i64 0, !dbg !5468
  %35 = load i32, i32* %arrayidx, align 8, !dbg !5468
  %36 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5471
  %disp_range17 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %36, i32 0, i32 4, !dbg !5472
  %arrayidx18 = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range17, i64 0, i64 1, !dbg !5471
  %37 = load i32, i32* %arrayidx18, align 4, !dbg !5471
  %cmp19 = icmp eq i32 %35, %37, !dbg !5473
  br i1 %cmp19, label %if.then20, label %if.end25, !dbg !5474

if.then20:                                        ; preds = %if.end
  %38 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5475
  %disp_range21 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %38, i32 0, i32 4, !dbg !5477
  %arraydecay22 = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range21, i64 0, i64 0, !dbg !5475
  %39 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5478
  %parseq23 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %39, i32 0, i32 3, !dbg !5479
  %40 = load %struct.Sequence*, %struct.Sequence** %parseq23, align 8, !dbg !5479
  %startdisp24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 15, !dbg !5480
  call void @copy_v2_v2_int(i32* %arraydecay22, i32* %startdisp24), !dbg !5481
  br label %if.end25, !dbg !5482

if.end25:                                         ; preds = %if.then20, %if.end
  %41 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5483
  %seqbasep26 = getelementptr inbounds %struct.Editing, %struct.Editing* %41, i32 0, i32 0, !dbg !5485
  %42 = load %struct.ListBase*, %struct.ListBase** %seqbasep26, align 8, !dbg !5485
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %42, i32 0, i32 0, !dbg !5486
  %43 = load i8*, i8** %first, align 8, !dbg !5486
  %44 = bitcast i8* %43 to %struct.Sequence*, !dbg !5483
  store %struct.Sequence* %44, %struct.Sequence** %seq, align 8, !dbg !5487
  br label %for.cond, !dbg !5488

for.cond:                                         ; preds = %for.inc, %if.end25
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5489
  %tobool27 = icmp ne %struct.Sequence* %45, null, !dbg !5491
  br i1 %tobool27, label %for.body, label %for.end, !dbg !5491

for.body:                                         ; preds = %for.cond
  %46 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5492
  %47 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5493
  call void @BKE_sequence_calc(%struct.Scene* %46, %struct.Sequence* %47), !dbg !5494
  br label %for.inc, !dbg !5494

for.inc:                                          ; preds = %for.body
  %48 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5495
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 0, !dbg !5496
  %49 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !5496
  store %struct.Sequence* %49, %struct.Sequence** %seq, align 8, !dbg !5497
  br label %for.cond, !dbg !5498, !llvm.loop !5499

for.end:                                          ; preds = %for.cond
  %50 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5501
  %parseq28 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %50, i32 0, i32 3, !dbg !5502
  %51 = load %struct.Sequence*, %struct.Sequence** %parseq28, align 8, !dbg !5502
  %52 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5503
  %disp_range29 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %52, i32 0, i32 4, !dbg !5504
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range29, i64 0, i64 0, !dbg !5503
  %53 = load i32, i32* %arrayidx30, align 8, !dbg !5503
  call void @BKE_sequence_tx_set_final_left(%struct.Sequence* %51, i32 %53), !dbg !5505
  %54 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5506
  %parseq31 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %54, i32 0, i32 3, !dbg !5507
  %55 = load %struct.Sequence*, %struct.Sequence** %parseq31, align 8, !dbg !5507
  %56 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5508
  %disp_range32 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %56, i32 0, i32 4, !dbg !5509
  %arrayidx33 = getelementptr inbounds [2 x i32], [2 x i32]* %disp_range32, i64 0, i64 1, !dbg !5508
  %57 = load i32, i32* %arrayidx33, align 4, !dbg !5508
  call void @BKE_sequence_tx_set_final_right(%struct.Sequence* %55, i32 %57), !dbg !5510
  %58 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5511
  %59 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5512
  %parseq34 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %59, i32 0, i32 3, !dbg !5513
  %60 = load %struct.Sequence*, %struct.Sequence** %parseq34, align 8, !dbg !5513
  call void @BKE_sequence_calc(%struct.Scene* %58, %struct.Sequence* %60), !dbg !5514
  %61 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5515
  %62 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5516
  %parseq35 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %62, i32 0, i32 3, !dbg !5517
  %63 = load %struct.Sequence*, %struct.Sequence** %parseq35, align 8, !dbg !5517
  call void @BKE_sequencer_active_set(%struct.Scene* %61, %struct.Sequence* %63), !dbg !5518
  %64 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5519
  %parseq36 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %64, i32 0, i32 3, !dbg !5520
  %65 = load %struct.Sequence*, %struct.Sequence** %parseq36, align 8, !dbg !5520
  %flag37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %65, i32 0, i32 5, !dbg !5521
  %66 = load i32, i32* %flag37, align 8, !dbg !5522
  %or = or i32 %66, 1, !dbg !5522
  store i32 %or, i32* %flag37, align 8, !dbg !5522
  %67 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5523
  %parseq38 = getelementptr inbounds %struct.MetaStack, %struct.MetaStack* %67, i32 0, i32 3, !dbg !5524
  %68 = load %struct.Sequence*, %struct.Sequence** %parseq38, align 8, !dbg !5524
  call void @recurs_sel_seq(%struct.Sequence* %68), !dbg !5525
  %69 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !5526
  %70 = load %struct.MetaStack*, %struct.MetaStack** %ms, align 8, !dbg !5527
  %71 = bitcast %struct.MetaStack* %70 to i8*, !dbg !5527
  call void %69(i8* %71), !dbg !5526
  br label %if.end39

if.end39:                                         ; preds = %for.end, %if.then
  %72 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5528
  call void @BKE_sequencer_update_muting(%struct.Editing* %72), !dbg !5529
  %73 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5530
  %74 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5531
  %75 = bitcast %struct.Scene* %74 to i8*, !dbg !5531
  call void @WM_event_add_notifier(%struct.bContext* %73, i32 67502080, i8* %75), !dbg !5532
  store i32 4, i32* %retval, align 4, !dbg !5533
  br label %return, !dbg !5533

return:                                           ; preds = %if.end39, %if.then11
  %76 = load i32, i32* %retval, align 4, !dbg !5534
  ret i32 %76, !dbg !5534
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_meta_make(%struct.wmOperatorType* %ot) #0 !dbg !5535 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5536, metadata !DIExpression()), !dbg !5537
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5538
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5539
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.140, i64 0, i64 0), i8** %name, align 8, !dbg !5540
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5541
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5542
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.141, i64 0, i64 0), i8** %idname, align 8, !dbg !5543
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5544
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5545
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.142, i64 0, i64 0), i8** %description, align 8, !dbg !5546
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5547
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5548
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_meta_make_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5549
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5550
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5551
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !5552
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5553
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5554
  store i16 3, i16* %flag, align 8, !dbg !5555
  ret void, !dbg !5556
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_meta_make_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !5557 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %seqm = alloca %struct.Sequence*, align 8
  %next = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  %channel_max = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5558, metadata !DIExpression()), !dbg !5559
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !5560, metadata !DIExpression()), !dbg !5561
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !5562, metadata !DIExpression()), !dbg !5563
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5564
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5565
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !5563
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5566, metadata !DIExpression()), !dbg !5567
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5568
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5569
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !5567
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !5570, metadata !DIExpression()), !dbg !5571
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqm, metadata !5572, metadata !DIExpression()), !dbg !5573
  call void @llvm.dbg.declare(metadata %struct.Sequence** %next, metadata !5574, metadata !DIExpression()), !dbg !5575
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !5576, metadata !DIExpression()), !dbg !5577
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5578
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !5579
  store %struct.Sequence* %call2, %struct.Sequence** %last_seq, align 8, !dbg !5577
  call void @llvm.dbg.declare(metadata i32* %channel_max, metadata !5580, metadata !DIExpression()), !dbg !5581
  store i32 1, i32* %channel_max, align 4, !dbg !5581
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5582
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 0, !dbg !5584
  %4 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5584
  %call3 = call zeroext i8 @BKE_sequence_base_isolated_sel_check(%struct.ListBase* %4, i8 zeroext 0), !dbg !5585
  %conv = zext i8 %call3 to i32, !dbg !5585
  %cmp = icmp eq i32 %conv, 0, !dbg !5586
  br i1 %cmp, label %if.then, label %if.end, !dbg !5587

if.then:                                          ; preds = %entry
  %5 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !5588
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %5, i32 0, i32 8, !dbg !5590
  %6 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !5590
  call void @BKE_report(%struct.ReportList* %6, i32 32, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.212, i64 0, i64 0)), !dbg !5591
  store i32 2, i32* %retval, align 4, !dbg !5592
  br label %return, !dbg !5592

if.end:                                           ; preds = %entry
  %7 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5593
  %seqbasep5 = getelementptr inbounds %struct.Editing, %struct.Editing* %7, i32 0, i32 0, !dbg !5594
  %8 = load %struct.ListBase*, %struct.ListBase** %seqbasep5, align 8, !dbg !5594
  %call6 = call %struct.Sequence* @BKE_sequence_alloc(%struct.ListBase* %8, i32 1, i32 1), !dbg !5595
  store %struct.Sequence* %call6, %struct.Sequence** %seqm, align 8, !dbg !5596
  %9 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5597
  %name = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 4, !dbg !5598
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %name, i64 0, i64 0, !dbg !5597
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 2, !dbg !5599
  %call7 = call i8* @strcpy(i8* %add.ptr, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.213, i64 0, i64 0)) #7, !dbg !5600
  %10 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5601
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !5602
  store i32 1, i32* %type, align 4, !dbg !5603
  %11 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5604
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 5, !dbg !5605
  store i32 1, i32* %flag, align 8, !dbg !5606
  %12 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5607
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %12, i32 0, i32 0, !dbg !5608
  %13 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !5608
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %13, i32 0, i32 0, !dbg !5609
  %14 = load i8*, i8** %first, align 8, !dbg !5609
  %15 = bitcast i8* %14 to %struct.Sequence*, !dbg !5607
  store %struct.Sequence* %15, %struct.Sequence** %seq, align 8, !dbg !5610
  br label %while.cond, !dbg !5611

while.cond:                                       ; preds = %if.end17, %if.end
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5612
  %tobool = icmp ne %struct.Sequence* %16, null, !dbg !5611
  br i1 %tobool, label %while.body, label %while.end, !dbg !5611

while.body:                                       ; preds = %while.cond
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5613
  %next9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 0, !dbg !5615
  %18 = load %struct.Sequence*, %struct.Sequence** %next9, align 8, !dbg !5615
  store %struct.Sequence* %18, %struct.Sequence** %next, align 8, !dbg !5616
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5617
  %20 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5619
  %cmp10 = icmp ne %struct.Sequence* %19, %20, !dbg !5620
  br i1 %cmp10, label %land.lhs.true, label %if.end17, !dbg !5621

land.lhs.true:                                    ; preds = %while.body
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5622
  %flag12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 5, !dbg !5623
  %22 = load i32, i32* %flag12, align 8, !dbg !5623
  %and = and i32 %22, 1, !dbg !5624
  %tobool13 = icmp ne i32 %and, 0, !dbg !5624
  br i1 %tobool13, label %if.then14, label %if.end17, !dbg !5625

if.then14:                                        ; preds = %land.lhs.true
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5626
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5628
  call void @BKE_sequence_invalidate_cache(%struct.Scene* %23, %struct.Sequence* %24), !dbg !5629
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5630
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 13, !dbg !5631
  %26 = load i32, i32* %machine, align 8, !dbg !5631
  %27 = load i32, i32* %channel_max, align 4, !dbg !5632
  %call15 = call i32 @max_ii(i32 %26, i32 %27), !dbg !5633
  store i32 %call15, i32* %channel_max, align 4, !dbg !5634
  %28 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5635
  %seqbasep16 = getelementptr inbounds %struct.Editing, %struct.Editing* %28, i32 0, i32 0, !dbg !5636
  %29 = load %struct.ListBase*, %struct.ListBase** %seqbasep16, align 8, !dbg !5636
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5637
  %31 = bitcast %struct.Sequence* %30 to i8*, !dbg !5637
  call void @BLI_remlink(%struct.ListBase* %29, i8* %31), !dbg !5638
  %32 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5639
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 36, !dbg !5640
  %33 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5641
  %34 = bitcast %struct.Sequence* %33 to i8*, !dbg !5641
  call void @BLI_addtail(%struct.ListBase* %seqbase, i8* %34), !dbg !5642
  br label %if.end17, !dbg !5643

if.end17:                                         ; preds = %if.then14, %land.lhs.true, %while.body
  %35 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !5644
  store %struct.Sequence* %35, %struct.Sequence** %seq, align 8, !dbg !5645
  br label %while.cond, !dbg !5611, !llvm.loop !5646

while.end:                                        ; preds = %while.cond
  %36 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5648
  %tobool18 = icmp ne %struct.Sequence* %36, null, !dbg !5648
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !5648

cond.true:                                        ; preds = %while.end
  %37 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5649
  %machine19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 13, !dbg !5650
  %38 = load i32, i32* %machine19, align 8, !dbg !5650
  br label %cond.end, !dbg !5648

cond.false:                                       ; preds = %while.end
  %39 = load i32, i32* %channel_max, align 4, !dbg !5651
  br label %cond.end, !dbg !5648

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %38, %cond.true ], [ %39, %cond.false ], !dbg !5648
  %40 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5652
  %machine20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 13, !dbg !5653
  store i32 %cond, i32* %machine20, align 8, !dbg !5654
  %41 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5655
  %42 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5656
  call void @BKE_sequence_calc(%struct.Scene* %41, %struct.Sequence* %42), !dbg !5657
  %43 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !5658
  %call21 = call i8* %43(i64 904, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214, i64 0, i64 0)), !dbg !5658
  %44 = bitcast i8* %call21 to %struct.Strip*, !dbg !5658
  %45 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5659
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 24, !dbg !5660
  store %struct.Strip* %44, %struct.Strip** %strip, align 8, !dbg !5661
  %46 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5662
  %strip22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 24, !dbg !5663
  %47 = load %struct.Strip*, %struct.Strip** %strip22, align 8, !dbg !5663
  %us = getelementptr inbounds %struct.Strip, %struct.Strip* %47, i32 0, i32 2, !dbg !5664
  store i32 1, i32* %us, align 8, !dbg !5665
  %48 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5666
  %49 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5667
  call void @BKE_sequencer_active_set(%struct.Scene* %48, %struct.Sequence* %49), !dbg !5668
  %50 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5669
  %seqbasep23 = getelementptr inbounds %struct.Editing, %struct.Editing* %50, i32 0, i32 0, !dbg !5671
  %51 = load %struct.ListBase*, %struct.ListBase** %seqbasep23, align 8, !dbg !5671
  %52 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5672
  %call24 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %51, %struct.Sequence* %52), !dbg !5673
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5673
  br i1 %tobool25, label %if.then26, label %if.end29, !dbg !5674

if.then26:                                        ; preds = %cond.end
  %53 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5675
  %seqbasep27 = getelementptr inbounds %struct.Editing, %struct.Editing* %53, i32 0, i32 0, !dbg !5676
  %54 = load %struct.ListBase*, %struct.ListBase** %seqbasep27, align 8, !dbg !5676
  %55 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5677
  %56 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5678
  %call28 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %54, %struct.Sequence* %55, %struct.Scene* %56), !dbg !5679
  br label %if.end29, !dbg !5679

if.end29:                                         ; preds = %if.then26, %cond.end
  %57 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5680
  call void @BKE_sequencer_update_muting(%struct.Editing* %57), !dbg !5681
  %58 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5682
  %ed30 = getelementptr inbounds %struct.Scene, %struct.Scene* %58, i32 0, i32 19, !dbg !5683
  %59 = load %struct.Editing*, %struct.Editing** %ed30, align 8, !dbg !5683
  %seqbase31 = getelementptr inbounds %struct.Editing, %struct.Editing* %59, i32 0, i32 1, !dbg !5684
  %60 = load %struct.Sequence*, %struct.Sequence** %seqm, align 8, !dbg !5685
  call void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbase31, %struct.Sequence* %60), !dbg !5686
  %61 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5687
  %62 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5688
  %63 = bitcast %struct.Scene* %62 to i8*, !dbg !5688
  call void @WM_event_add_notifier(%struct.bContext* %61, i32 67502080, i8* %63), !dbg !5689
  store i32 4, i32* %retval, align 4, !dbg !5690
  br label %return, !dbg !5690

return:                                           ; preds = %if.end29, %if.then
  %64 = load i32, i32* %retval, align 4, !dbg !5691
  ret i32 %64, !dbg !5691
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_meta_separate(%struct.wmOperatorType* %ot) #0 !dbg !5692 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5693, metadata !DIExpression()), !dbg !5694
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5695
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5696
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.143, i64 0, i64 0), i8** %name, align 8, !dbg !5697
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5698
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5699
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.144, i64 0, i64 0), i8** %idname, align 8, !dbg !5700
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5701
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5702
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.145, i64 0, i64 0), i8** %description, align 8, !dbg !5703
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5704
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5705
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_meta_separate_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5706
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5707
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5708
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !5709
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5710
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5711
  store i16 3, i16* %flag, align 8, !dbg !5712
  ret void, !dbg !5713
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_meta_separate_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !5714 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5715, metadata !DIExpression()), !dbg !5716
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !5717, metadata !DIExpression()), !dbg !5718
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !5719, metadata !DIExpression()), !dbg !5720
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5721
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5722
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !5720
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !5723, metadata !DIExpression()), !dbg !5724
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5725
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !5726
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !5724
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !5727, metadata !DIExpression()), !dbg !5728
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !5729, metadata !DIExpression()), !dbg !5730
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5731
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !5732
  store %struct.Sequence* %call2, %struct.Sequence** %last_seq, align 8, !dbg !5730
  %3 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5733
  %cmp = icmp eq %struct.Sequence* %3, null, !dbg !5735
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5736

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5737
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 6, !dbg !5738
  %5 = load i32, i32* %type, align 4, !dbg !5738
  %cmp3 = icmp ne i32 %5, 1, !dbg !5739
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5740

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 2, i32* %retval, align 4, !dbg !5741
  br label %return, !dbg !5741

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5742
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 36, !dbg !5744
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !5745
  %7 = load i8*, i8** %first, align 8, !dbg !5745
  %8 = bitcast i8* %7 to %struct.Sequence*, !dbg !5742
  store %struct.Sequence* %8, %struct.Sequence** %seq, align 8, !dbg !5746
  br label %for.cond, !dbg !5747

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5748
  %cmp4 = icmp ne %struct.Sequence* %9, null, !dbg !5750
  br i1 %cmp4, label %for.body, label %for.end, !dbg !5751

for.body:                                         ; preds = %for.cond
  %10 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5752
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5754
  call void @BKE_sequence_invalidate_cache(%struct.Scene* %10, %struct.Sequence* %11), !dbg !5755
  br label %for.inc, !dbg !5756

for.inc:                                          ; preds = %for.body
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5757
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 0, !dbg !5758
  %13 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !5758
  store %struct.Sequence* %13, %struct.Sequence** %seq, align 8, !dbg !5759
  br label %for.cond, !dbg !5760, !llvm.loop !5761

for.end:                                          ; preds = %for.cond
  %14 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5763
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %14, i32 0, i32 0, !dbg !5764
  %15 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !5764
  %16 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5765
  %seqbase5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 36, !dbg !5766
  call void @BLI_movelisttolist(%struct.ListBase* %15, %struct.ListBase* %seqbase5), !dbg !5767
  %17 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5768
  %seqbase6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 36, !dbg !5769
  call void @BLI_listbase_clear(%struct.ListBase* %seqbase6), !dbg !5770
  %18 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5771
  %seqbasep7 = getelementptr inbounds %struct.Editing, %struct.Editing* %18, i32 0, i32 0, !dbg !5772
  %19 = load %struct.ListBase*, %struct.ListBase** %seqbasep7, align 8, !dbg !5772
  %20 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5773
  %21 = bitcast %struct.Sequence* %20 to i8*, !dbg !5773
  call void @BLI_remlink(%struct.ListBase* %19, i8* %21), !dbg !5774
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5775
  %23 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5776
  call void @BKE_sequence_free(%struct.Scene* %22, %struct.Sequence* %23), !dbg !5777
  %24 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5778
  %seqbasep8 = getelementptr inbounds %struct.Editing, %struct.Editing* %24, i32 0, i32 0, !dbg !5780
  %25 = load %struct.ListBase*, %struct.ListBase** %seqbasep8, align 8, !dbg !5780
  %first9 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %25, i32 0, i32 0, !dbg !5781
  %26 = load i8*, i8** %first9, align 8, !dbg !5781
  %27 = bitcast i8* %26 to %struct.Sequence*, !dbg !5778
  store %struct.Sequence* %27, %struct.Sequence** %seq, align 8, !dbg !5782
  br label %for.cond10, !dbg !5783

for.cond10:                                       ; preds = %for.inc18, %for.end
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5784
  %tobool = icmp ne %struct.Sequence* %28, null, !dbg !5786
  br i1 %tobool, label %for.body11, label %for.end20, !dbg !5786

for.body11:                                       ; preds = %for.cond10
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5787
  %type12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 6, !dbg !5789
  %30 = load i32, i32* %type12, align 4, !dbg !5789
  %and = and i32 %30, 8, !dbg !5790
  %tobool13 = icmp ne i32 %and, 0, !dbg !5790
  br i1 %tobool13, label %land.lhs.true, label %if.end17, !dbg !5791

land.lhs.true:                                    ; preds = %for.body11
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5792
  %32 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !5793
  %call14 = call i32 @seq_depends_on_meta(%struct.Sequence* %31, %struct.Sequence* %32), !dbg !5794
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5794
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5795

if.then16:                                        ; preds = %land.lhs.true
  %33 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5796
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %33, i32 0, i32 5, !dbg !5797
  %34 = load i32, i32* %flag, align 8, !dbg !5798
  %or = or i32 %34, 1024, !dbg !5798
  store i32 %or, i32* %flag, align 8, !dbg !5798
  br label %if.end17, !dbg !5796

if.end17:                                         ; preds = %if.then16, %land.lhs.true, %for.body11
  br label %for.inc18, !dbg !5799

for.inc18:                                        ; preds = %if.end17
  %35 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5800
  %next19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 0, !dbg !5801
  %36 = load %struct.Sequence*, %struct.Sequence** %next19, align 8, !dbg !5801
  store %struct.Sequence* %36, %struct.Sequence** %seq, align 8, !dbg !5802
  br label %for.cond10, !dbg !5803, !llvm.loop !5804

for.end20:                                        ; preds = %for.cond10
  %37 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5806
  %38 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5807
  %seqbasep21 = getelementptr inbounds %struct.Editing, %struct.Editing* %38, i32 0, i32 0, !dbg !5808
  %39 = load %struct.ListBase*, %struct.ListBase** %seqbasep21, align 8, !dbg !5808
  call void @recurs_del_seq_flag(%struct.Scene* %37, %struct.ListBase* %39, i16 signext 1024, i16 signext 0), !dbg !5809
  %40 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5810
  %seqbasep22 = getelementptr inbounds %struct.Editing, %struct.Editing* %40, i32 0, i32 0, !dbg !5812
  %41 = load %struct.ListBase*, %struct.ListBase** %seqbasep22, align 8, !dbg !5812
  %first23 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %41, i32 0, i32 0, !dbg !5813
  %42 = load i8*, i8** %first23, align 8, !dbg !5813
  %43 = bitcast i8* %42 to %struct.Sequence*, !dbg !5810
  store %struct.Sequence* %43, %struct.Sequence** %seq, align 8, !dbg !5814
  br label %for.cond24, !dbg !5815

for.cond24:                                       ; preds = %for.inc41, %for.end20
  %44 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5816
  %tobool25 = icmp ne %struct.Sequence* %44, null, !dbg !5818
  br i1 %tobool25, label %for.body26, label %for.end43, !dbg !5818

for.body26:                                       ; preds = %for.cond24
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5819
  %flag27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 5, !dbg !5822
  %46 = load i32, i32* %flag27, align 8, !dbg !5822
  %and28 = and i32 %46, 1, !dbg !5823
  %tobool29 = icmp ne i32 %and28, 0, !dbg !5823
  br i1 %tobool29, label %if.then30, label %if.end40, !dbg !5824

if.then30:                                        ; preds = %for.body26
  %47 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5825
  %flag31 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 5, !dbg !5827
  %48 = load i32, i32* %flag31, align 8, !dbg !5828
  %and32 = and i32 %48, -9, !dbg !5828
  store i32 %and32, i32* %flag31, align 8, !dbg !5828
  %49 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5829
  %seqbasep33 = getelementptr inbounds %struct.Editing, %struct.Editing* %49, i32 0, i32 0, !dbg !5831
  %50 = load %struct.ListBase*, %struct.ListBase** %seqbasep33, align 8, !dbg !5831
  %51 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5832
  %call34 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %50, %struct.Sequence* %51), !dbg !5833
  %tobool35 = icmp ne i8 %call34, 0, !dbg !5833
  br i1 %tobool35, label %if.then36, label %if.end39, !dbg !5834

if.then36:                                        ; preds = %if.then30
  %52 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5835
  %seqbasep37 = getelementptr inbounds %struct.Editing, %struct.Editing* %52, i32 0, i32 0, !dbg !5837
  %53 = load %struct.ListBase*, %struct.ListBase** %seqbasep37, align 8, !dbg !5837
  %54 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5838
  %55 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5839
  %call38 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %53, %struct.Sequence* %54, %struct.Scene* %55), !dbg !5840
  br label %if.end39, !dbg !5841

if.end39:                                         ; preds = %if.then36, %if.then30
  br label %if.end40, !dbg !5842

if.end40:                                         ; preds = %if.end39, %for.body26
  br label %for.inc41, !dbg !5843

for.inc41:                                        ; preds = %if.end40
  %56 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !5844
  %next42 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 0, !dbg !5845
  %57 = load %struct.Sequence*, %struct.Sequence** %next42, align 8, !dbg !5845
  store %struct.Sequence* %57, %struct.Sequence** %seq, align 8, !dbg !5846
  br label %for.cond24, !dbg !5847, !llvm.loop !5848

for.end43:                                        ; preds = %for.cond24
  %58 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5850
  call void @BKE_sequencer_sort(%struct.Scene* %58), !dbg !5851
  %59 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !5852
  call void @BKE_sequencer_update_muting(%struct.Editing* %59), !dbg !5853
  %60 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5854
  %61 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !5855
  %62 = bitcast %struct.Scene* %61 to i8*, !dbg !5855
  call void @WM_event_add_notifier(%struct.bContext* %60, i32 67502080, i8* %62), !dbg !5856
  store i32 4, i32* %retval, align 4, !dbg !5857
  br label %return, !dbg !5857

return:                                           ; preds = %for.end43, %if.then
  %63 = load i32, i32* %retval, align 4, !dbg !5858
  ret i32 %63, !dbg !5858
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_all(%struct.wmOperatorType* %ot) #0 !dbg !5859 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5860, metadata !DIExpression()), !dbg !5861
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5862
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5863
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.146, i64 0, i64 0), i8** %name, align 8, !dbg !5864
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5865
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5866
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.147, i64 0, i64 0), i8** %idname, align 8, !dbg !5867
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5868
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5869
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.148, i64 0, i64 0), i8** %description, align 8, !dbg !5870
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5871
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5872
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_view_all_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5873
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5874
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5875
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !5876
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5877
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5878
  store i16 1, i16* %flag, align 8, !dbg !5879
  ret void, !dbg !5880
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_view_all_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !5881 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %ar = alloca %struct.ARegion*, align 8
  %v2d = alloca %struct.View2D*, align 8
  %smooth_viewtx = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5882, metadata !DIExpression()), !dbg !5883
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !5884, metadata !DIExpression()), !dbg !5885
  call void @llvm.dbg.declare(metadata %struct.ARegion** %ar, metadata !5886, metadata !DIExpression()), !dbg !5887
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5888
  %call = call %struct.ARegion* @CTX_wm_region(%struct.bContext* %0), !dbg !5889
  store %struct.ARegion* %call, %struct.ARegion** %ar, align 8, !dbg !5887
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !5890, metadata !DIExpression()), !dbg !5891
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5892
  %call1 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %1), !dbg !5893
  store %struct.View2D* %call1, %struct.View2D** %v2d, align 8, !dbg !5891
  call void @llvm.dbg.declare(metadata i32* %smooth_viewtx, metadata !5894, metadata !DIExpression()), !dbg !5895
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !5896
  %call2 = call i32 @WM_operator_smooth_viewtx_get(%struct.wmOperator* %2), !dbg !5897
  store i32 %call2, i32* %smooth_viewtx, align 4, !dbg !5895
  %3 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5898
  %4 = load %struct.ARegion*, %struct.ARegion** %ar, align 8, !dbg !5899
  %5 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !5900
  %tot = getelementptr inbounds %struct.View2D, %struct.View2D* %5, i32 0, i32 0, !dbg !5901
  %6 = load i32, i32* %smooth_viewtx, align 4, !dbg !5902
  call void @UI_view2d_smooth_view(%struct.bContext* %3, %struct.ARegion* %4, %struct.rctf* %tot, i32 %6), !dbg !5903
  ret i32 4, !dbg !5904
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_all_preview(%struct.wmOperatorType* %ot) #0 !dbg !5905 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5906, metadata !DIExpression()), !dbg !5907
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5908
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5909
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.146, i64 0, i64 0), i8** %name, align 8, !dbg !5910
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5911
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5912
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.149, i64 0, i64 0), i8** %idname, align 8, !dbg !5913
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5914
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5915
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.150, i64 0, i64 0), i8** %description, align 8, !dbg !5916
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5917
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5918
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_view_all_preview_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5919
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5920
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5921
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !5922
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5923
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !5924
  store i16 1, i16* %flag, align 8, !dbg !5925
  ret void, !dbg !5926
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_view_all_preview_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !5927 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %sc = alloca %struct.bScreen*, align 8
  %area = alloca %struct.ScrArea*, align 8
  %v2d = alloca %struct.View2D*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5928, metadata !DIExpression()), !dbg !5929
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !5930, metadata !DIExpression()), !dbg !5931
  call void @llvm.dbg.declare(metadata %struct.bScreen** %sc, metadata !5932, metadata !DIExpression()), !dbg !5933
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5934
  %call = call %struct.bScreen* @CTX_wm_screen(%struct.bContext* %0), !dbg !5935
  store %struct.bScreen* %call, %struct.bScreen** %sc, align 8, !dbg !5933
  call void @llvm.dbg.declare(metadata %struct.ScrArea** %area, metadata !5936, metadata !DIExpression()), !dbg !5937
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5938
  %call1 = call %struct.ScrArea* @CTX_wm_area(%struct.bContext* %1), !dbg !5939
  store %struct.ScrArea* %call1, %struct.ScrArea** %area, align 8, !dbg !5937
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !5940, metadata !DIExpression()), !dbg !5941
  %2 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5942
  %call2 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %2), !dbg !5943
  store %struct.View2D* %call2, %struct.View2D** %v2d, align 8, !dbg !5941
  %3 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !5944
  %cur = getelementptr inbounds %struct.View2D, %struct.View2D* %3, i32 0, i32 1, !dbg !5945
  %4 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !5946
  %tot = getelementptr inbounds %struct.View2D, %struct.View2D* %4, i32 0, i32 0, !dbg !5947
  %5 = bitcast %struct.rctf* %cur to i8*, !dbg !5947
  %6 = bitcast %struct.rctf* %tot to i8*, !dbg !5947
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false), !dbg !5947
  %7 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !5948
  call void @UI_view2d_curRect_validate(%struct.View2D* %7), !dbg !5949
  %8 = load %struct.bScreen*, %struct.bScreen** %sc, align 8, !dbg !5950
  %9 = load %struct.ScrArea*, %struct.ScrArea** %area, align 8, !dbg !5951
  %10 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !5952
  call void @UI_view2d_sync(%struct.bScreen* %8, %struct.ScrArea* %9, %struct.View2D* %10, i32 1), !dbg !5953
  %11 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5954
  %call3 = call %struct.ScrArea* @CTX_wm_area(%struct.bContext* %11), !dbg !5955
  call void @ED_area_tag_redraw(%struct.ScrArea* %call3), !dbg !5956
  ret i32 4, !dbg !5957
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_zoom_ratio(%struct.wmOperatorType* %ot) #0 !dbg !5958 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5961
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !5962
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.151, i64 0, i64 0), i8** %name, align 8, !dbg !5963
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5964
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !5965
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.152, i64 0, i64 0), i8** %idname, align 8, !dbg !5966
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5967
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !5968
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.153, i64 0, i64 0), i8** %description, align 8, !dbg !5969
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5970
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !5971
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_view_zoom_ratio_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !5972
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5973
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !5974
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !5975
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !5976
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 11, !dbg !5977
  %6 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !5977
  %7 = bitcast %struct.StructRNA* %6 to i8*, !dbg !5976
  %call = call %struct.PropertyRNA* @RNA_def_float(i8* %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.154, i64 0, i64 0), float 1.000000e+00, float 0xC7EFFFFFE0000000, float 0x47EFFFFFE0000000, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.155, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.156, i64 0, i64 0), float 0xC7EFFFFFE0000000, float 0x47EFFFFFE0000000), !dbg !5978
  ret void, !dbg !5979
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_view_zoom_ratio_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !5980 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %rd = alloca %struct.RenderData*, align 8
  %v2d = alloca %struct.View2D*, align 8
  %ratio = alloca float, align 4
  %winx = alloca float, align 4
  %winy = alloca float, align 4
  %facx = alloca float, align 4
  %facy = alloca float, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !5981, metadata !DIExpression()), !dbg !5982
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !5983, metadata !DIExpression()), !dbg !5984
  call void @llvm.dbg.declare(metadata %struct.RenderData** %rd, metadata !5985, metadata !DIExpression()), !dbg !5988
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5989
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !5990
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %call, i32 0, i32 22, !dbg !5991
  store %struct.RenderData* %r, %struct.RenderData** %rd, align 8, !dbg !5988
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !5992, metadata !DIExpression()), !dbg !5993
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !5994
  %call1 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %1), !dbg !5995
  store %struct.View2D* %call1, %struct.View2D** %v2d, align 8, !dbg !5993
  call void @llvm.dbg.declare(metadata float* %ratio, metadata !5996, metadata !DIExpression()), !dbg !5997
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !5998
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 7, !dbg !5999
  %3 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !5999
  %call2 = call float @RNA_float_get(%struct.PointerRNA* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.154, i64 0, i64 0)), !dbg !6000
  store float %call2, float* %ratio, align 4, !dbg !5997
  call void @llvm.dbg.declare(metadata float* %winx, metadata !6001, metadata !DIExpression()), !dbg !6002
  %4 = load %struct.RenderData*, %struct.RenderData** %rd, align 8, !dbg !6003
  %size = getelementptr inbounds %struct.RenderData, %struct.RenderData* %4, i32 0, i32 30, !dbg !6004
  %5 = load i16, i16* %size, align 2, !dbg !6004
  %conv = sext i16 %5 to i32, !dbg !6003
  %6 = load %struct.RenderData*, %struct.RenderData** %rd, align 8, !dbg !6005
  %xsch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %6, i32 0, i32 33, !dbg !6006
  %7 = load i32, i32* %xsch, align 4, !dbg !6006
  %mul = mul nsw i32 %conv, %7, !dbg !6007
  %div = sdiv i32 %mul, 100, !dbg !6008
  %conv3 = sitofp i32 %div to float, !dbg !6009
  store float %conv3, float* %winx, align 4, !dbg !6002
  call void @llvm.dbg.declare(metadata float* %winy, metadata !6010, metadata !DIExpression()), !dbg !6011
  %8 = load %struct.RenderData*, %struct.RenderData** %rd, align 8, !dbg !6012
  %size4 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %8, i32 0, i32 30, !dbg !6013
  %9 = load i16, i16* %size4, align 2, !dbg !6013
  %conv5 = sext i16 %9 to i32, !dbg !6012
  %10 = load %struct.RenderData*, %struct.RenderData** %rd, align 8, !dbg !6014
  %ysch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %10, i32 0, i32 34, !dbg !6015
  %11 = load i32, i32* %ysch, align 8, !dbg !6015
  %mul6 = mul nsw i32 %conv5, %11, !dbg !6016
  %div7 = sdiv i32 %mul6, 100, !dbg !6017
  %conv8 = sitofp i32 %div7 to float, !dbg !6018
  store float %conv8, float* %winy, align 4, !dbg !6011
  call void @llvm.dbg.declare(metadata float* %facx, metadata !6019, metadata !DIExpression()), !dbg !6020
  %12 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !6021
  %mask = getelementptr inbounds %struct.View2D, %struct.View2D* %12, i32 0, i32 4, !dbg !6022
  %call9 = call i32 @BLI_rcti_size_x(%struct.rcti* %mask), !dbg !6023
  %conv10 = sitofp i32 %call9 to float, !dbg !6023
  %13 = load float, float* %winx, align 4, !dbg !6024
  %div11 = fdiv float %conv10, %13, !dbg !6025
  store float %div11, float* %facx, align 4, !dbg !6020
  call void @llvm.dbg.declare(metadata float* %facy, metadata !6026, metadata !DIExpression()), !dbg !6027
  %14 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !6028
  %mask12 = getelementptr inbounds %struct.View2D, %struct.View2D* %14, i32 0, i32 4, !dbg !6029
  %call13 = call i32 @BLI_rcti_size_y(%struct.rcti* %mask12), !dbg !6030
  %conv14 = sitofp i32 %call13 to float, !dbg !6030
  %15 = load float, float* %winy, align 4, !dbg !6031
  %div15 = fdiv float %conv14, %15, !dbg !6032
  store float %div15, float* %facy, align 4, !dbg !6027
  %16 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !6033
  %cur = getelementptr inbounds %struct.View2D, %struct.View2D* %16, i32 0, i32 1, !dbg !6034
  %17 = load float, float* %winx, align 4, !dbg !6035
  %18 = load float, float* %facx, align 4, !dbg !6036
  %mul16 = fmul float %17, %18, !dbg !6037
  %19 = load float, float* %ratio, align 4, !dbg !6038
  %div17 = fdiv float %mul16, %19, !dbg !6039
  %add = fadd float %div17, 5.000000e-01, !dbg !6040
  %20 = call float @llvm.floor.f32(float %add), !dbg !6041
  %21 = load float, float* %winy, align 4, !dbg !6042
  %22 = load float, float* %facy, align 4, !dbg !6043
  %mul18 = fmul float %21, %22, !dbg !6044
  %23 = load float, float* %ratio, align 4, !dbg !6045
  %div19 = fdiv float %mul18, %23, !dbg !6046
  %add20 = fadd float %div19, 5.000000e-01, !dbg !6047
  %24 = call float @llvm.floor.f32(float %add20), !dbg !6048
  call void @BLI_rctf_resize(%struct.rctf* %cur, float %20, float %24), !dbg !6049
  %25 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6050
  %call21 = call %struct.ARegion* @CTX_wm_region(%struct.bContext* %25), !dbg !6051
  call void @ED_region_tag_redraw(%struct.ARegion* %call21), !dbg !6052
  ret i32 4, !dbg !6053
}

declare dso_local %struct.PropertyRNA* @RNA_def_float(i8*, i8*, float, float, float, i8*, i8*, float, float) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_toggle(%struct.wmOperatorType* %ot) #0 !dbg !6054 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6055, metadata !DIExpression()), !dbg !6056
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6057
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6058
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.157, i64 0, i64 0), i8** %name, align 8, !dbg !6059
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6060
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6061
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.158, i64 0, i64 0), i8** %idname, align 8, !dbg !6062
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6063
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6064
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.159, i64 0, i64 0), i8** %description, align 8, !dbg !6065
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6066
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6067
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_view_toggle_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6068
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6069
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6070
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !6071
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6072
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6073
  store i16 1, i16* %flag, align 8, !dbg !6074
  ret void, !dbg !6075
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_view_toggle_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !6076 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %sseq = alloca %struct.SpaceSeq*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6077, metadata !DIExpression()), !dbg !6078
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !6079, metadata !DIExpression()), !dbg !6080
  call void @llvm.dbg.declare(metadata %struct.SpaceSeq** %sseq, metadata !6081, metadata !DIExpression()), !dbg !6082
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6083
  %call = call %struct.SpaceLink* @CTX_wm_space_data(%struct.bContext* %0), !dbg !6084
  %1 = bitcast %struct.SpaceLink* %call to %struct.SpaceSeq*, !dbg !6085
  store %struct.SpaceSeq* %1, %struct.SpaceSeq** %sseq, align 8, !dbg !6082
  %2 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !6086
  %view = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %2, i32 0, i32 15, !dbg !6087
  %3 = load i32, i32* %view, align 8, !dbg !6088
  %inc = add nsw i32 %3, 1, !dbg !6088
  store i32 %inc, i32* %view, align 8, !dbg !6088
  %4 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !6089
  %view1 = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %4, i32 0, i32 15, !dbg !6091
  %5 = load i32, i32* %view1, align 8, !dbg !6091
  %cmp = icmp sgt i32 %5, 3, !dbg !6092
  br i1 %cmp, label %if.then, label %if.end, !dbg !6093

if.then:                                          ; preds = %entry
  %6 = load %struct.SpaceSeq*, %struct.SpaceSeq** %sseq, align 8, !dbg !6094
  %view2 = getelementptr inbounds %struct.SpaceSeq, %struct.SpaceSeq* %6, i32 0, i32 15, !dbg !6095
  store i32 1, i32* %view2, align 8, !dbg !6096
  br label %if.end, !dbg !6094

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6097
  %call3 = call %struct.ScrArea* @CTX_wm_area(%struct.bContext* %7), !dbg !6098
  call void @ED_area_tag_refresh(%struct.ScrArea* %call3), !dbg !6099
  ret i32 4, !dbg !6100
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_selected(%struct.wmOperatorType* %ot) #0 !dbg !6101 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6102, metadata !DIExpression()), !dbg !6103
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6104
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6105
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.160, i64 0, i64 0), i8** %name, align 8, !dbg !6106
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6107
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6108
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.161, i64 0, i64 0), i8** %idname, align 8, !dbg !6109
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6110
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6111
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.162, i64 0, i64 0), i8** %description, align 8, !dbg !6112
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6113
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6114
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_view_selected_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6115
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6116
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6117
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !6118
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6119
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6120
  store i16 1, i16* %flag, align 8, !dbg !6121
  ret void, !dbg !6122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_view_selected_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !6123 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %v2d = alloca %struct.View2D*, align 8
  %ar = alloca %struct.ARegion*, align 8
  %ed = alloca %struct.Editing*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %cur_new = alloca %struct.rctf, align 4
  %xmin = alloca i32, align 4
  %xmax = alloca i32, align 4
  %ymin = alloca i32, align 4
  %ymax = alloca i32, align 4
  %orig_height = alloca i32, align 4
  %ymid = alloca i32, align 4
  %ymargin = alloca i32, align 4
  %xmargin = alloca i32, align 4
  %smooth_viewtx = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6124, metadata !DIExpression()), !dbg !6125
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !6126, metadata !DIExpression()), !dbg !6127
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6128, metadata !DIExpression()), !dbg !6129
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6130
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !6131
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !6129
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !6132, metadata !DIExpression()), !dbg !6133
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6134
  %call1 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %1), !dbg !6135
  store %struct.View2D* %call1, %struct.View2D** %v2d, align 8, !dbg !6133
  call void @llvm.dbg.declare(metadata %struct.ARegion** %ar, metadata !6136, metadata !DIExpression()), !dbg !6137
  %2 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6138
  %call2 = call %struct.ARegion* @CTX_wm_region(%struct.bContext* %2), !dbg !6139
  store %struct.ARegion* %call2, %struct.ARegion** %ar, align 8, !dbg !6137
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6140, metadata !DIExpression()), !dbg !6141
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6142
  %call3 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %3, i8 zeroext 0), !dbg !6143
  store %struct.Editing* %call3, %struct.Editing** %ed, align 8, !dbg !6141
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !6144, metadata !DIExpression()), !dbg !6145
  %4 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6146
  %call4 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %4), !dbg !6147
  store %struct.Sequence* %call4, %struct.Sequence** %last_seq, align 8, !dbg !6145
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6148, metadata !DIExpression()), !dbg !6149
  call void @llvm.dbg.declare(metadata %struct.rctf* %cur_new, metadata !6150, metadata !DIExpression()), !dbg !6151
  %5 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !6152
  %cur = getelementptr inbounds %struct.View2D, %struct.View2D* %5, i32 0, i32 1, !dbg !6153
  %6 = bitcast %struct.rctf* %cur_new to i8*, !dbg !6153
  %7 = bitcast %struct.rctf* %cur to i8*, !dbg !6153
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 8 %7, i64 16, i1 false), !dbg !6153
  call void @llvm.dbg.declare(metadata i32* %xmin, metadata !6154, metadata !DIExpression()), !dbg !6155
  store i32 600000, i32* %xmin, align 4, !dbg !6155
  call void @llvm.dbg.declare(metadata i32* %xmax, metadata !6156, metadata !DIExpression()), !dbg !6157
  store i32 -600000, i32* %xmax, align 4, !dbg !6157
  call void @llvm.dbg.declare(metadata i32* %ymin, metadata !6158, metadata !DIExpression()), !dbg !6159
  store i32 33, i32* %ymin, align 4, !dbg !6159
  call void @llvm.dbg.declare(metadata i32* %ymax, metadata !6160, metadata !DIExpression()), !dbg !6161
  store i32 0, i32* %ymax, align 4, !dbg !6161
  call void @llvm.dbg.declare(metadata i32* %orig_height, metadata !6162, metadata !DIExpression()), !dbg !6163
  call void @llvm.dbg.declare(metadata i32* %ymid, metadata !6164, metadata !DIExpression()), !dbg !6165
  call void @llvm.dbg.declare(metadata i32* %ymargin, metadata !6166, metadata !DIExpression()), !dbg !6167
  store i32 1, i32* %ymargin, align 4, !dbg !6167
  call void @llvm.dbg.declare(metadata i32* %xmargin, metadata !6168, metadata !DIExpression()), !dbg !6169
  %8 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6170
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %8, i32 0, i32 22, !dbg !6170
  %frs_sec = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 55, !dbg !6170
  %9 = load i16, i16* %frs_sec, align 4, !dbg !6170
  %conv = sitofp i16 %9 to double, !dbg !6170
  %10 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6170
  %r5 = getelementptr inbounds %struct.Scene, %struct.Scene* %10, i32 0, i32 22, !dbg !6170
  %frs_sec_base = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r5, i32 0, i32 65, !dbg !6170
  %11 = load float, float* %frs_sec_base, align 4, !dbg !6170
  %conv6 = fpext float %11 to double, !dbg !6170
  %div = fdiv double %conv, %conv6, !dbg !6170
  %conv7 = fptosi double %div to i32, !dbg !6170
  store i32 %conv7, i32* %xmargin, align 4, !dbg !6169
  %12 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6171
  %cmp = icmp eq %struct.Editing* %12, null, !dbg !6173
  br i1 %cmp, label %if.then, label %if.end, !dbg !6174

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6175
  br label %return, !dbg !6175

if.end:                                           ; preds = %entry
  %13 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6176
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %13, i32 0, i32 0, !dbg !6178
  %14 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !6178
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %14, i32 0, i32 0, !dbg !6179
  %15 = load i8*, i8** %first, align 8, !dbg !6179
  %16 = bitcast i8* %15 to %struct.Sequence*, !dbg !6176
  store %struct.Sequence* %16, %struct.Sequence** %seq, align 8, !dbg !6180
  br label %for.cond, !dbg !6181

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6182
  %tobool = icmp ne %struct.Sequence* %17, null, !dbg !6184
  br i1 %tobool, label %for.body, label %for.end, !dbg !6184

for.body:                                         ; preds = %for.cond
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6185
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 5, !dbg !6188
  %19 = load i32, i32* %flag, align 8, !dbg !6188
  %and = and i32 %19, 1, !dbg !6189
  %tobool9 = icmp ne i32 %and, 0, !dbg !6189
  br i1 %tobool9, label %if.then12, label %lor.lhs.false, !dbg !6190

lor.lhs.false:                                    ; preds = %for.body
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6191
  %21 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !6192
  %cmp10 = icmp eq %struct.Sequence* %20, %21, !dbg !6193
  br i1 %cmp10, label %if.then12, label %if.end18, !dbg !6194

if.then12:                                        ; preds = %lor.lhs.false, %for.body
  %22 = load i32, i32* %xmin, align 4, !dbg !6195
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6197
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 15, !dbg !6198
  %24 = load i32, i32* %startdisp, align 8, !dbg !6198
  %call13 = call i32 @min_ii(i32 %22, i32 %24), !dbg !6199
  store i32 %call13, i32* %xmin, align 4, !dbg !6200
  %25 = load i32, i32* %xmax, align 4, !dbg !6201
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6202
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 16, !dbg !6203
  %27 = load i32, i32* %enddisp, align 4, !dbg !6203
  %call14 = call i32 @max_ii(i32 %25, i32 %27), !dbg !6204
  store i32 %call14, i32* %xmax, align 4, !dbg !6205
  %28 = load i32, i32* %ymin, align 4, !dbg !6206
  %29 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6207
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 13, !dbg !6208
  %30 = load i32, i32* %machine, align 8, !dbg !6208
  %call15 = call i32 @min_ii(i32 %28, i32 %30), !dbg !6209
  store i32 %call15, i32* %ymin, align 4, !dbg !6210
  %31 = load i32, i32* %ymax, align 4, !dbg !6211
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6212
  %machine16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 13, !dbg !6213
  %33 = load i32, i32* %machine16, align 8, !dbg !6213
  %call17 = call i32 @max_ii(i32 %31, i32 %33), !dbg !6214
  store i32 %call17, i32* %ymax, align 4, !dbg !6215
  br label %if.end18, !dbg !6216

if.end18:                                         ; preds = %if.then12, %lor.lhs.false
  br label %for.inc, !dbg !6217

for.inc:                                          ; preds = %if.end18
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6218
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 0, !dbg !6219
  %35 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6219
  store %struct.Sequence* %35, %struct.Sequence** %seq, align 8, !dbg !6220
  br label %for.cond, !dbg !6221, !llvm.loop !6222

for.end:                                          ; preds = %for.cond
  %36 = load i32, i32* %ymax, align 4, !dbg !6224
  %cmp19 = icmp ne i32 %36, 0, !dbg !6226
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !6227

if.then21:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %smooth_viewtx, metadata !6228, metadata !DIExpression()), !dbg !6230
  %37 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !6231
  %call22 = call i32 @WM_operator_smooth_viewtx_get(%struct.wmOperator* %37), !dbg !6232
  store i32 %call22, i32* %smooth_viewtx, align 4, !dbg !6230
  %38 = load i32, i32* %xmargin, align 4, !dbg !6233
  %39 = load i32, i32* %xmax, align 4, !dbg !6234
  %add = add nsw i32 %39, %38, !dbg !6234
  store i32 %add, i32* %xmax, align 4, !dbg !6234
  %40 = load i32, i32* %xmargin, align 4, !dbg !6235
  %41 = load i32, i32* %xmin, align 4, !dbg !6236
  %sub = sub nsw i32 %41, %40, !dbg !6236
  store i32 %sub, i32* %xmin, align 4, !dbg !6236
  %42 = load i32, i32* %ymargin, align 4, !dbg !6237
  %43 = load i32, i32* %ymax, align 4, !dbg !6238
  %add23 = add nsw i32 %43, %42, !dbg !6238
  store i32 %add23, i32* %ymax, align 4, !dbg !6238
  %44 = load i32, i32* %ymargin, align 4, !dbg !6239
  %45 = load i32, i32* %ymin, align 4, !dbg !6240
  %sub24 = sub nsw i32 %45, %44, !dbg !6240
  store i32 %sub24, i32* %ymin, align 4, !dbg !6240
  %call25 = call float @BLI_rctf_size_y(%struct.rctf* %cur_new), !dbg !6241
  %conv26 = fptosi float %call25 to i32, !dbg !6241
  store i32 %conv26, i32* %orig_height, align 4, !dbg !6242
  %46 = load i32, i32* %xmin, align 4, !dbg !6243
  %conv27 = sitofp i32 %46 to float, !dbg !6243
  %xmin28 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 0, !dbg !6244
  store float %conv27, float* %xmin28, align 4, !dbg !6245
  %47 = load i32, i32* %xmax, align 4, !dbg !6246
  %conv29 = sitofp i32 %47 to float, !dbg !6246
  %xmax30 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 1, !dbg !6247
  store float %conv29, float* %xmax30, align 4, !dbg !6248
  %48 = load i32, i32* %ymin, align 4, !dbg !6249
  %conv31 = sitofp i32 %48 to float, !dbg !6249
  %ymin32 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 2, !dbg !6250
  store float %conv31, float* %ymin32, align 4, !dbg !6251
  %49 = load i32, i32* %ymax, align 4, !dbg !6252
  %conv33 = sitofp i32 %49 to float, !dbg !6252
  %ymax34 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 3, !dbg !6253
  store float %conv33, float* %ymax34, align 4, !dbg !6254
  %50 = load i32, i32* %orig_height, align 4, !dbg !6255
  %conv35 = sitofp i32 %50 to float, !dbg !6255
  %call36 = call float @BLI_rctf_size_y(%struct.rctf* %cur_new), !dbg !6257
  %cmp37 = fcmp ogt float %conv35, %call36, !dbg !6258
  br i1 %cmp37, label %if.then39, label %if.end50, !dbg !6259

if.then39:                                        ; preds = %if.then21
  %call40 = call float @BLI_rctf_cent_y(%struct.rctf* %cur_new), !dbg !6260
  %conv41 = fptosi float %call40 to i32, !dbg !6260
  store i32 %conv41, i32* %ymid, align 4, !dbg !6262
  %51 = load i32, i32* %ymid, align 4, !dbg !6263
  %52 = load i32, i32* %orig_height, align 4, !dbg !6264
  %div42 = sdiv i32 %52, 2, !dbg !6265
  %sub43 = sub nsw i32 %51, %div42, !dbg !6266
  %conv44 = sitofp i32 %sub43 to float, !dbg !6263
  %ymin45 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 2, !dbg !6267
  store float %conv44, float* %ymin45, align 4, !dbg !6268
  %53 = load i32, i32* %ymid, align 4, !dbg !6269
  %54 = load i32, i32* %orig_height, align 4, !dbg !6270
  %div46 = sdiv i32 %54, 2, !dbg !6271
  %add47 = add nsw i32 %53, %div46, !dbg !6272
  %conv48 = sitofp i32 %add47 to float, !dbg !6269
  %ymax49 = getelementptr inbounds %struct.rctf, %struct.rctf* %cur_new, i32 0, i32 3, !dbg !6273
  store float %conv48, float* %ymax49, align 4, !dbg !6274
  br label %if.end50, !dbg !6275

if.end50:                                         ; preds = %if.then39, %if.then21
  %55 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6276
  %56 = load %struct.ARegion*, %struct.ARegion** %ar, align 8, !dbg !6277
  %57 = load i32, i32* %smooth_viewtx, align 4, !dbg !6278
  call void @UI_view2d_smooth_view(%struct.bContext* %55, %struct.ARegion* %56, %struct.rctf* %cur_new, i32 %57), !dbg !6279
  store i32 4, i32* %retval, align 4, !dbg !6280
  br label %return, !dbg !6280

if.else:                                          ; preds = %for.end
  store i32 2, i32* %retval, align 4, !dbg !6281
  br label %return, !dbg !6281

return:                                           ; preds = %if.else, %if.end50, %if.then
  %58 = load i32, i32* %retval, align 4, !dbg !6283
  ret i32 %58, !dbg !6283
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_strip_jump(%struct.wmOperatorType* %ot) #0 !dbg !6284 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6285, metadata !DIExpression()), !dbg !6286
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6287
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6288
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.163, i64 0, i64 0), i8** %name, align 8, !dbg !6289
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6290
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6291
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.164, i64 0, i64 0), i8** %idname, align 8, !dbg !6292
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6293
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6294
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.165, i64 0, i64 0), i8** %description, align 8, !dbg !6295
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6296
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6297
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_strip_jump_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6298
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6299
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6300
  store i32 (%struct.bContext*)* @sequencer_strip_jump_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !6301
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6302
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6303
  store i16 3, i16* %flag, align 8, !dbg !6304
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6305
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !6306
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !6306
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !6305
  %call = call %struct.PropertyRNA* @RNA_def_boolean(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166, i64 0, i64 0), i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.167, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0)), !dbg !6307
  %9 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6308
  %srna1 = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %9, i32 0, i32 11, !dbg !6309
  %10 = load %struct.StructRNA*, %struct.StructRNA** %srna1, align 8, !dbg !6309
  %11 = bitcast %struct.StructRNA* %10 to i8*, !dbg !6308
  %call2 = call %struct.PropertyRNA* @RNA_def_boolean(i8* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.168, i64 0, i64 0), i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.169, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0)), !dbg !6310
  ret void, !dbg !6311
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_strip_jump_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !6312 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %next = alloca i8, align 1
  %center = alloca i8, align 1
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6313, metadata !DIExpression()), !dbg !6314
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !6315, metadata !DIExpression()), !dbg !6316
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6317, metadata !DIExpression()), !dbg !6318
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6319
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !6320
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !6318
  call void @llvm.dbg.declare(metadata i8* %next, metadata !6321, metadata !DIExpression()), !dbg !6322
  %1 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !6323
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %1, i32 0, i32 7, !dbg !6324
  %2 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !6324
  %call1 = call i32 @RNA_boolean_get(%struct.PointerRNA* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166, i64 0, i64 0)), !dbg !6325
  %conv = trunc i32 %call1 to i8, !dbg !6325
  store i8 %conv, i8* %next, align 1, !dbg !6322
  call void @llvm.dbg.declare(metadata i8* %center, metadata !6326, metadata !DIExpression()), !dbg !6327
  %3 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !6328
  %ptr2 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %3, i32 0, i32 7, !dbg !6329
  %4 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr2, align 8, !dbg !6329
  %call3 = call i32 @RNA_boolean_get(%struct.PointerRNA* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.168, i64 0, i64 0)), !dbg !6330
  %conv4 = trunc i32 %call3 to i8, !dbg !6330
  store i8 %conv4, i8* %center, align 1, !dbg !6327
  %5 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6331
  %6 = load i8, i8* %next, align 1, !dbg !6333
  %conv5 = zext i8 %6 to i32, !dbg !6333
  %tobool = icmp ne i32 %conv5, 0, !dbg !6333
  %7 = zext i1 %tobool to i64, !dbg !6333
  %cond = select i1 %tobool, i32 2, i32 1, !dbg !6333
  %conv6 = trunc i32 %cond to i16, !dbg !6333
  %8 = load i8, i8* %center, align 1, !dbg !6334
  %call7 = call zeroext i8 @strip_jump_internal(%struct.Scene* %5, i16 signext %conv6, i8 zeroext 1, i8 zeroext %8), !dbg !6335
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6335
  br i1 %tobool8, label %if.end, label %if.then, !dbg !6336

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6337
  br label %return, !dbg !6337

if.end:                                           ; preds = %entry
  %9 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6339
  %10 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6340
  %11 = bitcast %struct.Scene* %10 to i8*, !dbg !6340
  call void @WM_event_add_notifier(%struct.bContext* %9, i32 67305472, i8* %11), !dbg !6341
  store i32 4, i32* %retval, align 4, !dbg !6342
  br label %return, !dbg !6342

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !6343
  ret i32 %12, !dbg !6343
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_strip_jump_poll(%struct.bContext* %C) #0 !dbg !6344 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6345, metadata !DIExpression()), !dbg !6346
  %0 = load i8, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 13), align 2, !dbg !6347
  %tobool = icmp ne i8 %0, 0, !dbg !6349
  br i1 %tobool, label %if.then, label %if.end, !dbg !6350

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6351
  br label %return, !dbg !6351

if.end:                                           ; preds = %entry
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6352
  %call = call i32 @sequencer_edit_poll(%struct.bContext* %1), !dbg !6353
  store i32 %call, i32* %retval, align 4, !dbg !6354
  br label %return, !dbg !6354

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !6355
  ret i32 %2, !dbg !6355
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_swap(%struct.wmOperatorType* %ot) #0 !dbg !6356 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6357, metadata !DIExpression()), !dbg !6358
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6359
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6360
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.170, i64 0, i64 0), i8** %name, align 8, !dbg !6361
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6362
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6363
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.171, i64 0, i64 0), i8** %idname, align 8, !dbg !6364
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6365
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6366
  store i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.172, i64 0, i64 0), i8** %description, align 8, !dbg !6367
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6368
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6369
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_swap_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6370
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6371
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6372
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !6373
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6374
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6375
  store i16 3, i16* %flag, align 8, !dbg !6376
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6377
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !6378
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !6378
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !6377
  %call = call %struct.PropertyRNA* @RNA_def_enum(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([3 x %struct.EnumPropertyItem], [3 x %struct.EnumPropertyItem]* @prop_side_lr_types, i64 0, i64 0), i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.118, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.173, i64 0, i64 0)), !dbg !6379
  ret void, !dbg !6380
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_swap_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !6381 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %active_seq = alloca %struct.Sequence*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  %side = alloca i32, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6382, metadata !DIExpression()), !dbg !6383
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !6384, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6386, metadata !DIExpression()), !dbg !6387
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6388
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !6389
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !6387
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6390, metadata !DIExpression()), !dbg !6391
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6392
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !6393
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !6391
  call void @llvm.dbg.declare(metadata %struct.Sequence** %active_seq, metadata !6394, metadata !DIExpression()), !dbg !6395
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6396
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !6397
  store %struct.Sequence* %call2, %struct.Sequence** %active_seq, align 8, !dbg !6395
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6398, metadata !DIExpression()), !dbg !6399
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !6400, metadata !DIExpression()), !dbg !6401
  call void @llvm.dbg.declare(metadata i32* %side, metadata !6402, metadata !DIExpression()), !dbg !6403
  %3 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !6404
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %3, i32 0, i32 7, !dbg !6405
  %4 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !6405
  %call3 = call i32 @RNA_enum_get(%struct.PointerRNA* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0)), !dbg !6406
  store i32 %call3, i32* %side, align 4, !dbg !6403
  %5 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6407
  %cmp = icmp eq %struct.Sequence* %5, null, !dbg !6409
  br i1 %cmp, label %if.then, label %if.end, !dbg !6410

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6411
  br label %return, !dbg !6411

if.end:                                           ; preds = %entry
  %6 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6412
  %7 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6413
  %8 = load i32, i32* %side, align 4, !dbg !6414
  %call4 = call %struct.Sequence* @find_next_prev_sequence(%struct.Scene* %6, %struct.Sequence* %7, i32 %8, i32 -1), !dbg !6415
  store %struct.Sequence* %call4, %struct.Sequence** %seq, align 8, !dbg !6416
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6417
  %tobool = icmp ne %struct.Sequence* %9, null, !dbg !6417
  br i1 %tobool, label %if.then5, label %if.end76, !dbg !6419

if.then5:                                         ; preds = %if.end
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6420
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !6423
  %11 = load i32, i32* %type, align 4, !dbg !6423
  %call6 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %11), !dbg !6424
  %cmp7 = icmp sge i32 %call6, 1, !dbg !6425
  br i1 %cmp7, label %land.lhs.true, label %if.end15, !dbg !6426

land.lhs.true:                                    ; preds = %if.then5
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6427
  %effectdata = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 43, !dbg !6428
  %13 = load i8*, i8** %effectdata, align 8, !dbg !6428
  %tobool8 = icmp ne i8* %13, null, !dbg !6427
  br i1 %tobool8, label %if.then14, label %lor.lhs.false, !dbg !6429

lor.lhs.false:                                    ; preds = %land.lhs.true
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6430
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 33, !dbg !6431
  %15 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !6431
  %tobool9 = icmp ne %struct.Sequence* %15, null, !dbg !6430
  br i1 %tobool9, label %if.then14, label %lor.lhs.false10, !dbg !6432

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6433
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 34, !dbg !6434
  %17 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !6434
  %tobool11 = icmp ne %struct.Sequence* %17, null, !dbg !6433
  br i1 %tobool11, label %if.then14, label %lor.lhs.false12, !dbg !6435

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6436
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 35, !dbg !6437
  %19 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !6437
  %tobool13 = icmp ne %struct.Sequence* %19, null, !dbg !6436
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !6438

if.then14:                                        ; preds = %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false, %land.lhs.true
  store i32 2, i32* %retval, align 4, !dbg !6439
  br label %return, !dbg !6439

if.end15:                                         ; preds = %lor.lhs.false12, %if.then5
  %20 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6440
  %type16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 6, !dbg !6442
  %21 = load i32, i32* %type16, align 4, !dbg !6442
  %call17 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %21), !dbg !6443
  %cmp18 = icmp sge i32 %call17, 1, !dbg !6444
  br i1 %cmp18, label %land.lhs.true19, label %if.end32, !dbg !6445

land.lhs.true19:                                  ; preds = %if.end15
  %22 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6446
  %effectdata20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 43, !dbg !6447
  %23 = load i8*, i8** %effectdata20, align 8, !dbg !6447
  %tobool21 = icmp ne i8* %23, null, !dbg !6446
  br i1 %tobool21, label %if.then31, label %lor.lhs.false22, !dbg !6448

lor.lhs.false22:                                  ; preds = %land.lhs.true19
  %24 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6449
  %seq123 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 33, !dbg !6450
  %25 = load %struct.Sequence*, %struct.Sequence** %seq123, align 8, !dbg !6450
  %tobool24 = icmp ne %struct.Sequence* %25, null, !dbg !6449
  br i1 %tobool24, label %if.then31, label %lor.lhs.false25, !dbg !6451

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %26 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6452
  %seq226 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 34, !dbg !6453
  %27 = load %struct.Sequence*, %struct.Sequence** %seq226, align 8, !dbg !6453
  %tobool27 = icmp ne %struct.Sequence* %27, null, !dbg !6452
  br i1 %tobool27, label %if.then31, label %lor.lhs.false28, !dbg !6454

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %28 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6455
  %seq329 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 35, !dbg !6456
  %29 = load %struct.Sequence*, %struct.Sequence** %seq329, align 8, !dbg !6456
  %tobool30 = icmp ne %struct.Sequence* %29, null, !dbg !6455
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !6457

if.then31:                                        ; preds = %lor.lhs.false28, %lor.lhs.false25, %lor.lhs.false22, %land.lhs.true19
  store i32 2, i32* %retval, align 4, !dbg !6458
  br label %return, !dbg !6458

if.end32:                                         ; preds = %lor.lhs.false28, %if.end15
  %30 = load i32, i32* %side, align 4, !dbg !6459
  switch i32 %30, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb33
  ], !dbg !6460

sw.bb:                                            ; preds = %if.end32
  %31 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6461
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6463
  %33 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6464
  call void @swap_sequence(%struct.Scene* %31, %struct.Sequence* %32, %struct.Sequence* %33), !dbg !6465
  br label %sw.epilog, !dbg !6466

sw.bb33:                                          ; preds = %if.end32
  %34 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6467
  %35 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6468
  %36 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6469
  call void @swap_sequence(%struct.Scene* %34, %struct.Sequence* %35, %struct.Sequence* %36), !dbg !6470
  br label %sw.epilog, !dbg !6471

sw.epilog:                                        ; preds = %if.end32, %sw.bb33, %sw.bb
  %37 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6472
  %ed34 = getelementptr inbounds %struct.Scene, %struct.Scene* %37, i32 0, i32 19, !dbg !6474
  %38 = load %struct.Editing*, %struct.Editing** %ed34, align 8, !dbg !6474
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %38, i32 0, i32 0, !dbg !6475
  %39 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !6475
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %39, i32 0, i32 0, !dbg !6476
  %40 = load i8*, i8** %first, align 8, !dbg !6476
  %41 = bitcast i8* %40 to %struct.Sequence*, !dbg !6472
  store %struct.Sequence* %41, %struct.Sequence** %iseq, align 8, !dbg !6477
  br label %for.cond, !dbg !6478

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %42 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6479
  %tobool35 = icmp ne %struct.Sequence* %42, null, !dbg !6481
  br i1 %tobool35, label %for.body, label %for.end, !dbg !6481

for.body:                                         ; preds = %for.cond
  %43 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6482
  %type36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 6, !dbg !6485
  %44 = load i32, i32* %type36, align 4, !dbg !6485
  %and = and i32 %44, 8, !dbg !6486
  %tobool37 = icmp ne i32 %and, 0, !dbg !6486
  br i1 %tobool37, label %land.lhs.true38, label %if.end46, !dbg !6487

land.lhs.true38:                                  ; preds = %for.body
  %45 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6488
  %46 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6489
  %call39 = call zeroext i8 @seq_is_parent(%struct.Sequence* %45, %struct.Sequence* %46), !dbg !6490
  %conv = zext i8 %call39 to i32, !dbg !6490
  %tobool40 = icmp ne i32 %conv, 0, !dbg !6490
  br i1 %tobool40, label %if.then45, label %lor.lhs.false41, !dbg !6491

lor.lhs.false41:                                  ; preds = %land.lhs.true38
  %47 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6492
  %48 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6493
  %call42 = call zeroext i8 @seq_is_parent(%struct.Sequence* %47, %struct.Sequence* %48), !dbg !6494
  %conv43 = zext i8 %call42 to i32, !dbg !6494
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !6494
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !6495

if.then45:                                        ; preds = %lor.lhs.false41, %land.lhs.true38
  %49 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6496
  %50 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6498
  call void @BKE_sequence_calc(%struct.Scene* %49, %struct.Sequence* %50), !dbg !6499
  br label %if.end46, !dbg !6500

if.end46:                                         ; preds = %if.then45, %lor.lhs.false41, %for.body
  br label %for.inc, !dbg !6501

for.inc:                                          ; preds = %if.end46
  %51 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6502
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 0, !dbg !6503
  %52 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6503
  store %struct.Sequence* %52, %struct.Sequence** %iseq, align 8, !dbg !6504
  br label %for.cond, !dbg !6505, !llvm.loop !6506

for.end:                                          ; preds = %for.cond
  %53 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6508
  %ed47 = getelementptr inbounds %struct.Scene, %struct.Scene* %53, i32 0, i32 19, !dbg !6510
  %54 = load %struct.Editing*, %struct.Editing** %ed47, align 8, !dbg !6510
  %seqbasep48 = getelementptr inbounds %struct.Editing, %struct.Editing* %54, i32 0, i32 0, !dbg !6511
  %55 = load %struct.ListBase*, %struct.ListBase** %seqbasep48, align 8, !dbg !6511
  %first49 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %55, i32 0, i32 0, !dbg !6512
  %56 = load i8*, i8** %first49, align 8, !dbg !6512
  %57 = bitcast i8* %56 to %struct.Sequence*, !dbg !6508
  store %struct.Sequence* %57, %struct.Sequence** %iseq, align 8, !dbg !6513
  br label %for.cond50, !dbg !6514

for.cond50:                                       ; preds = %for.inc73, %for.end
  %58 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6515
  %tobool51 = icmp ne %struct.Sequence* %58, null, !dbg !6517
  br i1 %tobool51, label %for.body52, label %for.end75, !dbg !6517

for.body52:                                       ; preds = %for.cond50
  %59 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6518
  %type53 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 6, !dbg !6521
  %60 = load i32, i32* %type53, align 4, !dbg !6521
  %and54 = and i32 %60, 8, !dbg !6522
  %tobool55 = icmp ne i32 %and54, 0, !dbg !6522
  br i1 %tobool55, label %land.lhs.true56, label %if.end72, !dbg !6523

land.lhs.true56:                                  ; preds = %for.body52
  %61 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6524
  %62 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6525
  %call57 = call zeroext i8 @seq_is_parent(%struct.Sequence* %61, %struct.Sequence* %62), !dbg !6526
  %conv58 = zext i8 %call57 to i32, !dbg !6526
  %tobool59 = icmp ne i32 %conv58, 0, !dbg !6526
  br i1 %tobool59, label %if.then64, label %lor.lhs.false60, !dbg !6527

lor.lhs.false60:                                  ; preds = %land.lhs.true56
  %63 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6528
  %64 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6529
  %call61 = call zeroext i8 @seq_is_parent(%struct.Sequence* %63, %struct.Sequence* %64), !dbg !6530
  %conv62 = zext i8 %call61 to i32, !dbg !6530
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !6530
  br i1 %tobool63, label %if.then64, label %if.end72, !dbg !6531

if.then64:                                        ; preds = %lor.lhs.false60, %land.lhs.true56
  %65 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6532
  %seqbasep65 = getelementptr inbounds %struct.Editing, %struct.Editing* %65, i32 0, i32 0, !dbg !6535
  %66 = load %struct.ListBase*, %struct.ListBase** %seqbasep65, align 8, !dbg !6535
  %67 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6536
  %call66 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %66, %struct.Sequence* %67), !dbg !6537
  %tobool67 = icmp ne i8 %call66, 0, !dbg !6537
  br i1 %tobool67, label %if.then68, label %if.end71, !dbg !6538

if.then68:                                        ; preds = %if.then64
  %68 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6539
  %seqbasep69 = getelementptr inbounds %struct.Editing, %struct.Editing* %68, i32 0, i32 0, !dbg !6541
  %69 = load %struct.ListBase*, %struct.ListBase** %seqbasep69, align 8, !dbg !6541
  %70 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6542
  %71 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6543
  %call70 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %69, %struct.Sequence* %70, %struct.Scene* %71), !dbg !6544
  br label %if.end71, !dbg !6545

if.end71:                                         ; preds = %if.then68, %if.then64
  br label %if.end72, !dbg !6546

if.end72:                                         ; preds = %if.end71, %lor.lhs.false60, %for.body52
  br label %for.inc73, !dbg !6547

for.inc73:                                        ; preds = %if.end72
  %72 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6548
  %next74 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %72, i32 0, i32 0, !dbg !6549
  %73 = load %struct.Sequence*, %struct.Sequence** %next74, align 8, !dbg !6549
  store %struct.Sequence* %73, %struct.Sequence** %iseq, align 8, !dbg !6550
  br label %for.cond50, !dbg !6551, !llvm.loop !6552

for.end75:                                        ; preds = %for.cond50
  %74 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6554
  call void @BKE_sequencer_sort(%struct.Scene* %74), !dbg !6555
  %75 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6556
  %76 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6557
  %77 = bitcast %struct.Scene* %76 to i8*, !dbg !6557
  call void @WM_event_add_notifier(%struct.bContext* %75, i32 67502080, i8* %77), !dbg !6558
  store i32 4, i32* %retval, align 4, !dbg !6559
  br label %return, !dbg !6559

if.end76:                                         ; preds = %if.end
  store i32 2, i32* %retval, align 4, !dbg !6560
  br label %return, !dbg !6560

return:                                           ; preds = %if.end76, %for.end75, %if.then31, %if.then14, %if.then
  %78 = load i32, i32* %retval, align 4, !dbg !6561
  ret i32 %78, !dbg !6561
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_rendersize(%struct.wmOperatorType* %ot) #0 !dbg !6562 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6563, metadata !DIExpression()), !dbg !6564
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6565
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6566
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.174, i64 0, i64 0), i8** %name, align 8, !dbg !6567
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6568
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6569
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.175, i64 0, i64 0), i8** %idname, align 8, !dbg !6570
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6571
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6572
  store i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.176, i64 0, i64 0), i8** %description, align 8, !dbg !6573
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6574
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6575
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_rendersize_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6576
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6577
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6578
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !6579
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6580
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6581
  store i16 3, i16* %flag, align 8, !dbg !6582
  ret void, !dbg !6583
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_rendersize_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !6584 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %retval1 = alloca i32, align 4
  %scene = alloca %struct.Scene*, align 8
  %active_seq = alloca %struct.Sequence*, align 8
  %se = alloca %struct.StripElem*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6585, metadata !DIExpression()), !dbg !6586
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !6587, metadata !DIExpression()), !dbg !6588
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !6589, metadata !DIExpression()), !dbg !6590
  store i32 2, i32* %retval1, align 4, !dbg !6590
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6591, metadata !DIExpression()), !dbg !6592
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6593
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !6594
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !6592
  call void @llvm.dbg.declare(metadata %struct.Sequence** %active_seq, metadata !6595, metadata !DIExpression()), !dbg !6596
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6597
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %1), !dbg !6598
  store %struct.Sequence* %call2, %struct.Sequence** %active_seq, align 8, !dbg !6596
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se, metadata !6599, metadata !DIExpression()), !dbg !6600
  store %struct.StripElem* null, %struct.StripElem** %se, align 8, !dbg !6600
  %2 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6601
  %cmp = icmp eq %struct.Sequence* %2, null, !dbg !6603
  br i1 %cmp, label %if.then, label %if.end, !dbg !6604

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6605
  br label %return, !dbg !6605

if.end:                                           ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6606
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 24, !dbg !6608
  %4 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !6608
  %tobool = icmp ne %struct.Strip* %4, null, !dbg !6606
  br i1 %tobool, label %if.then3, label %if.end8, !dbg !6609

if.then3:                                         ; preds = %if.end
  %5 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6610
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !6612
  %6 = load i32, i32* %type, align 4, !dbg !6612
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 3, label %sw.bb5
    i32 2, label %sw.bb7
    i32 1, label %sw.bb7
    i32 4, label %sw.bb7
    i32 5, label %sw.bb7
  ], !dbg !6613

sw.bb:                                            ; preds = %if.then3
  %7 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6614
  %8 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6616
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %8, i32 0, i32 22, !dbg !6617
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !6618
  %9 = load i32, i32* %cfra, align 8, !dbg !6618
  %call4 = call %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence* %7, i32 %9), !dbg !6619
  store %struct.StripElem* %call4, %struct.StripElem** %se, align 8, !dbg !6620
  br label %sw.epilog, !dbg !6621

sw.bb5:                                           ; preds = %if.then3
  %10 = load %struct.Sequence*, %struct.Sequence** %active_seq, align 8, !dbg !6622
  %strip6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 24, !dbg !6623
  %11 = load %struct.Strip*, %struct.Strip** %strip6, align 8, !dbg !6623
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %11, i32 0, i32 6, !dbg !6624
  %12 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !6624
  store %struct.StripElem* %12, %struct.StripElem** %se, align 8, !dbg !6625
  br label %sw.epilog, !dbg !6626

sw.bb7:                                           ; preds = %if.then3, %if.then3, %if.then3, %if.then3
  br label %sw.default, !dbg !6626

sw.default:                                       ; preds = %if.then3, %sw.bb7
  br label %sw.epilog, !dbg !6627

sw.epilog:                                        ; preds = %sw.default, %sw.bb5, %sw.bb
  br label %if.end8, !dbg !6628

if.end8:                                          ; preds = %sw.epilog, %if.end
  %13 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !6629
  %tobool9 = icmp ne %struct.StripElem* %13, null, !dbg !6629
  br i1 %tobool9, label %if.then10, label %if.end19, !dbg !6631

if.then10:                                        ; preds = %if.end8
  %14 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !6632
  %orig_width = getelementptr inbounds %struct.StripElem, %struct.StripElem* %14, i32 0, i32 1, !dbg !6635
  %15 = load i32, i32* %orig_width, align 4, !dbg !6635
  %cmp11 = icmp sgt i32 %15, 0, !dbg !6636
  br i1 %cmp11, label %land.lhs.true, label %if.end18, !dbg !6637

land.lhs.true:                                    ; preds = %if.then10
  %16 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !6638
  %orig_height = getelementptr inbounds %struct.StripElem, %struct.StripElem* %16, i32 0, i32 2, !dbg !6639
  %17 = load i32, i32* %orig_height, align 4, !dbg !6639
  %cmp12 = icmp sgt i32 %17, 0, !dbg !6640
  br i1 %cmp12, label %if.then13, label %if.end18, !dbg !6641

if.then13:                                        ; preds = %land.lhs.true
  %18 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !6642
  %orig_width14 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %18, i32 0, i32 1, !dbg !6644
  %19 = load i32, i32* %orig_width14, align 4, !dbg !6644
  %20 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6645
  %r15 = getelementptr inbounds %struct.Scene, %struct.Scene* %20, i32 0, i32 22, !dbg !6646
  %xsch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r15, i32 0, i32 33, !dbg !6647
  store i32 %19, i32* %xsch, align 4, !dbg !6648
  %21 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !6649
  %orig_height16 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %21, i32 0, i32 2, !dbg !6650
  %22 = load i32, i32* %orig_height16, align 4, !dbg !6650
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6651
  %r17 = getelementptr inbounds %struct.Scene, %struct.Scene* %23, i32 0, i32 22, !dbg !6652
  %ysch = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r17, i32 0, i32 34, !dbg !6653
  store i32 %22, i32* %ysch, align 8, !dbg !6654
  %24 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6655
  %25 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6656
  %26 = bitcast %struct.Scene* %25 to i8*, !dbg !6656
  call void @WM_event_add_notifier(%struct.bContext* %24, i32 67371008, i8* %26), !dbg !6657
  store i32 4, i32* %retval1, align 4, !dbg !6658
  br label %if.end18, !dbg !6659

if.end18:                                         ; preds = %if.then13, %land.lhs.true, %if.then10
  br label %if.end19, !dbg !6660

if.end19:                                         ; preds = %if.end18, %if.end8
  %27 = load i32, i32* %retval1, align 4, !dbg !6661
  store i32 %27, i32* %retval, align 4, !dbg !6662
  br label %return, !dbg !6662

return:                                           ; preds = %if.end19, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !6663
  ret i32 %28, !dbg !6663
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_copy(%struct.wmOperatorType* %ot) #0 !dbg !6664 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6665, metadata !DIExpression()), !dbg !6666
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6667
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6668
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i64 0, i64 0), i8** %name, align 8, !dbg !6669
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6670
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6671
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.178, i64 0, i64 0), i8** %idname, align 8, !dbg !6672
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6673
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6674
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0), i8** %description, align 8, !dbg !6675
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6676
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6677
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_copy_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6678
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6679
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6680
  store i32 (%struct.bContext*)* @sequencer_edit_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !6681
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6682
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6683
  store i16 1, i16* %flag, align 8, !dbg !6684
  ret void, !dbg !6685
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_copy_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !6686 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %nseqbase = alloca %struct.ListBase, align 8
  %seq = alloca %struct.Sequence*, align 8
  %first_seq = alloca %struct.Sequence*, align 8
  %seq21 = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6687, metadata !DIExpression()), !dbg !6688
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6691, metadata !DIExpression()), !dbg !6692
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6693
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !6694
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !6692
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6695, metadata !DIExpression()), !dbg !6696
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6697
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !6698
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !6696
  call void @llvm.dbg.declare(metadata %struct.ListBase* %nseqbase, metadata !6699, metadata !DIExpression()), !dbg !6700
  %2 = bitcast %struct.ListBase* %nseqbase to i8*, !dbg !6700
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false), !dbg !6700
  call void @BKE_sequencer_free_clipboard(), !dbg !6701
  %3 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6702
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %3, i32 0, i32 0, !dbg !6704
  %4 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !6704
  %call2 = call zeroext i8 @BKE_sequence_base_isolated_sel_check(%struct.ListBase* %4, i8 zeroext 1), !dbg !6705
  %conv = zext i8 %call2 to i32, !dbg !6705
  %cmp = icmp eq i32 %conv, 0, !dbg !6706
  br i1 %cmp, label %if.then, label %if.end, !dbg !6707

if.then:                                          ; preds = %entry
  %5 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !6708
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %5, i32 0, i32 8, !dbg !6710
  %6 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !6710
  call void @BKE_report(%struct.ReportList* %6, i32 32, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.215, i64 0, i64 0)), !dbg !6711
  store i32 2, i32* %retval, align 4, !dbg !6712
  br label %return, !dbg !6712

if.end:                                           ; preds = %entry
  %7 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6713
  %8 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6714
  %seqbasep4 = getelementptr inbounds %struct.Editing, %struct.Editing* %8, i32 0, i32 0, !dbg !6715
  %9 = load %struct.ListBase*, %struct.ListBase** %seqbasep4, align 8, !dbg !6715
  call void @BKE_sequence_base_dupli_recursive(%struct.Scene* %7, %struct.Scene* null, %struct.ListBase* %nseqbase, %struct.ListBase* %9, i32 1), !dbg !6716
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !6717
  %10 = load i8*, i8** %first, align 8, !dbg !6717
  %tobool = icmp ne i8* %10, null, !dbg !6719
  br i1 %tobool, label %if.then5, label %if.end20, !dbg !6720

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !6721, metadata !DIExpression()), !dbg !6723
  call void @llvm.dbg.declare(metadata %struct.Sequence** %first_seq, metadata !6724, metadata !DIExpression()), !dbg !6725
  %first6 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !6726
  %11 = load i8*, i8** %first6, align 8, !dbg !6726
  %12 = bitcast i8* %11 to %struct.Sequence*, !dbg !6727
  store %struct.Sequence* %12, %struct.Sequence** %first_seq, align 8, !dbg !6725
  %13 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6728
  %seqbasep7 = getelementptr inbounds %struct.Editing, %struct.Editing* %13, i32 0, i32 0, !dbg !6729
  %14 = load %struct.ListBase*, %struct.ListBase** %seqbasep7, align 8, !dbg !6729
  call void @BLI_movelisttolist(%struct.ListBase* %14, %struct.ListBase* %nseqbase), !dbg !6730
  %15 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6731
  store %struct.Sequence* %15, %struct.Sequence** %seq, align 8, !dbg !6733
  br label %for.cond, !dbg !6734

for.cond:                                         ; preds = %for.inc, %if.then5
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6735
  %tobool8 = icmp ne %struct.Sequence* %16, null, !dbg !6737
  br i1 %tobool8, label %for.body, label %for.end, !dbg !6737

for.body:                                         ; preds = %for.cond
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6738
  %18 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6739
  %19 = bitcast %struct.Scene* %18 to i8*, !dbg !6739
  %call9 = call i32 @BKE_sequencer_recursive_apply(%struct.Sequence* %17, i32 (%struct.Sequence*, i8*)* @apply_unique_name_cb, i8* %19), !dbg !6740
  br label %for.inc, !dbg !6740

for.inc:                                          ; preds = %for.body
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !6741
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 0, !dbg !6742
  %21 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6742
  store %struct.Sequence* %21, %struct.Sequence** %seq, align 8, !dbg !6743
  br label %for.cond, !dbg !6744, !llvm.loop !6745

for.end:                                          ; preds = %for.cond
  %22 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6747
  %23 = bitcast %struct.Sequence* %22 to i8*, !dbg !6747
  store i8* %23, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @seqbase_clipboard, i32 0, i32 0), align 8, !dbg !6748
  %24 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6749
  %seqbasep10 = getelementptr inbounds %struct.Editing, %struct.Editing* %24, i32 0, i32 0, !dbg !6750
  %25 = load %struct.ListBase*, %struct.ListBase** %seqbasep10, align 8, !dbg !6750
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %25, i32 0, i32 1, !dbg !6751
  %26 = load i8*, i8** %last, align 8, !dbg !6751
  store i8* %26, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @seqbase_clipboard, i32 0, i32 1), align 8, !dbg !6752
  %27 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6753
  %prev = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 1, !dbg !6755
  %28 = load %struct.Sequence*, %struct.Sequence** %prev, align 8, !dbg !6755
  %tobool11 = icmp ne %struct.Sequence* %28, null, !dbg !6753
  br i1 %tobool11, label %if.then12, label %if.end19, !dbg !6756

if.then12:                                        ; preds = %for.end
  %29 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6757
  %prev13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 1, !dbg !6759
  %30 = load %struct.Sequence*, %struct.Sequence** %prev13, align 8, !dbg !6759
  %next14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 0, !dbg !6760
  store %struct.Sequence* null, %struct.Sequence** %next14, align 8, !dbg !6761
  %31 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6762
  %prev15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 1, !dbg !6763
  %32 = load %struct.Sequence*, %struct.Sequence** %prev15, align 8, !dbg !6763
  %33 = bitcast %struct.Sequence* %32 to i8*, !dbg !6762
  %34 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6764
  %seqbasep16 = getelementptr inbounds %struct.Editing, %struct.Editing* %34, i32 0, i32 0, !dbg !6765
  %35 = load %struct.ListBase*, %struct.ListBase** %seqbasep16, align 8, !dbg !6765
  %last17 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %35, i32 0, i32 1, !dbg !6766
  store i8* %33, i8** %last17, align 8, !dbg !6767
  %36 = load %struct.Sequence*, %struct.Sequence** %first_seq, align 8, !dbg !6768
  %prev18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 1, !dbg !6769
  store %struct.Sequence* null, %struct.Sequence** %prev18, align 8, !dbg !6770
  br label %if.end19, !dbg !6771

if.end19:                                         ; preds = %if.then12, %for.end
  br label %if.end20, !dbg !6772

if.end20:                                         ; preds = %if.end19, %if.end
  %37 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6773
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %37, i32 0, i32 22, !dbg !6774
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !6775
  %38 = load i32, i32* %cfra, align 8, !dbg !6775
  store i32 %38, i32* @seqbase_clipboard_frame, align 4, !dbg !6776
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq21, metadata !6777, metadata !DIExpression()), !dbg !6779
  %39 = load i8*, i8** getelementptr inbounds (%struct.ListBase, %struct.ListBase* @seqbase_clipboard, i32 0, i32 0), align 8, !dbg !6780
  %40 = bitcast i8* %39 to %struct.Sequence*, !dbg !6782
  store %struct.Sequence* %40, %struct.Sequence** %seq21, align 8, !dbg !6783
  br label %for.cond22, !dbg !6784

for.cond22:                                       ; preds = %for.inc25, %if.end20
  %41 = load %struct.Sequence*, %struct.Sequence** %seq21, align 8, !dbg !6785
  %tobool23 = icmp ne %struct.Sequence* %41, null, !dbg !6787
  br i1 %tobool23, label %for.body24, label %for.end27, !dbg !6787

for.body24:                                       ; preds = %for.cond22
  %42 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6788
  %43 = load %struct.Sequence*, %struct.Sequence** %seq21, align 8, !dbg !6790
  call void @seq_copy_del_sound(%struct.Scene* %42, %struct.Sequence* %43), !dbg !6791
  br label %for.inc25, !dbg !6792

for.inc25:                                        ; preds = %for.body24
  %44 = load %struct.Sequence*, %struct.Sequence** %seq21, align 8, !dbg !6793
  %next26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 0, !dbg !6794
  %45 = load %struct.Sequence*, %struct.Sequence** %next26, align 8, !dbg !6794
  store %struct.Sequence* %45, %struct.Sequence** %seq21, align 8, !dbg !6795
  br label %for.cond22, !dbg !6796, !llvm.loop !6797

for.end27:                                        ; preds = %for.cond22
  call void @BKE_sequencer_base_clipboard_pointers_store(%struct.ListBase* @seqbase_clipboard), !dbg !6799
  store i32 4, i32* %retval, align 4, !dbg !6800
  br label %return, !dbg !6800

return:                                           ; preds = %for.end27, %if.then
  %46 = load i32, i32* %retval, align 4, !dbg !6801
  ret i32 %46, !dbg !6801
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_paste(%struct.wmOperatorType* %ot) #0 !dbg !6802 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !6803, metadata !DIExpression()), !dbg !6804
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6805
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !6806
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i64 0, i64 0), i8** %name, align 8, !dbg !6807
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6808
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !6809
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.180, i64 0, i64 0), i8** %idname, align 8, !dbg !6810
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6811
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !6812
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0), i8** %description, align 8, !dbg !6813
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6814
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !6815
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_paste_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !6816
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6817
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !6818
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !6819
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !6820
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !6821
  store i16 3, i16* %flag, align 8, !dbg !6822
  ret void, !dbg !6823
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_paste_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !6824 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  %bmain = alloca %struct.Main*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %nseqbase = alloca %struct.ListBase, align 8
  %ofs = alloca i32, align 4
  %iseq = alloca %struct.Sequence*, align 8
  %iseq_first = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !6827, metadata !DIExpression()), !dbg !6828
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain, metadata !6829, metadata !DIExpression()), !dbg !6891
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6892
  %call = call %struct.Main* @CTX_data_main(%struct.bContext* %0), !dbg !6893
  store %struct.Main* %call, %struct.Main** %bmain, align 8, !dbg !6891
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !6894, metadata !DIExpression()), !dbg !6895
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !6896
  %call1 = call %struct.Scene* @CTX_data_scene(%struct.bContext* %1), !dbg !6897
  store %struct.Scene* %call1, %struct.Scene** %scene, align 8, !dbg !6895
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !6898, metadata !DIExpression()), !dbg !6899
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6900
  %call2 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %2, i8 zeroext 1), !dbg !6901
  store %struct.Editing* %call2, %struct.Editing** %ed, align 8, !dbg !6899
  call void @llvm.dbg.declare(metadata %struct.ListBase* %nseqbase, metadata !6902, metadata !DIExpression()), !dbg !6903
  %3 = bitcast %struct.ListBase* %nseqbase to i8*, !dbg !6903
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false), !dbg !6903
  call void @llvm.dbg.declare(metadata i32* %ofs, metadata !6904, metadata !DIExpression()), !dbg !6905
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !6906, metadata !DIExpression()), !dbg !6907
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq_first, metadata !6908, metadata !DIExpression()), !dbg !6909
  %4 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6910
  call void @ED_sequencer_deselect_all(%struct.Scene* %4), !dbg !6911
  %5 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6912
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %5, i32 0, i32 22, !dbg !6913
  %cfra = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !6914
  %6 = load i32, i32* %cfra, align 8, !dbg !6914
  %7 = load i32, i32* @seqbase_clipboard_frame, align 4, !dbg !6915
  %sub = sub nsw i32 %6, %7, !dbg !6916
  store i32 %sub, i32* %ofs, align 4, !dbg !6917
  %8 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6918
  call void @BKE_sequence_base_dupli_recursive(%struct.Scene* %8, %struct.Scene* null, %struct.ListBase* %nseqbase, %struct.ListBase* @seqbase_clipboard, i32 1), !dbg !6919
  %9 = load i32, i32* %ofs, align 4, !dbg !6920
  %tobool = icmp ne i32 %9, 0, !dbg !6920
  br i1 %tobool, label %if.then, label %if.end, !dbg !6922

if.then:                                          ; preds = %entry
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !6923
  %10 = load i8*, i8** %first, align 8, !dbg !6923
  %11 = bitcast i8* %10 to %struct.Sequence*, !dbg !6926
  store %struct.Sequence* %11, %struct.Sequence** %iseq, align 8, !dbg !6927
  br label %for.cond, !dbg !6928

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6929
  %tobool3 = icmp ne %struct.Sequence* %12, null, !dbg !6931
  br i1 %tobool3, label %for.body, label %for.end, !dbg !6931

for.body:                                         ; preds = %for.cond
  %13 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6932
  %14 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6934
  %15 = load i32, i32* %ofs, align 4, !dbg !6935
  call void @BKE_sequence_translate(%struct.Scene* %13, %struct.Sequence* %14, i32 %15), !dbg !6936
  br label %for.inc, !dbg !6937

for.inc:                                          ; preds = %for.body
  %16 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6938
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 0, !dbg !6939
  %17 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !6939
  store %struct.Sequence* %17, %struct.Sequence** %iseq, align 8, !dbg !6940
  br label %for.cond, !dbg !6941, !llvm.loop !6942

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !6944

if.end:                                           ; preds = %for.end, %entry
  %18 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !6945
  call void @BKE_sequencer_base_clipboard_pointers_restore(%struct.ListBase* %nseqbase, %struct.Main* %18), !dbg !6946
  %first4 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !6947
  %19 = load i8*, i8** %first4, align 8, !dbg !6947
  %20 = bitcast i8* %19 to %struct.Sequence*, !dbg !6949
  store %struct.Sequence* %20, %struct.Sequence** %iseq, align 8, !dbg !6950
  br label %for.cond5, !dbg !6951

for.cond5:                                        ; preds = %for.inc8, %if.end
  %21 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6952
  %tobool6 = icmp ne %struct.Sequence* %21, null, !dbg !6954
  br i1 %tobool6, label %for.body7, label %for.end10, !dbg !6954

for.body7:                                        ; preds = %for.cond5
  %22 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6955
  %23 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6957
  call void @BKE_sequence_sound_init(%struct.Scene* %22, %struct.Sequence* %23), !dbg !6958
  br label %for.inc8, !dbg !6959

for.inc8:                                         ; preds = %for.body7
  %24 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6960
  %next9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 0, !dbg !6961
  %25 = load %struct.Sequence*, %struct.Sequence** %next9, align 8, !dbg !6961
  store %struct.Sequence* %25, %struct.Sequence** %iseq, align 8, !dbg !6962
  br label %for.cond5, !dbg !6963, !llvm.loop !6964

for.end10:                                        ; preds = %for.cond5
  %first11 = getelementptr inbounds %struct.ListBase, %struct.ListBase* %nseqbase, i32 0, i32 0, !dbg !6966
  %26 = load i8*, i8** %first11, align 8, !dbg !6966
  %27 = bitcast i8* %26 to %struct.Sequence*, !dbg !6967
  store %struct.Sequence* %27, %struct.Sequence** %iseq_first, align 8, !dbg !6968
  %28 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6969
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %28, i32 0, i32 0, !dbg !6970
  %29 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !6970
  call void @BLI_movelisttolist(%struct.ListBase* %29, %struct.ListBase* %nseqbase), !dbg !6971
  %30 = load %struct.Sequence*, %struct.Sequence** %iseq_first, align 8, !dbg !6972
  store %struct.Sequence* %30, %struct.Sequence** %iseq, align 8, !dbg !6974
  br label %for.cond12, !dbg !6975

for.cond12:                                       ; preds = %for.inc16, %for.end10
  %31 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6976
  %tobool13 = icmp ne %struct.Sequence* %31, null, !dbg !6978
  br i1 %tobool13, label %for.body14, label %for.end18, !dbg !6978

for.body14:                                       ; preds = %for.cond12
  %32 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6979
  %33 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !6981
  %34 = bitcast %struct.Scene* %33 to i8*, !dbg !6981
  %call15 = call i32 @BKE_sequencer_recursive_apply(%struct.Sequence* %32, i32 (%struct.Sequence*, i8*)* @apply_unique_name_cb, i8* %34), !dbg !6982
  br label %for.inc16, !dbg !6983

for.inc16:                                        ; preds = %for.body14
  %35 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6984
  %next17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %35, i32 0, i32 0, !dbg !6985
  %36 = load %struct.Sequence*, %struct.Sequence** %next17, align 8, !dbg !6985
  store %struct.Sequence* %36, %struct.Sequence** %iseq, align 8, !dbg !6986
  br label %for.cond12, !dbg !6987, !llvm.loop !6988

for.end18:                                        ; preds = %for.cond12
  %37 = load %struct.Sequence*, %struct.Sequence** %iseq_first, align 8, !dbg !6990
  store %struct.Sequence* %37, %struct.Sequence** %iseq, align 8, !dbg !6992
  br label %for.cond19, !dbg !6993

for.cond19:                                       ; preds = %for.inc29, %for.end18
  %38 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !6994
  %tobool20 = icmp ne %struct.Sequence* %38, null, !dbg !6996
  br i1 %tobool20, label %for.body21, label %for.end31, !dbg !6996

for.body21:                                       ; preds = %for.cond19
  %39 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !6997
  %seqbasep22 = getelementptr inbounds %struct.Editing, %struct.Editing* %39, i32 0, i32 0, !dbg !7000
  %40 = load %struct.ListBase*, %struct.ListBase** %seqbasep22, align 8, !dbg !7000
  %41 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !7001
  %call23 = call zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase* %40, %struct.Sequence* %41), !dbg !7002
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7002
  br i1 %tobool24, label %if.then25, label %if.end28, !dbg !7003

if.then25:                                        ; preds = %for.body21
  %42 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7004
  %seqbasep26 = getelementptr inbounds %struct.Editing, %struct.Editing* %42, i32 0, i32 0, !dbg !7006
  %43 = load %struct.ListBase*, %struct.ListBase** %seqbasep26, align 8, !dbg !7006
  %44 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !7007
  %45 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7008
  %call27 = call zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase* %43, %struct.Sequence* %44, %struct.Scene* %45), !dbg !7009
  br label %if.end28, !dbg !7010

if.end28:                                         ; preds = %if.then25, %for.body21
  br label %for.inc29, !dbg !7011

for.inc29:                                        ; preds = %if.end28
  %46 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !7012
  %next30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 0, !dbg !7013
  %47 = load %struct.Sequence*, %struct.Sequence** %next30, align 8, !dbg !7013
  store %struct.Sequence* %47, %struct.Sequence** %iseq, align 8, !dbg !7014
  br label %for.cond19, !dbg !7015, !llvm.loop !7016

for.end31:                                        ; preds = %for.cond19
  %48 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7018
  %49 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7019
  %50 = bitcast %struct.Scene* %49 to i8*, !dbg !7019
  call void @WM_event_add_notifier(%struct.bContext* %48, i32 67502080, i8* %50), !dbg !7020
  ret i32 4, !dbg !7021
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_swap_data(%struct.wmOperatorType* %ot) #0 !dbg !7022 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7023, metadata !DIExpression()), !dbg !7024
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7025
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7026
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.181, i64 0, i64 0), i8** %name, align 8, !dbg !7027
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7028
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7029
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.182, i64 0, i64 0), i8** %idname, align 8, !dbg !7030
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7031
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7032
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.183, i64 0, i64 0), i8** %description, align 8, !dbg !7033
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7034
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !7035
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_swap_data_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7036
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7037
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !7038
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !7039
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7040
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !7041
  store i16 3, i16* %flag, align 8, !dbg !7042
  ret void, !dbg !7043
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_swap_data_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !7044 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %seq_act = alloca %struct.Sequence*, align 8
  %seq_other = alloca %struct.Sequence*, align 8
  %error_msg = alloca i8*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7045, metadata !DIExpression()), !dbg !7046
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7049, metadata !DIExpression()), !dbg !7050
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7051
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !7052
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !7050
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_act, metadata !7053, metadata !DIExpression()), !dbg !7054
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_other, metadata !7055, metadata !DIExpression()), !dbg !7056
  call void @llvm.dbg.declare(metadata i8** %error_msg, metadata !7057, metadata !DIExpression()), !dbg !7058
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7059
  %call1 = call i32 @BKE_sequencer_active_get_pair(%struct.Scene* %1, %struct.Sequence** %seq_act, %struct.Sequence** %seq_other), !dbg !7061
  %cmp = icmp eq i32 %call1, 0, !dbg !7062
  br i1 %cmp, label %if.then, label %if.end, !dbg !7063

if.then:                                          ; preds = %entry
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7064
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %2, i32 0, i32 8, !dbg !7066
  %3 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !7066
  call void @BKE_report(%struct.ReportList* %3, i32 32, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.216, i64 0, i64 0)), !dbg !7067
  store i32 2, i32* %retval, align 4, !dbg !7068
  br label %return, !dbg !7068

if.end:                                           ; preds = %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7069
  %5 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7071
  %call2 = call i32 @BKE_sequence_swap(%struct.Sequence* %4, %struct.Sequence* %5, i8** %error_msg), !dbg !7072
  %cmp3 = icmp eq i32 %call2, 0, !dbg !7073
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !7074

if.then4:                                         ; preds = %if.end
  %6 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7075
  %reports5 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %6, i32 0, i32 8, !dbg !7077
  %7 = load %struct.ReportList*, %struct.ReportList** %reports5, align 8, !dbg !7077
  %8 = load i8*, i8** %error_msg, align 8, !dbg !7078
  call void @BKE_report(%struct.ReportList* %7, i32 32, i8* %8), !dbg !7079
  store i32 2, i32* %retval, align 4, !dbg !7080
  br label %return, !dbg !7080

if.end6:                                          ; preds = %if.end
  %9 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7081
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 38, !dbg !7083
  %10 = load i8*, i8** %scene_sound, align 8, !dbg !7083
  %tobool = icmp ne i8* %10, null, !dbg !7081
  br i1 %tobool, label %if.then7, label %if.end9, !dbg !7084

if.then7:                                         ; preds = %if.end6
  %11 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7085
  %12 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7086
  %scene_sound8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 38, !dbg !7087
  %13 = load i8*, i8** %scene_sound8, align 8, !dbg !7087
  call void @sound_remove_scene_sound(%struct.Scene* %11, i8* %13), !dbg !7088
  br label %if.end9, !dbg !7088

if.end9:                                          ; preds = %if.then7, %if.end6
  %14 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7089
  %scene_sound10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 38, !dbg !7091
  %15 = load i8*, i8** %scene_sound10, align 8, !dbg !7091
  %tobool11 = icmp ne i8* %15, null, !dbg !7089
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !7092

if.then12:                                        ; preds = %if.end9
  %16 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7093
  %17 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7094
  %scene_sound13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 38, !dbg !7095
  %18 = load i8*, i8** %scene_sound13, align 8, !dbg !7095
  call void @sound_remove_scene_sound(%struct.Scene* %16, i8* %18), !dbg !7096
  br label %if.end14, !dbg !7096

if.end14:                                         ; preds = %if.then12, %if.end9
  %19 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7097
  %scene_sound15 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 38, !dbg !7098
  store i8* null, i8** %scene_sound15, align 8, !dbg !7099
  %20 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7100
  %scene_sound16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 38, !dbg !7101
  store i8* null, i8** %scene_sound16, align 8, !dbg !7102
  %21 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7103
  %22 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7104
  call void @BKE_sequence_calc(%struct.Scene* %21, %struct.Sequence* %22), !dbg !7105
  %23 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7106
  %24 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7107
  call void @BKE_sequence_calc(%struct.Scene* %23, %struct.Sequence* %24), !dbg !7108
  %25 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7109
  %sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 37, !dbg !7111
  %26 = load %struct.bSound*, %struct.bSound** %sound, align 8, !dbg !7111
  %tobool17 = icmp ne %struct.bSound* %26, null, !dbg !7109
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !7112

if.then18:                                        ; preds = %if.end14
  %27 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7113
  %28 = load %struct.Sequence*, %struct.Sequence** %seq_act, align 8, !dbg !7114
  %call19 = call i8* @sound_add_scene_sound_defaults(%struct.Scene* %27, %struct.Sequence* %28), !dbg !7115
  br label %if.end20, !dbg !7115

if.end20:                                         ; preds = %if.then18, %if.end14
  %29 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7116
  %sound21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 37, !dbg !7118
  %30 = load %struct.bSound*, %struct.bSound** %sound21, align 8, !dbg !7118
  %tobool22 = icmp ne %struct.bSound* %30, null, !dbg !7116
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !7119

if.then23:                                        ; preds = %if.end20
  %31 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7120
  %32 = load %struct.Sequence*, %struct.Sequence** %seq_other, align 8, !dbg !7121
  %call24 = call i8* @sound_add_scene_sound_defaults(%struct.Scene* %31, %struct.Sequence* %32), !dbg !7122
  br label %if.end25, !dbg !7122

if.end25:                                         ; preds = %if.then23, %if.end20
  %33 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7123
  %34 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7124
  %35 = bitcast %struct.Scene* %34 to i8*, !dbg !7124
  call void @WM_event_add_notifier(%struct.bContext* %33, i32 67502080, i8* %35), !dbg !7125
  store i32 4, i32* %retval, align 4, !dbg !7126
  br label %return, !dbg !7126

return:                                           ; preds = %if.end25, %if.then4, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !7127
  ret i32 %36, !dbg !7127
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_view_ghost_border(%struct.wmOperatorType* %ot) #0 !dbg !7128 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7129, metadata !DIExpression()), !dbg !7130
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7131
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7132
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.184, i64 0, i64 0), i8** %name, align 8, !dbg !7133
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7134
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7135
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.185, i64 0, i64 0), i8** %idname, align 8, !dbg !7136
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7137
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7138
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.186, i64 0, i64 0), i8** %description, align 8, !dbg !7139
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7140
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 6, !dbg !7141
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @WM_border_select_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !7142
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7143
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 4, !dbg !7144
  store i32 (%struct.bContext*, %struct.wmOperator*)* @view_ghost_border_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7145
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7146
  %modal = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 8, !dbg !7147
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @WM_border_select_modal, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %modal, align 8, !dbg !7148
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7149
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 9, !dbg !7150
  store i32 (%struct.bContext*)* @sequencer_view_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !7151
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7152
  %cancel = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %7, i32 0, i32 7, !dbg !7153
  store void (%struct.bContext*, %struct.wmOperator*)* @WM_border_select_cancel, void (%struct.bContext*, %struct.wmOperator*)** %cancel, align 8, !dbg !7154
  %8 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7155
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %8, i32 0, i32 19, !dbg !7156
  store i16 0, i16* %flag, align 8, !dbg !7157
  %9 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7158
  call void @WM_operator_properties_gesture_border(%struct.wmOperatorType* %9, i8 zeroext 0), !dbg !7159
  ret void, !dbg !7160
}

declare dso_local i32 @WM_border_select_invoke(%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @view_ghost_border_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !7161 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %v2d = alloca %struct.View2D*, align 8
  %rect = alloca %struct.rctf, align 4
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7162, metadata !DIExpression()), !dbg !7163
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7164, metadata !DIExpression()), !dbg !7165
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7166, metadata !DIExpression()), !dbg !7167
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7168
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !7169
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !7167
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d, metadata !7170, metadata !DIExpression()), !dbg !7171
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7172
  %call1 = call %struct.View2D* @UI_view2d_fromcontext(%struct.bContext* %1), !dbg !7173
  store %struct.View2D* %call1, %struct.View2D** %v2d, align 8, !dbg !7171
  call void @llvm.dbg.declare(metadata %struct.rctf* %rect, metadata !7174, metadata !DIExpression()), !dbg !7175
  %2 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7176
  call void @WM_operator_properties_border_to_rctf(%struct.wmOperator* %2, %struct.rctf* %rect), !dbg !7177
  %3 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !7178
  call void @UI_view2d_region_to_view_rctf(%struct.View2D* %3, %struct.rctf* %rect, %struct.rctf* %rect), !dbg !7179
  %4 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !7180
  %tot = getelementptr inbounds %struct.View2D, %struct.View2D* %4, i32 0, i32 0, !dbg !7181
  %call2 = call float @BLI_rctf_size_x(%struct.rctf* %tot), !dbg !7182
  %5 = call float @llvm.fabs.f32(float %call2), !dbg !7183
  %xmin = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7184
  %6 = load float, float* %xmin, align 4, !dbg !7185
  %div = fdiv float %6, %5, !dbg !7185
  store float %div, float* %xmin, align 4, !dbg !7185
  %7 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !7186
  %tot3 = getelementptr inbounds %struct.View2D, %struct.View2D* %7, i32 0, i32 0, !dbg !7187
  %call4 = call float @BLI_rctf_size_y(%struct.rctf* %tot3), !dbg !7188
  %8 = call float @llvm.fabs.f32(float %call4), !dbg !7189
  %ymin = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7190
  %9 = load float, float* %ymin, align 4, !dbg !7191
  %div5 = fdiv float %9, %8, !dbg !7191
  store float %div5, float* %ymin, align 4, !dbg !7191
  %10 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !7192
  %tot6 = getelementptr inbounds %struct.View2D, %struct.View2D* %10, i32 0, i32 0, !dbg !7193
  %call7 = call float @BLI_rctf_size_x(%struct.rctf* %tot6), !dbg !7194
  %11 = call float @llvm.fabs.f32(float %call7), !dbg !7195
  %xmax = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7196
  %12 = load float, float* %xmax, align 4, !dbg !7197
  %div8 = fdiv float %12, %11, !dbg !7197
  store float %div8, float* %xmax, align 4, !dbg !7197
  %13 = load %struct.View2D*, %struct.View2D** %v2d, align 8, !dbg !7198
  %tot9 = getelementptr inbounds %struct.View2D, %struct.View2D* %13, i32 0, i32 0, !dbg !7199
  %call10 = call float @BLI_rctf_size_y(%struct.rctf* %tot9), !dbg !7200
  %14 = call float @llvm.fabs.f32(float %call10), !dbg !7201
  %ymax = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7202
  %15 = load float, float* %ymax, align 4, !dbg !7203
  %div11 = fdiv float %15, %14, !dbg !7203
  store float %div11, float* %ymax, align 4, !dbg !7203
  %xmin12 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7204
  %16 = load float, float* %xmin12, align 4, !dbg !7205
  %add = fadd float %16, 5.000000e-01, !dbg !7205
  store float %add, float* %xmin12, align 4, !dbg !7205
  %xmax13 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7206
  %17 = load float, float* %xmax13, align 4, !dbg !7207
  %add14 = fadd float %17, 5.000000e-01, !dbg !7207
  store float %add14, float* %xmax13, align 4, !dbg !7207
  %ymin15 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7208
  %18 = load float, float* %ymin15, align 4, !dbg !7209
  %add16 = fadd float %18, 5.000000e-01, !dbg !7209
  store float %add16, float* %ymin15, align 4, !dbg !7209
  %ymax17 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7210
  %19 = load float, float* %ymax17, align 4, !dbg !7211
  %add18 = fadd float %19, 5.000000e-01, !dbg !7211
  store float %add18, float* %ymax17, align 4, !dbg !7211
  %xmin19 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7212
  %20 = load float, float* %xmin19, align 4, !dbg !7212
  %cmp = fcmp olt float %20, 0.000000e+00, !dbg !7212
  br i1 %cmp, label %if.then, label %if.else, !dbg !7215

if.then:                                          ; preds = %entry
  %xmin20 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7212
  store float 0.000000e+00, float* %xmin20, align 4, !dbg !7212
  br label %if.end25, !dbg !7212

if.else:                                          ; preds = %entry
  %xmin21 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7216
  %21 = load float, float* %xmin21, align 4, !dbg !7216
  %cmp22 = fcmp ogt float %21, 1.000000e+00, !dbg !7216
  br i1 %cmp22, label %if.then23, label %if.end, !dbg !7212

if.then23:                                        ; preds = %if.else
  %xmin24 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 0, !dbg !7216
  store float 1.000000e+00, float* %xmin24, align 4, !dbg !7216
  br label %if.end, !dbg !7216

if.end:                                           ; preds = %if.then23, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then
  %ymin26 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7218
  %22 = load float, float* %ymin26, align 4, !dbg !7218
  %cmp27 = fcmp olt float %22, 0.000000e+00, !dbg !7218
  br i1 %cmp27, label %if.then28, label %if.else30, !dbg !7221

if.then28:                                        ; preds = %if.end25
  %ymin29 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7218
  store float 0.000000e+00, float* %ymin29, align 4, !dbg !7218
  br label %if.end36, !dbg !7218

if.else30:                                        ; preds = %if.end25
  %ymin31 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7222
  %23 = load float, float* %ymin31, align 4, !dbg !7222
  %cmp32 = fcmp ogt float %23, 1.000000e+00, !dbg !7222
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !7218

if.then33:                                        ; preds = %if.else30
  %ymin34 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 2, !dbg !7222
  store float 1.000000e+00, float* %ymin34, align 4, !dbg !7222
  br label %if.end35, !dbg !7222

if.end35:                                         ; preds = %if.then33, %if.else30
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then28
  %xmax37 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7224
  %24 = load float, float* %xmax37, align 4, !dbg !7224
  %cmp38 = fcmp olt float %24, 0.000000e+00, !dbg !7224
  br i1 %cmp38, label %if.then39, label %if.else41, !dbg !7227

if.then39:                                        ; preds = %if.end36
  %xmax40 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7224
  store float 0.000000e+00, float* %xmax40, align 4, !dbg !7224
  br label %if.end47, !dbg !7224

if.else41:                                        ; preds = %if.end36
  %xmax42 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7228
  %25 = load float, float* %xmax42, align 4, !dbg !7228
  %cmp43 = fcmp ogt float %25, 1.000000e+00, !dbg !7228
  br i1 %cmp43, label %if.then44, label %if.end46, !dbg !7224

if.then44:                                        ; preds = %if.else41
  %xmax45 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 1, !dbg !7228
  store float 1.000000e+00, float* %xmax45, align 4, !dbg !7228
  br label %if.end46, !dbg !7228

if.end46:                                         ; preds = %if.then44, %if.else41
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then39
  %ymax48 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7230
  %26 = load float, float* %ymax48, align 4, !dbg !7230
  %cmp49 = fcmp olt float %26, 0.000000e+00, !dbg !7230
  br i1 %cmp49, label %if.then50, label %if.else52, !dbg !7233

if.then50:                                        ; preds = %if.end47
  %ymax51 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7230
  store float 0.000000e+00, float* %ymax51, align 4, !dbg !7230
  br label %if.end58, !dbg !7230

if.else52:                                        ; preds = %if.end47
  %ymax53 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7234
  %27 = load float, float* %ymax53, align 4, !dbg !7234
  %cmp54 = fcmp ogt float %27, 1.000000e+00, !dbg !7234
  br i1 %cmp54, label %if.then55, label %if.end57, !dbg !7230

if.then55:                                        ; preds = %if.else52
  %ymax56 = getelementptr inbounds %struct.rctf, %struct.rctf* %rect, i32 0, i32 3, !dbg !7234
  store float 1.000000e+00, float* %ymax56, align 4, !dbg !7234
  br label %if.end57, !dbg !7234

if.end57:                                         ; preds = %if.then55, %if.else52
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then50
  %28 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7236
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %28, i32 0, i32 19, !dbg !7237
  %29 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7237
  %over_border = getelementptr inbounds %struct.Editing, %struct.Editing* %29, i32 0, i32 10, !dbg !7238
  %30 = bitcast %struct.rctf* %over_border to i8*, !dbg !7239
  %31 = bitcast %struct.rctf* %rect to i8*, !dbg !7239
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 4 %31, i64 16, i1 false), !dbg !7239
  %32 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7240
  %33 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7241
  %34 = bitcast %struct.Scene* %33 to i8*, !dbg !7241
  call void @WM_event_add_notifier(%struct.bContext* %32, i32 67502080, i8* %34), !dbg !7242
  ret i32 4, !dbg !7243
}

declare dso_local i32 @WM_border_select_modal(%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*) #2

declare dso_local void @WM_border_select_cancel(%struct.bContext*, %struct.wmOperator*) #2

declare dso_local void @WM_operator_properties_gesture_border(%struct.wmOperatorType*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_rebuild_proxy(%struct.wmOperatorType* %ot) #0 !dbg !7244 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7245, metadata !DIExpression()), !dbg !7246
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7247
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7248
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.187, i64 0, i64 0), i8** %name, align 8, !dbg !7249
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7250
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7251
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.188, i64 0, i64 0), i8** %idname, align 8, !dbg !7252
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7253
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7254
  store i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.189, i64 0, i64 0), i8** %description, align 8, !dbg !7255
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7256
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !7257
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_rebuild_proxy_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7258
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7259
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !7260
  store i32 (%struct.bContext*)* @ED_operator_sequencer_active, i32 (%struct.bContext*)** %poll, align 8, !dbg !7261
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7262
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !7263
  store i16 1, i16* %flag, align 8, !dbg !7264
  ret void, !dbg !7265
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_rebuild_proxy_exec(%struct.bContext* %C, %struct.wmOperator* %UNUSED_op) #0 !dbg !7266 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %UNUSED_op.addr = alloca %struct.wmOperator*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7267, metadata !DIExpression()), !dbg !7268
  store %struct.wmOperator* %UNUSED_op, %struct.wmOperator** %UNUSED_op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %UNUSED_op.addr, metadata !7269, metadata !DIExpression()), !dbg !7270
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7271
  call void @seq_proxy_build_job(%struct.bContext* %0), !dbg !7272
  ret i32 4, !dbg !7273
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_change_effect_input(%struct.wmOperatorType* %ot) #0 !dbg !7274 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7275, metadata !DIExpression()), !dbg !7276
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7277
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7278
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.190, i64 0, i64 0), i8** %name, align 8, !dbg !7279
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7280
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7281
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.191, i64 0, i64 0), i8** %idname, align 8, !dbg !7282
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7283
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7284
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0), i8** %description, align 8, !dbg !7285
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7286
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !7287
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_change_effect_input_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7288
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7289
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !7290
  store i32 (%struct.bContext*)* @sequencer_effect_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !7291
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7292
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !7293
  store i16 3, i16* %flag, align 8, !dbg !7294
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7295
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !7296
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !7296
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !7295
  %call = call %struct.PropertyRNA* @RNA_def_enum(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.192, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([4 x %struct.EnumPropertyItem], [4 x %struct.EnumPropertyItem]* @prop_change_effect_input_types, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.193, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.194, i64 0, i64 0)), !dbg !7297
  %9 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7298
  %prop = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %9, i32 0, i32 13, !dbg !7299
  store %struct.PropertyRNA* %call, %struct.PropertyRNA** %prop, align 8, !dbg !7300
  ret void, !dbg !7301
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_change_effect_input_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !7302 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %seq_1 = alloca %struct.Sequence**, align 8
  %seq_2 = alloca %struct.Sequence**, align 8
  %sw_ap = alloca %struct.Sequence*, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7303, metadata !DIExpression()), !dbg !7304
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7307, metadata !DIExpression()), !dbg !7308
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7309
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !7310
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !7308
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !7311, metadata !DIExpression()), !dbg !7312
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7313
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !7314
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !7312
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7315, metadata !DIExpression()), !dbg !7316
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7317
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !7318
  store %struct.Sequence* %call2, %struct.Sequence** %seq, align 8, !dbg !7316
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_1, metadata !7319, metadata !DIExpression()), !dbg !7320
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_2, metadata !7321, metadata !DIExpression()), !dbg !7322
  %3 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7323
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %3, i32 0, i32 7, !dbg !7324
  %4 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !7324
  %call3 = call i32 @RNA_enum_get(%struct.PointerRNA* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.192, i64 0, i64 0)), !dbg !7325
  switch i32 %call3, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb4
  ], !dbg !7326

sw.bb:                                            ; preds = %entry
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7327
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 33, !dbg !7329
  store %struct.Sequence** %seq1, %struct.Sequence*** %seq_1, align 8, !dbg !7330
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7331
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 34, !dbg !7332
  store %struct.Sequence** %seq2, %struct.Sequence*** %seq_2, align 8, !dbg !7333
  br label %sw.epilog, !dbg !7334

sw.bb4:                                           ; preds = %entry
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7335
  %seq25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 34, !dbg !7336
  store %struct.Sequence** %seq25, %struct.Sequence*** %seq_1, align 8, !dbg !7337
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7338
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 35, !dbg !7339
  store %struct.Sequence** %seq3, %struct.Sequence*** %seq_2, align 8, !dbg !7340
  br label %sw.epilog, !dbg !7341

sw.default:                                       ; preds = %entry
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7342
  %seq16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 33, !dbg !7343
  store %struct.Sequence** %seq16, %struct.Sequence*** %seq_1, align 8, !dbg !7344
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7345
  %seq37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 35, !dbg !7346
  store %struct.Sequence** %seq37, %struct.Sequence*** %seq_2, align 8, !dbg !7347
  br label %sw.epilog, !dbg !7348

sw.epilog:                                        ; preds = %sw.default, %sw.bb4, %sw.bb
  %11 = load %struct.Sequence**, %struct.Sequence*** %seq_1, align 8, !dbg !7349
  %12 = load %struct.Sequence*, %struct.Sequence** %11, align 8, !dbg !7351
  %cmp = icmp eq %struct.Sequence* %12, null, !dbg !7352
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7353

lor.lhs.false:                                    ; preds = %sw.epilog
  %13 = load %struct.Sequence**, %struct.Sequence*** %seq_2, align 8, !dbg !7354
  %14 = load %struct.Sequence*, %struct.Sequence** %13, align 8, !dbg !7355
  %cmp8 = icmp eq %struct.Sequence* %14, null, !dbg !7356
  br i1 %cmp8, label %if.then, label %if.else, !dbg !7357

if.then:                                          ; preds = %lor.lhs.false, %sw.epilog
  %15 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7358
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %15, i32 0, i32 8, !dbg !7360
  %16 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !7360
  call void @BKE_report(%struct.ReportList* %16, i32 32, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.220, i64 0, i64 0)), !dbg !7361
  store i32 2, i32* %retval, align 4, !dbg !7362
  br label %return, !dbg !7362

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %struct.Sequence** %sw_ap, metadata !7363, metadata !DIExpression()), !dbg !7366
  %17 = load %struct.Sequence**, %struct.Sequence*** %seq_1, align 8, !dbg !7366
  %18 = load %struct.Sequence*, %struct.Sequence** %17, align 8, !dbg !7366
  store %struct.Sequence* %18, %struct.Sequence** %sw_ap, align 8, !dbg !7366
  %19 = load %struct.Sequence**, %struct.Sequence*** %seq_2, align 8, !dbg !7366
  %20 = load %struct.Sequence*, %struct.Sequence** %19, align 8, !dbg !7366
  %21 = load %struct.Sequence**, %struct.Sequence*** %seq_1, align 8, !dbg !7366
  store %struct.Sequence* %20, %struct.Sequence** %21, align 8, !dbg !7366
  %22 = load %struct.Sequence*, %struct.Sequence** %sw_ap, align 8, !dbg !7366
  %23 = load %struct.Sequence**, %struct.Sequence*** %seq_2, align 8, !dbg !7366
  store %struct.Sequence* %22, %struct.Sequence** %23, align 8, !dbg !7366
  br label %if.end

if.end:                                           ; preds = %if.else
  %24 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7367
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7368
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %24, %struct.Sequence* %25, i32 0, i32 1), !dbg !7369
  %26 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7370
  %27 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7371
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %27, i32 0, i32 1, !dbg !7372
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %26, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !7373
  %28 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7374
  %29 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7375
  %30 = bitcast %struct.Scene* %29 to i8*, !dbg !7375
  call void @WM_event_add_notifier(%struct.bContext* %28, i32 67502080, i8* %30), !dbg !7376
  store i32 4, i32* %retval, align 4, !dbg !7377
  br label %return, !dbg !7377

return:                                           ; preds = %if.end, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !7378
  ret i32 %31, !dbg !7378
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_change_effect_type(%struct.wmOperatorType* %ot) #0 !dbg !7379 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7382
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7383
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.195, i64 0, i64 0), i8** %name, align 8, !dbg !7384
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7385
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7386
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.196, i64 0, i64 0), i8** %idname, align 8, !dbg !7387
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7388
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7389
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0), i8** %description, align 8, !dbg !7390
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7391
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !7392
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_change_effect_type_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7393
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7394
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 9, !dbg !7395
  store i32 (%struct.bContext*)* @sequencer_effect_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !7396
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7397
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 19, !dbg !7398
  store i16 3, i16* %flag, align 8, !dbg !7399
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7400
  %srna = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 11, !dbg !7401
  %7 = load %struct.StructRNA*, %struct.StructRNA** %srna, align 8, !dbg !7401
  %8 = bitcast %struct.StructRNA* %7 to i8*, !dbg !7400
  %call = call %struct.PropertyRNA* @RNA_def_enum(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0), %struct.EnumPropertyItem* getelementptr inbounds ([17 x %struct.EnumPropertyItem], [17 x %struct.EnumPropertyItem]* @sequencer_prop_effect_types, i64 0, i64 0), i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.197, i64 0, i64 0)), !dbg !7402
  %9 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7403
  %prop = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %9, i32 0, i32 13, !dbg !7404
  store %struct.PropertyRNA* %call, %struct.PropertyRNA** %prop, align 8, !dbg !7405
  ret void, !dbg !7406
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_change_effect_type_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !7407 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %new_type = alloca i32, align 4
  %sh = alloca %struct.SeqEffectHandle, align 8
  %tmp = alloca %struct.SeqEffectHandle, align 8
  %tmp10 = alloca %struct.SeqEffectHandle, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7408, metadata !DIExpression()), !dbg !7409
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7410, metadata !DIExpression()), !dbg !7411
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7412, metadata !DIExpression()), !dbg !7413
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7414
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !7415
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !7413
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !7416, metadata !DIExpression()), !dbg !7417
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7418
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !7419
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !7417
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7420, metadata !DIExpression()), !dbg !7421
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7422
  %call2 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %2), !dbg !7423
  store %struct.Sequence* %call2, %struct.Sequence** %seq, align 8, !dbg !7421
  call void @llvm.dbg.declare(metadata i32* %new_type, metadata !7424, metadata !DIExpression()), !dbg !7425
  %3 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7426
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %3, i32 0, i32 7, !dbg !7427
  %4 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !7427
  %call3 = call i32 @RNA_enum_get(%struct.PointerRNA* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0)), !dbg !7428
  store i32 %call3, i32* %new_type, align 4, !dbg !7425
  call void @llvm.dbg.declare(metadata %struct.SeqEffectHandle* %sh, metadata !7429, metadata !DIExpression()), !dbg !7487
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7488
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !7490
  %6 = load i32, i32* %type, align 4, !dbg !7490
  %and = and i32 %6, 8, !dbg !7491
  %cmp = icmp eq i32 %and, 0, !dbg !7492
  br i1 %cmp, label %if.then, label %if.end, !dbg !7493

if.then:                                          ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !7494
  br label %return, !dbg !7494

if.end:                                           ; preds = %entry
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7496
  %type4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 6, !dbg !7498
  %8 = load i32, i32* %type4, align 4, !dbg !7498
  %call5 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %8), !dbg !7499
  %9 = load i32, i32* %new_type, align 4, !dbg !7500
  %call6 = call i32 @BKE_sequence_effect_get_num_inputs(i32 %9), !dbg !7501
  %cmp7 = icmp slt i32 %call5, %call6, !dbg !7502
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !7503

if.then8:                                         ; preds = %if.end
  %10 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7504
  %reports = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %10, i32 0, i32 8, !dbg !7506
  %11 = load %struct.ReportList*, %struct.ReportList** %reports, align 8, !dbg !7506
  call void @BKE_report(%struct.ReportList* %11, i32 32, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.227, i64 0, i64 0)), !dbg !7507
  store i32 2, i32* %retval, align 4, !dbg !7508
  br label %return, !dbg !7508

if.else:                                          ; preds = %if.end
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7509
  call void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret %tmp, %struct.Sequence* %12), !dbg !7511
  %13 = bitcast %struct.SeqEffectHandle* %sh to i8*, !dbg !7511
  %14 = bitcast %struct.SeqEffectHandle* %tmp to i8*, !dbg !7511
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 96, i1 false), !dbg !7511
  %free = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 6, !dbg !7512
  %15 = load void (%struct.Sequence*)*, void (%struct.Sequence*)** %free, align 8, !dbg !7512
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7513
  call void %15(%struct.Sequence* %16), !dbg !7514
  %17 = load i32, i32* %new_type, align 4, !dbg !7515
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7516
  %type9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 6, !dbg !7517
  store i32 %17, i32* %type9, align 4, !dbg !7518
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7519
  call void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret %tmp10, %struct.Sequence* %19), !dbg !7520
  %20 = bitcast %struct.SeqEffectHandle* %sh to i8*, !dbg !7520
  %21 = bitcast %struct.SeqEffectHandle* %tmp10 to i8*, !dbg !7520
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 96, i1 false), !dbg !7520
  %init = getelementptr inbounds %struct.SeqEffectHandle, %struct.SeqEffectHandle* %sh, i32 0, i32 2, !dbg !7521
  %22 = load void (%struct.Sequence*)*, void (%struct.Sequence*)** %init, align 8, !dbg !7521
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7522
  call void %22(%struct.Sequence* %23), !dbg !7523
  br label %if.end11

if.end11:                                         ; preds = %if.else
  %24 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7524
  %25 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7525
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %24, %struct.Sequence* %25, i32 0, i32 1), !dbg !7526
  %26 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7527
  %27 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7528
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %27, i32 0, i32 1, !dbg !7529
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %26, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !7530
  %28 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7531
  %29 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7532
  %30 = bitcast %struct.Scene* %29 to i8*, !dbg !7532
  call void @WM_event_add_notifier(%struct.bContext* %28, i32 67502080, i8* %30), !dbg !7533
  store i32 4, i32* %retval, align 4, !dbg !7534
  br label %return, !dbg !7534

return:                                           ; preds = %if.end11, %if.then8, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !7535
  ret i32 %31, !dbg !7535
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @SEQUENCER_OT_change_path(%struct.wmOperatorType* %ot) #0 !dbg !7536 {
entry:
  %ot.addr = alloca %struct.wmOperatorType*, align 8
  store %struct.wmOperatorType* %ot, %struct.wmOperatorType** %ot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperatorType** %ot.addr, metadata !7537, metadata !DIExpression()), !dbg !7538
  %0 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7539
  %name = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %0, i32 0, i32 0, !dbg !7540
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.198, i64 0, i64 0), i8** %name, align 8, !dbg !7541
  %1 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7542
  %idname = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %1, i32 0, i32 1, !dbg !7543
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.199, i64 0, i64 0), i8** %idname, align 8, !dbg !7544
  %2 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7545
  %description = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %2, i32 0, i32 3, !dbg !7546
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.40, i64 0, i64 0), i8** %description, align 8, !dbg !7547
  %3 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7548
  %exec = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %3, i32 0, i32 4, !dbg !7549
  store i32 (%struct.bContext*, %struct.wmOperator*)* @sequencer_change_path_exec, i32 (%struct.bContext*, %struct.wmOperator*)** %exec, align 8, !dbg !7550
  %4 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7551
  %invoke = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %4, i32 0, i32 6, !dbg !7552
  store i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)* @sequencer_change_path_invoke, i32 (%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*)** %invoke, align 8, !dbg !7553
  %5 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7554
  %poll = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %5, i32 0, i32 9, !dbg !7555
  store i32 (%struct.bContext*)* @sequencer_strip_has_path_poll, i32 (%struct.bContext*)** %poll, align 8, !dbg !7556
  %6 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7557
  %flag = getelementptr inbounds %struct.wmOperatorType, %struct.wmOperatorType* %6, i32 0, i32 19, !dbg !7558
  store i16 3, i16* %flag, align 8, !dbg !7559
  %7 = load %struct.wmOperatorType*, %struct.wmOperatorType** %ot.addr, align 8, !dbg !7560
  call void @WM_operator_properties_filesel(%struct.wmOperatorType* %7, i32 2096, i16 signext 9, i16 signext 0, i16 signext 27, i16 signext 0), !dbg !7561
  ret void, !dbg !7562
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_change_path_exec(%struct.bContext* %C, %struct.wmOperator* %op) #0 !dbg !7563 {
entry:
  %retval = alloca i32, align 4
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %bmain = alloca %struct.Main*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %is_relative_path = alloca i8, align 1
  %directory = alloca [1024 x i8], align 16
  %len = alloca i32, align 4
  %se = alloca %struct.StripElem*, align 8
  %rna_macro_iter = alloca %struct.CollectionPropertyIterator, align 8
  %itemptr = alloca %struct.PointerRNA, align 8
  %filename = alloca i8*, align 8
  %seq_ptr = alloca %struct.PointerRNA, align 8
  %prop = alloca %struct.PropertyRNA*, align 8
  %filepath = alloca [1024 x i8], align 16
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7564, metadata !DIExpression()), !dbg !7565
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7566, metadata !DIExpression()), !dbg !7567
  call void @llvm.dbg.declare(metadata %struct.Main** %bmain, metadata !7568, metadata !DIExpression()), !dbg !7569
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7570
  %call = call %struct.Main* @CTX_data_main(%struct.bContext* %0), !dbg !7571
  store %struct.Main* %call, %struct.Main** %bmain, align 8, !dbg !7569
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7572, metadata !DIExpression()), !dbg !7573
  %1 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7574
  %call1 = call %struct.Scene* @CTX_data_scene(%struct.bContext* %1), !dbg !7575
  store %struct.Scene* %call1, %struct.Scene** %scene, align 8, !dbg !7573
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !7576, metadata !DIExpression()), !dbg !7577
  %2 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7578
  %call2 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %2, i8 zeroext 0), !dbg !7579
  store %struct.Editing* %call2, %struct.Editing** %ed, align 8, !dbg !7577
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7580, metadata !DIExpression()), !dbg !7581
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7582
  %call3 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %3), !dbg !7583
  store %struct.Sequence* %call3, %struct.Sequence** %seq, align 8, !dbg !7581
  call void @llvm.dbg.declare(metadata i8* %is_relative_path, metadata !7584, metadata !DIExpression()), !dbg !7585
  %4 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7586
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %4, i32 0, i32 7, !dbg !7587
  %5 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !7587
  %call4 = call i32 @RNA_boolean_get(%struct.PointerRNA* %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.228, i64 0, i64 0)), !dbg !7588
  %conv = trunc i32 %call4 to i8, !dbg !7588
  store i8 %conv, i8* %is_relative_path, align 1, !dbg !7585
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7589
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 6, !dbg !7591
  %7 = load i32, i32* %type, align 4, !dbg !7591
  %cmp = icmp eq i32 %7, 0, !dbg !7592
  br i1 %cmp, label %if.then, label %if.else, !dbg !7593

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1024 x i8]* %directory, metadata !7594, metadata !DIExpression()), !dbg !7596
  call void @llvm.dbg.declare(metadata i32* %len, metadata !7597, metadata !DIExpression()), !dbg !7598
  %8 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7599
  %ptr6 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %8, i32 0, i32 7, !dbg !7600
  %9 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr6, align 8, !dbg !7600
  %10 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7601
  %ptr7 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %10, i32 0, i32 7, !dbg !7602
  %11 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr7, align 8, !dbg !7602
  %call8 = call %struct.PropertyRNA* @RNA_struct_find_property(%struct.PointerRNA* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.229, i64 0, i64 0)), !dbg !7603
  %call9 = call i32 @RNA_property_collection_length(%struct.PointerRNA* %9, %struct.PropertyRNA* %call8), !dbg !7604
  store i32 %call9, i32* %len, align 4, !dbg !7598
  call void @llvm.dbg.declare(metadata %struct.StripElem** %se, metadata !7605, metadata !DIExpression()), !dbg !7606
  %12 = load i32, i32* %len, align 4, !dbg !7607
  %cmp10 = icmp eq i32 %12, 0, !dbg !7609
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !7610

if.then12:                                        ; preds = %if.then
  store i32 2, i32* %retval, align 4, !dbg !7611
  br label %return, !dbg !7611

if.end:                                           ; preds = %if.then
  %13 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7612
  %ptr13 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %13, i32 0, i32 7, !dbg !7613
  %14 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr13, align 8, !dbg !7613
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %directory, i64 0, i64 0, !dbg !7614
  call void @RNA_string_get(%struct.PointerRNA* %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.230, i64 0, i64 0), i8* %arraydecay), !dbg !7615
  %15 = load i8, i8* %is_relative_path, align 1, !dbg !7616
  %tobool = icmp ne i8 %15, 0, !dbg !7616
  br i1 %tobool, label %if.then14, label %if.end17, !dbg !7618

if.then14:                                        ; preds = %if.end
  %arraydecay15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %directory, i64 0, i64 0, !dbg !7619
  %16 = load %struct.Main*, %struct.Main** %bmain, align 8, !dbg !7621
  %name = getelementptr inbounds %struct.Main, %struct.Main* %16, i32 0, i32 2, !dbg !7622
  %arraydecay16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i64 0, i64 0, !dbg !7621
  call void @BLI_path_rel(i8* %arraydecay15, i8* %arraydecay16), !dbg !7623
  br label %if.end17, !dbg !7624

if.end17:                                         ; preds = %if.then14, %if.end
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7625
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 24, !dbg !7626
  %18 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !7626
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %18, i32 0, i32 7, !dbg !7627
  %arraydecay18 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !7625
  %arraydecay19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %directory, i64 0, i64 0, !dbg !7628
  %call20 = call i8* @BLI_strncpy(i8* %arraydecay18, i8* %arraydecay19, i64 768), !dbg !7629
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7630
  %strip21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 24, !dbg !7632
  %20 = load %struct.Strip*, %struct.Strip** %strip21, align 8, !dbg !7632
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %20, i32 0, i32 6, !dbg !7633
  %21 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !7633
  %tobool22 = icmp ne %struct.StripElem* %21, null, !dbg !7630
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !7634

if.then23:                                        ; preds = %if.end17
  %22 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !7635
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7637
  %strip24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 24, !dbg !7638
  %24 = load %struct.Strip*, %struct.Strip** %strip24, align 8, !dbg !7638
  %stripdata25 = getelementptr inbounds %struct.Strip, %struct.Strip* %24, i32 0, i32 6, !dbg !7639
  %25 = load %struct.StripElem*, %struct.StripElem** %stripdata25, align 8, !dbg !7639
  %26 = bitcast %struct.StripElem* %25 to i8*, !dbg !7637
  call void %22(i8* %26), !dbg !7635
  br label %if.end26, !dbg !7640

if.end26:                                         ; preds = %if.then23, %if.end17
  %27 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !7641
  %28 = load i32, i32* %len, align 4, !dbg !7642
  %conv27 = sext i32 %28 to i64, !dbg !7642
  %mul = mul i64 %conv27, 264, !dbg !7643
  %call28 = call i8* %27(i64 %mul, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.231, i64 0, i64 0)), !dbg !7641
  %29 = bitcast i8* %call28 to %struct.StripElem*, !dbg !7641
  store %struct.StripElem* %29, %struct.StripElem** %se, align 8, !dbg !7644
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7645
  %strip29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 24, !dbg !7646
  %31 = load %struct.Strip*, %struct.Strip** %strip29, align 8, !dbg !7646
  %stripdata30 = getelementptr inbounds %struct.Strip, %struct.Strip* %31, i32 0, i32 6, !dbg !7647
  store %struct.StripElem* %29, %struct.StripElem** %stripdata30, align 8, !dbg !7648
  call void @llvm.dbg.declare(metadata %struct.CollectionPropertyIterator* %rna_macro_iter, metadata !7649, metadata !DIExpression()), !dbg !7693
  %32 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7694
  %ptr31 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %32, i32 0, i32 7, !dbg !7694
  %33 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr31, align 8, !dbg !7694
  call void @RNA_collection_begin(%struct.PointerRNA* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.229, i64 0, i64 0), %struct.CollectionPropertyIterator* %rna_macro_iter), !dbg !7694
  br label %for.cond, !dbg !7694

for.cond:                                         ; preds = %for.inc, %if.end26
  %valid = getelementptr inbounds %struct.CollectionPropertyIterator, %struct.CollectionPropertyIterator* %rna_macro_iter, i32 0, i32 7, !dbg !7696
  %34 = load i32, i32* %valid, align 8, !dbg !7696
  %tobool32 = icmp ne i32 %34, 0, !dbg !7694
  br i1 %tobool32, label %for.body, label %for.end, !dbg !7694

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.PointerRNA* %itemptr, metadata !7698, metadata !DIExpression()), !dbg !7700
  %ptr33 = getelementptr inbounds %struct.CollectionPropertyIterator, %struct.CollectionPropertyIterator* %rna_macro_iter, i32 0, i32 6, !dbg !7700
  %35 = bitcast %struct.PointerRNA* %itemptr to i8*, !dbg !7700
  %36 = bitcast %struct.PointerRNA* %ptr33 to i8*, !dbg !7700
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !7700
  call void @llvm.dbg.declare(metadata i8** %filename, metadata !7701, metadata !DIExpression()), !dbg !7703
  %call34 = call i8* @RNA_string_get_alloc(%struct.PointerRNA* %itemptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.232, i64 0, i64 0), i8* null, i32 0), !dbg !7704
  store i8* %call34, i8** %filename, align 8, !dbg !7703
  %37 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !7705
  %name35 = getelementptr inbounds %struct.StripElem, %struct.StripElem* %37, i32 0, i32 0, !dbg !7706
  %arraydecay36 = getelementptr inbounds [256 x i8], [256 x i8]* %name35, i64 0, i64 0, !dbg !7705
  %38 = load i8*, i8** %filename, align 8, !dbg !7707
  %call37 = call i8* @BLI_strncpy(i8* %arraydecay36, i8* %38, i64 256), !dbg !7708
  %39 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !7709
  %40 = load i8*, i8** %filename, align 8, !dbg !7710
  call void %39(i8* %40), !dbg !7709
  %41 = load %struct.StripElem*, %struct.StripElem** %se, align 8, !dbg !7711
  %incdec.ptr = getelementptr inbounds %struct.StripElem, %struct.StripElem* %41, i32 1, !dbg !7711
  store %struct.StripElem* %incdec.ptr, %struct.StripElem** %se, align 8, !dbg !7711
  br label %for.inc, !dbg !7712

for.inc:                                          ; preds = %for.body
  call void @RNA_property_collection_next(%struct.CollectionPropertyIterator* %rna_macro_iter), !dbg !7696
  br label %for.cond, !dbg !7696, !llvm.loop !7713

for.end:                                          ; preds = %for.cond
  call void @RNA_property_collection_end(%struct.CollectionPropertyIterator* %rna_macro_iter), !dbg !7715
  %42 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7716
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 45, !dbg !7717
  store i32 0, i32* %anim_endofs, align 4, !dbg !7718
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7719
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 44, !dbg !7720
  store i32 0, i32* %anim_startofs, align 8, !dbg !7721
  %44 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7722
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7723
  call void @BKE_sequence_reload_new_file(%struct.Scene* %44, %struct.Sequence* %45, i8 zeroext 1), !dbg !7724
  %46 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7725
  %47 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7726
  call void @BKE_sequence_calc(%struct.Scene* %46, %struct.Sequence* %47), !dbg !7727
  %48 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7728
  %49 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7729
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %49, i32 0, i32 1, !dbg !7730
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %48, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !7731
  br label %if.end42, !dbg !7732

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.PointerRNA* %seq_ptr, metadata !7733, metadata !DIExpression()), !dbg !7735
  call void @llvm.dbg.declare(metadata %struct.PropertyRNA** %prop, metadata !7736, metadata !DIExpression()), !dbg !7737
  call void @llvm.dbg.declare(metadata [1024 x i8]* %filepath, metadata !7738, metadata !DIExpression()), !dbg !7739
  %50 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7740
  %id = getelementptr inbounds %struct.Scene, %struct.Scene* %50, i32 0, i32 0, !dbg !7741
  %51 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7742
  %52 = bitcast %struct.Sequence* %51 to i8*, !dbg !7742
  call void @RNA_pointer_create(%struct.ID* %id, %struct.StructRNA* @RNA_Sequence, i8* %52, %struct.PointerRNA* %seq_ptr), !dbg !7743
  %53 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7744
  %ptr38 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %53, i32 0, i32 7, !dbg !7745
  %54 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr38, align 8, !dbg !7745
  %arraydecay39 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filepath, i64 0, i64 0, !dbg !7746
  call void @RNA_string_get(%struct.PointerRNA* %54, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.233, i64 0, i64 0), i8* %arraydecay39), !dbg !7747
  %call40 = call %struct.PropertyRNA* @RNA_struct_find_property(%struct.PointerRNA* %seq_ptr, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.233, i64 0, i64 0)), !dbg !7748
  store %struct.PropertyRNA* %call40, %struct.PropertyRNA** %prop, align 8, !dbg !7749
  %55 = load %struct.PropertyRNA*, %struct.PropertyRNA** %prop, align 8, !dbg !7750
  %arraydecay41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filepath, i64 0, i64 0, !dbg !7751
  call void @RNA_property_string_set(%struct.PointerRNA* %seq_ptr, %struct.PropertyRNA* %55, i8* %arraydecay41), !dbg !7752
  %56 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7753
  %57 = load %struct.PropertyRNA*, %struct.PropertyRNA** %prop, align 8, !dbg !7754
  call void @RNA_property_update(%struct.bContext* %56, %struct.PointerRNA* %seq_ptr, %struct.PropertyRNA* %57), !dbg !7755
  br label %if.end42

if.end42:                                         ; preds = %if.else, %for.end
  %58 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7756
  %59 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7757
  %60 = bitcast %struct.Scene* %59 to i8*, !dbg !7757
  call void @WM_event_add_notifier(%struct.bContext* %58, i32 67502080, i8* %60), !dbg !7758
  store i32 4, i32* %retval, align 4, !dbg !7759
  br label %return, !dbg !7759

return:                                           ; preds = %if.end42, %if.then12
  %61 = load i32, i32* %retval, align 4, !dbg !7760
  ret i32 %61, !dbg !7760
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sequencer_change_path_invoke(%struct.bContext* %C, %struct.wmOperator* %op, %struct.wmEvent* %UNUSED_event) #0 !dbg !7761 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %op.addr = alloca %struct.wmOperator*, align 8
  %UNUSED_event.addr = alloca %struct.wmEvent*, align 8
  %scene = alloca %struct.Scene*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %filepath = alloca [1024 x i8], align 16
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !7762, metadata !DIExpression()), !dbg !7763
  store %struct.wmOperator* %op, %struct.wmOperator** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmOperator** %op.addr, metadata !7764, metadata !DIExpression()), !dbg !7765
  store %struct.wmEvent* %UNUSED_event, %struct.wmEvent** %UNUSED_event.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.wmEvent** %UNUSED_event.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !7768, metadata !DIExpression()), !dbg !7769
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7770
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !7771
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !7769
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7772, metadata !DIExpression()), !dbg !7773
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !7774
  %call1 = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %1), !dbg !7775
  store %struct.Sequence* %call1, %struct.Sequence** %seq, align 8, !dbg !7773
  call void @llvm.dbg.declare(metadata [1024 x i8]* %filepath, metadata !7776, metadata !DIExpression()), !dbg !7777
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %filepath, i64 0, i64 0, !dbg !7778
  %2 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7779
  %strip = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 24, !dbg !7780
  %3 = load %struct.Strip*, %struct.Strip** %strip, align 8, !dbg !7780
  %dir = getelementptr inbounds %struct.Strip, %struct.Strip* %3, i32 0, i32 7, !dbg !7781
  %arraydecay2 = getelementptr inbounds [768 x i8], [768 x i8]* %dir, i64 0, i64 0, !dbg !7779
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7782
  %strip3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 24, !dbg !7783
  %5 = load %struct.Strip*, %struct.Strip** %strip3, align 8, !dbg !7783
  %stripdata = getelementptr inbounds %struct.Strip, %struct.Strip* %5, i32 0, i32 6, !dbg !7784
  %6 = load %struct.StripElem*, %struct.StripElem** %stripdata, align 8, !dbg !7784
  %name = getelementptr inbounds %struct.StripElem, %struct.StripElem* %6, i32 0, i32 0, !dbg !7785
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i64 0, i64 0, !dbg !7782
  call void @BLI_join_dirfile(i8* %arraydecay, i64 1024, i8* %arraydecay2, i8* %arraydecay4), !dbg !7786
  %7 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7787
  %ptr = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %7, i32 0, i32 7, !dbg !7788
  %8 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr, align 8, !dbg !7788
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7789
  %strip5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 24, !dbg !7790
  %10 = load %struct.Strip*, %struct.Strip** %strip5, align 8, !dbg !7790
  %dir6 = getelementptr inbounds %struct.Strip, %struct.Strip* %10, i32 0, i32 7, !dbg !7791
  %arraydecay7 = getelementptr inbounds [768 x i8], [768 x i8]* %dir6, i64 0, i64 0, !dbg !7789
  call void @RNA_string_set(%struct.PointerRNA* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.230, i64 0, i64 0), i8* %arraydecay7), !dbg !7792
  %11 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7793
  %ptr8 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %11, i32 0, i32 7, !dbg !7794
  %12 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr8, align 8, !dbg !7794
  %arraydecay9 = getelementptr inbounds [1024 x i8], [1024 x i8]* %filepath, i64 0, i64 0, !dbg !7795
  call void @RNA_string_set(%struct.PointerRNA* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.233, i64 0, i64 0), i8* %arraydecay9), !dbg !7796
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7797
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 6, !dbg !7799
  %14 = load i32, i32* %type, align 4, !dbg !7799
  %cmp = icmp eq i32 %14, 0, !dbg !7800
  br i1 %cmp, label %if.then, label %if.else, !dbg !7801

if.then:                                          ; preds = %entry
  %15 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7802
  %ptr10 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %15, i32 0, i32 7, !dbg !7804
  %16 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr10, align 8, !dbg !7804
  call void @RNA_boolean_set(%struct.PointerRNA* %16, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.234, i64 0, i64 0), i32 0), !dbg !7805
  br label %if.end, !dbg !7806

if.else:                                          ; preds = %entry
  %17 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7807
  %ptr11 = getelementptr inbounds %struct.wmOperator, %struct.wmOperator* %17, i32 0, i32 7, !dbg !7809
  %18 = load %struct.PointerRNA*, %struct.PointerRNA** %ptr11, align 8, !dbg !7809
  call void @RNA_boolean_set(%struct.PointerRNA* %18, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.235, i64 0, i64 0), i32 0), !dbg !7810
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !7811
  %20 = load %struct.wmOperator*, %struct.wmOperator** %op.addr, align 8, !dbg !7812
  call void @WM_event_add_fileselect(%struct.bContext* %19, %struct.wmOperator* %20), !dbg !7813
  ret i32 1, !dbg !7814
}

declare dso_local void @WM_operator_properties_filesel(%struct.wmOperatorType*, i32, i16 signext, i16 signext, i16 signext, i16 signext) #2

declare dso_local i32 @RNA_boolean_get(%struct.PointerRNA*, i8*) #2

declare dso_local i32 @BKE_sequencer_evaluate_frame(%struct.Scene*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sequence_offset_after_frame(%struct.Scene* %scene, i32 %delta, i32 %cfra) #0 !dbg !7815 {
entry:
  %retval = alloca i8, align 1
  %scene.addr = alloca %struct.Scene*, align 8
  %delta.addr = alloca i32, align 4
  %cfra.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %done = alloca i8, align 1
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !7818, metadata !DIExpression()), !dbg !7819
  store i32 %delta, i32* %delta.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delta.addr, metadata !7820, metadata !DIExpression()), !dbg !7821
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !7822, metadata !DIExpression()), !dbg !7823
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7824, metadata !DIExpression()), !dbg !7825
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !7826, metadata !DIExpression()), !dbg !7827
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7828
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !7829
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !7827
  call void @llvm.dbg.declare(metadata i8* %done, metadata !7830, metadata !DIExpression()), !dbg !7831
  store i8 0, i8* %done, align 1, !dbg !7831
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7832
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !7834
  br i1 %cmp, label %if.then, label %if.end, !dbg !7835

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7836
  br label %return, !dbg !7836

if.end:                                           ; preds = %entry
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !7837
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !7839
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !7839
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !7840
  %4 = load i8*, i8** %first, align 8, !dbg !7840
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !7837
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !7841
  br label %for.cond, !dbg !7842

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7843
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !7845
  br i1 %tobool, label %for.body, label %for.end, !dbg !7845

for.body:                                         ; preds = %for.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7846
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 15, !dbg !7849
  %8 = load i32, i32* %startdisp, align 8, !dbg !7849
  %9 = load i32, i32* %cfra.addr, align 4, !dbg !7850
  %cmp1 = icmp sge i32 %8, %9, !dbg !7851
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !7852

if.then2:                                         ; preds = %for.body
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7853
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7855
  %12 = load i32, i32* %delta.addr, align 4, !dbg !7856
  call void @BKE_sequence_translate(%struct.Scene* %10, %struct.Sequence* %11, i32 %12), !dbg !7857
  %13 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !7858
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7859
  call void @BKE_sequence_calc(%struct.Scene* %13, %struct.Sequence* %14), !dbg !7860
  store i8 1, i8* %done, align 1, !dbg !7861
  br label %if.end3, !dbg !7862

if.end3:                                          ; preds = %if.then2, %for.body
  br label %for.inc, !dbg !7863

for.inc:                                          ; preds = %if.end3
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7864
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 0, !dbg !7865
  %16 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7865
  store %struct.Sequence* %16, %struct.Sequence** %seq, align 8, !dbg !7866
  br label %for.cond, !dbg !7867, !llvm.loop !7868

for.end:                                          ; preds = %for.cond
  %17 = load i8, i8* %done, align 1, !dbg !7870
  store i8 %17, i8* %retval, align 1, !dbg !7871
  br label %return, !dbg !7871

return:                                           ; preds = %for.end, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !7872
  ret i8 %18, !dbg !7872
}

declare dso_local void @WM_event_add_notifier(%struct.bContext*, i32, i8*) #2

declare dso_local void @BKE_sequence_translate(%struct.Scene*, %struct.Sequence*, i32) #2

declare dso_local void @BKE_sequence_calc(%struct.Scene*, %struct.Sequence*) #2

declare dso_local i32 @RNA_int_get(%struct.PointerRNA*, i8*) #2

declare dso_local void @RNA_int_set(%struct.PointerRNA*, i8*, i32) #2

declare dso_local void @BKE_sequence_tx_set_final_left(%struct.Sequence*, i32) #2

declare dso_local void @BKE_sequence_tx_set_final_right(%struct.Sequence*, i32) #2

declare dso_local void @BKE_sequence_tx_handle_xlimits(%struct.Sequence*, i32, i32) #2

declare dso_local zeroext i8 @BKE_sequence_test_overlap(%struct.ListBase*, %struct.Sequence*) #2

declare dso_local zeroext i8 @BKE_sequence_base_shuffle(%struct.ListBase*, %struct.Sequence*, %struct.Scene*) #2

declare dso_local void @BKE_sequencer_sort(%struct.Scene*) #2

declare dso_local %struct.View2D* @UI_view2d_fromcontext(%struct.bContext*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @slip_count_sequences_rec(%struct.ListBase* %seqbasep, i8 zeroext %first_level) #0 !dbg !7873 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %first_level.addr = alloca i8, align 1
  %seq = alloca %struct.Sequence*, align 8
  %trimmed_sequences = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !7876, metadata !DIExpression()), !dbg !7877
  store i8 %first_level, i8* %first_level.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %first_level.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7880, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.declare(metadata i32* %trimmed_sequences, metadata !7882, metadata !DIExpression()), !dbg !7883
  store i32 0, i32* %trimmed_sequences, align 4, !dbg !7883
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !7884
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !7886
  %1 = load i8*, i8** %first, align 8, !dbg !7886
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !7884
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !7887
  br label %for.cond, !dbg !7888

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7889
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !7891
  br i1 %tobool, label %for.body, label %for.end, !dbg !7891

for.body:                                         ; preds = %for.cond
  %4 = load i8, i8* %first_level.addr, align 1, !dbg !7892
  %tobool1 = icmp ne i8 %4, 0, !dbg !7892
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !7895

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7896
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !7897
  %6 = load i32, i32* %type, align 4, !dbg !7897
  %and = and i32 %6, 8, !dbg !7898
  %tobool2 = icmp ne i32 %and, 0, !dbg !7898
  br i1 %tobool2, label %if.end7, label %land.lhs.true, !dbg !7899

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7900
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !7901
  %8 = load i32, i32* %flag, align 8, !dbg !7901
  %and3 = and i32 %8, 1, !dbg !7902
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7902
  br i1 %tobool4, label %if.then, label %if.end7, !dbg !7903

if.then:                                          ; preds = %land.lhs.true, %for.body
  %9 = load i32, i32* %trimmed_sequences, align 4, !dbg !7904
  %inc = add nsw i32 %9, 1, !dbg !7904
  store i32 %inc, i32* %trimmed_sequences, align 4, !dbg !7904
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7906
  %type5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 6, !dbg !7908
  %11 = load i32, i32* %type5, align 4, !dbg !7908
  %cmp = icmp eq i32 %11, 1, !dbg !7909
  br i1 %cmp, label %if.then6, label %if.end, !dbg !7910

if.then6:                                         ; preds = %if.then
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7911
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 36, !dbg !7913
  %call = call i32 @slip_count_sequences_rec(%struct.ListBase* %seqbase, i8 zeroext 0), !dbg !7914
  %13 = load i32, i32* %trimmed_sequences, align 4, !dbg !7915
  %add = add nsw i32 %13, %call, !dbg !7915
  store i32 %add, i32* %trimmed_sequences, align 4, !dbg !7915
  br label %if.end, !dbg !7916

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end7, !dbg !7917

if.end7:                                          ; preds = %if.end, %land.lhs.true, %lor.lhs.false
  br label %for.inc, !dbg !7918

for.inc:                                          ; preds = %if.end7
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7919
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 0, !dbg !7920
  %15 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !7920
  store %struct.Sequence* %15, %struct.Sequence** %seq, align 8, !dbg !7921
  br label %for.cond, !dbg !7922, !llvm.loop !7923

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %trimmed_sequences, align 4, !dbg !7925
  ret i32 %16, !dbg !7926
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @slip_add_sequences_rec(%struct.ListBase* %seqbasep, %struct.Sequence** %seq_array, i8* %trim, i32 %offset, i8 zeroext %first_level) #0 !dbg !7927 {
entry:
  %seqbasep.addr = alloca %struct.ListBase*, align 8
  %seq_array.addr = alloca %struct.Sequence**, align 8
  %trim.addr = alloca i8*, align 8
  %offset.addr = alloca i32, align 4
  %first_level.addr = alloca i8, align 1
  %seq = alloca %struct.Sequence*, align 8
  %num_items = alloca i32, align 4
  store %struct.ListBase* %seqbasep, %struct.ListBase** %seqbasep.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %seqbasep.addr, metadata !7930, metadata !DIExpression()), !dbg !7931
  store %struct.Sequence** %seq_array, %struct.Sequence*** %seq_array.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence*** %seq_array.addr, metadata !7932, metadata !DIExpression()), !dbg !7933
  store i8* %trim, i8** %trim.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %trim.addr, metadata !7934, metadata !DIExpression()), !dbg !7935
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !7936, metadata !DIExpression()), !dbg !7937
  store i8 %first_level, i8* %first_level.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %first_level.addr, metadata !7938, metadata !DIExpression()), !dbg !7939
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !7940, metadata !DIExpression()), !dbg !7941
  call void @llvm.dbg.declare(metadata i32* %num_items, metadata !7942, metadata !DIExpression()), !dbg !7943
  store i32 0, i32* %num_items, align 4, !dbg !7943
  %0 = load %struct.ListBase*, %struct.ListBase** %seqbasep.addr, align 8, !dbg !7944
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !7946
  %1 = load i8*, i8** %first, align 8, !dbg !7946
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !7944
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !7947
  br label %for.cond, !dbg !7948

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7949
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !7951
  br i1 %tobool, label %for.body, label %for.end, !dbg !7951

for.body:                                         ; preds = %for.cond
  %4 = load i8, i8* %first_level.addr, align 1, !dbg !7952
  %tobool1 = icmp ne i8 %4, 0, !dbg !7952
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !7955

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7956
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 6, !dbg !7957
  %6 = load i32, i32* %type, align 4, !dbg !7957
  %and = and i32 %6, 8, !dbg !7958
  %tobool2 = icmp ne i32 %and, 0, !dbg !7958
  br i1 %tobool2, label %if.end20, label %land.lhs.true, !dbg !7959

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7960
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !7961
  %8 = load i32, i32* %flag, align 8, !dbg !7961
  %and3 = and i32 %8, 1, !dbg !7962
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7962
  br i1 %tobool4, label %if.then, label %if.end20, !dbg !7963

if.then:                                          ; preds = %land.lhs.true, %for.body
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7964
  %10 = load %struct.Sequence**, %struct.Sequence*** %seq_array.addr, align 8, !dbg !7966
  %11 = load i32, i32* %offset.addr, align 4, !dbg !7967
  %12 = load i32, i32* %num_items, align 4, !dbg !7968
  %add = add nsw i32 %11, %12, !dbg !7969
  %idxprom = sext i32 %add to i64, !dbg !7966
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %10, i64 %idxprom, !dbg !7966
  store %struct.Sequence* %9, %struct.Sequence** %arrayidx, align 8, !dbg !7970
  %13 = load i8, i8* %first_level.addr, align 1, !dbg !7971
  %14 = load i8*, i8** %trim.addr, align 8, !dbg !7972
  %15 = load i32, i32* %offset.addr, align 4, !dbg !7973
  %16 = load i32, i32* %num_items, align 4, !dbg !7974
  %add5 = add nsw i32 %15, %16, !dbg !7975
  %idxprom6 = sext i32 %add5 to i64, !dbg !7972
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 %idxprom6, !dbg !7972
  store i8 %13, i8* %arrayidx7, align 1, !dbg !7976
  %17 = load i32, i32* %num_items, align 4, !dbg !7977
  %inc = add nsw i32 %17, 1, !dbg !7977
  store i32 %inc, i32* %num_items, align 4, !dbg !7977
  %18 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7978
  %type8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 6, !dbg !7980
  %19 = load i32, i32* %type8, align 4, !dbg !7980
  %cmp = icmp eq i32 %19, 1, !dbg !7981
  br i1 %cmp, label %if.then9, label %if.else, !dbg !7982

if.then9:                                         ; preds = %if.then
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7983
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 36, !dbg !7985
  %21 = load %struct.Sequence**, %struct.Sequence*** %seq_array.addr, align 8, !dbg !7986
  %22 = load i8*, i8** %trim.addr, align 8, !dbg !7987
  %23 = load i32, i32* %num_items, align 4, !dbg !7988
  %24 = load i32, i32* %offset.addr, align 4, !dbg !7989
  %add10 = add nsw i32 %23, %24, !dbg !7990
  %call = call i32 @slip_add_sequences_rec(%struct.ListBase* %seqbase, %struct.Sequence** %21, i8* %22, i32 %add10, i8 zeroext 0), !dbg !7991
  %25 = load i32, i32* %num_items, align 4, !dbg !7992
  %add11 = add nsw i32 %25, %call, !dbg !7992
  store i32 %add11, i32* %num_items, align 4, !dbg !7992
  br label %if.end19, !dbg !7993

if.else:                                          ; preds = %if.then
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !7994
  %type12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 6, !dbg !7996
  %27 = load i32, i32* %type12, align 4, !dbg !7996
  %and13 = and i32 %27, 8, !dbg !7997
  %tobool14 = icmp ne i32 %and13, 0, !dbg !7997
  br i1 %tobool14, label %if.then15, label %if.end, !dbg !7998

if.then15:                                        ; preds = %if.else
  %28 = load i8*, i8** %trim.addr, align 8, !dbg !7999
  %29 = load i32, i32* %offset.addr, align 4, !dbg !8001
  %30 = load i32, i32* %num_items, align 4, !dbg !8002
  %add16 = add nsw i32 %29, %30, !dbg !8003
  %idxprom17 = sext i32 %add16 to i64, !dbg !7999
  %arrayidx18 = getelementptr inbounds i8, i8* %28, i64 %idxprom17, !dbg !7999
  store i8 0, i8* %arrayidx18, align 1, !dbg !8004
  br label %if.end, !dbg !8005

if.end:                                           ; preds = %if.then15, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then9
  br label %if.end20, !dbg !8006

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %lor.lhs.false
  br label %for.inc, !dbg !8007

for.inc:                                          ; preds = %if.end20
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8008
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 0, !dbg !8009
  %32 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8009
  store %struct.Sequence* %32, %struct.Sequence** %seq, align 8, !dbg !8010
  br label %for.cond, !dbg !8011, !llvm.loop !8012

for.end:                                          ; preds = %for.cond
  %33 = load i32, i32* %num_items, align 4, !dbg !8014
  ret i32 %33, !dbg !8015
}

; Function Attrs: noinline nounwind uwtable
define internal void @transseq_backup(%struct.TransSeq* %ts, %struct.Sequence* %seq) #0 !dbg !8016 {
entry:
  %ts.addr = alloca %struct.TransSeq*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.TransSeq* %ts, %struct.TransSeq** %ts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.TransSeq** %ts.addr, metadata !8019, metadata !DIExpression()), !dbg !8020
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8021, metadata !DIExpression()), !dbg !8022
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8023
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !8024
  %1 = load i32, i32* %start, align 4, !dbg !8024
  %2 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8025
  %start1 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %2, i32 0, i32 0, !dbg !8026
  store i32 %1, i32* %start1, align 4, !dbg !8027
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8028
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 13, !dbg !8029
  %4 = load i32, i32* %machine, align 8, !dbg !8029
  %5 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8030
  %machine2 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %5, i32 0, i32 1, !dbg !8031
  store i32 %4, i32* %machine2, align 4, !dbg !8032
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8033
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 11, !dbg !8034
  %7 = load i32, i32* %startstill, align 8, !dbg !8034
  %8 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8035
  %startstill3 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %8, i32 0, i32 2, !dbg !8036
  store i32 %7, i32* %startstill3, align 4, !dbg !8037
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8038
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 12, !dbg !8039
  %10 = load i32, i32* %endstill, align 4, !dbg !8039
  %11 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8040
  %endstill4 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %11, i32 0, i32 3, !dbg !8041
  store i32 %10, i32* %endstill4, align 4, !dbg !8042
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8043
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 15, !dbg !8044
  %13 = load i32, i32* %startdisp, align 8, !dbg !8044
  %14 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8045
  %startdisp5 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %14, i32 0, i32 4, !dbg !8046
  store i32 %13, i32* %startdisp5, align 4, !dbg !8047
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8048
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 16, !dbg !8049
  %16 = load i32, i32* %enddisp, align 4, !dbg !8049
  %17 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8050
  %enddisp6 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %17, i32 0, i32 5, !dbg !8051
  store i32 %16, i32* %enddisp6, align 4, !dbg !8052
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8053
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 9, !dbg !8054
  %19 = load i32, i32* %startofs, align 8, !dbg !8054
  %20 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8055
  %startofs7 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %20, i32 0, i32 6, !dbg !8056
  store i32 %19, i32* %startofs7, align 4, !dbg !8057
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8058
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 10, !dbg !8059
  %22 = load i32, i32* %endofs, align 4, !dbg !8059
  %23 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8060
  %endofs8 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %23, i32 0, i32 7, !dbg !8061
  store i32 %22, i32* %endofs8, align 4, !dbg !8062
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8063
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 44, !dbg !8064
  %25 = load i32, i32* %anim_startofs, align 8, !dbg !8064
  %26 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8065
  %anim_startofs9 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %26, i32 0, i32 8, !dbg !8066
  store i32 %25, i32* %anim_startofs9, align 4, !dbg !8067
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8068
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 45, !dbg !8069
  %28 = load i32, i32* %anim_endofs, align 4, !dbg !8069
  %29 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8070
  %anim_endofs10 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %29, i32 0, i32 9, !dbg !8071
  store i32 %28, i32* %anim_endofs10, align 4, !dbg !8072
  %30 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8073
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 7, !dbg !8074
  %31 = load i32, i32* %len, align 8, !dbg !8074
  %32 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8075
  %len11 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %32, i32 0, i32 10, !dbg !8076
  store i32 %31, i32* %len11, align 4, !dbg !8077
  ret void, !dbg !8078
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v2_v2_int(i32* %r, i32* %a) #0 !dbg !8079 {
entry:
  %r.addr = alloca i32*, align 8
  %a.addr = alloca i32*, align 8
  store i32* %r, i32** %r.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %r.addr, metadata !8083, metadata !DIExpression()), !dbg !8084
  store i32* %a, i32** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %a.addr, metadata !8085, metadata !DIExpression()), !dbg !8086
  %0 = load i32*, i32** %a.addr, align 8, !dbg !8087
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0, !dbg !8087
  %1 = load i32, i32* %arrayidx, align 4, !dbg !8087
  %2 = load i32*, i32** %r.addr, align 8, !dbg !8088
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i64 0, !dbg !8088
  store i32 %1, i32* %arrayidx1, align 4, !dbg !8089
  %3 = load i32*, i32** %a.addr, align 8, !dbg !8090
  %arrayidx2 = getelementptr inbounds i32, i32* %3, i64 1, !dbg !8090
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !8090
  %5 = load i32*, i32** %r.addr, align 8, !dbg !8091
  %arrayidx3 = getelementptr inbounds i32, i32* %5, i64 1, !dbg !8091
  store i32 %4, i32* %arrayidx3, align 4, !dbg !8092
  ret void, !dbg !8093
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_v2_v2(float* %r, float* %a) #0 !dbg !8094 {
entry:
  %r.addr = alloca float*, align 8
  %a.addr = alloca float*, align 8
  store float* %r, float** %r.addr, align 8
  call void @llvm.dbg.declare(metadata float** %r.addr, metadata !8099, metadata !DIExpression()), !dbg !8100
  store float* %a, float** %a.addr, align 8
  call void @llvm.dbg.declare(metadata float** %a.addr, metadata !8101, metadata !DIExpression()), !dbg !8102
  %0 = load float*, float** %a.addr, align 8, !dbg !8103
  %arrayidx = getelementptr inbounds float, float* %0, i64 0, !dbg !8103
  %1 = load float, float* %arrayidx, align 4, !dbg !8103
  %2 = load float*, float** %r.addr, align 8, !dbg !8104
  %arrayidx1 = getelementptr inbounds float, float* %2, i64 0, !dbg !8104
  store float %1, float* %arrayidx1, align 4, !dbg !8105
  %3 = load float*, float** %a.addr, align 8, !dbg !8106
  %arrayidx2 = getelementptr inbounds float, float* %3, i64 1, !dbg !8106
  %4 = load float, float* %arrayidx2, align 4, !dbg !8106
  %5 = load float*, float** %r.addr, align 8, !dbg !8107
  %arrayidx3 = getelementptr inbounds float, float* %5, i64 1, !dbg !8107
  store float %4, float* %arrayidx3, align 4, !dbg !8108
  ret void, !dbg !8109
}

declare dso_local %struct.wmEventHandler* @WM_event_add_modal_handler(%struct.bContext*, %struct.wmOperator*) #2

declare dso_local %struct.ScrArea* @CTX_wm_area(%struct.bContext*) #2

declare dso_local i64 @BLI_snprintf(i8*, i64, i8*, ...) #2

declare dso_local void @ED_area_headerprint(%struct.ScrArea*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sequencer_slip_recursively(%struct.Scene* %scene, %struct.SlipData* %data, i32 %offset) #0 !dbg !8110 {
entry:
  %retval = alloca i8, align 1
  %scene.addr = alloca %struct.Scene*, align 8
  %data.addr = alloca %struct.SlipData*, align 8
  %offset.addr = alloca i32, align 4
  %ed = alloca %struct.Editing*, align 8
  %i = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %endframe = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8113, metadata !DIExpression()), !dbg !8114
  store %struct.SlipData* %data, %struct.SlipData** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.SlipData** %data.addr, metadata !8115, metadata !DIExpression()), !dbg !8116
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !8117, metadata !DIExpression()), !dbg !8118
  %0 = load i32, i32* %offset.addr, align 4, !dbg !8119
  %cmp = icmp ne i32 %0, 0, !dbg !8121
  br i1 %cmp, label %if.then, label %if.end57, !dbg !8122

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !8123, metadata !DIExpression()), !dbg !8125
  %1 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8126
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !8127
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !8125
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8128, metadata !DIExpression()), !dbg !8129
  %2 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8130
  %num_seq = getelementptr inbounds %struct.SlipData, %struct.SlipData* %2, i32 0, i32 5, !dbg !8132
  %3 = load i32, i32* %num_seq, align 8, !dbg !8132
  %sub = sub nsw i32 %3, 1, !dbg !8133
  store i32 %sub, i32* %i, align 4, !dbg !8134
  br label %for.cond, !dbg !8135

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i32, i32* %i, align 4, !dbg !8136
  %cmp1 = icmp sge i32 %4, 0, !dbg !8138
  br i1 %cmp1, label %for.body, label %for.end, !dbg !8139

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8140, metadata !DIExpression()), !dbg !8142
  %5 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8143
  %seq_array = getelementptr inbounds %struct.SlipData, %struct.SlipData* %5, i32 0, i32 3, !dbg !8144
  %6 = load %struct.Sequence**, %struct.Sequence*** %seq_array, align 8, !dbg !8144
  %7 = load i32, i32* %i, align 4, !dbg !8145
  %idxprom = sext i32 %7 to i64, !dbg !8143
  %arrayidx = getelementptr inbounds %struct.Sequence*, %struct.Sequence** %6, i64 %idxprom, !dbg !8143
  %8 = load %struct.Sequence*, %struct.Sequence** %arrayidx, align 8, !dbg !8143
  store %struct.Sequence* %8, %struct.Sequence** %seq, align 8, !dbg !8142
  call void @llvm.dbg.declare(metadata i32* %endframe, metadata !8146, metadata !DIExpression()), !dbg !8147
  %9 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8148
  %ts = getelementptr inbounds %struct.SlipData, %struct.SlipData* %9, i32 0, i32 2, !dbg !8149
  %10 = load %struct.TransSeq*, %struct.TransSeq** %ts, align 8, !dbg !8149
  %11 = load i32, i32* %i, align 4, !dbg !8150
  %idxprom2 = sext i32 %11 to i64, !dbg !8148
  %arrayidx3 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %10, i64 %idxprom2, !dbg !8148
  %start = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %arrayidx3, i32 0, i32 0, !dbg !8151
  %12 = load i32, i32* %start, align 4, !dbg !8151
  %13 = load i32, i32* %offset.addr, align 4, !dbg !8152
  %add = add nsw i32 %12, %13, !dbg !8153
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8154
  %start4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 8, !dbg !8155
  store i32 %add, i32* %start4, align 4, !dbg !8156
  %15 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8157
  %trim = getelementptr inbounds %struct.SlipData, %struct.SlipData* %15, i32 0, i32 4, !dbg !8159
  %16 = load i8*, i8** %trim, align 8, !dbg !8159
  %17 = load i32, i32* %i, align 4, !dbg !8160
  %idxprom5 = sext i32 %17 to i64, !dbg !8157
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i64 %idxprom5, !dbg !8157
  %18 = load i8, i8* %arrayidx6, align 1, !dbg !8157
  %tobool = icmp ne i8 %18, 0, !dbg !8157
  br i1 %tobool, label %if.then7, label %if.else40, !dbg !8161

if.then7:                                         ; preds = %for.body
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8162
  %start8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 8, !dbg !8164
  %20 = load i32, i32* %start8, align 4, !dbg !8164
  %21 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8165
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 7, !dbg !8166
  %22 = load i32, i32* %len, align 8, !dbg !8166
  %add9 = add nsw i32 %20, %22, !dbg !8167
  store i32 %add9, i32* %endframe, align 4, !dbg !8168
  %23 = load i32, i32* %endframe, align 4, !dbg !8169
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8171
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 16, !dbg !8172
  %25 = load i32, i32* %enddisp, align 4, !dbg !8172
  %cmp10 = icmp sgt i32 %23, %25, !dbg !8173
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !8174

if.then11:                                        ; preds = %if.then7
  %26 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8175
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 12, !dbg !8177
  store i32 0, i32* %endstill, align 4, !dbg !8178
  %27 = load i32, i32* %endframe, align 4, !dbg !8179
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8180
  %enddisp12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 16, !dbg !8181
  %29 = load i32, i32* %enddisp12, align 4, !dbg !8181
  %sub13 = sub nsw i32 %27, %29, !dbg !8182
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8183
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 10, !dbg !8184
  store i32 %sub13, i32* %endofs, align 4, !dbg !8185
  br label %if.end21, !dbg !8186

if.else:                                          ; preds = %if.then7
  %31 = load i32, i32* %endframe, align 4, !dbg !8187
  %32 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8189
  %enddisp14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 16, !dbg !8190
  %33 = load i32, i32* %enddisp14, align 4, !dbg !8190
  %cmp15 = icmp sle i32 %31, %33, !dbg !8191
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !8192

if.then16:                                        ; preds = %if.else
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8193
  %enddisp17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 16, !dbg !8195
  %35 = load i32, i32* %enddisp17, align 4, !dbg !8195
  %36 = load i32, i32* %endframe, align 4, !dbg !8196
  %sub18 = sub nsw i32 %35, %36, !dbg !8197
  %37 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8198
  %endstill19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %37, i32 0, i32 12, !dbg !8199
  store i32 %sub18, i32* %endstill19, align 4, !dbg !8200
  %38 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8201
  %endofs20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 10, !dbg !8202
  store i32 0, i32* %endofs20, align 4, !dbg !8203
  br label %if.end, !dbg !8204

if.end:                                           ; preds = %if.then16, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end, %if.then11
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8205
  %start22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 8, !dbg !8207
  %40 = load i32, i32* %start22, align 4, !dbg !8207
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8208
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 15, !dbg !8209
  %42 = load i32, i32* %startdisp, align 8, !dbg !8209
  %cmp23 = icmp sgt i32 %40, %42, !dbg !8210
  br i1 %cmp23, label %if.then24, label %if.else28, !dbg !8211

if.then24:                                        ; preds = %if.end21
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8212
  %start25 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 8, !dbg !8214
  %44 = load i32, i32* %start25, align 4, !dbg !8214
  %45 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8215
  %startdisp26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 15, !dbg !8216
  %46 = load i32, i32* %startdisp26, align 8, !dbg !8216
  %sub27 = sub nsw i32 %44, %46, !dbg !8217
  %47 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8218
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 11, !dbg !8219
  store i32 %sub27, i32* %startstill, align 8, !dbg !8220
  %48 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8221
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 9, !dbg !8222
  store i32 0, i32* %startofs, align 8, !dbg !8223
  br label %if.end39, !dbg !8224

if.else28:                                        ; preds = %if.end21
  %49 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8225
  %start29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 8, !dbg !8227
  %50 = load i32, i32* %start29, align 4, !dbg !8227
  %51 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8228
  %startdisp30 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 15, !dbg !8229
  %52 = load i32, i32* %startdisp30, align 8, !dbg !8229
  %cmp31 = icmp sle i32 %50, %52, !dbg !8230
  br i1 %cmp31, label %if.then32, label %if.end38, !dbg !8231

if.then32:                                        ; preds = %if.else28
  %53 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8232
  %startstill33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 11, !dbg !8234
  store i32 0, i32* %startstill33, align 8, !dbg !8235
  %54 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8236
  %startdisp34 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 15, !dbg !8237
  %55 = load i32, i32* %startdisp34, align 8, !dbg !8237
  %56 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8238
  %start35 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 8, !dbg !8239
  %57 = load i32, i32* %start35, align 4, !dbg !8239
  %sub36 = sub nsw i32 %55, %57, !dbg !8240
  %58 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8241
  %startofs37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %58, i32 0, i32 9, !dbg !8242
  store i32 %sub36, i32* %startofs37, align 8, !dbg !8243
  br label %if.end38, !dbg !8244

if.end38:                                         ; preds = %if.then32, %if.else28
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then24
  br label %if.end53, !dbg !8245

if.else40:                                        ; preds = %for.body
  %59 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8246
  %ts41 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %59, i32 0, i32 2, !dbg !8248
  %60 = load %struct.TransSeq*, %struct.TransSeq** %ts41, align 8, !dbg !8248
  %61 = load i32, i32* %i, align 4, !dbg !8249
  %idxprom42 = sext i32 %61 to i64, !dbg !8246
  %arrayidx43 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %60, i64 %idxprom42, !dbg !8246
  %startdisp44 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %arrayidx43, i32 0, i32 4, !dbg !8250
  %62 = load i32, i32* %startdisp44, align 4, !dbg !8250
  %63 = load i32, i32* %offset.addr, align 4, !dbg !8251
  %add45 = add nsw i32 %62, %63, !dbg !8252
  %64 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8253
  %startdisp46 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 15, !dbg !8254
  store i32 %add45, i32* %startdisp46, align 8, !dbg !8255
  %65 = load %struct.SlipData*, %struct.SlipData** %data.addr, align 8, !dbg !8256
  %ts47 = getelementptr inbounds %struct.SlipData, %struct.SlipData* %65, i32 0, i32 2, !dbg !8257
  %66 = load %struct.TransSeq*, %struct.TransSeq** %ts47, align 8, !dbg !8257
  %67 = load i32, i32* %i, align 4, !dbg !8258
  %idxprom48 = sext i32 %67 to i64, !dbg !8256
  %arrayidx49 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %66, i64 %idxprom48, !dbg !8256
  %enddisp50 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %arrayidx49, i32 0, i32 5, !dbg !8259
  %68 = load i32, i32* %enddisp50, align 4, !dbg !8259
  %69 = load i32, i32* %offset.addr, align 4, !dbg !8260
  %add51 = add nsw i32 %68, %69, !dbg !8261
  %70 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8262
  %enddisp52 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %70, i32 0, i32 16, !dbg !8263
  store i32 %add51, i32* %enddisp52, align 4, !dbg !8264
  br label %if.end53

if.end53:                                         ; preds = %if.else40, %if.end39
  %71 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8265
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %71, i32 0, i32 6, !dbg !8267
  %72 = load i32, i32* %type, align 4, !dbg !8267
  %and = and i32 %72, 8, !dbg !8268
  %tobool54 = icmp ne i32 %and, 0, !dbg !8268
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !8269

if.then55:                                        ; preds = %if.end53
  %73 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8270
  %74 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8271
  call void @BKE_sequence_calc(%struct.Scene* %73, %struct.Sequence* %74), !dbg !8272
  br label %if.end56, !dbg !8272

if.end56:                                         ; preds = %if.then55, %if.end53
  br label %for.inc, !dbg !8273

for.inc:                                          ; preds = %if.end56
  %75 = load i32, i32* %i, align 4, !dbg !8274
  %dec = add nsw i32 %75, -1, !dbg !8274
  store i32 %dec, i32* %i, align 4, !dbg !8274
  br label %for.cond, !dbg !8275, !llvm.loop !8276

for.end:                                          ; preds = %for.cond
  %76 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8278
  %77 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !8279
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %77, i32 0, i32 1, !dbg !8280
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %76, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !8281
  store i8 1, i8* %retval, align 1, !dbg !8282
  br label %return, !dbg !8282

if.end57:                                         ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8283
  br label %return, !dbg !8283

return:                                           ; preds = %if.end57, %for.end
  %78 = load i8, i8* %retval, align 1, !dbg !8284
  ret i8 %78, !dbg !8284
}

; Function Attrs: noinline nounwind uwtable
define internal void @transseq_restore(%struct.TransSeq* %ts, %struct.Sequence* %seq) #0 !dbg !8285 {
entry:
  %ts.addr = alloca %struct.TransSeq*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.TransSeq* %ts, %struct.TransSeq** %ts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.TransSeq** %ts.addr, metadata !8286, metadata !DIExpression()), !dbg !8287
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8288, metadata !DIExpression()), !dbg !8289
  %0 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8290
  %start = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %0, i32 0, i32 0, !dbg !8291
  %1 = load i32, i32* %start, align 4, !dbg !8291
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8292
  %start1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 8, !dbg !8293
  store i32 %1, i32* %start1, align 4, !dbg !8294
  %3 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8295
  %machine = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %3, i32 0, i32 1, !dbg !8296
  %4 = load i32, i32* %machine, align 4, !dbg !8296
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8297
  %machine2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 13, !dbg !8298
  store i32 %4, i32* %machine2, align 8, !dbg !8299
  %6 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8300
  %startstill = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %6, i32 0, i32 2, !dbg !8301
  %7 = load i32, i32* %startstill, align 4, !dbg !8301
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8302
  %startstill3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 11, !dbg !8303
  store i32 %7, i32* %startstill3, align 8, !dbg !8304
  %9 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8305
  %endstill = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %9, i32 0, i32 3, !dbg !8306
  %10 = load i32, i32* %endstill, align 4, !dbg !8306
  %11 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8307
  %endstill4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 12, !dbg !8308
  store i32 %10, i32* %endstill4, align 4, !dbg !8309
  %12 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8310
  %startdisp = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %12, i32 0, i32 4, !dbg !8311
  %13 = load i32, i32* %startdisp, align 4, !dbg !8311
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8312
  %startdisp5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 15, !dbg !8313
  store i32 %13, i32* %startdisp5, align 8, !dbg !8314
  %15 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8315
  %enddisp = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %15, i32 0, i32 5, !dbg !8316
  %16 = load i32, i32* %enddisp, align 4, !dbg !8316
  %17 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8317
  %enddisp6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 16, !dbg !8318
  store i32 %16, i32* %enddisp6, align 4, !dbg !8319
  %18 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8320
  %startofs = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %18, i32 0, i32 6, !dbg !8321
  %19 = load i32, i32* %startofs, align 4, !dbg !8321
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8322
  %startofs7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 9, !dbg !8323
  store i32 %19, i32* %startofs7, align 8, !dbg !8324
  %21 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8325
  %endofs = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %21, i32 0, i32 7, !dbg !8326
  %22 = load i32, i32* %endofs, align 4, !dbg !8326
  %23 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8327
  %endofs8 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %23, i32 0, i32 10, !dbg !8328
  store i32 %22, i32* %endofs8, align 4, !dbg !8329
  %24 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8330
  %anim_startofs = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %24, i32 0, i32 8, !dbg !8331
  %25 = load i32, i32* %anim_startofs, align 4, !dbg !8331
  %26 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8332
  %anim_startofs9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 44, !dbg !8333
  store i32 %25, i32* %anim_startofs9, align 8, !dbg !8334
  %27 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8335
  %anim_endofs = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %27, i32 0, i32 9, !dbg !8336
  %28 = load i32, i32* %anim_endofs, align 4, !dbg !8336
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8337
  %anim_endofs10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 45, !dbg !8338
  store i32 %28, i32* %anim_endofs10, align 4, !dbg !8339
  %30 = load %struct.TransSeq*, %struct.TransSeq** %ts.addr, align 8, !dbg !8340
  %len = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %30, i32 0, i32 10, !dbg !8341
  %31 = load i32, i32* %len, align 4, !dbg !8341
  %32 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8342
  %len11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 7, !dbg !8343
  store i32 %31, i32* %len11, align 8, !dbg !8344
  ret void, !dbg !8345
}

declare dso_local void @BKE_sequence_reload_new_file(%struct.Scene*, %struct.Sequence*, i8 zeroext) #2

declare dso_local void @BKE_sequencer_free_imbuf(%struct.Scene*, %struct.ListBase*, i8 zeroext) #2

declare dso_local void @BKE_sequence_invalidate_dependent(%struct.Scene*, %struct.Sequence*) #2

declare dso_local void @BKE_sequencer_update_muting(%struct.Editing*) #2

declare dso_local void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene*, %struct.Sequence*, i32, i32) #2

declare dso_local void @BKE_report(%struct.ReportList*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @seq_is_predecessor(%struct.Sequence* %pred, %struct.Sequence* %seq) #0 !dbg !8346 {
entry:
  %retval = alloca i8, align 1
  %pred.addr = alloca %struct.Sequence*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %pred, %struct.Sequence** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %pred.addr, metadata !8349, metadata !DIExpression()), !dbg !8350
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8351, metadata !DIExpression()), !dbg !8352
  %0 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8353
  %tobool = icmp ne %struct.Sequence* %0, null, !dbg !8353
  br i1 %tobool, label %if.end, label %if.then, !dbg !8355

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8356
  br label %return, !dbg !8356

if.end:                                           ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8357
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8359
  %cmp = icmp eq %struct.Sequence* %1, %2, !dbg !8360
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8361

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !8362
  br label %return, !dbg !8362

if.else:                                          ; preds = %if.end
  %3 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8363
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8365
  %call = call zeroext i8 @seq_is_parent(%struct.Sequence* %3, %struct.Sequence* %4), !dbg !8366
  %tobool2 = icmp ne i8 %call, 0, !dbg !8366
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !8367

if.then3:                                         ; preds = %if.else
  store i8 1, i8* %retval, align 1, !dbg !8368
  br label %return, !dbg !8368

if.else4:                                         ; preds = %if.else
  %5 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8369
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 33, !dbg !8371
  %6 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !8371
  %tobool5 = icmp ne %struct.Sequence* %6, null, !dbg !8369
  br i1 %tobool5, label %land.lhs.true, label %if.else10, !dbg !8372

land.lhs.true:                                    ; preds = %if.else4
  %7 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8373
  %seq16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 33, !dbg !8374
  %8 = load %struct.Sequence*, %struct.Sequence** %seq16, align 8, !dbg !8374
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8375
  %call7 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %8, %struct.Sequence* %9), !dbg !8376
  %conv = zext i8 %call7 to i32, !dbg !8376
  %tobool8 = icmp ne i32 %conv, 0, !dbg !8376
  br i1 %tobool8, label %if.then9, label %if.else10, !dbg !8377

if.then9:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !8378
  br label %return, !dbg !8378

if.else10:                                        ; preds = %land.lhs.true, %if.else4
  %10 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8379
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 34, !dbg !8381
  %11 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !8381
  %tobool11 = icmp ne %struct.Sequence* %11, null, !dbg !8379
  br i1 %tobool11, label %land.lhs.true12, label %if.else18, !dbg !8382

land.lhs.true12:                                  ; preds = %if.else10
  %12 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8383
  %seq213 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 34, !dbg !8384
  %13 = load %struct.Sequence*, %struct.Sequence** %seq213, align 8, !dbg !8384
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8385
  %call14 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %13, %struct.Sequence* %14), !dbg !8386
  %conv15 = zext i8 %call14 to i32, !dbg !8386
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !8386
  br i1 %tobool16, label %if.then17, label %if.else18, !dbg !8387

if.then17:                                        ; preds = %land.lhs.true12
  store i8 1, i8* %retval, align 1, !dbg !8388
  br label %return, !dbg !8388

if.else18:                                        ; preds = %land.lhs.true12, %if.else10
  %15 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8389
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 35, !dbg !8391
  %16 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !8391
  %tobool19 = icmp ne %struct.Sequence* %16, null, !dbg !8389
  br i1 %tobool19, label %land.lhs.true20, label %if.end26, !dbg !8392

land.lhs.true20:                                  ; preds = %if.else18
  %17 = load %struct.Sequence*, %struct.Sequence** %pred.addr, align 8, !dbg !8393
  %seq321 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 35, !dbg !8394
  %18 = load %struct.Sequence*, %struct.Sequence** %seq321, align 8, !dbg !8394
  %19 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8395
  %call22 = call zeroext i8 @seq_is_predecessor(%struct.Sequence* %18, %struct.Sequence* %19), !dbg !8396
  %conv23 = zext i8 %call22 to i32, !dbg !8396
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !8396
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !8397

if.then25:                                        ; preds = %land.lhs.true20
  store i8 1, i8* %retval, align 1, !dbg !8398
  br label %return, !dbg !8398

if.end26:                                         ; preds = %land.lhs.true20, %if.else18
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  br label %if.end29

if.end29:                                         ; preds = %if.end28
  br label %if.end30

if.end30:                                         ; preds = %if.end29
  store i8 0, i8* %retval, align 1, !dbg !8399
  br label %return, !dbg !8399

return:                                           ; preds = %if.end30, %if.then25, %if.then17, %if.then9, %if.then3, %if.then1, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !8400
  ret i8 %20, !dbg !8400
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @seq_is_parent(%struct.Sequence* %par, %struct.Sequence* %seq) #0 !dbg !8401 {
entry:
  %par.addr = alloca %struct.Sequence*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %par, %struct.Sequence** %par.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %par.addr, metadata !8402, metadata !DIExpression()), !dbg !8403
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8404, metadata !DIExpression()), !dbg !8405
  %0 = load %struct.Sequence*, %struct.Sequence** %par.addr, align 8, !dbg !8406
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 33, !dbg !8407
  %1 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !8407
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8408
  %cmp = icmp eq %struct.Sequence* %1, %2, !dbg !8409
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !8410

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %par.addr, align 8, !dbg !8411
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 34, !dbg !8412
  %4 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !8412
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8413
  %cmp1 = icmp eq %struct.Sequence* %4, %5, !dbg !8414
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !8415

lor.rhs:                                          ; preds = %lor.lhs.false
  %6 = load %struct.Sequence*, %struct.Sequence** %par.addr, align 8, !dbg !8416
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 35, !dbg !8417
  %7 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !8417
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8418
  %cmp2 = icmp eq %struct.Sequence* %7, %8, !dbg !8419
  br label %lor.end, !dbg !8415

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !8415
  %conv = trunc i32 %lor.ext to i8, !dbg !8420
  ret i8 %conv, !dbg !8421
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mouse_frame_side(%struct.View2D* %v2d, i16 signext %mouse_x, i32 %frame) #0 !dbg !8422 {
entry:
  %v2d.addr = alloca %struct.View2D*, align 8
  %mouse_x.addr = alloca i16, align 2
  %frame.addr = alloca i32, align 4
  %mval = alloca [2 x i32], align 4
  %mouseloc = alloca [2 x float], align 4
  store %struct.View2D* %v2d, %struct.View2D** %v2d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.View2D** %v2d.addr, metadata !8425, metadata !DIExpression()), !dbg !8426
  store i16 %mouse_x, i16* %mouse_x.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %mouse_x.addr, metadata !8427, metadata !DIExpression()), !dbg !8428
  store i32 %frame, i32* %frame.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frame.addr, metadata !8429, metadata !DIExpression()), !dbg !8430
  call void @llvm.dbg.declare(metadata [2 x i32]* %mval, metadata !8431, metadata !DIExpression()), !dbg !8432
  call void @llvm.dbg.declare(metadata [2 x float]* %mouseloc, metadata !8433, metadata !DIExpression()), !dbg !8434
  %0 = load i16, i16* %mouse_x.addr, align 2, !dbg !8435
  %conv = sext i16 %0 to i32, !dbg !8435
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 0, !dbg !8436
  store i32 %conv, i32* %arrayidx, align 4, !dbg !8437
  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 1, !dbg !8438
  store i32 0, i32* %arrayidx1, align 4, !dbg !8439
  %1 = load %struct.View2D*, %struct.View2D** %v2d.addr, align 8, !dbg !8440
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 0, !dbg !8441
  %2 = load i32, i32* %arrayidx2, align 4, !dbg !8441
  %conv3 = sitofp i32 %2 to float, !dbg !8441
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %mval, i64 0, i64 1, !dbg !8442
  %3 = load i32, i32* %arrayidx4, align 4, !dbg !8442
  %conv5 = sitofp i32 %3 to float, !dbg !8442
  %arrayidx6 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !8443
  %arrayidx7 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 1, !dbg !8444
  call void @UI_view2d_region_to_view(%struct.View2D* %1, float %conv3, float %conv5, float* %arrayidx6, float* %arrayidx7), !dbg !8445
  %arrayidx8 = getelementptr inbounds [2 x float], [2 x float]* %mouseloc, i64 0, i64 0, !dbg !8446
  %4 = load float, float* %arrayidx8, align 4, !dbg !8446
  %5 = load i32, i32* %frame.addr, align 4, !dbg !8447
  %conv9 = sitofp i32 %5 to float, !dbg !8447
  %cmp = fcmp ogt float %4, %conv9, !dbg !8448
  %6 = zext i1 %cmp to i64, !dbg !8446
  %cond = select i1 %cmp, i32 2, i32 1, !dbg !8446
  ret i32 %cond, !dbg !8449
}

declare dso_local void @RNA_enum_set(%struct.PointerRNA*, i8*, i32) #2

declare dso_local i32 @RNA_enum_get(%struct.PointerRNA*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cut_seq_list(%struct.Scene* %scene, %struct.ListBase* %slist, i32 %cutframe, %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)* %cut_seq) #0 !dbg !8450 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %slist.addr = alloca %struct.ListBase*, align 8
  %cutframe.addr = alloca i32, align 4
  %cut_seq.addr = alloca %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %seq_next_iter = alloca %struct.Sequence*, align 8
  %seq_first_new = alloca %struct.Sequence*, align 8
  %seqn = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8456, metadata !DIExpression()), !dbg !8457
  store %struct.ListBase* %slist, %struct.ListBase** %slist.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %slist.addr, metadata !8458, metadata !DIExpression()), !dbg !8459
  store i32 %cutframe, i32* %cutframe.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cutframe.addr, metadata !8460, metadata !DIExpression()), !dbg !8461
  store %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)* %cut_seq, %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)** %cut_seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)** %cut_seq.addr, metadata !8462, metadata !DIExpression()), !dbg !8463
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !8464, metadata !DIExpression()), !dbg !8465
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_next_iter, metadata !8466, metadata !DIExpression()), !dbg !8467
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq_first_new, metadata !8468, metadata !DIExpression()), !dbg !8469
  store %struct.Sequence* null, %struct.Sequence** %seq_first_new, align 8, !dbg !8469
  %0 = load %struct.ListBase*, %struct.ListBase** %slist.addr, align 8, !dbg !8470
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !8471
  %1 = load i8*, i8** %first, align 8, !dbg !8471
  %2 = bitcast i8* %1 to %struct.Sequence*, !dbg !8470
  store %struct.Sequence* %2, %struct.Sequence** %seq, align 8, !dbg !8472
  br label %while.cond, !dbg !8473

while.cond:                                       ; preds = %if.end23, %entry
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8474
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !8474
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8475

land.rhs:                                         ; preds = %while.cond
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8476
  %5 = load %struct.Sequence*, %struct.Sequence** %seq_first_new, align 8, !dbg !8477
  %cmp = icmp ne %struct.Sequence* %4, %5, !dbg !8478
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !8479
  br i1 %6, label %while.body, label %while.end, !dbg !8473

while.body:                                       ; preds = %land.end
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8480
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 0, !dbg !8482
  %8 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !8482
  store %struct.Sequence* %8, %struct.Sequence** %seq_next_iter, align 8, !dbg !8483
  %9 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8484
  %tmp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 2, !dbg !8485
  store i8* null, i8** %tmp, align 8, !dbg !8486
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8487
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 5, !dbg !8489
  %11 = load i32, i32* %flag, align 8, !dbg !8489
  %and = and i32 %11, 1, !dbg !8490
  %tobool1 = icmp ne i32 %and, 0, !dbg !8490
  br i1 %tobool1, label %if.then, label %if.end23, !dbg !8491

if.then:                                          ; preds = %while.body
  %12 = load i32, i32* %cutframe.addr, align 4, !dbg !8492
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8495
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 15, !dbg !8496
  %14 = load i32, i32* %startdisp, align 8, !dbg !8496
  %cmp2 = icmp sgt i32 %12, %14, !dbg !8497
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !8498

land.lhs.true:                                    ; preds = %if.then
  %15 = load i32, i32* %cutframe.addr, align 4, !dbg !8499
  %16 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8500
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 16, !dbg !8501
  %17 = load i32, i32* %enddisp, align 4, !dbg !8501
  %cmp3 = icmp slt i32 %15, %17, !dbg !8502
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !8503

if.then4:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !8504, metadata !DIExpression()), !dbg !8506
  %18 = load %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)*, %struct.Sequence* (%struct.Scene*, %struct.Sequence*, i32)** %cut_seq.addr, align 8, !dbg !8507
  %19 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8508
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8509
  %21 = load i32, i32* %cutframe.addr, align 4, !dbg !8510
  %call = call %struct.Sequence* %18(%struct.Scene* %19, %struct.Sequence* %20, i32 %21), !dbg !8507
  store %struct.Sequence* %call, %struct.Sequence** %seqn, align 8, !dbg !8506
  %22 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8511
  %tobool5 = icmp ne %struct.Sequence* %22, null, !dbg !8511
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !8513

if.then6:                                         ; preds = %if.then4
  %23 = load %struct.ListBase*, %struct.ListBase** %slist.addr, align 8, !dbg !8514
  %24 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8516
  %25 = bitcast %struct.Sequence* %24 to i8*, !dbg !8516
  call void @BLI_addtail(%struct.ListBase* %23, i8* %25), !dbg !8517
  %26 = load %struct.Sequence*, %struct.Sequence** %seq_first_new, align 8, !dbg !8518
  %cmp7 = icmp eq %struct.Sequence* %26, null, !dbg !8520
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !8521

if.then8:                                         ; preds = %if.then6
  %27 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8522
  store %struct.Sequence* %27, %struct.Sequence** %seq_first_new, align 8, !dbg !8524
  br label %if.end, !dbg !8525

if.end:                                           ; preds = %if.then8, %if.then6
  br label %if.end9, !dbg !8526

if.end9:                                          ; preds = %if.end, %if.then4
  br label %if.end22, !dbg !8527

if.else:                                          ; preds = %land.lhs.true, %if.then
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8528
  %enddisp10 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 16, !dbg !8530
  %29 = load i32, i32* %enddisp10, align 4, !dbg !8530
  %30 = load i32, i32* %cutframe.addr, align 4, !dbg !8531
  %cmp11 = icmp sle i32 %29, %30, !dbg !8532
  br i1 %cmp11, label %if.then12, label %if.else13, !dbg !8533

if.then12:                                        ; preds = %if.else
  br label %if.end21, !dbg !8534

if.else13:                                        ; preds = %if.else
  %31 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8536
  %startdisp14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %31, i32 0, i32 15, !dbg !8538
  %32 = load i32, i32* %startdisp14, align 8, !dbg !8538
  %33 = load i32, i32* %cutframe.addr, align 4, !dbg !8539
  %cmp15 = icmp sge i32 %32, %33, !dbg !8540
  br i1 %cmp15, label %if.then16, label %if.end20, !dbg !8541

if.then16:                                        ; preds = %if.else13
  %34 = load %struct.ListBase*, %struct.ListBase** %slist.addr, align 8, !dbg !8542
  %35 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8544
  %36 = bitcast %struct.Sequence* %35 to i8*, !dbg !8544
  call void @BLI_remlink(%struct.ListBase* %34, i8* %36), !dbg !8545
  %37 = load %struct.ListBase*, %struct.ListBase** %slist.addr, align 8, !dbg !8546
  %38 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8547
  %39 = bitcast %struct.Sequence* %38 to i8*, !dbg !8547
  call void @BLI_addtail(%struct.ListBase* %37, i8* %39), !dbg !8548
  %40 = load %struct.Sequence*, %struct.Sequence** %seq_first_new, align 8, !dbg !8549
  %cmp17 = icmp eq %struct.Sequence* %40, null, !dbg !8551
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !8552

if.then18:                                        ; preds = %if.then16
  %41 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !8553
  store %struct.Sequence* %41, %struct.Sequence** %seq_first_new, align 8, !dbg !8555
  br label %if.end19, !dbg !8556

if.end19:                                         ; preds = %if.then18, %if.then16
  br label %if.end20, !dbg !8557

if.end20:                                         ; preds = %if.end19, %if.else13
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then12
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end9
  br label %if.end23, !dbg !8558

if.end23:                                         ; preds = %if.end22, %while.body
  %42 = load %struct.Sequence*, %struct.Sequence** %seq_next_iter, align 8, !dbg !8559
  store %struct.Sequence* %42, %struct.Sequence** %seq, align 8, !dbg !8560
  br label %while.cond, !dbg !8473, !llvm.loop !8561

while.end:                                        ; preds = %land.end
  %43 = load %struct.Sequence*, %struct.Sequence** %seq_first_new, align 8, !dbg !8563
  %cmp24 = icmp ne %struct.Sequence* %43, null, !dbg !8564
  %conv = zext i1 %cmp24 to i32, !dbg !8564
  %conv25 = trunc i32 %conv to i8, !dbg !8565
  ret i8 %conv25, !dbg !8566
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.Sequence* @cut_seq_hard(%struct.Scene* %scene, %struct.Sequence* %seq, i32 %cutframe) #0 !dbg !8567 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cutframe.addr = alloca i32, align 4
  %ts = alloca %struct.TransSeq, align 4
  %seqn = alloca %struct.Sequence*, align 8
  %skip_dup = alloca i8, align 1
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8568, metadata !DIExpression()), !dbg !8569
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8570, metadata !DIExpression()), !dbg !8571
  store i32 %cutframe, i32* %cutframe.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cutframe.addr, metadata !8572, metadata !DIExpression()), !dbg !8573
  call void @llvm.dbg.declare(metadata %struct.TransSeq* %ts, metadata !8574, metadata !DIExpression()), !dbg !8575
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !8576, metadata !DIExpression()), !dbg !8577
  store %struct.Sequence* null, %struct.Sequence** %seqn, align 8, !dbg !8577
  call void @llvm.dbg.declare(metadata i8* %skip_dup, metadata !8578, metadata !DIExpression()), !dbg !8579
  store i8 0, i8* %skip_dup, align 1, !dbg !8579
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8580
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !8581
  %1 = load i32, i32* %start, align 4, !dbg !8581
  %start1 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !8582
  store i32 %1, i32* %start1, align 4, !dbg !8583
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8584
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 13, !dbg !8585
  %3 = load i32, i32* %machine, align 8, !dbg !8585
  %machine2 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 1, !dbg !8586
  store i32 %3, i32* %machine2, align 4, !dbg !8587
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8588
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 11, !dbg !8589
  %5 = load i32, i32* %startstill, align 8, !dbg !8589
  %startstill3 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 2, !dbg !8590
  store i32 %5, i32* %startstill3, align 4, !dbg !8591
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8592
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 12, !dbg !8593
  %7 = load i32, i32* %endstill, align 4, !dbg !8593
  %endstill4 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !8594
  store i32 %7, i32* %endstill4, align 4, !dbg !8595
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8596
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 15, !dbg !8597
  %9 = load i32, i32* %startdisp, align 8, !dbg !8597
  %startdisp5 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 4, !dbg !8598
  store i32 %9, i32* %startdisp5, align 4, !dbg !8599
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8600
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 16, !dbg !8601
  %11 = load i32, i32* %enddisp, align 4, !dbg !8601
  %enddisp6 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 5, !dbg !8602
  store i32 %11, i32* %enddisp6, align 4, !dbg !8603
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8604
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 9, !dbg !8605
  %13 = load i32, i32* %startofs, align 8, !dbg !8605
  %startofs7 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 6, !dbg !8606
  store i32 %13, i32* %startofs7, align 4, !dbg !8607
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8608
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 10, !dbg !8609
  %15 = load i32, i32* %endofs, align 4, !dbg !8609
  %endofs8 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 7, !dbg !8610
  store i32 %15, i32* %endofs8, align 4, !dbg !8611
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8612
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 44, !dbg !8613
  %17 = load i32, i32* %anim_startofs, align 8, !dbg !8613
  %anim_startofs9 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 8, !dbg !8614
  store i32 %17, i32* %anim_startofs9, align 4, !dbg !8615
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8616
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 45, !dbg !8617
  %19 = load i32, i32* %anim_endofs, align 4, !dbg !8617
  %anim_endofs10 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 9, !dbg !8618
  store i32 %19, i32* %anim_endofs10, align 4, !dbg !8619
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8620
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 7, !dbg !8621
  %21 = load i32, i32* %len, align 8, !dbg !8621
  %len11 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 10, !dbg !8622
  store i32 %21, i32* %len11, align 4, !dbg !8623
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8624
  %startstill12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 11, !dbg !8626
  %23 = load i32, i32* %startstill12, align 8, !dbg !8626
  %tobool = icmp ne i32 %23, 0, !dbg !8627
  br i1 %tobool, label %land.lhs.true, label %if.else28, !dbg !8628

land.lhs.true:                                    ; preds = %entry
  %24 = load i32, i32* %cutframe.addr, align 4, !dbg !8629
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8630
  %start13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 8, !dbg !8631
  %26 = load i32, i32* %start13, align 4, !dbg !8631
  %cmp = icmp slt i32 %24, %26, !dbg !8632
  br i1 %cmp, label %if.then, label %if.else28, !dbg !8633

if.then:                                          ; preds = %land.lhs.true
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8634
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 6, !dbg !8637
  %28 = load i32, i32* %type, align 4, !dbg !8637
  %cmp14 = icmp eq i32 %28, 1, !dbg !8638
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !8639

if.then15:                                        ; preds = %if.then
  store i8 1, i8* %skip_dup, align 1, !dbg !8640
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8642
  %start16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 8, !dbg !8643
  %30 = load i32, i32* %start16, align 4, !dbg !8643
  %31 = load i32, i32* %cutframe.addr, align 4, !dbg !8644
  %sub = sub nsw i32 %30, %31, !dbg !8645
  %32 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8646
  %startstill17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 11, !dbg !8647
  store i32 %sub, i32* %startstill17, align 8, !dbg !8648
  br label %if.end, !dbg !8649

if.else:                                          ; preds = %if.then
  %33 = load i32, i32* %cutframe.addr, align 4, !dbg !8650
  %sub18 = sub nsw i32 %33, 1, !dbg !8652
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8653
  %start19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 8, !dbg !8654
  store i32 %sub18, i32* %start19, align 4, !dbg !8655
  %35 = load i32, i32* %cutframe.addr, align 4, !dbg !8656
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8657
  %startdisp20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 15, !dbg !8658
  %37 = load i32, i32* %startdisp20, align 8, !dbg !8658
  %sub21 = sub nsw i32 %35, %37, !dbg !8659
  %sub22 = sub nsw i32 %sub21, 1, !dbg !8660
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8661
  %startstill23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 11, !dbg !8662
  store i32 %sub22, i32* %startstill23, align 8, !dbg !8663
  %39 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8664
  %len24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 7, !dbg !8665
  %40 = load i32, i32* %len24, align 8, !dbg !8665
  %sub25 = sub nsw i32 %40, 1, !dbg !8666
  %41 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8667
  %anim_endofs26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 45, !dbg !8668
  %42 = load i32, i32* %anim_endofs26, align 4, !dbg !8669
  %add = add nsw i32 %42, %sub25, !dbg !8669
  store i32 %add, i32* %anim_endofs26, align 4, !dbg !8669
  %43 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8670
  %endstill27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %43, i32 0, i32 12, !dbg !8671
  store i32 0, i32* %endstill27, align 4, !dbg !8672
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then15
  br label %if.end64, !dbg !8673

if.else28:                                        ; preds = %land.lhs.true, %entry
  %44 = load i32, i32* %cutframe.addr, align 4, !dbg !8674
  %45 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8676
  %start29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %45, i32 0, i32 8, !dbg !8677
  %46 = load i32, i32* %start29, align 4, !dbg !8677
  %cmp30 = icmp sge i32 %44, %46, !dbg !8678
  br i1 %cmp30, label %land.lhs.true31, label %if.else45, !dbg !8679

land.lhs.true31:                                  ; preds = %if.else28
  %47 = load i32, i32* %cutframe.addr, align 4, !dbg !8680
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8681
  %start32 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %48, i32 0, i32 8, !dbg !8682
  %49 = load i32, i32* %start32, align 4, !dbg !8682
  %50 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8683
  %len33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %50, i32 0, i32 7, !dbg !8684
  %51 = load i32, i32* %len33, align 8, !dbg !8684
  %add34 = add nsw i32 %49, %51, !dbg !8685
  %cmp35 = icmp sle i32 %47, %add34, !dbg !8686
  br i1 %cmp35, label %if.then36, label %if.else45, !dbg !8687

if.then36:                                        ; preds = %land.lhs.true31
  %52 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8688
  %endofs37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %52, i32 0, i32 10, !dbg !8690
  store i32 0, i32* %endofs37, align 4, !dbg !8691
  %53 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8692
  %endstill38 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 12, !dbg !8693
  store i32 0, i32* %endstill38, align 4, !dbg !8694
  %54 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8695
  %start39 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 8, !dbg !8696
  %55 = load i32, i32* %start39, align 4, !dbg !8696
  %56 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8697
  %len40 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 7, !dbg !8698
  %57 = load i32, i32* %len40, align 8, !dbg !8698
  %add41 = add nsw i32 %55, %57, !dbg !8699
  %58 = load i32, i32* %cutframe.addr, align 4, !dbg !8700
  %sub42 = sub nsw i32 %add41, %58, !dbg !8701
  %59 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8702
  %anim_endofs43 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 45, !dbg !8703
  %60 = load i32, i32* %anim_endofs43, align 4, !dbg !8704
  %add44 = add nsw i32 %60, %sub42, !dbg !8704
  store i32 %add44, i32* %anim_endofs43, align 4, !dbg !8704
  br label %if.end63, !dbg !8705

if.else45:                                        ; preds = %land.lhs.true31, %if.else28
  %61 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8706
  %start46 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %61, i32 0, i32 8, !dbg !8708
  %62 = load i32, i32* %start46, align 4, !dbg !8708
  %63 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8709
  %len47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %63, i32 0, i32 7, !dbg !8710
  %64 = load i32, i32* %len47, align 8, !dbg !8710
  %add48 = add nsw i32 %62, %64, !dbg !8711
  %65 = load i32, i32* %cutframe.addr, align 4, !dbg !8712
  %cmp49 = icmp slt i32 %add48, %65, !dbg !8713
  br i1 %cmp49, label %land.lhs.true50, label %if.end62, !dbg !8714

land.lhs.true50:                                  ; preds = %if.else45
  %66 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8715
  %endstill51 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %66, i32 0, i32 12, !dbg !8716
  %67 = load i32, i32* %endstill51, align 4, !dbg !8716
  %tobool52 = icmp ne i32 %67, 0, !dbg !8717
  br i1 %tobool52, label %if.then53, label %if.end62, !dbg !8718

if.then53:                                        ; preds = %land.lhs.true50
  %68 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8719
  %enddisp54 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %68, i32 0, i32 16, !dbg !8721
  %69 = load i32, i32* %enddisp54, align 4, !dbg !8721
  %70 = load i32, i32* %cutframe.addr, align 4, !dbg !8722
  %sub55 = sub nsw i32 %69, %70, !dbg !8723
  %71 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8724
  %endstill56 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %71, i32 0, i32 12, !dbg !8725
  %72 = load i32, i32* %endstill56, align 4, !dbg !8726
  %sub57 = sub nsw i32 %72, %sub55, !dbg !8726
  store i32 %sub57, i32* %endstill56, align 4, !dbg !8726
  %73 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8727
  %type58 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %73, i32 0, i32 6, !dbg !8729
  %74 = load i32, i32* %type58, align 4, !dbg !8729
  %cmp59 = icmp eq i32 %74, 1, !dbg !8730
  br i1 %cmp59, label %if.then60, label %if.end61, !dbg !8731

if.then60:                                        ; preds = %if.then53
  store i8 1, i8* %skip_dup, align 1, !dbg !8732
  br label %if.end61, !dbg !8734

if.end61:                                         ; preds = %if.then60, %if.then53
  br label %if.end62, !dbg !8735

if.end62:                                         ; preds = %if.end61, %land.lhs.true50, %if.else45
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then36
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.end
  %75 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8736
  %76 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8737
  call void @BKE_sequence_reload_new_file(%struct.Scene* %75, %struct.Sequence* %76, i8 zeroext 0), !dbg !8738
  %77 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8739
  %78 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8740
  call void @BKE_sequence_calc(%struct.Scene* %77, %struct.Sequence* %78), !dbg !8741
  %79 = load i8, i8* %skip_dup, align 1, !dbg !8742
  %tobool65 = icmp ne i8 %79, 0, !dbg !8742
  br i1 %tobool65, label %if.end67, label %if.then66, !dbg !8744

if.then66:                                        ; preds = %if.end64
  %80 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8745
  %81 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8747
  %call = call %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %80, %struct.Scene* null, %struct.Sequence* %81, i32 5), !dbg !8748
  store %struct.Sequence* %call, %struct.Sequence** %seqn, align 8, !dbg !8749
  br label %if.end67, !dbg !8750

if.end67:                                         ; preds = %if.then66, %if.end64
  %82 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8751
  %tobool68 = icmp ne %struct.Sequence* %82, null, !dbg !8751
  br i1 %tobool68, label %if.then69, label %if.end131, !dbg !8753

if.then69:                                        ; preds = %if.end67
  %83 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8754
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %83, i32 0, i32 5, !dbg !8756
  %84 = load i32, i32* %flag, align 8, !dbg !8757
  %or = or i32 %84, 1, !dbg !8757
  store i32 %or, i32* %flag, align 8, !dbg !8757
  %85 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8758
  %startstill70 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 11, !dbg !8760
  %86 = load i32, i32* %startstill70, align 8, !dbg !8760
  %tobool71 = icmp ne i32 %86, 0, !dbg !8761
  br i1 %tobool71, label %land.lhs.true72, label %if.else86, !dbg !8762

land.lhs.true72:                                  ; preds = %if.then69
  %87 = load i32, i32* %cutframe.addr, align 4, !dbg !8763
  %88 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8764
  %start73 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %88, i32 0, i32 8, !dbg !8765
  %89 = load i32, i32* %start73, align 4, !dbg !8765
  %add74 = add nsw i32 %89, 1, !dbg !8766
  %cmp75 = icmp eq i32 %87, %add74, !dbg !8767
  br i1 %cmp75, label %if.then76, label %if.else86, !dbg !8768

if.then76:                                        ; preds = %land.lhs.true72
  %start77 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !8769
  %90 = load i32, i32* %start77, align 4, !dbg !8769
  %91 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8771
  %start78 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %91, i32 0, i32 8, !dbg !8772
  store i32 %90, i32* %start78, align 4, !dbg !8773
  %start79 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !8774
  %92 = load i32, i32* %start79, align 4, !dbg !8774
  %93 = load i32, i32* %cutframe.addr, align 4, !dbg !8775
  %sub80 = sub nsw i32 %92, %93, !dbg !8776
  %94 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8777
  %startstill81 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %94, i32 0, i32 11, !dbg !8778
  store i32 %sub80, i32* %startstill81, align 8, !dbg !8779
  %anim_endofs82 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 9, !dbg !8780
  %95 = load i32, i32* %anim_endofs82, align 4, !dbg !8780
  %96 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8781
  %anim_endofs83 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %96, i32 0, i32 45, !dbg !8782
  store i32 %95, i32* %anim_endofs83, align 4, !dbg !8783
  %endstill84 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !8784
  %97 = load i32, i32* %endstill84, align 4, !dbg !8784
  %98 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8785
  %endstill85 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %98, i32 0, i32 12, !dbg !8786
  store i32 %97, i32* %endstill85, align 4, !dbg !8787
  br label %if.end130, !dbg !8788

if.else86:                                        ; preds = %land.lhs.true72, %if.then69
  %99 = load i32, i32* %cutframe.addr, align 4, !dbg !8789
  %100 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8791
  %start87 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %100, i32 0, i32 8, !dbg !8792
  %101 = load i32, i32* %start87, align 4, !dbg !8792
  %cmp88 = icmp sge i32 %99, %101, !dbg !8793
  br i1 %cmp88, label %land.lhs.true89, label %if.else108, !dbg !8794

land.lhs.true89:                                  ; preds = %if.else86
  %102 = load i32, i32* %cutframe.addr, align 4, !dbg !8795
  %103 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8796
  %start90 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %103, i32 0, i32 8, !dbg !8797
  %104 = load i32, i32* %start90, align 4, !dbg !8797
  %105 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8798
  %len91 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %105, i32 0, i32 7, !dbg !8799
  %106 = load i32, i32* %len91, align 8, !dbg !8799
  %add92 = add nsw i32 %104, %106, !dbg !8800
  %cmp93 = icmp sle i32 %102, %add92, !dbg !8801
  br i1 %cmp93, label %if.then94, label %if.else108, !dbg !8802

if.then94:                                        ; preds = %land.lhs.true89
  %107 = load i32, i32* %cutframe.addr, align 4, !dbg !8803
  %108 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8805
  %start95 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %108, i32 0, i32 8, !dbg !8806
  store i32 %107, i32* %start95, align 4, !dbg !8807
  %109 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8808
  %startstill96 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %109, i32 0, i32 11, !dbg !8809
  store i32 0, i32* %startstill96, align 8, !dbg !8810
  %110 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8811
  %startofs97 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %110, i32 0, i32 9, !dbg !8812
  store i32 0, i32* %startofs97, align 8, !dbg !8813
  %endofs98 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 7, !dbg !8814
  %111 = load i32, i32* %endofs98, align 4, !dbg !8814
  %112 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8815
  %endofs99 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %112, i32 0, i32 10, !dbg !8816
  store i32 %111, i32* %endofs99, align 4, !dbg !8817
  %113 = load i32, i32* %cutframe.addr, align 4, !dbg !8818
  %start100 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !8819
  %114 = load i32, i32* %start100, align 4, !dbg !8819
  %sub101 = sub nsw i32 %113, %114, !dbg !8820
  %115 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8821
  %anim_startofs102 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %115, i32 0, i32 44, !dbg !8822
  %116 = load i32, i32* %anim_startofs102, align 8, !dbg !8823
  %add103 = add nsw i32 %116, %sub101, !dbg !8823
  store i32 %add103, i32* %anim_startofs102, align 8, !dbg !8823
  %anim_endofs104 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 9, !dbg !8824
  %117 = load i32, i32* %anim_endofs104, align 4, !dbg !8824
  %118 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8825
  %anim_endofs105 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 45, !dbg !8826
  store i32 %117, i32* %anim_endofs105, align 4, !dbg !8827
  %endstill106 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !8828
  %119 = load i32, i32* %endstill106, align 4, !dbg !8828
  %120 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8829
  %endstill107 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %120, i32 0, i32 12, !dbg !8830
  store i32 %119, i32* %endstill107, align 4, !dbg !8831
  br label %if.end129, !dbg !8832

if.else108:                                       ; preds = %land.lhs.true89, %if.else86
  %121 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8833
  %start109 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %121, i32 0, i32 8, !dbg !8835
  %122 = load i32, i32* %start109, align 4, !dbg !8835
  %123 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8836
  %len110 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %123, i32 0, i32 7, !dbg !8837
  %124 = load i32, i32* %len110, align 8, !dbg !8837
  %add111 = add nsw i32 %122, %124, !dbg !8838
  %125 = load i32, i32* %cutframe.addr, align 4, !dbg !8839
  %cmp112 = icmp slt i32 %add111, %125, !dbg !8840
  br i1 %cmp112, label %land.lhs.true113, label %if.end128, !dbg !8841

land.lhs.true113:                                 ; preds = %if.else108
  %126 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8842
  %endstill114 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %126, i32 0, i32 12, !dbg !8843
  %127 = load i32, i32* %endstill114, align 4, !dbg !8843
  %tobool115 = icmp ne i32 %127, 0, !dbg !8844
  br i1 %tobool115, label %if.then116, label %if.end128, !dbg !8845

if.then116:                                       ; preds = %land.lhs.true113
  %128 = load i32, i32* %cutframe.addr, align 4, !dbg !8846
  %129 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8848
  %start117 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %129, i32 0, i32 8, !dbg !8849
  store i32 %128, i32* %start117, align 4, !dbg !8850
  %130 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8851
  %startofs118 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %130, i32 0, i32 9, !dbg !8852
  store i32 0, i32* %startofs118, align 8, !dbg !8853
  %len119 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 10, !dbg !8854
  %131 = load i32, i32* %len119, align 4, !dbg !8854
  %sub120 = sub nsw i32 %131, 1, !dbg !8855
  %132 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8856
  %anim_startofs121 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %132, i32 0, i32 44, !dbg !8857
  %133 = load i32, i32* %anim_startofs121, align 8, !dbg !8858
  %add122 = add nsw i32 %133, %sub120, !dbg !8858
  store i32 %add122, i32* %anim_startofs121, align 8, !dbg !8858
  %enddisp123 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 5, !dbg !8859
  %134 = load i32, i32* %enddisp123, align 4, !dbg !8859
  %135 = load i32, i32* %cutframe.addr, align 4, !dbg !8860
  %sub124 = sub nsw i32 %134, %135, !dbg !8861
  %sub125 = sub nsw i32 %sub124, 1, !dbg !8862
  %136 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8863
  %endstill126 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %136, i32 0, i32 12, !dbg !8864
  store i32 %sub125, i32* %endstill126, align 4, !dbg !8865
  %137 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8866
  %startstill127 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %137, i32 0, i32 11, !dbg !8867
  store i32 0, i32* %startstill127, align 8, !dbg !8868
  br label %if.end128, !dbg !8869

if.end128:                                        ; preds = %if.then116, %land.lhs.true113, %if.else108
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then94
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.then76
  %138 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8870
  %139 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8871
  call void @BKE_sequence_reload_new_file(%struct.Scene* %138, %struct.Sequence* %139, i8 zeroext 0), !dbg !8872
  %140 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !8873
  %141 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8874
  call void @BKE_sequence_calc(%struct.Scene* %140, %struct.Sequence* %141), !dbg !8875
  br label %if.end131, !dbg !8876

if.end131:                                        ; preds = %if.end130, %if.end67
  %142 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !8877
  ret %struct.Sequence* %142, !dbg !8878
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.Sequence* @cut_seq_soft(%struct.Scene* %scene, %struct.Sequence* %seq, i32 %cutframe) #0 !dbg !8879 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %cutframe.addr = alloca i32, align 4
  %ts = alloca %struct.TransSeq, align 4
  %seqn = alloca %struct.Sequence*, align 8
  %skip_dup = alloca i8, align 1
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !8880, metadata !DIExpression()), !dbg !8881
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !8882, metadata !DIExpression()), !dbg !8883
  store i32 %cutframe, i32* %cutframe.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cutframe.addr, metadata !8884, metadata !DIExpression()), !dbg !8885
  call void @llvm.dbg.declare(metadata %struct.TransSeq* %ts, metadata !8886, metadata !DIExpression()), !dbg !8887
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !8888, metadata !DIExpression()), !dbg !8889
  store %struct.Sequence* null, %struct.Sequence** %seqn, align 8, !dbg !8889
  call void @llvm.dbg.declare(metadata i8* %skip_dup, metadata !8890, metadata !DIExpression()), !dbg !8891
  store i8 0, i8* %skip_dup, align 1, !dbg !8891
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8892
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 8, !dbg !8893
  %1 = load i32, i32* %start, align 4, !dbg !8893
  %start1 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !8894
  store i32 %1, i32* %start1, align 4, !dbg !8895
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8896
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 13, !dbg !8897
  %3 = load i32, i32* %machine, align 8, !dbg !8897
  %machine2 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 1, !dbg !8898
  store i32 %3, i32* %machine2, align 4, !dbg !8899
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8900
  %startstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 11, !dbg !8901
  %5 = load i32, i32* %startstill, align 8, !dbg !8901
  %startstill3 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 2, !dbg !8902
  store i32 %5, i32* %startstill3, align 4, !dbg !8903
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8904
  %endstill = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 12, !dbg !8905
  %7 = load i32, i32* %endstill, align 4, !dbg !8905
  %endstill4 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !8906
  store i32 %7, i32* %endstill4, align 4, !dbg !8907
  %8 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8908
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 15, !dbg !8909
  %9 = load i32, i32* %startdisp, align 8, !dbg !8909
  %startdisp5 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 4, !dbg !8910
  store i32 %9, i32* %startdisp5, align 4, !dbg !8911
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8912
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 16, !dbg !8913
  %11 = load i32, i32* %enddisp, align 4, !dbg !8913
  %enddisp6 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 5, !dbg !8914
  store i32 %11, i32* %enddisp6, align 4, !dbg !8915
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8916
  %startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 9, !dbg !8917
  %13 = load i32, i32* %startofs, align 8, !dbg !8917
  %startofs7 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 6, !dbg !8918
  store i32 %13, i32* %startofs7, align 4, !dbg !8919
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8920
  %endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 10, !dbg !8921
  %15 = load i32, i32* %endofs, align 4, !dbg !8921
  %endofs8 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 7, !dbg !8922
  store i32 %15, i32* %endofs8, align 4, !dbg !8923
  %16 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8924
  %anim_startofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %16, i32 0, i32 44, !dbg !8925
  %17 = load i32, i32* %anim_startofs, align 8, !dbg !8925
  %anim_startofs9 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 8, !dbg !8926
  store i32 %17, i32* %anim_startofs9, align 4, !dbg !8927
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8928
  %anim_endofs = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 45, !dbg !8929
  %19 = load i32, i32* %anim_endofs, align 4, !dbg !8929
  %anim_endofs10 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 9, !dbg !8930
  store i32 %19, i32* %anim_endofs10, align 4, !dbg !8931
  %20 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8932
  %len = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 7, !dbg !8933
  %21 = load i32, i32* %len, align 8, !dbg !8933
  %len11 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 10, !dbg !8934
  store i32 %21, i32* %len11, align 4, !dbg !8935
  %22 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8936
  %startstill12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 11, !dbg !8938
  %23 = load i32, i32* %startstill12, align 8, !dbg !8938
  %tobool = icmp ne i32 %23, 0, !dbg !8939
  br i1 %tobool, label %land.lhs.true, label %if.else28, !dbg !8940

land.lhs.true:                                    ; preds = %entry
  %24 = load i32, i32* %cutframe.addr, align 4, !dbg !8941
  %25 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8942
  %start13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %25, i32 0, i32 8, !dbg !8943
  %26 = load i32, i32* %start13, align 4, !dbg !8943
  %cmp = icmp slt i32 %24, %26, !dbg !8944
  br i1 %cmp, label %if.then, label %if.else28, !dbg !8945

if.then:                                          ; preds = %land.lhs.true
  %27 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8946
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 6, !dbg !8949
  %28 = load i32, i32* %type, align 4, !dbg !8949
  %cmp14 = icmp eq i32 %28, 1, !dbg !8950
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !8951

if.then15:                                        ; preds = %if.then
  store i8 1, i8* %skip_dup, align 1, !dbg !8952
  %29 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8954
  %start16 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %29, i32 0, i32 8, !dbg !8955
  %30 = load i32, i32* %start16, align 4, !dbg !8955
  %31 = load i32, i32* %cutframe.addr, align 4, !dbg !8956
  %sub = sub nsw i32 %30, %31, !dbg !8957
  %32 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8958
  %startstill17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 11, !dbg !8959
  store i32 %sub, i32* %startstill17, align 8, !dbg !8960
  br label %if.end, !dbg !8961

if.else:                                          ; preds = %if.then
  %33 = load i32, i32* %cutframe.addr, align 4, !dbg !8962
  %sub18 = sub nsw i32 %33, 1, !dbg !8964
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8965
  %start19 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 8, !dbg !8966
  store i32 %sub18, i32* %start19, align 4, !dbg !8967
  %35 = load i32, i32* %cutframe.addr, align 4, !dbg !8968
  %36 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8969
  %startdisp20 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 15, !dbg !8970
  %37 = load i32, i32* %startdisp20, align 8, !dbg !8970
  %sub21 = sub nsw i32 %35, %37, !dbg !8971
  %sub22 = sub nsw i32 %sub21, 1, !dbg !8972
  %38 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8973
  %startstill23 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %38, i32 0, i32 11, !dbg !8974
  store i32 %sub22, i32* %startstill23, align 8, !dbg !8975
  %39 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8976
  %len24 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 7, !dbg !8977
  %40 = load i32, i32* %len24, align 8, !dbg !8977
  %sub25 = sub nsw i32 %40, 1, !dbg !8978
  %41 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8979
  %endofs26 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %41, i32 0, i32 10, !dbg !8980
  store i32 %sub25, i32* %endofs26, align 4, !dbg !8981
  %42 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8982
  %endstill27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %42, i32 0, i32 12, !dbg !8983
  store i32 0, i32* %endstill27, align 4, !dbg !8984
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then15
  br label %if.end60, !dbg !8985

if.else28:                                        ; preds = %land.lhs.true, %entry
  %43 = load i32, i32* %cutframe.addr, align 4, !dbg !8986
  %44 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8988
  %start29 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 8, !dbg !8989
  %45 = load i32, i32* %start29, align 4, !dbg !8989
  %cmp30 = icmp sge i32 %43, %45, !dbg !8990
  br i1 %cmp30, label %land.lhs.true31, label %if.else41, !dbg !8991

land.lhs.true31:                                  ; preds = %if.else28
  %46 = load i32, i32* %cutframe.addr, align 4, !dbg !8992
  %47 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8993
  %start32 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %47, i32 0, i32 8, !dbg !8994
  %48 = load i32, i32* %start32, align 4, !dbg !8994
  %49 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !8995
  %len33 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 7, !dbg !8996
  %50 = load i32, i32* %len33, align 8, !dbg !8996
  %add = add nsw i32 %48, %50, !dbg !8997
  %cmp34 = icmp sle i32 %46, %add, !dbg !8998
  br i1 %cmp34, label %if.then35, label %if.else41, !dbg !8999

if.then35:                                        ; preds = %land.lhs.true31
  %51 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9000
  %start36 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 8, !dbg !9002
  %52 = load i32, i32* %start36, align 4, !dbg !9002
  %53 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9003
  %len37 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %53, i32 0, i32 7, !dbg !9004
  %54 = load i32, i32* %len37, align 8, !dbg !9004
  %add38 = add nsw i32 %52, %54, !dbg !9005
  %55 = load i32, i32* %cutframe.addr, align 4, !dbg !9006
  %sub39 = sub nsw i32 %add38, %55, !dbg !9007
  %56 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9008
  %endofs40 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %56, i32 0, i32 10, !dbg !9009
  store i32 %sub39, i32* %endofs40, align 4, !dbg !9010
  br label %if.end59, !dbg !9011

if.else41:                                        ; preds = %land.lhs.true31, %if.else28
  %57 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9012
  %start42 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %57, i32 0, i32 8, !dbg !9014
  %58 = load i32, i32* %start42, align 4, !dbg !9014
  %59 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9015
  %len43 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %59, i32 0, i32 7, !dbg !9016
  %60 = load i32, i32* %len43, align 8, !dbg !9016
  %add44 = add nsw i32 %58, %60, !dbg !9017
  %61 = load i32, i32* %cutframe.addr, align 4, !dbg !9018
  %cmp45 = icmp slt i32 %add44, %61, !dbg !9019
  br i1 %cmp45, label %land.lhs.true46, label %if.end58, !dbg !9020

land.lhs.true46:                                  ; preds = %if.else41
  %62 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9021
  %endstill47 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 12, !dbg !9022
  %63 = load i32, i32* %endstill47, align 4, !dbg !9022
  %tobool48 = icmp ne i32 %63, 0, !dbg !9023
  br i1 %tobool48, label %if.then49, label %if.end58, !dbg !9024

if.then49:                                        ; preds = %land.lhs.true46
  %64 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9025
  %enddisp50 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %64, i32 0, i32 16, !dbg !9027
  %65 = load i32, i32* %enddisp50, align 4, !dbg !9027
  %66 = load i32, i32* %cutframe.addr, align 4, !dbg !9028
  %sub51 = sub nsw i32 %65, %66, !dbg !9029
  %67 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9030
  %endstill52 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %67, i32 0, i32 12, !dbg !9031
  %68 = load i32, i32* %endstill52, align 4, !dbg !9032
  %sub53 = sub nsw i32 %68, %sub51, !dbg !9032
  store i32 %sub53, i32* %endstill52, align 4, !dbg !9032
  %69 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9033
  %type54 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %69, i32 0, i32 6, !dbg !9035
  %70 = load i32, i32* %type54, align 4, !dbg !9035
  %cmp55 = icmp eq i32 %70, 1, !dbg !9036
  br i1 %cmp55, label %if.then56, label %if.end57, !dbg !9037

if.then56:                                        ; preds = %if.then49
  store i8 1, i8* %skip_dup, align 1, !dbg !9038
  br label %if.end57, !dbg !9040

if.end57:                                         ; preds = %if.then56, %if.then49
  br label %if.end58, !dbg !9041

if.end58:                                         ; preds = %if.end57, %land.lhs.true46, %if.else41
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then35
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end
  %71 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9042
  %72 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9043
  call void @BKE_sequence_calc(%struct.Scene* %71, %struct.Sequence* %72), !dbg !9044
  %73 = load i8, i8* %skip_dup, align 1, !dbg !9045
  %tobool61 = icmp ne i8 %73, 0, !dbg !9045
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !9047

if.then62:                                        ; preds = %if.end60
  %74 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9048
  %75 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9050
  %call = call %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene* %74, %struct.Scene* null, %struct.Sequence* %75, i32 5), !dbg !9051
  store %struct.Sequence* %call, %struct.Sequence** %seqn, align 8, !dbg !9052
  br label %if.end63, !dbg !9053

if.end63:                                         ; preds = %if.then62, %if.end60
  %76 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9054
  %tobool64 = icmp ne %struct.Sequence* %76, null, !dbg !9054
  br i1 %tobool64, label %if.then65, label %if.end123, !dbg !9056

if.then65:                                        ; preds = %if.end63
  %77 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9057
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %77, i32 0, i32 5, !dbg !9059
  %78 = load i32, i32* %flag, align 8, !dbg !9060
  %or = or i32 %78, 1, !dbg !9060
  store i32 %or, i32* %flag, align 8, !dbg !9060
  %79 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9061
  %startstill66 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %79, i32 0, i32 11, !dbg !9063
  %80 = load i32, i32* %startstill66, align 8, !dbg !9063
  %tobool67 = icmp ne i32 %80, 0, !dbg !9064
  br i1 %tobool67, label %land.lhs.true68, label %if.else82, !dbg !9065

land.lhs.true68:                                  ; preds = %if.then65
  %81 = load i32, i32* %cutframe.addr, align 4, !dbg !9066
  %82 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9067
  %start69 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %82, i32 0, i32 8, !dbg !9068
  %83 = load i32, i32* %start69, align 4, !dbg !9068
  %add70 = add nsw i32 %83, 1, !dbg !9069
  %cmp71 = icmp eq i32 %81, %add70, !dbg !9070
  br i1 %cmp71, label %if.then72, label %if.else82, !dbg !9071

if.then72:                                        ; preds = %land.lhs.true68
  %start73 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !9072
  %84 = load i32, i32* %start73, align 4, !dbg !9072
  %85 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9074
  %start74 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %85, i32 0, i32 8, !dbg !9075
  store i32 %84, i32* %start74, align 4, !dbg !9076
  %start75 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !9077
  %86 = load i32, i32* %start75, align 4, !dbg !9077
  %87 = load i32, i32* %cutframe.addr, align 4, !dbg !9078
  %sub76 = sub nsw i32 %86, %87, !dbg !9079
  %88 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9080
  %startstill77 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %88, i32 0, i32 11, !dbg !9081
  store i32 %sub76, i32* %startstill77, align 8, !dbg !9082
  %endofs78 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 7, !dbg !9083
  %89 = load i32, i32* %endofs78, align 4, !dbg !9083
  %90 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9084
  %endofs79 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %90, i32 0, i32 10, !dbg !9085
  store i32 %89, i32* %endofs79, align 4, !dbg !9086
  %endstill80 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !9087
  %91 = load i32, i32* %endstill80, align 4, !dbg !9087
  %92 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9088
  %endstill81 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %92, i32 0, i32 12, !dbg !9089
  store i32 %91, i32* %endstill81, align 4, !dbg !9090
  br label %if.end122, !dbg !9091

if.else82:                                        ; preds = %land.lhs.true68, %if.then65
  %93 = load i32, i32* %cutframe.addr, align 4, !dbg !9092
  %94 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9094
  %start83 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %94, i32 0, i32 8, !dbg !9095
  %95 = load i32, i32* %start83, align 4, !dbg !9095
  %cmp84 = icmp sge i32 %93, %95, !dbg !9096
  br i1 %cmp84, label %land.lhs.true85, label %if.else99, !dbg !9097

land.lhs.true85:                                  ; preds = %if.else82
  %96 = load i32, i32* %cutframe.addr, align 4, !dbg !9098
  %97 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9099
  %start86 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %97, i32 0, i32 8, !dbg !9100
  %98 = load i32, i32* %start86, align 4, !dbg !9100
  %99 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9101
  %len87 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %99, i32 0, i32 7, !dbg !9102
  %100 = load i32, i32* %len87, align 8, !dbg !9102
  %add88 = add nsw i32 %98, %100, !dbg !9103
  %cmp89 = icmp sle i32 %96, %add88, !dbg !9104
  br i1 %cmp89, label %if.then90, label %if.else99, !dbg !9105

if.then90:                                        ; preds = %land.lhs.true85
  %101 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9106
  %startstill91 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %101, i32 0, i32 11, !dbg !9108
  store i32 0, i32* %startstill91, align 8, !dbg !9109
  %102 = load i32, i32* %cutframe.addr, align 4, !dbg !9110
  %start92 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 0, !dbg !9111
  %103 = load i32, i32* %start92, align 4, !dbg !9111
  %sub93 = sub nsw i32 %102, %103, !dbg !9112
  %104 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9113
  %startofs94 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %104, i32 0, i32 9, !dbg !9114
  store i32 %sub93, i32* %startofs94, align 8, !dbg !9115
  %endofs95 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 7, !dbg !9116
  %105 = load i32, i32* %endofs95, align 4, !dbg !9116
  %106 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9117
  %endofs96 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %106, i32 0, i32 10, !dbg !9118
  store i32 %105, i32* %endofs96, align 4, !dbg !9119
  %endstill97 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 3, !dbg !9120
  %107 = load i32, i32* %endstill97, align 4, !dbg !9120
  %108 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9121
  %endstill98 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %108, i32 0, i32 12, !dbg !9122
  store i32 %107, i32* %endstill98, align 4, !dbg !9123
  br label %if.end121, !dbg !9124

if.else99:                                        ; preds = %land.lhs.true85, %if.else82
  %109 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9125
  %start100 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %109, i32 0, i32 8, !dbg !9127
  %110 = load i32, i32* %start100, align 4, !dbg !9127
  %111 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9128
  %len101 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %111, i32 0, i32 7, !dbg !9129
  %112 = load i32, i32* %len101, align 8, !dbg !9129
  %add102 = add nsw i32 %110, %112, !dbg !9130
  %113 = load i32, i32* %cutframe.addr, align 4, !dbg !9131
  %cmp103 = icmp slt i32 %add102, %113, !dbg !9132
  br i1 %cmp103, label %land.lhs.true104, label %if.end120, !dbg !9133

land.lhs.true104:                                 ; preds = %if.else99
  %114 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9134
  %endstill105 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %114, i32 0, i32 12, !dbg !9135
  %115 = load i32, i32* %endstill105, align 4, !dbg !9135
  %tobool106 = icmp ne i32 %115, 0, !dbg !9136
  br i1 %tobool106, label %if.then107, label %if.end120, !dbg !9137

if.then107:                                       ; preds = %land.lhs.true104
  %116 = load i32, i32* %cutframe.addr, align 4, !dbg !9138
  %len108 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 10, !dbg !9140
  %117 = load i32, i32* %len108, align 4, !dbg !9140
  %sub109 = sub nsw i32 %116, %117, !dbg !9141
  %add110 = add nsw i32 %sub109, 1, !dbg !9142
  %118 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9143
  %start111 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %118, i32 0, i32 8, !dbg !9144
  store i32 %add110, i32* %start111, align 4, !dbg !9145
  %len112 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 10, !dbg !9146
  %119 = load i32, i32* %len112, align 4, !dbg !9146
  %sub113 = sub nsw i32 %119, 1, !dbg !9147
  %120 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9148
  %startofs114 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %120, i32 0, i32 9, !dbg !9149
  store i32 %sub113, i32* %startofs114, align 8, !dbg !9150
  %enddisp115 = getelementptr inbounds %struct.TransSeq, %struct.TransSeq* %ts, i32 0, i32 5, !dbg !9151
  %121 = load i32, i32* %enddisp115, align 4, !dbg !9151
  %122 = load i32, i32* %cutframe.addr, align 4, !dbg !9152
  %sub116 = sub nsw i32 %121, %122, !dbg !9153
  %sub117 = sub nsw i32 %sub116, 1, !dbg !9154
  %123 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9155
  %endstill118 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %123, i32 0, i32 12, !dbg !9156
  store i32 %sub117, i32* %endstill118, align 4, !dbg !9157
  %124 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9158
  %startstill119 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %124, i32 0, i32 11, !dbg !9159
  store i32 0, i32* %startstill119, align 8, !dbg !9160
  br label %if.end120, !dbg !9161

if.end120:                                        ; preds = %if.then107, %land.lhs.true104, %if.else99
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.then90
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.then72
  %125 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9162
  %126 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9163
  call void @BKE_sequence_calc(%struct.Scene* %125, %struct.Sequence* %126), !dbg !9164
  br label %if.end123, !dbg !9165

if.end123:                                        ; preds = %if.end122, %if.end63
  %127 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9166
  ret %struct.Sequence* %127, !dbg !9167
}

declare dso_local void @BLI_addtail(%struct.ListBase*, i8*) #2

declare dso_local void @BLI_remlink(%struct.ListBase*, i8*) #2

declare dso_local %struct.Sequence* @BKE_sequence_dupli_recursive(%struct.Scene*, %struct.Scene*, %struct.Sequence*, i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare dso_local void @BKE_sequence_base_dupli_recursive(%struct.Scene*, %struct.Scene*, %struct.ListBase*, %struct.ListBase*, i32) #2

declare dso_local void @BLI_movelisttolist(%struct.ListBase*, %struct.ListBase*) #2

declare dso_local i32 @BKE_sequencer_recursive_apply(%struct.Sequence*, i32 (%struct.Sequence*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @apply_unique_name_cb(%struct.Sequence* %seq, i8* %arg_pt) #0 !dbg !9168 {
entry:
  %seq.addr = alloca %struct.Sequence*, align 8
  %arg_pt.addr = alloca i8*, align 8
  %scene = alloca %struct.Scene*, align 8
  %name = alloca [62 x i8], align 16
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9171, metadata !DIExpression()), !dbg !9172
  store i8* %arg_pt, i8** %arg_pt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg_pt.addr, metadata !9173, metadata !DIExpression()), !dbg !9174
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !9175, metadata !DIExpression()), !dbg !9176
  %0 = load i8*, i8** %arg_pt.addr, align 8, !dbg !9177
  %1 = bitcast i8* %0 to %struct.Scene*, !dbg !9178
  store %struct.Scene* %1, %struct.Scene** %scene, align 8, !dbg !9176
  call void @llvm.dbg.declare(metadata [62 x i8]* %name, metadata !9179, metadata !DIExpression()), !dbg !9183
  %arraydecay = getelementptr inbounds [62 x i8], [62 x i8]* %name, i64 0, i64 0, !dbg !9184
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9185
  %name1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 4, !dbg !9186
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %name1, i64 0, i64 0, !dbg !9185
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 2, !dbg !9187
  %call = call i8* @BLI_strncpy_utf8(i8* %arraydecay, i8* %add.ptr, i64 62), !dbg !9188
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9189
  %ed = getelementptr inbounds %struct.Scene, %struct.Scene* %3, i32 0, i32 19, !dbg !9190
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9190
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 1, !dbg !9191
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9192
  call void @BKE_sequence_base_unique_name_recursive(%struct.ListBase* %seqbase, %struct.Sequence* %5), !dbg !9193
  %6 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !9194
  %arraydecay3 = getelementptr inbounds [62 x i8], [62 x i8]* %name, i64 0, i64 0, !dbg !9195
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9196
  %name4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 4, !dbg !9197
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %name4, i64 0, i64 0, !dbg !9196
  %add.ptr6 = getelementptr inbounds i8, i8* %arraydecay5, i64 2, !dbg !9198
  call void @BKE_sequencer_dupe_animdata(%struct.Scene* %6, i8* %arraydecay3, i8* %add.ptr6), !dbg !9199
  ret i32 1, !dbg !9200
}

declare dso_local i8* @BLI_strncpy_utf8(i8*, i8*, i64) #2

declare dso_local void @BKE_sequence_base_unique_name_recursive(%struct.ListBase*, %struct.Sequence*) #2

declare dso_local void @BKE_sequencer_dupe_animdata(%struct.Scene*, i8*, i8*) #2

declare dso_local %struct.ARegion* @CTX_wm_region(%struct.bContext*) #2

declare dso_local i32 @WM_operator_confirm(%struct.bContext*, %struct.wmOperator*, %struct.wmEvent*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !9201 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %seq1 = alloca %struct.Sequence*, align 8
  %seq2 = alloca %struct.Sequence*, align 8
  %seq3 = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9204, metadata !DIExpression()), !dbg !9205
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9206, metadata !DIExpression()), !dbg !9207
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq1, metadata !9208, metadata !DIExpression()), !dbg !9209
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq2, metadata !9210, metadata !DIExpression()), !dbg !9211
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq3, metadata !9212, metadata !DIExpression()), !dbg !9213
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9214
  %tobool = icmp ne %struct.Sequence* %0, null, !dbg !9214
  br i1 %tobool, label %if.else, label %if.then, !dbg !9216

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !9217
  br label %return, !dbg !9217

if.else:                                          ; preds = %entry
  %1 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9218
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %1, i32 0, i32 6, !dbg !9220
  %2 = load i32, i32* %type, align 4, !dbg !9220
  %and = and i32 %2, 8, !dbg !9221
  %tobool1 = icmp ne i32 %and, 0, !dbg !9221
  br i1 %tobool1, label %if.else5, label %if.then2, !dbg !9222

if.then2:                                         ; preds = %if.else
  %3 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9223
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %3, i32 0, i32 5, !dbg !9224
  %4 = load i32, i32* %flag, align 8, !dbg !9224
  %and3 = and i32 %4, 1, !dbg !9225
  %tobool4 = icmp ne i32 %and3, 0, !dbg !9225
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !9226

cond.true:                                        ; preds = %if.then2
  br label %cond.end, !dbg !9226

cond.false:                                       ; preds = %if.then2
  %5 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9227
  br label %cond.end, !dbg !9226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.Sequence* [ null, %cond.true ], [ %5, %cond.false ], !dbg !9226
  store %struct.Sequence* %cond, %struct.Sequence** %retval, align 8, !dbg !9228
  br label %return, !dbg !9228

if.else5:                                         ; preds = %if.else
  %6 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9229
  %flag6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 5, !dbg !9231
  %7 = load i32, i32* %flag6, align 8, !dbg !9231
  %and7 = and i32 %7, 1, !dbg !9232
  %tobool8 = icmp ne i32 %and7, 0, !dbg !9232
  br i1 %tobool8, label %if.end64, label %if.then9, !dbg !9233

if.then9:                                         ; preds = %if.else5
  %8 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9234
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9236
  %seq110 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 33, !dbg !9237
  %10 = load %struct.Sequence*, %struct.Sequence** %seq110, align 8, !dbg !9237
  %call = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %8, %struct.Sequence* %10), !dbg !9238
  store %struct.Sequence* %call, %struct.Sequence** %seq1, align 8, !dbg !9239
  %11 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9240
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9241
  %seq211 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 34, !dbg !9242
  %13 = load %struct.Sequence*, %struct.Sequence** %seq211, align 8, !dbg !9242
  %call12 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %11, %struct.Sequence* %13), !dbg !9243
  store %struct.Sequence* %call12, %struct.Sequence** %seq2, align 8, !dbg !9244
  %14 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9245
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9246
  %seq313 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 35, !dbg !9247
  %16 = load %struct.Sequence*, %struct.Sequence** %seq313, align 8, !dbg !9247
  %call14 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %14, %struct.Sequence* %16), !dbg !9248
  store %struct.Sequence* %call14, %struct.Sequence** %seq3, align 8, !dbg !9249
  %17 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9250
  %18 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9252
  %seq115 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %18, i32 0, i32 33, !dbg !9253
  %19 = load %struct.Sequence*, %struct.Sequence** %seq115, align 8, !dbg !9253
  %cmp = icmp eq %struct.Sequence* %17, %19, !dbg !9254
  br i1 %cmp, label %land.lhs.true, label %if.else22, !dbg !9255

land.lhs.true:                                    ; preds = %if.then9
  %20 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9256
  %21 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9257
  %seq216 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 34, !dbg !9258
  %22 = load %struct.Sequence*, %struct.Sequence** %seq216, align 8, !dbg !9258
  %cmp17 = icmp eq %struct.Sequence* %20, %22, !dbg !9259
  br i1 %cmp17, label %land.lhs.true18, label %if.else22, !dbg !9260

land.lhs.true18:                                  ; preds = %land.lhs.true
  %23 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9261
  %24 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9262
  %seq319 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 35, !dbg !9263
  %25 = load %struct.Sequence*, %struct.Sequence** %seq319, align 8, !dbg !9263
  %cmp20 = icmp eq %struct.Sequence* %23, %25, !dbg !9264
  br i1 %cmp20, label %if.then21, label %if.else22, !dbg !9265

if.then21:                                        ; preds = %land.lhs.true18
  br label %if.end63, !dbg !9266

if.else22:                                        ; preds = %land.lhs.true18, %land.lhs.true, %if.then9
  %26 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9268
  %tobool23 = icmp ne %struct.Sequence* %26, null, !dbg !9268
  br i1 %tobool23, label %if.then27, label %lor.lhs.false, !dbg !9270

lor.lhs.false:                                    ; preds = %if.else22
  %27 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9271
  %tobool24 = icmp ne %struct.Sequence* %27, null, !dbg !9271
  br i1 %tobool24, label %if.then27, label %lor.lhs.false25, !dbg !9272

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %28 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9273
  %tobool26 = icmp ne %struct.Sequence* %28, null, !dbg !9273
  br i1 %tobool26, label %if.then27, label %if.else61, !dbg !9274

if.then27:                                        ; preds = %lor.lhs.false25, %lor.lhs.false, %if.else22
  %29 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9275
  %tobool28 = icmp ne %struct.Sequence* %29, null, !dbg !9277
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !9277

cond.true29:                                      ; preds = %if.then27
  %30 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9278
  br label %cond.end36, !dbg !9277

cond.false30:                                     ; preds = %if.then27
  %31 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9279
  %tobool31 = icmp ne %struct.Sequence* %31, null, !dbg !9280
  br i1 %tobool31, label %cond.true32, label %cond.false33, !dbg !9280

cond.true32:                                      ; preds = %cond.false30
  %32 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9281
  br label %cond.end34, !dbg !9280

cond.false33:                                     ; preds = %cond.false30
  %33 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9282
  br label %cond.end34, !dbg !9280

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi %struct.Sequence* [ %32, %cond.true32 ], [ %33, %cond.false33 ], !dbg !9280
  br label %cond.end36, !dbg !9277

cond.end36:                                       ; preds = %cond.end34, %cond.true29
  %cond37 = phi %struct.Sequence* [ %30, %cond.true29 ], [ %cond35, %cond.end34 ], !dbg !9277
  %34 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9283
  %seq138 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 33, !dbg !9284
  store %struct.Sequence* %cond37, %struct.Sequence** %seq138, align 8, !dbg !9285
  %35 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9286
  %tobool39 = icmp ne %struct.Sequence* %35, null, !dbg !9287
  br i1 %tobool39, label %cond.true40, label %cond.false41, !dbg !9287

cond.true40:                                      ; preds = %cond.end36
  %36 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9288
  br label %cond.end47, !dbg !9287

cond.false41:                                     ; preds = %cond.end36
  %37 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9289
  %tobool42 = icmp ne %struct.Sequence* %37, null, !dbg !9290
  br i1 %tobool42, label %cond.true43, label %cond.false44, !dbg !9290

cond.true43:                                      ; preds = %cond.false41
  %38 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9291
  br label %cond.end45, !dbg !9290

cond.false44:                                     ; preds = %cond.false41
  %39 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9292
  br label %cond.end45, !dbg !9290

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi %struct.Sequence* [ %38, %cond.true43 ], [ %39, %cond.false44 ], !dbg !9290
  br label %cond.end47, !dbg !9287

cond.end47:                                       ; preds = %cond.end45, %cond.true40
  %cond48 = phi %struct.Sequence* [ %36, %cond.true40 ], [ %cond46, %cond.end45 ], !dbg !9287
  %40 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9293
  %seq249 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %40, i32 0, i32 34, !dbg !9294
  store %struct.Sequence* %cond48, %struct.Sequence** %seq249, align 8, !dbg !9295
  %41 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9296
  %tobool50 = icmp ne %struct.Sequence* %41, null, !dbg !9297
  br i1 %tobool50, label %cond.true51, label %cond.false52, !dbg !9297

cond.true51:                                      ; preds = %cond.end47
  %42 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9298
  br label %cond.end58, !dbg !9297

cond.false52:                                     ; preds = %cond.end47
  %43 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9299
  %tobool53 = icmp ne %struct.Sequence* %43, null, !dbg !9300
  br i1 %tobool53, label %cond.true54, label %cond.false55, !dbg !9300

cond.true54:                                      ; preds = %cond.false52
  %44 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9301
  br label %cond.end56, !dbg !9300

cond.false55:                                     ; preds = %cond.false52
  %45 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9302
  br label %cond.end56, !dbg !9300

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi %struct.Sequence* [ %44, %cond.true54 ], [ %45, %cond.false55 ], !dbg !9300
  br label %cond.end58, !dbg !9297

cond.end58:                                       ; preds = %cond.end56, %cond.true51
  %cond59 = phi %struct.Sequence* [ %42, %cond.true51 ], [ %cond57, %cond.end56 ], !dbg !9297
  %46 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9303
  %seq360 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %46, i32 0, i32 35, !dbg !9304
  store %struct.Sequence* %cond59, %struct.Sequence** %seq360, align 8, !dbg !9305
  %47 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9306
  %48 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9307
  call void @BKE_sequencer_update_changed_seq_and_deps(%struct.Scene* %47, %struct.Sequence* %48, i32 1, i32 1), !dbg !9308
  br label %if.end, !dbg !9309

if.else61:                                        ; preds = %lor.lhs.false25
  %49 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9310
  %flag62 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %49, i32 0, i32 5, !dbg !9311
  %50 = load i32, i32* %flag62, align 8, !dbg !9312
  %or = or i32 %50, 1, !dbg !9312
  store i32 %or, i32* %flag62, align 8, !dbg !9312
  br label %if.end

if.end:                                           ; preds = %if.else61, %cond.end58
  br label %if.end63

if.end63:                                         ; preds = %if.end, %if.then21
  br label %if.end64, !dbg !9313

if.end64:                                         ; preds = %if.end63, %if.else5
  br label %if.end65

if.end65:                                         ; preds = %if.end64
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  %51 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9314
  %flag67 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %51, i32 0, i32 5, !dbg !9316
  %52 = load i32, i32* %flag67, align 8, !dbg !9316
  %and68 = and i32 %52, 1, !dbg !9317
  %tobool69 = icmp ne i32 %and68, 0, !dbg !9317
  br i1 %tobool69, label %if.then70, label %if.else86, !dbg !9318

if.then70:                                        ; preds = %if.end66
  %53 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9319
  %54 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9322
  %seq171 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %54, i32 0, i32 33, !dbg !9323
  %55 = load %struct.Sequence*, %struct.Sequence** %seq171, align 8, !dbg !9323
  %call72 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %53, %struct.Sequence* %55), !dbg !9324
  store %struct.Sequence* %call72, %struct.Sequence** %seq1, align 8, !dbg !9325
  %tobool73 = icmp ne %struct.Sequence* %call72, null, !dbg !9325
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !9326

if.then74:                                        ; preds = %if.then70
  %56 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9327
  store %struct.Sequence* %56, %struct.Sequence** %retval, align 8, !dbg !9328
  br label %return, !dbg !9328

if.end75:                                         ; preds = %if.then70
  %57 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9329
  %58 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9331
  %seq276 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %58, i32 0, i32 34, !dbg !9332
  %59 = load %struct.Sequence*, %struct.Sequence** %seq276, align 8, !dbg !9332
  %call77 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %57, %struct.Sequence* %59), !dbg !9333
  store %struct.Sequence* %call77, %struct.Sequence** %seq2, align 8, !dbg !9334
  %tobool78 = icmp ne %struct.Sequence* %call77, null, !dbg !9334
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !9335

if.then79:                                        ; preds = %if.end75
  %60 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9336
  store %struct.Sequence* %60, %struct.Sequence** %retval, align 8, !dbg !9337
  br label %return, !dbg !9337

if.end80:                                         ; preds = %if.end75
  %61 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9338
  %62 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9340
  %seq381 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %62, i32 0, i32 35, !dbg !9341
  %63 = load %struct.Sequence*, %struct.Sequence** %seq381, align 8, !dbg !9341
  %call82 = call %struct.Sequence* @del_seq_find_replace_recurs(%struct.Scene* %61, %struct.Sequence* %63), !dbg !9342
  store %struct.Sequence* %call82, %struct.Sequence** %seq3, align 8, !dbg !9343
  %tobool83 = icmp ne %struct.Sequence* %call82, null, !dbg !9343
  br i1 %tobool83, label %if.then84, label %if.else85, !dbg !9344

if.then84:                                        ; preds = %if.end80
  %64 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9345
  store %struct.Sequence* %64, %struct.Sequence** %retval, align 8, !dbg !9346
  br label %return, !dbg !9346

if.else85:                                        ; preds = %if.end80
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !9347
  br label %return, !dbg !9347

if.else86:                                        ; preds = %if.end66
  %65 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9348
  store %struct.Sequence* %65, %struct.Sequence** %retval, align 8, !dbg !9349
  br label %return, !dbg !9349

return:                                           ; preds = %if.else86, %if.else85, %if.then84, %if.then79, %if.then74, %cond.end, %if.then
  %66 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !9350
  ret %struct.Sequence* %66, !dbg !9350
}

; Function Attrs: noinline nounwind uwtable
define internal void @del_seq_clear_modifiers_recurs(%struct.Scene* %scene, %struct.Sequence* %deleting_sequence) #0 !dbg !9351 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %deleting_sequence.addr = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %current_sequence = alloca %struct.Sequence*, align 8
  %iter_macro = alloca %struct.SeqIterator, align 8
  %smd = alloca %struct.SequenceModifierData*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9354, metadata !DIExpression()), !dbg !9355
  store %struct.Sequence* %deleting_sequence, %struct.Sequence** %deleting_sequence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %deleting_sequence.addr, metadata !9356, metadata !DIExpression()), !dbg !9357
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !9358, metadata !DIExpression()), !dbg !9359
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9360
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !9361
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !9359
  call void @llvm.dbg.declare(metadata %struct.Sequence** %current_sequence, metadata !9362, metadata !DIExpression()), !dbg !9363
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro, metadata !9364, metadata !DIExpression()), !dbg !9366
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9367
  call void @BKE_sequence_iterator_begin(%struct.Editing* %1, %struct.SeqIterator* %iter_macro, i8 zeroext 1), !dbg !9367
  br label %for.cond, !dbg !9367

for.cond:                                         ; preds = %for.inc9, %entry
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 4, !dbg !9369
  %2 = load i32, i32* %valid, align 8, !dbg !9369
  %tobool = icmp ne i32 %2, 0, !dbg !9367
  br i1 %tobool, label %for.body, label %for.end10, !dbg !9367

for.body:                                         ; preds = %for.cond
  %seq = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 3, !dbg !9371
  %3 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9371
  store %struct.Sequence* %3, %struct.Sequence** %current_sequence, align 8, !dbg !9371
  %4 = load %struct.Sequence*, %struct.Sequence** %current_sequence, align 8, !dbg !9373
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 5, !dbg !9376
  %5 = load i32, i32* %flag, align 8, !dbg !9376
  %and = and i32 %5, 1, !dbg !9377
  %tobool1 = icmp ne i32 %and, 0, !dbg !9377
  br i1 %tobool1, label %if.end8, label %land.lhs.true, !dbg !9378

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.Sequence*, %struct.Sequence** %current_sequence, align 8, !dbg !9379
  %7 = load %struct.Sequence*, %struct.Sequence** %deleting_sequence.addr, align 8, !dbg !9380
  %cmp = icmp ne %struct.Sequence* %6, %7, !dbg !9381
  br i1 %cmp, label %if.then, label %if.end8, !dbg !9382

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.SequenceModifierData** %smd, metadata !9383, metadata !DIExpression()), !dbg !9399
  %8 = load %struct.Sequence*, %struct.Sequence** %current_sequence, align 8, !dbg !9400
  %modifiers = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 51, !dbg !9402
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %modifiers, i32 0, i32 0, !dbg !9403
  %9 = load i8*, i8** %first, align 8, !dbg !9403
  %10 = bitcast i8* %9 to %struct.SequenceModifierData*, !dbg !9400
  store %struct.SequenceModifierData* %10, %struct.SequenceModifierData** %smd, align 8, !dbg !9404
  br label %for.cond2, !dbg !9405

for.cond2:                                        ; preds = %for.inc, %if.then
  %11 = load %struct.SequenceModifierData*, %struct.SequenceModifierData** %smd, align 8, !dbg !9406
  %tobool3 = icmp ne %struct.SequenceModifierData* %11, null, !dbg !9408
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !9408

for.body4:                                        ; preds = %for.cond2
  %12 = load %struct.SequenceModifierData*, %struct.SequenceModifierData** %smd, align 8, !dbg !9409
  %mask_sequence = getelementptr inbounds %struct.SequenceModifierData, %struct.SequenceModifierData* %12, i32 0, i32 7, !dbg !9412
  %13 = load %struct.Sequence*, %struct.Sequence** %mask_sequence, align 8, !dbg !9412
  %14 = load %struct.Sequence*, %struct.Sequence** %deleting_sequence.addr, align 8, !dbg !9413
  %cmp5 = icmp eq %struct.Sequence* %13, %14, !dbg !9414
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !9415

if.then6:                                         ; preds = %for.body4
  %15 = load %struct.SequenceModifierData*, %struct.SequenceModifierData** %smd, align 8, !dbg !9416
  %mask_sequence7 = getelementptr inbounds %struct.SequenceModifierData, %struct.SequenceModifierData* %15, i32 0, i32 7, !dbg !9418
  store %struct.Sequence* null, %struct.Sequence** %mask_sequence7, align 8, !dbg !9419
  br label %if.end, !dbg !9420

if.end:                                           ; preds = %if.then6, %for.body4
  br label %for.inc, !dbg !9421

for.inc:                                          ; preds = %if.end
  %16 = load %struct.SequenceModifierData*, %struct.SequenceModifierData** %smd, align 8, !dbg !9422
  %next = getelementptr inbounds %struct.SequenceModifierData, %struct.SequenceModifierData* %16, i32 0, i32 0, !dbg !9423
  %17 = load %struct.SequenceModifierData*, %struct.SequenceModifierData** %next, align 8, !dbg !9423
  store %struct.SequenceModifierData* %17, %struct.SequenceModifierData** %smd, align 8, !dbg !9424
  br label %for.cond2, !dbg !9425, !llvm.loop !9426

for.end:                                          ; preds = %for.cond2
  br label %if.end8, !dbg !9428

if.end8:                                          ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc9, !dbg !9429

for.inc9:                                         ; preds = %if.end8
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro), !dbg !9369
  br label %for.cond, !dbg !9369, !llvm.loop !9430

for.end10:                                        ; preds = %for.cond
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro), !dbg !9432
  ret void, !dbg !9433
}

; Function Attrs: noinline nounwind uwtable
define internal void @recurs_del_seq_flag(%struct.Scene* %scene, %struct.ListBase* %lb, i16 signext %flag, i16 signext %deleteall) #0 !dbg !9434 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %lb.addr = alloca %struct.ListBase*, align 8
  %flag.addr = alloca i16, align 2
  %deleteall.addr = alloca i16, align 2
  %seq = alloca %struct.Sequence*, align 8
  %seqn = alloca %struct.Sequence*, align 8
  %last_seq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9437, metadata !DIExpression()), !dbg !9438
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !9439, metadata !DIExpression()), !dbg !9440
  store i16 %flag, i16* %flag.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %flag.addr, metadata !9441, metadata !DIExpression()), !dbg !9442
  store i16 %deleteall, i16* %deleteall.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %deleteall.addr, metadata !9443, metadata !DIExpression()), !dbg !9444
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9445, metadata !DIExpression()), !dbg !9446
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqn, metadata !9447, metadata !DIExpression()), !dbg !9448
  call void @llvm.dbg.declare(metadata %struct.Sequence** %last_seq, metadata !9449, metadata !DIExpression()), !dbg !9450
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9451
  %call = call %struct.Sequence* @BKE_sequencer_active_get(%struct.Scene* %0), !dbg !9452
  store %struct.Sequence* %call, %struct.Sequence** %last_seq, align 8, !dbg !9450
  %1 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9453
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %1, i32 0, i32 0, !dbg !9454
  %2 = load i8*, i8** %first, align 8, !dbg !9454
  %3 = bitcast i8* %2 to %struct.Sequence*, !dbg !9453
  store %struct.Sequence* %3, %struct.Sequence** %seq, align 8, !dbg !9455
  br label %while.cond, !dbg !9456

while.cond:                                       ; preds = %if.end11, %entry
  %4 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9457
  %tobool = icmp ne %struct.Sequence* %4, null, !dbg !9456
  br i1 %tobool, label %while.body, label %while.end, !dbg !9456

while.body:                                       ; preds = %while.cond
  %5 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9458
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %5, i32 0, i32 0, !dbg !9460
  %6 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !9460
  store %struct.Sequence* %6, %struct.Sequence** %seqn, align 8, !dbg !9461
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9462
  %flag1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 5, !dbg !9464
  %8 = load i32, i32* %flag1, align 8, !dbg !9464
  %9 = load i16, i16* %flag.addr, align 2, !dbg !9465
  %conv = sext i16 %9 to i32, !dbg !9465
  %and = and i32 %8, %conv, !dbg !9466
  %tobool2 = icmp ne i32 %and, 0, !dbg !9466
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !9467

lor.lhs.false:                                    ; preds = %while.body
  %10 = load i16, i16* %deleteall.addr, align 2, !dbg !9468
  %conv3 = sext i16 %10 to i32, !dbg !9468
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !9468
  br i1 %tobool4, label %if.then, label %if.end11, !dbg !9469

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %11 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9470
  %12 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9472
  %13 = bitcast %struct.Sequence* %12 to i8*, !dbg !9472
  call void @BLI_remlink(%struct.ListBase* %11, i8* %13), !dbg !9473
  %14 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9474
  %15 = load %struct.Sequence*, %struct.Sequence** %last_seq, align 8, !dbg !9476
  %cmp = icmp eq %struct.Sequence* %14, %15, !dbg !9477
  br i1 %cmp, label %if.then6, label %if.end, !dbg !9478

if.then6:                                         ; preds = %if.then
  %16 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9479
  call void @BKE_sequencer_active_set(%struct.Scene* %16, %struct.Sequence* null), !dbg !9480
  br label %if.end, !dbg !9480

if.end:                                           ; preds = %if.then6, %if.then
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9481
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 6, !dbg !9483
  %18 = load i32, i32* %type, align 4, !dbg !9483
  %cmp7 = icmp eq i32 %18, 1, !dbg !9484
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !9485

if.then9:                                         ; preds = %if.end
  %19 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9486
  %20 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9487
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %20, i32 0, i32 36, !dbg !9488
  %21 = load i16, i16* %flag.addr, align 2, !dbg !9489
  call void @recurs_del_seq_flag(%struct.Scene* %19, %struct.ListBase* %seqbase, i16 signext %21, i16 signext 1), !dbg !9490
  br label %if.end10, !dbg !9490

if.end10:                                         ; preds = %if.then9, %if.end
  %22 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9491
  %23 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9492
  call void @BKE_sequence_free(%struct.Scene* %22, %struct.Sequence* %23), !dbg !9493
  br label %if.end11, !dbg !9494

if.end11:                                         ; preds = %if.end10, %lor.lhs.false
  %24 = load %struct.Sequence*, %struct.Sequence** %seqn, align 8, !dbg !9495
  store %struct.Sequence* %24, %struct.Sequence** %seq, align 8, !dbg !9496
  br label %while.cond, !dbg !9456, !llvm.loop !9497

while.end:                                        ; preds = %while.cond
  ret void, !dbg !9499
}

declare dso_local void @BKE_sequencer_active_set(%struct.Scene*, %struct.Sequence*) #2

declare dso_local void @BKE_sequence_free(%struct.Scene*, %struct.Sequence*) #2

declare dso_local i32 @BKE_sequence_tx_get_final_left(%struct.Sequence*, i8 zeroext) #2

declare dso_local i32 @BKE_sequence_tx_get_final_right(%struct.Sequence*, i8 zeroext) #2

declare dso_local %struct.StripElem* @BKE_sequencer_give_stripelem(%struct.Sequence*, i32) #2

declare dso_local i8* @BLI_strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @BLI_listbase_is_empty(%struct.ListBase* %lb) #0 !dbg !9500 {
entry:
  %lb.addr = alloca %struct.ListBase*, align 8
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !9506, metadata !DIExpression()), !dbg !9507
  %0 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9508
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 0, !dbg !9509
  %1 = load i8*, i8** %first, align 8, !dbg !9509
  %cmp = icmp eq i8* %1, null, !dbg !9510
  %conv = zext i1 %cmp to i32, !dbg !9510
  %conv1 = trunc i32 %conv to i8, !dbg !9511
  ret i8 %conv1, !dbg !9512
}

declare dso_local zeroext i8 @BKE_sequence_base_isolated_sel_check(%struct.ListBase*, i8 zeroext) #2

declare dso_local %struct.Sequence* @BKE_sequence_alloc(%struct.ListBase*, i32, i32) #2

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #5

declare dso_local void @BKE_sequence_invalidate_cache(%struct.Scene*, %struct.Sequence*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_ii(i32 %a, i32 %b) #0 !dbg !9513 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !9517, metadata !DIExpression()), !dbg !9518
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !9519, metadata !DIExpression()), !dbg !9520
  %0 = load i32, i32* %b.addr, align 4, !dbg !9521
  %1 = load i32, i32* %a.addr, align 4, !dbg !9522
  %cmp = icmp slt i32 %0, %1, !dbg !9523
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9524

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !9525
  br label %cond.end, !dbg !9524

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !9526
  br label %cond.end, !dbg !9524

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !9524
  ret i32 %cond, !dbg !9527
}

; Function Attrs: noinline nounwind uwtable
define internal void @BLI_listbase_clear(%struct.ListBase* %lb) #0 !dbg !9528 {
entry:
  %lb.addr = alloca %struct.ListBase*, align 8
  store %struct.ListBase* %lb, %struct.ListBase** %lb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ListBase** %lb.addr, metadata !9532, metadata !DIExpression()), !dbg !9533
  %0 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9534
  %last = getelementptr inbounds %struct.ListBase, %struct.ListBase* %0, i32 0, i32 1, !dbg !9535
  store i8* null, i8** %last, align 8, !dbg !9536
  %1 = load %struct.ListBase*, %struct.ListBase** %lb.addr, align 8, !dbg !9537
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %1, i32 0, i32 0, !dbg !9538
  store i8* null, i8** %first, align 8, !dbg !9539
  ret void, !dbg !9540
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @seq_depends_on_meta(%struct.Sequence* %seq, %struct.Sequence* %seqm) #0 !dbg !9541 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct.Sequence*, align 8
  %seqm.addr = alloca %struct.Sequence*, align 8
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !9544, metadata !DIExpression()), !dbg !9545
  store %struct.Sequence* %seqm, %struct.Sequence** %seqm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqm.addr, metadata !9546, metadata !DIExpression()), !dbg !9547
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9548
  %1 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !9550
  %cmp = icmp eq %struct.Sequence* %0, %1, !dbg !9551
  br i1 %cmp, label %if.then, label %if.else, !dbg !9552

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !9553
  br label %return, !dbg !9553

if.else:                                          ; preds = %entry
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9554
  %seq1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 33, !dbg !9556
  %3 = load %struct.Sequence*, %struct.Sequence** %seq1, align 8, !dbg !9556
  %tobool = icmp ne %struct.Sequence* %3, null, !dbg !9554
  br i1 %tobool, label %land.lhs.true, label %if.else4, !dbg !9557

land.lhs.true:                                    ; preds = %if.else
  %4 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9558
  %seq11 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 33, !dbg !9559
  %5 = load %struct.Sequence*, %struct.Sequence** %seq11, align 8, !dbg !9559
  %6 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !9560
  %call = call i32 @seq_depends_on_meta(%struct.Sequence* %5, %struct.Sequence* %6), !dbg !9561
  %tobool2 = icmp ne i32 %call, 0, !dbg !9561
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !9562

if.then3:                                         ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !9563
  br label %return, !dbg !9563

if.else4:                                         ; preds = %land.lhs.true, %if.else
  %7 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9564
  %seq2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %7, i32 0, i32 34, !dbg !9566
  %8 = load %struct.Sequence*, %struct.Sequence** %seq2, align 8, !dbg !9566
  %tobool5 = icmp ne %struct.Sequence* %8, null, !dbg !9564
  br i1 %tobool5, label %land.lhs.true6, label %if.else11, !dbg !9567

land.lhs.true6:                                   ; preds = %if.else4
  %9 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9568
  %seq27 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 34, !dbg !9569
  %10 = load %struct.Sequence*, %struct.Sequence** %seq27, align 8, !dbg !9569
  %11 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !9570
  %call8 = call i32 @seq_depends_on_meta(%struct.Sequence* %10, %struct.Sequence* %11), !dbg !9571
  %tobool9 = icmp ne i32 %call8, 0, !dbg !9571
  br i1 %tobool9, label %if.then10, label %if.else11, !dbg !9572

if.then10:                                        ; preds = %land.lhs.true6
  store i32 1, i32* %retval, align 4, !dbg !9573
  br label %return, !dbg !9573

if.else11:                                        ; preds = %land.lhs.true6, %if.else4
  %12 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9574
  %seq3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %12, i32 0, i32 35, !dbg !9576
  %13 = load %struct.Sequence*, %struct.Sequence** %seq3, align 8, !dbg !9576
  %tobool12 = icmp ne %struct.Sequence* %13, null, !dbg !9574
  br i1 %tobool12, label %land.lhs.true13, label %if.else18, !dbg !9577

land.lhs.true13:                                  ; preds = %if.else11
  %14 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !9578
  %seq314 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %14, i32 0, i32 35, !dbg !9579
  %15 = load %struct.Sequence*, %struct.Sequence** %seq314, align 8, !dbg !9579
  %16 = load %struct.Sequence*, %struct.Sequence** %seqm.addr, align 8, !dbg !9580
  %call15 = call i32 @seq_depends_on_meta(%struct.Sequence* %15, %struct.Sequence* %16), !dbg !9581
  %tobool16 = icmp ne i32 %call15, 0, !dbg !9581
  br i1 %tobool16, label %if.then17, label %if.else18, !dbg !9582

if.then17:                                        ; preds = %land.lhs.true13
  store i32 1, i32* %retval, align 4, !dbg !9583
  br label %return, !dbg !9583

if.else18:                                        ; preds = %land.lhs.true13, %if.else11
  store i32 0, i32* %retval, align 4, !dbg !9584
  br label %return, !dbg !9584

return:                                           ; preds = %if.else18, %if.then17, %if.then10, %if.then3, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !9585
  ret i32 %17, !dbg !9585
}

declare dso_local i32 @WM_operator_smooth_viewtx_get(%struct.wmOperator*) #2

declare dso_local void @UI_view2d_smooth_view(%struct.bContext*, %struct.ARegion*, %struct.rctf*, i32) #2

declare dso_local %struct.bScreen* @CTX_wm_screen(%struct.bContext*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local void @UI_view2d_curRect_validate(%struct.View2D*) #2

declare dso_local void @UI_view2d_sync(%struct.bScreen*, %struct.ScrArea*, %struct.View2D*, i32) #2

declare dso_local void @ED_area_tag_redraw(%struct.ScrArea*) #2

declare dso_local float @RNA_float_get(%struct.PointerRNA*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @BLI_rcti_size_y(%struct.rcti* %rct) #0 !dbg !9586 {
entry:
  %rct.addr = alloca %struct.rcti*, align 8
  store %struct.rcti* %rct, %struct.rcti** %rct.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rcti** %rct.addr, metadata !9587, metadata !DIExpression()), !dbg !9588
  %0 = load %struct.rcti*, %struct.rcti** %rct.addr, align 8, !dbg !9589
  %ymax = getelementptr inbounds %struct.rcti, %struct.rcti* %0, i32 0, i32 3, !dbg !9590
  %1 = load i32, i32* %ymax, align 4, !dbg !9590
  %2 = load %struct.rcti*, %struct.rcti** %rct.addr, align 8, !dbg !9591
  %ymin = getelementptr inbounds %struct.rcti, %struct.rcti* %2, i32 0, i32 2, !dbg !9592
  %3 = load i32, i32* %ymin, align 4, !dbg !9592
  %sub = sub nsw i32 %1, %3, !dbg !9593
  ret i32 %sub, !dbg !9594
}

declare dso_local void @BLI_rctf_resize(%struct.rctf*, float, float) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.floor.f32(float) #1

declare dso_local void @ED_region_tag_redraw(%struct.ARegion*) #2

declare dso_local %struct.SpaceLink* @CTX_wm_space_data(%struct.bContext*) #2

declare dso_local void @ED_area_tag_refresh(%struct.ScrArea*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @min_ii(i32 %a, i32 %b) #0 !dbg !9595 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !9596, metadata !DIExpression()), !dbg !9597
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !9598, metadata !DIExpression()), !dbg !9599
  %0 = load i32, i32* %a.addr, align 4, !dbg !9600
  %1 = load i32, i32* %b.addr, align 4, !dbg !9601
  %cmp = icmp slt i32 %0, %1, !dbg !9602
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !9603

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %a.addr, align 4, !dbg !9604
  br label %cond.end, !dbg !9603

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %b.addr, align 4, !dbg !9605
  br label %cond.end, !dbg !9603

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %3, %cond.false ], !dbg !9603
  ret i32 %cond, !dbg !9606
}

; Function Attrs: noinline nounwind uwtable
define internal float @BLI_rctf_size_y(%struct.rctf* %rct) #0 !dbg !9607 {
entry:
  %rct.addr = alloca %struct.rctf*, align 8
  store %struct.rctf* %rct, %struct.rctf** %rct.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rctf** %rct.addr, metadata !9608, metadata !DIExpression()), !dbg !9609
  %0 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !9610
  %ymax = getelementptr inbounds %struct.rctf, %struct.rctf* %0, i32 0, i32 3, !dbg !9611
  %1 = load float, float* %ymax, align 4, !dbg !9611
  %2 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !9612
  %ymin = getelementptr inbounds %struct.rctf, %struct.rctf* %2, i32 0, i32 2, !dbg !9613
  %3 = load float, float* %ymin, align 4, !dbg !9613
  %sub = fsub float %1, %3, !dbg !9614
  ret float %sub, !dbg !9615
}

; Function Attrs: noinline nounwind uwtable
define internal float @BLI_rctf_cent_y(%struct.rctf* %rct) #0 !dbg !9616 {
entry:
  %rct.addr = alloca %struct.rctf*, align 8
  store %struct.rctf* %rct, %struct.rctf** %rct.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rctf** %rct.addr, metadata !9617, metadata !DIExpression()), !dbg !9618
  %0 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !9619
  %ymin = getelementptr inbounds %struct.rctf, %struct.rctf* %0, i32 0, i32 2, !dbg !9620
  %1 = load float, float* %ymin, align 4, !dbg !9620
  %2 = load %struct.rctf*, %struct.rctf** %rct.addr, align 8, !dbg !9621
  %ymax = getelementptr inbounds %struct.rctf, %struct.rctf* %2, i32 0, i32 3, !dbg !9622
  %3 = load float, float* %ymax, align 4, !dbg !9622
  %add = fadd float %1, %3, !dbg !9623
  %div = fdiv float %add, 2.000000e+00, !dbg !9624
  ret float %div, !dbg !9625
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @strip_jump_internal(%struct.Scene* %scene, i16 signext %side, i8 zeroext %do_skip_mute, i8 zeroext %do_center) #0 !dbg !9626 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %side.addr = alloca i16, align 2
  %do_skip_mute.addr = alloca i8, align 1
  %do_center.addr = alloca i8, align 1
  %changed = alloca i8, align 1
  %cfra = alloca i32, align 4
  %nfra = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9630, metadata !DIExpression()), !dbg !9631
  store i16 %side, i16* %side.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %side.addr, metadata !9632, metadata !DIExpression()), !dbg !9633
  store i8 %do_skip_mute, i8* %do_skip_mute.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_skip_mute.addr, metadata !9634, metadata !DIExpression()), !dbg !9635
  store i8 %do_center, i8* %do_center.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_center.addr, metadata !9636, metadata !DIExpression()), !dbg !9637
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9638, metadata !DIExpression()), !dbg !9639
  store i8 0, i8* %changed, align 1, !dbg !9639
  call void @llvm.dbg.declare(metadata i32* %cfra, metadata !9640, metadata !DIExpression()), !dbg !9641
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9642
  %r = getelementptr inbounds %struct.Scene, %struct.Scene* %0, i32 0, i32 22, !dbg !9642
  %cfra1 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r, i32 0, i32 5, !dbg !9642
  %1 = load i32, i32* %cfra1, align 8, !dbg !9642
  store i32 %1, i32* %cfra, align 4, !dbg !9641
  call void @llvm.dbg.declare(metadata i32* %nfra, metadata !9643, metadata !DIExpression()), !dbg !9644
  %2 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9645
  %3 = load i32, i32* %cfra, align 4, !dbg !9646
  %4 = load i16, i16* %side.addr, align 2, !dbg !9647
  %5 = load i8, i8* %do_skip_mute.addr, align 1, !dbg !9648
  %6 = load i8, i8* %do_center.addr, align 1, !dbg !9649
  %call = call i32 @find_next_prev_edit(%struct.Scene* %2, i32 %3, i16 signext %4, i8 zeroext %5, i8 zeroext %6), !dbg !9650
  store i32 %call, i32* %nfra, align 4, !dbg !9644
  %7 = load i32, i32* %nfra, align 4, !dbg !9651
  %8 = load i32, i32* %cfra, align 4, !dbg !9653
  %cmp = icmp ne i32 %7, %8, !dbg !9654
  br i1 %cmp, label %if.then, label %if.end, !dbg !9655

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %nfra, align 4, !dbg !9656
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9658
  %r2 = getelementptr inbounds %struct.Scene, %struct.Scene* %10, i32 0, i32 22, !dbg !9658
  %cfra3 = getelementptr inbounds %struct.RenderData, %struct.RenderData* %r2, i32 0, i32 5, !dbg !9658
  store i32 %9, i32* %cfra3, align 8, !dbg !9659
  store i8 1, i8* %changed, align 1, !dbg !9660
  br label %if.end, !dbg !9661

if.end:                                           ; preds = %if.then, %entry
  %11 = load i8, i8* %changed, align 1, !dbg !9662
  ret i8 %11, !dbg !9663
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_next_prev_edit(%struct.Scene* %scene, i32 %cfra, i16 signext %side, i8 zeroext %do_skip_mute, i8 zeroext %do_center) #0 !dbg !9664 {
entry:
  %retval = alloca i32, align 4
  %scene.addr = alloca %struct.Scene*, align 8
  %cfra.addr = alloca i32, align 4
  %side.addr = alloca i16, align 2
  %do_skip_mute.addr = alloca i8, align 1
  %do_center.addr = alloca i8, align 1
  %ed = alloca %struct.Editing*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %dist = alloca i32, align 4
  %best_dist = alloca i32, align 4
  %best_frame = alloca i32, align 4
  %seq_frames = alloca [2 x i32], align 4
  %seq_frames_tot = alloca i32, align 4
  %i = alloca i32, align 4
  %seq_frame = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9667, metadata !DIExpression()), !dbg !9668
  store i32 %cfra, i32* %cfra.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cfra.addr, metadata !9669, metadata !DIExpression()), !dbg !9670
  store i16 %side, i16* %side.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %side.addr, metadata !9671, metadata !DIExpression()), !dbg !9672
  store i8 %do_skip_mute, i8* %do_skip_mute.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_skip_mute.addr, metadata !9673, metadata !DIExpression()), !dbg !9674
  store i8 %do_center, i8* %do_center.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_center.addr, metadata !9675, metadata !DIExpression()), !dbg !9676
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !9677, metadata !DIExpression()), !dbg !9678
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9679
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !9680
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !9678
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9681, metadata !DIExpression()), !dbg !9682
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !9683, metadata !DIExpression()), !dbg !9684
  call void @llvm.dbg.declare(metadata i32* %best_dist, metadata !9685, metadata !DIExpression()), !dbg !9686
  call void @llvm.dbg.declare(metadata i32* %best_frame, metadata !9687, metadata !DIExpression()), !dbg !9688
  %1 = load i32, i32* %cfra.addr, align 4, !dbg !9689
  store i32 %1, i32* %best_frame, align 4, !dbg !9688
  call void @llvm.dbg.declare(metadata [2 x i32]* %seq_frames, metadata !9690, metadata !DIExpression()), !dbg !9691
  call void @llvm.dbg.declare(metadata i32* %seq_frames_tot, metadata !9692, metadata !DIExpression()), !dbg !9693
  store i32 600000, i32* %best_dist, align 4, !dbg !9694
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9695
  %cmp = icmp eq %struct.Editing* %2, null, !dbg !9697
  br i1 %cmp, label %if.then, label %if.end, !dbg !9698

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %cfra.addr, align 4, !dbg !9699
  store i32 %3, i32* %retval, align 4, !dbg !9700
  br label %return, !dbg !9700

if.end:                                           ; preds = %entry
  %4 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9701
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %4, i32 0, i32 0, !dbg !9703
  %5 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !9703
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %5, i32 0, i32 0, !dbg !9704
  %6 = load i8*, i8** %first, align 8, !dbg !9704
  %7 = bitcast i8* %6 to %struct.Sequence*, !dbg !9701
  store %struct.Sequence* %7, %struct.Sequence** %seq, align 8, !dbg !9705
  br label %for.cond, !dbg !9706

for.cond:                                         ; preds = %for.inc32, %if.end
  %8 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9707
  %tobool = icmp ne %struct.Sequence* %8, null, !dbg !9709
  br i1 %tobool, label %for.body, label %for.end33, !dbg !9709

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9710, metadata !DIExpression()), !dbg !9712
  %9 = load i8, i8* %do_skip_mute.addr, align 1, !dbg !9713
  %conv = zext i8 %9 to i32, !dbg !9713
  %tobool1 = icmp ne i32 %conv, 0, !dbg !9713
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !9715

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9716
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 5, !dbg !9717
  %11 = load i32, i32* %flag, align 8, !dbg !9717
  %and = and i32 %11, 32, !dbg !9718
  %tobool2 = icmp ne i32 %and, 0, !dbg !9718
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !9719

if.then3:                                         ; preds = %land.lhs.true
  br label %for.inc32, !dbg !9720

if.end4:                                          ; preds = %land.lhs.true, %for.body
  %12 = load i8, i8* %do_center.addr, align 1, !dbg !9722
  %tobool5 = icmp ne i8 %12, 0, !dbg !9722
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !9724

if.then6:                                         ; preds = %if.end4
  %13 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9725
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 15, !dbg !9727
  %14 = load i32, i32* %startdisp, align 8, !dbg !9727
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9728
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 16, !dbg !9729
  %16 = load i32, i32* %enddisp, align 4, !dbg !9729
  %add = add nsw i32 %14, %16, !dbg !9730
  %div = sdiv i32 %add, 2, !dbg !9731
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %seq_frames, i64 0, i64 0, !dbg !9732
  store i32 %div, i32* %arrayidx, align 4, !dbg !9733
  store i32 1, i32* %seq_frames_tot, align 4, !dbg !9734
  br label %if.end11, !dbg !9735

if.else:                                          ; preds = %if.end4
  %17 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9736
  %startdisp7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 15, !dbg !9738
  %18 = load i32, i32* %startdisp7, align 8, !dbg !9738
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %seq_frames, i64 0, i64 0, !dbg !9739
  store i32 %18, i32* %arrayidx8, align 4, !dbg !9740
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9741
  %enddisp9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 16, !dbg !9742
  %20 = load i32, i32* %enddisp9, align 4, !dbg !9742
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %seq_frames, i64 0, i64 1, !dbg !9743
  store i32 %20, i32* %arrayidx10, align 4, !dbg !9744
  store i32 2, i32* %seq_frames_tot, align 4, !dbg !9745
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then6
  store i32 0, i32* %i, align 4, !dbg !9746
  br label %for.cond12, !dbg !9748

for.cond12:                                       ; preds = %for.inc, %if.end11
  %21 = load i32, i32* %i, align 4, !dbg !9749
  %22 = load i32, i32* %seq_frames_tot, align 4, !dbg !9751
  %cmp13 = icmp slt i32 %21, %22, !dbg !9752
  br i1 %cmp13, label %for.body15, label %for.end, !dbg !9753

for.body15:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata i32* %seq_frame, metadata !9754, metadata !DIExpression()), !dbg !9756
  %23 = load i32, i32* %i, align 4, !dbg !9757
  %idxprom = sext i32 %23 to i64, !dbg !9758
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %seq_frames, i64 0, i64 %idxprom, !dbg !9758
  %24 = load i32, i32* %arrayidx16, align 4, !dbg !9758
  store i32 %24, i32* %seq_frame, align 4, !dbg !9756
  store i32 600000, i32* %dist, align 4, !dbg !9759
  %25 = load i16, i16* %side.addr, align 2, !dbg !9760
  %conv17 = sext i16 %25 to i32, !dbg !9760
  switch i32 %conv17, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb22
  ], !dbg !9761

sw.bb:                                            ; preds = %for.body15
  %26 = load i32, i32* %seq_frame, align 4, !dbg !9762
  %27 = load i32, i32* %cfra.addr, align 4, !dbg !9765
  %cmp18 = icmp slt i32 %26, %27, !dbg !9766
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !9767

if.then20:                                        ; preds = %sw.bb
  %28 = load i32, i32* %cfra.addr, align 4, !dbg !9768
  %29 = load i32, i32* %seq_frame, align 4, !dbg !9770
  %sub = sub nsw i32 %28, %29, !dbg !9771
  store i32 %sub, i32* %dist, align 4, !dbg !9772
  br label %if.end21, !dbg !9773

if.end21:                                         ; preds = %if.then20, %sw.bb
  br label %sw.epilog, !dbg !9774

sw.bb22:                                          ; preds = %for.body15
  %30 = load i32, i32* %seq_frame, align 4, !dbg !9775
  %31 = load i32, i32* %cfra.addr, align 4, !dbg !9777
  %cmp23 = icmp sgt i32 %30, %31, !dbg !9778
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !9779

if.then25:                                        ; preds = %sw.bb22
  %32 = load i32, i32* %seq_frame, align 4, !dbg !9780
  %33 = load i32, i32* %cfra.addr, align 4, !dbg !9782
  %sub26 = sub nsw i32 %32, %33, !dbg !9783
  store i32 %sub26, i32* %dist, align 4, !dbg !9784
  br label %if.end27, !dbg !9785

if.end27:                                         ; preds = %if.then25, %sw.bb22
  br label %sw.epilog, !dbg !9786

sw.epilog:                                        ; preds = %for.body15, %if.end27, %if.end21
  %34 = load i32, i32* %dist, align 4, !dbg !9787
  %35 = load i32, i32* %best_dist, align 4, !dbg !9789
  %cmp28 = icmp slt i32 %34, %35, !dbg !9790
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !9791

if.then30:                                        ; preds = %sw.epilog
  %36 = load i32, i32* %seq_frame, align 4, !dbg !9792
  store i32 %36, i32* %best_frame, align 4, !dbg !9794
  %37 = load i32, i32* %dist, align 4, !dbg !9795
  store i32 %37, i32* %best_dist, align 4, !dbg !9796
  br label %if.end31, !dbg !9797

if.end31:                                         ; preds = %if.then30, %sw.epilog
  br label %for.inc, !dbg !9798

for.inc:                                          ; preds = %if.end31
  %38 = load i32, i32* %i, align 4, !dbg !9799
  %inc = add nsw i32 %38, 1, !dbg !9799
  store i32 %inc, i32* %i, align 4, !dbg !9799
  br label %for.cond12, !dbg !9800, !llvm.loop !9801

for.end:                                          ; preds = %for.cond12
  br label %for.inc32, !dbg !9803

for.inc32:                                        ; preds = %for.end, %if.then3
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9804
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %39, i32 0, i32 0, !dbg !9805
  %40 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !9805
  store %struct.Sequence* %40, %struct.Sequence** %seq, align 8, !dbg !9806
  br label %for.cond, !dbg !9807, !llvm.loop !9808

for.end33:                                        ; preds = %for.cond
  %41 = load i32, i32* %best_frame, align 4, !dbg !9810
  store i32 %41, i32* %retval, align 4, !dbg !9811
  br label %return, !dbg !9811

return:                                           ; preds = %for.end33, %if.then
  %42 = load i32, i32* %retval, align 4, !dbg !9812
  ret i32 %42, !dbg !9812
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.Sequence* @find_next_prev_sequence(%struct.Scene* %scene, %struct.Sequence* %test, i32 %lr, i32 %sel) #0 !dbg !9813 {
entry:
  %retval = alloca %struct.Sequence*, align 8
  %scene.addr = alloca %struct.Scene*, align 8
  %test.addr = alloca %struct.Sequence*, align 8
  %lr.addr = alloca i32, align 4
  %sel.addr = alloca i32, align 4
  %seq = alloca %struct.Sequence*, align 8
  %best_seq = alloca %struct.Sequence*, align 8
  %ed = alloca %struct.Editing*, align 8
  %dist = alloca i32, align 4
  %best_dist = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9816, metadata !DIExpression()), !dbg !9817
  store %struct.Sequence* %test, %struct.Sequence** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %test.addr, metadata !9818, metadata !DIExpression()), !dbg !9819
  store i32 %lr, i32* %lr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lr.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  store i32 %sel, i32* %sel.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sel.addr, metadata !9822, metadata !DIExpression()), !dbg !9823
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !9824, metadata !DIExpression()), !dbg !9825
  call void @llvm.dbg.declare(metadata %struct.Sequence** %best_seq, metadata !9826, metadata !DIExpression()), !dbg !9827
  store %struct.Sequence* null, %struct.Sequence** %best_seq, align 8, !dbg !9827
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !9828, metadata !DIExpression()), !dbg !9829
  %0 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9830
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %0, i8 zeroext 0), !dbg !9831
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !9829
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !9832, metadata !DIExpression()), !dbg !9833
  call void @llvm.dbg.declare(metadata i32* %best_dist, metadata !9834, metadata !DIExpression()), !dbg !9835
  store i32 600000, i32* %best_dist, align 4, !dbg !9836
  %1 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9837
  %cmp = icmp eq %struct.Editing* %1, null, !dbg !9839
  br i1 %cmp, label %if.then, label %if.end, !dbg !9840

if.then:                                          ; preds = %entry
  store %struct.Sequence* null, %struct.Sequence** %retval, align 8, !dbg !9841
  br label %return, !dbg !9841

if.end:                                           ; preds = %entry
  %2 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !9842
  %seqbasep = getelementptr inbounds %struct.Editing, %struct.Editing* %2, i32 0, i32 0, !dbg !9843
  %3 = load %struct.ListBase*, %struct.ListBase** %seqbasep, align 8, !dbg !9843
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %3, i32 0, i32 0, !dbg !9844
  %4 = load i8*, i8** %first, align 8, !dbg !9844
  %5 = bitcast i8* %4 to %struct.Sequence*, !dbg !9842
  store %struct.Sequence* %5, %struct.Sequence** %seq, align 8, !dbg !9845
  br label %while.cond, !dbg !9846

while.cond:                                       ; preds = %if.end31, %if.end
  %6 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9847
  %tobool = icmp ne %struct.Sequence* %6, null, !dbg !9846
  br i1 %tobool, label %while.body, label %while.end, !dbg !9846

while.body:                                       ; preds = %while.cond
  %7 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9848
  %8 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9851
  %cmp1 = icmp ne %struct.Sequence* %7, %8, !dbg !9852
  br i1 %cmp1, label %land.lhs.true, label %if.end31, !dbg !9853

land.lhs.true:                                    ; preds = %while.body
  %9 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9854
  %machine = getelementptr inbounds %struct.Sequence, %struct.Sequence* %9, i32 0, i32 13, !dbg !9855
  %10 = load i32, i32* %machine, align 8, !dbg !9855
  %11 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9856
  %machine2 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %11, i32 0, i32 13, !dbg !9857
  %12 = load i32, i32* %machine2, align 8, !dbg !9857
  %cmp3 = icmp eq i32 %10, %12, !dbg !9858
  br i1 %cmp3, label %land.lhs.true4, label %if.end31, !dbg !9859

land.lhs.true4:                                   ; preds = %land.lhs.true
  %13 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9860
  %depth = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 14, !dbg !9861
  %14 = load i32, i32* %depth, align 4, !dbg !9861
  %15 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9862
  %depth5 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 14, !dbg !9863
  %16 = load i32, i32* %depth5, align 4, !dbg !9863
  %cmp6 = icmp eq i32 %14, %16, !dbg !9864
  br i1 %cmp6, label %land.lhs.true7, label %if.end31, !dbg !9865

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %17 = load i32, i32* %sel.addr, align 4, !dbg !9866
  %cmp8 = icmp eq i32 %17, -1, !dbg !9867
  br i1 %cmp8, label %if.then10, label %lor.lhs.false, !dbg !9868

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %18 = load i32, i32* %sel.addr, align 4, !dbg !9869
  %19 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9870
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 5, !dbg !9871
  %20 = load i32, i32* %flag, align 8, !dbg !9871
  %and = and i32 %20, 1, !dbg !9872
  %cmp9 = icmp eq i32 %18, %and, !dbg !9873
  br i1 %cmp9, label %if.then10, label %if.end31, !dbg !9874

if.then10:                                        ; preds = %lor.lhs.false, %land.lhs.true7
  store i32 600000, i32* %dist, align 4, !dbg !9875
  %21 = load i32, i32* %lr.addr, align 4, !dbg !9877
  switch i32 %21, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb16
  ], !dbg !9878

sw.bb:                                            ; preds = %if.then10
  %22 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9879
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %22, i32 0, i32 16, !dbg !9882
  %23 = load i32, i32* %enddisp, align 4, !dbg !9882
  %24 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9883
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 15, !dbg !9884
  %25 = load i32, i32* %startdisp, align 8, !dbg !9884
  %cmp11 = icmp sle i32 %23, %25, !dbg !9885
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !9886

if.then12:                                        ; preds = %sw.bb
  %26 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9887
  %enddisp13 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %26, i32 0, i32 16, !dbg !9889
  %27 = load i32, i32* %enddisp13, align 4, !dbg !9889
  %28 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9890
  %startdisp14 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %28, i32 0, i32 15, !dbg !9891
  %29 = load i32, i32* %startdisp14, align 8, !dbg !9891
  %sub = sub nsw i32 %27, %29, !dbg !9892
  store i32 %sub, i32* %dist, align 4, !dbg !9893
  br label %if.end15, !dbg !9894

if.end15:                                         ; preds = %if.then12, %sw.bb
  br label %sw.epilog, !dbg !9895

sw.bb16:                                          ; preds = %if.then10
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9896
  %startdisp17 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %30, i32 0, i32 15, !dbg !9898
  %31 = load i32, i32* %startdisp17, align 8, !dbg !9898
  %32 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9899
  %enddisp18 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %32, i32 0, i32 16, !dbg !9900
  %33 = load i32, i32* %enddisp18, align 4, !dbg !9900
  %cmp19 = icmp sge i32 %31, %33, !dbg !9901
  br i1 %cmp19, label %if.then20, label %if.end24, !dbg !9902

if.then20:                                        ; preds = %sw.bb16
  %34 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9903
  %startdisp21 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %34, i32 0, i32 15, !dbg !9905
  %35 = load i32, i32* %startdisp21, align 8, !dbg !9905
  %36 = load %struct.Sequence*, %struct.Sequence** %test.addr, align 8, !dbg !9906
  %enddisp22 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %36, i32 0, i32 16, !dbg !9907
  %37 = load i32, i32* %enddisp22, align 4, !dbg !9907
  %sub23 = sub nsw i32 %35, %37, !dbg !9908
  store i32 %sub23, i32* %dist, align 4, !dbg !9909
  br label %if.end24, !dbg !9910

if.end24:                                         ; preds = %if.then20, %sw.bb16
  br label %sw.epilog, !dbg !9911

sw.epilog:                                        ; preds = %if.then10, %if.end24, %if.end15
  %38 = load i32, i32* %dist, align 4, !dbg !9912
  %cmp25 = icmp eq i32 %38, 0, !dbg !9914
  br i1 %cmp25, label %if.then26, label %if.else, !dbg !9915

if.then26:                                        ; preds = %sw.epilog
  %39 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9916
  store %struct.Sequence* %39, %struct.Sequence** %best_seq, align 8, !dbg !9918
  br label %while.end, !dbg !9919

if.else:                                          ; preds = %sw.epilog
  %40 = load i32, i32* %dist, align 4, !dbg !9920
  %41 = load i32, i32* %best_dist, align 4, !dbg !9922
  %cmp27 = icmp slt i32 %40, %41, !dbg !9923
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !9924

if.then28:                                        ; preds = %if.else
  %42 = load i32, i32* %dist, align 4, !dbg !9925
  store i32 %42, i32* %best_dist, align 4, !dbg !9927
  %43 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9928
  store %struct.Sequence* %43, %struct.Sequence** %best_seq, align 8, !dbg !9929
  br label %if.end29, !dbg !9930

if.end29:                                         ; preds = %if.then28, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end29
  br label %if.end31, !dbg !9931

if.end31:                                         ; preds = %if.end30, %lor.lhs.false, %land.lhs.true4, %land.lhs.true, %while.body
  %44 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !9932
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %44, i32 0, i32 0, !dbg !9933
  %45 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !9933
  store %struct.Sequence* %45, %struct.Sequence** %seq, align 8, !dbg !9934
  br label %while.cond, !dbg !9846, !llvm.loop !9935

while.end:                                        ; preds = %if.then26, %while.cond
  %46 = load %struct.Sequence*, %struct.Sequence** %best_seq, align 8, !dbg !9937
  store %struct.Sequence* %46, %struct.Sequence** %retval, align 8, !dbg !9938
  br label %return, !dbg !9938

return:                                           ; preds = %while.end, %if.then
  %47 = load %struct.Sequence*, %struct.Sequence** %retval, align 8, !dbg !9939
  ret %struct.Sequence* %47, !dbg !9939
}

; Function Attrs: noinline nounwind uwtable
define internal void @swap_sequence(%struct.Scene* %scene, %struct.Sequence* %seqa, %struct.Sequence* %seqb) #0 !dbg !9940 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seqa.addr = alloca %struct.Sequence*, align 8
  %seqb.addr = alloca %struct.Sequence*, align 8
  %gap = alloca i32, align 4
  %seq_a_start = alloca i32, align 4
  %seq_b_start = alloca i32, align 4
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !9943, metadata !DIExpression()), !dbg !9944
  store %struct.Sequence* %seqa, %struct.Sequence** %seqa.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqa.addr, metadata !9945, metadata !DIExpression()), !dbg !9946
  store %struct.Sequence* %seqb, %struct.Sequence** %seqb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seqb.addr, metadata !9947, metadata !DIExpression()), !dbg !9948
  call void @llvm.dbg.declare(metadata i32* %gap, metadata !9949, metadata !DIExpression()), !dbg !9950
  %0 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9951
  %startdisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 15, !dbg !9952
  %1 = load i32, i32* %startdisp, align 8, !dbg !9952
  %2 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9953
  %enddisp = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 16, !dbg !9954
  %3 = load i32, i32* %enddisp, align 4, !dbg !9954
  %sub = sub nsw i32 %1, %3, !dbg !9955
  store i32 %sub, i32* %gap, align 4, !dbg !9950
  call void @llvm.dbg.declare(metadata i32* %seq_a_start, metadata !9956, metadata !DIExpression()), !dbg !9957
  call void @llvm.dbg.declare(metadata i32* %seq_b_start, metadata !9958, metadata !DIExpression()), !dbg !9959
  %4 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9960
  %start = getelementptr inbounds %struct.Sequence, %struct.Sequence* %4, i32 0, i32 8, !dbg !9961
  %5 = load i32, i32* %start, align 4, !dbg !9961
  %6 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9962
  %startdisp1 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %6, i32 0, i32 15, !dbg !9963
  %7 = load i32, i32* %startdisp1, align 8, !dbg !9963
  %sub2 = sub nsw i32 %5, %7, !dbg !9964
  %8 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9965
  %startdisp3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 15, !dbg !9966
  %9 = load i32, i32* %startdisp3, align 8, !dbg !9966
  %add = add nsw i32 %sub2, %9, !dbg !9967
  store i32 %add, i32* %seq_b_start, align 4, !dbg !9968
  %10 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9969
  %11 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9970
  %12 = load i32, i32* %seq_b_start, align 4, !dbg !9971
  %13 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9972
  %start4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 8, !dbg !9973
  %14 = load i32, i32* %start4, align 4, !dbg !9973
  %sub5 = sub nsw i32 %12, %14, !dbg !9974
  call void @BKE_sequence_translate(%struct.Scene* %10, %struct.Sequence* %11, i32 %sub5), !dbg !9975
  %15 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9976
  %16 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9977
  call void @BKE_sequence_calc(%struct.Scene* %15, %struct.Sequence* %16), !dbg !9978
  %17 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9979
  %start6 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %17, i32 0, i32 8, !dbg !9980
  %18 = load i32, i32* %start6, align 4, !dbg !9980
  %19 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9981
  %startdisp7 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %19, i32 0, i32 15, !dbg !9982
  %20 = load i32, i32* %startdisp7, align 8, !dbg !9982
  %sub8 = sub nsw i32 %18, %20, !dbg !9983
  %21 = load %struct.Sequence*, %struct.Sequence** %seqb.addr, align 8, !dbg !9984
  %enddisp9 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %21, i32 0, i32 16, !dbg !9985
  %22 = load i32, i32* %enddisp9, align 4, !dbg !9985
  %add10 = add nsw i32 %sub8, %22, !dbg !9986
  %23 = load i32, i32* %gap, align 4, !dbg !9987
  %add11 = add nsw i32 %add10, %23, !dbg !9988
  store i32 %add11, i32* %seq_a_start, align 4, !dbg !9989
  %24 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9990
  %25 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9991
  %26 = load i32, i32* %seq_a_start, align 4, !dbg !9992
  %27 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9993
  %start12 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %27, i32 0, i32 8, !dbg !9994
  %28 = load i32, i32* %start12, align 4, !dbg !9994
  %sub13 = sub nsw i32 %26, %28, !dbg !9995
  call void @BKE_sequence_translate(%struct.Scene* %24, %struct.Sequence* %25, i32 %sub13), !dbg !9996
  %29 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !9997
  %30 = load %struct.Sequence*, %struct.Sequence** %seqa.addr, align 8, !dbg !9998
  call void @BKE_sequence_calc(%struct.Scene* %29, %struct.Sequence* %30), !dbg !9999
  ret void, !dbg !10000
}

declare dso_local void @BKE_sequencer_free_clipboard() #2

; Function Attrs: noinline nounwind uwtable
define internal void @seq_copy_del_sound(%struct.Scene* %scene, %struct.Sequence* %seq) #0 !dbg !10001 {
entry:
  %scene.addr = alloca %struct.Scene*, align 8
  %seq.addr = alloca %struct.Sequence*, align 8
  %iseq = alloca %struct.Sequence*, align 8
  store %struct.Scene* %scene, %struct.Scene** %scene.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene.addr, metadata !10002, metadata !DIExpression()), !dbg !10003
  store %struct.Sequence* %seq, %struct.Sequence** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq.addr, metadata !10004, metadata !DIExpression()), !dbg !10005
  %0 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10006
  %type = getelementptr inbounds %struct.Sequence, %struct.Sequence* %0, i32 0, i32 6, !dbg !10008
  %1 = load i32, i32* %type, align 4, !dbg !10008
  %cmp = icmp eq i32 %1, 1, !dbg !10009
  br i1 %cmp, label %if.then, label %if.else, !dbg !10010

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.Sequence** %iseq, metadata !10011, metadata !DIExpression()), !dbg !10013
  %2 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10014
  %seqbase = getelementptr inbounds %struct.Sequence, %struct.Sequence* %2, i32 0, i32 36, !dbg !10016
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %seqbase, i32 0, i32 0, !dbg !10017
  %3 = load i8*, i8** %first, align 8, !dbg !10017
  %4 = bitcast i8* %3 to %struct.Sequence*, !dbg !10014
  store %struct.Sequence* %4, %struct.Sequence** %iseq, align 8, !dbg !10018
  br label %for.cond, !dbg !10019

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !10020
  %tobool = icmp ne %struct.Sequence* %5, null, !dbg !10022
  br i1 %tobool, label %for.body, label %for.end, !dbg !10022

for.body:                                         ; preds = %for.cond
  %6 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10023
  %7 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !10025
  call void @seq_copy_del_sound(%struct.Scene* %6, %struct.Sequence* %7), !dbg !10026
  br label %for.inc, !dbg !10027

for.inc:                                          ; preds = %for.body
  %8 = load %struct.Sequence*, %struct.Sequence** %iseq, align 8, !dbg !10028
  %next = getelementptr inbounds %struct.Sequence, %struct.Sequence* %8, i32 0, i32 0, !dbg !10029
  %9 = load %struct.Sequence*, %struct.Sequence** %next, align 8, !dbg !10029
  store %struct.Sequence* %9, %struct.Sequence** %iseq, align 8, !dbg !10030
  br label %for.cond, !dbg !10031, !llvm.loop !10032

for.end:                                          ; preds = %for.cond
  br label %if.end5, !dbg !10034

if.else:                                          ; preds = %entry
  %10 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10035
  %scene_sound = getelementptr inbounds %struct.Sequence, %struct.Sequence* %10, i32 0, i32 38, !dbg !10037
  %11 = load i8*, i8** %scene_sound, align 8, !dbg !10037
  %tobool1 = icmp ne i8* %11, null, !dbg !10035
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !10038

if.then2:                                         ; preds = %if.else
  %12 = load %struct.Scene*, %struct.Scene** %scene.addr, align 8, !dbg !10039
  %13 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10041
  %scene_sound3 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %13, i32 0, i32 38, !dbg !10042
  %14 = load i8*, i8** %scene_sound3, align 8, !dbg !10042
  call void @sound_remove_scene_sound(%struct.Scene* %12, i8* %14), !dbg !10043
  %15 = load %struct.Sequence*, %struct.Sequence** %seq.addr, align 8, !dbg !10044
  %scene_sound4 = getelementptr inbounds %struct.Sequence, %struct.Sequence* %15, i32 0, i32 38, !dbg !10045
  store i8* null, i8** %scene_sound4, align 8, !dbg !10046
  br label %if.end, !dbg !10047

if.end:                                           ; preds = %if.then2, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %for.end
  ret void, !dbg !10048
}

declare dso_local void @BKE_sequencer_base_clipboard_pointers_store(%struct.ListBase*) #2

declare dso_local void @sound_remove_scene_sound(%struct.Scene*, i8*) #2

declare dso_local %struct.Main* @CTX_data_main(%struct.bContext*) #2

declare dso_local void @BKE_sequencer_base_clipboard_pointers_restore(%struct.ListBase*, %struct.Main*) #2

declare dso_local void @BKE_sequence_sound_init(%struct.Scene*, %struct.Sequence*) #2

declare dso_local i32 @BKE_sequencer_active_get_pair(%struct.Scene*, %struct.Sequence**, %struct.Sequence**) #2

declare dso_local i32 @BKE_sequence_swap(%struct.Sequence*, %struct.Sequence*, i8**) #2

declare dso_local i8* @sound_add_scene_sound_defaults(%struct.Scene*, %struct.Sequence*) #2

declare dso_local void @WM_operator_properties_border_to_rctf(%struct.wmOperator*, %struct.rctf*) #2

declare dso_local void @UI_view2d_region_to_view_rctf(%struct.View2D*, %struct.rctf*, %struct.rctf*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #1

; Function Attrs: noinline nounwind uwtable
define internal void @seq_proxy_build_job(%struct.bContext* %C) #0 !dbg !10049 {
entry:
  %C.addr = alloca %struct.bContext*, align 8
  %wm_job = alloca %struct.wmJob*, align 8
  %pj = alloca %struct.ProxyBuildJob*, align 8
  %scene = alloca %struct.Scene*, align 8
  %ed = alloca %struct.Editing*, align 8
  %sa = alloca %struct.ScrArea*, align 8
  %context = alloca %struct.SeqIndexBuildContext*, align 8
  %link = alloca %struct.LinkData*, align 8
  %seq = alloca %struct.Sequence*, align 8
  %iter_macro = alloca %struct.SeqIterator, align 8
  store %struct.bContext* %C, %struct.bContext** %C.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bContext** %C.addr, metadata !10054, metadata !DIExpression()), !dbg !10055
  call void @llvm.dbg.declare(metadata %struct.wmJob** %wm_job, metadata !10056, metadata !DIExpression()), !dbg !10060
  call void @llvm.dbg.declare(metadata %struct.ProxyBuildJob** %pj, metadata !10061, metadata !DIExpression()), !dbg !10070
  call void @llvm.dbg.declare(metadata %struct.Scene** %scene, metadata !10071, metadata !DIExpression()), !dbg !10072
  %0 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10073
  %call = call %struct.Scene* @CTX_data_scene(%struct.bContext* %0), !dbg !10074
  store %struct.Scene* %call, %struct.Scene** %scene, align 8, !dbg !10072
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !10075, metadata !DIExpression()), !dbg !10076
  %1 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !10077
  %call1 = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %1, i8 zeroext 0), !dbg !10078
  store %struct.Editing* %call1, %struct.Editing** %ed, align 8, !dbg !10076
  call void @llvm.dbg.declare(metadata %struct.ScrArea** %sa, metadata !10079, metadata !DIExpression()), !dbg !10080
  %2 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10081
  %call2 = call %struct.ScrArea* @CTX_wm_area(%struct.bContext* %2), !dbg !10082
  store %struct.ScrArea* %call2, %struct.ScrArea** %sa, align 8, !dbg !10080
  call void @llvm.dbg.declare(metadata %struct.SeqIndexBuildContext** %context, metadata !10083, metadata !DIExpression()), !dbg !10086
  call void @llvm.dbg.declare(metadata %struct.LinkData** %link, metadata !10087, metadata !DIExpression()), !dbg !10096
  call void @llvm.dbg.declare(metadata %struct.Sequence** %seq, metadata !10097, metadata !DIExpression()), !dbg !10098
  %3 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10099
  %call3 = call %struct.wmWindowManager* @CTX_wm_manager(%struct.bContext* %3), !dbg !10100
  %4 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10101
  %call4 = call %struct.wmWindow* @CTX_wm_window(%struct.bContext* %4), !dbg !10102
  %5 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !10103
  %6 = bitcast %struct.ScrArea* %5 to i8*, !dbg !10103
  %call5 = call %struct.wmJob* @WM_jobs_get(%struct.wmWindowManager* %call3, %struct.wmWindow* %call4, i8* %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.217, i64 0, i64 0), i32 4, i32 14), !dbg !10104
  store %struct.wmJob* %call5, %struct.wmJob** %wm_job, align 8, !dbg !10105
  %7 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10106
  %call6 = call i8* @WM_jobs_customdata_get(%struct.wmJob* %7), !dbg !10107
  %8 = bitcast i8* %call6 to %struct.ProxyBuildJob*, !dbg !10107
  store %struct.ProxyBuildJob* %8, %struct.ProxyBuildJob** %pj, align 8, !dbg !10108
  %9 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10109
  %tobool = icmp ne %struct.ProxyBuildJob* %9, null, !dbg !10109
  br i1 %tobool, label %if.end, label %if.then, !dbg !10111

if.then:                                          ; preds = %entry
  %10 = load i8* (i64, i8*)*, i8* (i64, i8*)** @MEM_callocN, align 8, !dbg !10112
  %call7 = call i8* %10(i64 40, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.218, i64 0, i64 0)), !dbg !10112
  %11 = bitcast i8* %call7 to %struct.ProxyBuildJob*, !dbg !10112
  store %struct.ProxyBuildJob* %11, %struct.ProxyBuildJob** %pj, align 8, !dbg !10114
  %12 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !10115
  %13 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10116
  %scene8 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %13, i32 0, i32 0, !dbg !10117
  store %struct.Scene* %12, %struct.Scene** %scene8, align 8, !dbg !10118
  %14 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10119
  %call9 = call %struct.Main* @CTX_data_main(%struct.bContext* %14), !dbg !10120
  %15 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10121
  %main = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %15, i32 0, i32 1, !dbg !10122
  store %struct.Main* %call9, %struct.Main** %main, align 8, !dbg !10123
  %16 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10124
  %17 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10125
  %18 = bitcast %struct.ProxyBuildJob* %17 to i8*, !dbg !10125
  call void @WM_jobs_customdata_set(%struct.wmJob* %16, i8* %18, void (i8*)* @proxy_freejob), !dbg !10126
  %19 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10127
  call void @WM_jobs_timer(%struct.wmJob* %19, double 1.000000e-01, i32 67502080, i32 67502080), !dbg !10128
  %20 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10129
  call void @WM_jobs_callbacks(%struct.wmJob* %20, void (i8*, i16*, i16*, float*)* @proxy_startjob, void (i8*)* null, void (i8*)* null, void (i8*)* @proxy_endjob), !dbg !10130
  br label %if.end, !dbg !10131

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.dbg.declare(metadata %struct.SeqIterator* %iter_macro, metadata !10132, metadata !DIExpression()), !dbg !10134
  %21 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !10135
  call void @BKE_sequence_iterator_begin(%struct.Editing* %21, %struct.SeqIterator* %iter_macro, i8 zeroext 1), !dbg !10135
  br label %for.cond, !dbg !10135

for.cond:                                         ; preds = %for.inc, %if.end
  %valid = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 4, !dbg !10137
  %22 = load i32, i32* %valid, align 8, !dbg !10137
  %tobool10 = icmp ne i32 %22, 0, !dbg !10135
  br i1 %tobool10, label %for.body, label %for.end, !dbg !10135

for.body:                                         ; preds = %for.cond
  %seq11 = getelementptr inbounds %struct.SeqIterator, %struct.SeqIterator* %iter_macro, i32 0, i32 3, !dbg !10139
  %23 = load %struct.Sequence*, %struct.Sequence** %seq11, align 8, !dbg !10139
  store %struct.Sequence* %23, %struct.Sequence** %seq, align 8, !dbg !10139
  %24 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10141
  %flag = getelementptr inbounds %struct.Sequence, %struct.Sequence* %24, i32 0, i32 5, !dbg !10144
  %25 = load i32, i32* %flag, align 8, !dbg !10144
  %and = and i32 %25, 1, !dbg !10145
  %tobool12 = icmp ne i32 %and, 0, !dbg !10145
  br i1 %tobool12, label %if.then13, label %if.end18, !dbg !10146

if.then13:                                        ; preds = %for.body
  %26 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10147
  %main14 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %26, i32 0, i32 1, !dbg !10149
  %27 = load %struct.Main*, %struct.Main** %main14, align 8, !dbg !10149
  %28 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10150
  %scene15 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %28, i32 0, i32 0, !dbg !10151
  %29 = load %struct.Scene*, %struct.Scene** %scene15, align 8, !dbg !10151
  %30 = load %struct.Sequence*, %struct.Sequence** %seq, align 8, !dbg !10152
  %call16 = call %struct.SeqIndexBuildContext* @BKE_sequencer_proxy_rebuild_context(%struct.Main* %27, %struct.Scene* %29, %struct.Sequence* %30), !dbg !10153
  store %struct.SeqIndexBuildContext* %call16, %struct.SeqIndexBuildContext** %context, align 8, !dbg !10154
  %31 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !10155
  %32 = bitcast %struct.SeqIndexBuildContext* %31 to i8*, !dbg !10155
  %call17 = call %struct.LinkData* @BLI_genericNodeN(i8* %32), !dbg !10156
  store %struct.LinkData* %call17, %struct.LinkData** %link, align 8, !dbg !10157
  %33 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10158
  %queue = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %33, i32 0, i32 2, !dbg !10159
  %34 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10160
  %35 = bitcast %struct.LinkData* %34 to i8*, !dbg !10160
  call void @BLI_addtail(%struct.ListBase* %queue, i8* %35), !dbg !10161
  br label %if.end18, !dbg !10162

if.end18:                                         ; preds = %if.then13, %for.body
  br label %for.inc, !dbg !10163

for.inc:                                          ; preds = %if.end18
  call void @BKE_sequence_iterator_next(%struct.SeqIterator* %iter_macro), !dbg !10137
  br label %for.cond, !dbg !10137, !llvm.loop !10164

for.end:                                          ; preds = %for.cond
  call void @BKE_sequence_iterator_end(%struct.SeqIterator* %iter_macro), !dbg !10166
  %36 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10167
  %call19 = call zeroext i8 @WM_jobs_is_running(%struct.wmJob* %36), !dbg !10169
  %tobool20 = icmp ne i8 %call19, 0, !dbg !10169
  br i1 %tobool20, label %if.end23, label %if.then21, !dbg !10170

if.then21:                                        ; preds = %for.end
  store i8 0, i8* getelementptr inbounds (%struct.Global, %struct.Global* @G, i32 0, i32 7), align 8, !dbg !10171
  %37 = load %struct.bContext*, %struct.bContext** %C.addr, align 8, !dbg !10173
  %call22 = call %struct.wmWindowManager* @CTX_wm_manager(%struct.bContext* %37), !dbg !10174
  %38 = load %struct.wmJob*, %struct.wmJob** %wm_job, align 8, !dbg !10175
  call void @WM_jobs_start(%struct.wmWindowManager* %call22, %struct.wmJob* %38), !dbg !10176
  br label %if.end23, !dbg !10177

if.end23:                                         ; preds = %if.then21, %for.end
  %39 = load %struct.ScrArea*, %struct.ScrArea** %sa, align 8, !dbg !10178
  call void @ED_area_tag_redraw(%struct.ScrArea* %39), !dbg !10179
  ret void, !dbg !10180
}

declare dso_local %struct.wmJob* @WM_jobs_get(%struct.wmWindowManager*, %struct.wmWindow*, i8*, i8*, i32, i32) #2

declare dso_local %struct.wmWindowManager* @CTX_wm_manager(%struct.bContext*) #2

declare dso_local %struct.wmWindow* @CTX_wm_window(%struct.bContext*) #2

declare dso_local i8* @WM_jobs_customdata_get(%struct.wmJob*) #2

declare dso_local void @WM_jobs_customdata_set(%struct.wmJob*, i8*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @proxy_freejob(i8* %pjv) #0 !dbg !10181 {
entry:
  %pjv.addr = alloca i8*, align 8
  %pj = alloca %struct.ProxyBuildJob*, align 8
  store i8* %pjv, i8** %pjv.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pjv.addr, metadata !10182, metadata !DIExpression()), !dbg !10183
  call void @llvm.dbg.declare(metadata %struct.ProxyBuildJob** %pj, metadata !10184, metadata !DIExpression()), !dbg !10185
  %0 = load i8*, i8** %pjv.addr, align 8, !dbg !10186
  %1 = bitcast i8* %0 to %struct.ProxyBuildJob*, !dbg !10186
  store %struct.ProxyBuildJob* %1, %struct.ProxyBuildJob** %pj, align 8, !dbg !10185
  %2 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10187
  %queue = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %2, i32 0, i32 2, !dbg !10188
  call void @BLI_freelistN(%struct.ListBase* %queue), !dbg !10189
  %3 = load void (i8*)*, void (i8*)** @MEM_freeN, align 8, !dbg !10190
  %4 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10191
  %5 = bitcast %struct.ProxyBuildJob* %4 to i8*, !dbg !10191
  call void %3(i8* %5), !dbg !10190
  ret void, !dbg !10192
}

declare dso_local void @WM_jobs_timer(%struct.wmJob*, double, i32, i32) #2

declare dso_local void @WM_jobs_callbacks(%struct.wmJob*, void (i8*, i16*, i16*, float*)*, void (i8*)*, void (i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @proxy_startjob(i8* %pjv, i16* %stop, i16* %do_update, float* %progress) #0 !dbg !10193 {
entry:
  %pjv.addr = alloca i8*, align 8
  %stop.addr = alloca i16*, align 8
  %do_update.addr = alloca i16*, align 8
  %progress.addr = alloca float*, align 8
  %pj = alloca %struct.ProxyBuildJob*, align 8
  %link = alloca %struct.LinkData*, align 8
  %context = alloca %struct.SeqIndexBuildContext*, align 8
  store i8* %pjv, i8** %pjv.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pjv.addr, metadata !10197, metadata !DIExpression()), !dbg !10198
  store i16* %stop, i16** %stop.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %stop.addr, metadata !10199, metadata !DIExpression()), !dbg !10200
  store i16* %do_update, i16** %do_update.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %do_update.addr, metadata !10201, metadata !DIExpression()), !dbg !10202
  store float* %progress, float** %progress.addr, align 8
  call void @llvm.dbg.declare(metadata float** %progress.addr, metadata !10203, metadata !DIExpression()), !dbg !10204
  call void @llvm.dbg.declare(metadata %struct.ProxyBuildJob** %pj, metadata !10205, metadata !DIExpression()), !dbg !10206
  %0 = load i8*, i8** %pjv.addr, align 8, !dbg !10207
  %1 = bitcast i8* %0 to %struct.ProxyBuildJob*, !dbg !10207
  store %struct.ProxyBuildJob* %1, %struct.ProxyBuildJob** %pj, align 8, !dbg !10206
  call void @llvm.dbg.declare(metadata %struct.LinkData** %link, metadata !10208, metadata !DIExpression()), !dbg !10209
  %2 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10210
  %queue = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %2, i32 0, i32 2, !dbg !10212
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %queue, i32 0, i32 0, !dbg !10213
  %3 = load i8*, i8** %first, align 8, !dbg !10213
  %4 = bitcast i8* %3 to %struct.LinkData*, !dbg !10210
  store %struct.LinkData* %4, %struct.LinkData** %link, align 8, !dbg !10214
  br label %for.cond, !dbg !10215

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10216
  %tobool = icmp ne %struct.LinkData* %5, null, !dbg !10218
  br i1 %tobool, label %for.body, label %for.end, !dbg !10218

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.SeqIndexBuildContext** %context, metadata !10219, metadata !DIExpression()), !dbg !10221
  %6 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10222
  %data = getelementptr inbounds %struct.LinkData, %struct.LinkData* %6, i32 0, i32 2, !dbg !10223
  %7 = load i8*, i8** %data, align 8, !dbg !10223
  %8 = bitcast i8* %7 to %struct.SeqIndexBuildContext*, !dbg !10222
  store %struct.SeqIndexBuildContext* %8, %struct.SeqIndexBuildContext** %context, align 8, !dbg !10221
  %9 = load %struct.SeqIndexBuildContext*, %struct.SeqIndexBuildContext** %context, align 8, !dbg !10224
  %10 = load i16*, i16** %stop.addr, align 8, !dbg !10225
  %11 = load i16*, i16** %do_update.addr, align 8, !dbg !10226
  %12 = load float*, float** %progress.addr, align 8, !dbg !10227
  call void @BKE_sequencer_proxy_rebuild(%struct.SeqIndexBuildContext* %9, i16* %10, i16* %11, float* %12), !dbg !10228
  br label %for.inc, !dbg !10229

for.inc:                                          ; preds = %for.body
  %13 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10230
  %next = getelementptr inbounds %struct.LinkData, %struct.LinkData* %13, i32 0, i32 0, !dbg !10231
  %14 = load %struct.LinkData*, %struct.LinkData** %next, align 8, !dbg !10231
  store %struct.LinkData* %14, %struct.LinkData** %link, align 8, !dbg !10232
  br label %for.cond, !dbg !10233, !llvm.loop !10234

for.end:                                          ; preds = %for.cond
  %15 = load i16*, i16** %stop.addr, align 8, !dbg !10236
  %16 = load i16, i16* %15, align 2, !dbg !10238
  %tobool1 = icmp ne i16 %16, 0, !dbg !10238
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10239

if.then:                                          ; preds = %for.end
  %17 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10240
  %stop2 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %17, i32 0, i32 3, !dbg !10242
  store i32 1, i32* %stop2, align 8, !dbg !10243
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10244
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.219, i64 0, i64 0)), !dbg !10245
  br label %if.end, !dbg !10246

if.end:                                           ; preds = %if.then, %for.end
  ret void, !dbg !10247
}

; Function Attrs: noinline nounwind uwtable
define internal void @proxy_endjob(i8* %pjv) #0 !dbg !10248 {
entry:
  %pjv.addr = alloca i8*, align 8
  %pj = alloca %struct.ProxyBuildJob*, align 8
  %ed = alloca %struct.Editing*, align 8
  %link = alloca %struct.LinkData*, align 8
  store i8* %pjv, i8** %pjv.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pjv.addr, metadata !10249, metadata !DIExpression()), !dbg !10250
  call void @llvm.dbg.declare(metadata %struct.ProxyBuildJob** %pj, metadata !10251, metadata !DIExpression()), !dbg !10252
  %0 = load i8*, i8** %pjv.addr, align 8, !dbg !10253
  %1 = bitcast i8* %0 to %struct.ProxyBuildJob*, !dbg !10253
  store %struct.ProxyBuildJob* %1, %struct.ProxyBuildJob** %pj, align 8, !dbg !10252
  call void @llvm.dbg.declare(metadata %struct.Editing** %ed, metadata !10254, metadata !DIExpression()), !dbg !10255
  %2 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10256
  %scene = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %2, i32 0, i32 0, !dbg !10257
  %3 = load %struct.Scene*, %struct.Scene** %scene, align 8, !dbg !10257
  %call = call %struct.Editing* @BKE_sequencer_editing_get(%struct.Scene* %3, i8 zeroext 0), !dbg !10258
  store %struct.Editing* %call, %struct.Editing** %ed, align 8, !dbg !10255
  call void @llvm.dbg.declare(metadata %struct.LinkData** %link, metadata !10259, metadata !DIExpression()), !dbg !10260
  %4 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10261
  %queue = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %4, i32 0, i32 2, !dbg !10263
  %first = getelementptr inbounds %struct.ListBase, %struct.ListBase* %queue, i32 0, i32 0, !dbg !10264
  %5 = load i8*, i8** %first, align 8, !dbg !10264
  %6 = bitcast i8* %5 to %struct.LinkData*, !dbg !10261
  store %struct.LinkData* %6, %struct.LinkData** %link, align 8, !dbg !10265
  br label %for.cond, !dbg !10266

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10267
  %tobool = icmp ne %struct.LinkData* %7, null, !dbg !10269
  br i1 %tobool, label %for.body, label %for.end, !dbg !10269

for.body:                                         ; preds = %for.cond
  %8 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10270
  %data = getelementptr inbounds %struct.LinkData, %struct.LinkData* %8, i32 0, i32 2, !dbg !10272
  %9 = load i8*, i8** %data, align 8, !dbg !10272
  %10 = bitcast i8* %9 to %struct.SeqIndexBuildContext*, !dbg !10270
  %11 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10273
  %stop = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %11, i32 0, i32 3, !dbg !10274
  %12 = load i32, i32* %stop, align 8, !dbg !10274
  %conv = trunc i32 %12 to i8, !dbg !10273
  call void @BKE_sequencer_proxy_rebuild_finish(%struct.SeqIndexBuildContext* %10, i8 zeroext %conv), !dbg !10275
  br label %for.inc, !dbg !10276

for.inc:                                          ; preds = %for.body
  %13 = load %struct.LinkData*, %struct.LinkData** %link, align 8, !dbg !10277
  %next = getelementptr inbounds %struct.LinkData, %struct.LinkData* %13, i32 0, i32 0, !dbg !10278
  %14 = load %struct.LinkData*, %struct.LinkData** %next, align 8, !dbg !10278
  store %struct.LinkData* %14, %struct.LinkData** %link, align 8, !dbg !10279
  br label %for.cond, !dbg !10280, !llvm.loop !10281

for.end:                                          ; preds = %for.cond
  %15 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10283
  %scene1 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %15, i32 0, i32 0, !dbg !10284
  %16 = load %struct.Scene*, %struct.Scene** %scene1, align 8, !dbg !10284
  %17 = load %struct.Editing*, %struct.Editing** %ed, align 8, !dbg !10285
  %seqbase = getelementptr inbounds %struct.Editing, %struct.Editing* %17, i32 0, i32 1, !dbg !10286
  call void @BKE_sequencer_free_imbuf(%struct.Scene* %16, %struct.ListBase* %seqbase, i8 zeroext 0), !dbg !10287
  %18 = load %struct.ProxyBuildJob*, %struct.ProxyBuildJob** %pj, align 8, !dbg !10288
  %scene2 = getelementptr inbounds %struct.ProxyBuildJob, %struct.ProxyBuildJob* %18, i32 0, i32 0, !dbg !10289
  %19 = load %struct.Scene*, %struct.Scene** %scene2, align 8, !dbg !10289
  %20 = bitcast %struct.Scene* %19 to i8*, !dbg !10288
  call void @WM_main_add_notifier(i32 67502080, i8* %20), !dbg !10290
  ret void, !dbg !10291
}

declare dso_local %struct.SeqIndexBuildContext* @BKE_sequencer_proxy_rebuild_context(%struct.Main*, %struct.Scene*, %struct.Sequence*) #2

declare dso_local %struct.LinkData* @BLI_genericNodeN(i8*) #2

declare dso_local zeroext i8 @WM_jobs_is_running(%struct.wmJob*) #2

declare dso_local void @WM_jobs_start(%struct.wmWindowManager*, %struct.wmJob*) #2

declare dso_local void @BLI_freelistN(%struct.ListBase*) #2

declare dso_local void @BKE_sequencer_proxy_rebuild(%struct.SeqIndexBuildContext*, i16*, i16*, float*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @BKE_sequencer_proxy_rebuild_finish(%struct.SeqIndexBuildContext*, i8 zeroext) #2

declare dso_local void @WM_main_add_notifier(i32, i8*) #2

declare dso_local void @BKE_sequence_get_effect(%struct.SeqEffectHandle* sret, %struct.Sequence*) #2

declare dso_local i32 @RNA_property_collection_length(%struct.PointerRNA*, %struct.PropertyRNA*) #2

declare dso_local %struct.PropertyRNA* @RNA_struct_find_property(%struct.PointerRNA*, i8*) #2

declare dso_local void @RNA_string_get(%struct.PointerRNA*, i8*, i8*) #2

declare dso_local void @BLI_path_rel(i8*, i8*) #2

declare dso_local void @RNA_collection_begin(%struct.PointerRNA*, i8*, %struct.CollectionPropertyIterator*) #2

declare dso_local i8* @RNA_string_get_alloc(%struct.PointerRNA*, i8*, i8*, i32) #2

declare dso_local void @RNA_property_collection_next(%struct.CollectionPropertyIterator*) #2

declare dso_local void @RNA_property_collection_end(%struct.CollectionPropertyIterator*) #2

declare dso_local void @RNA_pointer_create(%struct.ID*, %struct.StructRNA*, i8*, %struct.PointerRNA*) #2

declare dso_local void @RNA_property_string_set(%struct.PointerRNA*, %struct.PropertyRNA*, i8*) #2

declare dso_local void @RNA_property_update(%struct.bContext*, %struct.PointerRNA*, %struct.PropertyRNA*) #2

declare dso_local void @BLI_join_dirfile(i8*, i64, i8*, i8*) #2

declare dso_local void @RNA_string_set(%struct.PointerRNA*, i8*, i8*) #2

declare dso_local void @RNA_boolean_set(%struct.PointerRNA*, i8*, i32) #2

declare dso_local void @WM_event_add_fileselect(%struct.bContext*, %struct.wmOperator*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1776, !1777, !1778}
!llvm.ident = !{!1779}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "sequencer_prop_effect_types", scope: !2, file: !3, line: 73, type: !1773, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !238, globals: !1754, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "blender/source/blender/editors/space_sequencer/sequencer_edit.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !43, !51, !56, !84, !118, !122, !157, !173, !177, !183, !192, !203, !214, !221}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 154, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "blender/source/blender/editors/space_sequencer/sequencer_intern.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "SEQ_SIDE_NONE", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "SEQ_SIDE_LEFT", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SEQ_SIDE_RIGHT", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "SEQ_SIDE_BOTH", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 335, baseType: !15, size: 32, elements: !16)
!14 = !DIFile(filename: "blender/source/blender/makesdna/DNA_sequence_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42}
!17 = !DIEnumerator(name: "SEQ_LEFTSEL", value: 2)
!18 = !DIEnumerator(name: "SEQ_RIGHTSEL", value: 4)
!19 = !DIEnumerator(name: "SEQ_OVERLAP", value: 8)
!20 = !DIEnumerator(name: "SEQ_FILTERY", value: 16)
!21 = !DIEnumerator(name: "SEQ_MUTE", value: 32)
!22 = !DIEnumerator(name: "SEQ_MAKE_PREMUL", value: 64)
!23 = !DIEnumerator(name: "SEQ_REVERSE_FRAMES", value: 128)
!24 = !DIEnumerator(name: "SEQ_IPO_FRAME_LOCKED", value: 256)
!25 = !DIEnumerator(name: "SEQ_EFFECT_NOT_LOADED", value: 512)
!26 = !DIEnumerator(name: "SEQ_FLAG_DELETE", value: 1024)
!27 = !DIEnumerator(name: "SEQ_FLIPX", value: 2048)
!28 = !DIEnumerator(name: "SEQ_FLIPY", value: 4096)
!29 = !DIEnumerator(name: "SEQ_MAKE_FLOAT", value: 8192)
!30 = !DIEnumerator(name: "SEQ_LOCK", value: 16384)
!31 = !DIEnumerator(name: "SEQ_USE_PROXY", value: 32768)
!32 = !DIEnumerator(name: "SEQ_USE_TRANSFORM", value: 65536)
!33 = !DIEnumerator(name: "SEQ_USE_CROP", value: 131072)
!34 = !DIEnumerator(name: "SEQ_USE_PROXY_CUSTOM_DIR", value: 524288)
!35 = !DIEnumerator(name: "SEQ_USE_PROXY_CUSTOM_FILE", value: 2097152)
!36 = !DIEnumerator(name: "SEQ_USE_EFFECT_DEFAULT_FADE", value: 4194304)
!37 = !DIEnumerator(name: "SEQ_USE_LINEAR_MODIFIERS", value: 8388608)
!38 = !DIEnumerator(name: "SEQ_AUDIO_VOLUME_ANIMATED", value: 16777216)
!39 = !DIEnumerator(name: "SEQ_AUDIO_PITCH_ANIMATED", value: 33554432)
!40 = !DIEnumerator(name: "SEQ_AUDIO_PAN_ANIMATED", value: 67108864)
!41 = !DIEnumerator(name: "SEQ_AUDIO_DRAW_WAVEFORM", value: 134217728)
!42 = !DIEnumerator(name: "SEQ_INVALID_EFFECT", value: -2147483648)
!43 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eSpaceSeq_RegionType", file: !44, line: 508, baseType: !7, size: 32, elements: !45)
!44 = !DIFile(filename: "blender/source/blender/makesdna/DNA_space_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!45 = !{!46, !47, !48, !49, !50}
!46 = !DIEnumerator(name: "SEQ_DRAW_SEQUENCE", value: 0, isUnsigned: true)
!47 = !DIEnumerator(name: "SEQ_DRAW_IMG_IMBUF", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "SEQ_DRAW_IMG_WAVEFORM", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "SEQ_DRAW_IMG_VECTORSCOPE", value: 3, isUnsigned: true)
!50 = !DIEnumerator(name: "SEQ_DRAW_IMG_HISTOGRAM", value: 4, isUnsigned: true)
!51 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eSpaceSeq_Displays", file: !44, line: 528, baseType: !7, size: 32, elements: !52)
!52 = !{!53, !54, !55}
!53 = !DIEnumerator(name: "SEQ_VIEW_SEQUENCE", value: 1, isUnsigned: true)
!54 = !DIEnumerator(name: "SEQ_VIEW_PREVIEW", value: 2, isUnsigned: true)
!55 = !DIEnumerator(name: "SEQ_VIEW_SEQUENCE_PREVIEW", value: 3, isUnsigned: true)
!56 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 404, baseType: !7, size: 32, elements: !57)
!57 = !{!58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83}
!58 = !DIEnumerator(name: "SEQ_TYPE_IMAGE", value: 0, isUnsigned: true)
!59 = !DIEnumerator(name: "SEQ_TYPE_META", value: 1, isUnsigned: true)
!60 = !DIEnumerator(name: "SEQ_TYPE_SCENE", value: 2, isUnsigned: true)
!61 = !DIEnumerator(name: "SEQ_TYPE_MOVIE", value: 3, isUnsigned: true)
!62 = !DIEnumerator(name: "SEQ_TYPE_SOUND_RAM", value: 4, isUnsigned: true)
!63 = !DIEnumerator(name: "SEQ_TYPE_SOUND_HD", value: 5, isUnsigned: true)
!64 = !DIEnumerator(name: "SEQ_TYPE_MOVIECLIP", value: 6, isUnsigned: true)
!65 = !DIEnumerator(name: "SEQ_TYPE_MASK", value: 7, isUnsigned: true)
!66 = !DIEnumerator(name: "SEQ_TYPE_EFFECT", value: 8, isUnsigned: true)
!67 = !DIEnumerator(name: "SEQ_TYPE_CROSS", value: 8, isUnsigned: true)
!68 = !DIEnumerator(name: "SEQ_TYPE_ADD", value: 9, isUnsigned: true)
!69 = !DIEnumerator(name: "SEQ_TYPE_SUB", value: 10, isUnsigned: true)
!70 = !DIEnumerator(name: "SEQ_TYPE_ALPHAOVER", value: 11, isUnsigned: true)
!71 = !DIEnumerator(name: "SEQ_TYPE_ALPHAUNDER", value: 12, isUnsigned: true)
!72 = !DIEnumerator(name: "SEQ_TYPE_GAMCROSS", value: 13, isUnsigned: true)
!73 = !DIEnumerator(name: "SEQ_TYPE_MUL", value: 14, isUnsigned: true)
!74 = !DIEnumerator(name: "SEQ_TYPE_OVERDROP", value: 15, isUnsigned: true)
!75 = !DIEnumerator(name: "SEQ_TYPE_WIPE", value: 25, isUnsigned: true)
!76 = !DIEnumerator(name: "SEQ_TYPE_GLOW", value: 26, isUnsigned: true)
!77 = !DIEnumerator(name: "SEQ_TYPE_TRANSFORM", value: 27, isUnsigned: true)
!78 = !DIEnumerator(name: "SEQ_TYPE_COLOR", value: 28, isUnsigned: true)
!79 = !DIEnumerator(name: "SEQ_TYPE_SPEED", value: 29, isUnsigned: true)
!80 = !DIEnumerator(name: "SEQ_TYPE_MULTICAM", value: 30, isUnsigned: true)
!81 = !DIEnumerator(name: "SEQ_TYPE_ADJUSTMENT", value: 31, isUnsigned: true)
!82 = !DIEnumerator(name: "SEQ_TYPE_GAUSSIAN_BLUR", value: 40, isUnsigned: true)
!83 = !DIEnumerator(name: "SEQ_TYPE_EFFECT_MAX", value: 40, isUnsigned: true)
!84 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "PropertyFlag", file: !85, line: 151, baseType: !7, size: 32, elements: !86)
!85 = !DIFile(filename: "blender/source/blender/makesrna/RNA_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!86 = !{!87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117}
!87 = !DIEnumerator(name: "PROP_EDITABLE", value: 1, isUnsigned: true)
!88 = !DIEnumerator(name: "PROP_LIB_EXCEPTION", value: 65536, isUnsigned: true)
!89 = !DIEnumerator(name: "PROP_ANIMATABLE", value: 2, isUnsigned: true)
!90 = !DIEnumerator(name: "PROP_ICONS_CONSECUTIVE", value: 4096, isUnsigned: true)
!91 = !DIEnumerator(name: "PROP_HIDDEN", value: 524288, isUnsigned: true)
!92 = !DIEnumerator(name: "PROP_SKIP_SAVE", value: 268435456, isUnsigned: true)
!93 = !DIEnumerator(name: "PROP_REQUIRED", value: 4, isUnsigned: true)
!94 = !DIEnumerator(name: "PROP_OUTPUT", value: 8, isUnsigned: true)
!95 = !DIEnumerator(name: "PROP_RNAPTR", value: 2048, isUnsigned: true)
!96 = !DIEnumerator(name: "PROP_PYFUNC_OPTIONAL", value: 1073741824, isUnsigned: true)
!97 = !DIEnumerator(name: "PROP_REGISTER", value: 16, isUnsigned: true)
!98 = !DIEnumerator(name: "PROP_REGISTER_OPTIONAL", value: 48, isUnsigned: true)
!99 = !DIEnumerator(name: "PROP_PROPORTIONAL", value: 67108864, isUnsigned: true)
!100 = !DIEnumerator(name: "PROP_ID_REFCOUNT", value: 64, isUnsigned: true)
!101 = !DIEnumerator(name: "PROP_ID_SELF_CHECK", value: 1048576, isUnsigned: true)
!102 = !DIEnumerator(name: "PROP_NEVER_NULL", value: 262144, isUnsigned: true)
!103 = !DIEnumerator(name: "PROP_NEVER_UNLINK", value: 33554432, isUnsigned: true)
!104 = !DIEnumerator(name: "PROP_ENUM_FLAG", value: 2097152, isUnsigned: true)
!105 = !DIEnumerator(name: "PROP_CONTEXT_UPDATE", value: 4194304, isUnsigned: true)
!106 = !DIEnumerator(name: "PROP_CONTEXT_PROPERTY_UPDATE", value: 138412032, isUnsigned: true)
!107 = !DIEnumerator(name: "PROP_THICK_WRAP", value: 8388608, isUnsigned: true)
!108 = !DIEnumerator(name: "PROP_BUILTIN", value: 128, isUnsigned: true)
!109 = !DIEnumerator(name: "PROP_EXPORT", value: 256, isUnsigned: true)
!110 = !DIEnumerator(name: "PROP_RUNTIME", value: 512, isUnsigned: true)
!111 = !DIEnumerator(name: "PROP_IDPROPERTY", value: 1024, isUnsigned: true)
!112 = !DIEnumerator(name: "PROP_RAW_ACCESS", value: 8192, isUnsigned: true)
!113 = !DIEnumerator(name: "PROP_RAW_ARRAY", value: 16384, isUnsigned: true)
!114 = !DIEnumerator(name: "PROP_FREE_POINTERS", value: 32768, isUnsigned: true)
!115 = !DIEnumerator(name: "PROP_DYNAMIC", value: 131072, isUnsigned: true)
!116 = !DIEnumerator(name: "PROP_ENUM_NO_CONTEXT", value: 16777216, isUnsigned: true)
!117 = !DIEnumerator(name: "PROP_ENUM_NO_TRANSLATE", value: 536870912, isUnsigned: true)
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 160, baseType: !7, size: 32, elements: !119)
!119 = !{!120, !121}
!120 = !DIEnumerator(name: "SEQ_CUT_SOFT", value: 0, isUnsigned: true)
!121 = !DIEnumerator(name: "SEQ_CUT_HARD", value: 1, isUnsigned: true)
!122 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TfmMode", file: !123, line: 56, baseType: !15, size: 32, elements: !124)
!123 = !DIFile(filename: "blender/source/blender/editors/include/ED_transform.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!124 = !{!125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156}
!125 = !DIEnumerator(name: "TFM_INIT", value: -1)
!126 = !DIEnumerator(name: "TFM_DUMMY", value: 0)
!127 = !DIEnumerator(name: "TFM_TRANSLATION", value: 1)
!128 = !DIEnumerator(name: "TFM_ROTATION", value: 2)
!129 = !DIEnumerator(name: "TFM_RESIZE", value: 3)
!130 = !DIEnumerator(name: "TFM_SKIN_RESIZE", value: 4)
!131 = !DIEnumerator(name: "TFM_TOSPHERE", value: 5)
!132 = !DIEnumerator(name: "TFM_SHEAR", value: 6)
!133 = !DIEnumerator(name: "TFM_BEND", value: 7)
!134 = !DIEnumerator(name: "TFM_SHRINKFATTEN", value: 8)
!135 = !DIEnumerator(name: "TFM_TILT", value: 9)
!136 = !DIEnumerator(name: "TFM_TRACKBALL", value: 10)
!137 = !DIEnumerator(name: "TFM_PUSHPULL", value: 11)
!138 = !DIEnumerator(name: "TFM_CREASE", value: 12)
!139 = !DIEnumerator(name: "TFM_MIRROR", value: 13)
!140 = !DIEnumerator(name: "TFM_BONESIZE", value: 14)
!141 = !DIEnumerator(name: "TFM_BONE_ENVELOPE", value: 15)
!142 = !DIEnumerator(name: "TFM_CURVE_SHRINKFATTEN", value: 16)
!143 = !DIEnumerator(name: "TFM_MASK_SHRINKFATTEN", value: 17)
!144 = !DIEnumerator(name: "TFM_BONE_ROLL", value: 18)
!145 = !DIEnumerator(name: "TFM_TIME_TRANSLATE", value: 19)
!146 = !DIEnumerator(name: "TFM_TIME_SLIDE", value: 20)
!147 = !DIEnumerator(name: "TFM_TIME_SCALE", value: 21)
!148 = !DIEnumerator(name: "TFM_TIME_EXTEND", value: 22)
!149 = !DIEnumerator(name: "TFM_TIME_DUPLICATE", value: 23)
!150 = !DIEnumerator(name: "TFM_BAKE_TIME", value: 24)
!151 = !DIEnumerator(name: "TFM_DEPRECATED", value: 25)
!152 = !DIEnumerator(name: "TFM_BWEIGHT", value: 26)
!153 = !DIEnumerator(name: "TFM_ALIGN", value: 27)
!154 = !DIEnumerator(name: "TFM_EDGE_SLIDE", value: 28)
!155 = !DIEnumerator(name: "TFM_VERT_SLIDE", value: 29)
!156 = !DIEnumerator(name: "TFM_SEQ_SLIDE", value: 30)
!157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eFileSel_File_Types", file: !44, line: 682, baseType: !7, size: 32, elements: !158)
!158 = !{!159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172}
!159 = !DIEnumerator(name: "BLENDERFILE", value: 4, isUnsigned: true)
!160 = !DIEnumerator(name: "BLENDERFILE_BACKUP", value: 8, isUnsigned: true)
!161 = !DIEnumerator(name: "IMAGEFILE", value: 16, isUnsigned: true)
!162 = !DIEnumerator(name: "MOVIEFILE", value: 32, isUnsigned: true)
!163 = !DIEnumerator(name: "PYSCRIPTFILE", value: 64, isUnsigned: true)
!164 = !DIEnumerator(name: "FTFONTFILE", value: 128, isUnsigned: true)
!165 = !DIEnumerator(name: "SOUNDFILE", value: 256, isUnsigned: true)
!166 = !DIEnumerator(name: "TEXTFILE", value: 512, isUnsigned: true)
!167 = !DIEnumerator(name: "MOVIEFILE_ICON", value: 1024, isUnsigned: true)
!168 = !DIEnumerator(name: "FOLDERFILE", value: 2048, isUnsigned: true)
!169 = !DIEnumerator(name: "BTXFILE", value: 4096, isUnsigned: true)
!170 = !DIEnumerator(name: "COLLADAFILE", value: 8192, isUnsigned: true)
!171 = !DIEnumerator(name: "OPERATORFILE", value: 16384, isUnsigned: true)
!172 = !DIEnumerator(name: "APPLICATIONBUNDLE", value: 32768, isUnsigned: true)
!173 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eFileSel_Action", file: !44, line: 660, baseType: !7, size: 32, elements: !174)
!174 = !{!175, !176}
!175 = !DIEnumerator(name: "FILE_OPENFILE", value: 0, isUnsigned: true)
!176 = !DIEnumerator(name: "FILE_SAVE", value: 1, isUnsigned: true)
!177 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FileDisplayTypeE", file: !44, line: 626, baseType: !7, size: 32, elements: !178)
!178 = !{!179, !180, !181, !182}
!179 = !DIEnumerator(name: "FILE_DEFAULTDISPLAY", value: 0, isUnsigned: true)
!180 = !DIEnumerator(name: "FILE_SHORTDISPLAY", value: 1, isUnsigned: true)
!181 = !DIEnumerator(name: "FILE_LONGDISPLAY", value: 2, isUnsigned: true)
!182 = !DIEnumerator(name: "FILE_IMGDISPLAY", value: 3, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !184, line: 351, baseType: !7, size: 32, elements: !185)
!184 = !DIFile(filename: "blender/source/blender/makesdna/DNA_windowmanager_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!185 = !{!186, !187, !188, !189, !190, !191}
!186 = !DIEnumerator(name: "OPERATOR_RUNNING_MODAL", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "OPERATOR_CANCELLED", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "OPERATOR_FINISHED", value: 4, isUnsigned: true)
!189 = !DIEnumerator(name: "OPERATOR_PASS_THROUGH", value: 8, isUnsigned: true)
!190 = !DIEnumerator(name: "OPERATOR_HANDLED", value: 16, isUnsigned: true)
!191 = !DIEnumerator(name: "OPERATOR_INTERFACE", value: 32, isUnsigned: true)
!192 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ReportType", file: !184, line: 67, baseType: !7, size: 32, elements: !193)
!193 = !{!194, !195, !196, !197, !198, !199, !200, !201, !202}
!194 = !DIEnumerator(name: "RPT_DEBUG", value: 1, isUnsigned: true)
!195 = !DIEnumerator(name: "RPT_INFO", value: 2, isUnsigned: true)
!196 = !DIEnumerator(name: "RPT_OPERATOR", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "RPT_PROPERTY", value: 8, isUnsigned: true)
!198 = !DIEnumerator(name: "RPT_WARNING", value: 16, isUnsigned: true)
!199 = !DIEnumerator(name: "RPT_ERROR", value: 32, isUnsigned: true)
!200 = !DIEnumerator(name: "RPT_ERROR_INVALID_INPUT", value: 64, isUnsigned: true)
!201 = !DIEnumerator(name: "RPT_ERROR_INVALID_CONTEXT", value: 128, isUnsigned: true)
!202 = !DIEnumerator(name: "RPT_ERROR_OUT_OF_MEMORY", value: 256, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !204, line: 361, baseType: !7, size: 32, elements: !205)
!204 = !DIFile(filename: "blender/source/blender/makesdna/DNA_screen_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!205 = !{!206, !207, !208, !209, !210, !211, !212, !213}
!206 = !DIEnumerator(name: "RGN_TYPE_WINDOW", value: 0, isUnsigned: true)
!207 = !DIEnumerator(name: "RGN_TYPE_HEADER", value: 1, isUnsigned: true)
!208 = !DIEnumerator(name: "RGN_TYPE_CHANNELS", value: 2, isUnsigned: true)
!209 = !DIEnumerator(name: "RGN_TYPE_TEMPORARY", value: 3, isUnsigned: true)
!210 = !DIEnumerator(name: "RGN_TYPE_UI", value: 4, isUnsigned: true)
!211 = !DIEnumerator(name: "RGN_TYPE_TOOLS", value: 5, isUnsigned: true)
!212 = !DIEnumerator(name: "RGN_TYPE_TOOL_PROPS", value: 6, isUnsigned: true)
!213 = !DIEnumerator(name: "RGN_TYPE_PREVIEW", value: 7, isUnsigned: true)
!214 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !215, line: 376, baseType: !7, size: 32, elements: !216)
!215 = !DIFile(filename: "blender/source/blender/windowmanager/WM_api.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!216 = !{!217, !218, !219, !220}
!217 = !DIEnumerator(name: "WM_JOB_PRIORITY", value: 1, isUnsigned: true)
!218 = !DIEnumerator(name: "WM_JOB_EXCL_RENDER", value: 2, isUnsigned: true)
!219 = !DIEnumerator(name: "WM_JOB_PROGRESS", value: 4, isUnsigned: true)
!220 = !DIEnumerator(name: "WM_JOB_SUSPEND", value: 8, isUnsigned: true)
!221 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !215, line: 384, baseType: !7, size: 32, elements: !222)
!222 = !{!223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237}
!223 = !DIEnumerator(name: "WM_JOB_TYPE_ANY", value: 0, isUnsigned: true)
!224 = !DIEnumerator(name: "WM_JOB_TYPE_COMPOSITE", value: 1, isUnsigned: true)
!225 = !DIEnumerator(name: "WM_JOB_TYPE_RENDER", value: 2, isUnsigned: true)
!226 = !DIEnumerator(name: "WM_JOB_TYPE_RENDER_PREVIEW", value: 3, isUnsigned: true)
!227 = !DIEnumerator(name: "WM_JOB_TYPE_SCREENCAST", value: 4, isUnsigned: true)
!228 = !DIEnumerator(name: "WM_JOB_TYPE_OBJECT_SIM_OCEAN", value: 5, isUnsigned: true)
!229 = !DIEnumerator(name: "WM_JOB_TYPE_OBJECT_SIM_FLUID", value: 6, isUnsigned: true)
!230 = !DIEnumerator(name: "WM_JOB_TYPE_OBJECT_BAKE_TEXTURE", value: 7, isUnsigned: true)
!231 = !DIEnumerator(name: "WM_JOB_TYPE_OBJECT_BAKE", value: 8, isUnsigned: true)
!232 = !DIEnumerator(name: "WM_JOB_TYPE_FILESEL_THUMBNAIL", value: 9, isUnsigned: true)
!233 = !DIEnumerator(name: "WM_JOB_TYPE_CLIP_BUILD_PROXY", value: 10, isUnsigned: true)
!234 = !DIEnumerator(name: "WM_JOB_TYPE_CLIP_TRACK_MARKERS", value: 11, isUnsigned: true)
!235 = !DIEnumerator(name: "WM_JOB_TYPE_CLIP_SOLVE_CAMERA", value: 12, isUnsigned: true)
!236 = !DIEnumerator(name: "WM_JOB_TYPE_CLIP_PREFETCH", value: 13, isUnsigned: true)
!237 = !DIEnumerator(name: "WM_JOB_TYPE_SEQ_BUILD_PROXY", value: 14, isUnsigned: true)
!238 = !{!239, !15, !240, !241, !1540, !1542, !1674}
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!240 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !242, size: 64)
!242 = !DIDerivedType(tag: DW_TAG_typedef, name: "SlipData", file: !3, line: 1244, baseType: !243)
!243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SlipData", file: !3, line: 1235, size: 448, elements: !244)
!244 = !{!245, !249, !251, !267, !1535, !1537, !1538, !1539}
!245 = !DIDerivedType(tag: DW_TAG_member, name: "init_mouse", scope: !243, file: !3, line: 1236, baseType: !246, size: 64)
!246 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 64, elements: !247)
!247 = !{!248}
!248 = !DISubrange(count: 2)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "init_mouseloc", scope: !243, file: !3, line: 1237, baseType: !250, size: 64, offset: 64)
!250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 64, elements: !247)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "ts", scope: !243, file: !3, line: 1238, baseType: !252, size: 64, offset: 128)
!252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !253, size: 64)
!253 = !DIDerivedType(tag: DW_TAG_typedef, name: "TransSeq", file: !3, line: 116, baseType: !254)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "TransSeq", file: !3, line: 108, size: 352, elements: !255)
!255 = !{!256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !254, file: !3, line: 109, baseType: !15, size: 32)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !254, file: !3, line: 109, baseType: !15, size: 32, offset: 32)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "startstill", scope: !254, file: !3, line: 110, baseType: !15, size: 32, offset: 64)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "endstill", scope: !254, file: !3, line: 110, baseType: !15, size: 32, offset: 96)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "startdisp", scope: !254, file: !3, line: 111, baseType: !15, size: 32, offset: 128)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "enddisp", scope: !254, file: !3, line: 111, baseType: !15, size: 32, offset: 160)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "startofs", scope: !254, file: !3, line: 112, baseType: !15, size: 32, offset: 192)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "endofs", scope: !254, file: !3, line: 112, baseType: !15, size: 32, offset: 224)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "anim_startofs", scope: !254, file: !3, line: 113, baseType: !15, size: 32, offset: 256)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "anim_endofs", scope: !254, file: !3, line: 113, baseType: !15, size: 32, offset: 288)
!266 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !254, file: !3, line: 115, baseType: !15, size: 32, offset: 320)
!267 = !DIDerivedType(tag: DW_TAG_member, name: "seq_array", scope: !243, file: !3, line: 1239, baseType: !268, size: 64, offset: 192)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !270, size: 64)
!270 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sequence", file: !14, line: 190, baseType: !271)
!271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Sequence", file: !14, line: 126, size: 2816, elements: !272)
!272 = !{!273, !275, !276, !277, !278, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !300, !301, !302, !303, !380, !383, !1504, !1505, !1506, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534}
!273 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !271, file: !14, line: 127, baseType: !274, size: 64)
!274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !271, size: 64)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !271, file: !14, line: 127, baseType: !274, size: 64, offset: 64)
!276 = !DIDerivedType(tag: DW_TAG_member, name: "tmp", scope: !271, file: !14, line: 128, baseType: !239, size: 64, offset: 128)
!277 = !DIDerivedType(tag: DW_TAG_member, name: "lib", scope: !271, file: !14, line: 129, baseType: !239, size: 64, offset: 192)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !271, file: !14, line: 130, baseType: !279, size: 512, offset: 256)
!279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 512, elements: !281)
!280 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!281 = !{!282}
!282 = !DISubrange(count: 64)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !271, file: !14, line: 132, baseType: !15, size: 32, offset: 768)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !271, file: !14, line: 132, baseType: !15, size: 32, offset: 800)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !271, file: !14, line: 133, baseType: !15, size: 32, offset: 832)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !271, file: !14, line: 134, baseType: !15, size: 32, offset: 864)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "startofs", scope: !271, file: !14, line: 134, baseType: !15, size: 32, offset: 896)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "endofs", scope: !271, file: !14, line: 134, baseType: !15, size: 32, offset: 928)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "startstill", scope: !271, file: !14, line: 135, baseType: !15, size: 32, offset: 960)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "endstill", scope: !271, file: !14, line: 135, baseType: !15, size: 32, offset: 992)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !271, file: !14, line: 136, baseType: !15, size: 32, offset: 1024)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !271, file: !14, line: 136, baseType: !15, size: 32, offset: 1056)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "startdisp", scope: !271, file: !14, line: 137, baseType: !15, size: 32, offset: 1088)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "enddisp", scope: !271, file: !14, line: 137, baseType: !15, size: 32, offset: 1120)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "sat", scope: !271, file: !14, line: 138, baseType: !240, size: 32, offset: 1152)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "mul", scope: !271, file: !14, line: 139, baseType: !240, size: 32, offset: 1184)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "handsize", scope: !271, file: !14, line: 139, baseType: !240, size: 32, offset: 1216)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "anim_preseek", scope: !271, file: !14, line: 141, baseType: !299, size: 16, offset: 1248)
!299 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "streamindex", scope: !271, file: !14, line: 142, baseType: !299, size: 16, offset: 1264)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "multicam_source", scope: !271, file: !14, line: 143, baseType: !15, size: 32, offset: 1280)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "clip_flag", scope: !271, file: !14, line: 144, baseType: !15, size: 32, offset: 1312)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "strip", scope: !271, file: !14, line: 146, baseType: !304, size: 64, offset: 1344)
!304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !305, size: 64)
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "Strip", file: !14, line: 114, baseType: !306)
!306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Strip", file: !14, line: 99, size: 7232, elements: !307)
!307 = !{!308, !310, !311, !312, !313, !314, !315, !326, !330, !345, !354, !361, !374}
!308 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !306, file: !14, line: 100, baseType: !309, size: 64)
!309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !306, size: 64)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !306, file: !14, line: 100, baseType: !309, size: 64, offset: 64)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "us", scope: !306, file: !14, line: 101, baseType: !15, size: 32, offset: 128)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !306, file: !14, line: 101, baseType: !15, size: 32, offset: 160)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "startstill", scope: !306, file: !14, line: 102, baseType: !15, size: 32, offset: 192)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "endstill", scope: !306, file: !14, line: 102, baseType: !15, size: 32, offset: 224)
!315 = !DIDerivedType(tag: DW_TAG_member, name: "stripdata", scope: !306, file: !14, line: 103, baseType: !316, size: 64, offset: 256)
!316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !317, size: 64)
!317 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripElem", file: !14, line: 59, baseType: !318)
!318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripElem", file: !14, line: 56, size: 2112, elements: !319)
!319 = !{!320, !324, !325}
!320 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !318, file: !14, line: 57, baseType: !321, size: 2048)
!321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 2048, elements: !322)
!322 = !{!323}
!323 = !DISubrange(count: 256)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "orig_width", scope: !318, file: !14, line: 58, baseType: !15, size: 32, offset: 2048)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "orig_height", scope: !318, file: !14, line: 58, baseType: !15, size: 32, offset: 2080)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !306, file: !14, line: 106, baseType: !327, size: 6144, offset: 320)
!327 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 6144, elements: !328)
!328 = !{!329}
!329 = !DISubrange(count: 768)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "proxy", scope: !306, file: !14, line: 107, baseType: !331, size: 64, offset: 6464)
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripProxy", file: !14, line: 97, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripProxy", file: !14, line: 83, size: 8320, elements: !334)
!334 = !{!335, !336, !337, !341, !342, !343, !344}
!335 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !333, file: !14, line: 84, baseType: !327, size: 6144)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !333, file: !14, line: 87, baseType: !321, size: 2048, offset: 6144)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !333, file: !14, line: 88, baseType: !338, size: 64, offset: 8192)
!338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!339 = !DICompositeType(tag: DW_TAG_structure_type, name: "anim", file: !340, line: 85, flags: DIFlagFwdDecl)
!340 = !DIFile(filename: "blender/source/blender/imbuf/IMB_imbuf.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!341 = !DIDerivedType(tag: DW_TAG_member, name: "tc", scope: !333, file: !14, line: 90, baseType: !299, size: 16, offset: 8256)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !333, file: !14, line: 92, baseType: !299, size: 16, offset: 8272)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "build_size_flags", scope: !333, file: !14, line: 93, baseType: !299, size: 16, offset: 8288)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "build_tc_flags", scope: !333, file: !14, line: 95, baseType: !299, size: 16, offset: 8304)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "crop", scope: !306, file: !14, line: 108, baseType: !346, size: 64, offset: 6528)
!346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !347, size: 64)
!347 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripCrop", file: !14, line: 66, baseType: !348)
!348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripCrop", file: !14, line: 61, size: 128, elements: !349)
!349 = !{!350, !351, !352, !353}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !348, file: !14, line: 62, baseType: !15, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "bottom", scope: !348, file: !14, line: 63, baseType: !15, size: 32, offset: 32)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !348, file: !14, line: 64, baseType: !15, size: 32, offset: 64)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !348, file: !14, line: 65, baseType: !15, size: 32, offset: 96)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "transform", scope: !306, file: !14, line: 109, baseType: !355, size: 64, offset: 6592)
!355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !356, size: 64)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripTransform", file: !14, line: 71, baseType: !357)
!357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripTransform", file: !14, line: 68, size: 64, elements: !358)
!358 = !{!359, !360}
!359 = !DIDerivedType(tag: DW_TAG_member, name: "xofs", scope: !357, file: !14, line: 69, baseType: !15, size: 32)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "yofs", scope: !357, file: !14, line: 70, baseType: !15, size: 32, offset: 32)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "color_balance", scope: !306, file: !14, line: 110, baseType: !362, size: 64, offset: 6656)
!362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !363, size: 64)
!363 = !DIDerivedType(tag: DW_TAG_typedef, name: "StripColorBalance", file: !14, line: 81, baseType: !364)
!364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "StripColorBalance", file: !14, line: 73, size: 352, elements: !365)
!365 = !{!366, !370, !371, !372, !373}
!366 = !DIDerivedType(tag: DW_TAG_member, name: "lift", scope: !364, file: !14, line: 74, baseType: !367, size: 96)
!367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 96, elements: !368)
!368 = !{!369}
!369 = !DISubrange(count: 3)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "gamma", scope: !364, file: !14, line: 75, baseType: !367, size: 96, offset: 96)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "gain", scope: !364, file: !14, line: 76, baseType: !367, size: 96, offset: 192)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !364, file: !14, line: 77, baseType: !15, size: 32, offset: 288)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !364, file: !14, line: 78, baseType: !15, size: 32, offset: 320)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !306, file: !14, line: 113, baseType: !375, size: 512, offset: 6720)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedColorspaceSettings", file: !376, line: 182, baseType: !377)
!376 = !DIFile(filename: "blender/source/blender/makesdna/DNA_color_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedColorspaceSettings", file: !376, line: 180, size: 512, elements: !378)
!378 = !{!379}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !377, file: !376, line: 181, baseType: !279, size: 512)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !271, file: !14, line: 148, baseType: !381, size: 64, offset: 1408)
!381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !382, size: 64)
!382 = !DICompositeType(tag: DW_TAG_structure_type, name: "Ipo", file: !14, line: 49, flags: DIFlagFwdDecl)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !271, file: !14, line: 151, baseType: !384, size: 64, offset: 1472)
!384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !385, size: 64)
!385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Scene", file: !386, line: 1216, size: 39680, elements: !387)
!386 = !DIFile(filename: "blender/source/blender/makesdna/DNA_scene_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!387 = !{!388, !453, !456, !459, !462, !463, !464, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !490, !567, !583, !877, !880, !1169, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1191, !1192, !1193, !1194, !1195, !1203, !1270, !1277, !1278, !1285, !1491, !1497, !1498, !1499, !1500, !1501}
!388 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !385, file: !386, line: 1217, baseType: !389, size: 960)
!389 = !DIDerivedType(tag: DW_TAG_typedef, name: "ID", file: !390, line: 130, baseType: !391)
!390 = !DIFile(filename: "blender/source/blender/makesdna/DNA_ID.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ID", file: !390, line: 117, size: 960, elements: !392)
!392 = !{!393, !394, !395, !397, !416, !420, !421, !422, !423, !424}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !391, file: !390, line: 118, baseType: !239, size: 64)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !391, file: !390, line: 118, baseType: !239, size: 64, offset: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "newid", scope: !391, file: !390, line: 119, baseType: !396, size: 64, offset: 128)
!396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !391, size: 64)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "lib", scope: !391, file: !390, line: 120, baseType: !398, size: 64, offset: 192)
!398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !399, size: 64)
!399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Library", file: !390, line: 136, size: 17600, elements: !400)
!400 = !{!401, !402, !404, !407, !411, !412, !413}
!401 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !399, file: !390, line: 137, baseType: !389, size: 960)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "idblock", scope: !399, file: !390, line: 138, baseType: !403, size: 64, offset: 960)
!403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !389, size: 64)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "filedata", scope: !399, file: !390, line: 139, baseType: !405, size: 64, offset: 1024)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!406 = !DICompositeType(tag: DW_TAG_structure_type, name: "FileData", file: !390, line: 43, flags: DIFlagFwdDecl)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !399, file: !390, line: 140, baseType: !408, size: 8192, offset: 1088)
!408 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 8192, elements: !409)
!409 = !{!410}
!410 = !DISubrange(count: 1024)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "filepath", scope: !399, file: !390, line: 141, baseType: !408, size: 8192, offset: 9280)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !399, file: !390, line: 148, baseType: !398, size: 64, offset: 17472)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !399, file: !390, line: 150, baseType: !414, size: 64, offset: 17536)
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DICompositeType(tag: DW_TAG_structure_type, name: "PackedFile", file: !390, line: 45, flags: DIFlagFwdDecl)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !391, file: !390, line: 121, baseType: !417, size: 528, offset: 256)
!417 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 528, elements: !418)
!418 = !{!419}
!419 = !DISubrange(count: 66)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !391, file: !390, line: 126, baseType: !299, size: 16, offset: 784)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "us", scope: !391, file: !390, line: 127, baseType: !15, size: 32, offset: 800)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "icon_id", scope: !391, file: !390, line: 128, baseType: !15, size: 32, offset: 832)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !391, file: !390, line: 128, baseType: !15, size: 32, offset: 864)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !391, file: !390, line: 129, baseType: !425, size: 64, offset: 896)
!425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !426, size: 64)
!426 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDProperty", file: !390, line: 75, baseType: !427)
!427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDProperty", file: !390, line: 62, size: 1024, elements: !428)
!428 = !{!429, !431, !432, !433, !434, !435, !436, !437, !451, !452}
!429 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !427, file: !390, line: 63, baseType: !430, size: 64)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !427, size: 64)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !427, file: !390, line: 63, baseType: !430, size: 64, offset: 64)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !427, file: !390, line: 64, baseType: !280, size: 8, offset: 128)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "subtype", scope: !427, file: !390, line: 64, baseType: !280, size: 8, offset: 136)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !427, file: !390, line: 65, baseType: !299, size: 16, offset: 144)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !427, file: !390, line: 66, baseType: !279, size: 512, offset: 160)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "saved", scope: !427, file: !390, line: 67, baseType: !15, size: 32, offset: 672)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !427, file: !390, line: 69, baseType: !438, size: 256, offset: 704)
!438 = !DIDerivedType(tag: DW_TAG_typedef, name: "IDPropertyData", file: !390, line: 60, baseType: !439)
!439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "IDPropertyData", file: !390, line: 48, size: 256, elements: !440)
!440 = !{!441, !442, !449, !450}
!441 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !439, file: !390, line: 49, baseType: !239, size: 64)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !439, file: !390, line: 58, baseType: !443, size: 128, offset: 64)
!443 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBase", file: !444, line: 71, baseType: !445)
!444 = !DIFile(filename: "blender/source/blender/makesdna/DNA_listBase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBase", file: !444, line: 69, size: 128, elements: !446)
!446 = !{!447, !448}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !445, file: !444, line: 70, baseType: !239, size: 64)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !445, file: !444, line: 70, baseType: !239, size: 64, offset: 64)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !439, file: !390, line: 59, baseType: !15, size: 32, offset: 192)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "val2", scope: !439, file: !390, line: 59, baseType: !15, size: 32, offset: 224)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !427, file: !390, line: 70, baseType: !15, size: 32, offset: 960)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "totallen", scope: !427, file: !390, line: 74, baseType: !15, size: 32, offset: 992)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !385, file: !386, line: 1218, baseType: !454, size: 64, offset: 960)
!454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !455, size: 64)
!455 = !DICompositeType(tag: DW_TAG_structure_type, name: "AnimData", file: !386, line: 58, flags: DIFlagFwdDecl)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !385, file: !386, line: 1220, baseType: !457, size: 64, offset: 1024)
!457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !458, size: 64)
!458 = !DICompositeType(tag: DW_TAG_structure_type, name: "Object", file: !386, line: 50, flags: DIFlagFwdDecl)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "world", scope: !385, file: !386, line: 1221, baseType: !460, size: 64, offset: 1088)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !461, size: 64)
!461 = !DICompositeType(tag: DW_TAG_structure_type, name: "World", file: !386, line: 52, flags: DIFlagFwdDecl)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !385, file: !386, line: 1223, baseType: !384, size: 64, offset: 1152)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !385, file: !386, line: 1225, baseType: !443, size: 128, offset: 1216)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "basact", scope: !385, file: !386, line: 1226, baseType: !465, size: 64, offset: 1344)
!465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !466, size: 64)
!466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Base", file: !386, line: 69, size: 320, elements: !467)
!467 = !{!468, !469, !470, !471, !472, !473, !474, !475}
!468 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !466, file: !386, line: 70, baseType: !465, size: 64)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !466, file: !386, line: 70, baseType: !465, size: 64, offset: 64)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !466, file: !386, line: 71, baseType: !7, size: 32, offset: 128)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "selcol", scope: !466, file: !386, line: 71, baseType: !7, size: 32, offset: 160)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !466, file: !386, line: 72, baseType: !15, size: 32, offset: 192)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "sx", scope: !466, file: !386, line: 73, baseType: !299, size: 16, offset: 224)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "sy", scope: !466, file: !386, line: 73, baseType: !299, size: 16, offset: 240)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !466, file: !386, line: 74, baseType: !457, size: 64, offset: 256)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "obedit", scope: !385, file: !386, line: 1227, baseType: !457, size: 64, offset: 1408)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "cursor", scope: !385, file: !386, line: 1229, baseType: !367, size: 96, offset: 1472)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "twcent", scope: !385, file: !386, line: 1230, baseType: !367, size: 96, offset: 1568)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "twmin", scope: !385, file: !386, line: 1231, baseType: !367, size: 96, offset: 1664)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "twmax", scope: !385, file: !386, line: 1231, baseType: !367, size: 96, offset: 1760)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "lay", scope: !385, file: !386, line: 1233, baseType: !7, size: 32, offset: 1856)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "layact", scope: !385, file: !386, line: 1234, baseType: !15, size: 32, offset: 1888)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "lay_updated", scope: !385, file: !386, line: 1235, baseType: !7, size: 32, offset: 1920)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !385, file: !386, line: 1237, baseType: !299, size: 16, offset: 1952)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "use_nodes", scope: !385, file: !386, line: 1239, baseType: !280, size: 8, offset: 1968)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !385, file: !386, line: 1240, baseType: !487, size: 8, offset: 1976)
!487 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 8, elements: !488)
!488 = !{!489}
!489 = !DISubrange(count: 1)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "nodetree", scope: !385, file: !386, line: 1242, baseType: !491, size: 64, offset: 1984)
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !492, size: 64)
!492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeTree", file: !493, line: 328, size: 3456, elements: !494)
!493 = !DIFile(filename: "blender/source/blender/makesdna/DNA_node_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!494 = !{!495, !496, !497, !501, !502, !505, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !532, !533, !534, !537, !542, !543, !546, !550, !555, !559, !563, !564, !565, !566}
!495 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !492, file: !493, line: 329, baseType: !389, size: 960)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !492, file: !493, line: 330, baseType: !454, size: 64, offset: 960)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "typeinfo", scope: !492, file: !493, line: 332, baseType: !498, size: 64, offset: 1024)
!498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !499, size: 64)
!499 = !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeTreeType", file: !500, line: 32, flags: DIFlagFwdDecl)
!500 = !DIFile(filename: "blender/source/blender/makesrna/RNA_enum_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!501 = !DIDerivedType(tag: DW_TAG_member, name: "idname", scope: !492, file: !493, line: 333, baseType: !279, size: 512, offset: 1088)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "interface_type", scope: !492, file: !493, line: 335, baseType: !503, size: 64, offset: 1600)
!503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !504, size: 64)
!504 = !DICompositeType(tag: DW_TAG_structure_type, name: "StructRNA", file: !85, line: 41, flags: DIFlagFwdDecl)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !492, file: !493, line: 337, baseType: !506, size: 64, offset: 1664)
!506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !507, size: 64)
!507 = !DICompositeType(tag: DW_TAG_structure_type, name: "bGPdata", file: !386, line: 61, flags: DIFlagFwdDecl)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "view_center", scope: !492, file: !493, line: 338, baseType: !250, size: 64, offset: 1728)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !492, file: !493, line: 340, baseType: !443, size: 128, offset: 1792)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "links", scope: !492, file: !493, line: 340, baseType: !443, size: 128, offset: 1920)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !492, file: !493, line: 342, baseType: !15, size: 32, offset: 2048)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !492, file: !493, line: 342, baseType: !15, size: 32, offset: 2080)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "cur_index", scope: !492, file: !493, line: 343, baseType: !15, size: 32, offset: 2112)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !492, file: !493, line: 345, baseType: !15, size: 32, offset: 2144)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "update", scope: !492, file: !493, line: 346, baseType: !15, size: 32, offset: 2176)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "is_updating", scope: !492, file: !493, line: 347, baseType: !299, size: 16, offset: 2208)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !492, file: !493, line: 348, baseType: !299, size: 16, offset: 2224)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !492, file: !493, line: 349, baseType: !15, size: 32, offset: 2240)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "nodetype", scope: !492, file: !493, line: 351, baseType: !15, size: 32, offset: 2272)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "edit_quality", scope: !492, file: !493, line: 353, baseType: !299, size: 16, offset: 2304)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "render_quality", scope: !492, file: !493, line: 354, baseType: !299, size: 16, offset: 2320)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "chunksize", scope: !492, file: !493, line: 355, baseType: !15, size: 32, offset: 2336)
!523 = !DIDerivedType(tag: DW_TAG_member, name: "viewer_border", scope: !492, file: !493, line: 357, baseType: !524, size: 128, offset: 2368)
!524 = !DIDerivedType(tag: DW_TAG_typedef, name: "rctf", file: !525, line: 95, baseType: !526)
!525 = !DIFile(filename: "blender/source/blender/makesdna/DNA_vec_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rctf", file: !525, line: 92, size: 128, elements: !527)
!527 = !{!528, !529, !530, !531}
!528 = !DIDerivedType(tag: DW_TAG_member, name: "xmin", scope: !526, file: !525, line: 93, baseType: !240, size: 32)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "xmax", scope: !526, file: !525, line: 93, baseType: !240, size: 32, offset: 32)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "ymin", scope: !526, file: !525, line: 94, baseType: !240, size: 32, offset: 64)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "ymax", scope: !526, file: !525, line: 94, baseType: !240, size: 32, offset: 96)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "inputs", scope: !492, file: !493, line: 363, baseType: !443, size: 128, offset: 2496)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "outputs", scope: !492, file: !493, line: 363, baseType: !443, size: 128, offset: 2624)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "previews", scope: !492, file: !493, line: 368, baseType: !535, size: 64, offset: 2752)
!535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !536, size: 64)
!536 = !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeInstanceHash", file: !493, line: 48, flags: DIFlagFwdDecl)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "active_viewer_key", scope: !492, file: !493, line: 372, baseType: !538, size: 32, offset: 2816)
!538 = !DIDerivedType(tag: DW_TAG_typedef, name: "bNodeInstanceKey", file: !493, line: 274, baseType: !539)
!539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeInstanceKey", file: !493, line: 271, size: 32, elements: !540)
!540 = !{!541}
!541 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !539, file: !493, line: 273, baseType: !7, size: 32)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !492, file: !493, line: 373, baseType: !15, size: 32, offset: 2848)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "execdata", scope: !492, file: !493, line: 382, baseType: !544, size: 64, offset: 2880)
!544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !545, size: 64)
!545 = !DICompositeType(tag: DW_TAG_structure_type, name: "bNodeTreeExec", file: !493, line: 46, flags: DIFlagFwdDecl)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "progress", scope: !492, file: !493, line: 385, baseType: !547, size: 64, offset: 2944)
!547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !548, size: 64)
!548 = !DISubroutineType(types: !549)
!549 = !{null, !239, !240}
!550 = !DIDerivedType(tag: DW_TAG_member, name: "stats_draw", scope: !492, file: !493, line: 386, baseType: !551, size: 64, offset: 3008)
!551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !552, size: 64)
!552 = !DISubroutineType(types: !553)
!553 = !{null, !239, !554}
!554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !280, size: 64)
!555 = !DIDerivedType(tag: DW_TAG_member, name: "test_break", scope: !492, file: !493, line: 387, baseType: !556, size: 64, offset: 3072)
!556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !557, size: 64)
!557 = !DISubroutineType(types: !558)
!558 = !{!15, !239}
!559 = !DIDerivedType(tag: DW_TAG_member, name: "update_draw", scope: !492, file: !493, line: 388, baseType: !560, size: 64, offset: 3136)
!560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !561, size: 64)
!561 = !DISubroutineType(types: !562)
!562 = !{null, !239}
!563 = !DIDerivedType(tag: DW_TAG_member, name: "tbh", scope: !492, file: !493, line: 389, baseType: !239, size: 64, offset: 3200)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "prh", scope: !492, file: !493, line: 389, baseType: !239, size: 64, offset: 3264)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "sdh", scope: !492, file: !493, line: 389, baseType: !239, size: 64, offset: 3328)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "udh", scope: !492, file: !493, line: 389, baseType: !239, size: 64, offset: 3392)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "ed", scope: !385, file: !386, line: 1244, baseType: !568, size: 64, offset: 2048)
!568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !569, size: 64)
!569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Editing", file: !14, line: 200, size: 17024, elements: !570)
!570 = !{!571, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582}
!571 = !DIDerivedType(tag: DW_TAG_member, name: "seqbasep", scope: !569, file: !14, line: 201, baseType: !572, size: 64)
!572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !443, size: 64)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "seqbase", scope: !569, file: !14, line: 202, baseType: !443, size: 128, offset: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "metastack", scope: !569, file: !14, line: 203, baseType: !443, size: 128, offset: 192)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "act_seq", scope: !569, file: !14, line: 206, baseType: !269, size: 64, offset: 320)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "act_imagedir", scope: !569, file: !14, line: 207, baseType: !408, size: 8192, offset: 384)
!577 = !DIDerivedType(tag: DW_TAG_member, name: "act_sounddir", scope: !569, file: !14, line: 208, baseType: !408, size: 8192, offset: 8576)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "over_ofs", scope: !569, file: !14, line: 210, baseType: !15, size: 32, offset: 16768)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "over_cfra", scope: !569, file: !14, line: 210, baseType: !15, size: 32, offset: 16800)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "over_flag", scope: !569, file: !14, line: 211, baseType: !15, size: 32, offset: 16832)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !569, file: !14, line: 211, baseType: !15, size: 32, offset: 16864)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "over_border", scope: !569, file: !14, line: 212, baseType: !524, size: 128, offset: 16896)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "toolsettings", scope: !385, file: !386, line: 1246, baseType: !584, size: 64, offset: 2112)
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !585, size: 64)
!585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ToolSettings", file: !386, line: 1067, size: 5184, elements: !586)
!586 = !{!587, !620, !621, !636, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !658, !749, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !798, !799, !800, !801, !802, !803, !804, !805, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !860}
!587 = !DIDerivedType(tag: DW_TAG_member, name: "vpaint", scope: !585, file: !386, line: 1068, baseType: !588, size: 64)
!588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !589, size: 64)
!589 = !DIDerivedType(tag: DW_TAG_typedef, name: "VPaint", file: !386, line: 934, baseType: !590)
!590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VPaint", file: !386, line: 925, size: 576, elements: !591)
!591 = !{!592, !611, !612, !613, !614, !616, !619}
!592 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !590, file: !386, line: 926, baseType: !593, size: 320)
!593 = !DIDerivedType(tag: DW_TAG_typedef, name: "Paint", file: !386, line: 830, baseType: !594)
!594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Paint", file: !386, line: 813, size: 320, elements: !595)
!595 = !{!596, !599, !602, !603, !608, !609, !610}
!596 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !594, file: !386, line: 814, baseType: !597, size: 64)
!597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !598, size: 64)
!598 = !DICompositeType(tag: DW_TAG_structure_type, name: "Brush", file: !386, line: 51, flags: DIFlagFwdDecl)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "palette", scope: !594, file: !386, line: 815, baseType: !600, size: 64, offset: 64)
!600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !601, size: 64)
!601 = !DICompositeType(tag: DW_TAG_structure_type, name: "Palette", file: !386, line: 815, flags: DIFlagFwdDecl)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "paint_cursor", scope: !594, file: !386, line: 818, baseType: !239, size: 64, offset: 128)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "paint_cursor_col", scope: !594, file: !386, line: 819, baseType: !604, size: 32, offset: 192)
!604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !605, size: 32, elements: !606)
!605 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!606 = !{!607}
!607 = !DISubrange(count: 4)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !594, file: !386, line: 822, baseType: !15, size: 32, offset: 224)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "num_input_samples", scope: !594, file: !386, line: 826, baseType: !15, size: 32, offset: 256)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "symmetry_flags", scope: !594, file: !386, line: 829, baseType: !15, size: 32, offset: 288)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !590, file: !386, line: 928, baseType: !299, size: 16, offset: 320)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !590, file: !386, line: 928, baseType: !299, size: 16, offset: 336)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "tot", scope: !590, file: !386, line: 929, baseType: !15, size: 32, offset: 352)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "vpaint_prev", scope: !590, file: !386, line: 930, baseType: !615, size: 64, offset: 384)
!615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "wpaint_prev", scope: !590, file: !386, line: 931, baseType: !617, size: 64, offset: 448)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!618 = !DICompositeType(tag: DW_TAG_structure_type, name: "MDeformVert", file: !386, line: 931, flags: DIFlagFwdDecl)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !590, file: !386, line: 933, baseType: !239, size: 64, offset: 512)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "wpaint", scope: !585, file: !386, line: 1069, baseType: !588, size: 64, offset: 64)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt", scope: !585, file: !386, line: 1070, baseType: !622, size: 64, offset: 128)
!622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !623, size: 64)
!623 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sculpt", file: !386, line: 916, baseType: !624)
!624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Sculpt", file: !386, line: 891, size: 704, elements: !625)
!625 = !{!626, !627, !628, !630, !631, !632, !633, !634, !635}
!626 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !624, file: !386, line: 892, baseType: !593, size: 320)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !624, file: !386, line: 896, baseType: !15, size: 32, offset: 320)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "radial_symm", scope: !624, file: !386, line: 900, baseType: !629, size: 96, offset: 352)
!629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !15, size: 96, elements: !368)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "detail_size", scope: !624, file: !386, line: 903, baseType: !240, size: 32, offset: 448)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "symmetrize_direction", scope: !624, file: !386, line: 906, baseType: !15, size: 32, offset: 480)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "gravity_factor", scope: !624, file: !386, line: 909, baseType: !240, size: 32, offset: 512)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "constant_detail", scope: !624, file: !386, line: 912, baseType: !240, size: 32, offset: 544)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "gravity_object", scope: !624, file: !386, line: 914, baseType: !457, size: 64, offset: 576)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !624, file: !386, line: 915, baseType: !239, size: 64, offset: 640)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "uvsculpt", scope: !585, file: !386, line: 1071, baseType: !637, size: 64, offset: 192)
!637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !638, size: 64)
!638 = !DIDerivedType(tag: DW_TAG_typedef, name: "UvSculpt", file: !386, line: 920, baseType: !639)
!639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UvSculpt", file: !386, line: 918, size: 320, elements: !640)
!640 = !{!641}
!641 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !639, file: !386, line: 919, baseType: !593, size: 320)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "vgroup_weight", scope: !585, file: !386, line: 1075, baseType: !240, size: 32, offset: 256)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "doublimit", scope: !585, file: !386, line: 1077, baseType: !240, size: 32, offset: 288)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "normalsize", scope: !585, file: !386, line: 1078, baseType: !240, size: 32, offset: 320)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "automerge", scope: !585, file: !386, line: 1079, baseType: !299, size: 16, offset: 352)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !585, file: !386, line: 1082, baseType: !299, size: 16, offset: 368)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "unwrapper", scope: !585, file: !386, line: 1085, baseType: !280, size: 8, offset: 384)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "uvcalc_flag", scope: !585, file: !386, line: 1086, baseType: !280, size: 8, offset: 392)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "uv_flag", scope: !585, file: !386, line: 1087, baseType: !280, size: 8, offset: 400)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "uv_selectmode", scope: !585, file: !386, line: 1088, baseType: !280, size: 8, offset: 408)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "uvcalc_margin", scope: !585, file: !386, line: 1090, baseType: !240, size: 32, offset: 416)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "autoik_chainlen", scope: !585, file: !386, line: 1093, baseType: !299, size: 16, offset: 448)
!653 = !DIDerivedType(tag: DW_TAG_member, name: "gpencil_flags", scope: !585, file: !386, line: 1096, baseType: !280, size: 8, offset: 464)
!654 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !585, file: !386, line: 1098, baseType: !655, size: 40, offset: 472)
!655 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 40, elements: !656)
!656 = !{!657}
!657 = !DISubrange(count: 5)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "imapaint", scope: !585, file: !386, line: 1101, baseType: !659, size: 832, offset: 512)
!659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImagePaintSettings", file: !386, line: 836, size: 832, elements: !660)
!660 = !{!661, !662, !663, !664, !665, !666, !668, !669, !670, !745, !746, !747, !748}
!661 = !DIDerivedType(tag: DW_TAG_member, name: "paint", scope: !659, file: !386, line: 837, baseType: !593, size: 320)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !659, file: !386, line: 839, baseType: !299, size: 16, offset: 320)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "missing_data", scope: !659, file: !386, line: 839, baseType: !299, size: 16, offset: 336)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "seam_bleed", scope: !659, file: !386, line: 842, baseType: !299, size: 16, offset: 352)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "normal_angle", scope: !659, file: !386, line: 842, baseType: !299, size: 16, offset: 368)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "screen_grab_size", scope: !659, file: !386, line: 843, baseType: !667, size: 32, offset: 384)
!667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !299, size: 32, elements: !247)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !659, file: !386, line: 845, baseType: !15, size: 32, offset: 416)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !659, file: !386, line: 847, baseType: !239, size: 64, offset: 448)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "stencil", scope: !659, file: !386, line: 848, baseType: !671, size: 64, offset: 512)
!671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !672, size: 64)
!672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Image", file: !673, line: 77, size: 15424, elements: !674)
!673 = !DIFile(filename: "blender/source/blender/makesdna/DNA_image_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!674 = !{!675, !676, !677, !680, !683, !684, !687, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !731, !732, !733, !734, !735, !739}
!675 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !672, file: !673, line: 78, baseType: !389, size: 960)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !672, file: !673, line: 80, baseType: !408, size: 8192, offset: 960)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !672, file: !673, line: 82, baseType: !678, size: 64, offset: 9152)
!678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !679, size: 64)
!679 = !DICompositeType(tag: DW_TAG_structure_type, name: "MovieCache", file: !673, line: 43, flags: DIFlagFwdDecl)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "gputexture", scope: !672, file: !673, line: 83, baseType: !681, size: 64, offset: 9216)
!681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !682, size: 64)
!682 = !DICompositeType(tag: DW_TAG_structure_type, name: "GPUTexture", file: !390, line: 46, flags: DIFlagFwdDecl)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !672, file: !673, line: 86, baseType: !338, size: 64, offset: 9280)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "rr", scope: !672, file: !673, line: 87, baseType: !685, size: 64, offset: 9344)
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !686, size: 64)
!686 = !DICompositeType(tag: DW_TAG_structure_type, name: "RenderResult", file: !673, line: 44, flags: DIFlagFwdDecl)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "renders", scope: !672, file: !673, line: 89, baseType: !688, size: 512, offset: 9408)
!688 = !DICompositeType(tag: DW_TAG_array_type, baseType: !685, size: 512, elements: !689)
!689 = !{!690}
!690 = !DISubrange(count: 8)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "render_slot", scope: !672, file: !673, line: 90, baseType: !299, size: 16, offset: 9920)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "last_render_slot", scope: !672, file: !673, line: 90, baseType: !299, size: 16, offset: 9936)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !672, file: !673, line: 92, baseType: !299, size: 16, offset: 9952)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !672, file: !673, line: 92, baseType: !299, size: 16, offset: 9968)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !672, file: !673, line: 93, baseType: !299, size: 16, offset: 9984)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !672, file: !673, line: 93, baseType: !299, size: 16, offset: 10000)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "lastframe", scope: !672, file: !673, line: 94, baseType: !15, size: 32, offset: 10016)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "tpageflag", scope: !672, file: !673, line: 97, baseType: !299, size: 16, offset: 10048)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "totbind", scope: !672, file: !673, line: 97, baseType: !299, size: 16, offset: 10064)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "xrep", scope: !672, file: !673, line: 98, baseType: !299, size: 16, offset: 10080)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "yrep", scope: !672, file: !673, line: 98, baseType: !299, size: 16, offset: 10096)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "twsta", scope: !672, file: !673, line: 99, baseType: !299, size: 16, offset: 10112)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "twend", scope: !672, file: !673, line: 99, baseType: !299, size: 16, offset: 10128)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "bindcode", scope: !672, file: !673, line: 100, baseType: !7, size: 32, offset: 10144)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "repbind", scope: !672, file: !673, line: 101, baseType: !615, size: 64, offset: 10176)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "packedfile", scope: !672, file: !673, line: 103, baseType: !414, size: 64, offset: 10240)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "preview", scope: !672, file: !673, line: 104, baseType: !708, size: 64, offset: 10304)
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !709, size: 64)
!709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PreviewImage", file: !390, line: 159, size: 448, elements: !710)
!710 = !{!711, !713, !714, !715, !716, !718}
!711 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !709, file: !390, line: 161, baseType: !712, size: 64)
!712 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !247)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !709, file: !390, line: 162, baseType: !712, size: 64, offset: 64)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !709, file: !390, line: 163, baseType: !667, size: 32, offset: 128)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "changed_timestamp", scope: !709, file: !390, line: 164, baseType: !667, size: 32, offset: 160)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "rect", scope: !709, file: !390, line: 165, baseType: !717, size: 128, offset: 192)
!717 = !DICompositeType(tag: DW_TAG_array_type, baseType: !615, size: 128, elements: !247)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "gputexture", scope: !709, file: !390, line: 166, baseType: !719, size: 128, offset: 320)
!719 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 128, elements: !247)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "lastupdate", scope: !672, file: !673, line: 107, baseType: !240, size: 32, offset: 10368)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "lastused", scope: !672, file: !673, line: 108, baseType: !15, size: 32, offset: 10400)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "animspeed", scope: !672, file: !673, line: 109, baseType: !299, size: 16, offset: 10432)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !672, file: !673, line: 110, baseType: !299, size: 16, offset: 10448)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "gen_x", scope: !672, file: !673, line: 113, baseType: !15, size: 32, offset: 10464)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "gen_y", scope: !672, file: !673, line: 113, baseType: !15, size: 32, offset: 10496)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "gen_type", scope: !672, file: !673, line: 114, baseType: !280, size: 8, offset: 10528)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "gen_flag", scope: !672, file: !673, line: 114, baseType: !280, size: 8, offset: 10536)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "gen_depth", scope: !672, file: !673, line: 115, baseType: !299, size: 16, offset: 10544)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "gen_color", scope: !672, file: !673, line: 116, baseType: !730, size: 128, offset: 10560)
!730 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 128, elements: !606)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "aspx", scope: !672, file: !673, line: 119, baseType: !240, size: 32, offset: 10688)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "aspy", scope: !672, file: !673, line: 119, baseType: !240, size: 32, offset: 10720)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !672, file: !673, line: 122, baseType: !375, size: 512, offset: 10752)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "alpha_mode", scope: !672, file: !673, line: 123, baseType: !280, size: 8, offset: 11264)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !672, file: !673, line: 125, baseType: !736, size: 56, offset: 11272)
!736 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 56, elements: !737)
!737 = !{!738}
!738 = !DISubrange(count: 7)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "render_slots", scope: !672, file: !673, line: 126, baseType: !740, size: 4096, offset: 11328)
!740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !741, size: 4096, elements: !689)
!741 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderSlot", file: !673, line: 69, baseType: !742)
!742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderSlot", file: !673, line: 67, size: 512, elements: !743)
!743 = !{!744}
!744 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !742, file: !673, line: 68, baseType: !279, size: 512)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !659, file: !386, line: 849, baseType: !671, size: 64, offset: 576)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "canvas", scope: !659, file: !386, line: 850, baseType: !671, size: 64, offset: 640)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "stencil_col", scope: !659, file: !386, line: 851, baseType: !367, size: 96, offset: 704)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !659, file: !386, line: 852, baseType: !240, size: 32, offset: 800)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "particle", scope: !585, file: !386, line: 1104, baseType: !750, size: 1344, offset: 1344)
!750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ParticleEditSettings", file: !386, line: 867, size: 1344, elements: !751)
!751 = !{!752, !753, !754, !755, !756, !767, !768, !769, !770, !771, !772, !773, !774, !775}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !750, file: !386, line: 868, baseType: !299, size: 16)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "totrekey", scope: !750, file: !386, line: 869, baseType: !299, size: 16, offset: 16)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "totaddkey", scope: !750, file: !386, line: 870, baseType: !299, size: 16, offset: 32)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "brushtype", scope: !750, file: !386, line: 871, baseType: !299, size: 16, offset: 48)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !750, file: !386, line: 873, baseType: !757, size: 896, offset: 64)
!757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !758, size: 896, elements: !737)
!758 = !DIDerivedType(tag: DW_TAG_typedef, name: "ParticleBrushData", file: !386, line: 864, baseType: !759)
!759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ParticleBrushData", file: !386, line: 859, size: 128, elements: !760)
!760 = !{!761, !762, !763, !764, !765, !766}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !759, file: !386, line: 860, baseType: !299, size: 16)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !759, file: !386, line: 861, baseType: !299, size: 16, offset: 16)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "invert", scope: !759, file: !386, line: 861, baseType: !299, size: 16, offset: 32)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !759, file: !386, line: 861, baseType: !299, size: 16, offset: 48)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !759, file: !386, line: 862, baseType: !15, size: 32, offset: 64)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "strength", scope: !759, file: !386, line: 863, baseType: !240, size: 32, offset: 96)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "paintcursor", scope: !750, file: !386, line: 874, baseType: !239, size: 64, offset: 960)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "emitterdist", scope: !750, file: !386, line: 876, baseType: !240, size: 32, offset: 1024)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !750, file: !386, line: 876, baseType: !240, size: 32, offset: 1056)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "selectmode", scope: !750, file: !386, line: 878, baseType: !15, size: 32, offset: 1088)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "edittype", scope: !750, file: !386, line: 879, baseType: !15, size: 32, offset: 1120)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "draw_step", scope: !750, file: !386, line: 881, baseType: !15, size: 32, offset: 1152)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "fade_frames", scope: !750, file: !386, line: 881, baseType: !15, size: 32, offset: 1184)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !750, file: !386, line: 883, baseType: !384, size: 64, offset: 1216)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !750, file: !386, line: 884, baseType: !457, size: 64, offset: 1280)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_size", scope: !585, file: !386, line: 1107, baseType: !240, size: 32, offset: 2688)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "select_thresh", scope: !585, file: !386, line: 1110, baseType: !240, size: 32, offset: 2720)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "autokey_mode", scope: !585, file: !386, line: 1113, baseType: !299, size: 16, offset: 2752)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "autokey_flag", scope: !585, file: !386, line: 1113, baseType: !299, size: 16, offset: 2768)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "multires_subdiv_type", scope: !585, file: !386, line: 1116, baseType: !280, size: 8, offset: 2784)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !585, file: !386, line: 1117, baseType: !487, size: 8, offset: 2792)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_resolution", scope: !585, file: !386, line: 1120, baseType: !299, size: 16, offset: 2800)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_threshold_internal", scope: !585, file: !386, line: 1121, baseType: !240, size: 32, offset: 2816)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_threshold_external", scope: !585, file: !386, line: 1122, baseType: !240, size: 32, offset: 2848)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_length_ratio", scope: !585, file: !386, line: 1123, baseType: !240, size: 32, offset: 2880)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_length_limit", scope: !585, file: !386, line: 1124, baseType: !240, size: 32, offset: 2912)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_angle_limit", scope: !585, file: !386, line: 1125, baseType: !240, size: 32, offset: 2944)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_correlation_limit", scope: !585, file: !386, line: 1126, baseType: !240, size: 32, offset: 2976)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_symmetry_limit", scope: !585, file: !386, line: 1127, baseType: !240, size: 32, offset: 3008)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_angle_weight", scope: !585, file: !386, line: 1128, baseType: !240, size: 32, offset: 3040)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_length_weight", scope: !585, file: !386, line: 1129, baseType: !240, size: 32, offset: 3072)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_distance_weight", scope: !585, file: !386, line: 1130, baseType: !240, size: 32, offset: 3104)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_options", scope: !585, file: !386, line: 1131, baseType: !299, size: 16, offset: 3136)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_postpro", scope: !585, file: !386, line: 1132, baseType: !280, size: 8, offset: 3152)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_postpro_passes", scope: !585, file: !386, line: 1133, baseType: !280, size: 8, offset: 3160)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_subdivisions", scope: !585, file: !386, line: 1134, baseType: !797, size: 24, offset: 3168)
!797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 24, elements: !368)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_multi_level", scope: !585, file: !386, line: 1135, baseType: !280, size: 8, offset: 3192)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_template", scope: !585, file: !386, line: 1138, baseType: !457, size: 64, offset: 3200)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "bone_sketching", scope: !585, file: !386, line: 1139, baseType: !280, size: 8, offset: 3264)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "bone_sketching_convert", scope: !585, file: !386, line: 1140, baseType: !280, size: 8, offset: 3272)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_subdivision_number", scope: !585, file: !386, line: 1141, baseType: !280, size: 8, offset: 3280)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_options", scope: !585, file: !386, line: 1142, baseType: !280, size: 8, offset: 3288)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_retarget_roll", scope: !585, file: !386, line: 1143, baseType: !280, size: 8, offset: 3296)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_side_string", scope: !585, file: !386, line: 1144, baseType: !806, size: 64, offset: 3304)
!806 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 64, elements: !689)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "skgen_num_string", scope: !585, file: !386, line: 1145, baseType: !806, size: 64, offset: 3368)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "edge_mode", scope: !585, file: !386, line: 1148, baseType: !280, size: 8, offset: 3432)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "edge_mode_live_unwrap", scope: !585, file: !386, line: 1149, baseType: !280, size: 8, offset: 3440)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "snap_mode", scope: !585, file: !386, line: 1152, baseType: !280, size: 8, offset: 3448)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "snap_node_mode", scope: !585, file: !386, line: 1152, baseType: !280, size: 8, offset: 3456)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "snap_uv_mode", scope: !585, file: !386, line: 1153, baseType: !280, size: 8, offset: 3464)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "snap_flag", scope: !585, file: !386, line: 1154, baseType: !299, size: 16, offset: 3472)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "snap_target", scope: !585, file: !386, line: 1154, baseType: !299, size: 16, offset: 3488)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "proportional", scope: !585, file: !386, line: 1155, baseType: !299, size: 16, offset: 3504)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "prop_mode", scope: !585, file: !386, line: 1155, baseType: !299, size: 16, offset: 3520)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_objects", scope: !585, file: !386, line: 1156, baseType: !280, size: 8, offset: 3536)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "proportional_mask", scope: !585, file: !386, line: 1157, baseType: !280, size: 8, offset: 3544)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "auto_normalize", scope: !585, file: !386, line: 1159, baseType: !280, size: 8, offset: 3552)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "multipaint", scope: !585, file: !386, line: 1160, baseType: !280, size: 8, offset: 3560)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "weightuser", scope: !585, file: !386, line: 1161, baseType: !280, size: 8, offset: 3568)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "vgroupsubset", scope: !585, file: !386, line: 1162, baseType: !280, size: 8, offset: 3576)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "use_uv_sculpt", scope: !585, file: !386, line: 1165, baseType: !15, size: 32, offset: 3584)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "uv_sculpt_settings", scope: !585, file: !386, line: 1166, baseType: !15, size: 32, offset: 3616)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "uv_sculpt_tool", scope: !585, file: !386, line: 1167, baseType: !15, size: 32, offset: 3648)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "uv_relax_method", scope: !585, file: !386, line: 1168, baseType: !15, size: 32, offset: 3680)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_settings", scope: !585, file: !386, line: 1171, baseType: !299, size: 16, offset: 3712)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "pad5", scope: !585, file: !386, line: 1171, baseType: !299, size: 16, offset: 3728)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_size", scope: !585, file: !386, line: 1172, baseType: !15, size: 32, offset: 3744)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_unprojected_radius", scope: !585, file: !386, line: 1173, baseType: !240, size: 32, offset: 3776)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "sculpt_paint_unified_alpha", scope: !585, file: !386, line: 1174, baseType: !240, size: 32, offset: 3808)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "unified_paint_settings", scope: !585, file: !386, line: 1177, baseType: !833, size: 1024, offset: 3840)
!833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UnifiedPaintSettings", file: !386, line: 963, size: 1024, elements: !834)
!834 = !{!835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !858, !859}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !833, file: !386, line: 965, baseType: !15, size: 32)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "unprojected_radius", scope: !833, file: !386, line: 968, baseType: !240, size: 32, offset: 32)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "alpha", scope: !833, file: !386, line: 971, baseType: !240, size: 32, offset: 64)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !833, file: !386, line: 974, baseType: !240, size: 32, offset: 96)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "rgb", scope: !833, file: !386, line: 977, baseType: !367, size: 96, offset: 128)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "secondary_rgb", scope: !833, file: !386, line: 979, baseType: !367, size: 96, offset: 224)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !833, file: !386, line: 982, baseType: !15, size: 32, offset: 320)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "last_rake", scope: !833, file: !386, line: 987, baseType: !250, size: 64, offset: 352)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "brush_rotation", scope: !833, file: !386, line: 989, baseType: !240, size: 32, offset: 416)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "draw_anchored", scope: !833, file: !386, line: 994, baseType: !15, size: 32, offset: 448)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "anchored_size", scope: !833, file: !386, line: 995, baseType: !15, size: 32, offset: 480)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "draw_inverted", scope: !833, file: !386, line: 997, baseType: !280, size: 8, offset: 512)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !833, file: !386, line: 998, baseType: !736, size: 56, offset: 520)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "overlap_factor", scope: !833, file: !386, line: 1000, baseType: !240, size: 32, offset: 576)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "anchored_initial_mouse", scope: !833, file: !386, line: 1003, baseType: !250, size: 64, offset: 608)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "stroke_active", scope: !833, file: !386, line: 1006, baseType: !15, size: 32, offset: 672)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "size_pressure_value", scope: !833, file: !386, line: 1009, baseType: !240, size: 32, offset: 704)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "tex_mouse", scope: !833, file: !386, line: 1012, baseType: !250, size: 64, offset: 736)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "mask_tex_mouse", scope: !833, file: !386, line: 1015, baseType: !250, size: 64, offset: 800)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "do_linear_conversion", scope: !833, file: !386, line: 1018, baseType: !15, size: 32, offset: 864)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !833, file: !386, line: 1019, baseType: !856, size: 64, offset: 896)
!856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !857, size: 64)
!857 = !DICompositeType(tag: DW_TAG_structure_type, name: "ColorSpace", file: !386, line: 63, flags: DIFlagFwdDecl)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "pixel_radius", scope: !833, file: !386, line: 1023, baseType: !240, size: 32, offset: 960)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !833, file: !386, line: 1024, baseType: !15, size: 32, offset: 992)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "statvis", scope: !585, file: !386, line: 1179, baseType: !861, size: 320, offset: 4864)
!861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MeshStatVis", file: !386, line: 1043, size: 320, elements: !862)
!862 = !{!863, !864, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !861, file: !386, line: 1044, baseType: !280, size: 8)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "_pad1", scope: !861, file: !386, line: 1045, baseType: !865, size: 16, offset: 8)
!865 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 16, elements: !247)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_axis", scope: !861, file: !386, line: 1048, baseType: !280, size: 8, offset: 24)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_min", scope: !861, file: !386, line: 1049, baseType: !240, size: 32, offset: 32)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "overhang_max", scope: !861, file: !386, line: 1049, baseType: !240, size: 32, offset: 64)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_min", scope: !861, file: !386, line: 1052, baseType: !240, size: 32, offset: 96)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_max", scope: !861, file: !386, line: 1052, baseType: !240, size: 32, offset: 128)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "thickness_samples", scope: !861, file: !386, line: 1053, baseType: !280, size: 8, offset: 160)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "_pad2", scope: !861, file: !386, line: 1054, baseType: !797, size: 24, offset: 168)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "distort_min", scope: !861, file: !386, line: 1057, baseType: !240, size: 32, offset: 192)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "distort_max", scope: !861, file: !386, line: 1057, baseType: !240, size: 32, offset: 224)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "sharp_min", scope: !861, file: !386, line: 1060, baseType: !240, size: 32, offset: 256)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "sharp_max", scope: !861, file: !386, line: 1060, baseType: !240, size: 32, offset: 288)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "stats", scope: !385, file: !386, line: 1247, baseType: !878, size: 64, offset: 2176)
!878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !879, size: 64)
!879 = !DICompositeType(tag: DW_TAG_structure_type, name: "SceneStats", file: !386, line: 60, flags: DIFlagFwdDecl)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !385, file: !386, line: 1251, baseType: !881, size: 31872, offset: 2240)
!881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RenderData", file: !386, line: 403, size: 31872, elements: !882)
!882 = !{!883, !958, !978, !987, !1007, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1145, !1146, !1147, !1151, !1167, !1168}
!883 = !DIDerivedType(tag: DW_TAG_member, name: "im_format", scope: !881, file: !386, line: 404, baseType: !884, size: 1984)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ImageFormatData", file: !386, line: 259, size: 1984, elements: !885)
!885 = !{!886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !903, !953}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "imtype", scope: !884, file: !386, line: 260, baseType: !280, size: 8)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !884, file: !386, line: 263, baseType: !280, size: 8, offset: 8)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !884, file: !386, line: 266, baseType: !280, size: 8, offset: 16)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !884, file: !386, line: 267, baseType: !280, size: 8, offset: 24)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !884, file: !386, line: 269, baseType: !280, size: 8, offset: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "compress", scope: !884, file: !386, line: 270, baseType: !280, size: 8, offset: 40)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "exr_codec", scope: !884, file: !386, line: 276, baseType: !280, size: 8, offset: 48)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_flag", scope: !884, file: !386, line: 279, baseType: !280, size: 8, offset: 56)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_white", scope: !884, file: !386, line: 280, baseType: !299, size: 16, offset: 64)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_black", scope: !884, file: !386, line: 280, baseType: !299, size: 16, offset: 80)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "cineon_gamma", scope: !884, file: !386, line: 281, baseType: !240, size: 32, offset: 96)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_flag", scope: !884, file: !386, line: 284, baseType: !280, size: 8, offset: 128)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_codec", scope: !884, file: !386, line: 285, baseType: !280, size: 8, offset: 136)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !884, file: !386, line: 287, baseType: !900, size: 48, offset: 144)
!900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 48, elements: !901)
!901 = !{!902}
!902 = !DISubrange(count: 6)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "view_settings", scope: !884, file: !386, line: 290, baseType: !904, size: 1280, offset: 192)
!904 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedViewSettings", file: !376, line: 174, baseType: !905)
!905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedViewSettings", file: !376, line: 166, size: 1280, elements: !906)
!906 = !{!907, !908, !909, !910, !911, !912, !913, !952}
!907 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !905, file: !376, line: 167, baseType: !15, size: 32)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !905, file: !376, line: 167, baseType: !15, size: 32, offset: 32)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "look", scope: !905, file: !376, line: 168, baseType: !279, size: 512, offset: 64)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "view_transform", scope: !905, file: !376, line: 169, baseType: !279, size: 512, offset: 576)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "exposure", scope: !905, file: !376, line: 170, baseType: !240, size: 32, offset: 1088)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "gamma", scope: !905, file: !376, line: 171, baseType: !240, size: 32, offset: 1120)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "curve_mapping", scope: !905, file: !376, line: 172, baseType: !914, size: 64, offset: 1152)
!914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !915, size: 64)
!915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMapping", file: !376, line: 72, size: 3072, elements: !916)
!916 = !{!917, !918, !919, !920, !921, !922, !923, !948, !949, !950, !951}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !915, file: !376, line: 73, baseType: !15, size: 32)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !915, file: !376, line: 73, baseType: !15, size: 32, offset: 32)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "preset", scope: !915, file: !376, line: 74, baseType: !15, size: 32, offset: 64)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "changed_timestamp", scope: !915, file: !376, line: 75, baseType: !15, size: 32, offset: 96)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "curr", scope: !915, file: !376, line: 77, baseType: !524, size: 128, offset: 128)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "clipr", scope: !915, file: !376, line: 77, baseType: !524, size: 128, offset: 256)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "cm", scope: !915, file: !376, line: 79, baseType: !924, size: 2304, offset: 384)
!924 = !DICompositeType(tag: DW_TAG_array_type, baseType: !925, size: 2304, elements: !606)
!925 = !DIDerivedType(tag: DW_TAG_typedef, name: "CurveMap", file: !376, line: 67, baseType: !926)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMap", file: !376, line: 55, size: 576, elements: !927)
!927 = !{!928, !929, !930, !931, !932, !933, !934, !935, !944, !945, !946, !947}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "totpoint", scope: !926, file: !376, line: 56, baseType: !299, size: 16)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !926, file: !376, line: 56, baseType: !299, size: 16, offset: 16)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !926, file: !376, line: 58, baseType: !240, size: 32, offset: 32)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "mintable", scope: !926, file: !376, line: 59, baseType: !240, size: 32, offset: 64)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "maxtable", scope: !926, file: !376, line: 59, baseType: !240, size: 32, offset: 96)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ext_in", scope: !926, file: !376, line: 60, baseType: !250, size: 64, offset: 128)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "ext_out", scope: !926, file: !376, line: 60, baseType: !250, size: 64, offset: 192)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "curve", scope: !926, file: !376, line: 61, baseType: !936, size: 64, offset: 256)
!936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !937, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_typedef, name: "CurveMapPoint", file: !376, line: 47, baseType: !938)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CurveMapPoint", file: !376, line: 44, size: 96, elements: !939)
!939 = !{!940, !941, !942, !943}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !938, file: !376, line: 45, baseType: !240, size: 32)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !938, file: !376, line: 45, baseType: !240, size: 32, offset: 32)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !938, file: !376, line: 46, baseType: !299, size: 16, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "shorty", scope: !938, file: !376, line: 46, baseType: !299, size: 16, offset: 80)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !926, file: !376, line: 62, baseType: !936, size: 64, offset: 320)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "premultable", scope: !926, file: !376, line: 64, baseType: !936, size: 64, offset: 384)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "premul_ext_in", scope: !926, file: !376, line: 65, baseType: !250, size: 64, offset: 448)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "premul_ext_out", scope: !926, file: !376, line: 66, baseType: !250, size: 64, offset: 512)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "black", scope: !915, file: !376, line: 80, baseType: !367, size: 96, offset: 2688)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "white", scope: !915, file: !376, line: 80, baseType: !367, size: 96, offset: 2784)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "bwmul", scope: !915, file: !376, line: 81, baseType: !367, size: 96, offset: 2880)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "sample", scope: !915, file: !376, line: 83, baseType: !367, size: 96, offset: 2976)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !905, file: !376, line: 173, baseType: !239, size: 64, offset: 1216)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "display_settings", scope: !884, file: !386, line: 291, baseType: !954, size: 512, offset: 1472)
!954 = !DIDerivedType(tag: DW_TAG_typedef, name: "ColorManagedDisplaySettings", file: !376, line: 178, baseType: !955)
!955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ColorManagedDisplaySettings", file: !376, line: 176, size: 512, elements: !956)
!956 = !{!957}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "display_device", scope: !955, file: !376, line: 177, baseType: !279, size: 512)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "avicodecdata", scope: !881, file: !386, line: 406, baseType: !959, size: 64, offset: 1984)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AviCodecData", file: !386, line: 80, size: 1472, elements: !961)
!961 = !{!962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "lpFormat", scope: !960, file: !386, line: 81, baseType: !239, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "lpParms", scope: !960, file: !386, line: 82, baseType: !239, size: 64, offset: 64)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "cbFormat", scope: !960, file: !386, line: 83, baseType: !7, size: 32, offset: 128)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "cbParms", scope: !960, file: !386, line: 84, baseType: !7, size: 32, offset: 160)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "fccType", scope: !960, file: !386, line: 86, baseType: !7, size: 32, offset: 192)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "fccHandler", scope: !960, file: !386, line: 87, baseType: !7, size: 32, offset: 224)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "dwKeyFrameEvery", scope: !960, file: !386, line: 88, baseType: !7, size: 32, offset: 256)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "dwQuality", scope: !960, file: !386, line: 89, baseType: !7, size: 32, offset: 288)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "dwBytesPerSecond", scope: !960, file: !386, line: 90, baseType: !7, size: 32, offset: 320)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "dwFlags", scope: !960, file: !386, line: 91, baseType: !7, size: 32, offset: 352)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "dwInterleaveEvery", scope: !960, file: !386, line: 92, baseType: !7, size: 32, offset: 384)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !960, file: !386, line: 93, baseType: !7, size: 32, offset: 416)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "avicodecname", scope: !960, file: !386, line: 95, baseType: !975, size: 1024, offset: 448)
!975 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 1024, elements: !976)
!976 = !{!977}
!977 = !DISubrange(count: 128)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecdata", scope: !881, file: !386, line: 407, baseType: !979, size: 64, offset: 2048)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "QuicktimeCodecData", file: !386, line: 98, size: 1216, elements: !981)
!981 = !{!982, !983, !984, !985, !986}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "cdParms", scope: !980, file: !386, line: 100, baseType: !239, size: 64)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !980, file: !386, line: 101, baseType: !239, size: 64, offset: 64)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "cdSize", scope: !980, file: !386, line: 103, baseType: !7, size: 32, offset: 128)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !980, file: !386, line: 104, baseType: !7, size: 32, offset: 160)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecname", scope: !980, file: !386, line: 106, baseType: !975, size: 1024, offset: 192)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "qtcodecsettings", scope: !881, file: !386, line: 408, baseType: !988, size: 512, offset: 2112)
!988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "QuicktimeCodecSettings", file: !386, line: 109, size: 512, elements: !989)
!989 = !{!990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006}
!990 = !DIDerivedType(tag: DW_TAG_member, name: "codecType", scope: !988, file: !386, line: 111, baseType: !15, size: 32)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "codecSpatialQuality", scope: !988, file: !386, line: 112, baseType: !15, size: 32, offset: 32)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !988, file: !386, line: 115, baseType: !15, size: 32, offset: 64)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "codecFlags", scope: !988, file: !386, line: 116, baseType: !15, size: 32, offset: 96)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "colorDepth", scope: !988, file: !386, line: 117, baseType: !15, size: 32, offset: 128)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "codecTemporalQuality", scope: !988, file: !386, line: 118, baseType: !15, size: 32, offset: 160)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "minSpatialQuality", scope: !988, file: !386, line: 119, baseType: !15, size: 32, offset: 192)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "minTemporalQuality", scope: !988, file: !386, line: 120, baseType: !15, size: 32, offset: 224)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "keyFrameRate", scope: !988, file: !386, line: 121, baseType: !15, size: 32, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "bitRate", scope: !988, file: !386, line: 122, baseType: !15, size: 32, offset: 288)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "audiocodecType", scope: !988, file: !386, line: 125, baseType: !15, size: 32, offset: 320)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "audioSampleRate", scope: !988, file: !386, line: 126, baseType: !15, size: 32, offset: 352)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "audioBitDepth", scope: !988, file: !386, line: 127, baseType: !299, size: 16, offset: 384)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "audioChannels", scope: !988, file: !386, line: 128, baseType: !299, size: 16, offset: 400)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "audioCodecFlags", scope: !988, file: !386, line: 129, baseType: !15, size: 32, offset: 416)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "audioBitRate", scope: !988, file: !386, line: 130, baseType: !15, size: 32, offset: 448)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !988, file: !386, line: 131, baseType: !15, size: 32, offset: 480)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "ffcodecdata", scope: !881, file: !386, line: 409, baseType: !1008, size: 576, offset: 2624)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFMpegCodecData", file: !386, line: 134, size: 576, elements: !1009)
!1009 = !{!1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1008, file: !386, line: 135, baseType: !15, size: 32)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !1008, file: !386, line: 136, baseType: !15, size: 32, offset: 32)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "audio_codec", scope: !1008, file: !386, line: 137, baseType: !15, size: 32, offset: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "video_bitrate", scope: !1008, file: !386, line: 138, baseType: !15, size: 32, offset: 96)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "audio_bitrate", scope: !1008, file: !386, line: 139, baseType: !15, size: 32, offset: 128)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "audio_mixrate", scope: !1008, file: !386, line: 140, baseType: !15, size: 32, offset: 160)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "audio_channels", scope: !1008, file: !386, line: 141, baseType: !15, size: 32, offset: 192)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "audio_pad", scope: !1008, file: !386, line: 142, baseType: !15, size: 32, offset: 224)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "audio_volume", scope: !1008, file: !386, line: 143, baseType: !240, size: 32, offset: 256)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "gop_size", scope: !1008, file: !386, line: 144, baseType: !15, size: 32, offset: 288)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1008, file: !386, line: 145, baseType: !15, size: 32, offset: 320)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_rate", scope: !1008, file: !386, line: 147, baseType: !15, size: 32, offset: 352)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_rate", scope: !1008, file: !386, line: 148, baseType: !15, size: 32, offset: 384)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "rc_buffer_size", scope: !1008, file: !386, line: 149, baseType: !15, size: 32, offset: 416)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "mux_packet_size", scope: !1008, file: !386, line: 150, baseType: !15, size: 32, offset: 448)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "mux_rate", scope: !1008, file: !386, line: 151, baseType: !15, size: 32, offset: 480)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !1008, file: !386, line: 152, baseType: !425, size: 64, offset: 512)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "cfra", scope: !881, file: !386, line: 411, baseType: !15, size: 32, offset: 3200)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !881, file: !386, line: 411, baseType: !15, size: 32, offset: 3232)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "efra", scope: !881, file: !386, line: 411, baseType: !15, size: 32, offset: 3264)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "subframe", scope: !881, file: !386, line: 412, baseType: !240, size: 32, offset: 3296)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "psfra", scope: !881, file: !386, line: 413, baseType: !15, size: 32, offset: 3328)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "pefra", scope: !881, file: !386, line: 413, baseType: !15, size: 32, offset: 3360)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "images", scope: !881, file: !386, line: 415, baseType: !15, size: 32, offset: 3392)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "framapto", scope: !881, file: !386, line: 415, baseType: !15, size: 32, offset: 3424)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !881, file: !386, line: 416, baseType: !299, size: 16, offset: 3456)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "threads", scope: !881, file: !386, line: 416, baseType: !299, size: 16, offset: 3472)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "framelen", scope: !881, file: !386, line: 418, baseType: !240, size: 32, offset: 3488)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "blurfac", scope: !881, file: !386, line: 418, baseType: !240, size: 32, offset: 3520)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "edgeR", scope: !881, file: !386, line: 421, baseType: !240, size: 32, offset: 3552)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "edgeG", scope: !881, file: !386, line: 421, baseType: !240, size: 32, offset: 3584)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "edgeB", scope: !881, file: !386, line: 421, baseType: !240, size: 32, offset: 3616)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "fullscreen", scope: !881, file: !386, line: 425, baseType: !299, size: 16, offset: 3648)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "xplay", scope: !881, file: !386, line: 425, baseType: !299, size: 16, offset: 3664)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "yplay", scope: !881, file: !386, line: 425, baseType: !299, size: 16, offset: 3680)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "freqplay", scope: !881, file: !386, line: 426, baseType: !299, size: 16, offset: 3696)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !881, file: !386, line: 428, baseType: !299, size: 16, offset: 3712)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "attrib", scope: !881, file: !386, line: 428, baseType: !299, size: 16, offset: 3728)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "frame_step", scope: !881, file: !386, line: 431, baseType: !15, size: 32, offset: 3744)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "stereomode", scope: !881, file: !386, line: 433, baseType: !299, size: 16, offset: 3776)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "dimensionspreset", scope: !881, file: !386, line: 435, baseType: !299, size: 16, offset: 3792)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "filtertype", scope: !881, file: !386, line: 437, baseType: !299, size: 16, offset: 3808)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !881, file: !386, line: 439, baseType: !299, size: 16, offset: 3824)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "maximsize", scope: !881, file: !386, line: 441, baseType: !299, size: 16, offset: 3840)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "pad6", scope: !881, file: !386, line: 443, baseType: !299, size: 16, offset: 3856)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "xsch", scope: !881, file: !386, line: 449, baseType: !15, size: 32, offset: 3872)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "ysch", scope: !881, file: !386, line: 453, baseType: !15, size: 32, offset: 3904)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "xparts", scope: !881, file: !386, line: 458, baseType: !299, size: 16, offset: 3936)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "yparts", scope: !881, file: !386, line: 462, baseType: !299, size: 16, offset: 3952)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "tilex", scope: !881, file: !386, line: 467, baseType: !15, size: 32, offset: 3968)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "tiley", scope: !881, file: !386, line: 467, baseType: !15, size: 32, offset: 4000)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !881, file: !386, line: 469, baseType: !299, size: 16, offset: 4032)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "imtype", scope: !881, file: !386, line: 469, baseType: !299, size: 16, offset: 4048)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "subimtype", scope: !881, file: !386, line: 469, baseType: !299, size: 16, offset: 4064)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !881, file: !386, line: 469, baseType: !299, size: 16, offset: 4080)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "displaymode", scope: !881, file: !386, line: 474, baseType: !299, size: 16, offset: 4096)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "use_lock_interface", scope: !881, file: !386, line: 475, baseType: !280, size: 8, offset: 4112)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "pad7", scope: !881, file: !386, line: 476, baseType: !280, size: 8, offset: 4120)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "scemode", scope: !881, file: !386, line: 481, baseType: !15, size: 32, offset: 4128)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !881, file: !386, line: 486, baseType: !15, size: 32, offset: 4160)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "raytrace_options", scope: !881, file: !386, line: 491, baseType: !15, size: 32, offset: 4192)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "raytrace_structure", scope: !881, file: !386, line: 496, baseType: !299, size: 16, offset: 4224)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !881, file: !386, line: 498, baseType: !299, size: 16, offset: 4240)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "ocres", scope: !881, file: !386, line: 501, baseType: !299, size: 16, offset: 4256)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !881, file: !386, line: 502, baseType: !299, size: 16, offset: 4272)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "alphamode", scope: !881, file: !386, line: 508, baseType: !299, size: 16, offset: 4288)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "osa", scope: !881, file: !386, line: 513, baseType: !299, size: 16, offset: 4304)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "frs_sec", scope: !881, file: !386, line: 515, baseType: !299, size: 16, offset: 4320)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "edgeint", scope: !881, file: !386, line: 515, baseType: !299, size: 16, offset: 4336)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "safety", scope: !881, file: !386, line: 519, baseType: !524, size: 128, offset: 4352)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "border", scope: !881, file: !386, line: 519, baseType: !524, size: 128, offset: 4480)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "disprect", scope: !881, file: !386, line: 520, baseType: !1082, size: 128, offset: 4608)
!1082 = !DIDerivedType(tag: DW_TAG_typedef, name: "rcti", file: !525, line: 89, baseType: !1083)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcti", file: !525, line: 86, size: 128, elements: !1084)
!1084 = !{!1085, !1086, !1087, !1088}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "xmin", scope: !1083, file: !525, line: 87, baseType: !15, size: 32)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "xmax", scope: !1083, file: !525, line: 87, baseType: !15, size: 32, offset: 32)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "ymin", scope: !1083, file: !525, line: 88, baseType: !15, size: 32, offset: 64)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "ymax", scope: !1083, file: !525, line: 88, baseType: !15, size: 32, offset: 96)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "layers", scope: !881, file: !386, line: 523, baseType: !443, size: 128, offset: 4736)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "actlay", scope: !881, file: !386, line: 524, baseType: !299, size: 16, offset: 4864)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "mblur_samples", scope: !881, file: !386, line: 527, baseType: !299, size: 16, offset: 4880)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "xasp", scope: !881, file: !386, line: 532, baseType: !240, size: 32, offset: 4896)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "yasp", scope: !881, file: !386, line: 532, baseType: !240, size: 32, offset: 4928)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "frs_sec_base", scope: !881, file: !386, line: 534, baseType: !240, size: 32, offset: 4960)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "gauss", scope: !881, file: !386, line: 538, baseType: !240, size: 32, offset: 4992)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "color_mgt_flag", scope: !881, file: !386, line: 542, baseType: !15, size: 32, offset: 5024)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "postgamma", scope: !881, file: !386, line: 545, baseType: !240, size: 32, offset: 5056)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "posthue", scope: !881, file: !386, line: 545, baseType: !240, size: 32, offset: 5088)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "postsat", scope: !881, file: !386, line: 545, baseType: !240, size: 32, offset: 5120)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "dither_intensity", scope: !881, file: !386, line: 548, baseType: !240, size: 32, offset: 5152)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "bake_osa", scope: !881, file: !386, line: 551, baseType: !299, size: 16, offset: 5184)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "bake_filter", scope: !881, file: !386, line: 551, baseType: !299, size: 16, offset: 5200)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "bake_mode", scope: !881, file: !386, line: 551, baseType: !299, size: 16, offset: 5216)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "bake_flag", scope: !881, file: !386, line: 551, baseType: !299, size: 16, offset: 5232)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "bake_normal_space", scope: !881, file: !386, line: 552, baseType: !299, size: 16, offset: 5248)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "bake_quad_split", scope: !881, file: !386, line: 552, baseType: !299, size: 16, offset: 5264)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "bake_maxdist", scope: !881, file: !386, line: 553, baseType: !240, size: 32, offset: 5280)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "bake_biasdist", scope: !881, file: !386, line: 553, baseType: !240, size: 32, offset: 5312)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "bake_samples", scope: !881, file: !386, line: 554, baseType: !299, size: 16, offset: 5344)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "bake_pad", scope: !881, file: !386, line: 554, baseType: !299, size: 16, offset: 5360)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "bake_user_scale", scope: !881, file: !386, line: 555, baseType: !240, size: 32, offset: 5376)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "bake_pad1", scope: !881, file: !386, line: 555, baseType: !240, size: 32, offset: 5408)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "pic", scope: !881, file: !386, line: 558, baseType: !408, size: 8192, offset: 5440)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "stamp", scope: !881, file: !386, line: 561, baseType: !15, size: 32, offset: 13632)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "stamp_font_id", scope: !881, file: !386, line: 562, baseType: !299, size: 16, offset: 13664)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !881, file: !386, line: 562, baseType: !299, size: 16, offset: 13680)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "stamp_udata", scope: !881, file: !386, line: 565, baseType: !327, size: 6144, offset: 13696)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "fg_stamp", scope: !881, file: !386, line: 568, baseType: !730, size: 128, offset: 19840)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "bg_stamp", scope: !881, file: !386, line: 569, baseType: !730, size: 128, offset: 19968)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "seq_prev_type", scope: !881, file: !386, line: 572, baseType: !280, size: 8, offset: 20096)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "seq_rend_type", scope: !881, file: !386, line: 573, baseType: !280, size: 8, offset: 20104)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "seq_flag", scope: !881, file: !386, line: 574, baseType: !280, size: 8, offset: 20112)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "pad5", scope: !881, file: !386, line: 575, baseType: !655, size: 40, offset: 20120)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_flag", scope: !881, file: !386, line: 578, baseType: !15, size: 32, offset: 20160)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_subsurf", scope: !881, file: !386, line: 579, baseType: !299, size: 16, offset: 20192)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_shadowsamples", scope: !881, file: !386, line: 580, baseType: !299, size: 16, offset: 20208)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_particles", scope: !881, file: !386, line: 581, baseType: !240, size: 32, offset: 20224)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "simplify_aosss", scope: !881, file: !386, line: 582, baseType: !240, size: 32, offset: 20256)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "cineonwhite", scope: !881, file: !386, line: 585, baseType: !299, size: 16, offset: 20288)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "cineonblack", scope: !881, file: !386, line: 585, baseType: !299, size: 16, offset: 20304)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "cineongamma", scope: !881, file: !386, line: 586, baseType: !240, size: 32, offset: 20320)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_preset", scope: !881, file: !386, line: 589, baseType: !299, size: 16, offset: 20352)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "jp2_depth", scope: !881, file: !386, line: 589, baseType: !299, size: 16, offset: 20368)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "rpad3", scope: !881, file: !386, line: 590, baseType: !15, size: 32, offset: 20384)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "domeres", scope: !881, file: !386, line: 593, baseType: !299, size: 16, offset: 20416)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "domemode", scope: !881, file: !386, line: 593, baseType: !299, size: 16, offset: 20432)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "domeangle", scope: !881, file: !386, line: 594, baseType: !299, size: 16, offset: 20448)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "dometilt", scope: !881, file: !386, line: 594, baseType: !299, size: 16, offset: 20464)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "domeresbuf", scope: !881, file: !386, line: 595, baseType: !240, size: 32, offset: 20480)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !881, file: !386, line: 596, baseType: !240, size: 32, offset: 20512)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "dometext", scope: !881, file: !386, line: 597, baseType: !1142, size: 64, offset: 20544)
!1142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1143, size: 64)
!1143 = !DICompositeType(tag: DW_TAG_structure_type, name: "Text", file: !1144, line: 44, flags: DIFlagFwdDecl)
!1144 = !DIFile(filename: "blender/source/blender/makesdna/DNA_freestyle_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "line_thickness_mode", scope: !881, file: !386, line: 600, baseType: !15, size: 32, offset: 20608)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "unit_line_thickness", scope: !881, file: !386, line: 601, baseType: !240, size: 32, offset: 20640)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "engine", scope: !881, file: !386, line: 604, baseType: !1148, size: 256, offset: 20672)
!1148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 256, elements: !1149)
!1149 = !{!1150}
!1150 = !DISubrange(count: 32)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "bake", scope: !881, file: !386, line: 607, baseType: !1152, size: 10880, offset: 20928)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "BakeData", file: !386, line: 364, size: 10880, elements: !1153)
!1153 = !{!1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "im_format", scope: !1152, file: !386, line: 365, baseType: !884, size: 1984)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "filepath", scope: !1152, file: !386, line: 367, baseType: !408, size: 8192, offset: 1984)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1152, file: !386, line: 369, baseType: !299, size: 16, offset: 10176)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1152, file: !386, line: 369, baseType: !299, size: 16, offset: 10192)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "margin", scope: !1152, file: !386, line: 370, baseType: !299, size: 16, offset: 10208)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1152, file: !386, line: 370, baseType: !299, size: 16, offset: 10224)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "cage_extrusion", scope: !1152, file: !386, line: 372, baseType: !240, size: 32, offset: 10240)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1152, file: !386, line: 373, baseType: !240, size: 32, offset: 10272)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "normal_swizzle", scope: !1152, file: !386, line: 375, baseType: !797, size: 24, offset: 10304)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "normal_space", scope: !1152, file: !386, line: 376, baseType: !280, size: 8, offset: 10328)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "save_mode", scope: !1152, file: !386, line: 378, baseType: !280, size: 8, offset: 10336)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1152, file: !386, line: 379, baseType: !797, size: 24, offset: 10344)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "cage", scope: !1152, file: !386, line: 381, baseType: !279, size: 512, offset: 10368)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "preview_start_resolution", scope: !881, file: !386, line: 609, baseType: !15, size: 32, offset: 31808)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !881, file: !386, line: 610, baseType: !15, size: 32, offset: 31840)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "audio", scope: !385, file: !386, line: 1252, baseType: !1170, size: 256, offset: 34112)
!1170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AudioData", file: !386, line: 158, size: 256, elements: !1171)
!1171 = !{!1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "mixrate", scope: !1170, file: !386, line: 159, baseType: !15, size: 32)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "main", scope: !1170, file: !386, line: 160, baseType: !240, size: 32, offset: 32)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "speed_of_sound", scope: !1170, file: !386, line: 161, baseType: !240, size: 32, offset: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "doppler_factor", scope: !1170, file: !386, line: 162, baseType: !240, size: 32, offset: 96)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "distance_model", scope: !1170, file: !386, line: 163, baseType: !15, size: 32, offset: 128)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1170, file: !386, line: 164, baseType: !299, size: 16, offset: 160)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1170, file: !386, line: 165, baseType: !299, size: 16, offset: 176)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "volume", scope: !1170, file: !386, line: 166, baseType: !240, size: 32, offset: 192)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1170, file: !386, line: 167, baseType: !240, size: 32, offset: 224)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !385, file: !386, line: 1254, baseType: !443, size: 128, offset: 34368)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "transform_spaces", scope: !385, file: !386, line: 1255, baseType: !443, size: 128, offset: 34496)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scene", scope: !385, file: !386, line: 1257, baseType: !239, size: 64, offset: 34624)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scene_handle", scope: !385, file: !386, line: 1258, baseType: !239, size: 64, offset: 34688)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "sound_scrub_handle", scope: !385, file: !386, line: 1259, baseType: !239, size: 64, offset: 34752)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "speaker_handles", scope: !385, file: !386, line: 1260, baseType: !239, size: 64, offset: 34816)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "fps_info", scope: !385, file: !386, line: 1262, baseType: !239, size: 64, offset: 34880)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "theDag", scope: !385, file: !386, line: 1265, baseType: !1189, size: 64, offset: 34944)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = !DICompositeType(tag: DW_TAG_structure_type, name: "DagForest", file: !386, line: 1265, flags: DIFlagFwdDecl)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "dagflags", scope: !385, file: !386, line: 1266, baseType: !299, size: 16, offset: 35008)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "recalc", scope: !385, file: !386, line: 1267, baseType: !299, size: 16, offset: 35024)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "active_keyingset", scope: !385, file: !386, line: 1270, baseType: !15, size: 32, offset: 35040)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "keyingsets", scope: !385, file: !386, line: 1271, baseType: !443, size: 128, offset: 35072)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "framing", scope: !385, file: !386, line: 1274, baseType: !1196, size: 128, offset: 35200)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameFraming", file: !386, line: 650, size: 128, elements: !1197)
!1197 = !{!1198, !1199, !1200, !1201, !1202}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "col", scope: !1196, file: !386, line: 651, baseType: !367, size: 96)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1196, file: !386, line: 652, baseType: !280, size: 8, offset: 96)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1196, file: !386, line: 652, baseType: !280, size: 8, offset: 104)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1196, file: !386, line: 652, baseType: !280, size: 8, offset: 112)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1196, file: !386, line: 652, baseType: !280, size: 8, offset: 120)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "gm", scope: !385, file: !386, line: 1275, baseType: !1204, size: 1472, offset: 35328)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameData", file: !386, line: 676, size: 1472, elements: !1205)
!1205 = !{!1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1218, !1228, !1229, !1230, !1231, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "framing", scope: !1204, file: !386, line: 679, baseType: !1196, size: 128)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "playerflag", scope: !1204, file: !386, line: 680, baseType: !299, size: 16, offset: 128)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "xplay", scope: !1204, file: !386, line: 680, baseType: !299, size: 16, offset: 144)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "yplay", scope: !1204, file: !386, line: 680, baseType: !299, size: 16, offset: 160)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "freqplay", scope: !1204, file: !386, line: 680, baseType: !299, size: 16, offset: 176)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !1204, file: !386, line: 681, baseType: !299, size: 16, offset: 192)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "attrib", scope: !1204, file: !386, line: 681, baseType: !299, size: 16, offset: 208)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "rt1", scope: !1204, file: !386, line: 681, baseType: !299, size: 16, offset: 224)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "rt2", scope: !1204, file: !386, line: 681, baseType: !299, size: 16, offset: 240)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "aasamples", scope: !1204, file: !386, line: 682, baseType: !299, size: 16, offset: 256)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "pad4", scope: !1204, file: !386, line: 682, baseType: !1217, size: 48, offset: 272)
!1217 = !DICompositeType(tag: DW_TAG_array_type, baseType: !299, size: 48, elements: !368)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "dome", scope: !1204, file: !386, line: 685, baseType: !1219, size: 192, offset: 320)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GameDome", file: !386, line: 633, size: 192, elements: !1220)
!1220 = !{!1221, !1222, !1223, !1224, !1225, !1226, !1227}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "res", scope: !1219, file: !386, line: 634, baseType: !299, size: 16)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1219, file: !386, line: 634, baseType: !299, size: 16, offset: 16)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "angle", scope: !1219, file: !386, line: 635, baseType: !299, size: 16, offset: 32)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "tilt", scope: !1219, file: !386, line: 635, baseType: !299, size: 16, offset: 48)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "resbuf", scope: !1219, file: !386, line: 636, baseType: !240, size: 32, offset: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1219, file: !386, line: 636, baseType: !240, size: 32, offset: 96)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "warptext", scope: !1219, file: !386, line: 637, baseType: !1142, size: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "stereoflag", scope: !1204, file: !386, line: 686, baseType: !299, size: 16, offset: 512)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "stereomode", scope: !1204, file: !386, line: 686, baseType: !299, size: 16, offset: 528)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "eyeseparation", scope: !1204, file: !386, line: 687, baseType: !240, size: 32, offset: 544)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "recastData", scope: !1204, file: !386, line: 688, baseType: !1232, size: 448, offset: 576)
!1232 = !DIDerivedType(tag: DW_TAG_typedef, name: "RecastData", file: !386, line: 674, baseType: !1233)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RecastData", file: !386, line: 659, size: 448, elements: !1234)
!1234 = !{!1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "cellsize", scope: !1233, file: !386, line: 660, baseType: !240, size: 32)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "cellheight", scope: !1233, file: !386, line: 661, baseType: !240, size: 32, offset: 32)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "agentmaxslope", scope: !1233, file: !386, line: 662, baseType: !240, size: 32, offset: 64)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "agentmaxclimb", scope: !1233, file: !386, line: 663, baseType: !240, size: 32, offset: 96)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "agentheight", scope: !1233, file: !386, line: 664, baseType: !240, size: 32, offset: 128)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "agentradius", scope: !1233, file: !386, line: 665, baseType: !240, size: 32, offset: 160)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "edgemaxlen", scope: !1233, file: !386, line: 666, baseType: !240, size: 32, offset: 192)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "edgemaxerror", scope: !1233, file: !386, line: 667, baseType: !240, size: 32, offset: 224)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "regionminsize", scope: !1233, file: !386, line: 668, baseType: !240, size: 32, offset: 256)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "regionmergesize", scope: !1233, file: !386, line: 669, baseType: !240, size: 32, offset: 288)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "vertsperpoly", scope: !1233, file: !386, line: 670, baseType: !15, size: 32, offset: 320)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "detailsampledist", scope: !1233, file: !386, line: 671, baseType: !240, size: 32, offset: 352)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "detailsamplemaxerror", scope: !1233, file: !386, line: 672, baseType: !240, size: 32, offset: 384)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1233, file: !386, line: 673, baseType: !299, size: 16, offset: 416)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1233, file: !386, line: 673, baseType: !299, size: 16, offset: 432)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "gravity", scope: !1204, file: !386, line: 692, baseType: !240, size: 32, offset: 1024)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "activityBoxRadius", scope: !1204, file: !386, line: 697, baseType: !240, size: 32, offset: 1056)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1204, file: !386, line: 703, baseType: !15, size: 32, offset: 1088)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1204, file: !386, line: 704, baseType: !299, size: 16, offset: 1120)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "matmode", scope: !1204, file: !386, line: 704, baseType: !299, size: 16, offset: 1136)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "occlusionRes", scope: !1204, file: !386, line: 705, baseType: !299, size: 16, offset: 1152)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "physicsEngine", scope: !1204, file: !386, line: 706, baseType: !299, size: 16, offset: 1168)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "exitkey", scope: !1204, file: !386, line: 707, baseType: !299, size: 16, offset: 1184)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "vsync", scope: !1204, file: !386, line: 708, baseType: !299, size: 16, offset: 1200)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "ticrate", scope: !1204, file: !386, line: 709, baseType: !299, size: 16, offset: 1216)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "maxlogicstep", scope: !1204, file: !386, line: 709, baseType: !299, size: 16, offset: 1232)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "physubstep", scope: !1204, file: !386, line: 709, baseType: !299, size: 16, offset: 1248)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "maxphystep", scope: !1204, file: !386, line: 709, baseType: !299, size: 16, offset: 1264)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "obstacleSimulation", scope: !1204, file: !386, line: 710, baseType: !299, size: 16, offset: 1280)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "raster_storage", scope: !1204, file: !386, line: 711, baseType: !299, size: 16, offset: 1296)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "levelHeight", scope: !1204, file: !386, line: 712, baseType: !240, size: 32, offset: 1312)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "deactivationtime", scope: !1204, file: !386, line: 713, baseType: !240, size: 32, offset: 1344)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "lineardeactthreshold", scope: !1204, file: !386, line: 713, baseType: !240, size: 32, offset: 1376)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "angulardeactthreshold", scope: !1204, file: !386, line: 713, baseType: !240, size: 32, offset: 1408)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1204, file: !386, line: 713, baseType: !240, size: 32, offset: 1440)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "unit", scope: !385, file: !386, line: 1278, baseType: !1271, size: 64, offset: 36800)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "UnitSettings", file: !386, line: 1197, size: 64, elements: !1272)
!1272 = !{!1273, !1274, !1275, !1276}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "scale_length", scope: !1271, file: !386, line: 1199, baseType: !240, size: 32)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "system", scope: !1271, file: !386, line: 1200, baseType: !280, size: 8, offset: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "system_rotation", scope: !1271, file: !386, line: 1201, baseType: !280, size: 8, offset: 40)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1271, file: !386, line: 1202, baseType: !299, size: 16, offset: 48)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !385, file: !386, line: 1281, baseType: !506, size: 64, offset: 36864)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "physics_settings", scope: !385, file: !386, line: 1284, baseType: !1279, size: 192, offset: 36928)
!1279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PhysicsSettings", file: !386, line: 1208, size: 192, elements: !1280)
!1280 = !{!1281, !1282, !1283, !1284}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "gravity", scope: !1279, file: !386, line: 1209, baseType: !367, size: 96)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1279, file: !386, line: 1210, baseType: !15, size: 32, offset: 96)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "quick_cache_step", scope: !1279, file: !386, line: 1210, baseType: !15, size: 32, offset: 128)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !1279, file: !386, line: 1210, baseType: !15, size: 32, offset: 160)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "clip", scope: !385, file: !386, line: 1287, baseType: !1286, size: 64, offset: 37120)
!1286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1287, size: 64)
!1287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClip", file: !1288, line: 64, size: 19136, elements: !1289)
!1288 = !DIFile(filename: "blender/source/blender/makesdna/DNA_movieclip_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1289 = !{!1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1302, !1303, !1477, !1478, !1486, !1487, !1488, !1489, !1490}
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1287, file: !1288, line: 65, baseType: !389, size: 960)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "adt", scope: !1287, file: !1288, line: 66, baseType: !454, size: 64, offset: 960)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1287, file: !1288, line: 68, baseType: !408, size: 8192, offset: 1024)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "source", scope: !1287, file: !1288, line: 70, baseType: !15, size: 32, offset: 9216)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "lastframe", scope: !1287, file: !1288, line: 71, baseType: !15, size: 32, offset: 9248)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "lastsize", scope: !1287, file: !1288, line: 72, baseType: !246, size: 64, offset: 9280)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "aspx", scope: !1287, file: !1288, line: 74, baseType: !240, size: 32, offset: 9344)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "aspy", scope: !1287, file: !1288, line: 74, baseType: !240, size: 32, offset: 9376)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !1287, file: !1288, line: 76, baseType: !338, size: 64, offset: 9408)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !1287, file: !1288, line: 77, baseType: !1300, size: 64, offset: 9472)
!1300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1301, size: 64)
!1301 = !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClipCache", file: !1288, line: 77, flags: DIFlagFwdDecl)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !1287, file: !1288, line: 78, baseType: !506, size: 64, offset: 9536)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "tracking", scope: !1287, file: !1288, line: 80, baseType: !1304, size: 2624, offset: 9600)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTracking", file: !1305, line: 340, size: 2624, elements: !1306)
!1305 = !DIFile(filename: "blender/source/blender/makesdna/DNA_tracking_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1306 = !{!1307, !1335, !1353, !1354, !1355, !1372, !1430, !1431, !1457, !1458, !1459, !1460, !1466}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "settings", scope: !1304, file: !1305, line: 341, baseType: !1308, size: 576)
!1308 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingSettings", file: !1305, line: 251, baseType: !1309)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingSettings", file: !1305, line: 207, size: 576, elements: !1310)
!1310 = !{!1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1309, file: !1305, line: 208, baseType: !15, size: 32)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "default_motion_model", scope: !1309, file: !1305, line: 211, baseType: !299, size: 16, offset: 32)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "default_algorithm_flag", scope: !1309, file: !1305, line: 212, baseType: !299, size: 16, offset: 48)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "default_minimum_correlation", scope: !1309, file: !1305, line: 213, baseType: !240, size: 32, offset: 64)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "default_pattern_size", scope: !1309, file: !1305, line: 214, baseType: !299, size: 16, offset: 96)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "default_search_size", scope: !1309, file: !1305, line: 215, baseType: !299, size: 16, offset: 112)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "default_frames_limit", scope: !1309, file: !1305, line: 216, baseType: !299, size: 16, offset: 128)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "default_margin", scope: !1309, file: !1305, line: 217, baseType: !299, size: 16, offset: 144)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "default_pattern_match", scope: !1309, file: !1305, line: 218, baseType: !299, size: 16, offset: 160)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "default_flag", scope: !1309, file: !1305, line: 219, baseType: !299, size: 16, offset: 176)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "default_weight", scope: !1309, file: !1305, line: 220, baseType: !240, size: 32, offset: 192)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "motion_flag", scope: !1309, file: !1305, line: 222, baseType: !299, size: 16, offset: 224)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "speed", scope: !1309, file: !1305, line: 225, baseType: !299, size: 16, offset: 240)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "keyframe1", scope: !1309, file: !1305, line: 228, baseType: !15, size: 32, offset: 256)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "keyframe2", scope: !1309, file: !1305, line: 229, baseType: !15, size: 32, offset: 288)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "reconstruction_flag", scope: !1309, file: !1305, line: 233, baseType: !15, size: 32, offset: 320)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "refine_camera_intrinsics", scope: !1309, file: !1305, line: 236, baseType: !299, size: 16, offset: 352)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1309, file: !1305, line: 236, baseType: !299, size: 16, offset: 368)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "dist", scope: !1309, file: !1305, line: 241, baseType: !240, size: 32, offset: 384)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "clean_frames", scope: !1309, file: !1305, line: 244, baseType: !15, size: 32, offset: 416)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "clean_action", scope: !1309, file: !1305, line: 244, baseType: !15, size: 32, offset: 448)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "clean_error", scope: !1309, file: !1305, line: 245, baseType: !240, size: 32, offset: 480)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "object_distance", scope: !1309, file: !1305, line: 248, baseType: !240, size: 32, offset: 512)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "pad3", scope: !1309, file: !1305, line: 250, baseType: !15, size: 32, offset: 544)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !1304, file: !1305, line: 342, baseType: !1336, size: 448, offset: 576)
!1336 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingCamera", file: !1305, line: 79, baseType: !1337)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingCamera", file: !1305, line: 61, size: 448, elements: !1338)
!1338 = !{!1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "intrinsics", scope: !1337, file: !1305, line: 62, baseType: !239, size: 64)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "distortion_model", scope: !1337, file: !1305, line: 64, baseType: !299, size: 16, offset: 64)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1337, file: !1305, line: 65, baseType: !299, size: 16, offset: 80)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "sensor_width", scope: !1337, file: !1305, line: 67, baseType: !240, size: 32, offset: 96)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "pixel_aspect", scope: !1337, file: !1305, line: 68, baseType: !240, size: 32, offset: 128)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "focal", scope: !1337, file: !1305, line: 69, baseType: !240, size: 32, offset: 160)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "units", scope: !1337, file: !1305, line: 70, baseType: !299, size: 16, offset: 192)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1337, file: !1305, line: 71, baseType: !299, size: 16, offset: 208)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "principal", scope: !1337, file: !1305, line: 72, baseType: !250, size: 64, offset: 224)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "k1", scope: !1337, file: !1305, line: 75, baseType: !240, size: 32, offset: 288)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "k2", scope: !1337, file: !1305, line: 75, baseType: !240, size: 32, offset: 320)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "k3", scope: !1337, file: !1305, line: 75, baseType: !240, size: 32, offset: 352)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "division_k1", scope: !1337, file: !1305, line: 78, baseType: !240, size: 32, offset: 384)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "division_k2", scope: !1337, file: !1305, line: 78, baseType: !240, size: 32, offset: 416)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "tracks", scope: !1304, file: !1305, line: 343, baseType: !443, size: 128, offset: 1024)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "plane_tracks", scope: !1304, file: !1305, line: 344, baseType: !443, size: 128, offset: 1152)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "reconstruction", scope: !1304, file: !1305, line: 345, baseType: !1356, size: 192, offset: 1280)
!1356 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingReconstruction", file: !1305, line: 278, baseType: !1357)
!1357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingReconstruction", file: !1305, line: 270, size: 192, elements: !1358)
!1358 = !{!1359, !1360, !1361, !1362, !1363}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1357, file: !1305, line: 271, baseType: !15, size: 32)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1357, file: !1305, line: 273, baseType: !240, size: 32, offset: 32)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "last_camera", scope: !1357, file: !1305, line: 275, baseType: !15, size: 32, offset: 64)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "camnr", scope: !1357, file: !1305, line: 276, baseType: !15, size: 32, offset: 96)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "cameras", scope: !1357, file: !1305, line: 277, baseType: !1364, size: 64, offset: 128)
!1364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1365, size: 64)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieReconstructedCamera", file: !1305, line: 55, size: 576, elements: !1366)
!1366 = !{!1367, !1368, !1369}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1365, file: !1305, line: 56, baseType: !15, size: 32)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1365, file: !1305, line: 57, baseType: !240, size: 32, offset: 32)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "mat", scope: !1365, file: !1305, line: 58, baseType: !1370, size: 512, offset: 64)
!1370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 512, elements: !1371)
!1371 = !{!607, !607}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "stabilization", scope: !1304, file: !1305, line: 346, baseType: !1373, size: 384, offset: 1472)
!1373 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingStabilization", file: !1305, line: 268, baseType: !1374)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingStabilization", file: !1305, line: 253, size: 384, elements: !1375)
!1375 = !{!1376, !1377, !1378, !1379, !1380, !1424, !1425, !1426, !1427, !1428, !1429}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1374, file: !1305, line: 254, baseType: !15, size: 32)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "tot_track", scope: !1374, file: !1305, line: 255, baseType: !15, size: 32, offset: 32)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "act_track", scope: !1374, file: !1305, line: 255, baseType: !15, size: 32, offset: 64)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "maxscale", scope: !1374, file: !1305, line: 258, baseType: !240, size: 32, offset: 96)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "rot_track", scope: !1374, file: !1305, line: 259, baseType: !1381, size: 64, offset: 128)
!1381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1382, size: 64)
!1382 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingTrack", file: !1305, line: 164, baseType: !1383)
!1383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingTrack", file: !1305, line: 108, size: 1664, elements: !1384)
!1384 = !{!1385, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423}
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1383, file: !1305, line: 109, baseType: !1386, size: 64)
!1386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1383, size: 64)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1383, file: !1305, line: 109, baseType: !1386, size: 64, offset: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1383, file: !1305, line: 111, baseType: !279, size: 512, offset: 128)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "pat_min", scope: !1383, file: !1305, line: 119, baseType: !250, size: 64, offset: 640)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "pat_max", scope: !1383, file: !1305, line: 119, baseType: !250, size: 64, offset: 704)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "search_min", scope: !1383, file: !1305, line: 125, baseType: !250, size: 64, offset: 768)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "search_max", scope: !1383, file: !1305, line: 125, baseType: !250, size: 64, offset: 832)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1383, file: !1305, line: 127, baseType: !250, size: 64, offset: 896)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "markersnr", scope: !1383, file: !1305, line: 130, baseType: !15, size: 32, offset: 960)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "last_marker", scope: !1383, file: !1305, line: 131, baseType: !15, size: 32, offset: 992)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !1383, file: !1305, line: 132, baseType: !1397, size: 64, offset: 1024)
!1397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1398, size: 64)
!1398 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingMarker", file: !1305, line: 106, baseType: !1399)
!1399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingMarker", file: !1305, line: 81, size: 512, elements: !1400)
!1400 = !{!1401, !1402, !1405, !1406, !1407, !1408}
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !1399, file: !1305, line: 82, baseType: !250, size: 64)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_corners", scope: !1399, file: !1305, line: 97, baseType: !1403, size: 256, offset: 64)
!1403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 256, elements: !1404)
!1404 = !{!607, !248}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "search_min", scope: !1399, file: !1305, line: 102, baseType: !250, size: 64, offset: 320)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "search_max", scope: !1399, file: !1305, line: 102, baseType: !250, size: 64, offset: 384)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1399, file: !1305, line: 104, baseType: !15, size: 32, offset: 448)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1399, file: !1305, line: 105, baseType: !15, size: 32, offset: 480)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "bundle_pos", scope: !1383, file: !1305, line: 135, baseType: !367, size: 96, offset: 1088)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1383, file: !1305, line: 136, baseType: !240, size: 32, offset: 1184)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1383, file: !1305, line: 139, baseType: !15, size: 32, offset: 1216)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "pat_flag", scope: !1383, file: !1305, line: 139, baseType: !15, size: 32, offset: 1248)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "search_flag", scope: !1383, file: !1305, line: 139, baseType: !15, size: 32, offset: 1280)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "color", scope: !1383, file: !1305, line: 140, baseType: !367, size: 96, offset: 1312)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "frames_limit", scope: !1383, file: !1305, line: 143, baseType: !299, size: 16, offset: 1408)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "margin", scope: !1383, file: !1305, line: 144, baseType: !299, size: 16, offset: 1424)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_match", scope: !1383, file: !1305, line: 145, baseType: !299, size: 16, offset: 1440)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "motion_model", scope: !1383, file: !1305, line: 148, baseType: !299, size: 16, offset: 1456)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "algorithm_flag", scope: !1383, file: !1305, line: 149, baseType: !15, size: 32, offset: 1472)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "minimum_correlation", scope: !1383, file: !1305, line: 150, baseType: !240, size: 32, offset: 1504)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !1383, file: !1305, line: 152, baseType: !506, size: 64, offset: 1536)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1383, file: !1305, line: 163, baseType: !240, size: 32, offset: 1600)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1383, file: !1305, line: 163, baseType: !240, size: 32, offset: 1632)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "locinf", scope: !1374, file: !1305, line: 261, baseType: !240, size: 32, offset: 192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "scaleinf", scope: !1374, file: !1305, line: 261, baseType: !240, size: 32, offset: 224)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "rotinf", scope: !1374, file: !1305, line: 261, baseType: !240, size: 32, offset: 256)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1374, file: !1305, line: 263, baseType: !15, size: 32, offset: 288)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !1374, file: !1305, line: 266, baseType: !15, size: 32, offset: 320)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1374, file: !1305, line: 267, baseType: !240, size: 32, offset: 352)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "act_track", scope: !1304, file: !1305, line: 347, baseType: !1381, size: 64, offset: 1856)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "act_plane_track", scope: !1304, file: !1305, line: 348, baseType: !1432, size: 64, offset: 1920)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64)
!1433 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingPlaneTrack", file: !1305, line: 205, baseType: !1434)
!1434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingPlaneTrack", file: !1305, line: 186, size: 1024, elements: !1435)
!1435 = !{!1436, !1438, !1439, !1440, !1442, !1443, !1444, !1452, !1453, !1454, !1455, !1456}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1434, file: !1305, line: 187, baseType: !1437, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1434, size: 64)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1434, file: !1305, line: 187, baseType: !1437, size: 64, offset: 64)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1434, file: !1305, line: 189, baseType: !279, size: 512, offset: 128)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "point_tracks", scope: !1434, file: !1305, line: 191, baseType: !1441, size: 64, offset: 640)
!1441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1381, size: 64)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "point_tracksnr", scope: !1434, file: !1305, line: 193, baseType: !15, size: 32, offset: 704)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1434, file: !1305, line: 193, baseType: !15, size: 32, offset: 736)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "markers", scope: !1434, file: !1305, line: 195, baseType: !1445, size: 64, offset: 768)
!1445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1446, size: 64)
!1446 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingPlaneMarker", file: !1305, line: 184, baseType: !1447)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingPlaneMarker", file: !1305, line: 166, size: 320, elements: !1448)
!1448 = !{!1449, !1450, !1451}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "corners", scope: !1447, file: !1305, line: 180, baseType: !1403, size: 256)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "framenr", scope: !1447, file: !1305, line: 182, baseType: !15, size: 32, offset: 256)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1447, file: !1305, line: 183, baseType: !15, size: 32, offset: 288)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "markersnr", scope: !1434, file: !1305, line: 196, baseType: !15, size: 32, offset: 832)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1434, file: !1305, line: 198, baseType: !15, size: 32, offset: 864)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !1434, file: !1305, line: 200, baseType: !671, size: 64, offset: 896)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "image_opacity", scope: !1434, file: !1305, line: 201, baseType: !240, size: 32, offset: 960)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "last_marker", scope: !1434, file: !1305, line: 204, baseType: !15, size: 32, offset: 992)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1304, file: !1305, line: 350, baseType: !443, size: 128, offset: 1984)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "objectnr", scope: !1304, file: !1305, line: 351, baseType: !15, size: 32, offset: 2112)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "tot_object", scope: !1304, file: !1305, line: 351, baseType: !15, size: 32, offset: 2144)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "stats", scope: !1304, file: !1305, line: 353, baseType: !1461, size: 64, offset: 2176)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1462 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingStats", file: !1305, line: 297, baseType: !1463)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingStats", file: !1305, line: 295, size: 2048, elements: !1464)
!1464 = !{!1465}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "message", scope: !1463, file: !1305, line: 296, baseType: !321, size: 2048)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "dopesheet", scope: !1304, file: !1305, line: 355, baseType: !1467, size: 384, offset: 2240)
!1467 = !DIDerivedType(tag: DW_TAG_typedef, name: "MovieTrackingDopesheet", file: !1305, line: 338, baseType: !1468)
!1468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieTrackingDopesheet", file: !1305, line: 322, size: 384, elements: !1469)
!1469 = !{!1470, !1471, !1472, !1473, !1474, !1475, !1476}
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "ok", scope: !1468, file: !1305, line: 323, baseType: !15, size: 32)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "sort_method", scope: !1468, file: !1305, line: 325, baseType: !299, size: 16, offset: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1468, file: !1305, line: 326, baseType: !299, size: 16, offset: 48)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "coverage_segments", scope: !1468, file: !1305, line: 331, baseType: !443, size: 128, offset: 64)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1468, file: !1305, line: 334, baseType: !443, size: 128, offset: 192)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "tot_channel", scope: !1468, file: !1305, line: 335, baseType: !15, size: 32, offset: 320)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1468, file: !1305, line: 337, baseType: !15, size: 32, offset: 352)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "tracking_context", scope: !1287, file: !1288, line: 81, baseType: !239, size: 64, offset: 12224)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "proxy", scope: !1287, file: !1288, line: 85, baseType: !1479, size: 6208, offset: 12288)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MovieClipProxy", file: !1288, line: 55, size: 6208, elements: !1480)
!1480 = !{!1481, !1482, !1483, !1484, !1485}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !1479, file: !1288, line: 56, baseType: !327, size: 6144)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "tc", scope: !1479, file: !1288, line: 58, baseType: !299, size: 16, offset: 6144)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1479, file: !1288, line: 59, baseType: !299, size: 16, offset: 6160)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "build_size_flag", scope: !1479, file: !1288, line: 60, baseType: !299, size: 16, offset: 6176)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "build_tc_flag", scope: !1479, file: !1288, line: 61, baseType: !299, size: 16, offset: 6192)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1287, file: !1288, line: 86, baseType: !15, size: 32, offset: 18496)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1287, file: !1288, line: 88, baseType: !15, size: 32, offset: 18528)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1287, file: !1288, line: 90, baseType: !15, size: 32, offset: 18560)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "frame_offset", scope: !1287, file: !1288, line: 94, baseType: !15, size: 32, offset: 18592)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace_settings", scope: !1287, file: !1288, line: 100, baseType: !375, size: 512, offset: 18624)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "customdata_mask", scope: !385, file: !386, line: 1289, baseType: !1492, size: 64, offset: 37184)
!1492 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !1493, line: 27, baseType: !1494)
!1493 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!1494 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !1495, line: 45, baseType: !1496)
!1495 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!1496 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "customdata_mask_modal", scope: !385, file: !386, line: 1290, baseType: !1492, size: 64, offset: 37248)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "view_settings", scope: !385, file: !386, line: 1293, baseType: !904, size: 1280, offset: 37312)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "display_settings", scope: !385, file: !386, line: 1294, baseType: !954, size: 512, offset: 38592)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "sequencer_colorspace_settings", scope: !385, file: !386, line: 1295, baseType: !375, size: 512, offset: 39104)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "rigidbody_world", scope: !385, file: !386, line: 1298, baseType: !1502, size: 64, offset: 39616)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = !DICompositeType(tag: DW_TAG_structure_type, name: "RigidBodyWorld", file: !386, line: 1298, flags: DIFlagFwdDecl)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "scene_camera", scope: !271, file: !14, line: 152, baseType: !457, size: 64, offset: 1536)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "clip", scope: !271, file: !14, line: 153, baseType: !1286, size: 64, offset: 1600)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !271, file: !14, line: 154, baseType: !1507, size: 64, offset: 1664)
!1507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1508, size: 64)
!1508 = !DICompositeType(tag: DW_TAG_structure_type, name: "Mask", file: !1509, line: 264, flags: DIFlagFwdDecl)
!1509 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_context.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "anim", scope: !271, file: !14, line: 156, baseType: !338, size: 64, offset: 1728)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "effect_fader", scope: !271, file: !14, line: 158, baseType: !240, size: 32, offset: 1792)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "speed_fader", scope: !271, file: !14, line: 159, baseType: !240, size: 32, offset: 1824)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "seq1", scope: !271, file: !14, line: 162, baseType: !274, size: 64, offset: 1856)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "seq2", scope: !271, file: !14, line: 162, baseType: !274, size: 64, offset: 1920)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "seq3", scope: !271, file: !14, line: 162, baseType: !274, size: 64, offset: 1984)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "seqbase", scope: !271, file: !14, line: 164, baseType: !443, size: 128, offset: 2048)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "sound", scope: !271, file: !14, line: 166, baseType: !1518, size: 64, offset: 2176)
!1518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1519, size: 64)
!1519 = !DICompositeType(tag: DW_TAG_structure_type, name: "bSound", file: !1520, line: 46, flags: DIFlagFwdDecl)
!1520 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_sequencer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "scene_sound", scope: !271, file: !14, line: 167, baseType: !239, size: 64, offset: 2240)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "volume", scope: !271, file: !14, line: 168, baseType: !240, size: 32, offset: 2304)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "pitch", scope: !271, file: !14, line: 170, baseType: !240, size: 32, offset: 2336)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "pan", scope: !271, file: !14, line: 170, baseType: !240, size: 32, offset: 2368)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "strobe", scope: !271, file: !14, line: 171, baseType: !240, size: 32, offset: 2400)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "effectdata", scope: !271, file: !14, line: 173, baseType: !239, size: 64, offset: 2432)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "anim_startofs", scope: !271, file: !14, line: 175, baseType: !15, size: 32, offset: 2496)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "anim_endofs", scope: !271, file: !14, line: 176, baseType: !15, size: 32, offset: 2528)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "blend_mode", scope: !271, file: !14, line: 179, baseType: !15, size: 32, offset: 2560)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "blend_opacity", scope: !271, file: !14, line: 180, baseType: !240, size: 32, offset: 2592)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "sfra", scope: !271, file: !14, line: 183, baseType: !15, size: 32, offset: 2624)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "alpha_mode", scope: !271, file: !14, line: 185, baseType: !280, size: 8, offset: 2656)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !271, file: !14, line: 186, baseType: !797, size: 24, offset: 2664)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "modifiers", scope: !271, file: !14, line: 189, baseType: !443, size: 128, offset: 2688)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "trim", scope: !243, file: !3, line: 1240, baseType: !1536, size: 64, offset: 256)
!1536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !605, size: 64)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "num_seq", scope: !243, file: !3, line: 1241, baseType: !15, size: 32, offset: 320)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "slow", scope: !243, file: !3, line: 1242, baseType: !605, size: 8, offset: 352)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "slow_offset", scope: !243, file: !3, line: 1243, baseType: !15, size: 32, offset: 384)
!1540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1541, size: 64)
!1541 = !DIDerivedType(tag: DW_TAG_typedef, name: "Scene", file: !386, line: 1299, baseType: !385)
!1542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1543, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "SpaceSeq", file: !44, line: 504, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SpaceSeq", file: !44, line: 481, size: 2432, elements: !1545)
!1545 = !{!1546, !1559, !1560, !1561, !1562, !1563, !1564, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1544, file: !44, line: 482, baseType: !1547, size: 64)
!1547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1548, size: 64)
!1548 = !DIDerivedType(tag: DW_TAG_typedef, name: "SpaceLink", file: !44, line: 91, baseType: !1549)
!1549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SpaceLink", file: !44, line: 85, size: 448, elements: !1550)
!1550 = !{!1551, !1553, !1554, !1555, !1556, !1557}
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1549, file: !44, line: 86, baseType: !1552, size: 64)
!1552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1549, file: !44, line: 86, baseType: !1552, size: 64, offset: 64)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "regionbase", scope: !1549, file: !44, line: 87, baseType: !443, size: 128, offset: 128)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "spacetype", scope: !1549, file: !44, line: 88, baseType: !15, size: 32, offset: 256)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "blockscale", scope: !1549, file: !44, line: 89, baseType: !240, size: 32, offset: 288)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "blockhandler", scope: !1549, file: !44, line: 90, baseType: !1558, size: 128, offset: 320)
!1558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !299, size: 128, elements: !689)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1544, file: !44, line: 482, baseType: !1547, size: 64, offset: 64)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "regionbase", scope: !1544, file: !44, line: 483, baseType: !443, size: 128, offset: 128)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "spacetype", scope: !1544, file: !44, line: 484, baseType: !15, size: 32, offset: 256)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "blockscale", scope: !1544, file: !44, line: 485, baseType: !240, size: 32, offset: 288)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "blockhandler", scope: !1544, file: !44, line: 487, baseType: !1558, size: 128, offset: 320)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "v2d", scope: !1544, file: !44, line: 489, baseType: !1565, size: 1280, offset: 448)
!1565 = !DIDerivedType(tag: DW_TAG_typedef, name: "View2D", file: !1566, line: 71, baseType: !1567)
!1566 = !DIFile(filename: "blender/source/blender/makesdna/DNA_view2d_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "View2D", file: !1566, line: 40, size: 1280, elements: !1568)
!1568 = !{!1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1592, !1593, !1594, !1597}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "tot", scope: !1567, file: !1566, line: 41, baseType: !524, size: 128)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !1567, file: !1566, line: 41, baseType: !524, size: 128, offset: 128)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "vert", scope: !1567, file: !1566, line: 42, baseType: !1082, size: 128, offset: 256)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "hor", scope: !1567, file: !1566, line: 42, baseType: !1082, size: 128, offset: 384)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !1567, file: !1566, line: 43, baseType: !1082, size: 128, offset: 512)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !1567, file: !1566, line: 45, baseType: !250, size: 64, offset: 640)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !1567, file: !1566, line: 45, baseType: !250, size: 64, offset: 704)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "minzoom", scope: !1567, file: !1566, line: 46, baseType: !240, size: 32, offset: 768)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "maxzoom", scope: !1567, file: !1566, line: 46, baseType: !240, size: 32, offset: 800)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "scroll", scope: !1567, file: !1566, line: 48, baseType: !299, size: 16, offset: 832)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "scroll_ui", scope: !1567, file: !1566, line: 49, baseType: !299, size: 16, offset: 848)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "keeptot", scope: !1567, file: !1566, line: 51, baseType: !299, size: 16, offset: 864)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "keepzoom", scope: !1567, file: !1566, line: 52, baseType: !299, size: 16, offset: 880)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "keepofs", scope: !1567, file: !1566, line: 53, baseType: !299, size: 16, offset: 896)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1567, file: !1566, line: 55, baseType: !299, size: 16, offset: 912)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1567, file: !1566, line: 56, baseType: !299, size: 16, offset: 928)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "winx", scope: !1567, file: !1566, line: 58, baseType: !299, size: 16, offset: 944)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "winy", scope: !1567, file: !1566, line: 58, baseType: !299, size: 16, offset: 960)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "oldwinx", scope: !1567, file: !1566, line: 59, baseType: !299, size: 16, offset: 976)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "oldwiny", scope: !1567, file: !1566, line: 59, baseType: !299, size: 16, offset: 992)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "around", scope: !1567, file: !1566, line: 61, baseType: !299, size: 16, offset: 1008)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "tab_offset", scope: !1567, file: !1566, line: 63, baseType: !1591, size: 64, offset: 1024)
!1591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !240, size: 64)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "tab_num", scope: !1567, file: !1566, line: 64, baseType: !15, size: 32, offset: 1088)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "tab_cur", scope: !1567, file: !1566, line: 65, baseType: !15, size: 32, offset: 1120)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "sms", scope: !1567, file: !1566, line: 68, baseType: !1595, size: 64, offset: 1152)
!1595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1596, size: 64)
!1596 = !DICompositeType(tag: DW_TAG_structure_type, name: "SmoothView2DStore", file: !1566, line: 68, flags: DIFlagFwdDecl)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "smooth_timer", scope: !1567, file: !1566, line: 69, baseType: !1598, size: 64, offset: 1216)
!1598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1599, size: 64)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmTimer", file: !1600, line: 490, size: 768, elements: !1601)
!1600 = !DIFile(filename: "blender/source/blender/windowmanager/WM_types.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!1601 = !{!1602, !1603, !1604, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1599, file: !1600, line: 491, baseType: !1598, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1599, file: !1600, line: 491, baseType: !1598, size: 64, offset: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "win", scope: !1599, file: !1600, line: 493, baseType: !1605, size: 64, offset: 128)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmWindow", file: !184, line: 169, size: 2048, elements: !1607)
!1607 = !{!1608, !1609, !1610, !1611, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1698, !1701, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1606, file: !184, line: 170, baseType: !1605, size: 64)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1606, file: !184, line: 170, baseType: !1605, size: 64, offset: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "ghostwin", scope: !1606, file: !184, line: 172, baseType: !239, size: 64, offset: 128)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "screen", scope: !1606, file: !184, line: 174, baseType: !1612, size: 64, offset: 192)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bScreen", file: !204, line: 49, size: 1984, elements: !1614)
!1614 = !{!1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1613, file: !204, line: 50, baseType: !389, size: 960)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "vertbase", scope: !1613, file: !204, line: 52, baseType: !443, size: 128, offset: 960)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "edgebase", scope: !1613, file: !204, line: 53, baseType: !443, size: 128, offset: 1088)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "areabase", scope: !1613, file: !204, line: 54, baseType: !443, size: 128, offset: 1216)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "regionbase", scope: !1613, file: !204, line: 55, baseType: !443, size: 128, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !1613, file: !204, line: 57, baseType: !384, size: 64, offset: 1472)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "newscene", scope: !1613, file: !204, line: 58, baseType: !384, size: 64, offset: 1536)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "redraws_flag", scope: !1613, file: !204, line: 60, baseType: !15, size: 32, offset: 1600)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "pad1", scope: !1613, file: !204, line: 61, baseType: !15, size: 32, offset: 1632)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1613, file: !204, line: 63, baseType: !299, size: 16, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1613, file: !204, line: 64, baseType: !299, size: 16, offset: 1680)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "winid", scope: !1613, file: !204, line: 65, baseType: !299, size: 16, offset: 1696)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw", scope: !1613, file: !204, line: 66, baseType: !299, size: 16, offset: 1712)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "do_refresh", scope: !1613, file: !204, line: 67, baseType: !299, size: 16, offset: 1728)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw_gesture", scope: !1613, file: !204, line: 68, baseType: !299, size: 16, offset: 1744)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw_paintcursor", scope: !1613, file: !204, line: 69, baseType: !299, size: 16, offset: 1760)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw_drag", scope: !1613, file: !204, line: 70, baseType: !299, size: 16, offset: 1776)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "swap", scope: !1613, file: !204, line: 71, baseType: !299, size: 16, offset: 1792)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "mainwin", scope: !1613, file: !204, line: 73, baseType: !299, size: 16, offset: 1808)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "subwinactive", scope: !1613, file: !204, line: 74, baseType: !299, size: 16, offset: 1824)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1613, file: !204, line: 76, baseType: !299, size: 16, offset: 1840)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "animtimer", scope: !1613, file: !204, line: 78, baseType: !1598, size: 64, offset: 1856)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1613, file: !204, line: 79, baseType: !239, size: 64, offset: 1920)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "newscreen", scope: !1606, file: !184, line: 175, baseType: !1612, size: 64, offset: 256)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "screenname", scope: !1606, file: !184, line: 176, baseType: !279, size: 512, offset: 320)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "posx", scope: !1606, file: !184, line: 178, baseType: !299, size: 16, offset: 832)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "posy", scope: !1606, file: !184, line: 178, baseType: !299, size: 16, offset: 848)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "sizex", scope: !1606, file: !184, line: 178, baseType: !299, size: 16, offset: 864)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "sizey", scope: !1606, file: !184, line: 178, baseType: !299, size: 16, offset: 880)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "windowstate", scope: !1606, file: !184, line: 179, baseType: !299, size: 16, offset: 896)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "monitor", scope: !1606, file: !184, line: 180, baseType: !299, size: 16, offset: 912)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !1606, file: !184, line: 181, baseType: !299, size: 16, offset: 928)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "cursor", scope: !1606, file: !184, line: 182, baseType: !299, size: 16, offset: 944)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "lastcursor", scope: !1606, file: !184, line: 183, baseType: !299, size: 16, offset: 960)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "modalcursor", scope: !1606, file: !184, line: 184, baseType: !299, size: 16, offset: 976)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "grabcursor", scope: !1606, file: !184, line: 185, baseType: !299, size: 16, offset: 992)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "addmousemove", scope: !1606, file: !184, line: 186, baseType: !299, size: 16, offset: 1008)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "winid", scope: !1606, file: !184, line: 188, baseType: !15, size: 32, offset: 1024)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lock_pie_event", scope: !1606, file: !184, line: 190, baseType: !299, size: 16, offset: 1056)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "last_pie_event", scope: !1606, file: !184, line: 191, baseType: !299, size: 16, offset: 1072)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "eventstate", scope: !1606, file: !184, line: 194, baseType: !1656, size: 64, offset: 1088)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmEvent", file: !1600, line: 421, size: 960, elements: !1658)
!1658 = !{!1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1686, !1694, !1695, !1696, !1697}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1657, file: !1600, line: 422, baseType: !1656, size: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1657, file: !1600, line: 422, baseType: !1656, size: 64, offset: 64)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1657, file: !1600, line: 424, baseType: !299, size: 16, offset: 128)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1657, file: !1600, line: 425, baseType: !299, size: 16, offset: 144)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1657, file: !1600, line: 426, baseType: !15, size: 32, offset: 160)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1657, file: !1600, line: 426, baseType: !15, size: 32, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "mval", scope: !1657, file: !1600, line: 427, baseType: !246, size: 64, offset: 224)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "utf8_buf", scope: !1657, file: !1600, line: 428, baseType: !900, size: 48, offset: 288)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "ascii", scope: !1657, file: !1600, line: 431, baseType: !280, size: 8, offset: 336)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1657, file: !1600, line: 432, baseType: !280, size: 8, offset: 344)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "prevtype", scope: !1657, file: !1600, line: 435, baseType: !299, size: 16, offset: 352)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "prevval", scope: !1657, file: !1600, line: 436, baseType: !299, size: 16, offset: 368)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "prevx", scope: !1657, file: !1600, line: 437, baseType: !15, size: 32, offset: 384)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "prevy", scope: !1657, file: !1600, line: 437, baseType: !15, size: 32, offset: 416)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "prevclicktime", scope: !1657, file: !1600, line: 438, baseType: !1674, size: 64, offset: 448)
!1674 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "prevclickx", scope: !1657, file: !1600, line: 439, baseType: !15, size: 32, offset: 512)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "prevclicky", scope: !1657, file: !1600, line: 439, baseType: !15, size: 32, offset: 544)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "shift", scope: !1657, file: !1600, line: 442, baseType: !299, size: 16, offset: 576)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "ctrl", scope: !1657, file: !1600, line: 442, baseType: !299, size: 16, offset: 592)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "alt", scope: !1657, file: !1600, line: 442, baseType: !299, size: 16, offset: 608)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "oskey", scope: !1657, file: !1600, line: 442, baseType: !299, size: 16, offset: 624)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "keymodifier", scope: !1657, file: !1600, line: 443, baseType: !299, size: 16, offset: 640)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "check_click", scope: !1657, file: !1600, line: 446, baseType: !299, size: 16, offset: 656)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "keymap_idname", scope: !1657, file: !1600, line: 449, baseType: !1684, size: 64, offset: 704)
!1684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1685, size: 64)
!1685 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !280)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "tablet_data", scope: !1657, file: !1600, line: 452, baseType: !1687, size: 64, offset: 768)
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64)
!1688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmTabletData", file: !1600, line: 463, size: 128, elements: !1689)
!1689 = !{!1690, !1691, !1692, !1693}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "Active", scope: !1688, file: !1600, line: 464, baseType: !15, size: 32)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "Pressure", scope: !1688, file: !1600, line: 465, baseType: !240, size: 32, offset: 32)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "Xtilt", scope: !1688, file: !1600, line: 466, baseType: !240, size: 32, offset: 64)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "Ytilt", scope: !1688, file: !1600, line: 467, baseType: !240, size: 32, offset: 96)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "custom", scope: !1657, file: !1600, line: 455, baseType: !299, size: 16, offset: 832)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "customdatafree", scope: !1657, file: !1600, line: 456, baseType: !299, size: 16, offset: 848)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "pad2", scope: !1657, file: !1600, line: 457, baseType: !15, size: 32, offset: 864)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "customdata", scope: !1657, file: !1600, line: 458, baseType: !239, size: 64, offset: 896)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "curswin", scope: !1606, file: !184, line: 196, baseType: !1699, size: 64, offset: 1152)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = !DICompositeType(tag: DW_TAG_structure_type, name: "wmSubWindow", file: !184, line: 55, flags: DIFlagFwdDecl)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "tweak", scope: !1606, file: !184, line: 198, baseType: !1702, size: 64, offset: 1216)
!1702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1703, size: 64)
!1703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmGesture", file: !1600, line: 398, size: 448, elements: !1704)
!1704 = !{!1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714}
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1703, file: !1600, line: 399, baseType: !1702, size: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1703, file: !1600, line: 399, baseType: !1702, size: 64, offset: 64)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "event_type", scope: !1703, file: !1600, line: 400, baseType: !15, size: 32, offset: 128)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1703, file: !1600, line: 401, baseType: !15, size: 32, offset: 160)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1703, file: !1600, line: 402, baseType: !15, size: 32, offset: 192)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "swinid", scope: !1703, file: !1600, line: 403, baseType: !15, size: 32, offset: 224)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "points", scope: !1703, file: !1600, line: 404, baseType: !15, size: 32, offset: 256)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1703, file: !1600, line: 405, baseType: !15, size: 32, offset: 288)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "customdata", scope: !1703, file: !1600, line: 407, baseType: !239, size: 64, offset: 320)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "userdata", scope: !1703, file: !1600, line: 414, baseType: !239, size: 64, offset: 384)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "drawmethod", scope: !1606, file: !184, line: 200, baseType: !15, size: 32, offset: 1280)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "drawfail", scope: !1606, file: !184, line: 200, baseType: !15, size: 32, offset: 1312)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "drawdata", scope: !1606, file: !184, line: 201, baseType: !239, size: 64, offset: 1344)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "queue", scope: !1606, file: !184, line: 203, baseType: !443, size: 128, offset: 1408)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !1606, file: !184, line: 204, baseType: !443, size: 128, offset: 1536)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "modalhandlers", scope: !1606, file: !184, line: 205, baseType: !443, size: 128, offset: 1664)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "subwindows", scope: !1606, file: !184, line: 207, baseType: !443, size: 128, offset: 1792)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "gesture", scope: !1606, file: !184, line: 208, baseType: !443, size: 128, offset: 1920)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "timestep", scope: !1599, file: !1600, line: 495, baseType: !1674, size: 64, offset: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "event_type", scope: !1599, file: !1600, line: 496, baseType: !15, size: 32, offset: 256)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "customdata", scope: !1599, file: !1600, line: 497, baseType: !239, size: 64, offset: 320)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !1599, file: !1600, line: 499, baseType: !1674, size: 64, offset: 384)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "delta", scope: !1599, file: !1600, line: 500, baseType: !1674, size: 64, offset: 448)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "ltime", scope: !1599, file: !1600, line: 502, baseType: !1674, size: 64, offset: 512)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "ntime", scope: !1599, file: !1600, line: 503, baseType: !1674, size: 64, offset: 576)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1599, file: !1600, line: 504, baseType: !1674, size: 64, offset: 640)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "sleep", scope: !1599, file: !1600, line: 505, baseType: !15, size: 32, offset: 704)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "xof", scope: !1544, file: !44, line: 491, baseType: !240, size: 32, offset: 1728)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "yof", scope: !1544, file: !44, line: 491, baseType: !240, size: 32, offset: 1760)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "mainb", scope: !1544, file: !44, line: 492, baseType: !299, size: 16, offset: 1792)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "render_size", scope: !1544, file: !44, line: 493, baseType: !299, size: 16, offset: 1808)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "chanshown", scope: !1544, file: !44, line: 494, baseType: !299, size: 16, offset: 1824)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "zebra", scope: !1544, file: !44, line: 495, baseType: !299, size: 16, offset: 1840)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1544, file: !44, line: 496, baseType: !15, size: 32, offset: 1856)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "zoom", scope: !1544, file: !44, line: 497, baseType: !240, size: 32, offset: 1888)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "view", scope: !1544, file: !44, line: 498, baseType: !15, size: 32, offset: 1920)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "overlay_type", scope: !1544, file: !44, line: 499, baseType: !15, size: 32, offset: 1952)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "gpd", scope: !1544, file: !44, line: 501, baseType: !506, size: 64, offset: 1984)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "scopes", scope: !1544, file: !44, line: 503, baseType: !1744, size: 384, offset: 2048)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SequencerScopes", file: !14, line: 305, size: 384, elements: !1745)
!1745 = !{!1746, !1749, !1750, !1751, !1752, !1753}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "reference_ibuf", scope: !1744, file: !14, line: 306, baseType: !1747, size: 64)
!1747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1748, size: 64)
!1748 = !DICompositeType(tag: DW_TAG_structure_type, name: "ImBuf", file: !376, line: 136, flags: DIFlagFwdDecl)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "zebra_ibuf", scope: !1744, file: !14, line: 308, baseType: !1747, size: 64, offset: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "waveform_ibuf", scope: !1744, file: !14, line: 309, baseType: !1747, size: 64, offset: 128)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "sep_waveform_ibuf", scope: !1744, file: !14, line: 310, baseType: !1747, size: 64, offset: 192)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "vector_ibuf", scope: !1744, file: !14, line: 311, baseType: !1747, size: 64, offset: 256)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "histogram_ibuf", scope: !1744, file: !14, line: 312, baseType: !1747, size: 64, offset: 320)
!1754 = !{!0, !1755, !1766, !1769, !1771}
!1755 = !DIGlobalVariableExpression(var: !1756, expr: !DIExpression())
!1756 = distinct !DIGlobalVariable(name: "prop_side_types", scope: !2, file: !3, line: 95, type: !1757, isLocal: false, isDefinition: true)
!1757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1758, size: 1280, elements: !606)
!1758 = !DIDerivedType(tag: DW_TAG_typedef, name: "EnumPropertyItem", file: !85, line: 308, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "EnumPropertyItem", file: !85, line: 302, size: 320, elements: !1760)
!1760 = !{!1761, !1762, !1763, !1764, !1765}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1759, file: !85, line: 303, baseType: !15, size: 32)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1759, file: !85, line: 304, baseType: !1684, size: 64, offset: 64)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "icon", scope: !1759, file: !85, line: 305, baseType: !15, size: 32, offset: 128)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1759, file: !85, line: 306, baseType: !1684, size: 64, offset: 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1759, file: !85, line: 307, baseType: !1684, size: 64, offset: 256)
!1766 = !DIGlobalVariableExpression(var: !1767, expr: !DIExpression())
!1767 = distinct !DIGlobalVariable(name: "prop_cut_types", scope: !2, file: !3, line: 1923, type: !1768, isLocal: true, isDefinition: true)
!1768 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1758, size: 960, elements: !368)
!1769 = !DIGlobalVariableExpression(var: !1770, expr: !DIExpression())
!1770 = distinct !DIGlobalVariable(name: "prop_side_lr_types", scope: !2, file: !3, line: 102, type: !1768, isLocal: true, isDefinition: true)
!1771 = !DIGlobalVariableExpression(var: !1772, expr: !DIExpression())
!1772 = distinct !DIGlobalVariable(name: "prop_change_effect_input_types", scope: !2, file: !3, line: 3383, type: !1757, isLocal: true, isDefinition: true)
!1773 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1758, size: 5440, elements: !1774)
!1774 = !{!1775}
!1775 = !DISubrange(count: 17)
!1776 = !{i32 7, !"Dwarf Version", i32 4}
!1777 = !{i32 2, !"Debug Info Version", i32 3}
!1778 = !{i32 1, !"wchar_size", i32 4}
!1779 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1780 = distinct !DISubprogram(name: "seq_rectf", scope: !3, file: !3, line: 218, type: !1781, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!1781 = !DISubroutineType(types: !1782)
!1782 = !{null, !269, !1783}
!1783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !524, size: 64)
!1784 = !{}
!1785 = !DILocalVariable(name: "seq", arg: 1, scope: !1780, file: !3, line: 218, type: !269)
!1786 = !DILocation(line: 218, column: 26, scope: !1780)
!1787 = !DILocalVariable(name: "rectf", arg: 2, scope: !1780, file: !3, line: 218, type: !1783)
!1788 = !DILocation(line: 218, column: 37, scope: !1780)
!1789 = !DILocation(line: 220, column: 6, scope: !1790)
!1790 = distinct !DILexicalBlock(scope: !1780, file: !3, line: 220, column: 6)
!1791 = !DILocation(line: 220, column: 11, scope: !1790)
!1792 = !DILocation(line: 220, column: 6, scope: !1780)
!1793 = !DILocation(line: 220, column: 37, scope: !1790)
!1794 = !DILocation(line: 220, column: 42, scope: !1790)
!1795 = !DILocation(line: 220, column: 23, scope: !1790)
!1796 = !DILocation(line: 220, column: 30, scope: !1790)
!1797 = !DILocation(line: 220, column: 35, scope: !1790)
!1798 = !DILocation(line: 221, column: 21, scope: !1790)
!1799 = !DILocation(line: 221, column: 26, scope: !1790)
!1800 = !DILocation(line: 221, column: 7, scope: !1790)
!1801 = !DILocation(line: 221, column: 14, scope: !1790)
!1802 = !DILocation(line: 221, column: 19, scope: !1790)
!1803 = !DILocation(line: 222, column: 16, scope: !1780)
!1804 = !DILocation(line: 222, column: 21, scope: !1780)
!1805 = !DILocation(line: 222, column: 29, scope: !1780)
!1806 = !DILocation(line: 222, column: 2, scope: !1780)
!1807 = !DILocation(line: 222, column: 9, scope: !1780)
!1808 = !DILocation(line: 222, column: 14, scope: !1780)
!1809 = !DILocation(line: 223, column: 6, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1780, file: !3, line: 223, column: 6)
!1811 = !DILocation(line: 223, column: 11, scope: !1810)
!1812 = !DILocation(line: 223, column: 6, scope: !1780)
!1813 = !DILocation(line: 223, column: 35, scope: !1810)
!1814 = !DILocation(line: 223, column: 40, scope: !1810)
!1815 = !DILocation(line: 223, column: 48, scope: !1810)
!1816 = !DILocation(line: 223, column: 53, scope: !1810)
!1817 = !DILocation(line: 223, column: 46, scope: !1810)
!1818 = !DILocation(line: 223, column: 21, scope: !1810)
!1819 = !DILocation(line: 223, column: 28, scope: !1810)
!1820 = !DILocation(line: 223, column: 33, scope: !1810)
!1821 = !DILocation(line: 224, column: 21, scope: !1810)
!1822 = !DILocation(line: 224, column: 26, scope: !1810)
!1823 = !DILocation(line: 224, column: 7, scope: !1810)
!1824 = !DILocation(line: 224, column: 14, scope: !1810)
!1825 = !DILocation(line: 224, column: 19, scope: !1810)
!1826 = !DILocation(line: 225, column: 16, scope: !1780)
!1827 = !DILocation(line: 225, column: 21, scope: !1780)
!1828 = !DILocation(line: 225, column: 29, scope: !1780)
!1829 = !DILocation(line: 225, column: 2, scope: !1780)
!1830 = !DILocation(line: 225, column: 9, scope: !1780)
!1831 = !DILocation(line: 225, column: 14, scope: !1780)
!1832 = !DILocation(line: 226, column: 1, scope: !1780)
!1833 = distinct !DISubprogram(name: "boundbox_seq", scope: !3, file: !3, line: 228, type: !1834, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!1834 = !DISubroutineType(types: !1835)
!1835 = !{null, !1540, !1783}
!1836 = !DILocalVariable(name: "scene", arg: 1, scope: !1833, file: !3, line: 228, type: !1540)
!1837 = !DILocation(line: 228, column: 26, scope: !1833)
!1838 = !DILocalVariable(name: "rect", arg: 2, scope: !1833, file: !3, line: 228, type: !1783)
!1839 = !DILocation(line: 228, column: 39, scope: !1833)
!1840 = !DILocalVariable(name: "seq", scope: !1833, file: !3, line: 230, type: !269)
!1841 = !DILocation(line: 230, column: 12, scope: !1833)
!1842 = !DILocalVariable(name: "ed", scope: !1833, file: !3, line: 231, type: !1843)
!1843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1844, size: 64)
!1844 = !DIDerivedType(tag: DW_TAG_typedef, name: "Editing", file: !14, line: 213, baseType: !569)
!1845 = !DILocation(line: 231, column: 11, scope: !1833)
!1846 = !DILocation(line: 231, column: 42, scope: !1833)
!1847 = !DILocation(line: 231, column: 16, scope: !1833)
!1848 = !DILocalVariable(name: "min", scope: !1833, file: !3, line: 232, type: !250)
!1849 = !DILocation(line: 232, column: 8, scope: !1833)
!1850 = !DILocalVariable(name: "max", scope: !1833, file: !3, line: 232, type: !250)
!1851 = !DILocation(line: 232, column: 16, scope: !1833)
!1852 = !DILocation(line: 235, column: 6, scope: !1853)
!1853 = distinct !DILexicalBlock(scope: !1833, file: !3, line: 235, column: 6)
!1854 = !DILocation(line: 235, column: 9, scope: !1853)
!1855 = !DILocation(line: 235, column: 6, scope: !1833)
!1856 = !DILocation(line: 235, column: 18, scope: !1853)
!1857 = !DILocation(line: 237, column: 2, scope: !1833)
!1858 = !DILocation(line: 237, column: 9, scope: !1833)
!1859 = !DILocation(line: 238, column: 11, scope: !1833)
!1860 = !DILocation(line: 238, column: 16, scope: !1833)
!1861 = !DILocation(line: 238, column: 2, scope: !1833)
!1862 = !DILocation(line: 238, column: 9, scope: !1833)
!1863 = !DILocation(line: 239, column: 2, scope: !1833)
!1864 = !DILocation(line: 239, column: 9, scope: !1833)
!1865 = !DILocation(line: 240, column: 2, scope: !1833)
!1866 = !DILocation(line: 240, column: 9, scope: !1833)
!1867 = !DILocation(line: 242, column: 8, scope: !1833)
!1868 = !DILocation(line: 242, column: 12, scope: !1833)
!1869 = !DILocation(line: 242, column: 22, scope: !1833)
!1870 = !DILocation(line: 242, column: 6, scope: !1833)
!1871 = !DILocation(line: 243, column: 2, scope: !1833)
!1872 = !DILocation(line: 243, column: 9, scope: !1833)
!1873 = !DILocation(line: 245, column: 7, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1875, file: !3, line: 245, column: 7)
!1875 = distinct !DILexicalBlock(scope: !1833, file: !3, line: 243, column: 14)
!1876 = !DILocation(line: 245, column: 16, scope: !1874)
!1877 = !DILocation(line: 245, column: 21, scope: !1874)
!1878 = !DILocation(line: 245, column: 31, scope: !1874)
!1879 = !DILocation(line: 245, column: 14, scope: !1874)
!1880 = !DILocation(line: 245, column: 7, scope: !1875)
!1881 = !DILocation(line: 245, column: 45, scope: !1874)
!1882 = !DILocation(line: 245, column: 50, scope: !1874)
!1883 = !DILocation(line: 245, column: 60, scope: !1874)
!1884 = !DILocation(line: 245, column: 36, scope: !1874)
!1885 = !DILocation(line: 245, column: 43, scope: !1874)
!1886 = !DILocation(line: 246, column: 7, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1875, file: !3, line: 246, column: 7)
!1888 = !DILocation(line: 246, column: 16, scope: !1887)
!1889 = !DILocation(line: 246, column: 21, scope: !1887)
!1890 = !DILocation(line: 246, column: 29, scope: !1887)
!1891 = !DILocation(line: 246, column: 14, scope: !1887)
!1892 = !DILocation(line: 246, column: 7, scope: !1875)
!1893 = !DILocation(line: 246, column: 43, scope: !1887)
!1894 = !DILocation(line: 246, column: 48, scope: !1887)
!1895 = !DILocation(line: 246, column: 56, scope: !1887)
!1896 = !DILocation(line: 246, column: 34, scope: !1887)
!1897 = !DILocation(line: 246, column: 41, scope: !1887)
!1898 = !DILocation(line: 247, column: 7, scope: !1899)
!1899 = distinct !DILexicalBlock(scope: !1875, file: !3, line: 247, column: 7)
!1900 = !DILocation(line: 247, column: 16, scope: !1899)
!1901 = !DILocation(line: 247, column: 21, scope: !1899)
!1902 = !DILocation(line: 247, column: 29, scope: !1899)
!1903 = !DILocation(line: 247, column: 14, scope: !1899)
!1904 = !DILocation(line: 247, column: 7, scope: !1875)
!1905 = !DILocation(line: 247, column: 43, scope: !1899)
!1906 = !DILocation(line: 247, column: 48, scope: !1899)
!1907 = !DILocation(line: 247, column: 56, scope: !1899)
!1908 = !DILocation(line: 247, column: 34, scope: !1899)
!1909 = !DILocation(line: 247, column: 41, scope: !1899)
!1910 = !DILocation(line: 249, column: 9, scope: !1875)
!1911 = !DILocation(line: 249, column: 14, scope: !1875)
!1912 = !DILocation(line: 249, column: 7, scope: !1875)
!1913 = distinct !{!1913, !1871, !1914}
!1914 = !DILocation(line: 250, column: 2, scope: !1833)
!1915 = !DILocation(line: 252, column: 15, scope: !1833)
!1916 = !DILocation(line: 252, column: 2, scope: !1833)
!1917 = !DILocation(line: 252, column: 8, scope: !1833)
!1918 = !DILocation(line: 252, column: 13, scope: !1833)
!1919 = !DILocation(line: 253, column: 15, scope: !1833)
!1920 = !DILocation(line: 253, column: 2, scope: !1833)
!1921 = !DILocation(line: 253, column: 8, scope: !1833)
!1922 = !DILocation(line: 253, column: 13, scope: !1833)
!1923 = !DILocation(line: 254, column: 15, scope: !1833)
!1924 = !DILocation(line: 254, column: 2, scope: !1833)
!1925 = !DILocation(line: 254, column: 8, scope: !1833)
!1926 = !DILocation(line: 254, column: 13, scope: !1833)
!1927 = !DILocation(line: 255, column: 15, scope: !1833)
!1928 = !DILocation(line: 255, column: 2, scope: !1833)
!1929 = !DILocation(line: 255, column: 8, scope: !1833)
!1930 = !DILocation(line: 255, column: 13, scope: !1833)
!1931 = !DILocation(line: 257, column: 1, scope: !1833)
!1932 = distinct !DISubprogram(name: "find_neighboring_sequence", scope: !3, file: !3, line: 274, type: !1933, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!1933 = !DISubroutineType(types: !1934)
!1934 = !{!274, !1540, !269, !15, !15}
!1935 = !DILocalVariable(name: "scene", arg: 1, scope: !1932, file: !3, line: 274, type: !1540)
!1936 = !DILocation(line: 274, column: 44, scope: !1932)
!1937 = !DILocalVariable(name: "test", arg: 2, scope: !1932, file: !3, line: 274, type: !269)
!1938 = !DILocation(line: 274, column: 61, scope: !1932)
!1939 = !DILocalVariable(name: "lr", arg: 3, scope: !1932, file: !3, line: 274, type: !15)
!1940 = !DILocation(line: 274, column: 71, scope: !1932)
!1941 = !DILocalVariable(name: "sel", arg: 4, scope: !1932, file: !3, line: 274, type: !15)
!1942 = !DILocation(line: 274, column: 79, scope: !1932)
!1943 = !DILocalVariable(name: "seq", scope: !1932, file: !3, line: 277, type: !269)
!1944 = !DILocation(line: 277, column: 12, scope: !1932)
!1945 = !DILocalVariable(name: "ed", scope: !1932, file: !3, line: 278, type: !1843)
!1946 = !DILocation(line: 278, column: 11, scope: !1932)
!1947 = !DILocation(line: 278, column: 42, scope: !1932)
!1948 = !DILocation(line: 278, column: 16, scope: !1932)
!1949 = !DILocation(line: 280, column: 6, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1932, file: !3, line: 280, column: 6)
!1951 = !DILocation(line: 280, column: 9, scope: !1950)
!1952 = !DILocation(line: 280, column: 6, scope: !1932)
!1953 = !DILocation(line: 280, column: 18, scope: !1950)
!1954 = !DILocation(line: 282, column: 6, scope: !1955)
!1955 = distinct !DILexicalBlock(scope: !1932, file: !3, line: 282, column: 6)
!1956 = !DILocation(line: 282, column: 10, scope: !1955)
!1957 = !DILocation(line: 282, column: 6, scope: !1932)
!1958 = !DILocation(line: 282, column: 19, scope: !1955)
!1959 = !DILocation(line: 282, column: 15, scope: !1955)
!1960 = !DILocation(line: 284, column: 13, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1932, file: !3, line: 284, column: 2)
!1962 = !DILocation(line: 284, column: 17, scope: !1961)
!1963 = !DILocation(line: 284, column: 27, scope: !1961)
!1964 = !DILocation(line: 284, column: 11, scope: !1961)
!1965 = !DILocation(line: 284, column: 7, scope: !1961)
!1966 = !DILocation(line: 284, column: 34, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1961, file: !3, line: 284, column: 2)
!1968 = !DILocation(line: 284, column: 2, scope: !1961)
!1969 = !DILocation(line: 285, column: 8, scope: !1970)
!1970 = distinct !DILexicalBlock(scope: !1971, file: !3, line: 285, column: 7)
!1971 = distinct !DILexicalBlock(scope: !1967, file: !3, line: 284, column: 56)
!1972 = !DILocation(line: 285, column: 15, scope: !1970)
!1973 = !DILocation(line: 285, column: 12, scope: !1970)
!1974 = !DILocation(line: 285, column: 21, scope: !1970)
!1975 = !DILocation(line: 286, column: 8, scope: !1970)
!1976 = !DILocation(line: 286, column: 14, scope: !1970)
!1977 = !DILocation(line: 286, column: 25, scope: !1970)
!1978 = !DILocation(line: 286, column: 30, scope: !1970)
!1979 = !DILocation(line: 286, column: 22, scope: !1970)
!1980 = !DILocation(line: 286, column: 39, scope: !1970)
!1981 = !DILocation(line: 287, column: 9, scope: !1970)
!1982 = !DILocation(line: 287, column: 13, scope: !1970)
!1983 = !DILocation(line: 287, column: 20, scope: !1970)
!1984 = !DILocation(line: 287, column: 24, scope: !1970)
!1985 = !DILocation(line: 287, column: 28, scope: !1970)
!1986 = !DILocation(line: 287, column: 32, scope: !1970)
!1987 = !DILocation(line: 287, column: 37, scope: !1970)
!1988 = !DILocation(line: 287, column: 42, scope: !1970)
!1989 = !DILocation(line: 287, column: 53, scope: !1970)
!1990 = !DILocation(line: 287, column: 57, scope: !1970)
!1991 = !DILocation(line: 287, column: 61, scope: !1970)
!1992 = !DILocation(line: 287, column: 66, scope: !1970)
!1993 = !DILocation(line: 287, column: 70, scope: !1970)
!1994 = !DILocation(line: 287, column: 75, scope: !1970)
!1995 = !DILocation(line: 287, column: 80, scope: !1970)
!1996 = !DILocation(line: 287, column: 90, scope: !1970)
!1997 = !DILocation(line: 285, column: 7, scope: !1971)
!1998 = !DILocation(line: 289, column: 12, scope: !1999)
!1999 = distinct !DILexicalBlock(scope: !1970, file: !3, line: 288, column: 3)
!2000 = !DILocation(line: 289, column: 4, scope: !1999)
!2001 = !DILocation(line: 291, column: 10, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !2003, file: !3, line: 291, column: 10)
!2003 = distinct !DILexicalBlock(scope: !1999, file: !3, line: 289, column: 16)
!2004 = !DILocation(line: 291, column: 16, scope: !2002)
!2005 = !DILocation(line: 291, column: 30, scope: !2002)
!2006 = !DILocation(line: 291, column: 35, scope: !2002)
!2007 = !DILocation(line: 291, column: 26, scope: !2002)
!2008 = !DILocation(line: 291, column: 10, scope: !2003)
!2009 = !DILocation(line: 292, column: 14, scope: !2010)
!2010 = distinct !DILexicalBlock(scope: !2002, file: !3, line: 291, column: 45)
!2011 = !DILocation(line: 292, column: 7, scope: !2010)
!2012 = !DILocation(line: 294, column: 6, scope: !2003)
!2013 = !DILocation(line: 296, column: 10, scope: !2014)
!2014 = distinct !DILexicalBlock(scope: !2003, file: !3, line: 296, column: 10)
!2015 = !DILocation(line: 296, column: 16, scope: !2014)
!2016 = !DILocation(line: 296, column: 28, scope: !2014)
!2017 = !DILocation(line: 296, column: 33, scope: !2014)
!2018 = !DILocation(line: 296, column: 24, scope: !2014)
!2019 = !DILocation(line: 296, column: 10, scope: !2003)
!2020 = !DILocation(line: 297, column: 14, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2014, file: !3, line: 296, column: 45)
!2022 = !DILocation(line: 297, column: 7, scope: !2021)
!2023 = !DILocation(line: 299, column: 6, scope: !2003)
!2024 = !DILocation(line: 301, column: 3, scope: !1999)
!2025 = !DILocation(line: 302, column: 2, scope: !1971)
!2026 = !DILocation(line: 284, column: 45, scope: !1967)
!2027 = !DILocation(line: 284, column: 50, scope: !1967)
!2028 = !DILocation(line: 284, column: 43, scope: !1967)
!2029 = !DILocation(line: 284, column: 2, scope: !1967)
!2030 = distinct !{!2030, !1968, !2031}
!2031 = !DILocation(line: 302, column: 2, scope: !1961)
!2032 = !DILocation(line: 303, column: 2, scope: !1932)
!2033 = !DILocation(line: 304, column: 1, scope: !1932)
!2034 = distinct !DISubprogram(name: "find_nearest_seq", scope: !3, file: !3, line: 355, type: !2035, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2035 = !DISubroutineType(types: !2036)
!2036 = !{!274, !1540, !2037, !2038, !2039}
!2037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!2038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!2039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2040, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15)
!2041 = !DILocalVariable(name: "scene", arg: 1, scope: !2034, file: !3, line: 355, type: !1540)
!2042 = !DILocation(line: 355, column: 35, scope: !2034)
!2043 = !DILocalVariable(name: "v2d", arg: 2, scope: !2034, file: !3, line: 355, type: !2037)
!2044 = !DILocation(line: 355, column: 50, scope: !2034)
!2045 = !DILocalVariable(name: "hand", arg: 3, scope: !2034, file: !3, line: 355, type: !2038)
!2046 = !DILocation(line: 355, column: 60, scope: !2034)
!2047 = !DILocalVariable(name: "mval", arg: 4, scope: !2034, file: !3, line: 355, type: !2039)
!2048 = !DILocation(line: 355, column: 76, scope: !2034)
!2049 = !DILocalVariable(name: "seq", scope: !2034, file: !3, line: 357, type: !269)
!2050 = !DILocation(line: 357, column: 12, scope: !2034)
!2051 = !DILocalVariable(name: "ed", scope: !2034, file: !3, line: 358, type: !1843)
!2052 = !DILocation(line: 358, column: 11, scope: !2034)
!2053 = !DILocation(line: 358, column: 42, scope: !2034)
!2054 = !DILocation(line: 358, column: 16, scope: !2034)
!2055 = !DILocalVariable(name: "x", scope: !2034, file: !3, line: 359, type: !240)
!2056 = !DILocation(line: 359, column: 8, scope: !2034)
!2057 = !DILocalVariable(name: "y", scope: !2034, file: !3, line: 359, type: !240)
!2058 = !DILocation(line: 359, column: 11, scope: !2034)
!2059 = !DILocalVariable(name: "pixelx", scope: !2034, file: !3, line: 360, type: !240)
!2060 = !DILocation(line: 360, column: 8, scope: !2034)
!2061 = !DILocalVariable(name: "handsize", scope: !2034, file: !3, line: 361, type: !240)
!2062 = !DILocation(line: 361, column: 8, scope: !2034)
!2063 = !DILocalVariable(name: "displen", scope: !2034, file: !3, line: 362, type: !240)
!2064 = !DILocation(line: 362, column: 8, scope: !2034)
!2065 = !DILocation(line: 363, column: 3, scope: !2034)
!2066 = !DILocation(line: 363, column: 8, scope: !2034)
!2067 = !DILocation(line: 366, column: 6, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2034, file: !3, line: 366, column: 6)
!2069 = !DILocation(line: 366, column: 9, scope: !2068)
!2070 = !DILocation(line: 366, column: 6, scope: !2034)
!2071 = !DILocation(line: 366, column: 18, scope: !2068)
!2072 = !DILocation(line: 368, column: 28, scope: !2034)
!2073 = !DILocation(line: 368, column: 33, scope: !2034)
!2074 = !DILocation(line: 368, column: 11, scope: !2034)
!2075 = !DILocation(line: 368, column: 57, scope: !2034)
!2076 = !DILocation(line: 368, column: 62, scope: !2034)
!2077 = !DILocation(line: 368, column: 40, scope: !2034)
!2078 = !DILocation(line: 368, column: 38, scope: !2034)
!2079 = !DILocation(line: 368, column: 9, scope: !2034)
!2080 = !DILocation(line: 370, column: 27, scope: !2034)
!2081 = !DILocation(line: 370, column: 32, scope: !2034)
!2082 = !DILocation(line: 370, column: 41, scope: !2034)
!2083 = !DILocation(line: 370, column: 2, scope: !2034)
!2084 = !DILocation(line: 372, column: 8, scope: !2034)
!2085 = !DILocation(line: 372, column: 12, scope: !2034)
!2086 = !DILocation(line: 372, column: 22, scope: !2034)
!2087 = !DILocation(line: 372, column: 6, scope: !2034)
!2088 = !DILocation(line: 374, column: 2, scope: !2034)
!2089 = !DILocation(line: 374, column: 9, scope: !2034)
!2090 = !DILocation(line: 375, column: 7, scope: !2091)
!2091 = distinct !DILexicalBlock(scope: !2092, file: !3, line: 375, column: 7)
!2092 = distinct !DILexicalBlock(scope: !2034, file: !3, line: 374, column: 14)
!2093 = !DILocation(line: 375, column: 12, scope: !2091)
!2094 = !DILocation(line: 375, column: 28, scope: !2091)
!2095 = !DILocation(line: 375, column: 23, scope: !2091)
!2096 = !DILocation(line: 375, column: 20, scope: !2091)
!2097 = !DILocation(line: 375, column: 7, scope: !2092)
!2098 = !DILocation(line: 377, column: 10, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2100, file: !3, line: 377, column: 8)
!2100 = distinct !DILexicalBlock(scope: !2091, file: !3, line: 375, column: 31)
!2101 = !DILocation(line: 377, column: 15, scope: !2099)
!2102 = !DILocation(line: 377, column: 27, scope: !2099)
!2103 = !DILocation(line: 377, column: 32, scope: !2099)
!2104 = !DILocation(line: 377, column: 25, scope: !2099)
!2105 = !DILocation(line: 377, column: 41, scope: !2099)
!2106 = !DILocation(line: 377, column: 45, scope: !2099)
!2107 = !DILocation(line: 377, column: 50, scope: !2099)
!2108 = !DILocation(line: 377, column: 63, scope: !2099)
!2109 = !DILocation(line: 377, column: 60, scope: !2099)
!2110 = !DILocation(line: 377, column: 65, scope: !2099)
!2111 = !DILocation(line: 377, column: 68, scope: !2099)
!2112 = !DILocation(line: 377, column: 73, scope: !2099)
!2113 = !DILocation(line: 377, column: 84, scope: !2099)
!2114 = !DILocation(line: 377, column: 81, scope: !2099)
!2115 = !DILocation(line: 377, column: 88, scope: !2099)
!2116 = !DILocation(line: 378, column: 10, scope: !2099)
!2117 = !DILocation(line: 378, column: 15, scope: !2099)
!2118 = !DILocation(line: 378, column: 27, scope: !2099)
!2119 = !DILocation(line: 378, column: 32, scope: !2099)
!2120 = !DILocation(line: 378, column: 25, scope: !2099)
!2121 = !DILocation(line: 378, column: 41, scope: !2099)
!2122 = !DILocation(line: 378, column: 45, scope: !2099)
!2123 = !DILocation(line: 378, column: 50, scope: !2099)
!2124 = !DILocation(line: 378, column: 63, scope: !2099)
!2125 = !DILocation(line: 378, column: 60, scope: !2099)
!2126 = !DILocation(line: 378, column: 65, scope: !2099)
!2127 = !DILocation(line: 378, column: 68, scope: !2099)
!2128 = !DILocation(line: 378, column: 73, scope: !2099)
!2129 = !DILocation(line: 378, column: 84, scope: !2099)
!2130 = !DILocation(line: 378, column: 81, scope: !2099)
!2131 = !DILocation(line: 377, column: 8, scope: !2100)
!2132 = !DILocation(line: 380, column: 30, scope: !2133)
!2133 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 380, column: 9)
!2134 = distinct !DILexicalBlock(scope: !2099, file: !3, line: 379, column: 4)
!2135 = !DILocation(line: 380, column: 9, scope: !2133)
!2136 = !DILocation(line: 380, column: 9, scope: !2134)
!2137 = !DILocation(line: 384, column: 17, scope: !2138)
!2138 = distinct !DILexicalBlock(scope: !2133, file: !3, line: 380, column: 36)
!2139 = !DILocation(line: 384, column: 22, scope: !2138)
!2140 = !DILocation(line: 384, column: 15, scope: !2138)
!2141 = !DILocation(line: 385, column: 27, scope: !2138)
!2142 = !DILocation(line: 385, column: 32, scope: !2138)
!2143 = !DILocation(line: 385, column: 44, scope: !2138)
!2144 = !DILocation(line: 385, column: 49, scope: !2138)
!2145 = !DILocation(line: 385, column: 42, scope: !2138)
!2146 = !DILocation(line: 385, column: 23, scope: !2138)
!2147 = !DILocation(line: 385, column: 16, scope: !2138)
!2148 = !DILocation(line: 385, column: 14, scope: !2138)
!2149 = !DILocation(line: 387, column: 10, scope: !2150)
!2150 = distinct !DILexicalBlock(scope: !2138, file: !3, line: 387, column: 10)
!2151 = !DILocation(line: 387, column: 20, scope: !2150)
!2152 = !DILocation(line: 387, column: 18, scope: !2150)
!2153 = !DILocation(line: 387, column: 27, scope: !2150)
!2154 = !DILocation(line: 387, column: 10, scope: !2138)
!2155 = !DILocation(line: 391, column: 12, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !2157, file: !3, line: 391, column: 11)
!2157 = distinct !DILexicalBlock(scope: !2150, file: !3, line: 387, column: 33)
!2158 = !DILocation(line: 391, column: 20, scope: !2156)
!2159 = !DILocation(line: 391, column: 32, scope: !2156)
!2160 = !DILocation(line: 391, column: 30, scope: !2156)
!2161 = !DILocation(line: 391, column: 25, scope: !2156)
!2162 = !DILocation(line: 391, column: 11, scope: !2157)
!2163 = !DILocation(line: 392, column: 19, scope: !2164)
!2164 = distinct !DILexicalBlock(scope: !2156, file: !3, line: 391, column: 40)
!2165 = !DILocation(line: 392, column: 27, scope: !2164)
!2166 = !DILocation(line: 392, column: 17, scope: !2164)
!2167 = !DILocation(line: 393, column: 7, scope: !2164)
!2168 = !DILocation(line: 395, column: 8, scope: !2169)
!2169 = distinct !DILexicalBlock(scope: !2170, file: !3, line: 395, column: 8)
!2170 = distinct !DILexicalBlock(scope: !2171, file: !3, line: 395, column: 8)
!2171 = distinct !DILexicalBlock(scope: !2156, file: !3, line: 394, column: 12)
!2172 = !DILocation(line: 395, column: 8, scope: !2170)
!2173 = !DILocation(line: 395, column: 8, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 395, column: 8)
!2175 = !DILocation(line: 398, column: 11, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2157, file: !3, line: 398, column: 11)
!2177 = !DILocation(line: 398, column: 22, scope: !2176)
!2178 = !DILocation(line: 398, column: 27, scope: !2176)
!2179 = !DILocation(line: 398, column: 20, scope: !2176)
!2180 = !DILocation(line: 398, column: 40, scope: !2176)
!2181 = !DILocation(line: 398, column: 37, scope: !2176)
!2182 = !DILocation(line: 398, column: 11, scope: !2157)
!2183 = !DILocation(line: 399, column: 9, scope: !2176)
!2184 = !DILocation(line: 399, column: 14, scope: !2176)
!2185 = !DILocation(line: 399, column: 8, scope: !2176)
!2186 = !DILocation(line: 400, column: 17, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2176, file: !3, line: 400, column: 16)
!2188 = !DILocation(line: 400, column: 16, scope: !2187)
!2189 = !DILocation(line: 400, column: 28, scope: !2187)
!2190 = !DILocation(line: 400, column: 33, scope: !2187)
!2191 = !DILocation(line: 400, column: 26, scope: !2187)
!2192 = !DILocation(line: 400, column: 44, scope: !2187)
!2193 = !DILocation(line: 400, column: 41, scope: !2187)
!2194 = !DILocation(line: 400, column: 16, scope: !2176)
!2195 = !DILocation(line: 401, column: 9, scope: !2187)
!2196 = !DILocation(line: 401, column: 14, scope: !2187)
!2197 = !DILocation(line: 401, column: 8, scope: !2187)
!2198 = !DILocation(line: 402, column: 6, scope: !2157)
!2199 = !DILocation(line: 403, column: 5, scope: !2138)
!2200 = !DILocation(line: 404, column: 12, scope: !2134)
!2201 = !DILocation(line: 404, column: 5, scope: !2134)
!2202 = !DILocation(line: 406, column: 3, scope: !2100)
!2203 = !DILocation(line: 407, column: 9, scope: !2092)
!2204 = !DILocation(line: 407, column: 14, scope: !2092)
!2205 = !DILocation(line: 407, column: 7, scope: !2092)
!2206 = distinct !{!2206, !2088, !2207}
!2207 = !DILocation(line: 408, column: 2, scope: !2034)
!2208 = !DILocation(line: 409, column: 2, scope: !2034)
!2209 = !DILocation(line: 410, column: 1, scope: !2034)
!2210 = distinct !DISubprogram(name: "BLI_rctf_size_x", scope: !2211, file: !2211, line: 107, type: !2212, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2211 = !DIFile(filename: "blender/source/blender/blenlib/BLI_rect.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!2212 = !DISubroutineType(types: !2213)
!2213 = !{!240, !2214}
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !526)
!2216 = !DILocalVariable(name: "rct", arg: 1, scope: !2210, file: !2211, line: 107, type: !2214)
!2217 = !DILocation(line: 107, column: 53, scope: !2210)
!2218 = !DILocation(line: 107, column: 68, scope: !2210)
!2219 = !DILocation(line: 107, column: 73, scope: !2210)
!2220 = !DILocation(line: 107, column: 80, scope: !2210)
!2221 = !DILocation(line: 107, column: 85, scope: !2210)
!2222 = !DILocation(line: 107, column: 78, scope: !2210)
!2223 = !DILocation(line: 107, column: 60, scope: !2210)
!2224 = distinct !DISubprogram(name: "BLI_rcti_size_x", scope: !2211, file: !2211, line: 105, type: !2225, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2225 = !DISubroutineType(types: !2226)
!2226 = !{!15, !2227}
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1083)
!2229 = !DILocalVariable(name: "rct", arg: 1, scope: !2224, file: !2211, line: 105, type: !2227)
!2230 = !DILocation(line: 105, column: 53, scope: !2224)
!2231 = !DILocation(line: 105, column: 68, scope: !2224)
!2232 = !DILocation(line: 105, column: 73, scope: !2224)
!2233 = !DILocation(line: 105, column: 80, scope: !2224)
!2234 = !DILocation(line: 105, column: 85, scope: !2224)
!2235 = !DILocation(line: 105, column: 78, scope: !2224)
!2236 = !DILocation(line: 105, column: 60, scope: !2224)
!2237 = distinct !DISubprogram(name: "ED_sequencer_deselect_all", scope: !3, file: !3, line: 430, type: !2238, scopeLine: 431, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2238 = !DISubroutineType(types: !2239)
!2239 = !{null, !1540}
!2240 = !DILocalVariable(name: "scene", arg: 1, scope: !2237, file: !3, line: 430, type: !1540)
!2241 = !DILocation(line: 430, column: 39, scope: !2237)
!2242 = !DILocalVariable(name: "seq", scope: !2237, file: !3, line: 432, type: !269)
!2243 = !DILocation(line: 432, column: 12, scope: !2237)
!2244 = !DILocalVariable(name: "ed", scope: !2237, file: !3, line: 433, type: !1843)
!2245 = !DILocation(line: 433, column: 11, scope: !2237)
!2246 = !DILocation(line: 433, column: 42, scope: !2237)
!2247 = !DILocation(line: 433, column: 16, scope: !2237)
!2248 = !DILocation(line: 436, column: 6, scope: !2249)
!2249 = distinct !DILexicalBlock(scope: !2237, file: !3, line: 436, column: 6)
!2250 = !DILocation(line: 436, column: 9, scope: !2249)
!2251 = !DILocation(line: 436, column: 6, scope: !2237)
!2252 = !DILocation(line: 436, column: 18, scope: !2249)
!2253 = !DILocalVariable(name: "iter_macro", scope: !2254, file: !3, line: 438, type: !2255)
!2254 = distinct !DILexicalBlock(scope: !2237, file: !3, line: 438, column: 2)
!2255 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqIterator", file: !1520, line: 63, baseType: !2256)
!2256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqIterator", file: !1520, line: 57, size: 256, elements: !2257)
!2257 = !{!2258, !2260, !2261, !2262, !2263}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !2256, file: !1520, line: 58, baseType: !2259, size: 64)
!2259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "tot", scope: !2256, file: !1520, line: 59, baseType: !15, size: 32, offset: 64)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "cur", scope: !2256, file: !1520, line: 59, baseType: !15, size: 32, offset: 96)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2256, file: !1520, line: 61, baseType: !274, size: 64, offset: 128)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "valid", scope: !2256, file: !1520, line: 62, baseType: !15, size: 32, offset: 192)
!2264 = !DILocation(line: 438, column: 2, scope: !2254)
!2265 = !DILocation(line: 438, column: 2, scope: !2266)
!2266 = distinct !DILexicalBlock(scope: !2254, file: !3, line: 438, column: 2)
!2267 = !DILocation(line: 438, column: 2, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 438, column: 2)
!2269 = !DILocation(line: 438, column: 2, scope: !2270)
!2270 = distinct !DILexicalBlock(scope: !2268, file: !3, line: 438, column: 2)
!2271 = !DILocation(line: 440, column: 3, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2270, file: !3, line: 439, column: 2)
!2273 = !DILocation(line: 440, column: 8, scope: !2272)
!2274 = !DILocation(line: 440, column: 13, scope: !2272)
!2275 = !DILocation(line: 442, column: 2, scope: !2270)
!2276 = distinct !{!2276, !2265, !2277}
!2277 = !DILocation(line: 442, column: 2, scope: !2266)
!2278 = !DILocation(line: 442, column: 2, scope: !2254)
!2279 = !DILocation(line: 444, column: 1, scope: !2237)
!2280 = distinct !DISubprogram(name: "recurs_sel_seq", scope: !3, file: !3, line: 446, type: !2281, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2281 = !DISubroutineType(types: !2282)
!2282 = !{null, !269}
!2283 = !DILocalVariable(name: "seqm", arg: 1, scope: !2280, file: !3, line: 446, type: !269)
!2284 = !DILocation(line: 446, column: 31, scope: !2280)
!2285 = !DILocalVariable(name: "seq", scope: !2280, file: !3, line: 448, type: !269)
!2286 = !DILocation(line: 448, column: 12, scope: !2280)
!2287 = !DILocation(line: 450, column: 8, scope: !2280)
!2288 = !DILocation(line: 450, column: 14, scope: !2280)
!2289 = !DILocation(line: 450, column: 22, scope: !2280)
!2290 = !DILocation(line: 450, column: 6, scope: !2280)
!2291 = !DILocation(line: 451, column: 2, scope: !2280)
!2292 = !DILocation(line: 451, column: 9, scope: !2280)
!2293 = !DILocation(line: 453, column: 7, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 453, column: 7)
!2295 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 451, column: 14)
!2296 = !DILocation(line: 453, column: 13, scope: !2294)
!2297 = !DILocation(line: 453, column: 18, scope: !2294)
!2298 = !DILocation(line: 453, column: 7, scope: !2295)
!2299 = !DILocation(line: 453, column: 50, scope: !2294)
!2300 = !DILocation(line: 453, column: 55, scope: !2294)
!2301 = !DILocation(line: 453, column: 60, scope: !2294)
!2302 = !DILocation(line: 454, column: 12, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 454, column: 12)
!2304 = !DILocation(line: 454, column: 18, scope: !2303)
!2305 = !DILocation(line: 454, column: 23, scope: !2303)
!2306 = !DILocation(line: 454, column: 12, scope: !2294)
!2307 = !DILocation(line: 454, column: 33, scope: !2303)
!2308 = !DILocation(line: 454, column: 38, scope: !2303)
!2309 = !DILocation(line: 454, column: 43, scope: !2303)
!2310 = !DILocation(line: 455, column: 8, scope: !2303)
!2311 = !DILocation(line: 455, column: 13, scope: !2303)
!2312 = !DILocation(line: 455, column: 18, scope: !2303)
!2313 = !DILocation(line: 457, column: 7, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 457, column: 7)
!2315 = !DILocation(line: 457, column: 12, scope: !2314)
!2316 = !DILocation(line: 457, column: 20, scope: !2314)
!2317 = !DILocation(line: 457, column: 7, scope: !2295)
!2318 = !DILocation(line: 457, column: 42, scope: !2314)
!2319 = !DILocation(line: 457, column: 27, scope: !2314)
!2320 = !DILocation(line: 459, column: 9, scope: !2295)
!2321 = !DILocation(line: 459, column: 14, scope: !2295)
!2322 = !DILocation(line: 459, column: 7, scope: !2295)
!2323 = distinct !{!2323, !2291, !2324}
!2324 = !DILocation(line: 460, column: 2, scope: !2280)
!2325 = !DILocation(line: 461, column: 1, scope: !2280)
!2326 = distinct !DISubprogram(name: "ED_space_sequencer_maskedit_mask_poll", scope: !3, file: !3, line: 463, type: !2327, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2327 = !DISubroutineType(types: !2328)
!2328 = !{!15, !2329}
!2329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2330, size: 64)
!2330 = !DIDerivedType(tag: DW_TAG_typedef, name: "bContext", file: !1509, line: 69, baseType: !2331)
!2331 = !DICompositeType(tag: DW_TAG_structure_type, name: "bContext", file: !85, line: 44, flags: DIFlagFwdDecl)
!2332 = !DILocalVariable(name: "C", arg: 1, scope: !2326, file: !3, line: 463, type: !2329)
!2333 = !DILocation(line: 463, column: 53, scope: !2326)
!2334 = !DILocation(line: 466, column: 42, scope: !2326)
!2335 = !DILocation(line: 466, column: 9, scope: !2326)
!2336 = !DILocation(line: 466, column: 2, scope: !2326)
!2337 = distinct !DISubprogram(name: "ED_space_sequencer_maskedit_poll", scope: !3, file: !3, line: 478, type: !2327, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2338 = !DILocalVariable(name: "C", arg: 1, scope: !2337, file: !3, line: 478, type: !2329)
!2339 = !DILocation(line: 478, column: 48, scope: !2337)
!2340 = !DILocalVariable(name: "sseq", scope: !2337, file: !3, line: 480, type: !1542)
!2341 = !DILocation(line: 480, column: 12, scope: !2337)
!2342 = !DILocation(line: 480, column: 36, scope: !2337)
!2343 = !DILocation(line: 480, column: 19, scope: !2337)
!2344 = !DILocation(line: 482, column: 6, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2337, file: !3, line: 482, column: 6)
!2346 = !DILocation(line: 482, column: 6, scope: !2337)
!2347 = !DILocalVariable(name: "scene", scope: !2348, file: !3, line: 483, type: !1540)
!2348 = distinct !DILexicalBlock(scope: !2345, file: !3, line: 482, column: 12)
!2349 = !DILocation(line: 483, column: 10, scope: !2348)
!2350 = !DILocation(line: 483, column: 33, scope: !2348)
!2351 = !DILocation(line: 483, column: 18, scope: !2348)
!2352 = !DILocation(line: 484, column: 49, scope: !2348)
!2353 = !DILocation(line: 484, column: 55, scope: !2348)
!2354 = !DILocation(line: 484, column: 10, scope: !2348)
!2355 = !DILocation(line: 484, column: 3, scope: !2348)
!2356 = !DILocation(line: 487, column: 2, scope: !2337)
!2357 = !DILocation(line: 488, column: 1, scope: !2337)
!2358 = distinct !DISubprogram(name: "ED_space_sequencer_check_show_maskedit", scope: !3, file: !3, line: 469, type: !2359, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2359 = !DISubroutineType(types: !2360)
!2360 = !{!605, !1542, !1540}
!2361 = !DILocalVariable(name: "sseq", arg: 1, scope: !2358, file: !3, line: 469, type: !1542)
!2362 = !DILocation(line: 469, column: 55, scope: !2358)
!2363 = !DILocalVariable(name: "scene", arg: 2, scope: !2358, file: !3, line: 469, type: !1540)
!2364 = !DILocation(line: 469, column: 68, scope: !2358)
!2365 = !DILocation(line: 471, column: 6, scope: !2366)
!2366 = distinct !DILexicalBlock(scope: !2358, file: !3, line: 471, column: 6)
!2367 = !DILocation(line: 471, column: 11, scope: !2366)
!2368 = !DILocation(line: 471, column: 14, scope: !2366)
!2369 = !DILocation(line: 471, column: 20, scope: !2366)
!2370 = !DILocation(line: 471, column: 26, scope: !2366)
!2371 = !DILocation(line: 471, column: 6, scope: !2358)
!2372 = !DILocation(line: 472, column: 34, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2366, file: !3, line: 471, column: 49)
!2374 = !DILocation(line: 472, column: 11, scope: !2373)
!2375 = !DILocation(line: 472, column: 41, scope: !2373)
!2376 = !DILocation(line: 472, column: 10, scope: !2373)
!2377 = !DILocation(line: 472, column: 3, scope: !2373)
!2378 = !DILocation(line: 475, column: 2, scope: !2358)
!2379 = !DILocation(line: 476, column: 1, scope: !2358)
!2380 = distinct !DISubprogram(name: "ED_space_sequencer_check_show_imbuf", scope: !3, file: !3, line: 491, type: !2381, scopeLine: 492, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2381 = !DISubroutineType(types: !2382)
!2382 = !{!605, !1542}
!2383 = !DILocalVariable(name: "sseq", arg: 1, scope: !2380, file: !3, line: 491, type: !1542)
!2384 = !DILocation(line: 491, column: 52, scope: !2380)
!2385 = !DILocation(line: 493, column: 10, scope: !2380)
!2386 = !DILocation(line: 493, column: 72, scope: !2380)
!2387 = !DILocation(line: 494, column: 10, scope: !2380)
!2388 = !DILocation(line: 0, scope: !2380)
!2389 = !DILocation(line: 493, column: 9, scope: !2380)
!2390 = !DILocation(line: 493, column: 2, scope: !2380)
!2391 = distinct !DISubprogram(name: "seq_effect_find_selected", scope: !3, file: !3, line: 497, type: !2392, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2392 = !DISubroutineType(types: !2393)
!2393 = !{!15, !1540, !269, !15, !268, !268, !268, !2394}
!2394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1684, size: 64)
!2395 = !DILocalVariable(name: "scene", arg: 1, scope: !2391, file: !3, line: 497, type: !1540)
!2396 = !DILocation(line: 497, column: 37, scope: !2391)
!2397 = !DILocalVariable(name: "activeseq", arg: 2, scope: !2391, file: !3, line: 497, type: !269)
!2398 = !DILocation(line: 497, column: 54, scope: !2391)
!2399 = !DILocalVariable(name: "type", arg: 3, scope: !2391, file: !3, line: 497, type: !15)
!2400 = !DILocation(line: 497, column: 69, scope: !2391)
!2401 = !DILocalVariable(name: "selseq1", arg: 4, scope: !2391, file: !3, line: 497, type: !268)
!2402 = !DILocation(line: 497, column: 86, scope: !2391)
!2403 = !DILocalVariable(name: "selseq2", arg: 5, scope: !2391, file: !3, line: 497, type: !268)
!2404 = !DILocation(line: 497, column: 106, scope: !2391)
!2405 = !DILocalVariable(name: "selseq3", arg: 6, scope: !2391, file: !3, line: 497, type: !268)
!2406 = !DILocation(line: 497, column: 126, scope: !2391)
!2407 = !DILocalVariable(name: "error_str", arg: 7, scope: !2391, file: !3, line: 497, type: !2394)
!2408 = !DILocation(line: 497, column: 148, scope: !2391)
!2409 = !DILocalVariable(name: "ed", scope: !2391, file: !3, line: 499, type: !1843)
!2410 = !DILocation(line: 499, column: 11, scope: !2391)
!2411 = !DILocation(line: 499, column: 42, scope: !2391)
!2412 = !DILocation(line: 499, column: 16, scope: !2391)
!2413 = !DILocalVariable(name: "seq1", scope: !2391, file: !3, line: 500, type: !269)
!2414 = !DILocation(line: 500, column: 12, scope: !2391)
!2415 = !DILocalVariable(name: "seq2", scope: !2391, file: !3, line: 500, type: !269)
!2416 = !DILocation(line: 500, column: 26, scope: !2391)
!2417 = !DILocalVariable(name: "seq3", scope: !2391, file: !3, line: 500, type: !269)
!2418 = !DILocation(line: 500, column: 40, scope: !2391)
!2419 = !DILocalVariable(name: "seq", scope: !2391, file: !3, line: 500, type: !269)
!2420 = !DILocation(line: 500, column: 54, scope: !2391)
!2421 = !DILocation(line: 502, column: 3, scope: !2391)
!2422 = !DILocation(line: 502, column: 13, scope: !2391)
!2423 = !DILocation(line: 504, column: 7, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 504, column: 6)
!2425 = !DILocation(line: 504, column: 6, scope: !2391)
!2426 = !DILocation(line: 505, column: 35, scope: !2424)
!2427 = !DILocation(line: 505, column: 10, scope: !2424)
!2428 = !DILocation(line: 505, column: 8, scope: !2424)
!2429 = !DILocation(line: 505, column: 3, scope: !2424)
!2430 = !DILocation(line: 507, column: 13, scope: !2431)
!2431 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 507, column: 2)
!2432 = !DILocation(line: 507, column: 17, scope: !2431)
!2433 = !DILocation(line: 507, column: 27, scope: !2431)
!2434 = !DILocation(line: 507, column: 11, scope: !2431)
!2435 = !DILocation(line: 507, column: 7, scope: !2431)
!2436 = !DILocation(line: 507, column: 34, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2431, file: !3, line: 507, column: 2)
!2438 = !DILocation(line: 507, column: 2, scope: !2431)
!2439 = !DILocation(line: 508, column: 7, scope: !2440)
!2440 = distinct !DILexicalBlock(scope: !2441, file: !3, line: 508, column: 7)
!2441 = distinct !DILexicalBlock(scope: !2437, file: !3, line: 507, column: 56)
!2442 = !DILocation(line: 508, column: 12, scope: !2440)
!2443 = !DILocation(line: 508, column: 17, scope: !2440)
!2444 = !DILocation(line: 508, column: 7, scope: !2441)
!2445 = !DILocation(line: 509, column: 8, scope: !2446)
!2446 = distinct !DILexicalBlock(scope: !2447, file: !3, line: 509, column: 8)
!2447 = distinct !DILexicalBlock(scope: !2440, file: !3, line: 508, column: 27)
!2448 = !DILocation(line: 509, column: 13, scope: !2446)
!2449 = !DILocation(line: 509, column: 18, scope: !2446)
!2450 = !DILocation(line: 509, column: 40, scope: !2446)
!2451 = !DILocation(line: 509, column: 78, scope: !2446)
!2452 = !DILocation(line: 509, column: 43, scope: !2446)
!2453 = !DILocation(line: 509, column: 84, scope: !2446)
!2454 = !DILocation(line: 509, column: 8, scope: !2447)
!2455 = !DILocation(line: 510, column: 6, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 509, column: 90)
!2457 = !DILocation(line: 510, column: 16, scope: !2456)
!2458 = !DILocation(line: 511, column: 5, scope: !2456)
!2459 = !DILocation(line: 513, column: 9, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2447, file: !3, line: 513, column: 8)
!2461 = !DILocation(line: 513, column: 16, scope: !2460)
!2462 = !DILocation(line: 513, column: 13, scope: !2460)
!2463 = !DILocation(line: 513, column: 27, scope: !2460)
!2464 = !DILocation(line: 513, column: 31, scope: !2460)
!2465 = !DILocation(line: 513, column: 38, scope: !2460)
!2466 = !DILocation(line: 513, column: 35, scope: !2460)
!2467 = !DILocation(line: 513, column: 8, scope: !2447)
!2468 = !DILocation(line: 514, column: 14, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2470, file: !3, line: 514, column: 14)
!2470 = distinct !DILexicalBlock(scope: !2460, file: !3, line: 513, column: 45)
!2471 = !DILocation(line: 514, column: 19, scope: !2469)
!2472 = !DILocation(line: 514, column: 14, scope: !2470)
!2473 = !DILocation(line: 514, column: 35, scope: !2469)
!2474 = !DILocation(line: 514, column: 33, scope: !2469)
!2475 = !DILocation(line: 514, column: 28, scope: !2469)
!2476 = !DILocation(line: 515, column: 14, scope: !2477)
!2477 = distinct !DILexicalBlock(scope: !2469, file: !3, line: 515, column: 14)
!2478 = !DILocation(line: 515, column: 19, scope: !2477)
!2479 = !DILocation(line: 515, column: 14, scope: !2469)
!2480 = !DILocation(line: 515, column: 35, scope: !2477)
!2481 = !DILocation(line: 515, column: 33, scope: !2477)
!2482 = !DILocation(line: 515, column: 28, scope: !2477)
!2483 = !DILocation(line: 516, column: 14, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2477, file: !3, line: 516, column: 14)
!2485 = !DILocation(line: 516, column: 19, scope: !2484)
!2486 = !DILocation(line: 516, column: 14, scope: !2477)
!2487 = !DILocation(line: 516, column: 35, scope: !2484)
!2488 = !DILocation(line: 516, column: 33, scope: !2484)
!2489 = !DILocation(line: 516, column: 28, scope: !2484)
!2490 = !DILocation(line: 518, column: 7, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2484, file: !3, line: 517, column: 10)
!2492 = !DILocation(line: 518, column: 17, scope: !2491)
!2493 = !DILocation(line: 519, column: 6, scope: !2491)
!2494 = !DILocation(line: 521, column: 4, scope: !2470)
!2495 = !DILocation(line: 522, column: 3, scope: !2447)
!2496 = !DILocation(line: 523, column: 2, scope: !2441)
!2497 = !DILocation(line: 507, column: 45, scope: !2437)
!2498 = !DILocation(line: 507, column: 50, scope: !2437)
!2499 = !DILocation(line: 507, column: 43, scope: !2437)
!2500 = !DILocation(line: 507, column: 2, scope: !2437)
!2501 = distinct !{!2501, !2438, !2502}
!2502 = !DILocation(line: 523, column: 2, scope: !2431)
!2503 = !DILocation(line: 527, column: 6, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 527, column: 6)
!2505 = !DILocation(line: 527, column: 11, scope: !2504)
!2506 = !DILocation(line: 527, column: 19, scope: !2504)
!2507 = !DILocation(line: 527, column: 22, scope: !2504)
!2508 = !DILocation(line: 527, column: 27, scope: !2504)
!2509 = !DILocation(line: 527, column: 6, scope: !2391)
!2510 = !DILocalVariable(name: "tmp", scope: !2511, file: !3, line: 528, type: !269)
!2511 = distinct !DILexicalBlock(scope: !2504, file: !3, line: 527, column: 36)
!2512 = !DILocation(line: 528, column: 13, scope: !2511)
!2513 = !DILocation(line: 528, column: 19, scope: !2511)
!2514 = !DILocation(line: 529, column: 10, scope: !2511)
!2515 = !DILocation(line: 529, column: 8, scope: !2511)
!2516 = !DILocation(line: 530, column: 10, scope: !2511)
!2517 = !DILocation(line: 530, column: 8, scope: !2511)
!2518 = !DILocation(line: 531, column: 2, scope: !2511)
!2519 = !DILocation(line: 534, column: 45, scope: !2391)
!2520 = !DILocation(line: 534, column: 10, scope: !2391)
!2521 = !DILocation(line: 534, column: 2, scope: !2391)
!2522 = !DILocation(line: 536, column: 27, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 534, column: 52)
!2524 = !DILocation(line: 536, column: 35, scope: !2523)
!2525 = !DILocation(line: 536, column: 16, scope: !2523)
!2526 = !DILocation(line: 536, column: 24, scope: !2523)
!2527 = !DILocation(line: 536, column: 5, scope: !2523)
!2528 = !DILocation(line: 536, column: 13, scope: !2523)
!2529 = !DILocation(line: 537, column: 4, scope: !2523)
!2530 = !DILocation(line: 539, column: 8, scope: !2531)
!2531 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 539, column: 8)
!2532 = !DILocation(line: 539, column: 13, scope: !2531)
!2533 = !DILocation(line: 539, column: 8, scope: !2523)
!2534 = !DILocation(line: 540, column: 6, scope: !2535)
!2535 = distinct !DILexicalBlock(scope: !2531, file: !3, line: 539, column: 22)
!2536 = !DILocation(line: 540, column: 16, scope: !2535)
!2537 = !DILocation(line: 541, column: 5, scope: !2535)
!2538 = !DILocation(line: 543, column: 8, scope: !2539)
!2539 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 543, column: 8)
!2540 = !DILocation(line: 543, column: 13, scope: !2539)
!2541 = !DILocation(line: 543, column: 8, scope: !2523)
!2542 = !DILocation(line: 543, column: 29, scope: !2539)
!2543 = !DILocation(line: 543, column: 27, scope: !2539)
!2544 = !DILocation(line: 543, column: 22, scope: !2539)
!2545 = !DILocation(line: 544, column: 8, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 544, column: 8)
!2547 = !DILocation(line: 544, column: 13, scope: !2546)
!2548 = !DILocation(line: 544, column: 8, scope: !2523)
!2549 = !DILocation(line: 544, column: 29, scope: !2546)
!2550 = !DILocation(line: 544, column: 27, scope: !2546)
!2551 = !DILocation(line: 544, column: 22, scope: !2546)
!2552 = !DILocation(line: 544, column: 16, scope: !2546)
!2553 = !DILocation(line: 547, column: 8, scope: !2554)
!2554 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 547, column: 8)
!2555 = !DILocation(line: 547, column: 13, scope: !2554)
!2556 = !DILocation(line: 547, column: 21, scope: !2554)
!2557 = !DILocation(line: 547, column: 24, scope: !2554)
!2558 = !DILocation(line: 547, column: 29, scope: !2554)
!2559 = !DILocation(line: 547, column: 8, scope: !2523)
!2560 = !DILocation(line: 548, column: 6, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2554, file: !3, line: 547, column: 38)
!2562 = !DILocation(line: 548, column: 16, scope: !2561)
!2563 = !DILocation(line: 549, column: 5, scope: !2561)
!2564 = !DILocation(line: 551, column: 8, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 551, column: 8)
!2566 = !DILocation(line: 551, column: 13, scope: !2565)
!2567 = !DILocation(line: 551, column: 8, scope: !2523)
!2568 = !DILocation(line: 551, column: 29, scope: !2565)
!2569 = !DILocation(line: 551, column: 27, scope: !2565)
!2570 = !DILocation(line: 551, column: 22, scope: !2565)
!2571 = !DILocation(line: 552, column: 4, scope: !2523)
!2572 = !DILocation(line: 555, column: 6, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2391, file: !3, line: 555, column: 6)
!2574 = !DILocation(line: 555, column: 11, scope: !2573)
!2575 = !DILocation(line: 555, column: 19, scope: !2573)
!2576 = !DILocation(line: 555, column: 22, scope: !2573)
!2577 = !DILocation(line: 555, column: 27, scope: !2573)
!2578 = !DILocation(line: 555, column: 35, scope: !2573)
!2579 = !DILocation(line: 555, column: 38, scope: !2573)
!2580 = !DILocation(line: 555, column: 43, scope: !2573)
!2581 = !DILocation(line: 555, column: 6, scope: !2391)
!2582 = !DILocation(line: 556, column: 4, scope: !2583)
!2583 = distinct !DILexicalBlock(scope: !2573, file: !3, line: 555, column: 52)
!2584 = !DILocation(line: 556, column: 14, scope: !2583)
!2585 = !DILocation(line: 557, column: 3, scope: !2583)
!2586 = !DILocation(line: 560, column: 13, scope: !2391)
!2587 = !DILocation(line: 560, column: 3, scope: !2391)
!2588 = !DILocation(line: 560, column: 11, scope: !2391)
!2589 = !DILocation(line: 561, column: 13, scope: !2391)
!2590 = !DILocation(line: 561, column: 3, scope: !2391)
!2591 = !DILocation(line: 561, column: 11, scope: !2391)
!2592 = !DILocation(line: 562, column: 13, scope: !2391)
!2593 = !DILocation(line: 562, column: 3, scope: !2391)
!2594 = !DILocation(line: 562, column: 11, scope: !2391)
!2595 = !DILocation(line: 564, column: 2, scope: !2391)
!2596 = !DILocation(line: 565, column: 1, scope: !2391)
!2597 = distinct !DISubprogram(name: "SEQUENCER_OT_gap_remove", scope: !3, file: !3, line: 1045, type: !2598, scopeLine: 1046, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2598 = !DISubroutineType(types: !2599)
!2599 = !{null, !2600}
!2600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2601, size: 64)
!2601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmOperatorType", file: !1600, line: 508, size: 1536, elements: !2602)
!2602 = !{!2603, !2604, !2605, !2606, !2607, !2649, !2653, !2659, !2663, !2664, !2668, !2669, !2670, !2671, !2675, !2676, !2691, !2692, !2696, !2722}
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2601, file: !1600, line: 509, baseType: !1684, size: 64)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "idname", scope: !2601, file: !1600, line: 510, baseType: !1684, size: 64, offset: 64)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "translation_context", scope: !2601, file: !1600, line: 511, baseType: !1684, size: 64, offset: 128)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !2601, file: !1600, line: 512, baseType: !1684, size: 64, offset: 192)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "exec", scope: !2601, file: !1600, line: 518, baseType: !2608, size: 64, offset: 256)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = !DISubroutineType(types: !2610)
!2610 = !{!15, !2611, !2612}
!2611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2331, size: 64)
!2612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2613, size: 64)
!2613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmOperator", file: !184, line: 328, size: 1344, elements: !2614)
!2614 = !{!2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2632, !2642, !2643, !2644, !2647, !2648}
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2613, file: !184, line: 329, baseType: !2612, size: 64)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2613, file: !184, line: 329, baseType: !2612, size: 64, offset: 64)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "idname", scope: !2613, file: !184, line: 332, baseType: !279, size: 512, offset: 128)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !2613, file: !184, line: 333, baseType: !425, size: 64, offset: 640)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2613, file: !184, line: 336, baseType: !2600, size: 64, offset: 704)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "customdata", scope: !2613, file: !184, line: 337, baseType: !239, size: 64, offset: 768)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "py_instance", scope: !2613, file: !184, line: 338, baseType: !239, size: 64, offset: 832)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2613, file: !184, line: 340, baseType: !2623, size: 64, offset: 896)
!2623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2624, size: 64)
!2624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PointerRNA", file: !85, line: 55, size: 192, elements: !2625)
!2625 = !{!2626, !2630, !2631}
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2624, file: !85, line: 58, baseType: !2627, size: 64)
!2627 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2624, file: !85, line: 56, size: 64, elements: !2628)
!2628 = !{!2629}
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2627, file: !85, line: 57, baseType: !239, size: 64)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2624, file: !85, line: 60, baseType: !503, size: 64, offset: 64)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2624, file: !85, line: 61, baseType: !239, size: 64, offset: 128)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "reports", scope: !2613, file: !184, line: 341, baseType: !2633, size: 64, offset: 960)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2634, size: 64)
!2634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ReportList", file: !184, line: 106, size: 320, elements: !2635)
!2635 = !{!2636, !2637, !2638, !2639, !2640, !2641}
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2634, file: !184, line: 107, baseType: !443, size: 128)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "printlevel", scope: !2634, file: !184, line: 108, baseType: !15, size: 32, offset: 128)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "storelevel", scope: !2634, file: !184, line: 109, baseType: !15, size: 32, offset: 160)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2634, file: !184, line: 110, baseType: !15, size: 32, offset: 192)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2634, file: !184, line: 110, baseType: !15, size: 32, offset: 224)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "reporttimer", scope: !2634, file: !184, line: 111, baseType: !1598, size: 64, offset: 256)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "macro", scope: !2613, file: !184, line: 343, baseType: !443, size: 128, offset: 1024)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "opm", scope: !2613, file: !184, line: 344, baseType: !2612, size: 64, offset: 1152)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "layout", scope: !2613, file: !184, line: 345, baseType: !2645, size: 64, offset: 1216)
!2645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2646, size: 64)
!2646 = !DICompositeType(tag: DW_TAG_structure_type, name: "uiLayout", file: !184, line: 61, flags: DIFlagFwdDecl)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2613, file: !184, line: 346, baseType: !299, size: 16, offset: 1280)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2613, file: !184, line: 346, baseType: !1217, size: 48, offset: 1296)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "check", scope: !2601, file: !1600, line: 524, baseType: !2650, size: 64, offset: 320)
!2650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2651, size: 64)
!2651 = !DISubroutineType(types: !2652)
!2652 = !{!605, !2611, !2612}
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "invoke", scope: !2601, file: !1600, line: 530, baseType: !2654, size: 64, offset: 384)
!2654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2655, size: 64)
!2655 = !DISubroutineType(types: !2656)
!2656 = !{!15, !2611, !2612, !2657}
!2657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2658, size: 64)
!2658 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1657)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "cancel", scope: !2601, file: !1600, line: 531, baseType: !2660, size: 64, offset: 448)
!2660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2661, size: 64)
!2661 = !DISubroutineType(types: !2662)
!2662 = !{null, !2611, !2612}
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "modal", scope: !2601, file: !1600, line: 532, baseType: !2654, size: 64, offset: 512)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !2601, file: !1600, line: 536, baseType: !2665, size: 64, offset: 576)
!2665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2666, size: 64)
!2666 = !DISubroutineType(types: !2667)
!2667 = !{!15, !2611}
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "ui", scope: !2601, file: !1600, line: 539, baseType: !2660, size: 64, offset: 640)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "srna", scope: !2601, file: !1600, line: 542, baseType: !503, size: 64, offset: 704)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "last_properties", scope: !2601, file: !1600, line: 545, baseType: !430, size: 64, offset: 768)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "prop", scope: !2601, file: !1600, line: 549, baseType: !2672, size: 64, offset: 832)
!2672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2673, size: 64)
!2673 = !DIDerivedType(tag: DW_TAG_typedef, name: "PropertyRNA", file: !85, line: 333, baseType: !2674)
!2674 = !DICompositeType(tag: DW_TAG_structure_type, name: "PropertyRNA", file: !85, line: 39, flags: DIFlagFwdDecl)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "macro", scope: !2601, file: !1600, line: 552, baseType: !443, size: 128, offset: 896)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "modalkeymap", scope: !2601, file: !1600, line: 555, baseType: !2677, size: 64, offset: 1024)
!2677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2678, size: 64)
!2678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wmKeyMap", file: !184, line: 281, size: 1088, elements: !2679)
!2679 = !{!2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2678, file: !184, line: 282, baseType: !2677, size: 64)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2678, file: !184, line: 282, baseType: !2677, size: 64, offset: 64)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "items", scope: !2678, file: !184, line: 284, baseType: !443, size: 128, offset: 128)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "diff_items", scope: !2678, file: !184, line: 285, baseType: !443, size: 128, offset: 256)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "idname", scope: !2678, file: !184, line: 287, baseType: !279, size: 512, offset: 384)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "spaceid", scope: !2678, file: !184, line: 288, baseType: !299, size: 16, offset: 896)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "regionid", scope: !2678, file: !184, line: 289, baseType: !299, size: 16, offset: 912)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2678, file: !184, line: 291, baseType: !299, size: 16, offset: 928)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "kmi_id", scope: !2678, file: !184, line: 292, baseType: !299, size: 16, offset: 944)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !2678, file: !184, line: 295, baseType: !2665, size: 64, offset: 960)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "modal_items", scope: !2678, file: !184, line: 296, baseType: !239, size: 64, offset: 1024)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "pyop_data", scope: !2601, file: !1600, line: 559, baseType: !239, size: 64, offset: 1088)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "pyop_poll", scope: !2601, file: !1600, line: 560, baseType: !2693, size: 64, offset: 1152)
!2693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2694, size: 64)
!2694 = !DISubroutineType(types: !2695)
!2695 = !{!15, !2611, !2600}
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "ext", scope: !2601, file: !1600, line: 563, baseType: !2697, size: 256, offset: 1216)
!2697 = !DIDerivedType(tag: DW_TAG_typedef, name: "ExtensionRNA", file: !85, line: 436, baseType: !2698)
!2698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ExtensionRNA", file: !85, line: 430, size: 256, elements: !2699)
!2699 = !{!2700, !2701, !2704, !2720}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2698, file: !85, line: 431, baseType: !239, size: 64)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "srna", scope: !2698, file: !85, line: 432, baseType: !2702, size: 64, offset: 64)
!2702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2703, size: 64)
!2703 = !DIDerivedType(tag: DW_TAG_typedef, name: "StructRNA", file: !85, line: 417, baseType: !504)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2698, file: !85, line: 433, baseType: !2705, size: 64, offset: 128)
!2705 = !DIDerivedType(tag: DW_TAG_typedef, name: "StructCallbackFunc", file: !85, line: 408, baseType: !2706)
!2706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2707, size: 64)
!2707 = !DISubroutineType(types: !2708)
!2708 = !{!15, !2611, !2623, !2709, !2711}
!2709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2710, size: 64)
!2710 = !DICompositeType(tag: DW_TAG_structure_type, name: "FunctionRNA", file: !85, line: 38, flags: DIFlagFwdDecl)
!2711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2712, size: 64)
!2712 = !DIDerivedType(tag: DW_TAG_typedef, name: "ParameterList", file: !85, line: 348, baseType: !2713)
!2713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ParameterList", file: !85, line: 337, size: 256, elements: !2714)
!2714 = !{!2715, !2716, !2717, !2718, !2719}
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2713, file: !85, line: 339, baseType: !239, size: 64)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !2713, file: !85, line: 342, baseType: !2709, size: 64, offset: 64)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_size", scope: !2713, file: !85, line: 345, baseType: !15, size: 32, offset: 128)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "arg_count", scope: !2713, file: !85, line: 347, baseType: !15, size: 32, offset: 160)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "ret_count", scope: !2713, file: !85, line: 347, baseType: !15, size: 32, offset: 192)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !2698, file: !85, line: 434, baseType: !2721, size: 64, offset: 192)
!2721 = !DIDerivedType(tag: DW_TAG_typedef, name: "StructFreeFunc", file: !85, line: 409, baseType: !560)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2601, file: !1600, line: 566, baseType: !299, size: 16, offset: 1472)
!2723 = !DILocalVariable(name: "ot", arg: 1, scope: !2597, file: !3, line: 1045, type: !2600)
!2724 = !DILocation(line: 1045, column: 53, scope: !2597)
!2725 = !DILocation(line: 1048, column: 2, scope: !2597)
!2726 = !DILocation(line: 1048, column: 6, scope: !2597)
!2727 = !DILocation(line: 1048, column: 11, scope: !2597)
!2728 = !DILocation(line: 1049, column: 2, scope: !2597)
!2729 = !DILocation(line: 1049, column: 6, scope: !2597)
!2730 = !DILocation(line: 1049, column: 13, scope: !2597)
!2731 = !DILocation(line: 1050, column: 2, scope: !2597)
!2732 = !DILocation(line: 1050, column: 6, scope: !2597)
!2733 = !DILocation(line: 1050, column: 18, scope: !2597)
!2734 = !DILocation(line: 1054, column: 2, scope: !2597)
!2735 = !DILocation(line: 1054, column: 6, scope: !2597)
!2736 = !DILocation(line: 1054, column: 11, scope: !2597)
!2737 = !DILocation(line: 1055, column: 2, scope: !2597)
!2738 = !DILocation(line: 1055, column: 6, scope: !2597)
!2739 = !DILocation(line: 1055, column: 11, scope: !2597)
!2740 = !DILocation(line: 1058, column: 2, scope: !2597)
!2741 = !DILocation(line: 1058, column: 6, scope: !2597)
!2742 = !DILocation(line: 1058, column: 11, scope: !2597)
!2743 = !DILocation(line: 1060, column: 18, scope: !2597)
!2744 = !DILocation(line: 1060, column: 22, scope: !2597)
!2745 = !DILocation(line: 1060, column: 2, scope: !2597)
!2746 = !DILocation(line: 1061, column: 1, scope: !2597)
!2747 = distinct !DISubprogram(name: "sequencer_gap_remove_exec", scope: !3, file: !3, line: 1002, type: !2748, scopeLine: 1003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2748 = !DISubroutineType(types: !2749)
!2749 = !{!15, !2329, !2750}
!2750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2751, size: 64)
!2751 = !DIDerivedType(tag: DW_TAG_typedef, name: "wmOperator", file: !184, line: 348, baseType: !2613)
!2752 = !DILocalVariable(name: "C", arg: 1, scope: !2747, file: !3, line: 1002, type: !2329)
!2753 = !DILocation(line: 1002, column: 48, scope: !2747)
!2754 = !DILocalVariable(name: "op", arg: 2, scope: !2747, file: !3, line: 1002, type: !2750)
!2755 = !DILocation(line: 1002, column: 63, scope: !2747)
!2756 = !DILocalVariable(name: "scene", scope: !2747, file: !3, line: 1004, type: !1540)
!2757 = !DILocation(line: 1004, column: 9, scope: !2747)
!2758 = !DILocation(line: 1004, column: 32, scope: !2747)
!2759 = !DILocation(line: 1004, column: 17, scope: !2747)
!2760 = !DILocalVariable(name: "rectf", scope: !2747, file: !3, line: 1005, type: !524)
!2761 = !DILocation(line: 1005, column: 7, scope: !2747)
!2762 = !DILocalVariable(name: "cfra", scope: !2747, file: !3, line: 1006, type: !15)
!2763 = !DILocation(line: 1006, column: 6, scope: !2747)
!2764 = !DILocalVariable(name: "efra", scope: !2747, file: !3, line: 1006, type: !15)
!2765 = !DILocation(line: 1006, column: 12, scope: !2747)
!2766 = !DILocalVariable(name: "sfra", scope: !2747, file: !3, line: 1006, type: !15)
!2767 = !DILocation(line: 1006, column: 18, scope: !2747)
!2768 = !DILocalVariable(name: "first", scope: !2747, file: !3, line: 1007, type: !605)
!2769 = !DILocation(line: 1007, column: 7, scope: !2747)
!2770 = !DILocalVariable(name: "done", scope: !2747, file: !3, line: 1007, type: !605)
!2771 = !DILocation(line: 1007, column: 22, scope: !2747)
!2772 = !DILocalVariable(name: "do_all", scope: !2747, file: !3, line: 1008, type: !605)
!2773 = !DILocation(line: 1008, column: 7, scope: !2747)
!2774 = !DILocation(line: 1008, column: 32, scope: !2747)
!2775 = !DILocation(line: 1008, column: 36, scope: !2747)
!2776 = !DILocation(line: 1008, column: 16, scope: !2747)
!2777 = !DILocation(line: 1011, column: 15, scope: !2747)
!2778 = !DILocation(line: 1011, column: 2, scope: !2747)
!2779 = !DILocation(line: 1012, column: 20, scope: !2747)
!2780 = !DILocation(line: 1012, column: 9, scope: !2747)
!2781 = !DILocation(line: 1012, column: 7, scope: !2747)
!2782 = !DILocation(line: 1013, column: 20, scope: !2747)
!2783 = !DILocation(line: 1013, column: 9, scope: !2747)
!2784 = !DILocation(line: 1013, column: 7, scope: !2747)
!2785 = !DILocation(line: 1016, column: 14, scope: !2786)
!2786 = distinct !DILexicalBlock(scope: !2747, file: !3, line: 1016, column: 2)
!2787 = !DILocation(line: 1016, column: 12, scope: !2786)
!2788 = !DILocation(line: 1016, column: 7, scope: !2786)
!2789 = !DILocation(line: 1016, column: 20, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2786, file: !3, line: 1016, column: 2)
!2791 = !DILocation(line: 1016, column: 28, scope: !2790)
!2792 = !DILocation(line: 1016, column: 25, scope: !2790)
!2793 = !DILocation(line: 1016, column: 2, scope: !2786)
!2794 = !DILocation(line: 1017, column: 36, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2796, file: !3, line: 1017, column: 7)
!2796 = distinct !DILexicalBlock(scope: !2790, file: !3, line: 1016, column: 42)
!2797 = !DILocation(line: 1017, column: 43, scope: !2795)
!2798 = !DILocation(line: 1017, column: 7, scope: !2795)
!2799 = !DILocation(line: 1017, column: 7, scope: !2796)
!2800 = !DILocation(line: 1018, column: 10, scope: !2801)
!2801 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 1017, column: 50)
!2802 = !DILocation(line: 1019, column: 4, scope: !2801)
!2803 = !DILocation(line: 1021, column: 2, scope: !2796)
!2804 = !DILocation(line: 1016, column: 38, scope: !2790)
!2805 = !DILocation(line: 1016, column: 2, scope: !2790)
!2806 = distinct !{!2806, !2793, !2807}
!2807 = !DILocation(line: 1021, column: 2, scope: !2786)
!2808 = !DILocation(line: 1023, column: 2, scope: !2747)
!2809 = !DILocation(line: 1023, column: 10, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 1023, column: 2)
!2811 = distinct !DILexicalBlock(scope: !2747, file: !3, line: 1023, column: 2)
!2812 = !DILocation(line: 1023, column: 17, scope: !2810)
!2813 = !DILocation(line: 1023, column: 15, scope: !2810)
!2814 = !DILocation(line: 1023, column: 2, scope: !2811)
!2815 = !DILocation(line: 1025, column: 7, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2817, file: !3, line: 1025, column: 7)
!2817 = distinct !DILexicalBlock(scope: !2810, file: !3, line: 1023, column: 31)
!2818 = !DILocation(line: 1025, column: 13, scope: !2816)
!2819 = !DILocation(line: 1025, column: 7, scope: !2817)
!2820 = !DILocation(line: 1026, column: 37, scope: !2821)
!2821 = distinct !DILexicalBlock(scope: !2822, file: !3, line: 1026, column: 8)
!2822 = distinct !DILexicalBlock(scope: !2816, file: !3, line: 1025, column: 23)
!2823 = !DILocation(line: 1026, column: 44, scope: !2821)
!2824 = !DILocation(line: 1026, column: 8, scope: !2821)
!2825 = !DILocation(line: 1026, column: 8, scope: !2822)
!2826 = !DILocation(line: 1026, column: 58, scope: !2821)
!2827 = !DILocation(line: 1026, column: 52, scope: !2821)
!2828 = !DILocation(line: 1027, column: 3, scope: !2822)
!2829 = !DILocation(line: 1028, column: 41, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2816, file: !3, line: 1028, column: 12)
!2831 = !DILocation(line: 1028, column: 48, scope: !2830)
!2832 = !DILocation(line: 1028, column: 12, scope: !2830)
!2833 = !DILocation(line: 1028, column: 54, scope: !2830)
!2834 = !DILocation(line: 1028, column: 12, scope: !2816)
!2835 = !DILocation(line: 1029, column: 9, scope: !2836)
!2836 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 1028, column: 60)
!2837 = !DILocation(line: 1030, column: 4, scope: !2836)
!2838 = !DILocation(line: 1030, column: 40, scope: !2836)
!2839 = !DILocation(line: 1030, column: 47, scope: !2836)
!2840 = !DILocation(line: 1030, column: 11, scope: !2836)
!2841 = !DILocation(line: 1030, column: 53, scope: !2836)
!2842 = !DILocation(line: 1031, column: 40, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2836, file: !3, line: 1030, column: 59)
!2844 = !DILocation(line: 1031, column: 51, scope: !2843)
!2845 = !DILocation(line: 1031, column: 12, scope: !2843)
!2846 = !DILocation(line: 1031, column: 10, scope: !2843)
!2847 = !DILocation(line: 1032, column: 9, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2843, file: !3, line: 1032, column: 9)
!2849 = !DILocation(line: 1032, column: 14, scope: !2848)
!2850 = !DILocation(line: 1032, column: 9, scope: !2843)
!2851 = !DILocation(line: 1032, column: 24, scope: !2848)
!2852 = distinct !{!2852, !2837, !2853}
!2853 = !DILocation(line: 1033, column: 4, scope: !2836)
!2854 = !DILocation(line: 1034, column: 8, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2836, file: !3, line: 1034, column: 8)
!2856 = !DILocation(line: 1034, column: 13, scope: !2855)
!2857 = !DILocation(line: 1034, column: 22, scope: !2855)
!2858 = !DILocation(line: 1034, column: 25, scope: !2855)
!2859 = !DILocation(line: 1034, column: 32, scope: !2855)
!2860 = !DILocation(line: 1034, column: 8, scope: !2836)
!2861 = !DILocation(line: 1034, column: 42, scope: !2855)
!2862 = !DILocation(line: 1035, column: 3, scope: !2836)
!2863 = !DILocation(line: 1036, column: 2, scope: !2817)
!2864 = !DILocation(line: 1023, column: 27, scope: !2810)
!2865 = !DILocation(line: 1023, column: 2, scope: !2810)
!2866 = distinct !{!2866, !2814, !2867}
!2867 = !DILocation(line: 1036, column: 2, scope: !2811)
!2868 = !DILocation(line: 1038, column: 24, scope: !2747)
!2869 = !DILocation(line: 1038, column: 52, scope: !2747)
!2870 = !DILocation(line: 1038, column: 2, scope: !2747)
!2871 = !DILocation(line: 1040, column: 2, scope: !2747)
!2872 = distinct !DISubprogram(name: "sequencer_edit_poll", scope: !3, file: !3, line: 1112, type: !2327, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2873 = !DILocalVariable(name: "C", arg: 1, scope: !2872, file: !3, line: 1112, type: !2329)
!2874 = !DILocation(line: 1112, column: 35, scope: !2872)
!2875 = !DILocation(line: 1114, column: 51, scope: !2872)
!2876 = !DILocation(line: 1114, column: 36, scope: !2872)
!2877 = !DILocation(line: 1114, column: 10, scope: !2872)
!2878 = !DILocation(line: 1114, column: 62, scope: !2872)
!2879 = !DILocation(line: 1114, column: 2, scope: !2872)
!2880 = distinct !DISubprogram(name: "SEQUENCER_OT_gap_insert", scope: !3, file: !3, line: 1076, type: !2598, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2881 = !DILocalVariable(name: "ot", arg: 1, scope: !2880, file: !3, line: 1076, type: !2600)
!2882 = !DILocation(line: 1076, column: 53, scope: !2880)
!2883 = !DILocation(line: 1079, column: 2, scope: !2880)
!2884 = !DILocation(line: 1079, column: 6, scope: !2880)
!2885 = !DILocation(line: 1079, column: 11, scope: !2880)
!2886 = !DILocation(line: 1080, column: 2, scope: !2880)
!2887 = !DILocation(line: 1080, column: 6, scope: !2880)
!2888 = !DILocation(line: 1080, column: 13, scope: !2880)
!2889 = !DILocation(line: 1081, column: 2, scope: !2880)
!2890 = !DILocation(line: 1081, column: 6, scope: !2880)
!2891 = !DILocation(line: 1081, column: 18, scope: !2880)
!2892 = !DILocation(line: 1085, column: 2, scope: !2880)
!2893 = !DILocation(line: 1085, column: 6, scope: !2880)
!2894 = !DILocation(line: 1085, column: 11, scope: !2880)
!2895 = !DILocation(line: 1086, column: 2, scope: !2880)
!2896 = !DILocation(line: 1086, column: 6, scope: !2880)
!2897 = !DILocation(line: 1086, column: 11, scope: !2880)
!2898 = !DILocation(line: 1089, column: 2, scope: !2880)
!2899 = !DILocation(line: 1089, column: 6, scope: !2880)
!2900 = !DILocation(line: 1089, column: 11, scope: !2880)
!2901 = !DILocation(line: 1091, column: 14, scope: !2880)
!2902 = !DILocation(line: 1091, column: 18, scope: !2880)
!2903 = !DILocation(line: 1091, column: 2, scope: !2880)
!2904 = !DILocation(line: 1092, column: 1, scope: !2880)
!2905 = distinct !DISubprogram(name: "sequencer_gap_insert_exec", scope: !3, file: !3, line: 1063, type: !2748, scopeLine: 1064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2906 = !DILocalVariable(name: "C", arg: 1, scope: !2905, file: !3, line: 1063, type: !2329)
!2907 = !DILocation(line: 1063, column: 48, scope: !2905)
!2908 = !DILocalVariable(name: "op", arg: 2, scope: !2905, file: !3, line: 1063, type: !2750)
!2909 = !DILocation(line: 1063, column: 63, scope: !2905)
!2910 = !DILocalVariable(name: "scene", scope: !2905, file: !3, line: 1065, type: !1540)
!2911 = !DILocation(line: 1065, column: 9, scope: !2905)
!2912 = !DILocation(line: 1065, column: 32, scope: !2905)
!2913 = !DILocation(line: 1065, column: 17, scope: !2905)
!2914 = !DILocalVariable(name: "frames", scope: !2905, file: !3, line: 1066, type: !15)
!2915 = !DILocation(line: 1066, column: 6, scope: !2905)
!2916 = !DILocation(line: 1066, column: 27, scope: !2905)
!2917 = !DILocation(line: 1066, column: 31, scope: !2905)
!2918 = !DILocation(line: 1066, column: 15, scope: !2905)
!2919 = !DILocation(line: 1068, column: 30, scope: !2905)
!2920 = !DILocation(line: 1068, column: 37, scope: !2905)
!2921 = !DILocation(line: 1068, column: 45, scope: !2905)
!2922 = !DILocation(line: 1068, column: 2, scope: !2905)
!2923 = !DILocation(line: 1070, column: 24, scope: !2905)
!2924 = !DILocation(line: 1070, column: 52, scope: !2905)
!2925 = !DILocation(line: 1070, column: 2, scope: !2905)
!2926 = !DILocation(line: 1072, column: 2, scope: !2905)
!2927 = distinct !DISubprogram(name: "sequencer_strip_has_path_poll", scope: !3, file: !3, line: 1125, type: !2327, scopeLine: 1126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2928 = !DILocalVariable(name: "C", arg: 1, scope: !2927, file: !3, line: 1125, type: !2329)
!2929 = !DILocation(line: 1125, column: 45, scope: !2927)
!2930 = !DILocalVariable(name: "ed", scope: !2927, file: !3, line: 1127, type: !1843)
!2931 = !DILocation(line: 1127, column: 11, scope: !2927)
!2932 = !DILocalVariable(name: "seq", scope: !2927, file: !3, line: 1128, type: !269)
!2933 = !DILocation(line: 1128, column: 12, scope: !2927)
!2934 = !DILocation(line: 1129, column: 58, scope: !2927)
!2935 = !DILocation(line: 1129, column: 43, scope: !2927)
!2936 = !DILocation(line: 1129, column: 17, scope: !2927)
!2937 = !DILocation(line: 1129, column: 15, scope: !2927)
!2938 = !DILocation(line: 1129, column: 70, scope: !2927)
!2939 = !DILocation(line: 1129, column: 79, scope: !2927)
!2940 = !DILocation(line: 1129, column: 90, scope: !2927)
!2941 = !DILocation(line: 1129, column: 94, scope: !2927)
!2942 = !DILocation(line: 1129, column: 88, scope: !2927)
!2943 = !DILocation(line: 1129, column: 103, scope: !2927)
!2944 = !DILocation(line: 1129, column: 112, scope: !2927)
!2945 = !DILocation(line: 1129, column: 116, scope: !2927)
!2946 = !DILocation(line: 0, scope: !2927)
!2947 = !DILocation(line: 1129, column: 2, scope: !2927)
!2948 = distinct !DISubprogram(name: "sequencer_view_poll", scope: !3, file: !3, line: 1132, type: !2327, scopeLine: 1133, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2949 = !DILocalVariable(name: "C", arg: 1, scope: !2948, file: !3, line: 1132, type: !2329)
!2950 = !DILocation(line: 1132, column: 35, scope: !2948)
!2951 = !DILocalVariable(name: "sseq", scope: !2948, file: !3, line: 1134, type: !1542)
!2952 = !DILocation(line: 1134, column: 12, scope: !2948)
!2953 = !DILocation(line: 1134, column: 36, scope: !2948)
!2954 = !DILocation(line: 1134, column: 19, scope: !2948)
!2955 = !DILocalVariable(name: "ed", scope: !2948, file: !3, line: 1135, type: !1843)
!2956 = !DILocation(line: 1135, column: 11, scope: !2948)
!2957 = !DILocation(line: 1135, column: 57, scope: !2948)
!2958 = !DILocation(line: 1135, column: 42, scope: !2948)
!2959 = !DILocation(line: 1135, column: 16, scope: !2948)
!2960 = !DILocation(line: 1136, column: 6, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2948, file: !3, line: 1136, column: 6)
!2962 = !DILocation(line: 1136, column: 9, scope: !2961)
!2963 = !DILocation(line: 1136, column: 12, scope: !2961)
!2964 = !DILocation(line: 1136, column: 17, scope: !2961)
!2965 = !DILocation(line: 1136, column: 21, scope: !2961)
!2966 = !DILocation(line: 1136, column: 27, scope: !2961)
!2967 = !DILocation(line: 1136, column: 33, scope: !2961)
!2968 = !DILocation(line: 1136, column: 6, scope: !2948)
!2969 = !DILocation(line: 1137, column: 3, scope: !2961)
!2970 = !DILocation(line: 1139, column: 2, scope: !2948)
!2971 = !DILocation(line: 1140, column: 1, scope: !2948)
!2972 = distinct !DISubprogram(name: "SEQUENCER_OT_snap", scope: !3, file: !3, line: 1216, type: !2598, scopeLine: 1217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!2973 = !DILocalVariable(name: "ot", arg: 1, scope: !2972, file: !3, line: 1216, type: !2600)
!2974 = !DILocation(line: 1216, column: 47, scope: !2972)
!2975 = !DILocation(line: 1219, column: 2, scope: !2972)
!2976 = !DILocation(line: 1219, column: 6, scope: !2972)
!2977 = !DILocation(line: 1219, column: 11, scope: !2972)
!2978 = !DILocation(line: 1220, column: 2, scope: !2972)
!2979 = !DILocation(line: 1220, column: 6, scope: !2972)
!2980 = !DILocation(line: 1220, column: 13, scope: !2972)
!2981 = !DILocation(line: 1221, column: 2, scope: !2972)
!2982 = !DILocation(line: 1221, column: 6, scope: !2972)
!2983 = !DILocation(line: 1221, column: 18, scope: !2972)
!2984 = !DILocation(line: 1224, column: 2, scope: !2972)
!2985 = !DILocation(line: 1224, column: 6, scope: !2972)
!2986 = !DILocation(line: 1224, column: 13, scope: !2972)
!2987 = !DILocation(line: 1225, column: 2, scope: !2972)
!2988 = !DILocation(line: 1225, column: 6, scope: !2972)
!2989 = !DILocation(line: 1225, column: 11, scope: !2972)
!2990 = !DILocation(line: 1226, column: 2, scope: !2972)
!2991 = !DILocation(line: 1226, column: 6, scope: !2972)
!2992 = !DILocation(line: 1226, column: 11, scope: !2972)
!2993 = !DILocation(line: 1229, column: 2, scope: !2972)
!2994 = !DILocation(line: 1229, column: 6, scope: !2972)
!2995 = !DILocation(line: 1229, column: 11, scope: !2972)
!2996 = !DILocation(line: 1231, column: 14, scope: !2972)
!2997 = !DILocation(line: 1231, column: 18, scope: !2972)
!2998 = !DILocation(line: 1231, column: 2, scope: !2972)
!2999 = !DILocation(line: 1232, column: 1, scope: !2972)
!3000 = distinct !DISubprogram(name: "sequencer_snap_invoke", scope: !3, file: !3, line: 1204, type: !3001, scopeLine: 1205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3001 = !DISubroutineType(types: !3002)
!3002 = !{!15, !2329, !2750, !3003}
!3003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3004, size: 64)
!3004 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3005)
!3005 = !DIDerivedType(tag: DW_TAG_typedef, name: "wmEvent", file: !1600, line: 460, baseType: !1657)
!3006 = !DILocalVariable(name: "C", arg: 1, scope: !3000, file: !3, line: 1204, type: !2329)
!3007 = !DILocation(line: 1204, column: 44, scope: !3000)
!3008 = !DILocalVariable(name: "op", arg: 2, scope: !3000, file: !3, line: 1204, type: !2750)
!3009 = !DILocation(line: 1204, column: 59, scope: !3000)
!3010 = !DILocalVariable(name: "UNUSED_event", arg: 3, scope: !3000, file: !3, line: 1204, type: !3003)
!3011 = !DILocation(line: 1204, column: 78, scope: !3000)
!3012 = !DILocalVariable(name: "scene", scope: !3000, file: !3, line: 1206, type: !1540)
!3013 = !DILocation(line: 1206, column: 9, scope: !3000)
!3014 = !DILocation(line: 1206, column: 32, scope: !3000)
!3015 = !DILocation(line: 1206, column: 17, scope: !3000)
!3016 = !DILocalVariable(name: "snap_frame", scope: !3000, file: !3, line: 1208, type: !15)
!3017 = !DILocation(line: 1208, column: 6, scope: !3000)
!3018 = !DILocation(line: 1210, column: 15, scope: !3000)
!3019 = !DILocation(line: 1210, column: 13, scope: !3000)
!3020 = !DILocation(line: 1212, column: 14, scope: !3000)
!3021 = !DILocation(line: 1212, column: 18, scope: !3000)
!3022 = !DILocation(line: 1212, column: 32, scope: !3000)
!3023 = !DILocation(line: 1212, column: 2, scope: !3000)
!3024 = !DILocation(line: 1213, column: 29, scope: !3000)
!3025 = !DILocation(line: 1213, column: 32, scope: !3000)
!3026 = !DILocation(line: 1213, column: 9, scope: !3000)
!3027 = !DILocation(line: 1213, column: 2, scope: !3000)
!3028 = distinct !DISubprogram(name: "sequencer_snap_exec", scope: !3, file: !3, line: 1143, type: !2748, scopeLine: 1144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3029 = !DILocalVariable(name: "C", arg: 1, scope: !3028, file: !3, line: 1143, type: !2329)
!3030 = !DILocation(line: 1143, column: 42, scope: !3028)
!3031 = !DILocalVariable(name: "op", arg: 2, scope: !3028, file: !3, line: 1143, type: !2750)
!3032 = !DILocation(line: 1143, column: 57, scope: !3028)
!3033 = !DILocalVariable(name: "scene", scope: !3028, file: !3, line: 1145, type: !1540)
!3034 = !DILocation(line: 1145, column: 9, scope: !3028)
!3035 = !DILocation(line: 1145, column: 32, scope: !3028)
!3036 = !DILocation(line: 1145, column: 17, scope: !3028)
!3037 = !DILocalVariable(name: "ed", scope: !3028, file: !3, line: 1147, type: !1843)
!3038 = !DILocation(line: 1147, column: 11, scope: !3028)
!3039 = !DILocation(line: 1147, column: 42, scope: !3028)
!3040 = !DILocation(line: 1147, column: 16, scope: !3028)
!3041 = !DILocalVariable(name: "seq", scope: !3028, file: !3, line: 1148, type: !269)
!3042 = !DILocation(line: 1148, column: 12, scope: !3028)
!3043 = !DILocalVariable(name: "snap_frame", scope: !3028, file: !3, line: 1149, type: !15)
!3044 = !DILocation(line: 1149, column: 6, scope: !3028)
!3045 = !DILocation(line: 1151, column: 27, scope: !3028)
!3046 = !DILocation(line: 1151, column: 31, scope: !3028)
!3047 = !DILocation(line: 1151, column: 15, scope: !3028)
!3048 = !DILocation(line: 1151, column: 13, scope: !3028)
!3049 = !DILocation(line: 1154, column: 13, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1154, column: 2)
!3051 = !DILocation(line: 1154, column: 17, scope: !3050)
!3052 = !DILocation(line: 1154, column: 27, scope: !3050)
!3053 = !DILocation(line: 1154, column: 11, scope: !3050)
!3054 = !DILocation(line: 1154, column: 7, scope: !3050)
!3055 = !DILocation(line: 1154, column: 34, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 1154, column: 2)
!3057 = !DILocation(line: 1154, column: 2, scope: !3050)
!3058 = !DILocation(line: 1155, column: 7, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3060, file: !3, line: 1155, column: 7)
!3060 = distinct !DILexicalBlock(scope: !3056, file: !3, line: 1154, column: 56)
!3061 = !DILocation(line: 1155, column: 12, scope: !3059)
!3062 = !DILocation(line: 1155, column: 17, scope: !3059)
!3063 = !DILocation(line: 1155, column: 26, scope: !3059)
!3064 = !DILocation(line: 1155, column: 31, scope: !3059)
!3065 = !DILocation(line: 1155, column: 36, scope: !3059)
!3066 = !DILocation(line: 1155, column: 42, scope: !3059)
!3067 = !DILocation(line: 1155, column: 47, scope: !3059)
!3068 = !DILocation(line: 1155, column: 50, scope: !3059)
!3069 = !DILocation(line: 1155, column: 55, scope: !3059)
!3070 = !DILocation(line: 1155, column: 60, scope: !3059)
!3071 = !DILocation(line: 1155, column: 72, scope: !3059)
!3072 = !DILocation(line: 1156, column: 28, scope: !3059)
!3073 = !DILocation(line: 1156, column: 7, scope: !3059)
!3074 = !DILocation(line: 1155, column: 7, scope: !3060)
!3075 = !DILocation(line: 1158, column: 9, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 1158, column: 8)
!3077 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 1157, column: 3)
!3078 = !DILocation(line: 1158, column: 14, scope: !3076)
!3079 = !DILocation(line: 1158, column: 19, scope: !3076)
!3080 = !DILocation(line: 1158, column: 51, scope: !3076)
!3081 = !DILocation(line: 1158, column: 8, scope: !3077)
!3082 = !DILocation(line: 1162, column: 28, scope: !3083)
!3083 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 1158, column: 57)
!3084 = !DILocation(line: 1162, column: 35, scope: !3083)
!3085 = !DILocation(line: 1162, column: 41, scope: !3083)
!3086 = !DILocation(line: 1162, column: 54, scope: !3083)
!3087 = !DILocation(line: 1162, column: 59, scope: !3083)
!3088 = !DILocation(line: 1162, column: 52, scope: !3083)
!3089 = !DILocation(line: 1162, column: 70, scope: !3083)
!3090 = !DILocation(line: 1162, column: 75, scope: !3083)
!3091 = !DILocation(line: 1162, column: 68, scope: !3083)
!3092 = !DILocation(line: 1162, column: 89, scope: !3083)
!3093 = !DILocation(line: 1162, column: 94, scope: !3083)
!3094 = !DILocation(line: 1162, column: 87, scope: !3083)
!3095 = !DILocation(line: 1162, column: 5, scope: !3083)
!3096 = !DILocation(line: 1163, column: 4, scope: !3083)
!3097 = !DILocation(line: 1165, column: 9, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 1165, column: 9)
!3099 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 1164, column: 9)
!3100 = !DILocation(line: 1165, column: 14, scope: !3098)
!3101 = !DILocation(line: 1165, column: 19, scope: !3098)
!3102 = !DILocation(line: 1165, column: 9, scope: !3099)
!3103 = !DILocation(line: 1166, column: 37, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1165, column: 34)
!3105 = !DILocation(line: 1166, column: 42, scope: !3104)
!3106 = !DILocation(line: 1166, column: 6, scope: !3104)
!3107 = !DILocation(line: 1167, column: 5, scope: !3104)
!3108 = !DILocation(line: 1169, column: 38, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 1168, column: 10)
!3110 = !DILocation(line: 1169, column: 43, scope: !3109)
!3111 = !DILocation(line: 1169, column: 6, scope: !3109)
!3112 = !DILocation(line: 1171, column: 36, scope: !3099)
!3113 = !DILocation(line: 1171, column: 41, scope: !3099)
!3114 = !DILocation(line: 1171, column: 46, scope: !3099)
!3115 = !DILocation(line: 1171, column: 51, scope: !3099)
!3116 = !DILocation(line: 1171, column: 66, scope: !3099)
!3117 = !DILocation(line: 1171, column: 71, scope: !3099)
!3118 = !DILocation(line: 1171, column: 76, scope: !3099)
!3119 = !DILocation(line: 1171, column: 5, scope: !3099)
!3120 = !DILocation(line: 1173, column: 22, scope: !3077)
!3121 = !DILocation(line: 1173, column: 29, scope: !3077)
!3122 = !DILocation(line: 1173, column: 4, scope: !3077)
!3123 = !DILocation(line: 1174, column: 3, scope: !3077)
!3124 = !DILocation(line: 1175, column: 2, scope: !3060)
!3125 = !DILocation(line: 1154, column: 45, scope: !3056)
!3126 = !DILocation(line: 1154, column: 50, scope: !3056)
!3127 = !DILocation(line: 1154, column: 43, scope: !3056)
!3128 = !DILocation(line: 1154, column: 2, scope: !3056)
!3129 = distinct !{!3129, !3057, !3130}
!3130 = !DILocation(line: 1175, column: 2, scope: !3050)
!3131 = !DILocation(line: 1179, column: 13, scope: !3132)
!3132 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1179, column: 2)
!3133 = !DILocation(line: 1179, column: 17, scope: !3132)
!3134 = !DILocation(line: 1179, column: 27, scope: !3132)
!3135 = !DILocation(line: 1179, column: 11, scope: !3132)
!3136 = !DILocation(line: 1179, column: 7, scope: !3132)
!3137 = !DILocation(line: 1179, column: 34, scope: !3138)
!3138 = distinct !DILexicalBlock(scope: !3132, file: !3, line: 1179, column: 2)
!3139 = !DILocation(line: 1179, column: 2, scope: !3132)
!3140 = !DILocation(line: 1180, column: 7, scope: !3141)
!3141 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 1180, column: 7)
!3142 = distinct !DILexicalBlock(scope: !3138, file: !3, line: 1179, column: 56)
!3143 = !DILocation(line: 1180, column: 12, scope: !3141)
!3144 = !DILocation(line: 1180, column: 17, scope: !3141)
!3145 = !DILocation(line: 1180, column: 26, scope: !3141)
!3146 = !DILocation(line: 1180, column: 31, scope: !3141)
!3147 = !DILocation(line: 1180, column: 36, scope: !3141)
!3148 = !DILocation(line: 1180, column: 42, scope: !3141)
!3149 = !DILocation(line: 1180, column: 47, scope: !3141)
!3150 = !DILocation(line: 1180, column: 50, scope: !3141)
!3151 = !DILocation(line: 1180, column: 55, scope: !3141)
!3152 = !DILocation(line: 1180, column: 60, scope: !3141)
!3153 = !DILocation(line: 1180, column: 7, scope: !3142)
!3154 = !DILocation(line: 1181, column: 4, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3141, file: !3, line: 1180, column: 73)
!3156 = !DILocation(line: 1181, column: 9, scope: !3155)
!3157 = !DILocation(line: 1181, column: 14, scope: !3155)
!3158 = !DILocation(line: 1182, column: 34, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1182, column: 8)
!3160 = !DILocation(line: 1182, column: 38, scope: !3159)
!3161 = !DILocation(line: 1182, column: 48, scope: !3159)
!3162 = !DILocation(line: 1182, column: 8, scope: !3159)
!3163 = !DILocation(line: 1182, column: 8, scope: !3155)
!3164 = !DILocation(line: 1183, column: 31, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !3159, file: !3, line: 1182, column: 55)
!3166 = !DILocation(line: 1183, column: 35, scope: !3165)
!3167 = !DILocation(line: 1183, column: 45, scope: !3165)
!3168 = !DILocation(line: 1183, column: 50, scope: !3165)
!3169 = !DILocation(line: 1183, column: 5, scope: !3165)
!3170 = !DILocation(line: 1184, column: 4, scope: !3165)
!3171 = !DILocation(line: 1185, column: 3, scope: !3155)
!3172 = !DILocation(line: 1186, column: 12, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !3141, file: !3, line: 1186, column: 12)
!3174 = !DILocation(line: 1186, column: 17, scope: !3173)
!3175 = !DILocation(line: 1186, column: 22, scope: !3173)
!3176 = !DILocation(line: 1186, column: 12, scope: !3141)
!3177 = !DILocation(line: 1187, column: 8, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3179, file: !3, line: 1187, column: 8)
!3179 = distinct !DILexicalBlock(scope: !3173, file: !3, line: 1186, column: 41)
!3180 = !DILocation(line: 1187, column: 13, scope: !3178)
!3181 = !DILocation(line: 1187, column: 18, scope: !3178)
!3182 = !DILocation(line: 1187, column: 22, scope: !3178)
!3183 = !DILocation(line: 1187, column: 27, scope: !3178)
!3184 = !DILocation(line: 1187, column: 33, scope: !3178)
!3185 = !DILocation(line: 1187, column: 38, scope: !3178)
!3186 = !DILocation(line: 1187, column: 8, scope: !3179)
!3187 = !DILocation(line: 1188, column: 23, scope: !3178)
!3188 = !DILocation(line: 1188, column: 30, scope: !3178)
!3189 = !DILocation(line: 1188, column: 5, scope: !3178)
!3190 = !DILocation(line: 1189, column: 13, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 1189, column: 13)
!3192 = !DILocation(line: 1189, column: 18, scope: !3191)
!3193 = !DILocation(line: 1189, column: 23, scope: !3191)
!3194 = !DILocation(line: 1189, column: 27, scope: !3191)
!3195 = !DILocation(line: 1189, column: 32, scope: !3191)
!3196 = !DILocation(line: 1189, column: 38, scope: !3191)
!3197 = !DILocation(line: 1189, column: 43, scope: !3191)
!3198 = !DILocation(line: 1189, column: 13, scope: !3178)
!3199 = !DILocation(line: 1190, column: 23, scope: !3191)
!3200 = !DILocation(line: 1190, column: 30, scope: !3191)
!3201 = !DILocation(line: 1190, column: 5, scope: !3191)
!3202 = !DILocation(line: 1191, column: 13, scope: !3203)
!3203 = distinct !DILexicalBlock(scope: !3191, file: !3, line: 1191, column: 13)
!3204 = !DILocation(line: 1191, column: 18, scope: !3203)
!3205 = !DILocation(line: 1191, column: 23, scope: !3203)
!3206 = !DILocation(line: 1191, column: 27, scope: !3203)
!3207 = !DILocation(line: 1191, column: 32, scope: !3203)
!3208 = !DILocation(line: 1191, column: 38, scope: !3203)
!3209 = !DILocation(line: 1191, column: 43, scope: !3203)
!3210 = !DILocation(line: 1191, column: 13, scope: !3191)
!3211 = !DILocation(line: 1192, column: 23, scope: !3203)
!3212 = !DILocation(line: 1192, column: 30, scope: !3203)
!3213 = !DILocation(line: 1192, column: 5, scope: !3203)
!3214 = !DILocation(line: 1193, column: 3, scope: !3179)
!3215 = !DILocation(line: 1194, column: 2, scope: !3142)
!3216 = !DILocation(line: 1179, column: 45, scope: !3138)
!3217 = !DILocation(line: 1179, column: 50, scope: !3138)
!3218 = !DILocation(line: 1179, column: 43, scope: !3138)
!3219 = !DILocation(line: 1179, column: 2, scope: !3138)
!3220 = distinct !{!3220, !3139, !3221}
!3221 = !DILocation(line: 1194, column: 2, scope: !3132)
!3222 = !DILocation(line: 1197, column: 21, scope: !3028)
!3223 = !DILocation(line: 1197, column: 2, scope: !3028)
!3224 = !DILocation(line: 1199, column: 24, scope: !3028)
!3225 = !DILocation(line: 1199, column: 52, scope: !3028)
!3226 = !DILocation(line: 1199, column: 2, scope: !3028)
!3227 = !DILocation(line: 1201, column: 2, scope: !3028)
!3228 = distinct !DISubprogram(name: "SEQUENCER_OT_slip", scope: !3, file: !3, line: 1565, type: !2598, scopeLine: 1566, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3229 = !DILocalVariable(name: "ot", arg: 1, scope: !3228, file: !3, line: 1565, type: !2600)
!3230 = !DILocation(line: 1565, column: 47, scope: !3228)
!3231 = !DILocation(line: 1568, column: 2, scope: !3228)
!3232 = !DILocation(line: 1568, column: 6, scope: !3228)
!3233 = !DILocation(line: 1568, column: 11, scope: !3228)
!3234 = !DILocation(line: 1569, column: 2, scope: !3228)
!3235 = !DILocation(line: 1569, column: 6, scope: !3228)
!3236 = !DILocation(line: 1569, column: 13, scope: !3228)
!3237 = !DILocation(line: 1570, column: 2, scope: !3228)
!3238 = !DILocation(line: 1570, column: 6, scope: !3228)
!3239 = !DILocation(line: 1570, column: 18, scope: !3228)
!3240 = !DILocation(line: 1573, column: 2, scope: !3228)
!3241 = !DILocation(line: 1573, column: 6, scope: !3228)
!3242 = !DILocation(line: 1573, column: 13, scope: !3228)
!3243 = !DILocation(line: 1574, column: 2, scope: !3228)
!3244 = !DILocation(line: 1574, column: 6, scope: !3228)
!3245 = !DILocation(line: 1574, column: 12, scope: !3228)
!3246 = !DILocation(line: 1575, column: 2, scope: !3228)
!3247 = !DILocation(line: 1575, column: 6, scope: !3228)
!3248 = !DILocation(line: 1575, column: 11, scope: !3228)
!3249 = !DILocation(line: 1576, column: 2, scope: !3228)
!3250 = !DILocation(line: 1576, column: 6, scope: !3228)
!3251 = !DILocation(line: 1576, column: 11, scope: !3228)
!3252 = !DILocation(line: 1579, column: 2, scope: !3228)
!3253 = !DILocation(line: 1579, column: 6, scope: !3228)
!3254 = !DILocation(line: 1579, column: 11, scope: !3228)
!3255 = !DILocation(line: 1581, column: 14, scope: !3228)
!3256 = !DILocation(line: 1581, column: 18, scope: !3228)
!3257 = !DILocation(line: 1581, column: 2, scope: !3228)
!3258 = !DILocation(line: 1583, column: 1, scope: !3228)
!3259 = distinct !DISubprogram(name: "sequencer_slip_invoke", scope: !3, file: !3, line: 1320, type: !3001, scopeLine: 1321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3260 = !DILocalVariable(name: "C", arg: 1, scope: !3259, file: !3, line: 1320, type: !2329)
!3261 = !DILocation(line: 1320, column: 44, scope: !3259)
!3262 = !DILocalVariable(name: "op", arg: 2, scope: !3259, file: !3, line: 1320, type: !2750)
!3263 = !DILocation(line: 1320, column: 59, scope: !3259)
!3264 = !DILocalVariable(name: "event", arg: 3, scope: !3259, file: !3, line: 1320, type: !3003)
!3265 = !DILocation(line: 1320, column: 78, scope: !3259)
!3266 = !DILocalVariable(name: "data", scope: !3259, file: !3, line: 1322, type: !241)
!3267 = !DILocation(line: 1322, column: 12, scope: !3259)
!3268 = !DILocalVariable(name: "scene", scope: !3259, file: !3, line: 1323, type: !1540)
!3269 = !DILocation(line: 1323, column: 9, scope: !3259)
!3270 = !DILocation(line: 1323, column: 32, scope: !3259)
!3271 = !DILocation(line: 1323, column: 17, scope: !3259)
!3272 = !DILocalVariable(name: "ed", scope: !3259, file: !3, line: 1324, type: !1843)
!3273 = !DILocation(line: 1324, column: 11, scope: !3259)
!3274 = !DILocation(line: 1324, column: 42, scope: !3259)
!3275 = !DILocation(line: 1324, column: 16, scope: !3259)
!3276 = !DILocalVariable(name: "mouseloc", scope: !3259, file: !3, line: 1325, type: !250)
!3277 = !DILocation(line: 1325, column: 8, scope: !3259)
!3278 = !DILocalVariable(name: "num_seq", scope: !3259, file: !3, line: 1326, type: !15)
!3279 = !DILocation(line: 1326, column: 6, scope: !3259)
!3280 = !DILocalVariable(name: "i", scope: !3259, file: !3, line: 1326, type: !15)
!3281 = !DILocation(line: 1326, column: 15, scope: !3259)
!3282 = !DILocalVariable(name: "v2d", scope: !3259, file: !3, line: 1327, type: !2037)
!3283 = !DILocation(line: 1327, column: 10, scope: !3259)
!3284 = !DILocation(line: 1327, column: 38, scope: !3259)
!3285 = !DILocation(line: 1327, column: 16, scope: !3259)
!3286 = !DILocation(line: 1330, column: 37, scope: !3259)
!3287 = !DILocation(line: 1330, column: 41, scope: !3259)
!3288 = !DILocation(line: 1330, column: 12, scope: !3259)
!3289 = !DILocation(line: 1330, column: 10, scope: !3259)
!3290 = !DILocation(line: 1332, column: 6, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1332, column: 6)
!3292 = !DILocation(line: 1332, column: 14, scope: !3291)
!3293 = !DILocation(line: 1332, column: 6, scope: !3259)
!3294 = !DILocation(line: 1333, column: 3, scope: !3291)
!3295 = !DILocation(line: 1335, column: 26, scope: !3259)
!3296 = !DILocation(line: 1335, column: 9, scope: !3259)
!3297 = !DILocation(line: 1335, column: 13, scope: !3259)
!3298 = !DILocation(line: 1335, column: 24, scope: !3259)
!3299 = !DILocation(line: 1335, column: 7, scope: !3259)
!3300 = !DILocation(line: 1336, column: 13, scope: !3259)
!3301 = !DILocation(line: 1336, column: 25, scope: !3259)
!3302 = !DILocation(line: 1336, column: 33, scope: !3259)
!3303 = !DILocation(line: 1336, column: 2, scope: !3259)
!3304 = !DILocation(line: 1336, column: 8, scope: !3259)
!3305 = !DILocation(line: 1336, column: 11, scope: !3259)
!3306 = !DILocation(line: 1337, column: 20, scope: !3259)
!3307 = !DILocation(line: 1337, column: 32, scope: !3259)
!3308 = !DILocation(line: 1337, column: 40, scope: !3259)
!3309 = !DILocation(line: 1337, column: 2, scope: !3259)
!3310 = !DILocation(line: 1337, column: 8, scope: !3259)
!3311 = !DILocation(line: 1337, column: 18, scope: !3259)
!3312 = !DILocation(line: 1338, column: 15, scope: !3259)
!3313 = !DILocation(line: 1338, column: 27, scope: !3259)
!3314 = !DILocation(line: 1338, column: 35, scope: !3259)
!3315 = !DILocation(line: 1338, column: 2, scope: !3259)
!3316 = !DILocation(line: 1338, column: 8, scope: !3259)
!3317 = !DILocation(line: 1338, column: 13, scope: !3259)
!3318 = !DILocation(line: 1339, column: 18, scope: !3259)
!3319 = !DILocation(line: 1339, column: 2, scope: !3259)
!3320 = !DILocation(line: 1339, column: 8, scope: !3259)
!3321 = !DILocation(line: 1339, column: 16, scope: !3259)
!3322 = !DILocation(line: 1341, column: 25, scope: !3259)
!3323 = !DILocation(line: 1341, column: 29, scope: !3259)
!3324 = !DILocation(line: 1341, column: 39, scope: !3259)
!3325 = !DILocation(line: 1341, column: 45, scope: !3259)
!3326 = !DILocation(line: 1341, column: 56, scope: !3259)
!3327 = !DILocation(line: 1341, column: 62, scope: !3259)
!3328 = !DILocation(line: 1341, column: 2, scope: !3259)
!3329 = !DILocation(line: 1343, column: 9, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3259, file: !3, line: 1343, column: 2)
!3331 = !DILocation(line: 1343, column: 7, scope: !3330)
!3332 = !DILocation(line: 1343, column: 14, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3330, file: !3, line: 1343, column: 2)
!3334 = !DILocation(line: 1343, column: 18, scope: !3333)
!3335 = !DILocation(line: 1343, column: 16, scope: !3333)
!3336 = !DILocation(line: 1343, column: 2, scope: !3330)
!3337 = !DILocation(line: 1344, column: 19, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 1343, column: 32)
!3339 = !DILocation(line: 1344, column: 25, scope: !3338)
!3340 = !DILocation(line: 1344, column: 30, scope: !3338)
!3341 = !DILocation(line: 1344, column: 28, scope: !3338)
!3342 = !DILocation(line: 1344, column: 33, scope: !3338)
!3343 = !DILocation(line: 1344, column: 39, scope: !3338)
!3344 = !DILocation(line: 1344, column: 49, scope: !3338)
!3345 = !DILocation(line: 1344, column: 3, scope: !3338)
!3346 = !DILocation(line: 1345, column: 2, scope: !3338)
!3347 = !DILocation(line: 1343, column: 28, scope: !3333)
!3348 = !DILocation(line: 1343, column: 2, scope: !3333)
!3349 = distinct !{!3349, !3336, !3350}
!3350 = !DILocation(line: 1345, column: 2, scope: !3330)
!3351 = !DILocation(line: 1347, column: 27, scope: !3259)
!3352 = !DILocation(line: 1347, column: 32, scope: !3259)
!3353 = !DILocation(line: 1347, column: 39, scope: !3259)
!3354 = !DILocation(line: 1347, column: 48, scope: !3259)
!3355 = !DILocation(line: 1347, column: 55, scope: !3259)
!3356 = !DILocation(line: 1347, column: 65, scope: !3259)
!3357 = !DILocation(line: 1347, column: 79, scope: !3259)
!3358 = !DILocation(line: 1347, column: 2, scope: !3259)
!3359 = !DILocation(line: 1349, column: 17, scope: !3259)
!3360 = !DILocation(line: 1349, column: 23, scope: !3259)
!3361 = !DILocation(line: 1349, column: 35, scope: !3259)
!3362 = !DILocation(line: 1349, column: 42, scope: !3259)
!3363 = !DILocation(line: 1349, column: 2, scope: !3259)
!3364 = !DILocation(line: 1350, column: 13, scope: !3259)
!3365 = !DILocation(line: 1350, column: 19, scope: !3259)
!3366 = !DILocation(line: 1350, column: 34, scope: !3259)
!3367 = !DILocation(line: 1350, column: 2, scope: !3259)
!3368 = !DILocation(line: 1352, column: 2, scope: !3259)
!3369 = !DILocation(line: 1352, column: 8, scope: !3259)
!3370 = !DILocation(line: 1352, column: 13, scope: !3259)
!3371 = !DILocation(line: 1354, column: 29, scope: !3259)
!3372 = !DILocation(line: 1354, column: 32, scope: !3259)
!3373 = !DILocation(line: 1354, column: 2, scope: !3259)
!3374 = !DILocation(line: 1356, column: 2, scope: !3259)
!3375 = !DILocation(line: 1357, column: 1, scope: !3259)
!3376 = distinct !DISubprogram(name: "sequencer_slip_modal", scope: !3, file: !3, line: 1456, type: !3001, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3377 = !DILocalVariable(name: "C", arg: 1, scope: !3376, file: !3, line: 1456, type: !2329)
!3378 = !DILocation(line: 1456, column: 43, scope: !3376)
!3379 = !DILocalVariable(name: "op", arg: 2, scope: !3376, file: !3, line: 1456, type: !2750)
!3380 = !DILocation(line: 1456, column: 58, scope: !3376)
!3381 = !DILocalVariable(name: "event", arg: 3, scope: !3376, file: !3, line: 1456, type: !3003)
!3382 = !DILocation(line: 1456, column: 77, scope: !3376)
!3383 = !DILocalVariable(name: "scene", scope: !3376, file: !3, line: 1458, type: !1540)
!3384 = !DILocation(line: 1458, column: 9, scope: !3376)
!3385 = !DILocation(line: 1458, column: 32, scope: !3376)
!3386 = !DILocation(line: 1458, column: 17, scope: !3376)
!3387 = !DILocalVariable(name: "data", scope: !3376, file: !3, line: 1459, type: !241)
!3388 = !DILocation(line: 1459, column: 12, scope: !3376)
!3389 = !DILocation(line: 1459, column: 31, scope: !3376)
!3390 = !DILocation(line: 1459, column: 35, scope: !3376)
!3391 = !DILocation(line: 1459, column: 19, scope: !3376)
!3392 = !DILocalVariable(name: "sa", scope: !3376, file: !3, line: 1460, type: !3393)
!3393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3394, size: 64)
!3394 = !DIDerivedType(tag: DW_TAG_typedef, name: "ScrArea", file: !204, line: 228, baseType: !3395)
!3395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ScrArea", file: !204, line: 203, size: 1280, elements: !3396)
!3396 = !{!3397, !3399, !3400, !3417, !3418, !3419, !3420, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3437, !3438, !3439, !3440}
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3395, file: !204, line: 204, baseType: !3398, size: 64)
!3398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3395, size: 64)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3395, file: !204, line: 204, baseType: !3398, size: 64, offset: 64)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "v1", scope: !3395, file: !204, line: 206, baseType: !3401, size: 64, offset: 128)
!3401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3402, size: 64)
!3402 = !DIDerivedType(tag: DW_TAG_typedef, name: "ScrVert", file: !204, line: 87, baseType: !3403)
!3403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ScrVert", file: !204, line: 82, size: 256, elements: !3404)
!3404 = !{!3405, !3407, !3408, !3409, !3415, !3416}
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3403, file: !204, line: 83, baseType: !3406, size: 64)
!3406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3403, size: 64)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3403, file: !204, line: 83, baseType: !3406, size: 64, offset: 64)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "newv", scope: !3403, file: !204, line: 83, baseType: !3406, size: 64, offset: 128)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3403, file: !204, line: 84, baseType: !3410, size: 32, offset: 192)
!3410 = !DIDerivedType(tag: DW_TAG_typedef, name: "vec2s", file: !525, line: 43, baseType: !3411)
!3411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vec2s", file: !525, line: 41, size: 32, elements: !3412)
!3412 = !{!3413, !3414}
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !3411, file: !525, line: 42, baseType: !299, size: 16)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !3411, file: !525, line: 42, baseType: !299, size: 16, offset: 16)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3403, file: !204, line: 86, baseType: !299, size: 16, offset: 224)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "editflag", scope: !3403, file: !204, line: 86, baseType: !299, size: 16, offset: 240)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "v2", scope: !3395, file: !204, line: 206, baseType: !3401, size: 64, offset: 192)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "v3", scope: !3395, file: !204, line: 206, baseType: !3401, size: 64, offset: 256)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "v4", scope: !3395, file: !204, line: 206, baseType: !3401, size: 64, offset: 320)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "full", scope: !3395, file: !204, line: 207, baseType: !3421, size: 64, offset: 384)
!3421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3422, size: 64)
!3422 = !DIDerivedType(tag: DW_TAG_typedef, name: "bScreen", file: !204, line: 80, baseType: !1613)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "totrct", scope: !3395, file: !204, line: 209, baseType: !1082, size: 128, offset: 448)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "spacetype", scope: !3395, file: !204, line: 211, baseType: !280, size: 8, offset: 576)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "butspacetype", scope: !3395, file: !204, line: 211, baseType: !280, size: 8, offset: 584)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "winx", scope: !3395, file: !204, line: 212, baseType: !299, size: 16, offset: 592)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "winy", scope: !3395, file: !204, line: 212, baseType: !299, size: 16, offset: 608)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "headertype", scope: !3395, file: !204, line: 214, baseType: !299, size: 16, offset: 624)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "do_refresh", scope: !3395, file: !204, line: 215, baseType: !299, size: 16, offset: 640)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3395, file: !204, line: 216, baseType: !299, size: 16, offset: 656)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "region_active_win", scope: !3395, file: !204, line: 217, baseType: !299, size: 16, offset: 672)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !3395, file: !204, line: 219, baseType: !280, size: 8, offset: 688)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !3395, file: !204, line: 219, baseType: !280, size: 8, offset: 696)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3395, file: !204, line: 221, baseType: !3435, size: 64, offset: 704)
!3435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3436, size: 64)
!3436 = !DICompositeType(tag: DW_TAG_structure_type, name: "SpaceType", file: !204, line: 39, flags: DIFlagFwdDecl)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "spacedata", scope: !3395, file: !204, line: 223, baseType: !443, size: 128, offset: 768)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "regionbase", scope: !3395, file: !204, line: 224, baseType: !443, size: 128, offset: 896)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !3395, file: !204, line: 225, baseType: !443, size: 128, offset: 1024)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "actionzones", scope: !3395, file: !204, line: 227, baseType: !443, size: 128, offset: 1152)
!3441 = !DILocation(line: 1460, column: 11, scope: !3376)
!3442 = !DILocation(line: 1460, column: 28, scope: !3376)
!3443 = !DILocation(line: 1460, column: 16, scope: !3376)
!3444 = !DILocation(line: 1462, column: 10, scope: !3376)
!3445 = !DILocation(line: 1462, column: 17, scope: !3376)
!3446 = !DILocation(line: 1462, column: 2, scope: !3376)
!3447 = !DILocalVariable(name: "mouseloc", scope: !3448, file: !3, line: 1465, type: !250)
!3448 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1464, column: 3)
!3449 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 1462, column: 23)
!3450 = !DILocation(line: 1465, column: 10, scope: !3448)
!3451 = !DILocalVariable(name: "offset", scope: !3448, file: !3, line: 1466, type: !15)
!3452 = !DILocation(line: 1466, column: 8, scope: !3448)
!3453 = !DILocalVariable(name: "mouse_x", scope: !3448, file: !3, line: 1467, type: !15)
!3454 = !DILocation(line: 1467, column: 8, scope: !3448)
!3455 = !DILocalVariable(name: "v2d", scope: !3448, file: !3, line: 1468, type: !2037)
!3456 = !DILocation(line: 1468, column: 12, scope: !3448)
!3457 = !DILocation(line: 1468, column: 40, scope: !3448)
!3458 = !DILocation(line: 1468, column: 18, scope: !3448)
!3459 = !DILocation(line: 1470, column: 8, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 1470, column: 8)
!3461 = !DILocation(line: 1470, column: 14, scope: !3460)
!3462 = !DILocation(line: 1470, column: 8, scope: !3448)
!3463 = !DILocation(line: 1471, column: 15, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 1470, column: 20)
!3465 = !DILocation(line: 1471, column: 22, scope: !3464)
!3466 = !DILocation(line: 1471, column: 32, scope: !3464)
!3467 = !DILocation(line: 1471, column: 38, scope: !3464)
!3468 = !DILocation(line: 1471, column: 30, scope: !3464)
!3469 = !DILocation(line: 1471, column: 13, scope: !3464)
!3470 = !DILocation(line: 1472, column: 13, scope: !3464)
!3471 = !DILocation(line: 1473, column: 16, scope: !3464)
!3472 = !DILocation(line: 1473, column: 22, scope: !3464)
!3473 = !DILocation(line: 1473, column: 13, scope: !3464)
!3474 = !DILocation(line: 1474, column: 4, scope: !3464)
!3475 = !DILocation(line: 1476, column: 15, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 1475, column: 9)
!3477 = !DILocation(line: 1476, column: 22, scope: !3476)
!3478 = !DILocation(line: 1476, column: 13, scope: !3476)
!3479 = !DILocation(line: 1481, column: 29, scope: !3448)
!3480 = !DILocation(line: 1481, column: 34, scope: !3448)
!3481 = !DILocation(line: 1481, column: 47, scope: !3448)
!3482 = !DILocation(line: 1481, column: 61, scope: !3448)
!3483 = !DILocation(line: 1481, column: 4, scope: !3448)
!3484 = !DILocation(line: 1482, column: 13, scope: !3448)
!3485 = !DILocation(line: 1482, column: 27, scope: !3448)
!3486 = !DILocation(line: 1482, column: 33, scope: !3448)
!3487 = !DILocation(line: 1482, column: 25, scope: !3448)
!3488 = !DILocation(line: 1482, column: 11, scope: !3448)
!3489 = !DILocation(line: 1484, column: 16, scope: !3448)
!3490 = !DILocation(line: 1484, column: 20, scope: !3448)
!3491 = !DILocation(line: 1484, column: 35, scope: !3448)
!3492 = !DILocation(line: 1484, column: 4, scope: !3448)
!3493 = !DILocation(line: 1486, column: 8, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 1486, column: 8)
!3495 = !DILocation(line: 1486, column: 8, scope: !3448)
!3496 = !DILocalVariable(name: "msg", scope: !3497, file: !3, line: 1488, type: !3498)
!3497 = distinct !DILexicalBlock(scope: !3494, file: !3, line: 1486, column: 12)
!3498 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 320, elements: !3499)
!3499 = !{!3500}
!3500 = !DISubrange(count: 40)
!3501 = !DILocation(line: 1488, column: 10, scope: !3497)
!3502 = !DILocation(line: 1489, column: 18, scope: !3497)
!3503 = !DILocation(line: 1489, column: 57, scope: !3497)
!3504 = !DILocation(line: 1489, column: 5, scope: !3497)
!3505 = !DILocation(line: 1491, column: 25, scope: !3497)
!3506 = !DILocation(line: 1491, column: 29, scope: !3497)
!3507 = !DILocation(line: 1491, column: 5, scope: !3497)
!3508 = !DILocation(line: 1492, column: 4, scope: !3497)
!3509 = !DILocation(line: 1494, column: 35, scope: !3510)
!3510 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 1494, column: 8)
!3511 = !DILocation(line: 1494, column: 42, scope: !3510)
!3512 = !DILocation(line: 1494, column: 48, scope: !3510)
!3513 = !DILocation(line: 1494, column: 8, scope: !3510)
!3514 = !DILocation(line: 1494, column: 8, scope: !3448)
!3515 = !DILocation(line: 1495, column: 27, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3510, file: !3, line: 1494, column: 57)
!3517 = !DILocation(line: 1495, column: 55, scope: !3516)
!3518 = !DILocation(line: 1495, column: 5, scope: !3516)
!3519 = !DILocation(line: 1496, column: 4, scope: !3516)
!3520 = !DILocation(line: 1497, column: 4, scope: !3448)
!3521 = !DILocation(line: 1502, column: 4, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1501, column: 3)
!3523 = !DILocation(line: 1502, column: 14, scope: !3522)
!3524 = !DILocation(line: 1502, column: 20, scope: !3522)
!3525 = !DILocation(line: 1503, column: 4, scope: !3522)
!3526 = !DILocation(line: 1503, column: 14, scope: !3522)
!3527 = !DILocation(line: 1503, column: 20, scope: !3522)
!3528 = !DILocation(line: 1504, column: 4, scope: !3522)
!3529 = !DILocation(line: 1504, column: 14, scope: !3522)
!3530 = !DILocation(line: 1504, column: 20, scope: !3522)
!3531 = !DILocation(line: 1505, column: 4, scope: !3522)
!3532 = !DILocation(line: 1505, column: 14, scope: !3522)
!3533 = !DILocation(line: 1506, column: 4, scope: !3522)
!3534 = !DILocation(line: 1506, column: 8, scope: !3522)
!3535 = !DILocation(line: 1506, column: 19, scope: !3522)
!3536 = !DILocation(line: 1507, column: 8, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 1507, column: 8)
!3538 = !DILocation(line: 1507, column: 8, scope: !3522)
!3539 = !DILocation(line: 1508, column: 25, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 1507, column: 12)
!3541 = !DILocation(line: 1508, column: 5, scope: !3540)
!3542 = !DILocation(line: 1509, column: 4, scope: !3540)
!3543 = !DILocation(line: 1510, column: 26, scope: !3522)
!3544 = !DILocation(line: 1510, column: 54, scope: !3522)
!3545 = !DILocation(line: 1510, column: 4, scope: !3522)
!3546 = !DILocation(line: 1511, column: 4, scope: !3522)
!3547 = !DILocalVariable(name: "i", scope: !3548, file: !3, line: 1517, type: !15)
!3548 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1516, column: 3)
!3549 = !DILocation(line: 1517, column: 8, scope: !3548)
!3550 = !DILocalVariable(name: "ed", scope: !3548, file: !3, line: 1518, type: !1843)
!3551 = !DILocation(line: 1518, column: 13, scope: !3548)
!3552 = !DILocation(line: 1518, column: 44, scope: !3548)
!3553 = !DILocation(line: 1518, column: 18, scope: !3548)
!3554 = !DILocation(line: 1520, column: 11, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1520, column: 4)
!3556 = !DILocation(line: 1520, column: 9, scope: !3555)
!3557 = !DILocation(line: 1520, column: 16, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 1520, column: 4)
!3559 = !DILocation(line: 1520, column: 20, scope: !3558)
!3560 = !DILocation(line: 1520, column: 26, scope: !3558)
!3561 = !DILocation(line: 1520, column: 18, scope: !3558)
!3562 = !DILocation(line: 1520, column: 4, scope: !3555)
!3563 = !DILocation(line: 1521, column: 22, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3558, file: !3, line: 1520, column: 40)
!3565 = !DILocation(line: 1521, column: 28, scope: !3564)
!3566 = !DILocation(line: 1521, column: 33, scope: !3564)
!3567 = !DILocation(line: 1521, column: 31, scope: !3564)
!3568 = !DILocation(line: 1521, column: 36, scope: !3564)
!3569 = !DILocation(line: 1521, column: 42, scope: !3564)
!3570 = !DILocation(line: 1521, column: 52, scope: !3564)
!3571 = !DILocation(line: 1521, column: 5, scope: !3564)
!3572 = !DILocation(line: 1522, column: 4, scope: !3564)
!3573 = !DILocation(line: 1520, column: 36, scope: !3558)
!3574 = !DILocation(line: 1520, column: 4, scope: !3558)
!3575 = distinct !{!3575, !3562, !3576}
!3576 = !DILocation(line: 1522, column: 4, scope: !3555)
!3577 = !DILocation(line: 1524, column: 11, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1524, column: 4)
!3579 = !DILocation(line: 1524, column: 9, scope: !3578)
!3580 = !DILocation(line: 1524, column: 16, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3578, file: !3, line: 1524, column: 4)
!3582 = !DILocation(line: 1524, column: 20, scope: !3581)
!3583 = !DILocation(line: 1524, column: 26, scope: !3581)
!3584 = !DILocation(line: 1524, column: 18, scope: !3581)
!3585 = !DILocation(line: 1524, column: 4, scope: !3578)
!3586 = !DILocalVariable(name: "seq", scope: !3587, file: !3, line: 1525, type: !269)
!3587 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 1524, column: 40)
!3588 = !DILocation(line: 1525, column: 15, scope: !3587)
!3589 = !DILocation(line: 1525, column: 21, scope: !3587)
!3590 = !DILocation(line: 1525, column: 27, scope: !3587)
!3591 = !DILocation(line: 1525, column: 37, scope: !3587)
!3592 = !DILocation(line: 1526, column: 34, scope: !3587)
!3593 = !DILocation(line: 1526, column: 41, scope: !3587)
!3594 = !DILocation(line: 1526, column: 5, scope: !3587)
!3595 = !DILocation(line: 1527, column: 23, scope: !3587)
!3596 = !DILocation(line: 1527, column: 30, scope: !3587)
!3597 = !DILocation(line: 1527, column: 5, scope: !3587)
!3598 = !DILocation(line: 1528, column: 4, scope: !3587)
!3599 = !DILocation(line: 1524, column: 36, scope: !3581)
!3600 = !DILocation(line: 1524, column: 4, scope: !3581)
!3601 = distinct !{!3601, !3585, !3602}
!3602 = !DILocation(line: 1528, column: 4, scope: !3578)
!3603 = !DILocation(line: 1530, column: 4, scope: !3548)
!3604 = !DILocation(line: 1530, column: 14, scope: !3548)
!3605 = !DILocation(line: 1530, column: 20, scope: !3548)
!3606 = !DILocation(line: 1531, column: 4, scope: !3548)
!3607 = !DILocation(line: 1531, column: 14, scope: !3548)
!3608 = !DILocation(line: 1531, column: 20, scope: !3548)
!3609 = !DILocation(line: 1532, column: 4, scope: !3548)
!3610 = !DILocation(line: 1532, column: 14, scope: !3548)
!3611 = !DILocation(line: 1532, column: 20, scope: !3548)
!3612 = !DILocation(line: 1533, column: 4, scope: !3548)
!3613 = !DILocation(line: 1533, column: 14, scope: !3548)
!3614 = !DILocation(line: 1534, column: 4, scope: !3548)
!3615 = !DILocation(line: 1534, column: 8, scope: !3548)
!3616 = !DILocation(line: 1534, column: 19, scope: !3548)
!3617 = !DILocation(line: 1536, column: 26, scope: !3548)
!3618 = !DILocation(line: 1536, column: 54, scope: !3548)
!3619 = !DILocation(line: 1536, column: 4, scope: !3548)
!3620 = !DILocation(line: 1538, column: 29, scope: !3548)
!3621 = !DILocation(line: 1538, column: 37, scope: !3548)
!3622 = !DILocation(line: 1538, column: 41, scope: !3548)
!3623 = !DILocation(line: 1538, column: 4, scope: !3548)
!3624 = !DILocation(line: 1540, column: 8, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1540, column: 8)
!3626 = !DILocation(line: 1540, column: 8, scope: !3548)
!3627 = !DILocation(line: 1541, column: 25, scope: !3628)
!3628 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 1540, column: 12)
!3629 = !DILocation(line: 1541, column: 5, scope: !3628)
!3630 = !DILocation(line: 1542, column: 4, scope: !3628)
!3631 = !DILocation(line: 1544, column: 4, scope: !3548)
!3632 = !DILocation(line: 1549, column: 8, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1549, column: 8)
!3634 = !DILocation(line: 1549, column: 15, scope: !3633)
!3635 = !DILocation(line: 1549, column: 19, scope: !3633)
!3636 = !DILocation(line: 1549, column: 8, scope: !3449)
!3637 = !DILocation(line: 1550, column: 5, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3633, file: !3, line: 1549, column: 32)
!3639 = !DILocation(line: 1550, column: 11, scope: !3638)
!3640 = !DILocation(line: 1550, column: 16, scope: !3638)
!3641 = !DILocation(line: 1551, column: 25, scope: !3638)
!3642 = !DILocation(line: 1551, column: 32, scope: !3638)
!3643 = !DILocation(line: 1551, column: 5, scope: !3638)
!3644 = !DILocation(line: 1551, column: 11, scope: !3638)
!3645 = !DILocation(line: 1551, column: 23, scope: !3638)
!3646 = !DILocation(line: 1552, column: 4, scope: !3638)
!3647 = !DILocation(line: 1553, column: 13, scope: !3648)
!3648 = distinct !DILexicalBlock(scope: !3633, file: !3, line: 1553, column: 13)
!3649 = !DILocation(line: 1553, column: 20, scope: !3648)
!3650 = !DILocation(line: 1553, column: 24, scope: !3648)
!3651 = !DILocation(line: 1553, column: 13, scope: !3633)
!3652 = !DILocation(line: 1554, column: 5, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3648, file: !3, line: 1553, column: 39)
!3654 = !DILocation(line: 1554, column: 11, scope: !3653)
!3655 = !DILocation(line: 1554, column: 16, scope: !3653)
!3656 = !DILocation(line: 1555, column: 4, scope: !3653)
!3657 = !DILocation(line: 1556, column: 4, scope: !3449)
!3658 = !DILocation(line: 1559, column: 4, scope: !3449)
!3659 = !DILocation(line: 1562, column: 2, scope: !3376)
!3660 = !DILocation(line: 1563, column: 1, scope: !3376)
!3661 = distinct !DISubprogram(name: "sequencer_slip_exec", scope: !3, file: !3, line: 1418, type: !2748, scopeLine: 1419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3662 = !DILocalVariable(name: "C", arg: 1, scope: !3661, file: !3, line: 1418, type: !2329)
!3663 = !DILocation(line: 1418, column: 42, scope: !3661)
!3664 = !DILocalVariable(name: "op", arg: 2, scope: !3661, file: !3, line: 1418, type: !2750)
!3665 = !DILocation(line: 1418, column: 57, scope: !3661)
!3666 = !DILocalVariable(name: "data", scope: !3661, file: !3, line: 1420, type: !241)
!3667 = !DILocation(line: 1420, column: 12, scope: !3661)
!3668 = !DILocalVariable(name: "scene", scope: !3661, file: !3, line: 1421, type: !1540)
!3669 = !DILocation(line: 1421, column: 9, scope: !3661)
!3670 = !DILocation(line: 1421, column: 32, scope: !3661)
!3671 = !DILocation(line: 1421, column: 17, scope: !3661)
!3672 = !DILocalVariable(name: "ed", scope: !3661, file: !3, line: 1422, type: !1843)
!3673 = !DILocation(line: 1422, column: 11, scope: !3661)
!3674 = !DILocation(line: 1422, column: 42, scope: !3661)
!3675 = !DILocation(line: 1422, column: 16, scope: !3661)
!3676 = !DILocalVariable(name: "num_seq", scope: !3661, file: !3, line: 1423, type: !15)
!3677 = !DILocation(line: 1423, column: 6, scope: !3661)
!3678 = !DILocalVariable(name: "i", scope: !3661, file: !3, line: 1423, type: !15)
!3679 = !DILocation(line: 1423, column: 15, scope: !3661)
!3680 = !DILocalVariable(name: "offset", scope: !3661, file: !3, line: 1424, type: !15)
!3681 = !DILocation(line: 1424, column: 6, scope: !3661)
!3682 = !DILocation(line: 1424, column: 27, scope: !3661)
!3683 = !DILocation(line: 1424, column: 31, scope: !3661)
!3684 = !DILocation(line: 1424, column: 15, scope: !3661)
!3685 = !DILocalVariable(name: "success", scope: !3661, file: !3, line: 1425, type: !605)
!3686 = !DILocation(line: 1425, column: 7, scope: !3661)
!3687 = !DILocation(line: 1428, column: 37, scope: !3661)
!3688 = !DILocation(line: 1428, column: 41, scope: !3661)
!3689 = !DILocation(line: 1428, column: 12, scope: !3661)
!3690 = !DILocation(line: 1428, column: 10, scope: !3661)
!3691 = !DILocation(line: 1430, column: 6, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 1430, column: 6)
!3693 = !DILocation(line: 1430, column: 14, scope: !3692)
!3694 = !DILocation(line: 1430, column: 6, scope: !3661)
!3695 = !DILocation(line: 1431, column: 3, scope: !3692)
!3696 = !DILocation(line: 1433, column: 26, scope: !3661)
!3697 = !DILocation(line: 1433, column: 9, scope: !3661)
!3698 = !DILocation(line: 1433, column: 13, scope: !3661)
!3699 = !DILocation(line: 1433, column: 24, scope: !3661)
!3700 = !DILocation(line: 1433, column: 7, scope: !3661)
!3701 = !DILocation(line: 1434, column: 13, scope: !3661)
!3702 = !DILocation(line: 1434, column: 25, scope: !3661)
!3703 = !DILocation(line: 1434, column: 33, scope: !3661)
!3704 = !DILocation(line: 1434, column: 2, scope: !3661)
!3705 = !DILocation(line: 1434, column: 8, scope: !3661)
!3706 = !DILocation(line: 1434, column: 11, scope: !3661)
!3707 = !DILocation(line: 1435, column: 20, scope: !3661)
!3708 = !DILocation(line: 1435, column: 32, scope: !3661)
!3709 = !DILocation(line: 1435, column: 40, scope: !3661)
!3710 = !DILocation(line: 1435, column: 2, scope: !3661)
!3711 = !DILocation(line: 1435, column: 8, scope: !3661)
!3712 = !DILocation(line: 1435, column: 18, scope: !3661)
!3713 = !DILocation(line: 1436, column: 15, scope: !3661)
!3714 = !DILocation(line: 1436, column: 27, scope: !3661)
!3715 = !DILocation(line: 1436, column: 35, scope: !3661)
!3716 = !DILocation(line: 1436, column: 2, scope: !3661)
!3717 = !DILocation(line: 1436, column: 8, scope: !3661)
!3718 = !DILocation(line: 1436, column: 13, scope: !3661)
!3719 = !DILocation(line: 1437, column: 18, scope: !3661)
!3720 = !DILocation(line: 1437, column: 2, scope: !3661)
!3721 = !DILocation(line: 1437, column: 8, scope: !3661)
!3722 = !DILocation(line: 1437, column: 16, scope: !3661)
!3723 = !DILocation(line: 1439, column: 25, scope: !3661)
!3724 = !DILocation(line: 1439, column: 29, scope: !3661)
!3725 = !DILocation(line: 1439, column: 39, scope: !3661)
!3726 = !DILocation(line: 1439, column: 45, scope: !3661)
!3727 = !DILocation(line: 1439, column: 56, scope: !3661)
!3728 = !DILocation(line: 1439, column: 62, scope: !3661)
!3729 = !DILocation(line: 1439, column: 2, scope: !3661)
!3730 = !DILocation(line: 1441, column: 9, scope: !3731)
!3731 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 1441, column: 2)
!3732 = !DILocation(line: 1441, column: 7, scope: !3731)
!3733 = !DILocation(line: 1441, column: 14, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3731, file: !3, line: 1441, column: 2)
!3735 = !DILocation(line: 1441, column: 18, scope: !3734)
!3736 = !DILocation(line: 1441, column: 16, scope: !3734)
!3737 = !DILocation(line: 1441, column: 2, scope: !3731)
!3738 = !DILocation(line: 1442, column: 19, scope: !3739)
!3739 = distinct !DILexicalBlock(scope: !3734, file: !3, line: 1441, column: 32)
!3740 = !DILocation(line: 1442, column: 25, scope: !3739)
!3741 = !DILocation(line: 1442, column: 30, scope: !3739)
!3742 = !DILocation(line: 1442, column: 28, scope: !3739)
!3743 = !DILocation(line: 1442, column: 33, scope: !3739)
!3744 = !DILocation(line: 1442, column: 39, scope: !3739)
!3745 = !DILocation(line: 1442, column: 49, scope: !3739)
!3746 = !DILocation(line: 1442, column: 3, scope: !3739)
!3747 = !DILocation(line: 1443, column: 2, scope: !3739)
!3748 = !DILocation(line: 1441, column: 28, scope: !3734)
!3749 = !DILocation(line: 1441, column: 2, scope: !3734)
!3750 = distinct !{!3750, !3737, !3751}
!3751 = !DILocation(line: 1443, column: 2, scope: !3731)
!3752 = !DILocation(line: 1445, column: 39, scope: !3661)
!3753 = !DILocation(line: 1445, column: 46, scope: !3661)
!3754 = !DILocation(line: 1445, column: 52, scope: !3661)
!3755 = !DILocation(line: 1445, column: 12, scope: !3661)
!3756 = !DILocation(line: 1445, column: 10, scope: !3661)
!3757 = !DILocation(line: 1447, column: 2, scope: !3661)
!3758 = !DILocation(line: 1447, column: 12, scope: !3661)
!3759 = !DILocation(line: 1447, column: 18, scope: !3661)
!3760 = !DILocation(line: 1448, column: 2, scope: !3661)
!3761 = !DILocation(line: 1448, column: 12, scope: !3661)
!3762 = !DILocation(line: 1448, column: 18, scope: !3661)
!3763 = !DILocation(line: 1449, column: 2, scope: !3661)
!3764 = !DILocation(line: 1449, column: 12, scope: !3661)
!3765 = !DILocation(line: 1449, column: 18, scope: !3661)
!3766 = !DILocation(line: 1450, column: 2, scope: !3661)
!3767 = !DILocation(line: 1450, column: 12, scope: !3661)
!3768 = !DILocation(line: 1452, column: 6, scope: !3769)
!3769 = distinct !DILexicalBlock(scope: !3661, file: !3, line: 1452, column: 6)
!3770 = !DILocation(line: 1452, column: 6, scope: !3661)
!3771 = !DILocation(line: 1452, column: 15, scope: !3769)
!3772 = !DILocation(line: 1453, column: 7, scope: !3769)
!3773 = !DILocation(line: 1454, column: 1, scope: !3661)
!3774 = distinct !DISubprogram(name: "SEQUENCER_OT_mute", scope: !3, file: !3, line: 1619, type: !2598, scopeLine: 1620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3775 = !DILocalVariable(name: "ot", arg: 1, scope: !3774, file: !3, line: 1619, type: !2600)
!3776 = !DILocation(line: 1619, column: 47, scope: !3774)
!3777 = !DILocation(line: 1622, column: 2, scope: !3774)
!3778 = !DILocation(line: 1622, column: 6, scope: !3774)
!3779 = !DILocation(line: 1622, column: 11, scope: !3774)
!3780 = !DILocation(line: 1623, column: 2, scope: !3774)
!3781 = !DILocation(line: 1623, column: 6, scope: !3774)
!3782 = !DILocation(line: 1623, column: 13, scope: !3774)
!3783 = !DILocation(line: 1624, column: 2, scope: !3774)
!3784 = !DILocation(line: 1624, column: 6, scope: !3774)
!3785 = !DILocation(line: 1624, column: 18, scope: !3774)
!3786 = !DILocation(line: 1627, column: 2, scope: !3774)
!3787 = !DILocation(line: 1627, column: 6, scope: !3774)
!3788 = !DILocation(line: 1627, column: 11, scope: !3774)
!3789 = !DILocation(line: 1628, column: 2, scope: !3774)
!3790 = !DILocation(line: 1628, column: 6, scope: !3774)
!3791 = !DILocation(line: 1628, column: 11, scope: !3774)
!3792 = !DILocation(line: 1631, column: 2, scope: !3774)
!3793 = !DILocation(line: 1631, column: 6, scope: !3774)
!3794 = !DILocation(line: 1631, column: 11, scope: !3774)
!3795 = !DILocation(line: 1633, column: 18, scope: !3774)
!3796 = !DILocation(line: 1633, column: 22, scope: !3774)
!3797 = !DILocation(line: 1633, column: 2, scope: !3774)
!3798 = !DILocation(line: 1634, column: 1, scope: !3774)
!3799 = distinct !DISubprogram(name: "sequencer_mute_exec", scope: !3, file: !3, line: 1587, type: !2748, scopeLine: 1588, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3800 = !DILocalVariable(name: "C", arg: 1, scope: !3799, file: !3, line: 1587, type: !2329)
!3801 = !DILocation(line: 1587, column: 42, scope: !3799)
!3802 = !DILocalVariable(name: "op", arg: 2, scope: !3799, file: !3, line: 1587, type: !2750)
!3803 = !DILocation(line: 1587, column: 57, scope: !3799)
!3804 = !DILocalVariable(name: "scene", scope: !3799, file: !3, line: 1589, type: !1540)
!3805 = !DILocation(line: 1589, column: 9, scope: !3799)
!3806 = !DILocation(line: 1589, column: 32, scope: !3799)
!3807 = !DILocation(line: 1589, column: 17, scope: !3799)
!3808 = !DILocalVariable(name: "ed", scope: !3799, file: !3, line: 1590, type: !1843)
!3809 = !DILocation(line: 1590, column: 11, scope: !3799)
!3810 = !DILocation(line: 1590, column: 42, scope: !3799)
!3811 = !DILocation(line: 1590, column: 16, scope: !3799)
!3812 = !DILocalVariable(name: "seq", scope: !3799, file: !3, line: 1591, type: !269)
!3813 = !DILocation(line: 1591, column: 12, scope: !3799)
!3814 = !DILocalVariable(name: "selected", scope: !3799, file: !3, line: 1592, type: !605)
!3815 = !DILocation(line: 1592, column: 7, scope: !3799)
!3816 = !DILocation(line: 1594, column: 30, scope: !3799)
!3817 = !DILocation(line: 1594, column: 34, scope: !3799)
!3818 = !DILocation(line: 1594, column: 14, scope: !3799)
!3819 = !DILocation(line: 1594, column: 13, scope: !3799)
!3820 = !DILocation(line: 1594, column: 11, scope: !3799)
!3821 = !DILocation(line: 1596, column: 13, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 1596, column: 2)
!3823 = !DILocation(line: 1596, column: 17, scope: !3822)
!3824 = !DILocation(line: 1596, column: 27, scope: !3822)
!3825 = !DILocation(line: 1596, column: 11, scope: !3822)
!3826 = !DILocation(line: 1596, column: 7, scope: !3822)
!3827 = !DILocation(line: 1596, column: 34, scope: !3828)
!3828 = distinct !DILexicalBlock(scope: !3822, file: !3, line: 1596, column: 2)
!3829 = !DILocation(line: 1596, column: 2, scope: !3822)
!3830 = !DILocation(line: 1597, column: 8, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3832, file: !3, line: 1597, column: 7)
!3832 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 1596, column: 56)
!3833 = !DILocation(line: 1597, column: 13, scope: !3831)
!3834 = !DILocation(line: 1597, column: 18, scope: !3831)
!3835 = !DILocation(line: 1597, column: 30, scope: !3831)
!3836 = !DILocation(line: 1597, column: 7, scope: !3832)
!3837 = !DILocation(line: 1598, column: 8, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3839, file: !3, line: 1598, column: 8)
!3839 = distinct !DILexicalBlock(scope: !3831, file: !3, line: 1597, column: 36)
!3840 = !DILocation(line: 1598, column: 8, scope: !3839)
!3841 = !DILocation(line: 1599, column: 9, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 1599, column: 9)
!3843 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 1598, column: 18)
!3844 = !DILocation(line: 1599, column: 14, scope: !3842)
!3845 = !DILocation(line: 1599, column: 19, scope: !3842)
!3846 = !DILocation(line: 1599, column: 9, scope: !3843)
!3847 = !DILocation(line: 1600, column: 6, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 1599, column: 29)
!3849 = !DILocation(line: 1600, column: 11, scope: !3848)
!3850 = !DILocation(line: 1600, column: 16, scope: !3848)
!3851 = !DILocation(line: 1601, column: 40, scope: !3848)
!3852 = !DILocation(line: 1601, column: 47, scope: !3848)
!3853 = !DILocation(line: 1601, column: 6, scope: !3848)
!3854 = !DILocation(line: 1602, column: 5, scope: !3848)
!3855 = !DILocation(line: 1603, column: 4, scope: !3843)
!3856 = !DILocation(line: 1605, column: 10, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3858, file: !3, line: 1605, column: 9)
!3858 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 1604, column: 9)
!3859 = !DILocation(line: 1605, column: 15, scope: !3857)
!3860 = !DILocation(line: 1605, column: 20, scope: !3857)
!3861 = !DILocation(line: 1605, column: 30, scope: !3857)
!3862 = !DILocation(line: 1605, column: 9, scope: !3858)
!3863 = !DILocation(line: 1606, column: 6, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3857, file: !3, line: 1605, column: 36)
!3865 = !DILocation(line: 1606, column: 11, scope: !3864)
!3866 = !DILocation(line: 1606, column: 16, scope: !3864)
!3867 = !DILocation(line: 1607, column: 40, scope: !3864)
!3868 = !DILocation(line: 1607, column: 47, scope: !3864)
!3869 = !DILocation(line: 1607, column: 6, scope: !3864)
!3870 = !DILocation(line: 1608, column: 5, scope: !3864)
!3871 = !DILocation(line: 1610, column: 3, scope: !3839)
!3872 = !DILocation(line: 1611, column: 2, scope: !3832)
!3873 = !DILocation(line: 1596, column: 45, scope: !3828)
!3874 = !DILocation(line: 1596, column: 50, scope: !3828)
!3875 = !DILocation(line: 1596, column: 43, scope: !3828)
!3876 = !DILocation(line: 1596, column: 2, scope: !3828)
!3877 = distinct !{!3877, !3829, !3878}
!3878 = !DILocation(line: 1611, column: 2, scope: !3822)
!3879 = !DILocation(line: 1613, column: 30, scope: !3799)
!3880 = !DILocation(line: 1613, column: 2, scope: !3799)
!3881 = !DILocation(line: 1614, column: 24, scope: !3799)
!3882 = !DILocation(line: 1614, column: 52, scope: !3799)
!3883 = !DILocation(line: 1614, column: 2, scope: !3799)
!3884 = !DILocation(line: 1616, column: 2, scope: !3799)
!3885 = distinct !DISubprogram(name: "SEQUENCER_OT_unmute", scope: !3, file: !3, line: 1670, type: !2598, scopeLine: 1671, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3886 = !DILocalVariable(name: "ot", arg: 1, scope: !3885, file: !3, line: 1670, type: !2600)
!3887 = !DILocation(line: 1670, column: 49, scope: !3885)
!3888 = !DILocation(line: 1673, column: 2, scope: !3885)
!3889 = !DILocation(line: 1673, column: 6, scope: !3885)
!3890 = !DILocation(line: 1673, column: 11, scope: !3885)
!3891 = !DILocation(line: 1674, column: 2, scope: !3885)
!3892 = !DILocation(line: 1674, column: 6, scope: !3885)
!3893 = !DILocation(line: 1674, column: 13, scope: !3885)
!3894 = !DILocation(line: 1675, column: 2, scope: !3885)
!3895 = !DILocation(line: 1675, column: 6, scope: !3885)
!3896 = !DILocation(line: 1675, column: 18, scope: !3885)
!3897 = !DILocation(line: 1678, column: 2, scope: !3885)
!3898 = !DILocation(line: 1678, column: 6, scope: !3885)
!3899 = !DILocation(line: 1678, column: 11, scope: !3885)
!3900 = !DILocation(line: 1679, column: 2, scope: !3885)
!3901 = !DILocation(line: 1679, column: 6, scope: !3885)
!3902 = !DILocation(line: 1679, column: 11, scope: !3885)
!3903 = !DILocation(line: 1682, column: 2, scope: !3885)
!3904 = !DILocation(line: 1682, column: 6, scope: !3885)
!3905 = !DILocation(line: 1682, column: 11, scope: !3885)
!3906 = !DILocation(line: 1684, column: 18, scope: !3885)
!3907 = !DILocation(line: 1684, column: 22, scope: !3885)
!3908 = !DILocation(line: 1684, column: 2, scope: !3885)
!3909 = !DILocation(line: 1685, column: 1, scope: !3885)
!3910 = distinct !DISubprogram(name: "sequencer_unmute_exec", scope: !3, file: !3, line: 1638, type: !2748, scopeLine: 1639, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3911 = !DILocalVariable(name: "C", arg: 1, scope: !3910, file: !3, line: 1638, type: !2329)
!3912 = !DILocation(line: 1638, column: 44, scope: !3910)
!3913 = !DILocalVariable(name: "op", arg: 2, scope: !3910, file: !3, line: 1638, type: !2750)
!3914 = !DILocation(line: 1638, column: 59, scope: !3910)
!3915 = !DILocalVariable(name: "scene", scope: !3910, file: !3, line: 1640, type: !1540)
!3916 = !DILocation(line: 1640, column: 9, scope: !3910)
!3917 = !DILocation(line: 1640, column: 32, scope: !3910)
!3918 = !DILocation(line: 1640, column: 17, scope: !3910)
!3919 = !DILocalVariable(name: "ed", scope: !3910, file: !3, line: 1641, type: !1843)
!3920 = !DILocation(line: 1641, column: 11, scope: !3910)
!3921 = !DILocation(line: 1641, column: 42, scope: !3910)
!3922 = !DILocation(line: 1641, column: 16, scope: !3910)
!3923 = !DILocalVariable(name: "seq", scope: !3910, file: !3, line: 1642, type: !269)
!3924 = !DILocation(line: 1642, column: 12, scope: !3910)
!3925 = !DILocalVariable(name: "selected", scope: !3910, file: !3, line: 1643, type: !605)
!3926 = !DILocation(line: 1643, column: 7, scope: !3910)
!3927 = !DILocation(line: 1645, column: 30, scope: !3910)
!3928 = !DILocation(line: 1645, column: 34, scope: !3910)
!3929 = !DILocation(line: 1645, column: 14, scope: !3910)
!3930 = !DILocation(line: 1645, column: 13, scope: !3910)
!3931 = !DILocation(line: 1645, column: 11, scope: !3910)
!3932 = !DILocation(line: 1647, column: 13, scope: !3933)
!3933 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 1647, column: 2)
!3934 = !DILocation(line: 1647, column: 17, scope: !3933)
!3935 = !DILocation(line: 1647, column: 27, scope: !3933)
!3936 = !DILocation(line: 1647, column: 11, scope: !3933)
!3937 = !DILocation(line: 1647, column: 7, scope: !3933)
!3938 = !DILocation(line: 1647, column: 34, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3933, file: !3, line: 1647, column: 2)
!3940 = !DILocation(line: 1647, column: 2, scope: !3933)
!3941 = !DILocation(line: 1648, column: 8, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1648, column: 7)
!3943 = distinct !DILexicalBlock(scope: !3939, file: !3, line: 1647, column: 56)
!3944 = !DILocation(line: 1648, column: 13, scope: !3942)
!3945 = !DILocation(line: 1648, column: 18, scope: !3942)
!3946 = !DILocation(line: 1648, column: 30, scope: !3942)
!3947 = !DILocation(line: 1648, column: 7, scope: !3943)
!3948 = !DILocation(line: 1649, column: 8, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3950, file: !3, line: 1649, column: 8)
!3950 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 1648, column: 36)
!3951 = !DILocation(line: 1649, column: 8, scope: !3950)
!3952 = !DILocation(line: 1650, column: 9, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 1650, column: 9)
!3954 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 1649, column: 18)
!3955 = !DILocation(line: 1650, column: 14, scope: !3953)
!3956 = !DILocation(line: 1650, column: 19, scope: !3953)
!3957 = !DILocation(line: 1650, column: 9, scope: !3954)
!3958 = !DILocation(line: 1651, column: 6, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 1650, column: 29)
!3960 = !DILocation(line: 1651, column: 11, scope: !3959)
!3961 = !DILocation(line: 1651, column: 16, scope: !3959)
!3962 = !DILocation(line: 1652, column: 40, scope: !3959)
!3963 = !DILocation(line: 1652, column: 47, scope: !3959)
!3964 = !DILocation(line: 1652, column: 6, scope: !3959)
!3965 = !DILocation(line: 1653, column: 5, scope: !3959)
!3966 = !DILocation(line: 1654, column: 4, scope: !3954)
!3967 = !DILocation(line: 1656, column: 10, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !3969, file: !3, line: 1656, column: 9)
!3969 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 1655, column: 9)
!3970 = !DILocation(line: 1656, column: 15, scope: !3968)
!3971 = !DILocation(line: 1656, column: 20, scope: !3968)
!3972 = !DILocation(line: 1656, column: 30, scope: !3968)
!3973 = !DILocation(line: 1656, column: 9, scope: !3969)
!3974 = !DILocation(line: 1657, column: 6, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3968, file: !3, line: 1656, column: 36)
!3976 = !DILocation(line: 1657, column: 11, scope: !3975)
!3977 = !DILocation(line: 1657, column: 16, scope: !3975)
!3978 = !DILocation(line: 1658, column: 40, scope: !3975)
!3979 = !DILocation(line: 1658, column: 47, scope: !3975)
!3980 = !DILocation(line: 1658, column: 6, scope: !3975)
!3981 = !DILocation(line: 1659, column: 5, scope: !3975)
!3982 = !DILocation(line: 1661, column: 3, scope: !3950)
!3983 = !DILocation(line: 1662, column: 2, scope: !3943)
!3984 = !DILocation(line: 1647, column: 45, scope: !3939)
!3985 = !DILocation(line: 1647, column: 50, scope: !3939)
!3986 = !DILocation(line: 1647, column: 43, scope: !3939)
!3987 = !DILocation(line: 1647, column: 2, scope: !3939)
!3988 = distinct !{!3988, !3940, !3989}
!3989 = !DILocation(line: 1662, column: 2, scope: !3933)
!3990 = !DILocation(line: 1664, column: 30, scope: !3910)
!3991 = !DILocation(line: 1664, column: 2, scope: !3910)
!3992 = !DILocation(line: 1665, column: 24, scope: !3910)
!3993 = !DILocation(line: 1665, column: 52, scope: !3910)
!3994 = !DILocation(line: 1665, column: 2, scope: !3910)
!3995 = !DILocation(line: 1667, column: 2, scope: !3910)
!3996 = distinct !DISubprogram(name: "SEQUENCER_OT_lock", scope: !3, file: !3, line: 1706, type: !2598, scopeLine: 1707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!3997 = !DILocalVariable(name: "ot", arg: 1, scope: !3996, file: !3, line: 1706, type: !2600)
!3998 = !DILocation(line: 1706, column: 47, scope: !3996)
!3999 = !DILocation(line: 1709, column: 2, scope: !3996)
!4000 = !DILocation(line: 1709, column: 6, scope: !3996)
!4001 = !DILocation(line: 1709, column: 11, scope: !3996)
!4002 = !DILocation(line: 1710, column: 2, scope: !3996)
!4003 = !DILocation(line: 1710, column: 6, scope: !3996)
!4004 = !DILocation(line: 1710, column: 13, scope: !3996)
!4005 = !DILocation(line: 1711, column: 2, scope: !3996)
!4006 = !DILocation(line: 1711, column: 6, scope: !3996)
!4007 = !DILocation(line: 1711, column: 18, scope: !3996)
!4008 = !DILocation(line: 1714, column: 2, scope: !3996)
!4009 = !DILocation(line: 1714, column: 6, scope: !3996)
!4010 = !DILocation(line: 1714, column: 11, scope: !3996)
!4011 = !DILocation(line: 1715, column: 2, scope: !3996)
!4012 = !DILocation(line: 1715, column: 6, scope: !3996)
!4013 = !DILocation(line: 1715, column: 11, scope: !3996)
!4014 = !DILocation(line: 1718, column: 2, scope: !3996)
!4015 = !DILocation(line: 1718, column: 6, scope: !3996)
!4016 = !DILocation(line: 1718, column: 11, scope: !3996)
!4017 = !DILocation(line: 1719, column: 1, scope: !3996)
!4018 = distinct !DISubprogram(name: "sequencer_lock_exec", scope: !3, file: !3, line: 1689, type: !2748, scopeLine: 1690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4019 = !DILocalVariable(name: "C", arg: 1, scope: !4018, file: !3, line: 1689, type: !2329)
!4020 = !DILocation(line: 1689, column: 42, scope: !4018)
!4021 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !4018, file: !3, line: 1689, type: !2750)
!4022 = !DILocation(line: 1689, column: 57, scope: !4018)
!4023 = !DILocalVariable(name: "scene", scope: !4018, file: !3, line: 1691, type: !1540)
!4024 = !DILocation(line: 1691, column: 9, scope: !4018)
!4025 = !DILocation(line: 1691, column: 32, scope: !4018)
!4026 = !DILocation(line: 1691, column: 17, scope: !4018)
!4027 = !DILocalVariable(name: "ed", scope: !4018, file: !3, line: 1692, type: !1843)
!4028 = !DILocation(line: 1692, column: 11, scope: !4018)
!4029 = !DILocation(line: 1692, column: 42, scope: !4018)
!4030 = !DILocation(line: 1692, column: 16, scope: !4018)
!4031 = !DILocalVariable(name: "seq", scope: !4018, file: !3, line: 1693, type: !269)
!4032 = !DILocation(line: 1693, column: 12, scope: !4018)
!4033 = !DILocation(line: 1695, column: 13, scope: !4034)
!4034 = distinct !DILexicalBlock(scope: !4018, file: !3, line: 1695, column: 2)
!4035 = !DILocation(line: 1695, column: 17, scope: !4034)
!4036 = !DILocation(line: 1695, column: 27, scope: !4034)
!4037 = !DILocation(line: 1695, column: 11, scope: !4034)
!4038 = !DILocation(line: 1695, column: 7, scope: !4034)
!4039 = !DILocation(line: 1695, column: 34, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 1695, column: 2)
!4041 = !DILocation(line: 1695, column: 2, scope: !4034)
!4042 = !DILocation(line: 1696, column: 7, scope: !4043)
!4043 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 1696, column: 7)
!4044 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 1695, column: 56)
!4045 = !DILocation(line: 1696, column: 12, scope: !4043)
!4046 = !DILocation(line: 1696, column: 17, scope: !4043)
!4047 = !DILocation(line: 1696, column: 7, scope: !4044)
!4048 = !DILocation(line: 1697, column: 4, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 1696, column: 27)
!4050 = !DILocation(line: 1697, column: 9, scope: !4049)
!4051 = !DILocation(line: 1697, column: 14, scope: !4049)
!4052 = !DILocation(line: 1698, column: 3, scope: !4049)
!4053 = !DILocation(line: 1699, column: 2, scope: !4044)
!4054 = !DILocation(line: 1695, column: 45, scope: !4040)
!4055 = !DILocation(line: 1695, column: 50, scope: !4040)
!4056 = !DILocation(line: 1695, column: 43, scope: !4040)
!4057 = !DILocation(line: 1695, column: 2, scope: !4040)
!4058 = distinct !{!4058, !4041, !4059}
!4059 = !DILocation(line: 1699, column: 2, scope: !4034)
!4060 = !DILocation(line: 1701, column: 24, scope: !4018)
!4061 = !DILocation(line: 1701, column: 52, scope: !4018)
!4062 = !DILocation(line: 1701, column: 2, scope: !4018)
!4063 = !DILocation(line: 1703, column: 2, scope: !4018)
!4064 = distinct !DISubprogram(name: "SEQUENCER_OT_unlock", scope: !3, file: !3, line: 1739, type: !2598, scopeLine: 1740, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4065 = !DILocalVariable(name: "ot", arg: 1, scope: !4064, file: !3, line: 1739, type: !2600)
!4066 = !DILocation(line: 1739, column: 49, scope: !4064)
!4067 = !DILocation(line: 1742, column: 2, scope: !4064)
!4068 = !DILocation(line: 1742, column: 6, scope: !4064)
!4069 = !DILocation(line: 1742, column: 11, scope: !4064)
!4070 = !DILocation(line: 1743, column: 2, scope: !4064)
!4071 = !DILocation(line: 1743, column: 6, scope: !4064)
!4072 = !DILocation(line: 1743, column: 13, scope: !4064)
!4073 = !DILocation(line: 1744, column: 2, scope: !4064)
!4074 = !DILocation(line: 1744, column: 6, scope: !4064)
!4075 = !DILocation(line: 1744, column: 18, scope: !4064)
!4076 = !DILocation(line: 1747, column: 2, scope: !4064)
!4077 = !DILocation(line: 1747, column: 6, scope: !4064)
!4078 = !DILocation(line: 1747, column: 11, scope: !4064)
!4079 = !DILocation(line: 1748, column: 2, scope: !4064)
!4080 = !DILocation(line: 1748, column: 6, scope: !4064)
!4081 = !DILocation(line: 1748, column: 11, scope: !4064)
!4082 = !DILocation(line: 1751, column: 2, scope: !4064)
!4083 = !DILocation(line: 1751, column: 6, scope: !4064)
!4084 = !DILocation(line: 1751, column: 11, scope: !4064)
!4085 = !DILocation(line: 1752, column: 1, scope: !4064)
!4086 = distinct !DISubprogram(name: "sequencer_unlock_exec", scope: !3, file: !3, line: 1722, type: !2748, scopeLine: 1723, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4087 = !DILocalVariable(name: "C", arg: 1, scope: !4086, file: !3, line: 1722, type: !2329)
!4088 = !DILocation(line: 1722, column: 44, scope: !4086)
!4089 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !4086, file: !3, line: 1722, type: !2750)
!4090 = !DILocation(line: 1722, column: 59, scope: !4086)
!4091 = !DILocalVariable(name: "scene", scope: !4086, file: !3, line: 1724, type: !1540)
!4092 = !DILocation(line: 1724, column: 9, scope: !4086)
!4093 = !DILocation(line: 1724, column: 32, scope: !4086)
!4094 = !DILocation(line: 1724, column: 17, scope: !4086)
!4095 = !DILocalVariable(name: "ed", scope: !4086, file: !3, line: 1725, type: !1843)
!4096 = !DILocation(line: 1725, column: 11, scope: !4086)
!4097 = !DILocation(line: 1725, column: 42, scope: !4086)
!4098 = !DILocation(line: 1725, column: 16, scope: !4086)
!4099 = !DILocalVariable(name: "seq", scope: !4086, file: !3, line: 1726, type: !269)
!4100 = !DILocation(line: 1726, column: 12, scope: !4086)
!4101 = !DILocation(line: 1728, column: 13, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1728, column: 2)
!4103 = !DILocation(line: 1728, column: 17, scope: !4102)
!4104 = !DILocation(line: 1728, column: 27, scope: !4102)
!4105 = !DILocation(line: 1728, column: 11, scope: !4102)
!4106 = !DILocation(line: 1728, column: 7, scope: !4102)
!4107 = !DILocation(line: 1728, column: 34, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 1728, column: 2)
!4109 = !DILocation(line: 1728, column: 2, scope: !4102)
!4110 = !DILocation(line: 1729, column: 7, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 1729, column: 7)
!4112 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 1728, column: 56)
!4113 = !DILocation(line: 1729, column: 12, scope: !4111)
!4114 = !DILocation(line: 1729, column: 17, scope: !4111)
!4115 = !DILocation(line: 1729, column: 7, scope: !4112)
!4116 = !DILocation(line: 1730, column: 4, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4111, file: !3, line: 1729, column: 27)
!4118 = !DILocation(line: 1730, column: 9, scope: !4117)
!4119 = !DILocation(line: 1730, column: 14, scope: !4117)
!4120 = !DILocation(line: 1731, column: 3, scope: !4117)
!4121 = !DILocation(line: 1732, column: 2, scope: !4112)
!4122 = !DILocation(line: 1728, column: 45, scope: !4108)
!4123 = !DILocation(line: 1728, column: 50, scope: !4108)
!4124 = !DILocation(line: 1728, column: 43, scope: !4108)
!4125 = !DILocation(line: 1728, column: 2, scope: !4108)
!4126 = distinct !{!4126, !4109, !4127}
!4127 = !DILocation(line: 1732, column: 2, scope: !4102)
!4128 = !DILocation(line: 1734, column: 24, scope: !4086)
!4129 = !DILocation(line: 1734, column: 52, scope: !4086)
!4130 = !DILocation(line: 1734, column: 2, scope: !4086)
!4131 = !DILocation(line: 1736, column: 2, scope: !4086)
!4132 = distinct !DISubprogram(name: "SEQUENCER_OT_reload", scope: !3, file: !3, line: 1779, type: !2598, scopeLine: 1780, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4133 = !DILocalVariable(name: "ot", arg: 1, scope: !4132, file: !3, line: 1779, type: !2600)
!4134 = !DILocation(line: 1779, column: 49, scope: !4132)
!4135 = !DILocalVariable(name: "prop", scope: !4132, file: !3, line: 1781, type: !2672)
!4136 = !DILocation(line: 1781, column: 15, scope: !4132)
!4137 = !DILocation(line: 1784, column: 2, scope: !4132)
!4138 = !DILocation(line: 1784, column: 6, scope: !4132)
!4139 = !DILocation(line: 1784, column: 11, scope: !4132)
!4140 = !DILocation(line: 1785, column: 2, scope: !4132)
!4141 = !DILocation(line: 1785, column: 6, scope: !4132)
!4142 = !DILocation(line: 1785, column: 13, scope: !4132)
!4143 = !DILocation(line: 1786, column: 2, scope: !4132)
!4144 = !DILocation(line: 1786, column: 6, scope: !4132)
!4145 = !DILocation(line: 1786, column: 18, scope: !4132)
!4146 = !DILocation(line: 1789, column: 2, scope: !4132)
!4147 = !DILocation(line: 1789, column: 6, scope: !4132)
!4148 = !DILocation(line: 1789, column: 11, scope: !4132)
!4149 = !DILocation(line: 1790, column: 2, scope: !4132)
!4150 = !DILocation(line: 1790, column: 6, scope: !4132)
!4151 = !DILocation(line: 1790, column: 11, scope: !4132)
!4152 = !DILocation(line: 1793, column: 2, scope: !4132)
!4153 = !DILocation(line: 1793, column: 6, scope: !4132)
!4154 = !DILocation(line: 1793, column: 11, scope: !4132)
!4155 = !DILocation(line: 1795, column: 25, scope: !4132)
!4156 = !DILocation(line: 1795, column: 29, scope: !4132)
!4157 = !DILocation(line: 1795, column: 9, scope: !4132)
!4158 = !DILocation(line: 1795, column: 7, scope: !4132)
!4159 = !DILocation(line: 1797, column: 24, scope: !4132)
!4160 = !DILocation(line: 1797, column: 2, scope: !4132)
!4161 = !DILocation(line: 1798, column: 1, scope: !4132)
!4162 = distinct !DISubprogram(name: "sequencer_reload_exec", scope: !3, file: !3, line: 1755, type: !2748, scopeLine: 1756, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4163 = !DILocalVariable(name: "C", arg: 1, scope: !4162, file: !3, line: 1755, type: !2329)
!4164 = !DILocation(line: 1755, column: 44, scope: !4162)
!4165 = !DILocalVariable(name: "op", arg: 2, scope: !4162, file: !3, line: 1755, type: !2750)
!4166 = !DILocation(line: 1755, column: 59, scope: !4162)
!4167 = !DILocalVariable(name: "scene", scope: !4162, file: !3, line: 1757, type: !1540)
!4168 = !DILocation(line: 1757, column: 9, scope: !4162)
!4169 = !DILocation(line: 1757, column: 32, scope: !4162)
!4170 = !DILocation(line: 1757, column: 17, scope: !4162)
!4171 = !DILocalVariable(name: "ed", scope: !4162, file: !3, line: 1758, type: !1843)
!4172 = !DILocation(line: 1758, column: 11, scope: !4162)
!4173 = !DILocation(line: 1758, column: 42, scope: !4162)
!4174 = !DILocation(line: 1758, column: 16, scope: !4162)
!4175 = !DILocalVariable(name: "seq", scope: !4162, file: !3, line: 1759, type: !269)
!4176 = !DILocation(line: 1759, column: 12, scope: !4162)
!4177 = !DILocalVariable(name: "adjust_length", scope: !4162, file: !3, line: 1760, type: !4178)
!4178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !605)
!4179 = !DILocation(line: 1760, column: 13, scope: !4162)
!4180 = !DILocation(line: 1760, column: 45, scope: !4162)
!4181 = !DILocation(line: 1760, column: 49, scope: !4162)
!4182 = !DILocation(line: 1760, column: 29, scope: !4162)
!4183 = !DILocation(line: 1762, column: 13, scope: !4184)
!4184 = distinct !DILexicalBlock(scope: !4162, file: !3, line: 1762, column: 2)
!4185 = !DILocation(line: 1762, column: 17, scope: !4184)
!4186 = !DILocation(line: 1762, column: 27, scope: !4184)
!4187 = !DILocation(line: 1762, column: 11, scope: !4184)
!4188 = !DILocation(line: 1762, column: 7, scope: !4184)
!4189 = !DILocation(line: 1762, column: 34, scope: !4190)
!4190 = distinct !DILexicalBlock(scope: !4184, file: !3, line: 1762, column: 2)
!4191 = !DILocation(line: 1762, column: 2, scope: !4184)
!4192 = !DILocation(line: 1763, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4194, file: !3, line: 1763, column: 7)
!4194 = distinct !DILexicalBlock(scope: !4190, file: !3, line: 1762, column: 56)
!4195 = !DILocation(line: 1763, column: 12, scope: !4193)
!4196 = !DILocation(line: 1763, column: 17, scope: !4193)
!4197 = !DILocation(line: 1763, column: 7, scope: !4194)
!4198 = !DILocation(line: 1764, column: 46, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 1763, column: 27)
!4200 = !DILocation(line: 1764, column: 53, scope: !4199)
!4201 = !DILocation(line: 1764, column: 4, scope: !4199)
!4202 = !DILocation(line: 1765, column: 33, scope: !4199)
!4203 = !DILocation(line: 1765, column: 40, scope: !4199)
!4204 = !DILocation(line: 1765, column: 46, scope: !4199)
!4205 = !DILocation(line: 1765, column: 45, scope: !4199)
!4206 = !DILocation(line: 1765, column: 4, scope: !4199)
!4207 = !DILocation(line: 1767, column: 8, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 1767, column: 8)
!4209 = !DILocation(line: 1767, column: 8, scope: !4199)
!4210 = !DILocation(line: 1768, column: 35, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4212, file: !3, line: 1768, column: 9)
!4212 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 1767, column: 23)
!4213 = !DILocation(line: 1768, column: 39, scope: !4211)
!4214 = !DILocation(line: 1768, column: 49, scope: !4211)
!4215 = !DILocation(line: 1768, column: 9, scope: !4211)
!4216 = !DILocation(line: 1768, column: 9, scope: !4212)
!4217 = !DILocation(line: 1769, column: 32, scope: !4211)
!4218 = !DILocation(line: 1769, column: 36, scope: !4211)
!4219 = !DILocation(line: 1769, column: 46, scope: !4211)
!4220 = !DILocation(line: 1769, column: 51, scope: !4211)
!4221 = !DILocation(line: 1769, column: 6, scope: !4211)
!4222 = !DILocation(line: 1770, column: 4, scope: !4212)
!4223 = !DILocation(line: 1771, column: 3, scope: !4199)
!4224 = !DILocation(line: 1772, column: 2, scope: !4194)
!4225 = !DILocation(line: 1762, column: 45, scope: !4190)
!4226 = !DILocation(line: 1762, column: 50, scope: !4190)
!4227 = !DILocation(line: 1762, column: 43, scope: !4190)
!4228 = !DILocation(line: 1762, column: 2, scope: !4190)
!4229 = distinct !{!4229, !4191, !4230}
!4230 = !DILocation(line: 1772, column: 2, scope: !4184)
!4231 = !DILocation(line: 1774, column: 24, scope: !4162)
!4232 = !DILocation(line: 1774, column: 52, scope: !4162)
!4233 = !DILocation(line: 1774, column: 2, scope: !4162)
!4234 = !DILocation(line: 1776, column: 2, scope: !4162)
!4235 = distinct !DISubprogram(name: "SEQUENCER_OT_refresh_all", scope: !3, file: !3, line: 1813, type: !2598, scopeLine: 1814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4236 = !DILocalVariable(name: "ot", arg: 1, scope: !4235, file: !3, line: 1813, type: !2600)
!4237 = !DILocation(line: 1813, column: 54, scope: !4235)
!4238 = !DILocation(line: 1816, column: 2, scope: !4235)
!4239 = !DILocation(line: 1816, column: 6, scope: !4235)
!4240 = !DILocation(line: 1816, column: 11, scope: !4235)
!4241 = !DILocation(line: 1817, column: 2, scope: !4235)
!4242 = !DILocation(line: 1817, column: 6, scope: !4235)
!4243 = !DILocation(line: 1817, column: 13, scope: !4235)
!4244 = !DILocation(line: 1818, column: 2, scope: !4235)
!4245 = !DILocation(line: 1818, column: 6, scope: !4235)
!4246 = !DILocation(line: 1818, column: 18, scope: !4235)
!4247 = !DILocation(line: 1821, column: 2, scope: !4235)
!4248 = !DILocation(line: 1821, column: 6, scope: !4235)
!4249 = !DILocation(line: 1821, column: 11, scope: !4235)
!4250 = !DILocation(line: 1822, column: 2, scope: !4235)
!4251 = !DILocation(line: 1822, column: 6, scope: !4235)
!4252 = !DILocation(line: 1822, column: 11, scope: !4235)
!4253 = !DILocation(line: 1823, column: 1, scope: !4235)
!4254 = distinct !DISubprogram(name: "sequencer_refresh_all_exec", scope: !3, file: !3, line: 1801, type: !2748, scopeLine: 1802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4255 = !DILocalVariable(name: "C", arg: 1, scope: !4254, file: !3, line: 1801, type: !2329)
!4256 = !DILocation(line: 1801, column: 49, scope: !4254)
!4257 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !4254, file: !3, line: 1801, type: !2750)
!4258 = !DILocation(line: 1801, column: 64, scope: !4254)
!4259 = !DILocalVariable(name: "scene", scope: !4254, file: !3, line: 1803, type: !1540)
!4260 = !DILocation(line: 1803, column: 9, scope: !4254)
!4261 = !DILocation(line: 1803, column: 32, scope: !4254)
!4262 = !DILocation(line: 1803, column: 17, scope: !4254)
!4263 = !DILocalVariable(name: "ed", scope: !4254, file: !3, line: 1804, type: !1843)
!4264 = !DILocation(line: 1804, column: 11, scope: !4254)
!4265 = !DILocation(line: 1804, column: 42, scope: !4254)
!4266 = !DILocation(line: 1804, column: 16, scope: !4254)
!4267 = !DILocation(line: 1806, column: 27, scope: !4254)
!4268 = !DILocation(line: 1806, column: 35, scope: !4254)
!4269 = !DILocation(line: 1806, column: 39, scope: !4254)
!4270 = !DILocation(line: 1806, column: 2, scope: !4254)
!4271 = !DILocation(line: 1808, column: 24, scope: !4254)
!4272 = !DILocation(line: 1808, column: 52, scope: !4254)
!4273 = !DILocation(line: 1808, column: 2, scope: !4254)
!4274 = !DILocation(line: 1810, column: 2, scope: !4254)
!4275 = distinct !DISubprogram(name: "SEQUENCER_OT_reassign_inputs", scope: !3, file: !3, line: 1870, type: !2598, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4276 = !DILocalVariable(name: "ot", arg: 1, scope: !4275, file: !3, line: 1870, type: !2600)
!4277 = !DILocation(line: 1870, column: 58, scope: !4275)
!4278 = !DILocation(line: 1873, column: 2, scope: !4275)
!4279 = !DILocation(line: 1873, column: 6, scope: !4275)
!4280 = !DILocation(line: 1873, column: 11, scope: !4275)
!4281 = !DILocation(line: 1874, column: 2, scope: !4275)
!4282 = !DILocation(line: 1874, column: 6, scope: !4275)
!4283 = !DILocation(line: 1874, column: 13, scope: !4275)
!4284 = !DILocation(line: 1875, column: 2, scope: !4275)
!4285 = !DILocation(line: 1875, column: 6, scope: !4275)
!4286 = !DILocation(line: 1875, column: 18, scope: !4275)
!4287 = !DILocation(line: 1878, column: 2, scope: !4275)
!4288 = !DILocation(line: 1878, column: 6, scope: !4275)
!4289 = !DILocation(line: 1878, column: 11, scope: !4275)
!4290 = !DILocation(line: 1879, column: 2, scope: !4275)
!4291 = !DILocation(line: 1879, column: 6, scope: !4275)
!4292 = !DILocation(line: 1879, column: 11, scope: !4275)
!4293 = !DILocation(line: 1882, column: 2, scope: !4275)
!4294 = !DILocation(line: 1882, column: 6, scope: !4275)
!4295 = !DILocation(line: 1882, column: 11, scope: !4275)
!4296 = !DILocation(line: 1883, column: 1, scope: !4275)
!4297 = distinct !DISubprogram(name: "sequencer_reassign_inputs_exec", scope: !3, file: !3, line: 1825, type: !2748, scopeLine: 1826, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4298 = !DILocalVariable(name: "C", arg: 1, scope: !4297, file: !3, line: 1825, type: !2329)
!4299 = !DILocation(line: 1825, column: 53, scope: !4297)
!4300 = !DILocalVariable(name: "op", arg: 2, scope: !4297, file: !3, line: 1825, type: !2750)
!4301 = !DILocation(line: 1825, column: 68, scope: !4297)
!4302 = !DILocalVariable(name: "scene", scope: !4297, file: !3, line: 1827, type: !1540)
!4303 = !DILocation(line: 1827, column: 9, scope: !4297)
!4304 = !DILocation(line: 1827, column: 32, scope: !4297)
!4305 = !DILocation(line: 1827, column: 17, scope: !4297)
!4306 = !DILocalVariable(name: "seq1", scope: !4297, file: !3, line: 1828, type: !269)
!4307 = !DILocation(line: 1828, column: 12, scope: !4297)
!4308 = !DILocalVariable(name: "seq2", scope: !4297, file: !3, line: 1828, type: !269)
!4309 = !DILocation(line: 1828, column: 19, scope: !4297)
!4310 = !DILocalVariable(name: "seq3", scope: !4297, file: !3, line: 1828, type: !269)
!4311 = !DILocation(line: 1828, column: 26, scope: !4297)
!4312 = !DILocalVariable(name: "last_seq", scope: !4297, file: !3, line: 1828, type: !269)
!4313 = !DILocation(line: 1828, column: 33, scope: !4297)
!4314 = !DILocation(line: 1828, column: 69, scope: !4297)
!4315 = !DILocation(line: 1828, column: 44, scope: !4297)
!4316 = !DILocalVariable(name: "error_msg", scope: !4297, file: !3, line: 1829, type: !1684)
!4317 = !DILocation(line: 1829, column: 14, scope: !4297)
!4318 = !DILocation(line: 1831, column: 32, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1831, column: 6)
!4320 = !DILocation(line: 1831, column: 39, scope: !4319)
!4321 = !DILocation(line: 1831, column: 49, scope: !4319)
!4322 = !DILocation(line: 1831, column: 59, scope: !4319)
!4323 = !DILocation(line: 1831, column: 7, scope: !4319)
!4324 = !DILocation(line: 1831, column: 6, scope: !4297)
!4325 = !DILocation(line: 1832, column: 14, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 1831, column: 99)
!4327 = !DILocation(line: 1832, column: 18, scope: !4326)
!4328 = !DILocation(line: 1832, column: 38, scope: !4326)
!4329 = !DILocation(line: 1832, column: 3, scope: !4326)
!4330 = !DILocation(line: 1833, column: 3, scope: !4326)
!4331 = !DILocation(line: 1836, column: 25, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4297, file: !3, line: 1836, column: 6)
!4333 = !DILocation(line: 1836, column: 31, scope: !4332)
!4334 = !DILocation(line: 1836, column: 6, scope: !4332)
!4335 = !DILocation(line: 1836, column: 41, scope: !4332)
!4336 = !DILocation(line: 1837, column: 25, scope: !4332)
!4337 = !DILocation(line: 1837, column: 31, scope: !4332)
!4338 = !DILocation(line: 1837, column: 6, scope: !4332)
!4339 = !DILocation(line: 1837, column: 41, scope: !4332)
!4340 = !DILocation(line: 1838, column: 25, scope: !4332)
!4341 = !DILocation(line: 1838, column: 31, scope: !4332)
!4342 = !DILocation(line: 1838, column: 6, scope: !4332)
!4343 = !DILocation(line: 1836, column: 6, scope: !4297)
!4344 = !DILocation(line: 1840, column: 14, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 1839, column: 2)
!4346 = !DILocation(line: 1840, column: 18, scope: !4345)
!4347 = !DILocation(line: 1840, column: 3, scope: !4345)
!4348 = !DILocation(line: 1841, column: 3, scope: !4345)
!4349 = !DILocation(line: 1844, column: 19, scope: !4297)
!4350 = !DILocation(line: 1844, column: 2, scope: !4297)
!4351 = !DILocation(line: 1844, column: 12, scope: !4297)
!4352 = !DILocation(line: 1844, column: 17, scope: !4297)
!4353 = !DILocation(line: 1845, column: 19, scope: !4297)
!4354 = !DILocation(line: 1845, column: 2, scope: !4297)
!4355 = !DILocation(line: 1845, column: 12, scope: !4297)
!4356 = !DILocation(line: 1845, column: 17, scope: !4297)
!4357 = !DILocation(line: 1846, column: 19, scope: !4297)
!4358 = !DILocation(line: 1846, column: 2, scope: !4297)
!4359 = !DILocation(line: 1846, column: 12, scope: !4297)
!4360 = !DILocation(line: 1846, column: 17, scope: !4297)
!4361 = !DILocation(line: 1848, column: 44, scope: !4297)
!4362 = !DILocation(line: 1848, column: 51, scope: !4297)
!4363 = !DILocation(line: 1848, column: 2, scope: !4297)
!4364 = !DILocation(line: 1850, column: 24, scope: !4297)
!4365 = !DILocation(line: 1850, column: 52, scope: !4297)
!4366 = !DILocation(line: 1850, column: 2, scope: !4297)
!4367 = !DILocation(line: 1852, column: 2, scope: !4297)
!4368 = !DILocation(line: 1853, column: 1, scope: !4297)
!4369 = distinct !DISubprogram(name: "sequencer_effect_poll", scope: !3, file: !3, line: 1855, type: !2327, scopeLine: 1856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4370 = !DILocalVariable(name: "C", arg: 1, scope: !4369, file: !3, line: 1855, type: !2329)
!4371 = !DILocation(line: 1855, column: 44, scope: !4369)
!4372 = !DILocalVariable(name: "scene", scope: !4369, file: !3, line: 1857, type: !1540)
!4373 = !DILocation(line: 1857, column: 9, scope: !4369)
!4374 = !DILocation(line: 1857, column: 32, scope: !4369)
!4375 = !DILocation(line: 1857, column: 17, scope: !4369)
!4376 = !DILocalVariable(name: "ed", scope: !4369, file: !3, line: 1858, type: !1843)
!4377 = !DILocation(line: 1858, column: 11, scope: !4369)
!4378 = !DILocation(line: 1858, column: 42, scope: !4369)
!4379 = !DILocation(line: 1858, column: 16, scope: !4369)
!4380 = !DILocation(line: 1860, column: 6, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 1860, column: 6)
!4382 = !DILocation(line: 1860, column: 6, scope: !4369)
!4383 = !DILocalVariable(name: "last_seq", scope: !4384, file: !3, line: 1861, type: !269)
!4384 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1860, column: 10)
!4385 = !DILocation(line: 1861, column: 13, scope: !4384)
!4386 = !DILocation(line: 1861, column: 49, scope: !4384)
!4387 = !DILocation(line: 1861, column: 24, scope: !4384)
!4388 = !DILocation(line: 1862, column: 7, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4384, file: !3, line: 1862, column: 7)
!4390 = !DILocation(line: 1862, column: 16, scope: !4389)
!4391 = !DILocation(line: 1862, column: 20, scope: !4389)
!4392 = !DILocation(line: 1862, column: 30, scope: !4389)
!4393 = !DILocation(line: 1862, column: 35, scope: !4389)
!4394 = !DILocation(line: 1862, column: 7, scope: !4384)
!4395 = !DILocation(line: 1863, column: 4, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4389, file: !3, line: 1862, column: 55)
!4397 = !DILocation(line: 1865, column: 2, scope: !4384)
!4398 = !DILocation(line: 1867, column: 2, scope: !4369)
!4399 = !DILocation(line: 1868, column: 1, scope: !4369)
!4400 = distinct !DISubprogram(name: "SEQUENCER_OT_swap_inputs", scope: !3, file: !3, line: 1906, type: !2598, scopeLine: 1907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4401 = !DILocalVariable(name: "ot", arg: 1, scope: !4400, file: !3, line: 1906, type: !2600)
!4402 = !DILocation(line: 1906, column: 54, scope: !4400)
!4403 = !DILocation(line: 1909, column: 2, scope: !4400)
!4404 = !DILocation(line: 1909, column: 6, scope: !4400)
!4405 = !DILocation(line: 1909, column: 11, scope: !4400)
!4406 = !DILocation(line: 1910, column: 2, scope: !4400)
!4407 = !DILocation(line: 1910, column: 6, scope: !4400)
!4408 = !DILocation(line: 1910, column: 13, scope: !4400)
!4409 = !DILocation(line: 1911, column: 2, scope: !4400)
!4410 = !DILocation(line: 1911, column: 6, scope: !4400)
!4411 = !DILocation(line: 1911, column: 18, scope: !4400)
!4412 = !DILocation(line: 1914, column: 2, scope: !4400)
!4413 = !DILocation(line: 1914, column: 6, scope: !4400)
!4414 = !DILocation(line: 1914, column: 11, scope: !4400)
!4415 = !DILocation(line: 1915, column: 2, scope: !4400)
!4416 = !DILocation(line: 1915, column: 6, scope: !4400)
!4417 = !DILocation(line: 1915, column: 11, scope: !4400)
!4418 = !DILocation(line: 1918, column: 2, scope: !4400)
!4419 = !DILocation(line: 1918, column: 6, scope: !4400)
!4420 = !DILocation(line: 1918, column: 11, scope: !4400)
!4421 = !DILocation(line: 1919, column: 1, scope: !4400)
!4422 = distinct !DISubprogram(name: "sequencer_swap_inputs_exec", scope: !3, file: !3, line: 1886, type: !2748, scopeLine: 1887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4423 = !DILocalVariable(name: "C", arg: 1, scope: !4422, file: !3, line: 1886, type: !2329)
!4424 = !DILocation(line: 1886, column: 49, scope: !4422)
!4425 = !DILocalVariable(name: "op", arg: 2, scope: !4422, file: !3, line: 1886, type: !2750)
!4426 = !DILocation(line: 1886, column: 64, scope: !4422)
!4427 = !DILocalVariable(name: "scene", scope: !4422, file: !3, line: 1888, type: !1540)
!4428 = !DILocation(line: 1888, column: 9, scope: !4422)
!4429 = !DILocation(line: 1888, column: 32, scope: !4422)
!4430 = !DILocation(line: 1888, column: 17, scope: !4422)
!4431 = !DILocalVariable(name: "seq", scope: !4422, file: !3, line: 1889, type: !269)
!4432 = !DILocation(line: 1889, column: 12, scope: !4422)
!4433 = !DILocalVariable(name: "last_seq", scope: !4422, file: !3, line: 1889, type: !269)
!4434 = !DILocation(line: 1889, column: 18, scope: !4422)
!4435 = !DILocation(line: 1889, column: 54, scope: !4422)
!4436 = !DILocation(line: 1889, column: 29, scope: !4422)
!4437 = !DILocation(line: 1891, column: 6, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4422, file: !3, line: 1891, column: 6)
!4439 = !DILocation(line: 1891, column: 16, scope: !4438)
!4440 = !DILocation(line: 1891, column: 21, scope: !4438)
!4441 = !DILocation(line: 1891, column: 29, scope: !4438)
!4442 = !DILocation(line: 1891, column: 32, scope: !4438)
!4443 = !DILocation(line: 1891, column: 42, scope: !4438)
!4444 = !DILocation(line: 1891, column: 47, scope: !4438)
!4445 = !DILocation(line: 1891, column: 6, scope: !4422)
!4446 = !DILocation(line: 1892, column: 14, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 1891, column: 56)
!4448 = !DILocation(line: 1892, column: 18, scope: !4447)
!4449 = !DILocation(line: 1892, column: 3, scope: !4447)
!4450 = !DILocation(line: 1893, column: 3, scope: !4447)
!4451 = !DILocation(line: 1896, column: 8, scope: !4422)
!4452 = !DILocation(line: 1896, column: 18, scope: !4422)
!4453 = !DILocation(line: 1896, column: 6, scope: !4422)
!4454 = !DILocation(line: 1897, column: 19, scope: !4422)
!4455 = !DILocation(line: 1897, column: 29, scope: !4422)
!4456 = !DILocation(line: 1897, column: 2, scope: !4422)
!4457 = !DILocation(line: 1897, column: 12, scope: !4422)
!4458 = !DILocation(line: 1897, column: 17, scope: !4422)
!4459 = !DILocation(line: 1898, column: 19, scope: !4422)
!4460 = !DILocation(line: 1898, column: 2, scope: !4422)
!4461 = !DILocation(line: 1898, column: 12, scope: !4422)
!4462 = !DILocation(line: 1898, column: 17, scope: !4422)
!4463 = !DILocation(line: 1900, column: 44, scope: !4422)
!4464 = !DILocation(line: 1900, column: 51, scope: !4422)
!4465 = !DILocation(line: 1900, column: 2, scope: !4422)
!4466 = !DILocation(line: 1902, column: 24, scope: !4422)
!4467 = !DILocation(line: 1902, column: 52, scope: !4422)
!4468 = !DILocation(line: 1902, column: 2, scope: !4422)
!4469 = !DILocation(line: 1904, column: 2, scope: !4422)
!4470 = !DILocation(line: 1905, column: 1, scope: !4422)
!4471 = distinct !DISubprogram(name: "SEQUENCER_OT_cut", scope: !3, file: !3, line: 2009, type: !2598, scopeLine: 2010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4472 = !DILocalVariable(name: "ot", arg: 1, scope: !4471, file: !3, line: 2009, type: !2600)
!4473 = !DILocation(line: 2009, column: 46, scope: !4471)
!4474 = !DILocation(line: 2012, column: 2, scope: !4471)
!4475 = !DILocation(line: 2012, column: 6, scope: !4471)
!4476 = !DILocation(line: 2012, column: 11, scope: !4471)
!4477 = !DILocation(line: 2013, column: 2, scope: !4471)
!4478 = !DILocation(line: 2013, column: 6, scope: !4471)
!4479 = !DILocation(line: 2013, column: 13, scope: !4471)
!4480 = !DILocation(line: 2014, column: 2, scope: !4471)
!4481 = !DILocation(line: 2014, column: 6, scope: !4471)
!4482 = !DILocation(line: 2014, column: 18, scope: !4471)
!4483 = !DILocation(line: 2017, column: 2, scope: !4471)
!4484 = !DILocation(line: 2017, column: 6, scope: !4471)
!4485 = !DILocation(line: 2017, column: 13, scope: !4471)
!4486 = !DILocation(line: 2018, column: 2, scope: !4471)
!4487 = !DILocation(line: 2018, column: 6, scope: !4471)
!4488 = !DILocation(line: 2018, column: 11, scope: !4471)
!4489 = !DILocation(line: 2019, column: 2, scope: !4471)
!4490 = !DILocation(line: 2019, column: 6, scope: !4471)
!4491 = !DILocation(line: 2019, column: 11, scope: !4471)
!4492 = !DILocation(line: 2022, column: 2, scope: !4471)
!4493 = !DILocation(line: 2022, column: 6, scope: !4471)
!4494 = !DILocation(line: 2022, column: 11, scope: !4471)
!4495 = !DILocation(line: 2024, column: 14, scope: !4471)
!4496 = !DILocation(line: 2024, column: 18, scope: !4471)
!4497 = !DILocation(line: 2024, column: 2, scope: !4471)
!4498 = !DILocation(line: 2025, column: 15, scope: !4471)
!4499 = !DILocation(line: 2025, column: 19, scope: !4471)
!4500 = !DILocation(line: 2025, column: 2, scope: !4471)
!4501 = !DILocation(line: 2026, column: 15, scope: !4471)
!4502 = !DILocation(line: 2026, column: 19, scope: !4471)
!4503 = !DILocation(line: 2026, column: 2, scope: !4471)
!4504 = !DILocation(line: 2027, column: 1, scope: !4471)
!4505 = distinct !DISubprogram(name: "sequencer_cut_invoke", scope: !3, file: !3, line: 1990, type: !3001, scopeLine: 1991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4506 = !DILocalVariable(name: "C", arg: 1, scope: !4505, file: !3, line: 1990, type: !2329)
!4507 = !DILocation(line: 1990, column: 43, scope: !4505)
!4508 = !DILocalVariable(name: "op", arg: 2, scope: !4505, file: !3, line: 1990, type: !2750)
!4509 = !DILocation(line: 1990, column: 58, scope: !4505)
!4510 = !DILocalVariable(name: "event", arg: 3, scope: !4505, file: !3, line: 1990, type: !3003)
!4511 = !DILocation(line: 1990, column: 77, scope: !4505)
!4512 = !DILocalVariable(name: "scene", scope: !4505, file: !3, line: 1992, type: !1540)
!4513 = !DILocation(line: 1992, column: 9, scope: !4505)
!4514 = !DILocation(line: 1992, column: 32, scope: !4505)
!4515 = !DILocation(line: 1992, column: 17, scope: !4505)
!4516 = !DILocalVariable(name: "v2d", scope: !4505, file: !3, line: 1993, type: !2037)
!4517 = !DILocation(line: 1993, column: 10, scope: !4505)
!4518 = !DILocation(line: 1993, column: 38, scope: !4505)
!4519 = !DILocation(line: 1993, column: 16, scope: !4505)
!4520 = !DILocalVariable(name: "cut_side", scope: !4505, file: !3, line: 1995, type: !15)
!4521 = !DILocation(line: 1995, column: 6, scope: !4505)
!4522 = !DILocalVariable(name: "cut_frame", scope: !4505, file: !3, line: 1996, type: !15)
!4523 = !DILocation(line: 1996, column: 6, scope: !4505)
!4524 = !DILocation(line: 1996, column: 18, scope: !4505)
!4525 = !DILocation(line: 1998, column: 35, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 1998, column: 6)
!4527 = !DILocation(line: 1998, column: 6, scope: !4526)
!4528 = !DILocation(line: 1998, column: 38, scope: !4526)
!4529 = !DILocation(line: 1998, column: 41, scope: !4526)
!4530 = !DILocation(line: 1998, column: 6, scope: !4505)
!4531 = !DILocation(line: 1999, column: 31, scope: !4526)
!4532 = !DILocation(line: 1999, column: 36, scope: !4526)
!4533 = !DILocation(line: 1999, column: 43, scope: !4526)
!4534 = !DILocation(line: 1999, column: 52, scope: !4526)
!4535 = !DILocation(line: 1999, column: 14, scope: !4526)
!4536 = !DILocation(line: 1999, column: 12, scope: !4526)
!4537 = !DILocation(line: 1999, column: 3, scope: !4526)
!4538 = !DILocation(line: 2001, column: 14, scope: !4505)
!4539 = !DILocation(line: 2001, column: 18, scope: !4505)
!4540 = !DILocation(line: 2001, column: 32, scope: !4505)
!4541 = !DILocation(line: 2001, column: 2, scope: !4505)
!4542 = !DILocation(line: 2002, column: 15, scope: !4505)
!4543 = !DILocation(line: 2002, column: 19, scope: !4505)
!4544 = !DILocation(line: 2002, column: 32, scope: !4505)
!4545 = !DILocation(line: 2002, column: 2, scope: !4505)
!4546 = !DILocation(line: 2005, column: 28, scope: !4505)
!4547 = !DILocation(line: 2005, column: 31, scope: !4505)
!4548 = !DILocation(line: 2005, column: 9, scope: !4505)
!4549 = !DILocation(line: 2005, column: 2, scope: !4505)
!4550 = distinct !DISubprogram(name: "sequencer_cut_exec", scope: !3, file: !3, line: 1929, type: !2748, scopeLine: 1930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4551 = !DILocalVariable(name: "C", arg: 1, scope: !4550, file: !3, line: 1929, type: !2329)
!4552 = !DILocation(line: 1929, column: 41, scope: !4550)
!4553 = !DILocalVariable(name: "op", arg: 2, scope: !4550, file: !3, line: 1929, type: !2750)
!4554 = !DILocation(line: 1929, column: 56, scope: !4550)
!4555 = !DILocalVariable(name: "scene", scope: !4550, file: !3, line: 1931, type: !1540)
!4556 = !DILocation(line: 1931, column: 9, scope: !4550)
!4557 = !DILocation(line: 1931, column: 32, scope: !4550)
!4558 = !DILocation(line: 1931, column: 17, scope: !4550)
!4559 = !DILocalVariable(name: "ed", scope: !4550, file: !3, line: 1932, type: !1843)
!4560 = !DILocation(line: 1932, column: 11, scope: !4550)
!4561 = !DILocation(line: 1932, column: 42, scope: !4550)
!4562 = !DILocation(line: 1932, column: 16, scope: !4550)
!4563 = !DILocalVariable(name: "cut_side", scope: !4550, file: !3, line: 1933, type: !15)
!4564 = !DILocation(line: 1933, column: 6, scope: !4550)
!4565 = !DILocalVariable(name: "cut_hard", scope: !4550, file: !3, line: 1933, type: !15)
!4566 = !DILocation(line: 1933, column: 16, scope: !4550)
!4567 = !DILocalVariable(name: "cut_frame", scope: !4550, file: !3, line: 1933, type: !15)
!4568 = !DILocation(line: 1933, column: 26, scope: !4550)
!4569 = !DILocalVariable(name: "changed", scope: !4550, file: !3, line: 1935, type: !605)
!4570 = !DILocation(line: 1935, column: 7, scope: !4550)
!4571 = !DILocation(line: 1937, column: 26, scope: !4550)
!4572 = !DILocation(line: 1937, column: 30, scope: !4550)
!4573 = !DILocation(line: 1937, column: 14, scope: !4550)
!4574 = !DILocation(line: 1937, column: 12, scope: !4550)
!4575 = !DILocation(line: 1938, column: 26, scope: !4550)
!4576 = !DILocation(line: 1938, column: 30, scope: !4550)
!4577 = !DILocation(line: 1938, column: 13, scope: !4550)
!4578 = !DILocation(line: 1938, column: 11, scope: !4550)
!4579 = !DILocation(line: 1939, column: 26, scope: !4550)
!4580 = !DILocation(line: 1939, column: 30, scope: !4550)
!4581 = !DILocation(line: 1939, column: 13, scope: !4550)
!4582 = !DILocation(line: 1939, column: 11, scope: !4550)
!4583 = !DILocation(line: 1941, column: 6, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 1941, column: 6)
!4585 = !DILocation(line: 1941, column: 15, scope: !4584)
!4586 = !DILocation(line: 1941, column: 6, scope: !4550)
!4587 = !DILocation(line: 1942, column: 26, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 1941, column: 32)
!4589 = !DILocation(line: 1942, column: 33, scope: !4588)
!4590 = !DILocation(line: 1942, column: 37, scope: !4588)
!4591 = !DILocation(line: 1942, column: 47, scope: !4588)
!4592 = !DILocation(line: 1942, column: 13, scope: !4588)
!4593 = !DILocation(line: 1942, column: 11, scope: !4588)
!4594 = !DILocation(line: 1943, column: 2, scope: !4588)
!4595 = !DILocation(line: 1945, column: 26, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 1944, column: 7)
!4597 = !DILocation(line: 1945, column: 33, scope: !4596)
!4598 = !DILocation(line: 1945, column: 37, scope: !4596)
!4599 = !DILocation(line: 1945, column: 47, scope: !4596)
!4600 = !DILocation(line: 1945, column: 13, scope: !4596)
!4601 = !DILocation(line: 1945, column: 11, scope: !4596)
!4602 = !DILocation(line: 1948, column: 6, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 1948, column: 6)
!4604 = !DILocation(line: 1948, column: 6, scope: !4550)
!4605 = !DILocalVariable(name: "seq", scope: !4606, file: !3, line: 1949, type: !269)
!4606 = distinct !DILexicalBlock(scope: !4603, file: !3, line: 1948, column: 15)
!4607 = !DILocation(line: 1949, column: 13, scope: !4606)
!4608 = !DILocation(line: 1951, column: 7, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 1951, column: 7)
!4610 = !DILocation(line: 1951, column: 16, scope: !4609)
!4611 = !DILocation(line: 1951, column: 7, scope: !4606)
!4612 = !DILocalVariable(name: "iter_macro", scope: !4613, file: !3, line: 1952, type: !2255)
!4613 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 1952, column: 4)
!4614 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 1951, column: 34)
!4615 = !DILocation(line: 1952, column: 4, scope: !4613)
!4616 = !DILocation(line: 1952, column: 4, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4613, file: !3, line: 1952, column: 4)
!4618 = !DILocation(line: 1952, column: 4, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4617, file: !3, line: 1952, column: 4)
!4620 = !DILocation(line: 1952, column: 4, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4619, file: !3, line: 1952, column: 4)
!4622 = !DILocation(line: 1954, column: 9, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 1954, column: 9)
!4624 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 1953, column: 4)
!4625 = !DILocation(line: 1954, column: 18, scope: !4623)
!4626 = !DILocation(line: 1954, column: 9, scope: !4624)
!4627 = !DILocation(line: 1955, column: 10, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1955, column: 10)
!4629 = distinct !DILexicalBlock(scope: !4623, file: !3, line: 1954, column: 36)
!4630 = !DILocation(line: 1955, column: 15, scope: !4628)
!4631 = !DILocation(line: 1955, column: 28, scope: !4628)
!4632 = !DILocation(line: 1955, column: 25, scope: !4628)
!4633 = !DILocation(line: 1955, column: 10, scope: !4629)
!4634 = !DILocation(line: 1956, column: 7, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 1955, column: 39)
!4636 = !DILocation(line: 1956, column: 12, scope: !4635)
!4637 = !DILocation(line: 1956, column: 17, scope: !4635)
!4638 = !DILocation(line: 1957, column: 6, scope: !4635)
!4639 = !DILocation(line: 1958, column: 5, scope: !4629)
!4640 = !DILocation(line: 1960, column: 10, scope: !4641)
!4641 = distinct !DILexicalBlock(scope: !4642, file: !3, line: 1960, column: 10)
!4642 = distinct !DILexicalBlock(scope: !4623, file: !3, line: 1959, column: 10)
!4643 = !DILocation(line: 1960, column: 15, scope: !4641)
!4644 = !DILocation(line: 1960, column: 26, scope: !4641)
!4645 = !DILocation(line: 1960, column: 23, scope: !4641)
!4646 = !DILocation(line: 1960, column: 10, scope: !4642)
!4647 = !DILocation(line: 1961, column: 7, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 1960, column: 37)
!4649 = !DILocation(line: 1961, column: 12, scope: !4648)
!4650 = !DILocation(line: 1961, column: 17, scope: !4648)
!4651 = !DILocation(line: 1962, column: 6, scope: !4648)
!4652 = !DILocation(line: 1965, column: 4, scope: !4621)
!4653 = distinct !{!4653, !4616, !4654}
!4654 = !DILocation(line: 1965, column: 4, scope: !4617)
!4655 = !DILocation(line: 1965, column: 4, scope: !4613)
!4656 = !DILocation(line: 1966, column: 3, scope: !4614)
!4657 = !DILocalVariable(name: "iter_macro", scope: !4658, file: !3, line: 1968, type: !2255)
!4658 = distinct !DILexicalBlock(scope: !4606, file: !3, line: 1968, column: 3)
!4659 = !DILocation(line: 1968, column: 3, scope: !4658)
!4660 = !DILocation(line: 1968, column: 3, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 1968, column: 3)
!4662 = !DILocation(line: 1968, column: 3, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 1968, column: 3)
!4664 = !DILocation(line: 1968, column: 3, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 1968, column: 3)
!4666 = !DILocation(line: 1970, column: 8, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 1970, column: 8)
!4668 = distinct !DILexicalBlock(scope: !4665, file: !3, line: 1969, column: 3)
!4669 = !DILocation(line: 1970, column: 13, scope: !4667)
!4670 = !DILocation(line: 1970, column: 18, scope: !4667)
!4671 = !DILocation(line: 1970, column: 21, scope: !4667)
!4672 = !DILocation(line: 1970, column: 26, scope: !4667)
!4673 = !DILocation(line: 1970, column: 31, scope: !4667)
!4674 = !DILocation(line: 1970, column: 34, scope: !4667)
!4675 = !DILocation(line: 1970, column: 39, scope: !4667)
!4676 = !DILocation(line: 1970, column: 8, scope: !4668)
!4677 = !DILocation(line: 1971, column: 23, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1970, column: 45)
!4679 = !DILocation(line: 1971, column: 30, scope: !4678)
!4680 = !DILocation(line: 1971, column: 5, scope: !4678)
!4681 = !DILocation(line: 1972, column: 4, scope: !4678)
!4682 = !DILocation(line: 1974, column: 3, scope: !4665)
!4683 = distinct !{!4683, !4660, !4684}
!4684 = !DILocation(line: 1974, column: 3, scope: !4661)
!4685 = !DILocation(line: 1974, column: 3, scope: !4658)
!4686 = !DILocation(line: 1977, column: 22, scope: !4606)
!4687 = !DILocation(line: 1977, column: 3, scope: !4606)
!4688 = !DILocation(line: 1978, column: 2, scope: !4606)
!4689 = !DILocation(line: 1980, column: 6, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 1980, column: 6)
!4691 = !DILocation(line: 1980, column: 6, scope: !4550)
!4692 = !DILocation(line: 1981, column: 25, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1980, column: 15)
!4694 = !DILocation(line: 1981, column: 53, scope: !4693)
!4695 = !DILocation(line: 1981, column: 3, scope: !4693)
!4696 = !DILocation(line: 1982, column: 3, scope: !4693)
!4697 = !DILocation(line: 1985, column: 3, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4690, file: !3, line: 1984, column: 7)
!4699 = !DILocation(line: 1987, column: 1, scope: !4550)
!4700 = distinct !DISubprogram(name: "SEQUENCER_OT_duplicate", scope: !3, file: !3, line: 2069, type: !4701, scopeLine: 2070, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4701 = !DISubroutineType(types: !4702)
!4702 = !{null, !4703}
!4703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4704, size: 64)
!4704 = !DIDerivedType(tag: DW_TAG_typedef, name: "wmOperatorType", file: !1600, line: 568, baseType: !2601)
!4705 = !DILocalVariable(name: "ot", arg: 1, scope: !4700, file: !3, line: 2069, type: !4703)
!4706 = !DILocation(line: 2069, column: 45, scope: !4700)
!4707 = !DILocation(line: 2072, column: 2, scope: !4700)
!4708 = !DILocation(line: 2072, column: 6, scope: !4700)
!4709 = !DILocation(line: 2072, column: 11, scope: !4700)
!4710 = !DILocation(line: 2073, column: 2, scope: !4700)
!4711 = !DILocation(line: 2073, column: 6, scope: !4700)
!4712 = !DILocation(line: 2073, column: 13, scope: !4700)
!4713 = !DILocation(line: 2074, column: 2, scope: !4700)
!4714 = !DILocation(line: 2074, column: 6, scope: !4700)
!4715 = !DILocation(line: 2074, column: 18, scope: !4700)
!4716 = !DILocation(line: 2077, column: 2, scope: !4700)
!4717 = !DILocation(line: 2077, column: 6, scope: !4700)
!4718 = !DILocation(line: 2077, column: 11, scope: !4700)
!4719 = !DILocation(line: 2078, column: 2, scope: !4700)
!4720 = !DILocation(line: 2078, column: 6, scope: !4700)
!4721 = !DILocation(line: 2078, column: 11, scope: !4700)
!4722 = !DILocation(line: 2081, column: 2, scope: !4700)
!4723 = !DILocation(line: 2081, column: 6, scope: !4700)
!4724 = !DILocation(line: 2081, column: 11, scope: !4700)
!4725 = !DILocation(line: 2084, column: 15, scope: !4700)
!4726 = !DILocation(line: 2084, column: 19, scope: !4700)
!4727 = !DILocation(line: 2084, column: 2, scope: !4700)
!4728 = !DILocation(line: 2085, column: 1, scope: !4700)
!4729 = distinct !DISubprogram(name: "sequencer_add_duplicate_exec", scope: !3, file: !3, line: 2042, type: !2748, scopeLine: 2043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4730 = !DILocalVariable(name: "C", arg: 1, scope: !4729, file: !3, line: 2042, type: !2329)
!4731 = !DILocation(line: 2042, column: 51, scope: !4729)
!4732 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !4729, file: !3, line: 2042, type: !2750)
!4733 = !DILocation(line: 2042, column: 66, scope: !4729)
!4734 = !DILocalVariable(name: "scene", scope: !4729, file: !3, line: 2044, type: !1540)
!4735 = !DILocation(line: 2044, column: 9, scope: !4729)
!4736 = !DILocation(line: 2044, column: 32, scope: !4729)
!4737 = !DILocation(line: 2044, column: 17, scope: !4729)
!4738 = !DILocalVariable(name: "ed", scope: !4729, file: !3, line: 2045, type: !1843)
!4739 = !DILocation(line: 2045, column: 11, scope: !4729)
!4740 = !DILocation(line: 2045, column: 42, scope: !4729)
!4741 = !DILocation(line: 2045, column: 16, scope: !4729)
!4742 = !DILocalVariable(name: "nseqbase", scope: !4729, file: !3, line: 2047, type: !443)
!4743 = !DILocation(line: 2047, column: 11, scope: !4729)
!4744 = !DILocation(line: 2049, column: 6, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 2049, column: 6)
!4746 = !DILocation(line: 2049, column: 9, scope: !4745)
!4747 = !DILocation(line: 2049, column: 6, scope: !4729)
!4748 = !DILocation(line: 2050, column: 3, scope: !4745)
!4749 = !DILocation(line: 2052, column: 36, scope: !4729)
!4750 = !DILocation(line: 2052, column: 60, scope: !4729)
!4751 = !DILocation(line: 2052, column: 64, scope: !4729)
!4752 = !DILocation(line: 2052, column: 2, scope: !4729)
!4753 = !DILocation(line: 2054, column: 15, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4729, file: !3, line: 2054, column: 6)
!4755 = !DILocation(line: 2054, column: 6, scope: !4754)
!4756 = !DILocation(line: 2054, column: 6, scope: !4729)
!4757 = !DILocalVariable(name: "seq", scope: !4758, file: !3, line: 2055, type: !269)
!4758 = distinct !DILexicalBlock(scope: !4754, file: !3, line: 2054, column: 22)
!4759 = !DILocation(line: 2055, column: 13, scope: !4758)
!4760 = !DILocation(line: 2055, column: 28, scope: !4758)
!4761 = !DILocation(line: 2055, column: 19, scope: !4758)
!4762 = !DILocation(line: 2057, column: 22, scope: !4758)
!4763 = !DILocation(line: 2057, column: 26, scope: !4758)
!4764 = !DILocation(line: 2057, column: 3, scope: !4758)
!4765 = !DILocation(line: 2059, column: 3, scope: !4758)
!4766 = !DILocation(line: 2059, column: 10, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 2059, column: 3)
!4768 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 2059, column: 3)
!4769 = !DILocation(line: 2059, column: 3, scope: !4768)
!4770 = !DILocation(line: 2060, column: 34, scope: !4767)
!4771 = !DILocation(line: 2060, column: 61, scope: !4767)
!4772 = !DILocation(line: 2060, column: 4, scope: !4767)
!4773 = !DILocation(line: 2059, column: 21, scope: !4767)
!4774 = !DILocation(line: 2059, column: 26, scope: !4767)
!4775 = !DILocation(line: 2059, column: 19, scope: !4767)
!4776 = !DILocation(line: 2059, column: 3, scope: !4767)
!4777 = distinct !{!4777, !4769, !4778}
!4778 = !DILocation(line: 2060, column: 66, scope: !4768)
!4779 = !DILocation(line: 2062, column: 25, scope: !4758)
!4780 = !DILocation(line: 2062, column: 53, scope: !4758)
!4781 = !DILocation(line: 2062, column: 3, scope: !4758)
!4782 = !DILocation(line: 2063, column: 3, scope: !4758)
!4783 = !DILocation(line: 2066, column: 2, scope: !4729)
!4784 = !DILocation(line: 2067, column: 1, scope: !4729)
!4785 = distinct !DISubprogram(name: "SEQUENCER_OT_delete", scope: !3, file: !3, line: 2161, type: !4701, scopeLine: 2162, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4786 = !DILocalVariable(name: "ot", arg: 1, scope: !4785, file: !3, line: 2161, type: !4703)
!4787 = !DILocation(line: 2161, column: 42, scope: !4785)
!4788 = !DILocation(line: 2165, column: 2, scope: !4785)
!4789 = !DILocation(line: 2165, column: 6, scope: !4785)
!4790 = !DILocation(line: 2165, column: 11, scope: !4785)
!4791 = !DILocation(line: 2166, column: 2, scope: !4785)
!4792 = !DILocation(line: 2166, column: 6, scope: !4785)
!4793 = !DILocation(line: 2166, column: 13, scope: !4785)
!4794 = !DILocation(line: 2167, column: 2, scope: !4785)
!4795 = !DILocation(line: 2167, column: 6, scope: !4785)
!4796 = !DILocation(line: 2167, column: 18, scope: !4785)
!4797 = !DILocation(line: 2170, column: 2, scope: !4785)
!4798 = !DILocation(line: 2170, column: 6, scope: !4785)
!4799 = !DILocation(line: 2170, column: 13, scope: !4785)
!4800 = !DILocation(line: 2171, column: 2, scope: !4785)
!4801 = !DILocation(line: 2171, column: 6, scope: !4785)
!4802 = !DILocation(line: 2171, column: 11, scope: !4785)
!4803 = !DILocation(line: 2172, column: 2, scope: !4785)
!4804 = !DILocation(line: 2172, column: 6, scope: !4785)
!4805 = !DILocation(line: 2172, column: 11, scope: !4785)
!4806 = !DILocation(line: 2175, column: 2, scope: !4785)
!4807 = !DILocation(line: 2175, column: 6, scope: !4785)
!4808 = !DILocation(line: 2175, column: 11, scope: !4785)
!4809 = !DILocation(line: 2176, column: 1, scope: !4785)
!4810 = distinct !DISubprogram(name: "sequencer_delete_invoke", scope: !3, file: !3, line: 2146, type: !3001, scopeLine: 2147, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4811 = !DILocalVariable(name: "C", arg: 1, scope: !4810, file: !3, line: 2146, type: !2329)
!4812 = !DILocation(line: 2146, column: 46, scope: !4810)
!4813 = !DILocalVariable(name: "op", arg: 2, scope: !4810, file: !3, line: 2146, type: !2750)
!4814 = !DILocation(line: 2146, column: 61, scope: !4810)
!4815 = !DILocalVariable(name: "event", arg: 3, scope: !4810, file: !3, line: 2146, type: !3003)
!4816 = !DILocation(line: 2146, column: 80, scope: !4810)
!4817 = !DILocalVariable(name: "ar", scope: !4810, file: !3, line: 2148, type: !4818)
!4818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4819, size: 64)
!4819 = !DIDerivedType(tag: DW_TAG_typedef, name: "ARegion", file: !204, line: 267, baseType: !4820)
!4820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ARegion", file: !204, line: 230, size: 3072, elements: !4821)
!4821 = !{!4822, !4824, !4825, !4826, !4827, !4828, !4829, !4830, !4831, !4832, !4833, !4834, !4835, !4836, !4837, !4838, !4839, !4840, !4841, !4842, !4843, !4846, !4847, !4848, !4849, !4850, !4851, !4852, !4853, !4854, !4855}
!4822 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4820, file: !204, line: 231, baseType: !4823, size: 64)
!4823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4820, size: 64)
!4824 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !4820, file: !204, line: 231, baseType: !4823, size: 64, offset: 64)
!4825 = !DIDerivedType(tag: DW_TAG_member, name: "v2d", scope: !4820, file: !204, line: 233, baseType: !1565, size: 1280, offset: 128)
!4826 = !DIDerivedType(tag: DW_TAG_member, name: "winrct", scope: !4820, file: !204, line: 234, baseType: !1082, size: 128, offset: 1408)
!4827 = !DIDerivedType(tag: DW_TAG_member, name: "drawrct", scope: !4820, file: !204, line: 235, baseType: !1082, size: 128, offset: 1536)
!4828 = !DIDerivedType(tag: DW_TAG_member, name: "winx", scope: !4820, file: !204, line: 236, baseType: !299, size: 16, offset: 1664)
!4829 = !DIDerivedType(tag: DW_TAG_member, name: "winy", scope: !4820, file: !204, line: 236, baseType: !299, size: 16, offset: 1680)
!4830 = !DIDerivedType(tag: DW_TAG_member, name: "swinid", scope: !4820, file: !204, line: 238, baseType: !299, size: 16, offset: 1696)
!4831 = !DIDerivedType(tag: DW_TAG_member, name: "regiontype", scope: !4820, file: !204, line: 239, baseType: !299, size: 16, offset: 1712)
!4832 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !4820, file: !204, line: 240, baseType: !299, size: 16, offset: 1728)
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !4820, file: !204, line: 241, baseType: !299, size: 16, offset: 1744)
!4834 = !DIDerivedType(tag: DW_TAG_member, name: "fsize", scope: !4820, file: !204, line: 243, baseType: !240, size: 32, offset: 1760)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "sizex", scope: !4820, file: !204, line: 244, baseType: !299, size: 16, offset: 1792)
!4836 = !DIDerivedType(tag: DW_TAG_member, name: "sizey", scope: !4820, file: !204, line: 244, baseType: !299, size: 16, offset: 1808)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw", scope: !4820, file: !204, line: 246, baseType: !299, size: 16, offset: 1824)
!4838 = !DIDerivedType(tag: DW_TAG_member, name: "do_draw_overlay", scope: !4820, file: !204, line: 247, baseType: !299, size: 16, offset: 1840)
!4839 = !DIDerivedType(tag: DW_TAG_member, name: "swap", scope: !4820, file: !204, line: 248, baseType: !299, size: 16, offset: 1856)
!4840 = !DIDerivedType(tag: DW_TAG_member, name: "overlap", scope: !4820, file: !204, line: 249, baseType: !299, size: 16, offset: 1872)
!4841 = !DIDerivedType(tag: DW_TAG_member, name: "flagfullscreen", scope: !4820, file: !204, line: 250, baseType: !299, size: 16, offset: 1888)
!4842 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !4820, file: !204, line: 251, baseType: !299, size: 16, offset: 1904)
!4843 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4820, file: !204, line: 253, baseType: !4844, size: 64, offset: 1920)
!4844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4845, size: 64)
!4845 = !DICompositeType(tag: DW_TAG_structure_type, name: "ARegionType", file: !204, line: 42, flags: DIFlagFwdDecl)
!4846 = !DIDerivedType(tag: DW_TAG_member, name: "uiblocks", scope: !4820, file: !204, line: 255, baseType: !443, size: 128, offset: 1984)
!4847 = !DIDerivedType(tag: DW_TAG_member, name: "panels", scope: !4820, file: !204, line: 256, baseType: !443, size: 128, offset: 2112)
!4848 = !DIDerivedType(tag: DW_TAG_member, name: "panels_category_active", scope: !4820, file: !204, line: 257, baseType: !443, size: 128, offset: 2240)
!4849 = !DIDerivedType(tag: DW_TAG_member, name: "ui_lists", scope: !4820, file: !204, line: 258, baseType: !443, size: 128, offset: 2368)
!4850 = !DIDerivedType(tag: DW_TAG_member, name: "ui_previews", scope: !4820, file: !204, line: 259, baseType: !443, size: 128, offset: 2496)
!4851 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !4820, file: !204, line: 260, baseType: !443, size: 128, offset: 2624)
!4852 = !DIDerivedType(tag: DW_TAG_member, name: "panels_category", scope: !4820, file: !204, line: 261, baseType: !443, size: 128, offset: 2752)
!4853 = !DIDerivedType(tag: DW_TAG_member, name: "regiontimer", scope: !4820, file: !204, line: 263, baseType: !1598, size: 64, offset: 2880)
!4854 = !DIDerivedType(tag: DW_TAG_member, name: "headerstr", scope: !4820, file: !204, line: 265, baseType: !554, size: 64, offset: 2944)
!4855 = !DIDerivedType(tag: DW_TAG_member, name: "regiondata", scope: !4820, file: !204, line: 266, baseType: !239, size: 64, offset: 3008)
!4856 = !DILocation(line: 2148, column: 11, scope: !4810)
!4857 = !DILocation(line: 2148, column: 30, scope: !4810)
!4858 = !DILocation(line: 2148, column: 16, scope: !4810)
!4859 = !DILocation(line: 2150, column: 6, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 2150, column: 6)
!4861 = !DILocation(line: 2150, column: 10, scope: !4860)
!4862 = !DILocation(line: 2150, column: 21, scope: !4860)
!4863 = !DILocation(line: 2150, column: 6, scope: !4810)
!4864 = !DILocation(line: 2154, column: 7, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 2154, column: 7)
!4866 = distinct !DILexicalBlock(scope: !4860, file: !3, line: 2150, column: 41)
!4867 = !DILocation(line: 2154, column: 14, scope: !4865)
!4868 = !DILocation(line: 2154, column: 22, scope: !4865)
!4869 = !DILocation(line: 2154, column: 7, scope: !4866)
!4870 = !DILocation(line: 2155, column: 4, scope: !4865)
!4871 = !DILocation(line: 2156, column: 2, scope: !4866)
!4872 = !DILocation(line: 2158, column: 29, scope: !4810)
!4873 = !DILocation(line: 2158, column: 32, scope: !4810)
!4874 = !DILocation(line: 2158, column: 36, scope: !4810)
!4875 = !DILocation(line: 2158, column: 9, scope: !4810)
!4876 = !DILocation(line: 2158, column: 2, scope: !4810)
!4877 = !DILocation(line: 2159, column: 1, scope: !4810)
!4878 = distinct !DISubprogram(name: "sequencer_delete_exec", scope: !3, file: !3, line: 2088, type: !2748, scopeLine: 2089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!4879 = !DILocalVariable(name: "C", arg: 1, scope: !4878, file: !3, line: 2088, type: !2329)
!4880 = !DILocation(line: 2088, column: 44, scope: !4878)
!4881 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !4878, file: !3, line: 2088, type: !2750)
!4882 = !DILocation(line: 2088, column: 59, scope: !4878)
!4883 = !DILocalVariable(name: "scene", scope: !4878, file: !3, line: 2090, type: !1540)
!4884 = !DILocation(line: 2090, column: 9, scope: !4878)
!4885 = !DILocation(line: 2090, column: 32, scope: !4878)
!4886 = !DILocation(line: 2090, column: 17, scope: !4878)
!4887 = !DILocalVariable(name: "ed", scope: !4878, file: !3, line: 2091, type: !1843)
!4888 = !DILocation(line: 2091, column: 11, scope: !4878)
!4889 = !DILocation(line: 2091, column: 42, scope: !4878)
!4890 = !DILocation(line: 2091, column: 16, scope: !4878)
!4891 = !DILocalVariable(name: "seq", scope: !4878, file: !3, line: 2092, type: !269)
!4892 = !DILocation(line: 2092, column: 12, scope: !4878)
!4893 = !DILocalVariable(name: "ms", scope: !4878, file: !3, line: 2093, type: !4894)
!4894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4895, size: 64)
!4895 = !DIDerivedType(tag: DW_TAG_typedef, name: "MetaStack", file: !14, line: 198, baseType: !4896)
!4896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MetaStack", file: !14, line: 192, size: 320, elements: !4897)
!4897 = !{!4898, !4900, !4901, !4902, !4903}
!4898 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4896, file: !14, line: 193, baseType: !4899, size: 64)
!4899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4896, size: 64)
!4900 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !4896, file: !14, line: 193, baseType: !4899, size: 64, offset: 64)
!4901 = !DIDerivedType(tag: DW_TAG_member, name: "oldbasep", scope: !4896, file: !14, line: 194, baseType: !572, size: 64, offset: 128)
!4902 = !DIDerivedType(tag: DW_TAG_member, name: "parseq", scope: !4896, file: !14, line: 195, baseType: !269, size: 64, offset: 192)
!4903 = !DIDerivedType(tag: DW_TAG_member, name: "disp_range", scope: !4896, file: !14, line: 197, baseType: !246, size: 64, offset: 256)
!4904 = !DILocation(line: 2093, column: 13, scope: !4878)
!4905 = !DILocalVariable(name: "nothingSelected", scope: !4878, file: !3, line: 2094, type: !605)
!4906 = !DILocation(line: 2094, column: 7, scope: !4878)
!4907 = !DILocation(line: 2096, column: 33, scope: !4878)
!4908 = !DILocation(line: 2096, column: 8, scope: !4878)
!4909 = !DILocation(line: 2096, column: 6, scope: !4878)
!4910 = !DILocation(line: 2097, column: 6, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 2097, column: 6)
!4912 = !DILocation(line: 2097, column: 10, scope: !4911)
!4913 = !DILocation(line: 2097, column: 13, scope: !4911)
!4914 = !DILocation(line: 2097, column: 18, scope: !4911)
!4915 = !DILocation(line: 2097, column: 23, scope: !4911)
!4916 = !DILocation(line: 2097, column: 6, scope: !4878)
!4917 = !DILocation(line: 2098, column: 19, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 2097, column: 33)
!4919 = !DILocation(line: 2099, column: 2, scope: !4918)
!4920 = !DILocation(line: 2101, column: 14, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4922, file: !3, line: 2101, column: 3)
!4922 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 2100, column: 7)
!4923 = !DILocation(line: 2101, column: 18, scope: !4921)
!4924 = !DILocation(line: 2101, column: 28, scope: !4921)
!4925 = !DILocation(line: 2101, column: 12, scope: !4921)
!4926 = !DILocation(line: 2101, column: 8, scope: !4921)
!4927 = !DILocation(line: 2101, column: 35, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 2101, column: 3)
!4929 = !DILocation(line: 2101, column: 3, scope: !4921)
!4930 = !DILocation(line: 2102, column: 8, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 2102, column: 8)
!4932 = distinct !DILexicalBlock(scope: !4928, file: !3, line: 2101, column: 57)
!4933 = !DILocation(line: 2102, column: 13, scope: !4931)
!4934 = !DILocation(line: 2102, column: 18, scope: !4931)
!4935 = !DILocation(line: 2102, column: 8, scope: !4932)
!4936 = !DILocation(line: 2103, column: 21, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4931, file: !3, line: 2102, column: 28)
!4938 = !DILocation(line: 2104, column: 5, scope: !4937)
!4939 = !DILocation(line: 2106, column: 3, scope: !4932)
!4940 = !DILocation(line: 2101, column: 46, scope: !4928)
!4941 = !DILocation(line: 2101, column: 51, scope: !4928)
!4942 = !DILocation(line: 2101, column: 44, scope: !4928)
!4943 = !DILocation(line: 2101, column: 3, scope: !4928)
!4944 = distinct !{!4944, !4929, !4945}
!4945 = !DILocation(line: 2106, column: 3, scope: !4921)
!4946 = !DILocation(line: 2109, column: 6, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 2109, column: 6)
!4948 = !DILocation(line: 2109, column: 6, scope: !4878)
!4949 = !DILocation(line: 2110, column: 3, scope: !4947)
!4950 = !DILocation(line: 2113, column: 13, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 2113, column: 2)
!4952 = !DILocation(line: 2113, column: 17, scope: !4951)
!4953 = !DILocation(line: 2113, column: 27, scope: !4951)
!4954 = !DILocation(line: 2113, column: 11, scope: !4951)
!4955 = !DILocation(line: 2113, column: 7, scope: !4951)
!4956 = !DILocation(line: 2113, column: 34, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 2113, column: 2)
!4958 = !DILocation(line: 2113, column: 2, scope: !4951)
!4959 = !DILocation(line: 2114, column: 9, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 2114, column: 7)
!4961 = distinct !DILexicalBlock(scope: !4957, file: !3, line: 2113, column: 56)
!4962 = !DILocation(line: 2114, column: 14, scope: !4960)
!4963 = !DILocation(line: 2114, column: 19, scope: !4960)
!4964 = !DILocation(line: 2114, column: 7, scope: !4961)
!4965 = !DILocation(line: 2115, column: 9, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4967, file: !3, line: 2115, column: 8)
!4967 = distinct !DILexicalBlock(scope: !4960, file: !3, line: 2114, column: 30)
!4968 = !DILocation(line: 2115, column: 14, scope: !4966)
!4969 = !DILocation(line: 2115, column: 19, scope: !4966)
!4970 = !DILocation(line: 2115, column: 8, scope: !4967)
!4971 = !DILocation(line: 2116, column: 33, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 2115, column: 39)
!4973 = !DILocation(line: 2116, column: 40, scope: !4972)
!4974 = !DILocation(line: 2116, column: 5, scope: !4972)
!4975 = !DILocation(line: 2117, column: 4, scope: !4972)
!4976 = !DILocation(line: 2118, column: 3, scope: !4967)
!4977 = !DILocation(line: 2120, column: 35, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4960, file: !3, line: 2119, column: 8)
!4979 = !DILocation(line: 2120, column: 42, scope: !4978)
!4980 = !DILocation(line: 2120, column: 4, scope: !4978)
!4981 = !DILocation(line: 2122, column: 2, scope: !4961)
!4982 = !DILocation(line: 2113, column: 45, scope: !4957)
!4983 = !DILocation(line: 2113, column: 50, scope: !4957)
!4984 = !DILocation(line: 2113, column: 43, scope: !4957)
!4985 = !DILocation(line: 2113, column: 2, scope: !4957)
!4986 = distinct !{!4986, !4958, !4987}
!4987 = !DILocation(line: 2122, column: 2, scope: !4951)
!4988 = !DILocation(line: 2125, column: 22, scope: !4878)
!4989 = !DILocation(line: 2125, column: 29, scope: !4878)
!4990 = !DILocation(line: 2125, column: 33, scope: !4878)
!4991 = !DILocation(line: 2125, column: 2, scope: !4878)
!4992 = !DILocation(line: 2128, column: 8, scope: !4878)
!4993 = !DILocation(line: 2128, column: 12, scope: !4878)
!4994 = !DILocation(line: 2128, column: 22, scope: !4878)
!4995 = !DILocation(line: 2128, column: 6, scope: !4878)
!4996 = !DILocation(line: 2129, column: 2, scope: !4878)
!4997 = !DILocation(line: 2129, column: 9, scope: !4878)
!4998 = !DILocation(line: 2130, column: 21, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 2129, column: 14)
!5000 = !DILocation(line: 2130, column: 28, scope: !4999)
!5001 = !DILocation(line: 2130, column: 3, scope: !4999)
!5002 = !DILocation(line: 2131, column: 9, scope: !4999)
!5003 = !DILocation(line: 2131, column: 14, scope: !4999)
!5004 = !DILocation(line: 2131, column: 7, scope: !4999)
!5005 = distinct !{!5005, !4996, !5006}
!5006 = !DILocation(line: 2132, column: 2, scope: !4878)
!5007 = !DILocation(line: 2135, column: 7, scope: !4878)
!5008 = !DILocation(line: 2135, column: 11, scope: !4878)
!5009 = !DILocation(line: 2135, column: 21, scope: !4878)
!5010 = !DILocation(line: 2135, column: 5, scope: !4878)
!5011 = !DILocation(line: 2136, column: 2, scope: !4878)
!5012 = !DILocation(line: 2136, column: 9, scope: !4878)
!5013 = !DILocation(line: 2137, column: 21, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 2136, column: 13)
!5015 = !DILocation(line: 2137, column: 28, scope: !5014)
!5016 = !DILocation(line: 2137, column: 32, scope: !5014)
!5017 = !DILocation(line: 2137, column: 3, scope: !5014)
!5018 = !DILocation(line: 2138, column: 8, scope: !5014)
!5019 = !DILocation(line: 2138, column: 12, scope: !5014)
!5020 = !DILocation(line: 2138, column: 6, scope: !5014)
!5021 = distinct !{!5021, !5011, !5022}
!5022 = !DILocation(line: 2139, column: 2, scope: !4878)
!5023 = !DILocation(line: 2141, column: 24, scope: !4878)
!5024 = !DILocation(line: 2141, column: 52, scope: !4878)
!5025 = !DILocation(line: 2141, column: 2, scope: !4878)
!5026 = !DILocation(line: 2143, column: 2, scope: !4878)
!5027 = !DILocation(line: 2144, column: 1, scope: !4878)
!5028 = distinct !DISubprogram(name: "SEQUENCER_OT_offset_clear", scope: !3, file: !3, line: 2214, type: !4701, scopeLine: 2215, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5029 = !DILocalVariable(name: "ot", arg: 1, scope: !5028, file: !3, line: 2214, type: !4703)
!5030 = !DILocation(line: 2214, column: 48, scope: !5028)
!5031 = !DILocation(line: 2218, column: 2, scope: !5028)
!5032 = !DILocation(line: 2218, column: 6, scope: !5028)
!5033 = !DILocation(line: 2218, column: 11, scope: !5028)
!5034 = !DILocation(line: 2219, column: 2, scope: !5028)
!5035 = !DILocation(line: 2219, column: 6, scope: !5028)
!5036 = !DILocation(line: 2219, column: 13, scope: !5028)
!5037 = !DILocation(line: 2220, column: 2, scope: !5028)
!5038 = !DILocation(line: 2220, column: 6, scope: !5028)
!5039 = !DILocation(line: 2220, column: 18, scope: !5028)
!5040 = !DILocation(line: 2223, column: 2, scope: !5028)
!5041 = !DILocation(line: 2223, column: 6, scope: !5028)
!5042 = !DILocation(line: 2223, column: 11, scope: !5028)
!5043 = !DILocation(line: 2224, column: 2, scope: !5028)
!5044 = !DILocation(line: 2224, column: 6, scope: !5028)
!5045 = !DILocation(line: 2224, column: 11, scope: !5028)
!5046 = !DILocation(line: 2227, column: 2, scope: !5028)
!5047 = !DILocation(line: 2227, column: 6, scope: !5028)
!5048 = !DILocation(line: 2227, column: 11, scope: !5028)
!5049 = !DILocation(line: 2228, column: 1, scope: !5028)
!5050 = distinct !DISubprogram(name: "sequencer_offset_clear_exec", scope: !3, file: !3, line: 2180, type: !2748, scopeLine: 2181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5051 = !DILocalVariable(name: "C", arg: 1, scope: !5050, file: !3, line: 2180, type: !2329)
!5052 = !DILocation(line: 2180, column: 50, scope: !5050)
!5053 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !5050, file: !3, line: 2180, type: !2750)
!5054 = !DILocation(line: 2180, column: 65, scope: !5050)
!5055 = !DILocalVariable(name: "scene", scope: !5050, file: !3, line: 2182, type: !1540)
!5056 = !DILocation(line: 2182, column: 9, scope: !5050)
!5057 = !DILocation(line: 2182, column: 32, scope: !5050)
!5058 = !DILocation(line: 2182, column: 17, scope: !5050)
!5059 = !DILocalVariable(name: "ed", scope: !5050, file: !3, line: 2183, type: !1843)
!5060 = !DILocation(line: 2183, column: 11, scope: !5050)
!5061 = !DILocation(line: 2183, column: 42, scope: !5050)
!5062 = !DILocation(line: 2183, column: 16, scope: !5050)
!5063 = !DILocalVariable(name: "seq", scope: !5050, file: !3, line: 2184, type: !269)
!5064 = !DILocation(line: 2184, column: 12, scope: !5050)
!5065 = !DILocation(line: 2187, column: 13, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 2187, column: 2)
!5067 = !DILocation(line: 2187, column: 17, scope: !5066)
!5068 = !DILocation(line: 2187, column: 27, scope: !5066)
!5069 = !DILocation(line: 2187, column: 11, scope: !5066)
!5070 = !DILocation(line: 2187, column: 7, scope: !5066)
!5071 = !DILocation(line: 2187, column: 34, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 2187, column: 2)
!5073 = !DILocation(line: 2187, column: 2, scope: !5066)
!5074 = !DILocation(line: 2188, column: 8, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 2188, column: 7)
!5076 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2187, column: 56)
!5077 = !DILocation(line: 2188, column: 13, scope: !5075)
!5078 = !DILocation(line: 2188, column: 18, scope: !5075)
!5079 = !DILocation(line: 2188, column: 37, scope: !5075)
!5080 = !DILocation(line: 2188, column: 42, scope: !5075)
!5081 = !DILocation(line: 2188, column: 46, scope: !5075)
!5082 = !DILocation(line: 2188, column: 51, scope: !5075)
!5083 = !DILocation(line: 2188, column: 56, scope: !5075)
!5084 = !DILocation(line: 2188, column: 7, scope: !5076)
!5085 = !DILocation(line: 2189, column: 52, scope: !5086)
!5086 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 2188, column: 67)
!5087 = !DILocation(line: 2189, column: 57, scope: !5086)
!5088 = !DILocation(line: 2189, column: 66, scope: !5086)
!5089 = !DILocation(line: 2189, column: 34, scope: !5086)
!5090 = !DILocation(line: 2189, column: 39, scope: !5086)
!5091 = !DILocation(line: 2189, column: 50, scope: !5086)
!5092 = !DILocation(line: 2189, column: 20, scope: !5086)
!5093 = !DILocation(line: 2189, column: 25, scope: !5086)
!5094 = !DILocation(line: 2189, column: 32, scope: !5086)
!5095 = !DILocation(line: 2189, column: 4, scope: !5086)
!5096 = !DILocation(line: 2189, column: 9, scope: !5086)
!5097 = !DILocation(line: 2189, column: 18, scope: !5086)
!5098 = !DILocation(line: 2190, column: 3, scope: !5086)
!5099 = !DILocation(line: 2191, column: 2, scope: !5076)
!5100 = !DILocation(line: 2187, column: 45, scope: !5072)
!5101 = !DILocation(line: 2187, column: 50, scope: !5072)
!5102 = !DILocation(line: 2187, column: 43, scope: !5072)
!5103 = !DILocation(line: 2187, column: 2, scope: !5072)
!5104 = distinct !{!5104, !5073, !5105}
!5105 = !DILocation(line: 2191, column: 2, scope: !5066)
!5106 = !DILocation(line: 2194, column: 8, scope: !5050)
!5107 = !DILocation(line: 2194, column: 12, scope: !5050)
!5108 = !DILocation(line: 2194, column: 22, scope: !5050)
!5109 = !DILocation(line: 2194, column: 6, scope: !5050)
!5110 = !DILocation(line: 2195, column: 2, scope: !5050)
!5111 = !DILocation(line: 2195, column: 9, scope: !5050)
!5112 = !DILocation(line: 2196, column: 21, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 2195, column: 14)
!5114 = !DILocation(line: 2196, column: 28, scope: !5113)
!5115 = !DILocation(line: 2196, column: 3, scope: !5113)
!5116 = !DILocation(line: 2197, column: 9, scope: !5113)
!5117 = !DILocation(line: 2197, column: 14, scope: !5113)
!5118 = !DILocation(line: 2197, column: 7, scope: !5113)
!5119 = distinct !{!5119, !5110, !5120}
!5120 = !DILocation(line: 2198, column: 2, scope: !5050)
!5121 = !DILocation(line: 2200, column: 13, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5050, file: !3, line: 2200, column: 2)
!5123 = !DILocation(line: 2200, column: 17, scope: !5122)
!5124 = !DILocation(line: 2200, column: 27, scope: !5122)
!5125 = !DILocation(line: 2200, column: 11, scope: !5122)
!5126 = !DILocation(line: 2200, column: 7, scope: !5122)
!5127 = !DILocation(line: 2200, column: 34, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 2200, column: 2)
!5129 = !DILocation(line: 2200, column: 2, scope: !5122)
!5130 = !DILocation(line: 2201, column: 8, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5132, file: !3, line: 2201, column: 7)
!5132 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 2200, column: 56)
!5133 = !DILocation(line: 2201, column: 13, scope: !5131)
!5134 = !DILocation(line: 2201, column: 18, scope: !5131)
!5135 = !DILocation(line: 2201, column: 37, scope: !5131)
!5136 = !DILocation(line: 2201, column: 42, scope: !5131)
!5137 = !DILocation(line: 2201, column: 46, scope: !5131)
!5138 = !DILocation(line: 2201, column: 51, scope: !5131)
!5139 = !DILocation(line: 2201, column: 56, scope: !5131)
!5140 = !DILocation(line: 2201, column: 7, scope: !5132)
!5141 = !DILocation(line: 2202, column: 34, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 2202, column: 8)
!5143 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 2201, column: 67)
!5144 = !DILocation(line: 2202, column: 38, scope: !5142)
!5145 = !DILocation(line: 2202, column: 48, scope: !5142)
!5146 = !DILocation(line: 2202, column: 8, scope: !5142)
!5147 = !DILocation(line: 2202, column: 8, scope: !5143)
!5148 = !DILocation(line: 2203, column: 31, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 2202, column: 54)
!5150 = !DILocation(line: 2203, column: 35, scope: !5149)
!5151 = !DILocation(line: 2203, column: 45, scope: !5149)
!5152 = !DILocation(line: 2203, column: 50, scope: !5149)
!5153 = !DILocation(line: 2203, column: 5, scope: !5149)
!5154 = !DILocation(line: 2204, column: 4, scope: !5149)
!5155 = !DILocation(line: 2205, column: 3, scope: !5143)
!5156 = !DILocation(line: 2206, column: 2, scope: !5132)
!5157 = !DILocation(line: 2200, column: 45, scope: !5128)
!5158 = !DILocation(line: 2200, column: 50, scope: !5128)
!5159 = !DILocation(line: 2200, column: 43, scope: !5128)
!5160 = !DILocation(line: 2200, column: 2, scope: !5128)
!5161 = distinct !{!5161, !5129, !5162}
!5162 = !DILocation(line: 2206, column: 2, scope: !5122)
!5163 = !DILocation(line: 2208, column: 24, scope: !5050)
!5164 = !DILocation(line: 2208, column: 52, scope: !5050)
!5165 = !DILocation(line: 2208, column: 2, scope: !5050)
!5166 = !DILocation(line: 2210, column: 2, scope: !5050)
!5167 = distinct !DISubprogram(name: "SEQUENCER_OT_images_separate", scope: !3, file: !3, line: 2313, type: !4701, scopeLine: 2314, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5168 = !DILocalVariable(name: "ot", arg: 1, scope: !5167, file: !3, line: 2313, type: !4703)
!5169 = !DILocation(line: 2313, column: 51, scope: !5167)
!5170 = !DILocation(line: 2316, column: 2, scope: !5167)
!5171 = !DILocation(line: 2316, column: 6, scope: !5167)
!5172 = !DILocation(line: 2316, column: 11, scope: !5167)
!5173 = !DILocation(line: 2317, column: 2, scope: !5167)
!5174 = !DILocation(line: 2317, column: 6, scope: !5167)
!5175 = !DILocation(line: 2317, column: 13, scope: !5167)
!5176 = !DILocation(line: 2318, column: 2, scope: !5167)
!5177 = !DILocation(line: 2318, column: 6, scope: !5167)
!5178 = !DILocation(line: 2318, column: 18, scope: !5167)
!5179 = !DILocation(line: 2321, column: 2, scope: !5167)
!5180 = !DILocation(line: 2321, column: 6, scope: !5167)
!5181 = !DILocation(line: 2321, column: 11, scope: !5167)
!5182 = !DILocation(line: 2322, column: 2, scope: !5167)
!5183 = !DILocation(line: 2322, column: 6, scope: !5167)
!5184 = !DILocation(line: 2322, column: 13, scope: !5167)
!5185 = !DILocation(line: 2323, column: 2, scope: !5167)
!5186 = !DILocation(line: 2323, column: 6, scope: !5167)
!5187 = !DILocation(line: 2323, column: 11, scope: !5167)
!5188 = !DILocation(line: 2326, column: 2, scope: !5167)
!5189 = !DILocation(line: 2326, column: 6, scope: !5167)
!5190 = !DILocation(line: 2326, column: 11, scope: !5167)
!5191 = !DILocation(line: 2328, column: 14, scope: !5167)
!5192 = !DILocation(line: 2328, column: 18, scope: !5167)
!5193 = !DILocation(line: 2328, column: 2, scope: !5167)
!5194 = !DILocation(line: 2329, column: 1, scope: !5167)
!5195 = distinct !DISubprogram(name: "sequencer_separate_images_exec", scope: !3, file: !3, line: 2232, type: !2748, scopeLine: 2233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5196 = !DILocalVariable(name: "C", arg: 1, scope: !5195, file: !3, line: 2232, type: !2329)
!5197 = !DILocation(line: 2232, column: 53, scope: !5195)
!5198 = !DILocalVariable(name: "op", arg: 2, scope: !5195, file: !3, line: 2232, type: !2750)
!5199 = !DILocation(line: 2232, column: 68, scope: !5195)
!5200 = !DILocalVariable(name: "scene", scope: !5195, file: !3, line: 2234, type: !1540)
!5201 = !DILocation(line: 2234, column: 9, scope: !5195)
!5202 = !DILocation(line: 2234, column: 32, scope: !5195)
!5203 = !DILocation(line: 2234, column: 17, scope: !5195)
!5204 = !DILocalVariable(name: "ed", scope: !5195, file: !3, line: 2235, type: !1843)
!5205 = !DILocation(line: 2235, column: 11, scope: !5195)
!5206 = !DILocation(line: 2235, column: 42, scope: !5195)
!5207 = !DILocation(line: 2235, column: 16, scope: !5195)
!5208 = !DILocalVariable(name: "seq", scope: !5195, file: !3, line: 2237, type: !269)
!5209 = !DILocation(line: 2237, column: 12, scope: !5195)
!5210 = !DILocalVariable(name: "seq_new", scope: !5195, file: !3, line: 2237, type: !269)
!5211 = !DILocation(line: 2237, column: 18, scope: !5195)
!5212 = !DILocalVariable(name: "strip_new", scope: !5195, file: !3, line: 2238, type: !304)
!5213 = !DILocation(line: 2238, column: 9, scope: !5195)
!5214 = !DILocalVariable(name: "se", scope: !5195, file: !3, line: 2239, type: !316)
!5215 = !DILocation(line: 2239, column: 13, scope: !5195)
!5216 = !DILocalVariable(name: "se_new", scope: !5195, file: !3, line: 2239, type: !316)
!5217 = !DILocation(line: 2239, column: 18, scope: !5195)
!5218 = !DILocalVariable(name: "start_ofs", scope: !5195, file: !3, line: 2240, type: !15)
!5219 = !DILocation(line: 2240, column: 6, scope: !5195)
!5220 = !DILocalVariable(name: "cfra", scope: !5195, file: !3, line: 2240, type: !15)
!5221 = !DILocation(line: 2240, column: 17, scope: !5195)
!5222 = !DILocalVariable(name: "frame_end", scope: !5195, file: !3, line: 2240, type: !15)
!5223 = !DILocation(line: 2240, column: 23, scope: !5195)
!5224 = !DILocalVariable(name: "step", scope: !5195, file: !3, line: 2241, type: !15)
!5225 = !DILocation(line: 2241, column: 6, scope: !5195)
!5226 = !DILocation(line: 2241, column: 25, scope: !5195)
!5227 = !DILocation(line: 2241, column: 29, scope: !5195)
!5228 = !DILocation(line: 2241, column: 13, scope: !5195)
!5229 = !DILocation(line: 2243, column: 8, scope: !5195)
!5230 = !DILocation(line: 2243, column: 12, scope: !5195)
!5231 = !DILocation(line: 2243, column: 22, scope: !5195)
!5232 = !DILocation(line: 2243, column: 6, scope: !5195)
!5233 = !DILocation(line: 2245, column: 2, scope: !5195)
!5234 = !DILocation(line: 2245, column: 9, scope: !5195)
!5235 = !DILocation(line: 2246, column: 8, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 2246, column: 7)
!5237 = distinct !DILexicalBlock(scope: !5195, file: !3, line: 2245, column: 14)
!5238 = !DILocation(line: 2246, column: 13, scope: !5236)
!5239 = !DILocation(line: 2246, column: 18, scope: !5236)
!5240 = !DILocation(line: 2246, column: 28, scope: !5236)
!5241 = !DILocation(line: 2246, column: 32, scope: !5236)
!5242 = !DILocation(line: 2246, column: 37, scope: !5236)
!5243 = !DILocation(line: 2246, column: 42, scope: !5236)
!5244 = !DILocation(line: 2246, column: 61, scope: !5236)
!5245 = !DILocation(line: 2246, column: 65, scope: !5236)
!5246 = !DILocation(line: 2246, column: 70, scope: !5236)
!5247 = !DILocation(line: 2246, column: 74, scope: !5236)
!5248 = !DILocation(line: 2246, column: 7, scope: !5237)
!5249 = !DILocalVariable(name: "seq_next", scope: !5250, file: !3, line: 2247, type: !269)
!5250 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 2246, column: 80)
!5251 = !DILocation(line: 2247, column: 14, scope: !5250)
!5252 = !DILocation(line: 2251, column: 16, scope: !5250)
!5253 = !DILocation(line: 2251, column: 20, scope: !5250)
!5254 = !DILocation(line: 2251, column: 30, scope: !5250)
!5255 = !DILocation(line: 2251, column: 4, scope: !5250)
!5256 = !DILocation(line: 2255, column: 54, scope: !5250)
!5257 = !DILocation(line: 2255, column: 23, scope: !5250)
!5258 = !DILocation(line: 2255, column: 21, scope: !5250)
!5259 = !DILocation(line: 2255, column: 14, scope: !5250)
!5260 = !DILocation(line: 2256, column: 48, scope: !5250)
!5261 = !DILocation(line: 2256, column: 16, scope: !5250)
!5262 = !DILocation(line: 2256, column: 14, scope: !5250)
!5263 = !DILocation(line: 2258, column: 4, scope: !5250)
!5264 = !DILocation(line: 2258, column: 11, scope: !5250)
!5265 = !DILocation(line: 2258, column: 18, scope: !5250)
!5266 = !DILocation(line: 2258, column: 16, scope: !5250)
!5267 = !DILocation(line: 2260, column: 39, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 2258, column: 29)
!5269 = !DILocation(line: 2260, column: 44, scope: !5268)
!5270 = !DILocation(line: 2260, column: 10, scope: !5268)
!5271 = !DILocation(line: 2260, column: 8, scope: !5268)
!5272 = !DILocation(line: 2262, column: 44, scope: !5268)
!5273 = !DILocation(line: 2262, column: 51, scope: !5268)
!5274 = !DILocation(line: 2262, column: 58, scope: !5268)
!5275 = !DILocation(line: 2262, column: 15, scope: !5268)
!5276 = !DILocation(line: 2262, column: 13, scope: !5268)
!5277 = !DILocation(line: 2263, column: 17, scope: !5268)
!5278 = !DILocation(line: 2263, column: 21, scope: !5268)
!5279 = !DILocation(line: 2263, column: 31, scope: !5268)
!5280 = !DILocation(line: 2263, column: 5, scope: !5268)
!5281 = !DILocation(line: 2265, column: 22, scope: !5268)
!5282 = !DILocation(line: 2265, column: 5, scope: !5268)
!5283 = !DILocation(line: 2265, column: 14, scope: !5268)
!5284 = !DILocation(line: 2265, column: 20, scope: !5268)
!5285 = !DILocation(line: 2266, column: 5, scope: !5268)
!5286 = !DILocation(line: 2266, column: 14, scope: !5268)
!5287 = !DILocation(line: 2266, column: 19, scope: !5268)
!5288 = !DILocation(line: 2267, column: 5, scope: !5268)
!5289 = !DILocation(line: 2267, column: 14, scope: !5268)
!5290 = !DILocation(line: 2267, column: 18, scope: !5268)
!5291 = !DILocation(line: 2268, column: 25, scope: !5268)
!5292 = !DILocation(line: 2268, column: 30, scope: !5268)
!5293 = !DILocation(line: 2268, column: 5, scope: !5268)
!5294 = !DILocation(line: 2268, column: 14, scope: !5268)
!5295 = !DILocation(line: 2268, column: 23, scope: !5268)
!5296 = !DILocation(line: 2271, column: 17, scope: !5268)
!5297 = !DILocation(line: 2271, column: 26, scope: !5268)
!5298 = !DILocation(line: 2271, column: 15, scope: !5268)
!5299 = !DILocation(line: 2272, column: 5, scope: !5268)
!5300 = !DILocation(line: 2272, column: 16, scope: !5268)
!5301 = !DILocation(line: 2272, column: 19, scope: !5268)
!5302 = !DILocation(line: 2276, column: 14, scope: !5268)
!5303 = !DILocation(line: 2276, column: 12, scope: !5268)
!5304 = !DILocation(line: 2277, column: 17, scope: !5268)
!5305 = !DILocation(line: 2277, column: 25, scope: !5268)
!5306 = !DILocation(line: 2277, column: 31, scope: !5268)
!5307 = !DILocation(line: 2277, column: 35, scope: !5268)
!5308 = !DILocation(line: 2277, column: 5, scope: !5268)
!5309 = !DILocation(line: 2278, column: 28, scope: !5268)
!5310 = !DILocation(line: 2278, column: 5, scope: !5268)
!5311 = !DILocation(line: 2278, column: 16, scope: !5268)
!5312 = !DILocation(line: 2278, column: 26, scope: !5268)
!5313 = !DILocation(line: 2280, column: 23, scope: !5268)
!5314 = !DILocation(line: 2280, column: 30, scope: !5268)
!5315 = !DILocation(line: 2280, column: 5, scope: !5268)
!5316 = !DILocation(line: 2282, column: 9, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5268, file: !3, line: 2282, column: 9)
!5318 = !DILocation(line: 2282, column: 14, scope: !5317)
!5319 = !DILocation(line: 2282, column: 9, scope: !5268)
!5320 = !DILocation(line: 2283, column: 6, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 2282, column: 19)
!5322 = !DILocation(line: 2283, column: 15, scope: !5321)
!5323 = !DILocation(line: 2283, column: 20, scope: !5321)
!5324 = !DILocation(line: 2284, column: 36, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 2284, column: 10)
!5326 = !DILocation(line: 2284, column: 40, scope: !5325)
!5327 = !DILocation(line: 2284, column: 50, scope: !5325)
!5328 = !DILocation(line: 2284, column: 10, scope: !5325)
!5329 = !DILocation(line: 2284, column: 10, scope: !5321)
!5330 = !DILocation(line: 2285, column: 33, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 2284, column: 60)
!5332 = !DILocation(line: 2285, column: 37, scope: !5331)
!5333 = !DILocation(line: 2285, column: 47, scope: !5331)
!5334 = !DILocation(line: 2285, column: 56, scope: !5331)
!5335 = !DILocation(line: 2285, column: 7, scope: !5331)
!5336 = !DILocation(line: 2286, column: 6, scope: !5331)
!5337 = !DILocation(line: 2287, column: 5, scope: !5321)
!5338 = !DILocation(line: 2291, column: 9, scope: !5268)
!5339 = !DILocation(line: 2292, column: 18, scope: !5268)
!5340 = !DILocation(line: 2292, column: 15, scope: !5268)
!5341 = distinct !{!5341, !5263, !5342}
!5342 = !DILocation(line: 2293, column: 4, scope: !5250)
!5343 = !DILocation(line: 2295, column: 15, scope: !5250)
!5344 = !DILocation(line: 2295, column: 20, scope: !5250)
!5345 = !DILocation(line: 2295, column: 13, scope: !5250)
!5346 = !DILocation(line: 2296, column: 22, scope: !5250)
!5347 = !DILocation(line: 2296, column: 29, scope: !5250)
!5348 = !DILocation(line: 2296, column: 4, scope: !5250)
!5349 = !DILocation(line: 2297, column: 10, scope: !5250)
!5350 = !DILocation(line: 2297, column: 8, scope: !5250)
!5351 = !DILocation(line: 2298, column: 3, scope: !5250)
!5352 = !DILocation(line: 2300, column: 10, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 2299, column: 8)
!5354 = !DILocation(line: 2300, column: 15, scope: !5353)
!5355 = !DILocation(line: 2300, column: 8, scope: !5353)
!5356 = distinct !{!5356, !5233, !5357}
!5357 = !DILocation(line: 2302, column: 2, scope: !5195)
!5358 = !DILocation(line: 2305, column: 21, scope: !5195)
!5359 = !DILocation(line: 2305, column: 2, scope: !5195)
!5360 = !DILocation(line: 2307, column: 24, scope: !5195)
!5361 = !DILocation(line: 2307, column: 52, scope: !5195)
!5362 = !DILocation(line: 2307, column: 2, scope: !5195)
!5363 = !DILocation(line: 2309, column: 2, scope: !5195)
!5364 = distinct !DISubprogram(name: "SEQUENCER_OT_meta_toggle", scope: !3, file: !3, line: 2403, type: !4701, scopeLine: 2404, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5365 = !DILocalVariable(name: "ot", arg: 1, scope: !5364, file: !3, line: 2403, type: !4703)
!5366 = !DILocation(line: 2403, column: 47, scope: !5364)
!5367 = !DILocation(line: 2406, column: 2, scope: !5364)
!5368 = !DILocation(line: 2406, column: 6, scope: !5364)
!5369 = !DILocation(line: 2406, column: 11, scope: !5364)
!5370 = !DILocation(line: 2407, column: 2, scope: !5364)
!5371 = !DILocation(line: 2407, column: 6, scope: !5364)
!5372 = !DILocation(line: 2407, column: 13, scope: !5364)
!5373 = !DILocation(line: 2408, column: 2, scope: !5364)
!5374 = !DILocation(line: 2408, column: 6, scope: !5364)
!5375 = !DILocation(line: 2408, column: 18, scope: !5364)
!5376 = !DILocation(line: 2411, column: 2, scope: !5364)
!5377 = !DILocation(line: 2411, column: 6, scope: !5364)
!5378 = !DILocation(line: 2411, column: 11, scope: !5364)
!5379 = !DILocation(line: 2412, column: 2, scope: !5364)
!5380 = !DILocation(line: 2412, column: 6, scope: !5364)
!5381 = !DILocation(line: 2412, column: 11, scope: !5364)
!5382 = !DILocation(line: 2415, column: 2, scope: !5364)
!5383 = !DILocation(line: 2415, column: 6, scope: !5364)
!5384 = !DILocation(line: 2415, column: 11, scope: !5364)
!5385 = !DILocation(line: 2416, column: 1, scope: !5364)
!5386 = distinct !DISubprogram(name: "sequencer_meta_toggle_exec", scope: !3, file: !3, line: 2335, type: !2748, scopeLine: 2336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5387 = !DILocalVariable(name: "C", arg: 1, scope: !5386, file: !3, line: 2335, type: !2329)
!5388 = !DILocation(line: 2335, column: 49, scope: !5386)
!5389 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !5386, file: !3, line: 2335, type: !2750)
!5390 = !DILocation(line: 2335, column: 64, scope: !5386)
!5391 = !DILocalVariable(name: "scene", scope: !5386, file: !3, line: 2337, type: !1540)
!5392 = !DILocation(line: 2337, column: 9, scope: !5386)
!5393 = !DILocation(line: 2337, column: 32, scope: !5386)
!5394 = !DILocation(line: 2337, column: 17, scope: !5386)
!5395 = !DILocalVariable(name: "ed", scope: !5386, file: !3, line: 2338, type: !1843)
!5396 = !DILocation(line: 2338, column: 11, scope: !5386)
!5397 = !DILocation(line: 2338, column: 42, scope: !5386)
!5398 = !DILocation(line: 2338, column: 16, scope: !5386)
!5399 = !DILocalVariable(name: "last_seq", scope: !5386, file: !3, line: 2339, type: !269)
!5400 = !DILocation(line: 2339, column: 12, scope: !5386)
!5401 = !DILocation(line: 2339, column: 48, scope: !5386)
!5402 = !DILocation(line: 2339, column: 23, scope: !5386)
!5403 = !DILocalVariable(name: "ms", scope: !5386, file: !3, line: 2340, type: !4894)
!5404 = !DILocation(line: 2340, column: 13, scope: !5386)
!5405 = !DILocation(line: 2342, column: 6, scope: !5406)
!5406 = distinct !DILexicalBlock(scope: !5386, file: !3, line: 2342, column: 6)
!5407 = !DILocation(line: 2342, column: 15, scope: !5406)
!5408 = !DILocation(line: 2342, column: 18, scope: !5406)
!5409 = !DILocation(line: 2342, column: 28, scope: !5406)
!5410 = !DILocation(line: 2342, column: 33, scope: !5406)
!5411 = !DILocation(line: 2342, column: 50, scope: !5406)
!5412 = !DILocation(line: 2342, column: 53, scope: !5406)
!5413 = !DILocation(line: 2342, column: 63, scope: !5406)
!5414 = !DILocation(line: 2342, column: 68, scope: !5406)
!5415 = !DILocation(line: 2342, column: 6, scope: !5386)
!5416 = !DILocation(line: 2344, column: 8, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2342, column: 78)
!5418 = !DILocation(line: 2344, column: 6, scope: !5417)
!5419 = !DILocation(line: 2345, column: 16, scope: !5417)
!5420 = !DILocation(line: 2345, column: 20, scope: !5417)
!5421 = !DILocation(line: 2345, column: 31, scope: !5417)
!5422 = !DILocation(line: 2345, column: 3, scope: !5417)
!5423 = !DILocation(line: 2346, column: 16, scope: !5417)
!5424 = !DILocation(line: 2346, column: 3, scope: !5417)
!5425 = !DILocation(line: 2346, column: 7, scope: !5417)
!5426 = !DILocation(line: 2346, column: 14, scope: !5417)
!5427 = !DILocation(line: 2347, column: 18, scope: !5417)
!5428 = !DILocation(line: 2347, column: 22, scope: !5417)
!5429 = !DILocation(line: 2347, column: 3, scope: !5417)
!5430 = !DILocation(line: 2347, column: 7, scope: !5417)
!5431 = !DILocation(line: 2347, column: 16, scope: !5417)
!5432 = !DILocation(line: 2348, column: 18, scope: !5417)
!5433 = !DILocation(line: 2348, column: 22, scope: !5417)
!5434 = !DILocation(line: 2348, column: 35, scope: !5417)
!5435 = !DILocation(line: 2348, column: 39, scope: !5417)
!5436 = !DILocation(line: 2348, column: 47, scope: !5417)
!5437 = !DILocation(line: 2348, column: 3, scope: !5417)
!5438 = !DILocation(line: 2350, column: 19, scope: !5417)
!5439 = !DILocation(line: 2350, column: 29, scope: !5417)
!5440 = !DILocation(line: 2350, column: 3, scope: !5417)
!5441 = !DILocation(line: 2350, column: 7, scope: !5417)
!5442 = !DILocation(line: 2350, column: 16, scope: !5417)
!5443 = !DILocation(line: 2352, column: 28, scope: !5417)
!5444 = !DILocation(line: 2352, column: 3, scope: !5417)
!5445 = !DILocation(line: 2354, column: 2, scope: !5417)
!5446 = !DILocalVariable(name: "seq", scope: !5447, file: !3, line: 2358, type: !269)
!5447 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2355, column: 7)
!5448 = !DILocation(line: 2358, column: 13, scope: !5447)
!5449 = !DILocation(line: 2360, column: 30, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2360, column: 7)
!5451 = !DILocation(line: 2360, column: 34, scope: !5450)
!5452 = !DILocation(line: 2360, column: 7, scope: !5450)
!5453 = !DILocation(line: 2360, column: 7, scope: !5447)
!5454 = !DILocation(line: 2361, column: 4, scope: !5450)
!5455 = !DILocation(line: 2363, column: 8, scope: !5447)
!5456 = !DILocation(line: 2363, column: 12, scope: !5447)
!5457 = !DILocation(line: 2363, column: 22, scope: !5447)
!5458 = !DILocation(line: 2363, column: 6, scope: !5447)
!5459 = !DILocation(line: 2364, column: 16, scope: !5447)
!5460 = !DILocation(line: 2364, column: 20, scope: !5447)
!5461 = !DILocation(line: 2364, column: 31, scope: !5447)
!5462 = !DILocation(line: 2364, column: 3, scope: !5447)
!5463 = !DILocation(line: 2366, column: 18, scope: !5447)
!5464 = !DILocation(line: 2366, column: 22, scope: !5447)
!5465 = !DILocation(line: 2366, column: 3, scope: !5447)
!5466 = !DILocation(line: 2366, column: 7, scope: !5447)
!5467 = !DILocation(line: 2366, column: 16, scope: !5447)
!5468 = !DILocation(line: 2369, column: 7, scope: !5469)
!5469 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2369, column: 7)
!5470 = !DILocation(line: 2369, column: 11, scope: !5469)
!5471 = !DILocation(line: 2369, column: 29, scope: !5469)
!5472 = !DILocation(line: 2369, column: 33, scope: !5469)
!5473 = !DILocation(line: 2369, column: 25, scope: !5469)
!5474 = !DILocation(line: 2369, column: 7, scope: !5447)
!5475 = !DILocation(line: 2370, column: 19, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 2369, column: 48)
!5477 = !DILocation(line: 2370, column: 23, scope: !5476)
!5478 = !DILocation(line: 2370, column: 36, scope: !5476)
!5479 = !DILocation(line: 2370, column: 40, scope: !5476)
!5480 = !DILocation(line: 2370, column: 48, scope: !5476)
!5481 = !DILocation(line: 2370, column: 4, scope: !5476)
!5482 = !DILocation(line: 2371, column: 3, scope: !5476)
!5483 = !DILocation(line: 2374, column: 14, scope: !5484)
!5484 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2374, column: 3)
!5485 = !DILocation(line: 2374, column: 18, scope: !5484)
!5486 = !DILocation(line: 2374, column: 28, scope: !5484)
!5487 = !DILocation(line: 2374, column: 12, scope: !5484)
!5488 = !DILocation(line: 2374, column: 8, scope: !5484)
!5489 = !DILocation(line: 2374, column: 35, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5484, file: !3, line: 2374, column: 3)
!5491 = !DILocation(line: 2374, column: 3, scope: !5484)
!5492 = !DILocation(line: 2375, column: 22, scope: !5490)
!5493 = !DILocation(line: 2375, column: 29, scope: !5490)
!5494 = !DILocation(line: 2375, column: 4, scope: !5490)
!5495 = !DILocation(line: 2374, column: 46, scope: !5490)
!5496 = !DILocation(line: 2374, column: 51, scope: !5490)
!5497 = !DILocation(line: 2374, column: 44, scope: !5490)
!5498 = !DILocation(line: 2374, column: 3, scope: !5490)
!5499 = distinct !{!5499, !5491, !5500}
!5500 = !DILocation(line: 2375, column: 32, scope: !5484)
!5501 = !DILocation(line: 2380, column: 34, scope: !5447)
!5502 = !DILocation(line: 2380, column: 38, scope: !5447)
!5503 = !DILocation(line: 2380, column: 46, scope: !5447)
!5504 = !DILocation(line: 2380, column: 50, scope: !5447)
!5505 = !DILocation(line: 2380, column: 3, scope: !5447)
!5506 = !DILocation(line: 2381, column: 35, scope: !5447)
!5507 = !DILocation(line: 2381, column: 39, scope: !5447)
!5508 = !DILocation(line: 2381, column: 47, scope: !5447)
!5509 = !DILocation(line: 2381, column: 51, scope: !5447)
!5510 = !DILocation(line: 2381, column: 3, scope: !5447)
!5511 = !DILocation(line: 2382, column: 21, scope: !5447)
!5512 = !DILocation(line: 2382, column: 28, scope: !5447)
!5513 = !DILocation(line: 2382, column: 32, scope: !5447)
!5514 = !DILocation(line: 2382, column: 3, scope: !5447)
!5515 = !DILocation(line: 2388, column: 28, scope: !5447)
!5516 = !DILocation(line: 2388, column: 35, scope: !5447)
!5517 = !DILocation(line: 2388, column: 39, scope: !5447)
!5518 = !DILocation(line: 2388, column: 3, scope: !5447)
!5519 = !DILocation(line: 2390, column: 3, scope: !5447)
!5520 = !DILocation(line: 2390, column: 7, scope: !5447)
!5521 = !DILocation(line: 2390, column: 15, scope: !5447)
!5522 = !DILocation(line: 2390, column: 20, scope: !5447)
!5523 = !DILocation(line: 2391, column: 18, scope: !5447)
!5524 = !DILocation(line: 2391, column: 22, scope: !5447)
!5525 = !DILocation(line: 2391, column: 3, scope: !5447)
!5526 = !DILocation(line: 2393, column: 3, scope: !5447)
!5527 = !DILocation(line: 2393, column: 13, scope: !5447)
!5528 = !DILocation(line: 2397, column: 30, scope: !5386)
!5529 = !DILocation(line: 2397, column: 2, scope: !5386)
!5530 = !DILocation(line: 2398, column: 24, scope: !5386)
!5531 = !DILocation(line: 2398, column: 52, scope: !5386)
!5532 = !DILocation(line: 2398, column: 2, scope: !5386)
!5533 = !DILocation(line: 2400, column: 2, scope: !5386)
!5534 = !DILocation(line: 2401, column: 1, scope: !5386)
!5535 = distinct !DISubprogram(name: "SEQUENCER_OT_meta_make", scope: !3, file: !3, line: 2470, type: !4701, scopeLine: 2471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5536 = !DILocalVariable(name: "ot", arg: 1, scope: !5535, file: !3, line: 2470, type: !4703)
!5537 = !DILocation(line: 2470, column: 45, scope: !5535)
!5538 = !DILocation(line: 2473, column: 2, scope: !5535)
!5539 = !DILocation(line: 2473, column: 6, scope: !5535)
!5540 = !DILocation(line: 2473, column: 11, scope: !5535)
!5541 = !DILocation(line: 2474, column: 2, scope: !5535)
!5542 = !DILocation(line: 2474, column: 6, scope: !5535)
!5543 = !DILocation(line: 2474, column: 13, scope: !5535)
!5544 = !DILocation(line: 2475, column: 2, scope: !5535)
!5545 = !DILocation(line: 2475, column: 6, scope: !5535)
!5546 = !DILocation(line: 2475, column: 18, scope: !5535)
!5547 = !DILocation(line: 2478, column: 2, scope: !5535)
!5548 = !DILocation(line: 2478, column: 6, scope: !5535)
!5549 = !DILocation(line: 2478, column: 11, scope: !5535)
!5550 = !DILocation(line: 2479, column: 2, scope: !5535)
!5551 = !DILocation(line: 2479, column: 6, scope: !5535)
!5552 = !DILocation(line: 2479, column: 11, scope: !5535)
!5553 = !DILocation(line: 2482, column: 2, scope: !5535)
!5554 = !DILocation(line: 2482, column: 6, scope: !5535)
!5555 = !DILocation(line: 2482, column: 11, scope: !5535)
!5556 = !DILocation(line: 2483, column: 1, scope: !5535)
!5557 = distinct !DISubprogram(name: "sequencer_meta_make_exec", scope: !3, file: !3, line: 2420, type: !2748, scopeLine: 2421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5558 = !DILocalVariable(name: "C", arg: 1, scope: !5557, file: !3, line: 2420, type: !2329)
!5559 = !DILocation(line: 2420, column: 47, scope: !5557)
!5560 = !DILocalVariable(name: "op", arg: 2, scope: !5557, file: !3, line: 2420, type: !2750)
!5561 = !DILocation(line: 2420, column: 62, scope: !5557)
!5562 = !DILocalVariable(name: "scene", scope: !5557, file: !3, line: 2422, type: !1540)
!5563 = !DILocation(line: 2422, column: 9, scope: !5557)
!5564 = !DILocation(line: 2422, column: 32, scope: !5557)
!5565 = !DILocation(line: 2422, column: 17, scope: !5557)
!5566 = !DILocalVariable(name: "ed", scope: !5557, file: !3, line: 2423, type: !1843)
!5567 = !DILocation(line: 2423, column: 11, scope: !5557)
!5568 = !DILocation(line: 2423, column: 42, scope: !5557)
!5569 = !DILocation(line: 2423, column: 16, scope: !5557)
!5570 = !DILocalVariable(name: "seq", scope: !5557, file: !3, line: 2425, type: !269)
!5571 = !DILocation(line: 2425, column: 12, scope: !5557)
!5572 = !DILocalVariable(name: "seqm", scope: !5557, file: !3, line: 2425, type: !269)
!5573 = !DILocation(line: 2425, column: 18, scope: !5557)
!5574 = !DILocalVariable(name: "next", scope: !5557, file: !3, line: 2425, type: !269)
!5575 = !DILocation(line: 2425, column: 25, scope: !5557)
!5576 = !DILocalVariable(name: "last_seq", scope: !5557, file: !3, line: 2425, type: !269)
!5577 = !DILocation(line: 2425, column: 32, scope: !5557)
!5578 = !DILocation(line: 2425, column: 68, scope: !5557)
!5579 = !DILocation(line: 2425, column: 43, scope: !5557)
!5580 = !DILocalVariable(name: "channel_max", scope: !5557, file: !3, line: 2426, type: !15)
!5581 = !DILocation(line: 2426, column: 6, scope: !5557)
!5582 = !DILocation(line: 2428, column: 43, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 2428, column: 6)
!5584 = !DILocation(line: 2428, column: 47, scope: !5583)
!5585 = !DILocation(line: 2428, column: 6, scope: !5583)
!5586 = !DILocation(line: 2428, column: 64, scope: !5583)
!5587 = !DILocation(line: 2428, column: 6, scope: !5557)
!5588 = !DILocation(line: 2429, column: 14, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5583, file: !3, line: 2428, column: 74)
!5590 = !DILocation(line: 2429, column: 18, scope: !5589)
!5591 = !DILocation(line: 2429, column: 3, scope: !5589)
!5592 = !DILocation(line: 2430, column: 3, scope: !5589)
!5593 = !DILocation(line: 2435, column: 28, scope: !5557)
!5594 = !DILocation(line: 2435, column: 32, scope: !5557)
!5595 = !DILocation(line: 2435, column: 9, scope: !5557)
!5596 = !DILocation(line: 2435, column: 7, scope: !5557)
!5597 = !DILocation(line: 2436, column: 9, scope: !5557)
!5598 = !DILocation(line: 2436, column: 15, scope: !5557)
!5599 = !DILocation(line: 2436, column: 20, scope: !5557)
!5600 = !DILocation(line: 2436, column: 2, scope: !5557)
!5601 = !DILocation(line: 2437, column: 2, scope: !5557)
!5602 = !DILocation(line: 2437, column: 8, scope: !5557)
!5603 = !DILocation(line: 2437, column: 13, scope: !5557)
!5604 = !DILocation(line: 2438, column: 2, scope: !5557)
!5605 = !DILocation(line: 2438, column: 8, scope: !5557)
!5606 = !DILocation(line: 2438, column: 13, scope: !5557)
!5607 = !DILocation(line: 2440, column: 8, scope: !5557)
!5608 = !DILocation(line: 2440, column: 12, scope: !5557)
!5609 = !DILocation(line: 2440, column: 22, scope: !5557)
!5610 = !DILocation(line: 2440, column: 6, scope: !5557)
!5611 = !DILocation(line: 2441, column: 2, scope: !5557)
!5612 = !DILocation(line: 2441, column: 9, scope: !5557)
!5613 = !DILocation(line: 2442, column: 10, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 2441, column: 14)
!5615 = !DILocation(line: 2442, column: 15, scope: !5614)
!5616 = !DILocation(line: 2442, column: 8, scope: !5614)
!5617 = !DILocation(line: 2443, column: 7, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5614, file: !3, line: 2443, column: 7)
!5619 = !DILocation(line: 2443, column: 14, scope: !5618)
!5620 = !DILocation(line: 2443, column: 11, scope: !5618)
!5621 = !DILocation(line: 2443, column: 19, scope: !5618)
!5622 = !DILocation(line: 2443, column: 23, scope: !5618)
!5623 = !DILocation(line: 2443, column: 28, scope: !5618)
!5624 = !DILocation(line: 2443, column: 33, scope: !5618)
!5625 = !DILocation(line: 2443, column: 7, scope: !5614)
!5626 = !DILocation(line: 2444, column: 34, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 2443, column: 44)
!5628 = !DILocation(line: 2444, column: 41, scope: !5627)
!5629 = !DILocation(line: 2444, column: 4, scope: !5627)
!5630 = !DILocation(line: 2445, column: 25, scope: !5627)
!5631 = !DILocation(line: 2445, column: 30, scope: !5627)
!5632 = !DILocation(line: 2445, column: 39, scope: !5627)
!5633 = !DILocation(line: 2445, column: 18, scope: !5627)
!5634 = !DILocation(line: 2445, column: 16, scope: !5627)
!5635 = !DILocation(line: 2446, column: 16, scope: !5627)
!5636 = !DILocation(line: 2446, column: 20, scope: !5627)
!5637 = !DILocation(line: 2446, column: 30, scope: !5627)
!5638 = !DILocation(line: 2446, column: 4, scope: !5627)
!5639 = !DILocation(line: 2447, column: 17, scope: !5627)
!5640 = !DILocation(line: 2447, column: 23, scope: !5627)
!5641 = !DILocation(line: 2447, column: 32, scope: !5627)
!5642 = !DILocation(line: 2447, column: 4, scope: !5627)
!5643 = !DILocation(line: 2448, column: 3, scope: !5627)
!5644 = !DILocation(line: 2449, column: 9, scope: !5614)
!5645 = !DILocation(line: 2449, column: 7, scope: !5614)
!5646 = distinct !{!5646, !5611, !5647}
!5647 = !DILocation(line: 2450, column: 2, scope: !5557)
!5648 = !DILocation(line: 2451, column: 18, scope: !5557)
!5649 = !DILocation(line: 2451, column: 29, scope: !5557)
!5650 = !DILocation(line: 2451, column: 39, scope: !5557)
!5651 = !DILocation(line: 2451, column: 49, scope: !5557)
!5652 = !DILocation(line: 2451, column: 2, scope: !5557)
!5653 = !DILocation(line: 2451, column: 8, scope: !5557)
!5654 = !DILocation(line: 2451, column: 16, scope: !5557)
!5655 = !DILocation(line: 2452, column: 20, scope: !5557)
!5656 = !DILocation(line: 2452, column: 27, scope: !5557)
!5657 = !DILocation(line: 2452, column: 2, scope: !5557)
!5658 = !DILocation(line: 2454, column: 16, scope: !5557)
!5659 = !DILocation(line: 2454, column: 2, scope: !5557)
!5660 = !DILocation(line: 2454, column: 8, scope: !5557)
!5661 = !DILocation(line: 2454, column: 14, scope: !5557)
!5662 = !DILocation(line: 2455, column: 2, scope: !5557)
!5663 = !DILocation(line: 2455, column: 8, scope: !5557)
!5664 = !DILocation(line: 2455, column: 15, scope: !5557)
!5665 = !DILocation(line: 2455, column: 18, scope: !5557)
!5666 = !DILocation(line: 2457, column: 27, scope: !5557)
!5667 = !DILocation(line: 2457, column: 34, scope: !5557)
!5668 = !DILocation(line: 2457, column: 2, scope: !5557)
!5669 = !DILocation(line: 2459, column: 32, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 2459, column: 6)
!5671 = !DILocation(line: 2459, column: 36, scope: !5670)
!5672 = !DILocation(line: 2459, column: 46, scope: !5670)
!5673 = !DILocation(line: 2459, column: 6, scope: !5670)
!5674 = !DILocation(line: 2459, column: 6, scope: !5557)
!5675 = !DILocation(line: 2459, column: 80, scope: !5670)
!5676 = !DILocation(line: 2459, column: 84, scope: !5670)
!5677 = !DILocation(line: 2459, column: 94, scope: !5670)
!5678 = !DILocation(line: 2459, column: 100, scope: !5670)
!5679 = !DILocation(line: 2459, column: 54, scope: !5670)
!5680 = !DILocation(line: 2461, column: 30, scope: !5557)
!5681 = !DILocation(line: 2461, column: 2, scope: !5557)
!5682 = !DILocation(line: 2463, column: 43, scope: !5557)
!5683 = !DILocation(line: 2463, column: 50, scope: !5557)
!5684 = !DILocation(line: 2463, column: 54, scope: !5557)
!5685 = !DILocation(line: 2463, column: 63, scope: !5557)
!5686 = !DILocation(line: 2463, column: 2, scope: !5557)
!5687 = !DILocation(line: 2465, column: 24, scope: !5557)
!5688 = !DILocation(line: 2465, column: 52, scope: !5557)
!5689 = !DILocation(line: 2465, column: 2, scope: !5557)
!5690 = !DILocation(line: 2467, column: 2, scope: !5557)
!5691 = !DILocation(line: 2468, column: 1, scope: !5557)
!5692 = distinct !DISubprogram(name: "SEQUENCER_OT_meta_separate", scope: !3, file: !3, line: 2543, type: !4701, scopeLine: 2544, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5693 = !DILocalVariable(name: "ot", arg: 1, scope: !5692, file: !3, line: 2543, type: !4703)
!5694 = !DILocation(line: 2543, column: 49, scope: !5692)
!5695 = !DILocation(line: 2546, column: 2, scope: !5692)
!5696 = !DILocation(line: 2546, column: 6, scope: !5692)
!5697 = !DILocation(line: 2546, column: 11, scope: !5692)
!5698 = !DILocation(line: 2547, column: 2, scope: !5692)
!5699 = !DILocation(line: 2547, column: 6, scope: !5692)
!5700 = !DILocation(line: 2547, column: 13, scope: !5692)
!5701 = !DILocation(line: 2548, column: 2, scope: !5692)
!5702 = !DILocation(line: 2548, column: 6, scope: !5692)
!5703 = !DILocation(line: 2548, column: 18, scope: !5692)
!5704 = !DILocation(line: 2551, column: 2, scope: !5692)
!5705 = !DILocation(line: 2551, column: 6, scope: !5692)
!5706 = !DILocation(line: 2551, column: 11, scope: !5692)
!5707 = !DILocation(line: 2552, column: 2, scope: !5692)
!5708 = !DILocation(line: 2552, column: 6, scope: !5692)
!5709 = !DILocation(line: 2552, column: 11, scope: !5692)
!5710 = !DILocation(line: 2555, column: 2, scope: !5692)
!5711 = !DILocation(line: 2555, column: 6, scope: !5692)
!5712 = !DILocation(line: 2555, column: 11, scope: !5692)
!5713 = !DILocation(line: 2556, column: 1, scope: !5692)
!5714 = distinct !DISubprogram(name: "sequencer_meta_separate_exec", scope: !3, file: !3, line: 2496, type: !2748, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5715 = !DILocalVariable(name: "C", arg: 1, scope: !5714, file: !3, line: 2496, type: !2329)
!5716 = !DILocation(line: 2496, column: 51, scope: !5714)
!5717 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !5714, file: !3, line: 2496, type: !2750)
!5718 = !DILocation(line: 2496, column: 66, scope: !5714)
!5719 = !DILocalVariable(name: "scene", scope: !5714, file: !3, line: 2498, type: !1540)
!5720 = !DILocation(line: 2498, column: 9, scope: !5714)
!5721 = !DILocation(line: 2498, column: 32, scope: !5714)
!5722 = !DILocation(line: 2498, column: 17, scope: !5714)
!5723 = !DILocalVariable(name: "ed", scope: !5714, file: !3, line: 2499, type: !1843)
!5724 = !DILocation(line: 2499, column: 11, scope: !5714)
!5725 = !DILocation(line: 2499, column: 42, scope: !5714)
!5726 = !DILocation(line: 2499, column: 16, scope: !5714)
!5727 = !DILocalVariable(name: "seq", scope: !5714, file: !3, line: 2501, type: !269)
!5728 = !DILocation(line: 2501, column: 12, scope: !5714)
!5729 = !DILocalVariable(name: "last_seq", scope: !5714, file: !3, line: 2501, type: !269)
!5730 = !DILocation(line: 2501, column: 18, scope: !5714)
!5731 = !DILocation(line: 2501, column: 54, scope: !5714)
!5732 = !DILocation(line: 2501, column: 29, scope: !5714)
!5733 = !DILocation(line: 2503, column: 6, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 2503, column: 6)
!5735 = !DILocation(line: 2503, column: 15, scope: !5734)
!5736 = !DILocation(line: 2503, column: 23, scope: !5734)
!5737 = !DILocation(line: 2503, column: 26, scope: !5734)
!5738 = !DILocation(line: 2503, column: 36, scope: !5734)
!5739 = !DILocation(line: 2503, column: 41, scope: !5734)
!5740 = !DILocation(line: 2503, column: 6, scope: !5714)
!5741 = !DILocation(line: 2504, column: 3, scope: !5734)
!5742 = !DILocation(line: 2506, column: 13, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 2506, column: 2)
!5744 = !DILocation(line: 2506, column: 23, scope: !5743)
!5745 = !DILocation(line: 2506, column: 31, scope: !5743)
!5746 = !DILocation(line: 2506, column: 11, scope: !5743)
!5747 = !DILocation(line: 2506, column: 7, scope: !5743)
!5748 = !DILocation(line: 2506, column: 38, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 2506, column: 2)
!5750 = !DILocation(line: 2506, column: 42, scope: !5749)
!5751 = !DILocation(line: 2506, column: 2, scope: !5743)
!5752 = !DILocation(line: 2507, column: 33, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 2506, column: 68)
!5754 = !DILocation(line: 2507, column: 40, scope: !5753)
!5755 = !DILocation(line: 2507, column: 3, scope: !5753)
!5756 = !DILocation(line: 2508, column: 2, scope: !5753)
!5757 = !DILocation(line: 2506, column: 57, scope: !5749)
!5758 = !DILocation(line: 2506, column: 62, scope: !5749)
!5759 = !DILocation(line: 2506, column: 55, scope: !5749)
!5760 = !DILocation(line: 2506, column: 2, scope: !5749)
!5761 = distinct !{!5761, !5751, !5762}
!5762 = !DILocation(line: 2508, column: 2, scope: !5743)
!5763 = !DILocation(line: 2510, column: 21, scope: !5714)
!5764 = !DILocation(line: 2510, column: 25, scope: !5714)
!5765 = !DILocation(line: 2510, column: 36, scope: !5714)
!5766 = !DILocation(line: 2510, column: 46, scope: !5714)
!5767 = !DILocation(line: 2510, column: 2, scope: !5714)
!5768 = !DILocation(line: 2512, column: 22, scope: !5714)
!5769 = !DILocation(line: 2512, column: 32, scope: !5714)
!5770 = !DILocation(line: 2512, column: 2, scope: !5714)
!5771 = !DILocation(line: 2514, column: 14, scope: !5714)
!5772 = !DILocation(line: 2514, column: 18, scope: !5714)
!5773 = !DILocation(line: 2514, column: 28, scope: !5714)
!5774 = !DILocation(line: 2514, column: 2, scope: !5714)
!5775 = !DILocation(line: 2515, column: 20, scope: !5714)
!5776 = !DILocation(line: 2515, column: 27, scope: !5714)
!5777 = !DILocation(line: 2515, column: 2, scope: !5714)
!5778 = !DILocation(line: 2518, column: 13, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 2518, column: 2)
!5780 = !DILocation(line: 2518, column: 17, scope: !5779)
!5781 = !DILocation(line: 2518, column: 27, scope: !5779)
!5782 = !DILocation(line: 2518, column: 11, scope: !5779)
!5783 = !DILocation(line: 2518, column: 7, scope: !5779)
!5784 = !DILocation(line: 2518, column: 34, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 2518, column: 2)
!5786 = !DILocation(line: 2518, column: 2, scope: !5779)
!5787 = !DILocation(line: 2519, column: 8, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5785, file: !3, line: 2519, column: 7)
!5789 = !DILocation(line: 2519, column: 13, scope: !5788)
!5790 = !DILocation(line: 2519, column: 18, scope: !5788)
!5791 = !DILocation(line: 2519, column: 37, scope: !5788)
!5792 = !DILocation(line: 2519, column: 60, scope: !5788)
!5793 = !DILocation(line: 2519, column: 65, scope: !5788)
!5794 = !DILocation(line: 2519, column: 40, scope: !5788)
!5795 = !DILocation(line: 2519, column: 7, scope: !5785)
!5796 = !DILocation(line: 2520, column: 4, scope: !5788)
!5797 = !DILocation(line: 2520, column: 9, scope: !5788)
!5798 = !DILocation(line: 2520, column: 14, scope: !5788)
!5799 = !DILocation(line: 2519, column: 73, scope: !5788)
!5800 = !DILocation(line: 2518, column: 45, scope: !5785)
!5801 = !DILocation(line: 2518, column: 50, scope: !5785)
!5802 = !DILocation(line: 2518, column: 43, scope: !5785)
!5803 = !DILocation(line: 2518, column: 2, scope: !5785)
!5804 = distinct !{!5804, !5786, !5805}
!5805 = !DILocation(line: 2520, column: 17, scope: !5779)
!5806 = !DILocation(line: 2522, column: 22, scope: !5714)
!5807 = !DILocation(line: 2522, column: 29, scope: !5714)
!5808 = !DILocation(line: 2522, column: 33, scope: !5714)
!5809 = !DILocation(line: 2522, column: 2, scope: !5714)
!5810 = !DILocation(line: 2526, column: 13, scope: !5811)
!5811 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 2526, column: 2)
!5812 = !DILocation(line: 2526, column: 17, scope: !5811)
!5813 = !DILocation(line: 2526, column: 27, scope: !5811)
!5814 = !DILocation(line: 2526, column: 11, scope: !5811)
!5815 = !DILocation(line: 2526, column: 7, scope: !5811)
!5816 = !DILocation(line: 2526, column: 34, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5811, file: !3, line: 2526, column: 2)
!5818 = !DILocation(line: 2526, column: 2, scope: !5811)
!5819 = !DILocation(line: 2527, column: 7, scope: !5820)
!5820 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 2527, column: 7)
!5821 = distinct !DILexicalBlock(scope: !5817, file: !3, line: 2526, column: 56)
!5822 = !DILocation(line: 2527, column: 12, scope: !5820)
!5823 = !DILocation(line: 2527, column: 17, scope: !5820)
!5824 = !DILocation(line: 2527, column: 7, scope: !5821)
!5825 = !DILocation(line: 2528, column: 4, scope: !5826)
!5826 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 2527, column: 27)
!5827 = !DILocation(line: 2528, column: 9, scope: !5826)
!5828 = !DILocation(line: 2528, column: 14, scope: !5826)
!5829 = !DILocation(line: 2529, column: 34, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5826, file: !3, line: 2529, column: 8)
!5831 = !DILocation(line: 2529, column: 38, scope: !5830)
!5832 = !DILocation(line: 2529, column: 48, scope: !5830)
!5833 = !DILocation(line: 2529, column: 8, scope: !5830)
!5834 = !DILocation(line: 2529, column: 8, scope: !5826)
!5835 = !DILocation(line: 2530, column: 31, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5830, file: !3, line: 2529, column: 54)
!5837 = !DILocation(line: 2530, column: 35, scope: !5836)
!5838 = !DILocation(line: 2530, column: 45, scope: !5836)
!5839 = !DILocation(line: 2530, column: 50, scope: !5836)
!5840 = !DILocation(line: 2530, column: 5, scope: !5836)
!5841 = !DILocation(line: 2531, column: 4, scope: !5836)
!5842 = !DILocation(line: 2532, column: 3, scope: !5826)
!5843 = !DILocation(line: 2533, column: 2, scope: !5821)
!5844 = !DILocation(line: 2526, column: 45, scope: !5817)
!5845 = !DILocation(line: 2526, column: 50, scope: !5817)
!5846 = !DILocation(line: 2526, column: 43, scope: !5817)
!5847 = !DILocation(line: 2526, column: 2, scope: !5817)
!5848 = distinct !{!5848, !5818, !5849}
!5849 = !DILocation(line: 2533, column: 2, scope: !5811)
!5850 = !DILocation(line: 2535, column: 21, scope: !5714)
!5851 = !DILocation(line: 2535, column: 2, scope: !5714)
!5852 = !DILocation(line: 2536, column: 30, scope: !5714)
!5853 = !DILocation(line: 2536, column: 2, scope: !5714)
!5854 = !DILocation(line: 2538, column: 24, scope: !5714)
!5855 = !DILocation(line: 2538, column: 52, scope: !5714)
!5856 = !DILocation(line: 2538, column: 2, scope: !5714)
!5857 = !DILocation(line: 2540, column: 2, scope: !5714)
!5858 = !DILocation(line: 2541, column: 1, scope: !5714)
!5859 = distinct !DISubprogram(name: "SEQUENCER_OT_view_all", scope: !3, file: !3, line: 2569, type: !4701, scopeLine: 2570, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5860 = !DILocalVariable(name: "ot", arg: 1, scope: !5859, file: !3, line: 2569, type: !4703)
!5861 = !DILocation(line: 2569, column: 44, scope: !5859)
!5862 = !DILocation(line: 2572, column: 2, scope: !5859)
!5863 = !DILocation(line: 2572, column: 6, scope: !5859)
!5864 = !DILocation(line: 2572, column: 11, scope: !5859)
!5865 = !DILocation(line: 2573, column: 2, scope: !5859)
!5866 = !DILocation(line: 2573, column: 6, scope: !5859)
!5867 = !DILocation(line: 2573, column: 13, scope: !5859)
!5868 = !DILocation(line: 2574, column: 2, scope: !5859)
!5869 = !DILocation(line: 2574, column: 6, scope: !5859)
!5870 = !DILocation(line: 2574, column: 18, scope: !5859)
!5871 = !DILocation(line: 2577, column: 2, scope: !5859)
!5872 = !DILocation(line: 2577, column: 6, scope: !5859)
!5873 = !DILocation(line: 2577, column: 11, scope: !5859)
!5874 = !DILocation(line: 2578, column: 2, scope: !5859)
!5875 = !DILocation(line: 2578, column: 6, scope: !5859)
!5876 = !DILocation(line: 2578, column: 11, scope: !5859)
!5877 = !DILocation(line: 2581, column: 2, scope: !5859)
!5878 = !DILocation(line: 2581, column: 6, scope: !5859)
!5879 = !DILocation(line: 2581, column: 11, scope: !5859)
!5880 = !DILocation(line: 2582, column: 1, scope: !5859)
!5881 = distinct !DISubprogram(name: "sequencer_view_all_exec", scope: !3, file: !3, line: 2559, type: !2748, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5882 = !DILocalVariable(name: "C", arg: 1, scope: !5881, file: !3, line: 2559, type: !2329)
!5883 = !DILocation(line: 2559, column: 46, scope: !5881)
!5884 = !DILocalVariable(name: "op", arg: 2, scope: !5881, file: !3, line: 2559, type: !2750)
!5885 = !DILocation(line: 2559, column: 61, scope: !5881)
!5886 = !DILocalVariable(name: "ar", scope: !5881, file: !3, line: 2561, type: !4818)
!5887 = !DILocation(line: 2561, column: 11, scope: !5881)
!5888 = !DILocation(line: 2561, column: 30, scope: !5881)
!5889 = !DILocation(line: 2561, column: 16, scope: !5881)
!5890 = !DILocalVariable(name: "v2d", scope: !5881, file: !3, line: 2562, type: !2037)
!5891 = !DILocation(line: 2562, column: 10, scope: !5881)
!5892 = !DILocation(line: 2562, column: 38, scope: !5881)
!5893 = !DILocation(line: 2562, column: 16, scope: !5881)
!5894 = !DILocalVariable(name: "smooth_viewtx", scope: !5881, file: !3, line: 2563, type: !2040)
!5895 = !DILocation(line: 2563, column: 12, scope: !5881)
!5896 = !DILocation(line: 2563, column: 58, scope: !5881)
!5897 = !DILocation(line: 2563, column: 28, scope: !5881)
!5898 = !DILocation(line: 2565, column: 24, scope: !5881)
!5899 = !DILocation(line: 2565, column: 27, scope: !5881)
!5900 = !DILocation(line: 2565, column: 32, scope: !5881)
!5901 = !DILocation(line: 2565, column: 37, scope: !5881)
!5902 = !DILocation(line: 2565, column: 42, scope: !5881)
!5903 = !DILocation(line: 2565, column: 2, scope: !5881)
!5904 = !DILocation(line: 2566, column: 2, scope: !5881)
!5905 = distinct !DISubprogram(name: "SEQUENCER_OT_view_all_preview", scope: !3, file: !3, line: 2635, type: !4701, scopeLine: 2636, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5906 = !DILocalVariable(name: "ot", arg: 1, scope: !5905, file: !3, line: 2635, type: !4703)
!5907 = !DILocation(line: 2635, column: 52, scope: !5905)
!5908 = !DILocation(line: 2638, column: 2, scope: !5905)
!5909 = !DILocation(line: 2638, column: 6, scope: !5905)
!5910 = !DILocation(line: 2638, column: 11, scope: !5905)
!5911 = !DILocation(line: 2639, column: 2, scope: !5905)
!5912 = !DILocation(line: 2639, column: 6, scope: !5905)
!5913 = !DILocation(line: 2639, column: 13, scope: !5905)
!5914 = !DILocation(line: 2640, column: 2, scope: !5905)
!5915 = !DILocation(line: 2640, column: 6, scope: !5905)
!5916 = !DILocation(line: 2640, column: 18, scope: !5905)
!5917 = !DILocation(line: 2643, column: 2, scope: !5905)
!5918 = !DILocation(line: 2643, column: 6, scope: !5905)
!5919 = !DILocation(line: 2643, column: 11, scope: !5905)
!5920 = !DILocation(line: 2644, column: 2, scope: !5905)
!5921 = !DILocation(line: 2644, column: 6, scope: !5905)
!5922 = !DILocation(line: 2644, column: 11, scope: !5905)
!5923 = !DILocation(line: 2647, column: 2, scope: !5905)
!5924 = !DILocation(line: 2647, column: 6, scope: !5905)
!5925 = !DILocation(line: 2647, column: 11, scope: !5905)
!5926 = !DILocation(line: 2648, column: 1, scope: !5905)
!5927 = distinct !DISubprogram(name: "sequencer_view_all_preview_exec", scope: !3, file: !3, line: 2585, type: !2748, scopeLine: 2586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5928 = !DILocalVariable(name: "C", arg: 1, scope: !5927, file: !3, line: 2585, type: !2329)
!5929 = !DILocation(line: 2585, column: 54, scope: !5927)
!5930 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !5927, file: !3, line: 2585, type: !2750)
!5931 = !DILocation(line: 2585, column: 69, scope: !5927)
!5932 = !DILocalVariable(name: "sc", scope: !5927, file: !3, line: 2587, type: !3421)
!5933 = !DILocation(line: 2587, column: 11, scope: !5927)
!5934 = !DILocation(line: 2587, column: 30, scope: !5927)
!5935 = !DILocation(line: 2587, column: 16, scope: !5927)
!5936 = !DILocalVariable(name: "area", scope: !5927, file: !3, line: 2588, type: !3393)
!5937 = !DILocation(line: 2588, column: 11, scope: !5927)
!5938 = !DILocation(line: 2588, column: 30, scope: !5927)
!5939 = !DILocation(line: 2588, column: 18, scope: !5927)
!5940 = !DILocalVariable(name: "v2d", scope: !5927, file: !3, line: 2594, type: !2037)
!5941 = !DILocation(line: 2594, column: 10, scope: !5927)
!5942 = !DILocation(line: 2594, column: 38, scope: !5927)
!5943 = !DILocation(line: 2594, column: 16, scope: !5927)
!5944 = !DILocation(line: 2596, column: 2, scope: !5927)
!5945 = !DILocation(line: 2596, column: 7, scope: !5927)
!5946 = !DILocation(line: 2596, column: 13, scope: !5927)
!5947 = !DILocation(line: 2596, column: 18, scope: !5927)
!5948 = !DILocation(line: 2597, column: 29, scope: !5927)
!5949 = !DILocation(line: 2597, column: 2, scope: !5927)
!5950 = !DILocation(line: 2598, column: 17, scope: !5927)
!5951 = !DILocation(line: 2598, column: 21, scope: !5927)
!5952 = !DILocation(line: 2598, column: 27, scope: !5927)
!5953 = !DILocation(line: 2598, column: 2, scope: !5927)
!5954 = !DILocation(line: 2631, column: 33, scope: !5927)
!5955 = !DILocation(line: 2631, column: 21, scope: !5927)
!5956 = !DILocation(line: 2631, column: 2, scope: !5927)
!5957 = !DILocation(line: 2632, column: 2, scope: !5927)
!5958 = distinct !DISubprogram(name: "SEQUENCER_OT_view_zoom_ratio", scope: !3, file: !3, line: 2671, type: !4701, scopeLine: 2672, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5959 = !DILocalVariable(name: "ot", arg: 1, scope: !5958, file: !3, line: 2671, type: !4703)
!5960 = !DILocation(line: 2671, column: 51, scope: !5958)
!5961 = !DILocation(line: 2674, column: 2, scope: !5958)
!5962 = !DILocation(line: 2674, column: 6, scope: !5958)
!5963 = !DILocation(line: 2674, column: 11, scope: !5958)
!5964 = !DILocation(line: 2675, column: 2, scope: !5958)
!5965 = !DILocation(line: 2675, column: 6, scope: !5958)
!5966 = !DILocation(line: 2675, column: 13, scope: !5958)
!5967 = !DILocation(line: 2676, column: 2, scope: !5958)
!5968 = !DILocation(line: 2676, column: 6, scope: !5958)
!5969 = !DILocation(line: 2676, column: 18, scope: !5958)
!5970 = !DILocation(line: 2679, column: 2, scope: !5958)
!5971 = !DILocation(line: 2679, column: 6, scope: !5958)
!5972 = !DILocation(line: 2679, column: 11, scope: !5958)
!5973 = !DILocation(line: 2680, column: 2, scope: !5958)
!5974 = !DILocation(line: 2680, column: 6, scope: !5958)
!5975 = !DILocation(line: 2680, column: 11, scope: !5958)
!5976 = !DILocation(line: 2683, column: 16, scope: !5958)
!5977 = !DILocation(line: 2683, column: 20, scope: !5958)
!5978 = !DILocation(line: 2683, column: 2, scope: !5958)
!5979 = !DILocation(line: 2685, column: 1, scope: !5958)
!5980 = distinct !DISubprogram(name: "sequencer_view_zoom_ratio_exec", scope: !3, file: !3, line: 2651, type: !2748, scopeLine: 2652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!5981 = !DILocalVariable(name: "C", arg: 1, scope: !5980, file: !3, line: 2651, type: !2329)
!5982 = !DILocation(line: 2651, column: 53, scope: !5980)
!5983 = !DILocalVariable(name: "op", arg: 2, scope: !5980, file: !3, line: 2651, type: !2750)
!5984 = !DILocation(line: 2651, column: 68, scope: !5980)
!5985 = !DILocalVariable(name: "rd", scope: !5980, file: !3, line: 2653, type: !5986)
!5986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5987, size: 64)
!5987 = !DIDerivedType(tag: DW_TAG_typedef, name: "RenderData", file: !386, line: 611, baseType: !881)
!5988 = !DILocation(line: 2653, column: 14, scope: !5980)
!5989 = !DILocation(line: 2653, column: 35, scope: !5980)
!5990 = !DILocation(line: 2653, column: 20, scope: !5980)
!5991 = !DILocation(line: 2653, column: 39, scope: !5980)
!5992 = !DILocalVariable(name: "v2d", scope: !5980, file: !3, line: 2654, type: !2037)
!5993 = !DILocation(line: 2654, column: 10, scope: !5980)
!5994 = !DILocation(line: 2654, column: 38, scope: !5980)
!5995 = !DILocation(line: 2654, column: 16, scope: !5980)
!5996 = !DILocalVariable(name: "ratio", scope: !5980, file: !3, line: 2656, type: !240)
!5997 = !DILocation(line: 2656, column: 8, scope: !5980)
!5998 = !DILocation(line: 2656, column: 30, scope: !5980)
!5999 = !DILocation(line: 2656, column: 34, scope: !5980)
!6000 = !DILocation(line: 2656, column: 16, scope: !5980)
!6001 = !DILocalVariable(name: "winx", scope: !5980, file: !3, line: 2658, type: !240)
!6002 = !DILocation(line: 2658, column: 8, scope: !5980)
!6003 = !DILocation(line: 2658, column: 21, scope: !5980)
!6004 = !DILocation(line: 2658, column: 25, scope: !5980)
!6005 = !DILocation(line: 2658, column: 32, scope: !5980)
!6006 = !DILocation(line: 2658, column: 36, scope: !5980)
!6007 = !DILocation(line: 2658, column: 30, scope: !5980)
!6008 = !DILocation(line: 2658, column: 42, scope: !5980)
!6009 = !DILocation(line: 2658, column: 15, scope: !5980)
!6010 = !DILocalVariable(name: "winy", scope: !5980, file: !3, line: 2659, type: !240)
!6011 = !DILocation(line: 2659, column: 8, scope: !5980)
!6012 = !DILocation(line: 2659, column: 21, scope: !5980)
!6013 = !DILocation(line: 2659, column: 25, scope: !5980)
!6014 = !DILocation(line: 2659, column: 32, scope: !5980)
!6015 = !DILocation(line: 2659, column: 36, scope: !5980)
!6016 = !DILocation(line: 2659, column: 30, scope: !5980)
!6017 = !DILocation(line: 2659, column: 42, scope: !5980)
!6018 = !DILocation(line: 2659, column: 15, scope: !5980)
!6019 = !DILocalVariable(name: "facx", scope: !5980, file: !3, line: 2661, type: !240)
!6020 = !DILocation(line: 2661, column: 8, scope: !5980)
!6021 = !DILocation(line: 2661, column: 32, scope: !5980)
!6022 = !DILocation(line: 2661, column: 37, scope: !5980)
!6023 = !DILocation(line: 2661, column: 15, scope: !5980)
!6024 = !DILocation(line: 2661, column: 45, scope: !5980)
!6025 = !DILocation(line: 2661, column: 43, scope: !5980)
!6026 = !DILocalVariable(name: "facy", scope: !5980, file: !3, line: 2662, type: !240)
!6027 = !DILocation(line: 2662, column: 8, scope: !5980)
!6028 = !DILocation(line: 2662, column: 32, scope: !5980)
!6029 = !DILocation(line: 2662, column: 37, scope: !5980)
!6030 = !DILocation(line: 2662, column: 15, scope: !5980)
!6031 = !DILocation(line: 2662, column: 45, scope: !5980)
!6032 = !DILocation(line: 2662, column: 43, scope: !5980)
!6033 = !DILocation(line: 2664, column: 19, scope: !5980)
!6034 = !DILocation(line: 2664, column: 24, scope: !5980)
!6035 = !DILocation(line: 2664, column: 36, scope: !5980)
!6036 = !DILocation(line: 2664, column: 43, scope: !5980)
!6037 = !DILocation(line: 2664, column: 41, scope: !5980)
!6038 = !DILocation(line: 2664, column: 50, scope: !5980)
!6039 = !DILocation(line: 2664, column: 48, scope: !5980)
!6040 = !DILocation(line: 2664, column: 56, scope: !5980)
!6041 = !DILocation(line: 2664, column: 29, scope: !5980)
!6042 = !DILocation(line: 2664, column: 72, scope: !5980)
!6043 = !DILocation(line: 2664, column: 79, scope: !5980)
!6044 = !DILocation(line: 2664, column: 77, scope: !5980)
!6045 = !DILocation(line: 2664, column: 86, scope: !5980)
!6046 = !DILocation(line: 2664, column: 84, scope: !5980)
!6047 = !DILocation(line: 2664, column: 92, scope: !5980)
!6048 = !DILocation(line: 2664, column: 65, scope: !5980)
!6049 = !DILocation(line: 2664, column: 2, scope: !5980)
!6050 = !DILocation(line: 2666, column: 37, scope: !5980)
!6051 = !DILocation(line: 2666, column: 23, scope: !5980)
!6052 = !DILocation(line: 2666, column: 2, scope: !5980)
!6053 = !DILocation(line: 2668, column: 2, scope: !5980)
!6054 = distinct !DISubprogram(name: "SEQUENCER_OT_view_toggle", scope: !3, file: !3, line: 2710, type: !4701, scopeLine: 2711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6055 = !DILocalVariable(name: "ot", arg: 1, scope: !6054, file: !3, line: 2710, type: !4703)
!6056 = !DILocation(line: 2710, column: 47, scope: !6054)
!6057 = !DILocation(line: 2713, column: 2, scope: !6054)
!6058 = !DILocation(line: 2713, column: 6, scope: !6054)
!6059 = !DILocation(line: 2713, column: 11, scope: !6054)
!6060 = !DILocation(line: 2714, column: 2, scope: !6054)
!6061 = !DILocation(line: 2714, column: 6, scope: !6054)
!6062 = !DILocation(line: 2714, column: 13, scope: !6054)
!6063 = !DILocation(line: 2715, column: 2, scope: !6054)
!6064 = !DILocation(line: 2715, column: 6, scope: !6054)
!6065 = !DILocation(line: 2715, column: 18, scope: !6054)
!6066 = !DILocation(line: 2718, column: 2, scope: !6054)
!6067 = !DILocation(line: 2718, column: 6, scope: !6054)
!6068 = !DILocation(line: 2718, column: 11, scope: !6054)
!6069 = !DILocation(line: 2719, column: 2, scope: !6054)
!6070 = !DILocation(line: 2719, column: 6, scope: !6054)
!6071 = !DILocation(line: 2719, column: 11, scope: !6054)
!6072 = !DILocation(line: 2722, column: 2, scope: !6054)
!6073 = !DILocation(line: 2722, column: 6, scope: !6054)
!6074 = !DILocation(line: 2722, column: 11, scope: !6054)
!6075 = !DILocation(line: 2723, column: 1, scope: !6054)
!6076 = distinct !DISubprogram(name: "sequencer_view_toggle_exec", scope: !3, file: !3, line: 2698, type: !2748, scopeLine: 2699, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6077 = !DILocalVariable(name: "C", arg: 1, scope: !6076, file: !3, line: 2698, type: !2329)
!6078 = !DILocation(line: 2698, column: 49, scope: !6076)
!6079 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !6076, file: !3, line: 2698, type: !2750)
!6080 = !DILocation(line: 2698, column: 64, scope: !6076)
!6081 = !DILocalVariable(name: "sseq", scope: !6076, file: !3, line: 2700, type: !1542)
!6082 = !DILocation(line: 2700, column: 12, scope: !6076)
!6083 = !DILocation(line: 2700, column: 49, scope: !6076)
!6084 = !DILocation(line: 2700, column: 31, scope: !6076)
!6085 = !DILocation(line: 2700, column: 19, scope: !6076)
!6086 = !DILocation(line: 2702, column: 2, scope: !6076)
!6087 = !DILocation(line: 2702, column: 8, scope: !6076)
!6088 = !DILocation(line: 2702, column: 12, scope: !6076)
!6089 = !DILocation(line: 2703, column: 6, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 2703, column: 6)
!6091 = !DILocation(line: 2703, column: 12, scope: !6090)
!6092 = !DILocation(line: 2703, column: 17, scope: !6090)
!6093 = !DILocation(line: 2703, column: 6, scope: !6076)
!6094 = !DILocation(line: 2703, column: 46, scope: !6090)
!6095 = !DILocation(line: 2703, column: 52, scope: !6090)
!6096 = !DILocation(line: 2703, column: 57, scope: !6090)
!6097 = !DILocation(line: 2705, column: 34, scope: !6076)
!6098 = !DILocation(line: 2705, column: 22, scope: !6076)
!6099 = !DILocation(line: 2705, column: 2, scope: !6076)
!6100 = !DILocation(line: 2707, column: 2, scope: !6076)
!6101 = distinct !DISubprogram(name: "SEQUENCER_OT_view_selected", scope: !3, file: !3, line: 2793, type: !4701, scopeLine: 2794, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6102 = !DILocalVariable(name: "ot", arg: 1, scope: !6101, file: !3, line: 2793, type: !4703)
!6103 = !DILocation(line: 2793, column: 49, scope: !6101)
!6104 = !DILocation(line: 2796, column: 2, scope: !6101)
!6105 = !DILocation(line: 2796, column: 6, scope: !6101)
!6106 = !DILocation(line: 2796, column: 11, scope: !6101)
!6107 = !DILocation(line: 2797, column: 2, scope: !6101)
!6108 = !DILocation(line: 2797, column: 6, scope: !6101)
!6109 = !DILocation(line: 2797, column: 13, scope: !6101)
!6110 = !DILocation(line: 2798, column: 2, scope: !6101)
!6111 = !DILocation(line: 2798, column: 6, scope: !6101)
!6112 = !DILocation(line: 2798, column: 18, scope: !6101)
!6113 = !DILocation(line: 2801, column: 2, scope: !6101)
!6114 = !DILocation(line: 2801, column: 6, scope: !6101)
!6115 = !DILocation(line: 2801, column: 11, scope: !6101)
!6116 = !DILocation(line: 2802, column: 2, scope: !6101)
!6117 = !DILocation(line: 2802, column: 6, scope: !6101)
!6118 = !DILocation(line: 2802, column: 11, scope: !6101)
!6119 = !DILocation(line: 2805, column: 2, scope: !6101)
!6120 = !DILocation(line: 2805, column: 6, scope: !6101)
!6121 = !DILocation(line: 2805, column: 11, scope: !6101)
!6122 = !DILocation(line: 2806, column: 1, scope: !6101)
!6123 = distinct !DISubprogram(name: "sequencer_view_selected_exec", scope: !3, file: !3, line: 2727, type: !2748, scopeLine: 2728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6124 = !DILocalVariable(name: "C", arg: 1, scope: !6123, file: !3, line: 2727, type: !2329)
!6125 = !DILocation(line: 2727, column: 51, scope: !6123)
!6126 = !DILocalVariable(name: "op", arg: 2, scope: !6123, file: !3, line: 2727, type: !2750)
!6127 = !DILocation(line: 2727, column: 66, scope: !6123)
!6128 = !DILocalVariable(name: "scene", scope: !6123, file: !3, line: 2729, type: !1540)
!6129 = !DILocation(line: 2729, column: 9, scope: !6123)
!6130 = !DILocation(line: 2729, column: 32, scope: !6123)
!6131 = !DILocation(line: 2729, column: 17, scope: !6123)
!6132 = !DILocalVariable(name: "v2d", scope: !6123, file: !3, line: 2730, type: !2037)
!6133 = !DILocation(line: 2730, column: 10, scope: !6123)
!6134 = !DILocation(line: 2730, column: 38, scope: !6123)
!6135 = !DILocation(line: 2730, column: 16, scope: !6123)
!6136 = !DILocalVariable(name: "ar", scope: !6123, file: !3, line: 2731, type: !4818)
!6137 = !DILocation(line: 2731, column: 11, scope: !6123)
!6138 = !DILocation(line: 2731, column: 30, scope: !6123)
!6139 = !DILocation(line: 2731, column: 16, scope: !6123)
!6140 = !DILocalVariable(name: "ed", scope: !6123, file: !3, line: 2732, type: !1843)
!6141 = !DILocation(line: 2732, column: 11, scope: !6123)
!6142 = !DILocation(line: 2732, column: 42, scope: !6123)
!6143 = !DILocation(line: 2732, column: 16, scope: !6123)
!6144 = !DILocalVariable(name: "last_seq", scope: !6123, file: !3, line: 2733, type: !269)
!6145 = !DILocation(line: 2733, column: 12, scope: !6123)
!6146 = !DILocation(line: 2733, column: 48, scope: !6123)
!6147 = !DILocation(line: 2733, column: 23, scope: !6123)
!6148 = !DILocalVariable(name: "seq", scope: !6123, file: !3, line: 2734, type: !269)
!6149 = !DILocation(line: 2734, column: 12, scope: !6123)
!6150 = !DILocalVariable(name: "cur_new", scope: !6123, file: !3, line: 2735, type: !524)
!6151 = !DILocation(line: 2735, column: 7, scope: !6123)
!6152 = !DILocation(line: 2735, column: 17, scope: !6123)
!6153 = !DILocation(line: 2735, column: 22, scope: !6123)
!6154 = !DILocalVariable(name: "xmin", scope: !6123, file: !3, line: 2737, type: !15)
!6155 = !DILocation(line: 2737, column: 6, scope: !6123)
!6156 = !DILocalVariable(name: "xmax", scope: !6123, file: !3, line: 2738, type: !15)
!6157 = !DILocation(line: 2738, column: 6, scope: !6123)
!6158 = !DILocalVariable(name: "ymin", scope: !6123, file: !3, line: 2739, type: !15)
!6159 = !DILocation(line: 2739, column: 6, scope: !6123)
!6160 = !DILocalVariable(name: "ymax", scope: !6123, file: !3, line: 2740, type: !15)
!6161 = !DILocation(line: 2740, column: 6, scope: !6123)
!6162 = !DILocalVariable(name: "orig_height", scope: !6123, file: !3, line: 2741, type: !15)
!6163 = !DILocation(line: 2741, column: 6, scope: !6123)
!6164 = !DILocalVariable(name: "ymid", scope: !6123, file: !3, line: 2742, type: !15)
!6165 = !DILocation(line: 2742, column: 6, scope: !6123)
!6166 = !DILocalVariable(name: "ymargin", scope: !6123, file: !3, line: 2743, type: !15)
!6167 = !DILocation(line: 2743, column: 6, scope: !6123)
!6168 = !DILocalVariable(name: "xmargin", scope: !6123, file: !3, line: 2744, type: !15)
!6169 = !DILocation(line: 2744, column: 6, scope: !6123)
!6170 = !DILocation(line: 2744, column: 16, scope: !6123)
!6171 = !DILocation(line: 2746, column: 6, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2746, column: 6)
!6173 = !DILocation(line: 2746, column: 9, scope: !6172)
!6174 = !DILocation(line: 2746, column: 6, scope: !6123)
!6175 = !DILocation(line: 2747, column: 3, scope: !6172)
!6176 = !DILocation(line: 2749, column: 13, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2749, column: 2)
!6178 = !DILocation(line: 2749, column: 17, scope: !6177)
!6179 = !DILocation(line: 2749, column: 27, scope: !6177)
!6180 = !DILocation(line: 2749, column: 11, scope: !6177)
!6181 = !DILocation(line: 2749, column: 7, scope: !6177)
!6182 = !DILocation(line: 2749, column: 34, scope: !6183)
!6183 = distinct !DILexicalBlock(scope: !6177, file: !3, line: 2749, column: 2)
!6184 = !DILocation(line: 2749, column: 2, scope: !6177)
!6185 = !DILocation(line: 2750, column: 8, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 2750, column: 7)
!6187 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2749, column: 56)
!6188 = !DILocation(line: 2750, column: 13, scope: !6186)
!6189 = !DILocation(line: 2750, column: 18, scope: !6186)
!6190 = !DILocation(line: 2750, column: 28, scope: !6186)
!6191 = !DILocation(line: 2750, column: 32, scope: !6186)
!6192 = !DILocation(line: 2750, column: 39, scope: !6186)
!6193 = !DILocation(line: 2750, column: 36, scope: !6186)
!6194 = !DILocation(line: 2750, column: 7, scope: !6187)
!6195 = !DILocation(line: 2751, column: 18, scope: !6196)
!6196 = distinct !DILexicalBlock(scope: !6186, file: !3, line: 2750, column: 50)
!6197 = !DILocation(line: 2751, column: 24, scope: !6196)
!6198 = !DILocation(line: 2751, column: 29, scope: !6196)
!6199 = !DILocation(line: 2751, column: 11, scope: !6196)
!6200 = !DILocation(line: 2751, column: 9, scope: !6196)
!6201 = !DILocation(line: 2752, column: 18, scope: !6196)
!6202 = !DILocation(line: 2752, column: 24, scope: !6196)
!6203 = !DILocation(line: 2752, column: 29, scope: !6196)
!6204 = !DILocation(line: 2752, column: 11, scope: !6196)
!6205 = !DILocation(line: 2752, column: 9, scope: !6196)
!6206 = !DILocation(line: 2754, column: 18, scope: !6196)
!6207 = !DILocation(line: 2754, column: 24, scope: !6196)
!6208 = !DILocation(line: 2754, column: 29, scope: !6196)
!6209 = !DILocation(line: 2754, column: 11, scope: !6196)
!6210 = !DILocation(line: 2754, column: 9, scope: !6196)
!6211 = !DILocation(line: 2755, column: 18, scope: !6196)
!6212 = !DILocation(line: 2755, column: 24, scope: !6196)
!6213 = !DILocation(line: 2755, column: 29, scope: !6196)
!6214 = !DILocation(line: 2755, column: 11, scope: !6196)
!6215 = !DILocation(line: 2755, column: 9, scope: !6196)
!6216 = !DILocation(line: 2756, column: 3, scope: !6196)
!6217 = !DILocation(line: 2757, column: 2, scope: !6187)
!6218 = !DILocation(line: 2749, column: 45, scope: !6183)
!6219 = !DILocation(line: 2749, column: 50, scope: !6183)
!6220 = !DILocation(line: 2749, column: 43, scope: !6183)
!6221 = !DILocation(line: 2749, column: 2, scope: !6183)
!6222 = distinct !{!6222, !6184, !6223}
!6223 = !DILocation(line: 2757, column: 2, scope: !6177)
!6224 = !DILocation(line: 2759, column: 6, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 2759, column: 6)
!6226 = !DILocation(line: 2759, column: 11, scope: !6225)
!6227 = !DILocation(line: 2759, column: 6, scope: !6123)
!6228 = !DILocalVariable(name: "smooth_viewtx", scope: !6229, file: !3, line: 2760, type: !2040)
!6229 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 2759, column: 17)
!6230 = !DILocation(line: 2760, column: 13, scope: !6229)
!6231 = !DILocation(line: 2760, column: 59, scope: !6229)
!6232 = !DILocation(line: 2760, column: 29, scope: !6229)
!6233 = !DILocation(line: 2762, column: 11, scope: !6229)
!6234 = !DILocation(line: 2762, column: 8, scope: !6229)
!6235 = !DILocation(line: 2763, column: 11, scope: !6229)
!6236 = !DILocation(line: 2763, column: 8, scope: !6229)
!6237 = !DILocation(line: 2764, column: 11, scope: !6229)
!6238 = !DILocation(line: 2764, column: 8, scope: !6229)
!6239 = !DILocation(line: 2765, column: 11, scope: !6229)
!6240 = !DILocation(line: 2765, column: 8, scope: !6229)
!6241 = !DILocation(line: 2767, column: 17, scope: !6229)
!6242 = !DILocation(line: 2767, column: 15, scope: !6229)
!6243 = !DILocation(line: 2769, column: 18, scope: !6229)
!6244 = !DILocation(line: 2769, column: 11, scope: !6229)
!6245 = !DILocation(line: 2769, column: 16, scope: !6229)
!6246 = !DILocation(line: 2770, column: 18, scope: !6229)
!6247 = !DILocation(line: 2770, column: 11, scope: !6229)
!6248 = !DILocation(line: 2770, column: 16, scope: !6229)
!6249 = !DILocation(line: 2772, column: 18, scope: !6229)
!6250 = !DILocation(line: 2772, column: 11, scope: !6229)
!6251 = !DILocation(line: 2772, column: 16, scope: !6229)
!6252 = !DILocation(line: 2773, column: 18, scope: !6229)
!6253 = !DILocation(line: 2773, column: 11, scope: !6229)
!6254 = !DILocation(line: 2773, column: 16, scope: !6229)
!6255 = !DILocation(line: 2776, column: 7, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6229, file: !3, line: 2776, column: 7)
!6257 = !DILocation(line: 2776, column: 21, scope: !6256)
!6258 = !DILocation(line: 2776, column: 19, scope: !6256)
!6259 = !DILocation(line: 2776, column: 7, scope: !6229)
!6260 = !DILocation(line: 2777, column: 11, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6256, file: !3, line: 2776, column: 48)
!6262 = !DILocation(line: 2777, column: 9, scope: !6261)
!6263 = !DILocation(line: 2779, column: 19, scope: !6261)
!6264 = !DILocation(line: 2779, column: 27, scope: !6261)
!6265 = !DILocation(line: 2779, column: 39, scope: !6261)
!6266 = !DILocation(line: 2779, column: 24, scope: !6261)
!6267 = !DILocation(line: 2779, column: 12, scope: !6261)
!6268 = !DILocation(line: 2779, column: 17, scope: !6261)
!6269 = !DILocation(line: 2780, column: 19, scope: !6261)
!6270 = !DILocation(line: 2780, column: 27, scope: !6261)
!6271 = !DILocation(line: 2780, column: 39, scope: !6261)
!6272 = !DILocation(line: 2780, column: 24, scope: !6261)
!6273 = !DILocation(line: 2780, column: 12, scope: !6261)
!6274 = !DILocation(line: 2780, column: 17, scope: !6261)
!6275 = !DILocation(line: 2781, column: 3, scope: !6261)
!6276 = !DILocation(line: 2783, column: 25, scope: !6229)
!6277 = !DILocation(line: 2783, column: 28, scope: !6229)
!6278 = !DILocation(line: 2783, column: 42, scope: !6229)
!6279 = !DILocation(line: 2783, column: 3, scope: !6229)
!6280 = !DILocation(line: 2785, column: 3, scope: !6229)
!6281 = !DILocation(line: 2788, column: 3, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6225, file: !3, line: 2787, column: 7)
!6283 = !DILocation(line: 2791, column: 1, scope: !6123)
!6284 = distinct !DISubprogram(name: "SEQUENCER_OT_strip_jump", scope: !3, file: !3, line: 2911, type: !4701, scopeLine: 2912, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6285 = !DILocalVariable(name: "ot", arg: 1, scope: !6284, file: !3, line: 2911, type: !4703)
!6286 = !DILocation(line: 2911, column: 46, scope: !6284)
!6287 = !DILocation(line: 2914, column: 2, scope: !6284)
!6288 = !DILocation(line: 2914, column: 6, scope: !6284)
!6289 = !DILocation(line: 2914, column: 11, scope: !6284)
!6290 = !DILocation(line: 2915, column: 2, scope: !6284)
!6291 = !DILocation(line: 2915, column: 6, scope: !6284)
!6292 = !DILocation(line: 2915, column: 13, scope: !6284)
!6293 = !DILocation(line: 2916, column: 2, scope: !6284)
!6294 = !DILocation(line: 2916, column: 6, scope: !6284)
!6295 = !DILocation(line: 2916, column: 18, scope: !6284)
!6296 = !DILocation(line: 2919, column: 2, scope: !6284)
!6297 = !DILocation(line: 2919, column: 6, scope: !6284)
!6298 = !DILocation(line: 2919, column: 11, scope: !6284)
!6299 = !DILocation(line: 2920, column: 2, scope: !6284)
!6300 = !DILocation(line: 2920, column: 6, scope: !6284)
!6301 = !DILocation(line: 2920, column: 11, scope: !6284)
!6302 = !DILocation(line: 2923, column: 2, scope: !6284)
!6303 = !DILocation(line: 2923, column: 6, scope: !6284)
!6304 = !DILocation(line: 2923, column: 11, scope: !6284)
!6305 = !DILocation(line: 2926, column: 18, scope: !6284)
!6306 = !DILocation(line: 2926, column: 22, scope: !6284)
!6307 = !DILocation(line: 2926, column: 2, scope: !6284)
!6308 = !DILocation(line: 2927, column: 18, scope: !6284)
!6309 = !DILocation(line: 2927, column: 22, scope: !6284)
!6310 = !DILocation(line: 2927, column: 2, scope: !6284)
!6311 = !DILocation(line: 2928, column: 1, scope: !6284)
!6312 = distinct !DISubprogram(name: "sequencer_strip_jump_exec", scope: !3, file: !3, line: 2895, type: !2748, scopeLine: 2896, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6313 = !DILocalVariable(name: "C", arg: 1, scope: !6312, file: !3, line: 2895, type: !2329)
!6314 = !DILocation(line: 2895, column: 48, scope: !6312)
!6315 = !DILocalVariable(name: "op", arg: 2, scope: !6312, file: !3, line: 2895, type: !2750)
!6316 = !DILocation(line: 2895, column: 63, scope: !6312)
!6317 = !DILocalVariable(name: "scene", scope: !6312, file: !3, line: 2897, type: !1540)
!6318 = !DILocation(line: 2897, column: 9, scope: !6312)
!6319 = !DILocation(line: 2897, column: 32, scope: !6312)
!6320 = !DILocation(line: 2897, column: 17, scope: !6312)
!6321 = !DILocalVariable(name: "next", scope: !6312, file: !3, line: 2898, type: !4178)
!6322 = !DILocation(line: 2898, column: 13, scope: !6312)
!6323 = !DILocation(line: 2898, column: 36, scope: !6312)
!6324 = !DILocation(line: 2898, column: 40, scope: !6312)
!6325 = !DILocation(line: 2898, column: 20, scope: !6312)
!6326 = !DILocalVariable(name: "center", scope: !6312, file: !3, line: 2899, type: !4178)
!6327 = !DILocation(line: 2899, column: 13, scope: !6312)
!6328 = !DILocation(line: 2899, column: 38, scope: !6312)
!6329 = !DILocation(line: 2899, column: 42, scope: !6312)
!6330 = !DILocation(line: 2899, column: 22, scope: !6312)
!6331 = !DILocation(line: 2902, column: 27, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 2902, column: 6)
!6333 = !DILocation(line: 2902, column: 34, scope: !6332)
!6334 = !DILocation(line: 2902, column: 79, scope: !6332)
!6335 = !DILocation(line: 2902, column: 7, scope: !6332)
!6336 = !DILocation(line: 2902, column: 6, scope: !6312)
!6337 = !DILocation(line: 2903, column: 3, scope: !6338)
!6338 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 2902, column: 88)
!6339 = !DILocation(line: 2906, column: 24, scope: !6312)
!6340 = !DILocation(line: 2906, column: 48, scope: !6312)
!6341 = !DILocation(line: 2906, column: 2, scope: !6312)
!6342 = !DILocation(line: 2908, column: 2, scope: !6312)
!6343 = !DILocation(line: 2909, column: 1, scope: !6312)
!6344 = distinct !DISubprogram(name: "sequencer_strip_jump_poll", scope: !3, file: !3, line: 2885, type: !2327, scopeLine: 2886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6345 = !DILocalVariable(name: "C", arg: 1, scope: !6344, file: !3, line: 2885, type: !2329)
!6346 = !DILocation(line: 2885, column: 48, scope: !6344)
!6347 = !DILocation(line: 2888, column: 8, scope: !6348)
!6348 = distinct !DILexicalBlock(scope: !6344, file: !3, line: 2888, column: 6)
!6349 = !DILocation(line: 2888, column: 6, scope: !6348)
!6350 = !DILocation(line: 2888, column: 6, scope: !6344)
!6351 = !DILocation(line: 2889, column: 3, scope: !6348)
!6352 = !DILocation(line: 2891, column: 29, scope: !6344)
!6353 = !DILocation(line: 2891, column: 9, scope: !6344)
!6354 = !DILocation(line: 2891, column: 2, scope: !6344)
!6355 = !DILocation(line: 2892, column: 1, scope: !6344)
!6356 = distinct !DISubprogram(name: "SEQUENCER_OT_swap", scope: !3, file: !3, line: 3023, type: !4701, scopeLine: 3024, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6357 = !DILocalVariable(name: "ot", arg: 1, scope: !6356, file: !3, line: 3023, type: !4703)
!6358 = !DILocation(line: 3023, column: 40, scope: !6356)
!6359 = !DILocation(line: 3026, column: 2, scope: !6356)
!6360 = !DILocation(line: 3026, column: 6, scope: !6356)
!6361 = !DILocation(line: 3026, column: 11, scope: !6356)
!6362 = !DILocation(line: 3027, column: 2, scope: !6356)
!6363 = !DILocation(line: 3027, column: 6, scope: !6356)
!6364 = !DILocation(line: 3027, column: 13, scope: !6356)
!6365 = !DILocation(line: 3028, column: 2, scope: !6356)
!6366 = !DILocation(line: 3028, column: 6, scope: !6356)
!6367 = !DILocation(line: 3028, column: 18, scope: !6356)
!6368 = !DILocation(line: 3031, column: 2, scope: !6356)
!6369 = !DILocation(line: 3031, column: 6, scope: !6356)
!6370 = !DILocation(line: 3031, column: 11, scope: !6356)
!6371 = !DILocation(line: 3032, column: 2, scope: !6356)
!6372 = !DILocation(line: 3032, column: 6, scope: !6356)
!6373 = !DILocation(line: 3032, column: 11, scope: !6356)
!6374 = !DILocation(line: 3035, column: 2, scope: !6356)
!6375 = !DILocation(line: 3035, column: 6, scope: !6356)
!6376 = !DILocation(line: 3035, column: 11, scope: !6356)
!6377 = !DILocation(line: 3038, column: 15, scope: !6356)
!6378 = !DILocation(line: 3038, column: 19, scope: !6356)
!6379 = !DILocation(line: 3038, column: 2, scope: !6356)
!6380 = !DILocation(line: 3039, column: 1, scope: !6356)
!6381 = distinct !DISubprogram(name: "sequencer_swap_exec", scope: !3, file: !3, line: 2965, type: !2748, scopeLine: 2966, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6382 = !DILocalVariable(name: "C", arg: 1, scope: !6381, file: !3, line: 2965, type: !2329)
!6383 = !DILocation(line: 2965, column: 42, scope: !6381)
!6384 = !DILocalVariable(name: "op", arg: 2, scope: !6381, file: !3, line: 2965, type: !2750)
!6385 = !DILocation(line: 2965, column: 57, scope: !6381)
!6386 = !DILocalVariable(name: "scene", scope: !6381, file: !3, line: 2967, type: !1540)
!6387 = !DILocation(line: 2967, column: 9, scope: !6381)
!6388 = !DILocation(line: 2967, column: 32, scope: !6381)
!6389 = !DILocation(line: 2967, column: 17, scope: !6381)
!6390 = !DILocalVariable(name: "ed", scope: !6381, file: !3, line: 2968, type: !1843)
!6391 = !DILocation(line: 2968, column: 11, scope: !6381)
!6392 = !DILocation(line: 2968, column: 42, scope: !6381)
!6393 = !DILocation(line: 2968, column: 16, scope: !6381)
!6394 = !DILocalVariable(name: "active_seq", scope: !6381, file: !3, line: 2969, type: !269)
!6395 = !DILocation(line: 2969, column: 12, scope: !6381)
!6396 = !DILocation(line: 2969, column: 50, scope: !6381)
!6397 = !DILocation(line: 2969, column: 25, scope: !6381)
!6398 = !DILocalVariable(name: "seq", scope: !6381, file: !3, line: 2970, type: !269)
!6399 = !DILocation(line: 2970, column: 12, scope: !6381)
!6400 = !DILocalVariable(name: "iseq", scope: !6381, file: !3, line: 2970, type: !269)
!6401 = !DILocation(line: 2970, column: 18, scope: !6381)
!6402 = !DILocalVariable(name: "side", scope: !6381, file: !3, line: 2971, type: !15)
!6403 = !DILocation(line: 2971, column: 6, scope: !6381)
!6404 = !DILocation(line: 2971, column: 26, scope: !6381)
!6405 = !DILocation(line: 2971, column: 30, scope: !6381)
!6406 = !DILocation(line: 2971, column: 13, scope: !6381)
!6407 = !DILocation(line: 2973, column: 6, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 2973, column: 6)
!6409 = !DILocation(line: 2973, column: 17, scope: !6408)
!6410 = !DILocation(line: 2973, column: 6, scope: !6381)
!6411 = !DILocation(line: 2973, column: 26, scope: !6408)
!6412 = !DILocation(line: 2975, column: 32, scope: !6381)
!6413 = !DILocation(line: 2975, column: 39, scope: !6381)
!6414 = !DILocation(line: 2975, column: 51, scope: !6381)
!6415 = !DILocation(line: 2975, column: 8, scope: !6381)
!6416 = !DILocation(line: 2975, column: 6, scope: !6381)
!6417 = !DILocation(line: 2977, column: 6, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 2977, column: 6)
!6419 = !DILocation(line: 2977, column: 6, scope: !6381)
!6420 = !DILocation(line: 2980, column: 42, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 2980, column: 7)
!6422 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 2977, column: 11)
!6423 = !DILocation(line: 2980, column: 47, scope: !6421)
!6424 = !DILocation(line: 2980, column: 7, scope: !6421)
!6425 = !DILocation(line: 2980, column: 53, scope: !6421)
!6426 = !DILocation(line: 2980, column: 58, scope: !6421)
!6427 = !DILocation(line: 2980, column: 62, scope: !6421)
!6428 = !DILocation(line: 2980, column: 67, scope: !6421)
!6429 = !DILocation(line: 2980, column: 78, scope: !6421)
!6430 = !DILocation(line: 2980, column: 81, scope: !6421)
!6431 = !DILocation(line: 2980, column: 86, scope: !6421)
!6432 = !DILocation(line: 2980, column: 91, scope: !6421)
!6433 = !DILocation(line: 2980, column: 94, scope: !6421)
!6434 = !DILocation(line: 2980, column: 99, scope: !6421)
!6435 = !DILocation(line: 2980, column: 104, scope: !6421)
!6436 = !DILocation(line: 2980, column: 107, scope: !6421)
!6437 = !DILocation(line: 2980, column: 112, scope: !6421)
!6438 = !DILocation(line: 2980, column: 7, scope: !6422)
!6439 = !DILocation(line: 2981, column: 4, scope: !6421)
!6440 = !DILocation(line: 2982, column: 43, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 2982, column: 7)
!6442 = !DILocation(line: 2982, column: 55, scope: !6441)
!6443 = !DILocation(line: 2982, column: 8, scope: !6441)
!6444 = !DILocation(line: 2982, column: 61, scope: !6441)
!6445 = !DILocation(line: 2982, column: 67, scope: !6441)
!6446 = !DILocation(line: 2982, column: 71, scope: !6441)
!6447 = !DILocation(line: 2982, column: 83, scope: !6441)
!6448 = !DILocation(line: 2982, column: 94, scope: !6441)
!6449 = !DILocation(line: 2982, column: 97, scope: !6441)
!6450 = !DILocation(line: 2982, column: 109, scope: !6441)
!6451 = !DILocation(line: 2982, column: 114, scope: !6441)
!6452 = !DILocation(line: 2982, column: 117, scope: !6441)
!6453 = !DILocation(line: 2982, column: 129, scope: !6441)
!6454 = !DILocation(line: 2982, column: 134, scope: !6441)
!6455 = !DILocation(line: 2982, column: 137, scope: !6441)
!6456 = !DILocation(line: 2982, column: 149, scope: !6441)
!6457 = !DILocation(line: 2982, column: 7, scope: !6422)
!6458 = !DILocation(line: 2983, column: 4, scope: !6441)
!6459 = !DILocation(line: 2985, column: 11, scope: !6422)
!6460 = !DILocation(line: 2985, column: 3, scope: !6422)
!6461 = !DILocation(line: 2987, column: 19, scope: !6462)
!6462 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 2985, column: 17)
!6463 = !DILocation(line: 2987, column: 26, scope: !6462)
!6464 = !DILocation(line: 2987, column: 31, scope: !6462)
!6465 = !DILocation(line: 2987, column: 5, scope: !6462)
!6466 = !DILocation(line: 2988, column: 5, scope: !6462)
!6467 = !DILocation(line: 2990, column: 19, scope: !6462)
!6468 = !DILocation(line: 2990, column: 26, scope: !6462)
!6469 = !DILocation(line: 2990, column: 38, scope: !6462)
!6470 = !DILocation(line: 2990, column: 5, scope: !6462)
!6471 = !DILocation(line: 2991, column: 5, scope: !6462)
!6472 = !DILocation(line: 2995, column: 15, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 2995, column: 3)
!6474 = !DILocation(line: 2995, column: 22, scope: !6473)
!6475 = !DILocation(line: 2995, column: 26, scope: !6473)
!6476 = !DILocation(line: 2995, column: 36, scope: !6473)
!6477 = !DILocation(line: 2995, column: 13, scope: !6473)
!6478 = !DILocation(line: 2995, column: 8, scope: !6473)
!6479 = !DILocation(line: 2995, column: 43, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6473, file: !3, line: 2995, column: 3)
!6481 = !DILocation(line: 2995, column: 3, scope: !6473)
!6482 = !DILocation(line: 2996, column: 9, scope: !6483)
!6483 = distinct !DILexicalBlock(scope: !6484, file: !3, line: 2996, column: 8)
!6484 = distinct !DILexicalBlock(scope: !6480, file: !3, line: 2995, column: 68)
!6485 = !DILocation(line: 2996, column: 15, scope: !6483)
!6486 = !DILocation(line: 2996, column: 20, scope: !6483)
!6487 = !DILocation(line: 2996, column: 39, scope: !6483)
!6488 = !DILocation(line: 2996, column: 57, scope: !6483)
!6489 = !DILocation(line: 2996, column: 63, scope: !6483)
!6490 = !DILocation(line: 2996, column: 43, scope: !6483)
!6491 = !DILocation(line: 2996, column: 75, scope: !6483)
!6492 = !DILocation(line: 2996, column: 92, scope: !6483)
!6493 = !DILocation(line: 2996, column: 98, scope: !6483)
!6494 = !DILocation(line: 2996, column: 78, scope: !6483)
!6495 = !DILocation(line: 2996, column: 8, scope: !6484)
!6496 = !DILocation(line: 2997, column: 23, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 2996, column: 105)
!6498 = !DILocation(line: 2997, column: 30, scope: !6497)
!6499 = !DILocation(line: 2997, column: 5, scope: !6497)
!6500 = !DILocation(line: 2998, column: 4, scope: !6497)
!6501 = !DILocation(line: 2999, column: 3, scope: !6484)
!6502 = !DILocation(line: 2995, column: 56, scope: !6480)
!6503 = !DILocation(line: 2995, column: 62, scope: !6480)
!6504 = !DILocation(line: 2995, column: 54, scope: !6480)
!6505 = !DILocation(line: 2995, column: 3, scope: !6480)
!6506 = distinct !{!6506, !6481, !6507}
!6507 = !DILocation(line: 2999, column: 3, scope: !6473)
!6508 = !DILocation(line: 3002, column: 15, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 3002, column: 3)
!6510 = !DILocation(line: 3002, column: 22, scope: !6509)
!6511 = !DILocation(line: 3002, column: 26, scope: !6509)
!6512 = !DILocation(line: 3002, column: 36, scope: !6509)
!6513 = !DILocation(line: 3002, column: 13, scope: !6509)
!6514 = !DILocation(line: 3002, column: 8, scope: !6509)
!6515 = !DILocation(line: 3002, column: 43, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6509, file: !3, line: 3002, column: 3)
!6517 = !DILocation(line: 3002, column: 3, scope: !6509)
!6518 = !DILocation(line: 3003, column: 9, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !6520, file: !3, line: 3003, column: 8)
!6520 = distinct !DILexicalBlock(scope: !6516, file: !3, line: 3002, column: 68)
!6521 = !DILocation(line: 3003, column: 15, scope: !6519)
!6522 = !DILocation(line: 3003, column: 20, scope: !6519)
!6523 = !DILocation(line: 3003, column: 39, scope: !6519)
!6524 = !DILocation(line: 3003, column: 57, scope: !6519)
!6525 = !DILocation(line: 3003, column: 63, scope: !6519)
!6526 = !DILocation(line: 3003, column: 43, scope: !6519)
!6527 = !DILocation(line: 3003, column: 75, scope: !6519)
!6528 = !DILocation(line: 3003, column: 92, scope: !6519)
!6529 = !DILocation(line: 3003, column: 98, scope: !6519)
!6530 = !DILocation(line: 3003, column: 78, scope: !6519)
!6531 = !DILocation(line: 3003, column: 8, scope: !6520)
!6532 = !DILocation(line: 3005, column: 35, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 3005, column: 9)
!6534 = distinct !DILexicalBlock(scope: !6519, file: !3, line: 3003, column: 105)
!6535 = !DILocation(line: 3005, column: 39, scope: !6533)
!6536 = !DILocation(line: 3005, column: 49, scope: !6533)
!6537 = !DILocation(line: 3005, column: 9, scope: !6533)
!6538 = !DILocation(line: 3005, column: 9, scope: !6534)
!6539 = !DILocation(line: 3006, column: 32, scope: !6540)
!6540 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 3005, column: 57)
!6541 = !DILocation(line: 3006, column: 36, scope: !6540)
!6542 = !DILocation(line: 3006, column: 46, scope: !6540)
!6543 = !DILocation(line: 3006, column: 52, scope: !6540)
!6544 = !DILocation(line: 3006, column: 6, scope: !6540)
!6545 = !DILocation(line: 3007, column: 5, scope: !6540)
!6546 = !DILocation(line: 3008, column: 4, scope: !6534)
!6547 = !DILocation(line: 3009, column: 3, scope: !6520)
!6548 = !DILocation(line: 3002, column: 56, scope: !6516)
!6549 = !DILocation(line: 3002, column: 62, scope: !6516)
!6550 = !DILocation(line: 3002, column: 54, scope: !6516)
!6551 = !DILocation(line: 3002, column: 3, scope: !6516)
!6552 = distinct !{!6552, !6517, !6553}
!6553 = !DILocation(line: 3009, column: 3, scope: !6509)
!6554 = !DILocation(line: 3013, column: 22, scope: !6422)
!6555 = !DILocation(line: 3013, column: 3, scope: !6422)
!6556 = !DILocation(line: 3015, column: 25, scope: !6422)
!6557 = !DILocation(line: 3015, column: 53, scope: !6422)
!6558 = !DILocation(line: 3015, column: 3, scope: !6422)
!6559 = !DILocation(line: 3017, column: 3, scope: !6422)
!6560 = !DILocation(line: 3020, column: 2, scope: !6381)
!6561 = !DILocation(line: 3021, column: 1, scope: !6381)
!6562 = distinct !DISubprogram(name: "SEQUENCER_OT_rendersize", scope: !3, file: !3, line: 3082, type: !4701, scopeLine: 3083, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6563 = !DILocalVariable(name: "ot", arg: 1, scope: !6562, file: !3, line: 3082, type: !4703)
!6564 = !DILocation(line: 3082, column: 46, scope: !6562)
!6565 = !DILocation(line: 3085, column: 2, scope: !6562)
!6566 = !DILocation(line: 3085, column: 6, scope: !6562)
!6567 = !DILocation(line: 3085, column: 11, scope: !6562)
!6568 = !DILocation(line: 3086, column: 2, scope: !6562)
!6569 = !DILocation(line: 3086, column: 6, scope: !6562)
!6570 = !DILocation(line: 3086, column: 13, scope: !6562)
!6571 = !DILocation(line: 3087, column: 2, scope: !6562)
!6572 = !DILocation(line: 3087, column: 6, scope: !6562)
!6573 = !DILocation(line: 3087, column: 18, scope: !6562)
!6574 = !DILocation(line: 3090, column: 2, scope: !6562)
!6575 = !DILocation(line: 3090, column: 6, scope: !6562)
!6576 = !DILocation(line: 3090, column: 11, scope: !6562)
!6577 = !DILocation(line: 3091, column: 2, scope: !6562)
!6578 = !DILocation(line: 3091, column: 6, scope: !6562)
!6579 = !DILocation(line: 3091, column: 11, scope: !6562)
!6580 = !DILocation(line: 3094, column: 2, scope: !6562)
!6581 = !DILocation(line: 3094, column: 6, scope: !6562)
!6582 = !DILocation(line: 3094, column: 11, scope: !6562)
!6583 = !DILocation(line: 3097, column: 1, scope: !6562)
!6584 = distinct !DISubprogram(name: "sequencer_rendersize_exec", scope: !3, file: !3, line: 3041, type: !2748, scopeLine: 3042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6585 = !DILocalVariable(name: "C", arg: 1, scope: !6584, file: !3, line: 3041, type: !2329)
!6586 = !DILocation(line: 3041, column: 48, scope: !6584)
!6587 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !6584, file: !3, line: 3041, type: !2750)
!6588 = !DILocation(line: 3041, column: 63, scope: !6584)
!6589 = !DILocalVariable(name: "retval", scope: !6584, file: !3, line: 3043, type: !15)
!6590 = !DILocation(line: 3043, column: 6, scope: !6584)
!6591 = !DILocalVariable(name: "scene", scope: !6584, file: !3, line: 3044, type: !1540)
!6592 = !DILocation(line: 3044, column: 9, scope: !6584)
!6593 = !DILocation(line: 3044, column: 32, scope: !6584)
!6594 = !DILocation(line: 3044, column: 17, scope: !6584)
!6595 = !DILocalVariable(name: "active_seq", scope: !6584, file: !3, line: 3045, type: !269)
!6596 = !DILocation(line: 3045, column: 12, scope: !6584)
!6597 = !DILocation(line: 3045, column: 50, scope: !6584)
!6598 = !DILocation(line: 3045, column: 25, scope: !6584)
!6599 = !DILocalVariable(name: "se", scope: !6584, file: !3, line: 3046, type: !316)
!6600 = !DILocation(line: 3046, column: 13, scope: !6584)
!6601 = !DILocation(line: 3048, column: 6, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 3048, column: 6)
!6603 = !DILocation(line: 3048, column: 17, scope: !6602)
!6604 = !DILocation(line: 3048, column: 6, scope: !6584)
!6605 = !DILocation(line: 3049, column: 3, scope: !6602)
!6606 = !DILocation(line: 3052, column: 6, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 3052, column: 6)
!6608 = !DILocation(line: 3052, column: 18, scope: !6607)
!6609 = !DILocation(line: 3052, column: 6, scope: !6584)
!6610 = !DILocation(line: 3053, column: 11, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6607, file: !3, line: 3052, column: 25)
!6612 = !DILocation(line: 3053, column: 23, scope: !6611)
!6613 = !DILocation(line: 3053, column: 3, scope: !6611)
!6614 = !DILocation(line: 3055, column: 39, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 3053, column: 29)
!6616 = !DILocation(line: 3055, column: 51, scope: !6615)
!6617 = !DILocation(line: 3055, column: 58, scope: !6615)
!6618 = !DILocation(line: 3055, column: 60, scope: !6615)
!6619 = !DILocation(line: 3055, column: 10, scope: !6615)
!6620 = !DILocation(line: 3055, column: 8, scope: !6615)
!6621 = !DILocation(line: 3056, column: 5, scope: !6615)
!6622 = !DILocation(line: 3058, column: 10, scope: !6615)
!6623 = !DILocation(line: 3058, column: 22, scope: !6615)
!6624 = !DILocation(line: 3058, column: 29, scope: !6615)
!6625 = !DILocation(line: 3058, column: 8, scope: !6615)
!6626 = !DILocation(line: 3059, column: 5, scope: !6615)
!6627 = !DILocation(line: 3065, column: 5, scope: !6615)
!6628 = !DILocation(line: 3067, column: 2, scope: !6611)
!6629 = !DILocation(line: 3069, column: 6, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 3069, column: 6)
!6631 = !DILocation(line: 3069, column: 6, scope: !6584)
!6632 = !DILocation(line: 3071, column: 8, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6634, file: !3, line: 3071, column: 7)
!6634 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 3069, column: 10)
!6635 = !DILocation(line: 3071, column: 12, scope: !6633)
!6636 = !DILocation(line: 3071, column: 23, scope: !6633)
!6637 = !DILocation(line: 3071, column: 28, scope: !6633)
!6638 = !DILocation(line: 3071, column: 32, scope: !6633)
!6639 = !DILocation(line: 3071, column: 36, scope: !6633)
!6640 = !DILocation(line: 3071, column: 48, scope: !6633)
!6641 = !DILocation(line: 3071, column: 7, scope: !6634)
!6642 = !DILocation(line: 3072, column: 20, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6633, file: !3, line: 3071, column: 54)
!6644 = !DILocation(line: 3072, column: 24, scope: !6643)
!6645 = !DILocation(line: 3072, column: 4, scope: !6643)
!6646 = !DILocation(line: 3072, column: 11, scope: !6643)
!6647 = !DILocation(line: 3072, column: 13, scope: !6643)
!6648 = !DILocation(line: 3072, column: 18, scope: !6643)
!6649 = !DILocation(line: 3073, column: 20, scope: !6643)
!6650 = !DILocation(line: 3073, column: 24, scope: !6643)
!6651 = !DILocation(line: 3073, column: 4, scope: !6643)
!6652 = !DILocation(line: 3073, column: 11, scope: !6643)
!6653 = !DILocation(line: 3073, column: 13, scope: !6643)
!6654 = !DILocation(line: 3073, column: 18, scope: !6643)
!6655 = !DILocation(line: 3074, column: 26, scope: !6643)
!6656 = !DILocation(line: 3074, column: 59, scope: !6643)
!6657 = !DILocation(line: 3074, column: 4, scope: !6643)
!6658 = !DILocation(line: 3075, column: 11, scope: !6643)
!6659 = !DILocation(line: 3076, column: 3, scope: !6643)
!6660 = !DILocation(line: 3077, column: 2, scope: !6634)
!6661 = !DILocation(line: 3079, column: 9, scope: !6584)
!6662 = !DILocation(line: 3079, column: 2, scope: !6584)
!6663 = !DILocation(line: 3080, column: 1, scope: !6584)
!6664 = distinct !DISubprogram(name: "SEQUENCER_OT_copy", scope: !3, file: !3, line: 3165, type: !4701, scopeLine: 3166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6665 = !DILocalVariable(name: "ot", arg: 1, scope: !6664, file: !3, line: 3165, type: !4703)
!6666 = !DILocation(line: 3165, column: 40, scope: !6664)
!6667 = !DILocation(line: 3168, column: 2, scope: !6664)
!6668 = !DILocation(line: 3168, column: 6, scope: !6664)
!6669 = !DILocation(line: 3168, column: 11, scope: !6664)
!6670 = !DILocation(line: 3169, column: 2, scope: !6664)
!6671 = !DILocation(line: 3169, column: 6, scope: !6664)
!6672 = !DILocation(line: 3169, column: 13, scope: !6664)
!6673 = !DILocation(line: 3170, column: 2, scope: !6664)
!6674 = !DILocation(line: 3170, column: 6, scope: !6664)
!6675 = !DILocation(line: 3170, column: 18, scope: !6664)
!6676 = !DILocation(line: 3173, column: 2, scope: !6664)
!6677 = !DILocation(line: 3173, column: 6, scope: !6664)
!6678 = !DILocation(line: 3173, column: 11, scope: !6664)
!6679 = !DILocation(line: 3174, column: 2, scope: !6664)
!6680 = !DILocation(line: 3174, column: 6, scope: !6664)
!6681 = !DILocation(line: 3174, column: 11, scope: !6664)
!6682 = !DILocation(line: 3177, column: 2, scope: !6664)
!6683 = !DILocation(line: 3177, column: 6, scope: !6664)
!6684 = !DILocation(line: 3177, column: 11, scope: !6664)
!6685 = !DILocation(line: 3180, column: 1, scope: !6664)
!6686 = distinct !DISubprogram(name: "sequencer_copy_exec", scope: !3, file: !3, line: 3113, type: !2748, scopeLine: 3114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6687 = !DILocalVariable(name: "C", arg: 1, scope: !6686, file: !3, line: 3113, type: !2329)
!6688 = !DILocation(line: 3113, column: 42, scope: !6686)
!6689 = !DILocalVariable(name: "op", arg: 2, scope: !6686, file: !3, line: 3113, type: !2750)
!6690 = !DILocation(line: 3113, column: 57, scope: !6686)
!6691 = !DILocalVariable(name: "scene", scope: !6686, file: !3, line: 3115, type: !1540)
!6692 = !DILocation(line: 3115, column: 9, scope: !6686)
!6693 = !DILocation(line: 3115, column: 32, scope: !6686)
!6694 = !DILocation(line: 3115, column: 17, scope: !6686)
!6695 = !DILocalVariable(name: "ed", scope: !6686, file: !3, line: 3116, type: !1843)
!6696 = !DILocation(line: 3116, column: 11, scope: !6686)
!6697 = !DILocation(line: 3116, column: 42, scope: !6686)
!6698 = !DILocation(line: 3116, column: 16, scope: !6686)
!6699 = !DILocalVariable(name: "nseqbase", scope: !6686, file: !3, line: 3118, type: !443)
!6700 = !DILocation(line: 3118, column: 11, scope: !6686)
!6701 = !DILocation(line: 3120, column: 2, scope: !6686)
!6702 = !DILocation(line: 3122, column: 43, scope: !6703)
!6703 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 3122, column: 6)
!6704 = !DILocation(line: 3122, column: 47, scope: !6703)
!6705 = !DILocation(line: 3122, column: 6, scope: !6703)
!6706 = !DILocation(line: 3122, column: 63, scope: !6703)
!6707 = !DILocation(line: 3122, column: 6, scope: !6686)
!6708 = !DILocation(line: 3123, column: 14, scope: !6709)
!6709 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 3122, column: 73)
!6710 = !DILocation(line: 3123, column: 18, scope: !6709)
!6711 = !DILocation(line: 3123, column: 3, scope: !6709)
!6712 = !DILocation(line: 3124, column: 3, scope: !6709)
!6713 = !DILocation(line: 3127, column: 36, scope: !6686)
!6714 = !DILocation(line: 3127, column: 60, scope: !6686)
!6715 = !DILocation(line: 3127, column: 64, scope: !6686)
!6716 = !DILocation(line: 3127, column: 2, scope: !6686)
!6717 = !DILocation(line: 3132, column: 15, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 3132, column: 6)
!6719 = !DILocation(line: 3132, column: 6, scope: !6718)
!6720 = !DILocation(line: 3132, column: 6, scope: !6686)
!6721 = !DILocalVariable(name: "seq", scope: !6722, file: !3, line: 3133, type: !269)
!6722 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 3132, column: 22)
!6723 = !DILocation(line: 3133, column: 13, scope: !6722)
!6724 = !DILocalVariable(name: "first_seq", scope: !6722, file: !3, line: 3133, type: !269)
!6725 = !DILocation(line: 3133, column: 19, scope: !6722)
!6726 = !DILocation(line: 3133, column: 40, scope: !6722)
!6727 = !DILocation(line: 3133, column: 31, scope: !6722)
!6728 = !DILocation(line: 3134, column: 22, scope: !6722)
!6729 = !DILocation(line: 3134, column: 26, scope: !6722)
!6730 = !DILocation(line: 3134, column: 3, scope: !6722)
!6731 = !DILocation(line: 3136, column: 14, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 3136, column: 3)
!6733 = !DILocation(line: 3136, column: 12, scope: !6732)
!6734 = !DILocation(line: 3136, column: 8, scope: !6732)
!6735 = !DILocation(line: 3136, column: 25, scope: !6736)
!6736 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3136, column: 3)
!6737 = !DILocation(line: 3136, column: 3, scope: !6732)
!6738 = !DILocation(line: 3137, column: 34, scope: !6736)
!6739 = !DILocation(line: 3137, column: 61, scope: !6736)
!6740 = !DILocation(line: 3137, column: 4, scope: !6736)
!6741 = !DILocation(line: 3136, column: 36, scope: !6736)
!6742 = !DILocation(line: 3136, column: 41, scope: !6736)
!6743 = !DILocation(line: 3136, column: 34, scope: !6736)
!6744 = !DILocation(line: 3136, column: 3, scope: !6736)
!6745 = distinct !{!6745, !6737, !6746}
!6746 = !DILocation(line: 3137, column: 66, scope: !6732)
!6747 = !DILocation(line: 3139, column: 29, scope: !6722)
!6748 = !DILocation(line: 3139, column: 27, scope: !6722)
!6749 = !DILocation(line: 3140, column: 28, scope: !6722)
!6750 = !DILocation(line: 3140, column: 32, scope: !6722)
!6751 = !DILocation(line: 3140, column: 42, scope: !6722)
!6752 = !DILocation(line: 3140, column: 26, scope: !6722)
!6753 = !DILocation(line: 3142, column: 7, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 3142, column: 7)
!6755 = !DILocation(line: 3142, column: 18, scope: !6754)
!6756 = !DILocation(line: 3142, column: 7, scope: !6722)
!6757 = !DILocation(line: 3143, column: 4, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6754, file: !3, line: 3142, column: 24)
!6759 = !DILocation(line: 3143, column: 15, scope: !6758)
!6760 = !DILocation(line: 3143, column: 21, scope: !6758)
!6761 = !DILocation(line: 3143, column: 26, scope: !6758)
!6762 = !DILocation(line: 3144, column: 25, scope: !6758)
!6763 = !DILocation(line: 3144, column: 36, scope: !6758)
!6764 = !DILocation(line: 3144, column: 4, scope: !6758)
!6765 = !DILocation(line: 3144, column: 8, scope: !6758)
!6766 = !DILocation(line: 3144, column: 18, scope: !6758)
!6767 = !DILocation(line: 3144, column: 23, scope: !6758)
!6768 = !DILocation(line: 3145, column: 4, scope: !6758)
!6769 = !DILocation(line: 3145, column: 15, scope: !6758)
!6770 = !DILocation(line: 3145, column: 20, scope: !6758)
!6771 = !DILocation(line: 3146, column: 3, scope: !6758)
!6772 = !DILocation(line: 3147, column: 2, scope: !6722)
!6773 = !DILocation(line: 3149, column: 28, scope: !6686)
!6774 = !DILocation(line: 3149, column: 35, scope: !6686)
!6775 = !DILocation(line: 3149, column: 37, scope: !6686)
!6776 = !DILocation(line: 3149, column: 26, scope: !6686)
!6777 = !DILocalVariable(name: "seq", scope: !6778, file: !3, line: 3153, type: !269)
!6778 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 3152, column: 2)
!6779 = !DILocation(line: 3153, column: 13, scope: !6778)
!6780 = !DILocation(line: 3154, column: 32, scope: !6781)
!6781 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 3154, column: 3)
!6782 = !DILocation(line: 3154, column: 14, scope: !6781)
!6783 = !DILocation(line: 3154, column: 12, scope: !6781)
!6784 = !DILocation(line: 3154, column: 8, scope: !6781)
!6785 = !DILocation(line: 3154, column: 39, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6781, file: !3, line: 3154, column: 3)
!6787 = !DILocation(line: 3154, column: 3, scope: !6781)
!6788 = !DILocation(line: 3155, column: 23, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6786, file: !3, line: 3154, column: 61)
!6790 = !DILocation(line: 3155, column: 30, scope: !6789)
!6791 = !DILocation(line: 3155, column: 4, scope: !6789)
!6792 = !DILocation(line: 3156, column: 3, scope: !6789)
!6793 = !DILocation(line: 3154, column: 50, scope: !6786)
!6794 = !DILocation(line: 3154, column: 55, scope: !6786)
!6795 = !DILocation(line: 3154, column: 48, scope: !6786)
!6796 = !DILocation(line: 3154, column: 3, scope: !6786)
!6797 = distinct !{!6797, !6787, !6798}
!6798 = !DILocation(line: 3156, column: 3, scope: !6781)
!6799 = !DILocation(line: 3159, column: 3, scope: !6778)
!6800 = !DILocation(line: 3162, column: 2, scope: !6686)
!6801 = !DILocation(line: 3163, column: 1, scope: !6686)
!6802 = distinct !DISubprogram(name: "SEQUENCER_OT_paste", scope: !3, file: !3, line: 3230, type: !4701, scopeLine: 3231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6803 = !DILocalVariable(name: "ot", arg: 1, scope: !6802, file: !3, line: 3230, type: !4703)
!6804 = !DILocation(line: 3230, column: 41, scope: !6802)
!6805 = !DILocation(line: 3233, column: 2, scope: !6802)
!6806 = !DILocation(line: 3233, column: 6, scope: !6802)
!6807 = !DILocation(line: 3233, column: 11, scope: !6802)
!6808 = !DILocation(line: 3234, column: 2, scope: !6802)
!6809 = !DILocation(line: 3234, column: 6, scope: !6802)
!6810 = !DILocation(line: 3234, column: 13, scope: !6802)
!6811 = !DILocation(line: 3235, column: 2, scope: !6802)
!6812 = !DILocation(line: 3235, column: 6, scope: !6802)
!6813 = !DILocation(line: 3235, column: 18, scope: !6802)
!6814 = !DILocation(line: 3238, column: 2, scope: !6802)
!6815 = !DILocation(line: 3238, column: 6, scope: !6802)
!6816 = !DILocation(line: 3238, column: 11, scope: !6802)
!6817 = !DILocation(line: 3239, column: 2, scope: !6802)
!6818 = !DILocation(line: 3239, column: 6, scope: !6802)
!6819 = !DILocation(line: 3239, column: 11, scope: !6802)
!6820 = !DILocation(line: 3242, column: 2, scope: !6802)
!6821 = !DILocation(line: 3242, column: 6, scope: !6802)
!6822 = !DILocation(line: 3242, column: 11, scope: !6802)
!6823 = !DILocation(line: 3245, column: 1, scope: !6802)
!6824 = distinct !DISubprogram(name: "sequencer_paste_exec", scope: !3, file: !3, line: 3182, type: !2748, scopeLine: 3183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!6825 = !DILocalVariable(name: "C", arg: 1, scope: !6824, file: !3, line: 3182, type: !2329)
!6826 = !DILocation(line: 3182, column: 43, scope: !6824)
!6827 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !6824, file: !3, line: 3182, type: !2750)
!6828 = !DILocation(line: 3182, column: 58, scope: !6824)
!6829 = !DILocalVariable(name: "bmain", scope: !6824, file: !3, line: 3184, type: !6830)
!6830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6831, size: 64)
!6831 = !DIDerivedType(tag: DW_TAG_typedef, name: "Main", file: !6832, line: 104, baseType: !6833)
!6832 = !DIFile(filename: "blender/source/blender/blenkernel/BKE_main.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!6833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Main", file: !6832, line: 53, size: 15232, elements: !6834)
!6834 = !{!6835, !6837, !6838, !6839, !6840, !6841, !6842, !6843, !6844, !6848, !6849, !6850, !6851, !6852, !6853, !6854, !6855, !6856, !6857, !6858, !6859, !6860, !6861, !6862, !6863, !6864, !6865, !6866, !6867, !6868, !6869, !6870, !6871, !6872, !6873, !6874, !6875, !6876, !6877, !6878, !6879, !6880, !6881, !6882, !6883, !6884, !6885, !6888}
!6835 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !6833, file: !6832, line: 54, baseType: !6836, size: 64)
!6836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6833, size: 64)
!6837 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !6833, file: !6832, line: 54, baseType: !6836, size: 64, offset: 64)
!6838 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !6833, file: !6832, line: 55, baseType: !408, size: 8192, offset: 128)
!6839 = !DIDerivedType(tag: DW_TAG_member, name: "versionfile", scope: !6833, file: !6832, line: 56, baseType: !299, size: 16, offset: 8320)
!6840 = !DIDerivedType(tag: DW_TAG_member, name: "subversionfile", scope: !6833, file: !6832, line: 56, baseType: !299, size: 16, offset: 8336)
!6841 = !DIDerivedType(tag: DW_TAG_member, name: "minversionfile", scope: !6833, file: !6832, line: 57, baseType: !299, size: 16, offset: 8352)
!6842 = !DIDerivedType(tag: DW_TAG_member, name: "minsubversionfile", scope: !6833, file: !6832, line: 57, baseType: !299, size: 16, offset: 8368)
!6843 = !DIDerivedType(tag: DW_TAG_member, name: "build_commit_timestamp", scope: !6833, file: !6832, line: 58, baseType: !1492, size: 64, offset: 8384)
!6844 = !DIDerivedType(tag: DW_TAG_member, name: "build_hash", scope: !6833, file: !6832, line: 59, baseType: !6845, size: 128, offset: 8448)
!6845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 128, elements: !6846)
!6846 = !{!6847}
!6847 = !DISubrange(count: 16)
!6848 = !DIDerivedType(tag: DW_TAG_member, name: "recovered", scope: !6833, file: !6832, line: 60, baseType: !299, size: 16, offset: 8576)
!6849 = !DIDerivedType(tag: DW_TAG_member, name: "curlib", scope: !6833, file: !6832, line: 62, baseType: !398, size: 64, offset: 8640)
!6850 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !6833, file: !6832, line: 63, baseType: !443, size: 128, offset: 8704)
!6851 = !DIDerivedType(tag: DW_TAG_member, name: "library", scope: !6833, file: !6832, line: 64, baseType: !443, size: 128, offset: 8832)
!6852 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !6833, file: !6832, line: 65, baseType: !443, size: 128, offset: 8960)
!6853 = !DIDerivedType(tag: DW_TAG_member, name: "mesh", scope: !6833, file: !6832, line: 66, baseType: !443, size: 128, offset: 9088)
!6854 = !DIDerivedType(tag: DW_TAG_member, name: "curve", scope: !6833, file: !6832, line: 67, baseType: !443, size: 128, offset: 9216)
!6855 = !DIDerivedType(tag: DW_TAG_member, name: "mball", scope: !6833, file: !6832, line: 68, baseType: !443, size: 128, offset: 9344)
!6856 = !DIDerivedType(tag: DW_TAG_member, name: "mat", scope: !6833, file: !6832, line: 69, baseType: !443, size: 128, offset: 9472)
!6857 = !DIDerivedType(tag: DW_TAG_member, name: "tex", scope: !6833, file: !6832, line: 70, baseType: !443, size: 128, offset: 9600)
!6858 = !DIDerivedType(tag: DW_TAG_member, name: "image", scope: !6833, file: !6832, line: 71, baseType: !443, size: 128, offset: 9728)
!6859 = !DIDerivedType(tag: DW_TAG_member, name: "latt", scope: !6833, file: !6832, line: 72, baseType: !443, size: 128, offset: 9856)
!6860 = !DIDerivedType(tag: DW_TAG_member, name: "lamp", scope: !6833, file: !6832, line: 73, baseType: !443, size: 128, offset: 9984)
!6861 = !DIDerivedType(tag: DW_TAG_member, name: "camera", scope: !6833, file: !6832, line: 74, baseType: !443, size: 128, offset: 10112)
!6862 = !DIDerivedType(tag: DW_TAG_member, name: "ipo", scope: !6833, file: !6832, line: 75, baseType: !443, size: 128, offset: 10240)
!6863 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !6833, file: !6832, line: 76, baseType: !443, size: 128, offset: 10368)
!6864 = !DIDerivedType(tag: DW_TAG_member, name: "world", scope: !6833, file: !6832, line: 77, baseType: !443, size: 128, offset: 10496)
!6865 = !DIDerivedType(tag: DW_TAG_member, name: "screen", scope: !6833, file: !6832, line: 78, baseType: !443, size: 128, offset: 10624)
!6866 = !DIDerivedType(tag: DW_TAG_member, name: "script", scope: !6833, file: !6832, line: 79, baseType: !443, size: 128, offset: 10752)
!6867 = !DIDerivedType(tag: DW_TAG_member, name: "vfont", scope: !6833, file: !6832, line: 80, baseType: !443, size: 128, offset: 10880)
!6868 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !6833, file: !6832, line: 81, baseType: !443, size: 128, offset: 11008)
!6869 = !DIDerivedType(tag: DW_TAG_member, name: "speaker", scope: !6833, file: !6832, line: 82, baseType: !443, size: 128, offset: 11136)
!6870 = !DIDerivedType(tag: DW_TAG_member, name: "sound", scope: !6833, file: !6832, line: 83, baseType: !443, size: 128, offset: 11264)
!6871 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !6833, file: !6832, line: 84, baseType: !443, size: 128, offset: 11392)
!6872 = !DIDerivedType(tag: DW_TAG_member, name: "armature", scope: !6833, file: !6832, line: 85, baseType: !443, size: 128, offset: 11520)
!6873 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !6833, file: !6832, line: 86, baseType: !443, size: 128, offset: 11648)
!6874 = !DIDerivedType(tag: DW_TAG_member, name: "nodetree", scope: !6833, file: !6832, line: 87, baseType: !443, size: 128, offset: 11776)
!6875 = !DIDerivedType(tag: DW_TAG_member, name: "brush", scope: !6833, file: !6832, line: 88, baseType: !443, size: 128, offset: 11904)
!6876 = !DIDerivedType(tag: DW_TAG_member, name: "particle", scope: !6833, file: !6832, line: 89, baseType: !443, size: 128, offset: 12032)
!6877 = !DIDerivedType(tag: DW_TAG_member, name: "palettes", scope: !6833, file: !6832, line: 90, baseType: !443, size: 128, offset: 12160)
!6878 = !DIDerivedType(tag: DW_TAG_member, name: "paintcurves", scope: !6833, file: !6832, line: 91, baseType: !443, size: 128, offset: 12288)
!6879 = !DIDerivedType(tag: DW_TAG_member, name: "wm", scope: !6833, file: !6832, line: 92, baseType: !443, size: 128, offset: 12416)
!6880 = !DIDerivedType(tag: DW_TAG_member, name: "gpencil", scope: !6833, file: !6832, line: 93, baseType: !443, size: 128, offset: 12544)
!6881 = !DIDerivedType(tag: DW_TAG_member, name: "movieclip", scope: !6833, file: !6832, line: 94, baseType: !443, size: 128, offset: 12672)
!6882 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !6833, file: !6832, line: 95, baseType: !443, size: 128, offset: 12800)
!6883 = !DIDerivedType(tag: DW_TAG_member, name: "linestyle", scope: !6833, file: !6832, line: 96, baseType: !443, size: 128, offset: 12928)
!6884 = !DIDerivedType(tag: DW_TAG_member, name: "id_tag_update", scope: !6833, file: !6832, line: 98, baseType: !321, size: 2048, offset: 13056)
!6885 = !DIDerivedType(tag: DW_TAG_member, name: "eval_ctx", scope: !6833, file: !6832, line: 101, baseType: !6886, size: 64, offset: 15104)
!6886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6887, size: 64)
!6887 = !DICompositeType(tag: DW_TAG_structure_type, name: "EvaluationContext", file: !6832, line: 49, flags: DIFlagFwdDecl)
!6888 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !6833, file: !6832, line: 103, baseType: !6889, size: 64, offset: 15168)
!6889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6890, size: 64)
!6890 = !DICompositeType(tag: DW_TAG_structure_type, name: "MainLock", file: !6832, line: 51, flags: DIFlagFwdDecl)
!6891 = !DILocation(line: 3184, column: 8, scope: !6824)
!6892 = !DILocation(line: 3184, column: 30, scope: !6824)
!6893 = !DILocation(line: 3184, column: 16, scope: !6824)
!6894 = !DILocalVariable(name: "scene", scope: !6824, file: !3, line: 3185, type: !1540)
!6895 = !DILocation(line: 3185, column: 9, scope: !6824)
!6896 = !DILocation(line: 3185, column: 32, scope: !6824)
!6897 = !DILocation(line: 3185, column: 17, scope: !6824)
!6898 = !DILocalVariable(name: "ed", scope: !6824, file: !3, line: 3186, type: !1843)
!6899 = !DILocation(line: 3186, column: 11, scope: !6824)
!6900 = !DILocation(line: 3186, column: 42, scope: !6824)
!6901 = !DILocation(line: 3186, column: 16, scope: !6824)
!6902 = !DILocalVariable(name: "nseqbase", scope: !6824, file: !3, line: 3187, type: !443)
!6903 = !DILocation(line: 3187, column: 11, scope: !6824)
!6904 = !DILocalVariable(name: "ofs", scope: !6824, file: !3, line: 3188, type: !15)
!6905 = !DILocation(line: 3188, column: 6, scope: !6824)
!6906 = !DILocalVariable(name: "iseq", scope: !6824, file: !3, line: 3189, type: !269)
!6907 = !DILocation(line: 3189, column: 12, scope: !6824)
!6908 = !DILocalVariable(name: "iseq_first", scope: !6824, file: !3, line: 3189, type: !269)
!6909 = !DILocation(line: 3189, column: 19, scope: !6824)
!6910 = !DILocation(line: 3191, column: 28, scope: !6824)
!6911 = !DILocation(line: 3191, column: 2, scope: !6824)
!6912 = !DILocation(line: 3192, column: 8, scope: !6824)
!6913 = !DILocation(line: 3192, column: 15, scope: !6824)
!6914 = !DILocation(line: 3192, column: 17, scope: !6824)
!6915 = !DILocation(line: 3192, column: 24, scope: !6824)
!6916 = !DILocation(line: 3192, column: 22, scope: !6824)
!6917 = !DILocation(line: 3192, column: 6, scope: !6824)
!6918 = !DILocation(line: 3194, column: 36, scope: !6824)
!6919 = !DILocation(line: 3194, column: 2, scope: !6824)
!6920 = !DILocation(line: 3197, column: 6, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 3197, column: 6)
!6922 = !DILocation(line: 3197, column: 6, scope: !6824)
!6923 = !DILocation(line: 3198, column: 24, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !6925, file: !3, line: 3198, column: 3)
!6925 = distinct !DILexicalBlock(scope: !6921, file: !3, line: 3197, column: 11)
!6926 = !DILocation(line: 3198, column: 15, scope: !6924)
!6927 = !DILocation(line: 3198, column: 13, scope: !6924)
!6928 = !DILocation(line: 3198, column: 8, scope: !6924)
!6929 = !DILocation(line: 3198, column: 31, scope: !6930)
!6930 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 3198, column: 3)
!6931 = !DILocation(line: 3198, column: 3, scope: !6924)
!6932 = !DILocation(line: 3199, column: 27, scope: !6933)
!6933 = distinct !DILexicalBlock(scope: !6930, file: !3, line: 3198, column: 56)
!6934 = !DILocation(line: 3199, column: 34, scope: !6933)
!6935 = !DILocation(line: 3199, column: 40, scope: !6933)
!6936 = !DILocation(line: 3199, column: 4, scope: !6933)
!6937 = !DILocation(line: 3200, column: 3, scope: !6933)
!6938 = !DILocation(line: 3198, column: 44, scope: !6930)
!6939 = !DILocation(line: 3198, column: 50, scope: !6930)
!6940 = !DILocation(line: 3198, column: 42, scope: !6930)
!6941 = !DILocation(line: 3198, column: 3, scope: !6930)
!6942 = distinct !{!6942, !6931, !6943}
!6943 = !DILocation(line: 3200, column: 3, scope: !6924)
!6944 = !DILocation(line: 3201, column: 2, scope: !6925)
!6945 = !DILocation(line: 3203, column: 59, scope: !6824)
!6946 = !DILocation(line: 3203, column: 2, scope: !6824)
!6947 = !DILocation(line: 3205, column: 23, scope: !6948)
!6948 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 3205, column: 2)
!6949 = !DILocation(line: 3205, column: 14, scope: !6948)
!6950 = !DILocation(line: 3205, column: 12, scope: !6948)
!6951 = !DILocation(line: 3205, column: 7, scope: !6948)
!6952 = !DILocation(line: 3205, column: 30, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6948, file: !3, line: 3205, column: 2)
!6954 = !DILocation(line: 3205, column: 2, scope: !6948)
!6955 = !DILocation(line: 3206, column: 27, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 3205, column: 55)
!6957 = !DILocation(line: 3206, column: 34, scope: !6956)
!6958 = !DILocation(line: 3206, column: 3, scope: !6956)
!6959 = !DILocation(line: 3207, column: 2, scope: !6956)
!6960 = !DILocation(line: 3205, column: 43, scope: !6953)
!6961 = !DILocation(line: 3205, column: 49, scope: !6953)
!6962 = !DILocation(line: 3205, column: 41, scope: !6953)
!6963 = !DILocation(line: 3205, column: 2, scope: !6953)
!6964 = distinct !{!6964, !6954, !6965}
!6965 = !DILocation(line: 3207, column: 2, scope: !6948)
!6966 = !DILocation(line: 3209, column: 24, scope: !6824)
!6967 = !DILocation(line: 3209, column: 15, scope: !6824)
!6968 = !DILocation(line: 3209, column: 13, scope: !6824)
!6969 = !DILocation(line: 3211, column: 21, scope: !6824)
!6970 = !DILocation(line: 3211, column: 25, scope: !6824)
!6971 = !DILocation(line: 3211, column: 2, scope: !6824)
!6972 = !DILocation(line: 3214, column: 14, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 3214, column: 2)
!6974 = !DILocation(line: 3214, column: 12, scope: !6973)
!6975 = !DILocation(line: 3214, column: 7, scope: !6973)
!6976 = !DILocation(line: 3214, column: 26, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 3214, column: 2)
!6978 = !DILocation(line: 3214, column: 2, scope: !6973)
!6979 = !DILocation(line: 3215, column: 33, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6977, file: !3, line: 3214, column: 51)
!6981 = !DILocation(line: 3215, column: 61, scope: !6980)
!6982 = !DILocation(line: 3215, column: 3, scope: !6980)
!6983 = !DILocation(line: 3216, column: 2, scope: !6980)
!6984 = !DILocation(line: 3214, column: 39, scope: !6977)
!6985 = !DILocation(line: 3214, column: 45, scope: !6977)
!6986 = !DILocation(line: 3214, column: 37, scope: !6977)
!6987 = !DILocation(line: 3214, column: 2, scope: !6977)
!6988 = distinct !{!6988, !6978, !6989}
!6989 = !DILocation(line: 3216, column: 2, scope: !6973)
!6990 = !DILocation(line: 3219, column: 14, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 3219, column: 2)
!6992 = !DILocation(line: 3219, column: 12, scope: !6991)
!6993 = !DILocation(line: 3219, column: 7, scope: !6991)
!6994 = !DILocation(line: 3219, column: 26, scope: !6995)
!6995 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 3219, column: 2)
!6996 = !DILocation(line: 3219, column: 2, scope: !6991)
!6997 = !DILocation(line: 3220, column: 33, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6999, file: !3, line: 3220, column: 7)
!6999 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 3219, column: 51)
!7000 = !DILocation(line: 3220, column: 37, scope: !6998)
!7001 = !DILocation(line: 3220, column: 47, scope: !6998)
!7002 = !DILocation(line: 3220, column: 7, scope: !6998)
!7003 = !DILocation(line: 3220, column: 7, scope: !6999)
!7004 = !DILocation(line: 3221, column: 30, scope: !7005)
!7005 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 3220, column: 54)
!7006 = !DILocation(line: 3221, column: 34, scope: !7005)
!7007 = !DILocation(line: 3221, column: 44, scope: !7005)
!7008 = !DILocation(line: 3221, column: 50, scope: !7005)
!7009 = !DILocation(line: 3221, column: 4, scope: !7005)
!7010 = !DILocation(line: 3222, column: 3, scope: !7005)
!7011 = !DILocation(line: 3223, column: 2, scope: !6999)
!7012 = !DILocation(line: 3219, column: 39, scope: !6995)
!7013 = !DILocation(line: 3219, column: 45, scope: !6995)
!7014 = !DILocation(line: 3219, column: 37, scope: !6995)
!7015 = !DILocation(line: 3219, column: 2, scope: !6995)
!7016 = distinct !{!7016, !6996, !7017}
!7017 = !DILocation(line: 3223, column: 2, scope: !6991)
!7018 = !DILocation(line: 3225, column: 24, scope: !6824)
!7019 = !DILocation(line: 3225, column: 52, scope: !6824)
!7020 = !DILocation(line: 3225, column: 2, scope: !6824)
!7021 = !DILocation(line: 3227, column: 2, scope: !6824)
!7022 = distinct !DISubprogram(name: "SEQUENCER_OT_swap_data", scope: !3, file: !3, line: 3284, type: !4701, scopeLine: 3285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7023 = !DILocalVariable(name: "ot", arg: 1, scope: !7022, file: !3, line: 3284, type: !4703)
!7024 = !DILocation(line: 3284, column: 45, scope: !7022)
!7025 = !DILocation(line: 3287, column: 2, scope: !7022)
!7026 = !DILocation(line: 3287, column: 6, scope: !7022)
!7027 = !DILocation(line: 3287, column: 11, scope: !7022)
!7028 = !DILocation(line: 3288, column: 2, scope: !7022)
!7029 = !DILocation(line: 3288, column: 6, scope: !7022)
!7030 = !DILocation(line: 3288, column: 13, scope: !7022)
!7031 = !DILocation(line: 3289, column: 2, scope: !7022)
!7032 = !DILocation(line: 3289, column: 6, scope: !7022)
!7033 = !DILocation(line: 3289, column: 18, scope: !7022)
!7034 = !DILocation(line: 3292, column: 2, scope: !7022)
!7035 = !DILocation(line: 3292, column: 6, scope: !7022)
!7036 = !DILocation(line: 3292, column: 11, scope: !7022)
!7037 = !DILocation(line: 3293, column: 2, scope: !7022)
!7038 = !DILocation(line: 3293, column: 6, scope: !7022)
!7039 = !DILocation(line: 3293, column: 11, scope: !7022)
!7040 = !DILocation(line: 3296, column: 2, scope: !7022)
!7041 = !DILocation(line: 3296, column: 6, scope: !7022)
!7042 = !DILocation(line: 3296, column: 11, scope: !7022)
!7043 = !DILocation(line: 3299, column: 1, scope: !7022)
!7044 = distinct !DISubprogram(name: "sequencer_swap_data_exec", scope: !3, file: !3, line: 3247, type: !2748, scopeLine: 3248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7045 = !DILocalVariable(name: "C", arg: 1, scope: !7044, file: !3, line: 3247, type: !2329)
!7046 = !DILocation(line: 3247, column: 47, scope: !7044)
!7047 = !DILocalVariable(name: "op", arg: 2, scope: !7044, file: !3, line: 3247, type: !2750)
!7048 = !DILocation(line: 3247, column: 62, scope: !7044)
!7049 = !DILocalVariable(name: "scene", scope: !7044, file: !3, line: 3249, type: !1540)
!7050 = !DILocation(line: 3249, column: 9, scope: !7044)
!7051 = !DILocation(line: 3249, column: 32, scope: !7044)
!7052 = !DILocation(line: 3249, column: 17, scope: !7044)
!7053 = !DILocalVariable(name: "seq_act", scope: !7044, file: !3, line: 3250, type: !269)
!7054 = !DILocation(line: 3250, column: 12, scope: !7044)
!7055 = !DILocalVariable(name: "seq_other", scope: !7044, file: !3, line: 3251, type: !269)
!7056 = !DILocation(line: 3251, column: 12, scope: !7044)
!7057 = !DILocalVariable(name: "error_msg", scope: !7044, file: !3, line: 3252, type: !1684)
!7058 = !DILocation(line: 3252, column: 14, scope: !7044)
!7059 = !DILocation(line: 3254, column: 36, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3254, column: 6)
!7061 = !DILocation(line: 3254, column: 6, scope: !7060)
!7062 = !DILocation(line: 3254, column: 65, scope: !7060)
!7063 = !DILocation(line: 3254, column: 6, scope: !7044)
!7064 = !DILocation(line: 3255, column: 14, scope: !7065)
!7065 = distinct !DILexicalBlock(scope: !7060, file: !3, line: 3254, column: 71)
!7066 = !DILocation(line: 3255, column: 18, scope: !7065)
!7067 = !DILocation(line: 3255, column: 3, scope: !7065)
!7068 = !DILocation(line: 3256, column: 3, scope: !7065)
!7069 = !DILocation(line: 3259, column: 24, scope: !7070)
!7070 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3259, column: 6)
!7071 = !DILocation(line: 3259, column: 33, scope: !7070)
!7072 = !DILocation(line: 3259, column: 6, scope: !7070)
!7073 = !DILocation(line: 3259, column: 56, scope: !7070)
!7074 = !DILocation(line: 3259, column: 6, scope: !7044)
!7075 = !DILocation(line: 3260, column: 14, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7070, file: !3, line: 3259, column: 62)
!7077 = !DILocation(line: 3260, column: 18, scope: !7076)
!7078 = !DILocation(line: 3260, column: 38, scope: !7076)
!7079 = !DILocation(line: 3260, column: 3, scope: !7076)
!7080 = !DILocation(line: 3261, column: 3, scope: !7076)
!7081 = !DILocation(line: 3264, column: 6, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3264, column: 6)
!7083 = !DILocation(line: 3264, column: 15, scope: !7082)
!7084 = !DILocation(line: 3264, column: 6, scope: !7044)
!7085 = !DILocation(line: 3265, column: 28, scope: !7082)
!7086 = !DILocation(line: 3265, column: 35, scope: !7082)
!7087 = !DILocation(line: 3265, column: 44, scope: !7082)
!7088 = !DILocation(line: 3265, column: 3, scope: !7082)
!7089 = !DILocation(line: 3267, column: 6, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3267, column: 6)
!7091 = !DILocation(line: 3267, column: 17, scope: !7090)
!7092 = !DILocation(line: 3267, column: 6, scope: !7044)
!7093 = !DILocation(line: 3268, column: 28, scope: !7090)
!7094 = !DILocation(line: 3268, column: 35, scope: !7090)
!7095 = !DILocation(line: 3268, column: 46, scope: !7090)
!7096 = !DILocation(line: 3268, column: 3, scope: !7090)
!7097 = !DILocation(line: 3270, column: 2, scope: !7044)
!7098 = !DILocation(line: 3270, column: 11, scope: !7044)
!7099 = !DILocation(line: 3270, column: 23, scope: !7044)
!7100 = !DILocation(line: 3271, column: 2, scope: !7044)
!7101 = !DILocation(line: 3271, column: 13, scope: !7044)
!7102 = !DILocation(line: 3271, column: 25, scope: !7044)
!7103 = !DILocation(line: 3273, column: 20, scope: !7044)
!7104 = !DILocation(line: 3273, column: 27, scope: !7044)
!7105 = !DILocation(line: 3273, column: 2, scope: !7044)
!7106 = !DILocation(line: 3274, column: 20, scope: !7044)
!7107 = !DILocation(line: 3274, column: 27, scope: !7044)
!7108 = !DILocation(line: 3274, column: 2, scope: !7044)
!7109 = !DILocation(line: 3276, column: 6, scope: !7110)
!7110 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3276, column: 6)
!7111 = !DILocation(line: 3276, column: 15, scope: !7110)
!7112 = !DILocation(line: 3276, column: 6, scope: !7044)
!7113 = !DILocation(line: 3276, column: 53, scope: !7110)
!7114 = !DILocation(line: 3276, column: 60, scope: !7110)
!7115 = !DILocation(line: 3276, column: 22, scope: !7110)
!7116 = !DILocation(line: 3277, column: 6, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 3277, column: 6)
!7118 = !DILocation(line: 3277, column: 17, scope: !7117)
!7119 = !DILocation(line: 3277, column: 6, scope: !7044)
!7120 = !DILocation(line: 3277, column: 55, scope: !7117)
!7121 = !DILocation(line: 3277, column: 62, scope: !7117)
!7122 = !DILocation(line: 3277, column: 24, scope: !7117)
!7123 = !DILocation(line: 3279, column: 24, scope: !7044)
!7124 = !DILocation(line: 3279, column: 52, scope: !7044)
!7125 = !DILocation(line: 3279, column: 2, scope: !7044)
!7126 = !DILocation(line: 3281, column: 2, scope: !7044)
!7127 = !DILocation(line: 3282, column: 1, scope: !7044)
!7128 = distinct !DISubprogram(name: "SEQUENCER_OT_view_ghost_border", scope: !3, file: !3, line: 3337, type: !4701, scopeLine: 3338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7129 = !DILocalVariable(name: "ot", arg: 1, scope: !7128, file: !3, line: 3337, type: !4703)
!7130 = !DILocation(line: 3337, column: 53, scope: !7128)
!7131 = !DILocation(line: 3340, column: 2, scope: !7128)
!7132 = !DILocation(line: 3340, column: 6, scope: !7128)
!7133 = !DILocation(line: 3340, column: 11, scope: !7128)
!7134 = !DILocation(line: 3341, column: 2, scope: !7128)
!7135 = !DILocation(line: 3341, column: 6, scope: !7128)
!7136 = !DILocation(line: 3341, column: 13, scope: !7128)
!7137 = !DILocation(line: 3342, column: 2, scope: !7128)
!7138 = !DILocation(line: 3342, column: 6, scope: !7128)
!7139 = !DILocation(line: 3342, column: 18, scope: !7128)
!7140 = !DILocation(line: 3345, column: 2, scope: !7128)
!7141 = !DILocation(line: 3345, column: 6, scope: !7128)
!7142 = !DILocation(line: 3345, column: 13, scope: !7128)
!7143 = !DILocation(line: 3346, column: 2, scope: !7128)
!7144 = !DILocation(line: 3346, column: 6, scope: !7128)
!7145 = !DILocation(line: 3346, column: 11, scope: !7128)
!7146 = !DILocation(line: 3347, column: 2, scope: !7128)
!7147 = !DILocation(line: 3347, column: 6, scope: !7128)
!7148 = !DILocation(line: 3347, column: 12, scope: !7128)
!7149 = !DILocation(line: 3348, column: 2, scope: !7128)
!7150 = !DILocation(line: 3348, column: 6, scope: !7128)
!7151 = !DILocation(line: 3348, column: 11, scope: !7128)
!7152 = !DILocation(line: 3349, column: 2, scope: !7128)
!7153 = !DILocation(line: 3349, column: 6, scope: !7128)
!7154 = !DILocation(line: 3349, column: 13, scope: !7128)
!7155 = !DILocation(line: 3352, column: 2, scope: !7128)
!7156 = !DILocation(line: 3352, column: 6, scope: !7128)
!7157 = !DILocation(line: 3352, column: 11, scope: !7128)
!7158 = !DILocation(line: 3355, column: 40, scope: !7128)
!7159 = !DILocation(line: 3355, column: 2, scope: !7128)
!7160 = !DILocation(line: 3356, column: 1, scope: !7128)
!7161 = distinct !DISubprogram(name: "view_ghost_border_exec", scope: !3, file: !3, line: 3302, type: !2748, scopeLine: 3303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7162 = !DILocalVariable(name: "C", arg: 1, scope: !7161, file: !3, line: 3302, type: !2329)
!7163 = !DILocation(line: 3302, column: 45, scope: !7161)
!7164 = !DILocalVariable(name: "op", arg: 2, scope: !7161, file: !3, line: 3302, type: !2750)
!7165 = !DILocation(line: 3302, column: 60, scope: !7161)
!7166 = !DILocalVariable(name: "scene", scope: !7161, file: !3, line: 3304, type: !1540)
!7167 = !DILocation(line: 3304, column: 9, scope: !7161)
!7168 = !DILocation(line: 3304, column: 32, scope: !7161)
!7169 = !DILocation(line: 3304, column: 17, scope: !7161)
!7170 = !DILocalVariable(name: "v2d", scope: !7161, file: !3, line: 3305, type: !2037)
!7171 = !DILocation(line: 3305, column: 10, scope: !7161)
!7172 = !DILocation(line: 3305, column: 38, scope: !7161)
!7173 = !DILocation(line: 3305, column: 16, scope: !7161)
!7174 = !DILocalVariable(name: "rect", scope: !7161, file: !3, line: 3307, type: !524)
!7175 = !DILocation(line: 3307, column: 7, scope: !7161)
!7176 = !DILocation(line: 3310, column: 40, scope: !7161)
!7177 = !DILocation(line: 3310, column: 2, scope: !7161)
!7178 = !DILocation(line: 3311, column: 32, scope: !7161)
!7179 = !DILocation(line: 3311, column: 2, scope: !7161)
!7180 = !DILocation(line: 3313, column: 39, scope: !7161)
!7181 = !DILocation(line: 3313, column: 44, scope: !7161)
!7182 = !DILocation(line: 3313, column: 22, scope: !7161)
!7183 = !DILocation(line: 3313, column: 16, scope: !7161)
!7184 = !DILocation(line: 3313, column: 7, scope: !7161)
!7185 = !DILocation(line: 3313, column: 12, scope: !7161)
!7186 = !DILocation(line: 3314, column: 39, scope: !7161)
!7187 = !DILocation(line: 3314, column: 44, scope: !7161)
!7188 = !DILocation(line: 3314, column: 22, scope: !7161)
!7189 = !DILocation(line: 3314, column: 16, scope: !7161)
!7190 = !DILocation(line: 3314, column: 7, scope: !7161)
!7191 = !DILocation(line: 3314, column: 12, scope: !7161)
!7192 = !DILocation(line: 3316, column: 39, scope: !7161)
!7193 = !DILocation(line: 3316, column: 44, scope: !7161)
!7194 = !DILocation(line: 3316, column: 22, scope: !7161)
!7195 = !DILocation(line: 3316, column: 16, scope: !7161)
!7196 = !DILocation(line: 3316, column: 7, scope: !7161)
!7197 = !DILocation(line: 3316, column: 12, scope: !7161)
!7198 = !DILocation(line: 3317, column: 39, scope: !7161)
!7199 = !DILocation(line: 3317, column: 44, scope: !7161)
!7200 = !DILocation(line: 3317, column: 22, scope: !7161)
!7201 = !DILocation(line: 3317, column: 16, scope: !7161)
!7202 = !DILocation(line: 3317, column: 7, scope: !7161)
!7203 = !DILocation(line: 3317, column: 12, scope: !7161)
!7204 = !DILocation(line: 3319, column: 7, scope: !7161)
!7205 = !DILocation(line: 3319, column: 12, scope: !7161)
!7206 = !DILocation(line: 3320, column: 7, scope: !7161)
!7207 = !DILocation(line: 3320, column: 12, scope: !7161)
!7208 = !DILocation(line: 3321, column: 7, scope: !7161)
!7209 = !DILocation(line: 3321, column: 12, scope: !7161)
!7210 = !DILocation(line: 3322, column: 7, scope: !7161)
!7211 = !DILocation(line: 3322, column: 12, scope: !7161)
!7212 = !DILocation(line: 3324, column: 2, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 3324, column: 2)
!7214 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 3324, column: 2)
!7215 = !DILocation(line: 3324, column: 2, scope: !7214)
!7216 = !DILocation(line: 3324, column: 2, scope: !7217)
!7217 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 3324, column: 2)
!7218 = !DILocation(line: 3325, column: 2, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7220, file: !3, line: 3325, column: 2)
!7220 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 3325, column: 2)
!7221 = !DILocation(line: 3325, column: 2, scope: !7220)
!7222 = !DILocation(line: 3325, column: 2, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 3325, column: 2)
!7224 = !DILocation(line: 3326, column: 2, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7226, file: !3, line: 3326, column: 2)
!7226 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 3326, column: 2)
!7227 = !DILocation(line: 3326, column: 2, scope: !7226)
!7228 = !DILocation(line: 3326, column: 2, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 3326, column: 2)
!7230 = !DILocation(line: 3327, column: 2, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 3327, column: 2)
!7232 = distinct !DILexicalBlock(scope: !7161, file: !3, line: 3327, column: 2)
!7233 = !DILocation(line: 3327, column: 2, scope: !7232)
!7234 = !DILocation(line: 3327, column: 2, scope: !7235)
!7235 = distinct !DILexicalBlock(scope: !7231, file: !3, line: 3327, column: 2)
!7236 = !DILocation(line: 3329, column: 2, scope: !7161)
!7237 = !DILocation(line: 3329, column: 9, scope: !7161)
!7238 = !DILocation(line: 3329, column: 13, scope: !7161)
!7239 = !DILocation(line: 3329, column: 27, scope: !7161)
!7240 = !DILocation(line: 3331, column: 24, scope: !7161)
!7241 = !DILocation(line: 3331, column: 52, scope: !7161)
!7242 = !DILocation(line: 3331, column: 2, scope: !7161)
!7243 = !DILocation(line: 3333, column: 2, scope: !7161)
!7244 = distinct !DISubprogram(name: "SEQUENCER_OT_rebuild_proxy", scope: !3, file: !3, line: 3366, type: !4701, scopeLine: 3367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7245 = !DILocalVariable(name: "ot", arg: 1, scope: !7244, file: !3, line: 3366, type: !4703)
!7246 = !DILocation(line: 3366, column: 49, scope: !7244)
!7247 = !DILocation(line: 3369, column: 2, scope: !7244)
!7248 = !DILocation(line: 3369, column: 6, scope: !7244)
!7249 = !DILocation(line: 3369, column: 11, scope: !7244)
!7250 = !DILocation(line: 3370, column: 2, scope: !7244)
!7251 = !DILocation(line: 3370, column: 6, scope: !7244)
!7252 = !DILocation(line: 3370, column: 13, scope: !7244)
!7253 = !DILocation(line: 3371, column: 2, scope: !7244)
!7254 = !DILocation(line: 3371, column: 6, scope: !7244)
!7255 = !DILocation(line: 3371, column: 18, scope: !7244)
!7256 = !DILocation(line: 3374, column: 2, scope: !7244)
!7257 = !DILocation(line: 3374, column: 6, scope: !7244)
!7258 = !DILocation(line: 3374, column: 11, scope: !7244)
!7259 = !DILocation(line: 3375, column: 2, scope: !7244)
!7260 = !DILocation(line: 3375, column: 6, scope: !7244)
!7261 = !DILocation(line: 3375, column: 11, scope: !7244)
!7262 = !DILocation(line: 3378, column: 2, scope: !7244)
!7263 = !DILocation(line: 3378, column: 6, scope: !7244)
!7264 = !DILocation(line: 3378, column: 11, scope: !7244)
!7265 = !DILocation(line: 3379, column: 1, scope: !7244)
!7266 = distinct !DISubprogram(name: "sequencer_rebuild_proxy_exec", scope: !3, file: !3, line: 3359, type: !2748, scopeLine: 3360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7267 = !DILocalVariable(name: "C", arg: 1, scope: !7266, file: !3, line: 3359, type: !2329)
!7268 = !DILocation(line: 3359, column: 51, scope: !7266)
!7269 = !DILocalVariable(name: "UNUSED_op", arg: 2, scope: !7266, file: !3, line: 3359, type: !2750)
!7270 = !DILocation(line: 3359, column: 66, scope: !7266)
!7271 = !DILocation(line: 3361, column: 22, scope: !7266)
!7272 = !DILocation(line: 3361, column: 2, scope: !7266)
!7273 = !DILocation(line: 3363, column: 2, scope: !7266)
!7274 = distinct !DISubprogram(name: "SEQUENCER_OT_change_effect_input", scope: !3, file: !3, line: 3431, type: !2598, scopeLine: 3432, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7275 = !DILocalVariable(name: "ot", arg: 1, scope: !7274, file: !3, line: 3431, type: !2600)
!7276 = !DILocation(line: 3431, column: 62, scope: !7274)
!7277 = !DILocation(line: 3434, column: 2, scope: !7274)
!7278 = !DILocation(line: 3434, column: 6, scope: !7274)
!7279 = !DILocation(line: 3434, column: 11, scope: !7274)
!7280 = !DILocation(line: 3435, column: 2, scope: !7274)
!7281 = !DILocation(line: 3435, column: 6, scope: !7274)
!7282 = !DILocation(line: 3435, column: 13, scope: !7274)
!7283 = !DILocation(line: 3436, column: 2, scope: !7274)
!7284 = !DILocation(line: 3436, column: 6, scope: !7274)
!7285 = !DILocation(line: 3436, column: 18, scope: !7274)
!7286 = !DILocation(line: 3439, column: 2, scope: !7274)
!7287 = !DILocation(line: 3439, column: 6, scope: !7274)
!7288 = !DILocation(line: 3439, column: 11, scope: !7274)
!7289 = !DILocation(line: 3440, column: 2, scope: !7274)
!7290 = !DILocation(line: 3440, column: 6, scope: !7274)
!7291 = !DILocation(line: 3440, column: 11, scope: !7274)
!7292 = !DILocation(line: 3443, column: 2, scope: !7274)
!7293 = !DILocation(line: 3443, column: 6, scope: !7274)
!7294 = !DILocation(line: 3443, column: 11, scope: !7274)
!7295 = !DILocation(line: 3445, column: 26, scope: !7274)
!7296 = !DILocation(line: 3445, column: 30, scope: !7274)
!7297 = !DILocation(line: 3445, column: 13, scope: !7274)
!7298 = !DILocation(line: 3445, column: 2, scope: !7274)
!7299 = !DILocation(line: 3445, column: 6, scope: !7274)
!7300 = !DILocation(line: 3445, column: 11, scope: !7274)
!7301 = !DILocation(line: 3446, column: 1, scope: !7274)
!7302 = distinct !DISubprogram(name: "sequencer_change_effect_input_exec", scope: !3, file: !3, line: 3390, type: !2748, scopeLine: 3391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7303 = !DILocalVariable(name: "C", arg: 1, scope: !7302, file: !3, line: 3390, type: !2329)
!7304 = !DILocation(line: 3390, column: 57, scope: !7302)
!7305 = !DILocalVariable(name: "op", arg: 2, scope: !7302, file: !3, line: 3390, type: !2750)
!7306 = !DILocation(line: 3390, column: 72, scope: !7302)
!7307 = !DILocalVariable(name: "scene", scope: !7302, file: !3, line: 3392, type: !1540)
!7308 = !DILocation(line: 3392, column: 9, scope: !7302)
!7309 = !DILocation(line: 3392, column: 32, scope: !7302)
!7310 = !DILocation(line: 3392, column: 17, scope: !7302)
!7311 = !DILocalVariable(name: "ed", scope: !7302, file: !3, line: 3393, type: !1843)
!7312 = !DILocation(line: 3393, column: 11, scope: !7302)
!7313 = !DILocation(line: 3393, column: 42, scope: !7302)
!7314 = !DILocation(line: 3393, column: 16, scope: !7302)
!7315 = !DILocalVariable(name: "seq", scope: !7302, file: !3, line: 3394, type: !269)
!7316 = !DILocation(line: 3394, column: 12, scope: !7302)
!7317 = !DILocation(line: 3394, column: 43, scope: !7302)
!7318 = !DILocation(line: 3394, column: 18, scope: !7302)
!7319 = !DILocalVariable(name: "seq_1", scope: !7302, file: !3, line: 3396, type: !268)
!7320 = !DILocation(line: 3396, column: 13, scope: !7302)
!7321 = !DILocalVariable(name: "seq_2", scope: !7302, file: !3, line: 3396, type: !268)
!7322 = !DILocation(line: 3396, column: 22, scope: !7302)
!7323 = !DILocation(line: 3398, column: 23, scope: !7302)
!7324 = !DILocation(line: 3398, column: 27, scope: !7302)
!7325 = !DILocation(line: 3398, column: 10, scope: !7302)
!7326 = !DILocation(line: 3398, column: 2, scope: !7302)
!7327 = !DILocation(line: 3400, column: 13, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 3398, column: 41)
!7329 = !DILocation(line: 3400, column: 18, scope: !7328)
!7330 = !DILocation(line: 3400, column: 10, scope: !7328)
!7331 = !DILocation(line: 3401, column: 13, scope: !7328)
!7332 = !DILocation(line: 3401, column: 18, scope: !7328)
!7333 = !DILocation(line: 3401, column: 10, scope: !7328)
!7334 = !DILocation(line: 3402, column: 4, scope: !7328)
!7335 = !DILocation(line: 3404, column: 13, scope: !7328)
!7336 = !DILocation(line: 3404, column: 18, scope: !7328)
!7337 = !DILocation(line: 3404, column: 10, scope: !7328)
!7338 = !DILocation(line: 3405, column: 13, scope: !7328)
!7339 = !DILocation(line: 3405, column: 18, scope: !7328)
!7340 = !DILocation(line: 3405, column: 10, scope: !7328)
!7341 = !DILocation(line: 3406, column: 4, scope: !7328)
!7342 = !DILocation(line: 3408, column: 13, scope: !7328)
!7343 = !DILocation(line: 3408, column: 18, scope: !7328)
!7344 = !DILocation(line: 3408, column: 10, scope: !7328)
!7345 = !DILocation(line: 3409, column: 13, scope: !7328)
!7346 = !DILocation(line: 3409, column: 18, scope: !7328)
!7347 = !DILocation(line: 3409, column: 10, scope: !7328)
!7348 = !DILocation(line: 3410, column: 4, scope: !7328)
!7349 = !DILocation(line: 3413, column: 7, scope: !7350)
!7350 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 3413, column: 6)
!7351 = !DILocation(line: 3413, column: 6, scope: !7350)
!7352 = !DILocation(line: 3413, column: 13, scope: !7350)
!7353 = !DILocation(line: 3413, column: 21, scope: !7350)
!7354 = !DILocation(line: 3413, column: 25, scope: !7350)
!7355 = !DILocation(line: 3413, column: 24, scope: !7350)
!7356 = !DILocation(line: 3413, column: 31, scope: !7350)
!7357 = !DILocation(line: 3413, column: 6, scope: !7302)
!7358 = !DILocation(line: 3414, column: 14, scope: !7359)
!7359 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 3413, column: 40)
!7360 = !DILocation(line: 3414, column: 18, scope: !7359)
!7361 = !DILocation(line: 3414, column: 3, scope: !7359)
!7362 = !DILocation(line: 3415, column: 3, scope: !7359)
!7363 = !DILocalVariable(name: "sw_ap", scope: !7364, file: !3, line: 3418, type: !269)
!7364 = distinct !DILexicalBlock(scope: !7365, file: !3, line: 3418, column: 3)
!7365 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 3417, column: 7)
!7366 = !DILocation(line: 3418, column: 3, scope: !7364)
!7367 = !DILocation(line: 3421, column: 44, scope: !7302)
!7368 = !DILocation(line: 3421, column: 51, scope: !7302)
!7369 = !DILocation(line: 3421, column: 2, scope: !7302)
!7370 = !DILocation(line: 3424, column: 27, scope: !7302)
!7371 = !DILocation(line: 3424, column: 35, scope: !7302)
!7372 = !DILocation(line: 3424, column: 39, scope: !7302)
!7373 = !DILocation(line: 3424, column: 2, scope: !7302)
!7374 = !DILocation(line: 3426, column: 24, scope: !7302)
!7375 = !DILocation(line: 3426, column: 52, scope: !7302)
!7376 = !DILocation(line: 3426, column: 2, scope: !7302)
!7377 = !DILocation(line: 3428, column: 2, scope: !7302)
!7378 = !DILocation(line: 3429, column: 1, scope: !7302)
!7379 = distinct !DISubprogram(name: "SEQUENCER_OT_change_effect_type", scope: !3, file: !3, line: 3491, type: !2598, scopeLine: 3492, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7380 = !DILocalVariable(name: "ot", arg: 1, scope: !7379, file: !3, line: 3491, type: !2600)
!7381 = !DILocation(line: 3491, column: 61, scope: !7379)
!7382 = !DILocation(line: 3494, column: 2, scope: !7379)
!7383 = !DILocation(line: 3494, column: 6, scope: !7379)
!7384 = !DILocation(line: 3494, column: 11, scope: !7379)
!7385 = !DILocation(line: 3495, column: 2, scope: !7379)
!7386 = !DILocation(line: 3495, column: 6, scope: !7379)
!7387 = !DILocation(line: 3495, column: 13, scope: !7379)
!7388 = !DILocation(line: 3496, column: 2, scope: !7379)
!7389 = !DILocation(line: 3496, column: 6, scope: !7379)
!7390 = !DILocation(line: 3496, column: 18, scope: !7379)
!7391 = !DILocation(line: 3499, column: 2, scope: !7379)
!7392 = !DILocation(line: 3499, column: 6, scope: !7379)
!7393 = !DILocation(line: 3499, column: 11, scope: !7379)
!7394 = !DILocation(line: 3500, column: 2, scope: !7379)
!7395 = !DILocation(line: 3500, column: 6, scope: !7379)
!7396 = !DILocation(line: 3500, column: 11, scope: !7379)
!7397 = !DILocation(line: 3503, column: 2, scope: !7379)
!7398 = !DILocation(line: 3503, column: 6, scope: !7379)
!7399 = !DILocation(line: 3503, column: 11, scope: !7379)
!7400 = !DILocation(line: 3505, column: 26, scope: !7379)
!7401 = !DILocation(line: 3505, column: 30, scope: !7379)
!7402 = !DILocation(line: 3505, column: 13, scope: !7379)
!7403 = !DILocation(line: 3505, column: 2, scope: !7379)
!7404 = !DILocation(line: 3505, column: 6, scope: !7379)
!7405 = !DILocation(line: 3505, column: 11, scope: !7379)
!7406 = !DILocation(line: 3506, column: 1, scope: !7379)
!7407 = distinct !DISubprogram(name: "sequencer_change_effect_type_exec", scope: !3, file: !3, line: 3448, type: !2748, scopeLine: 3449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7408 = !DILocalVariable(name: "C", arg: 1, scope: !7407, file: !3, line: 3448, type: !2329)
!7409 = !DILocation(line: 3448, column: 56, scope: !7407)
!7410 = !DILocalVariable(name: "op", arg: 2, scope: !7407, file: !3, line: 3448, type: !2750)
!7411 = !DILocation(line: 3448, column: 71, scope: !7407)
!7412 = !DILocalVariable(name: "scene", scope: !7407, file: !3, line: 3450, type: !1540)
!7413 = !DILocation(line: 3450, column: 9, scope: !7407)
!7414 = !DILocation(line: 3450, column: 32, scope: !7407)
!7415 = !DILocation(line: 3450, column: 17, scope: !7407)
!7416 = !DILocalVariable(name: "ed", scope: !7407, file: !3, line: 3451, type: !1843)
!7417 = !DILocation(line: 3451, column: 11, scope: !7407)
!7418 = !DILocation(line: 3451, column: 42, scope: !7407)
!7419 = !DILocation(line: 3451, column: 16, scope: !7407)
!7420 = !DILocalVariable(name: "seq", scope: !7407, file: !3, line: 3452, type: !269)
!7421 = !DILocation(line: 3452, column: 12, scope: !7407)
!7422 = !DILocation(line: 3452, column: 43, scope: !7407)
!7423 = !DILocation(line: 3452, column: 18, scope: !7407)
!7424 = !DILocalVariable(name: "new_type", scope: !7407, file: !3, line: 3453, type: !2040)
!7425 = !DILocation(line: 3453, column: 12, scope: !7407)
!7426 = !DILocation(line: 3453, column: 36, scope: !7407)
!7427 = !DILocation(line: 3453, column: 40, scope: !7407)
!7428 = !DILocation(line: 3453, column: 23, scope: !7407)
!7429 = !DILocalVariable(name: "sh", scope: !7407, file: !3, line: 3456, type: !7430)
!7430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqEffectHandle", file: !1520, line: 118, size: 768, elements: !7431)
!7431 = !{!7432, !7433, !7434, !7438, !7442, !7443, !7447, !7448, !7452, !7456, !7460, !7479, !7483}
!7432 = !DIDerivedType(tag: DW_TAG_member, name: "multithreaded", scope: !7430, file: !1520, line: 119, baseType: !605, size: 8)
!7433 = !DIDerivedType(tag: DW_TAG_member, name: "supports_mask", scope: !7430, file: !1520, line: 120, baseType: !605, size: 8, offset: 8)
!7434 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !7430, file: !1520, line: 124, baseType: !7435, size: 64, offset: 64)
!7435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7436, size: 64)
!7436 = !DISubroutineType(types: !7437)
!7437 = !{null, !274}
!7438 = !DIDerivedType(tag: DW_TAG_member, name: "num_inputs", scope: !7430, file: !1520, line: 128, baseType: !7439, size: 64, offset: 128)
!7439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7440, size: 64)
!7440 = !DISubroutineType(types: !7441)
!7441 = !{!15}
!7442 = !DIDerivedType(tag: DW_TAG_member, name: "load", scope: !7430, file: !1520, line: 132, baseType: !7435, size: 64, offset: 192)
!7443 = !DIDerivedType(tag: DW_TAG_member, name: "copy", scope: !7430, file: !1520, line: 135, baseType: !7444, size: 64, offset: 256)
!7444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7445, size: 64)
!7445 = !DISubroutineType(types: !7446)
!7446 = !{null, !274, !274}
!7447 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !7430, file: !1520, line: 138, baseType: !7435, size: 64, offset: 320)
!7448 = !DIDerivedType(tag: DW_TAG_member, name: "early_out", scope: !7430, file: !1520, line: 144, baseType: !7449, size: 64, offset: 384)
!7449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7450, size: 64)
!7450 = !DISubroutineType(types: !7451)
!7451 = !{!15, !274, !240, !240}
!7452 = !DIDerivedType(tag: DW_TAG_member, name: "store_icu_yrange", scope: !7430, file: !1520, line: 147, baseType: !7453, size: 64, offset: 448)
!7453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7454, size: 64)
!7454 = !DISubroutineType(types: !7455)
!7455 = !{null, !274, !299, !1591, !1591}
!7456 = !DIDerivedType(tag: DW_TAG_member, name: "get_default_fac", scope: !7430, file: !1520, line: 150, baseType: !7457, size: 64, offset: 512)
!7457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7458, size: 64)
!7458 = !DISubroutineType(types: !7459)
!7459 = !{null, !274, !240, !1591, !1591}
!7460 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !7430, file: !1520, line: 157, baseType: !7461, size: 64, offset: 576)
!7461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7462, size: 64)
!7462 = !DISubroutineType(types: !7463)
!7463 = !{!1747, !7464, !274, !240, !240, !240, !1747, !1747, !1747}
!7464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7465, size: 64)
!7465 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7466)
!7466 = !DIDerivedType(tag: DW_TAG_typedef, name: "SeqRenderData", file: !1520, line: 103, baseType: !7467)
!7467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SeqRenderData", file: !1520, line: 92, size: 384, elements: !7468)
!7468 = !{!7469, !7470, !7471, !7472, !7473, !7474, !7475, !7476, !7477, !7478}
!7469 = !DIDerivedType(tag: DW_TAG_member, name: "eval_ctx", scope: !7467, file: !1520, line: 93, baseType: !6886, size: 64)
!7470 = !DIDerivedType(tag: DW_TAG_member, name: "bmain", scope: !7467, file: !1520, line: 94, baseType: !6836, size: 64, offset: 64)
!7471 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !7467, file: !1520, line: 95, baseType: !384, size: 64, offset: 128)
!7472 = !DIDerivedType(tag: DW_TAG_member, name: "rectx", scope: !7467, file: !1520, line: 96, baseType: !15, size: 32, offset: 192)
!7473 = !DIDerivedType(tag: DW_TAG_member, name: "recty", scope: !7467, file: !1520, line: 97, baseType: !15, size: 32, offset: 224)
!7474 = !DIDerivedType(tag: DW_TAG_member, name: "preview_render_size", scope: !7467, file: !1520, line: 98, baseType: !15, size: 32, offset: 256)
!7475 = !DIDerivedType(tag: DW_TAG_member, name: "motion_blur_samples", scope: !7467, file: !1520, line: 99, baseType: !15, size: 32, offset: 288)
!7476 = !DIDerivedType(tag: DW_TAG_member, name: "motion_blur_shutter", scope: !7467, file: !1520, line: 100, baseType: !240, size: 32, offset: 320)
!7477 = !DIDerivedType(tag: DW_TAG_member, name: "skip_cache", scope: !7467, file: !1520, line: 101, baseType: !605, size: 8, offset: 352)
!7478 = !DIDerivedType(tag: DW_TAG_member, name: "is_proxy_render", scope: !7467, file: !1520, line: 102, baseType: !605, size: 8, offset: 360)
!7479 = !DIDerivedType(tag: DW_TAG_member, name: "init_execution", scope: !7430, file: !1520, line: 160, baseType: !7480, size: 64, offset: 640)
!7480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7481, size: 64)
!7481 = !DISubroutineType(types: !7482)
!7482 = !{!1747, !7464, !1747, !1747, !1747}
!7483 = !DIDerivedType(tag: DW_TAG_member, name: "execute_slice", scope: !7430, file: !1520, line: 163, baseType: !7484, size: 64, offset: 704)
!7484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7485, size: 64)
!7485 = !DISubroutineType(types: !7486)
!7486 = !{null, !7464, !274, !240, !240, !240, !1747, !1747, !1747, !15, !15, !1747}
!7487 = !DILocation(line: 3456, column: 25, scope: !7407)
!7488 = !DILocation(line: 3458, column: 7, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 3458, column: 6)
!7490 = !DILocation(line: 3458, column: 12, scope: !7489)
!7491 = !DILocation(line: 3458, column: 17, scope: !7489)
!7492 = !DILocation(line: 3458, column: 36, scope: !7489)
!7493 = !DILocation(line: 3458, column: 6, scope: !7407)
!7494 = !DILocation(line: 3459, column: 3, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 3458, column: 42)
!7496 = !DILocation(line: 3464, column: 41, scope: !7497)
!7497 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 3464, column: 6)
!7498 = !DILocation(line: 3464, column: 46, scope: !7497)
!7499 = !DILocation(line: 3464, column: 6, scope: !7497)
!7500 = !DILocation(line: 3465, column: 41, scope: !7497)
!7501 = !DILocation(line: 3465, column: 6, scope: !7497)
!7502 = !DILocation(line: 3464, column: 52, scope: !7497)
!7503 = !DILocation(line: 3464, column: 6, scope: !7407)
!7504 = !DILocation(line: 3467, column: 14, scope: !7505)
!7505 = distinct !DILexicalBlock(scope: !7497, file: !3, line: 3466, column: 2)
!7506 = !DILocation(line: 3467, column: 18, scope: !7505)
!7507 = !DILocation(line: 3467, column: 3, scope: !7505)
!7508 = !DILocation(line: 3468, column: 3, scope: !7505)
!7509 = !DILocation(line: 3471, column: 32, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !7497, file: !3, line: 3470, column: 7)
!7511 = !DILocation(line: 3471, column: 8, scope: !7510)
!7512 = !DILocation(line: 3472, column: 6, scope: !7510)
!7513 = !DILocation(line: 3472, column: 11, scope: !7510)
!7514 = !DILocation(line: 3472, column: 3, scope: !7510)
!7515 = !DILocation(line: 3474, column: 15, scope: !7510)
!7516 = !DILocation(line: 3474, column: 3, scope: !7510)
!7517 = !DILocation(line: 3474, column: 8, scope: !7510)
!7518 = !DILocation(line: 3474, column: 13, scope: !7510)
!7519 = !DILocation(line: 3476, column: 32, scope: !7510)
!7520 = !DILocation(line: 3476, column: 8, scope: !7510)
!7521 = !DILocation(line: 3477, column: 6, scope: !7510)
!7522 = !DILocation(line: 3477, column: 11, scope: !7510)
!7523 = !DILocation(line: 3477, column: 3, scope: !7510)
!7524 = !DILocation(line: 3481, column: 44, scope: !7407)
!7525 = !DILocation(line: 3481, column: 51, scope: !7407)
!7526 = !DILocation(line: 3481, column: 2, scope: !7407)
!7527 = !DILocation(line: 3484, column: 27, scope: !7407)
!7528 = !DILocation(line: 3484, column: 35, scope: !7407)
!7529 = !DILocation(line: 3484, column: 39, scope: !7407)
!7530 = !DILocation(line: 3484, column: 2, scope: !7407)
!7531 = !DILocation(line: 3486, column: 24, scope: !7407)
!7532 = !DILocation(line: 3486, column: 52, scope: !7407)
!7533 = !DILocation(line: 3486, column: 2, scope: !7407)
!7534 = !DILocation(line: 3488, column: 2, scope: !7407)
!7535 = !DILocation(line: 3489, column: 1, scope: !7407)
!7536 = distinct !DISubprogram(name: "SEQUENCER_OT_change_path", scope: !3, file: !3, line: 3602, type: !2598, scopeLine: 3603, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7537 = !DILocalVariable(name: "ot", arg: 1, scope: !7536, file: !3, line: 3602, type: !2600)
!7538 = !DILocation(line: 3602, column: 54, scope: !7536)
!7539 = !DILocation(line: 3605, column: 2, scope: !7536)
!7540 = !DILocation(line: 3605, column: 6, scope: !7536)
!7541 = !DILocation(line: 3605, column: 11, scope: !7536)
!7542 = !DILocation(line: 3606, column: 2, scope: !7536)
!7543 = !DILocation(line: 3606, column: 6, scope: !7536)
!7544 = !DILocation(line: 3606, column: 13, scope: !7536)
!7545 = !DILocation(line: 3607, column: 2, scope: !7536)
!7546 = !DILocation(line: 3607, column: 6, scope: !7536)
!7547 = !DILocation(line: 3607, column: 18, scope: !7536)
!7548 = !DILocation(line: 3610, column: 2, scope: !7536)
!7549 = !DILocation(line: 3610, column: 6, scope: !7536)
!7550 = !DILocation(line: 3610, column: 11, scope: !7536)
!7551 = !DILocation(line: 3611, column: 2, scope: !7536)
!7552 = !DILocation(line: 3611, column: 6, scope: !7536)
!7553 = !DILocation(line: 3611, column: 13, scope: !7536)
!7554 = !DILocation(line: 3612, column: 2, scope: !7536)
!7555 = !DILocation(line: 3612, column: 6, scope: !7536)
!7556 = !DILocation(line: 3612, column: 11, scope: !7536)
!7557 = !DILocation(line: 3615, column: 2, scope: !7536)
!7558 = !DILocation(line: 3615, column: 6, scope: !7536)
!7559 = !DILocation(line: 3615, column: 11, scope: !7536)
!7560 = !DILocation(line: 3617, column: 33, scope: !7536)
!7561 = !DILocation(line: 3617, column: 2, scope: !7536)
!7562 = !DILocation(line: 3620, column: 1, scope: !7536)
!7563 = distinct !DISubprogram(name: "sequencer_change_path_exec", scope: !3, file: !3, line: 3508, type: !2748, scopeLine: 3509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7564 = !DILocalVariable(name: "C", arg: 1, scope: !7563, file: !3, line: 3508, type: !2329)
!7565 = !DILocation(line: 3508, column: 49, scope: !7563)
!7566 = !DILocalVariable(name: "op", arg: 2, scope: !7563, file: !3, line: 3508, type: !2750)
!7567 = !DILocation(line: 3508, column: 64, scope: !7563)
!7568 = !DILocalVariable(name: "bmain", scope: !7563, file: !3, line: 3510, type: !6830)
!7569 = !DILocation(line: 3510, column: 8, scope: !7563)
!7570 = !DILocation(line: 3510, column: 30, scope: !7563)
!7571 = !DILocation(line: 3510, column: 16, scope: !7563)
!7572 = !DILocalVariable(name: "scene", scope: !7563, file: !3, line: 3511, type: !1540)
!7573 = !DILocation(line: 3511, column: 9, scope: !7563)
!7574 = !DILocation(line: 3511, column: 32, scope: !7563)
!7575 = !DILocation(line: 3511, column: 17, scope: !7563)
!7576 = !DILocalVariable(name: "ed", scope: !7563, file: !3, line: 3512, type: !1843)
!7577 = !DILocation(line: 3512, column: 11, scope: !7563)
!7578 = !DILocation(line: 3512, column: 42, scope: !7563)
!7579 = !DILocation(line: 3512, column: 16, scope: !7563)
!7580 = !DILocalVariable(name: "seq", scope: !7563, file: !3, line: 3513, type: !269)
!7581 = !DILocation(line: 3513, column: 12, scope: !7563)
!7582 = !DILocation(line: 3513, column: 43, scope: !7563)
!7583 = !DILocation(line: 3513, column: 18, scope: !7563)
!7584 = !DILocalVariable(name: "is_relative_path", scope: !7563, file: !3, line: 3514, type: !4178)
!7585 = !DILocation(line: 3514, column: 13, scope: !7563)
!7586 = !DILocation(line: 3514, column: 48, scope: !7563)
!7587 = !DILocation(line: 3514, column: 52, scope: !7563)
!7588 = !DILocation(line: 3514, column: 32, scope: !7563)
!7589 = !DILocation(line: 3516, column: 6, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3516, column: 6)
!7591 = !DILocation(line: 3516, column: 11, scope: !7590)
!7592 = !DILocation(line: 3516, column: 16, scope: !7590)
!7593 = !DILocation(line: 3516, column: 6, scope: !7563)
!7594 = !DILocalVariable(name: "directory", scope: !7595, file: !3, line: 3517, type: !408)
!7595 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 3516, column: 35)
!7596 = !DILocation(line: 3517, column: 8, scope: !7595)
!7597 = !DILocalVariable(name: "len", scope: !7595, file: !3, line: 3518, type: !2040)
!7598 = !DILocation(line: 3518, column: 13, scope: !7595)
!7599 = !DILocation(line: 3518, column: 50, scope: !7595)
!7600 = !DILocation(line: 3518, column: 54, scope: !7595)
!7601 = !DILocation(line: 3518, column: 84, scope: !7595)
!7602 = !DILocation(line: 3518, column: 88, scope: !7595)
!7603 = !DILocation(line: 3518, column: 59, scope: !7595)
!7604 = !DILocation(line: 3518, column: 19, scope: !7595)
!7605 = !DILocalVariable(name: "se", scope: !7595, file: !3, line: 3519, type: !316)
!7606 = !DILocation(line: 3519, column: 14, scope: !7595)
!7607 = !DILocation(line: 3521, column: 7, scope: !7608)
!7608 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 3521, column: 7)
!7609 = !DILocation(line: 3521, column: 11, scope: !7608)
!7610 = !DILocation(line: 3521, column: 7, scope: !7595)
!7611 = !DILocation(line: 3522, column: 4, scope: !7608)
!7612 = !DILocation(line: 3524, column: 18, scope: !7595)
!7613 = !DILocation(line: 3524, column: 22, scope: !7595)
!7614 = !DILocation(line: 3524, column: 40, scope: !7595)
!7615 = !DILocation(line: 3524, column: 3, scope: !7595)
!7616 = !DILocation(line: 3525, column: 7, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 3525, column: 7)
!7618 = !DILocation(line: 3525, column: 7, scope: !7595)
!7619 = !DILocation(line: 3529, column: 17, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3525, column: 25)
!7621 = !DILocation(line: 3529, column: 28, scope: !7620)
!7622 = !DILocation(line: 3529, column: 35, scope: !7620)
!7623 = !DILocation(line: 3529, column: 4, scope: !7620)
!7624 = !DILocation(line: 3530, column: 3, scope: !7620)
!7625 = !DILocation(line: 3531, column: 15, scope: !7595)
!7626 = !DILocation(line: 3531, column: 20, scope: !7595)
!7627 = !DILocation(line: 3531, column: 27, scope: !7595)
!7628 = !DILocation(line: 3531, column: 32, scope: !7595)
!7629 = !DILocation(line: 3531, column: 3, scope: !7595)
!7630 = !DILocation(line: 3533, column: 7, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 3533, column: 7)
!7632 = !DILocation(line: 3533, column: 12, scope: !7631)
!7633 = !DILocation(line: 3533, column: 19, scope: !7631)
!7634 = !DILocation(line: 3533, column: 7, scope: !7595)
!7635 = !DILocation(line: 3534, column: 4, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 3533, column: 30)
!7637 = !DILocation(line: 3534, column: 14, scope: !7636)
!7638 = !DILocation(line: 3534, column: 19, scope: !7636)
!7639 = !DILocation(line: 3534, column: 26, scope: !7636)
!7640 = !DILocation(line: 3535, column: 3, scope: !7636)
!7641 = !DILocation(line: 3536, column: 32, scope: !7595)
!7642 = !DILocation(line: 3536, column: 44, scope: !7595)
!7643 = !DILocation(line: 3536, column: 48, scope: !7595)
!7644 = !DILocation(line: 3536, column: 30, scope: !7595)
!7645 = !DILocation(line: 3536, column: 3, scope: !7595)
!7646 = !DILocation(line: 3536, column: 8, scope: !7595)
!7647 = !DILocation(line: 3536, column: 15, scope: !7595)
!7648 = !DILocation(line: 3536, column: 25, scope: !7595)
!7649 = !DILocalVariable(name: "rna_macro_iter", scope: !7650, file: !3, line: 3538, type: !7651)
!7650 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 3538, column: 3)
!7651 = !DIDerivedType(tag: DW_TAG_typedef, name: "CollectionPropertyIterator", file: !85, line: 279, baseType: !7652)
!7652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "CollectionPropertyIterator", file: !85, line: 264, size: 1088, elements: !7653)
!7653 = !{!7654, !7656, !7657, !7659, !7689, !7690, !7691, !7692}
!7654 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !7652, file: !85, line: 266, baseType: !7655, size: 192)
!7655 = !DIDerivedType(tag: DW_TAG_typedef, name: "PointerRNA", file: !85, line: 62, baseType: !2624)
!7656 = !DIDerivedType(tag: DW_TAG_member, name: "builtin_parent", scope: !7652, file: !85, line: 267, baseType: !7655, size: 192, offset: 192)
!7657 = !DIDerivedType(tag: DW_TAG_member, name: "prop", scope: !7652, file: !85, line: 268, baseType: !7658, size: 64, offset: 384)
!7658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2674, size: 64)
!7659 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !7652, file: !85, line: 272, baseType: !7660, size: 320, offset: 448)
!7660 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !7652, file: !85, line: 269, size: 320, elements: !7661)
!7661 = !{!7662, !7677}
!7662 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !7660, file: !85, line: 270, baseType: !7663, size: 320)
!7663 = !DIDerivedType(tag: DW_TAG_typedef, name: "ArrayIterator", file: !85, line: 262, baseType: !7664)
!7664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArrayIterator", file: !85, line: 249, size: 320, elements: !7665)
!7665 = !{!7666, !7667, !7668, !7669, !7670, !7671}
!7666 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !7664, file: !85, line: 250, baseType: !554, size: 64)
!7667 = !DIDerivedType(tag: DW_TAG_member, name: "endptr", scope: !7664, file: !85, line: 251, baseType: !554, size: 64, offset: 64)
!7668 = !DIDerivedType(tag: DW_TAG_member, name: "free_ptr", scope: !7664, file: !85, line: 252, baseType: !239, size: 64, offset: 128)
!7669 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !7664, file: !85, line: 253, baseType: !15, size: 32, offset: 192)
!7670 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !7664, file: !85, line: 257, baseType: !15, size: 32, offset: 224)
!7671 = !DIDerivedType(tag: DW_TAG_member, name: "skip", scope: !7664, file: !85, line: 261, baseType: !7672, size: 64, offset: 256)
!7672 = !DIDerivedType(tag: DW_TAG_typedef, name: "IteratorSkipFunc", file: !85, line: 241, baseType: !7673)
!7673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7674, size: 64)
!7674 = !DISubroutineType(types: !7675)
!7675 = !{!15, !7676, !239}
!7676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7652, size: 64)
!7677 = !DIDerivedType(tag: DW_TAG_member, name: "listbase", scope: !7660, file: !85, line: 271, baseType: !7678, size: 192)
!7678 = !DIDerivedType(tag: DW_TAG_typedef, name: "ListBaseIterator", file: !85, line: 247, baseType: !7679)
!7679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ListBaseIterator", file: !85, line: 243, size: 192, elements: !7680)
!7680 = !{!7681, !7687, !7688}
!7681 = !DIDerivedType(tag: DW_TAG_member, name: "link", scope: !7679, file: !85, line: 244, baseType: !7682, size: 64)
!7682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7683, size: 64)
!7683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Link", file: !444, line: 57, size: 128, elements: !7684)
!7684 = !{!7685, !7686}
!7685 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7683, file: !444, line: 58, baseType: !7682, size: 64)
!7686 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !7683, file: !444, line: 58, baseType: !7682, size: 64, offset: 64)
!7687 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !7679, file: !85, line: 245, baseType: !15, size: 32, offset: 64)
!7688 = !DIDerivedType(tag: DW_TAG_member, name: "skip", scope: !7679, file: !85, line: 246, baseType: !7672, size: 64, offset: 128)
!7689 = !DIDerivedType(tag: DW_TAG_member, name: "idprop", scope: !7652, file: !85, line: 273, baseType: !15, size: 32, offset: 768)
!7690 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !7652, file: !85, line: 274, baseType: !15, size: 32, offset: 800)
!7691 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !7652, file: !85, line: 277, baseType: !7655, size: 192, offset: 832)
!7692 = !DIDerivedType(tag: DW_TAG_member, name: "valid", scope: !7652, file: !85, line: 278, baseType: !15, size: 32, offset: 1024)
!7693 = !DILocation(line: 3538, column: 3, scope: !7650)
!7694 = !DILocation(line: 3538, column: 3, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7650, file: !3, line: 3538, column: 3)
!7696 = !DILocation(line: 3538, column: 3, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 3538, column: 3)
!7698 = !DILocalVariable(name: "itemptr", scope: !7699, file: !3, line: 3538, type: !7655)
!7699 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 3538, column: 3)
!7700 = !DILocation(line: 3538, column: 3, scope: !7699)
!7701 = !DILocalVariable(name: "filename", scope: !7702, file: !3, line: 3540, type: !554)
!7702 = distinct !DILexicalBlock(scope: !7699, file: !3, line: 3539, column: 3)
!7703 = !DILocation(line: 3540, column: 10, scope: !7702)
!7704 = !DILocation(line: 3540, column: 21, scope: !7702)
!7705 = !DILocation(line: 3541, column: 16, scope: !7702)
!7706 = !DILocation(line: 3541, column: 20, scope: !7702)
!7707 = !DILocation(line: 3541, column: 26, scope: !7702)
!7708 = !DILocation(line: 3541, column: 4, scope: !7702)
!7709 = !DILocation(line: 3542, column: 4, scope: !7702)
!7710 = !DILocation(line: 3542, column: 14, scope: !7702)
!7711 = !DILocation(line: 3543, column: 6, scope: !7702)
!7712 = !DILocation(line: 3545, column: 3, scope: !7699)
!7713 = distinct !{!7713, !7694, !7714}
!7714 = !DILocation(line: 3545, column: 3, scope: !7695)
!7715 = !DILocation(line: 3545, column: 3, scope: !7650)
!7716 = !DILocation(line: 3548, column: 24, scope: !7595)
!7717 = !DILocation(line: 3548, column: 29, scope: !7595)
!7718 = !DILocation(line: 3548, column: 41, scope: !7595)
!7719 = !DILocation(line: 3548, column: 3, scope: !7595)
!7720 = !DILocation(line: 3548, column: 8, scope: !7595)
!7721 = !DILocation(line: 3548, column: 22, scope: !7595)
!7722 = !DILocation(line: 3552, column: 32, scope: !7595)
!7723 = !DILocation(line: 3552, column: 39, scope: !7595)
!7724 = !DILocation(line: 3552, column: 3, scope: !7595)
!7725 = !DILocation(line: 3554, column: 21, scope: !7595)
!7726 = !DILocation(line: 3554, column: 28, scope: !7595)
!7727 = !DILocation(line: 3554, column: 3, scope: !7595)
!7728 = !DILocation(line: 3557, column: 28, scope: !7595)
!7729 = !DILocation(line: 3557, column: 36, scope: !7595)
!7730 = !DILocation(line: 3557, column: 40, scope: !7595)
!7731 = !DILocation(line: 3557, column: 3, scope: !7595)
!7732 = !DILocation(line: 3558, column: 2, scope: !7595)
!7733 = !DILocalVariable(name: "seq_ptr", scope: !7734, file: !3, line: 3561, type: !7655)
!7734 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 3559, column: 7)
!7735 = !DILocation(line: 3561, column: 14, scope: !7734)
!7736 = !DILocalVariable(name: "prop", scope: !7734, file: !3, line: 3562, type: !2672)
!7737 = !DILocation(line: 3562, column: 16, scope: !7734)
!7738 = !DILocalVariable(name: "filepath", scope: !7734, file: !3, line: 3563, type: !408)
!7739 = !DILocation(line: 3563, column: 8, scope: !7734)
!7740 = !DILocation(line: 3565, column: 23, scope: !7734)
!7741 = !DILocation(line: 3565, column: 30, scope: !7734)
!7742 = !DILocation(line: 3565, column: 49, scope: !7734)
!7743 = !DILocation(line: 3565, column: 3, scope: !7734)
!7744 = !DILocation(line: 3567, column: 18, scope: !7734)
!7745 = !DILocation(line: 3567, column: 22, scope: !7734)
!7746 = !DILocation(line: 3567, column: 39, scope: !7734)
!7747 = !DILocation(line: 3567, column: 3, scope: !7734)
!7748 = !DILocation(line: 3568, column: 10, scope: !7734)
!7749 = !DILocation(line: 3568, column: 8, scope: !7734)
!7750 = !DILocation(line: 3569, column: 37, scope: !7734)
!7751 = !DILocation(line: 3569, column: 43, scope: !7734)
!7752 = !DILocation(line: 3569, column: 3, scope: !7734)
!7753 = !DILocation(line: 3570, column: 23, scope: !7734)
!7754 = !DILocation(line: 3570, column: 36, scope: !7734)
!7755 = !DILocation(line: 3570, column: 3, scope: !7734)
!7756 = !DILocation(line: 3573, column: 24, scope: !7563)
!7757 = !DILocation(line: 3573, column: 52, scope: !7563)
!7758 = !DILocation(line: 3573, column: 2, scope: !7563)
!7759 = !DILocation(line: 3575, column: 2, scope: !7563)
!7760 = !DILocation(line: 3576, column: 1, scope: !7563)
!7761 = distinct !DISubprogram(name: "sequencer_change_path_invoke", scope: !3, file: !3, line: 3578, type: !3001, scopeLine: 3579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7762 = !DILocalVariable(name: "C", arg: 1, scope: !7761, file: !3, line: 3578, type: !2329)
!7763 = !DILocation(line: 3578, column: 51, scope: !7761)
!7764 = !DILocalVariable(name: "op", arg: 2, scope: !7761, file: !3, line: 3578, type: !2750)
!7765 = !DILocation(line: 3578, column: 66, scope: !7761)
!7766 = !DILocalVariable(name: "UNUSED_event", arg: 3, scope: !7761, file: !3, line: 3578, type: !3003)
!7767 = !DILocation(line: 3578, column: 85, scope: !7761)
!7768 = !DILocalVariable(name: "scene", scope: !7761, file: !3, line: 3580, type: !1540)
!7769 = !DILocation(line: 3580, column: 9, scope: !7761)
!7770 = !DILocation(line: 3580, column: 32, scope: !7761)
!7771 = !DILocation(line: 3580, column: 17, scope: !7761)
!7772 = !DILocalVariable(name: "seq", scope: !7761, file: !3, line: 3581, type: !269)
!7773 = !DILocation(line: 3581, column: 12, scope: !7761)
!7774 = !DILocation(line: 3581, column: 43, scope: !7761)
!7775 = !DILocation(line: 3581, column: 18, scope: !7761)
!7776 = !DILocalVariable(name: "filepath", scope: !7761, file: !3, line: 3582, type: !408)
!7777 = !DILocation(line: 3582, column: 7, scope: !7761)
!7778 = !DILocation(line: 3584, column: 19, scope: !7761)
!7779 = !DILocation(line: 3584, column: 47, scope: !7761)
!7780 = !DILocation(line: 3584, column: 52, scope: !7761)
!7781 = !DILocation(line: 3584, column: 59, scope: !7761)
!7782 = !DILocation(line: 3584, column: 64, scope: !7761)
!7783 = !DILocation(line: 3584, column: 69, scope: !7761)
!7784 = !DILocation(line: 3584, column: 76, scope: !7761)
!7785 = !DILocation(line: 3584, column: 87, scope: !7761)
!7786 = !DILocation(line: 3584, column: 2, scope: !7761)
!7787 = !DILocation(line: 3586, column: 17, scope: !7761)
!7788 = !DILocation(line: 3586, column: 21, scope: !7761)
!7789 = !DILocation(line: 3586, column: 39, scope: !7761)
!7790 = !DILocation(line: 3586, column: 44, scope: !7761)
!7791 = !DILocation(line: 3586, column: 51, scope: !7761)
!7792 = !DILocation(line: 3586, column: 2, scope: !7761)
!7793 = !DILocation(line: 3587, column: 17, scope: !7761)
!7794 = !DILocation(line: 3587, column: 21, scope: !7761)
!7795 = !DILocation(line: 3587, column: 39, scope: !7761)
!7796 = !DILocation(line: 3587, column: 2, scope: !7761)
!7797 = !DILocation(line: 3590, column: 6, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 3590, column: 6)
!7799 = !DILocation(line: 3590, column: 11, scope: !7798)
!7800 = !DILocation(line: 3590, column: 16, scope: !7798)
!7801 = !DILocation(line: 3590, column: 6, scope: !7761)
!7802 = !DILocation(line: 3591, column: 19, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 3590, column: 35)
!7804 = !DILocation(line: 3591, column: 23, scope: !7803)
!7805 = !DILocation(line: 3591, column: 3, scope: !7803)
!7806 = !DILocation(line: 3592, column: 2, scope: !7803)
!7807 = !DILocation(line: 3594, column: 19, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 3593, column: 7)
!7809 = !DILocation(line: 3594, column: 23, scope: !7808)
!7810 = !DILocation(line: 3594, column: 3, scope: !7808)
!7811 = !DILocation(line: 3597, column: 26, scope: !7761)
!7812 = !DILocation(line: 3597, column: 29, scope: !7761)
!7813 = !DILocation(line: 3597, column: 2, scope: !7761)
!7814 = !DILocation(line: 3599, column: 2, scope: !7761)
!7815 = distinct !DISubprogram(name: "sequence_offset_after_frame", scope: !3, file: !3, line: 882, type: !7816, scopeLine: 883, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7816 = !DISubroutineType(types: !7817)
!7817 = !{!605, !1540, !2040, !2040}
!7818 = !DILocalVariable(name: "scene", arg: 1, scope: !7815, file: !3, line: 882, type: !1540)
!7819 = !DILocation(line: 882, column: 48, scope: !7815)
!7820 = !DILocalVariable(name: "delta", arg: 2, scope: !7815, file: !3, line: 882, type: !2040)
!7821 = !DILocation(line: 882, column: 65, scope: !7815)
!7822 = !DILocalVariable(name: "cfra", arg: 3, scope: !7815, file: !3, line: 882, type: !2040)
!7823 = !DILocation(line: 882, column: 82, scope: !7815)
!7824 = !DILocalVariable(name: "seq", scope: !7815, file: !3, line: 884, type: !269)
!7825 = !DILocation(line: 884, column: 12, scope: !7815)
!7826 = !DILocalVariable(name: "ed", scope: !7815, file: !3, line: 885, type: !1843)
!7827 = !DILocation(line: 885, column: 11, scope: !7815)
!7828 = !DILocation(line: 885, column: 42, scope: !7815)
!7829 = !DILocation(line: 885, column: 16, scope: !7815)
!7830 = !DILocalVariable(name: "done", scope: !7815, file: !3, line: 886, type: !605)
!7831 = !DILocation(line: 886, column: 7, scope: !7815)
!7832 = !DILocation(line: 890, column: 6, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 890, column: 6)
!7834 = !DILocation(line: 890, column: 9, scope: !7833)
!7835 = !DILocation(line: 890, column: 6, scope: !7815)
!7836 = !DILocation(line: 890, column: 18, scope: !7833)
!7837 = !DILocation(line: 892, column: 13, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 892, column: 2)
!7839 = !DILocation(line: 892, column: 17, scope: !7838)
!7840 = !DILocation(line: 892, column: 27, scope: !7838)
!7841 = !DILocation(line: 892, column: 11, scope: !7838)
!7842 = !DILocation(line: 892, column: 7, scope: !7838)
!7843 = !DILocation(line: 892, column: 34, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 892, column: 2)
!7845 = !DILocation(line: 892, column: 2, scope: !7838)
!7846 = !DILocation(line: 893, column: 7, scope: !7847)
!7847 = distinct !DILexicalBlock(scope: !7848, file: !3, line: 893, column: 7)
!7848 = distinct !DILexicalBlock(scope: !7844, file: !3, line: 892, column: 56)
!7849 = !DILocation(line: 893, column: 12, scope: !7847)
!7850 = !DILocation(line: 893, column: 25, scope: !7847)
!7851 = !DILocation(line: 893, column: 22, scope: !7847)
!7852 = !DILocation(line: 893, column: 7, scope: !7848)
!7853 = !DILocation(line: 894, column: 27, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 893, column: 31)
!7855 = !DILocation(line: 894, column: 34, scope: !7854)
!7856 = !DILocation(line: 894, column: 39, scope: !7854)
!7857 = !DILocation(line: 894, column: 4, scope: !7854)
!7858 = !DILocation(line: 895, column: 22, scope: !7854)
!7859 = !DILocation(line: 895, column: 29, scope: !7854)
!7860 = !DILocation(line: 895, column: 4, scope: !7854)
!7861 = !DILocation(line: 896, column: 9, scope: !7854)
!7862 = !DILocation(line: 897, column: 3, scope: !7854)
!7863 = !DILocation(line: 898, column: 2, scope: !7848)
!7864 = !DILocation(line: 892, column: 45, scope: !7844)
!7865 = !DILocation(line: 892, column: 50, scope: !7844)
!7866 = !DILocation(line: 892, column: 43, scope: !7844)
!7867 = !DILocation(line: 892, column: 2, scope: !7844)
!7868 = distinct !{!7868, !7845, !7869}
!7869 = !DILocation(line: 898, column: 2, scope: !7838)
!7870 = !DILocation(line: 900, column: 9, scope: !7815)
!7871 = !DILocation(line: 900, column: 2, scope: !7815)
!7872 = !DILocation(line: 901, column: 1, scope: !7815)
!7873 = distinct !DISubprogram(name: "slip_count_sequences_rec", scope: !3, file: !3, line: 1301, type: !7874, scopeLine: 1302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7874 = !DISubroutineType(types: !7875)
!7875 = !{!15, !572, !605}
!7876 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !7873, file: !3, line: 1301, type: !572)
!7877 = !DILocation(line: 1301, column: 47, scope: !7873)
!7878 = !DILocalVariable(name: "first_level", arg: 2, scope: !7873, file: !3, line: 1301, type: !605)
!7879 = !DILocation(line: 1301, column: 62, scope: !7873)
!7880 = !DILocalVariable(name: "seq", scope: !7873, file: !3, line: 1303, type: !269)
!7881 = !DILocation(line: 1303, column: 12, scope: !7873)
!7882 = !DILocalVariable(name: "trimmed_sequences", scope: !7873, file: !3, line: 1304, type: !15)
!7883 = !DILocation(line: 1304, column: 6, scope: !7873)
!7884 = !DILocation(line: 1306, column: 13, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7873, file: !3, line: 1306, column: 2)
!7886 = !DILocation(line: 1306, column: 23, scope: !7885)
!7887 = !DILocation(line: 1306, column: 11, scope: !7885)
!7888 = !DILocation(line: 1306, column: 7, scope: !7885)
!7889 = !DILocation(line: 1306, column: 30, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 1306, column: 2)
!7891 = !DILocation(line: 1306, column: 2, scope: !7885)
!7892 = !DILocation(line: 1307, column: 8, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 1307, column: 7)
!7894 = distinct !DILexicalBlock(scope: !7890, file: !3, line: 1306, column: 52)
!7895 = !DILocation(line: 1307, column: 20, scope: !7893)
!7896 = !DILocation(line: 1307, column: 26, scope: !7893)
!7897 = !DILocation(line: 1307, column: 31, scope: !7893)
!7898 = !DILocation(line: 1307, column: 36, scope: !7893)
!7899 = !DILocation(line: 1307, column: 55, scope: !7893)
!7900 = !DILocation(line: 1307, column: 59, scope: !7893)
!7901 = !DILocation(line: 1307, column: 64, scope: !7893)
!7902 = !DILocation(line: 1307, column: 69, scope: !7893)
!7903 = !DILocation(line: 1307, column: 7, scope: !7894)
!7904 = !DILocation(line: 1308, column: 21, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1307, column: 81)
!7906 = !DILocation(line: 1310, column: 8, scope: !7907)
!7907 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1310, column: 8)
!7908 = !DILocation(line: 1310, column: 13, scope: !7907)
!7909 = !DILocation(line: 1310, column: 18, scope: !7907)
!7910 = !DILocation(line: 1310, column: 8, scope: !7905)
!7911 = !DILocation(line: 1312, column: 52, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 1310, column: 36)
!7913 = !DILocation(line: 1312, column: 57, scope: !7912)
!7914 = !DILocation(line: 1312, column: 26, scope: !7912)
!7915 = !DILocation(line: 1312, column: 23, scope: !7912)
!7916 = !DILocation(line: 1313, column: 4, scope: !7912)
!7917 = !DILocation(line: 1314, column: 3, scope: !7905)
!7918 = !DILocation(line: 1315, column: 2, scope: !7894)
!7919 = !DILocation(line: 1306, column: 41, scope: !7890)
!7920 = !DILocation(line: 1306, column: 46, scope: !7890)
!7921 = !DILocation(line: 1306, column: 39, scope: !7890)
!7922 = !DILocation(line: 1306, column: 2, scope: !7890)
!7923 = distinct !{!7923, !7891, !7924}
!7924 = !DILocation(line: 1315, column: 2, scope: !7885)
!7925 = !DILocation(line: 1317, column: 9, scope: !7873)
!7926 = !DILocation(line: 1317, column: 2, scope: !7873)
!7927 = distinct !DISubprogram(name: "slip_add_sequences_rec", scope: !3, file: !3, line: 1277, type: !7928, scopeLine: 1278, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!7928 = !DISubroutineType(types: !7929)
!7929 = !{!15, !572, !268, !1536, !15, !605}
!7930 = !DILocalVariable(name: "seqbasep", arg: 1, scope: !7927, file: !3, line: 1277, type: !572)
!7931 = !DILocation(line: 1277, column: 45, scope: !7927)
!7932 = !DILocalVariable(name: "seq_array", arg: 2, scope: !7927, file: !3, line: 1277, type: !268)
!7933 = !DILocation(line: 1277, column: 66, scope: !7927)
!7934 = !DILocalVariable(name: "trim", arg: 3, scope: !7927, file: !3, line: 1277, type: !1536)
!7935 = !DILocation(line: 1277, column: 83, scope: !7927)
!7936 = !DILocalVariable(name: "offset", arg: 4, scope: !7927, file: !3, line: 1277, type: !15)
!7937 = !DILocation(line: 1277, column: 93, scope: !7927)
!7938 = !DILocalVariable(name: "first_level", arg: 5, scope: !7927, file: !3, line: 1277, type: !605)
!7939 = !DILocation(line: 1277, column: 106, scope: !7927)
!7940 = !DILocalVariable(name: "seq", scope: !7927, file: !3, line: 1279, type: !269)
!7941 = !DILocation(line: 1279, column: 12, scope: !7927)
!7942 = !DILocalVariable(name: "num_items", scope: !7927, file: !3, line: 1280, type: !15)
!7943 = !DILocation(line: 1280, column: 6, scope: !7927)
!7944 = !DILocation(line: 1282, column: 13, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7927, file: !3, line: 1282, column: 2)
!7946 = !DILocation(line: 1282, column: 23, scope: !7945)
!7947 = !DILocation(line: 1282, column: 11, scope: !7945)
!7948 = !DILocation(line: 1282, column: 7, scope: !7945)
!7949 = !DILocation(line: 1282, column: 30, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 1282, column: 2)
!7951 = !DILocation(line: 1282, column: 2, scope: !7945)
!7952 = !DILocation(line: 1283, column: 8, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7954, file: !3, line: 1283, column: 7)
!7954 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 1282, column: 52)
!7955 = !DILocation(line: 1283, column: 20, scope: !7953)
!7956 = !DILocation(line: 1283, column: 26, scope: !7953)
!7957 = !DILocation(line: 1283, column: 31, scope: !7953)
!7958 = !DILocation(line: 1283, column: 36, scope: !7953)
!7959 = !DILocation(line: 1283, column: 55, scope: !7953)
!7960 = !DILocation(line: 1283, column: 59, scope: !7953)
!7961 = !DILocation(line: 1283, column: 64, scope: !7953)
!7962 = !DILocation(line: 1283, column: 69, scope: !7953)
!7963 = !DILocation(line: 1283, column: 7, scope: !7954)
!7964 = !DILocation(line: 1284, column: 36, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 1283, column: 81)
!7966 = !DILocation(line: 1284, column: 4, scope: !7965)
!7967 = !DILocation(line: 1284, column: 14, scope: !7965)
!7968 = !DILocation(line: 1284, column: 23, scope: !7965)
!7969 = !DILocation(line: 1284, column: 21, scope: !7965)
!7970 = !DILocation(line: 1284, column: 34, scope: !7965)
!7971 = !DILocation(line: 1285, column: 31, scope: !7965)
!7972 = !DILocation(line: 1285, column: 4, scope: !7965)
!7973 = !DILocation(line: 1285, column: 9, scope: !7965)
!7974 = !DILocation(line: 1285, column: 18, scope: !7965)
!7975 = !DILocation(line: 1285, column: 16, scope: !7965)
!7976 = !DILocation(line: 1285, column: 29, scope: !7965)
!7977 = !DILocation(line: 1286, column: 13, scope: !7965)
!7978 = !DILocation(line: 1288, column: 8, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !7965, file: !3, line: 1288, column: 8)
!7980 = !DILocation(line: 1288, column: 13, scope: !7979)
!7981 = !DILocation(line: 1288, column: 18, scope: !7979)
!7982 = !DILocation(line: 1288, column: 8, scope: !7965)
!7983 = !DILocation(line: 1290, column: 42, scope: !7984)
!7984 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 1288, column: 36)
!7985 = !DILocation(line: 1290, column: 47, scope: !7984)
!7986 = !DILocation(line: 1290, column: 56, scope: !7984)
!7987 = !DILocation(line: 1290, column: 67, scope: !7984)
!7988 = !DILocation(line: 1290, column: 73, scope: !7984)
!7989 = !DILocation(line: 1290, column: 85, scope: !7984)
!7990 = !DILocation(line: 1290, column: 83, scope: !7984)
!7991 = !DILocation(line: 1290, column: 18, scope: !7984)
!7992 = !DILocation(line: 1290, column: 15, scope: !7984)
!7993 = !DILocation(line: 1291, column: 4, scope: !7984)
!7994 = !DILocation(line: 1292, column: 13, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 1292, column: 13)
!7996 = !DILocation(line: 1292, column: 18, scope: !7995)
!7997 = !DILocation(line: 1292, column: 23, scope: !7995)
!7998 = !DILocation(line: 1292, column: 13, scope: !7979)
!7999 = !DILocation(line: 1293, column: 5, scope: !8000)
!8000 = distinct !DILexicalBlock(scope: !7995, file: !3, line: 1292, column: 42)
!8001 = !DILocation(line: 1293, column: 10, scope: !8000)
!8002 = !DILocation(line: 1293, column: 19, scope: !8000)
!8003 = !DILocation(line: 1293, column: 17, scope: !8000)
!8004 = !DILocation(line: 1293, column: 30, scope: !8000)
!8005 = !DILocation(line: 1294, column: 4, scope: !8000)
!8006 = !DILocation(line: 1295, column: 3, scope: !7965)
!8007 = !DILocation(line: 1296, column: 2, scope: !7954)
!8008 = !DILocation(line: 1282, column: 41, scope: !7950)
!8009 = !DILocation(line: 1282, column: 46, scope: !7950)
!8010 = !DILocation(line: 1282, column: 39, scope: !7950)
!8011 = !DILocation(line: 1282, column: 2, scope: !7950)
!8012 = distinct !{!8012, !7951, !8013}
!8013 = !DILocation(line: 1296, column: 2, scope: !7945)
!8014 = !DILocation(line: 1298, column: 9, scope: !7927)
!8015 = !DILocation(line: 1298, column: 2, scope: !7927)
!8016 = distinct !DISubprogram(name: "transseq_backup", scope: !3, file: !3, line: 1246, type: !8017, scopeLine: 1247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8017 = !DISubroutineType(types: !8018)
!8018 = !{null, !252, !269}
!8019 = !DILocalVariable(name: "ts", arg: 1, scope: !8016, file: !3, line: 1246, type: !252)
!8020 = !DILocation(line: 1246, column: 39, scope: !8016)
!8021 = !DILocalVariable(name: "seq", arg: 2, scope: !8016, file: !3, line: 1246, type: !269)
!8022 = !DILocation(line: 1246, column: 53, scope: !8016)
!8023 = !DILocation(line: 1248, column: 14, scope: !8016)
!8024 = !DILocation(line: 1248, column: 19, scope: !8016)
!8025 = !DILocation(line: 1248, column: 2, scope: !8016)
!8026 = !DILocation(line: 1248, column: 6, scope: !8016)
!8027 = !DILocation(line: 1248, column: 12, scope: !8016)
!8028 = !DILocation(line: 1249, column: 16, scope: !8016)
!8029 = !DILocation(line: 1249, column: 21, scope: !8016)
!8030 = !DILocation(line: 1249, column: 2, scope: !8016)
!8031 = !DILocation(line: 1249, column: 6, scope: !8016)
!8032 = !DILocation(line: 1249, column: 14, scope: !8016)
!8033 = !DILocation(line: 1250, column: 19, scope: !8016)
!8034 = !DILocation(line: 1250, column: 24, scope: !8016)
!8035 = !DILocation(line: 1250, column: 2, scope: !8016)
!8036 = !DILocation(line: 1250, column: 6, scope: !8016)
!8037 = !DILocation(line: 1250, column: 17, scope: !8016)
!8038 = !DILocation(line: 1251, column: 17, scope: !8016)
!8039 = !DILocation(line: 1251, column: 22, scope: !8016)
!8040 = !DILocation(line: 1251, column: 2, scope: !8016)
!8041 = !DILocation(line: 1251, column: 6, scope: !8016)
!8042 = !DILocation(line: 1251, column: 15, scope: !8016)
!8043 = !DILocation(line: 1252, column: 18, scope: !8016)
!8044 = !DILocation(line: 1252, column: 23, scope: !8016)
!8045 = !DILocation(line: 1252, column: 2, scope: !8016)
!8046 = !DILocation(line: 1252, column: 6, scope: !8016)
!8047 = !DILocation(line: 1252, column: 16, scope: !8016)
!8048 = !DILocation(line: 1253, column: 16, scope: !8016)
!8049 = !DILocation(line: 1253, column: 21, scope: !8016)
!8050 = !DILocation(line: 1253, column: 2, scope: !8016)
!8051 = !DILocation(line: 1253, column: 6, scope: !8016)
!8052 = !DILocation(line: 1253, column: 14, scope: !8016)
!8053 = !DILocation(line: 1254, column: 17, scope: !8016)
!8054 = !DILocation(line: 1254, column: 22, scope: !8016)
!8055 = !DILocation(line: 1254, column: 2, scope: !8016)
!8056 = !DILocation(line: 1254, column: 6, scope: !8016)
!8057 = !DILocation(line: 1254, column: 15, scope: !8016)
!8058 = !DILocation(line: 1255, column: 15, scope: !8016)
!8059 = !DILocation(line: 1255, column: 20, scope: !8016)
!8060 = !DILocation(line: 1255, column: 2, scope: !8016)
!8061 = !DILocation(line: 1255, column: 6, scope: !8016)
!8062 = !DILocation(line: 1255, column: 13, scope: !8016)
!8063 = !DILocation(line: 1256, column: 22, scope: !8016)
!8064 = !DILocation(line: 1256, column: 27, scope: !8016)
!8065 = !DILocation(line: 1256, column: 2, scope: !8016)
!8066 = !DILocation(line: 1256, column: 6, scope: !8016)
!8067 = !DILocation(line: 1256, column: 20, scope: !8016)
!8068 = !DILocation(line: 1257, column: 20, scope: !8016)
!8069 = !DILocation(line: 1257, column: 25, scope: !8016)
!8070 = !DILocation(line: 1257, column: 2, scope: !8016)
!8071 = !DILocation(line: 1257, column: 6, scope: !8016)
!8072 = !DILocation(line: 1257, column: 18, scope: !8016)
!8073 = !DILocation(line: 1258, column: 12, scope: !8016)
!8074 = !DILocation(line: 1258, column: 17, scope: !8016)
!8075 = !DILocation(line: 1258, column: 2, scope: !8016)
!8076 = !DILocation(line: 1258, column: 6, scope: !8016)
!8077 = !DILocation(line: 1258, column: 10, scope: !8016)
!8078 = !DILocation(line: 1259, column: 1, scope: !8016)
!8079 = distinct !DISubprogram(name: "copy_v2_v2_int", scope: !8080, file: !8080, line: 152, type: !8081, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8080 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_vector_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!8081 = !DISubroutineType(types: !8082)
!8082 = !{null, !2038, !2039}
!8083 = !DILocalVariable(name: "r", arg: 1, scope: !8079, file: !8080, line: 152, type: !2038)
!8084 = !DILocation(line: 152, column: 33, scope: !8079)
!8085 = !DILocalVariable(name: "a", arg: 2, scope: !8079, file: !8080, line: 152, type: !2039)
!8086 = !DILocation(line: 152, column: 49, scope: !8079)
!8087 = !DILocation(line: 154, column: 9, scope: !8079)
!8088 = !DILocation(line: 154, column: 2, scope: !8079)
!8089 = !DILocation(line: 154, column: 7, scope: !8079)
!8090 = !DILocation(line: 155, column: 9, scope: !8079)
!8091 = !DILocation(line: 155, column: 2, scope: !8079)
!8092 = !DILocation(line: 155, column: 7, scope: !8079)
!8093 = !DILocation(line: 156, column: 1, scope: !8079)
!8094 = distinct !DISubprogram(name: "copy_v2_v2", scope: !8080, file: !8080, line: 58, type: !8095, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8095 = !DISubroutineType(types: !8096)
!8096 = !{null, !1591, !8097}
!8097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8098, size: 64)
!8098 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !240)
!8099 = !DILocalVariable(name: "r", arg: 1, scope: !8094, file: !8080, line: 58, type: !1591)
!8100 = !DILocation(line: 58, column: 31, scope: !8094)
!8101 = !DILocalVariable(name: "a", arg: 2, scope: !8094, file: !8080, line: 58, type: !8097)
!8102 = !DILocation(line: 58, column: 49, scope: !8094)
!8103 = !DILocation(line: 60, column: 9, scope: !8094)
!8104 = !DILocation(line: 60, column: 2, scope: !8094)
!8105 = !DILocation(line: 60, column: 7, scope: !8094)
!8106 = !DILocation(line: 61, column: 9, scope: !8094)
!8107 = !DILocation(line: 61, column: 2, scope: !8094)
!8108 = !DILocation(line: 61, column: 7, scope: !8094)
!8109 = !DILocation(line: 62, column: 1, scope: !8094)
!8110 = distinct !DISubprogram(name: "sequencer_slip_recursively", scope: !3, file: !3, line: 1359, type: !8111, scopeLine: 1360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8111 = !DISubroutineType(types: !8112)
!8112 = !{!605, !1540, !241, !15}
!8113 = !DILocalVariable(name: "scene", arg: 1, scope: !8110, file: !3, line: 1359, type: !1540)
!8114 = !DILocation(line: 1359, column: 47, scope: !8110)
!8115 = !DILocalVariable(name: "data", arg: 2, scope: !8110, file: !3, line: 1359, type: !241)
!8116 = !DILocation(line: 1359, column: 64, scope: !8110)
!8117 = !DILocalVariable(name: "offset", arg: 3, scope: !8110, file: !3, line: 1359, type: !15)
!8118 = !DILocation(line: 1359, column: 74, scope: !8110)
!8119 = !DILocation(line: 1363, column: 6, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8110, file: !3, line: 1363, column: 6)
!8121 = !DILocation(line: 1363, column: 13, scope: !8120)
!8122 = !DILocation(line: 1363, column: 6, scope: !8110)
!8123 = !DILocalVariable(name: "ed", scope: !8124, file: !3, line: 1364, type: !1843)
!8124 = distinct !DILexicalBlock(scope: !8120, file: !3, line: 1363, column: 19)
!8125 = !DILocation(line: 1364, column: 12, scope: !8124)
!8126 = !DILocation(line: 1364, column: 43, scope: !8124)
!8127 = !DILocation(line: 1364, column: 17, scope: !8124)
!8128 = !DILocalVariable(name: "i", scope: !8124, file: !3, line: 1365, type: !15)
!8129 = !DILocation(line: 1365, column: 7, scope: !8124)
!8130 = !DILocation(line: 1368, column: 12, scope: !8131)
!8131 = distinct !DILexicalBlock(scope: !8124, file: !3, line: 1368, column: 3)
!8132 = !DILocation(line: 1368, column: 18, scope: !8131)
!8133 = !DILocation(line: 1368, column: 26, scope: !8131)
!8134 = !DILocation(line: 1368, column: 10, scope: !8131)
!8135 = !DILocation(line: 1368, column: 8, scope: !8131)
!8136 = !DILocation(line: 1368, column: 31, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1368, column: 3)
!8138 = !DILocation(line: 1368, column: 33, scope: !8137)
!8139 = !DILocation(line: 1368, column: 3, scope: !8131)
!8140 = !DILocalVariable(name: "seq", scope: !8141, file: !3, line: 1369, type: !269)
!8141 = distinct !DILexicalBlock(scope: !8137, file: !3, line: 1368, column: 44)
!8142 = !DILocation(line: 1369, column: 14, scope: !8141)
!8143 = !DILocation(line: 1369, column: 20, scope: !8141)
!8144 = !DILocation(line: 1369, column: 26, scope: !8141)
!8145 = !DILocation(line: 1369, column: 36, scope: !8141)
!8146 = !DILocalVariable(name: "endframe", scope: !8141, file: !3, line: 1370, type: !15)
!8147 = !DILocation(line: 1370, column: 8, scope: !8141)
!8148 = !DILocation(line: 1374, column: 17, scope: !8141)
!8149 = !DILocation(line: 1374, column: 23, scope: !8141)
!8150 = !DILocation(line: 1374, column: 26, scope: !8141)
!8151 = !DILocation(line: 1374, column: 29, scope: !8141)
!8152 = !DILocation(line: 1374, column: 37, scope: !8141)
!8153 = !DILocation(line: 1374, column: 35, scope: !8141)
!8154 = !DILocation(line: 1374, column: 4, scope: !8141)
!8155 = !DILocation(line: 1374, column: 9, scope: !8141)
!8156 = !DILocation(line: 1374, column: 15, scope: !8141)
!8157 = !DILocation(line: 1376, column: 8, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8141, file: !3, line: 1376, column: 8)
!8159 = !DILocation(line: 1376, column: 14, scope: !8158)
!8160 = !DILocation(line: 1376, column: 19, scope: !8158)
!8161 = !DILocation(line: 1376, column: 8, scope: !8141)
!8162 = !DILocation(line: 1378, column: 16, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 1376, column: 23)
!8164 = !DILocation(line: 1378, column: 21, scope: !8163)
!8165 = !DILocation(line: 1378, column: 29, scope: !8163)
!8166 = !DILocation(line: 1378, column: 34, scope: !8163)
!8167 = !DILocation(line: 1378, column: 27, scope: !8163)
!8168 = !DILocation(line: 1378, column: 14, scope: !8163)
!8169 = !DILocation(line: 1381, column: 9, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 1381, column: 9)
!8171 = !DILocation(line: 1381, column: 20, scope: !8170)
!8172 = !DILocation(line: 1381, column: 25, scope: !8170)
!8173 = !DILocation(line: 1381, column: 18, scope: !8170)
!8174 = !DILocation(line: 1381, column: 9, scope: !8163)
!8175 = !DILocation(line: 1382, column: 6, scope: !8176)
!8176 = distinct !DILexicalBlock(scope: !8170, file: !3, line: 1381, column: 34)
!8177 = !DILocation(line: 1382, column: 11, scope: !8176)
!8178 = !DILocation(line: 1382, column: 20, scope: !8176)
!8179 = !DILocation(line: 1383, column: 20, scope: !8176)
!8180 = !DILocation(line: 1383, column: 31, scope: !8176)
!8181 = !DILocation(line: 1383, column: 36, scope: !8176)
!8182 = !DILocation(line: 1383, column: 29, scope: !8176)
!8183 = !DILocation(line: 1383, column: 6, scope: !8176)
!8184 = !DILocation(line: 1383, column: 11, scope: !8176)
!8185 = !DILocation(line: 1383, column: 18, scope: !8176)
!8186 = !DILocation(line: 1384, column: 5, scope: !8176)
!8187 = !DILocation(line: 1385, column: 14, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8170, file: !3, line: 1385, column: 14)
!8189 = !DILocation(line: 1385, column: 26, scope: !8188)
!8190 = !DILocation(line: 1385, column: 31, scope: !8188)
!8191 = !DILocation(line: 1385, column: 23, scope: !8188)
!8192 = !DILocation(line: 1385, column: 14, scope: !8170)
!8193 = !DILocation(line: 1386, column: 22, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 1385, column: 40)
!8195 = !DILocation(line: 1386, column: 27, scope: !8194)
!8196 = !DILocation(line: 1386, column: 37, scope: !8194)
!8197 = !DILocation(line: 1386, column: 35, scope: !8194)
!8198 = !DILocation(line: 1386, column: 6, scope: !8194)
!8199 = !DILocation(line: 1386, column: 11, scope: !8194)
!8200 = !DILocation(line: 1386, column: 20, scope: !8194)
!8201 = !DILocation(line: 1387, column: 6, scope: !8194)
!8202 = !DILocation(line: 1387, column: 11, scope: !8194)
!8203 = !DILocation(line: 1387, column: 18, scope: !8194)
!8204 = !DILocation(line: 1388, column: 5, scope: !8194)
!8205 = !DILocation(line: 1390, column: 9, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8163, file: !3, line: 1390, column: 9)
!8207 = !DILocation(line: 1390, column: 14, scope: !8206)
!8208 = !DILocation(line: 1390, column: 22, scope: !8206)
!8209 = !DILocation(line: 1390, column: 27, scope: !8206)
!8210 = !DILocation(line: 1390, column: 20, scope: !8206)
!8211 = !DILocation(line: 1390, column: 9, scope: !8163)
!8212 = !DILocation(line: 1391, column: 24, scope: !8213)
!8213 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1390, column: 38)
!8214 = !DILocation(line: 1391, column: 29, scope: !8213)
!8215 = !DILocation(line: 1391, column: 37, scope: !8213)
!8216 = !DILocation(line: 1391, column: 42, scope: !8213)
!8217 = !DILocation(line: 1391, column: 35, scope: !8213)
!8218 = !DILocation(line: 1391, column: 6, scope: !8213)
!8219 = !DILocation(line: 1391, column: 11, scope: !8213)
!8220 = !DILocation(line: 1391, column: 22, scope: !8213)
!8221 = !DILocation(line: 1392, column: 6, scope: !8213)
!8222 = !DILocation(line: 1392, column: 11, scope: !8213)
!8223 = !DILocation(line: 1392, column: 20, scope: !8213)
!8224 = !DILocation(line: 1393, column: 5, scope: !8213)
!8225 = !DILocation(line: 1394, column: 14, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1394, column: 14)
!8227 = !DILocation(line: 1394, column: 19, scope: !8226)
!8228 = !DILocation(line: 1394, column: 28, scope: !8226)
!8229 = !DILocation(line: 1394, column: 33, scope: !8226)
!8230 = !DILocation(line: 1394, column: 25, scope: !8226)
!8231 = !DILocation(line: 1394, column: 14, scope: !8206)
!8232 = !DILocation(line: 1395, column: 6, scope: !8233)
!8233 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 1394, column: 44)
!8234 = !DILocation(line: 1395, column: 11, scope: !8233)
!8235 = !DILocation(line: 1395, column: 22, scope: !8233)
!8236 = !DILocation(line: 1396, column: 22, scope: !8233)
!8237 = !DILocation(line: 1396, column: 27, scope: !8233)
!8238 = !DILocation(line: 1396, column: 39, scope: !8233)
!8239 = !DILocation(line: 1396, column: 44, scope: !8233)
!8240 = !DILocation(line: 1396, column: 37, scope: !8233)
!8241 = !DILocation(line: 1396, column: 6, scope: !8233)
!8242 = !DILocation(line: 1396, column: 11, scope: !8233)
!8243 = !DILocation(line: 1396, column: 20, scope: !8233)
!8244 = !DILocation(line: 1397, column: 5, scope: !8233)
!8245 = !DILocation(line: 1398, column: 4, scope: !8163)
!8246 = !DILocation(line: 1401, column: 22, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 1399, column: 9)
!8248 = !DILocation(line: 1401, column: 28, scope: !8247)
!8249 = !DILocation(line: 1401, column: 31, scope: !8247)
!8250 = !DILocation(line: 1401, column: 34, scope: !8247)
!8251 = !DILocation(line: 1401, column: 46, scope: !8247)
!8252 = !DILocation(line: 1401, column: 44, scope: !8247)
!8253 = !DILocation(line: 1401, column: 5, scope: !8247)
!8254 = !DILocation(line: 1401, column: 10, scope: !8247)
!8255 = !DILocation(line: 1401, column: 20, scope: !8247)
!8256 = !DILocation(line: 1402, column: 20, scope: !8247)
!8257 = !DILocation(line: 1402, column: 26, scope: !8247)
!8258 = !DILocation(line: 1402, column: 29, scope: !8247)
!8259 = !DILocation(line: 1402, column: 32, scope: !8247)
!8260 = !DILocation(line: 1402, column: 42, scope: !8247)
!8261 = !DILocation(line: 1402, column: 40, scope: !8247)
!8262 = !DILocation(line: 1402, column: 5, scope: !8247)
!8263 = !DILocation(line: 1402, column: 10, scope: !8247)
!8264 = !DILocation(line: 1402, column: 18, scope: !8247)
!8265 = !DILocation(line: 1407, column: 10, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8141, file: !3, line: 1407, column: 8)
!8267 = !DILocation(line: 1407, column: 15, scope: !8266)
!8268 = !DILocation(line: 1407, column: 20, scope: !8266)
!8269 = !DILocation(line: 1407, column: 8, scope: !8141)
!8270 = !DILocation(line: 1408, column: 23, scope: !8266)
!8271 = !DILocation(line: 1408, column: 30, scope: !8266)
!8272 = !DILocation(line: 1408, column: 5, scope: !8266)
!8273 = !DILocation(line: 1409, column: 3, scope: !8141)
!8274 = !DILocation(line: 1368, column: 40, scope: !8137)
!8275 = !DILocation(line: 1368, column: 3, scope: !8137)
!8276 = distinct !{!8276, !8139, !8277}
!8277 = !DILocation(line: 1409, column: 3, scope: !8131)
!8278 = !DILocation(line: 1410, column: 28, scope: !8124)
!8279 = !DILocation(line: 1410, column: 36, scope: !8124)
!8280 = !DILocation(line: 1410, column: 40, scope: !8124)
!8281 = !DILocation(line: 1410, column: 3, scope: !8124)
!8282 = !DILocation(line: 1412, column: 3, scope: !8124)
!8283 = !DILocation(line: 1415, column: 2, scope: !8110)
!8284 = !DILocation(line: 1416, column: 1, scope: !8110)
!8285 = distinct !DISubprogram(name: "transseq_restore", scope: !3, file: !3, line: 1262, type: !8017, scopeLine: 1263, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8286 = !DILocalVariable(name: "ts", arg: 1, scope: !8285, file: !3, line: 1262, type: !252)
!8287 = !DILocation(line: 1262, column: 40, scope: !8285)
!8288 = !DILocalVariable(name: "seq", arg: 2, scope: !8285, file: !3, line: 1262, type: !269)
!8289 = !DILocation(line: 1262, column: 54, scope: !8285)
!8290 = !DILocation(line: 1264, column: 15, scope: !8285)
!8291 = !DILocation(line: 1264, column: 19, scope: !8285)
!8292 = !DILocation(line: 1264, column: 2, scope: !8285)
!8293 = !DILocation(line: 1264, column: 7, scope: !8285)
!8294 = !DILocation(line: 1264, column: 13, scope: !8285)
!8295 = !DILocation(line: 1265, column: 17, scope: !8285)
!8296 = !DILocation(line: 1265, column: 21, scope: !8285)
!8297 = !DILocation(line: 1265, column: 2, scope: !8285)
!8298 = !DILocation(line: 1265, column: 7, scope: !8285)
!8299 = !DILocation(line: 1265, column: 15, scope: !8285)
!8300 = !DILocation(line: 1266, column: 20, scope: !8285)
!8301 = !DILocation(line: 1266, column: 24, scope: !8285)
!8302 = !DILocation(line: 1266, column: 2, scope: !8285)
!8303 = !DILocation(line: 1266, column: 7, scope: !8285)
!8304 = !DILocation(line: 1266, column: 18, scope: !8285)
!8305 = !DILocation(line: 1267, column: 18, scope: !8285)
!8306 = !DILocation(line: 1267, column: 22, scope: !8285)
!8307 = !DILocation(line: 1267, column: 2, scope: !8285)
!8308 = !DILocation(line: 1267, column: 7, scope: !8285)
!8309 = !DILocation(line: 1267, column: 16, scope: !8285)
!8310 = !DILocation(line: 1268, column: 19, scope: !8285)
!8311 = !DILocation(line: 1268, column: 23, scope: !8285)
!8312 = !DILocation(line: 1268, column: 2, scope: !8285)
!8313 = !DILocation(line: 1268, column: 7, scope: !8285)
!8314 = !DILocation(line: 1268, column: 17, scope: !8285)
!8315 = !DILocation(line: 1269, column: 17, scope: !8285)
!8316 = !DILocation(line: 1269, column: 21, scope: !8285)
!8317 = !DILocation(line: 1269, column: 2, scope: !8285)
!8318 = !DILocation(line: 1269, column: 7, scope: !8285)
!8319 = !DILocation(line: 1269, column: 15, scope: !8285)
!8320 = !DILocation(line: 1270, column: 18, scope: !8285)
!8321 = !DILocation(line: 1270, column: 22, scope: !8285)
!8322 = !DILocation(line: 1270, column: 2, scope: !8285)
!8323 = !DILocation(line: 1270, column: 7, scope: !8285)
!8324 = !DILocation(line: 1270, column: 16, scope: !8285)
!8325 = !DILocation(line: 1271, column: 16, scope: !8285)
!8326 = !DILocation(line: 1271, column: 20, scope: !8285)
!8327 = !DILocation(line: 1271, column: 2, scope: !8285)
!8328 = !DILocation(line: 1271, column: 7, scope: !8285)
!8329 = !DILocation(line: 1271, column: 14, scope: !8285)
!8330 = !DILocation(line: 1272, column: 23, scope: !8285)
!8331 = !DILocation(line: 1272, column: 27, scope: !8285)
!8332 = !DILocation(line: 1272, column: 2, scope: !8285)
!8333 = !DILocation(line: 1272, column: 7, scope: !8285)
!8334 = !DILocation(line: 1272, column: 21, scope: !8285)
!8335 = !DILocation(line: 1273, column: 21, scope: !8285)
!8336 = !DILocation(line: 1273, column: 25, scope: !8285)
!8337 = !DILocation(line: 1273, column: 2, scope: !8285)
!8338 = !DILocation(line: 1273, column: 7, scope: !8285)
!8339 = !DILocation(line: 1273, column: 19, scope: !8285)
!8340 = !DILocation(line: 1274, column: 13, scope: !8285)
!8341 = !DILocation(line: 1274, column: 17, scope: !8285)
!8342 = !DILocation(line: 1274, column: 2, scope: !8285)
!8343 = !DILocation(line: 1274, column: 7, scope: !8285)
!8344 = !DILocation(line: 1274, column: 11, scope: !8285)
!8345 = !DILocation(line: 1275, column: 1, scope: !8285)
!8346 = distinct !DISubprogram(name: "seq_is_predecessor", scope: !3, file: !3, line: 418, type: !8347, scopeLine: 419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8347 = !DISubroutineType(types: !8348)
!8348 = !{!605, !269, !269}
!8349 = !DILocalVariable(name: "pred", arg: 1, scope: !8346, file: !3, line: 418, type: !269)
!8350 = !DILocation(line: 418, column: 42, scope: !8346)
!8351 = !DILocalVariable(name: "seq", arg: 2, scope: !8346, file: !3, line: 418, type: !269)
!8352 = !DILocation(line: 418, column: 58, scope: !8346)
!8353 = !DILocation(line: 420, column: 7, scope: !8354)
!8354 = distinct !DILexicalBlock(scope: !8346, file: !3, line: 420, column: 6)
!8355 = !DILocation(line: 420, column: 6, scope: !8346)
!8356 = !DILocation(line: 420, column: 13, scope: !8354)
!8357 = !DILocation(line: 421, column: 6, scope: !8358)
!8358 = distinct !DILexicalBlock(scope: !8346, file: !3, line: 421, column: 6)
!8359 = !DILocation(line: 421, column: 14, scope: !8358)
!8360 = !DILocation(line: 421, column: 11, scope: !8358)
!8361 = !DILocation(line: 421, column: 6, scope: !8346)
!8362 = !DILocation(line: 421, column: 19, scope: !8358)
!8363 = !DILocation(line: 422, column: 25, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8358, file: !3, line: 422, column: 11)
!8365 = !DILocation(line: 422, column: 31, scope: !8364)
!8366 = !DILocation(line: 422, column: 11, scope: !8364)
!8367 = !DILocation(line: 422, column: 11, scope: !8358)
!8368 = !DILocation(line: 422, column: 37, scope: !8364)
!8369 = !DILocation(line: 423, column: 11, scope: !8370)
!8370 = distinct !DILexicalBlock(scope: !8364, file: !3, line: 423, column: 11)
!8371 = !DILocation(line: 423, column: 17, scope: !8370)
!8372 = !DILocation(line: 423, column: 22, scope: !8370)
!8373 = !DILocation(line: 423, column: 44, scope: !8370)
!8374 = !DILocation(line: 423, column: 50, scope: !8370)
!8375 = !DILocation(line: 423, column: 56, scope: !8370)
!8376 = !DILocation(line: 423, column: 25, scope: !8370)
!8377 = !DILocation(line: 423, column: 11, scope: !8364)
!8378 = !DILocation(line: 423, column: 62, scope: !8370)
!8379 = !DILocation(line: 424, column: 11, scope: !8380)
!8380 = distinct !DILexicalBlock(scope: !8370, file: !3, line: 424, column: 11)
!8381 = !DILocation(line: 424, column: 17, scope: !8380)
!8382 = !DILocation(line: 424, column: 22, scope: !8380)
!8383 = !DILocation(line: 424, column: 44, scope: !8380)
!8384 = !DILocation(line: 424, column: 50, scope: !8380)
!8385 = !DILocation(line: 424, column: 56, scope: !8380)
!8386 = !DILocation(line: 424, column: 25, scope: !8380)
!8387 = !DILocation(line: 424, column: 11, scope: !8370)
!8388 = !DILocation(line: 424, column: 62, scope: !8380)
!8389 = !DILocation(line: 425, column: 11, scope: !8390)
!8390 = distinct !DILexicalBlock(scope: !8380, file: !3, line: 425, column: 11)
!8391 = !DILocation(line: 425, column: 17, scope: !8390)
!8392 = !DILocation(line: 425, column: 22, scope: !8390)
!8393 = !DILocation(line: 425, column: 44, scope: !8390)
!8394 = !DILocation(line: 425, column: 50, scope: !8390)
!8395 = !DILocation(line: 425, column: 56, scope: !8390)
!8396 = !DILocation(line: 425, column: 25, scope: !8390)
!8397 = !DILocation(line: 425, column: 11, scope: !8380)
!8398 = !DILocation(line: 425, column: 62, scope: !8390)
!8399 = !DILocation(line: 427, column: 2, scope: !8346)
!8400 = !DILocation(line: 428, column: 1, scope: !8346)
!8401 = distinct !DISubprogram(name: "seq_is_parent", scope: !3, file: !3, line: 413, type: !8347, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8402 = !DILocalVariable(name: "par", arg: 1, scope: !8401, file: !3, line: 413, type: !269)
!8403 = !DILocation(line: 413, column: 37, scope: !8401)
!8404 = !DILocalVariable(name: "seq", arg: 2, scope: !8401, file: !3, line: 413, type: !269)
!8405 = !DILocation(line: 413, column: 52, scope: !8401)
!8406 = !DILocation(line: 415, column: 11, scope: !8401)
!8407 = !DILocation(line: 415, column: 16, scope: !8401)
!8408 = !DILocation(line: 415, column: 24, scope: !8401)
!8409 = !DILocation(line: 415, column: 21, scope: !8401)
!8410 = !DILocation(line: 415, column: 29, scope: !8401)
!8411 = !DILocation(line: 415, column: 33, scope: !8401)
!8412 = !DILocation(line: 415, column: 38, scope: !8401)
!8413 = !DILocation(line: 415, column: 46, scope: !8401)
!8414 = !DILocation(line: 415, column: 43, scope: !8401)
!8415 = !DILocation(line: 415, column: 51, scope: !8401)
!8416 = !DILocation(line: 415, column: 55, scope: !8401)
!8417 = !DILocation(line: 415, column: 60, scope: !8401)
!8418 = !DILocation(line: 415, column: 68, scope: !8401)
!8419 = !DILocation(line: 415, column: 65, scope: !8401)
!8420 = !DILocation(line: 415, column: 9, scope: !8401)
!8421 = !DILocation(line: 415, column: 2, scope: !8401)
!8422 = distinct !DISubprogram(name: "mouse_frame_side", scope: !3, file: !3, line: 259, type: !8423, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8423 = !DISubroutineType(types: !8424)
!8424 = !{!15, !2037, !299, !15}
!8425 = !DILocalVariable(name: "v2d", arg: 1, scope: !8422, file: !3, line: 259, type: !2037)
!8426 = !DILocation(line: 259, column: 37, scope: !8422)
!8427 = !DILocalVariable(name: "mouse_x", arg: 2, scope: !8422, file: !3, line: 259, type: !299)
!8428 = !DILocation(line: 259, column: 48, scope: !8422)
!8429 = !DILocalVariable(name: "frame", arg: 3, scope: !8422, file: !3, line: 259, type: !15)
!8430 = !DILocation(line: 259, column: 61, scope: !8422)
!8431 = !DILocalVariable(name: "mval", scope: !8422, file: !3, line: 261, type: !246)
!8432 = !DILocation(line: 261, column: 6, scope: !8422)
!8433 = !DILocalVariable(name: "mouseloc", scope: !8422, file: !3, line: 262, type: !250)
!8434 = !DILocation(line: 262, column: 8, scope: !8422)
!8435 = !DILocation(line: 264, column: 12, scope: !8422)
!8436 = !DILocation(line: 264, column: 2, scope: !8422)
!8437 = !DILocation(line: 264, column: 10, scope: !8422)
!8438 = !DILocation(line: 265, column: 2, scope: !8422)
!8439 = !DILocation(line: 265, column: 10, scope: !8422)
!8440 = !DILocation(line: 268, column: 27, scope: !8422)
!8441 = !DILocation(line: 268, column: 32, scope: !8422)
!8442 = !DILocation(line: 268, column: 41, scope: !8422)
!8443 = !DILocation(line: 268, column: 51, scope: !8422)
!8444 = !DILocation(line: 268, column: 65, scope: !8422)
!8445 = !DILocation(line: 268, column: 2, scope: !8422)
!8446 = !DILocation(line: 270, column: 9, scope: !8422)
!8447 = !DILocation(line: 270, column: 23, scope: !8422)
!8448 = !DILocation(line: 270, column: 21, scope: !8422)
!8449 = !DILocation(line: 270, column: 2, scope: !8422)
!8450 = distinct !DISubprogram(name: "cut_seq_list", scope: !3, file: !3, line: 840, type: !8451, scopeLine: 842, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8451 = !DISubroutineType(types: !8452)
!8452 = !{!605, !1540, !572, !15, !8453}
!8453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8454, size: 64)
!8454 = !DISubroutineType(types: !8455)
!8455 = !{!269, !1540, !269, !15}
!8456 = !DILocalVariable(name: "scene", arg: 1, scope: !8450, file: !3, line: 840, type: !1540)
!8457 = !DILocation(line: 840, column: 33, scope: !8450)
!8458 = !DILocalVariable(name: "slist", arg: 2, scope: !8450, file: !3, line: 840, type: !572)
!8459 = !DILocation(line: 840, column: 50, scope: !8450)
!8460 = !DILocalVariable(name: "cutframe", arg: 3, scope: !8450, file: !3, line: 840, type: !15)
!8461 = !DILocation(line: 840, column: 61, scope: !8450)
!8462 = !DILocalVariable(name: "cut_seq", arg: 4, scope: !8450, file: !3, line: 841, type: !8453)
!8463 = !DILocation(line: 841, column: 39, scope: !8450)
!8464 = !DILocalVariable(name: "seq", scope: !8450, file: !3, line: 843, type: !269)
!8465 = !DILocation(line: 843, column: 12, scope: !8450)
!8466 = !DILocalVariable(name: "seq_next_iter", scope: !8450, file: !3, line: 843, type: !269)
!8467 = !DILocation(line: 843, column: 18, scope: !8450)
!8468 = !DILocalVariable(name: "seq_first_new", scope: !8450, file: !3, line: 844, type: !269)
!8469 = !DILocation(line: 844, column: 12, scope: !8450)
!8470 = !DILocation(line: 846, column: 8, scope: !8450)
!8471 = !DILocation(line: 846, column: 15, scope: !8450)
!8472 = !DILocation(line: 846, column: 6, scope: !8450)
!8473 = !DILocation(line: 848, column: 2, scope: !8450)
!8474 = !DILocation(line: 848, column: 9, scope: !8450)
!8475 = !DILocation(line: 848, column: 13, scope: !8450)
!8476 = !DILocation(line: 848, column: 16, scope: !8450)
!8477 = !DILocation(line: 848, column: 23, scope: !8450)
!8478 = !DILocation(line: 848, column: 20, scope: !8450)
!8479 = !DILocation(line: 0, scope: !8450)
!8480 = !DILocation(line: 849, column: 19, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8450, file: !3, line: 848, column: 38)
!8482 = !DILocation(line: 849, column: 24, scope: !8481)
!8483 = !DILocation(line: 849, column: 17, scope: !8481)
!8484 = !DILocation(line: 850, column: 3, scope: !8481)
!8485 = !DILocation(line: 850, column: 8, scope: !8481)
!8486 = !DILocation(line: 850, column: 12, scope: !8481)
!8487 = !DILocation(line: 851, column: 7, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 851, column: 7)
!8489 = !DILocation(line: 851, column: 12, scope: !8488)
!8490 = !DILocation(line: 851, column: 17, scope: !8488)
!8491 = !DILocation(line: 851, column: 7, scope: !8481)
!8492 = !DILocation(line: 852, column: 8, scope: !8493)
!8493 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 852, column: 8)
!8494 = distinct !DILexicalBlock(scope: !8488, file: !3, line: 851, column: 27)
!8495 = !DILocation(line: 852, column: 19, scope: !8493)
!8496 = !DILocation(line: 852, column: 24, scope: !8493)
!8497 = !DILocation(line: 852, column: 17, scope: !8493)
!8498 = !DILocation(line: 852, column: 34, scope: !8493)
!8499 = !DILocation(line: 853, column: 8, scope: !8493)
!8500 = !DILocation(line: 853, column: 19, scope: !8493)
!8501 = !DILocation(line: 853, column: 24, scope: !8493)
!8502 = !DILocation(line: 853, column: 17, scope: !8493)
!8503 = !DILocation(line: 852, column: 8, scope: !8494)
!8504 = !DILocalVariable(name: "seqn", scope: !8505, file: !3, line: 855, type: !269)
!8505 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 854, column: 4)
!8506 = !DILocation(line: 855, column: 15, scope: !8505)
!8507 = !DILocation(line: 855, column: 22, scope: !8505)
!8508 = !DILocation(line: 855, column: 30, scope: !8505)
!8509 = !DILocation(line: 855, column: 37, scope: !8505)
!8510 = !DILocation(line: 855, column: 42, scope: !8505)
!8511 = !DILocation(line: 856, column: 9, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8505, file: !3, line: 856, column: 9)
!8513 = !DILocation(line: 856, column: 9, scope: !8505)
!8514 = !DILocation(line: 857, column: 18, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8512, file: !3, line: 856, column: 15)
!8516 = !DILocation(line: 857, column: 25, scope: !8515)
!8517 = !DILocation(line: 857, column: 6, scope: !8515)
!8518 = !DILocation(line: 858, column: 10, scope: !8519)
!8519 = distinct !DILexicalBlock(scope: !8515, file: !3, line: 858, column: 10)
!8520 = !DILocation(line: 858, column: 24, scope: !8519)
!8521 = !DILocation(line: 858, column: 10, scope: !8515)
!8522 = !DILocation(line: 859, column: 23, scope: !8523)
!8523 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 858, column: 33)
!8524 = !DILocation(line: 859, column: 21, scope: !8523)
!8525 = !DILocation(line: 860, column: 6, scope: !8523)
!8526 = !DILocation(line: 861, column: 5, scope: !8515)
!8527 = !DILocation(line: 862, column: 4, scope: !8505)
!8528 = !DILocation(line: 863, column: 13, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8493, file: !3, line: 863, column: 13)
!8530 = !DILocation(line: 863, column: 18, scope: !8529)
!8531 = !DILocation(line: 863, column: 29, scope: !8529)
!8532 = !DILocation(line: 863, column: 26, scope: !8529)
!8533 = !DILocation(line: 863, column: 13, scope: !8493)
!8534 = !DILocation(line: 865, column: 4, scope: !8535)
!8535 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 863, column: 39)
!8536 = !DILocation(line: 866, column: 13, scope: !8537)
!8537 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 866, column: 13)
!8538 = !DILocation(line: 866, column: 18, scope: !8537)
!8539 = !DILocation(line: 866, column: 31, scope: !8537)
!8540 = !DILocation(line: 866, column: 28, scope: !8537)
!8541 = !DILocation(line: 866, column: 13, scope: !8529)
!8542 = !DILocation(line: 868, column: 17, scope: !8543)
!8543 = distinct !DILexicalBlock(scope: !8537, file: !3, line: 866, column: 41)
!8544 = !DILocation(line: 868, column: 24, scope: !8543)
!8545 = !DILocation(line: 868, column: 5, scope: !8543)
!8546 = !DILocation(line: 869, column: 17, scope: !8543)
!8547 = !DILocation(line: 869, column: 24, scope: !8543)
!8548 = !DILocation(line: 869, column: 5, scope: !8543)
!8549 = !DILocation(line: 871, column: 9, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8543, file: !3, line: 871, column: 9)
!8551 = !DILocation(line: 871, column: 23, scope: !8550)
!8552 = !DILocation(line: 871, column: 9, scope: !8543)
!8553 = !DILocation(line: 872, column: 22, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8550, file: !3, line: 871, column: 32)
!8555 = !DILocation(line: 872, column: 20, scope: !8554)
!8556 = !DILocation(line: 873, column: 5, scope: !8554)
!8557 = !DILocation(line: 874, column: 4, scope: !8543)
!8558 = !DILocation(line: 875, column: 3, scope: !8494)
!8559 = !DILocation(line: 876, column: 9, scope: !8481)
!8560 = !DILocation(line: 876, column: 7, scope: !8481)
!8561 = distinct !{!8561, !8473, !8562}
!8562 = !DILocation(line: 877, column: 2, scope: !8450)
!8563 = !DILocation(line: 879, column: 10, scope: !8450)
!8564 = !DILocation(line: 879, column: 24, scope: !8450)
!8565 = !DILocation(line: 879, column: 9, scope: !8450)
!8566 = !DILocation(line: 879, column: 2, scope: !8450)
!8567 = distinct !DISubprogram(name: "cut_seq_hard", scope: !3, file: !3, line: 647, type: !8454, scopeLine: 648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8568 = !DILocalVariable(name: "scene", arg: 1, scope: !8567, file: !3, line: 647, type: !1540)
!8569 = !DILocation(line: 647, column: 38, scope: !8567)
!8570 = !DILocalVariable(name: "seq", arg: 2, scope: !8567, file: !3, line: 647, type: !269)
!8571 = !DILocation(line: 647, column: 55, scope: !8567)
!8572 = !DILocalVariable(name: "cutframe", arg: 3, scope: !8567, file: !3, line: 647, type: !15)
!8573 = !DILocation(line: 647, column: 64, scope: !8567)
!8574 = !DILocalVariable(name: "ts", scope: !8567, file: !3, line: 649, type: !253)
!8575 = !DILocation(line: 649, column: 11, scope: !8567)
!8576 = !DILocalVariable(name: "seqn", scope: !8567, file: !3, line: 650, type: !269)
!8577 = !DILocation(line: 650, column: 12, scope: !8567)
!8578 = !DILocalVariable(name: "skip_dup", scope: !8567, file: !3, line: 651, type: !605)
!8579 = !DILocation(line: 651, column: 7, scope: !8567)
!8580 = !DILocation(line: 654, column: 13, scope: !8567)
!8581 = !DILocation(line: 654, column: 18, scope: !8567)
!8582 = !DILocation(line: 654, column: 5, scope: !8567)
!8583 = !DILocation(line: 654, column: 11, scope: !8567)
!8584 = !DILocation(line: 655, column: 15, scope: !8567)
!8585 = !DILocation(line: 655, column: 20, scope: !8567)
!8586 = !DILocation(line: 655, column: 5, scope: !8567)
!8587 = !DILocation(line: 655, column: 13, scope: !8567)
!8588 = !DILocation(line: 656, column: 18, scope: !8567)
!8589 = !DILocation(line: 656, column: 23, scope: !8567)
!8590 = !DILocation(line: 656, column: 5, scope: !8567)
!8591 = !DILocation(line: 656, column: 16, scope: !8567)
!8592 = !DILocation(line: 657, column: 16, scope: !8567)
!8593 = !DILocation(line: 657, column: 21, scope: !8567)
!8594 = !DILocation(line: 657, column: 5, scope: !8567)
!8595 = !DILocation(line: 657, column: 14, scope: !8567)
!8596 = !DILocation(line: 658, column: 17, scope: !8567)
!8597 = !DILocation(line: 658, column: 22, scope: !8567)
!8598 = !DILocation(line: 658, column: 5, scope: !8567)
!8599 = !DILocation(line: 658, column: 15, scope: !8567)
!8600 = !DILocation(line: 659, column: 15, scope: !8567)
!8601 = !DILocation(line: 659, column: 20, scope: !8567)
!8602 = !DILocation(line: 659, column: 5, scope: !8567)
!8603 = !DILocation(line: 659, column: 13, scope: !8567)
!8604 = !DILocation(line: 660, column: 16, scope: !8567)
!8605 = !DILocation(line: 660, column: 21, scope: !8567)
!8606 = !DILocation(line: 660, column: 5, scope: !8567)
!8607 = !DILocation(line: 660, column: 14, scope: !8567)
!8608 = !DILocation(line: 661, column: 14, scope: !8567)
!8609 = !DILocation(line: 661, column: 19, scope: !8567)
!8610 = !DILocation(line: 661, column: 5, scope: !8567)
!8611 = !DILocation(line: 661, column: 12, scope: !8567)
!8612 = !DILocation(line: 662, column: 21, scope: !8567)
!8613 = !DILocation(line: 662, column: 26, scope: !8567)
!8614 = !DILocation(line: 662, column: 5, scope: !8567)
!8615 = !DILocation(line: 662, column: 19, scope: !8567)
!8616 = !DILocation(line: 663, column: 19, scope: !8567)
!8617 = !DILocation(line: 663, column: 24, scope: !8567)
!8618 = !DILocation(line: 663, column: 5, scope: !8567)
!8619 = !DILocation(line: 663, column: 17, scope: !8567)
!8620 = !DILocation(line: 664, column: 11, scope: !8567)
!8621 = !DILocation(line: 664, column: 16, scope: !8567)
!8622 = !DILocation(line: 664, column: 5, scope: !8567)
!8623 = !DILocation(line: 664, column: 9, scope: !8567)
!8624 = !DILocation(line: 669, column: 7, scope: !8625)
!8625 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 669, column: 6)
!8626 = !DILocation(line: 669, column: 12, scope: !8625)
!8627 = !DILocation(line: 669, column: 6, scope: !8625)
!8628 = !DILocation(line: 669, column: 24, scope: !8625)
!8629 = !DILocation(line: 669, column: 28, scope: !8625)
!8630 = !DILocation(line: 669, column: 39, scope: !8625)
!8631 = !DILocation(line: 669, column: 44, scope: !8625)
!8632 = !DILocation(line: 669, column: 37, scope: !8625)
!8633 = !DILocation(line: 669, column: 6, scope: !8567)
!8634 = !DILocation(line: 671, column: 7, scope: !8635)
!8635 = distinct !DILexicalBlock(scope: !8636, file: !3, line: 671, column: 7)
!8636 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 669, column: 52)
!8637 = !DILocation(line: 671, column: 12, scope: !8635)
!8638 = !DILocation(line: 671, column: 17, scope: !8635)
!8639 = !DILocation(line: 671, column: 7, scope: !8636)
!8640 = !DILocation(line: 672, column: 13, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8635, file: !3, line: 671, column: 35)
!8642 = !DILocation(line: 673, column: 22, scope: !8641)
!8643 = !DILocation(line: 673, column: 27, scope: !8641)
!8644 = !DILocation(line: 673, column: 35, scope: !8641)
!8645 = !DILocation(line: 673, column: 33, scope: !8641)
!8646 = !DILocation(line: 673, column: 4, scope: !8641)
!8647 = !DILocation(line: 673, column: 9, scope: !8641)
!8648 = !DILocation(line: 673, column: 20, scope: !8641)
!8649 = !DILocation(line: 674, column: 3, scope: !8641)
!8650 = !DILocation(line: 676, column: 17, scope: !8651)
!8651 = distinct !DILexicalBlock(scope: !8635, file: !3, line: 675, column: 8)
!8652 = !DILocation(line: 676, column: 26, scope: !8651)
!8653 = !DILocation(line: 676, column: 4, scope: !8651)
!8654 = !DILocation(line: 676, column: 9, scope: !8651)
!8655 = !DILocation(line: 676, column: 15, scope: !8651)
!8656 = !DILocation(line: 677, column: 22, scope: !8651)
!8657 = !DILocation(line: 677, column: 33, scope: !8651)
!8658 = !DILocation(line: 677, column: 38, scope: !8651)
!8659 = !DILocation(line: 677, column: 31, scope: !8651)
!8660 = !DILocation(line: 677, column: 48, scope: !8651)
!8661 = !DILocation(line: 677, column: 4, scope: !8651)
!8662 = !DILocation(line: 677, column: 9, scope: !8651)
!8663 = !DILocation(line: 677, column: 20, scope: !8651)
!8664 = !DILocation(line: 678, column: 24, scope: !8651)
!8665 = !DILocation(line: 678, column: 29, scope: !8651)
!8666 = !DILocation(line: 678, column: 33, scope: !8651)
!8667 = !DILocation(line: 678, column: 4, scope: !8651)
!8668 = !DILocation(line: 678, column: 9, scope: !8651)
!8669 = !DILocation(line: 678, column: 21, scope: !8651)
!8670 = !DILocation(line: 679, column: 4, scope: !8651)
!8671 = !DILocation(line: 679, column: 9, scope: !8651)
!8672 = !DILocation(line: 679, column: 18, scope: !8651)
!8673 = !DILocation(line: 681, column: 2, scope: !8636)
!8674 = !DILocation(line: 683, column: 12, scope: !8675)
!8675 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 683, column: 11)
!8676 = !DILocation(line: 683, column: 24, scope: !8675)
!8677 = !DILocation(line: 683, column: 29, scope: !8675)
!8678 = !DILocation(line: 683, column: 21, scope: !8675)
!8679 = !DILocation(line: 683, column: 36, scope: !8675)
!8680 = !DILocation(line: 683, column: 40, scope: !8675)
!8681 = !DILocation(line: 683, column: 53, scope: !8675)
!8682 = !DILocation(line: 683, column: 58, scope: !8675)
!8683 = !DILocation(line: 683, column: 66, scope: !8675)
!8684 = !DILocation(line: 683, column: 71, scope: !8675)
!8685 = !DILocation(line: 683, column: 64, scope: !8675)
!8686 = !DILocation(line: 683, column: 49, scope: !8675)
!8687 = !DILocation(line: 683, column: 11, scope: !8625)
!8688 = !DILocation(line: 684, column: 3, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8675, file: !3, line: 683, column: 78)
!8690 = !DILocation(line: 684, column: 8, scope: !8689)
!8691 = !DILocation(line: 684, column: 15, scope: !8689)
!8692 = !DILocation(line: 685, column: 3, scope: !8689)
!8693 = !DILocation(line: 685, column: 8, scope: !8689)
!8694 = !DILocation(line: 685, column: 17, scope: !8689)
!8695 = !DILocation(line: 686, column: 24, scope: !8689)
!8696 = !DILocation(line: 686, column: 29, scope: !8689)
!8697 = !DILocation(line: 686, column: 37, scope: !8689)
!8698 = !DILocation(line: 686, column: 42, scope: !8689)
!8699 = !DILocation(line: 686, column: 35, scope: !8689)
!8700 = !DILocation(line: 686, column: 49, scope: !8689)
!8701 = !DILocation(line: 686, column: 47, scope: !8689)
!8702 = !DILocation(line: 686, column: 3, scope: !8689)
!8703 = !DILocation(line: 686, column: 8, scope: !8689)
!8704 = !DILocation(line: 686, column: 20, scope: !8689)
!8705 = !DILocation(line: 687, column: 2, scope: !8689)
!8706 = !DILocation(line: 689, column: 13, scope: !8707)
!8707 = distinct !DILexicalBlock(scope: !8675, file: !3, line: 689, column: 11)
!8708 = !DILocation(line: 689, column: 18, scope: !8707)
!8709 = !DILocation(line: 689, column: 26, scope: !8707)
!8710 = !DILocation(line: 689, column: 31, scope: !8707)
!8711 = !DILocation(line: 689, column: 24, scope: !8707)
!8712 = !DILocation(line: 689, column: 38, scope: !8707)
!8713 = !DILocation(line: 689, column: 36, scope: !8707)
!8714 = !DILocation(line: 689, column: 48, scope: !8707)
!8715 = !DILocation(line: 689, column: 52, scope: !8707)
!8716 = !DILocation(line: 689, column: 57, scope: !8707)
!8717 = !DILocation(line: 689, column: 51, scope: !8707)
!8718 = !DILocation(line: 689, column: 11, scope: !8675)
!8719 = !DILocation(line: 690, column: 20, scope: !8720)
!8720 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 689, column: 68)
!8721 = !DILocation(line: 690, column: 25, scope: !8720)
!8722 = !DILocation(line: 690, column: 35, scope: !8720)
!8723 = !DILocation(line: 690, column: 33, scope: !8720)
!8724 = !DILocation(line: 690, column: 3, scope: !8720)
!8725 = !DILocation(line: 690, column: 8, scope: !8720)
!8726 = !DILocation(line: 690, column: 17, scope: !8720)
!8727 = !DILocation(line: 692, column: 7, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8720, file: !3, line: 692, column: 7)
!8729 = !DILocation(line: 692, column: 12, scope: !8728)
!8730 = !DILocation(line: 692, column: 17, scope: !8728)
!8731 = !DILocation(line: 692, column: 7, scope: !8720)
!8732 = !DILocation(line: 693, column: 13, scope: !8733)
!8733 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 692, column: 35)
!8734 = !DILocation(line: 694, column: 3, scope: !8733)
!8735 = !DILocation(line: 695, column: 2, scope: !8720)
!8736 = !DILocation(line: 697, column: 31, scope: !8567)
!8737 = !DILocation(line: 697, column: 38, scope: !8567)
!8738 = !DILocation(line: 697, column: 2, scope: !8567)
!8739 = !DILocation(line: 698, column: 20, scope: !8567)
!8740 = !DILocation(line: 698, column: 27, scope: !8567)
!8741 = !DILocation(line: 698, column: 2, scope: !8567)
!8742 = !DILocation(line: 700, column: 7, scope: !8743)
!8743 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 700, column: 6)
!8744 = !DILocation(line: 700, column: 6, scope: !8567)
!8745 = !DILocation(line: 702, column: 39, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !8743, file: !3, line: 700, column: 17)
!8747 = !DILocation(line: 702, column: 52, scope: !8746)
!8748 = !DILocation(line: 702, column: 10, scope: !8746)
!8749 = !DILocation(line: 702, column: 8, scope: !8746)
!8750 = !DILocation(line: 703, column: 2, scope: !8746)
!8751 = !DILocation(line: 705, column: 6, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 705, column: 6)
!8753 = !DILocation(line: 705, column: 6, scope: !8567)
!8754 = !DILocation(line: 706, column: 3, scope: !8755)
!8755 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 705, column: 12)
!8756 = !DILocation(line: 706, column: 9, scope: !8755)
!8757 = !DILocation(line: 706, column: 14, scope: !8755)
!8758 = !DILocation(line: 710, column: 8, scope: !8759)
!8759 = distinct !DILexicalBlock(scope: !8755, file: !3, line: 710, column: 7)
!8760 = !DILocation(line: 710, column: 14, scope: !8759)
!8761 = !DILocation(line: 710, column: 7, scope: !8759)
!8762 = !DILocation(line: 710, column: 26, scope: !8759)
!8763 = !DILocation(line: 710, column: 30, scope: !8759)
!8764 = !DILocation(line: 710, column: 42, scope: !8759)
!8765 = !DILocation(line: 710, column: 48, scope: !8759)
!8766 = !DILocation(line: 710, column: 54, scope: !8759)
!8767 = !DILocation(line: 710, column: 39, scope: !8759)
!8768 = !DILocation(line: 710, column: 7, scope: !8755)
!8769 = !DILocation(line: 711, column: 21, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8759, file: !3, line: 710, column: 60)
!8771 = !DILocation(line: 711, column: 4, scope: !8770)
!8772 = !DILocation(line: 711, column: 10, scope: !8770)
!8773 = !DILocation(line: 711, column: 16, scope: !8770)
!8774 = !DILocation(line: 712, column: 26, scope: !8770)
!8775 = !DILocation(line: 712, column: 34, scope: !8770)
!8776 = !DILocation(line: 712, column: 32, scope: !8770)
!8777 = !DILocation(line: 712, column: 4, scope: !8770)
!8778 = !DILocation(line: 712, column: 10, scope: !8770)
!8779 = !DILocation(line: 712, column: 21, scope: !8770)
!8780 = !DILocation(line: 713, column: 27, scope: !8770)
!8781 = !DILocation(line: 713, column: 4, scope: !8770)
!8782 = !DILocation(line: 713, column: 10, scope: !8770)
!8783 = !DILocation(line: 713, column: 22, scope: !8770)
!8784 = !DILocation(line: 714, column: 24, scope: !8770)
!8785 = !DILocation(line: 714, column: 4, scope: !8770)
!8786 = !DILocation(line: 714, column: 10, scope: !8770)
!8787 = !DILocation(line: 714, column: 19, scope: !8770)
!8788 = !DILocation(line: 715, column: 3, scope: !8770)
!8789 = !DILocation(line: 718, column: 13, scope: !8790)
!8790 = distinct !DILexicalBlock(scope: !8759, file: !3, line: 718, column: 12)
!8791 = !DILocation(line: 718, column: 25, scope: !8790)
!8792 = !DILocation(line: 718, column: 31, scope: !8790)
!8793 = !DILocation(line: 718, column: 22, scope: !8790)
!8794 = !DILocation(line: 718, column: 38, scope: !8790)
!8795 = !DILocation(line: 718, column: 42, scope: !8790)
!8796 = !DILocation(line: 718, column: 55, scope: !8790)
!8797 = !DILocation(line: 718, column: 61, scope: !8790)
!8798 = !DILocation(line: 718, column: 69, scope: !8790)
!8799 = !DILocation(line: 718, column: 75, scope: !8790)
!8800 = !DILocation(line: 718, column: 67, scope: !8790)
!8801 = !DILocation(line: 718, column: 51, scope: !8790)
!8802 = !DILocation(line: 718, column: 12, scope: !8759)
!8803 = !DILocation(line: 719, column: 18, scope: !8804)
!8804 = distinct !DILexicalBlock(scope: !8790, file: !3, line: 718, column: 82)
!8805 = !DILocation(line: 719, column: 4, scope: !8804)
!8806 = !DILocation(line: 719, column: 10, scope: !8804)
!8807 = !DILocation(line: 719, column: 16, scope: !8804)
!8808 = !DILocation(line: 720, column: 4, scope: !8804)
!8809 = !DILocation(line: 720, column: 10, scope: !8804)
!8810 = !DILocation(line: 720, column: 21, scope: !8804)
!8811 = !DILocation(line: 721, column: 4, scope: !8804)
!8812 = !DILocation(line: 721, column: 10, scope: !8804)
!8813 = !DILocation(line: 721, column: 19, scope: !8804)
!8814 = !DILocation(line: 722, column: 22, scope: !8804)
!8815 = !DILocation(line: 722, column: 4, scope: !8804)
!8816 = !DILocation(line: 722, column: 10, scope: !8804)
!8817 = !DILocation(line: 722, column: 17, scope: !8804)
!8818 = !DILocation(line: 723, column: 27, scope: !8804)
!8819 = !DILocation(line: 723, column: 41, scope: !8804)
!8820 = !DILocation(line: 723, column: 36, scope: !8804)
!8821 = !DILocation(line: 723, column: 4, scope: !8804)
!8822 = !DILocation(line: 723, column: 10, scope: !8804)
!8823 = !DILocation(line: 723, column: 24, scope: !8804)
!8824 = !DILocation(line: 724, column: 27, scope: !8804)
!8825 = !DILocation(line: 724, column: 4, scope: !8804)
!8826 = !DILocation(line: 724, column: 10, scope: !8804)
!8827 = !DILocation(line: 724, column: 22, scope: !8804)
!8828 = !DILocation(line: 725, column: 24, scope: !8804)
!8829 = !DILocation(line: 725, column: 4, scope: !8804)
!8830 = !DILocation(line: 725, column: 10, scope: !8804)
!8831 = !DILocation(line: 725, column: 19, scope: !8804)
!8832 = !DILocation(line: 726, column: 3, scope: !8804)
!8833 = !DILocation(line: 729, column: 14, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8790, file: !3, line: 729, column: 12)
!8835 = !DILocation(line: 729, column: 20, scope: !8834)
!8836 = !DILocation(line: 729, column: 28, scope: !8834)
!8837 = !DILocation(line: 729, column: 34, scope: !8834)
!8838 = !DILocation(line: 729, column: 26, scope: !8834)
!8839 = !DILocation(line: 729, column: 41, scope: !8834)
!8840 = !DILocation(line: 729, column: 39, scope: !8834)
!8841 = !DILocation(line: 729, column: 51, scope: !8834)
!8842 = !DILocation(line: 729, column: 55, scope: !8834)
!8843 = !DILocation(line: 729, column: 61, scope: !8834)
!8844 = !DILocation(line: 729, column: 54, scope: !8834)
!8845 = !DILocation(line: 729, column: 12, scope: !8790)
!8846 = !DILocation(line: 730, column: 18, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !8834, file: !3, line: 729, column: 72)
!8848 = !DILocation(line: 730, column: 4, scope: !8847)
!8849 = !DILocation(line: 730, column: 10, scope: !8847)
!8850 = !DILocation(line: 730, column: 16, scope: !8847)
!8851 = !DILocation(line: 731, column: 4, scope: !8847)
!8852 = !DILocation(line: 731, column: 10, scope: !8847)
!8853 = !DILocation(line: 731, column: 19, scope: !8847)
!8854 = !DILocation(line: 732, column: 30, scope: !8847)
!8855 = !DILocation(line: 732, column: 34, scope: !8847)
!8856 = !DILocation(line: 732, column: 4, scope: !8847)
!8857 = !DILocation(line: 732, column: 10, scope: !8847)
!8858 = !DILocation(line: 732, column: 24, scope: !8847)
!8859 = !DILocation(line: 733, column: 24, scope: !8847)
!8860 = !DILocation(line: 733, column: 34, scope: !8847)
!8861 = !DILocation(line: 733, column: 32, scope: !8847)
!8862 = !DILocation(line: 733, column: 43, scope: !8847)
!8863 = !DILocation(line: 733, column: 4, scope: !8847)
!8864 = !DILocation(line: 733, column: 10, scope: !8847)
!8865 = !DILocation(line: 733, column: 19, scope: !8847)
!8866 = !DILocation(line: 734, column: 4, scope: !8847)
!8867 = !DILocation(line: 734, column: 10, scope: !8847)
!8868 = !DILocation(line: 734, column: 21, scope: !8847)
!8869 = !DILocation(line: 735, column: 3, scope: !8847)
!8870 = !DILocation(line: 737, column: 32, scope: !8755)
!8871 = !DILocation(line: 737, column: 39, scope: !8755)
!8872 = !DILocation(line: 737, column: 3, scope: !8755)
!8873 = !DILocation(line: 738, column: 21, scope: !8755)
!8874 = !DILocation(line: 738, column: 28, scope: !8755)
!8875 = !DILocation(line: 738, column: 3, scope: !8755)
!8876 = !DILocation(line: 739, column: 2, scope: !8755)
!8877 = !DILocation(line: 740, column: 9, scope: !8567)
!8878 = !DILocation(line: 740, column: 2, scope: !8567)
!8879 = distinct !DISubprogram(name: "cut_seq_soft", scope: !3, file: !3, line: 743, type: !8454, scopeLine: 744, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!8880 = !DILocalVariable(name: "scene", arg: 1, scope: !8879, file: !3, line: 743, type: !1540)
!8881 = !DILocation(line: 743, column: 38, scope: !8879)
!8882 = !DILocalVariable(name: "seq", arg: 2, scope: !8879, file: !3, line: 743, type: !269)
!8883 = !DILocation(line: 743, column: 55, scope: !8879)
!8884 = !DILocalVariable(name: "cutframe", arg: 3, scope: !8879, file: !3, line: 743, type: !15)
!8885 = !DILocation(line: 743, column: 64, scope: !8879)
!8886 = !DILocalVariable(name: "ts", scope: !8879, file: !3, line: 745, type: !253)
!8887 = !DILocation(line: 745, column: 11, scope: !8879)
!8888 = !DILocalVariable(name: "seqn", scope: !8879, file: !3, line: 746, type: !269)
!8889 = !DILocation(line: 746, column: 12, scope: !8879)
!8890 = !DILocalVariable(name: "skip_dup", scope: !8879, file: !3, line: 747, type: !605)
!8891 = !DILocation(line: 747, column: 7, scope: !8879)
!8892 = !DILocation(line: 750, column: 13, scope: !8879)
!8893 = !DILocation(line: 750, column: 18, scope: !8879)
!8894 = !DILocation(line: 750, column: 5, scope: !8879)
!8895 = !DILocation(line: 750, column: 11, scope: !8879)
!8896 = !DILocation(line: 751, column: 15, scope: !8879)
!8897 = !DILocation(line: 751, column: 20, scope: !8879)
!8898 = !DILocation(line: 751, column: 5, scope: !8879)
!8899 = !DILocation(line: 751, column: 13, scope: !8879)
!8900 = !DILocation(line: 752, column: 18, scope: !8879)
!8901 = !DILocation(line: 752, column: 23, scope: !8879)
!8902 = !DILocation(line: 752, column: 5, scope: !8879)
!8903 = !DILocation(line: 752, column: 16, scope: !8879)
!8904 = !DILocation(line: 753, column: 16, scope: !8879)
!8905 = !DILocation(line: 753, column: 21, scope: !8879)
!8906 = !DILocation(line: 753, column: 5, scope: !8879)
!8907 = !DILocation(line: 753, column: 14, scope: !8879)
!8908 = !DILocation(line: 754, column: 17, scope: !8879)
!8909 = !DILocation(line: 754, column: 22, scope: !8879)
!8910 = !DILocation(line: 754, column: 5, scope: !8879)
!8911 = !DILocation(line: 754, column: 15, scope: !8879)
!8912 = !DILocation(line: 755, column: 15, scope: !8879)
!8913 = !DILocation(line: 755, column: 20, scope: !8879)
!8914 = !DILocation(line: 755, column: 5, scope: !8879)
!8915 = !DILocation(line: 755, column: 13, scope: !8879)
!8916 = !DILocation(line: 756, column: 16, scope: !8879)
!8917 = !DILocation(line: 756, column: 21, scope: !8879)
!8918 = !DILocation(line: 756, column: 5, scope: !8879)
!8919 = !DILocation(line: 756, column: 14, scope: !8879)
!8920 = !DILocation(line: 757, column: 14, scope: !8879)
!8921 = !DILocation(line: 757, column: 19, scope: !8879)
!8922 = !DILocation(line: 757, column: 5, scope: !8879)
!8923 = !DILocation(line: 757, column: 12, scope: !8879)
!8924 = !DILocation(line: 758, column: 21, scope: !8879)
!8925 = !DILocation(line: 758, column: 26, scope: !8879)
!8926 = !DILocation(line: 758, column: 5, scope: !8879)
!8927 = !DILocation(line: 758, column: 19, scope: !8879)
!8928 = !DILocation(line: 759, column: 19, scope: !8879)
!8929 = !DILocation(line: 759, column: 24, scope: !8879)
!8930 = !DILocation(line: 759, column: 5, scope: !8879)
!8931 = !DILocation(line: 759, column: 17, scope: !8879)
!8932 = !DILocation(line: 760, column: 11, scope: !8879)
!8933 = !DILocation(line: 760, column: 16, scope: !8879)
!8934 = !DILocation(line: 760, column: 5, scope: !8879)
!8935 = !DILocation(line: 760, column: 9, scope: !8879)
!8936 = !DILocation(line: 765, column: 7, scope: !8937)
!8937 = distinct !DILexicalBlock(scope: !8879, file: !3, line: 765, column: 6)
!8938 = !DILocation(line: 765, column: 12, scope: !8937)
!8939 = !DILocation(line: 765, column: 6, scope: !8937)
!8940 = !DILocation(line: 765, column: 24, scope: !8937)
!8941 = !DILocation(line: 765, column: 28, scope: !8937)
!8942 = !DILocation(line: 765, column: 39, scope: !8937)
!8943 = !DILocation(line: 765, column: 44, scope: !8937)
!8944 = !DILocation(line: 765, column: 37, scope: !8937)
!8945 = !DILocation(line: 765, column: 6, scope: !8879)
!8946 = !DILocation(line: 767, column: 7, scope: !8947)
!8947 = distinct !DILexicalBlock(scope: !8948, file: !3, line: 767, column: 7)
!8948 = distinct !DILexicalBlock(scope: !8937, file: !3, line: 765, column: 52)
!8949 = !DILocation(line: 767, column: 12, scope: !8947)
!8950 = !DILocation(line: 767, column: 17, scope: !8947)
!8951 = !DILocation(line: 767, column: 7, scope: !8948)
!8952 = !DILocation(line: 768, column: 13, scope: !8953)
!8953 = distinct !DILexicalBlock(scope: !8947, file: !3, line: 767, column: 35)
!8954 = !DILocation(line: 769, column: 22, scope: !8953)
!8955 = !DILocation(line: 769, column: 27, scope: !8953)
!8956 = !DILocation(line: 769, column: 35, scope: !8953)
!8957 = !DILocation(line: 769, column: 33, scope: !8953)
!8958 = !DILocation(line: 769, column: 4, scope: !8953)
!8959 = !DILocation(line: 769, column: 9, scope: !8953)
!8960 = !DILocation(line: 769, column: 20, scope: !8953)
!8961 = !DILocation(line: 770, column: 3, scope: !8953)
!8962 = !DILocation(line: 772, column: 17, scope: !8963)
!8963 = distinct !DILexicalBlock(scope: !8947, file: !3, line: 771, column: 8)
!8964 = !DILocation(line: 772, column: 26, scope: !8963)
!8965 = !DILocation(line: 772, column: 4, scope: !8963)
!8966 = !DILocation(line: 772, column: 9, scope: !8963)
!8967 = !DILocation(line: 772, column: 15, scope: !8963)
!8968 = !DILocation(line: 773, column: 22, scope: !8963)
!8969 = !DILocation(line: 773, column: 33, scope: !8963)
!8970 = !DILocation(line: 773, column: 38, scope: !8963)
!8971 = !DILocation(line: 773, column: 31, scope: !8963)
!8972 = !DILocation(line: 773, column: 48, scope: !8963)
!8973 = !DILocation(line: 773, column: 4, scope: !8963)
!8974 = !DILocation(line: 773, column: 9, scope: !8963)
!8975 = !DILocation(line: 773, column: 20, scope: !8963)
!8976 = !DILocation(line: 774, column: 18, scope: !8963)
!8977 = !DILocation(line: 774, column: 23, scope: !8963)
!8978 = !DILocation(line: 774, column: 27, scope: !8963)
!8979 = !DILocation(line: 774, column: 4, scope: !8963)
!8980 = !DILocation(line: 774, column: 9, scope: !8963)
!8981 = !DILocation(line: 774, column: 16, scope: !8963)
!8982 = !DILocation(line: 775, column: 4, scope: !8963)
!8983 = !DILocation(line: 775, column: 9, scope: !8963)
!8984 = !DILocation(line: 775, column: 18, scope: !8963)
!8985 = !DILocation(line: 777, column: 2, scope: !8948)
!8986 = !DILocation(line: 779, column: 12, scope: !8987)
!8987 = distinct !DILexicalBlock(scope: !8937, file: !3, line: 779, column: 11)
!8988 = !DILocation(line: 779, column: 24, scope: !8987)
!8989 = !DILocation(line: 779, column: 29, scope: !8987)
!8990 = !DILocation(line: 779, column: 21, scope: !8987)
!8991 = !DILocation(line: 779, column: 36, scope: !8987)
!8992 = !DILocation(line: 779, column: 40, scope: !8987)
!8993 = !DILocation(line: 779, column: 53, scope: !8987)
!8994 = !DILocation(line: 779, column: 58, scope: !8987)
!8995 = !DILocation(line: 779, column: 66, scope: !8987)
!8996 = !DILocation(line: 779, column: 71, scope: !8987)
!8997 = !DILocation(line: 779, column: 64, scope: !8987)
!8998 = !DILocation(line: 779, column: 49, scope: !8987)
!8999 = !DILocation(line: 779, column: 11, scope: !8937)
!9000 = !DILocation(line: 780, column: 18, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8987, file: !3, line: 779, column: 78)
!9002 = !DILocation(line: 780, column: 23, scope: !9001)
!9003 = !DILocation(line: 780, column: 31, scope: !9001)
!9004 = !DILocation(line: 780, column: 36, scope: !9001)
!9005 = !DILocation(line: 780, column: 29, scope: !9001)
!9006 = !DILocation(line: 780, column: 43, scope: !9001)
!9007 = !DILocation(line: 780, column: 41, scope: !9001)
!9008 = !DILocation(line: 780, column: 3, scope: !9001)
!9009 = !DILocation(line: 780, column: 8, scope: !9001)
!9010 = !DILocation(line: 780, column: 15, scope: !9001)
!9011 = !DILocation(line: 781, column: 2, scope: !9001)
!9012 = !DILocation(line: 783, column: 13, scope: !9013)
!9013 = distinct !DILexicalBlock(scope: !8987, file: !3, line: 783, column: 11)
!9014 = !DILocation(line: 783, column: 18, scope: !9013)
!9015 = !DILocation(line: 783, column: 26, scope: !9013)
!9016 = !DILocation(line: 783, column: 31, scope: !9013)
!9017 = !DILocation(line: 783, column: 24, scope: !9013)
!9018 = !DILocation(line: 783, column: 38, scope: !9013)
!9019 = !DILocation(line: 783, column: 36, scope: !9013)
!9020 = !DILocation(line: 783, column: 48, scope: !9013)
!9021 = !DILocation(line: 783, column: 52, scope: !9013)
!9022 = !DILocation(line: 783, column: 57, scope: !9013)
!9023 = !DILocation(line: 783, column: 51, scope: !9013)
!9024 = !DILocation(line: 783, column: 11, scope: !8987)
!9025 = !DILocation(line: 784, column: 20, scope: !9026)
!9026 = distinct !DILexicalBlock(scope: !9013, file: !3, line: 783, column: 68)
!9027 = !DILocation(line: 784, column: 25, scope: !9026)
!9028 = !DILocation(line: 784, column: 35, scope: !9026)
!9029 = !DILocation(line: 784, column: 33, scope: !9026)
!9030 = !DILocation(line: 784, column: 3, scope: !9026)
!9031 = !DILocation(line: 784, column: 8, scope: !9026)
!9032 = !DILocation(line: 784, column: 17, scope: !9026)
!9033 = !DILocation(line: 786, column: 7, scope: !9034)
!9034 = distinct !DILexicalBlock(scope: !9026, file: !3, line: 786, column: 7)
!9035 = !DILocation(line: 786, column: 12, scope: !9034)
!9036 = !DILocation(line: 786, column: 17, scope: !9034)
!9037 = !DILocation(line: 786, column: 7, scope: !9026)
!9038 = !DILocation(line: 787, column: 13, scope: !9039)
!9039 = distinct !DILexicalBlock(scope: !9034, file: !3, line: 786, column: 35)
!9040 = !DILocation(line: 788, column: 3, scope: !9039)
!9041 = !DILocation(line: 789, column: 2, scope: !9026)
!9042 = !DILocation(line: 791, column: 20, scope: !8879)
!9043 = !DILocation(line: 791, column: 27, scope: !8879)
!9044 = !DILocation(line: 791, column: 2, scope: !8879)
!9045 = !DILocation(line: 793, column: 7, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !8879, file: !3, line: 793, column: 6)
!9047 = !DILocation(line: 793, column: 6, scope: !8879)
!9048 = !DILocation(line: 795, column: 39, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9046, file: !3, line: 793, column: 17)
!9050 = !DILocation(line: 795, column: 52, scope: !9049)
!9051 = !DILocation(line: 795, column: 10, scope: !9049)
!9052 = !DILocation(line: 795, column: 8, scope: !9049)
!9053 = !DILocation(line: 796, column: 2, scope: !9049)
!9054 = !DILocation(line: 798, column: 6, scope: !9055)
!9055 = distinct !DILexicalBlock(scope: !8879, file: !3, line: 798, column: 6)
!9056 = !DILocation(line: 798, column: 6, scope: !8879)
!9057 = !DILocation(line: 799, column: 3, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9055, file: !3, line: 798, column: 12)
!9059 = !DILocation(line: 799, column: 9, scope: !9058)
!9060 = !DILocation(line: 799, column: 14, scope: !9058)
!9061 = !DILocation(line: 803, column: 8, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9058, file: !3, line: 803, column: 7)
!9063 = !DILocation(line: 803, column: 14, scope: !9062)
!9064 = !DILocation(line: 803, column: 7, scope: !9062)
!9065 = !DILocation(line: 803, column: 26, scope: !9062)
!9066 = !DILocation(line: 803, column: 30, scope: !9062)
!9067 = !DILocation(line: 803, column: 42, scope: !9062)
!9068 = !DILocation(line: 803, column: 48, scope: !9062)
!9069 = !DILocation(line: 803, column: 54, scope: !9062)
!9070 = !DILocation(line: 803, column: 39, scope: !9062)
!9071 = !DILocation(line: 803, column: 7, scope: !9058)
!9072 = !DILocation(line: 804, column: 21, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 803, column: 60)
!9074 = !DILocation(line: 804, column: 4, scope: !9073)
!9075 = !DILocation(line: 804, column: 10, scope: !9073)
!9076 = !DILocation(line: 804, column: 16, scope: !9073)
!9077 = !DILocation(line: 805, column: 26, scope: !9073)
!9078 = !DILocation(line: 805, column: 34, scope: !9073)
!9079 = !DILocation(line: 805, column: 32, scope: !9073)
!9080 = !DILocation(line: 805, column: 4, scope: !9073)
!9081 = !DILocation(line: 805, column: 10, scope: !9073)
!9082 = !DILocation(line: 805, column: 21, scope: !9073)
!9083 = !DILocation(line: 806, column: 22, scope: !9073)
!9084 = !DILocation(line: 806, column: 4, scope: !9073)
!9085 = !DILocation(line: 806, column: 10, scope: !9073)
!9086 = !DILocation(line: 806, column: 17, scope: !9073)
!9087 = !DILocation(line: 807, column: 24, scope: !9073)
!9088 = !DILocation(line: 807, column: 4, scope: !9073)
!9089 = !DILocation(line: 807, column: 10, scope: !9073)
!9090 = !DILocation(line: 807, column: 19, scope: !9073)
!9091 = !DILocation(line: 808, column: 3, scope: !9073)
!9092 = !DILocation(line: 811, column: 13, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 811, column: 12)
!9094 = !DILocation(line: 811, column: 25, scope: !9093)
!9095 = !DILocation(line: 811, column: 31, scope: !9093)
!9096 = !DILocation(line: 811, column: 22, scope: !9093)
!9097 = !DILocation(line: 811, column: 38, scope: !9093)
!9098 = !DILocation(line: 811, column: 42, scope: !9093)
!9099 = !DILocation(line: 811, column: 55, scope: !9093)
!9100 = !DILocation(line: 811, column: 61, scope: !9093)
!9101 = !DILocation(line: 811, column: 69, scope: !9093)
!9102 = !DILocation(line: 811, column: 75, scope: !9093)
!9103 = !DILocation(line: 811, column: 67, scope: !9093)
!9104 = !DILocation(line: 811, column: 51, scope: !9093)
!9105 = !DILocation(line: 811, column: 12, scope: !9062)
!9106 = !DILocation(line: 812, column: 4, scope: !9107)
!9107 = distinct !DILexicalBlock(scope: !9093, file: !3, line: 811, column: 82)
!9108 = !DILocation(line: 812, column: 10, scope: !9107)
!9109 = !DILocation(line: 812, column: 21, scope: !9107)
!9110 = !DILocation(line: 813, column: 21, scope: !9107)
!9111 = !DILocation(line: 813, column: 35, scope: !9107)
!9112 = !DILocation(line: 813, column: 30, scope: !9107)
!9113 = !DILocation(line: 813, column: 4, scope: !9107)
!9114 = !DILocation(line: 813, column: 10, scope: !9107)
!9115 = !DILocation(line: 813, column: 19, scope: !9107)
!9116 = !DILocation(line: 814, column: 22, scope: !9107)
!9117 = !DILocation(line: 814, column: 4, scope: !9107)
!9118 = !DILocation(line: 814, column: 10, scope: !9107)
!9119 = !DILocation(line: 814, column: 17, scope: !9107)
!9120 = !DILocation(line: 815, column: 24, scope: !9107)
!9121 = !DILocation(line: 815, column: 4, scope: !9107)
!9122 = !DILocation(line: 815, column: 10, scope: !9107)
!9123 = !DILocation(line: 815, column: 19, scope: !9107)
!9124 = !DILocation(line: 816, column: 3, scope: !9107)
!9125 = !DILocation(line: 819, column: 14, scope: !9126)
!9126 = distinct !DILexicalBlock(scope: !9093, file: !3, line: 819, column: 12)
!9127 = !DILocation(line: 819, column: 20, scope: !9126)
!9128 = !DILocation(line: 819, column: 28, scope: !9126)
!9129 = !DILocation(line: 819, column: 34, scope: !9126)
!9130 = !DILocation(line: 819, column: 26, scope: !9126)
!9131 = !DILocation(line: 819, column: 41, scope: !9126)
!9132 = !DILocation(line: 819, column: 39, scope: !9126)
!9133 = !DILocation(line: 819, column: 51, scope: !9126)
!9134 = !DILocation(line: 819, column: 55, scope: !9126)
!9135 = !DILocation(line: 819, column: 61, scope: !9126)
!9136 = !DILocation(line: 819, column: 54, scope: !9126)
!9137 = !DILocation(line: 819, column: 12, scope: !9093)
!9138 = !DILocation(line: 820, column: 18, scope: !9139)
!9139 = distinct !DILexicalBlock(scope: !9126, file: !3, line: 819, column: 72)
!9140 = !DILocation(line: 820, column: 32, scope: !9139)
!9141 = !DILocation(line: 820, column: 27, scope: !9139)
!9142 = !DILocation(line: 820, column: 36, scope: !9139)
!9143 = !DILocation(line: 820, column: 4, scope: !9139)
!9144 = !DILocation(line: 820, column: 10, scope: !9139)
!9145 = !DILocation(line: 820, column: 16, scope: !9139)
!9146 = !DILocation(line: 821, column: 24, scope: !9139)
!9147 = !DILocation(line: 821, column: 28, scope: !9139)
!9148 = !DILocation(line: 821, column: 4, scope: !9139)
!9149 = !DILocation(line: 821, column: 10, scope: !9139)
!9150 = !DILocation(line: 821, column: 19, scope: !9139)
!9151 = !DILocation(line: 822, column: 24, scope: !9139)
!9152 = !DILocation(line: 822, column: 34, scope: !9139)
!9153 = !DILocation(line: 822, column: 32, scope: !9139)
!9154 = !DILocation(line: 822, column: 43, scope: !9139)
!9155 = !DILocation(line: 822, column: 4, scope: !9139)
!9156 = !DILocation(line: 822, column: 10, scope: !9139)
!9157 = !DILocation(line: 822, column: 19, scope: !9139)
!9158 = !DILocation(line: 823, column: 4, scope: !9139)
!9159 = !DILocation(line: 823, column: 10, scope: !9139)
!9160 = !DILocation(line: 823, column: 21, scope: !9139)
!9161 = !DILocation(line: 824, column: 3, scope: !9139)
!9162 = !DILocation(line: 826, column: 21, scope: !9058)
!9163 = !DILocation(line: 826, column: 28, scope: !9058)
!9164 = !DILocation(line: 826, column: 3, scope: !9058)
!9165 = !DILocation(line: 827, column: 2, scope: !9058)
!9166 = !DILocation(line: 828, column: 9, scope: !8879)
!9167 = !DILocation(line: 828, column: 2, scope: !8879)
!9168 = distinct !DISubprogram(name: "apply_unique_name_cb", scope: !3, file: !3, line: 2030, type: !9169, scopeLine: 2031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9169 = !DISubroutineType(types: !9170)
!9170 = !{!15, !269, !239}
!9171 = !DILocalVariable(name: "seq", arg: 1, scope: !9168, file: !3, line: 2030, type: !269)
!9172 = !DILocation(line: 2030, column: 43, scope: !9168)
!9173 = !DILocalVariable(name: "arg_pt", arg: 2, scope: !9168, file: !3, line: 2030, type: !239)
!9174 = !DILocation(line: 2030, column: 54, scope: !9168)
!9175 = !DILocalVariable(name: "scene", scope: !9168, file: !3, line: 2032, type: !1540)
!9176 = !DILocation(line: 2032, column: 9, scope: !9168)
!9177 = !DILocation(line: 2032, column: 26, scope: !9168)
!9178 = !DILocation(line: 2032, column: 17, scope: !9168)
!9179 = !DILocalVariable(name: "name", scope: !9168, file: !3, line: 2033, type: !9180)
!9180 = !DICompositeType(tag: DW_TAG_array_type, baseType: !280, size: 496, elements: !9181)
!9181 = !{!9182}
!9182 = !DISubrange(count: 62)
!9183 = !DILocation(line: 2033, column: 7, scope: !9168)
!9184 = !DILocation(line: 2035, column: 19, scope: !9168)
!9185 = !DILocation(line: 2035, column: 25, scope: !9168)
!9186 = !DILocation(line: 2035, column: 30, scope: !9168)
!9187 = !DILocation(line: 2035, column: 35, scope: !9168)
!9188 = !DILocation(line: 2035, column: 2, scope: !9168)
!9189 = !DILocation(line: 2036, column: 43, scope: !9168)
!9190 = !DILocation(line: 2036, column: 50, scope: !9168)
!9191 = !DILocation(line: 2036, column: 54, scope: !9168)
!9192 = !DILocation(line: 2036, column: 63, scope: !9168)
!9193 = !DILocation(line: 2036, column: 2, scope: !9168)
!9194 = !DILocation(line: 2037, column: 30, scope: !9168)
!9195 = !DILocation(line: 2037, column: 37, scope: !9168)
!9196 = !DILocation(line: 2037, column: 43, scope: !9168)
!9197 = !DILocation(line: 2037, column: 48, scope: !9168)
!9198 = !DILocation(line: 2037, column: 53, scope: !9168)
!9199 = !DILocation(line: 2037, column: 2, scope: !9168)
!9200 = !DILocation(line: 2038, column: 2, scope: !9168)
!9201 = distinct !DISubprogram(name: "del_seq_find_replace_recurs", scope: !3, file: !3, line: 567, type: !9202, scopeLine: 568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9202 = !DISubroutineType(types: !9203)
!9203 = !{!269, !1540, !269}
!9204 = !DILocalVariable(name: "scene", arg: 1, scope: !9201, file: !3, line: 567, type: !1540)
!9205 = !DILocation(line: 567, column: 53, scope: !9201)
!9206 = !DILocalVariable(name: "seq", arg: 2, scope: !9201, file: !3, line: 567, type: !269)
!9207 = !DILocation(line: 567, column: 70, scope: !9201)
!9208 = !DILocalVariable(name: "seq1", scope: !9201, file: !3, line: 569, type: !269)
!9209 = !DILocation(line: 569, column: 12, scope: !9201)
!9210 = !DILocalVariable(name: "seq2", scope: !9201, file: !3, line: 569, type: !269)
!9211 = !DILocation(line: 569, column: 19, scope: !9201)
!9212 = !DILocalVariable(name: "seq3", scope: !9201, file: !3, line: 569, type: !269)
!9213 = !DILocation(line: 569, column: 26, scope: !9201)
!9214 = !DILocation(line: 574, column: 7, scope: !9215)
!9215 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 574, column: 6)
!9216 = !DILocation(line: 574, column: 6, scope: !9201)
!9217 = !DILocation(line: 575, column: 3, scope: !9215)
!9218 = !DILocation(line: 576, column: 13, scope: !9219)
!9219 = distinct !DILexicalBlock(scope: !9215, file: !3, line: 576, column: 11)
!9220 = !DILocation(line: 576, column: 18, scope: !9219)
!9221 = !DILocation(line: 576, column: 23, scope: !9219)
!9222 = !DILocation(line: 576, column: 11, scope: !9215)
!9223 = !DILocation(line: 577, column: 12, scope: !9219)
!9224 = !DILocation(line: 577, column: 17, scope: !9219)
!9225 = !DILocation(line: 577, column: 22, scope: !9219)
!9226 = !DILocation(line: 577, column: 11, scope: !9219)
!9227 = !DILocation(line: 577, column: 41, scope: !9219)
!9228 = !DILocation(line: 577, column: 3, scope: !9219)
!9229 = !DILocation(line: 578, column: 13, scope: !9230)
!9230 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 578, column: 11)
!9231 = !DILocation(line: 578, column: 18, scope: !9230)
!9232 = !DILocation(line: 578, column: 23, scope: !9230)
!9233 = !DILocation(line: 578, column: 11, scope: !9219)
!9234 = !DILocation(line: 580, column: 38, scope: !9235)
!9235 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 578, column: 34)
!9236 = !DILocation(line: 580, column: 45, scope: !9235)
!9237 = !DILocation(line: 580, column: 50, scope: !9235)
!9238 = !DILocation(line: 580, column: 10, scope: !9235)
!9239 = !DILocation(line: 580, column: 8, scope: !9235)
!9240 = !DILocation(line: 581, column: 38, scope: !9235)
!9241 = !DILocation(line: 581, column: 45, scope: !9235)
!9242 = !DILocation(line: 581, column: 50, scope: !9235)
!9243 = !DILocation(line: 581, column: 10, scope: !9235)
!9244 = !DILocation(line: 581, column: 8, scope: !9235)
!9245 = !DILocation(line: 582, column: 38, scope: !9235)
!9246 = !DILocation(line: 582, column: 45, scope: !9235)
!9247 = !DILocation(line: 582, column: 50, scope: !9235)
!9248 = !DILocation(line: 582, column: 10, scope: !9235)
!9249 = !DILocation(line: 582, column: 8, scope: !9235)
!9250 = !DILocation(line: 584, column: 7, scope: !9251)
!9251 = distinct !DILexicalBlock(scope: !9235, file: !3, line: 584, column: 7)
!9252 = !DILocation(line: 584, column: 15, scope: !9251)
!9253 = !DILocation(line: 584, column: 20, scope: !9251)
!9254 = !DILocation(line: 584, column: 12, scope: !9251)
!9255 = !DILocation(line: 584, column: 25, scope: !9251)
!9256 = !DILocation(line: 584, column: 28, scope: !9251)
!9257 = !DILocation(line: 584, column: 36, scope: !9251)
!9258 = !DILocation(line: 584, column: 41, scope: !9251)
!9259 = !DILocation(line: 584, column: 33, scope: !9251)
!9260 = !DILocation(line: 584, column: 46, scope: !9251)
!9261 = !DILocation(line: 584, column: 49, scope: !9251)
!9262 = !DILocation(line: 584, column: 57, scope: !9251)
!9263 = !DILocation(line: 584, column: 62, scope: !9251)
!9264 = !DILocation(line: 584, column: 54, scope: !9251)
!9265 = !DILocation(line: 584, column: 7, scope: !9235)
!9266 = !DILocation(line: 586, column: 3, scope: !9267)
!9267 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 584, column: 68)
!9268 = !DILocation(line: 587, column: 12, scope: !9269)
!9269 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 587, column: 12)
!9270 = !DILocation(line: 587, column: 17, scope: !9269)
!9271 = !DILocation(line: 587, column: 20, scope: !9269)
!9272 = !DILocation(line: 587, column: 25, scope: !9269)
!9273 = !DILocation(line: 587, column: 28, scope: !9269)
!9274 = !DILocation(line: 587, column: 12, scope: !9251)
!9275 = !DILocation(line: 588, column: 17, scope: !9276)
!9276 = distinct !DILexicalBlock(scope: !9269, file: !3, line: 587, column: 34)
!9277 = !DILocation(line: 588, column: 16, scope: !9276)
!9278 = !DILocation(line: 588, column: 25, scope: !9276)
!9279 = !DILocation(line: 588, column: 33, scope: !9276)
!9280 = !DILocation(line: 588, column: 32, scope: !9276)
!9281 = !DILocation(line: 588, column: 41, scope: !9276)
!9282 = !DILocation(line: 588, column: 48, scope: !9276)
!9283 = !DILocation(line: 588, column: 4, scope: !9276)
!9284 = !DILocation(line: 588, column: 9, scope: !9276)
!9285 = !DILocation(line: 588, column: 14, scope: !9276)
!9286 = !DILocation(line: 589, column: 17, scope: !9276)
!9287 = !DILocation(line: 589, column: 16, scope: !9276)
!9288 = !DILocation(line: 589, column: 25, scope: !9276)
!9289 = !DILocation(line: 589, column: 33, scope: !9276)
!9290 = !DILocation(line: 589, column: 32, scope: !9276)
!9291 = !DILocation(line: 589, column: 41, scope: !9276)
!9292 = !DILocation(line: 589, column: 48, scope: !9276)
!9293 = !DILocation(line: 589, column: 4, scope: !9276)
!9294 = !DILocation(line: 589, column: 9, scope: !9276)
!9295 = !DILocation(line: 589, column: 14, scope: !9276)
!9296 = !DILocation(line: 590, column: 17, scope: !9276)
!9297 = !DILocation(line: 590, column: 16, scope: !9276)
!9298 = !DILocation(line: 590, column: 25, scope: !9276)
!9299 = !DILocation(line: 590, column: 33, scope: !9276)
!9300 = !DILocation(line: 590, column: 32, scope: !9276)
!9301 = !DILocation(line: 590, column: 41, scope: !9276)
!9302 = !DILocation(line: 590, column: 48, scope: !9276)
!9303 = !DILocation(line: 590, column: 4, scope: !9276)
!9304 = !DILocation(line: 590, column: 9, scope: !9276)
!9305 = !DILocation(line: 590, column: 14, scope: !9276)
!9306 = !DILocation(line: 592, column: 46, scope: !9276)
!9307 = !DILocation(line: 592, column: 53, scope: !9276)
!9308 = !DILocation(line: 592, column: 4, scope: !9276)
!9309 = !DILocation(line: 593, column: 3, scope: !9276)
!9310 = !DILocation(line: 595, column: 4, scope: !9269)
!9311 = !DILocation(line: 595, column: 9, scope: !9269)
!9312 = !DILocation(line: 595, column: 14, scope: !9269)
!9313 = !DILocation(line: 596, column: 2, scope: !9235)
!9314 = !DILocation(line: 598, column: 6, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 598, column: 6)
!9316 = !DILocation(line: 598, column: 11, scope: !9315)
!9317 = !DILocation(line: 598, column: 16, scope: !9315)
!9318 = !DILocation(line: 598, column: 6, scope: !9201)
!9319 = !DILocation(line: 599, column: 43, scope: !9320)
!9320 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 599, column: 7)
!9321 = distinct !DILexicalBlock(scope: !9315, file: !3, line: 598, column: 26)
!9322 = !DILocation(line: 599, column: 50, scope: !9320)
!9323 = !DILocation(line: 599, column: 55, scope: !9320)
!9324 = !DILocation(line: 599, column: 15, scope: !9320)
!9325 = !DILocation(line: 599, column: 13, scope: !9320)
!9326 = !DILocation(line: 599, column: 7, scope: !9321)
!9327 = !DILocation(line: 599, column: 70, scope: !9320)
!9328 = !DILocation(line: 599, column: 63, scope: !9320)
!9329 = !DILocation(line: 600, column: 43, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 600, column: 7)
!9331 = !DILocation(line: 600, column: 50, scope: !9330)
!9332 = !DILocation(line: 600, column: 55, scope: !9330)
!9333 = !DILocation(line: 600, column: 15, scope: !9330)
!9334 = !DILocation(line: 600, column: 13, scope: !9330)
!9335 = !DILocation(line: 600, column: 7, scope: !9321)
!9336 = !DILocation(line: 600, column: 70, scope: !9330)
!9337 = !DILocation(line: 600, column: 63, scope: !9330)
!9338 = !DILocation(line: 601, column: 43, scope: !9339)
!9339 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 601, column: 7)
!9340 = !DILocation(line: 601, column: 50, scope: !9339)
!9341 = !DILocation(line: 601, column: 55, scope: !9339)
!9342 = !DILocation(line: 601, column: 15, scope: !9339)
!9343 = !DILocation(line: 601, column: 13, scope: !9339)
!9344 = !DILocation(line: 601, column: 7, scope: !9321)
!9345 = !DILocation(line: 601, column: 70, scope: !9339)
!9346 = !DILocation(line: 601, column: 63, scope: !9339)
!9347 = !DILocation(line: 602, column: 8, scope: !9339)
!9348 = !DILocation(line: 605, column: 10, scope: !9315)
!9349 = !DILocation(line: 605, column: 3, scope: !9315)
!9350 = !DILocation(line: 606, column: 1, scope: !9201)
!9351 = distinct !DISubprogram(name: "del_seq_clear_modifiers_recurs", scope: !3, file: !3, line: 608, type: !9352, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9352 = !DISubroutineType(types: !9353)
!9353 = !{null, !1540, !269}
!9354 = !DILocalVariable(name: "scene", arg: 1, scope: !9351, file: !3, line: 608, type: !1540)
!9355 = !DILocation(line: 608, column: 51, scope: !9351)
!9356 = !DILocalVariable(name: "deleting_sequence", arg: 2, scope: !9351, file: !3, line: 608, type: !269)
!9357 = !DILocation(line: 608, column: 68, scope: !9351)
!9358 = !DILocalVariable(name: "ed", scope: !9351, file: !3, line: 610, type: !1843)
!9359 = !DILocation(line: 610, column: 11, scope: !9351)
!9360 = !DILocation(line: 610, column: 42, scope: !9351)
!9361 = !DILocation(line: 610, column: 16, scope: !9351)
!9362 = !DILocalVariable(name: "current_sequence", scope: !9351, file: !3, line: 611, type: !269)
!9363 = !DILocation(line: 611, column: 12, scope: !9351)
!9364 = !DILocalVariable(name: "iter_macro", scope: !9365, file: !3, line: 613, type: !2255)
!9365 = distinct !DILexicalBlock(scope: !9351, file: !3, line: 613, column: 2)
!9366 = !DILocation(line: 613, column: 2, scope: !9365)
!9367 = !DILocation(line: 613, column: 2, scope: !9368)
!9368 = distinct !DILexicalBlock(scope: !9365, file: !3, line: 613, column: 2)
!9369 = !DILocation(line: 613, column: 2, scope: !9370)
!9370 = distinct !DILexicalBlock(scope: !9368, file: !3, line: 613, column: 2)
!9371 = !DILocation(line: 613, column: 2, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9370, file: !3, line: 613, column: 2)
!9373 = !DILocation(line: 615, column: 9, scope: !9374)
!9374 = distinct !DILexicalBlock(scope: !9375, file: !3, line: 615, column: 7)
!9375 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 614, column: 2)
!9376 = !DILocation(line: 615, column: 27, scope: !9374)
!9377 = !DILocation(line: 615, column: 32, scope: !9374)
!9378 = !DILocation(line: 615, column: 42, scope: !9374)
!9379 = !DILocation(line: 615, column: 45, scope: !9374)
!9380 = !DILocation(line: 615, column: 65, scope: !9374)
!9381 = !DILocation(line: 615, column: 62, scope: !9374)
!9382 = !DILocation(line: 615, column: 7, scope: !9375)
!9383 = !DILocalVariable(name: "smd", scope: !9384, file: !3, line: 616, type: !9385)
!9384 = distinct !DILexicalBlock(scope: !9374, file: !3, line: 615, column: 84)
!9385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9386, size: 64)
!9386 = !DIDerivedType(tag: DW_TAG_typedef, name: "SequenceModifierData", file: !14, line: 271, baseType: !9387)
!9387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SequenceModifierData", file: !14, line: 261, size: 896, elements: !9388)
!9388 = !{!9389, !9391, !9392, !9393, !9394, !9395, !9396, !9397, !9398}
!9389 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !9387, file: !14, line: 262, baseType: !9390, size: 64)
!9390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9387, size: 64)
!9391 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !9387, file: !14, line: 262, baseType: !9390, size: 64, offset: 64)
!9392 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !9387, file: !14, line: 263, baseType: !15, size: 32, offset: 128)
!9393 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !9387, file: !14, line: 263, baseType: !15, size: 32, offset: 160)
!9394 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !9387, file: !14, line: 264, baseType: !279, size: 512, offset: 192)
!9395 = !DIDerivedType(tag: DW_TAG_member, name: "mask_input_type", scope: !9387, file: !14, line: 267, baseType: !15, size: 32, offset: 704)
!9396 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !9387, file: !14, line: 267, baseType: !15, size: 32, offset: 736)
!9397 = !DIDerivedType(tag: DW_TAG_member, name: "mask_sequence", scope: !9387, file: !14, line: 269, baseType: !274, size: 64, offset: 768)
!9398 = !DIDerivedType(tag: DW_TAG_member, name: "mask_id", scope: !9387, file: !14, line: 270, baseType: !1507, size: 64, offset: 832)
!9399 = !DILocation(line: 616, column: 26, scope: !9384)
!9400 = !DILocation(line: 618, column: 15, scope: !9401)
!9401 = distinct !DILexicalBlock(scope: !9384, file: !3, line: 618, column: 4)
!9402 = !DILocation(line: 618, column: 33, scope: !9401)
!9403 = !DILocation(line: 618, column: 43, scope: !9401)
!9404 = !DILocation(line: 618, column: 13, scope: !9401)
!9405 = !DILocation(line: 618, column: 9, scope: !9401)
!9406 = !DILocation(line: 618, column: 50, scope: !9407)
!9407 = distinct !DILexicalBlock(scope: !9401, file: !3, line: 618, column: 4)
!9408 = !DILocation(line: 618, column: 4, scope: !9401)
!9409 = !DILocation(line: 619, column: 9, scope: !9410)
!9410 = distinct !DILexicalBlock(scope: !9411, file: !3, line: 619, column: 9)
!9411 = distinct !DILexicalBlock(scope: !9407, file: !3, line: 618, column: 72)
!9412 = !DILocation(line: 619, column: 14, scope: !9410)
!9413 = !DILocation(line: 619, column: 31, scope: !9410)
!9414 = !DILocation(line: 619, column: 28, scope: !9410)
!9415 = !DILocation(line: 619, column: 9, scope: !9411)
!9416 = !DILocation(line: 620, column: 6, scope: !9417)
!9417 = distinct !DILexicalBlock(scope: !9410, file: !3, line: 619, column: 50)
!9418 = !DILocation(line: 620, column: 11, scope: !9417)
!9419 = !DILocation(line: 620, column: 25, scope: !9417)
!9420 = !DILocation(line: 621, column: 5, scope: !9417)
!9421 = !DILocation(line: 622, column: 4, scope: !9411)
!9422 = !DILocation(line: 618, column: 61, scope: !9407)
!9423 = !DILocation(line: 618, column: 66, scope: !9407)
!9424 = !DILocation(line: 618, column: 59, scope: !9407)
!9425 = !DILocation(line: 618, column: 4, scope: !9407)
!9426 = distinct !{!9426, !9408, !9427}
!9427 = !DILocation(line: 622, column: 4, scope: !9401)
!9428 = !DILocation(line: 623, column: 3, scope: !9384)
!9429 = !DILocation(line: 625, column: 2, scope: !9372)
!9430 = distinct !{!9430, !9367, !9431}
!9431 = !DILocation(line: 625, column: 2, scope: !9368)
!9432 = !DILocation(line: 625, column: 2, scope: !9365)
!9433 = !DILocation(line: 626, column: 1, scope: !9351)
!9434 = distinct !DISubprogram(name: "recurs_del_seq_flag", scope: !3, file: !3, line: 628, type: !9435, scopeLine: 629, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9435 = !DISubroutineType(types: !9436)
!9436 = !{null, !1540, !572, !299, !299}
!9437 = !DILocalVariable(name: "scene", arg: 1, scope: !9434, file: !3, line: 628, type: !1540)
!9438 = !DILocation(line: 628, column: 40, scope: !9434)
!9439 = !DILocalVariable(name: "lb", arg: 2, scope: !9434, file: !3, line: 628, type: !572)
!9440 = !DILocation(line: 628, column: 57, scope: !9434)
!9441 = !DILocalVariable(name: "flag", arg: 3, scope: !9434, file: !3, line: 628, type: !299)
!9442 = !DILocation(line: 628, column: 67, scope: !9434)
!9443 = !DILocalVariable(name: "deleteall", arg: 4, scope: !9434, file: !3, line: 628, type: !299)
!9444 = !DILocation(line: 628, column: 79, scope: !9434)
!9445 = !DILocalVariable(name: "seq", scope: !9434, file: !3, line: 630, type: !269)
!9446 = !DILocation(line: 630, column: 12, scope: !9434)
!9447 = !DILocalVariable(name: "seqn", scope: !9434, file: !3, line: 630, type: !269)
!9448 = !DILocation(line: 630, column: 18, scope: !9434)
!9449 = !DILocalVariable(name: "last_seq", scope: !9434, file: !3, line: 631, type: !269)
!9450 = !DILocation(line: 631, column: 12, scope: !9434)
!9451 = !DILocation(line: 631, column: 48, scope: !9434)
!9452 = !DILocation(line: 631, column: 23, scope: !9434)
!9453 = !DILocation(line: 633, column: 8, scope: !9434)
!9454 = !DILocation(line: 633, column: 12, scope: !9434)
!9455 = !DILocation(line: 633, column: 6, scope: !9434)
!9456 = !DILocation(line: 634, column: 2, scope: !9434)
!9457 = !DILocation(line: 634, column: 9, scope: !9434)
!9458 = !DILocation(line: 635, column: 10, scope: !9459)
!9459 = distinct !DILexicalBlock(scope: !9434, file: !3, line: 634, column: 14)
!9460 = !DILocation(line: 635, column: 15, scope: !9459)
!9461 = !DILocation(line: 635, column: 8, scope: !9459)
!9462 = !DILocation(line: 636, column: 8, scope: !9463)
!9463 = distinct !DILexicalBlock(scope: !9459, file: !3, line: 636, column: 7)
!9464 = !DILocation(line: 636, column: 13, scope: !9463)
!9465 = !DILocation(line: 636, column: 20, scope: !9463)
!9466 = !DILocation(line: 636, column: 18, scope: !9463)
!9467 = !DILocation(line: 636, column: 26, scope: !9463)
!9468 = !DILocation(line: 636, column: 29, scope: !9463)
!9469 = !DILocation(line: 636, column: 7, scope: !9459)
!9470 = !DILocation(line: 637, column: 16, scope: !9471)
!9471 = distinct !DILexicalBlock(scope: !9463, file: !3, line: 636, column: 40)
!9472 = !DILocation(line: 637, column: 20, scope: !9471)
!9473 = !DILocation(line: 637, column: 4, scope: !9471)
!9474 = !DILocation(line: 638, column: 8, scope: !9475)
!9475 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 638, column: 8)
!9476 = !DILocation(line: 638, column: 15, scope: !9475)
!9477 = !DILocation(line: 638, column: 12, scope: !9475)
!9478 = !DILocation(line: 638, column: 8, scope: !9471)
!9479 = !DILocation(line: 638, column: 50, scope: !9475)
!9480 = !DILocation(line: 638, column: 25, scope: !9475)
!9481 = !DILocation(line: 639, column: 8, scope: !9482)
!9482 = distinct !DILexicalBlock(scope: !9471, file: !3, line: 639, column: 8)
!9483 = !DILocation(line: 639, column: 13, scope: !9482)
!9484 = !DILocation(line: 639, column: 18, scope: !9482)
!9485 = !DILocation(line: 639, column: 8, scope: !9471)
!9486 = !DILocation(line: 639, column: 56, scope: !9482)
!9487 = !DILocation(line: 639, column: 64, scope: !9482)
!9488 = !DILocation(line: 639, column: 69, scope: !9482)
!9489 = !DILocation(line: 639, column: 78, scope: !9482)
!9490 = !DILocation(line: 639, column: 36, scope: !9482)
!9491 = !DILocation(line: 640, column: 22, scope: !9471)
!9492 = !DILocation(line: 640, column: 29, scope: !9471)
!9493 = !DILocation(line: 640, column: 4, scope: !9471)
!9494 = !DILocation(line: 641, column: 3, scope: !9471)
!9495 = !DILocation(line: 642, column: 9, scope: !9459)
!9496 = !DILocation(line: 642, column: 7, scope: !9459)
!9497 = distinct !{!9497, !9456, !9498}
!9498 = !DILocation(line: 643, column: 2, scope: !9434)
!9499 = !DILocation(line: 644, column: 1, scope: !9434)
!9500 = distinct !DISubprogram(name: "BLI_listbase_is_empty", scope: !9501, file: !9501, line: 88, type: !9502, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9501 = !DIFile(filename: "blender/source/blender/blenlib/BLI_listbase.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9502 = !DISubroutineType(types: !9503)
!9503 = !{!605, !9504}
!9504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9505, size: 64)
!9505 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !445)
!9506 = !DILocalVariable(name: "lb", arg: 1, scope: !9500, file: !9501, line: 88, type: !9504)
!9507 = !DILocation(line: 88, column: 62, scope: !9500)
!9508 = !DILocation(line: 88, column: 76, scope: !9500)
!9509 = !DILocation(line: 88, column: 80, scope: !9500)
!9510 = !DILocation(line: 88, column: 86, scope: !9500)
!9511 = !DILocation(line: 88, column: 75, scope: !9500)
!9512 = !DILocation(line: 88, column: 68, scope: !9500)
!9513 = distinct !DISubprogram(name: "max_ii", scope: !9514, file: !9514, line: 215, type: !9515, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9514 = !DIFile(filename: "blender/source/blender/blenlib/intern/math_base_inline.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/526.blender_r/build/build_base_ld-loop-ext-m64.0000")
!9515 = !DISubroutineType(types: !9516)
!9516 = !{!15, !15, !15}
!9517 = !DILocalVariable(name: "a", arg: 1, scope: !9513, file: !9514, line: 215, type: !15)
!9518 = !DILocation(line: 215, column: 24, scope: !9513)
!9519 = !DILocalVariable(name: "b", arg: 2, scope: !9513, file: !9514, line: 215, type: !15)
!9520 = !DILocation(line: 215, column: 31, scope: !9513)
!9521 = !DILocation(line: 217, column: 10, scope: !9513)
!9522 = !DILocation(line: 217, column: 14, scope: !9513)
!9523 = !DILocation(line: 217, column: 12, scope: !9513)
!9524 = !DILocation(line: 217, column: 9, scope: !9513)
!9525 = !DILocation(line: 217, column: 19, scope: !9513)
!9526 = !DILocation(line: 217, column: 23, scope: !9513)
!9527 = !DILocation(line: 217, column: 2, scope: !9513)
!9528 = distinct !DISubprogram(name: "BLI_listbase_clear", scope: !9501, file: !9501, line: 89, type: !9529, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9529 = !DISubroutineType(types: !9530)
!9530 = !{null, !9531}
!9531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!9532 = !DILocalVariable(name: "lb", arg: 1, scope: !9528, file: !9501, line: 89, type: !9531)
!9533 = !DILocation(line: 89, column: 53, scope: !9528)
!9534 = !DILocation(line: 89, column: 71, scope: !9528)
!9535 = !DILocation(line: 89, column: 75, scope: !9528)
!9536 = !DILocation(line: 89, column: 80, scope: !9528)
!9537 = !DILocation(line: 89, column: 59, scope: !9528)
!9538 = !DILocation(line: 89, column: 63, scope: !9528)
!9539 = !DILocation(line: 89, column: 69, scope: !9528)
!9540 = !DILocation(line: 89, column: 93, scope: !9528)
!9541 = distinct !DISubprogram(name: "seq_depends_on_meta", scope: !3, file: !3, line: 2486, type: !9542, scopeLine: 2487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9542 = !DISubroutineType(types: !9543)
!9543 = !{!15, !269, !269}
!9544 = !DILocalVariable(name: "seq", arg: 1, scope: !9541, file: !3, line: 2486, type: !269)
!9545 = !DILocation(line: 2486, column: 42, scope: !9541)
!9546 = !DILocalVariable(name: "seqm", arg: 2, scope: !9541, file: !3, line: 2486, type: !269)
!9547 = !DILocation(line: 2486, column: 57, scope: !9541)
!9548 = !DILocation(line: 2488, column: 6, scope: !9549)
!9549 = distinct !DILexicalBlock(scope: !9541, file: !3, line: 2488, column: 6)
!9550 = !DILocation(line: 2488, column: 13, scope: !9549)
!9551 = !DILocation(line: 2488, column: 10, scope: !9549)
!9552 = !DILocation(line: 2488, column: 6, scope: !9541)
!9553 = !DILocation(line: 2488, column: 19, scope: !9549)
!9554 = !DILocation(line: 2489, column: 11, scope: !9555)
!9555 = distinct !DILexicalBlock(scope: !9549, file: !3, line: 2489, column: 11)
!9556 = !DILocation(line: 2489, column: 16, scope: !9555)
!9557 = !DILocation(line: 2489, column: 21, scope: !9555)
!9558 = !DILocation(line: 2489, column: 44, scope: !9555)
!9559 = !DILocation(line: 2489, column: 49, scope: !9555)
!9560 = !DILocation(line: 2489, column: 55, scope: !9555)
!9561 = !DILocation(line: 2489, column: 24, scope: !9555)
!9562 = !DILocation(line: 2489, column: 11, scope: !9549)
!9563 = !DILocation(line: 2489, column: 62, scope: !9555)
!9564 = !DILocation(line: 2490, column: 11, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9555, file: !3, line: 2490, column: 11)
!9566 = !DILocation(line: 2490, column: 16, scope: !9565)
!9567 = !DILocation(line: 2490, column: 21, scope: !9565)
!9568 = !DILocation(line: 2490, column: 44, scope: !9565)
!9569 = !DILocation(line: 2490, column: 49, scope: !9565)
!9570 = !DILocation(line: 2490, column: 55, scope: !9565)
!9571 = !DILocation(line: 2490, column: 24, scope: !9565)
!9572 = !DILocation(line: 2490, column: 11, scope: !9555)
!9573 = !DILocation(line: 2490, column: 62, scope: !9565)
!9574 = !DILocation(line: 2491, column: 11, scope: !9575)
!9575 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 2491, column: 11)
!9576 = !DILocation(line: 2491, column: 16, scope: !9575)
!9577 = !DILocation(line: 2491, column: 21, scope: !9575)
!9578 = !DILocation(line: 2491, column: 44, scope: !9575)
!9579 = !DILocation(line: 2491, column: 49, scope: !9575)
!9580 = !DILocation(line: 2491, column: 55, scope: !9575)
!9581 = !DILocation(line: 2491, column: 24, scope: !9575)
!9582 = !DILocation(line: 2491, column: 11, scope: !9565)
!9583 = !DILocation(line: 2491, column: 62, scope: !9575)
!9584 = !DILocation(line: 2492, column: 7, scope: !9575)
!9585 = !DILocation(line: 2493, column: 1, scope: !9541)
!9586 = distinct !DISubprogram(name: "BLI_rcti_size_y", scope: !2211, file: !2211, line: 106, type: !2225, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9587 = !DILocalVariable(name: "rct", arg: 1, scope: !9586, file: !2211, line: 106, type: !2227)
!9588 = !DILocation(line: 106, column: 53, scope: !9586)
!9589 = !DILocation(line: 106, column: 68, scope: !9586)
!9590 = !DILocation(line: 106, column: 73, scope: !9586)
!9591 = !DILocation(line: 106, column: 80, scope: !9586)
!9592 = !DILocation(line: 106, column: 85, scope: !9586)
!9593 = !DILocation(line: 106, column: 78, scope: !9586)
!9594 = !DILocation(line: 106, column: 60, scope: !9586)
!9595 = distinct !DISubprogram(name: "min_ii", scope: !9514, file: !9514, line: 211, type: !9515, scopeLine: 212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9596 = !DILocalVariable(name: "a", arg: 1, scope: !9595, file: !9514, line: 211, type: !15)
!9597 = !DILocation(line: 211, column: 24, scope: !9595)
!9598 = !DILocalVariable(name: "b", arg: 2, scope: !9595, file: !9514, line: 211, type: !15)
!9599 = !DILocation(line: 211, column: 31, scope: !9595)
!9600 = !DILocation(line: 213, column: 10, scope: !9595)
!9601 = !DILocation(line: 213, column: 14, scope: !9595)
!9602 = !DILocation(line: 213, column: 12, scope: !9595)
!9603 = !DILocation(line: 213, column: 9, scope: !9595)
!9604 = !DILocation(line: 213, column: 19, scope: !9595)
!9605 = !DILocation(line: 213, column: 23, scope: !9595)
!9606 = !DILocation(line: 213, column: 2, scope: !9595)
!9607 = distinct !DISubprogram(name: "BLI_rctf_size_y", scope: !2211, file: !2211, line: 108, type: !2212, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9608 = !DILocalVariable(name: "rct", arg: 1, scope: !9607, file: !2211, line: 108, type: !2214)
!9609 = !DILocation(line: 108, column: 53, scope: !9607)
!9610 = !DILocation(line: 108, column: 68, scope: !9607)
!9611 = !DILocation(line: 108, column: 73, scope: !9607)
!9612 = !DILocation(line: 108, column: 80, scope: !9607)
!9613 = !DILocation(line: 108, column: 85, scope: !9607)
!9614 = !DILocation(line: 108, column: 78, scope: !9607)
!9615 = !DILocation(line: 108, column: 60, scope: !9607)
!9616 = distinct !DISubprogram(name: "BLI_rctf_cent_y", scope: !2211, file: !2211, line: 103, type: !2212, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9617 = !DILocalVariable(name: "rct", arg: 1, scope: !9616, file: !2211, line: 103, type: !2214)
!9618 = !DILocation(line: 103, column: 53, scope: !9616)
!9619 = !DILocation(line: 103, column: 68, scope: !9616)
!9620 = !DILocation(line: 103, column: 73, scope: !9616)
!9621 = !DILocation(line: 103, column: 80, scope: !9616)
!9622 = !DILocation(line: 103, column: 85, scope: !9616)
!9623 = !DILocation(line: 103, column: 78, scope: !9616)
!9624 = !DILocation(line: 103, column: 91, scope: !9616)
!9625 = !DILocation(line: 103, column: 60, scope: !9616)
!9626 = distinct !DISubprogram(name: "strip_jump_internal", scope: !3, file: !3, line: 2869, type: !9627, scopeLine: 2872, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9627 = !DISubroutineType(types: !9628)
!9628 = !{!605, !1540, !9629, !4178, !4178}
!9629 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !299)
!9630 = !DILocalVariable(name: "scene", arg: 1, scope: !9626, file: !3, line: 2869, type: !1540)
!9631 = !DILocation(line: 2869, column: 40, scope: !9626)
!9632 = !DILocalVariable(name: "side", arg: 2, scope: !9626, file: !3, line: 2870, type: !9629)
!9633 = !DILocation(line: 2870, column: 45, scope: !9626)
!9634 = !DILocalVariable(name: "do_skip_mute", arg: 3, scope: !9626, file: !3, line: 2871, type: !4178)
!9635 = !DILocation(line: 2871, column: 44, scope: !9626)
!9636 = !DILocalVariable(name: "do_center", arg: 4, scope: !9626, file: !3, line: 2871, type: !4178)
!9637 = !DILocation(line: 2871, column: 69, scope: !9626)
!9638 = !DILocalVariable(name: "changed", scope: !9626, file: !3, line: 2873, type: !605)
!9639 = !DILocation(line: 2873, column: 7, scope: !9626)
!9640 = !DILocalVariable(name: "cfra", scope: !9626, file: !3, line: 2874, type: !15)
!9641 = !DILocation(line: 2874, column: 6, scope: !9626)
!9642 = !DILocation(line: 2874, column: 13, scope: !9626)
!9643 = !DILocalVariable(name: "nfra", scope: !9626, file: !3, line: 2875, type: !15)
!9644 = !DILocation(line: 2875, column: 6, scope: !9626)
!9645 = !DILocation(line: 2875, column: 33, scope: !9626)
!9646 = !DILocation(line: 2875, column: 40, scope: !9626)
!9647 = !DILocation(line: 2875, column: 46, scope: !9626)
!9648 = !DILocation(line: 2875, column: 52, scope: !9626)
!9649 = !DILocation(line: 2875, column: 66, scope: !9626)
!9650 = !DILocation(line: 2875, column: 13, scope: !9626)
!9651 = !DILocation(line: 2877, column: 6, scope: !9652)
!9652 = distinct !DILexicalBlock(scope: !9626, file: !3, line: 2877, column: 6)
!9653 = !DILocation(line: 2877, column: 14, scope: !9652)
!9654 = !DILocation(line: 2877, column: 11, scope: !9652)
!9655 = !DILocation(line: 2877, column: 6, scope: !9626)
!9656 = !DILocation(line: 2878, column: 10, scope: !9657)
!9657 = distinct !DILexicalBlock(scope: !9652, file: !3, line: 2877, column: 20)
!9658 = !DILocation(line: 2878, column: 3, scope: !9657)
!9659 = !DILocation(line: 2878, column: 8, scope: !9657)
!9660 = !DILocation(line: 2879, column: 11, scope: !9657)
!9661 = !DILocation(line: 2880, column: 2, scope: !9657)
!9662 = !DILocation(line: 2882, column: 9, scope: !9626)
!9663 = !DILocation(line: 2882, column: 2, scope: !9626)
!9664 = distinct !DISubprogram(name: "find_next_prev_edit", scope: !3, file: !3, line: 2809, type: !9665, scopeLine: 2812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9665 = !DISubroutineType(types: !9666)
!9666 = !{!15, !1540, !15, !9629, !4178, !4178}
!9667 = !DILocalVariable(name: "scene", arg: 1, scope: !9664, file: !3, line: 2809, type: !1540)
!9668 = !DILocation(line: 2809, column: 39, scope: !9664)
!9669 = !DILocalVariable(name: "cfra", arg: 2, scope: !9664, file: !3, line: 2809, type: !15)
!9670 = !DILocation(line: 2809, column: 50, scope: !9664)
!9671 = !DILocalVariable(name: "side", arg: 3, scope: !9664, file: !3, line: 2810, type: !9629)
!9672 = !DILocation(line: 2810, column: 44, scope: !9664)
!9673 = !DILocalVariable(name: "do_skip_mute", arg: 4, scope: !9664, file: !3, line: 2811, type: !4178)
!9674 = !DILocation(line: 2811, column: 43, scope: !9664)
!9675 = !DILocalVariable(name: "do_center", arg: 5, scope: !9664, file: !3, line: 2811, type: !4178)
!9676 = !DILocation(line: 2811, column: 68, scope: !9664)
!9677 = !DILocalVariable(name: "ed", scope: !9664, file: !3, line: 2813, type: !1843)
!9678 = !DILocation(line: 2813, column: 11, scope: !9664)
!9679 = !DILocation(line: 2813, column: 42, scope: !9664)
!9680 = !DILocation(line: 2813, column: 16, scope: !9664)
!9681 = !DILocalVariable(name: "seq", scope: !9664, file: !3, line: 2814, type: !269)
!9682 = !DILocation(line: 2814, column: 12, scope: !9664)
!9683 = !DILocalVariable(name: "dist", scope: !9664, file: !3, line: 2816, type: !15)
!9684 = !DILocation(line: 2816, column: 6, scope: !9664)
!9685 = !DILocalVariable(name: "best_dist", scope: !9664, file: !3, line: 2816, type: !15)
!9686 = !DILocation(line: 2816, column: 12, scope: !9664)
!9687 = !DILocalVariable(name: "best_frame", scope: !9664, file: !3, line: 2816, type: !15)
!9688 = !DILocation(line: 2816, column: 23, scope: !9664)
!9689 = !DILocation(line: 2816, column: 36, scope: !9664)
!9690 = !DILocalVariable(name: "seq_frames", scope: !9664, file: !3, line: 2817, type: !246)
!9691 = !DILocation(line: 2817, column: 6, scope: !9664)
!9692 = !DILocalVariable(name: "seq_frames_tot", scope: !9664, file: !3, line: 2817, type: !15)
!9693 = !DILocation(line: 2817, column: 21, scope: !9664)
!9694 = !DILocation(line: 2819, column: 12, scope: !9664)
!9695 = !DILocation(line: 2821, column: 6, scope: !9696)
!9696 = distinct !DILexicalBlock(scope: !9664, file: !3, line: 2821, column: 6)
!9697 = !DILocation(line: 2821, column: 9, scope: !9696)
!9698 = !DILocation(line: 2821, column: 6, scope: !9664)
!9699 = !DILocation(line: 2821, column: 25, scope: !9696)
!9700 = !DILocation(line: 2821, column: 18, scope: !9696)
!9701 = !DILocation(line: 2823, column: 13, scope: !9702)
!9702 = distinct !DILexicalBlock(scope: !9664, file: !3, line: 2823, column: 2)
!9703 = !DILocation(line: 2823, column: 17, scope: !9702)
!9704 = !DILocation(line: 2823, column: 27, scope: !9702)
!9705 = !DILocation(line: 2823, column: 11, scope: !9702)
!9706 = !DILocation(line: 2823, column: 7, scope: !9702)
!9707 = !DILocation(line: 2823, column: 34, scope: !9708)
!9708 = distinct !DILexicalBlock(scope: !9702, file: !3, line: 2823, column: 2)
!9709 = !DILocation(line: 2823, column: 2, scope: !9702)
!9710 = !DILocalVariable(name: "i", scope: !9711, file: !3, line: 2824, type: !15)
!9711 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 2823, column: 56)
!9712 = !DILocation(line: 2824, column: 7, scope: !9711)
!9713 = !DILocation(line: 2826, column: 7, scope: !9714)
!9714 = distinct !DILexicalBlock(scope: !9711, file: !3, line: 2826, column: 7)
!9715 = !DILocation(line: 2826, column: 20, scope: !9714)
!9716 = !DILocation(line: 2826, column: 24, scope: !9714)
!9717 = !DILocation(line: 2826, column: 29, scope: !9714)
!9718 = !DILocation(line: 2826, column: 34, scope: !9714)
!9719 = !DILocation(line: 2826, column: 7, scope: !9711)
!9720 = !DILocation(line: 2827, column: 4, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9714, file: !3, line: 2826, column: 47)
!9722 = !DILocation(line: 2830, column: 7, scope: !9723)
!9723 = distinct !DILexicalBlock(scope: !9711, file: !3, line: 2830, column: 7)
!9724 = !DILocation(line: 2830, column: 7, scope: !9711)
!9725 = !DILocation(line: 2831, column: 21, scope: !9726)
!9726 = distinct !DILexicalBlock(scope: !9723, file: !3, line: 2830, column: 18)
!9727 = !DILocation(line: 2831, column: 26, scope: !9726)
!9728 = !DILocation(line: 2831, column: 38, scope: !9726)
!9729 = !DILocation(line: 2831, column: 43, scope: !9726)
!9730 = !DILocation(line: 2831, column: 36, scope: !9726)
!9731 = !DILocation(line: 2831, column: 52, scope: !9726)
!9732 = !DILocation(line: 2831, column: 4, scope: !9726)
!9733 = !DILocation(line: 2831, column: 18, scope: !9726)
!9734 = !DILocation(line: 2832, column: 19, scope: !9726)
!9735 = !DILocation(line: 2833, column: 3, scope: !9726)
!9736 = !DILocation(line: 2835, column: 20, scope: !9737)
!9737 = distinct !DILexicalBlock(scope: !9723, file: !3, line: 2834, column: 8)
!9738 = !DILocation(line: 2835, column: 25, scope: !9737)
!9739 = !DILocation(line: 2835, column: 4, scope: !9737)
!9740 = !DILocation(line: 2835, column: 18, scope: !9737)
!9741 = !DILocation(line: 2836, column: 20, scope: !9737)
!9742 = !DILocation(line: 2836, column: 25, scope: !9737)
!9743 = !DILocation(line: 2836, column: 4, scope: !9737)
!9744 = !DILocation(line: 2836, column: 18, scope: !9737)
!9745 = !DILocation(line: 2838, column: 19, scope: !9737)
!9746 = !DILocation(line: 2841, column: 10, scope: !9747)
!9747 = distinct !DILexicalBlock(scope: !9711, file: !3, line: 2841, column: 3)
!9748 = !DILocation(line: 2841, column: 8, scope: !9747)
!9749 = !DILocation(line: 2841, column: 15, scope: !9750)
!9750 = distinct !DILexicalBlock(scope: !9747, file: !3, line: 2841, column: 3)
!9751 = !DILocation(line: 2841, column: 19, scope: !9750)
!9752 = !DILocation(line: 2841, column: 17, scope: !9750)
!9753 = !DILocation(line: 2841, column: 3, scope: !9747)
!9754 = !DILocalVariable(name: "seq_frame", scope: !9755, file: !3, line: 2842, type: !2040)
!9755 = distinct !DILexicalBlock(scope: !9750, file: !3, line: 2841, column: 40)
!9756 = !DILocation(line: 2842, column: 14, scope: !9755)
!9757 = !DILocation(line: 2842, column: 37, scope: !9755)
!9758 = !DILocation(line: 2842, column: 26, scope: !9755)
!9759 = !DILocation(line: 2844, column: 9, scope: !9755)
!9760 = !DILocation(line: 2846, column: 12, scope: !9755)
!9761 = !DILocation(line: 2846, column: 4, scope: !9755)
!9762 = !DILocation(line: 2848, column: 10, scope: !9763)
!9763 = distinct !DILexicalBlock(scope: !9764, file: !3, line: 2848, column: 10)
!9764 = distinct !DILexicalBlock(scope: !9755, file: !3, line: 2846, column: 18)
!9765 = !DILocation(line: 2848, column: 22, scope: !9763)
!9766 = !DILocation(line: 2848, column: 20, scope: !9763)
!9767 = !DILocation(line: 2848, column: 10, scope: !9764)
!9768 = !DILocation(line: 2849, column: 14, scope: !9769)
!9769 = distinct !DILexicalBlock(scope: !9763, file: !3, line: 2848, column: 28)
!9770 = !DILocation(line: 2849, column: 21, scope: !9769)
!9771 = !DILocation(line: 2849, column: 19, scope: !9769)
!9772 = !DILocation(line: 2849, column: 12, scope: !9769)
!9773 = !DILocation(line: 2850, column: 6, scope: !9769)
!9774 = !DILocation(line: 2851, column: 6, scope: !9764)
!9775 = !DILocation(line: 2853, column: 10, scope: !9776)
!9776 = distinct !DILexicalBlock(scope: !9764, file: !3, line: 2853, column: 10)
!9777 = !DILocation(line: 2853, column: 22, scope: !9776)
!9778 = !DILocation(line: 2853, column: 20, scope: !9776)
!9779 = !DILocation(line: 2853, column: 10, scope: !9764)
!9780 = !DILocation(line: 2854, column: 14, scope: !9781)
!9781 = distinct !DILexicalBlock(scope: !9776, file: !3, line: 2853, column: 28)
!9782 = !DILocation(line: 2854, column: 26, scope: !9781)
!9783 = !DILocation(line: 2854, column: 24, scope: !9781)
!9784 = !DILocation(line: 2854, column: 12, scope: !9781)
!9785 = !DILocation(line: 2855, column: 6, scope: !9781)
!9786 = !DILocation(line: 2856, column: 6, scope: !9764)
!9787 = !DILocation(line: 2859, column: 8, scope: !9788)
!9788 = distinct !DILexicalBlock(scope: !9755, file: !3, line: 2859, column: 8)
!9789 = !DILocation(line: 2859, column: 15, scope: !9788)
!9790 = !DILocation(line: 2859, column: 13, scope: !9788)
!9791 = !DILocation(line: 2859, column: 8, scope: !9755)
!9792 = !DILocation(line: 2860, column: 18, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9788, file: !3, line: 2859, column: 26)
!9794 = !DILocation(line: 2860, column: 16, scope: !9793)
!9795 = !DILocation(line: 2861, column: 17, scope: !9793)
!9796 = !DILocation(line: 2861, column: 15, scope: !9793)
!9797 = !DILocation(line: 2862, column: 4, scope: !9793)
!9798 = !DILocation(line: 2863, column: 3, scope: !9755)
!9799 = !DILocation(line: 2841, column: 36, scope: !9750)
!9800 = !DILocation(line: 2841, column: 3, scope: !9750)
!9801 = distinct !{!9801, !9753, !9802}
!9802 = !DILocation(line: 2863, column: 3, scope: !9747)
!9803 = !DILocation(line: 2864, column: 2, scope: !9711)
!9804 = !DILocation(line: 2823, column: 45, scope: !9708)
!9805 = !DILocation(line: 2823, column: 50, scope: !9708)
!9806 = !DILocation(line: 2823, column: 43, scope: !9708)
!9807 = !DILocation(line: 2823, column: 2, scope: !9708)
!9808 = distinct !{!9808, !9709, !9809}
!9809 = !DILocation(line: 2864, column: 2, scope: !9702)
!9810 = !DILocation(line: 2866, column: 9, scope: !9664)
!9811 = !DILocation(line: 2866, column: 2, scope: !9664)
!9812 = !DILocation(line: 2867, column: 1, scope: !9664)
!9813 = distinct !DISubprogram(name: "find_next_prev_sequence", scope: !3, file: !3, line: 306, type: !9814, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9814 = !DISubroutineType(types: !9815)
!9815 = !{!269, !1540, !269, !15, !15}
!9816 = !DILocalVariable(name: "scene", arg: 1, scope: !9813, file: !3, line: 306, type: !1540)
!9817 = !DILocation(line: 306, column: 49, scope: !9813)
!9818 = !DILocalVariable(name: "test", arg: 2, scope: !9813, file: !3, line: 306, type: !269)
!9819 = !DILocation(line: 306, column: 66, scope: !9813)
!9820 = !DILocalVariable(name: "lr", arg: 3, scope: !9813, file: !3, line: 306, type: !15)
!9821 = !DILocation(line: 306, column: 76, scope: !9813)
!9822 = !DILocalVariable(name: "sel", arg: 4, scope: !9813, file: !3, line: 306, type: !15)
!9823 = !DILocation(line: 306, column: 84, scope: !9813)
!9824 = !DILocalVariable(name: "seq", scope: !9813, file: !3, line: 309, type: !269)
!9825 = !DILocation(line: 309, column: 12, scope: !9813)
!9826 = !DILocalVariable(name: "best_seq", scope: !9813, file: !3, line: 309, type: !269)
!9827 = !DILocation(line: 309, column: 18, scope: !9813)
!9828 = !DILocalVariable(name: "ed", scope: !9813, file: !3, line: 310, type: !1843)
!9829 = !DILocation(line: 310, column: 11, scope: !9813)
!9830 = !DILocation(line: 310, column: 42, scope: !9813)
!9831 = !DILocation(line: 310, column: 16, scope: !9813)
!9832 = !DILocalVariable(name: "dist", scope: !9813, file: !3, line: 312, type: !15)
!9833 = !DILocation(line: 312, column: 6, scope: !9813)
!9834 = !DILocalVariable(name: "best_dist", scope: !9813, file: !3, line: 312, type: !15)
!9835 = !DILocation(line: 312, column: 12, scope: !9813)
!9836 = !DILocation(line: 313, column: 12, scope: !9813)
!9837 = !DILocation(line: 316, column: 6, scope: !9838)
!9838 = distinct !DILexicalBlock(scope: !9813, file: !3, line: 316, column: 6)
!9839 = !DILocation(line: 316, column: 9, scope: !9838)
!9840 = !DILocation(line: 316, column: 6, scope: !9813)
!9841 = !DILocation(line: 316, column: 18, scope: !9838)
!9842 = !DILocation(line: 318, column: 8, scope: !9813)
!9843 = !DILocation(line: 318, column: 12, scope: !9813)
!9844 = !DILocation(line: 318, column: 22, scope: !9813)
!9845 = !DILocation(line: 318, column: 6, scope: !9813)
!9846 = !DILocation(line: 319, column: 2, scope: !9813)
!9847 = !DILocation(line: 319, column: 9, scope: !9813)
!9848 = !DILocation(line: 320, column: 8, scope: !9849)
!9849 = distinct !DILexicalBlock(scope: !9850, file: !3, line: 320, column: 7)
!9850 = distinct !DILexicalBlock(scope: !9813, file: !3, line: 319, column: 14)
!9851 = !DILocation(line: 320, column: 15, scope: !9849)
!9852 = !DILocation(line: 320, column: 12, scope: !9849)
!9853 = !DILocation(line: 320, column: 21, scope: !9849)
!9854 = !DILocation(line: 321, column: 8, scope: !9849)
!9855 = !DILocation(line: 321, column: 14, scope: !9849)
!9856 = !DILocation(line: 321, column: 25, scope: !9849)
!9857 = !DILocation(line: 321, column: 30, scope: !9849)
!9858 = !DILocation(line: 321, column: 22, scope: !9849)
!9859 = !DILocation(line: 321, column: 39, scope: !9849)
!9860 = !DILocation(line: 322, column: 8, scope: !9849)
!9861 = !DILocation(line: 322, column: 14, scope: !9849)
!9862 = !DILocation(line: 322, column: 23, scope: !9849)
!9863 = !DILocation(line: 322, column: 28, scope: !9849)
!9864 = !DILocation(line: 322, column: 20, scope: !9849)
!9865 = !DILocation(line: 322, column: 35, scope: !9849)
!9866 = !DILocation(line: 323, column: 9, scope: !9849)
!9867 = !DILocation(line: 323, column: 13, scope: !9849)
!9868 = !DILocation(line: 323, column: 20, scope: !9849)
!9869 = !DILocation(line: 323, column: 24, scope: !9849)
!9870 = !DILocation(line: 323, column: 32, scope: !9849)
!9871 = !DILocation(line: 323, column: 37, scope: !9849)
!9872 = !DILocation(line: 323, column: 42, scope: !9849)
!9873 = !DILocation(line: 323, column: 28, scope: !9849)
!9874 = !DILocation(line: 320, column: 7, scope: !9850)
!9875 = !DILocation(line: 325, column: 9, scope: !9876)
!9876 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 324, column: 3)
!9877 = !DILocation(line: 327, column: 12, scope: !9876)
!9878 = !DILocation(line: 327, column: 4, scope: !9876)
!9879 = !DILocation(line: 329, column: 10, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9881, file: !3, line: 329, column: 10)
!9881 = distinct !DILexicalBlock(scope: !9876, file: !3, line: 327, column: 16)
!9882 = !DILocation(line: 329, column: 15, scope: !9880)
!9883 = !DILocation(line: 329, column: 26, scope: !9880)
!9884 = !DILocation(line: 329, column: 32, scope: !9880)
!9885 = !DILocation(line: 329, column: 23, scope: !9880)
!9886 = !DILocation(line: 329, column: 10, scope: !9881)
!9887 = !DILocation(line: 330, column: 14, scope: !9888)
!9888 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 329, column: 43)
!9889 = !DILocation(line: 330, column: 20, scope: !9888)
!9890 = !DILocation(line: 330, column: 30, scope: !9888)
!9891 = !DILocation(line: 330, column: 35, scope: !9888)
!9892 = !DILocation(line: 330, column: 28, scope: !9888)
!9893 = !DILocation(line: 330, column: 12, scope: !9888)
!9894 = !DILocation(line: 331, column: 6, scope: !9888)
!9895 = !DILocation(line: 332, column: 6, scope: !9881)
!9896 = !DILocation(line: 334, column: 10, scope: !9897)
!9897 = distinct !DILexicalBlock(scope: !9881, file: !3, line: 334, column: 10)
!9898 = !DILocation(line: 334, column: 15, scope: !9897)
!9899 = !DILocation(line: 334, column: 28, scope: !9897)
!9900 = !DILocation(line: 334, column: 34, scope: !9897)
!9901 = !DILocation(line: 334, column: 25, scope: !9897)
!9902 = !DILocation(line: 334, column: 10, scope: !9881)
!9903 = !DILocation(line: 335, column: 14, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9897, file: !3, line: 334, column: 43)
!9905 = !DILocation(line: 335, column: 19, scope: !9904)
!9906 = !DILocation(line: 335, column: 31, scope: !9904)
!9907 = !DILocation(line: 335, column: 37, scope: !9904)
!9908 = !DILocation(line: 335, column: 29, scope: !9904)
!9909 = !DILocation(line: 335, column: 12, scope: !9904)
!9910 = !DILocation(line: 336, column: 6, scope: !9904)
!9911 = !DILocation(line: 337, column: 6, scope: !9881)
!9912 = !DILocation(line: 340, column: 8, scope: !9913)
!9913 = distinct !DILexicalBlock(scope: !9876, file: !3, line: 340, column: 8)
!9914 = !DILocation(line: 340, column: 13, scope: !9913)
!9915 = !DILocation(line: 340, column: 8, scope: !9876)
!9916 = !DILocation(line: 341, column: 16, scope: !9917)
!9917 = distinct !DILexicalBlock(scope: !9913, file: !3, line: 340, column: 19)
!9918 = !DILocation(line: 341, column: 14, scope: !9917)
!9919 = !DILocation(line: 342, column: 5, scope: !9917)
!9920 = !DILocation(line: 344, column: 13, scope: !9921)
!9921 = distinct !DILexicalBlock(scope: !9913, file: !3, line: 344, column: 13)
!9922 = !DILocation(line: 344, column: 20, scope: !9921)
!9923 = !DILocation(line: 344, column: 18, scope: !9921)
!9924 = !DILocation(line: 344, column: 13, scope: !9913)
!9925 = !DILocation(line: 345, column: 17, scope: !9926)
!9926 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 344, column: 31)
!9927 = !DILocation(line: 345, column: 15, scope: !9926)
!9928 = !DILocation(line: 346, column: 16, scope: !9926)
!9929 = !DILocation(line: 346, column: 14, scope: !9926)
!9930 = !DILocation(line: 347, column: 4, scope: !9926)
!9931 = !DILocation(line: 348, column: 3, scope: !9876)
!9932 = !DILocation(line: 349, column: 9, scope: !9850)
!9933 = !DILocation(line: 349, column: 14, scope: !9850)
!9934 = !DILocation(line: 349, column: 7, scope: !9850)
!9935 = distinct !{!9935, !9846, !9936}
!9936 = !DILocation(line: 350, column: 2, scope: !9813)
!9937 = !DILocation(line: 351, column: 9, scope: !9813)
!9938 = !DILocation(line: 351, column: 2, scope: !9813)
!9939 = !DILocation(line: 352, column: 1, scope: !9813)
!9940 = distinct !DISubprogram(name: "swap_sequence", scope: !3, file: !3, line: 2930, type: !9941, scopeLine: 2931, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!9941 = !DISubroutineType(types: !9942)
!9942 = !{null, !1540, !269, !269}
!9943 = !DILocalVariable(name: "scene", arg: 1, scope: !9940, file: !3, line: 2930, type: !1540)
!9944 = !DILocation(line: 2930, column: 34, scope: !9940)
!9945 = !DILocalVariable(name: "seqa", arg: 2, scope: !9940, file: !3, line: 2930, type: !269)
!9946 = !DILocation(line: 2930, column: 51, scope: !9940)
!9947 = !DILocalVariable(name: "seqb", arg: 3, scope: !9940, file: !3, line: 2930, type: !269)
!9948 = !DILocation(line: 2930, column: 67, scope: !9940)
!9949 = !DILocalVariable(name: "gap", scope: !9940, file: !3, line: 2932, type: !15)
!9950 = !DILocation(line: 2932, column: 6, scope: !9940)
!9951 = !DILocation(line: 2932, column: 12, scope: !9940)
!9952 = !DILocation(line: 2932, column: 18, scope: !9940)
!9953 = !DILocation(line: 2932, column: 30, scope: !9940)
!9954 = !DILocation(line: 2932, column: 36, scope: !9940)
!9955 = !DILocation(line: 2932, column: 28, scope: !9940)
!9956 = !DILocalVariable(name: "seq_a_start", scope: !9940, file: !3, line: 2933, type: !15)
!9957 = !DILocation(line: 2933, column: 6, scope: !9940)
!9958 = !DILocalVariable(name: "seq_b_start", scope: !9940, file: !3, line: 2934, type: !15)
!9959 = !DILocation(line: 2934, column: 6, scope: !9940)
!9960 = !DILocation(line: 2936, column: 17, scope: !9940)
!9961 = !DILocation(line: 2936, column: 23, scope: !9940)
!9962 = !DILocation(line: 2936, column: 31, scope: !9940)
!9963 = !DILocation(line: 2936, column: 37, scope: !9940)
!9964 = !DILocation(line: 2936, column: 29, scope: !9940)
!9965 = !DILocation(line: 2936, column: 50, scope: !9940)
!9966 = !DILocation(line: 2936, column: 56, scope: !9940)
!9967 = !DILocation(line: 2936, column: 48, scope: !9940)
!9968 = !DILocation(line: 2936, column: 14, scope: !9940)
!9969 = !DILocation(line: 2937, column: 25, scope: !9940)
!9970 = !DILocation(line: 2937, column: 32, scope: !9940)
!9971 = !DILocation(line: 2937, column: 38, scope: !9940)
!9972 = !DILocation(line: 2937, column: 52, scope: !9940)
!9973 = !DILocation(line: 2937, column: 58, scope: !9940)
!9974 = !DILocation(line: 2937, column: 50, scope: !9940)
!9975 = !DILocation(line: 2937, column: 2, scope: !9940)
!9976 = !DILocation(line: 2938, column: 20, scope: !9940)
!9977 = !DILocation(line: 2938, column: 27, scope: !9940)
!9978 = !DILocation(line: 2938, column: 2, scope: !9940)
!9979 = !DILocation(line: 2940, column: 17, scope: !9940)
!9980 = !DILocation(line: 2940, column: 23, scope: !9940)
!9981 = !DILocation(line: 2940, column: 31, scope: !9940)
!9982 = !DILocation(line: 2940, column: 37, scope: !9940)
!9983 = !DILocation(line: 2940, column: 29, scope: !9940)
!9984 = !DILocation(line: 2940, column: 50, scope: !9940)
!9985 = !DILocation(line: 2940, column: 56, scope: !9940)
!9986 = !DILocation(line: 2940, column: 48, scope: !9940)
!9987 = !DILocation(line: 2940, column: 66, scope: !9940)
!9988 = !DILocation(line: 2940, column: 64, scope: !9940)
!9989 = !DILocation(line: 2940, column: 14, scope: !9940)
!9990 = !DILocation(line: 2941, column: 25, scope: !9940)
!9991 = !DILocation(line: 2941, column: 32, scope: !9940)
!9992 = !DILocation(line: 2941, column: 38, scope: !9940)
!9993 = !DILocation(line: 2941, column: 52, scope: !9940)
!9994 = !DILocation(line: 2941, column: 58, scope: !9940)
!9995 = !DILocation(line: 2941, column: 50, scope: !9940)
!9996 = !DILocation(line: 2941, column: 2, scope: !9940)
!9997 = !DILocation(line: 2942, column: 20, scope: !9940)
!9998 = !DILocation(line: 2942, column: 27, scope: !9940)
!9999 = !DILocation(line: 2942, column: 2, scope: !9940)
!10000 = !DILocation(line: 2943, column: 1, scope: !9940)
!10001 = distinct !DISubprogram(name: "seq_copy_del_sound", scope: !3, file: !3, line: 3099, type: !9352, scopeLine: 3100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!10002 = !DILocalVariable(name: "scene", arg: 1, scope: !10001, file: !3, line: 3099, type: !1540)
!10003 = !DILocation(line: 3099, column: 39, scope: !10001)
!10004 = !DILocalVariable(name: "seq", arg: 2, scope: !10001, file: !3, line: 3099, type: !269)
!10005 = !DILocation(line: 3099, column: 56, scope: !10001)
!10006 = !DILocation(line: 3101, column: 6, scope: !10007)
!10007 = distinct !DILexicalBlock(scope: !10001, file: !3, line: 3101, column: 6)
!10008 = !DILocation(line: 3101, column: 11, scope: !10007)
!10009 = !DILocation(line: 3101, column: 16, scope: !10007)
!10010 = !DILocation(line: 3101, column: 6, scope: !10001)
!10011 = !DILocalVariable(name: "iseq", scope: !10012, file: !3, line: 3102, type: !269)
!10012 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 3101, column: 34)
!10013 = !DILocation(line: 3102, column: 13, scope: !10012)
!10014 = !DILocation(line: 3103, column: 15, scope: !10015)
!10015 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 3103, column: 3)
!10016 = !DILocation(line: 3103, column: 20, scope: !10015)
!10017 = !DILocation(line: 3103, column: 28, scope: !10015)
!10018 = !DILocation(line: 3103, column: 13, scope: !10015)
!10019 = !DILocation(line: 3103, column: 8, scope: !10015)
!10020 = !DILocation(line: 3103, column: 35, scope: !10021)
!10021 = distinct !DILexicalBlock(scope: !10015, file: !3, line: 3103, column: 3)
!10022 = !DILocation(line: 3103, column: 3, scope: !10015)
!10023 = !DILocation(line: 3104, column: 23, scope: !10024)
!10024 = distinct !DILexicalBlock(scope: !10021, file: !3, line: 3103, column: 60)
!10025 = !DILocation(line: 3104, column: 30, scope: !10024)
!10026 = !DILocation(line: 3104, column: 4, scope: !10024)
!10027 = !DILocation(line: 3105, column: 3, scope: !10024)
!10028 = !DILocation(line: 3103, column: 48, scope: !10021)
!10029 = !DILocation(line: 3103, column: 54, scope: !10021)
!10030 = !DILocation(line: 3103, column: 46, scope: !10021)
!10031 = !DILocation(line: 3103, column: 3, scope: !10021)
!10032 = distinct !{!10032, !10022, !10033}
!10033 = !DILocation(line: 3105, column: 3, scope: !10015)
!10034 = !DILocation(line: 3106, column: 2, scope: !10012)
!10035 = !DILocation(line: 3107, column: 11, scope: !10036)
!10036 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 3107, column: 11)
!10037 = !DILocation(line: 3107, column: 16, scope: !10036)
!10038 = !DILocation(line: 3107, column: 11, scope: !10007)
!10039 = !DILocation(line: 3108, column: 28, scope: !10040)
!10040 = distinct !DILexicalBlock(scope: !10036, file: !3, line: 3107, column: 29)
!10041 = !DILocation(line: 3108, column: 35, scope: !10040)
!10042 = !DILocation(line: 3108, column: 40, scope: !10040)
!10043 = !DILocation(line: 3108, column: 3, scope: !10040)
!10044 = !DILocation(line: 3109, column: 3, scope: !10040)
!10045 = !DILocation(line: 3109, column: 8, scope: !10040)
!10046 = !DILocation(line: 3109, column: 20, scope: !10040)
!10047 = !DILocation(line: 3110, column: 2, scope: !10040)
!10048 = !DILocation(line: 3111, column: 1, scope: !10001)
!10049 = distinct !DISubprogram(name: "seq_proxy_build_job", scope: !3, file: !3, line: 171, type: !10050, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!10050 = !DISubroutineType(types: !10051)
!10051 = !{null, !10052}
!10052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10053, size: 64)
!10053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2330)
!10054 = !DILocalVariable(name: "C", arg: 1, scope: !10049, file: !3, line: 171, type: !10052)
!10055 = !DILocation(line: 171, column: 49, scope: !10049)
!10056 = !DILocalVariable(name: "wm_job", scope: !10049, file: !3, line: 173, type: !10057)
!10057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10058, size: 64)
!10058 = !DIDerivedType(tag: DW_TAG_typedef, name: "wmJob", file: !215, line: 71, baseType: !10059)
!10059 = !DICompositeType(tag: DW_TAG_structure_type, name: "wmJob", file: !215, line: 55, flags: DIFlagFwdDecl)
!10060 = !DILocation(line: 173, column: 9, scope: !10049)
!10061 = !DILocalVariable(name: "pj", scope: !10049, file: !3, line: 174, type: !10062)
!10062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10063, size: 64)
!10063 = !DIDerivedType(tag: DW_TAG_typedef, name: "ProxyJob", file: !3, line: 127, baseType: !10064)
!10064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ProxyBuildJob", file: !3, line: 122, size: 320, elements: !10065)
!10065 = !{!10066, !10067, !10068, !10069}
!10066 = !DIDerivedType(tag: DW_TAG_member, name: "scene", scope: !10064, file: !3, line: 123, baseType: !1540, size: 64)
!10067 = !DIDerivedType(tag: DW_TAG_member, name: "main", scope: !10064, file: !3, line: 124, baseType: !6836, size: 64, offset: 64)
!10068 = !DIDerivedType(tag: DW_TAG_member, name: "queue", scope: !10064, file: !3, line: 125, baseType: !443, size: 128, offset: 128)
!10069 = !DIDerivedType(tag: DW_TAG_member, name: "stop", scope: !10064, file: !3, line: 126, baseType: !15, size: 32, offset: 256)
!10070 = !DILocation(line: 174, column: 12, scope: !10049)
!10071 = !DILocalVariable(name: "scene", scope: !10049, file: !3, line: 175, type: !1540)
!10072 = !DILocation(line: 175, column: 9, scope: !10049)
!10073 = !DILocation(line: 175, column: 32, scope: !10049)
!10074 = !DILocation(line: 175, column: 17, scope: !10049)
!10075 = !DILocalVariable(name: "ed", scope: !10049, file: !3, line: 176, type: !1843)
!10076 = !DILocation(line: 176, column: 11, scope: !10049)
!10077 = !DILocation(line: 176, column: 42, scope: !10049)
!10078 = !DILocation(line: 176, column: 16, scope: !10049)
!10079 = !DILocalVariable(name: "sa", scope: !10049, file: !3, line: 177, type: !3393)
!10080 = !DILocation(line: 177, column: 11, scope: !10049)
!10081 = !DILocation(line: 177, column: 28, scope: !10049)
!10082 = !DILocation(line: 177, column: 16, scope: !10049)
!10083 = !DILocalVariable(name: "context", scope: !10049, file: !3, line: 178, type: !10084)
!10084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10085, size: 64)
!10085 = !DICompositeType(tag: DW_TAG_structure_type, name: "SeqIndexBuildContext", file: !1520, line: 48, flags: DIFlagFwdDecl)
!10086 = !DILocation(line: 178, column: 31, scope: !10049)
!10087 = !DILocalVariable(name: "link", scope: !10049, file: !3, line: 179, type: !10088)
!10088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10089, size: 64)
!10089 = !DIDerivedType(tag: DW_TAG_typedef, name: "LinkData", file: !444, line: 66, baseType: !10090)
!10090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "LinkData", file: !444, line: 63, size: 192, elements: !10091)
!10091 = !{!10092, !10094, !10095}
!10092 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !10090, file: !444, line: 64, baseType: !10093, size: 64)
!10093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10090, size: 64)
!10094 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !10090, file: !444, line: 64, baseType: !10093, size: 64, offset: 64)
!10095 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !10090, file: !444, line: 65, baseType: !239, size: 64, offset: 128)
!10096 = !DILocation(line: 179, column: 12, scope: !10049)
!10097 = !DILocalVariable(name: "seq", scope: !10049, file: !3, line: 180, type: !269)
!10098 = !DILocation(line: 180, column: 12, scope: !10049)
!10099 = !DILocation(line: 182, column: 38, scope: !10049)
!10100 = !DILocation(line: 182, column: 23, scope: !10049)
!10101 = !DILocation(line: 182, column: 56, scope: !10049)
!10102 = !DILocation(line: 182, column: 42, scope: !10049)
!10103 = !DILocation(line: 182, column: 60, scope: !10049)
!10104 = !DILocation(line: 182, column: 11, scope: !10049)
!10105 = !DILocation(line: 182, column: 9, scope: !10049)
!10106 = !DILocation(line: 185, column: 30, scope: !10049)
!10107 = !DILocation(line: 185, column: 7, scope: !10049)
!10108 = !DILocation(line: 185, column: 5, scope: !10049)
!10109 = !DILocation(line: 187, column: 7, scope: !10110)
!10110 = distinct !DILexicalBlock(scope: !10049, file: !3, line: 187, column: 6)
!10111 = !DILocation(line: 187, column: 6, scope: !10049)
!10112 = !DILocation(line: 188, column: 8, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !10110, file: !3, line: 187, column: 11)
!10114 = !DILocation(line: 188, column: 6, scope: !10113)
!10115 = !DILocation(line: 190, column: 15, scope: !10113)
!10116 = !DILocation(line: 190, column: 3, scope: !10113)
!10117 = !DILocation(line: 190, column: 7, scope: !10113)
!10118 = !DILocation(line: 190, column: 13, scope: !10113)
!10119 = !DILocation(line: 191, column: 28, scope: !10113)
!10120 = !DILocation(line: 191, column: 14, scope: !10113)
!10121 = !DILocation(line: 191, column: 3, scope: !10113)
!10122 = !DILocation(line: 191, column: 7, scope: !10113)
!10123 = !DILocation(line: 191, column: 12, scope: !10113)
!10124 = !DILocation(line: 193, column: 26, scope: !10113)
!10125 = !DILocation(line: 193, column: 34, scope: !10113)
!10126 = !DILocation(line: 193, column: 3, scope: !10113)
!10127 = !DILocation(line: 194, column: 17, scope: !10113)
!10128 = !DILocation(line: 194, column: 3, scope: !10113)
!10129 = !DILocation(line: 195, column: 21, scope: !10113)
!10130 = !DILocation(line: 195, column: 3, scope: !10113)
!10131 = !DILocation(line: 196, column: 2, scope: !10113)
!10132 = !DILocalVariable(name: "iter_macro", scope: !10133, file: !3, line: 198, type: !2255)
!10133 = distinct !DILexicalBlock(scope: !10049, file: !3, line: 198, column: 2)
!10134 = !DILocation(line: 198, column: 2, scope: !10133)
!10135 = !DILocation(line: 198, column: 2, scope: !10136)
!10136 = distinct !DILexicalBlock(scope: !10133, file: !3, line: 198, column: 2)
!10137 = !DILocation(line: 198, column: 2, scope: !10138)
!10138 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 198, column: 2)
!10139 = !DILocation(line: 198, column: 2, scope: !10140)
!10140 = distinct !DILexicalBlock(scope: !10138, file: !3, line: 198, column: 2)
!10141 = !DILocation(line: 200, column: 8, scope: !10142)
!10142 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 200, column: 7)
!10143 = distinct !DILexicalBlock(scope: !10140, file: !3, line: 199, column: 2)
!10144 = !DILocation(line: 200, column: 13, scope: !10142)
!10145 = !DILocation(line: 200, column: 18, scope: !10142)
!10146 = !DILocation(line: 200, column: 7, scope: !10143)
!10147 = !DILocation(line: 201, column: 50, scope: !10148)
!10148 = distinct !DILexicalBlock(scope: !10142, file: !3, line: 200, column: 29)
!10149 = !DILocation(line: 201, column: 54, scope: !10148)
!10150 = !DILocation(line: 201, column: 60, scope: !10148)
!10151 = !DILocation(line: 201, column: 64, scope: !10148)
!10152 = !DILocation(line: 201, column: 71, scope: !10148)
!10153 = !DILocation(line: 201, column: 14, scope: !10148)
!10154 = !DILocation(line: 201, column: 12, scope: !10148)
!10155 = !DILocation(line: 202, column: 28, scope: !10148)
!10156 = !DILocation(line: 202, column: 11, scope: !10148)
!10157 = !DILocation(line: 202, column: 9, scope: !10148)
!10158 = !DILocation(line: 203, column: 17, scope: !10148)
!10159 = !DILocation(line: 203, column: 21, scope: !10148)
!10160 = !DILocation(line: 203, column: 28, scope: !10148)
!10161 = !DILocation(line: 203, column: 4, scope: !10148)
!10162 = !DILocation(line: 204, column: 3, scope: !10148)
!10163 = !DILocation(line: 206, column: 2, scope: !10140)
!10164 = distinct !{!10164, !10135, !10165}
!10165 = !DILocation(line: 206, column: 2, scope: !10136)
!10166 = !DILocation(line: 206, column: 2, scope: !10133)
!10167 = !DILocation(line: 208, column: 26, scope: !10168)
!10168 = distinct !DILexicalBlock(scope: !10049, file: !3, line: 208, column: 6)
!10169 = !DILocation(line: 208, column: 7, scope: !10168)
!10170 = !DILocation(line: 208, column: 6, scope: !10049)
!10171 = !DILocation(line: 209, column: 14, scope: !10172)
!10172 = distinct !DILexicalBlock(scope: !10168, file: !3, line: 208, column: 35)
!10173 = !DILocation(line: 210, column: 32, scope: !10172)
!10174 = !DILocation(line: 210, column: 17, scope: !10172)
!10175 = !DILocation(line: 210, column: 36, scope: !10172)
!10176 = !DILocation(line: 210, column: 3, scope: !10172)
!10177 = !DILocation(line: 211, column: 2, scope: !10172)
!10178 = !DILocation(line: 213, column: 21, scope: !10049)
!10179 = !DILocation(line: 213, column: 2, scope: !10049)
!10180 = !DILocation(line: 214, column: 1, scope: !10049)
!10181 = distinct !DISubprogram(name: "proxy_freejob", scope: !3, file: !3, line: 129, type: !561, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!10182 = !DILocalVariable(name: "pjv", arg: 1, scope: !10181, file: !3, line: 129, type: !239)
!10183 = !DILocation(line: 129, column: 33, scope: !10181)
!10184 = !DILocalVariable(name: "pj", scope: !10181, file: !3, line: 131, type: !10062)
!10185 = !DILocation(line: 131, column: 12, scope: !10181)
!10186 = !DILocation(line: 131, column: 17, scope: !10181)
!10187 = !DILocation(line: 133, column: 17, scope: !10181)
!10188 = !DILocation(line: 133, column: 21, scope: !10181)
!10189 = !DILocation(line: 133, column: 2, scope: !10181)
!10190 = !DILocation(line: 135, column: 2, scope: !10181)
!10191 = !DILocation(line: 135, column: 12, scope: !10181)
!10192 = !DILocation(line: 136, column: 1, scope: !10181)
!10193 = distinct !DISubprogram(name: "proxy_startjob", scope: !3, file: !3, line: 139, type: !10194, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!10194 = !DISubroutineType(types: !10195)
!10195 = !{null, !239, !10196, !10196, !1591}
!10196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !299, size: 64)
!10197 = !DILocalVariable(name: "pjv", arg: 1, scope: !10193, file: !3, line: 139, type: !239)
!10198 = !DILocation(line: 139, column: 34, scope: !10193)
!10199 = !DILocalVariable(name: "stop", arg: 2, scope: !10193, file: !3, line: 139, type: !10196)
!10200 = !DILocation(line: 139, column: 46, scope: !10193)
!10201 = !DILocalVariable(name: "do_update", arg: 3, scope: !10193, file: !3, line: 139, type: !10196)
!10202 = !DILocation(line: 139, column: 59, scope: !10193)
!10203 = !DILocalVariable(name: "progress", arg: 4, scope: !10193, file: !3, line: 139, type: !1591)
!10204 = !DILocation(line: 139, column: 77, scope: !10193)
!10205 = !DILocalVariable(name: "pj", scope: !10193, file: !3, line: 141, type: !10062)
!10206 = !DILocation(line: 141, column: 12, scope: !10193)
!10207 = !DILocation(line: 141, column: 17, scope: !10193)
!10208 = !DILocalVariable(name: "link", scope: !10193, file: !3, line: 142, type: !10088)
!10209 = !DILocation(line: 142, column: 12, scope: !10193)
!10210 = !DILocation(line: 144, column: 14, scope: !10211)
!10211 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 144, column: 2)
!10212 = !DILocation(line: 144, column: 18, scope: !10211)
!10213 = !DILocation(line: 144, column: 24, scope: !10211)
!10214 = !DILocation(line: 144, column: 12, scope: !10211)
!10215 = !DILocation(line: 144, column: 7, scope: !10211)
!10216 = !DILocation(line: 144, column: 31, scope: !10217)
!10217 = distinct !DILexicalBlock(scope: !10211, file: !3, line: 144, column: 2)
!10218 = !DILocation(line: 144, column: 2, scope: !10211)
!10219 = !DILocalVariable(name: "context", scope: !10220, file: !3, line: 145, type: !10084)
!10220 = distinct !DILexicalBlock(scope: !10217, file: !3, line: 144, column: 56)
!10221 = !DILocation(line: 145, column: 32, scope: !10220)
!10222 = !DILocation(line: 145, column: 42, scope: !10220)
!10223 = !DILocation(line: 145, column: 48, scope: !10220)
!10224 = !DILocation(line: 147, column: 31, scope: !10220)
!10225 = !DILocation(line: 147, column: 40, scope: !10220)
!10226 = !DILocation(line: 147, column: 46, scope: !10220)
!10227 = !DILocation(line: 147, column: 57, scope: !10220)
!10228 = !DILocation(line: 147, column: 3, scope: !10220)
!10229 = !DILocation(line: 148, column: 2, scope: !10220)
!10230 = !DILocation(line: 144, column: 44, scope: !10217)
!10231 = !DILocation(line: 144, column: 50, scope: !10217)
!10232 = !DILocation(line: 144, column: 42, scope: !10217)
!10233 = !DILocation(line: 144, column: 2, scope: !10217)
!10234 = distinct !{!10234, !10218, !10235}
!10235 = !DILocation(line: 148, column: 2, scope: !10211)
!10236 = !DILocation(line: 150, column: 7, scope: !10237)
!10237 = distinct !DILexicalBlock(scope: !10193, file: !3, line: 150, column: 6)
!10238 = !DILocation(line: 150, column: 6, scope: !10237)
!10239 = !DILocation(line: 150, column: 6, scope: !10193)
!10240 = !DILocation(line: 151, column: 3, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10237, file: !3, line: 150, column: 13)
!10242 = !DILocation(line: 151, column: 7, scope: !10241)
!10243 = !DILocation(line: 151, column: 12, scope: !10241)
!10244 = !DILocation(line: 152, column: 11, scope: !10241)
!10245 = !DILocation(line: 152, column: 3, scope: !10241)
!10246 = !DILocation(line: 153, column: 2, scope: !10241)
!10247 = !DILocation(line: 154, column: 1, scope: !10193)
!10248 = distinct !DISubprogram(name: "proxy_endjob", scope: !3, file: !3, line: 156, type: !561, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1784)
!10249 = !DILocalVariable(name: "pjv", arg: 1, scope: !10248, file: !3, line: 156, type: !239)
!10250 = !DILocation(line: 156, column: 32, scope: !10248)
!10251 = !DILocalVariable(name: "pj", scope: !10248, file: !3, line: 158, type: !10062)
!10252 = !DILocation(line: 158, column: 12, scope: !10248)
!10253 = !DILocation(line: 158, column: 17, scope: !10248)
!10254 = !DILocalVariable(name: "ed", scope: !10248, file: !3, line: 159, type: !1843)
!10255 = !DILocation(line: 159, column: 11, scope: !10248)
!10256 = !DILocation(line: 159, column: 42, scope: !10248)
!10257 = !DILocation(line: 159, column: 46, scope: !10248)
!10258 = !DILocation(line: 159, column: 16, scope: !10248)
!10259 = !DILocalVariable(name: "link", scope: !10248, file: !3, line: 160, type: !10088)
!10260 = !DILocation(line: 160, column: 12, scope: !10248)
!10261 = !DILocation(line: 162, column: 14, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !10248, file: !3, line: 162, column: 2)
!10263 = !DILocation(line: 162, column: 18, scope: !10262)
!10264 = !DILocation(line: 162, column: 24, scope: !10262)
!10265 = !DILocation(line: 162, column: 12, scope: !10262)
!10266 = !DILocation(line: 162, column: 7, scope: !10262)
!10267 = !DILocation(line: 162, column: 31, scope: !10268)
!10268 = distinct !DILexicalBlock(scope: !10262, file: !3, line: 162, column: 2)
!10269 = !DILocation(line: 162, column: 2, scope: !10262)
!10270 = !DILocation(line: 163, column: 38, scope: !10271)
!10271 = distinct !DILexicalBlock(scope: !10268, file: !3, line: 162, column: 56)
!10272 = !DILocation(line: 163, column: 44, scope: !10271)
!10273 = !DILocation(line: 163, column: 50, scope: !10271)
!10274 = !DILocation(line: 163, column: 54, scope: !10271)
!10275 = !DILocation(line: 163, column: 3, scope: !10271)
!10276 = !DILocation(line: 164, column: 2, scope: !10271)
!10277 = !DILocation(line: 162, column: 44, scope: !10268)
!10278 = !DILocation(line: 162, column: 50, scope: !10268)
!10279 = !DILocation(line: 162, column: 42, scope: !10268)
!10280 = !DILocation(line: 162, column: 2, scope: !10268)
!10281 = distinct !{!10281, !10269, !10282}
!10282 = !DILocation(line: 164, column: 2, scope: !10262)
!10283 = !DILocation(line: 166, column: 27, scope: !10248)
!10284 = !DILocation(line: 166, column: 31, scope: !10248)
!10285 = !DILocation(line: 166, column: 39, scope: !10248)
!10286 = !DILocation(line: 166, column: 43, scope: !10248)
!10287 = !DILocation(line: 166, column: 2, scope: !10248)
!10288 = !DILocation(line: 168, column: 48, scope: !10248)
!10289 = !DILocation(line: 168, column: 52, scope: !10248)
!10290 = !DILocation(line: 168, column: 2, scope: !10248)
!10291 = !DILocation(line: 169, column: 1, scope: !10248)
