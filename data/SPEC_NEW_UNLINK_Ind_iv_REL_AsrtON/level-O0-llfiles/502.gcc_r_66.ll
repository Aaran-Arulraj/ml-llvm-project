; ModuleID = 'cplus-dem.c'
source_filename = "cplus-dem.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.demangler_engine = type { i8*, i32, i8* }
%struct.optable = type { i8*, i8*, i32 }
%struct.string = type { i8*, i8*, i8* }
%struct.work_stuff = type { i32, i8**, i8**, i8**, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, %struct.string*, i32 }

@current_demangling_style = dso_local global i32 256, align 4, !dbg !0
@cplus_markers = internal global [4 x i8] c"$.$\00", align 1, !dbg !93
@.str = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Demangling disabled\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"Automatic selection based on executable\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"gnu\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"GNU (g++) style demangling\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"lucid\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Lucid (lcc) style demangling\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"arm\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"ARM style demangling\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"hp\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"HP (aCC) style demangling\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"edg\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"EDG style demangling\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"gnu-v3\00", align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"GNU (g++) V3 ABI-style demangling\00", align 1
@.str.16 = private unnamed_addr constant [5 x i8] c"java\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"Java style demangling\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"gnat\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"GNAT style demangling\00", align 1
@libiberty_demanglers = dso_local constant [11 x %struct.demangler_engine] [%struct.demangler_engine { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i32 -1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 256, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i32 512, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i32 0, i32 0), i32 1024, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i32 0, i32 0), i32 2048, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i32 4096, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0), i32 8192, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i32 0, i32 0), i32 16384, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0) }, %struct.demangler_engine { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), i32 32768, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.demangler_engine zeroinitializer], align 16, !dbg !68
@.str.20 = private unnamed_addr constant [10 x i8] c"operator \00", align 1
@_sch_istable = external dso_local constant [256 x i16], align 16
@optable = internal constant [79 x %struct.optable] [%struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.75, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.77, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.94, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.98, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.106, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.114, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.114, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.117, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.117, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.120, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.120, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.126, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.126, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.128, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.130, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.130, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.133, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.148, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.150, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.150, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.155, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.155, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.155, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.160, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.169, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.169, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.171, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.175, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.175, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i32 0, i32 0), i32 0 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.179, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.180, i32 0, i32 0), i32 2 }, %struct.optable { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.182, i32 0, i32 0), i32 2 }], align 16, !dbg !98
@.str.21 = private unnamed_addr constant [9 x i8] c"operator\00", align 1
@.str.22 = private unnamed_addr constant [8 x i8] c"assign_\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"_ada_\00", align 1
@ada_demangle.operators = internal constant [20 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.60, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0)], [2 x i8*] zeroinitializer], align 16, !dbg !83
@.str.26 = private unnamed_addr constant [5 x i8] c"Oabs\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"abs\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"Oand\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"and\00", align 1
@.str.30 = private unnamed_addr constant [5 x i8] c"Omod\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"mod\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"Onot\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"not\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"Oor\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"Orem\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"rem\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"Oxor\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"xor\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"Oeq\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"One\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"/=\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"Olt\00", align 1
@.str.44 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c"Ole\00", align 1
@.str.46 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"Ogt\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.49 = private unnamed_addr constant [4 x i8] c"Oge\00", align 1
@.str.50 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c"Oadd\00", align 1
@.str.52 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"Osubtract\00", align 1
@.str.54 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.55 = private unnamed_addr constant [8 x i8] c"Oconcat\00", align 1
@.str.56 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Omultiply\00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.59 = private unnamed_addr constant [8 x i8] c"Odivide\00", align 1
@.str.60 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"Oexpon\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"**\00", align 1
@.str.63 = private unnamed_addr constant [6 x i8] c"elabb\00", align 1
@.str.64 = private unnamed_addr constant [11 x i8] c"'Elab_Body\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"elabs\00", align 1
@.str.66 = private unnamed_addr constant [11 x i8] c"'Elab_Spec\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"<%s>\00", align 1
@.str.68 = private unnamed_addr constant [3 x i8] c"nw\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c" new\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.71 = private unnamed_addr constant [8 x i8] c" delete\00", align 1
@.str.72 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@.str.73 = private unnamed_addr constant [7 x i8] c"delete\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c"vn\00", align 1
@.str.75 = private unnamed_addr constant [8 x i8] c" new []\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"vd\00", align 1
@.str.77 = private unnamed_addr constant [11 x i8] c" delete []\00", align 1
@.str.78 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"ne\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.81 = private unnamed_addr constant [3 x i8] c"eq\00", align 1
@.str.82 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@.str.83 = private unnamed_addr constant [3 x i8] c"ge\00", align 1
@.str.84 = private unnamed_addr constant [3 x i8] c"gt\00", align 1
@.str.85 = private unnamed_addr constant [3 x i8] c"le\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"plus\00", align 1
@.str.88 = private unnamed_addr constant [3 x i8] c"pl\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"apl\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.91 = private unnamed_addr constant [6 x i8] c"minus\00", align 1
@.str.92 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c"ami\00", align 1
@.str.94 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"mult\00", align 1
@.str.96 = private unnamed_addr constant [3 x i8] c"ml\00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"amu\00", align 1
@.str.98 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"aml\00", align 1
@.str.100 = private unnamed_addr constant [8 x i8] c"convert\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c"negate\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"trunc_mod\00", align 1
@.str.103 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.104 = private unnamed_addr constant [3 x i8] c"md\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"amd\00", align 1
@.str.106 = private unnamed_addr constant [3 x i8] c"%=\00", align 1
@.str.107 = private unnamed_addr constant [10 x i8] c"trunc_div\00", align 1
@.str.108 = private unnamed_addr constant [3 x i8] c"dv\00", align 1
@.str.109 = private unnamed_addr constant [4 x i8] c"adv\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"truth_andif\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"aa\00", align 1
@.str.113 = private unnamed_addr constant [11 x i8] c"truth_orif\00", align 1
@.str.114 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@.str.115 = private unnamed_addr constant [3 x i8] c"oo\00", align 1
@.str.116 = private unnamed_addr constant [10 x i8] c"truth_not\00", align 1
@.str.117 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@.str.118 = private unnamed_addr constant [3 x i8] c"nt\00", align 1
@.str.119 = private unnamed_addr constant [14 x i8] c"postincrement\00", align 1
@.str.120 = private unnamed_addr constant [3 x i8] c"++\00", align 1
@.str.121 = private unnamed_addr constant [3 x i8] c"pp\00", align 1
@.str.122 = private unnamed_addr constant [14 x i8] c"postdecrement\00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.124 = private unnamed_addr constant [3 x i8] c"mm\00", align 1
@.str.125 = private unnamed_addr constant [8 x i8] c"bit_ior\00", align 1
@.str.126 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.127 = private unnamed_addr constant [4 x i8] c"aor\00", align 1
@.str.128 = private unnamed_addr constant [3 x i8] c"|=\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"bit_xor\00", align 1
@.str.130 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"er\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"aer\00", align 1
@.str.133 = private unnamed_addr constant [3 x i8] c"^=\00", align 1
@.str.134 = private unnamed_addr constant [8 x i8] c"bit_and\00", align 1
@.str.135 = private unnamed_addr constant [3 x i8] c"ad\00", align 1
@.str.136 = private unnamed_addr constant [4 x i8] c"aad\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c"&=\00", align 1
@.str.138 = private unnamed_addr constant [8 x i8] c"bit_not\00", align 1
@.str.139 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.140 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@.str.141 = private unnamed_addr constant [5 x i8] c"call\00", align 1
@.str.142 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.144 = private unnamed_addr constant [8 x i8] c"alshift\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@.str.146 = private unnamed_addr constant [3 x i8] c"ls\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"als\00", align 1
@.str.148 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@.str.149 = private unnamed_addr constant [8 x i8] c"arshift\00", align 1
@.str.150 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"rs\00", align 1
@.str.152 = private unnamed_addr constant [4 x i8] c"ars\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@.str.154 = private unnamed_addr constant [10 x i8] c"component\00", align 1
@.str.155 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.156 = private unnamed_addr constant [3 x i8] c"pt\00", align 1
@.str.157 = private unnamed_addr constant [3 x i8] c"rf\00", align 1
@.str.158 = private unnamed_addr constant [9 x i8] c"indirect\00", align 1
@.str.159 = private unnamed_addr constant [12 x i8] c"method_call\00", align 1
@.str.160 = private unnamed_addr constant [5 x i8] c"->()\00", align 1
@.str.161 = private unnamed_addr constant [5 x i8] c"addr\00", align 1
@.str.162 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@.str.163 = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.164 = private unnamed_addr constant [3 x i8] c"vc\00", align 1
@.str.165 = private unnamed_addr constant [9 x i8] c"compound\00", align 1
@.str.166 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.167 = private unnamed_addr constant [3 x i8] c"cm\00", align 1
@.str.168 = private unnamed_addr constant [5 x i8] c"cond\00", align 1
@.str.169 = private unnamed_addr constant [3 x i8] c"?:\00", align 1
@.str.170 = private unnamed_addr constant [3 x i8] c"cn\00", align 1
@.str.171 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@.str.172 = private unnamed_addr constant [3 x i8] c">?\00", align 1
@.str.173 = private unnamed_addr constant [3 x i8] c"mx\00", align 1
@.str.174 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.175 = private unnamed_addr constant [3 x i8] c"<?\00", align 1
@.str.176 = private unnamed_addr constant [3 x i8] c"mn\00", align 1
@.str.177 = private unnamed_addr constant [4 x i8] c"nop\00", align 1
@.str.178 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.179 = private unnamed_addr constant [3 x i8] c"rm\00", align 1
@.str.180 = private unnamed_addr constant [4 x i8] c"->*\00", align 1
@.str.181 = private unnamed_addr constant [3 x i8] c"sz\00", align 1
@.str.182 = private unnamed_addr constant [8 x i8] c"sizeof \00", align 1
@.str.183 = private unnamed_addr constant [30 x i8] c"global constructors keyed to \00", align 1
@.str.184 = private unnamed_addr constant [29 x i8] c"global destructors keyed to \00", align 1
@.str.185 = private unnamed_addr constant [17 x i8] c"import stub for \00", align 1
@.str.186 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"::\00", align 1
@.str.188 = private unnamed_addr constant [15 x i8] c" virtual table\00", align 1
@.str.189 = private unnamed_addr constant [13 x i8] c"0123456789Qt\00", align 1
@.str.190 = private unnamed_addr constant [9 x i8] c"_GLOBAL_\00", align 1
@.str.191 = private unnamed_addr constant [12 x i8] c"{anonymous}\00", align 1
@.str.192 = private unnamed_addr constant [9 x i8] c"__thunk_\00", align 1
@.str.193 = private unnamed_addr constant [39 x i8] c"virtual function thunk (delta:%d) for \00", align 1
@.str.194 = private unnamed_addr constant [4 x i8] c"__t\00", align 1
@.str.195 = private unnamed_addr constant [16 x i8] c" type_info node\00", align 1
@.str.196 = private unnamed_addr constant [20 x i8] c" type_info function\00", align 1
@.str.197 = private unnamed_addr constant [9 x i8] c"JArray1Z\00", align 1
@.str.198 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.199 = private unnamed_addr constant [4 x i8] c"T%d\00", align 1
@.str.200 = private unnamed_addr constant [11 x i8] c"template <\00", align 1
@.str.201 = private unnamed_addr constant [6 x i8] c"class\00", align 1
@.str.202 = private unnamed_addr constant [8 x i8] c"> class\00", align 1
@.str.203 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.204 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.205 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.206 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.207 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.208 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.209 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.210 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.211 = private unnamed_addr constant [7 x i8] c"_imp__\00", align 1
@.str.212 = private unnamed_addr constant [7 x i8] c"__imp_\00", align 1
@.str.213 = private unnamed_addr constant [8 x i8] c"__std__\00", align 1
@.str.214 = private unnamed_addr constant [8 x i8] c"__sti__\00", align 1
@.str.215 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.216 = private unnamed_addr constant [3 x i8] c"__\00", align 1
@.str.217 = private unnamed_addr constant [2 x i8] c",\00", align 1
@.str.218 = private unnamed_addr constant [12 x i8] c"-2147483648\00", align 1
@char_str = internal global [2 x i8] zeroinitializer, align 1, !dbg !110
@.str.219 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"__pt__\00", align 1
@.str.221 = private unnamed_addr constant [7 x i8] c"__tm__\00", align 1
@.str.222 = private unnamed_addr constant [7 x i8] c"__ps__\00", align 1
@.str.223 = private unnamed_addr constant [4 x i8] c"__S\00", align 1
@.str.224 = private unnamed_addr constant [9 x i8] c"__vtbl__\00", align 1
@.str.225 = private unnamed_addr constant [5 x i8] c"__ct\00", align 1
@.str.226 = private unnamed_addr constant [5 x i8] c"__dt\00", align 1
@.str.227 = private unnamed_addr constant [8 x i8] c" static\00", align 1
@.str.228 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.str.229 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.230 = private unnamed_addr constant [6 x i8] c"const\00", align 1
@.str.231 = private unnamed_addr constant [9 x i8] c"volatile\00", align 1
@.str.232 = private unnamed_addr constant [11 x i8] c"__restrict\00", align 1
@.str.233 = private unnamed_addr constant [15 x i8] c"const volatile\00", align 1
@.str.234 = private unnamed_addr constant [17 x i8] c"const __restrict\00", align 1
@.str.235 = private unnamed_addr constant [20 x i8] c"volatile __restrict\00", align 1
@.str.236 = private unnamed_addr constant [26 x i8] c"const volatile __restrict\00", align 1
@.str.237 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.238 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.239 = private unnamed_addr constant [9 x i8] c"unsigned\00", align 1
@.str.240 = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@.str.241 = private unnamed_addr constant [10 x i8] c"__complex\00", align 1
@.str.242 = private unnamed_addr constant [10 x i8] c"long long\00", align 1
@.str.243 = private unnamed_addr constant [5 x i8] c"long\00", align 1
@.str.244 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.245 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.246 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@.str.247 = private unnamed_addr constant [5 x i8] c"char\00", align 1
@.str.248 = private unnamed_addr constant [8 x i8] c"wchar_t\00", align 1
@.str.249 = private unnamed_addr constant [12 x i8] c"long double\00", align 1
@.str.250 = private unnamed_addr constant [7 x i8] c"double\00", align 1
@.str.251 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.252 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.253 = private unnamed_addr constant [8 x i8] c"int%u_t\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_cplus_marker_for_demangling(i32 %ch) #0 !dbg !118 {
entry:
  %ch.addr = alloca i32, align 4
  store i32 %ch, i32* %ch.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ch.addr, metadata !121, metadata !DIExpression()), !dbg !122
  %0 = load i32, i32* %ch.addr, align 4, !dbg !123
  %conv = trunc i32 %0 to i8, !dbg !123
  store i8 %conv, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), align 1, !dbg !124
  ret void, !dbg !125
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @cplus_demangle_opname(i8* %opname, i8* %result, i32 %options) #0 !dbg !126 {
entry:
  %opname.addr = alloca i8*, align 8
  %result.addr = alloca i8*, align 8
  %options.addr = alloca i32, align 4
  %len = alloca i32, align 4
  %len1 = alloca i32, align 4
  %ret = alloca i32, align 4
  %type = alloca %struct.string, align 8
  %work = alloca [1 x %struct.work_stuff], align 16
  %tem = alloca i8*, align 8
  %i = alloca i64, align 8
  %i86 = alloca i64, align 8
  %i142 = alloca i64, align 8
  %i172 = alloca i64, align 8
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !129, metadata !DIExpression()), !dbg !130
  store i8* %result, i8** %result.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %result.addr, metadata !131, metadata !DIExpression()), !dbg !132
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !133, metadata !DIExpression()), !dbg !134
  call void @llvm.dbg.declare(metadata i32* %len, metadata !135, metadata !DIExpression()), !dbg !136
  call void @llvm.dbg.declare(metadata i32* %len1, metadata !137, metadata !DIExpression()), !dbg !138
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !139, metadata !DIExpression()), !dbg !140
  call void @llvm.dbg.declare(metadata %struct.string* %type, metadata !141, metadata !DIExpression()), !dbg !142
  call void @llvm.dbg.declare(metadata [1 x %struct.work_stuff]* %work, metadata !143, metadata !DIExpression()), !dbg !170
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !171, metadata !DIExpression()), !dbg !172
  %0 = load i8*, i8** %opname.addr, align 8, !dbg !173
  %call = call i64 @strlen(i8* %0), !dbg !174
  %conv = trunc i64 %call to i32, !dbg !174
  store i32 %conv, i32* %len, align 4, !dbg !175
  %1 = load i8*, i8** %result.addr, align 8, !dbg !176
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !176
  store i8 0, i8* %arrayidx, align 1, !dbg !177
  store i32 0, i32* %ret, align 4, !dbg !178
  %arraydecay = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !179
  %2 = bitcast %struct.work_stuff* %arraydecay to i8*, !dbg !179
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 112, i1 false), !dbg !179
  %3 = load i32, i32* %options.addr, align 4, !dbg !180
  %arraydecay1 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !181
  %options2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay1, i32 0, i32 0, !dbg !181
  store i32 %3, i32* %options2, align 16, !dbg !182
  %4 = load i8*, i8** %opname.addr, align 8, !dbg !183
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !183
  %5 = load i8, i8* %arrayidx3, align 1, !dbg !183
  %conv4 = sext i8 %5 to i32, !dbg !183
  %cmp = icmp eq i32 %conv4, 95, !dbg !185
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !186

land.lhs.true:                                    ; preds = %entry
  %6 = load i8*, i8** %opname.addr, align 8, !dbg !187
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i64 1, !dbg !187
  %7 = load i8, i8* %arrayidx6, align 1, !dbg !187
  %conv7 = sext i8 %7 to i32, !dbg !187
  %cmp8 = icmp eq i32 %conv7, 95, !dbg !188
  br i1 %cmp8, label %land.lhs.true10, label %if.else, !dbg !189

land.lhs.true10:                                  ; preds = %land.lhs.true
  %8 = load i8*, i8** %opname.addr, align 8, !dbg !190
  %arrayidx11 = getelementptr inbounds i8, i8* %8, i64 2, !dbg !190
  %9 = load i8, i8* %arrayidx11, align 1, !dbg !190
  %conv12 = sext i8 %9 to i32, !dbg !190
  %cmp13 = icmp eq i32 %conv12, 111, !dbg !191
  br i1 %cmp13, label %land.lhs.true15, label %if.else, !dbg !192

land.lhs.true15:                                  ; preds = %land.lhs.true10
  %10 = load i8*, i8** %opname.addr, align 8, !dbg !193
  %arrayidx16 = getelementptr inbounds i8, i8* %10, i64 3, !dbg !193
  %11 = load i8, i8* %arrayidx16, align 1, !dbg !193
  %conv17 = sext i8 %11 to i32, !dbg !193
  %cmp18 = icmp eq i32 %conv17, 112, !dbg !194
  br i1 %cmp18, label %if.then, label %if.else, !dbg !195

if.then:                                          ; preds = %land.lhs.true15
  %12 = load i8*, i8** %opname.addr, align 8, !dbg !196
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 4, !dbg !198
  store i8* %add.ptr, i8** %tem, align 8, !dbg !199
  %arraydecay20 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !200
  %call21 = call i32 @do_type(%struct.work_stuff* %arraydecay20, i8** %tem, %struct.string* %type), !dbg !202
  %tobool = icmp ne i32 %call21, 0, !dbg !202
  br i1 %tobool, label %if.then22, label %if.end, !dbg !203

if.then22:                                        ; preds = %if.then
  %13 = load i8*, i8** %result.addr, align 8, !dbg !204
  %call23 = call i8* @strcat(i8* %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0)), !dbg !206
  %14 = load i8*, i8** %result.addr, align 8, !dbg !207
  %b = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 0, !dbg !208
  %15 = load i8*, i8** %b, align 8, !dbg !208
  %p = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 1, !dbg !209
  %16 = load i8*, i8** %p, align 8, !dbg !209
  %b24 = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 0, !dbg !210
  %17 = load i8*, i8** %b24, align 8, !dbg !210
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64, !dbg !211
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64, !dbg !211
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !211
  %call25 = call i8* @strncat(i8* %14, i8* %15, i64 %sub.ptr.sub), !dbg !212
  call void @string_delete(%struct.string* %type), !dbg !213
  store i32 1, i32* %ret, align 4, !dbg !214
  br label %if.end, !dbg !215

if.end:                                           ; preds = %if.then22, %if.then
  br label %if.end233, !dbg !216

if.else:                                          ; preds = %land.lhs.true15, %land.lhs.true10, %land.lhs.true, %entry
  %18 = load i8*, i8** %opname.addr, align 8, !dbg !217
  %arrayidx26 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !217
  %19 = load i8, i8* %arrayidx26, align 1, !dbg !217
  %conv27 = sext i8 %19 to i32, !dbg !217
  %cmp28 = icmp eq i32 %conv27, 95, !dbg !219
  br i1 %cmp28, label %land.lhs.true30, label %if.else114, !dbg !220

land.lhs.true30:                                  ; preds = %if.else
  %20 = load i8*, i8** %opname.addr, align 8, !dbg !221
  %arrayidx31 = getelementptr inbounds i8, i8* %20, i64 1, !dbg !221
  %21 = load i8, i8* %arrayidx31, align 1, !dbg !221
  %conv32 = sext i8 %21 to i32, !dbg !221
  %cmp33 = icmp eq i32 %conv32, 95, !dbg !222
  br i1 %cmp33, label %land.lhs.true35, label %if.else114, !dbg !223

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %22 = load i8*, i8** %opname.addr, align 8, !dbg !224
  %arrayidx36 = getelementptr inbounds i8, i8* %22, i64 2, !dbg !224
  %23 = load i8, i8* %arrayidx36, align 1, !dbg !224
  %conv37 = zext i8 %23 to i32, !dbg !224
  %and = and i32 %conv37, 255, !dbg !224
  %idxprom = sext i32 %and to i64, !dbg !224
  %arrayidx38 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !224
  %24 = load i16, i16* %arrayidx38, align 2, !dbg !224
  %conv39 = zext i16 %24 to i32, !dbg !224
  %and40 = and i32 %conv39, 8, !dbg !224
  %tobool41 = icmp ne i32 %and40, 0, !dbg !224
  br i1 %tobool41, label %land.lhs.true42, label %if.else114, !dbg !225

land.lhs.true42:                                  ; preds = %land.lhs.true35
  %25 = load i8*, i8** %opname.addr, align 8, !dbg !226
  %arrayidx43 = getelementptr inbounds i8, i8* %25, i64 3, !dbg !226
  %26 = load i8, i8* %arrayidx43, align 1, !dbg !226
  %conv44 = zext i8 %26 to i32, !dbg !226
  %and45 = and i32 %conv44, 255, !dbg !226
  %idxprom46 = sext i32 %and45 to i64, !dbg !226
  %arrayidx47 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom46, !dbg !226
  %27 = load i16, i16* %arrayidx47, align 2, !dbg !226
  %conv48 = zext i16 %27 to i32, !dbg !226
  %and49 = and i32 %conv48, 8, !dbg !226
  %tobool50 = icmp ne i32 %and49, 0, !dbg !226
  br i1 %tobool50, label %if.then51, label %if.else114, !dbg !227

if.then51:                                        ; preds = %land.lhs.true42
  %28 = load i8*, i8** %opname.addr, align 8, !dbg !228
  %arrayidx52 = getelementptr inbounds i8, i8* %28, i64 4, !dbg !228
  %29 = load i8, i8* %arrayidx52, align 1, !dbg !228
  %conv53 = sext i8 %29 to i32, !dbg !228
  %cmp54 = icmp eq i32 %conv53, 0, !dbg !231
  br i1 %cmp54, label %if.then56, label %if.else75, !dbg !232

if.then56:                                        ; preds = %if.then51
  call void @llvm.dbg.declare(metadata i64* %i, metadata !233, metadata !DIExpression()), !dbg !238
  store i64 0, i64* %i, align 8, !dbg !239
  br label %for.cond, !dbg !241

for.cond:                                         ; preds = %for.inc, %if.then56
  %30 = load i64, i64* %i, align 8, !dbg !242
  %cmp57 = icmp ult i64 %30, 79, !dbg !244
  br i1 %cmp57, label %for.body, label %for.end, !dbg !245

for.body:                                         ; preds = %for.cond
  %31 = load i64, i64* %i, align 8, !dbg !246
  %arrayidx59 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %31, !dbg !249
  %in = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx59, i32 0, i32 0, !dbg !250
  %32 = load i8*, i8** %in, align 8, !dbg !250
  %call60 = call i64 @strlen(i8* %32), !dbg !251
  %cmp61 = icmp eq i64 %call60, 2, !dbg !252
  br i1 %cmp61, label %land.lhs.true63, label %if.end74, !dbg !253

land.lhs.true63:                                  ; preds = %for.body
  %33 = load i64, i64* %i, align 8, !dbg !254
  %arrayidx64 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %33, !dbg !255
  %in65 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx64, i32 0, i32 0, !dbg !256
  %34 = load i8*, i8** %in65, align 8, !dbg !256
  %35 = load i8*, i8** %opname.addr, align 8, !dbg !257
  %add.ptr66 = getelementptr inbounds i8, i8* %35, i64 2, !dbg !258
  %call67 = call i32 @memcmp(i8* %34, i8* %add.ptr66, i64 2), !dbg !259
  %cmp68 = icmp eq i32 %call67, 0, !dbg !260
  br i1 %cmp68, label %if.then70, label %if.end74, !dbg !261

if.then70:                                        ; preds = %land.lhs.true63
  %36 = load i8*, i8** %result.addr, align 8, !dbg !262
  %call71 = call i8* @strcat(i8* %36, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !264
  %37 = load i8*, i8** %result.addr, align 8, !dbg !265
  %38 = load i64, i64* %i, align 8, !dbg !266
  %arrayidx72 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %38, !dbg !267
  %out = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx72, i32 0, i32 1, !dbg !268
  %39 = load i8*, i8** %out, align 8, !dbg !268
  %call73 = call i8* @strcat(i8* %37, i8* %39), !dbg !269
  store i32 1, i32* %ret, align 4, !dbg !270
  br label %for.end, !dbg !271

if.end74:                                         ; preds = %land.lhs.true63, %for.body
  br label %for.inc, !dbg !272

for.inc:                                          ; preds = %if.end74
  %40 = load i64, i64* %i, align 8, !dbg !273
  %inc = add i64 %40, 1, !dbg !273
  store i64 %inc, i64* %i, align 8, !dbg !273
  br label %for.cond, !dbg !274, !llvm.loop !275

for.end:                                          ; preds = %if.then70, %for.cond
  br label %if.end113, !dbg !277

if.else75:                                        ; preds = %if.then51
  %41 = load i8*, i8** %opname.addr, align 8, !dbg !278
  %arrayidx76 = getelementptr inbounds i8, i8* %41, i64 2, !dbg !278
  %42 = load i8, i8* %arrayidx76, align 1, !dbg !278
  %conv77 = sext i8 %42 to i32, !dbg !278
  %cmp78 = icmp eq i32 %conv77, 97, !dbg !281
  br i1 %cmp78, label %land.lhs.true80, label %if.end112, !dbg !282

land.lhs.true80:                                  ; preds = %if.else75
  %43 = load i8*, i8** %opname.addr, align 8, !dbg !283
  %arrayidx81 = getelementptr inbounds i8, i8* %43, i64 5, !dbg !283
  %44 = load i8, i8* %arrayidx81, align 1, !dbg !283
  %conv82 = sext i8 %44 to i32, !dbg !283
  %cmp83 = icmp eq i32 %conv82, 0, !dbg !284
  br i1 %cmp83, label %if.then85, label %if.end112, !dbg !285

if.then85:                                        ; preds = %land.lhs.true80
  call void @llvm.dbg.declare(metadata i64* %i86, metadata !286, metadata !DIExpression()), !dbg !288
  store i64 0, i64* %i86, align 8, !dbg !289
  br label %for.cond87, !dbg !291

for.cond87:                                       ; preds = %for.inc109, %if.then85
  %45 = load i64, i64* %i86, align 8, !dbg !292
  %cmp88 = icmp ult i64 %45, 79, !dbg !294
  br i1 %cmp88, label %for.body90, label %for.end111, !dbg !295

for.body90:                                       ; preds = %for.cond87
  %46 = load i64, i64* %i86, align 8, !dbg !296
  %arrayidx91 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %46, !dbg !299
  %in92 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx91, i32 0, i32 0, !dbg !300
  %47 = load i8*, i8** %in92, align 8, !dbg !300
  %call93 = call i64 @strlen(i8* %47), !dbg !301
  %cmp94 = icmp eq i64 %call93, 3, !dbg !302
  br i1 %cmp94, label %land.lhs.true96, label %if.end108, !dbg !303

land.lhs.true96:                                  ; preds = %for.body90
  %48 = load i64, i64* %i86, align 8, !dbg !304
  %arrayidx97 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %48, !dbg !305
  %in98 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx97, i32 0, i32 0, !dbg !306
  %49 = load i8*, i8** %in98, align 8, !dbg !306
  %50 = load i8*, i8** %opname.addr, align 8, !dbg !307
  %add.ptr99 = getelementptr inbounds i8, i8* %50, i64 2, !dbg !308
  %call100 = call i32 @memcmp(i8* %49, i8* %add.ptr99, i64 3), !dbg !309
  %cmp101 = icmp eq i32 %call100, 0, !dbg !310
  br i1 %cmp101, label %if.then103, label %if.end108, !dbg !311

if.then103:                                       ; preds = %land.lhs.true96
  %51 = load i8*, i8** %result.addr, align 8, !dbg !312
  %call104 = call i8* @strcat(i8* %51, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !314
  %52 = load i8*, i8** %result.addr, align 8, !dbg !315
  %53 = load i64, i64* %i86, align 8, !dbg !316
  %arrayidx105 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %53, !dbg !317
  %out106 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx105, i32 0, i32 1, !dbg !318
  %54 = load i8*, i8** %out106, align 8, !dbg !318
  %call107 = call i8* @strcat(i8* %52, i8* %54), !dbg !319
  store i32 1, i32* %ret, align 4, !dbg !320
  br label %for.end111, !dbg !321

if.end108:                                        ; preds = %land.lhs.true96, %for.body90
  br label %for.inc109, !dbg !322

for.inc109:                                       ; preds = %if.end108
  %55 = load i64, i64* %i86, align 8, !dbg !323
  %inc110 = add i64 %55, 1, !dbg !323
  store i64 %inc110, i64* %i86, align 8, !dbg !323
  br label %for.cond87, !dbg !324, !llvm.loop !325

for.end111:                                       ; preds = %if.then103, %for.cond87
  br label %if.end112, !dbg !327

if.end112:                                        ; preds = %for.end111, %land.lhs.true80, %if.else75
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  br label %if.end232, !dbg !328

if.else114:                                       ; preds = %land.lhs.true42, %land.lhs.true35, %land.lhs.true30, %if.else
  %56 = load i32, i32* %len, align 4, !dbg !329
  %cmp115 = icmp sge i32 %56, 3, !dbg !331
  br i1 %cmp115, label %land.lhs.true117, label %if.else202, !dbg !332

land.lhs.true117:                                 ; preds = %if.else114
  %57 = load i8*, i8** %opname.addr, align 8, !dbg !333
  %arrayidx118 = getelementptr inbounds i8, i8* %57, i64 0, !dbg !333
  %58 = load i8, i8* %arrayidx118, align 1, !dbg !333
  %conv119 = sext i8 %58 to i32, !dbg !333
  %cmp120 = icmp eq i32 %conv119, 111, !dbg !334
  br i1 %cmp120, label %land.lhs.true122, label %if.else202, !dbg !335

land.lhs.true122:                                 ; preds = %land.lhs.true117
  %59 = load i8*, i8** %opname.addr, align 8, !dbg !336
  %arrayidx123 = getelementptr inbounds i8, i8* %59, i64 1, !dbg !336
  %60 = load i8, i8* %arrayidx123, align 1, !dbg !336
  %conv124 = sext i8 %60 to i32, !dbg !336
  %cmp125 = icmp eq i32 %conv124, 112, !dbg !337
  br i1 %cmp125, label %land.lhs.true127, label %if.else202, !dbg !338

land.lhs.true127:                                 ; preds = %land.lhs.true122
  %61 = load i8*, i8** %opname.addr, align 8, !dbg !339
  %arrayidx128 = getelementptr inbounds i8, i8* %61, i64 2, !dbg !339
  %62 = load i8, i8* %arrayidx128, align 1, !dbg !339
  %conv129 = sext i8 %62 to i32, !dbg !339
  %call130 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv129), !dbg !340
  %cmp131 = icmp ne i8* %call130, null, !dbg !341
  br i1 %cmp131, label %if.then133, label %if.else202, !dbg !342

if.then133:                                       ; preds = %land.lhs.true127
  %63 = load i32, i32* %len, align 4, !dbg !343
  %cmp134 = icmp sge i32 %63, 10, !dbg !346
  br i1 %cmp134, label %land.lhs.true136, label %if.else171, !dbg !347

land.lhs.true136:                                 ; preds = %if.then133
  %64 = load i8*, i8** %opname.addr, align 8, !dbg !348
  %add.ptr137 = getelementptr inbounds i8, i8* %64, i64 3, !dbg !349
  %call138 = call i32 @memcmp(i8* %add.ptr137, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i64 7), !dbg !350
  %cmp139 = icmp eq i32 %call138, 0, !dbg !351
  br i1 %cmp139, label %if.then141, label %if.else171, !dbg !352

if.then141:                                       ; preds = %land.lhs.true136
  call void @llvm.dbg.declare(metadata i64* %i142, metadata !353, metadata !DIExpression()), !dbg !355
  store i64 0, i64* %i142, align 8, !dbg !356
  br label %for.cond143, !dbg !358

for.cond143:                                      ; preds = %for.inc168, %if.then141
  %65 = load i64, i64* %i142, align 8, !dbg !359
  %cmp144 = icmp ult i64 %65, 79, !dbg !361
  br i1 %cmp144, label %for.body146, label %for.end170, !dbg !362

for.body146:                                      ; preds = %for.cond143
  %66 = load i32, i32* %len, align 4, !dbg !363
  %sub = sub nsw i32 %66, 10, !dbg !365
  store i32 %sub, i32* %len1, align 4, !dbg !366
  %67 = load i64, i64* %i142, align 8, !dbg !367
  %arrayidx147 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %67, !dbg !369
  %in148 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx147, i32 0, i32 0, !dbg !370
  %68 = load i8*, i8** %in148, align 8, !dbg !370
  %call149 = call i64 @strlen(i8* %68), !dbg !371
  %conv150 = trunc i64 %call149 to i32, !dbg !372
  %69 = load i32, i32* %len1, align 4, !dbg !373
  %cmp151 = icmp eq i32 %conv150, %69, !dbg !374
  br i1 %cmp151, label %land.lhs.true153, label %if.end167, !dbg !375

land.lhs.true153:                                 ; preds = %for.body146
  %70 = load i64, i64* %i142, align 8, !dbg !376
  %arrayidx154 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %70, !dbg !377
  %in155 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx154, i32 0, i32 0, !dbg !378
  %71 = load i8*, i8** %in155, align 8, !dbg !378
  %72 = load i8*, i8** %opname.addr, align 8, !dbg !379
  %add.ptr156 = getelementptr inbounds i8, i8* %72, i64 10, !dbg !380
  %73 = load i32, i32* %len1, align 4, !dbg !381
  %conv157 = sext i32 %73 to i64, !dbg !381
  %call158 = call i32 @memcmp(i8* %71, i8* %add.ptr156, i64 %conv157), !dbg !382
  %cmp159 = icmp eq i32 %call158, 0, !dbg !383
  br i1 %cmp159, label %if.then161, label %if.end167, !dbg !384

if.then161:                                       ; preds = %land.lhs.true153
  %74 = load i8*, i8** %result.addr, align 8, !dbg !385
  %call162 = call i8* @strcat(i8* %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !387
  %75 = load i8*, i8** %result.addr, align 8, !dbg !388
  %76 = load i64, i64* %i142, align 8, !dbg !389
  %arrayidx163 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %76, !dbg !390
  %out164 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx163, i32 0, i32 1, !dbg !391
  %77 = load i8*, i8** %out164, align 8, !dbg !391
  %call165 = call i8* @strcat(i8* %75, i8* %77), !dbg !392
  %78 = load i8*, i8** %result.addr, align 8, !dbg !393
  %call166 = call i8* @strcat(i8* %78, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)), !dbg !394
  store i32 1, i32* %ret, align 4, !dbg !395
  br label %for.end170, !dbg !396

if.end167:                                        ; preds = %land.lhs.true153, %for.body146
  br label %for.inc168, !dbg !397

for.inc168:                                       ; preds = %if.end167
  %79 = load i64, i64* %i142, align 8, !dbg !398
  %inc169 = add i64 %79, 1, !dbg !398
  store i64 %inc169, i64* %i142, align 8, !dbg !398
  br label %for.cond143, !dbg !399, !llvm.loop !400

for.end170:                                       ; preds = %if.then161, %for.cond143
  br label %if.end201, !dbg !402

if.else171:                                       ; preds = %land.lhs.true136, %if.then133
  call void @llvm.dbg.declare(metadata i64* %i172, metadata !403, metadata !DIExpression()), !dbg !405
  store i64 0, i64* %i172, align 8, !dbg !406
  br label %for.cond173, !dbg !408

for.cond173:                                      ; preds = %for.inc198, %if.else171
  %80 = load i64, i64* %i172, align 8, !dbg !409
  %cmp174 = icmp ult i64 %80, 79, !dbg !411
  br i1 %cmp174, label %for.body176, label %for.end200, !dbg !412

for.body176:                                      ; preds = %for.cond173
  %81 = load i32, i32* %len, align 4, !dbg !413
  %sub177 = sub nsw i32 %81, 3, !dbg !415
  store i32 %sub177, i32* %len1, align 4, !dbg !416
  %82 = load i64, i64* %i172, align 8, !dbg !417
  %arrayidx178 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %82, !dbg !419
  %in179 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx178, i32 0, i32 0, !dbg !420
  %83 = load i8*, i8** %in179, align 8, !dbg !420
  %call180 = call i64 @strlen(i8* %83), !dbg !421
  %conv181 = trunc i64 %call180 to i32, !dbg !422
  %84 = load i32, i32* %len1, align 4, !dbg !423
  %cmp182 = icmp eq i32 %conv181, %84, !dbg !424
  br i1 %cmp182, label %land.lhs.true184, label %if.end197, !dbg !425

land.lhs.true184:                                 ; preds = %for.body176
  %85 = load i64, i64* %i172, align 8, !dbg !426
  %arrayidx185 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %85, !dbg !427
  %in186 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx185, i32 0, i32 0, !dbg !428
  %86 = load i8*, i8** %in186, align 8, !dbg !428
  %87 = load i8*, i8** %opname.addr, align 8, !dbg !429
  %add.ptr187 = getelementptr inbounds i8, i8* %87, i64 3, !dbg !430
  %88 = load i32, i32* %len1, align 4, !dbg !431
  %conv188 = sext i32 %88 to i64, !dbg !431
  %call189 = call i32 @memcmp(i8* %86, i8* %add.ptr187, i64 %conv188), !dbg !432
  %cmp190 = icmp eq i32 %call189, 0, !dbg !433
  br i1 %cmp190, label %if.then192, label %if.end197, !dbg !434

if.then192:                                       ; preds = %land.lhs.true184
  %89 = load i8*, i8** %result.addr, align 8, !dbg !435
  %call193 = call i8* @strcat(i8* %89, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !437
  %90 = load i8*, i8** %result.addr, align 8, !dbg !438
  %91 = load i64, i64* %i172, align 8, !dbg !439
  %arrayidx194 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %91, !dbg !440
  %out195 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx194, i32 0, i32 1, !dbg !441
  %92 = load i8*, i8** %out195, align 8, !dbg !441
  %call196 = call i8* @strcat(i8* %90, i8* %92), !dbg !442
  store i32 1, i32* %ret, align 4, !dbg !443
  br label %for.end200, !dbg !444

if.end197:                                        ; preds = %land.lhs.true184, %for.body176
  br label %for.inc198, !dbg !445

for.inc198:                                       ; preds = %if.end197
  %93 = load i64, i64* %i172, align 8, !dbg !446
  %inc199 = add i64 %93, 1, !dbg !446
  store i64 %inc199, i64* %i172, align 8, !dbg !446
  br label %for.cond173, !dbg !447, !llvm.loop !448

for.end200:                                       ; preds = %if.then192, %for.cond173
  br label %if.end201

if.end201:                                        ; preds = %for.end200, %for.end170
  br label %if.end231, !dbg !450

if.else202:                                       ; preds = %land.lhs.true127, %land.lhs.true122, %land.lhs.true117, %if.else114
  %94 = load i32, i32* %len, align 4, !dbg !451
  %cmp203 = icmp sge i32 %94, 5, !dbg !453
  br i1 %cmp203, label %land.lhs.true205, label %if.end230, !dbg !454

land.lhs.true205:                                 ; preds = %if.else202
  %95 = load i8*, i8** %opname.addr, align 8, !dbg !455
  %call206 = call i32 @memcmp(i8* %95, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i64 4), !dbg !456
  %cmp207 = icmp eq i32 %call206, 0, !dbg !457
  br i1 %cmp207, label %land.lhs.true209, label %if.end230, !dbg !458

land.lhs.true209:                                 ; preds = %land.lhs.true205
  %96 = load i8*, i8** %opname.addr, align 8, !dbg !459
  %arrayidx210 = getelementptr inbounds i8, i8* %96, i64 4, !dbg !459
  %97 = load i8, i8* %arrayidx210, align 1, !dbg !459
  %conv211 = sext i8 %97 to i32, !dbg !459
  %call212 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv211), !dbg !460
  %cmp213 = icmp ne i8* %call212, null, !dbg !461
  br i1 %cmp213, label %if.then215, label %if.end230, !dbg !462

if.then215:                                       ; preds = %land.lhs.true209
  %98 = load i8*, i8** %opname.addr, align 8, !dbg !463
  %add.ptr216 = getelementptr inbounds i8, i8* %98, i64 5, !dbg !465
  store i8* %add.ptr216, i8** %tem, align 8, !dbg !466
  %arraydecay217 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !467
  %call218 = call i32 @do_type(%struct.work_stuff* %arraydecay217, i8** %tem, %struct.string* %type), !dbg !469
  %tobool219 = icmp ne i32 %call218, 0, !dbg !469
  br i1 %tobool219, label %if.then220, label %if.end229, !dbg !470

if.then220:                                       ; preds = %if.then215
  %99 = load i8*, i8** %result.addr, align 8, !dbg !471
  %call221 = call i8* @strcat(i8* %99, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0)), !dbg !473
  %100 = load i8*, i8** %result.addr, align 8, !dbg !474
  %b222 = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 0, !dbg !475
  %101 = load i8*, i8** %b222, align 8, !dbg !475
  %p223 = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 1, !dbg !476
  %102 = load i8*, i8** %p223, align 8, !dbg !476
  %b224 = getelementptr inbounds %struct.string, %struct.string* %type, i32 0, i32 0, !dbg !477
  %103 = load i8*, i8** %b224, align 8, !dbg !477
  %sub.ptr.lhs.cast225 = ptrtoint i8* %102 to i64, !dbg !478
  %sub.ptr.rhs.cast226 = ptrtoint i8* %103 to i64, !dbg !478
  %sub.ptr.sub227 = sub i64 %sub.ptr.lhs.cast225, %sub.ptr.rhs.cast226, !dbg !478
  %call228 = call i8* @strncat(i8* %100, i8* %101, i64 %sub.ptr.sub227), !dbg !479
  call void @string_delete(%struct.string* %type), !dbg !480
  store i32 1, i32* %ret, align 4, !dbg !481
  br label %if.end229, !dbg !482

if.end229:                                        ; preds = %if.then220, %if.then215
  br label %if.end230, !dbg !483

if.end230:                                        ; preds = %if.end229, %land.lhs.true209, %land.lhs.true205, %if.else202
  br label %if.end231

if.end231:                                        ; preds = %if.end230, %if.end201
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %if.end113
  br label %if.end233

if.end233:                                        ; preds = %if.end232, %if.end
  %arraydecay234 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !484
  call void @squangle_mop_up(%struct.work_stuff* %arraydecay234), !dbg !485
  %104 = load i32, i32* %ret, align 4, !dbg !486
  ret i32 %104, !dbg !487
}

declare dso_local i64 @strlen(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_type(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result) #0 !dbg !488 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %n = alloca i32, align 4
  %done = alloca i32, align 4
  %success = alloca i32, align 4
  %decl = alloca %struct.string, align 8
  %remembered_type = alloca i8*, align 8
  %type_quals = alloca i32, align 4
  %tk = alloca i32, align 4
  %member = alloca i32, align 4
  %temp = alloca %struct.string, align 8
  %temp134 = alloca %struct.string, align 8
  %idx = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !493, metadata !DIExpression()), !dbg !494
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !495, metadata !DIExpression()), !dbg !496
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !497, metadata !DIExpression()), !dbg !498
  call void @llvm.dbg.declare(metadata i32* %n, metadata !499, metadata !DIExpression()), !dbg !500
  call void @llvm.dbg.declare(metadata i32* %done, metadata !501, metadata !DIExpression()), !dbg !502
  call void @llvm.dbg.declare(metadata i32* %success, metadata !503, metadata !DIExpression()), !dbg !504
  call void @llvm.dbg.declare(metadata %struct.string* %decl, metadata !505, metadata !DIExpression()), !dbg !506
  call void @llvm.dbg.declare(metadata i8** %remembered_type, metadata !507, metadata !DIExpression()), !dbg !508
  call void @llvm.dbg.declare(metadata i32* %type_quals, metadata !509, metadata !DIExpression()), !dbg !510
  call void @llvm.dbg.declare(metadata i32* %tk, metadata !511, metadata !DIExpression()), !dbg !512
  store i32 0, i32* %tk, align 4, !dbg !512
  call void @string_init(%struct.string* %decl), !dbg !513
  %0 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !514
  call void @string_init(%struct.string* %0), !dbg !515
  store i32 0, i32* %done, align 4, !dbg !516
  store i32 1, i32* %success, align 4, !dbg !517
  br label %while.cond, !dbg !518

while.cond:                                       ; preds = %sw.epilog217, %entry
  %1 = load i32, i32* %success, align 4, !dbg !519
  %tobool = icmp ne i32 %1, 0, !dbg !519
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !520

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %done, align 4, !dbg !521
  %tobool1 = icmp ne i32 %2, 0, !dbg !522
  %lnot = xor i1 %tobool1, true, !dbg !522
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !523
  br i1 %3, label %while.body, label %while.end, !dbg !518

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %member, metadata !524, metadata !DIExpression()), !dbg !526
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !527
  %5 = load i8*, i8** %4, align 8, !dbg !528
  %6 = load i8, i8* %5, align 1, !dbg !529
  %conv = sext i8 %6 to i32, !dbg !529
  switch i32 %conv, label %sw.default216 [
    i32 80, label %sw.bb
    i32 112, label %sw.bb
    i32 82, label %sw.bb6
    i32 65, label %sw.bb12
    i32 84, label %sw.bb38
    i32 70, label %sw.bb48
    i32 77, label %sw.bb88
    i32 79, label %sw.bb88
    i32 71, label %sw.bb199
    i32 67, label %sw.bb201
    i32 86, label %sw.bb201
    i32 117, label %sw.bb201
  ], !dbg !530

sw.bb:                                            ; preds = %while.body, %while.body
  %7 = load i8**, i8*** %mangled.addr, align 8, !dbg !531
  %8 = load i8*, i8** %7, align 8, !dbg !533
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !533
  store i8* %incdec.ptr, i8** %7, align 8, !dbg !533
  %9 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !534
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %9, i32 0, i32 0, !dbg !536
  %10 = load i32, i32* %options, align 8, !dbg !536
  %and = and i32 %10, 4, !dbg !537
  %tobool2 = icmp ne i32 %and, 0, !dbg !537
  br i1 %tobool2, label %if.end, label %if.then, !dbg !538

if.then:                                          ; preds = %sw.bb
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i64 0, i64 0)), !dbg !539
  br label %if.end, !dbg !539

if.end:                                           ; preds = %if.then, %sw.bb
  %11 = load i32, i32* %tk, align 4, !dbg !540
  %cmp = icmp eq i32 %11, 0, !dbg !542
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !543

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %tk, align 4, !dbg !544
  br label %if.end5, !dbg !545

if.end5:                                          ; preds = %if.then4, %if.end
  br label %sw.epilog217, !dbg !546

sw.bb6:                                           ; preds = %while.body
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !547
  %13 = load i8*, i8** %12, align 8, !dbg !548
  %incdec.ptr7 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !548
  store i8* %incdec.ptr7, i8** %12, align 8, !dbg !548
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i64 0, i64 0)), !dbg !549
  %14 = load i32, i32* %tk, align 4, !dbg !550
  %cmp8 = icmp eq i32 %14, 0, !dbg !552
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !553

if.then10:                                        ; preds = %sw.bb6
  store i32 2, i32* %tk, align 4, !dbg !554
  br label %if.end11, !dbg !555

if.end11:                                         ; preds = %if.then10, %sw.bb6
  br label %sw.epilog217, !dbg !556

sw.bb12:                                          ; preds = %while.body
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !557
  %16 = load i8*, i8** %15, align 8, !dbg !559
  %incdec.ptr13 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !559
  store i8* %incdec.ptr13, i8** %15, align 8, !dbg !559
  %b = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !560
  %17 = load i8*, i8** %b, align 8, !dbg !560
  %p = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 1, !dbg !560
  %18 = load i8*, i8** %p, align 8, !dbg !560
  %cmp14 = icmp eq i8* %17, %18, !dbg !560
  br i1 %cmp14, label %if.end26, label %land.lhs.true, !dbg !562

land.lhs.true:                                    ; preds = %sw.bb12
  %b16 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !563
  %19 = load i8*, i8** %b16, align 8, !dbg !563
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 0, !dbg !564
  %20 = load i8, i8* %arrayidx, align 1, !dbg !564
  %conv17 = sext i8 %20 to i32, !dbg !564
  %cmp18 = icmp eq i32 %conv17, 42, !dbg !565
  br i1 %cmp18, label %if.then25, label %lor.lhs.false, !dbg !566

lor.lhs.false:                                    ; preds = %land.lhs.true
  %b20 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !567
  %21 = load i8*, i8** %b20, align 8, !dbg !567
  %arrayidx21 = getelementptr inbounds i8, i8* %21, i64 0, !dbg !568
  %22 = load i8, i8* %arrayidx21, align 1, !dbg !568
  %conv22 = sext i8 %22 to i32, !dbg !568
  %cmp23 = icmp eq i32 %conv22, 38, !dbg !569
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !570

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0)), !dbg !571
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)), !dbg !573
  br label %if.end26, !dbg !574

if.end26:                                         ; preds = %if.then25, %lor.lhs.false, %sw.bb12
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.237, i64 0, i64 0)), !dbg !575
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !576
  %24 = load i8*, i8** %23, align 8, !dbg !578
  %25 = load i8, i8* %24, align 1, !dbg !579
  %conv27 = sext i8 %25 to i32, !dbg !579
  %cmp28 = icmp ne i32 %conv27, 95, !dbg !580
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !581

if.then30:                                        ; preds = %if.end26
  %26 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !582
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !583
  %call = call i32 @demangle_template_value_parm(%struct.work_stuff* %26, i8** %27, %struct.string* %decl, i32 3), !dbg !584
  store i32 %call, i32* %success, align 4, !dbg !585
  br label %if.end31, !dbg !586

if.end31:                                         ; preds = %if.then30, %if.end26
  %28 = load i8**, i8*** %mangled.addr, align 8, !dbg !587
  %29 = load i8*, i8** %28, align 8, !dbg !589
  %30 = load i8, i8* %29, align 1, !dbg !590
  %conv32 = sext i8 %30 to i32, !dbg !590
  %cmp33 = icmp eq i32 %conv32, 95, !dbg !591
  br i1 %cmp33, label %if.then35, label %if.end37, !dbg !592

if.then35:                                        ; preds = %if.end31
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !593
  %32 = load i8*, i8** %31, align 8, !dbg !594
  %incdec.ptr36 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !594
  store i8* %incdec.ptr36, i8** %31, align 8, !dbg !594
  br label %if.end37, !dbg !594

if.end37:                                         ; preds = %if.then35, %if.end31
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.238, i64 0, i64 0)), !dbg !595
  br label %sw.epilog217, !dbg !596

sw.bb38:                                          ; preds = %while.body
  %33 = load i8**, i8*** %mangled.addr, align 8, !dbg !597
  %34 = load i8*, i8** %33, align 8, !dbg !598
  %incdec.ptr39 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !598
  store i8* %incdec.ptr39, i8** %33, align 8, !dbg !598
  %35 = load i8**, i8*** %mangled.addr, align 8, !dbg !599
  %call40 = call i32 @get_count(i8** %35, i32* %n), !dbg !601
  %tobool41 = icmp ne i32 %call40, 0, !dbg !601
  br i1 %tobool41, label %lor.lhs.false42, label %if.then45, !dbg !602

lor.lhs.false42:                                  ; preds = %sw.bb38
  %36 = load i32, i32* %n, align 4, !dbg !603
  %37 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !604
  %ntypes = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %37, i32 0, i32 8, !dbg !605
  %38 = load i32, i32* %ntypes, align 8, !dbg !605
  %cmp43 = icmp sge i32 %36, %38, !dbg !606
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !607

if.then45:                                        ; preds = %lor.lhs.false42, %sw.bb38
  store i32 0, i32* %success, align 4, !dbg !608
  br label %if.end47, !dbg !610

if.else:                                          ; preds = %lor.lhs.false42
  %39 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !611
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %39, i32 0, i32 1, !dbg !613
  %40 = load i8**, i8*** %typevec, align 8, !dbg !613
  %41 = load i32, i32* %n, align 4, !dbg !614
  %idxprom = sext i32 %41 to i64, !dbg !611
  %arrayidx46 = getelementptr inbounds i8*, i8** %40, i64 %idxprom, !dbg !611
  %42 = load i8*, i8** %arrayidx46, align 8, !dbg !611
  store i8* %42, i8** %remembered_type, align 8, !dbg !615
  store i8** %remembered_type, i8*** %mangled.addr, align 8, !dbg !616
  br label %if.end47

if.end47:                                         ; preds = %if.else, %if.then45
  br label %sw.epilog217, !dbg !617

sw.bb48:                                          ; preds = %while.body
  %43 = load i8**, i8*** %mangled.addr, align 8, !dbg !618
  %44 = load i8*, i8** %43, align 8, !dbg !619
  %incdec.ptr49 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !619
  store i8* %incdec.ptr49, i8** %43, align 8, !dbg !619
  %b50 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !620
  %45 = load i8*, i8** %b50, align 8, !dbg !620
  %p51 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 1, !dbg !620
  %46 = load i8*, i8** %p51, align 8, !dbg !620
  %cmp52 = icmp eq i8* %45, %46, !dbg !620
  br i1 %cmp52, label %if.end67, label %land.lhs.true54, !dbg !622

land.lhs.true54:                                  ; preds = %sw.bb48
  %b55 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !623
  %47 = load i8*, i8** %b55, align 8, !dbg !623
  %arrayidx56 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !624
  %48 = load i8, i8* %arrayidx56, align 1, !dbg !624
  %conv57 = sext i8 %48 to i32, !dbg !624
  %cmp58 = icmp eq i32 %conv57, 42, !dbg !625
  br i1 %cmp58, label %if.then66, label %lor.lhs.false60, !dbg !626

lor.lhs.false60:                                  ; preds = %land.lhs.true54
  %b61 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !627
  %49 = load i8*, i8** %b61, align 8, !dbg !627
  %arrayidx62 = getelementptr inbounds i8, i8* %49, i64 0, !dbg !628
  %50 = load i8, i8* %arrayidx62, align 1, !dbg !628
  %conv63 = sext i8 %50 to i32, !dbg !628
  %cmp64 = icmp eq i32 %conv63, 38, !dbg !629
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !630

if.then66:                                        ; preds = %lor.lhs.false60, %land.lhs.true54
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0)), !dbg !631
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)), !dbg !633
  br label %if.end67, !dbg !634

if.end67:                                         ; preds = %if.then66, %lor.lhs.false60, %sw.bb48
  %51 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !635
  %52 = load i8**, i8*** %mangled.addr, align 8, !dbg !637
  %call68 = call i32 @demangle_nested_args(%struct.work_stuff* %51, i8** %52, %struct.string* %decl), !dbg !638
  %tobool69 = icmp ne i32 %call68, 0, !dbg !638
  br i1 %tobool69, label %lor.lhs.false70, label %if.then78, !dbg !639

lor.lhs.false70:                                  ; preds = %if.end67
  %53 = load i8**, i8*** %mangled.addr, align 8, !dbg !640
  %54 = load i8*, i8** %53, align 8, !dbg !641
  %55 = load i8, i8* %54, align 1, !dbg !642
  %conv71 = sext i8 %55 to i32, !dbg !642
  %cmp72 = icmp ne i32 %conv71, 95, !dbg !643
  br i1 %cmp72, label %land.lhs.true74, label %if.end79, !dbg !644

land.lhs.true74:                                  ; preds = %lor.lhs.false70
  %56 = load i8**, i8*** %mangled.addr, align 8, !dbg !645
  %57 = load i8*, i8** %56, align 8, !dbg !646
  %58 = load i8, i8* %57, align 1, !dbg !647
  %conv75 = sext i8 %58 to i32, !dbg !647
  %cmp76 = icmp ne i32 %conv75, 0, !dbg !648
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !649

if.then78:                                        ; preds = %land.lhs.true74, %if.end67
  store i32 0, i32* %success, align 4, !dbg !650
  br label %sw.epilog217, !dbg !652

if.end79:                                         ; preds = %land.lhs.true74, %lor.lhs.false70
  %59 = load i32, i32* %success, align 4, !dbg !653
  %tobool80 = icmp ne i32 %59, 0, !dbg !653
  br i1 %tobool80, label %land.lhs.true81, label %if.end87, !dbg !655

land.lhs.true81:                                  ; preds = %if.end79
  %60 = load i8**, i8*** %mangled.addr, align 8, !dbg !656
  %61 = load i8*, i8** %60, align 8, !dbg !657
  %62 = load i8, i8* %61, align 1, !dbg !658
  %conv82 = sext i8 %62 to i32, !dbg !658
  %cmp83 = icmp eq i32 %conv82, 95, !dbg !659
  br i1 %cmp83, label %if.then85, label %if.end87, !dbg !660

if.then85:                                        ; preds = %land.lhs.true81
  %63 = load i8**, i8*** %mangled.addr, align 8, !dbg !661
  %64 = load i8*, i8** %63, align 8, !dbg !662
  %incdec.ptr86 = getelementptr inbounds i8, i8* %64, i32 1, !dbg !662
  store i8* %incdec.ptr86, i8** %63, align 8, !dbg !662
  br label %if.end87, !dbg !663

if.end87:                                         ; preds = %if.then85, %land.lhs.true81, %if.end79
  br label %sw.epilog217, !dbg !664

sw.bb88:                                          ; preds = %while.body, %while.body
  store i32 0, i32* %type_quals, align 4, !dbg !665
  %65 = load i8**, i8*** %mangled.addr, align 8, !dbg !667
  %66 = load i8*, i8** %65, align 8, !dbg !668
  %67 = load i8, i8* %66, align 1, !dbg !669
  %conv89 = sext i8 %67 to i32, !dbg !669
  %cmp90 = icmp eq i32 %conv89, 77, !dbg !670
  %conv91 = zext i1 %cmp90 to i32, !dbg !670
  store i32 %conv91, i32* %member, align 4, !dbg !671
  %68 = load i8**, i8*** %mangled.addr, align 8, !dbg !672
  %69 = load i8*, i8** %68, align 8, !dbg !673
  %incdec.ptr92 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !673
  store i8* %incdec.ptr92, i8** %68, align 8, !dbg !673
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)), !dbg !674
  %70 = load i8**, i8*** %mangled.addr, align 8, !dbg !675
  %71 = load i8*, i8** %70, align 8, !dbg !677
  %72 = load i8, i8* %71, align 1, !dbg !678
  %conv93 = sext i8 %72 to i32, !dbg !678
  %cmp94 = icmp ne i32 %conv93, 81, !dbg !679
  br i1 %cmp94, label %if.then96, label %if.end100, !dbg !680

if.then96:                                        ; preds = %sw.bb88
  %73 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !681
  %options97 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %73, i32 0, i32 0, !dbg !681
  %74 = load i32, i32* %options97, align 8, !dbg !681
  %and98 = and i32 %74, 4, !dbg !681
  %tobool99 = icmp ne i32 %and98, 0, !dbg !681
  %75 = zext i1 %tobool99 to i64, !dbg !681
  %cond = select i1 %tobool99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !681
  call void @string_prepend(%struct.string* %decl, i8* %cond), !dbg !682
  br label %if.end100, !dbg !682

if.end100:                                        ; preds = %if.then96, %sw.bb88
  %76 = load i8**, i8*** %mangled.addr, align 8, !dbg !683
  %77 = load i8*, i8** %76, align 8, !dbg !683
  %78 = load i8, i8* %77, align 1, !dbg !683
  %conv101 = zext i8 %78 to i32, !dbg !683
  %and102 = and i32 %conv101, 255, !dbg !683
  %idxprom103 = sext i32 %and102 to i64, !dbg !683
  %arrayidx104 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom103, !dbg !683
  %79 = load i16, i16* %arrayidx104, align 2, !dbg !683
  %conv105 = zext i16 %79 to i32, !dbg !683
  %and106 = and i32 %conv105, 4, !dbg !683
  %tobool107 = icmp ne i32 %and106, 0, !dbg !683
  br i1 %tobool107, label %if.then108, label %if.else119, !dbg !685

if.then108:                                       ; preds = %if.end100
  %80 = load i8**, i8*** %mangled.addr, align 8, !dbg !686
  %call109 = call i32 @consume_count(i8** %80), !dbg !688
  store i32 %call109, i32* %n, align 4, !dbg !689
  %81 = load i32, i32* %n, align 4, !dbg !690
  %cmp110 = icmp eq i32 %81, -1, !dbg !692
  br i1 %cmp110, label %if.then117, label %lor.lhs.false112, !dbg !693

lor.lhs.false112:                                 ; preds = %if.then108
  %82 = load i8**, i8*** %mangled.addr, align 8, !dbg !694
  %83 = load i8*, i8** %82, align 8, !dbg !695
  %call113 = call i64 @strlen(i8* %83), !dbg !696
  %conv114 = trunc i64 %call113 to i32, !dbg !697
  %84 = load i32, i32* %n, align 4, !dbg !698
  %cmp115 = icmp slt i32 %conv114, %84, !dbg !699
  br i1 %cmp115, label %if.then117, label %if.end118, !dbg !700

if.then117:                                       ; preds = %lor.lhs.false112, %if.then108
  store i32 0, i32* %success, align 4, !dbg !701
  br label %sw.epilog217, !dbg !703

if.end118:                                        ; preds = %lor.lhs.false112
  %85 = load i8**, i8*** %mangled.addr, align 8, !dbg !704
  %86 = load i8*, i8** %85, align 8, !dbg !705
  %87 = load i32, i32* %n, align 4, !dbg !706
  call void @string_prependn(%struct.string* %decl, i8* %86, i32 %87), !dbg !707
  %88 = load i32, i32* %n, align 4, !dbg !708
  %89 = load i8**, i8*** %mangled.addr, align 8, !dbg !709
  %90 = load i8*, i8** %89, align 8, !dbg !710
  %idx.ext = sext i32 %88 to i64, !dbg !710
  %add.ptr = getelementptr inbounds i8, i8* %90, i64 %idx.ext, !dbg !710
  store i8* %add.ptr, i8** %89, align 8, !dbg !710
  br label %if.end157, !dbg !711

if.else119:                                       ; preds = %if.end100
  %91 = load i8**, i8*** %mangled.addr, align 8, !dbg !712
  %92 = load i8*, i8** %91, align 8, !dbg !714
  %93 = load i8, i8* %92, align 1, !dbg !715
  %conv120 = sext i8 %93 to i32, !dbg !715
  %cmp121 = icmp eq i32 %conv120, 88, !dbg !716
  br i1 %cmp121, label %if.then127, label %lor.lhs.false123, !dbg !717

lor.lhs.false123:                                 ; preds = %if.else119
  %94 = load i8**, i8*** %mangled.addr, align 8, !dbg !718
  %95 = load i8*, i8** %94, align 8, !dbg !719
  %96 = load i8, i8* %95, align 1, !dbg !720
  %conv124 = sext i8 %96 to i32, !dbg !720
  %cmp125 = icmp eq i32 %conv124, 89, !dbg !721
  br i1 %cmp125, label %if.then127, label %if.else129, !dbg !722

if.then127:                                       ; preds = %lor.lhs.false123, %if.else119
  call void @llvm.dbg.declare(metadata %struct.string* %temp, metadata !723, metadata !DIExpression()), !dbg !725
  %97 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !726
  %98 = load i8**, i8*** %mangled.addr, align 8, !dbg !727
  %call128 = call i32 @do_type(%struct.work_stuff* %97, i8** %98, %struct.string* %temp), !dbg !728
  call void @string_prepends(%struct.string* %decl, %struct.string* %temp), !dbg !729
  call void @string_delete(%struct.string* %temp), !dbg !730
  br label %if.end156, !dbg !731

if.else129:                                       ; preds = %lor.lhs.false123
  %99 = load i8**, i8*** %mangled.addr, align 8, !dbg !732
  %100 = load i8*, i8** %99, align 8, !dbg !734
  %101 = load i8, i8* %100, align 1, !dbg !735
  %conv130 = sext i8 %101 to i32, !dbg !735
  %cmp131 = icmp eq i32 %conv130, 116, !dbg !736
  br i1 %cmp131, label %if.then133, label %if.else144, !dbg !737

if.then133:                                       ; preds = %if.else129
  call void @llvm.dbg.declare(metadata %struct.string* %temp134, metadata !738, metadata !DIExpression()), !dbg !740
  call void @string_init(%struct.string* %temp134), !dbg !741
  %102 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !742
  %103 = load i8**, i8*** %mangled.addr, align 8, !dbg !743
  %call135 = call i32 @demangle_template(%struct.work_stuff* %102, i8** %103, %struct.string* %temp134, %struct.string* null, i32 1, i32 1), !dbg !744
  store i32 %call135, i32* %success, align 4, !dbg !745
  %104 = load i32, i32* %success, align 4, !dbg !746
  %tobool136 = icmp ne i32 %104, 0, !dbg !746
  br i1 %tobool136, label %if.then137, label %if.else142, !dbg !748

if.then137:                                       ; preds = %if.then133
  %b138 = getelementptr inbounds %struct.string, %struct.string* %temp134, i32 0, i32 0, !dbg !749
  %105 = load i8*, i8** %b138, align 8, !dbg !749
  %p139 = getelementptr inbounds %struct.string, %struct.string* %temp134, i32 0, i32 1, !dbg !751
  %106 = load i8*, i8** %p139, align 8, !dbg !751
  %b140 = getelementptr inbounds %struct.string, %struct.string* %temp134, i32 0, i32 0, !dbg !752
  %107 = load i8*, i8** %b140, align 8, !dbg !752
  %sub.ptr.lhs.cast = ptrtoint i8* %106 to i64, !dbg !753
  %sub.ptr.rhs.cast = ptrtoint i8* %107 to i64, !dbg !753
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !753
  %conv141 = trunc i64 %sub.ptr.sub to i32, !dbg !754
  call void @string_prependn(%struct.string* %decl, i8* %105, i32 %conv141), !dbg !755
  call void @string_delete(%struct.string* %temp134), !dbg !756
  br label %if.end143, !dbg !757

if.else142:                                       ; preds = %if.then133
  br label %sw.epilog217, !dbg !758

if.end143:                                        ; preds = %if.then137
  br label %if.end155, !dbg !759

if.else144:                                       ; preds = %if.else129
  %108 = load i8**, i8*** %mangled.addr, align 8, !dbg !760
  %109 = load i8*, i8** %108, align 8, !dbg !762
  %110 = load i8, i8* %109, align 1, !dbg !763
  %conv145 = sext i8 %110 to i32, !dbg !763
  %cmp146 = icmp eq i32 %conv145, 81, !dbg !764
  br i1 %cmp146, label %if.then148, label %if.else153, !dbg !765

if.then148:                                       ; preds = %if.else144
  %111 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !766
  %112 = load i8**, i8*** %mangled.addr, align 8, !dbg !768
  %call149 = call i32 @demangle_qualified(%struct.work_stuff* %111, i8** %112, %struct.string* %decl, i32 0, i32 0), !dbg !769
  store i32 %call149, i32* %success, align 4, !dbg !770
  %113 = load i32, i32* %success, align 4, !dbg !771
  %tobool150 = icmp ne i32 %113, 0, !dbg !771
  br i1 %tobool150, label %if.end152, label %if.then151, !dbg !773

if.then151:                                       ; preds = %if.then148
  br label %sw.epilog217, !dbg !774

if.end152:                                        ; preds = %if.then148
  br label %if.end154, !dbg !775

if.else153:                                       ; preds = %if.else144
  store i32 0, i32* %success, align 4, !dbg !776
  br label %sw.epilog217, !dbg !778

if.end154:                                        ; preds = %if.end152
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.end143
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.then127
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.end118
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0)), !dbg !779
  %114 = load i32, i32* %member, align 4, !dbg !780
  %tobool158 = icmp ne i32 %114, 0, !dbg !780
  br i1 %tobool158, label %if.then159, label %if.end171, !dbg !782

if.then159:                                       ; preds = %if.end157
  %115 = load i8**, i8*** %mangled.addr, align 8, !dbg !783
  %116 = load i8*, i8** %115, align 8, !dbg !785
  %117 = load i8, i8* %116, align 1, !dbg !786
  %conv160 = sext i8 %117 to i32, !dbg !786
  switch i32 %conv160, label %sw.default [
    i32 67, label %sw.bb161
    i32 86, label %sw.bb161
    i32 117, label %sw.bb161
  ], !dbg !787

sw.bb161:                                         ; preds = %if.then159, %if.then159, %if.then159
  %118 = load i8**, i8*** %mangled.addr, align 8, !dbg !788
  %119 = load i8*, i8** %118, align 8, !dbg !790
  %120 = load i8, i8* %119, align 1, !dbg !791
  %conv162 = sext i8 %120 to i32, !dbg !791
  %call163 = call i32 @code_for_qualifier(i32 %conv162), !dbg !792
  %121 = load i32, i32* %type_quals, align 4, !dbg !793
  %or = or i32 %121, %call163, !dbg !793
  store i32 %or, i32* %type_quals, align 4, !dbg !793
  %122 = load i8**, i8*** %mangled.addr, align 8, !dbg !794
  %123 = load i8*, i8** %122, align 8, !dbg !795
  %incdec.ptr164 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !795
  store i8* %incdec.ptr164, i8** %122, align 8, !dbg !795
  br label %sw.epilog, !dbg !796

sw.default:                                       ; preds = %if.then159
  br label %sw.epilog, !dbg !797

sw.epilog:                                        ; preds = %sw.default, %sw.bb161
  %124 = load i8**, i8*** %mangled.addr, align 8, !dbg !798
  %125 = load i8*, i8** %124, align 8, !dbg !800
  %incdec.ptr165 = getelementptr inbounds i8, i8* %125, i32 1, !dbg !800
  store i8* %incdec.ptr165, i8** %124, align 8, !dbg !800
  %126 = load i8, i8* %125, align 1, !dbg !801
  %conv166 = sext i8 %126 to i32, !dbg !801
  %cmp167 = icmp ne i32 %conv166, 70, !dbg !802
  br i1 %cmp167, label %if.then169, label %if.end170, !dbg !803

if.then169:                                       ; preds = %sw.epilog
  store i32 0, i32* %success, align 4, !dbg !804
  br label %sw.epilog217, !dbg !806

if.end170:                                        ; preds = %sw.epilog
  br label %if.end171, !dbg !807

if.end171:                                        ; preds = %if.end170, %if.end157
  %127 = load i32, i32* %member, align 4, !dbg !808
  %tobool172 = icmp ne i32 %127, 0, !dbg !808
  br i1 %tobool172, label %land.lhs.true173, label %lor.lhs.false176, !dbg !810

land.lhs.true173:                                 ; preds = %if.end171
  %128 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !811
  %129 = load i8**, i8*** %mangled.addr, align 8, !dbg !812
  %call174 = call i32 @demangle_nested_args(%struct.work_stuff* %128, i8** %129, %struct.string* %decl), !dbg !813
  %tobool175 = icmp ne i32 %call174, 0, !dbg !813
  br i1 %tobool175, label %lor.lhs.false176, label %if.then180, !dbg !814

lor.lhs.false176:                                 ; preds = %land.lhs.true173, %if.end171
  %130 = load i8**, i8*** %mangled.addr, align 8, !dbg !815
  %131 = load i8*, i8** %130, align 8, !dbg !816
  %132 = load i8, i8* %131, align 1, !dbg !817
  %conv177 = sext i8 %132 to i32, !dbg !817
  %cmp178 = icmp ne i32 %conv177, 95, !dbg !818
  br i1 %cmp178, label %if.then180, label %if.end181, !dbg !819

if.then180:                                       ; preds = %lor.lhs.false176, %land.lhs.true173
  store i32 0, i32* %success, align 4, !dbg !820
  br label %sw.epilog217, !dbg !822

if.end181:                                        ; preds = %lor.lhs.false176
  %133 = load i8**, i8*** %mangled.addr, align 8, !dbg !823
  %134 = load i8*, i8** %133, align 8, !dbg !824
  %incdec.ptr182 = getelementptr inbounds i8, i8* %134, i32 1, !dbg !824
  store i8* %incdec.ptr182, i8** %133, align 8, !dbg !824
  %135 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !825
  %options183 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %135, i32 0, i32 0, !dbg !825
  %136 = load i32, i32* %options183, align 8, !dbg !825
  %and184 = and i32 %136, 2, !dbg !825
  %tobool185 = icmp ne i32 %and184, 0, !dbg !825
  br i1 %tobool185, label %if.end187, label %if.then186, !dbg !827

if.then186:                                       ; preds = %if.end181
  br label %sw.epilog217, !dbg !828

if.end187:                                        ; preds = %if.end181
  %137 = load i32, i32* %type_quals, align 4, !dbg !830
  %cmp188 = icmp ne i32 %137, 0, !dbg !832
  br i1 %cmp188, label %if.then190, label %if.end198, !dbg !833

if.then190:                                       ; preds = %if.end187
  %b191 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !834
  %138 = load i8*, i8** %b191, align 8, !dbg !834
  %p192 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 1, !dbg !834
  %139 = load i8*, i8** %p192, align 8, !dbg !834
  %cmp193 = icmp eq i8* %138, %139, !dbg !834
  br i1 %cmp193, label %if.end196, label %if.then195, !dbg !838

if.then195:                                       ; preds = %if.then190
  call void @string_append(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !834
  br label %if.end196, !dbg !834

if.end196:                                        ; preds = %if.then195, %if.then190
  %140 = load i32, i32* %type_quals, align 4, !dbg !839
  %call197 = call i8* @qualifier_string(i32 %140), !dbg !840
  call void @string_append(%struct.string* %decl, i8* %call197), !dbg !841
  br label %if.end198, !dbg !842

if.end198:                                        ; preds = %if.end196, %if.end187
  br label %sw.epilog217, !dbg !843

sw.bb199:                                         ; preds = %while.body
  %141 = load i8**, i8*** %mangled.addr, align 8, !dbg !844
  %142 = load i8*, i8** %141, align 8, !dbg !845
  %incdec.ptr200 = getelementptr inbounds i8, i8* %142, i32 1, !dbg !845
  store i8* %incdec.ptr200, i8** %141, align 8, !dbg !845
  br label %sw.epilog217, !dbg !846

sw.bb201:                                         ; preds = %while.body, %while.body, %while.body
  %143 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !847
  %options202 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %143, i32 0, i32 0, !dbg !847
  %144 = load i32, i32* %options202, align 8, !dbg !847
  %and203 = and i32 %144, 2, !dbg !847
  %tobool204 = icmp ne i32 %and203, 0, !dbg !847
  br i1 %tobool204, label %if.then205, label %if.end214, !dbg !849

if.then205:                                       ; preds = %sw.bb201
  %b206 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !850
  %145 = load i8*, i8** %b206, align 8, !dbg !850
  %p207 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 1, !dbg !850
  %146 = load i8*, i8** %p207, align 8, !dbg !850
  %cmp208 = icmp eq i8* %145, %146, !dbg !850
  br i1 %cmp208, label %if.end211, label %if.then210, !dbg !853

if.then210:                                       ; preds = %if.then205
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !854
  br label %if.end211, !dbg !854

if.end211:                                        ; preds = %if.then210, %if.then205
  %147 = load i8**, i8*** %mangled.addr, align 8, !dbg !855
  %148 = load i8*, i8** %147, align 8, !dbg !856
  %149 = load i8, i8* %148, align 1, !dbg !857
  %conv212 = sext i8 %149 to i32, !dbg !857
  %call213 = call i8* @demangle_qualifier(i32 %conv212), !dbg !858
  call void @string_prepend(%struct.string* %decl, i8* %call213), !dbg !859
  br label %if.end214, !dbg !860

if.end214:                                        ; preds = %if.end211, %sw.bb201
  %150 = load i8**, i8*** %mangled.addr, align 8, !dbg !861
  %151 = load i8*, i8** %150, align 8, !dbg !862
  %incdec.ptr215 = getelementptr inbounds i8, i8* %151, i32 1, !dbg !862
  store i8* %incdec.ptr215, i8** %150, align 8, !dbg !862
  br label %sw.epilog217, !dbg !863

sw.default216:                                    ; preds = %while.body
  store i32 1, i32* %done, align 4, !dbg !864
  br label %sw.epilog217, !dbg !865

sw.epilog217:                                     ; preds = %sw.default216, %if.end214, %sw.bb199, %if.end198, %if.then186, %if.then180, %if.then169, %if.else153, %if.then151, %if.else142, %if.then117, %if.end87, %if.then78, %if.end47, %if.end37, %if.end11, %if.end5
  br label %while.cond, !dbg !518, !llvm.loop !866

while.end:                                        ; preds = %land.end
  %152 = load i32, i32* %success, align 4, !dbg !868
  %tobool218 = icmp ne i32 %152, 0, !dbg !868
  br i1 %tobool218, label %if.then219, label %if.end266, !dbg !870

if.then219:                                       ; preds = %while.end
  %153 = load i8**, i8*** %mangled.addr, align 8, !dbg !871
  %154 = load i8*, i8** %153, align 8, !dbg !872
  %155 = load i8, i8* %154, align 1, !dbg !873
  %conv220 = sext i8 %155 to i32, !dbg !873
  switch i32 %conv220, label %sw.default259 [
    i32 81, label %sw.bb221
    i32 75, label %sw.bb221
    i32 66, label %sw.bb223
    i32 88, label %sw.bb235
    i32 89, label %sw.bb235
  ], !dbg !874

sw.bb221:                                         ; preds = %if.then219, %if.then219
  %156 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !875
  %157 = load i8**, i8*** %mangled.addr, align 8, !dbg !878
  %158 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !879
  %call222 = call i32 @demangle_qualified(%struct.work_stuff* %156, i8** %157, %struct.string* %158, i32 0, i32 1), !dbg !880
  store i32 %call222, i32* %success, align 4, !dbg !881
  br label %sw.epilog265, !dbg !882

sw.bb223:                                         ; preds = %if.then219
  %159 = load i8**, i8*** %mangled.addr, align 8, !dbg !883
  %160 = load i8*, i8** %159, align 8, !dbg !884
  %incdec.ptr224 = getelementptr inbounds i8, i8* %160, i32 1, !dbg !884
  store i8* %incdec.ptr224, i8** %159, align 8, !dbg !884
  %161 = load i8**, i8*** %mangled.addr, align 8, !dbg !885
  %call225 = call i32 @get_count(i8** %161, i32* %n), !dbg !887
  %tobool226 = icmp ne i32 %call225, 0, !dbg !887
  br i1 %tobool226, label %lor.lhs.false227, label %if.then230, !dbg !888

lor.lhs.false227:                                 ; preds = %sw.bb223
  %162 = load i32, i32* %n, align 4, !dbg !889
  %163 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !890
  %numb = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %163, i32 0, i32 5, !dbg !891
  %164 = load i32, i32* %numb, align 4, !dbg !891
  %cmp228 = icmp sge i32 %162, %164, !dbg !892
  br i1 %cmp228, label %if.then230, label %if.else231, !dbg !893

if.then230:                                       ; preds = %lor.lhs.false227, %sw.bb223
  store i32 0, i32* %success, align 4, !dbg !894
  br label %if.end234, !dbg !895

if.else231:                                       ; preds = %lor.lhs.false227
  %165 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !896
  %166 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !897
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %166, i32 0, i32 3, !dbg !898
  %167 = load i8**, i8*** %btypevec, align 8, !dbg !898
  %168 = load i32, i32* %n, align 4, !dbg !899
  %idxprom232 = sext i32 %168 to i64, !dbg !897
  %arrayidx233 = getelementptr inbounds i8*, i8** %167, i64 %idxprom232, !dbg !897
  %169 = load i8*, i8** %arrayidx233, align 8, !dbg !897
  call void @string_append(%struct.string* %165, i8* %169), !dbg !900
  br label %if.end234

if.end234:                                        ; preds = %if.else231, %if.then230
  br label %sw.epilog265, !dbg !901

sw.bb235:                                         ; preds = %if.then219, %if.then219
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !902, metadata !DIExpression()), !dbg !904
  %170 = load i8**, i8*** %mangled.addr, align 8, !dbg !905
  %171 = load i8*, i8** %170, align 8, !dbg !906
  %incdec.ptr236 = getelementptr inbounds i8, i8* %171, i32 1, !dbg !906
  store i8* %incdec.ptr236, i8** %170, align 8, !dbg !906
  %172 = load i8**, i8*** %mangled.addr, align 8, !dbg !907
  %call237 = call i32 @consume_count_with_underscores(i8** %172), !dbg !908
  store i32 %call237, i32* %idx, align 4, !dbg !909
  %173 = load i32, i32* %idx, align 4, !dbg !910
  %cmp238 = icmp eq i32 %173, -1, !dbg !912
  br i1 %cmp238, label %if.then249, label %lor.lhs.false240, !dbg !913

lor.lhs.false240:                                 ; preds = %sw.bb235
  %174 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !914
  %tmpl_argvec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %174, i32 0, i32 16, !dbg !915
  %175 = load i8**, i8*** %tmpl_argvec, align 8, !dbg !915
  %tobool241 = icmp ne i8** %175, null, !dbg !914
  br i1 %tobool241, label %land.lhs.true242, label %lor.lhs.false245, !dbg !916

land.lhs.true242:                                 ; preds = %lor.lhs.false240
  %176 = load i32, i32* %idx, align 4, !dbg !917
  %177 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !918
  %ntmpl_args = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %177, i32 0, i32 17, !dbg !919
  %178 = load i32, i32* %ntmpl_args, align 8, !dbg !919
  %cmp243 = icmp sge i32 %176, %178, !dbg !920
  br i1 %cmp243, label %if.then249, label %lor.lhs.false245, !dbg !921

lor.lhs.false245:                                 ; preds = %land.lhs.true242, %lor.lhs.false240
  %179 = load i8**, i8*** %mangled.addr, align 8, !dbg !922
  %call246 = call i32 @consume_count_with_underscores(i8** %179), !dbg !923
  %cmp247 = icmp eq i32 %call246, -1, !dbg !924
  br i1 %cmp247, label %if.then249, label %if.end250, !dbg !925

if.then249:                                       ; preds = %lor.lhs.false245, %land.lhs.true242, %sw.bb235
  store i32 0, i32* %success, align 4, !dbg !926
  br label %sw.epilog265, !dbg !928

if.end250:                                        ; preds = %lor.lhs.false245
  %180 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !929
  %tmpl_argvec251 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %180, i32 0, i32 16, !dbg !931
  %181 = load i8**, i8*** %tmpl_argvec251, align 8, !dbg !931
  %tobool252 = icmp ne i8** %181, null, !dbg !929
  br i1 %tobool252, label %if.then253, label %if.else257, !dbg !932

if.then253:                                       ; preds = %if.end250
  %182 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !933
  %183 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !934
  %tmpl_argvec254 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %183, i32 0, i32 16, !dbg !935
  %184 = load i8**, i8*** %tmpl_argvec254, align 8, !dbg !935
  %185 = load i32, i32* %idx, align 4, !dbg !936
  %idxprom255 = sext i32 %185 to i64, !dbg !934
  %arrayidx256 = getelementptr inbounds i8*, i8** %184, i64 %idxprom255, !dbg !934
  %186 = load i8*, i8** %arrayidx256, align 8, !dbg !934
  call void @string_append(%struct.string* %182, i8* %186), !dbg !937
  br label %if.end258, !dbg !937

if.else257:                                       ; preds = %if.end250
  %187 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !938
  %188 = load i32, i32* %idx, align 4, !dbg !939
  call void @string_append_template_idx(%struct.string* %187, i32 %188), !dbg !940
  br label %if.end258

if.end258:                                        ; preds = %if.else257, %if.then253
  store i32 1, i32* %success, align 4, !dbg !941
  br label %sw.epilog265, !dbg !942

sw.default259:                                    ; preds = %if.then219
  %189 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !943
  %190 = load i8**, i8*** %mangled.addr, align 8, !dbg !944
  %191 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !945
  %call260 = call i32 @demangle_fund_type(%struct.work_stuff* %189, i8** %190, %struct.string* %191), !dbg !946
  store i32 %call260, i32* %success, align 4, !dbg !947
  %192 = load i32, i32* %tk, align 4, !dbg !948
  %cmp261 = icmp eq i32 %192, 0, !dbg !950
  br i1 %cmp261, label %if.then263, label %if.end264, !dbg !951

if.then263:                                       ; preds = %sw.default259
  %193 = load i32, i32* %success, align 4, !dbg !952
  store i32 %193, i32* %tk, align 4, !dbg !953
  br label %if.end264, !dbg !954

if.end264:                                        ; preds = %if.then263, %sw.default259
  br label %sw.epilog265, !dbg !955

sw.epilog265:                                     ; preds = %if.end264, %if.end258, %if.then249, %if.end234, %sw.bb221
  br label %if.end266, !dbg !956

if.end266:                                        ; preds = %sw.epilog265, %while.end
  %194 = load i32, i32* %success, align 4, !dbg !957
  %tobool267 = icmp ne i32 %194, 0, !dbg !957
  br i1 %tobool267, label %if.then268, label %if.else275, !dbg !959

if.then268:                                       ; preds = %if.end266
  %b269 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 0, !dbg !960
  %195 = load i8*, i8** %b269, align 8, !dbg !960
  %p270 = getelementptr inbounds %struct.string, %struct.string* %decl, i32 0, i32 1, !dbg !960
  %196 = load i8*, i8** %p270, align 8, !dbg !960
  %cmp271 = icmp eq i8* %195, %196, !dbg !960
  br i1 %cmp271, label %if.end274, label %if.then273, !dbg !963

if.then273:                                       ; preds = %if.then268
  %197 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !964
  call void @string_append(%struct.string* %197, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !966
  %198 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !967
  call void @string_appends(%struct.string* %198, %struct.string* %decl), !dbg !968
  br label %if.end274, !dbg !969

if.end274:                                        ; preds = %if.then273, %if.then268
  br label %if.end276, !dbg !970

if.else275:                                       ; preds = %if.end266
  %199 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !971
  call void @string_delete(%struct.string* %199), !dbg !972
  br label %if.end276

if.end276:                                        ; preds = %if.else275, %if.end274
  call void @string_delete(%struct.string* %decl), !dbg !973
  %200 = load i32, i32* %success, align 4, !dbg !974
  %tobool277 = icmp ne i32 %200, 0, !dbg !974
  br i1 %tobool277, label %if.then278, label %if.else282, !dbg !976

if.then278:                                       ; preds = %if.end276
  %201 = load i32, i32* %tk, align 4, !dbg !977
  %cmp279 = icmp eq i32 %201, 0, !dbg !978
  br i1 %cmp279, label %cond.true, label %cond.false, !dbg !979

cond.true:                                        ; preds = %if.then278
  br label %cond.end, !dbg !979

cond.false:                                       ; preds = %if.then278
  %202 = load i32, i32* %tk, align 4, !dbg !980
  br label %cond.end, !dbg !979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond281 = phi i32 [ 3, %cond.true ], [ %202, %cond.false ], !dbg !979
  store i32 %cond281, i32* %retval, align 4, !dbg !981
  br label %return, !dbg !981

if.else282:                                       ; preds = %if.end276
  store i32 0, i32* %retval, align 4, !dbg !982
  br label %return, !dbg !982

return:                                           ; preds = %if.else282, %cond.end
  %203 = load i32, i32* %retval, align 4, !dbg !983
  ret i32 %203, !dbg !983
}

declare dso_local i8* @strcat(i8*, i8*) #2

declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_delete(%struct.string* %s) #0 !dbg !984 {
entry:
  %s.addr = alloca %struct.string*, align 8
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !987, metadata !DIExpression()), !dbg !988
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !989
  %b = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0, !dbg !991
  %1 = load i8*, i8** %b, align 8, !dbg !991
  %cmp = icmp ne i8* %1, null, !dbg !992
  br i1 %cmp, label %if.then, label %if.end, !dbg !993

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !994
  %b1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0, !dbg !996
  %3 = load i8*, i8** %b1, align 8, !dbg !996
  call void @free(i8* %3), !dbg !997
  %4 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !998
  %p = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1, !dbg !999
  store i8* null, i8** %p, align 8, !dbg !1000
  %5 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !1001
  %e = getelementptr inbounds %struct.string, %struct.string* %5, i32 0, i32 2, !dbg !1002
  store i8* null, i8** %e, align 8, !dbg !1003
  %6 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !1004
  %b2 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 0, !dbg !1005
  store i8* null, i8** %b2, align 8, !dbg !1006
  br label %if.end, !dbg !1007

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !1008
}

declare dso_local i32 @memcmp(i8*, i8*, i64) #2

declare dso_local i8* @strchr(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @squangle_mop_up(%struct.work_stuff* %work) #0 !dbg !1009 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !1012, metadata !DIExpression()), !dbg !1013
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1014
  call void @forget_B_and_K_types(%struct.work_stuff* %0), !dbg !1015
  %1 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1016
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %1, i32 0, i32 3, !dbg !1018
  %2 = load i8**, i8*** %btypevec, align 8, !dbg !1018
  %cmp = icmp ne i8** %2, null, !dbg !1019
  br i1 %cmp, label %if.then, label %if.end, !dbg !1020

if.then:                                          ; preds = %entry
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1021
  %btypevec1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %3, i32 0, i32 3, !dbg !1023
  %4 = load i8**, i8*** %btypevec1, align 8, !dbg !1023
  %5 = bitcast i8** %4 to i8*, !dbg !1024
  call void @free(i8* %5), !dbg !1025
  br label %if.end, !dbg !1026

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1027
  %ktypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 2, !dbg !1029
  %7 = load i8**, i8*** %ktypevec, align 8, !dbg !1029
  %cmp2 = icmp ne i8** %7, null, !dbg !1030
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !1031

if.then3:                                         ; preds = %if.end
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1032
  %ktypevec4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 2, !dbg !1034
  %9 = load i8**, i8*** %ktypevec4, align 8, !dbg !1034
  %10 = bitcast i8** %9 to i8*, !dbg !1035
  call void @free(i8* %10), !dbg !1036
  br label %if.end5, !dbg !1037

if.end5:                                          ; preds = %if.then3, %if.end
  ret void, !dbg !1038
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @cplus_mangle_opname(i8* %opname, i32 %options) #0 !dbg !1039 {
entry:
  %retval = alloca i8*, align 8
  %opname.addr = alloca i8*, align 8
  %options.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %len = alloca i32, align 4
  store i8* %opname, i8** %opname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opname.addr, metadata !1042, metadata !DIExpression()), !dbg !1043
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !1044, metadata !DIExpression()), !dbg !1045
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1046, metadata !DIExpression()), !dbg !1047
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1048, metadata !DIExpression()), !dbg !1049
  %0 = load i8*, i8** %opname.addr, align 8, !dbg !1050
  %call = call i64 @strlen(i8* %0), !dbg !1051
  %conv = trunc i64 %call to i32, !dbg !1051
  store i32 %conv, i32* %len, align 4, !dbg !1052
  store i64 0, i64* %i, align 8, !dbg !1053
  br label %for.cond, !dbg !1055

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !1056
  %cmp = icmp ult i64 %1, 79, !dbg !1058
  br i1 %cmp, label %for.body, label %for.end, !dbg !1059

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8, !dbg !1060
  %arrayidx = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %2, !dbg !1063
  %out = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx, i32 0, i32 1, !dbg !1064
  %3 = load i8*, i8** %out, align 8, !dbg !1064
  %call2 = call i64 @strlen(i8* %3), !dbg !1065
  %conv3 = trunc i64 %call2 to i32, !dbg !1066
  %4 = load i32, i32* %len, align 4, !dbg !1067
  %cmp4 = icmp eq i32 %conv3, %4, !dbg !1068
  br i1 %cmp4, label %land.lhs.true, label %if.end, !dbg !1069

land.lhs.true:                                    ; preds = %for.body
  %5 = load i32, i32* %options.addr, align 4, !dbg !1070
  %and = and i32 %5, 2, !dbg !1071
  %6 = load i64, i64* %i, align 8, !dbg !1072
  %arrayidx6 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %6, !dbg !1073
  %flags = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx6, i32 0, i32 2, !dbg !1074
  %7 = load i32, i32* %flags, align 8, !dbg !1074
  %and7 = and i32 %7, 2, !dbg !1075
  %cmp8 = icmp eq i32 %and, %and7, !dbg !1076
  br i1 %cmp8, label %land.lhs.true10, label %if.end, !dbg !1077

land.lhs.true10:                                  ; preds = %land.lhs.true
  %8 = load i64, i64* %i, align 8, !dbg !1078
  %arrayidx11 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %8, !dbg !1079
  %out12 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx11, i32 0, i32 1, !dbg !1080
  %9 = load i8*, i8** %out12, align 8, !dbg !1080
  %10 = load i8*, i8** %opname.addr, align 8, !dbg !1081
  %11 = load i32, i32* %len, align 4, !dbg !1082
  %conv13 = sext i32 %11 to i64, !dbg !1082
  %call14 = call i32 @memcmp(i8* %9, i8* %10, i64 %conv13), !dbg !1083
  %cmp15 = icmp eq i32 %call14, 0, !dbg !1084
  br i1 %cmp15, label %if.then, label %if.end, !dbg !1085

if.then:                                          ; preds = %land.lhs.true10
  %12 = load i64, i64* %i, align 8, !dbg !1086
  %arrayidx17 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %12, !dbg !1087
  %in = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx17, i32 0, i32 0, !dbg !1088
  %13 = load i8*, i8** %in, align 8, !dbg !1088
  store i8* %13, i8** %retval, align 8, !dbg !1089
  br label %return, !dbg !1089

if.end:                                           ; preds = %land.lhs.true10, %land.lhs.true, %for.body
  br label %for.inc, !dbg !1090

for.inc:                                          ; preds = %if.end
  %14 = load i64, i64* %i, align 8, !dbg !1091
  %inc = add i64 %14, 1, !dbg !1091
  store i64 %inc, i64* %i, align 8, !dbg !1091
  br label %for.cond, !dbg !1092, !llvm.loop !1093

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !1095
  br label %return, !dbg !1095

return:                                           ; preds = %for.end, %if.then
  %15 = load i8*, i8** %retval, align 8, !dbg !1096
  ret i8* %15, !dbg !1096
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @cplus_demangle_set_style(i32 %style) #0 !dbg !1097 {
entry:
  %retval = alloca i32, align 4
  %style.addr = alloca i32, align 4
  %demangler = alloca %struct.demangler_engine*, align 8
  store i32 %style, i32* %style.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %style.addr, metadata !1100, metadata !DIExpression()), !dbg !1101
  call void @llvm.dbg.declare(metadata %struct.demangler_engine** %demangler, metadata !1102, metadata !DIExpression()), !dbg !1104
  store %struct.demangler_engine* getelementptr inbounds ([11 x %struct.demangler_engine], [11 x %struct.demangler_engine]* @libiberty_demanglers, i64 0, i64 0), %struct.demangler_engine** %demangler, align 8, !dbg !1104
  br label %for.cond, !dbg !1105

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1106
  %demangling_style = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %0, i32 0, i32 1, !dbg !1109
  %1 = load i32, i32* %demangling_style, align 8, !dbg !1109
  %cmp = icmp ne i32 %1, 0, !dbg !1110
  br i1 %cmp, label %for.body, label %for.end, !dbg !1111

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %style.addr, align 4, !dbg !1112
  %3 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1114
  %demangling_style1 = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %3, i32 0, i32 1, !dbg !1115
  %4 = load i32, i32* %demangling_style1, align 8, !dbg !1115
  %cmp2 = icmp eq i32 %2, %4, !dbg !1116
  br i1 %cmp2, label %if.then, label %if.end, !dbg !1117

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %style.addr, align 4, !dbg !1118
  store i32 %5, i32* @current_demangling_style, align 4, !dbg !1120
  %6 = load i32, i32* @current_demangling_style, align 4, !dbg !1121
  store i32 %6, i32* %retval, align 4, !dbg !1122
  br label %return, !dbg !1122

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !1115

for.inc:                                          ; preds = %if.end
  %7 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1123
  %incdec.ptr = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %7, i32 1, !dbg !1123
  store %struct.demangler_engine* %incdec.ptr, %struct.demangler_engine** %demangler, align 8, !dbg !1123
  br label %for.cond, !dbg !1124, !llvm.loop !1125

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !1127
  br label %return, !dbg !1127

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !1128
  ret i32 %8, !dbg !1128
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @cplus_demangle_name_to_style(i8* %name) #0 !dbg !1129 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %demangler = alloca %struct.demangler_engine*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1132, metadata !DIExpression()), !dbg !1133
  call void @llvm.dbg.declare(metadata %struct.demangler_engine** %demangler, metadata !1134, metadata !DIExpression()), !dbg !1135
  store %struct.demangler_engine* getelementptr inbounds ([11 x %struct.demangler_engine], [11 x %struct.demangler_engine]* @libiberty_demanglers, i64 0, i64 0), %struct.demangler_engine** %demangler, align 8, !dbg !1135
  br label %for.cond, !dbg !1136

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1137
  %demangling_style = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %0, i32 0, i32 1, !dbg !1140
  %1 = load i32, i32* %demangling_style, align 8, !dbg !1140
  %cmp = icmp ne i32 %1, 0, !dbg !1141
  br i1 %cmp, label %for.body, label %for.end, !dbg !1142

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1143
  %3 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1145
  %demangling_style_name = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %3, i32 0, i32 0, !dbg !1146
  %4 = load i8*, i8** %demangling_style_name, align 8, !dbg !1146
  %call = call i32 @strcmp(i8* %2, i8* %4), !dbg !1147
  %cmp1 = icmp eq i32 %call, 0, !dbg !1148
  br i1 %cmp1, label %if.then, label %if.end, !dbg !1149

if.then:                                          ; preds = %for.body
  %5 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1150
  %demangling_style2 = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %5, i32 0, i32 1, !dbg !1151
  %6 = load i32, i32* %demangling_style2, align 8, !dbg !1151
  store i32 %6, i32* %retval, align 4, !dbg !1152
  br label %return, !dbg !1152

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !1153

for.inc:                                          ; preds = %if.end
  %7 = load %struct.demangler_engine*, %struct.demangler_engine** %demangler, align 8, !dbg !1154
  %incdec.ptr = getelementptr inbounds %struct.demangler_engine, %struct.demangler_engine* %7, i32 1, !dbg !1154
  store %struct.demangler_engine* %incdec.ptr, %struct.demangler_engine** %demangler, align 8, !dbg !1154
  br label %for.cond, !dbg !1155, !llvm.loop !1156

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !1158
  br label %return, !dbg !1158

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !1159
  ret i32 %8, !dbg !1159
}

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @cplus_demangle(i8* %mangled, i32 %options) #0 !dbg !1160 {
entry:
  %retval = alloca i8*, align 8
  %mangled.addr = alloca i8*, align 8
  %options.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  %work = alloca [1 x %struct.work_stuff], align 16
  store i8* %mangled, i8** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mangled.addr, metadata !1161, metadata !DIExpression()), !dbg !1162
  store i32 %options, i32* %options.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %options.addr, metadata !1163, metadata !DIExpression()), !dbg !1164
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !1165, metadata !DIExpression()), !dbg !1166
  call void @llvm.dbg.declare(metadata [1 x %struct.work_stuff]* %work, metadata !1167, metadata !DIExpression()), !dbg !1168
  %0 = load i32, i32* @current_demangling_style, align 4, !dbg !1169
  %cmp = icmp eq i32 %0, -1, !dbg !1171
  br i1 %cmp, label %if.then, label %if.end, !dbg !1172

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mangled.addr, align 8, !dbg !1173
  %call = call i8* @xstrdup(i8* %1), !dbg !1174
  store i8* %call, i8** %retval, align 8, !dbg !1175
  br label %return, !dbg !1175

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1176
  %2 = bitcast %struct.work_stuff* %arraydecay to i8*, !dbg !1176
  call void @llvm.memset.p0i8.i64(i8* align 16 %2, i8 0, i64 112, i1 false), !dbg !1176
  %3 = load i32, i32* %options.addr, align 4, !dbg !1177
  %arraydecay1 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1178
  %options2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay1, i32 0, i32 0, !dbg !1178
  store i32 %3, i32* %options2, align 16, !dbg !1179
  %arraydecay3 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1180
  %options4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay3, i32 0, i32 0, !dbg !1180
  %4 = load i32, i32* %options4, align 16, !dbg !1180
  %and = and i32 %4, 65284, !dbg !1182
  %cmp5 = icmp eq i32 %and, 0, !dbg !1183
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !1184

if.then6:                                         ; preds = %if.end
  %5 = load i32, i32* @current_demangling_style, align 4, !dbg !1185
  %and7 = and i32 %5, 65284, !dbg !1186
  %arraydecay8 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1187
  %options9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay8, i32 0, i32 0, !dbg !1187
  %6 = load i32, i32* %options9, align 16, !dbg !1188
  %or = or i32 %6, %and7, !dbg !1188
  store i32 %or, i32* %options9, align 16, !dbg !1188
  br label %if.end10, !dbg !1189

if.end10:                                         ; preds = %if.then6, %if.end
  %arraydecay11 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1190
  %options12 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay11, i32 0, i32 0, !dbg !1190
  %7 = load i32, i32* %options12, align 16, !dbg !1190
  %and13 = and i32 %7, 16384, !dbg !1190
  %tobool = icmp ne i32 %and13, 0, !dbg !1190
  br i1 %tobool, label %if.then18, label %lor.lhs.false, !dbg !1192

lor.lhs.false:                                    ; preds = %if.end10
  %arraydecay14 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1193
  %options15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay14, i32 0, i32 0, !dbg !1193
  %8 = load i32, i32* %options15, align 16, !dbg !1193
  %and16 = and i32 %8, 256, !dbg !1193
  %tobool17 = icmp ne i32 %and16, 0, !dbg !1193
  br i1 %tobool17, label %if.then18, label %if.end30, !dbg !1194

if.then18:                                        ; preds = %lor.lhs.false, %if.end10
  %9 = load i8*, i8** %mangled.addr, align 8, !dbg !1195
  %arraydecay19 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1197
  %options20 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay19, i32 0, i32 0, !dbg !1197
  %10 = load i32, i32* %options20, align 16, !dbg !1197
  %call21 = call i8* @cplus_demangle_v3(i8* %9, i32 %10), !dbg !1198
  store i8* %call21, i8** %ret, align 8, !dbg !1199
  %11 = load i8*, i8** %ret, align 8, !dbg !1200
  %tobool22 = icmp ne i8* %11, null, !dbg !1200
  br i1 %tobool22, label %if.then28, label %lor.lhs.false23, !dbg !1202

lor.lhs.false23:                                  ; preds = %if.then18
  %arraydecay24 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1203
  %options25 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay24, i32 0, i32 0, !dbg !1203
  %12 = load i32, i32* %options25, align 16, !dbg !1203
  %and26 = and i32 %12, 16384, !dbg !1203
  %tobool27 = icmp ne i32 %and26, 0, !dbg !1203
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !1204

if.then28:                                        ; preds = %lor.lhs.false23, %if.then18
  %13 = load i8*, i8** %ret, align 8, !dbg !1205
  store i8* %13, i8** %retval, align 8, !dbg !1206
  br label %return, !dbg !1206

if.end29:                                         ; preds = %lor.lhs.false23
  br label %if.end30, !dbg !1207

if.end30:                                         ; preds = %if.end29, %lor.lhs.false
  %arraydecay31 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1208
  %options32 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay31, i32 0, i32 0, !dbg !1208
  %14 = load i32, i32* %options32, align 16, !dbg !1208
  %and33 = and i32 %14, 4, !dbg !1208
  %tobool34 = icmp ne i32 %and33, 0, !dbg !1208
  br i1 %tobool34, label %if.then35, label %if.end40, !dbg !1210

if.then35:                                        ; preds = %if.end30
  %15 = load i8*, i8** %mangled.addr, align 8, !dbg !1211
  %call36 = call i8* @java_demangle_v3(i8* %15), !dbg !1213
  store i8* %call36, i8** %ret, align 8, !dbg !1214
  %16 = load i8*, i8** %ret, align 8, !dbg !1215
  %tobool37 = icmp ne i8* %16, null, !dbg !1215
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !1217

if.then38:                                        ; preds = %if.then35
  %17 = load i8*, i8** %ret, align 8, !dbg !1218
  store i8* %17, i8** %retval, align 8, !dbg !1219
  br label %return, !dbg !1219

if.end39:                                         ; preds = %if.then35
  br label %if.end40, !dbg !1220

if.end40:                                         ; preds = %if.end39, %if.end30
  %arraydecay41 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1221
  %options42 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %arraydecay41, i32 0, i32 0, !dbg !1221
  %18 = load i32, i32* %options42, align 16, !dbg !1221
  %and43 = and i32 %18, 32768, !dbg !1221
  %tobool44 = icmp ne i32 %and43, 0, !dbg !1221
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !1223

if.then45:                                        ; preds = %if.end40
  %19 = load i8*, i8** %mangled.addr, align 8, !dbg !1224
  %20 = load i32, i32* %options.addr, align 4, !dbg !1225
  %call46 = call i8* @ada_demangle(i8* %19, i32 %20), !dbg !1226
  store i8* %call46, i8** %retval, align 8, !dbg !1227
  br label %return, !dbg !1227

if.end47:                                         ; preds = %if.end40
  %arraydecay48 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1228
  %21 = load i8*, i8** %mangled.addr, align 8, !dbg !1229
  %call49 = call i8* @internal_cplus_demangle(%struct.work_stuff* %arraydecay48, i8* %21), !dbg !1230
  store i8* %call49, i8** %ret, align 8, !dbg !1231
  %arraydecay50 = getelementptr inbounds [1 x %struct.work_stuff], [1 x %struct.work_stuff]* %work, i64 0, i64 0, !dbg !1232
  call void @squangle_mop_up(%struct.work_stuff* %arraydecay50), !dbg !1233
  %22 = load i8*, i8** %ret, align 8, !dbg !1234
  store i8* %22, i8** %retval, align 8, !dbg !1235
  br label %return, !dbg !1235

return:                                           ; preds = %if.end47, %if.then45, %if.then38, %if.then28, %if.then
  %23 = load i8*, i8** %retval, align 8, !dbg !1236
  ret i8* %23, !dbg !1236
}

declare dso_local i8* @xstrdup(i8*) #2

declare dso_local i8* @cplus_demangle_v3(i8*, i32) #2

declare dso_local i8* @java_demangle_v3(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ada_demangle(i8* %mangled, i32 %option) #0 !dbg !85 {
entry:
  %retval = alloca i8*, align 8
  %mangled.addr = alloca i8*, align 8
  %option.addr = alloca i32, align 4
  %len0 = alloca i32, align 4
  %p = alloca i8*, align 8
  %d = alloca i8*, align 8
  %demangled = alloca i8*, align 8
  %k = alloca i32, align 4
  %l = alloca i32, align 4
  store i8* %mangled, i8** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mangled.addr, metadata !1237, metadata !DIExpression()), !dbg !1238
  store i32 %option, i32* %option.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %option.addr, metadata !1239, metadata !DIExpression()), !dbg !1240
  call void @llvm.dbg.declare(metadata i32* %len0, metadata !1241, metadata !DIExpression()), !dbg !1242
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1243, metadata !DIExpression()), !dbg !1244
  call void @llvm.dbg.declare(metadata i8** %d, metadata !1245, metadata !DIExpression()), !dbg !1246
  call void @llvm.dbg.declare(metadata i8** %demangled, metadata !1247, metadata !DIExpression()), !dbg !1248
  %0 = load i8*, i8** %mangled.addr, align 8, !dbg !1249
  %call = call i32 @strncmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i64 0, i64 0), i64 5), !dbg !1251
  %cmp = icmp eq i32 %call, 0, !dbg !1252
  br i1 %cmp, label %if.then, label %if.end, !dbg !1253

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %mangled.addr, align 8, !dbg !1254
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 5, !dbg !1254
  store i8* %add.ptr, i8** %mangled.addr, align 8, !dbg !1254
  br label %if.end, !dbg !1255

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %mangled.addr, align 8, !dbg !1256
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !1256
  %3 = load i8, i8* %arrayidx, align 1, !dbg !1256
  %conv = sext i8 %3 to i32, !dbg !1256
  %and = and i32 %conv, 255, !dbg !1256
  %idxprom = sext i32 %and to i64, !dbg !1256
  %arrayidx1 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !1256
  %4 = load i16, i16* %arrayidx1, align 2, !dbg !1256
  %conv2 = zext i16 %4 to i32, !dbg !1256
  %and3 = and i32 %conv2, 8, !dbg !1256
  %tobool = icmp ne i32 %and3, 0, !dbg !1256
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !1258

if.then4:                                         ; preds = %if.end
  br label %unknown, !dbg !1259

if.end5:                                          ; preds = %if.end
  %5 = load i8*, i8** %mangled.addr, align 8, !dbg !1260
  %call6 = call i64 @strlen(i8* %5), !dbg !1261
  %add = add i64 %call6, 2, !dbg !1262
  %add7 = add i64 %add, 1, !dbg !1263
  %conv8 = trunc i64 %add7 to i32, !dbg !1261
  store i32 %conv8, i32* %len0, align 4, !dbg !1264
  %6 = load i32, i32* %len0, align 4, !dbg !1265
  %conv9 = sext i32 %6 to i64, !dbg !1265
  %mul = mul i64 1, %conv9, !dbg !1265
  %call10 = call i8* @xmalloc(i64 %mul), !dbg !1265
  store i8* %call10, i8** %demangled, align 8, !dbg !1266
  %7 = load i8*, i8** %demangled, align 8, !dbg !1267
  store i8* %7, i8** %d, align 8, !dbg !1268
  %8 = load i8*, i8** %mangled.addr, align 8, !dbg !1269
  store i8* %8, i8** %p, align 8, !dbg !1270
  br label %while.body, !dbg !1271

while.body:                                       ; preds = %if.end5, %if.else166, %if.then235
  %9 = load i8*, i8** %p, align 8, !dbg !1272
  %10 = load i8, i8* %9, align 1, !dbg !1272
  %conv11 = sext i8 %10 to i32, !dbg !1272
  %and12 = and i32 %conv11, 255, !dbg !1272
  %idxprom13 = sext i32 %and12 to i64, !dbg !1272
  %arrayidx14 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom13, !dbg !1272
  %11 = load i16, i16* %arrayidx14, align 2, !dbg !1272
  %conv15 = zext i16 %11 to i32, !dbg !1272
  %and16 = and i32 %conv15, 8, !dbg !1272
  %tobool17 = icmp ne i32 %and16, 0, !dbg !1272
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !1275

if.then18:                                        ; preds = %while.body
  br label %do.body, !dbg !1276

do.body:                                          ; preds = %lor.end55, %if.then18
  %12 = load i8*, i8** %p, align 8, !dbg !1278
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !1278
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !1278
  %13 = load i8, i8* %12, align 1, !dbg !1279
  %14 = load i8*, i8** %d, align 8, !dbg !1280
  %incdec.ptr19 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !1280
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !1280
  store i8 %13, i8* %14, align 1, !dbg !1281
  br label %do.cond, !dbg !1282

do.cond:                                          ; preds = %do.body
  %15 = load i8*, i8** %p, align 8, !dbg !1283
  %16 = load i8, i8* %15, align 1, !dbg !1283
  %conv20 = sext i8 %16 to i32, !dbg !1283
  %and21 = and i32 %conv20, 255, !dbg !1283
  %idxprom22 = sext i32 %and21 to i64, !dbg !1283
  %arrayidx23 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom22, !dbg !1283
  %17 = load i16, i16* %arrayidx23, align 2, !dbg !1283
  %conv24 = zext i16 %17 to i32, !dbg !1283
  %and25 = and i32 %conv24, 8, !dbg !1283
  %tobool26 = icmp ne i32 %and25, 0, !dbg !1283
  br i1 %tobool26, label %lor.end55, label %lor.lhs.false, !dbg !1284

lor.lhs.false:                                    ; preds = %do.cond
  %18 = load i8*, i8** %p, align 8, !dbg !1285
  %19 = load i8, i8* %18, align 1, !dbg !1285
  %conv27 = sext i8 %19 to i32, !dbg !1285
  %and28 = and i32 %conv27, 255, !dbg !1285
  %idxprom29 = sext i32 %and28 to i64, !dbg !1285
  %arrayidx30 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom29, !dbg !1285
  %20 = load i16, i16* %arrayidx30, align 2, !dbg !1285
  %conv31 = zext i16 %20 to i32, !dbg !1285
  %and32 = and i32 %conv31, 4, !dbg !1285
  %tobool33 = icmp ne i32 %and32, 0, !dbg !1285
  br i1 %tobool33, label %lor.end55, label %lor.rhs, !dbg !1286

lor.rhs:                                          ; preds = %lor.lhs.false
  %21 = load i8*, i8** %p, align 8, !dbg !1287
  %arrayidx34 = getelementptr inbounds i8, i8* %21, i64 0, !dbg !1287
  %22 = load i8, i8* %arrayidx34, align 1, !dbg !1287
  %conv35 = sext i8 %22 to i32, !dbg !1287
  %cmp36 = icmp eq i32 %conv35, 95, !dbg !1288
  br i1 %cmp36, label %land.rhs, label %land.end, !dbg !1289

land.rhs:                                         ; preds = %lor.rhs
  %23 = load i8*, i8** %p, align 8, !dbg !1290
  %arrayidx38 = getelementptr inbounds i8, i8* %23, i64 1, !dbg !1290
  %24 = load i8, i8* %arrayidx38, align 1, !dbg !1290
  %conv39 = sext i8 %24 to i32, !dbg !1290
  %and40 = and i32 %conv39, 255, !dbg !1290
  %idxprom41 = sext i32 %and40 to i64, !dbg !1290
  %arrayidx42 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom41, !dbg !1290
  %25 = load i16, i16* %arrayidx42, align 2, !dbg !1290
  %conv43 = zext i16 %25 to i32, !dbg !1290
  %and44 = and i32 %conv43, 8, !dbg !1290
  %tobool45 = icmp ne i32 %and44, 0, !dbg !1290
  br i1 %tobool45, label %lor.end, label %lor.rhs46, !dbg !1291

lor.rhs46:                                        ; preds = %land.rhs
  %26 = load i8*, i8** %p, align 8, !dbg !1292
  %arrayidx47 = getelementptr inbounds i8, i8* %26, i64 1, !dbg !1292
  %27 = load i8, i8* %arrayidx47, align 1, !dbg !1292
  %conv48 = sext i8 %27 to i32, !dbg !1292
  %and49 = and i32 %conv48, 255, !dbg !1292
  %idxprom50 = sext i32 %and49 to i64, !dbg !1292
  %arrayidx51 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom50, !dbg !1292
  %28 = load i16, i16* %arrayidx51, align 2, !dbg !1292
  %conv52 = zext i16 %28 to i32, !dbg !1292
  %and53 = and i32 %conv52, 4, !dbg !1292
  %tobool54 = icmp ne i32 %and53, 0, !dbg !1291
  br label %lor.end, !dbg !1291

lor.end:                                          ; preds = %lor.rhs46, %land.rhs
  %29 = phi i1 [ true, %land.rhs ], [ %tobool54, %lor.rhs46 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %30 = phi i1 [ false, %lor.rhs ], [ %29, %lor.end ], !dbg !1293
  br label %lor.end55, !dbg !1286

lor.end55:                                        ; preds = %land.end, %lor.lhs.false, %do.cond
  %31 = phi i1 [ true, %lor.lhs.false ], [ true, %do.cond ], [ %30, %land.end ]
  br i1 %31, label %do.body, label %do.end, !dbg !1282, !llvm.loop !1294

do.end:                                           ; preds = %lor.end55
  br label %if.end100, !dbg !1296

if.else:                                          ; preds = %while.body
  %32 = load i8*, i8** %p, align 8, !dbg !1297
  %arrayidx56 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !1297
  %33 = load i8, i8* %arrayidx56, align 1, !dbg !1297
  %conv57 = sext i8 %33 to i32, !dbg !1297
  %cmp58 = icmp eq i32 %conv57, 79, !dbg !1299
  br i1 %cmp58, label %if.then60, label %if.else98, !dbg !1300

if.then60:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %k, metadata !1301, metadata !DIExpression()), !dbg !1303
  store i32 0, i32* %k, align 4, !dbg !1304
  br label %for.cond, !dbg !1306

for.cond:                                         ; preds = %for.inc, %if.then60
  %34 = load i32, i32* %k, align 4, !dbg !1307
  %idxprom61 = sext i32 %34 to i64, !dbg !1309
  %arrayidx62 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom61, !dbg !1309
  %arrayidx63 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx62, i64 0, i64 0, !dbg !1309
  %35 = load i8*, i8** %arrayidx63, align 16, !dbg !1309
  %tobool64 = icmp ne i8* %35, null, !dbg !1310
  br i1 %tobool64, label %for.body, label %for.end, !dbg !1310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %l, metadata !1311, metadata !DIExpression()), !dbg !1313
  %36 = load i32, i32* %k, align 4, !dbg !1314
  %idxprom65 = sext i32 %36 to i64, !dbg !1315
  %arrayidx66 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom65, !dbg !1315
  %arrayidx67 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx66, i64 0, i64 0, !dbg !1315
  %37 = load i8*, i8** %arrayidx67, align 16, !dbg !1315
  %call68 = call i64 @strlen(i8* %37), !dbg !1316
  %conv69 = trunc i64 %call68 to i32, !dbg !1316
  store i32 %conv69, i32* %l, align 4, !dbg !1313
  %38 = load i8*, i8** %p, align 8, !dbg !1317
  %39 = load i32, i32* %k, align 4, !dbg !1319
  %idxprom70 = sext i32 %39 to i64, !dbg !1320
  %arrayidx71 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom70, !dbg !1320
  %arrayidx72 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx71, i64 0, i64 0, !dbg !1320
  %40 = load i8*, i8** %arrayidx72, align 16, !dbg !1320
  %41 = load i32, i32* %l, align 4, !dbg !1321
  %conv73 = sext i32 %41 to i64, !dbg !1321
  %call74 = call i32 @strncmp(i8* %38, i8* %40, i64 %conv73), !dbg !1322
  %tobool75 = icmp ne i32 %call74, 0, !dbg !1322
  br i1 %tobool75, label %if.end91, label %if.then76, !dbg !1323

if.then76:                                        ; preds = %for.body
  %42 = load i32, i32* %l, align 4, !dbg !1324
  %43 = load i8*, i8** %p, align 8, !dbg !1326
  %idx.ext = sext i32 %42 to i64, !dbg !1326
  %add.ptr77 = getelementptr inbounds i8, i8* %43, i64 %idx.ext, !dbg !1326
  store i8* %add.ptr77, i8** %p, align 8, !dbg !1326
  %44 = load i32, i32* %k, align 4, !dbg !1327
  %idxprom78 = sext i32 %44 to i64, !dbg !1328
  %arrayidx79 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom78, !dbg !1328
  %arrayidx80 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx79, i64 0, i64 1, !dbg !1328
  %45 = load i8*, i8** %arrayidx80, align 8, !dbg !1328
  %call81 = call i64 @strlen(i8* %45), !dbg !1329
  %conv82 = trunc i64 %call81 to i32, !dbg !1329
  store i32 %conv82, i32* %l, align 4, !dbg !1330
  %46 = load i8*, i8** %d, align 8, !dbg !1331
  %incdec.ptr83 = getelementptr inbounds i8, i8* %46, i32 1, !dbg !1331
  store i8* %incdec.ptr83, i8** %d, align 8, !dbg !1331
  store i8 34, i8* %46, align 1, !dbg !1332
  %47 = load i8*, i8** %d, align 8, !dbg !1333
  %48 = load i32, i32* %k, align 4, !dbg !1334
  %idxprom84 = sext i32 %48 to i64, !dbg !1335
  %arrayidx85 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom84, !dbg !1335
  %arrayidx86 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx85, i64 0, i64 1, !dbg !1335
  %49 = load i8*, i8** %arrayidx86, align 8, !dbg !1335
  %50 = load i32, i32* %l, align 4, !dbg !1336
  %conv87 = sext i32 %50 to i64, !dbg !1336
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %49, i64 %conv87, i1 false), !dbg !1337
  %51 = load i32, i32* %l, align 4, !dbg !1338
  %52 = load i8*, i8** %d, align 8, !dbg !1339
  %idx.ext88 = sext i32 %51 to i64, !dbg !1339
  %add.ptr89 = getelementptr inbounds i8, i8* %52, i64 %idx.ext88, !dbg !1339
  store i8* %add.ptr89, i8** %d, align 8, !dbg !1339
  %53 = load i8*, i8** %d, align 8, !dbg !1340
  %incdec.ptr90 = getelementptr inbounds i8, i8* %53, i32 1, !dbg !1340
  store i8* %incdec.ptr90, i8** %d, align 8, !dbg !1340
  store i8 34, i8* %53, align 1, !dbg !1341
  br label %for.end, !dbg !1342

if.end91:                                         ; preds = %for.body
  br label %for.inc, !dbg !1343

for.inc:                                          ; preds = %if.end91
  %54 = load i32, i32* %k, align 4, !dbg !1344
  %inc = add nsw i32 %54, 1, !dbg !1344
  store i32 %inc, i32* %k, align 4, !dbg !1344
  br label %for.cond, !dbg !1345, !llvm.loop !1346

for.end:                                          ; preds = %if.then76, %for.cond
  %55 = load i32, i32* %k, align 4, !dbg !1348
  %idxprom92 = sext i32 %55 to i64, !dbg !1350
  %arrayidx93 = getelementptr inbounds [20 x [2 x i8*]], [20 x [2 x i8*]]* @ada_demangle.operators, i64 0, i64 %idxprom92, !dbg !1350
  %arrayidx94 = getelementptr inbounds [2 x i8*], [2 x i8*]* %arrayidx93, i64 0, i64 0, !dbg !1350
  %56 = load i8*, i8** %arrayidx94, align 16, !dbg !1350
  %tobool95 = icmp ne i8* %56, null, !dbg !1350
  br i1 %tobool95, label %if.end97, label %if.then96, !dbg !1351

if.then96:                                        ; preds = %for.end
  br label %unknown, !dbg !1352

if.end97:                                         ; preds = %for.end
  br label %if.end99, !dbg !1353

if.else98:                                        ; preds = %if.else
  br label %unknown, !dbg !1354

if.end99:                                         ; preds = %if.end97
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %do.end
  %57 = load i8*, i8** %p, align 8, !dbg !1356
  %arrayidx101 = getelementptr inbounds i8, i8* %57, i64 0, !dbg !1356
  %58 = load i8, i8* %arrayidx101, align 1, !dbg !1356
  %conv102 = sext i8 %58 to i32, !dbg !1356
  %cmp103 = icmp eq i32 %conv102, 95, !dbg !1358
  br i1 %cmp103, label %if.then105, label %if.end204, !dbg !1359

if.then105:                                       ; preds = %if.end100
  %59 = load i8*, i8** %p, align 8, !dbg !1360
  %arrayidx106 = getelementptr inbounds i8, i8* %59, i64 1, !dbg !1360
  %60 = load i8, i8* %arrayidx106, align 1, !dbg !1360
  %conv107 = sext i8 %60 to i32, !dbg !1360
  %cmp108 = icmp eq i32 %conv107, 95, !dbg !1363
  br i1 %cmp108, label %if.then110, label %if.else169, !dbg !1364

if.then110:                                       ; preds = %if.then105
  %61 = load i8*, i8** %p, align 8, !dbg !1365
  %add.ptr111 = getelementptr inbounds i8, i8* %61, i64 2, !dbg !1365
  store i8* %add.ptr111, i8** %p, align 8, !dbg !1365
  %62 = load i8*, i8** %p, align 8, !dbg !1367
  %63 = load i8, i8* %62, align 1, !dbg !1367
  %conv112 = sext i8 %63 to i32, !dbg !1367
  %and113 = and i32 %conv112, 255, !dbg !1367
  %idxprom114 = sext i32 %and113 to i64, !dbg !1367
  %arrayidx115 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom114, !dbg !1367
  %64 = load i16, i16* %arrayidx115, align 2, !dbg !1367
  %conv116 = zext i16 %64 to i32, !dbg !1367
  %and117 = and i32 %conv116, 4, !dbg !1367
  %tobool118 = icmp ne i32 %and117, 0, !dbg !1367
  br i1 %tobool118, label %if.then119, label %if.else147, !dbg !1369

if.then119:                                       ; preds = %if.then110
  br label %do.body120, !dbg !1370

do.body120:                                       ; preds = %lor.end145, %if.then119
  %65 = load i8*, i8** %p, align 8, !dbg !1372
  %incdec.ptr121 = getelementptr inbounds i8, i8* %65, i32 1, !dbg !1372
  store i8* %incdec.ptr121, i8** %p, align 8, !dbg !1372
  br label %do.cond122, !dbg !1373

do.cond122:                                       ; preds = %do.body120
  %66 = load i8*, i8** %p, align 8, !dbg !1374
  %67 = load i8, i8* %66, align 1, !dbg !1374
  %conv123 = sext i8 %67 to i32, !dbg !1374
  %and124 = and i32 %conv123, 255, !dbg !1374
  %idxprom125 = sext i32 %and124 to i64, !dbg !1374
  %arrayidx126 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom125, !dbg !1374
  %68 = load i16, i16* %arrayidx126, align 2, !dbg !1374
  %conv127 = zext i16 %68 to i32, !dbg !1374
  %and128 = and i32 %conv127, 4, !dbg !1374
  %tobool129 = icmp ne i32 %and128, 0, !dbg !1374
  br i1 %tobool129, label %lor.end145, label %lor.rhs130, !dbg !1375

lor.rhs130:                                       ; preds = %do.cond122
  %69 = load i8*, i8** %p, align 8, !dbg !1376
  %arrayidx131 = getelementptr inbounds i8, i8* %69, i64 0, !dbg !1376
  %70 = load i8, i8* %arrayidx131, align 1, !dbg !1376
  %conv132 = sext i8 %70 to i32, !dbg !1376
  %cmp133 = icmp eq i32 %conv132, 95, !dbg !1377
  br i1 %cmp133, label %land.rhs135, label %land.end144, !dbg !1378

land.rhs135:                                      ; preds = %lor.rhs130
  %71 = load i8*, i8** %p, align 8, !dbg !1379
  %arrayidx136 = getelementptr inbounds i8, i8* %71, i64 1, !dbg !1379
  %72 = load i8, i8* %arrayidx136, align 1, !dbg !1379
  %conv137 = sext i8 %72 to i32, !dbg !1379
  %and138 = and i32 %conv137, 255, !dbg !1379
  %idxprom139 = sext i32 %and138 to i64, !dbg !1379
  %arrayidx140 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom139, !dbg !1379
  %73 = load i16, i16* %arrayidx140, align 2, !dbg !1379
  %conv141 = zext i16 %73 to i32, !dbg !1379
  %and142 = and i32 %conv141, 4, !dbg !1379
  %tobool143 = icmp ne i32 %and142, 0, !dbg !1378
  br label %land.end144

land.end144:                                      ; preds = %land.rhs135, %lor.rhs130
  %74 = phi i1 [ false, %lor.rhs130 ], [ %tobool143, %land.rhs135 ], !dbg !1380
  br label %lor.end145, !dbg !1375

lor.end145:                                       ; preds = %land.end144, %do.cond122
  %75 = phi i1 [ true, %do.cond122 ], [ %74, %land.end144 ]
  br i1 %75, label %do.body120, label %do.end146, !dbg !1373, !llvm.loop !1381

do.end146:                                        ; preds = %lor.end145
  br label %if.end168, !dbg !1383

if.else147:                                       ; preds = %if.then110
  %76 = load i8*, i8** %p, align 8, !dbg !1384
  %77 = load i8, i8* %76, align 1, !dbg !1386
  %conv148 = sext i8 %77 to i32, !dbg !1386
  %cmp149 = icmp eq i32 %conv148, 95, !dbg !1387
  br i1 %cmp149, label %land.lhs.true, label %if.else156, !dbg !1388

land.lhs.true:                                    ; preds = %if.else147
  %78 = load i8*, i8** %p, align 8, !dbg !1389
  %add.ptr151 = getelementptr inbounds i8, i8* %78, i64 1, !dbg !1390
  %call152 = call i32 @strcmp(i8* %add.ptr151, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.63, i64 0, i64 0)), !dbg !1391
  %tobool153 = icmp ne i32 %call152, 0, !dbg !1391
  br i1 %tobool153, label %if.else156, label %if.then154, !dbg !1392

if.then154:                                       ; preds = %land.lhs.true
  %79 = load i8*, i8** %d, align 8, !dbg !1393
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i64 10, i1 false), !dbg !1395
  %80 = load i8*, i8** %d, align 8, !dbg !1396
  %add.ptr155 = getelementptr inbounds i8, i8* %80, i64 10, !dbg !1396
  store i8* %add.ptr155, i8** %d, align 8, !dbg !1396
  br label %while.end334, !dbg !1397

if.else156:                                       ; preds = %land.lhs.true, %if.else147
  %81 = load i8*, i8** %p, align 8, !dbg !1398
  %82 = load i8, i8* %81, align 1, !dbg !1400
  %conv157 = sext i8 %82 to i32, !dbg !1400
  %cmp158 = icmp eq i32 %conv157, 95, !dbg !1401
  br i1 %cmp158, label %land.lhs.true160, label %if.else166, !dbg !1402

land.lhs.true160:                                 ; preds = %if.else156
  %83 = load i8*, i8** %p, align 8, !dbg !1403
  %add.ptr161 = getelementptr inbounds i8, i8* %83, i64 1, !dbg !1404
  %call162 = call i32 @strcmp(i8* %add.ptr161, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i64 0, i64 0)), !dbg !1405
  %tobool163 = icmp ne i32 %call162, 0, !dbg !1405
  br i1 %tobool163, label %if.else166, label %if.then164, !dbg !1406

if.then164:                                       ; preds = %land.lhs.true160
  %84 = load i8*, i8** %d, align 8, !dbg !1407
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.66, i64 0, i64 0), i64 10, i1 false), !dbg !1409
  %85 = load i8*, i8** %d, align 8, !dbg !1410
  %add.ptr165 = getelementptr inbounds i8, i8* %85, i64 10, !dbg !1410
  store i8* %add.ptr165, i8** %d, align 8, !dbg !1410
  br label %while.end334, !dbg !1411

if.else166:                                       ; preds = %land.lhs.true160, %if.else156
  %86 = load i8*, i8** %d, align 8, !dbg !1412
  %incdec.ptr167 = getelementptr inbounds i8, i8* %86, i32 1, !dbg !1412
  store i8* %incdec.ptr167, i8** %d, align 8, !dbg !1412
  store i8 46, i8* %86, align 1, !dbg !1414
  br label %while.body, !dbg !1415, !llvm.loop !1416

if.end168:                                        ; preds = %do.end146
  br label %if.end203, !dbg !1418

if.else169:                                       ; preds = %if.then105
  %87 = load i8*, i8** %p, align 8, !dbg !1419
  %arrayidx170 = getelementptr inbounds i8, i8* %87, i64 1, !dbg !1419
  %88 = load i8, i8* %arrayidx170, align 1, !dbg !1419
  %conv171 = sext i8 %88 to i32, !dbg !1419
  %cmp172 = icmp eq i32 %conv171, 66, !dbg !1421
  br i1 %cmp172, label %if.then179, label %lor.lhs.false174, !dbg !1422

lor.lhs.false174:                                 ; preds = %if.else169
  %89 = load i8*, i8** %p, align 8, !dbg !1423
  %arrayidx175 = getelementptr inbounds i8, i8* %89, i64 1, !dbg !1423
  %90 = load i8, i8* %arrayidx175, align 1, !dbg !1423
  %conv176 = sext i8 %90 to i32, !dbg !1423
  %cmp177 = icmp eq i32 %conv176, 69, !dbg !1424
  br i1 %cmp177, label %if.then179, label %if.else202, !dbg !1425

if.then179:                                       ; preds = %lor.lhs.false174, %if.else169
  %91 = load i8*, i8** %p, align 8, !dbg !1426
  %add.ptr180 = getelementptr inbounds i8, i8* %91, i64 2, !dbg !1426
  store i8* %add.ptr180, i8** %p, align 8, !dbg !1426
  br label %while.cond181, !dbg !1428

while.cond181:                                    ; preds = %while.body189, %if.then179
  %92 = load i8*, i8** %p, align 8, !dbg !1429
  %93 = load i8, i8* %92, align 1, !dbg !1429
  %conv182 = sext i8 %93 to i32, !dbg !1429
  %and183 = and i32 %conv182, 255, !dbg !1429
  %idxprom184 = sext i32 %and183 to i64, !dbg !1429
  %arrayidx185 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom184, !dbg !1429
  %94 = load i16, i16* %arrayidx185, align 2, !dbg !1429
  %conv186 = zext i16 %94 to i32, !dbg !1429
  %and187 = and i32 %conv186, 4, !dbg !1429
  %tobool188 = icmp ne i32 %and187, 0, !dbg !1428
  br i1 %tobool188, label %while.body189, label %while.end, !dbg !1428

while.body189:                                    ; preds = %while.cond181
  %95 = load i8*, i8** %p, align 8, !dbg !1430
  %incdec.ptr190 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !1430
  store i8* %incdec.ptr190, i8** %p, align 8, !dbg !1430
  br label %while.cond181, !dbg !1428, !llvm.loop !1431

while.end:                                        ; preds = %while.cond181
  %96 = load i8*, i8** %p, align 8, !dbg !1432
  %arrayidx191 = getelementptr inbounds i8, i8* %96, i64 0, !dbg !1432
  %97 = load i8, i8* %arrayidx191, align 1, !dbg !1432
  %conv192 = sext i8 %97 to i32, !dbg !1432
  %cmp193 = icmp eq i32 %conv192, 115, !dbg !1434
  br i1 %cmp193, label %land.lhs.true195, label %if.else201, !dbg !1435

land.lhs.true195:                                 ; preds = %while.end
  %98 = load i8*, i8** %p, align 8, !dbg !1436
  %arrayidx196 = getelementptr inbounds i8, i8* %98, i64 1, !dbg !1436
  %99 = load i8, i8* %arrayidx196, align 1, !dbg !1436
  %conv197 = sext i8 %99 to i32, !dbg !1436
  %cmp198 = icmp eq i32 %conv197, 0, !dbg !1437
  br i1 %cmp198, label %if.then200, label %if.else201, !dbg !1438

if.then200:                                       ; preds = %land.lhs.true195
  br label %while.end334, !dbg !1439

if.else201:                                       ; preds = %land.lhs.true195, %while.end
  br label %unknown, !dbg !1440

if.else202:                                       ; preds = %lor.lhs.false174
  br label %unknown, !dbg !1441

if.end203:                                        ; preds = %if.end168
  br label %if.end204, !dbg !1442

if.end204:                                        ; preds = %if.end203, %if.end100
  %100 = load i8*, i8** %p, align 8, !dbg !1443
  %arrayidx205 = getelementptr inbounds i8, i8* %100, i64 0, !dbg !1443
  %101 = load i8, i8* %arrayidx205, align 1, !dbg !1443
  %conv206 = sext i8 %101 to i32, !dbg !1443
  %cmp207 = icmp eq i32 %conv206, 84, !dbg !1445
  br i1 %cmp207, label %land.lhs.true209, label %if.end239, !dbg !1446

land.lhs.true209:                                 ; preds = %if.end204
  %102 = load i8*, i8** %p, align 8, !dbg !1447
  %arrayidx210 = getelementptr inbounds i8, i8* %102, i64 1, !dbg !1447
  %103 = load i8, i8* %arrayidx210, align 1, !dbg !1447
  %conv211 = sext i8 %103 to i32, !dbg !1447
  %cmp212 = icmp eq i32 %conv211, 75, !dbg !1448
  br i1 %cmp212, label %if.then214, label %if.end239, !dbg !1449

if.then214:                                       ; preds = %land.lhs.true209
  %104 = load i8*, i8** %p, align 8, !dbg !1450
  %arrayidx215 = getelementptr inbounds i8, i8* %104, i64 2, !dbg !1450
  %105 = load i8, i8* %arrayidx215, align 1, !dbg !1450
  %conv216 = sext i8 %105 to i32, !dbg !1450
  %cmp217 = icmp eq i32 %conv216, 66, !dbg !1453
  br i1 %cmp217, label %land.lhs.true219, label %if.else225, !dbg !1454

land.lhs.true219:                                 ; preds = %if.then214
  %106 = load i8*, i8** %p, align 8, !dbg !1455
  %arrayidx220 = getelementptr inbounds i8, i8* %106, i64 3, !dbg !1455
  %107 = load i8, i8* %arrayidx220, align 1, !dbg !1455
  %conv221 = sext i8 %107 to i32, !dbg !1455
  %cmp222 = icmp eq i32 %conv221, 0, !dbg !1456
  br i1 %cmp222, label %if.then224, label %if.else225, !dbg !1457

if.then224:                                       ; preds = %land.lhs.true219
  br label %while.end334, !dbg !1458

if.else225:                                       ; preds = %land.lhs.true219, %if.then214
  %108 = load i8*, i8** %p, align 8, !dbg !1460
  %arrayidx226 = getelementptr inbounds i8, i8* %108, i64 2, !dbg !1460
  %109 = load i8, i8* %arrayidx226, align 1, !dbg !1460
  %conv227 = sext i8 %109 to i32, !dbg !1460
  %cmp228 = icmp eq i32 %conv227, 95, !dbg !1462
  br i1 %cmp228, label %land.lhs.true230, label %if.else238, !dbg !1463

land.lhs.true230:                                 ; preds = %if.else225
  %110 = load i8*, i8** %p, align 8, !dbg !1464
  %arrayidx231 = getelementptr inbounds i8, i8* %110, i64 3, !dbg !1464
  %111 = load i8, i8* %arrayidx231, align 1, !dbg !1464
  %conv232 = sext i8 %111 to i32, !dbg !1464
  %cmp233 = icmp eq i32 %conv232, 95, !dbg !1465
  br i1 %cmp233, label %if.then235, label %if.else238, !dbg !1466

if.then235:                                       ; preds = %land.lhs.true230
  %112 = load i8*, i8** %p, align 8, !dbg !1467
  %add.ptr236 = getelementptr inbounds i8, i8* %112, i64 4, !dbg !1467
  store i8* %add.ptr236, i8** %p, align 8, !dbg !1467
  %113 = load i8*, i8** %d, align 8, !dbg !1469
  %incdec.ptr237 = getelementptr inbounds i8, i8* %113, i32 1, !dbg !1469
  store i8* %incdec.ptr237, i8** %d, align 8, !dbg !1469
  store i8 46, i8* %113, align 1, !dbg !1470
  br label %while.body, !dbg !1471, !llvm.loop !1416

if.else238:                                       ; preds = %land.lhs.true230, %if.else225
  br label %unknown, !dbg !1472

if.end239:                                        ; preds = %land.lhs.true209, %if.end204
  %114 = load i8*, i8** %p, align 8, !dbg !1473
  %arrayidx240 = getelementptr inbounds i8, i8* %114, i64 0, !dbg !1473
  %115 = load i8, i8* %arrayidx240, align 1, !dbg !1473
  %conv241 = sext i8 %115 to i32, !dbg !1473
  %cmp242 = icmp eq i32 %conv241, 80, !dbg !1475
  br i1 %cmp242, label %land.lhs.true249, label %lor.lhs.false244, !dbg !1476

lor.lhs.false244:                                 ; preds = %if.end239
  %116 = load i8*, i8** %p, align 8, !dbg !1477
  %arrayidx245 = getelementptr inbounds i8, i8* %116, i64 0, !dbg !1477
  %117 = load i8, i8* %arrayidx245, align 1, !dbg !1477
  %conv246 = sext i8 %117 to i32, !dbg !1477
  %cmp247 = icmp eq i32 %conv246, 78, !dbg !1478
  br i1 %cmp247, label %land.lhs.true249, label %if.end255, !dbg !1479

land.lhs.true249:                                 ; preds = %lor.lhs.false244, %if.end239
  %118 = load i8*, i8** %p, align 8, !dbg !1480
  %arrayidx250 = getelementptr inbounds i8, i8* %118, i64 1, !dbg !1480
  %119 = load i8, i8* %arrayidx250, align 1, !dbg !1480
  %conv251 = sext i8 %119 to i32, !dbg !1480
  %cmp252 = icmp eq i32 %conv251, 0, !dbg !1481
  br i1 %cmp252, label %if.then254, label %if.end255, !dbg !1482

if.then254:                                       ; preds = %land.lhs.true249
  br label %while.end334, !dbg !1483

if.end255:                                        ; preds = %land.lhs.true249, %lor.lhs.false244
  %120 = load i8*, i8** %p, align 8, !dbg !1485
  %arrayidx256 = getelementptr inbounds i8, i8* %120, i64 0, !dbg !1485
  %121 = load i8, i8* %arrayidx256, align 1, !dbg !1485
  %conv257 = sext i8 %121 to i32, !dbg !1485
  %cmp258 = icmp eq i32 %conv257, 69, !dbg !1487
  br i1 %cmp258, label %land.lhs.true260, label %if.end266, !dbg !1488

land.lhs.true260:                                 ; preds = %if.end255
  %122 = load i8*, i8** %p, align 8, !dbg !1489
  %arrayidx261 = getelementptr inbounds i8, i8* %122, i64 1, !dbg !1489
  %123 = load i8, i8* %arrayidx261, align 1, !dbg !1489
  %conv262 = sext i8 %123 to i32, !dbg !1489
  %cmp263 = icmp eq i32 %conv262, 0, !dbg !1490
  br i1 %cmp263, label %if.then265, label %if.end266, !dbg !1491

if.then265:                                       ; preds = %land.lhs.true260
  br label %unknown, !dbg !1492

if.end266:                                        ; preds = %land.lhs.true260, %if.end255
  %124 = load i8*, i8** %p, align 8, !dbg !1494
  %125 = load i8, i8* %124, align 1, !dbg !1496
  %conv267 = sext i8 %125 to i32, !dbg !1496
  %cmp268 = icmp eq i32 %conv267, 78, !dbg !1497
  br i1 %cmp268, label %if.then274, label %lor.lhs.false270, !dbg !1498

lor.lhs.false270:                                 ; preds = %if.end266
  %126 = load i8*, i8** %p, align 8, !dbg !1499
  %127 = load i8, i8* %126, align 1, !dbg !1500
  %conv271 = sext i8 %127 to i32, !dbg !1500
  %cmp272 = icmp eq i32 %conv271, 83, !dbg !1501
  br i1 %cmp272, label %if.then274, label %if.end275, !dbg !1502

if.then274:                                       ; preds = %lor.lhs.false270, %if.end266
  br label %unknown, !dbg !1503

if.end275:                                        ; preds = %lor.lhs.false270
  %128 = load i8*, i8** %p, align 8, !dbg !1505
  %arrayidx276 = getelementptr inbounds i8, i8* %128, i64 0, !dbg !1505
  %129 = load i8, i8* %arrayidx276, align 1, !dbg !1505
  %conv277 = sext i8 %129 to i32, !dbg !1505
  %cmp278 = icmp eq i32 %conv277, 88, !dbg !1507
  br i1 %cmp278, label %if.then280, label %if.end301, !dbg !1508

if.then280:                                       ; preds = %if.end275
  %130 = load i8*, i8** %p, align 8, !dbg !1509
  %arrayidx281 = getelementptr inbounds i8, i8* %130, i64 1, !dbg !1509
  %131 = load i8, i8* %arrayidx281, align 1, !dbg !1509
  %conv282 = sext i8 %131 to i32, !dbg !1509
  %cmp283 = icmp eq i32 %conv282, 110, !dbg !1512
  br i1 %cmp283, label %if.then290, label %lor.lhs.false285, !dbg !1513

lor.lhs.false285:                                 ; preds = %if.then280
  %132 = load i8*, i8** %p, align 8, !dbg !1514
  %arrayidx286 = getelementptr inbounds i8, i8* %132, i64 1, !dbg !1514
  %133 = load i8, i8* %arrayidx286, align 1, !dbg !1514
  %conv287 = sext i8 %133 to i32, !dbg !1514
  %cmp288 = icmp eq i32 %conv287, 98, !dbg !1515
  br i1 %cmp288, label %if.then290, label %if.else292, !dbg !1516

if.then290:                                       ; preds = %lor.lhs.false285, %if.then280
  %134 = load i8*, i8** %p, align 8, !dbg !1517
  %add.ptr291 = getelementptr inbounds i8, i8* %134, i64 2, !dbg !1517
  store i8* %add.ptr291, i8** %p, align 8, !dbg !1517
  br label %if.end300, !dbg !1518

if.else292:                                       ; preds = %lor.lhs.false285
  %135 = load i8*, i8** %p, align 8, !dbg !1519
  %arrayidx293 = getelementptr inbounds i8, i8* %135, i64 1, !dbg !1519
  %136 = load i8, i8* %arrayidx293, align 1, !dbg !1519
  %conv294 = sext i8 %136 to i32, !dbg !1519
  %cmp295 = icmp eq i32 %conv294, 0, !dbg !1521
  br i1 %cmp295, label %if.then297, label %if.end299, !dbg !1522

if.then297:                                       ; preds = %if.else292
  %137 = load i8*, i8** %p, align 8, !dbg !1523
  %incdec.ptr298 = getelementptr inbounds i8, i8* %137, i32 1, !dbg !1523
  store i8* %incdec.ptr298, i8** %p, align 8, !dbg !1523
  br label %if.end299, !dbg !1524

if.end299:                                        ; preds = %if.then297, %if.else292
  br label %if.end300

if.end300:                                        ; preds = %if.end299, %if.then290
  br label %if.end301, !dbg !1525

if.end301:                                        ; preds = %if.end300, %if.end275
  %138 = load i8*, i8** %p, align 8, !dbg !1526
  %arrayidx302 = getelementptr inbounds i8, i8* %138, i64 0, !dbg !1526
  %139 = load i8, i8* %arrayidx302, align 1, !dbg !1526
  %conv303 = sext i8 %139 to i32, !dbg !1526
  %cmp304 = icmp eq i32 %conv303, 46, !dbg !1528
  br i1 %cmp304, label %land.lhs.true306, label %if.end328, !dbg !1529

land.lhs.true306:                                 ; preds = %if.end301
  %140 = load i8*, i8** %p, align 8, !dbg !1530
  %arrayidx307 = getelementptr inbounds i8, i8* %140, i64 1, !dbg !1530
  %141 = load i8, i8* %arrayidx307, align 1, !dbg !1530
  %conv308 = sext i8 %141 to i32, !dbg !1530
  %and309 = and i32 %conv308, 255, !dbg !1530
  %idxprom310 = sext i32 %and309 to i64, !dbg !1530
  %arrayidx311 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom310, !dbg !1530
  %142 = load i16, i16* %arrayidx311, align 2, !dbg !1530
  %conv312 = zext i16 %142 to i32, !dbg !1530
  %and313 = and i32 %conv312, 4, !dbg !1530
  %tobool314 = icmp ne i32 %and313, 0, !dbg !1530
  br i1 %tobool314, label %if.then315, label %if.end328, !dbg !1531

if.then315:                                       ; preds = %land.lhs.true306
  %143 = load i8*, i8** %p, align 8, !dbg !1532
  %add.ptr316 = getelementptr inbounds i8, i8* %143, i64 2, !dbg !1532
  store i8* %add.ptr316, i8** %p, align 8, !dbg !1532
  br label %while.cond317, !dbg !1534

while.cond317:                                    ; preds = %while.body325, %if.then315
  %144 = load i8*, i8** %p, align 8, !dbg !1535
  %145 = load i8, i8* %144, align 1, !dbg !1535
  %conv318 = sext i8 %145 to i32, !dbg !1535
  %and319 = and i32 %conv318, 255, !dbg !1535
  %idxprom320 = sext i32 %and319 to i64, !dbg !1535
  %arrayidx321 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom320, !dbg !1535
  %146 = load i16, i16* %arrayidx321, align 2, !dbg !1535
  %conv322 = zext i16 %146 to i32, !dbg !1535
  %and323 = and i32 %conv322, 4, !dbg !1535
  %tobool324 = icmp ne i32 %and323, 0, !dbg !1534
  br i1 %tobool324, label %while.body325, label %while.end327, !dbg !1534

while.body325:                                    ; preds = %while.cond317
  %147 = load i8*, i8** %p, align 8, !dbg !1536
  %incdec.ptr326 = getelementptr inbounds i8, i8* %147, i32 1, !dbg !1536
  store i8* %incdec.ptr326, i8** %p, align 8, !dbg !1536
  br label %while.cond317, !dbg !1534, !llvm.loop !1537

while.end327:                                     ; preds = %while.cond317
  br label %if.end328, !dbg !1538

if.end328:                                        ; preds = %while.end327, %land.lhs.true306, %if.end301
  %148 = load i8*, i8** %p, align 8, !dbg !1539
  %149 = load i8, i8* %148, align 1, !dbg !1541
  %conv329 = sext i8 %149 to i32, !dbg !1541
  %cmp330 = icmp eq i32 %conv329, 0, !dbg !1542
  br i1 %cmp330, label %if.then332, label %if.else333, !dbg !1543

if.then332:                                       ; preds = %if.end328
  br label %while.end334, !dbg !1544

if.else333:                                       ; preds = %if.end328
  br label %unknown, !dbg !1546

while.end334:                                     ; preds = %if.then332, %if.then254, %if.then224, %if.then200, %if.then164, %if.then154
  %150 = load i8*, i8** %d, align 8, !dbg !1547
  store i8 0, i8* %150, align 1, !dbg !1548
  %151 = load i8*, i8** %demangled, align 8, !dbg !1549
  store i8* %151, i8** %retval, align 8, !dbg !1550
  br label %return, !dbg !1550

unknown:                                          ; preds = %if.else333, %if.then274, %if.then265, %if.else238, %if.else202, %if.else201, %if.else98, %if.then96, %if.then4
  call void @llvm.dbg.label(metadata !1551), !dbg !1552
  %152 = load i8*, i8** %mangled.addr, align 8, !dbg !1553
  %call335 = call i64 @strlen(i8* %152), !dbg !1554
  %conv336 = trunc i64 %call335 to i32, !dbg !1554
  store i32 %conv336, i32* %len0, align 4, !dbg !1555
  %153 = load i32, i32* %len0, align 4, !dbg !1556
  %add337 = add nsw i32 %153, 3, !dbg !1556
  %conv338 = sext i32 %add337 to i64, !dbg !1556
  %mul339 = mul i64 1, %conv338, !dbg !1556
  %call340 = call i8* @xmalloc(i64 %mul339), !dbg !1556
  store i8* %call340, i8** %demangled, align 8, !dbg !1557
  %154 = load i8*, i8** %mangled.addr, align 8, !dbg !1558
  %arrayidx341 = getelementptr inbounds i8, i8* %154, i64 0, !dbg !1558
  %155 = load i8, i8* %arrayidx341, align 1, !dbg !1558
  %conv342 = sext i8 %155 to i32, !dbg !1558
  %cmp343 = icmp eq i32 %conv342, 60, !dbg !1560
  br i1 %cmp343, label %if.then345, label %if.else347, !dbg !1561

if.then345:                                       ; preds = %unknown
  %156 = load i8*, i8** %demangled, align 8, !dbg !1562
  %157 = load i8*, i8** %mangled.addr, align 8, !dbg !1563
  %call346 = call i8* @strcpy(i8* %156, i8* %157), !dbg !1564
  br label %if.end349, !dbg !1564

if.else347:                                       ; preds = %unknown
  %158 = load i8*, i8** %demangled, align 8, !dbg !1565
  %159 = load i8*, i8** %mangled.addr, align 8, !dbg !1566
  %call348 = call i32 (i8*, i8*, ...) @sprintf(i8* %158, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i64 0, i64 0), i8* %159), !dbg !1567
  br label %if.end349

if.end349:                                        ; preds = %if.else347, %if.then345
  %160 = load i8*, i8** %demangled, align 8, !dbg !1568
  store i8* %160, i8** %retval, align 8, !dbg !1569
  br label %return, !dbg !1569

return:                                           ; preds = %if.end349, %while.end334
  %161 = load i8*, i8** %retval, align 8, !dbg !1570
  ret i8* %161, !dbg !1570
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @internal_cplus_demangle(%struct.work_stuff* %work, i8* %mangled) #0 !dbg !1571 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8*, align 8
  %decl = alloca %struct.string, align 8
  %success = alloca i32, align 4
  %demangled = alloca i8*, align 8
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %s3 = alloca i32, align 4
  %s4 = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !1574, metadata !DIExpression()), !dbg !1575
  store i8* %mangled, i8** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mangled.addr, metadata !1576, metadata !DIExpression()), !dbg !1577
  call void @llvm.dbg.declare(metadata %struct.string* %decl, metadata !1578, metadata !DIExpression()), !dbg !1579
  call void @llvm.dbg.declare(metadata i32* %success, metadata !1580, metadata !DIExpression()), !dbg !1581
  store i32 0, i32* %success, align 4, !dbg !1581
  call void @llvm.dbg.declare(metadata i8** %demangled, metadata !1582, metadata !DIExpression()), !dbg !1583
  store i8* null, i8** %demangled, align 8, !dbg !1583
  call void @llvm.dbg.declare(metadata i32* %s1, metadata !1584, metadata !DIExpression()), !dbg !1585
  call void @llvm.dbg.declare(metadata i32* %s2, metadata !1586, metadata !DIExpression()), !dbg !1587
  call void @llvm.dbg.declare(metadata i32* %s3, metadata !1588, metadata !DIExpression()), !dbg !1589
  call void @llvm.dbg.declare(metadata i32* %s4, metadata !1590, metadata !DIExpression()), !dbg !1591
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1592
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 10, !dbg !1593
  %1 = load i32, i32* %constructor, align 8, !dbg !1593
  store i32 %1, i32* %s1, align 4, !dbg !1594
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1595
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 11, !dbg !1596
  %3 = load i32, i32* %destructor, align 4, !dbg !1596
  store i32 %3, i32* %s2, align 4, !dbg !1597
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1598
  %static_type = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 12, !dbg !1599
  %5 = load i32, i32* %static_type, align 8, !dbg !1599
  store i32 %5, i32* %s3, align 4, !dbg !1600
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1601
  %type_quals = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 14, !dbg !1602
  %7 = load i32, i32* %type_quals, align 8, !dbg !1602
  store i32 %7, i32* %s4, align 4, !dbg !1603
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1604
  %destructor1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 11, !dbg !1605
  store i32 0, i32* %destructor1, align 4, !dbg !1606
  %9 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1607
  %constructor2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %9, i32 0, i32 10, !dbg !1608
  store i32 0, i32* %constructor2, align 8, !dbg !1609
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1610
  %type_quals3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 14, !dbg !1611
  store i32 0, i32* %type_quals3, align 8, !dbg !1612
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1613
  %dllimported = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 15, !dbg !1614
  store i32 0, i32* %dllimported, align 4, !dbg !1615
  %12 = load i8*, i8** %mangled.addr, align 8, !dbg !1616
  %cmp = icmp ne i8* %12, null, !dbg !1618
  br i1 %cmp, label %land.lhs.true, label %if.end42, !dbg !1619

land.lhs.true:                                    ; preds = %entry
  %13 = load i8*, i8** %mangled.addr, align 8, !dbg !1620
  %14 = load i8, i8* %13, align 1, !dbg !1621
  %conv = sext i8 %14 to i32, !dbg !1621
  %cmp4 = icmp ne i32 %conv, 0, !dbg !1622
  br i1 %cmp4, label %if.then, label %if.end42, !dbg !1623

if.then:                                          ; preds = %land.lhs.true
  call void @string_init(%struct.string* %decl), !dbg !1624
  %15 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1626
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %15, i32 0, i32 0, !dbg !1626
  %16 = load i32, i32* %options, align 8, !dbg !1626
  %and = and i32 %16, 256, !dbg !1626
  %tobool = icmp ne i32 %and, 0, !dbg !1626
  br i1 %tobool, label %if.then9, label %lor.lhs.false, !dbg !1628

lor.lhs.false:                                    ; preds = %if.then
  %17 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1629
  %options6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %17, i32 0, i32 0, !dbg !1629
  %18 = load i32, i32* %options6, align 8, !dbg !1629
  %and7 = and i32 %18, 512, !dbg !1629
  %tobool8 = icmp ne i32 %and7, 0, !dbg !1629
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !1630

if.then9:                                         ; preds = %lor.lhs.false, %if.then
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1631
  %call = call i32 @gnu_special(%struct.work_stuff* %19, i8** %mangled.addr, %struct.string* %decl), !dbg !1633
  store i32 %call, i32* %success, align 4, !dbg !1634
  br label %if.end, !dbg !1635

if.end:                                           ; preds = %if.then9, %lor.lhs.false
  %20 = load i32, i32* %success, align 4, !dbg !1636
  %tobool10 = icmp ne i32 %20, 0, !dbg !1636
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !1638

if.then11:                                        ; preds = %if.end
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1639
  %call12 = call i32 @demangle_prefix(%struct.work_stuff* %21, i8** %mangled.addr, %struct.string* %decl), !dbg !1641
  store i32 %call12, i32* %success, align 4, !dbg !1642
  br label %if.end13, !dbg !1643

if.end13:                                         ; preds = %if.then11, %if.end
  %22 = load i32, i32* %success, align 4, !dbg !1644
  %tobool14 = icmp ne i32 %22, 0, !dbg !1644
  br i1 %tobool14, label %land.lhs.true15, label %if.end21, !dbg !1646

land.lhs.true15:                                  ; preds = %if.end13
  %23 = load i8*, i8** %mangled.addr, align 8, !dbg !1647
  %24 = load i8, i8* %23, align 1, !dbg !1648
  %conv16 = sext i8 %24 to i32, !dbg !1648
  %cmp17 = icmp ne i32 %conv16, 0, !dbg !1649
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !1650

if.then19:                                        ; preds = %land.lhs.true15
  %25 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1651
  %call20 = call i32 @demangle_signature(%struct.work_stuff* %25, i8** %mangled.addr, %struct.string* %decl), !dbg !1653
  store i32 %call20, i32* %success, align 4, !dbg !1654
  br label %if.end21, !dbg !1655

if.end21:                                         ; preds = %if.then19, %land.lhs.true15, %if.end13
  %26 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1656
  %constructor22 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %26, i32 0, i32 10, !dbg !1658
  %27 = load i32, i32* %constructor22, align 8, !dbg !1658
  %cmp23 = icmp eq i32 %27, 2, !dbg !1659
  br i1 %cmp23, label %if.then25, label %if.else, !dbg !1660

if.then25:                                        ; preds = %if.end21
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.183, i64 0, i64 0)), !dbg !1661
  %28 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1663
  %constructor26 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %28, i32 0, i32 10, !dbg !1664
  store i32 0, i32* %constructor26, align 8, !dbg !1665
  br label %if.end40, !dbg !1666

if.else:                                          ; preds = %if.end21
  %29 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1667
  %destructor27 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %29, i32 0, i32 11, !dbg !1669
  %30 = load i32, i32* %destructor27, align 4, !dbg !1669
  %cmp28 = icmp eq i32 %30, 2, !dbg !1670
  br i1 %cmp28, label %if.then30, label %if.else32, !dbg !1671

if.then30:                                        ; preds = %if.else
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.184, i64 0, i64 0)), !dbg !1672
  %31 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1674
  %destructor31 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %31, i32 0, i32 11, !dbg !1675
  store i32 0, i32* %destructor31, align 4, !dbg !1676
  br label %if.end39, !dbg !1677

if.else32:                                        ; preds = %if.else
  %32 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1678
  %dllimported33 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %32, i32 0, i32 15, !dbg !1680
  %33 = load i32, i32* %dllimported33, align 4, !dbg !1680
  %cmp34 = icmp eq i32 %33, 1, !dbg !1681
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !1682

if.then36:                                        ; preds = %if.else32
  call void @string_prepend(%struct.string* %decl, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.185, i64 0, i64 0)), !dbg !1683
  %34 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1685
  %dllimported37 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %34, i32 0, i32 15, !dbg !1686
  store i32 0, i32* %dllimported37, align 4, !dbg !1687
  br label %if.end38, !dbg !1688

if.end38:                                         ; preds = %if.then36, %if.else32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then30
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then25
  %35 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1689
  %36 = load i32, i32* %success, align 4, !dbg !1690
  %call41 = call i8* @mop_up(%struct.work_stuff* %35, %struct.string* %decl, i32 %36), !dbg !1691
  store i8* %call41, i8** %demangled, align 8, !dbg !1692
  br label %if.end42, !dbg !1693

if.end42:                                         ; preds = %if.end40, %land.lhs.true, %entry
  %37 = load i32, i32* %s1, align 4, !dbg !1694
  %38 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1695
  %constructor43 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %38, i32 0, i32 10, !dbg !1696
  store i32 %37, i32* %constructor43, align 8, !dbg !1697
  %39 = load i32, i32* %s2, align 4, !dbg !1698
  %40 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1699
  %destructor44 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %40, i32 0, i32 11, !dbg !1700
  store i32 %39, i32* %destructor44, align 4, !dbg !1701
  %41 = load i32, i32* %s3, align 4, !dbg !1702
  %42 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1703
  %static_type45 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %42, i32 0, i32 12, !dbg !1704
  store i32 %41, i32* %static_type45, align 8, !dbg !1705
  %43 = load i32, i32* %s4, align 4, !dbg !1706
  %44 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1707
  %type_quals46 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %44, i32 0, i32 14, !dbg !1708
  store i32 %43, i32* %type_quals46, align 8, !dbg !1709
  %45 = load i8*, i8** %demangled, align 8, !dbg !1710
  ret i8* %45, !dbg !1711
}

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_init(%struct.string* %s) #0 !dbg !1712 {
entry:
  %s.addr = alloca %struct.string*, align 8
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !1713, metadata !DIExpression()), !dbg !1714
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !1715
  %e = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 2, !dbg !1716
  store i8* null, i8** %e, align 8, !dbg !1717
  %1 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !1718
  %p = getelementptr inbounds %struct.string, %struct.string* %1, i32 0, i32 1, !dbg !1719
  store i8* null, i8** %p, align 8, !dbg !1720
  %2 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !1721
  %b = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 0, !dbg !1722
  store i8* null, i8** %b, align 8, !dbg !1723
  ret void, !dbg !1724
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gnu_special(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !1725 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %n = alloca i32, align 4
  %success = alloca i32, align 4
  %p = alloca i8*, align 8
  %delta = alloca i32, align 4
  %method = alloca i8*, align 8
  %buf = alloca [50 x i8], align 16
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !1726, metadata !DIExpression()), !dbg !1727
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !1728, metadata !DIExpression()), !dbg !1729
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !1730, metadata !DIExpression()), !dbg !1731
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1732, metadata !DIExpression()), !dbg !1733
  call void @llvm.dbg.declare(metadata i32* %success, metadata !1734, metadata !DIExpression()), !dbg !1735
  store i32 1, i32* %success, align 4, !dbg !1735
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1736, metadata !DIExpression()), !dbg !1737
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !1738
  %1 = load i8*, i8** %0, align 8, !dbg !1740
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0, !dbg !1741
  %2 = load i8, i8* %arrayidx, align 1, !dbg !1741
  %conv = sext i8 %2 to i32, !dbg !1741
  %cmp = icmp eq i32 %conv, 95, !dbg !1742
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !1743

land.lhs.true:                                    ; preds = %entry
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !1744
  %4 = load i8*, i8** %3, align 8, !dbg !1745
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !1746
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !1746
  %conv3 = sext i8 %5 to i32, !dbg !1746
  %call = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv3), !dbg !1747
  %cmp4 = icmp ne i8* %call, null, !dbg !1748
  br i1 %cmp4, label %land.lhs.true6, label %if.else, !dbg !1749

land.lhs.true6:                                   ; preds = %land.lhs.true
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !1750
  %7 = load i8*, i8** %6, align 8, !dbg !1751
  %arrayidx7 = getelementptr inbounds i8, i8* %7, i64 2, !dbg !1752
  %8 = load i8, i8* %arrayidx7, align 1, !dbg !1752
  %conv8 = sext i8 %8 to i32, !dbg !1752
  %cmp9 = icmp eq i32 %conv8, 95, !dbg !1753
  br i1 %cmp9, label %if.then, label %if.else, !dbg !1754

if.then:                                          ; preds = %land.lhs.true6
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !1755
  %10 = load i8*, i8** %9, align 8, !dbg !1757
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 3, !dbg !1757
  store i8* %add.ptr, i8** %9, align 8, !dbg !1757
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1758
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 11, !dbg !1759
  %12 = load i32, i32* %destructor, align 4, !dbg !1760
  %add = add nsw i32 %12, 1, !dbg !1760
  store i32 %add, i32* %destructor, align 4, !dbg !1760
  br label %if.end252, !dbg !1761

if.else:                                          ; preds = %land.lhs.true6, %land.lhs.true, %entry
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !1762
  %14 = load i8*, i8** %13, align 8, !dbg !1764
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 0, !dbg !1765
  %15 = load i8, i8* %arrayidx11, align 1, !dbg !1765
  %conv12 = sext i8 %15 to i32, !dbg !1765
  %cmp13 = icmp eq i32 %conv12, 95, !dbg !1766
  br i1 %cmp13, label %land.lhs.true15, label %if.else104, !dbg !1767

land.lhs.true15:                                  ; preds = %if.else
  %16 = load i8**, i8*** %mangled.addr, align 8, !dbg !1768
  %17 = load i8*, i8** %16, align 8, !dbg !1769
  %arrayidx16 = getelementptr inbounds i8, i8* %17, i64 1, !dbg !1770
  %18 = load i8, i8* %arrayidx16, align 1, !dbg !1770
  %conv17 = sext i8 %18 to i32, !dbg !1770
  %cmp18 = icmp eq i32 %conv17, 95, !dbg !1771
  br i1 %cmp18, label %land.lhs.true20, label %lor.lhs.false, !dbg !1772

land.lhs.true20:                                  ; preds = %land.lhs.true15
  %19 = load i8**, i8*** %mangled.addr, align 8, !dbg !1773
  %20 = load i8*, i8** %19, align 8, !dbg !1774
  %arrayidx21 = getelementptr inbounds i8, i8* %20, i64 2, !dbg !1775
  %21 = load i8, i8* %arrayidx21, align 1, !dbg !1775
  %conv22 = sext i8 %21 to i32, !dbg !1775
  %cmp23 = icmp eq i32 %conv22, 118, !dbg !1776
  br i1 %cmp23, label %land.lhs.true25, label %lor.lhs.false, !dbg !1777

land.lhs.true25:                                  ; preds = %land.lhs.true20
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !1778
  %23 = load i8*, i8** %22, align 8, !dbg !1779
  %arrayidx26 = getelementptr inbounds i8, i8* %23, i64 3, !dbg !1780
  %24 = load i8, i8* %arrayidx26, align 1, !dbg !1780
  %conv27 = sext i8 %24 to i32, !dbg !1780
  %cmp28 = icmp eq i32 %conv27, 116, !dbg !1781
  br i1 %cmp28, label %land.lhs.true30, label %lor.lhs.false, !dbg !1782

land.lhs.true30:                                  ; preds = %land.lhs.true25
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !1783
  %26 = load i8*, i8** %25, align 8, !dbg !1784
  %arrayidx31 = getelementptr inbounds i8, i8* %26, i64 4, !dbg !1785
  %27 = load i8, i8* %arrayidx31, align 1, !dbg !1785
  %conv32 = sext i8 %27 to i32, !dbg !1785
  %cmp33 = icmp eq i32 %conv32, 95, !dbg !1786
  br i1 %cmp33, label %if.then50, label %lor.lhs.false, !dbg !1787

lor.lhs.false:                                    ; preds = %land.lhs.true30, %land.lhs.true25, %land.lhs.true20, %land.lhs.true15
  %28 = load i8**, i8*** %mangled.addr, align 8, !dbg !1788
  %29 = load i8*, i8** %28, align 8, !dbg !1789
  %arrayidx35 = getelementptr inbounds i8, i8* %29, i64 1, !dbg !1790
  %30 = load i8, i8* %arrayidx35, align 1, !dbg !1790
  %conv36 = sext i8 %30 to i32, !dbg !1790
  %cmp37 = icmp eq i32 %conv36, 118, !dbg !1791
  br i1 %cmp37, label %land.lhs.true39, label %if.else104, !dbg !1792

land.lhs.true39:                                  ; preds = %lor.lhs.false
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !1793
  %32 = load i8*, i8** %31, align 8, !dbg !1794
  %arrayidx40 = getelementptr inbounds i8, i8* %32, i64 2, !dbg !1795
  %33 = load i8, i8* %arrayidx40, align 1, !dbg !1795
  %conv41 = sext i8 %33 to i32, !dbg !1795
  %cmp42 = icmp eq i32 %conv41, 116, !dbg !1796
  br i1 %cmp42, label %land.lhs.true44, label %if.else104, !dbg !1797

land.lhs.true44:                                  ; preds = %land.lhs.true39
  %34 = load i8**, i8*** %mangled.addr, align 8, !dbg !1798
  %35 = load i8*, i8** %34, align 8, !dbg !1799
  %arrayidx45 = getelementptr inbounds i8, i8* %35, i64 3, !dbg !1800
  %36 = load i8, i8* %arrayidx45, align 1, !dbg !1800
  %conv46 = sext i8 %36 to i32, !dbg !1800
  %call47 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv46), !dbg !1801
  %cmp48 = icmp ne i8* %call47, null, !dbg !1802
  br i1 %cmp48, label %if.then50, label %if.else104, !dbg !1803

if.then50:                                        ; preds = %land.lhs.true44, %land.lhs.true30
  %37 = load i8**, i8*** %mangled.addr, align 8, !dbg !1804
  %38 = load i8*, i8** %37, align 8, !dbg !1807
  %arrayidx51 = getelementptr inbounds i8, i8* %38, i64 2, !dbg !1808
  %39 = load i8, i8* %arrayidx51, align 1, !dbg !1808
  %conv52 = sext i8 %39 to i32, !dbg !1808
  %cmp53 = icmp eq i32 %conv52, 118, !dbg !1809
  br i1 %cmp53, label %if.then55, label %if.else57, !dbg !1810

if.then55:                                        ; preds = %if.then50
  %40 = load i8**, i8*** %mangled.addr, align 8, !dbg !1811
  %41 = load i8*, i8** %40, align 8, !dbg !1812
  %add.ptr56 = getelementptr inbounds i8, i8* %41, i64 5, !dbg !1812
  store i8* %add.ptr56, i8** %40, align 8, !dbg !1812
  br label %if.end, !dbg !1813

if.else57:                                        ; preds = %if.then50
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !1814
  %43 = load i8*, i8** %42, align 8, !dbg !1815
  %add.ptr58 = getelementptr inbounds i8, i8* %43, i64 4, !dbg !1815
  store i8* %add.ptr58, i8** %42, align 8, !dbg !1815
  br label %if.end

if.end:                                           ; preds = %if.else57, %if.then55
  br label %while.cond, !dbg !1816

while.cond:                                       ; preds = %if.end100, %if.end
  %44 = load i8**, i8*** %mangled.addr, align 8, !dbg !1817
  %45 = load i8*, i8** %44, align 8, !dbg !1818
  %46 = load i8, i8* %45, align 1, !dbg !1819
  %conv59 = sext i8 %46 to i32, !dbg !1819
  %cmp60 = icmp ne i32 %conv59, 0, !dbg !1820
  br i1 %cmp60, label %while.body, label %while.end, !dbg !1816

while.body:                                       ; preds = %while.cond
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !1821
  %48 = load i8*, i8** %47, align 8, !dbg !1823
  %49 = load i8, i8* %48, align 1, !dbg !1824
  %conv62 = sext i8 %49 to i32, !dbg !1824
  switch i32 %conv62, label %sw.default [
    i32 81, label %sw.bb
    i32 75, label %sw.bb
    i32 116, label %sw.bb64
  ], !dbg !1825

sw.bb:                                            ; preds = %while.body, %while.body
  %50 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1826
  %51 = load i8**, i8*** %mangled.addr, align 8, !dbg !1828
  %52 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1829
  %call63 = call i32 @demangle_qualified(%struct.work_stuff* %50, i8** %51, %struct.string* %52, i32 0, i32 1), !dbg !1830
  store i32 %call63, i32* %success, align 4, !dbg !1831
  br label %sw.epilog, !dbg !1832

sw.bb64:                                          ; preds = %while.body
  %53 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1833
  %54 = load i8**, i8*** %mangled.addr, align 8, !dbg !1834
  %55 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1835
  %call65 = call i32 @demangle_template(%struct.work_stuff* %53, i8** %54, %struct.string* %55, %struct.string* null, i32 1, i32 1), !dbg !1836
  store i32 %call65, i32* %success, align 4, !dbg !1837
  br label %sw.epilog, !dbg !1838

sw.default:                                       ; preds = %while.body
  %56 = load i8**, i8*** %mangled.addr, align 8, !dbg !1839
  %arrayidx66 = getelementptr inbounds i8*, i8** %56, i64 0, !dbg !1839
  %57 = load i8*, i8** %arrayidx66, align 8, !dbg !1839
  %58 = load i8, i8* %57, align 1, !dbg !1839
  %conv67 = zext i8 %58 to i32, !dbg !1839
  %and = and i32 %conv67, 255, !dbg !1839
  %idxprom = sext i32 %and to i64, !dbg !1839
  %arrayidx68 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !1839
  %59 = load i16, i16* %arrayidx68, align 2, !dbg !1839
  %conv69 = zext i16 %59 to i32, !dbg !1839
  %and70 = and i32 %conv69, 4, !dbg !1839
  %tobool = icmp ne i32 %and70, 0, !dbg !1839
  br i1 %tobool, label %if.then71, label %if.else79, !dbg !1841

if.then71:                                        ; preds = %sw.default
  %60 = load i8**, i8*** %mangled.addr, align 8, !dbg !1842
  %call72 = call i32 @consume_count(i8** %60), !dbg !1844
  store i32 %call72, i32* %n, align 4, !dbg !1845
  %61 = load i32, i32* %n, align 4, !dbg !1846
  %62 = load i8**, i8*** %mangled.addr, align 8, !dbg !1848
  %63 = load i8*, i8** %62, align 8, !dbg !1849
  %call73 = call i64 @strlen(i8* %63), !dbg !1850
  %conv74 = trunc i64 %call73 to i32, !dbg !1851
  %cmp75 = icmp sgt i32 %61, %conv74, !dbg !1852
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !1853

if.then77:                                        ; preds = %if.then71
  store i32 1, i32* %success, align 4, !dbg !1854
  br label %sw.epilog, !dbg !1856

if.end78:                                         ; preds = %if.then71
  br label %if.end82, !dbg !1857

if.else79:                                        ; preds = %sw.default
  %64 = load i8**, i8*** %mangled.addr, align 8, !dbg !1858
  %65 = load i8*, i8** %64, align 8, !dbg !1860
  %call80 = call i64 @strcspn(i8* %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0)), !dbg !1861
  %conv81 = trunc i64 %call80 to i32, !dbg !1861
  store i32 %conv81, i32* %n, align 4, !dbg !1862
  br label %if.end82

if.end82:                                         ; preds = %if.else79, %if.end78
  %66 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1863
  %67 = load i8**, i8*** %mangled.addr, align 8, !dbg !1864
  %68 = load i8*, i8** %67, align 8, !dbg !1865
  %69 = load i32, i32* %n, align 4, !dbg !1866
  call void @string_appendn(%struct.string* %66, i8* %68, i32 %69), !dbg !1867
  %70 = load i32, i32* %n, align 4, !dbg !1868
  %71 = load i8**, i8*** %mangled.addr, align 8, !dbg !1869
  %72 = load i8*, i8** %71, align 8, !dbg !1870
  %idx.ext = sext i32 %70 to i64, !dbg !1870
  %add.ptr83 = getelementptr inbounds i8, i8* %72, i64 %idx.ext, !dbg !1870
  store i8* %add.ptr83, i8** %71, align 8, !dbg !1870
  br label %sw.epilog, !dbg !1871

sw.epilog:                                        ; preds = %if.end82, %if.then77, %sw.bb64, %sw.bb
  %73 = load i8**, i8*** %mangled.addr, align 8, !dbg !1872
  %74 = load i8*, i8** %73, align 8, !dbg !1873
  %call84 = call i8* @strpbrk(i8* %74, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0)), !dbg !1874
  store i8* %call84, i8** %p, align 8, !dbg !1875
  %75 = load i32, i32* %success, align 4, !dbg !1876
  %tobool85 = icmp ne i32 %75, 0, !dbg !1876
  br i1 %tobool85, label %land.lhs.true86, label %if.else99, !dbg !1878

land.lhs.true86:                                  ; preds = %sw.epilog
  %76 = load i8*, i8** %p, align 8, !dbg !1879
  %cmp87 = icmp eq i8* %76, null, !dbg !1880
  br i1 %cmp87, label %if.then92, label %lor.lhs.false89, !dbg !1881

lor.lhs.false89:                                  ; preds = %land.lhs.true86
  %77 = load i8*, i8** %p, align 8, !dbg !1882
  %78 = load i8**, i8*** %mangled.addr, align 8, !dbg !1883
  %79 = load i8*, i8** %78, align 8, !dbg !1884
  %cmp90 = icmp eq i8* %77, %79, !dbg !1885
  br i1 %cmp90, label %if.then92, label %if.else99, !dbg !1886

if.then92:                                        ; preds = %lor.lhs.false89, %land.lhs.true86
  %80 = load i8*, i8** %p, align 8, !dbg !1887
  %cmp93 = icmp ne i8* %80, null, !dbg !1890
  br i1 %cmp93, label %if.then95, label %if.end98, !dbg !1891

if.then95:                                        ; preds = %if.then92
  %81 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1892
  %82 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1894
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %82, i32 0, i32 0, !dbg !1894
  %83 = load i32, i32* %options, align 8, !dbg !1894
  %and96 = and i32 %83, 4, !dbg !1894
  %tobool97 = icmp ne i32 %and96, 0, !dbg !1894
  %84 = zext i1 %tobool97 to i64, !dbg !1894
  %cond = select i1 %tobool97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !1894
  call void @string_append(%struct.string* %81, i8* %cond), !dbg !1895
  %85 = load i8**, i8*** %mangled.addr, align 8, !dbg !1896
  %86 = load i8*, i8** %85, align 8, !dbg !1897
  %incdec.ptr = getelementptr inbounds i8, i8* %86, i32 1, !dbg !1897
  store i8* %incdec.ptr, i8** %85, align 8, !dbg !1897
  br label %if.end98, !dbg !1898

if.end98:                                         ; preds = %if.then95, %if.then92
  br label %if.end100, !dbg !1899

if.else99:                                        ; preds = %lor.lhs.false89, %sw.epilog
  store i32 0, i32* %success, align 4, !dbg !1900
  br label %while.end, !dbg !1902

if.end100:                                        ; preds = %if.end98
  br label %while.cond, !dbg !1816, !llvm.loop !1903

while.end:                                        ; preds = %if.else99, %while.cond
  %87 = load i32, i32* %success, align 4, !dbg !1905
  %tobool101 = icmp ne i32 %87, 0, !dbg !1905
  br i1 %tobool101, label %if.then102, label %if.end103, !dbg !1907

if.then102:                                       ; preds = %while.end
  %88 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1908
  call void @string_append(%struct.string* %88, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.188, i64 0, i64 0)), !dbg !1909
  br label %if.end103, !dbg !1909

if.end103:                                        ; preds = %if.then102, %while.end
  br label %if.end251, !dbg !1910

if.else104:                                       ; preds = %land.lhs.true44, %land.lhs.true39, %lor.lhs.false, %if.else
  %89 = load i8**, i8*** %mangled.addr, align 8, !dbg !1911
  %90 = load i8*, i8** %89, align 8, !dbg !1913
  %arrayidx105 = getelementptr inbounds i8, i8* %90, i64 0, !dbg !1914
  %91 = load i8, i8* %arrayidx105, align 1, !dbg !1914
  %conv106 = sext i8 %91 to i32, !dbg !1914
  %cmp107 = icmp eq i32 %conv106, 95, !dbg !1915
  br i1 %cmp107, label %land.lhs.true109, label %if.else184, !dbg !1916

land.lhs.true109:                                 ; preds = %if.else104
  %92 = load i8**, i8*** %mangled.addr, align 8, !dbg !1917
  %93 = load i8*, i8** %92, align 8, !dbg !1918
  %arrayidx110 = getelementptr inbounds i8, i8* %93, i64 1, !dbg !1919
  %94 = load i8, i8* %arrayidx110, align 1, !dbg !1919
  %conv111 = sext i8 %94 to i32, !dbg !1919
  %call112 = call i8* @strchr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.189, i64 0, i64 0), i32 %conv111), !dbg !1920
  %cmp113 = icmp ne i8* %call112, null, !dbg !1921
  br i1 %cmp113, label %land.lhs.true115, label %if.else184, !dbg !1922

land.lhs.true115:                                 ; preds = %land.lhs.true109
  %95 = load i8**, i8*** %mangled.addr, align 8, !dbg !1923
  %96 = load i8*, i8** %95, align 8, !dbg !1924
  %call116 = call i8* @strpbrk(i8* %96, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0)), !dbg !1925
  store i8* %call116, i8** %p, align 8, !dbg !1926
  %cmp117 = icmp ne i8* %call116, null, !dbg !1927
  br i1 %cmp117, label %if.then119, label %if.else184, !dbg !1928

if.then119:                                       ; preds = %land.lhs.true115
  %97 = load i8**, i8*** %mangled.addr, align 8, !dbg !1929
  %98 = load i8*, i8** %97, align 8, !dbg !1931
  %incdec.ptr120 = getelementptr inbounds i8, i8* %98, i32 1, !dbg !1931
  store i8* %incdec.ptr120, i8** %97, align 8, !dbg !1931
  %99 = load i8**, i8*** %mangled.addr, align 8, !dbg !1932
  %100 = load i8*, i8** %99, align 8, !dbg !1933
  %101 = load i8, i8* %100, align 1, !dbg !1934
  %conv121 = sext i8 %101 to i32, !dbg !1934
  switch i32 %conv121, label %sw.default126 [
    i32 81, label %sw.bb122
    i32 75, label %sw.bb122
    i32 116, label %sw.bb124
  ], !dbg !1935

sw.bb122:                                         ; preds = %if.then119, %if.then119
  %102 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1936
  %103 = load i8**, i8*** %mangled.addr, align 8, !dbg !1938
  %104 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1939
  %call123 = call i32 @demangle_qualified(%struct.work_stuff* %102, i8** %103, %struct.string* %104, i32 0, i32 1), !dbg !1940
  store i32 %call123, i32* %success, align 4, !dbg !1941
  br label %sw.epilog167, !dbg !1942

sw.bb124:                                         ; preds = %if.then119
  %105 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !1943
  %106 = load i8**, i8*** %mangled.addr, align 8, !dbg !1944
  %107 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1945
  %call125 = call i32 @demangle_template(%struct.work_stuff* %105, i8** %106, %struct.string* %107, %struct.string* null, i32 1, i32 1), !dbg !1946
  store i32 %call125, i32* %success, align 4, !dbg !1947
  br label %sw.epilog167, !dbg !1948

sw.default126:                                    ; preds = %if.then119
  %108 = load i8**, i8*** %mangled.addr, align 8, !dbg !1949
  %call127 = call i32 @consume_count(i8** %108), !dbg !1950
  store i32 %call127, i32* %n, align 4, !dbg !1951
  %109 = load i32, i32* %n, align 4, !dbg !1952
  %cmp128 = icmp slt i32 %109, 0, !dbg !1954
  br i1 %cmp128, label %if.then135, label %lor.lhs.false130, !dbg !1955

lor.lhs.false130:                                 ; preds = %sw.default126
  %110 = load i32, i32* %n, align 4, !dbg !1956
  %conv131 = sext i32 %110 to i64, !dbg !1956
  %111 = load i8**, i8*** %mangled.addr, align 8, !dbg !1957
  %112 = load i8*, i8** %111, align 8, !dbg !1958
  %call132 = call i64 @strlen(i8* %112), !dbg !1959
  %cmp133 = icmp sgt i64 %conv131, %call132, !dbg !1960
  br i1 %cmp133, label %if.then135, label %if.end136, !dbg !1961

if.then135:                                       ; preds = %lor.lhs.false130, %sw.default126
  store i32 0, i32* %success, align 4, !dbg !1962
  br label %sw.epilog167, !dbg !1964

if.end136:                                        ; preds = %lor.lhs.false130
  %113 = load i32, i32* %n, align 4, !dbg !1965
  %cmp137 = icmp sgt i32 %113, 10, !dbg !1967
  br i1 %cmp137, label %land.lhs.true139, label %if.end164, !dbg !1968

land.lhs.true139:                                 ; preds = %if.end136
  %114 = load i8**, i8*** %mangled.addr, align 8, !dbg !1969
  %115 = load i8*, i8** %114, align 8, !dbg !1970
  %call140 = call i32 @strncmp(i8* %115, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.190, i64 0, i64 0), i64 8), !dbg !1971
  %cmp141 = icmp eq i32 %call140, 0, !dbg !1972
  br i1 %cmp141, label %land.lhs.true143, label %if.end164, !dbg !1973

land.lhs.true143:                                 ; preds = %land.lhs.true139
  %116 = load i8**, i8*** %mangled.addr, align 8, !dbg !1974
  %117 = load i8*, i8** %116, align 8, !dbg !1975
  %arrayidx144 = getelementptr inbounds i8, i8* %117, i64 9, !dbg !1976
  %118 = load i8, i8* %arrayidx144, align 1, !dbg !1976
  %conv145 = sext i8 %118 to i32, !dbg !1976
  %cmp146 = icmp eq i32 %conv145, 78, !dbg !1977
  br i1 %cmp146, label %land.lhs.true148, label %if.end164, !dbg !1978

land.lhs.true148:                                 ; preds = %land.lhs.true143
  %119 = load i8**, i8*** %mangled.addr, align 8, !dbg !1979
  %120 = load i8*, i8** %119, align 8, !dbg !1980
  %arrayidx149 = getelementptr inbounds i8, i8* %120, i64 8, !dbg !1981
  %121 = load i8, i8* %arrayidx149, align 1, !dbg !1981
  %conv150 = sext i8 %121 to i32, !dbg !1981
  %122 = load i8**, i8*** %mangled.addr, align 8, !dbg !1982
  %123 = load i8*, i8** %122, align 8, !dbg !1983
  %arrayidx151 = getelementptr inbounds i8, i8* %123, i64 10, !dbg !1984
  %124 = load i8, i8* %arrayidx151, align 1, !dbg !1984
  %conv152 = sext i8 %124 to i32, !dbg !1984
  %cmp153 = icmp eq i32 %conv150, %conv152, !dbg !1985
  br i1 %cmp153, label %land.lhs.true155, label %if.end164, !dbg !1986

land.lhs.true155:                                 ; preds = %land.lhs.true148
  %125 = load i8**, i8*** %mangled.addr, align 8, !dbg !1987
  %126 = load i8*, i8** %125, align 8, !dbg !1988
  %arrayidx156 = getelementptr inbounds i8, i8* %126, i64 8, !dbg !1989
  %127 = load i8, i8* %arrayidx156, align 1, !dbg !1989
  %conv157 = sext i8 %127 to i32, !dbg !1989
  %call158 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv157), !dbg !1990
  %tobool159 = icmp ne i8* %call158, null, !dbg !1990
  br i1 %tobool159, label %if.then160, label %if.end164, !dbg !1991

if.then160:                                       ; preds = %land.lhs.true155
  %128 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !1992
  call void @string_append(%struct.string* %128, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.191, i64 0, i64 0)), !dbg !1994
  %129 = load i32, i32* %n, align 4, !dbg !1995
  %130 = load i8**, i8*** %mangled.addr, align 8, !dbg !1996
  %131 = load i8*, i8** %130, align 8, !dbg !1997
  %idx.ext161 = sext i32 %129 to i64, !dbg !1997
  %add.ptr162 = getelementptr inbounds i8, i8* %131, i64 %idx.ext161, !dbg !1997
  store i8* %add.ptr162, i8** %130, align 8, !dbg !1997
  %132 = load i8**, i8*** %mangled.addr, align 8, !dbg !1998
  %133 = load i8*, i8** %132, align 8, !dbg !1999
  %call163 = call i8* @strpbrk(i8* %133, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0)), !dbg !2000
  store i8* %call163, i8** %p, align 8, !dbg !2001
  br label %sw.epilog167, !dbg !2002

if.end164:                                        ; preds = %land.lhs.true155, %land.lhs.true148, %land.lhs.true143, %land.lhs.true139, %if.end136
  %134 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2003
  %135 = load i8**, i8*** %mangled.addr, align 8, !dbg !2004
  %136 = load i8*, i8** %135, align 8, !dbg !2005
  %137 = load i32, i32* %n, align 4, !dbg !2006
  call void @string_appendn(%struct.string* %134, i8* %136, i32 %137), !dbg !2007
  %138 = load i32, i32* %n, align 4, !dbg !2008
  %139 = load i8**, i8*** %mangled.addr, align 8, !dbg !2009
  %140 = load i8*, i8** %139, align 8, !dbg !2010
  %idx.ext165 = sext i32 %138 to i64, !dbg !2010
  %add.ptr166 = getelementptr inbounds i8, i8* %140, i64 %idx.ext165, !dbg !2010
  store i8* %add.ptr166, i8** %139, align 8, !dbg !2010
  br label %sw.epilog167, !dbg !2011

sw.epilog167:                                     ; preds = %if.end164, %if.then160, %if.then135, %sw.bb124, %sw.bb122
  %141 = load i32, i32* %success, align 4, !dbg !2012
  %tobool168 = icmp ne i32 %141, 0, !dbg !2012
  br i1 %tobool168, label %land.lhs.true169, label %if.else182, !dbg !2014

land.lhs.true169:                                 ; preds = %sw.epilog167
  %142 = load i8*, i8** %p, align 8, !dbg !2015
  %143 = load i8**, i8*** %mangled.addr, align 8, !dbg !2016
  %144 = load i8*, i8** %143, align 8, !dbg !2017
  %cmp170 = icmp eq i8* %142, %144, !dbg !2018
  br i1 %cmp170, label %if.then172, label %if.else182, !dbg !2019

if.then172:                                       ; preds = %land.lhs.true169
  %145 = load i8**, i8*** %mangled.addr, align 8, !dbg !2020
  %146 = load i8*, i8** %145, align 8, !dbg !2022
  %incdec.ptr173 = getelementptr inbounds i8, i8* %146, i32 1, !dbg !2022
  store i8* %incdec.ptr173, i8** %145, align 8, !dbg !2022
  %147 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2023
  %148 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2024
  %options174 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %148, i32 0, i32 0, !dbg !2024
  %149 = load i32, i32* %options174, align 8, !dbg !2024
  %and175 = and i32 %149, 4, !dbg !2024
  %tobool176 = icmp ne i32 %and175, 0, !dbg !2024
  %150 = zext i1 %tobool176 to i64, !dbg !2024
  %cond177 = select i1 %tobool176, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !2024
  call void @string_append(%struct.string* %147, i8* %cond177), !dbg !2025
  %151 = load i8**, i8*** %mangled.addr, align 8, !dbg !2026
  %152 = load i8*, i8** %151, align 8, !dbg !2027
  %call178 = call i64 @strlen(i8* %152), !dbg !2028
  %conv179 = trunc i64 %call178 to i32, !dbg !2028
  store i32 %conv179, i32* %n, align 4, !dbg !2029
  %153 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2030
  %154 = load i8**, i8*** %mangled.addr, align 8, !dbg !2031
  %155 = load i8*, i8** %154, align 8, !dbg !2032
  %156 = load i32, i32* %n, align 4, !dbg !2033
  call void @string_appendn(%struct.string* %153, i8* %155, i32 %156), !dbg !2034
  %157 = load i32, i32* %n, align 4, !dbg !2035
  %158 = load i8**, i8*** %mangled.addr, align 8, !dbg !2036
  %159 = load i8*, i8** %158, align 8, !dbg !2037
  %idx.ext180 = sext i32 %157 to i64, !dbg !2037
  %add.ptr181 = getelementptr inbounds i8, i8* %159, i64 %idx.ext180, !dbg !2037
  store i8* %add.ptr181, i8** %158, align 8, !dbg !2037
  br label %if.end183, !dbg !2038

if.else182:                                       ; preds = %land.lhs.true169, %sw.epilog167
  store i32 0, i32* %success, align 4, !dbg !2039
  br label %if.end183

if.end183:                                        ; preds = %if.else182, %if.then172
  br label %if.end250, !dbg !2041

if.else184:                                       ; preds = %land.lhs.true115, %land.lhs.true109, %if.else104
  %160 = load i8**, i8*** %mangled.addr, align 8, !dbg !2042
  %161 = load i8*, i8** %160, align 8, !dbg !2044
  %call185 = call i32 @strncmp(i8* %161, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.192, i64 0, i64 0), i64 8), !dbg !2045
  %cmp186 = icmp eq i32 %call185, 0, !dbg !2046
  br i1 %cmp186, label %if.then188, label %if.else208, !dbg !2047

if.then188:                                       ; preds = %if.else184
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !2048, metadata !DIExpression()), !dbg !2050
  %162 = load i8**, i8*** %mangled.addr, align 8, !dbg !2051
  %163 = load i8*, i8** %162, align 8, !dbg !2052
  %add.ptr189 = getelementptr inbounds i8, i8* %163, i64 8, !dbg !2052
  store i8* %add.ptr189, i8** %162, align 8, !dbg !2052
  %164 = load i8**, i8*** %mangled.addr, align 8, !dbg !2053
  %call190 = call i32 @consume_count(i8** %164), !dbg !2054
  store i32 %call190, i32* %delta, align 4, !dbg !2055
  %165 = load i32, i32* %delta, align 4, !dbg !2056
  %cmp191 = icmp eq i32 %165, -1, !dbg !2058
  br i1 %cmp191, label %if.then193, label %if.else194, !dbg !2059

if.then193:                                       ; preds = %if.then188
  store i32 0, i32* %success, align 4, !dbg !2060
  br label %if.end207, !dbg !2061

if.else194:                                       ; preds = %if.then188
  call void @llvm.dbg.declare(metadata i8** %method, metadata !2062, metadata !DIExpression()), !dbg !2064
  %166 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2065
  %167 = load i8**, i8*** %mangled.addr, align 8, !dbg !2066
  %168 = load i8*, i8** %167, align 8, !dbg !2067
  %incdec.ptr195 = getelementptr inbounds i8, i8* %168, i32 1, !dbg !2067
  store i8* %incdec.ptr195, i8** %167, align 8, !dbg !2067
  %call196 = call i8* @internal_cplus_demangle(%struct.work_stuff* %166, i8* %incdec.ptr195), !dbg !2068
  store i8* %call196, i8** %method, align 8, !dbg !2064
  %169 = load i8*, i8** %method, align 8, !dbg !2069
  %tobool197 = icmp ne i8* %169, null, !dbg !2069
  br i1 %tobool197, label %if.then198, label %if.else205, !dbg !2071

if.then198:                                       ; preds = %if.else194
  call void @llvm.dbg.declare(metadata [50 x i8]* %buf, metadata !2072, metadata !DIExpression()), !dbg !2077
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %buf, i64 0, i64 0, !dbg !2078
  %170 = load i32, i32* %delta, align 4, !dbg !2079
  %sub = sub nsw i32 0, %170, !dbg !2080
  %call199 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.193, i64 0, i64 0), i32 %sub), !dbg !2081
  %171 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2082
  %arraydecay200 = getelementptr inbounds [50 x i8], [50 x i8]* %buf, i64 0, i64 0, !dbg !2083
  call void @string_append(%struct.string* %171, i8* %arraydecay200), !dbg !2084
  %172 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2085
  %173 = load i8*, i8** %method, align 8, !dbg !2086
  call void @string_append(%struct.string* %172, i8* %173), !dbg !2087
  %174 = load i8*, i8** %method, align 8, !dbg !2088
  call void @free(i8* %174), !dbg !2089
  %175 = load i8**, i8*** %mangled.addr, align 8, !dbg !2090
  %176 = load i8*, i8** %175, align 8, !dbg !2091
  %call201 = call i64 @strlen(i8* %176), !dbg !2092
  %conv202 = trunc i64 %call201 to i32, !dbg !2092
  store i32 %conv202, i32* %n, align 4, !dbg !2093
  %177 = load i32, i32* %n, align 4, !dbg !2094
  %178 = load i8**, i8*** %mangled.addr, align 8, !dbg !2095
  %179 = load i8*, i8** %178, align 8, !dbg !2096
  %idx.ext203 = sext i32 %177 to i64, !dbg !2096
  %add.ptr204 = getelementptr inbounds i8, i8* %179, i64 %idx.ext203, !dbg !2096
  store i8* %add.ptr204, i8** %178, align 8, !dbg !2096
  br label %if.end206, !dbg !2097

if.else205:                                       ; preds = %if.else194
  store i32 0, i32* %success, align 4, !dbg !2098
  br label %if.end206

if.end206:                                        ; preds = %if.else205, %if.then198
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.then193
  br label %if.end249, !dbg !2100

if.else208:                                       ; preds = %if.else184
  %180 = load i8**, i8*** %mangled.addr, align 8, !dbg !2101
  %181 = load i8*, i8** %180, align 8, !dbg !2103
  %call209 = call i32 @strncmp(i8* %181, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.194, i64 0, i64 0), i64 3), !dbg !2104
  %cmp210 = icmp eq i32 %call209, 0, !dbg !2105
  br i1 %cmp210, label %land.lhs.true212, label %if.else247, !dbg !2106

land.lhs.true212:                                 ; preds = %if.else208
  %182 = load i8**, i8*** %mangled.addr, align 8, !dbg !2107
  %183 = load i8*, i8** %182, align 8, !dbg !2108
  %arrayidx213 = getelementptr inbounds i8, i8* %183, i64 3, !dbg !2109
  %184 = load i8, i8* %arrayidx213, align 1, !dbg !2109
  %conv214 = sext i8 %184 to i32, !dbg !2109
  %cmp215 = icmp eq i32 %conv214, 105, !dbg !2110
  br i1 %cmp215, label %if.then222, label %lor.lhs.false217, !dbg !2111

lor.lhs.false217:                                 ; preds = %land.lhs.true212
  %185 = load i8**, i8*** %mangled.addr, align 8, !dbg !2112
  %186 = load i8*, i8** %185, align 8, !dbg !2113
  %arrayidx218 = getelementptr inbounds i8, i8* %186, i64 3, !dbg !2114
  %187 = load i8, i8* %arrayidx218, align 1, !dbg !2114
  %conv219 = sext i8 %187 to i32, !dbg !2114
  %cmp220 = icmp eq i32 %conv219, 102, !dbg !2115
  br i1 %cmp220, label %if.then222, label %if.else247, !dbg !2116

if.then222:                                       ; preds = %lor.lhs.false217, %land.lhs.true212
  %188 = load i8**, i8*** %mangled.addr, align 8, !dbg !2117
  %189 = load i8*, i8** %188, align 8, !dbg !2119
  %arrayidx223 = getelementptr inbounds i8, i8* %189, i64 3, !dbg !2120
  %190 = load i8, i8* %arrayidx223, align 1, !dbg !2120
  %conv224 = sext i8 %190 to i32, !dbg !2120
  %cmp225 = icmp eq i32 %conv224, 105, !dbg !2121
  %191 = zext i1 %cmp225 to i64, !dbg !2120
  %cond227 = select i1 %cmp225, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.195, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.196, i64 0, i64 0), !dbg !2120
  store i8* %cond227, i8** %p, align 8, !dbg !2122
  %192 = load i8**, i8*** %mangled.addr, align 8, !dbg !2123
  %193 = load i8*, i8** %192, align 8, !dbg !2124
  %add.ptr228 = getelementptr inbounds i8, i8* %193, i64 4, !dbg !2124
  store i8* %add.ptr228, i8** %192, align 8, !dbg !2124
  %194 = load i8**, i8*** %mangled.addr, align 8, !dbg !2125
  %195 = load i8*, i8** %194, align 8, !dbg !2126
  %196 = load i8, i8* %195, align 1, !dbg !2127
  %conv229 = sext i8 %196 to i32, !dbg !2127
  switch i32 %conv229, label %sw.default234 [
    i32 81, label %sw.bb230
    i32 75, label %sw.bb230
    i32 116, label %sw.bb232
  ], !dbg !2128

sw.bb230:                                         ; preds = %if.then222, %if.then222
  %197 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2129
  %198 = load i8**, i8*** %mangled.addr, align 8, !dbg !2131
  %199 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2132
  %call231 = call i32 @demangle_qualified(%struct.work_stuff* %197, i8** %198, %struct.string* %199, i32 0, i32 1), !dbg !2133
  store i32 %call231, i32* %success, align 4, !dbg !2134
  br label %sw.epilog236, !dbg !2135

sw.bb232:                                         ; preds = %if.then222
  %200 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2136
  %201 = load i8**, i8*** %mangled.addr, align 8, !dbg !2137
  %202 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2138
  %call233 = call i32 @demangle_template(%struct.work_stuff* %200, i8** %201, %struct.string* %202, %struct.string* null, i32 1, i32 1), !dbg !2139
  store i32 %call233, i32* %success, align 4, !dbg !2140
  br label %sw.epilog236, !dbg !2141

sw.default234:                                    ; preds = %if.then222
  %203 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2142
  %204 = load i8**, i8*** %mangled.addr, align 8, !dbg !2143
  %205 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2144
  %call235 = call i32 @do_type(%struct.work_stuff* %203, i8** %204, %struct.string* %205), !dbg !2145
  store i32 %call235, i32* %success, align 4, !dbg !2146
  br label %sw.epilog236, !dbg !2147

sw.epilog236:                                     ; preds = %sw.default234, %sw.bb232, %sw.bb230
  %206 = load i32, i32* %success, align 4, !dbg !2148
  %tobool237 = icmp ne i32 %206, 0, !dbg !2148
  br i1 %tobool237, label %land.lhs.true238, label %if.end243, !dbg !2150

land.lhs.true238:                                 ; preds = %sw.epilog236
  %207 = load i8**, i8*** %mangled.addr, align 8, !dbg !2151
  %208 = load i8*, i8** %207, align 8, !dbg !2152
  %209 = load i8, i8* %208, align 1, !dbg !2153
  %conv239 = sext i8 %209 to i32, !dbg !2153
  %cmp240 = icmp ne i32 %conv239, 0, !dbg !2154
  br i1 %cmp240, label %if.then242, label %if.end243, !dbg !2155

if.then242:                                       ; preds = %land.lhs.true238
  store i32 0, i32* %success, align 4, !dbg !2156
  br label %if.end243, !dbg !2157

if.end243:                                        ; preds = %if.then242, %land.lhs.true238, %sw.epilog236
  %210 = load i32, i32* %success, align 4, !dbg !2158
  %tobool244 = icmp ne i32 %210, 0, !dbg !2158
  br i1 %tobool244, label %if.then245, label %if.end246, !dbg !2160

if.then245:                                       ; preds = %if.end243
  %211 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2161
  %212 = load i8*, i8** %p, align 8, !dbg !2162
  call void @string_append(%struct.string* %211, i8* %212), !dbg !2163
  br label %if.end246, !dbg !2163

if.end246:                                        ; preds = %if.then245, %if.end243
  br label %if.end248, !dbg !2164

if.else247:                                       ; preds = %lor.lhs.false217, %if.else208
  store i32 0, i32* %success, align 4, !dbg !2165
  br label %if.end248

if.end248:                                        ; preds = %if.else247, %if.end246
  br label %if.end249

if.end249:                                        ; preds = %if.end248, %if.end207
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %if.end183
  br label %if.end251

if.end251:                                        ; preds = %if.end250, %if.end103
  br label %if.end252

if.end252:                                        ; preds = %if.end251, %if.then
  %213 = load i32, i32* %success, align 4, !dbg !2167
  ret i32 %213, !dbg !2168
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_prefix(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !2169 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %success = alloca i32, align 4
  %scan = alloca i8*, align 8
  %i = alloca i32, align 4
  %marker = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !2170, metadata !DIExpression()), !dbg !2171
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !2172, metadata !DIExpression()), !dbg !2173
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !2174, metadata !DIExpression()), !dbg !2175
  call void @llvm.dbg.declare(metadata i32* %success, metadata !2176, metadata !DIExpression()), !dbg !2177
  store i32 1, i32* %success, align 4, !dbg !2177
  call void @llvm.dbg.declare(metadata i8** %scan, metadata !2178, metadata !DIExpression()), !dbg !2179
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2180, metadata !DIExpression()), !dbg !2181
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !2182
  %1 = load i8*, i8** %0, align 8, !dbg !2184
  %call = call i64 @strlen(i8* %1), !dbg !2185
  %cmp = icmp ugt i64 %call, 6, !dbg !2186
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2187

land.lhs.true:                                    ; preds = %entry
  %2 = load i8**, i8*** %mangled.addr, align 8, !dbg !2188
  %3 = load i8*, i8** %2, align 8, !dbg !2189
  %call1 = call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.211, i64 0, i64 0), i64 6), !dbg !2190
  %cmp2 = icmp eq i32 %call1, 0, !dbg !2191
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !2192

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !2193
  %5 = load i8*, i8** %4, align 8, !dbg !2194
  %call3 = call i32 @strncmp(i8* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.212, i64 0, i64 0), i64 6), !dbg !2195
  %cmp4 = icmp eq i32 %call3, 0, !dbg !2196
  br i1 %cmp4, label %if.then, label %if.else, !dbg !2197

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !2198
  %7 = load i8*, i8** %6, align 8, !dbg !2200
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 6, !dbg !2200
  store i8* %add.ptr, i8** %6, align 8, !dbg !2200
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2201
  %dllimported = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 15, !dbg !2202
  store i32 1, i32* %dllimported, align 4, !dbg !2203
  br label %if.end82, !dbg !2204

if.else:                                          ; preds = %lor.lhs.false, %entry
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !2205
  %10 = load i8*, i8** %9, align 8, !dbg !2207
  %call5 = call i64 @strlen(i8* %10), !dbg !2208
  %cmp6 = icmp uge i64 %call5, 11, !dbg !2209
  br i1 %cmp6, label %land.lhs.true7, label %if.else43, !dbg !2210

land.lhs.true7:                                   ; preds = %if.else
  %11 = load i8**, i8*** %mangled.addr, align 8, !dbg !2211
  %12 = load i8*, i8** %11, align 8, !dbg !2212
  %call8 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.190, i64 0, i64 0), i64 8), !dbg !2213
  %cmp9 = icmp eq i32 %call8, 0, !dbg !2214
  br i1 %cmp9, label %if.then10, label %if.else43, !dbg !2215

if.then10:                                        ; preds = %land.lhs.true7
  call void @llvm.dbg.declare(metadata i8** %marker, metadata !2216, metadata !DIExpression()), !dbg !2218
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !2219
  %14 = load i8*, i8** %13, align 8, !dbg !2220
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 8, !dbg !2221
  %15 = load i8, i8* %arrayidx, align 1, !dbg !2221
  %conv = sext i8 %15 to i32, !dbg !2221
  %call11 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv), !dbg !2222
  store i8* %call11, i8** %marker, align 8, !dbg !2218
  %16 = load i8*, i8** %marker, align 8, !dbg !2223
  %cmp12 = icmp ne i8* %16, null, !dbg !2225
  br i1 %cmp12, label %land.lhs.true14, label %if.end42, !dbg !2226

land.lhs.true14:                                  ; preds = %if.then10
  %17 = load i8*, i8** %marker, align 8, !dbg !2227
  %18 = load i8, i8* %17, align 1, !dbg !2228
  %conv15 = sext i8 %18 to i32, !dbg !2228
  %19 = load i8**, i8*** %mangled.addr, align 8, !dbg !2229
  %20 = load i8*, i8** %19, align 8, !dbg !2230
  %arrayidx16 = getelementptr inbounds i8, i8* %20, i64 10, !dbg !2231
  %21 = load i8, i8* %arrayidx16, align 1, !dbg !2231
  %conv17 = sext i8 %21 to i32, !dbg !2231
  %cmp18 = icmp eq i32 %conv15, %conv17, !dbg !2232
  br i1 %cmp18, label %if.then20, label %if.end42, !dbg !2233

if.then20:                                        ; preds = %land.lhs.true14
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !2234
  %23 = load i8*, i8** %22, align 8, !dbg !2237
  %arrayidx21 = getelementptr inbounds i8, i8* %23, i64 9, !dbg !2238
  %24 = load i8, i8* %arrayidx21, align 1, !dbg !2238
  %conv22 = sext i8 %24 to i32, !dbg !2238
  %cmp23 = icmp eq i32 %conv22, 68, !dbg !2239
  br i1 %cmp23, label %if.then25, label %if.else29, !dbg !2240

if.then25:                                        ; preds = %if.then20
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !2241
  %26 = load i8*, i8** %25, align 8, !dbg !2243
  %add.ptr26 = getelementptr inbounds i8, i8* %26, i64 11, !dbg !2243
  store i8* %add.ptr26, i8** %25, align 8, !dbg !2243
  %27 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2244
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %27, i32 0, i32 11, !dbg !2245
  store i32 2, i32* %destructor, align 4, !dbg !2246
  %28 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2247
  %29 = load i8**, i8*** %mangled.addr, align 8, !dbg !2249
  %30 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2250
  %call27 = call i32 @gnu_special(%struct.work_stuff* %28, i8** %29, %struct.string* %30), !dbg !2251
  %tobool = icmp ne i32 %call27, 0, !dbg !2251
  br i1 %tobool, label %if.then28, label %if.end, !dbg !2252

if.then28:                                        ; preds = %if.then25
  %31 = load i32, i32* %success, align 4, !dbg !2253
  store i32 %31, i32* %retval, align 4, !dbg !2254
  br label %return, !dbg !2254

if.end:                                           ; preds = %if.then25
  br label %if.end41, !dbg !2255

if.else29:                                        ; preds = %if.then20
  %32 = load i8**, i8*** %mangled.addr, align 8, !dbg !2256
  %33 = load i8*, i8** %32, align 8, !dbg !2258
  %arrayidx30 = getelementptr inbounds i8, i8* %33, i64 9, !dbg !2259
  %34 = load i8, i8* %arrayidx30, align 1, !dbg !2259
  %conv31 = sext i8 %34 to i32, !dbg !2259
  %cmp32 = icmp eq i32 %conv31, 73, !dbg !2260
  br i1 %cmp32, label %if.then34, label %if.end40, !dbg !2261

if.then34:                                        ; preds = %if.else29
  %35 = load i8**, i8*** %mangled.addr, align 8, !dbg !2262
  %36 = load i8*, i8** %35, align 8, !dbg !2264
  %add.ptr35 = getelementptr inbounds i8, i8* %36, i64 11, !dbg !2264
  store i8* %add.ptr35, i8** %35, align 8, !dbg !2264
  %37 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2265
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %37, i32 0, i32 10, !dbg !2266
  store i32 2, i32* %constructor, align 8, !dbg !2267
  %38 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2268
  %39 = load i8**, i8*** %mangled.addr, align 8, !dbg !2270
  %40 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2271
  %call36 = call i32 @gnu_special(%struct.work_stuff* %38, i8** %39, %struct.string* %40), !dbg !2272
  %tobool37 = icmp ne i32 %call36, 0, !dbg !2272
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !2273

if.then38:                                        ; preds = %if.then34
  %41 = load i32, i32* %success, align 4, !dbg !2274
  store i32 %41, i32* %retval, align 4, !dbg !2275
  br label %return, !dbg !2275

if.end39:                                         ; preds = %if.then34
  br label %if.end40, !dbg !2276

if.end40:                                         ; preds = %if.end39, %if.else29
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end
  br label %if.end42, !dbg !2277

if.end42:                                         ; preds = %if.end41, %land.lhs.true14, %if.then10
  br label %if.end81, !dbg !2278

if.else43:                                        ; preds = %land.lhs.true7, %if.else
  %42 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2279
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %42, i32 0, i32 0, !dbg !2279
  %43 = load i32, i32* %options, align 8, !dbg !2279
  %and = and i32 %43, 2048, !dbg !2279
  %tobool44 = icmp ne i32 %and, 0, !dbg !2279
  br i1 %tobool44, label %land.lhs.true53, label %lor.lhs.false45, !dbg !2281

lor.lhs.false45:                                  ; preds = %if.else43
  %44 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2282
  %options46 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %44, i32 0, i32 0, !dbg !2282
  %45 = load i32, i32* %options46, align 8, !dbg !2282
  %and47 = and i32 %45, 4096, !dbg !2282
  %tobool48 = icmp ne i32 %and47, 0, !dbg !2282
  br i1 %tobool48, label %land.lhs.true53, label %lor.lhs.false49, !dbg !2283

lor.lhs.false49:                                  ; preds = %lor.lhs.false45
  %46 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2284
  %options50 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %46, i32 0, i32 0, !dbg !2284
  %47 = load i32, i32* %options50, align 8, !dbg !2284
  %and51 = and i32 %47, 8192, !dbg !2284
  %tobool52 = icmp ne i32 %and51, 0, !dbg !2284
  br i1 %tobool52, label %land.lhs.true53, label %if.else60, !dbg !2285

land.lhs.true53:                                  ; preds = %lor.lhs.false49, %lor.lhs.false45, %if.else43
  %48 = load i8**, i8*** %mangled.addr, align 8, !dbg !2286
  %49 = load i8*, i8** %48, align 8, !dbg !2287
  %call54 = call i32 @strncmp(i8* %49, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.213, i64 0, i64 0), i64 7), !dbg !2288
  %cmp55 = icmp eq i32 %call54, 0, !dbg !2289
  br i1 %cmp55, label %if.then57, label %if.else60, !dbg !2290

if.then57:                                        ; preds = %land.lhs.true53
  %50 = load i8**, i8*** %mangled.addr, align 8, !dbg !2291
  %51 = load i8*, i8** %50, align 8, !dbg !2293
  %add.ptr58 = getelementptr inbounds i8, i8* %51, i64 7, !dbg !2293
  store i8* %add.ptr58, i8** %50, align 8, !dbg !2293
  %52 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2294
  %destructor59 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %52, i32 0, i32 11, !dbg !2295
  store i32 2, i32* %destructor59, align 4, !dbg !2296
  br label %if.end80, !dbg !2297

if.else60:                                        ; preds = %land.lhs.true53, %lor.lhs.false49
  %53 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2298
  %options61 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %53, i32 0, i32 0, !dbg !2298
  %54 = load i32, i32* %options61, align 8, !dbg !2298
  %and62 = and i32 %54, 2048, !dbg !2298
  %tobool63 = icmp ne i32 %and62, 0, !dbg !2298
  br i1 %tobool63, label %land.lhs.true72, label %lor.lhs.false64, !dbg !2300

lor.lhs.false64:                                  ; preds = %if.else60
  %55 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2301
  %options65 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %55, i32 0, i32 0, !dbg !2301
  %56 = load i32, i32* %options65, align 8, !dbg !2301
  %and66 = and i32 %56, 4096, !dbg !2301
  %tobool67 = icmp ne i32 %and66, 0, !dbg !2301
  br i1 %tobool67, label %land.lhs.true72, label %lor.lhs.false68, !dbg !2302

lor.lhs.false68:                                  ; preds = %lor.lhs.false64
  %57 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2303
  %options69 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %57, i32 0, i32 0, !dbg !2303
  %58 = load i32, i32* %options69, align 8, !dbg !2303
  %and70 = and i32 %58, 8192, !dbg !2303
  %tobool71 = icmp ne i32 %and70, 0, !dbg !2303
  br i1 %tobool71, label %land.lhs.true72, label %if.end79, !dbg !2304

land.lhs.true72:                                  ; preds = %lor.lhs.false68, %lor.lhs.false64, %if.else60
  %59 = load i8**, i8*** %mangled.addr, align 8, !dbg !2305
  %60 = load i8*, i8** %59, align 8, !dbg !2306
  %call73 = call i32 @strncmp(i8* %60, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.214, i64 0, i64 0), i64 7), !dbg !2307
  %cmp74 = icmp eq i32 %call73, 0, !dbg !2308
  br i1 %cmp74, label %if.then76, label %if.end79, !dbg !2309

if.then76:                                        ; preds = %land.lhs.true72
  %61 = load i8**, i8*** %mangled.addr, align 8, !dbg !2310
  %62 = load i8*, i8** %61, align 8, !dbg !2312
  %add.ptr77 = getelementptr inbounds i8, i8* %62, i64 7, !dbg !2312
  store i8* %add.ptr77, i8** %61, align 8, !dbg !2312
  %63 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2313
  %constructor78 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %63, i32 0, i32 10, !dbg !2314
  store i32 2, i32* %constructor78, align 8, !dbg !2315
  br label %if.end79, !dbg !2316

if.end79:                                         ; preds = %if.then76, %land.lhs.true72, %lor.lhs.false68
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then57
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end42
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then
  %64 = load i8**, i8*** %mangled.addr, align 8, !dbg !2317
  %65 = load i8*, i8** %64, align 8, !dbg !2319
  store i8* %65, i8** %scan, align 8, !dbg !2320
  br label %do.body, !dbg !2321

do.body:                                          ; preds = %land.end, %if.end82
  %66 = load i8*, i8** %scan, align 8, !dbg !2322
  %call83 = call i8* @strchr(i8* %66, i32 95), !dbg !2324
  store i8* %call83, i8** %scan, align 8, !dbg !2325
  br label %do.cond, !dbg !2326

do.cond:                                          ; preds = %do.body
  %67 = load i8*, i8** %scan, align 8, !dbg !2327
  %cmp84 = icmp ne i8* %67, null, !dbg !2328
  br i1 %cmp84, label %land.rhs, label %land.end, !dbg !2329

land.rhs:                                         ; preds = %do.cond
  %68 = load i8*, i8** %scan, align 8, !dbg !2330
  %incdec.ptr = getelementptr inbounds i8, i8* %68, i32 1, !dbg !2330
  store i8* %incdec.ptr, i8** %scan, align 8, !dbg !2330
  %69 = load i8, i8* %incdec.ptr, align 1, !dbg !2331
  %conv86 = sext i8 %69 to i32, !dbg !2331
  %cmp87 = icmp ne i32 %conv86, 95, !dbg !2332
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %70 = phi i1 [ false, %do.cond ], [ %cmp87, %land.rhs ], !dbg !2333
  br i1 %70, label %do.body, label %do.end, !dbg !2326, !llvm.loop !2334

do.end:                                           ; preds = %land.end
  %71 = load i8*, i8** %scan, align 8, !dbg !2336
  %cmp89 = icmp ne i8* %71, null, !dbg !2338
  br i1 %cmp89, label %if.then91, label %if.end93, !dbg !2339

if.then91:                                        ; preds = %do.end
  %72 = load i8*, i8** %scan, align 8, !dbg !2340
  %incdec.ptr92 = getelementptr inbounds i8, i8* %72, i32 -1, !dbg !2340
  store i8* %incdec.ptr92, i8** %scan, align 8, !dbg !2340
  br label %if.end93, !dbg !2340

if.end93:                                         ; preds = %if.then91, %do.end
  %73 = load i8*, i8** %scan, align 8, !dbg !2341
  %cmp94 = icmp ne i8* %73, null, !dbg !2343
  br i1 %cmp94, label %if.then96, label %if.end104, !dbg !2344

if.then96:                                        ; preds = %if.end93
  %74 = load i8*, i8** %scan, align 8, !dbg !2345
  %call97 = call i64 @strspn(i8* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.215, i64 0, i64 0)), !dbg !2347
  %conv98 = trunc i64 %call97 to i32, !dbg !2347
  store i32 %conv98, i32* %i, align 4, !dbg !2348
  %75 = load i32, i32* %i, align 4, !dbg !2349
  %cmp99 = icmp sgt i32 %75, 2, !dbg !2351
  br i1 %cmp99, label %if.then101, label %if.end103, !dbg !2352

if.then101:                                       ; preds = %if.then96
  %76 = load i32, i32* %i, align 4, !dbg !2353
  %sub = sub nsw i32 %76, 2, !dbg !2355
  %77 = load i8*, i8** %scan, align 8, !dbg !2356
  %idx.ext = sext i32 %sub to i64, !dbg !2356
  %add.ptr102 = getelementptr inbounds i8, i8* %77, i64 %idx.ext, !dbg !2356
  store i8* %add.ptr102, i8** %scan, align 8, !dbg !2356
  br label %if.end103, !dbg !2357

if.end103:                                        ; preds = %if.then101, %if.then96
  br label %if.end104, !dbg !2358

if.end104:                                        ; preds = %if.end103, %if.end93
  %78 = load i8*, i8** %scan, align 8, !dbg !2359
  %cmp105 = icmp eq i8* %78, null, !dbg !2361
  br i1 %cmp105, label %if.then107, label %if.else108, !dbg !2362

if.then107:                                       ; preds = %if.end104
  store i32 0, i32* %success, align 4, !dbg !2363
  br label %if.end327, !dbg !2365

if.else108:                                       ; preds = %if.end104
  %79 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2366
  %static_type = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %79, i32 0, i32 12, !dbg !2368
  %80 = load i32, i32* %static_type, align 8, !dbg !2368
  %tobool109 = icmp ne i32 %80, 0, !dbg !2366
  br i1 %tobool109, label %if.then110, label %if.else125, !dbg !2369

if.then110:                                       ; preds = %if.else108
  %81 = load i8*, i8** %scan, align 8, !dbg !2370
  %arrayidx111 = getelementptr inbounds i8, i8* %81, i64 0, !dbg !2370
  %82 = load i8, i8* %arrayidx111, align 1, !dbg !2370
  %conv112 = zext i8 %82 to i32, !dbg !2370
  %and113 = and i32 %conv112, 255, !dbg !2370
  %idxprom = sext i32 %and113 to i64, !dbg !2370
  %arrayidx114 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !2370
  %83 = load i16, i16* %arrayidx114, align 2, !dbg !2370
  %conv115 = zext i16 %83 to i32, !dbg !2370
  %and116 = and i32 %conv115, 4, !dbg !2370
  %tobool117 = icmp ne i32 %and116, 0, !dbg !2370
  br i1 %tobool117, label %if.end124, label %land.lhs.true118, !dbg !2373

land.lhs.true118:                                 ; preds = %if.then110
  %84 = load i8*, i8** %scan, align 8, !dbg !2374
  %arrayidx119 = getelementptr inbounds i8, i8* %84, i64 0, !dbg !2374
  %85 = load i8, i8* %arrayidx119, align 1, !dbg !2374
  %conv120 = sext i8 %85 to i32, !dbg !2374
  %cmp121 = icmp ne i32 %conv120, 116, !dbg !2375
  br i1 %cmp121, label %if.then123, label %if.end124, !dbg !2376

if.then123:                                       ; preds = %land.lhs.true118
  store i32 0, i32* %success, align 4, !dbg !2377
  br label %if.end124, !dbg !2379

if.end124:                                        ; preds = %if.then123, %land.lhs.true118, %if.then110
  br label %if.end326, !dbg !2380

if.else125:                                       ; preds = %if.else108
  %86 = load i8*, i8** %scan, align 8, !dbg !2381
  %87 = load i8**, i8*** %mangled.addr, align 8, !dbg !2383
  %88 = load i8*, i8** %87, align 8, !dbg !2384
  %cmp126 = icmp eq i8* %86, %88, !dbg !2385
  br i1 %cmp126, label %land.lhs.true128, label %if.else204, !dbg !2386

land.lhs.true128:                                 ; preds = %if.else125
  %89 = load i8*, i8** %scan, align 8, !dbg !2387
  %arrayidx129 = getelementptr inbounds i8, i8* %89, i64 2, !dbg !2387
  %90 = load i8, i8* %arrayidx129, align 1, !dbg !2387
  %conv130 = zext i8 %90 to i32, !dbg !2387
  %and131 = and i32 %conv130, 255, !dbg !2387
  %idxprom132 = sext i32 %and131 to i64, !dbg !2387
  %arrayidx133 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom132, !dbg !2387
  %91 = load i16, i16* %arrayidx133, align 2, !dbg !2387
  %conv134 = zext i16 %91 to i32, !dbg !2387
  %and135 = and i32 %conv134, 4, !dbg !2387
  %tobool136 = icmp ne i32 %and135, 0, !dbg !2387
  br i1 %tobool136, label %if.then157, label %lor.lhs.false137, !dbg !2388

lor.lhs.false137:                                 ; preds = %land.lhs.true128
  %92 = load i8*, i8** %scan, align 8, !dbg !2389
  %arrayidx138 = getelementptr inbounds i8, i8* %92, i64 2, !dbg !2389
  %93 = load i8, i8* %arrayidx138, align 1, !dbg !2389
  %conv139 = sext i8 %93 to i32, !dbg !2389
  %cmp140 = icmp eq i32 %conv139, 81, !dbg !2390
  br i1 %cmp140, label %if.then157, label %lor.lhs.false142, !dbg !2391

lor.lhs.false142:                                 ; preds = %lor.lhs.false137
  %94 = load i8*, i8** %scan, align 8, !dbg !2392
  %arrayidx143 = getelementptr inbounds i8, i8* %94, i64 2, !dbg !2392
  %95 = load i8, i8* %arrayidx143, align 1, !dbg !2392
  %conv144 = sext i8 %95 to i32, !dbg !2392
  %cmp145 = icmp eq i32 %conv144, 116, !dbg !2393
  br i1 %cmp145, label %if.then157, label %lor.lhs.false147, !dbg !2394

lor.lhs.false147:                                 ; preds = %lor.lhs.false142
  %96 = load i8*, i8** %scan, align 8, !dbg !2395
  %arrayidx148 = getelementptr inbounds i8, i8* %96, i64 2, !dbg !2395
  %97 = load i8, i8* %arrayidx148, align 1, !dbg !2395
  %conv149 = sext i8 %97 to i32, !dbg !2395
  %cmp150 = icmp eq i32 %conv149, 75, !dbg !2396
  br i1 %cmp150, label %if.then157, label %lor.lhs.false152, !dbg !2397

lor.lhs.false152:                                 ; preds = %lor.lhs.false147
  %98 = load i8*, i8** %scan, align 8, !dbg !2398
  %arrayidx153 = getelementptr inbounds i8, i8* %98, i64 2, !dbg !2398
  %99 = load i8, i8* %arrayidx153, align 1, !dbg !2398
  %conv154 = sext i8 %99 to i32, !dbg !2398
  %cmp155 = icmp eq i32 %conv154, 72, !dbg !2399
  br i1 %cmp155, label %if.then157, label %if.else204, !dbg !2400

if.then157:                                       ; preds = %lor.lhs.false152, %lor.lhs.false147, %lor.lhs.false142, %lor.lhs.false137, %land.lhs.true128
  %100 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2401
  %options158 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %100, i32 0, i32 0, !dbg !2401
  %101 = load i32, i32* %options158, align 8, !dbg !2401
  %and159 = and i32 %101, 1024, !dbg !2401
  %tobool160 = icmp ne i32 %and159, 0, !dbg !2401
  br i1 %tobool160, label %land.lhs.true169, label %lor.lhs.false161, !dbg !2404

lor.lhs.false161:                                 ; preds = %if.then157
  %102 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2405
  %options162 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %102, i32 0, i32 0, !dbg !2405
  %103 = load i32, i32* %options162, align 8, !dbg !2405
  %and163 = and i32 %103, 2048, !dbg !2405
  %tobool164 = icmp ne i32 %and163, 0, !dbg !2405
  br i1 %tobool164, label %land.lhs.true169, label %lor.lhs.false165, !dbg !2406

lor.lhs.false165:                                 ; preds = %lor.lhs.false161
  %104 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2407
  %options166 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %104, i32 0, i32 0, !dbg !2407
  %105 = load i32, i32* %options166, align 8, !dbg !2407
  %and167 = and i32 %105, 4096, !dbg !2407
  %tobool168 = icmp ne i32 %and167, 0, !dbg !2407
  br i1 %tobool168, label %land.lhs.true169, label %if.else183, !dbg !2408

land.lhs.true169:                                 ; preds = %lor.lhs.false165, %lor.lhs.false161, %if.then157
  %106 = load i8*, i8** %scan, align 8, !dbg !2409
  %arrayidx170 = getelementptr inbounds i8, i8* %106, i64 2, !dbg !2409
  %107 = load i8, i8* %arrayidx170, align 1, !dbg !2409
  %conv171 = zext i8 %107 to i32, !dbg !2409
  %and172 = and i32 %conv171, 255, !dbg !2409
  %idxprom173 = sext i32 %and172 to i64, !dbg !2409
  %arrayidx174 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom173, !dbg !2409
  %108 = load i16, i16* %arrayidx174, align 2, !dbg !2409
  %conv175 = zext i16 %108 to i32, !dbg !2409
  %and176 = and i32 %conv175, 4, !dbg !2409
  %tobool177 = icmp ne i32 %and176, 0, !dbg !2409
  br i1 %tobool177, label %if.then178, label %if.else183, !dbg !2410

if.then178:                                       ; preds = %land.lhs.true169
  %109 = load i8*, i8** %scan, align 8, !dbg !2411
  %add.ptr179 = getelementptr inbounds i8, i8* %109, i64 2, !dbg !2413
  %110 = load i8**, i8*** %mangled.addr, align 8, !dbg !2414
  store i8* %add.ptr179, i8** %110, align 8, !dbg !2415
  %111 = load i8**, i8*** %mangled.addr, align 8, !dbg !2416
  %call180 = call i32 @consume_count(i8** %111), !dbg !2417
  %112 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2418
  %113 = load i8**, i8*** %mangled.addr, align 8, !dbg !2419
  %114 = load i8*, i8** %113, align 8, !dbg !2420
  call void @string_append(%struct.string* %112, i8* %114), !dbg !2421
  %115 = load i8**, i8*** %mangled.addr, align 8, !dbg !2422
  %116 = load i8*, i8** %115, align 8, !dbg !2423
  %call181 = call i64 @strlen(i8* %116), !dbg !2424
  %117 = load i8**, i8*** %mangled.addr, align 8, !dbg !2425
  %118 = load i8*, i8** %117, align 8, !dbg !2426
  %add.ptr182 = getelementptr inbounds i8, i8* %118, i64 %call181, !dbg !2426
  store i8* %add.ptr182, i8** %117, align 8, !dbg !2426
  store i32 1, i32* %success, align 4, !dbg !2427
  br label %if.end203, !dbg !2428

if.else183:                                       ; preds = %land.lhs.true169, %lor.lhs.false165
  %119 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2429
  %options184 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %119, i32 0, i32 0, !dbg !2429
  %120 = load i32, i32* %options184, align 8, !dbg !2429
  %and185 = and i32 %120, 1024, !dbg !2429
  %tobool186 = icmp ne i32 %and185, 0, !dbg !2429
  br i1 %tobool186, label %if.end201, label %lor.lhs.false187, !dbg !2432

lor.lhs.false187:                                 ; preds = %if.else183
  %121 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2433
  %options188 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %121, i32 0, i32 0, !dbg !2433
  %122 = load i32, i32* %options188, align 8, !dbg !2433
  %and189 = and i32 %122, 2048, !dbg !2433
  %tobool190 = icmp ne i32 %and189, 0, !dbg !2433
  br i1 %tobool190, label %if.end201, label %lor.lhs.false191, !dbg !2434

lor.lhs.false191:                                 ; preds = %lor.lhs.false187
  %123 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2435
  %options192 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %123, i32 0, i32 0, !dbg !2435
  %124 = load i32, i32* %options192, align 8, !dbg !2435
  %and193 = and i32 %124, 4096, !dbg !2435
  %tobool194 = icmp ne i32 %and193, 0, !dbg !2435
  br i1 %tobool194, label %if.end201, label %lor.lhs.false195, !dbg !2436

lor.lhs.false195:                                 ; preds = %lor.lhs.false191
  %125 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2437
  %options196 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %125, i32 0, i32 0, !dbg !2437
  %126 = load i32, i32* %options196, align 8, !dbg !2437
  %and197 = and i32 %126, 8192, !dbg !2437
  %tobool198 = icmp ne i32 %and197, 0, !dbg !2437
  br i1 %tobool198, label %if.end201, label %if.then199, !dbg !2438

if.then199:                                       ; preds = %lor.lhs.false195
  %127 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2439
  %constructor200 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %127, i32 0, i32 10, !dbg !2440
  %128 = load i32, i32* %constructor200, align 8, !dbg !2441
  %add = add nsw i32 %128, 1, !dbg !2441
  store i32 %add, i32* %constructor200, align 8, !dbg !2441
  br label %if.end201, !dbg !2439

if.end201:                                        ; preds = %if.then199, %lor.lhs.false195, %lor.lhs.false191, %lor.lhs.false187, %if.else183
  %129 = load i8*, i8** %scan, align 8, !dbg !2442
  %add.ptr202 = getelementptr inbounds i8, i8* %129, i64 2, !dbg !2443
  %130 = load i8**, i8*** %mangled.addr, align 8, !dbg !2444
  store i8* %add.ptr202, i8** %130, align 8, !dbg !2445
  br label %if.end203

if.end203:                                        ; preds = %if.end201, %if.then178
  br label %if.end325, !dbg !2446

if.else204:                                       ; preds = %lor.lhs.false152, %if.else125
  %131 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2447
  %options205 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %131, i32 0, i32 0, !dbg !2447
  %132 = load i32, i32* %options205, align 8, !dbg !2447
  %and206 = and i32 %132, 2048, !dbg !2447
  %tobool207 = icmp ne i32 %and206, 0, !dbg !2447
  br i1 %tobool207, label %land.lhs.true208, label %if.else221, !dbg !2449

land.lhs.true208:                                 ; preds = %if.else204
  %133 = load i8*, i8** %scan, align 8, !dbg !2450
  %arrayidx209 = getelementptr inbounds i8, i8* %133, i64 2, !dbg !2450
  %134 = load i8, i8* %arrayidx209, align 1, !dbg !2450
  %conv210 = sext i8 %134 to i32, !dbg !2450
  %cmp211 = icmp eq i32 %conv210, 112, !dbg !2451
  br i1 %cmp211, label %land.lhs.true213, label %if.else221, !dbg !2452

land.lhs.true213:                                 ; preds = %land.lhs.true208
  %135 = load i8*, i8** %scan, align 8, !dbg !2453
  %arrayidx214 = getelementptr inbounds i8, i8* %135, i64 3, !dbg !2453
  %136 = load i8, i8* %arrayidx214, align 1, !dbg !2453
  %conv215 = sext i8 %136 to i32, !dbg !2453
  %cmp216 = icmp eq i32 %conv215, 116, !dbg !2454
  br i1 %cmp216, label %if.then218, label %if.else221, !dbg !2455

if.then218:                                       ; preds = %land.lhs.true213
  store i32 1, i32* %success, align 4, !dbg !2456
  %137 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2458
  %138 = load i8**, i8*** %mangled.addr, align 8, !dbg !2459
  %139 = load i8**, i8*** %mangled.addr, align 8, !dbg !2460
  %140 = load i8*, i8** %139, align 8, !dbg !2461
  %call219 = call i64 @strlen(i8* %140), !dbg !2462
  %conv220 = trunc i64 %call219 to i32, !dbg !2462
  %141 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2463
  call void @demangle_arm_hp_template(%struct.work_stuff* %137, i8** %138, i32 %conv220, %struct.string* %141), !dbg !2464
  br label %if.end324, !dbg !2465

if.else221:                                       ; preds = %land.lhs.true213, %land.lhs.true208, %if.else204
  %142 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2466
  %options222 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %142, i32 0, i32 0, !dbg !2466
  %143 = load i32, i32* %options222, align 8, !dbg !2466
  %and223 = and i32 %143, 8192, !dbg !2466
  %tobool224 = icmp ne i32 %and223, 0, !dbg !2466
  br i1 %tobool224, label %land.lhs.true225, label %if.else258, !dbg !2468

land.lhs.true225:                                 ; preds = %if.else221
  %144 = load i8*, i8** %scan, align 8, !dbg !2469
  %arrayidx226 = getelementptr inbounds i8, i8* %144, i64 2, !dbg !2469
  %145 = load i8, i8* %arrayidx226, align 1, !dbg !2469
  %conv227 = sext i8 %145 to i32, !dbg !2469
  %cmp228 = icmp eq i32 %conv227, 116, !dbg !2470
  br i1 %cmp228, label %land.lhs.true230, label %lor.lhs.false235, !dbg !2471

land.lhs.true230:                                 ; preds = %land.lhs.true225
  %146 = load i8*, i8** %scan, align 8, !dbg !2472
  %arrayidx231 = getelementptr inbounds i8, i8* %146, i64 3, !dbg !2472
  %147 = load i8, i8* %arrayidx231, align 1, !dbg !2472
  %conv232 = sext i8 %147 to i32, !dbg !2472
  %cmp233 = icmp eq i32 %conv232, 109, !dbg !2473
  br i1 %cmp233, label %if.then255, label %lor.lhs.false235, !dbg !2474

lor.lhs.false235:                                 ; preds = %land.lhs.true230, %land.lhs.true225
  %148 = load i8*, i8** %scan, align 8, !dbg !2475
  %arrayidx236 = getelementptr inbounds i8, i8* %148, i64 2, !dbg !2475
  %149 = load i8, i8* %arrayidx236, align 1, !dbg !2475
  %conv237 = sext i8 %149 to i32, !dbg !2475
  %cmp238 = icmp eq i32 %conv237, 112, !dbg !2476
  br i1 %cmp238, label %land.lhs.true240, label %lor.lhs.false245, !dbg !2477

land.lhs.true240:                                 ; preds = %lor.lhs.false235
  %150 = load i8*, i8** %scan, align 8, !dbg !2478
  %arrayidx241 = getelementptr inbounds i8, i8* %150, i64 3, !dbg !2478
  %151 = load i8, i8* %arrayidx241, align 1, !dbg !2478
  %conv242 = sext i8 %151 to i32, !dbg !2478
  %cmp243 = icmp eq i32 %conv242, 115, !dbg !2479
  br i1 %cmp243, label %if.then255, label %lor.lhs.false245, !dbg !2480

lor.lhs.false245:                                 ; preds = %land.lhs.true240, %lor.lhs.false235
  %152 = load i8*, i8** %scan, align 8, !dbg !2481
  %arrayidx246 = getelementptr inbounds i8, i8* %152, i64 2, !dbg !2481
  %153 = load i8, i8* %arrayidx246, align 1, !dbg !2481
  %conv247 = sext i8 %153 to i32, !dbg !2481
  %cmp248 = icmp eq i32 %conv247, 112, !dbg !2482
  br i1 %cmp248, label %land.lhs.true250, label %if.else258, !dbg !2483

land.lhs.true250:                                 ; preds = %lor.lhs.false245
  %154 = load i8*, i8** %scan, align 8, !dbg !2484
  %arrayidx251 = getelementptr inbounds i8, i8* %154, i64 3, !dbg !2484
  %155 = load i8, i8* %arrayidx251, align 1, !dbg !2484
  %conv252 = sext i8 %155 to i32, !dbg !2484
  %cmp253 = icmp eq i32 %conv252, 116, !dbg !2485
  br i1 %cmp253, label %if.then255, label %if.else258, !dbg !2486

if.then255:                                       ; preds = %land.lhs.true250, %land.lhs.true240, %land.lhs.true230
  store i32 1, i32* %success, align 4, !dbg !2487
  %156 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2489
  %157 = load i8**, i8*** %mangled.addr, align 8, !dbg !2490
  %158 = load i8**, i8*** %mangled.addr, align 8, !dbg !2491
  %159 = load i8*, i8** %158, align 8, !dbg !2492
  %call256 = call i64 @strlen(i8* %159), !dbg !2493
  %conv257 = trunc i64 %call256 to i32, !dbg !2493
  %160 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2494
  call void @demangle_arm_hp_template(%struct.work_stuff* %156, i8** %157, i32 %conv257, %struct.string* %160), !dbg !2495
  br label %if.end323, !dbg !2496

if.else258:                                       ; preds = %land.lhs.true250, %lor.lhs.false245, %if.else221
  %161 = load i8*, i8** %scan, align 8, !dbg !2497
  %162 = load i8**, i8*** %mangled.addr, align 8, !dbg !2499
  %163 = load i8*, i8** %162, align 8, !dbg !2500
  %cmp259 = icmp eq i8* %161, %163, !dbg !2501
  br i1 %cmp259, label %land.lhs.true261, label %if.else313, !dbg !2502

land.lhs.true261:                                 ; preds = %if.else258
  %164 = load i8*, i8** %scan, align 8, !dbg !2503
  %arrayidx262 = getelementptr inbounds i8, i8* %164, i64 2, !dbg !2503
  %165 = load i8, i8* %arrayidx262, align 1, !dbg !2503
  %conv263 = zext i8 %165 to i32, !dbg !2503
  %and264 = and i32 %conv263, 255, !dbg !2503
  %idxprom265 = sext i32 %and264 to i64, !dbg !2503
  %arrayidx266 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom265, !dbg !2503
  %166 = load i16, i16* %arrayidx266, align 2, !dbg !2503
  %conv267 = zext i16 %166 to i32, !dbg !2503
  %and268 = and i32 %conv267, 4, !dbg !2503
  %tobool269 = icmp ne i32 %and268, 0, !dbg !2503
  br i1 %tobool269, label %if.else313, label %land.lhs.true270, !dbg !2504

land.lhs.true270:                                 ; preds = %land.lhs.true261
  %167 = load i8*, i8** %scan, align 8, !dbg !2505
  %arrayidx271 = getelementptr inbounds i8, i8* %167, i64 2, !dbg !2505
  %168 = load i8, i8* %arrayidx271, align 1, !dbg !2505
  %conv272 = sext i8 %168 to i32, !dbg !2505
  %cmp273 = icmp ne i32 %conv272, 116, !dbg !2506
  br i1 %cmp273, label %if.then275, label %if.else313, !dbg !2507

if.then275:                                       ; preds = %land.lhs.true270
  %169 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2508
  %options276 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %169, i32 0, i32 0, !dbg !2508
  %170 = load i32, i32* %options276, align 8, !dbg !2508
  %and277 = and i32 %170, 2048, !dbg !2508
  %tobool278 = icmp ne i32 %and277, 0, !dbg !2508
  br i1 %tobool278, label %lor.lhs.false291, label %lor.lhs.false279, !dbg !2511

lor.lhs.false279:                                 ; preds = %if.then275
  %171 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2512
  %options280 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %171, i32 0, i32 0, !dbg !2512
  %172 = load i32, i32* %options280, align 8, !dbg !2512
  %and281 = and i32 %172, 1024, !dbg !2512
  %tobool282 = icmp ne i32 %and281, 0, !dbg !2512
  br i1 %tobool282, label %lor.lhs.false291, label %lor.lhs.false283, !dbg !2513

lor.lhs.false283:                                 ; preds = %lor.lhs.false279
  %173 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2514
  %options284 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %173, i32 0, i32 0, !dbg !2514
  %174 = load i32, i32* %options284, align 8, !dbg !2514
  %and285 = and i32 %174, 4096, !dbg !2514
  %tobool286 = icmp ne i32 %and285, 0, !dbg !2514
  br i1 %tobool286, label %lor.lhs.false291, label %lor.lhs.false287, !dbg !2515

lor.lhs.false287:                                 ; preds = %lor.lhs.false283
  %175 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2516
  %options288 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %175, i32 0, i32 0, !dbg !2516
  %176 = load i32, i32* %options288, align 8, !dbg !2516
  %and289 = and i32 %176, 8192, !dbg !2516
  %tobool290 = icmp ne i32 %and289, 0, !dbg !2516
  br i1 %tobool290, label %lor.lhs.false291, label %if.then295, !dbg !2517

lor.lhs.false291:                                 ; preds = %lor.lhs.false287, %lor.lhs.false283, %lor.lhs.false279, %if.then275
  %177 = load i8**, i8*** %mangled.addr, align 8, !dbg !2518
  %178 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2519
  %call292 = call i32 @arm_special(i8** %177, %struct.string* %178), !dbg !2520
  %cmp293 = icmp eq i32 %call292, 0, !dbg !2521
  br i1 %cmp293, label %if.then295, label %if.end312, !dbg !2522

if.then295:                                       ; preds = %lor.lhs.false291, %lor.lhs.false287
  br label %while.cond, !dbg !2523

while.cond:                                       ; preds = %while.body, %if.then295
  %179 = load i8*, i8** %scan, align 8, !dbg !2525
  %180 = load i8, i8* %179, align 1, !dbg !2526
  %conv296 = sext i8 %180 to i32, !dbg !2526
  %cmp297 = icmp eq i32 %conv296, 95, !dbg !2527
  br i1 %cmp297, label %while.body, label %while.end, !dbg !2523

while.body:                                       ; preds = %while.cond
  %181 = load i8*, i8** %scan, align 8, !dbg !2528
  %incdec.ptr299 = getelementptr inbounds i8, i8* %181, i32 1, !dbg !2528
  store i8* %incdec.ptr299, i8** %scan, align 8, !dbg !2528
  br label %while.cond, !dbg !2523, !llvm.loop !2530

while.end:                                        ; preds = %while.cond
  %182 = load i8*, i8** %scan, align 8, !dbg !2532
  %call300 = call i8* @strstr(i8* %182, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.216, i64 0, i64 0)), !dbg !2534
  store i8* %call300, i8** %scan, align 8, !dbg !2535
  %cmp301 = icmp eq i8* %call300, null, !dbg !2536
  br i1 %cmp301, label %if.then308, label %lor.lhs.false303, !dbg !2537

lor.lhs.false303:                                 ; preds = %while.end
  %183 = load i8*, i8** %scan, align 8, !dbg !2538
  %add.ptr304 = getelementptr inbounds i8, i8* %183, i64 2, !dbg !2539
  %184 = load i8, i8* %add.ptr304, align 1, !dbg !2540
  %conv305 = sext i8 %184 to i32, !dbg !2540
  %cmp306 = icmp eq i32 %conv305, 0, !dbg !2541
  br i1 %cmp306, label %if.then308, label %if.else309, !dbg !2542

if.then308:                                       ; preds = %lor.lhs.false303, %while.end
  store i32 0, i32* %success, align 4, !dbg !2543
  br label %if.end311, !dbg !2545

if.else309:                                       ; preds = %lor.lhs.false303
  %185 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2546
  %186 = load i8**, i8*** %mangled.addr, align 8, !dbg !2547
  %187 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2548
  %188 = load i8*, i8** %scan, align 8, !dbg !2549
  %call310 = call i32 @iterate_demangle_function(%struct.work_stuff* %185, i8** %186, %struct.string* %187, i8* %188), !dbg !2550
  store i32 %call310, i32* %retval, align 4, !dbg !2551
  br label %return, !dbg !2551

if.end311:                                        ; preds = %if.then308
  br label %if.end312, !dbg !2552

if.end312:                                        ; preds = %if.end311, %lor.lhs.false291
  br label %if.end322, !dbg !2553

if.else313:                                       ; preds = %land.lhs.true270, %land.lhs.true261, %if.else258
  %189 = load i8*, i8** %scan, align 8, !dbg !2554
  %add.ptr314 = getelementptr inbounds i8, i8* %189, i64 2, !dbg !2556
  %190 = load i8, i8* %add.ptr314, align 1, !dbg !2557
  %conv315 = sext i8 %190 to i32, !dbg !2557
  %cmp316 = icmp ne i32 %conv315, 0, !dbg !2558
  br i1 %cmp316, label %if.then318, label %if.else320, !dbg !2559

if.then318:                                       ; preds = %if.else313
  %191 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2560
  %192 = load i8**, i8*** %mangled.addr, align 8, !dbg !2562
  %193 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2563
  %194 = load i8*, i8** %scan, align 8, !dbg !2564
  %call319 = call i32 @iterate_demangle_function(%struct.work_stuff* %191, i8** %192, %struct.string* %193, i8* %194), !dbg !2565
  store i32 %call319, i32* %retval, align 4, !dbg !2566
  br label %return, !dbg !2566

if.else320:                                       ; preds = %if.else313
  store i32 0, i32* %success, align 4, !dbg !2567
  br label %if.end321

if.end321:                                        ; preds = %if.else320
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.end312
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %if.then255
  br label %if.end324

if.end324:                                        ; preds = %if.end323, %if.then218
  br label %if.end325

if.end325:                                        ; preds = %if.end324, %if.end203
  br label %if.end326

if.end326:                                        ; preds = %if.end325, %if.end124
  br label %if.end327

if.end327:                                        ; preds = %if.end326, %if.then107
  %195 = load i32, i32* %success, align 4, !dbg !2569
  %tobool328 = icmp ne i32 %195, 0, !dbg !2569
  br i1 %tobool328, label %if.end340, label %land.lhs.true329, !dbg !2571

land.lhs.true329:                                 ; preds = %if.end327
  %196 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2572
  %constructor330 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %196, i32 0, i32 10, !dbg !2573
  %197 = load i32, i32* %constructor330, align 8, !dbg !2573
  %cmp331 = icmp eq i32 %197, 2, !dbg !2574
  br i1 %cmp331, label %if.then337, label %lor.lhs.false333, !dbg !2575

lor.lhs.false333:                                 ; preds = %land.lhs.true329
  %198 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2576
  %destructor334 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %198, i32 0, i32 11, !dbg !2577
  %199 = load i32, i32* %destructor334, align 4, !dbg !2577
  %cmp335 = icmp eq i32 %199, 2, !dbg !2578
  br i1 %cmp335, label %if.then337, label %if.end340, !dbg !2579

if.then337:                                       ; preds = %lor.lhs.false333, %land.lhs.true329
  %200 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2580
  %201 = load i8**, i8*** %mangled.addr, align 8, !dbg !2582
  %202 = load i8*, i8** %201, align 8, !dbg !2583
  call void @string_append(%struct.string* %200, i8* %202), !dbg !2584
  %203 = load i8**, i8*** %mangled.addr, align 8, !dbg !2585
  %204 = load i8*, i8** %203, align 8, !dbg !2586
  %call338 = call i64 @strlen(i8* %204), !dbg !2587
  %205 = load i8**, i8*** %mangled.addr, align 8, !dbg !2588
  %206 = load i8*, i8** %205, align 8, !dbg !2589
  %add.ptr339 = getelementptr inbounds i8, i8* %206, i64 %call338, !dbg !2589
  store i8* %add.ptr339, i8** %205, align 8, !dbg !2589
  store i32 1, i32* %success, align 4, !dbg !2590
  br label %if.end340, !dbg !2591

if.end340:                                        ; preds = %if.then337, %lor.lhs.false333, %if.end327
  %207 = load i32, i32* %success, align 4, !dbg !2592
  store i32 %207, i32* %retval, align 4, !dbg !2593
  br label %return, !dbg !2593

return:                                           ; preds = %if.end340, %if.then318, %if.else309, %if.then38, %if.then28
  %208 = load i32, i32* %retval, align 4, !dbg !2594
  ret i32 %208, !dbg !2594
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_signature(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !2595 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %success = alloca i32, align 4
  %func_done = alloca i32, align 4
  %expect_func = alloca i32, align 4
  %expect_return_type = alloca i32, align 4
  %oldmangled = alloca i8*, align 8
  %trawname = alloca %struct.string, align 8
  %tname = alloca %struct.string, align 8
  %s = alloca %struct.string, align 8
  %return_type = alloca %struct.string, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !2596, metadata !DIExpression()), !dbg !2597
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !2598, metadata !DIExpression()), !dbg !2599
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !2600, metadata !DIExpression()), !dbg !2601
  call void @llvm.dbg.declare(metadata i32* %success, metadata !2602, metadata !DIExpression()), !dbg !2603
  store i32 1, i32* %success, align 4, !dbg !2603
  call void @llvm.dbg.declare(metadata i32* %func_done, metadata !2604, metadata !DIExpression()), !dbg !2605
  store i32 0, i32* %func_done, align 4, !dbg !2605
  call void @llvm.dbg.declare(metadata i32* %expect_func, metadata !2606, metadata !DIExpression()), !dbg !2607
  store i32 0, i32* %expect_func, align 4, !dbg !2607
  call void @llvm.dbg.declare(metadata i32* %expect_return_type, metadata !2608, metadata !DIExpression()), !dbg !2609
  store i32 0, i32* %expect_return_type, align 4, !dbg !2609
  call void @llvm.dbg.declare(metadata i8** %oldmangled, metadata !2610, metadata !DIExpression()), !dbg !2611
  store i8* null, i8** %oldmangled, align 8, !dbg !2611
  call void @llvm.dbg.declare(metadata %struct.string* %trawname, metadata !2612, metadata !DIExpression()), !dbg !2613
  call void @llvm.dbg.declare(metadata %struct.string* %tname, metadata !2614, metadata !DIExpression()), !dbg !2615
  br label %while.cond, !dbg !2616

while.cond:                                       ; preds = %if.end249, %entry
  %0 = load i32, i32* %success, align 4, !dbg !2617
  %tobool = icmp ne i32 %0, 0, !dbg !2617
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2618

land.rhs:                                         ; preds = %while.cond
  %1 = load i8**, i8*** %mangled.addr, align 8, !dbg !2619
  %2 = load i8*, i8** %1, align 8, !dbg !2620
  %3 = load i8, i8* %2, align 1, !dbg !2621
  %conv = sext i8 %3 to i32, !dbg !2621
  %cmp = icmp ne i32 %conv, 0, !dbg !2622
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !2623
  br i1 %4, label %while.body, label %while.end250, !dbg !2616

while.body:                                       ; preds = %land.end
  %5 = load i8**, i8*** %mangled.addr, align 8, !dbg !2624
  %6 = load i8*, i8** %5, align 8, !dbg !2626
  %7 = load i8, i8* %6, align 1, !dbg !2627
  %conv2 = sext i8 %7 to i32, !dbg !2627
  switch i32 %conv2, label %sw.default [
    i32 81, label %sw.bb
    i32 75, label %sw.bb11
    i32 83, label %sw.bb22
    i32 67, label %sw.bb27
    i32 86, label %sw.bb27
    i32 117, label %sw.bb27
    i32 76, label %sw.bb35
    i32 48, label %sw.bb56
    i32 49, label %sw.bb56
    i32 50, label %sw.bb56
    i32 51, label %sw.bb56
    i32 52, label %sw.bb56
    i32 53, label %sw.bb56
    i32 54, label %sw.bb56
    i32 55, label %sw.bb56
    i32 56, label %sw.bb56
    i32 57, label %sw.bb56
    i32 66, label %sw.bb87
    i32 70, label %sw.bb95
    i32 116, label %sw.bb131
    i32 95, label %sw.bb163
    i32 72, label %sw.bb202
  ], !dbg !2628

sw.bb:                                            ; preds = %while.body
  %8 = load i8**, i8*** %mangled.addr, align 8, !dbg !2629
  %9 = load i8*, i8** %8, align 8, !dbg !2631
  store i8* %9, i8** %oldmangled, align 8, !dbg !2632
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2633
  %11 = load i8**, i8*** %mangled.addr, align 8, !dbg !2634
  %12 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2635
  %call = call i32 @demangle_qualified(%struct.work_stuff* %10, i8** %11, %struct.string* %12, i32 1, i32 0), !dbg !2636
  store i32 %call, i32* %success, align 4, !dbg !2637
  %13 = load i32, i32* %success, align 4, !dbg !2638
  %tobool3 = icmp ne i32 %13, 0, !dbg !2638
  br i1 %tobool3, label %if.then, label %if.end, !dbg !2640

if.then:                                          ; preds = %sw.bb
  %14 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2641
  %15 = load i8*, i8** %oldmangled, align 8, !dbg !2642
  %16 = load i8**, i8*** %mangled.addr, align 8, !dbg !2643
  %17 = load i8*, i8** %16, align 8, !dbg !2644
  %18 = load i8*, i8** %oldmangled, align 8, !dbg !2645
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64, !dbg !2646
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64, !dbg !2646
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2646
  %conv4 = trunc i64 %sub.ptr.sub to i32, !dbg !2644
  call void @remember_type(%struct.work_stuff* %14, i8* %15, i32 %conv4), !dbg !2647
  br label %if.end, !dbg !2647

if.end:                                           ; preds = %if.then, %sw.bb
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2648
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 0, !dbg !2648
  %20 = load i32, i32* %options, align 8, !dbg !2648
  %and = and i32 %20, 256, !dbg !2648
  %tobool5 = icmp ne i32 %and, 0, !dbg !2648
  br i1 %tobool5, label %if.then9, label %lor.lhs.false, !dbg !2650

lor.lhs.false:                                    ; preds = %if.end
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2651
  %options6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 0, !dbg !2651
  %22 = load i32, i32* %options6, align 8, !dbg !2651
  %and7 = and i32 %22, 512, !dbg !2651
  %tobool8 = icmp ne i32 %and7, 0, !dbg !2651
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !2652

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  store i32 1, i32* %expect_func, align 4, !dbg !2653
  br label %if.end10, !dbg !2654

if.end10:                                         ; preds = %if.then9, %lor.lhs.false
  store i8* null, i8** %oldmangled, align 8, !dbg !2655
  br label %sw.epilog, !dbg !2656

sw.bb11:                                          ; preds = %while.body
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !2657
  %24 = load i8*, i8** %23, align 8, !dbg !2658
  store i8* %24, i8** %oldmangled, align 8, !dbg !2659
  %25 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2660
  %26 = load i8**, i8*** %mangled.addr, align 8, !dbg !2661
  %27 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2662
  %call12 = call i32 @demangle_qualified(%struct.work_stuff* %25, i8** %26, %struct.string* %27, i32 1, i32 0), !dbg !2663
  store i32 %call12, i32* %success, align 4, !dbg !2664
  %28 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2665
  %options13 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %28, i32 0, i32 0, !dbg !2665
  %29 = load i32, i32* %options13, align 8, !dbg !2665
  %and14 = and i32 %29, 256, !dbg !2665
  %tobool15 = icmp ne i32 %and14, 0, !dbg !2665
  br i1 %tobool15, label %if.then20, label %lor.lhs.false16, !dbg !2667

lor.lhs.false16:                                  ; preds = %sw.bb11
  %30 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2668
  %options17 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %30, i32 0, i32 0, !dbg !2668
  %31 = load i32, i32* %options17, align 8, !dbg !2668
  %and18 = and i32 %31, 512, !dbg !2668
  %tobool19 = icmp ne i32 %and18, 0, !dbg !2668
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !2669

if.then20:                                        ; preds = %lor.lhs.false16, %sw.bb11
  store i32 1, i32* %expect_func, align 4, !dbg !2670
  br label %if.end21, !dbg !2672

if.end21:                                         ; preds = %if.then20, %lor.lhs.false16
  store i8* null, i8** %oldmangled, align 8, !dbg !2673
  br label %sw.epilog, !dbg !2674

sw.bb22:                                          ; preds = %while.body
  %32 = load i8*, i8** %oldmangled, align 8, !dbg !2675
  %cmp23 = icmp eq i8* %32, null, !dbg !2677
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !2678

if.then25:                                        ; preds = %sw.bb22
  %33 = load i8**, i8*** %mangled.addr, align 8, !dbg !2679
  %34 = load i8*, i8** %33, align 8, !dbg !2681
  store i8* %34, i8** %oldmangled, align 8, !dbg !2682
  br label %if.end26, !dbg !2683

if.end26:                                         ; preds = %if.then25, %sw.bb22
  %35 = load i8**, i8*** %mangled.addr, align 8, !dbg !2684
  %36 = load i8*, i8** %35, align 8, !dbg !2685
  %incdec.ptr = getelementptr inbounds i8, i8* %36, i32 1, !dbg !2685
  store i8* %incdec.ptr, i8** %35, align 8, !dbg !2685
  %37 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2686
  %static_type = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %37, i32 0, i32 12, !dbg !2687
  store i32 1, i32* %static_type, align 8, !dbg !2688
  br label %sw.epilog, !dbg !2689

sw.bb27:                                          ; preds = %while.body, %while.body, %while.body
  %38 = load i8**, i8*** %mangled.addr, align 8, !dbg !2690
  %39 = load i8*, i8** %38, align 8, !dbg !2691
  %40 = load i8, i8* %39, align 1, !dbg !2692
  %conv28 = sext i8 %40 to i32, !dbg !2692
  %call29 = call i32 @code_for_qualifier(i32 %conv28), !dbg !2693
  %41 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2694
  %type_quals = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %41, i32 0, i32 14, !dbg !2695
  %42 = load i32, i32* %type_quals, align 8, !dbg !2696
  %or = or i32 %42, %call29, !dbg !2696
  store i32 %or, i32* %type_quals, align 8, !dbg !2696
  %43 = load i8*, i8** %oldmangled, align 8, !dbg !2697
  %cmp30 = icmp eq i8* %43, null, !dbg !2699
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !2700

if.then32:                                        ; preds = %sw.bb27
  %44 = load i8**, i8*** %mangled.addr, align 8, !dbg !2701
  %45 = load i8*, i8** %44, align 8, !dbg !2702
  store i8* %45, i8** %oldmangled, align 8, !dbg !2703
  br label %if.end33, !dbg !2704

if.end33:                                         ; preds = %if.then32, %sw.bb27
  %46 = load i8**, i8*** %mangled.addr, align 8, !dbg !2705
  %47 = load i8*, i8** %46, align 8, !dbg !2706
  %incdec.ptr34 = getelementptr inbounds i8, i8* %47, i32 1, !dbg !2706
  store i8* %incdec.ptr34, i8** %46, align 8, !dbg !2706
  br label %sw.epilog, !dbg !2707

sw.bb35:                                          ; preds = %while.body
  %48 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2708
  %options36 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %48, i32 0, i32 0, !dbg !2708
  %49 = load i32, i32* %options36, align 8, !dbg !2708
  %and37 = and i32 %49, 4096, !dbg !2708
  %tobool38 = icmp ne i32 %and37, 0, !dbg !2708
  br i1 %tobool38, label %if.then39, label %if.else54, !dbg !2710

if.then39:                                        ; preds = %sw.bb35
  br label %while.cond40, !dbg !2711

while.cond40:                                     ; preds = %while.body48, %if.then39
  %50 = load i8**, i8*** %mangled.addr, align 8, !dbg !2713
  %51 = load i8*, i8** %50, align 8, !dbg !2714
  %52 = load i8, i8* %51, align 1, !dbg !2715
  %conv41 = sext i8 %52 to i32, !dbg !2715
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !2715
  br i1 %tobool42, label %land.rhs43, label %land.end47, !dbg !2716

land.rhs43:                                       ; preds = %while.cond40
  %53 = load i8**, i8*** %mangled.addr, align 8, !dbg !2717
  %54 = load i8*, i8** %53, align 8, !dbg !2718
  %55 = load i8, i8* %54, align 1, !dbg !2719
  %conv44 = sext i8 %55 to i32, !dbg !2719
  %cmp45 = icmp ne i32 %conv44, 95, !dbg !2720
  br label %land.end47

land.end47:                                       ; preds = %land.rhs43, %while.cond40
  %56 = phi i1 [ false, %while.cond40 ], [ %cmp45, %land.rhs43 ], !dbg !2721
  br i1 %56, label %while.body48, label %while.end, !dbg !2711

while.body48:                                     ; preds = %land.end47
  %57 = load i8**, i8*** %mangled.addr, align 8, !dbg !2722
  %58 = load i8*, i8** %57, align 8, !dbg !2723
  %incdec.ptr49 = getelementptr inbounds i8, i8* %58, i32 1, !dbg !2723
  store i8* %incdec.ptr49, i8** %57, align 8, !dbg !2723
  br label %while.cond40, !dbg !2711, !llvm.loop !2724

while.end:                                        ; preds = %land.end47
  %59 = load i8**, i8*** %mangled.addr, align 8, !dbg !2725
  %60 = load i8*, i8** %59, align 8, !dbg !2727
  %61 = load i8, i8* %60, align 1, !dbg !2728
  %tobool50 = icmp ne i8 %61, 0, !dbg !2728
  br i1 %tobool50, label %if.else, label %if.then51, !dbg !2729

if.then51:                                        ; preds = %while.end
  store i32 0, i32* %success, align 4, !dbg !2730
  br label %if.end53, !dbg !2731

if.else:                                          ; preds = %while.end
  %62 = load i8**, i8*** %mangled.addr, align 8, !dbg !2732
  %63 = load i8*, i8** %62, align 8, !dbg !2733
  %incdec.ptr52 = getelementptr inbounds i8, i8* %63, i32 1, !dbg !2733
  store i8* %incdec.ptr52, i8** %62, align 8, !dbg !2733
  br label %if.end53

if.end53:                                         ; preds = %if.else, %if.then51
  br label %if.end55, !dbg !2734

if.else54:                                        ; preds = %sw.bb35
  store i32 0, i32* %success, align 4, !dbg !2735
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.end53
  br label %sw.epilog, !dbg !2736

sw.bb56:                                          ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %64 = load i8*, i8** %oldmangled, align 8, !dbg !2737
  %cmp57 = icmp eq i8* %64, null, !dbg !2739
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !2740

if.then59:                                        ; preds = %sw.bb56
  %65 = load i8**, i8*** %mangled.addr, align 8, !dbg !2741
  %66 = load i8*, i8** %65, align 8, !dbg !2743
  store i8* %66, i8** %oldmangled, align 8, !dbg !2744
  br label %if.end60, !dbg !2745

if.end60:                                         ; preds = %if.then59, %sw.bb56
  %67 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2746
  %temp_start = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %67, i32 0, i32 13, !dbg !2747
  store i32 -1, i32* %temp_start, align 4, !dbg !2748
  %68 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2749
  %69 = load i8**, i8*** %mangled.addr, align 8, !dbg !2750
  %70 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2751
  %call61 = call i32 @demangle_class(%struct.work_stuff* %68, i8** %69, %struct.string* %70), !dbg !2752
  store i32 %call61, i32* %success, align 4, !dbg !2753
  %71 = load i32, i32* %success, align 4, !dbg !2754
  %tobool62 = icmp ne i32 %71, 0, !dbg !2754
  br i1 %tobool62, label %if.then63, label %if.end68, !dbg !2756

if.then63:                                        ; preds = %if.end60
  %72 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2757
  %73 = load i8*, i8** %oldmangled, align 8, !dbg !2759
  %74 = load i8**, i8*** %mangled.addr, align 8, !dbg !2760
  %75 = load i8*, i8** %74, align 8, !dbg !2761
  %76 = load i8*, i8** %oldmangled, align 8, !dbg !2762
  %sub.ptr.lhs.cast64 = ptrtoint i8* %75 to i64, !dbg !2763
  %sub.ptr.rhs.cast65 = ptrtoint i8* %76 to i64, !dbg !2763
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65, !dbg !2763
  %conv67 = trunc i64 %sub.ptr.sub66 to i32, !dbg !2761
  call void @remember_type(%struct.work_stuff* %72, i8* %73, i32 %conv67), !dbg !2764
  br label %if.end68, !dbg !2765

if.end68:                                         ; preds = %if.then63, %if.end60
  %77 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2766
  %options69 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %77, i32 0, i32 0, !dbg !2766
  %78 = load i32, i32* %options69, align 8, !dbg !2766
  %and70 = and i32 %78, 256, !dbg !2766
  %tobool71 = icmp ne i32 %and70, 0, !dbg !2766
  br i1 %tobool71, label %if.then80, label %lor.lhs.false72, !dbg !2768

lor.lhs.false72:                                  ; preds = %if.end68
  %79 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2769
  %options73 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %79, i32 0, i32 0, !dbg !2769
  %80 = load i32, i32* %options73, align 8, !dbg !2769
  %and74 = and i32 %80, 512, !dbg !2769
  %tobool75 = icmp ne i32 %and74, 0, !dbg !2769
  br i1 %tobool75, label %if.then80, label %lor.lhs.false76, !dbg !2770

lor.lhs.false76:                                  ; preds = %lor.lhs.false72
  %81 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2771
  %options77 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %81, i32 0, i32 0, !dbg !2771
  %82 = load i32, i32* %options77, align 8, !dbg !2771
  %and78 = and i32 %82, 8192, !dbg !2771
  %tobool79 = icmp ne i32 %and78, 0, !dbg !2771
  br i1 %tobool79, label %if.then80, label %if.end86, !dbg !2772

if.then80:                                        ; preds = %lor.lhs.false76, %lor.lhs.false72, %if.end68
  %83 = load i8**, i8*** %mangled.addr, align 8, !dbg !2773
  %84 = load i8*, i8** %83, align 8, !dbg !2776
  %85 = load i8, i8* %84, align 1, !dbg !2777
  %conv81 = sext i8 %85 to i32, !dbg !2777
  %cmp82 = icmp ne i32 %conv81, 70, !dbg !2778
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !2779

if.then84:                                        ; preds = %if.then80
  store i32 1, i32* %expect_func, align 4, !dbg !2780
  br label %if.end85, !dbg !2781

if.end85:                                         ; preds = %if.then84, %if.then80
  br label %if.end86, !dbg !2782

if.end86:                                         ; preds = %if.end85, %lor.lhs.false76
  store i8* null, i8** %oldmangled, align 8, !dbg !2783
  br label %sw.epilog, !dbg !2784

sw.bb87:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.string* %s, metadata !2785, metadata !DIExpression()), !dbg !2787
  %86 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2788
  %87 = load i8**, i8*** %mangled.addr, align 8, !dbg !2789
  %call88 = call i32 @do_type(%struct.work_stuff* %86, i8** %87, %struct.string* %s), !dbg !2790
  store i32 %call88, i32* %success, align 4, !dbg !2791
  %88 = load i32, i32* %success, align 4, !dbg !2792
  %tobool89 = icmp ne i32 %88, 0, !dbg !2792
  br i1 %tobool89, label %if.then90, label %if.end94, !dbg !2794

if.then90:                                        ; preds = %sw.bb87
  %89 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2795
  %options91 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %89, i32 0, i32 0, !dbg !2795
  %90 = load i32, i32* %options91, align 8, !dbg !2795
  %and92 = and i32 %90, 4, !dbg !2795
  %tobool93 = icmp ne i32 %and92, 0, !dbg !2795
  %91 = zext i1 %tobool93 to i64, !dbg !2795
  %cond = select i1 %tobool93, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !2795
  call void @string_append(%struct.string* %s, i8* %cond), !dbg !2797
  %92 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2798
  call void @string_prepends(%struct.string* %92, %struct.string* %s), !dbg !2799
  call void @string_delete(%struct.string* %s), !dbg !2800
  br label %if.end94, !dbg !2801

if.end94:                                         ; preds = %if.then90, %sw.bb87
  store i8* null, i8** %oldmangled, align 8, !dbg !2802
  store i32 1, i32* %expect_func, align 4, !dbg !2803
  br label %sw.epilog, !dbg !2804

sw.bb95:                                          ; preds = %while.body
  store i8* null, i8** %oldmangled, align 8, !dbg !2805
  store i32 1, i32* %func_done, align 4, !dbg !2806
  %93 = load i8**, i8*** %mangled.addr, align 8, !dbg !2807
  %94 = load i8*, i8** %93, align 8, !dbg !2808
  %incdec.ptr96 = getelementptr inbounds i8, i8* %94, i32 1, !dbg !2808
  store i8* %incdec.ptr96, i8** %93, align 8, !dbg !2808
  %95 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2809
  %options97 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %95, i32 0, i32 0, !dbg !2809
  %96 = load i32, i32* %options97, align 8, !dbg !2809
  %and98 = and i32 %96, 1024, !dbg !2809
  %tobool99 = icmp ne i32 %and98, 0, !dbg !2809
  br i1 %tobool99, label %if.then112, label %lor.lhs.false100, !dbg !2811

lor.lhs.false100:                                 ; preds = %sw.bb95
  %97 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2812
  %options101 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %97, i32 0, i32 0, !dbg !2812
  %98 = load i32, i32* %options101, align 8, !dbg !2812
  %and102 = and i32 %98, 2048, !dbg !2812
  %tobool103 = icmp ne i32 %and102, 0, !dbg !2812
  br i1 %tobool103, label %if.then112, label %lor.lhs.false104, !dbg !2813

lor.lhs.false104:                                 ; preds = %lor.lhs.false100
  %99 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2814
  %options105 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %99, i32 0, i32 0, !dbg !2814
  %100 = load i32, i32* %options105, align 8, !dbg !2814
  %and106 = and i32 %100, 4096, !dbg !2814
  %tobool107 = icmp ne i32 %and106, 0, !dbg !2814
  br i1 %tobool107, label %if.then112, label %lor.lhs.false108, !dbg !2815

lor.lhs.false108:                                 ; preds = %lor.lhs.false104
  %101 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2816
  %options109 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %101, i32 0, i32 0, !dbg !2816
  %102 = load i32, i32* %options109, align 8, !dbg !2816
  %and110 = and i32 %102, 8192, !dbg !2816
  %tobool111 = icmp ne i32 %and110, 0, !dbg !2816
  br i1 %tobool111, label %if.then112, label %if.end113, !dbg !2817

if.then112:                                       ; preds = %lor.lhs.false108, %lor.lhs.false104, %lor.lhs.false100, %sw.bb95
  %103 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2818
  call void @forget_types(%struct.work_stuff* %103), !dbg !2820
  br label %if.end113, !dbg !2821

if.end113:                                        ; preds = %if.then112, %lor.lhs.false108
  %104 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2822
  %105 = load i8**, i8*** %mangled.addr, align 8, !dbg !2823
  %106 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2824
  %call114 = call i32 @demangle_args(%struct.work_stuff* %104, i8** %105, %struct.string* %106), !dbg !2825
  store i32 %call114, i32* %success, align 4, !dbg !2826
  %107 = load i32, i32* %success, align 4, !dbg !2827
  %tobool115 = icmp ne i32 %107, 0, !dbg !2827
  br i1 %tobool115, label %land.lhs.true, label %if.end130, !dbg !2829

land.lhs.true:                                    ; preds = %if.end113
  %108 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2830
  %options116 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %108, i32 0, i32 0, !dbg !2830
  %109 = load i32, i32* %options116, align 8, !dbg !2830
  %and117 = and i32 %109, 256, !dbg !2830
  %tobool118 = icmp ne i32 %and117, 0, !dbg !2830
  br i1 %tobool118, label %land.lhs.true123, label %lor.lhs.false119, !dbg !2831

lor.lhs.false119:                                 ; preds = %land.lhs.true
  %110 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2832
  %options120 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %110, i32 0, i32 0, !dbg !2832
  %111 = load i32, i32* %options120, align 8, !dbg !2832
  %and121 = and i32 %111, 8192, !dbg !2832
  %tobool122 = icmp ne i32 %and121, 0, !dbg !2832
  br i1 %tobool122, label %land.lhs.true123, label %if.end130, !dbg !2833

land.lhs.true123:                                 ; preds = %lor.lhs.false119, %land.lhs.true
  %112 = load i8**, i8*** %mangled.addr, align 8, !dbg !2834
  %113 = load i8*, i8** %112, align 8, !dbg !2835
  %114 = load i8, i8* %113, align 1, !dbg !2836
  %conv124 = sext i8 %114 to i32, !dbg !2836
  %cmp125 = icmp eq i32 %conv124, 95, !dbg !2837
  br i1 %cmp125, label %if.then127, label %if.end130, !dbg !2838

if.then127:                                       ; preds = %land.lhs.true123
  %115 = load i8**, i8*** %mangled.addr, align 8, !dbg !2839
  %116 = load i8*, i8** %115, align 8, !dbg !2841
  %incdec.ptr128 = getelementptr inbounds i8, i8* %116, i32 1, !dbg !2841
  store i8* %incdec.ptr128, i8** %115, align 8, !dbg !2841
  %117 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2842
  %118 = load i8**, i8*** %mangled.addr, align 8, !dbg !2843
  %call129 = call i32 @do_type(%struct.work_stuff* %117, i8** %118, %struct.string* %tname), !dbg !2844
  store i32 %call129, i32* %success, align 4, !dbg !2845
  call void @string_delete(%struct.string* %tname), !dbg !2846
  br label %if.end130, !dbg !2847

if.end130:                                        ; preds = %if.then127, %land.lhs.true123, %lor.lhs.false119, %if.end113
  br label %sw.epilog, !dbg !2848

sw.bb131:                                         ; preds = %while.body
  call void @string_init(%struct.string* %trawname), !dbg !2849
  call void @string_init(%struct.string* %tname), !dbg !2850
  %119 = load i8*, i8** %oldmangled, align 8, !dbg !2851
  %cmp132 = icmp eq i8* %119, null, !dbg !2853
  br i1 %cmp132, label %if.then134, label %if.end135, !dbg !2854

if.then134:                                       ; preds = %sw.bb131
  %120 = load i8**, i8*** %mangled.addr, align 8, !dbg !2855
  %121 = load i8*, i8** %120, align 8, !dbg !2857
  store i8* %121, i8** %oldmangled, align 8, !dbg !2858
  br label %if.end135, !dbg !2859

if.end135:                                        ; preds = %if.then134, %sw.bb131
  %122 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2860
  %123 = load i8**, i8*** %mangled.addr, align 8, !dbg !2861
  %call136 = call i32 @demangle_template(%struct.work_stuff* %122, i8** %123, %struct.string* %tname, %struct.string* %trawname, i32 1, i32 1), !dbg !2862
  store i32 %call136, i32* %success, align 4, !dbg !2863
  %124 = load i32, i32* %success, align 4, !dbg !2864
  %tobool137 = icmp ne i32 %124, 0, !dbg !2864
  br i1 %tobool137, label %if.then138, label %if.end143, !dbg !2866

if.then138:                                       ; preds = %if.end135
  %125 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2867
  %126 = load i8*, i8** %oldmangled, align 8, !dbg !2869
  %127 = load i8**, i8*** %mangled.addr, align 8, !dbg !2870
  %128 = load i8*, i8** %127, align 8, !dbg !2871
  %129 = load i8*, i8** %oldmangled, align 8, !dbg !2872
  %sub.ptr.lhs.cast139 = ptrtoint i8* %128 to i64, !dbg !2873
  %sub.ptr.rhs.cast140 = ptrtoint i8* %129 to i64, !dbg !2873
  %sub.ptr.sub141 = sub i64 %sub.ptr.lhs.cast139, %sub.ptr.rhs.cast140, !dbg !2873
  %conv142 = trunc i64 %sub.ptr.sub141 to i32, !dbg !2871
  call void @remember_type(%struct.work_stuff* %125, i8* %126, i32 %conv142), !dbg !2874
  br label %if.end143, !dbg !2875

if.end143:                                        ; preds = %if.then138, %if.end135
  %130 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2876
  %options144 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %130, i32 0, i32 0, !dbg !2876
  %131 = load i32, i32* %options144, align 8, !dbg !2876
  %and145 = and i32 %131, 4, !dbg !2876
  %tobool146 = icmp ne i32 %and145, 0, !dbg !2876
  %132 = zext i1 %tobool146 to i64, !dbg !2876
  %cond147 = select i1 %tobool146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !2876
  call void @string_append(%struct.string* %tname, i8* %cond147), !dbg !2877
  %133 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2878
  call void @string_prepends(%struct.string* %133, %struct.string* %tname), !dbg !2879
  %134 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2880
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %134, i32 0, i32 11, !dbg !2882
  %135 = load i32, i32* %destructor, align 4, !dbg !2882
  %and148 = and i32 %135, 1, !dbg !2883
  %tobool149 = icmp ne i32 %and148, 0, !dbg !2883
  br i1 %tobool149, label %if.then150, label %if.end152, !dbg !2884

if.then150:                                       ; preds = %if.end143
  call void @string_prepend(%struct.string* %trawname, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i64 0, i64 0)), !dbg !2885
  %136 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2887
  call void @string_appends(%struct.string* %136, %struct.string* %trawname), !dbg !2888
  %137 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2889
  %destructor151 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %137, i32 0, i32 11, !dbg !2890
  %138 = load i32, i32* %destructor151, align 4, !dbg !2891
  %sub = sub nsw i32 %138, 1, !dbg !2891
  store i32 %sub, i32* %destructor151, align 4, !dbg !2891
  br label %if.end152, !dbg !2892

if.end152:                                        ; preds = %if.then150, %if.end143
  %139 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2893
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %139, i32 0, i32 10, !dbg !2895
  %140 = load i32, i32* %constructor, align 8, !dbg !2895
  %and153 = and i32 %140, 1, !dbg !2896
  %tobool154 = icmp ne i32 %and153, 0, !dbg !2896
  br i1 %tobool154, label %if.then159, label %lor.lhs.false155, !dbg !2897

lor.lhs.false155:                                 ; preds = %if.end152
  %141 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2898
  %destructor156 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %141, i32 0, i32 11, !dbg !2899
  %142 = load i32, i32* %destructor156, align 4, !dbg !2899
  %and157 = and i32 %142, 1, !dbg !2900
  %tobool158 = icmp ne i32 %and157, 0, !dbg !2900
  br i1 %tobool158, label %if.then159, label %if.end162, !dbg !2901

if.then159:                                       ; preds = %lor.lhs.false155, %if.end152
  %143 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2902
  call void @string_appends(%struct.string* %143, %struct.string* %trawname), !dbg !2904
  %144 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2905
  %constructor160 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %144, i32 0, i32 10, !dbg !2906
  %145 = load i32, i32* %constructor160, align 8, !dbg !2907
  %sub161 = sub nsw i32 %145, 1, !dbg !2907
  store i32 %sub161, i32* %constructor160, align 8, !dbg !2907
  br label %if.end162, !dbg !2908

if.end162:                                        ; preds = %if.then159, %lor.lhs.false155
  call void @string_delete(%struct.string* %trawname), !dbg !2909
  call void @string_delete(%struct.string* %tname), !dbg !2910
  store i8* null, i8** %oldmangled, align 8, !dbg !2911
  store i32 1, i32* %expect_func, align 4, !dbg !2912
  br label %sw.epilog, !dbg !2913

sw.bb163:                                         ; preds = %while.body
  %146 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2914
  %options164 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %146, i32 0, i32 0, !dbg !2914
  %147 = load i32, i32* %options164, align 8, !dbg !2914
  %and165 = and i32 %147, 256, !dbg !2914
  %tobool166 = icmp ne i32 %and165, 0, !dbg !2914
  br i1 %tobool166, label %land.lhs.true171, label %lor.lhs.false167, !dbg !2916

lor.lhs.false167:                                 ; preds = %sw.bb163
  %148 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2917
  %options168 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %148, i32 0, i32 0, !dbg !2917
  %149 = load i32, i32* %options168, align 8, !dbg !2917
  %and169 = and i32 %149, 512, !dbg !2917
  %tobool170 = icmp ne i32 %and169, 0, !dbg !2917
  br i1 %tobool170, label %land.lhs.true171, label %if.else180, !dbg !2918

land.lhs.true171:                                 ; preds = %lor.lhs.false167, %sw.bb163
  %150 = load i32, i32* %expect_return_type, align 4, !dbg !2919
  %tobool172 = icmp ne i32 %150, 0, !dbg !2919
  br i1 %tobool172, label %if.then173, label %if.else180, !dbg !2920

if.then173:                                       ; preds = %land.lhs.true171
  call void @llvm.dbg.declare(metadata %struct.string* %return_type, metadata !2921, metadata !DIExpression()), !dbg !2923
  %151 = load i8**, i8*** %mangled.addr, align 8, !dbg !2924
  %152 = load i8*, i8** %151, align 8, !dbg !2925
  %incdec.ptr174 = getelementptr inbounds i8, i8* %152, i32 1, !dbg !2925
  store i8* %incdec.ptr174, i8** %151, align 8, !dbg !2925
  %153 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2926
  %154 = load i8**, i8*** %mangled.addr, align 8, !dbg !2927
  %call175 = call i32 @do_type(%struct.work_stuff* %153, i8** %154, %struct.string* %return_type), !dbg !2928
  store i32 %call175, i32* %success, align 4, !dbg !2929
  %b = getelementptr inbounds %struct.string, %struct.string* %return_type, i32 0, i32 0, !dbg !2930
  %155 = load i8*, i8** %b, align 8, !dbg !2930
  %p = getelementptr inbounds %struct.string, %struct.string* %return_type, i32 0, i32 1, !dbg !2930
  %156 = load i8*, i8** %p, align 8, !dbg !2930
  %cmp176 = icmp eq i8* %155, %156, !dbg !2930
  br i1 %cmp176, label %if.end179, label %if.then178, !dbg !2933

if.then178:                                       ; preds = %if.then173
  call void @string_append(%struct.string* %return_type, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !2930
  br label %if.end179, !dbg !2930

if.end179:                                        ; preds = %if.then178, %if.then173
  %157 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2934
  call void @string_prepends(%struct.string* %157, %struct.string* %return_type), !dbg !2935
  call void @string_delete(%struct.string* %return_type), !dbg !2936
  br label %sw.epilog, !dbg !2937

if.else180:                                       ; preds = %land.lhs.true171, %lor.lhs.false167
  %158 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2938
  %options181 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %158, i32 0, i32 0, !dbg !2938
  %159 = load i32, i32* %options181, align 8, !dbg !2938
  %and182 = and i32 %159, 4096, !dbg !2938
  %tobool183 = icmp ne i32 %and182, 0, !dbg !2938
  br i1 %tobool183, label %if.then184, label %if.else199, !dbg !2940

if.then184:                                       ; preds = %if.else180
  %160 = load i8**, i8*** %mangled.addr, align 8, !dbg !2941
  %161 = load i8*, i8** %160, align 8, !dbg !2943
  %incdec.ptr185 = getelementptr inbounds i8, i8* %161, i32 1, !dbg !2943
  store i8* %incdec.ptr185, i8** %160, align 8, !dbg !2943
  br label %while.cond186, !dbg !2944

while.cond186:                                    ; preds = %while.body196, %if.then184
  %162 = load i8**, i8*** %mangled.addr, align 8, !dbg !2945
  %163 = load i8*, i8** %162, align 8, !dbg !2946
  %164 = load i8, i8* %163, align 1, !dbg !2947
  %conv187 = sext i8 %164 to i32, !dbg !2947
  %tobool188 = icmp ne i32 %conv187, 0, !dbg !2947
  br i1 %tobool188, label %land.rhs189, label %land.end195, !dbg !2948

land.rhs189:                                      ; preds = %while.cond186
  %165 = load i8**, i8*** %mangled.addr, align 8, !dbg !2949
  %166 = load i8*, i8** %165, align 8, !dbg !2949
  %167 = load i8, i8* %166, align 1, !dbg !2949
  %conv190 = zext i8 %167 to i32, !dbg !2949
  %and191 = and i32 %conv190, 255, !dbg !2949
  %idxprom = sext i32 %and191 to i64, !dbg !2949
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !2949
  %168 = load i16, i16* %arrayidx, align 2, !dbg !2949
  %conv192 = zext i16 %168 to i32, !dbg !2949
  %and193 = and i32 %conv192, 4, !dbg !2949
  %tobool194 = icmp ne i32 %and193, 0, !dbg !2948
  br label %land.end195

land.end195:                                      ; preds = %land.rhs189, %while.cond186
  %169 = phi i1 [ false, %while.cond186 ], [ %tobool194, %land.rhs189 ], !dbg !2950
  br i1 %169, label %while.body196, label %while.end198, !dbg !2944

while.body196:                                    ; preds = %land.end195
  %170 = load i8**, i8*** %mangled.addr, align 8, !dbg !2951
  %171 = load i8*, i8** %170, align 8, !dbg !2952
  %incdec.ptr197 = getelementptr inbounds i8, i8* %171, i32 1, !dbg !2952
  store i8* %incdec.ptr197, i8** %170, align 8, !dbg !2952
  br label %while.cond186, !dbg !2944, !llvm.loop !2953

while.end198:                                     ; preds = %land.end195
  br label %if.end200, !dbg !2954

if.else199:                                       ; preds = %if.else180
  store i32 0, i32* %success, align 4, !dbg !2955
  br label %if.end200

if.end200:                                        ; preds = %if.else199, %while.end198
  br label %if.end201

if.end201:                                        ; preds = %if.end200
  br label %sw.epilog, !dbg !2956

sw.bb202:                                         ; preds = %while.body
  %172 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2957
  %options203 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %172, i32 0, i32 0, !dbg !2957
  %173 = load i32, i32* %options203, align 8, !dbg !2957
  %and204 = and i32 %173, 256, !dbg !2957
  %tobool205 = icmp ne i32 %and204, 0, !dbg !2957
  br i1 %tobool205, label %if.then210, label %lor.lhs.false206, !dbg !2959

lor.lhs.false206:                                 ; preds = %sw.bb202
  %174 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2960
  %options207 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %174, i32 0, i32 0, !dbg !2960
  %175 = load i32, i32* %options207, align 8, !dbg !2960
  %and208 = and i32 %175, 512, !dbg !2960
  %tobool209 = icmp ne i32 %and208, 0, !dbg !2960
  br i1 %tobool209, label %if.then210, label %if.else218, !dbg !2961

if.then210:                                       ; preds = %lor.lhs.false206, %sw.bb202
  %176 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2962
  %177 = load i8**, i8*** %mangled.addr, align 8, !dbg !2964
  %178 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2965
  %call211 = call i32 @demangle_template(%struct.work_stuff* %176, i8** %177, %struct.string* %178, %struct.string* null, i32 0, i32 0), !dbg !2966
  store i32 %call211, i32* %success, align 4, !dbg !2967
  %179 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2968
  %constructor212 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %179, i32 0, i32 10, !dbg !2970
  %180 = load i32, i32* %constructor212, align 8, !dbg !2970
  %and213 = and i32 %180, 1, !dbg !2971
  %tobool214 = icmp ne i32 %and213, 0, !dbg !2971
  br i1 %tobool214, label %if.end216, label %if.then215, !dbg !2972

if.then215:                                       ; preds = %if.then210
  store i32 1, i32* %expect_return_type, align 4, !dbg !2973
  br label %if.end216, !dbg !2974

if.end216:                                        ; preds = %if.then215, %if.then210
  %181 = load i8**, i8*** %mangled.addr, align 8, !dbg !2975
  %182 = load i8*, i8** %181, align 8, !dbg !2976
  %incdec.ptr217 = getelementptr inbounds i8, i8* %182, i32 1, !dbg !2976
  store i8* %incdec.ptr217, i8** %181, align 8, !dbg !2976
  br label %sw.epilog, !dbg !2977

if.else218:                                       ; preds = %lor.lhs.false206
  br label %if.end219

if.end219:                                        ; preds = %if.else218
  br label %sw.default, !dbg !2960

sw.default:                                       ; preds = %while.body, %if.end219
  %183 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2978
  %options220 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %183, i32 0, i32 0, !dbg !2978
  %184 = load i32, i32* %options220, align 8, !dbg !2978
  %and221 = and i32 %184, 256, !dbg !2978
  %tobool222 = icmp ne i32 %and221, 0, !dbg !2978
  br i1 %tobool222, label %if.then227, label %lor.lhs.false223, !dbg !2980

lor.lhs.false223:                                 ; preds = %sw.default
  %185 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2981
  %options224 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %185, i32 0, i32 0, !dbg !2981
  %186 = load i32, i32* %options224, align 8, !dbg !2981
  %and225 = and i32 %186, 512, !dbg !2981
  %tobool226 = icmp ne i32 %and225, 0, !dbg !2981
  br i1 %tobool226, label %if.then227, label %if.else229, !dbg !2982

if.then227:                                       ; preds = %lor.lhs.false223, %sw.default
  store i32 1, i32* %func_done, align 4, !dbg !2983
  %187 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !2985
  %188 = load i8**, i8*** %mangled.addr, align 8, !dbg !2986
  %189 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !2987
  %call228 = call i32 @demangle_args(%struct.work_stuff* %187, i8** %188, %struct.string* %189), !dbg !2988
  store i32 %call228, i32* %success, align 4, !dbg !2989
  br label %if.end230, !dbg !2990

if.else229:                                       ; preds = %lor.lhs.false223
  store i32 0, i32* %success, align 4, !dbg !2991
  br label %if.end230

if.end230:                                        ; preds = %if.else229, %if.then227
  br label %sw.epilog, !dbg !2993

sw.epilog:                                        ; preds = %if.end230, %if.end216, %if.end201, %if.end179, %if.end162, %if.end130, %if.end94, %if.end86, %if.end55, %if.end33, %if.end26, %if.end21, %if.end10
  %190 = load i32, i32* %success, align 4, !dbg !2994
  %tobool231 = icmp ne i32 %190, 0, !dbg !2994
  br i1 %tobool231, label %land.lhs.true232, label %if.end249, !dbg !2997

land.lhs.true232:                                 ; preds = %sw.epilog
  %191 = load i32, i32* %expect_func, align 4, !dbg !2998
  %tobool233 = icmp ne i32 %191, 0, !dbg !2998
  br i1 %tobool233, label %if.then234, label %if.end249, !dbg !2999

if.then234:                                       ; preds = %land.lhs.true232
  store i32 1, i32* %func_done, align 4, !dbg !3000
  %192 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3002
  %options235 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %192, i32 0, i32 0, !dbg !3002
  %193 = load i32, i32* %options235, align 8, !dbg !3002
  %and236 = and i32 %193, 1024, !dbg !3002
  %tobool237 = icmp ne i32 %and236, 0, !dbg !3002
  br i1 %tobool237, label %if.then246, label %lor.lhs.false238, !dbg !3004

lor.lhs.false238:                                 ; preds = %if.then234
  %194 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3005
  %options239 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %194, i32 0, i32 0, !dbg !3005
  %195 = load i32, i32* %options239, align 8, !dbg !3005
  %and240 = and i32 %195, 2048, !dbg !3005
  %tobool241 = icmp ne i32 %and240, 0, !dbg !3005
  br i1 %tobool241, label %if.then246, label %lor.lhs.false242, !dbg !3006

lor.lhs.false242:                                 ; preds = %lor.lhs.false238
  %196 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3007
  %options243 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %196, i32 0, i32 0, !dbg !3007
  %197 = load i32, i32* %options243, align 8, !dbg !3007
  %and244 = and i32 %197, 8192, !dbg !3007
  %tobool245 = icmp ne i32 %and244, 0, !dbg !3007
  br i1 %tobool245, label %if.then246, label %if.end247, !dbg !3008

if.then246:                                       ; preds = %lor.lhs.false242, %lor.lhs.false238, %if.then234
  %198 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3009
  call void @forget_types(%struct.work_stuff* %198), !dbg !3011
  br label %if.end247, !dbg !3012

if.end247:                                        ; preds = %if.then246, %lor.lhs.false242
  %199 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3013
  %200 = load i8**, i8*** %mangled.addr, align 8, !dbg !3014
  %201 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3015
  %call248 = call i32 @demangle_args(%struct.work_stuff* %199, i8** %200, %struct.string* %201), !dbg !3016
  store i32 %call248, i32* %success, align 4, !dbg !3017
  store i32 0, i32* %expect_func, align 4, !dbg !3018
  br label %if.end249, !dbg !3019

if.end249:                                        ; preds = %if.end247, %land.lhs.true232, %sw.epilog
  br label %while.cond, !dbg !2616, !llvm.loop !3020

while.end250:                                     ; preds = %land.end
  %202 = load i32, i32* %success, align 4, !dbg !3022
  %tobool251 = icmp ne i32 %202, 0, !dbg !3022
  br i1 %tobool251, label %land.lhs.true252, label %if.end265, !dbg !3024

land.lhs.true252:                                 ; preds = %while.end250
  %203 = load i32, i32* %func_done, align 4, !dbg !3025
  %tobool253 = icmp ne i32 %203, 0, !dbg !3025
  br i1 %tobool253, label %if.end265, label %if.then254, !dbg !3026

if.then254:                                       ; preds = %land.lhs.true252
  %204 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3027
  %options255 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %204, i32 0, i32 0, !dbg !3027
  %205 = load i32, i32* %options255, align 8, !dbg !3027
  %and256 = and i32 %205, 256, !dbg !3027
  %tobool257 = icmp ne i32 %and256, 0, !dbg !3027
  br i1 %tobool257, label %if.then262, label %lor.lhs.false258, !dbg !3030

lor.lhs.false258:                                 ; preds = %if.then254
  %206 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3031
  %options259 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %206, i32 0, i32 0, !dbg !3031
  %207 = load i32, i32* %options259, align 8, !dbg !3031
  %and260 = and i32 %207, 512, !dbg !3031
  %tobool261 = icmp ne i32 %and260, 0, !dbg !3031
  br i1 %tobool261, label %if.then262, label %if.end264, !dbg !3032

if.then262:                                       ; preds = %lor.lhs.false258, %if.then254
  %208 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3033
  %209 = load i8**, i8*** %mangled.addr, align 8, !dbg !3035
  %210 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3036
  %call263 = call i32 @demangle_args(%struct.work_stuff* %208, i8** %209, %struct.string* %210), !dbg !3037
  store i32 %call263, i32* %success, align 4, !dbg !3038
  br label %if.end264, !dbg !3039

if.end264:                                        ; preds = %if.then262, %lor.lhs.false258
  br label %if.end265, !dbg !3040

if.end265:                                        ; preds = %if.end264, %land.lhs.true252, %while.end250
  %211 = load i32, i32* %success, align 4, !dbg !3041
  %tobool266 = icmp ne i32 %211, 0, !dbg !3041
  br i1 %tobool266, label %land.lhs.true267, label %if.end289, !dbg !3043

land.lhs.true267:                                 ; preds = %if.end265
  %212 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3044
  %options268 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %212, i32 0, i32 0, !dbg !3044
  %213 = load i32, i32* %options268, align 8, !dbg !3044
  %and269 = and i32 %213, 1, !dbg !3044
  %tobool270 = icmp ne i32 %and269, 0, !dbg !3044
  br i1 %tobool270, label %if.then271, label %if.end289, !dbg !3045

if.then271:                                       ; preds = %land.lhs.true267
  %214 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3046
  %static_type272 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %214, i32 0, i32 12, !dbg !3049
  %215 = load i32, i32* %static_type272, align 8, !dbg !3049
  %tobool273 = icmp ne i32 %215, 0, !dbg !3046
  br i1 %tobool273, label %if.then274, label %if.end275, !dbg !3050

if.then274:                                       ; preds = %if.then271
  %216 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3051
  call void @string_append(%struct.string* %216, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i64 0, i64 0)), !dbg !3052
  br label %if.end275, !dbg !3052

if.end275:                                        ; preds = %if.then274, %if.then271
  %217 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3053
  %type_quals276 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %217, i32 0, i32 14, !dbg !3055
  %218 = load i32, i32* %type_quals276, align 8, !dbg !3055
  %cmp277 = icmp ne i32 %218, 0, !dbg !3056
  br i1 %cmp277, label %if.then279, label %if.end288, !dbg !3057

if.then279:                                       ; preds = %if.end275
  %219 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3058
  %b280 = getelementptr inbounds %struct.string, %struct.string* %219, i32 0, i32 0, !dbg !3058
  %220 = load i8*, i8** %b280, align 8, !dbg !3058
  %221 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3058
  %p281 = getelementptr inbounds %struct.string, %struct.string* %221, i32 0, i32 1, !dbg !3058
  %222 = load i8*, i8** %p281, align 8, !dbg !3058
  %cmp282 = icmp eq i8* %220, %222, !dbg !3058
  br i1 %cmp282, label %if.end285, label %if.then284, !dbg !3062

if.then284:                                       ; preds = %if.then279
  %223 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3058
  call void @string_append(%struct.string* %223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !3058
  br label %if.end285, !dbg !3058

if.end285:                                        ; preds = %if.then284, %if.then279
  %224 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3063
  %225 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3064
  %type_quals286 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %225, i32 0, i32 14, !dbg !3065
  %226 = load i32, i32* %type_quals286, align 8, !dbg !3065
  %call287 = call i8* @qualifier_string(i32 %226), !dbg !3066
  call void @string_append(%struct.string* %224, i8* %call287), !dbg !3067
  br label %if.end288, !dbg !3068

if.end288:                                        ; preds = %if.end285, %if.end275
  br label %if.end289, !dbg !3069

if.end289:                                        ; preds = %if.end288, %land.lhs.true267, %if.end265
  %227 = load i32, i32* %success, align 4, !dbg !3070
  ret i32 %227, !dbg !3071
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_prepend(%struct.string* %p, i8* %s) #0 !dbg !3072 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca i8*, align 8
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !3075, metadata !DIExpression()), !dbg !3076
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3077, metadata !DIExpression()), !dbg !3078
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3079
  %cmp = icmp ne i8* %0, null, !dbg !3081
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3082

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 8, !dbg !3083
  %2 = load i8, i8* %1, align 1, !dbg !3084
  %conv = sext i8 %2 to i32, !dbg !3084
  %cmp1 = icmp ne i32 %conv, 0, !dbg !3085
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3086

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3087
  %4 = load i8*, i8** %s.addr, align 8, !dbg !3089
  %5 = load i8*, i8** %s.addr, align 8, !dbg !3090
  %call = call i64 @strlen(i8* %5), !dbg !3091
  %conv3 = trunc i64 %call to i32, !dbg !3091
  call void @string_prependn(%struct.string* %3, i8* %4, i32 %conv3), !dbg !3092
  br label %if.end, !dbg !3093

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !3094
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @mop_up(%struct.work_stuff* %work, %struct.string* %declp, i32 %success) #0 !dbg !3095 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %declp.addr = alloca %struct.string*, align 8
  %success.addr = alloca i32, align 4
  %demangled = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !3098, metadata !DIExpression()), !dbg !3099
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !3100, metadata !DIExpression()), !dbg !3101
  store i32 %success, i32* %success.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %success.addr, metadata !3102, metadata !DIExpression()), !dbg !3103
  call void @llvm.dbg.declare(metadata i8** %demangled, metadata !3104, metadata !DIExpression()), !dbg !3105
  store i8* null, i8** %demangled, align 8, !dbg !3105
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3106
  call void @delete_non_B_K_work_stuff(%struct.work_stuff* %0), !dbg !3107
  %1 = load i32, i32* %success.addr, align 4, !dbg !3108
  %tobool = icmp ne i32 %1, 0, !dbg !3108
  br i1 %tobool, label %if.else, label %if.then, !dbg !3110

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3111
  call void @string_delete(%struct.string* %2), !dbg !3113
  br label %if.end, !dbg !3114

if.else:                                          ; preds = %entry
  %3 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3115
  call void @string_appendn(%struct.string* %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i32 1), !dbg !3117
  %4 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !3118
  %b = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0, !dbg !3119
  %5 = load i8*, i8** %b, align 8, !dbg !3119
  store i8* %5, i8** %demangled, align 8, !dbg !3120
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i8*, i8** %demangled, align 8, !dbg !3121
  ret i8* %6, !dbg !3122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_qualified(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result, i32 %isfuncname, i32 %append) #0 !dbg !3123 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %isfuncname.addr = alloca i32, align 4
  %append.addr = alloca i32, align 4
  %qualifiers = alloca i32, align 4
  %success = alloca i32, align 4
  %num = alloca [2 x i8], align 1
  %temp = alloca %struct.string, align 8
  %last_name = alloca %struct.string, align 8
  %bindex = alloca i32, align 4
  %idx = alloca i32, align 4
  %remember_K = alloca i32, align 4
  %idx62 = alloca i32, align 4
  %namelength = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !3126, metadata !DIExpression()), !dbg !3127
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !3128, metadata !DIExpression()), !dbg !3129
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !3130, metadata !DIExpression()), !dbg !3131
  store i32 %isfuncname, i32* %isfuncname.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %isfuncname.addr, metadata !3132, metadata !DIExpression()), !dbg !3133
  store i32 %append, i32* %append.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %append.addr, metadata !3134, metadata !DIExpression()), !dbg !3135
  call void @llvm.dbg.declare(metadata i32* %qualifiers, metadata !3136, metadata !DIExpression()), !dbg !3137
  store i32 0, i32* %qualifiers, align 4, !dbg !3137
  call void @llvm.dbg.declare(metadata i32* %success, metadata !3138, metadata !DIExpression()), !dbg !3139
  store i32 1, i32* %success, align 4, !dbg !3139
  call void @llvm.dbg.declare(metadata [2 x i8]* %num, metadata !3140, metadata !DIExpression()), !dbg !3141
  call void @llvm.dbg.declare(metadata %struct.string* %temp, metadata !3142, metadata !DIExpression()), !dbg !3143
  call void @llvm.dbg.declare(metadata %struct.string* %last_name, metadata !3144, metadata !DIExpression()), !dbg !3145
  call void @llvm.dbg.declare(metadata i32* %bindex, metadata !3146, metadata !DIExpression()), !dbg !3147
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3148
  %call = call i32 @register_Btype(%struct.work_stuff* %0), !dbg !3149
  store i32 %call, i32* %bindex, align 4, !dbg !3147
  %1 = load i32, i32* %isfuncname.addr, align 4, !dbg !3150
  %tobool = icmp ne i32 %1, 0, !dbg !3150
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3151

land.rhs:                                         ; preds = %entry
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3152
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 10, !dbg !3153
  %3 = load i32, i32* %constructor, align 8, !dbg !3153
  %and = and i32 %3, 1, !dbg !3154
  %tobool1 = icmp ne i32 %and, 0, !dbg !3154
  br i1 %tobool1, label %lor.end, label %lor.rhs, !dbg !3155

lor.rhs:                                          ; preds = %land.rhs
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3156
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 11, !dbg !3157
  %5 = load i32, i32* %destructor, align 4, !dbg !3157
  %and2 = and i32 %5, 1, !dbg !3158
  %tobool3 = icmp ne i32 %and2, 0, !dbg !3155
  br label %lor.end, !dbg !3155

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %6 = phi i1 [ true, %land.rhs ], [ %tobool3, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %7 = phi i1 [ false, %entry ], [ %6, %lor.end ], !dbg !3159
  %land.ext = zext i1 %7 to i32, !dbg !3151
  store i32 %land.ext, i32* %isfuncname.addr, align 4, !dbg !3160
  call void @string_init(%struct.string* %temp), !dbg !3161
  call void @string_init(%struct.string* %last_name), !dbg !3162
  %8 = load i8**, i8*** %mangled.addr, align 8, !dbg !3163
  %9 = load i8*, i8** %8, align 8, !dbg !3165
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 0, !dbg !3166
  %10 = load i8, i8* %arrayidx, align 1, !dbg !3166
  %conv = sext i8 %10 to i32, !dbg !3166
  %cmp = icmp eq i32 %conv, 75, !dbg !3167
  br i1 %cmp, label %if.then, label %if.else12, !dbg !3168

if.then:                                          ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !3169, metadata !DIExpression()), !dbg !3171
  %11 = load i8**, i8*** %mangled.addr, align 8, !dbg !3172
  %12 = load i8*, i8** %11, align 8, !dbg !3173
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1, !dbg !3173
  store i8* %incdec.ptr, i8** %11, align 8, !dbg !3173
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !3174
  %call5 = call i32 @consume_count_with_underscores(i8** %13), !dbg !3175
  store i32 %call5, i32* %idx, align 4, !dbg !3176
  %14 = load i32, i32* %idx, align 4, !dbg !3177
  %cmp6 = icmp eq i32 %14, -1, !dbg !3179
  br i1 %cmp6, label %if.then10, label %lor.lhs.false, !dbg !3180

lor.lhs.false:                                    ; preds = %if.then
  %15 = load i32, i32* %idx, align 4, !dbg !3181
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3182
  %numk = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 4, !dbg !3183
  %17 = load i32, i32* %numk, align 8, !dbg !3183
  %cmp8 = icmp sge i32 %15, %17, !dbg !3184
  br i1 %cmp8, label %if.then10, label %if.else, !dbg !3185

if.then10:                                        ; preds = %lor.lhs.false, %if.then
  store i32 0, i32* %success, align 4, !dbg !3186
  br label %if.end, !dbg !3187

if.else:                                          ; preds = %lor.lhs.false
  %18 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3188
  %ktypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %18, i32 0, i32 2, !dbg !3189
  %19 = load i8**, i8*** %ktypevec, align 8, !dbg !3189
  %20 = load i32, i32* %idx, align 4, !dbg !3190
  %idxprom = sext i32 %20 to i64, !dbg !3188
  %arrayidx11 = getelementptr inbounds i8*, i8** %19, i64 %idxprom, !dbg !3188
  %21 = load i8*, i8** %arrayidx11, align 8, !dbg !3188
  call void @string_append(%struct.string* %temp, i8* %21), !dbg !3191
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then10
  br label %if.end34, !dbg !3192

if.else12:                                        ; preds = %land.end
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !3193
  %23 = load i8*, i8** %22, align 8, !dbg !3194
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i64 1, !dbg !3195
  %24 = load i8, i8* %arrayidx13, align 1, !dbg !3195
  %conv14 = sext i8 %24 to i32, !dbg !3195
  switch i32 %conv14, label %sw.default [
    i32 95, label %sw.bb
    i32 49, label %sw.bb21
    i32 50, label %sw.bb21
    i32 51, label %sw.bb21
    i32 52, label %sw.bb21
    i32 53, label %sw.bb21
    i32 54, label %sw.bb21
    i32 55, label %sw.bb21
    i32 56, label %sw.bb21
    i32 57, label %sw.bb21
    i32 48, label %sw.bb33
  ], !dbg !3196

sw.bb:                                            ; preds = %if.else12
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !3197
  %26 = load i8*, i8** %25, align 8, !dbg !3199
  %incdec.ptr15 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !3199
  store i8* %incdec.ptr15, i8** %25, align 8, !dbg !3199
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !3200
  %call16 = call i32 @consume_count_with_underscores(i8** %27), !dbg !3201
  store i32 %call16, i32* %qualifiers, align 4, !dbg !3202
  %28 = load i32, i32* %qualifiers, align 4, !dbg !3203
  %cmp17 = icmp eq i32 %28, -1, !dbg !3205
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !3206

if.then19:                                        ; preds = %sw.bb
  store i32 0, i32* %success, align 4, !dbg !3207
  br label %if.end20, !dbg !3208

if.end20:                                         ; preds = %if.then19, %sw.bb
  br label %sw.epilog, !dbg !3209

sw.bb21:                                          ; preds = %if.else12, %if.else12, %if.else12, %if.else12, %if.else12, %if.else12, %if.else12, %if.else12, %if.else12
  %29 = load i8**, i8*** %mangled.addr, align 8, !dbg !3210
  %30 = load i8*, i8** %29, align 8, !dbg !3211
  %arrayidx22 = getelementptr inbounds i8, i8* %30, i64 1, !dbg !3212
  %31 = load i8, i8* %arrayidx22, align 1, !dbg !3212
  %arrayidx23 = getelementptr inbounds [2 x i8], [2 x i8]* %num, i64 0, i64 0, !dbg !3213
  store i8 %31, i8* %arrayidx23, align 1, !dbg !3214
  %arrayidx24 = getelementptr inbounds [2 x i8], [2 x i8]* %num, i64 0, i64 1, !dbg !3215
  store i8 0, i8* %arrayidx24, align 1, !dbg !3216
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %num, i64 0, i64 0, !dbg !3217
  %call25 = call i32 @atoi(i8* %arraydecay), !dbg !3218
  store i32 %call25, i32* %qualifiers, align 4, !dbg !3219
  %32 = load i8**, i8*** %mangled.addr, align 8, !dbg !3220
  %33 = load i8*, i8** %32, align 8, !dbg !3222
  %arrayidx26 = getelementptr inbounds i8, i8* %33, i64 2, !dbg !3223
  %34 = load i8, i8* %arrayidx26, align 1, !dbg !3223
  %conv27 = sext i8 %34 to i32, !dbg !3223
  %cmp28 = icmp eq i32 %conv27, 95, !dbg !3224
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !3225

if.then30:                                        ; preds = %sw.bb21
  %35 = load i8**, i8*** %mangled.addr, align 8, !dbg !3226
  %36 = load i8*, i8** %35, align 8, !dbg !3228
  %incdec.ptr31 = getelementptr inbounds i8, i8* %36, i32 1, !dbg !3228
  store i8* %incdec.ptr31, i8** %35, align 8, !dbg !3228
  br label %if.end32, !dbg !3229

if.end32:                                         ; preds = %if.then30, %sw.bb21
  %37 = load i8**, i8*** %mangled.addr, align 8, !dbg !3230
  %38 = load i8*, i8** %37, align 8, !dbg !3231
  %add.ptr = getelementptr inbounds i8, i8* %38, i64 2, !dbg !3231
  store i8* %add.ptr, i8** %37, align 8, !dbg !3231
  br label %sw.epilog, !dbg !3232

sw.bb33:                                          ; preds = %if.else12
  br label %sw.default, !dbg !3232

sw.default:                                       ; preds = %if.else12, %sw.bb33
  store i32 0, i32* %success, align 4, !dbg !3233
  br label %sw.epilog, !dbg !3234

sw.epilog:                                        ; preds = %sw.default, %if.end32, %if.end20
  br label %if.end34

if.end34:                                         ; preds = %sw.epilog, %if.end
  %39 = load i32, i32* %success, align 4, !dbg !3235
  %tobool35 = icmp ne i32 %39, 0, !dbg !3235
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !3237

if.then36:                                        ; preds = %if.end34
  %40 = load i32, i32* %success, align 4, !dbg !3238
  store i32 %40, i32* %retval, align 4, !dbg !3239
  br label %return, !dbg !3239

if.end37:                                         ; preds = %if.end34
  br label %while.cond, !dbg !3240

while.cond:                                       ; preds = %if.end113, %if.end37
  %41 = load i32, i32* %qualifiers, align 4, !dbg !3241
  %dec = add nsw i32 %41, -1, !dbg !3241
  store i32 %dec, i32* %qualifiers, align 4, !dbg !3241
  %cmp38 = icmp sgt i32 %41, 0, !dbg !3242
  br i1 %cmp38, label %while.body, label %while.end, !dbg !3240

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %remember_K, metadata !3243, metadata !DIExpression()), !dbg !3245
  store i32 1, i32* %remember_K, align 4, !dbg !3245
  call void @string_clear(%struct.string* %last_name), !dbg !3246
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !3247
  %arrayidx40 = getelementptr inbounds i8*, i8** %42, i64 0, !dbg !3247
  %43 = load i8*, i8** %arrayidx40, align 8, !dbg !3247
  %44 = load i8, i8* %43, align 1, !dbg !3249
  %conv41 = sext i8 %44 to i32, !dbg !3249
  %cmp42 = icmp eq i32 %conv41, 95, !dbg !3250
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !3251

if.then44:                                        ; preds = %while.body
  %45 = load i8**, i8*** %mangled.addr, align 8, !dbg !3252
  %46 = load i8*, i8** %45, align 8, !dbg !3253
  %incdec.ptr45 = getelementptr inbounds i8, i8* %46, i32 1, !dbg !3253
  store i8* %incdec.ptr45, i8** %45, align 8, !dbg !3253
  br label %if.end46, !dbg !3254

if.end46:                                         ; preds = %if.then44, %while.body
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !3255
  %arrayidx47 = getelementptr inbounds i8*, i8** %47, i64 0, !dbg !3255
  %48 = load i8*, i8** %arrayidx47, align 8, !dbg !3255
  %49 = load i8, i8* %48, align 1, !dbg !3257
  %conv48 = sext i8 %49 to i32, !dbg !3257
  %cmp49 = icmp eq i32 %conv48, 116, !dbg !3258
  br i1 %cmp49, label %if.then51, label %if.else56, !dbg !3259

if.then51:                                        ; preds = %if.end46
  %50 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3260
  %51 = load i8**, i8*** %mangled.addr, align 8, !dbg !3262
  %call52 = call i32 @demangle_template(%struct.work_stuff* %50, i8** %51, %struct.string* %temp, %struct.string* %last_name, i32 1, i32 0), !dbg !3263
  store i32 %call52, i32* %success, align 4, !dbg !3264
  %52 = load i32, i32* %success, align 4, !dbg !3265
  %tobool53 = icmp ne i32 %52, 0, !dbg !3265
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !3267

if.then54:                                        ; preds = %if.then51
  br label %while.end, !dbg !3268

if.end55:                                         ; preds = %if.then51
  br label %if.end96, !dbg !3269

if.else56:                                        ; preds = %if.end46
  %53 = load i8**, i8*** %mangled.addr, align 8, !dbg !3270
  %arrayidx57 = getelementptr inbounds i8*, i8** %53, i64 0, !dbg !3270
  %54 = load i8*, i8** %arrayidx57, align 8, !dbg !3270
  %55 = load i8, i8* %54, align 1, !dbg !3272
  %conv58 = sext i8 %55 to i32, !dbg !3272
  %cmp59 = icmp eq i32 %conv58, 75, !dbg !3273
  br i1 %cmp59, label %if.then61, label %if.else80, !dbg !3274

if.then61:                                        ; preds = %if.else56
  call void @llvm.dbg.declare(metadata i32* %idx62, metadata !3275, metadata !DIExpression()), !dbg !3277
  %56 = load i8**, i8*** %mangled.addr, align 8, !dbg !3278
  %57 = load i8*, i8** %56, align 8, !dbg !3279
  %incdec.ptr63 = getelementptr inbounds i8, i8* %57, i32 1, !dbg !3279
  store i8* %incdec.ptr63, i8** %56, align 8, !dbg !3279
  %58 = load i8**, i8*** %mangled.addr, align 8, !dbg !3280
  %call64 = call i32 @consume_count_with_underscores(i8** %58), !dbg !3281
  store i32 %call64, i32* %idx62, align 4, !dbg !3282
  %59 = load i32, i32* %idx62, align 4, !dbg !3283
  %cmp65 = icmp eq i32 %59, -1, !dbg !3285
  br i1 %cmp65, label %if.then71, label %lor.lhs.false67, !dbg !3286

lor.lhs.false67:                                  ; preds = %if.then61
  %60 = load i32, i32* %idx62, align 4, !dbg !3287
  %61 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3288
  %numk68 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %61, i32 0, i32 4, !dbg !3289
  %62 = load i32, i32* %numk68, align 8, !dbg !3289
  %cmp69 = icmp sge i32 %60, %62, !dbg !3290
  br i1 %cmp69, label %if.then71, label %if.else72, !dbg !3291

if.then71:                                        ; preds = %lor.lhs.false67, %if.then61
  store i32 0, i32* %success, align 4, !dbg !3292
  br label %if.end76, !dbg !3293

if.else72:                                        ; preds = %lor.lhs.false67
  %63 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3294
  %ktypevec73 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %63, i32 0, i32 2, !dbg !3295
  %64 = load i8**, i8*** %ktypevec73, align 8, !dbg !3295
  %65 = load i32, i32* %idx62, align 4, !dbg !3296
  %idxprom74 = sext i32 %65 to i64, !dbg !3294
  %arrayidx75 = getelementptr inbounds i8*, i8** %64, i64 %idxprom74, !dbg !3294
  %66 = load i8*, i8** %arrayidx75, align 8, !dbg !3294
  call void @string_append(%struct.string* %temp, i8* %66), !dbg !3297
  br label %if.end76

if.end76:                                         ; preds = %if.else72, %if.then71
  store i32 0, i32* %remember_K, align 4, !dbg !3298
  %67 = load i32, i32* %success, align 4, !dbg !3299
  %tobool77 = icmp ne i32 %67, 0, !dbg !3299
  br i1 %tobool77, label %if.end79, label %if.then78, !dbg !3301

if.then78:                                        ; preds = %if.end76
  br label %while.end, !dbg !3302

if.end79:                                         ; preds = %if.end76
  br label %if.end95, !dbg !3303

if.else80:                                        ; preds = %if.else56
  %68 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3304
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %68, i32 0, i32 0, !dbg !3304
  %69 = load i32, i32* %options, align 8, !dbg !3304
  %and81 = and i32 %69, 8192, !dbg !3304
  %tobool82 = icmp ne i32 %and81, 0, !dbg !3304
  br i1 %tobool82, label %if.then83, label %if.else89, !dbg !3307

if.then83:                                        ; preds = %if.else80
  call void @llvm.dbg.declare(metadata i32* %namelength, metadata !3308, metadata !DIExpression()), !dbg !3310
  %70 = load i8**, i8*** %mangled.addr, align 8, !dbg !3311
  %call84 = call i32 @consume_count(i8** %70), !dbg !3312
  store i32 %call84, i32* %namelength, align 4, !dbg !3313
  %71 = load i32, i32* %namelength, align 4, !dbg !3314
  %cmp85 = icmp eq i32 %71, -1, !dbg !3316
  br i1 %cmp85, label %if.then87, label %if.end88, !dbg !3317

if.then87:                                        ; preds = %if.then83
  store i32 0, i32* %success, align 4, !dbg !3318
  br label %while.end, !dbg !3320

if.end88:                                         ; preds = %if.then83
  %72 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3321
  %73 = load i8**, i8*** %mangled.addr, align 8, !dbg !3322
  %74 = load i32, i32* %namelength, align 4, !dbg !3323
  call void @recursively_demangle(%struct.work_stuff* %72, i8** %73, %struct.string* %temp, i32 %74), !dbg !3324
  br label %if.end94, !dbg !3325

if.else89:                                        ; preds = %if.else80
  call void @string_delete(%struct.string* %last_name), !dbg !3326
  %75 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3328
  %76 = load i8**, i8*** %mangled.addr, align 8, !dbg !3329
  %call90 = call i32 @do_type(%struct.work_stuff* %75, i8** %76, %struct.string* %last_name), !dbg !3330
  store i32 %call90, i32* %success, align 4, !dbg !3331
  %77 = load i32, i32* %success, align 4, !dbg !3332
  %tobool91 = icmp ne i32 %77, 0, !dbg !3332
  br i1 %tobool91, label %if.end93, label %if.then92, !dbg !3334

if.then92:                                        ; preds = %if.else89
  br label %while.end, !dbg !3335

if.end93:                                         ; preds = %if.else89
  call void @string_appends(%struct.string* %temp, %struct.string* %last_name), !dbg !3336
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.end88
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end79
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end55
  %78 = load i32, i32* %remember_K, align 4, !dbg !3337
  %tobool97 = icmp ne i32 %78, 0, !dbg !3337
  br i1 %tobool97, label %if.then98, label %if.end105, !dbg !3339

if.then98:                                        ; preds = %if.end96
  %79 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3340
  %b = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3341
  %80 = load i8*, i8** %b, align 8, !dbg !3341
  %b99 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3342
  %81 = load i8*, i8** %b99, align 8, !dbg !3342
  %p = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 1, !dbg !3342
  %82 = load i8*, i8** %p, align 8, !dbg !3342
  %cmp100 = icmp eq i8* %81, %82, !dbg !3342
  br i1 %cmp100, label %cond.true, label %cond.false, !dbg !3342

cond.true:                                        ; preds = %if.then98
  br label %cond.end, !dbg !3342

cond.false:                                       ; preds = %if.then98
  %p102 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 1, !dbg !3342
  %83 = load i8*, i8** %p102, align 8, !dbg !3342
  %b103 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3342
  %84 = load i8*, i8** %b103, align 8, !dbg !3342
  %sub.ptr.lhs.cast = ptrtoint i8* %83 to i64, !dbg !3342
  %sub.ptr.rhs.cast = ptrtoint i8* %84 to i64, !dbg !3342
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3342
  br label %cond.end, !dbg !3342

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub.ptr.sub, %cond.false ], !dbg !3342
  %conv104 = trunc i64 %cond to i32, !dbg !3342
  call void @remember_Ktype(%struct.work_stuff* %79, i8* %80, i32 %conv104), !dbg !3343
  br label %if.end105, !dbg !3343

if.end105:                                        ; preds = %cond.end, %if.end96
  %85 = load i32, i32* %qualifiers, align 4, !dbg !3344
  %cmp106 = icmp sgt i32 %85, 0, !dbg !3346
  br i1 %cmp106, label %if.then108, label %if.end113, !dbg !3347

if.then108:                                       ; preds = %if.end105
  %86 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3348
  %options109 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %86, i32 0, i32 0, !dbg !3348
  %87 = load i32, i32* %options109, align 8, !dbg !3348
  %and110 = and i32 %87, 4, !dbg !3348
  %tobool111 = icmp ne i32 %and110, 0, !dbg !3348
  %88 = zext i1 %tobool111 to i64, !dbg !3348
  %cond112 = select i1 %tobool111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !3348
  call void @string_append(%struct.string* %temp, i8* %cond112), !dbg !3349
  br label %if.end113, !dbg !3349

if.end113:                                        ; preds = %if.then108, %if.end105
  br label %while.cond, !dbg !3240, !llvm.loop !3350

while.end:                                        ; preds = %if.then92, %if.then87, %if.then78, %if.then54, %while.cond
  %89 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3352
  %b114 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3353
  %90 = load i8*, i8** %b114, align 8, !dbg !3353
  %b115 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3354
  %91 = load i8*, i8** %b115, align 8, !dbg !3354
  %p116 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 1, !dbg !3354
  %92 = load i8*, i8** %p116, align 8, !dbg !3354
  %cmp117 = icmp eq i8* %91, %92, !dbg !3354
  br i1 %cmp117, label %cond.true119, label %cond.false120, !dbg !3354

cond.true119:                                     ; preds = %while.end
  br label %cond.end126, !dbg !3354

cond.false120:                                    ; preds = %while.end
  %p121 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 1, !dbg !3354
  %93 = load i8*, i8** %p121, align 8, !dbg !3354
  %b122 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3354
  %94 = load i8*, i8** %b122, align 8, !dbg !3354
  %sub.ptr.lhs.cast123 = ptrtoint i8* %93 to i64, !dbg !3354
  %sub.ptr.rhs.cast124 = ptrtoint i8* %94 to i64, !dbg !3354
  %sub.ptr.sub125 = sub i64 %sub.ptr.lhs.cast123, %sub.ptr.rhs.cast124, !dbg !3354
  br label %cond.end126, !dbg !3354

cond.end126:                                      ; preds = %cond.false120, %cond.true119
  %cond127 = phi i64 [ 0, %cond.true119 ], [ %sub.ptr.sub125, %cond.false120 ], !dbg !3354
  %conv128 = trunc i64 %cond127 to i32, !dbg !3354
  %95 = load i32, i32* %bindex, align 4, !dbg !3355
  call void @remember_Btype(%struct.work_stuff* %89, i8* %90, i32 %conv128, i32 %95), !dbg !3356
  %96 = load i32, i32* %isfuncname.addr, align 4, !dbg !3357
  %tobool129 = icmp ne i32 %96, 0, !dbg !3357
  br i1 %tobool129, label %if.then130, label %if.end140, !dbg !3359

if.then130:                                       ; preds = %cond.end126
  %97 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3360
  %options131 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %97, i32 0, i32 0, !dbg !3360
  %98 = load i32, i32* %options131, align 8, !dbg !3360
  %and132 = and i32 %98, 4, !dbg !3360
  %tobool133 = icmp ne i32 %and132, 0, !dbg !3360
  %99 = zext i1 %tobool133 to i64, !dbg !3360
  %cond134 = select i1 %tobool133, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !3360
  call void @string_append(%struct.string* %temp, i8* %cond134), !dbg !3362
  %100 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3363
  %destructor135 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %100, i32 0, i32 11, !dbg !3365
  %101 = load i32, i32* %destructor135, align 4, !dbg !3365
  %and136 = and i32 %101, 1, !dbg !3366
  %tobool137 = icmp ne i32 %and136, 0, !dbg !3366
  br i1 %tobool137, label %if.then138, label %if.end139, !dbg !3367

if.then138:                                       ; preds = %if.then130
  call void @string_append(%struct.string* %temp, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i64 0, i64 0)), !dbg !3368
  br label %if.end139, !dbg !3368

if.end139:                                        ; preds = %if.then138, %if.then130
  call void @string_appends(%struct.string* %temp, %struct.string* %last_name), !dbg !3369
  br label %if.end140, !dbg !3370

if.end140:                                        ; preds = %if.end139, %cond.end126
  %102 = load i32, i32* %append.addr, align 4, !dbg !3371
  %tobool141 = icmp ne i32 %102, 0, !dbg !3371
  br i1 %tobool141, label %if.then142, label %if.else143, !dbg !3373

if.then142:                                       ; preds = %if.end140
  %103 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !3374
  call void @string_appends(%struct.string* %103, %struct.string* %temp), !dbg !3375
  br label %if.end154, !dbg !3375

if.else143:                                       ; preds = %if.end140
  %104 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !3376
  %b144 = getelementptr inbounds %struct.string, %struct.string* %104, i32 0, i32 0, !dbg !3376
  %105 = load i8*, i8** %b144, align 8, !dbg !3376
  %106 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !3376
  %p145 = getelementptr inbounds %struct.string, %struct.string* %106, i32 0, i32 1, !dbg !3376
  %107 = load i8*, i8** %p145, align 8, !dbg !3376
  %cmp146 = icmp eq i8* %105, %107, !dbg !3376
  br i1 %cmp146, label %if.end153, label %if.then148, !dbg !3379

if.then148:                                       ; preds = %if.else143
  %108 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3380
  %options149 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %108, i32 0, i32 0, !dbg !3380
  %109 = load i32, i32* %options149, align 8, !dbg !3380
  %and150 = and i32 %109, 4, !dbg !3380
  %tobool151 = icmp ne i32 %and150, 0, !dbg !3380
  %110 = zext i1 %tobool151 to i64, !dbg !3380
  %cond152 = select i1 %tobool151, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !3380
  call void @string_append(%struct.string* %temp, i8* %cond152), !dbg !3381
  br label %if.end153, !dbg !3381

if.end153:                                        ; preds = %if.then148, %if.else143
  %111 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !3382
  call void @string_prepends(%struct.string* %111, %struct.string* %temp), !dbg !3383
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.then142
  call void @string_delete(%struct.string* %last_name), !dbg !3384
  call void @string_delete(%struct.string* %temp), !dbg !3385
  %112 = load i32, i32* %success, align 4, !dbg !3386
  store i32 %112, i32* %retval, align 4, !dbg !3387
  br label %return, !dbg !3387

return:                                           ; preds = %if.end154, %if.then36
  %113 = load i32, i32* %retval, align 4, !dbg !3388
  ret i32 %113, !dbg !3388
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_template(%struct.work_stuff* %work, i8** %mangled, %struct.string* %tname, %struct.string* %trawname, i32 %is_type, i32 %remember) #0 !dbg !3389 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %tname.addr = alloca %struct.string*, align 8
  %trawname.addr = alloca %struct.string*, align 8
  %is_type.addr = alloca i32, align 4
  %remember.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %need_comma = alloca i32, align 4
  %success = alloca i32, align 4
  %is_java_array = alloca i32, align 4
  %temp = alloca %struct.string, align 8
  %idx = alloca i32, align 4
  %len = alloca i32, align 4
  %r2 = alloca i32, align 4
  %len130 = alloca i32, align 4
  %param = alloca %struct.string, align 8
  %s = alloca %struct.string*, align 8
  %len172 = alloca i32, align 4
  %bindex = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !3392, metadata !DIExpression()), !dbg !3393
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !3394, metadata !DIExpression()), !dbg !3395
  store %struct.string* %tname, %struct.string** %tname.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %tname.addr, metadata !3396, metadata !DIExpression()), !dbg !3397
  store %struct.string* %trawname, %struct.string** %trawname.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %trawname.addr, metadata !3398, metadata !DIExpression()), !dbg !3399
  store i32 %is_type, i32* %is_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_type.addr, metadata !3400, metadata !DIExpression()), !dbg !3401
  store i32 %remember, i32* %remember.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %remember.addr, metadata !3402, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3404, metadata !DIExpression()), !dbg !3405
  call void @llvm.dbg.declare(metadata i32* %r, metadata !3406, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.declare(metadata i32* %need_comma, metadata !3408, metadata !DIExpression()), !dbg !3409
  store i32 0, i32* %need_comma, align 4, !dbg !3409
  call void @llvm.dbg.declare(metadata i32* %success, metadata !3410, metadata !DIExpression()), !dbg !3411
  store i32 0, i32* %success, align 4, !dbg !3411
  call void @llvm.dbg.declare(metadata i32* %is_java_array, metadata !3412, metadata !DIExpression()), !dbg !3413
  store i32 0, i32* %is_java_array, align 4, !dbg !3413
  call void @llvm.dbg.declare(metadata %struct.string* %temp, metadata !3414, metadata !DIExpression()), !dbg !3415
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !3416
  %1 = load i8*, i8** %0, align 8, !dbg !3417
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1, !dbg !3417
  store i8* %incdec.ptr, i8** %0, align 8, !dbg !3417
  %2 = load i32, i32* %is_type.addr, align 4, !dbg !3418
  %tobool = icmp ne i32 %2, 0, !dbg !3418
  br i1 %tobool, label %if.then, label %if.end51, !dbg !3420

if.then:                                          ; preds = %entry
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !3421
  %4 = load i8*, i8** %3, align 8, !dbg !3424
  %5 = load i8, i8* %4, align 1, !dbg !3425
  %conv = sext i8 %5 to i32, !dbg !3425
  %cmp = icmp eq i32 %conv, 122, !dbg !3426
  br i1 %cmp, label %if.then2, label %if.else29, !dbg !3427

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !3428, metadata !DIExpression()), !dbg !3430
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !3431
  %7 = load i8*, i8** %6, align 8, !dbg !3432
  %incdec.ptr3 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !3432
  store i8* %incdec.ptr3, i8** %6, align 8, !dbg !3432
  %8 = load i8**, i8*** %mangled.addr, align 8, !dbg !3433
  %9 = load i8*, i8** %8, align 8, !dbg !3434
  %incdec.ptr4 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !3434
  store i8* %incdec.ptr4, i8** %8, align 8, !dbg !3434
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !3435
  %call = call i32 @consume_count_with_underscores(i8** %10), !dbg !3436
  store i32 %call, i32* %idx, align 4, !dbg !3437
  %11 = load i32, i32* %idx, align 4, !dbg !3438
  %cmp5 = icmp eq i32 %11, -1, !dbg !3440
  br i1 %cmp5, label %if.then14, label %lor.lhs.false, !dbg !3441

lor.lhs.false:                                    ; preds = %if.then2
  %12 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3442
  %tmpl_argvec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %12, i32 0, i32 16, !dbg !3443
  %13 = load i8**, i8*** %tmpl_argvec, align 8, !dbg !3443
  %tobool7 = icmp ne i8** %13, null, !dbg !3442
  br i1 %tobool7, label %land.lhs.true, label %lor.lhs.false10, !dbg !3444

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load i32, i32* %idx, align 4, !dbg !3445
  %15 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3446
  %ntmpl_args = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %15, i32 0, i32 17, !dbg !3447
  %16 = load i32, i32* %ntmpl_args, align 8, !dbg !3447
  %cmp8 = icmp sge i32 %14, %16, !dbg !3448
  br i1 %cmp8, label %if.then14, label %lor.lhs.false10, !dbg !3449

lor.lhs.false10:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !3450
  %call11 = call i32 @consume_count_with_underscores(i8** %17), !dbg !3451
  %cmp12 = icmp eq i32 %call11, -1, !dbg !3452
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !3453

if.then14:                                        ; preds = %lor.lhs.false10, %land.lhs.true, %if.then2
  store i32 0, i32* %retval, align 4, !dbg !3454
  br label %return, !dbg !3454

if.end:                                           ; preds = %lor.lhs.false10
  %18 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3455
  %tmpl_argvec15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %18, i32 0, i32 16, !dbg !3457
  %19 = load i8**, i8*** %tmpl_argvec15, align 8, !dbg !3457
  %tobool16 = icmp ne i8** %19, null, !dbg !3455
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !3458

if.then17:                                        ; preds = %if.end
  %20 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3459
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3461
  %tmpl_argvec18 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 16, !dbg !3462
  %22 = load i8**, i8*** %tmpl_argvec18, align 8, !dbg !3462
  %23 = load i32, i32* %idx, align 4, !dbg !3463
  %idxprom = sext i32 %23 to i64, !dbg !3461
  %arrayidx = getelementptr inbounds i8*, i8** %22, i64 %idxprom, !dbg !3461
  %24 = load i8*, i8** %arrayidx, align 8, !dbg !3461
  call void @string_append(%struct.string* %20, i8* %24), !dbg !3464
  %25 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3465
  %tobool19 = icmp ne %struct.string* %25, null, !dbg !3465
  br i1 %tobool19, label %if.then20, label %if.end24, !dbg !3467

if.then20:                                        ; preds = %if.then17
  %26 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3468
  %27 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3469
  %tmpl_argvec21 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %27, i32 0, i32 16, !dbg !3470
  %28 = load i8**, i8*** %tmpl_argvec21, align 8, !dbg !3470
  %29 = load i32, i32* %idx, align 4, !dbg !3471
  %idxprom22 = sext i32 %29 to i64, !dbg !3469
  %arrayidx23 = getelementptr inbounds i8*, i8** %28, i64 %idxprom22, !dbg !3469
  %30 = load i8*, i8** %arrayidx23, align 8, !dbg !3469
  call void @string_append(%struct.string* %26, i8* %30), !dbg !3472
  br label %if.end24, !dbg !3472

if.end24:                                         ; preds = %if.then20, %if.then17
  br label %if.end28, !dbg !3473

if.else:                                          ; preds = %if.end
  %31 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3474
  %32 = load i32, i32* %idx, align 4, !dbg !3476
  call void @string_append_template_idx(%struct.string* %31, i32 %32), !dbg !3477
  %33 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3478
  %tobool25 = icmp ne %struct.string* %33, null, !dbg !3478
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !3480

if.then26:                                        ; preds = %if.else
  %34 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3481
  %35 = load i32, i32* %idx, align 4, !dbg !3482
  call void @string_append_template_idx(%struct.string* %34, i32 %35), !dbg !3483
  br label %if.end27, !dbg !3483

if.end27:                                         ; preds = %if.then26, %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end24
  br label %if.end50, !dbg !3484

if.else29:                                        ; preds = %if.then
  %36 = load i8**, i8*** %mangled.addr, align 8, !dbg !3485
  %call30 = call i32 @consume_count(i8** %36), !dbg !3488
  store i32 %call30, i32* %r, align 4, !dbg !3489
  %cmp31 = icmp sle i32 %call30, 0, !dbg !3490
  br i1 %cmp31, label %if.then38, label %lor.lhs.false33, !dbg !3491

lor.lhs.false33:                                  ; preds = %if.else29
  %37 = load i8**, i8*** %mangled.addr, align 8, !dbg !3492
  %38 = load i8*, i8** %37, align 8, !dbg !3493
  %call34 = call i64 @strlen(i8* %38), !dbg !3494
  %conv35 = trunc i64 %call34 to i32, !dbg !3495
  %39 = load i32, i32* %r, align 4, !dbg !3496
  %cmp36 = icmp slt i32 %conv35, %39, !dbg !3497
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !3498

if.then38:                                        ; preds = %lor.lhs.false33, %if.else29
  store i32 0, i32* %retval, align 4, !dbg !3499
  br label %return, !dbg !3499

if.end39:                                         ; preds = %lor.lhs.false33
  %40 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3501
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %40, i32 0, i32 0, !dbg !3502
  %41 = load i32, i32* %options, align 8, !dbg !3502
  %and = and i32 %41, 4, !dbg !3503
  %tobool40 = icmp ne i32 %and, 0, !dbg !3503
  br i1 %tobool40, label %land.rhs, label %land.end, !dbg !3504

land.rhs:                                         ; preds = %if.end39
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !3505
  %43 = load i8*, i8** %42, align 8, !dbg !3506
  %call41 = call i32 @strncmp(i8* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.197, i64 0, i64 0), i64 8), !dbg !3507
  %cmp42 = icmp eq i32 %call41, 0, !dbg !3508
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end39
  %44 = phi i1 [ false, %if.end39 ], [ %cmp42, %land.rhs ], !dbg !3509
  %land.ext = zext i1 %44 to i32, !dbg !3504
  store i32 %land.ext, i32* %is_java_array, align 4, !dbg !3510
  %45 = load i32, i32* %is_java_array, align 4, !dbg !3511
  %tobool44 = icmp ne i32 %45, 0, !dbg !3511
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !3513

if.then45:                                        ; preds = %land.end
  %46 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3514
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !3516
  %48 = load i8*, i8** %47, align 8, !dbg !3517
  %49 = load i32, i32* %r, align 4, !dbg !3518
  call void @string_appendn(%struct.string* %46, i8* %48, i32 %49), !dbg !3519
  br label %if.end46, !dbg !3520

if.end46:                                         ; preds = %if.then45, %land.end
  %50 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3521
  %tobool47 = icmp ne %struct.string* %50, null, !dbg !3521
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !3523

if.then48:                                        ; preds = %if.end46
  %51 = load %struct.string*, %struct.string** %trawname.addr, align 8, !dbg !3524
  %52 = load i8**, i8*** %mangled.addr, align 8, !dbg !3525
  %53 = load i8*, i8** %52, align 8, !dbg !3526
  %54 = load i32, i32* %r, align 4, !dbg !3527
  call void @string_appendn(%struct.string* %51, i8* %53, i32 %54), !dbg !3528
  br label %if.end49, !dbg !3528

if.end49:                                         ; preds = %if.then48, %if.end46
  %55 = load i32, i32* %r, align 4, !dbg !3529
  %56 = load i8**, i8*** %mangled.addr, align 8, !dbg !3530
  %57 = load i8*, i8** %56, align 8, !dbg !3531
  %idx.ext = sext i32 %55 to i64, !dbg !3531
  %add.ptr = getelementptr inbounds i8, i8* %57, i64 %idx.ext, !dbg !3531
  store i8* %add.ptr, i8** %56, align 8, !dbg !3531
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end28
  br label %if.end51, !dbg !3532

if.end51:                                         ; preds = %if.end50, %entry
  %58 = load i32, i32* %is_java_array, align 4, !dbg !3533
  %tobool52 = icmp ne i32 %58, 0, !dbg !3533
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !3535

if.then53:                                        ; preds = %if.end51
  %59 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3536
  call void @string_append(%struct.string* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i64 0, i64 0)), !dbg !3537
  br label %if.end54, !dbg !3537

if.end54:                                         ; preds = %if.then53, %if.end51
  %60 = load i8**, i8*** %mangled.addr, align 8, !dbg !3538
  %call55 = call i32 @get_count(i8** %60, i32* %r), !dbg !3540
  %tobool56 = icmp ne i32 %call55, 0, !dbg !3540
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !3541

if.then57:                                        ; preds = %if.end54
  store i32 0, i32* %retval, align 4, !dbg !3542
  br label %return, !dbg !3542

if.end58:                                         ; preds = %if.end54
  %61 = load i32, i32* %is_type.addr, align 4, !dbg !3544
  %tobool59 = icmp ne i32 %61, 0, !dbg !3544
  br i1 %tobool59, label %if.end70, label %if.then60, !dbg !3546

if.then60:                                        ; preds = %if.end58
  %62 = load i32, i32* %r, align 4, !dbg !3547
  %conv61 = sext i32 %62 to i64, !dbg !3547
  %mul = mul i64 8, %conv61, !dbg !3547
  %call62 = call i8* @xmalloc(i64 %mul), !dbg !3547
  %63 = bitcast i8* %call62 to i8**, !dbg !3547
  %64 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3549
  %tmpl_argvec63 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %64, i32 0, i32 16, !dbg !3550
  store i8** %63, i8*** %tmpl_argvec63, align 8, !dbg !3551
  %65 = load i32, i32* %r, align 4, !dbg !3552
  %66 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3553
  %ntmpl_args64 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %66, i32 0, i32 17, !dbg !3554
  store i32 %65, i32* %ntmpl_args64, align 8, !dbg !3555
  store i32 0, i32* %i, align 4, !dbg !3556
  br label %for.cond, !dbg !3558

for.cond:                                         ; preds = %for.inc, %if.then60
  %67 = load i32, i32* %i, align 4, !dbg !3559
  %68 = load i32, i32* %r, align 4, !dbg !3561
  %cmp65 = icmp slt i32 %67, %68, !dbg !3562
  br i1 %cmp65, label %for.body, label %for.end, !dbg !3563

for.body:                                         ; preds = %for.cond
  %69 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3564
  %tmpl_argvec67 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %69, i32 0, i32 16, !dbg !3565
  %70 = load i8**, i8*** %tmpl_argvec67, align 8, !dbg !3565
  %71 = load i32, i32* %i, align 4, !dbg !3566
  %idxprom68 = sext i32 %71 to i64, !dbg !3564
  %arrayidx69 = getelementptr inbounds i8*, i8** %70, i64 %idxprom68, !dbg !3564
  store i8* null, i8** %arrayidx69, align 8, !dbg !3567
  br label %for.inc, !dbg !3564

for.inc:                                          ; preds = %for.body
  %72 = load i32, i32* %i, align 4, !dbg !3568
  %inc = add nsw i32 %72, 1, !dbg !3568
  store i32 %inc, i32* %i, align 4, !dbg !3568
  br label %for.cond, !dbg !3569, !llvm.loop !3570

for.end:                                          ; preds = %for.cond
  br label %if.end70, !dbg !3572

if.end70:                                         ; preds = %for.end, %if.end58
  store i32 0, i32* %i, align 4, !dbg !3573
  br label %for.cond71, !dbg !3575

for.cond71:                                       ; preds = %for.inc199, %if.end70
  %73 = load i32, i32* %i, align 4, !dbg !3576
  %74 = load i32, i32* %r, align 4, !dbg !3578
  %cmp72 = icmp slt i32 %73, %74, !dbg !3579
  br i1 %cmp72, label %for.body74, label %for.end201, !dbg !3580

for.body74:                                       ; preds = %for.cond71
  %75 = load i32, i32* %need_comma, align 4, !dbg !3581
  %tobool75 = icmp ne i32 %75, 0, !dbg !3581
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !3584

if.then76:                                        ; preds = %for.body74
  %76 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3585
  call void @string_append(%struct.string* %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0)), !dbg !3587
  br label %if.end77, !dbg !3588

if.end77:                                         ; preds = %if.then76, %for.body74
  %77 = load i8**, i8*** %mangled.addr, align 8, !dbg !3589
  %78 = load i8*, i8** %77, align 8, !dbg !3591
  %79 = load i8, i8* %78, align 1, !dbg !3592
  %conv78 = sext i8 %79 to i32, !dbg !3592
  %cmp79 = icmp eq i32 %conv78, 90, !dbg !3593
  br i1 %cmp79, label %if.then81, label %if.else110, !dbg !3594

if.then81:                                        ; preds = %if.end77
  %80 = load i8**, i8*** %mangled.addr, align 8, !dbg !3595
  %81 = load i8*, i8** %80, align 8, !dbg !3597
  %incdec.ptr82 = getelementptr inbounds i8, i8* %81, i32 1, !dbg !3597
  store i8* %incdec.ptr82, i8** %80, align 8, !dbg !3597
  %82 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3598
  %83 = load i8**, i8*** %mangled.addr, align 8, !dbg !3599
  %call83 = call i32 @do_type(%struct.work_stuff* %82, i8** %83, %struct.string* %temp), !dbg !3600
  store i32 %call83, i32* %success, align 4, !dbg !3601
  %84 = load i32, i32* %success, align 4, !dbg !3602
  %tobool84 = icmp ne i32 %84, 0, !dbg !3602
  br i1 %tobool84, label %if.then85, label %if.end106, !dbg !3604

if.then85:                                        ; preds = %if.then81
  %85 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3605
  call void @string_appends(%struct.string* %85, %struct.string* %temp), !dbg !3607
  %86 = load i32, i32* %is_type.addr, align 4, !dbg !3608
  %tobool86 = icmp ne i32 %86, 0, !dbg !3608
  br i1 %tobool86, label %if.end105, label %if.then87, !dbg !3610

if.then87:                                        ; preds = %if.then85
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3611, metadata !DIExpression()), !dbg !3613
  %p = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 1, !dbg !3614
  %87 = load i8*, i8** %p, align 8, !dbg !3614
  %b = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3615
  %88 = load i8*, i8** %b, align 8, !dbg !3615
  %sub.ptr.lhs.cast = ptrtoint i8* %87 to i64, !dbg !3616
  %sub.ptr.rhs.cast = ptrtoint i8* %88 to i64, !dbg !3616
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3616
  %conv88 = trunc i64 %sub.ptr.sub to i32, !dbg !3617
  store i32 %conv88, i32* %len, align 4, !dbg !3613
  %89 = load i32, i32* %len, align 4, !dbg !3618
  %add = add nsw i32 %89, 1, !dbg !3618
  %conv89 = sext i32 %add to i64, !dbg !3618
  %mul90 = mul i64 1, %conv89, !dbg !3618
  %call91 = call i8* @xmalloc(i64 %mul90), !dbg !3618
  %90 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3619
  %tmpl_argvec92 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %90, i32 0, i32 16, !dbg !3620
  %91 = load i8**, i8*** %tmpl_argvec92, align 8, !dbg !3620
  %92 = load i32, i32* %i, align 4, !dbg !3621
  %idxprom93 = sext i32 %92 to i64, !dbg !3619
  %arrayidx94 = getelementptr inbounds i8*, i8** %91, i64 %idxprom93, !dbg !3619
  store i8* %call91, i8** %arrayidx94, align 8, !dbg !3622
  %93 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3623
  %tmpl_argvec95 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %93, i32 0, i32 16, !dbg !3624
  %94 = load i8**, i8*** %tmpl_argvec95, align 8, !dbg !3624
  %95 = load i32, i32* %i, align 4, !dbg !3625
  %idxprom96 = sext i32 %95 to i64, !dbg !3623
  %arrayidx97 = getelementptr inbounds i8*, i8** %94, i64 %idxprom96, !dbg !3623
  %96 = load i8*, i8** %arrayidx97, align 8, !dbg !3623
  %b98 = getelementptr inbounds %struct.string, %struct.string* %temp, i32 0, i32 0, !dbg !3626
  %97 = load i8*, i8** %b98, align 8, !dbg !3626
  %98 = load i32, i32* %len, align 4, !dbg !3627
  %conv99 = sext i32 %98 to i64, !dbg !3627
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 1 %97, i64 %conv99, i1 false), !dbg !3628
  %99 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3629
  %tmpl_argvec100 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %99, i32 0, i32 16, !dbg !3630
  %100 = load i8**, i8*** %tmpl_argvec100, align 8, !dbg !3630
  %101 = load i32, i32* %i, align 4, !dbg !3631
  %idxprom101 = sext i32 %101 to i64, !dbg !3629
  %arrayidx102 = getelementptr inbounds i8*, i8** %100, i64 %idxprom101, !dbg !3629
  %102 = load i8*, i8** %arrayidx102, align 8, !dbg !3629
  %103 = load i32, i32* %len, align 4, !dbg !3632
  %idxprom103 = sext i32 %103 to i64, !dbg !3629
  %arrayidx104 = getelementptr inbounds i8, i8* %102, i64 %idxprom103, !dbg !3629
  store i8 0, i8* %arrayidx104, align 1, !dbg !3633
  br label %if.end105, !dbg !3634

if.end105:                                        ; preds = %if.then87, %if.then85
  br label %if.end106, !dbg !3635

if.end106:                                        ; preds = %if.end105, %if.then81
  call void @string_delete(%struct.string* %temp), !dbg !3636
  %104 = load i32, i32* %success, align 4, !dbg !3637
  %tobool107 = icmp ne i32 %104, 0, !dbg !3637
  br i1 %tobool107, label %if.end109, label %if.then108, !dbg !3639

if.then108:                                       ; preds = %if.end106
  br label %for.end201, !dbg !3640

if.end109:                                        ; preds = %if.end106
  br label %if.end198, !dbg !3642

if.else110:                                       ; preds = %if.end77
  %105 = load i8**, i8*** %mangled.addr, align 8, !dbg !3643
  %106 = load i8*, i8** %105, align 8, !dbg !3645
  %107 = load i8, i8* %106, align 1, !dbg !3646
  %conv111 = sext i8 %107 to i32, !dbg !3646
  %cmp112 = icmp eq i32 %conv111, 122, !dbg !3647
  br i1 %cmp112, label %if.then114, label %if.else154, !dbg !3648

if.then114:                                       ; preds = %if.else110
  call void @llvm.dbg.declare(metadata i32* %r2, metadata !3649, metadata !DIExpression()), !dbg !3651
  %108 = load i8**, i8*** %mangled.addr, align 8, !dbg !3652
  %109 = load i8*, i8** %108, align 8, !dbg !3653
  %incdec.ptr115 = getelementptr inbounds i8, i8* %109, i32 1, !dbg !3653
  store i8* %incdec.ptr115, i8** %108, align 8, !dbg !3653
  %110 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3654
  %111 = load i8**, i8*** %mangled.addr, align 8, !dbg !3655
  %112 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3656
  %call116 = call i32 @demangle_template_template_parm(%struct.work_stuff* %110, i8** %111, %struct.string* %112), !dbg !3657
  store i32 %call116, i32* %success, align 4, !dbg !3658
  %113 = load i32, i32* %success, align 4, !dbg !3659
  %tobool117 = icmp ne i32 %113, 0, !dbg !3659
  br i1 %tobool117, label %land.lhs.true118, label %if.end150, !dbg !3661

land.lhs.true118:                                 ; preds = %if.then114
  %114 = load i8**, i8*** %mangled.addr, align 8, !dbg !3662
  %call119 = call i32 @consume_count(i8** %114), !dbg !3663
  store i32 %call119, i32* %r2, align 4, !dbg !3664
  %cmp120 = icmp sgt i32 %call119, 0, !dbg !3665
  br i1 %cmp120, label %land.lhs.true122, label %if.end150, !dbg !3666

land.lhs.true122:                                 ; preds = %land.lhs.true118
  %115 = load i8**, i8*** %mangled.addr, align 8, !dbg !3667
  %116 = load i8*, i8** %115, align 8, !dbg !3668
  %call123 = call i64 @strlen(i8* %116), !dbg !3669
  %conv124 = trunc i64 %call123 to i32, !dbg !3670
  %117 = load i32, i32* %r2, align 4, !dbg !3671
  %cmp125 = icmp sge i32 %conv124, %117, !dbg !3672
  br i1 %cmp125, label %if.then127, label %if.end150, !dbg !3673

if.then127:                                       ; preds = %land.lhs.true122
  %118 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3674
  call void @string_append(%struct.string* %118, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !3676
  %119 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3677
  %120 = load i8**, i8*** %mangled.addr, align 8, !dbg !3678
  %121 = load i8*, i8** %120, align 8, !dbg !3679
  %122 = load i32, i32* %r2, align 4, !dbg !3680
  call void @string_appendn(%struct.string* %119, i8* %121, i32 %122), !dbg !3681
  %123 = load i32, i32* %is_type.addr, align 4, !dbg !3682
  %tobool128 = icmp ne i32 %123, 0, !dbg !3682
  br i1 %tobool128, label %if.end147, label %if.then129, !dbg !3684

if.then129:                                       ; preds = %if.then127
  call void @llvm.dbg.declare(metadata i32* %len130, metadata !3685, metadata !DIExpression()), !dbg !3687
  %124 = load i32, i32* %r2, align 4, !dbg !3688
  store i32 %124, i32* %len130, align 4, !dbg !3687
  %125 = load i32, i32* %len130, align 4, !dbg !3689
  %add131 = add nsw i32 %125, 1, !dbg !3689
  %conv132 = sext i32 %add131 to i64, !dbg !3689
  %mul133 = mul i64 1, %conv132, !dbg !3689
  %call134 = call i8* @xmalloc(i64 %mul133), !dbg !3689
  %126 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3690
  %tmpl_argvec135 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %126, i32 0, i32 16, !dbg !3691
  %127 = load i8**, i8*** %tmpl_argvec135, align 8, !dbg !3691
  %128 = load i32, i32* %i, align 4, !dbg !3692
  %idxprom136 = sext i32 %128 to i64, !dbg !3690
  %arrayidx137 = getelementptr inbounds i8*, i8** %127, i64 %idxprom136, !dbg !3690
  store i8* %call134, i8** %arrayidx137, align 8, !dbg !3693
  %129 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3694
  %tmpl_argvec138 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %129, i32 0, i32 16, !dbg !3695
  %130 = load i8**, i8*** %tmpl_argvec138, align 8, !dbg !3695
  %131 = load i32, i32* %i, align 4, !dbg !3696
  %idxprom139 = sext i32 %131 to i64, !dbg !3694
  %arrayidx140 = getelementptr inbounds i8*, i8** %130, i64 %idxprom139, !dbg !3694
  %132 = load i8*, i8** %arrayidx140, align 8, !dbg !3694
  %133 = load i8**, i8*** %mangled.addr, align 8, !dbg !3697
  %134 = load i8*, i8** %133, align 8, !dbg !3698
  %135 = load i32, i32* %len130, align 4, !dbg !3699
  %conv141 = sext i32 %135 to i64, !dbg !3699
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %134, i64 %conv141, i1 false), !dbg !3700
  %136 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3701
  %tmpl_argvec142 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %136, i32 0, i32 16, !dbg !3702
  %137 = load i8**, i8*** %tmpl_argvec142, align 8, !dbg !3702
  %138 = load i32, i32* %i, align 4, !dbg !3703
  %idxprom143 = sext i32 %138 to i64, !dbg !3701
  %arrayidx144 = getelementptr inbounds i8*, i8** %137, i64 %idxprom143, !dbg !3701
  %139 = load i8*, i8** %arrayidx144, align 8, !dbg !3701
  %140 = load i32, i32* %len130, align 4, !dbg !3704
  %idxprom145 = sext i32 %140 to i64, !dbg !3701
  %arrayidx146 = getelementptr inbounds i8, i8* %139, i64 %idxprom145, !dbg !3701
  store i8 0, i8* %arrayidx146, align 1, !dbg !3705
  br label %if.end147, !dbg !3706

if.end147:                                        ; preds = %if.then129, %if.then127
  %141 = load i32, i32* %r2, align 4, !dbg !3707
  %142 = load i8**, i8*** %mangled.addr, align 8, !dbg !3708
  %143 = load i8*, i8** %142, align 8, !dbg !3709
  %idx.ext148 = sext i32 %141 to i64, !dbg !3709
  %add.ptr149 = getelementptr inbounds i8, i8* %143, i64 %idx.ext148, !dbg !3709
  store i8* %add.ptr149, i8** %142, align 8, !dbg !3709
  br label %if.end150, !dbg !3710

if.end150:                                        ; preds = %if.end147, %land.lhs.true122, %land.lhs.true118, %if.then114
  %144 = load i32, i32* %success, align 4, !dbg !3711
  %tobool151 = icmp ne i32 %144, 0, !dbg !3711
  br i1 %tobool151, label %if.end153, label %if.then152, !dbg !3713

if.then152:                                       ; preds = %if.end150
  br label %for.end201, !dbg !3714

if.end153:                                        ; preds = %if.end150
  br label %if.end197, !dbg !3716

if.else154:                                       ; preds = %if.else110
  call void @llvm.dbg.declare(metadata %struct.string* %param, metadata !3717, metadata !DIExpression()), !dbg !3719
  call void @llvm.dbg.declare(metadata %struct.string** %s, metadata !3720, metadata !DIExpression()), !dbg !3721
  %145 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3722
  %146 = load i8**, i8*** %mangled.addr, align 8, !dbg !3723
  %call155 = call i32 @do_type(%struct.work_stuff* %145, i8** %146, %struct.string* %temp), !dbg !3724
  store i32 %call155, i32* %success, align 4, !dbg !3725
  call void @string_delete(%struct.string* %temp), !dbg !3726
  %147 = load i32, i32* %success, align 4, !dbg !3727
  %tobool156 = icmp ne i32 %147, 0, !dbg !3727
  br i1 %tobool156, label %if.end158, label %if.then157, !dbg !3729

if.then157:                                       ; preds = %if.else154
  br label %for.end201, !dbg !3730

if.end158:                                        ; preds = %if.else154
  %148 = load i32, i32* %is_type.addr, align 4, !dbg !3731
  %tobool159 = icmp ne i32 %148, 0, !dbg !3731
  br i1 %tobool159, label %if.else161, label %if.then160, !dbg !3733

if.then160:                                       ; preds = %if.end158
  store %struct.string* %param, %struct.string** %s, align 8, !dbg !3734
  %149 = load %struct.string*, %struct.string** %s, align 8, !dbg !3736
  call void @string_init(%struct.string* %149), !dbg !3737
  br label %if.end162, !dbg !3738

if.else161:                                       ; preds = %if.end158
  %150 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3739
  store %struct.string* %150, %struct.string** %s, align 8, !dbg !3740
  br label %if.end162

if.end162:                                        ; preds = %if.else161, %if.then160
  %151 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3741
  %152 = load i8**, i8*** %mangled.addr, align 8, !dbg !3742
  %153 = load %struct.string*, %struct.string** %s, align 8, !dbg !3743
  %154 = load i32, i32* %success, align 4, !dbg !3744
  %call163 = call i32 @demangle_template_value_parm(%struct.work_stuff* %151, i8** %152, %struct.string* %153, i32 %154), !dbg !3745
  store i32 %call163, i32* %success, align 4, !dbg !3746
  %155 = load i32, i32* %success, align 4, !dbg !3747
  %tobool164 = icmp ne i32 %155, 0, !dbg !3747
  br i1 %tobool164, label %if.end169, label %if.then165, !dbg !3749

if.then165:                                       ; preds = %if.end162
  %156 = load i32, i32* %is_type.addr, align 4, !dbg !3750
  %tobool166 = icmp ne i32 %156, 0, !dbg !3750
  br i1 %tobool166, label %if.end168, label %if.then167, !dbg !3753

if.then167:                                       ; preds = %if.then165
  %157 = load %struct.string*, %struct.string** %s, align 8, !dbg !3754
  call void @string_delete(%struct.string* %157), !dbg !3755
  br label %if.end168, !dbg !3755

if.end168:                                        ; preds = %if.then167, %if.then165
  store i32 0, i32* %success, align 4, !dbg !3756
  br label %for.end201, !dbg !3757

if.end169:                                        ; preds = %if.end162
  %158 = load i32, i32* %is_type.addr, align 4, !dbg !3758
  %tobool170 = icmp ne i32 %158, 0, !dbg !3758
  br i1 %tobool170, label %if.end196, label %if.then171, !dbg !3760

if.then171:                                       ; preds = %if.end169
  call void @llvm.dbg.declare(metadata i32* %len172, metadata !3761, metadata !DIExpression()), !dbg !3763
  %159 = load %struct.string*, %struct.string** %s, align 8, !dbg !3764
  %p173 = getelementptr inbounds %struct.string, %struct.string* %159, i32 0, i32 1, !dbg !3765
  %160 = load i8*, i8** %p173, align 8, !dbg !3765
  %161 = load %struct.string*, %struct.string** %s, align 8, !dbg !3766
  %b174 = getelementptr inbounds %struct.string, %struct.string* %161, i32 0, i32 0, !dbg !3767
  %162 = load i8*, i8** %b174, align 8, !dbg !3767
  %sub.ptr.lhs.cast175 = ptrtoint i8* %160 to i64, !dbg !3768
  %sub.ptr.rhs.cast176 = ptrtoint i8* %162 to i64, !dbg !3768
  %sub.ptr.sub177 = sub i64 %sub.ptr.lhs.cast175, %sub.ptr.rhs.cast176, !dbg !3768
  %conv178 = trunc i64 %sub.ptr.sub177 to i32, !dbg !3764
  store i32 %conv178, i32* %len172, align 4, !dbg !3763
  %163 = load i32, i32* %len172, align 4, !dbg !3769
  %add179 = add nsw i32 %163, 1, !dbg !3769
  %conv180 = sext i32 %add179 to i64, !dbg !3769
  %mul181 = mul i64 1, %conv180, !dbg !3769
  %call182 = call i8* @xmalloc(i64 %mul181), !dbg !3769
  %164 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3770
  %tmpl_argvec183 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %164, i32 0, i32 16, !dbg !3771
  %165 = load i8**, i8*** %tmpl_argvec183, align 8, !dbg !3771
  %166 = load i32, i32* %i, align 4, !dbg !3772
  %idxprom184 = sext i32 %166 to i64, !dbg !3770
  %arrayidx185 = getelementptr inbounds i8*, i8** %165, i64 %idxprom184, !dbg !3770
  store i8* %call182, i8** %arrayidx185, align 8, !dbg !3773
  %167 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3774
  %tmpl_argvec186 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %167, i32 0, i32 16, !dbg !3775
  %168 = load i8**, i8*** %tmpl_argvec186, align 8, !dbg !3775
  %169 = load i32, i32* %i, align 4, !dbg !3776
  %idxprom187 = sext i32 %169 to i64, !dbg !3774
  %arrayidx188 = getelementptr inbounds i8*, i8** %168, i64 %idxprom187, !dbg !3774
  %170 = load i8*, i8** %arrayidx188, align 8, !dbg !3774
  %171 = load %struct.string*, %struct.string** %s, align 8, !dbg !3777
  %b189 = getelementptr inbounds %struct.string, %struct.string* %171, i32 0, i32 0, !dbg !3778
  %172 = load i8*, i8** %b189, align 8, !dbg !3778
  %173 = load i32, i32* %len172, align 4, !dbg !3779
  %conv190 = sext i32 %173 to i64, !dbg !3779
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %172, i64 %conv190, i1 false), !dbg !3780
  %174 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3781
  %tmpl_argvec191 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %174, i32 0, i32 16, !dbg !3782
  %175 = load i8**, i8*** %tmpl_argvec191, align 8, !dbg !3782
  %176 = load i32, i32* %i, align 4, !dbg !3783
  %idxprom192 = sext i32 %176 to i64, !dbg !3781
  %arrayidx193 = getelementptr inbounds i8*, i8** %175, i64 %idxprom192, !dbg !3781
  %177 = load i8*, i8** %arrayidx193, align 8, !dbg !3781
  %178 = load i32, i32* %len172, align 4, !dbg !3784
  %idxprom194 = sext i32 %178 to i64, !dbg !3781
  %arrayidx195 = getelementptr inbounds i8, i8* %177, i64 %idxprom194, !dbg !3781
  store i8 0, i8* %arrayidx195, align 1, !dbg !3785
  %179 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3786
  %180 = load %struct.string*, %struct.string** %s, align 8, !dbg !3787
  call void @string_appends(%struct.string* %179, %struct.string* %180), !dbg !3788
  %181 = load %struct.string*, %struct.string** %s, align 8, !dbg !3789
  call void @string_delete(%struct.string* %181), !dbg !3790
  br label %if.end196, !dbg !3791

if.end196:                                        ; preds = %if.then171, %if.end169
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.end153
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.end109
  store i32 1, i32* %need_comma, align 4, !dbg !3792
  br label %for.inc199, !dbg !3793

for.inc199:                                       ; preds = %if.end198
  %182 = load i32, i32* %i, align 4, !dbg !3794
  %inc200 = add nsw i32 %182, 1, !dbg !3794
  store i32 %inc200, i32* %i, align 4, !dbg !3794
  br label %for.cond71, !dbg !3795, !llvm.loop !3796

for.end201:                                       ; preds = %if.end168, %if.then157, %if.then152, %if.then108, %for.cond71
  %183 = load i32, i32* %is_java_array, align 4, !dbg !3798
  %tobool202 = icmp ne i32 %183, 0, !dbg !3798
  br i1 %tobool202, label %if.then203, label %if.else204, !dbg !3800

if.then203:                                       ; preds = %for.end201
  %184 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3801
  call void @string_append(%struct.string* %184, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.163, i64 0, i64 0)), !dbg !3803
  br label %if.end212, !dbg !3804

if.else204:                                       ; preds = %for.end201
  %185 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3805
  %p205 = getelementptr inbounds %struct.string, %struct.string* %185, i32 0, i32 1, !dbg !3808
  %186 = load i8*, i8** %p205, align 8, !dbg !3808
  %arrayidx206 = getelementptr inbounds i8, i8* %186, i64 -1, !dbg !3805
  %187 = load i8, i8* %arrayidx206, align 1, !dbg !3805
  %conv207 = sext i8 %187 to i32, !dbg !3805
  %cmp208 = icmp eq i32 %conv207, 62, !dbg !3809
  br i1 %cmp208, label %if.then210, label %if.end211, !dbg !3810

if.then210:                                       ; preds = %if.else204
  %188 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3811
  call void @string_append(%struct.string* %188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !3812
  br label %if.end211, !dbg !3812

if.end211:                                        ; preds = %if.then210, %if.else204
  %189 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3813
  call void @string_append(%struct.string* %189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !3814
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.then203
  %190 = load i32, i32* %is_type.addr, align 4, !dbg !3815
  %tobool213 = icmp ne i32 %190, 0, !dbg !3815
  br i1 %tobool213, label %land.lhs.true214, label %if.end229, !dbg !3817

land.lhs.true214:                                 ; preds = %if.end212
  %191 = load i32, i32* %remember.addr, align 4, !dbg !3818
  %tobool215 = icmp ne i32 %191, 0, !dbg !3818
  br i1 %tobool215, label %if.then216, label %if.end229, !dbg !3819

if.then216:                                       ; preds = %land.lhs.true214
  call void @llvm.dbg.declare(metadata i32* %bindex, metadata !3820, metadata !DIExpression()), !dbg !3822
  %192 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3823
  %call217 = call i32 @register_Btype(%struct.work_stuff* %192), !dbg !3824
  store i32 %call217, i32* %bindex, align 4, !dbg !3822
  %193 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3825
  %194 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3826
  %b218 = getelementptr inbounds %struct.string, %struct.string* %194, i32 0, i32 0, !dbg !3827
  %195 = load i8*, i8** %b218, align 8, !dbg !3827
  %196 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3828
  %b219 = getelementptr inbounds %struct.string, %struct.string* %196, i32 0, i32 0, !dbg !3828
  %197 = load i8*, i8** %b219, align 8, !dbg !3828
  %198 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3828
  %p220 = getelementptr inbounds %struct.string, %struct.string* %198, i32 0, i32 1, !dbg !3828
  %199 = load i8*, i8** %p220, align 8, !dbg !3828
  %cmp221 = icmp eq i8* %197, %199, !dbg !3828
  br i1 %cmp221, label %cond.true, label %cond.false, !dbg !3828

cond.true:                                        ; preds = %if.then216
  br label %cond.end, !dbg !3828

cond.false:                                       ; preds = %if.then216
  %200 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3828
  %p223 = getelementptr inbounds %struct.string, %struct.string* %200, i32 0, i32 1, !dbg !3828
  %201 = load i8*, i8** %p223, align 8, !dbg !3828
  %202 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !3828
  %b224 = getelementptr inbounds %struct.string, %struct.string* %202, i32 0, i32 0, !dbg !3828
  %203 = load i8*, i8** %b224, align 8, !dbg !3828
  %sub.ptr.lhs.cast225 = ptrtoint i8* %201 to i64, !dbg !3828
  %sub.ptr.rhs.cast226 = ptrtoint i8* %203 to i64, !dbg !3828
  %sub.ptr.sub227 = sub i64 %sub.ptr.lhs.cast225, %sub.ptr.rhs.cast226, !dbg !3828
  br label %cond.end, !dbg !3828

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub.ptr.sub227, %cond.false ], !dbg !3828
  %conv228 = trunc i64 %cond to i32, !dbg !3828
  %204 = load i32, i32* %bindex, align 4, !dbg !3829
  call void @remember_Btype(%struct.work_stuff* %193, i8* %195, i32 %conv228, i32 %204), !dbg !3830
  br label %if.end229, !dbg !3831

if.end229:                                        ; preds = %cond.end, %land.lhs.true214, %if.end212
  %205 = load i32, i32* %success, align 4, !dbg !3832
  store i32 %205, i32* %retval, align 4, !dbg !3833
  br label %return, !dbg !3833

return:                                           ; preds = %if.end229, %if.then57, %if.then38, %if.then14
  %206 = load i32, i32* %retval, align 4, !dbg !3834
  ret i32 %206, !dbg !3834
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_count(i8** %type) #0 !dbg !3835 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i8**, align 8
  %count = alloca i32, align 4
  store i8** %type, i8*** %type.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %type.addr, metadata !3838, metadata !DIExpression()), !dbg !3839
  call void @llvm.dbg.declare(metadata i32* %count, metadata !3840, metadata !DIExpression()), !dbg !3841
  store i32 0, i32* %count, align 4, !dbg !3841
  %0 = load i8**, i8*** %type.addr, align 8, !dbg !3842
  %1 = load i8*, i8** %0, align 8, !dbg !3842
  %2 = load i8, i8* %1, align 1, !dbg !3842
  %conv = zext i8 %2 to i32, !dbg !3842
  %and = and i32 %conv, 255, !dbg !3842
  %idxprom = sext i32 %and to i64, !dbg !3842
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !3842
  %3 = load i16, i16* %arrayidx, align 2, !dbg !3842
  %conv1 = zext i16 %3 to i32, !dbg !3842
  %and2 = and i32 %conv1, 4, !dbg !3842
  %tobool = icmp ne i32 %and2, 0, !dbg !3842
  br i1 %tobool, label %if.end, label %if.then, !dbg !3844

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !3845
  br label %return, !dbg !3845

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !3846

while.cond:                                       ; preds = %if.end21, %if.end
  %4 = load i8**, i8*** %type.addr, align 8, !dbg !3847
  %5 = load i8*, i8** %4, align 8, !dbg !3847
  %6 = load i8, i8* %5, align 1, !dbg !3847
  %conv3 = zext i8 %6 to i32, !dbg !3847
  %and4 = and i32 %conv3, 255, !dbg !3847
  %idxprom5 = sext i32 %and4 to i64, !dbg !3847
  %arrayidx6 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom5, !dbg !3847
  %7 = load i16, i16* %arrayidx6, align 2, !dbg !3847
  %conv7 = zext i16 %7 to i32, !dbg !3847
  %and8 = and i32 %conv7, 4, !dbg !3847
  %tobool9 = icmp ne i32 %and8, 0, !dbg !3846
  br i1 %tobool9, label %while.body, label %while.end24, !dbg !3846

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %count, align 4, !dbg !3848
  %mul = mul nsw i32 %8, 10, !dbg !3848
  store i32 %mul, i32* %count, align 4, !dbg !3848
  %9 = load i32, i32* %count, align 4, !dbg !3850
  %rem = srem i32 %9, 10, !dbg !3852
  %cmp = icmp ne i32 %rem, 0, !dbg !3853
  br i1 %cmp, label %if.then11, label %if.end21, !dbg !3854

if.then11:                                        ; preds = %while.body
  br label %while.cond12, !dbg !3855

while.cond12:                                     ; preds = %while.body20, %if.then11
  %10 = load i8**, i8*** %type.addr, align 8, !dbg !3857
  %11 = load i8*, i8** %10, align 8, !dbg !3857
  %12 = load i8, i8* %11, align 1, !dbg !3857
  %conv13 = zext i8 %12 to i32, !dbg !3857
  %and14 = and i32 %conv13, 255, !dbg !3857
  %idxprom15 = sext i32 %and14 to i64, !dbg !3857
  %arrayidx16 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom15, !dbg !3857
  %13 = load i16, i16* %arrayidx16, align 2, !dbg !3857
  %conv17 = zext i16 %13 to i32, !dbg !3857
  %and18 = and i32 %conv17, 4, !dbg !3857
  %tobool19 = icmp ne i32 %and18, 0, !dbg !3855
  br i1 %tobool19, label %while.body20, label %while.end, !dbg !3855

while.body20:                                     ; preds = %while.cond12
  %14 = load i8**, i8*** %type.addr, align 8, !dbg !3858
  %15 = load i8*, i8** %14, align 8, !dbg !3859
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !3859
  store i8* %incdec.ptr, i8** %14, align 8, !dbg !3859
  br label %while.cond12, !dbg !3855, !llvm.loop !3860

while.end:                                        ; preds = %while.cond12
  store i32 -1, i32* %retval, align 4, !dbg !3861
  br label %return, !dbg !3861

if.end21:                                         ; preds = %while.body
  %16 = load i8**, i8*** %type.addr, align 8, !dbg !3862
  %17 = load i8*, i8** %16, align 8, !dbg !3863
  %18 = load i8, i8* %17, align 1, !dbg !3864
  %conv22 = sext i8 %18 to i32, !dbg !3864
  %sub = sub nsw i32 %conv22, 48, !dbg !3865
  %19 = load i32, i32* %count, align 4, !dbg !3866
  %add = add nsw i32 %19, %sub, !dbg !3866
  store i32 %add, i32* %count, align 4, !dbg !3866
  %20 = load i8**, i8*** %type.addr, align 8, !dbg !3867
  %21 = load i8*, i8** %20, align 8, !dbg !3868
  %incdec.ptr23 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !3868
  store i8* %incdec.ptr23, i8** %20, align 8, !dbg !3868
  br label %while.cond, !dbg !3846, !llvm.loop !3869

while.end24:                                      ; preds = %while.cond
  %22 = load i32, i32* %count, align 4, !dbg !3871
  %cmp25 = icmp slt i32 %22, 0, !dbg !3873
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !3874

if.then27:                                        ; preds = %while.end24
  store i32 -1, i32* %count, align 4, !dbg !3875
  br label %if.end28, !dbg !3876

if.end28:                                         ; preds = %if.then27, %while.end24
  %23 = load i32, i32* %count, align 4, !dbg !3877
  store i32 %23, i32* %retval, align 4, !dbg !3878
  br label %return, !dbg !3878

return:                                           ; preds = %if.end28, %while.end, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !3879
  ret i32 %24, !dbg !3879
}

declare dso_local i64 @strcspn(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_appendn(%struct.string* %p, i8* %s, i32 %n) #0 !dbg !3880 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3885, metadata !DIExpression()), !dbg !3886
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3887, metadata !DIExpression()), !dbg !3888
  %0 = load i32, i32* %n.addr, align 4, !dbg !3889
  %cmp = icmp ne i32 %0, 0, !dbg !3891
  br i1 %cmp, label %if.then, label %if.end, !dbg !3892

if.then:                                          ; preds = %entry
  %1 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3893
  %2 = load i32, i32* %n.addr, align 4, !dbg !3895
  call void @string_need(%struct.string* %1, i32 %2), !dbg !3896
  %3 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3897
  %p1 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 1, !dbg !3898
  %4 = load i8*, i8** %p1, align 8, !dbg !3898
  %5 = load i8*, i8** %s.addr, align 8, !dbg !3899
  %6 = load i32, i32* %n.addr, align 4, !dbg !3900
  %conv = sext i32 %6 to i64, !dbg !3900
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 %conv, i1 false), !dbg !3901
  %7 = load i32, i32* %n.addr, align 4, !dbg !3902
  %8 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3903
  %p2 = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1, !dbg !3904
  %9 = load i8*, i8** %p2, align 8, !dbg !3905
  %idx.ext = sext i32 %7 to i64, !dbg !3905
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !3905
  store i8* %add.ptr, i8** %p2, align 8, !dbg !3905
  br label %if.end, !dbg !3906

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3907
}

declare dso_local i8* @strpbrk(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_append(%struct.string* %p, i8* %s) #0 !dbg !3908 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca i8*, align 8
  %n = alloca i32, align 4
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !3909, metadata !DIExpression()), !dbg !3910
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !3911, metadata !DIExpression()), !dbg !3912
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3913, metadata !DIExpression()), !dbg !3914
  %0 = load i8*, i8** %s.addr, align 8, !dbg !3915
  %cmp = icmp eq i8* %0, null, !dbg !3917
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3918

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %s.addr, align 8, !dbg !3919
  %2 = load i8, i8* %1, align 1, !dbg !3920
  %conv = sext i8 %2 to i32, !dbg !3920
  %cmp1 = icmp eq i32 %conv, 0, !dbg !3921
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3922

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !3923

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %s.addr, align 8, !dbg !3924
  %call = call i64 @strlen(i8* %3), !dbg !3925
  %conv3 = trunc i64 %call to i32, !dbg !3925
  store i32 %conv3, i32* %n, align 4, !dbg !3926
  %4 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3927
  %5 = load i32, i32* %n, align 4, !dbg !3928
  call void @string_need(%struct.string* %4, i32 %5), !dbg !3929
  %6 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3930
  %p4 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 1, !dbg !3931
  %7 = load i8*, i8** %p4, align 8, !dbg !3931
  %8 = load i8*, i8** %s.addr, align 8, !dbg !3932
  %9 = load i32, i32* %n, align 4, !dbg !3933
  %conv5 = sext i32 %9 to i64, !dbg !3933
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 %conv5, i1 false), !dbg !3934
  %10 = load i32, i32* %n, align 4, !dbg !3935
  %11 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !3936
  %p6 = getelementptr inbounds %struct.string, %struct.string* %11, i32 0, i32 1, !dbg !3937
  %12 = load i8*, i8** %p6, align 8, !dbg !3938
  %idx.ext = sext i32 %10 to i64, !dbg !3938
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !3938
  store i8* %add.ptr, i8** %p6, align 8, !dbg !3938
  br label %return, !dbg !3939

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3939
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @register_Btype(%struct.work_stuff* %work) #0 !dbg !3940 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %ret = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3945, metadata !DIExpression()), !dbg !3946
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3947
  %numb = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 5, !dbg !3949
  %1 = load i32, i32* %numb, align 4, !dbg !3949
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3950
  %bsize = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 7, !dbg !3951
  %3 = load i32, i32* %bsize, align 4, !dbg !3951
  %cmp = icmp sge i32 %1, %3, !dbg !3952
  br i1 %cmp, label %if.then, label %if.end14, !dbg !3953

if.then:                                          ; preds = %entry
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3954
  %bsize1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 7, !dbg !3957
  %5 = load i32, i32* %bsize1, align 4, !dbg !3957
  %cmp2 = icmp eq i32 %5, 0, !dbg !3958
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !3959

if.then3:                                         ; preds = %if.then
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3960
  %bsize4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 7, !dbg !3962
  store i32 5, i32* %bsize4, align 4, !dbg !3963
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3964
  %bsize5 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 7, !dbg !3964
  %8 = load i32, i32* %bsize5, align 4, !dbg !3964
  %conv = sext i32 %8 to i64, !dbg !3964
  %mul = mul i64 8, %conv, !dbg !3964
  %call = call i8* @xmalloc(i64 %mul), !dbg !3964
  %9 = bitcast i8* %call to i8**, !dbg !3964
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3965
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 3, !dbg !3966
  store i8** %9, i8*** %btypevec, align 8, !dbg !3967
  br label %if.end, !dbg !3968

if.else:                                          ; preds = %if.then
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3969
  %bsize6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 7, !dbg !3971
  %12 = load i32, i32* %bsize6, align 4, !dbg !3972
  %mul7 = mul nsw i32 %12, 2, !dbg !3972
  store i32 %mul7, i32* %bsize6, align 4, !dbg !3972
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3973
  %btypevec8 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 3, !dbg !3973
  %14 = load i8**, i8*** %btypevec8, align 8, !dbg !3973
  %15 = bitcast i8** %14 to i8*, !dbg !3973
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3973
  %bsize9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 7, !dbg !3973
  %17 = load i32, i32* %bsize9, align 4, !dbg !3973
  %conv10 = sext i32 %17 to i64, !dbg !3973
  %mul11 = mul i64 8, %conv10, !dbg !3973
  %call12 = call i8* @xrealloc(i8* %15, i64 %mul11), !dbg !3973
  %18 = bitcast i8* %call12 to i8**, !dbg !3973
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3974
  %btypevec13 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 3, !dbg !3975
  store i8** %18, i8*** %btypevec13, align 8, !dbg !3976
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end14, !dbg !3977

if.end14:                                         ; preds = %if.end, %entry
  %20 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3978
  %numb15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %20, i32 0, i32 5, !dbg !3979
  %21 = load i32, i32* %numb15, align 4, !dbg !3980
  %inc = add nsw i32 %21, 1, !dbg !3980
  store i32 %inc, i32* %numb15, align 4, !dbg !3980
  store i32 %21, i32* %ret, align 4, !dbg !3981
  %22 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !3982
  %btypevec16 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %22, i32 0, i32 3, !dbg !3983
  %23 = load i8**, i8*** %btypevec16, align 8, !dbg !3983
  %24 = load i32, i32* %ret, align 4, !dbg !3984
  %idxprom = sext i32 %24 to i64, !dbg !3982
  %arrayidx = getelementptr inbounds i8*, i8** %23, i64 %idxprom, !dbg !3982
  store i8* null, i8** %arrayidx, align 8, !dbg !3985
  %25 = load i32, i32* %ret, align 4, !dbg !3986
  ret i32 %25, !dbg !3987
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @consume_count_with_underscores(i8** %mangled) #0 !dbg !3988 {
entry:
  %retval = alloca i32, align 4
  %mangled.addr = alloca i8**, align 8
  %idx = alloca i32, align 4
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !3989, metadata !DIExpression()), !dbg !3990
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !3991, metadata !DIExpression()), !dbg !3992
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !3993
  %1 = load i8*, i8** %0, align 8, !dbg !3995
  %2 = load i8, i8* %1, align 1, !dbg !3996
  %conv = sext i8 %2 to i32, !dbg !3996
  %cmp = icmp eq i32 %conv, 95, !dbg !3997
  br i1 %cmp, label %if.then, label %if.else, !dbg !3998

if.then:                                          ; preds = %entry
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !3999
  %4 = load i8*, i8** %3, align 8, !dbg !4001
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !4001
  store i8* %incdec.ptr, i8** %3, align 8, !dbg !4001
  %5 = load i8**, i8*** %mangled.addr, align 8, !dbg !4002
  %6 = load i8*, i8** %5, align 8, !dbg !4002
  %7 = load i8, i8* %6, align 1, !dbg !4002
  %conv2 = zext i8 %7 to i32, !dbg !4002
  %and = and i32 %conv2, 255, !dbg !4002
  %idxprom = sext i32 %and to i64, !dbg !4002
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !4002
  %8 = load i16, i16* %arrayidx, align 2, !dbg !4002
  %conv3 = zext i16 %8 to i32, !dbg !4002
  %and4 = and i32 %conv3, 4, !dbg !4002
  %tobool = icmp ne i32 %and4, 0, !dbg !4002
  br i1 %tobool, label %if.end, label %if.then5, !dbg !4004

if.then5:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !4005
  br label %return, !dbg !4005

if.end:                                           ; preds = %if.then
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !4006
  %call = call i32 @consume_count(i8** %9), !dbg !4007
  store i32 %call, i32* %idx, align 4, !dbg !4008
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !4009
  %11 = load i8*, i8** %10, align 8, !dbg !4011
  %12 = load i8, i8* %11, align 1, !dbg !4012
  %conv6 = sext i8 %12 to i32, !dbg !4012
  %cmp7 = icmp ne i32 %conv6, 95, !dbg !4013
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !4014

if.then9:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !4015
  br label %return, !dbg !4015

if.end10:                                         ; preds = %if.end
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !4016
  %14 = load i8*, i8** %13, align 8, !dbg !4017
  %incdec.ptr11 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !4017
  store i8* %incdec.ptr11, i8** %13, align 8, !dbg !4017
  br label %if.end22, !dbg !4018

if.else:                                          ; preds = %entry
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !4019
  %16 = load i8*, i8** %15, align 8, !dbg !4022
  %17 = load i8, i8* %16, align 1, !dbg !4023
  %conv12 = sext i8 %17 to i32, !dbg !4023
  %cmp13 = icmp slt i32 %conv12, 48, !dbg !4024
  br i1 %cmp13, label %if.then18, label %lor.lhs.false, !dbg !4025

lor.lhs.false:                                    ; preds = %if.else
  %18 = load i8**, i8*** %mangled.addr, align 8, !dbg !4026
  %19 = load i8*, i8** %18, align 8, !dbg !4027
  %20 = load i8, i8* %19, align 1, !dbg !4028
  %conv15 = sext i8 %20 to i32, !dbg !4028
  %cmp16 = icmp sgt i32 %conv15, 57, !dbg !4029
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !4030

if.then18:                                        ; preds = %lor.lhs.false, %if.else
  store i32 -1, i32* %retval, align 4, !dbg !4031
  br label %return, !dbg !4031

if.end19:                                         ; preds = %lor.lhs.false
  %21 = load i8**, i8*** %mangled.addr, align 8, !dbg !4032
  %22 = load i8*, i8** %21, align 8, !dbg !4033
  %23 = load i8, i8* %22, align 1, !dbg !4034
  %conv20 = sext i8 %23 to i32, !dbg !4034
  %sub = sub nsw i32 %conv20, 48, !dbg !4035
  store i32 %sub, i32* %idx, align 4, !dbg !4036
  %24 = load i8**, i8*** %mangled.addr, align 8, !dbg !4037
  %25 = load i8*, i8** %24, align 8, !dbg !4038
  %incdec.ptr21 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !4038
  store i8* %incdec.ptr21, i8** %24, align 8, !dbg !4038
  br label %if.end22

if.end22:                                         ; preds = %if.end19, %if.end10
  %26 = load i32, i32* %idx, align 4, !dbg !4039
  store i32 %26, i32* %retval, align 4, !dbg !4040
  br label %return, !dbg !4040

return:                                           ; preds = %if.end22, %if.then18, %if.then9, %if.then5
  %27 = load i32, i32* %retval, align 4, !dbg !4041
  ret i32 %27, !dbg !4041
}

declare dso_local i32 @atoi(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_clear(%struct.string* %s) #0 !dbg !4042 {
entry:
  %s.addr = alloca %struct.string*, align 8
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4043, metadata !DIExpression()), !dbg !4044
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4045
  %b = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0, !dbg !4046
  %1 = load i8*, i8** %b, align 8, !dbg !4046
  %2 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4047
  %p = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1, !dbg !4048
  store i8* %1, i8** %p, align 8, !dbg !4049
  ret void, !dbg !4050
}

; Function Attrs: noinline nounwind uwtable
define internal void @recursively_demangle(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result, i32 %namelength) #0 !dbg !4051 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %namelength.addr = alloca i32, align 4
  %recurse = alloca i8*, align 8
  %recurse_dem = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4054, metadata !DIExpression()), !dbg !4055
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !4056, metadata !DIExpression()), !dbg !4057
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !4058, metadata !DIExpression()), !dbg !4059
  store i32 %namelength, i32* %namelength.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %namelength.addr, metadata !4060, metadata !DIExpression()), !dbg !4061
  call void @llvm.dbg.declare(metadata i8** %recurse, metadata !4062, metadata !DIExpression()), !dbg !4063
  store i8* null, i8** %recurse, align 8, !dbg !4063
  call void @llvm.dbg.declare(metadata i8** %recurse_dem, metadata !4064, metadata !DIExpression()), !dbg !4065
  store i8* null, i8** %recurse_dem, align 8, !dbg !4065
  %0 = load i32, i32* %namelength.addr, align 4, !dbg !4066
  %add = add nsw i32 %0, 1, !dbg !4066
  %conv = sext i32 %add to i64, !dbg !4066
  %mul = mul i64 1, %conv, !dbg !4066
  %call = call i8* @xmalloc(i64 %mul), !dbg !4066
  store i8* %call, i8** %recurse, align 8, !dbg !4067
  %1 = load i8*, i8** %recurse, align 8, !dbg !4068
  %2 = load i8**, i8*** %mangled.addr, align 8, !dbg !4069
  %3 = load i8*, i8** %2, align 8, !dbg !4070
  %4 = load i32, i32* %namelength.addr, align 4, !dbg !4071
  %conv1 = sext i32 %4 to i64, !dbg !4071
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %3, i64 %conv1, i1 false), !dbg !4072
  %5 = load i8*, i8** %recurse, align 8, !dbg !4073
  %6 = load i32, i32* %namelength.addr, align 4, !dbg !4074
  %idxprom = sext i32 %6 to i64, !dbg !4073
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom, !dbg !4073
  store i8 0, i8* %arrayidx, align 1, !dbg !4075
  %7 = load i8*, i8** %recurse, align 8, !dbg !4076
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4077
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 0, !dbg !4078
  %9 = load i32, i32* %options, align 8, !dbg !4078
  %call2 = call i8* @cplus_demangle(i8* %7, i32 %9), !dbg !4079
  store i8* %call2, i8** %recurse_dem, align 8, !dbg !4080
  %10 = load i8*, i8** %recurse_dem, align 8, !dbg !4081
  %tobool = icmp ne i8* %10, null, !dbg !4081
  br i1 %tobool, label %if.then, label %if.else, !dbg !4083

if.then:                                          ; preds = %entry
  %11 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !4084
  %12 = load i8*, i8** %recurse_dem, align 8, !dbg !4086
  call void @string_append(%struct.string* %11, i8* %12), !dbg !4087
  %13 = load i8*, i8** %recurse_dem, align 8, !dbg !4088
  call void @free(i8* %13), !dbg !4089
  br label %if.end, !dbg !4090

if.else:                                          ; preds = %entry
  %14 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !4091
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !4093
  %16 = load i8*, i8** %15, align 8, !dbg !4094
  %17 = load i32, i32* %namelength.addr, align 4, !dbg !4095
  call void @string_appendn(%struct.string* %14, i8* %16, i32 %17), !dbg !4096
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load i8*, i8** %recurse, align 8, !dbg !4097
  call void @free(i8* %18), !dbg !4098
  %19 = load i32, i32* %namelength.addr, align 4, !dbg !4099
  %20 = load i8**, i8*** %mangled.addr, align 8, !dbg !4100
  %21 = load i8*, i8** %20, align 8, !dbg !4101
  %idx.ext = sext i32 %19 to i64, !dbg !4101
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %idx.ext, !dbg !4101
  store i8* %add.ptr, i8** %20, align 8, !dbg !4101
  ret void, !dbg !4102
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_appends(%struct.string* %p, %struct.string* %s) #0 !dbg !4103 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca %struct.string*, align 8
  %n = alloca i32, align 4
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !4106, metadata !DIExpression()), !dbg !4107
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4108, metadata !DIExpression()), !dbg !4109
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4110, metadata !DIExpression()), !dbg !4111
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4112
  %b = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0, !dbg !4114
  %1 = load i8*, i8** %b, align 8, !dbg !4114
  %2 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4115
  %p1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1, !dbg !4116
  %3 = load i8*, i8** %p1, align 8, !dbg !4116
  %cmp = icmp ne i8* %1, %3, !dbg !4117
  br i1 %cmp, label %if.then, label %if.end, !dbg !4118

if.then:                                          ; preds = %entry
  %4 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4119
  %p2 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 1, !dbg !4121
  %5 = load i8*, i8** %p2, align 8, !dbg !4121
  %6 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4122
  %b3 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 0, !dbg !4123
  %7 = load i8*, i8** %b3, align 8, !dbg !4123
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64, !dbg !4124
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64, !dbg !4124
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4124
  %conv = trunc i64 %sub.ptr.sub to i32, !dbg !4119
  store i32 %conv, i32* %n, align 4, !dbg !4125
  %8 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4126
  %9 = load i32, i32* %n, align 4, !dbg !4127
  call void @string_need(%struct.string* %8, i32 %9), !dbg !4128
  %10 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4129
  %p4 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 1, !dbg !4130
  %11 = load i8*, i8** %p4, align 8, !dbg !4130
  %12 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4131
  %b5 = getelementptr inbounds %struct.string, %struct.string* %12, i32 0, i32 0, !dbg !4132
  %13 = load i8*, i8** %b5, align 8, !dbg !4132
  %14 = load i32, i32* %n, align 4, !dbg !4133
  %conv6 = sext i32 %14 to i64, !dbg !4133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 %13, i64 %conv6, i1 false), !dbg !4134
  %15 = load i32, i32* %n, align 4, !dbg !4135
  %16 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4136
  %p7 = getelementptr inbounds %struct.string, %struct.string* %16, i32 0, i32 1, !dbg !4137
  %17 = load i8*, i8** %p7, align 8, !dbg !4138
  %idx.ext = sext i32 %15 to i64, !dbg !4138
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %idx.ext, !dbg !4138
  store i8* %add.ptr, i8** %p7, align 8, !dbg !4138
  br label %if.end, !dbg !4139

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4140
}

; Function Attrs: noinline nounwind uwtable
define internal void @remember_Ktype(%struct.work_stuff* %work, i8* %start, i32 %len) #0 !dbg !4141 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %start.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %tem = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4144, metadata !DIExpression()), !dbg !4145
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !4146, metadata !DIExpression()), !dbg !4147
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !4148, metadata !DIExpression()), !dbg !4149
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !4150, metadata !DIExpression()), !dbg !4151
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4152
  %numk = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 4, !dbg !4154
  %1 = load i32, i32* %numk, align 8, !dbg !4154
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4155
  %ksize = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 6, !dbg !4156
  %3 = load i32, i32* %ksize, align 8, !dbg !4156
  %cmp = icmp sge i32 %1, %3, !dbg !4157
  br i1 %cmp, label %if.then, label %if.end14, !dbg !4158

if.then:                                          ; preds = %entry
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4159
  %ksize1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 6, !dbg !4162
  %5 = load i32, i32* %ksize1, align 8, !dbg !4162
  %cmp2 = icmp eq i32 %5, 0, !dbg !4163
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !4164

if.then3:                                         ; preds = %if.then
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4165
  %ksize4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 6, !dbg !4167
  store i32 5, i32* %ksize4, align 8, !dbg !4168
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4169
  %ksize5 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 6, !dbg !4169
  %8 = load i32, i32* %ksize5, align 8, !dbg !4169
  %conv = sext i32 %8 to i64, !dbg !4169
  %mul = mul i64 8, %conv, !dbg !4169
  %call = call i8* @xmalloc(i64 %mul), !dbg !4169
  %9 = bitcast i8* %call to i8**, !dbg !4169
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4170
  %ktypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 2, !dbg !4171
  store i8** %9, i8*** %ktypevec, align 8, !dbg !4172
  br label %if.end, !dbg !4173

if.else:                                          ; preds = %if.then
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4174
  %ksize6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 6, !dbg !4176
  %12 = load i32, i32* %ksize6, align 8, !dbg !4177
  %mul7 = mul nsw i32 %12, 2, !dbg !4177
  store i32 %mul7, i32* %ksize6, align 8, !dbg !4177
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4178
  %ktypevec8 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 2, !dbg !4178
  %14 = load i8**, i8*** %ktypevec8, align 8, !dbg !4178
  %15 = bitcast i8** %14 to i8*, !dbg !4178
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4178
  %ksize9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 6, !dbg !4178
  %17 = load i32, i32* %ksize9, align 8, !dbg !4178
  %conv10 = sext i32 %17 to i64, !dbg !4178
  %mul11 = mul i64 8, %conv10, !dbg !4178
  %call12 = call i8* @xrealloc(i8* %15, i64 %mul11), !dbg !4178
  %18 = bitcast i8* %call12 to i8**, !dbg !4178
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4179
  %ktypevec13 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 2, !dbg !4180
  store i8** %18, i8*** %ktypevec13, align 8, !dbg !4181
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end14, !dbg !4182

if.end14:                                         ; preds = %if.end, %entry
  %20 = load i32, i32* %len.addr, align 4, !dbg !4183
  %add = add nsw i32 %20, 1, !dbg !4183
  %conv15 = sext i32 %add to i64, !dbg !4183
  %mul16 = mul i64 1, %conv15, !dbg !4183
  %call17 = call i8* @xmalloc(i64 %mul16), !dbg !4183
  store i8* %call17, i8** %tem, align 8, !dbg !4184
  %21 = load i8*, i8** %tem, align 8, !dbg !4185
  %22 = load i8*, i8** %start.addr, align 8, !dbg !4186
  %23 = load i32, i32* %len.addr, align 4, !dbg !4187
  %conv18 = sext i32 %23 to i64, !dbg !4187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %22, i64 %conv18, i1 false), !dbg !4188
  %24 = load i8*, i8** %tem, align 8, !dbg !4189
  %25 = load i32, i32* %len.addr, align 4, !dbg !4190
  %idxprom = sext i32 %25 to i64, !dbg !4189
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 %idxprom, !dbg !4189
  store i8 0, i8* %arrayidx, align 1, !dbg !4191
  %26 = load i8*, i8** %tem, align 8, !dbg !4192
  %27 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4193
  %ktypevec19 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %27, i32 0, i32 2, !dbg !4194
  %28 = load i8**, i8*** %ktypevec19, align 8, !dbg !4194
  %29 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4195
  %numk20 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %29, i32 0, i32 4, !dbg !4196
  %30 = load i32, i32* %numk20, align 8, !dbg !4197
  %inc = add nsw i32 %30, 1, !dbg !4197
  store i32 %inc, i32* %numk20, align 8, !dbg !4197
  %idxprom21 = sext i32 %30 to i64, !dbg !4193
  %arrayidx22 = getelementptr inbounds i8*, i8** %28, i64 %idxprom21, !dbg !4193
  store i8* %26, i8** %arrayidx22, align 8, !dbg !4198
  ret void, !dbg !4199
}

; Function Attrs: noinline nounwind uwtable
define internal void @remember_Btype(%struct.work_stuff* %work, i8* %start, i32 %len, i32 %index) #0 !dbg !4200 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %start.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %tem = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4203, metadata !DIExpression()), !dbg !4204
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !4205, metadata !DIExpression()), !dbg !4206
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !4207, metadata !DIExpression()), !dbg !4208
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !4209, metadata !DIExpression()), !dbg !4210
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !4211, metadata !DIExpression()), !dbg !4212
  %0 = load i32, i32* %len.addr, align 4, !dbg !4213
  %add = add nsw i32 %0, 1, !dbg !4213
  %conv = sext i32 %add to i64, !dbg !4213
  %mul = mul i64 1, %conv, !dbg !4213
  %call = call i8* @xmalloc(i64 %mul), !dbg !4213
  store i8* %call, i8** %tem, align 8, !dbg !4214
  %1 = load i8*, i8** %tem, align 8, !dbg !4215
  %2 = load i8*, i8** %start.addr, align 8, !dbg !4216
  %3 = load i32, i32* %len.addr, align 4, !dbg !4217
  %conv1 = sext i32 %3 to i64, !dbg !4217
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %conv1, i1 false), !dbg !4218
  %4 = load i8*, i8** %tem, align 8, !dbg !4219
  %5 = load i32, i32* %len.addr, align 4, !dbg !4220
  %idxprom = sext i32 %5 to i64, !dbg !4219
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !4219
  store i8 0, i8* %arrayidx, align 1, !dbg !4221
  %6 = load i8*, i8** %tem, align 8, !dbg !4222
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4223
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 3, !dbg !4224
  %8 = load i8**, i8*** %btypevec, align 8, !dbg !4224
  %9 = load i32, i32* %index.addr, align 4, !dbg !4225
  %idxprom2 = sext i32 %9 to i64, !dbg !4223
  %arrayidx3 = getelementptr inbounds i8*, i8** %8, i64 %idxprom2, !dbg !4223
  store i8* %6, i8** %arrayidx3, align 8, !dbg !4226
  ret void, !dbg !4227
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_prepends(%struct.string* %p, %struct.string* %s) #0 !dbg !4228 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca %struct.string*, align 8
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4233
  %b = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0, !dbg !4235
  %1 = load i8*, i8** %b, align 8, !dbg !4235
  %2 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4236
  %p1 = getelementptr inbounds %struct.string, %struct.string* %2, i32 0, i32 1, !dbg !4237
  %3 = load i8*, i8** %p1, align 8, !dbg !4237
  %cmp = icmp ne i8* %1, %3, !dbg !4238
  br i1 %cmp, label %if.then, label %if.end, !dbg !4239

if.then:                                          ; preds = %entry
  %4 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4240
  %5 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4242
  %b2 = getelementptr inbounds %struct.string, %struct.string* %5, i32 0, i32 0, !dbg !4243
  %6 = load i8*, i8** %b2, align 8, !dbg !4243
  %7 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4244
  %p3 = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 1, !dbg !4245
  %8 = load i8*, i8** %p3, align 8, !dbg !4245
  %9 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4246
  %b4 = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 0, !dbg !4247
  %10 = load i8*, i8** %b4, align 8, !dbg !4247
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64, !dbg !4248
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64, !dbg !4248
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4248
  %conv = trunc i64 %sub.ptr.sub to i32, !dbg !4244
  call void @string_prependn(%struct.string* %4, i8* %6, i32 %conv), !dbg !4249
  br label %if.end, !dbg !4250

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !4251
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @string_need(%struct.string* %s, i32 %n) #0 !dbg !4252 {
entry:
  %s.addr = alloca %struct.string*, align 8
  %n.addr = alloca i32, align 4
  %tem = alloca i32, align 4
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4255, metadata !DIExpression()), !dbg !4256
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4257, metadata !DIExpression()), !dbg !4258
  call void @llvm.dbg.declare(metadata i32* %tem, metadata !4259, metadata !DIExpression()), !dbg !4260
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4261
  %b = getelementptr inbounds %struct.string, %struct.string* %0, i32 0, i32 0, !dbg !4263
  %1 = load i8*, i8** %b, align 8, !dbg !4263
  %cmp = icmp eq i8* %1, null, !dbg !4264
  br i1 %cmp, label %if.then, label %if.else, !dbg !4265

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !dbg !4266
  %cmp1 = icmp slt i32 %2, 32, !dbg !4269
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !4270

if.then2:                                         ; preds = %if.then
  store i32 32, i32* %n.addr, align 4, !dbg !4271
  br label %if.end, !dbg !4273

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load i32, i32* %n.addr, align 4, !dbg !4274
  %conv = sext i32 %3 to i64, !dbg !4274
  %mul = mul i64 1, %conv, !dbg !4274
  %call = call i8* @xmalloc(i64 %mul), !dbg !4274
  %4 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4275
  %b3 = getelementptr inbounds %struct.string, %struct.string* %4, i32 0, i32 0, !dbg !4276
  store i8* %call, i8** %b3, align 8, !dbg !4277
  %5 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4278
  %p = getelementptr inbounds %struct.string, %struct.string* %5, i32 0, i32 1, !dbg !4279
  store i8* %call, i8** %p, align 8, !dbg !4280
  %6 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4281
  %b4 = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 0, !dbg !4282
  %7 = load i8*, i8** %b4, align 8, !dbg !4282
  %8 = load i32, i32* %n.addr, align 4, !dbg !4283
  %idx.ext = sext i32 %8 to i64, !dbg !4284
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext, !dbg !4284
  %9 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4285
  %e = getelementptr inbounds %struct.string, %struct.string* %9, i32 0, i32 2, !dbg !4286
  store i8* %add.ptr, i8** %e, align 8, !dbg !4287
  br label %if.end32, !dbg !4288

if.else:                                          ; preds = %entry
  %10 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4289
  %e5 = getelementptr inbounds %struct.string, %struct.string* %10, i32 0, i32 2, !dbg !4291
  %11 = load i8*, i8** %e5, align 8, !dbg !4291
  %12 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4292
  %p6 = getelementptr inbounds %struct.string, %struct.string* %12, i32 0, i32 1, !dbg !4293
  %13 = load i8*, i8** %p6, align 8, !dbg !4293
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64, !dbg !4294
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64, !dbg !4294
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4294
  %14 = load i32, i32* %n.addr, align 4, !dbg !4295
  %conv7 = sext i32 %14 to i64, !dbg !4295
  %cmp8 = icmp slt i64 %sub.ptr.sub, %conv7, !dbg !4296
  br i1 %cmp8, label %if.then10, label %if.end31, !dbg !4297

if.then10:                                        ; preds = %if.else
  %15 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4298
  %p11 = getelementptr inbounds %struct.string, %struct.string* %15, i32 0, i32 1, !dbg !4300
  %16 = load i8*, i8** %p11, align 8, !dbg !4300
  %17 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4301
  %b12 = getelementptr inbounds %struct.string, %struct.string* %17, i32 0, i32 0, !dbg !4302
  %18 = load i8*, i8** %b12, align 8, !dbg !4302
  %sub.ptr.lhs.cast13 = ptrtoint i8* %16 to i64, !dbg !4303
  %sub.ptr.rhs.cast14 = ptrtoint i8* %18 to i64, !dbg !4303
  %sub.ptr.sub15 = sub i64 %sub.ptr.lhs.cast13, %sub.ptr.rhs.cast14, !dbg !4303
  %conv16 = trunc i64 %sub.ptr.sub15 to i32, !dbg !4298
  store i32 %conv16, i32* %tem, align 4, !dbg !4304
  %19 = load i32, i32* %tem, align 4, !dbg !4305
  %20 = load i32, i32* %n.addr, align 4, !dbg !4306
  %add = add nsw i32 %20, %19, !dbg !4306
  store i32 %add, i32* %n.addr, align 4, !dbg !4306
  %21 = load i32, i32* %n.addr, align 4, !dbg !4307
  %mul17 = mul nsw i32 %21, 2, !dbg !4307
  store i32 %mul17, i32* %n.addr, align 4, !dbg !4307
  %22 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4308
  %b18 = getelementptr inbounds %struct.string, %struct.string* %22, i32 0, i32 0, !dbg !4308
  %23 = load i8*, i8** %b18, align 8, !dbg !4308
  %24 = load i32, i32* %n.addr, align 4, !dbg !4308
  %conv19 = sext i32 %24 to i64, !dbg !4308
  %mul20 = mul i64 1, %conv19, !dbg !4308
  %call21 = call i8* @xrealloc(i8* %23, i64 %mul20), !dbg !4308
  %25 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4309
  %b22 = getelementptr inbounds %struct.string, %struct.string* %25, i32 0, i32 0, !dbg !4310
  store i8* %call21, i8** %b22, align 8, !dbg !4311
  %26 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4312
  %b23 = getelementptr inbounds %struct.string, %struct.string* %26, i32 0, i32 0, !dbg !4313
  %27 = load i8*, i8** %b23, align 8, !dbg !4313
  %28 = load i32, i32* %tem, align 4, !dbg !4314
  %idx.ext24 = sext i32 %28 to i64, !dbg !4315
  %add.ptr25 = getelementptr inbounds i8, i8* %27, i64 %idx.ext24, !dbg !4315
  %29 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4316
  %p26 = getelementptr inbounds %struct.string, %struct.string* %29, i32 0, i32 1, !dbg !4317
  store i8* %add.ptr25, i8** %p26, align 8, !dbg !4318
  %30 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4319
  %b27 = getelementptr inbounds %struct.string, %struct.string* %30, i32 0, i32 0, !dbg !4320
  %31 = load i8*, i8** %b27, align 8, !dbg !4320
  %32 = load i32, i32* %n.addr, align 4, !dbg !4321
  %idx.ext28 = sext i32 %32 to i64, !dbg !4322
  %add.ptr29 = getelementptr inbounds i8, i8* %31, i64 %idx.ext28, !dbg !4322
  %33 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4323
  %e30 = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 2, !dbg !4324
  store i8* %add.ptr29, i8** %e30, align 8, !dbg !4325
  br label %if.end31, !dbg !4326

if.end31:                                         ; preds = %if.then10, %if.else
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.end
  ret void, !dbg !4327
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_prependn(%struct.string* %p, i8* %s, i32 %n) #0 !dbg !4328 {
entry:
  %p.addr = alloca %struct.string*, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %q = alloca i8*, align 8
  store %struct.string* %p, %struct.string** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %p.addr, metadata !4329, metadata !DIExpression()), !dbg !4330
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !4331, metadata !DIExpression()), !dbg !4332
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4333, metadata !DIExpression()), !dbg !4334
  call void @llvm.dbg.declare(metadata i8** %q, metadata !4335, metadata !DIExpression()), !dbg !4336
  %0 = load i32, i32* %n.addr, align 4, !dbg !4337
  %cmp = icmp ne i32 %0, 0, !dbg !4339
  br i1 %cmp, label %if.then, label %if.end, !dbg !4340

if.then:                                          ; preds = %entry
  %1 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4341
  %2 = load i32, i32* %n.addr, align 4, !dbg !4343
  call void @string_need(%struct.string* %1, i32 %2), !dbg !4344
  %3 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4345
  %p1 = getelementptr inbounds %struct.string, %struct.string* %3, i32 0, i32 1, !dbg !4347
  %4 = load i8*, i8** %p1, align 8, !dbg !4347
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 -1, !dbg !4348
  store i8* %add.ptr, i8** %q, align 8, !dbg !4349
  br label %for.cond, !dbg !4350

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i8*, i8** %q, align 8, !dbg !4351
  %6 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4353
  %b = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 0, !dbg !4354
  %7 = load i8*, i8** %b, align 8, !dbg !4354
  %cmp2 = icmp uge i8* %5, %7, !dbg !4355
  br i1 %cmp2, label %for.body, label %for.end, !dbg !4356

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %q, align 8, !dbg !4357
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0, !dbg !4357
  %9 = load i8, i8* %arrayidx, align 1, !dbg !4357
  %10 = load i8*, i8** %q, align 8, !dbg !4359
  %11 = load i32, i32* %n.addr, align 4, !dbg !4360
  %idxprom = sext i32 %11 to i64, !dbg !4359
  %arrayidx3 = getelementptr inbounds i8, i8* %10, i64 %idxprom, !dbg !4359
  store i8 %9, i8* %arrayidx3, align 1, !dbg !4361
  br label %for.inc, !dbg !4362

for.inc:                                          ; preds = %for.body
  %12 = load i8*, i8** %q, align 8, !dbg !4363
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 -1, !dbg !4363
  store i8* %incdec.ptr, i8** %q, align 8, !dbg !4363
  br label %for.cond, !dbg !4364, !llvm.loop !4365

for.end:                                          ; preds = %for.cond
  %13 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4367
  %b4 = getelementptr inbounds %struct.string, %struct.string* %13, i32 0, i32 0, !dbg !4368
  %14 = load i8*, i8** %b4, align 8, !dbg !4368
  %15 = load i8*, i8** %s.addr, align 8, !dbg !4369
  %16 = load i32, i32* %n.addr, align 4, !dbg !4370
  %conv = sext i32 %16 to i64, !dbg !4370
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %15, i64 %conv, i1 false), !dbg !4371
  %17 = load i32, i32* %n.addr, align 4, !dbg !4372
  %18 = load %struct.string*, %struct.string** %p.addr, align 8, !dbg !4373
  %p5 = getelementptr inbounds %struct.string, %struct.string* %18, i32 0, i32 1, !dbg !4374
  %19 = load i8*, i8** %p5, align 8, !dbg !4375
  %idx.ext = sext i32 %17 to i64, !dbg !4375
  %add.ptr6 = getelementptr inbounds i8, i8* %19, i64 %idx.ext, !dbg !4375
  store i8* %add.ptr6, i8** %p5, align 8, !dbg !4375
  br label %if.end, !dbg !4376

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !4377
}

; Function Attrs: noinline nounwind uwtable
define internal void @string_append_template_idx(%struct.string* %s, i32 %idx) #0 !dbg !4378 {
entry:
  %s.addr = alloca %struct.string*, align 8
  %idx.addr = alloca i32, align 4
  %buf = alloca [33 x i8], align 16
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !4381, metadata !DIExpression()), !dbg !4382
  call void @llvm.dbg.declare(metadata [33 x i8]* %buf, metadata !4383, metadata !DIExpression()), !dbg !4387
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %buf, i64 0, i64 0, !dbg !4388
  %0 = load i32, i32* %idx.addr, align 4, !dbg !4389
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.199, i64 0, i64 0), i32 %0), !dbg !4390
  %1 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4391
  %arraydecay1 = getelementptr inbounds [33 x i8], [33 x i8]* %buf, i64 0, i64 0, !dbg !4392
  call void @string_append(%struct.string* %1, i8* %arraydecay1), !dbg !4393
  ret void, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_count(i8** %type, i32* %count) #0 !dbg !4395 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca i8**, align 8
  %count.addr = alloca i32*, align 8
  %p = alloca i8*, align 8
  %n = alloca i32, align 4
  store i8** %type, i8*** %type.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %type.addr, metadata !4399, metadata !DIExpression()), !dbg !4400
  store i32* %count, i32** %count.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %count.addr, metadata !4401, metadata !DIExpression()), !dbg !4402
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4403, metadata !DIExpression()), !dbg !4404
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4405, metadata !DIExpression()), !dbg !4406
  %0 = load i8**, i8*** %type.addr, align 8, !dbg !4407
  %1 = load i8*, i8** %0, align 8, !dbg !4407
  %2 = load i8, i8* %1, align 1, !dbg !4407
  %conv = zext i8 %2 to i32, !dbg !4407
  %and = and i32 %conv, 255, !dbg !4407
  %idxprom = sext i32 %and to i64, !dbg !4407
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !4407
  %3 = load i16, i16* %arrayidx, align 2, !dbg !4407
  %conv1 = zext i16 %3 to i32, !dbg !4407
  %and2 = and i32 %conv1, 4, !dbg !4407
  %tobool = icmp ne i32 %and2, 0, !dbg !4407
  br i1 %tobool, label %if.else, label %if.then, !dbg !4409

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4410
  br label %return, !dbg !4410

if.else:                                          ; preds = %entry
  %4 = load i8**, i8*** %type.addr, align 8, !dbg !4411
  %5 = load i8*, i8** %4, align 8, !dbg !4413
  %6 = load i8, i8* %5, align 1, !dbg !4414
  %conv3 = sext i8 %6 to i32, !dbg !4414
  %sub = sub nsw i32 %conv3, 48, !dbg !4415
  %7 = load i32*, i32** %count.addr, align 8, !dbg !4416
  store i32 %sub, i32* %7, align 4, !dbg !4417
  %8 = load i8**, i8*** %type.addr, align 8, !dbg !4418
  %9 = load i8*, i8** %8, align 8, !dbg !4419
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !4419
  store i8* %incdec.ptr, i8** %8, align 8, !dbg !4419
  %10 = load i8**, i8*** %type.addr, align 8, !dbg !4420
  %11 = load i8*, i8** %10, align 8, !dbg !4420
  %12 = load i8, i8* %11, align 1, !dbg !4420
  %conv4 = zext i8 %12 to i32, !dbg !4420
  %and5 = and i32 %conv4, 255, !dbg !4420
  %idxprom6 = sext i32 %and5 to i64, !dbg !4420
  %arrayidx7 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom6, !dbg !4420
  %13 = load i16, i16* %arrayidx7, align 2, !dbg !4420
  %conv8 = zext i16 %13 to i32, !dbg !4420
  %and9 = and i32 %conv8, 4, !dbg !4420
  %tobool10 = icmp ne i32 %and9, 0, !dbg !4420
  br i1 %tobool10, label %if.then11, label %if.end25, !dbg !4422

if.then11:                                        ; preds = %if.else
  %14 = load i8**, i8*** %type.addr, align 8, !dbg !4423
  %15 = load i8*, i8** %14, align 8, !dbg !4425
  store i8* %15, i8** %p, align 8, !dbg !4426
  %16 = load i32*, i32** %count.addr, align 8, !dbg !4427
  %17 = load i32, i32* %16, align 4, !dbg !4428
  store i32 %17, i32* %n, align 4, !dbg !4429
  br label %do.body, !dbg !4430

do.body:                                          ; preds = %do.cond, %if.then11
  %18 = load i32, i32* %n, align 4, !dbg !4431
  %mul = mul nsw i32 %18, 10, !dbg !4431
  store i32 %mul, i32* %n, align 4, !dbg !4431
  %19 = load i8*, i8** %p, align 8, !dbg !4433
  %20 = load i8, i8* %19, align 1, !dbg !4434
  %conv12 = sext i8 %20 to i32, !dbg !4434
  %sub13 = sub nsw i32 %conv12, 48, !dbg !4435
  %21 = load i32, i32* %n, align 4, !dbg !4436
  %add = add nsw i32 %21, %sub13, !dbg !4436
  store i32 %add, i32* %n, align 4, !dbg !4436
  %22 = load i8*, i8** %p, align 8, !dbg !4437
  %incdec.ptr14 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !4437
  store i8* %incdec.ptr14, i8** %p, align 8, !dbg !4437
  br label %do.cond, !dbg !4438

do.cond:                                          ; preds = %do.body
  %23 = load i8*, i8** %p, align 8, !dbg !4439
  %24 = load i8, i8* %23, align 1, !dbg !4439
  %conv15 = zext i8 %24 to i32, !dbg !4439
  %and16 = and i32 %conv15, 255, !dbg !4439
  %idxprom17 = sext i32 %and16 to i64, !dbg !4439
  %arrayidx18 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom17, !dbg !4439
  %25 = load i16, i16* %arrayidx18, align 2, !dbg !4439
  %conv19 = zext i16 %25 to i32, !dbg !4439
  %and20 = and i32 %conv19, 4, !dbg !4439
  %tobool21 = icmp ne i32 %and20, 0, !dbg !4438
  br i1 %tobool21, label %do.body, label %do.end, !dbg !4438, !llvm.loop !4440

do.end:                                           ; preds = %do.cond
  %26 = load i8*, i8** %p, align 8, !dbg !4442
  %27 = load i8, i8* %26, align 1, !dbg !4444
  %conv22 = sext i8 %27 to i32, !dbg !4444
  %cmp = icmp eq i32 %conv22, 95, !dbg !4445
  br i1 %cmp, label %if.then24, label %if.end, !dbg !4446

if.then24:                                        ; preds = %do.end
  %28 = load i8*, i8** %p, align 8, !dbg !4447
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 1, !dbg !4449
  %29 = load i8**, i8*** %type.addr, align 8, !dbg !4450
  store i8* %add.ptr, i8** %29, align 8, !dbg !4451
  %30 = load i32, i32* %n, align 4, !dbg !4452
  %31 = load i32*, i32** %count.addr, align 8, !dbg !4453
  store i32 %30, i32* %31, align 4, !dbg !4454
  br label %if.end, !dbg !4455

if.end:                                           ; preds = %if.then24, %do.end
  br label %if.end25, !dbg !4456

if.end25:                                         ; preds = %if.end, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end25
  store i32 1, i32* %retval, align 4, !dbg !4457
  br label %return, !dbg !4457

return:                                           ; preds = %if.end26, %if.then
  %32 = load i32, i32* %retval, align 4, !dbg !4458
  ret i32 %32, !dbg !4458
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_template_template_parm(%struct.work_stuff* %work, i8** %mangled, %struct.string* %tname) #0 !dbg !4459 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %tname.addr = alloca %struct.string*, align 8
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %need_comma = alloca i32, align 4
  %success = alloca i32, align 4
  %temp = alloca %struct.string, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4460, metadata !DIExpression()), !dbg !4461
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !4462, metadata !DIExpression()), !dbg !4463
  store %struct.string* %tname, %struct.string** %tname.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %tname.addr, metadata !4464, metadata !DIExpression()), !dbg !4465
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4466, metadata !DIExpression()), !dbg !4467
  call void @llvm.dbg.declare(metadata i32* %r, metadata !4468, metadata !DIExpression()), !dbg !4469
  call void @llvm.dbg.declare(metadata i32* %need_comma, metadata !4470, metadata !DIExpression()), !dbg !4471
  store i32 0, i32* %need_comma, align 4, !dbg !4471
  call void @llvm.dbg.declare(metadata i32* %success, metadata !4472, metadata !DIExpression()), !dbg !4473
  store i32 1, i32* %success, align 4, !dbg !4473
  call void @llvm.dbg.declare(metadata %struct.string* %temp, metadata !4474, metadata !DIExpression()), !dbg !4475
  %0 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4476
  call void @string_append(%struct.string* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.200, i64 0, i64 0)), !dbg !4477
  %1 = load i8**, i8*** %mangled.addr, align 8, !dbg !4478
  %call = call i32 @get_count(i8** %1, i32* %r), !dbg !4480
  %tobool = icmp ne i32 %call, 0, !dbg !4480
  br i1 %tobool, label %if.then, label %if.end25, !dbg !4481

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4482
  br label %for.cond, !dbg !4485

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !4486
  %3 = load i32, i32* %r, align 4, !dbg !4488
  %cmp = icmp slt i32 %2, %3, !dbg !4489
  br i1 %cmp, label %for.body, label %for.end, !dbg !4490

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %need_comma, align 4, !dbg !4491
  %tobool1 = icmp ne i32 %4, 0, !dbg !4491
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !4494

if.then2:                                         ; preds = %for.body
  %5 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4495
  call void @string_append(%struct.string* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0)), !dbg !4497
  br label %if.end, !dbg !4498

if.end:                                           ; preds = %if.then2, %for.body
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !4499
  %7 = load i8*, i8** %6, align 8, !dbg !4501
  %8 = load i8, i8* %7, align 1, !dbg !4502
  %conv = sext i8 %8 to i32, !dbg !4502
  %cmp3 = icmp eq i32 %conv, 90, !dbg !4503
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !4504

if.then5:                                         ; preds = %if.end
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !4505
  %10 = load i8*, i8** %9, align 8, !dbg !4507
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !4507
  store i8* %incdec.ptr, i8** %9, align 8, !dbg !4507
  %11 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4508
  call void @string_append(%struct.string* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.201, i64 0, i64 0)), !dbg !4509
  br label %if.end24, !dbg !4510

if.else:                                          ; preds = %if.end
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !4511
  %13 = load i8*, i8** %12, align 8, !dbg !4513
  %14 = load i8, i8* %13, align 1, !dbg !4514
  %conv6 = sext i8 %14 to i32, !dbg !4514
  %cmp7 = icmp eq i32 %conv6, 122, !dbg !4515
  br i1 %cmp7, label %if.then9, label %if.else15, !dbg !4516

if.then9:                                         ; preds = %if.else
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !4517
  %16 = load i8*, i8** %15, align 8, !dbg !4519
  %incdec.ptr10 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !4519
  store i8* %incdec.ptr10, i8** %15, align 8, !dbg !4519
  %17 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4520
  %18 = load i8**, i8*** %mangled.addr, align 8, !dbg !4521
  %19 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4522
  %call11 = call i32 @demangle_template_template_parm(%struct.work_stuff* %17, i8** %18, %struct.string* %19), !dbg !4523
  store i32 %call11, i32* %success, align 4, !dbg !4524
  %20 = load i32, i32* %success, align 4, !dbg !4525
  %tobool12 = icmp ne i32 %20, 0, !dbg !4525
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4527

if.then13:                                        ; preds = %if.then9
  br label %for.end, !dbg !4528

if.end14:                                         ; preds = %if.then9
  br label %if.end23, !dbg !4530

if.else15:                                        ; preds = %if.else
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4531
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !4533
  %call16 = call i32 @do_type(%struct.work_stuff* %21, i8** %22, %struct.string* %temp), !dbg !4534
  store i32 %call16, i32* %success, align 4, !dbg !4535
  %23 = load i32, i32* %success, align 4, !dbg !4536
  %tobool17 = icmp ne i32 %23, 0, !dbg !4536
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4538

if.then18:                                        ; preds = %if.else15
  %24 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4539
  call void @string_appends(%struct.string* %24, %struct.string* %temp), !dbg !4541
  br label %if.end19, !dbg !4542

if.end19:                                         ; preds = %if.then18, %if.else15
  call void @string_delete(%struct.string* %temp), !dbg !4543
  %25 = load i32, i32* %success, align 4, !dbg !4544
  %tobool20 = icmp ne i32 %25, 0, !dbg !4544
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !4546

if.then21:                                        ; preds = %if.end19
  br label %for.end, !dbg !4547

if.end22:                                         ; preds = %if.end19
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end14
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then5
  store i32 1, i32* %need_comma, align 4, !dbg !4549
  br label %for.inc, !dbg !4550

for.inc:                                          ; preds = %if.end24
  %26 = load i32, i32* %i, align 4, !dbg !4551
  %inc = add nsw i32 %26, 1, !dbg !4551
  store i32 %inc, i32* %i, align 4, !dbg !4551
  br label %for.cond, !dbg !4552, !llvm.loop !4553

for.end:                                          ; preds = %if.then21, %if.then13, %for.cond
  br label %if.end25, !dbg !4555

if.end25:                                         ; preds = %for.end, %entry
  %27 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4556
  %p = getelementptr inbounds %struct.string, %struct.string* %27, i32 0, i32 1, !dbg !4558
  %28 = load i8*, i8** %p, align 8, !dbg !4558
  %arrayidx = getelementptr inbounds i8, i8* %28, i64 -1, !dbg !4556
  %29 = load i8, i8* %arrayidx, align 1, !dbg !4556
  %conv26 = sext i8 %29 to i32, !dbg !4556
  %cmp27 = icmp eq i32 %conv26, 62, !dbg !4559
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !4560

if.then29:                                        ; preds = %if.end25
  %30 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4561
  call void @string_append(%struct.string* %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !4562
  br label %if.end30, !dbg !4562

if.end30:                                         ; preds = %if.then29, %if.end25
  %31 = load %struct.string*, %struct.string** %tname.addr, align 8, !dbg !4563
  call void @string_append(%struct.string* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.202, i64 0, i64 0)), !dbg !4564
  %32 = load i32, i32* %success, align 4, !dbg !4565
  ret i32 %32, !dbg !4566
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_template_value_parm(%struct.work_stuff* %work, i8** %mangled, %struct.string* %s, i32 %tk) #0 !dbg !4567 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %s.addr = alloca %struct.string*, align 8
  %tk.addr = alloca i32, align 4
  %success = alloca i32, align 4
  %idx = alloca i32, align 4
  %tmp = alloca [2 x i8], align 1
  %val = alloca i32, align 4
  %val45 = alloca i32, align 4
  %symbol_len = alloca i32, align 4
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4570, metadata !DIExpression()), !dbg !4571
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !4572, metadata !DIExpression()), !dbg !4573
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4574, metadata !DIExpression()), !dbg !4575
  store i32 %tk, i32* %tk.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tk.addr, metadata !4576, metadata !DIExpression()), !dbg !4577
  call void @llvm.dbg.declare(metadata i32* %success, metadata !4578, metadata !DIExpression()), !dbg !4579
  store i32 1, i32* %success, align 4, !dbg !4579
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !4580
  %1 = load i8*, i8** %0, align 8, !dbg !4582
  %2 = load i8, i8* %1, align 1, !dbg !4583
  %conv = sext i8 %2 to i32, !dbg !4583
  %cmp = icmp eq i32 %conv, 89, !dbg !4584
  br i1 %cmp, label %if.then, label %if.else16, !dbg !4585

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !4586, metadata !DIExpression()), !dbg !4588
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !4589
  %4 = load i8*, i8** %3, align 8, !dbg !4590
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !4590
  store i8* %incdec.ptr, i8** %3, align 8, !dbg !4590
  %5 = load i8**, i8*** %mangled.addr, align 8, !dbg !4591
  %call = call i32 @consume_count_with_underscores(i8** %5), !dbg !4592
  store i32 %call, i32* %idx, align 4, !dbg !4593
  %6 = load i32, i32* %idx, align 4, !dbg !4594
  %cmp2 = icmp eq i32 %6, -1, !dbg !4596
  br i1 %cmp2, label %if.then10, label %lor.lhs.false, !dbg !4597

lor.lhs.false:                                    ; preds = %if.then
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4598
  %tmpl_argvec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 16, !dbg !4599
  %8 = load i8**, i8*** %tmpl_argvec, align 8, !dbg !4599
  %tobool = icmp ne i8** %8, null, !dbg !4598
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false6, !dbg !4600

land.lhs.true:                                    ; preds = %lor.lhs.false
  %9 = load i32, i32* %idx, align 4, !dbg !4601
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4602
  %ntmpl_args = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 17, !dbg !4603
  %11 = load i32, i32* %ntmpl_args, align 8, !dbg !4603
  %cmp4 = icmp sge i32 %9, %11, !dbg !4604
  br i1 %cmp4, label %if.then10, label %lor.lhs.false6, !dbg !4605

lor.lhs.false6:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !4606
  %call7 = call i32 @consume_count_with_underscores(i8** %12), !dbg !4607
  %cmp8 = icmp eq i32 %call7, -1, !dbg !4608
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !4609

if.then10:                                        ; preds = %lor.lhs.false6, %land.lhs.true, %if.then
  store i32 -1, i32* %retval, align 4, !dbg !4610
  br label %return, !dbg !4610

if.end:                                           ; preds = %lor.lhs.false6
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4611
  %tmpl_argvec11 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 16, !dbg !4613
  %14 = load i8**, i8*** %tmpl_argvec11, align 8, !dbg !4613
  %tobool12 = icmp ne i8** %14, null, !dbg !4611
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !4614

if.then13:                                        ; preds = %if.end
  %15 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4615
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4616
  %tmpl_argvec14 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 16, !dbg !4617
  %17 = load i8**, i8*** %tmpl_argvec14, align 8, !dbg !4617
  %18 = load i32, i32* %idx, align 4, !dbg !4618
  %idxprom = sext i32 %18 to i64, !dbg !4616
  %arrayidx = getelementptr inbounds i8*, i8** %17, i64 %idxprom, !dbg !4616
  %19 = load i8*, i8** %arrayidx, align 8, !dbg !4616
  call void @string_append(%struct.string* %15, i8* %19), !dbg !4619
  br label %if.end15, !dbg !4619

if.else:                                          ; preds = %if.end
  %20 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4620
  %21 = load i32, i32* %idx, align 4, !dbg !4621
  call void @string_append_template_idx(%struct.string* %20, i32 %21), !dbg !4622
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then13
  br label %if.end106, !dbg !4623

if.else16:                                        ; preds = %entry
  %22 = load i32, i32* %tk.addr, align 4, !dbg !4624
  %cmp17 = icmp eq i32 %22, 3, !dbg !4626
  br i1 %cmp17, label %if.then19, label %if.else21, !dbg !4627

if.then19:                                        ; preds = %if.else16
  %23 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4628
  %24 = load i8**, i8*** %mangled.addr, align 8, !dbg !4629
  %25 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4630
  %call20 = call i32 @demangle_integral_value(%struct.work_stuff* %23, i8** %24, %struct.string* %25), !dbg !4631
  store i32 %call20, i32* %success, align 4, !dbg !4632
  br label %if.end105, !dbg !4633

if.else21:                                        ; preds = %if.else16
  %26 = load i32, i32* %tk.addr, align 4, !dbg !4634
  %cmp22 = icmp eq i32 %26, 5, !dbg !4636
  br i1 %cmp22, label %if.then24, label %if.else41, !dbg !4637

if.then24:                                        ; preds = %if.else21
  call void @llvm.dbg.declare(metadata [2 x i8]* %tmp, metadata !4638, metadata !DIExpression()), !dbg !4640
  call void @llvm.dbg.declare(metadata i32* %val, metadata !4641, metadata !DIExpression()), !dbg !4642
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !4643
  %28 = load i8*, i8** %27, align 8, !dbg !4645
  %29 = load i8, i8* %28, align 1, !dbg !4646
  %conv25 = sext i8 %29 to i32, !dbg !4646
  %cmp26 = icmp eq i32 %conv25, 109, !dbg !4647
  br i1 %cmp26, label %if.then28, label %if.end30, !dbg !4648

if.then28:                                        ; preds = %if.then24
  %30 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4649
  call void @string_appendn(%struct.string* %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0), i32 1), !dbg !4651
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !4652
  %32 = load i8*, i8** %31, align 8, !dbg !4653
  %incdec.ptr29 = getelementptr inbounds i8, i8* %32, i32 1, !dbg !4653
  store i8* %incdec.ptr29, i8** %31, align 8, !dbg !4653
  br label %if.end30, !dbg !4654

if.end30:                                         ; preds = %if.then28, %if.then24
  %33 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4655
  call void @string_appendn(%struct.string* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i64 0, i64 0), i32 1), !dbg !4656
  %34 = load i8**, i8*** %mangled.addr, align 8, !dbg !4657
  %call31 = call i32 @consume_count(i8** %34), !dbg !4658
  store i32 %call31, i32* %val, align 4, !dbg !4659
  %35 = load i32, i32* %val, align 4, !dbg !4660
  %cmp32 = icmp sle i32 %35, 0, !dbg !4662
  br i1 %cmp32, label %if.then34, label %if.else35, !dbg !4663

if.then34:                                        ; preds = %if.end30
  store i32 0, i32* %success, align 4, !dbg !4664
  br label %if.end40, !dbg !4665

if.else35:                                        ; preds = %if.end30
  %36 = load i32, i32* %val, align 4, !dbg !4666
  %conv36 = trunc i32 %36 to i8, !dbg !4668
  %arrayidx37 = getelementptr inbounds [2 x i8], [2 x i8]* %tmp, i64 0, i64 0, !dbg !4669
  store i8 %conv36, i8* %arrayidx37, align 1, !dbg !4670
  %arrayidx38 = getelementptr inbounds [2 x i8], [2 x i8]* %tmp, i64 0, i64 1, !dbg !4671
  store i8 0, i8* %arrayidx38, align 1, !dbg !4672
  %37 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4673
  %arrayidx39 = getelementptr inbounds [2 x i8], [2 x i8]* %tmp, i64 0, i64 0, !dbg !4674
  call void @string_appendn(%struct.string* %37, i8* %arrayidx39, i32 1), !dbg !4675
  %38 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4676
  call void @string_appendn(%struct.string* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.203, i64 0, i64 0), i32 1), !dbg !4677
  br label %if.end40

if.end40:                                         ; preds = %if.else35, %if.then34
  br label %if.end104, !dbg !4678

if.else41:                                        ; preds = %if.else21
  %39 = load i32, i32* %tk.addr, align 4, !dbg !4679
  %cmp42 = icmp eq i32 %39, 4, !dbg !4681
  br i1 %cmp42, label %if.then44, label %if.else57, !dbg !4682

if.then44:                                        ; preds = %if.else41
  call void @llvm.dbg.declare(metadata i32* %val45, metadata !4683, metadata !DIExpression()), !dbg !4685
  %40 = load i8**, i8*** %mangled.addr, align 8, !dbg !4686
  %call46 = call i32 @consume_count(i8** %40), !dbg !4687
  store i32 %call46, i32* %val45, align 4, !dbg !4685
  %41 = load i32, i32* %val45, align 4, !dbg !4688
  %cmp47 = icmp eq i32 %41, 0, !dbg !4690
  br i1 %cmp47, label %if.then49, label %if.else50, !dbg !4691

if.then49:                                        ; preds = %if.then44
  %42 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4692
  call void @string_appendn(%struct.string* %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.204, i64 0, i64 0), i32 5), !dbg !4693
  br label %if.end56, !dbg !4693

if.else50:                                        ; preds = %if.then44
  %43 = load i32, i32* %val45, align 4, !dbg !4694
  %cmp51 = icmp eq i32 %43, 1, !dbg !4696
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !4697

if.then53:                                        ; preds = %if.else50
  %44 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4698
  call void @string_appendn(%struct.string* %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.205, i64 0, i64 0), i32 4), !dbg !4699
  br label %if.end55, !dbg !4699

if.else54:                                        ; preds = %if.else50
  store i32 0, i32* %success, align 4, !dbg !4700
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then53
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.then49
  br label %if.end103, !dbg !4701

if.else57:                                        ; preds = %if.else41
  %45 = load i32, i32* %tk.addr, align 4, !dbg !4702
  %cmp58 = icmp eq i32 %45, 6, !dbg !4704
  br i1 %cmp58, label %if.then60, label %if.else62, !dbg !4705

if.then60:                                        ; preds = %if.else57
  %46 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4706
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !4707
  %48 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4708
  %call61 = call i32 @demangle_real_value(%struct.work_stuff* %46, i8** %47, %struct.string* %48), !dbg !4709
  store i32 %call61, i32* %success, align 4, !dbg !4710
  br label %if.end102, !dbg !4711

if.else62:                                        ; preds = %if.else57
  %49 = load i32, i32* %tk.addr, align 4, !dbg !4712
  %cmp63 = icmp eq i32 %49, 1, !dbg !4714
  br i1 %cmp63, label %if.then68, label %lor.lhs.false65, !dbg !4715

lor.lhs.false65:                                  ; preds = %if.else62
  %50 = load i32, i32* %tk.addr, align 4, !dbg !4716
  %cmp66 = icmp eq i32 %50, 2, !dbg !4717
  br i1 %cmp66, label %if.then68, label %if.end101, !dbg !4718

if.then68:                                        ; preds = %lor.lhs.false65, %if.else62
  %51 = load i8**, i8*** %mangled.addr, align 8, !dbg !4719
  %52 = load i8*, i8** %51, align 8, !dbg !4722
  %53 = load i8, i8* %52, align 1, !dbg !4723
  %conv69 = sext i8 %53 to i32, !dbg !4723
  %cmp70 = icmp eq i32 %conv69, 81, !dbg !4724
  br i1 %cmp70, label %if.then72, label %if.else74, !dbg !4725

if.then72:                                        ; preds = %if.then68
  %54 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4726
  %55 = load i8**, i8*** %mangled.addr, align 8, !dbg !4727
  %56 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4728
  %call73 = call i32 @demangle_qualified(%struct.work_stuff* %54, i8** %55, %struct.string* %56, i32 0, i32 1), !dbg !4729
  store i32 %call73, i32* %success, align 4, !dbg !4730
  br label %if.end100, !dbg !4731

if.else74:                                        ; preds = %if.then68
  call void @llvm.dbg.declare(metadata i32* %symbol_len, metadata !4732, metadata !DIExpression()), !dbg !4734
  %57 = load i8**, i8*** %mangled.addr, align 8, !dbg !4735
  %call75 = call i32 @consume_count(i8** %57), !dbg !4736
  store i32 %call75, i32* %symbol_len, align 4, !dbg !4734
  %58 = load i32, i32* %symbol_len, align 4, !dbg !4737
  %cmp76 = icmp eq i32 %58, -1, !dbg !4739
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !4740

if.then78:                                        ; preds = %if.else74
  store i32 -1, i32* %retval, align 4, !dbg !4741
  br label %return, !dbg !4741

if.end79:                                         ; preds = %if.else74
  %59 = load i32, i32* %symbol_len, align 4, !dbg !4742
  %cmp80 = icmp eq i32 %59, 0, !dbg !4744
  br i1 %cmp80, label %if.then82, label %if.else83, !dbg !4745

if.then82:                                        ; preds = %if.end79
  %60 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4746
  call void @string_appendn(%struct.string* %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.206, i64 0, i64 0), i32 1), !dbg !4747
  br label %if.end99, !dbg !4747

if.else83:                                        ; preds = %if.end79
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4748, metadata !DIExpression()), !dbg !4750
  %61 = load i32, i32* %symbol_len, align 4, !dbg !4751
  %add = add nsw i32 %61, 1, !dbg !4751
  %conv84 = sext i32 %add to i64, !dbg !4751
  %mul = mul i64 1, %conv84, !dbg !4751
  %call85 = call i8* @xmalloc(i64 %mul), !dbg !4751
  store i8* %call85, i8** %p, align 8, !dbg !4750
  call void @llvm.dbg.declare(metadata i8** %q, metadata !4752, metadata !DIExpression()), !dbg !4753
  %62 = load i8*, i8** %p, align 8, !dbg !4754
  %63 = load i8**, i8*** %mangled.addr, align 8, !dbg !4755
  %64 = load i8*, i8** %63, align 8, !dbg !4756
  %65 = load i32, i32* %symbol_len, align 4, !dbg !4757
  %conv86 = sext i32 %65 to i64, !dbg !4757
  %call87 = call i8* @strncpy(i8* %62, i8* %64, i64 %conv86), !dbg !4758
  %66 = load i8*, i8** %p, align 8, !dbg !4759
  %67 = load i32, i32* %symbol_len, align 4, !dbg !4760
  %idxprom88 = sext i32 %67 to i64, !dbg !4759
  %arrayidx89 = getelementptr inbounds i8, i8* %66, i64 %idxprom88, !dbg !4759
  store i8 0, i8* %arrayidx89, align 1, !dbg !4761
  %68 = load i8*, i8** %p, align 8, !dbg !4762
  %69 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4763
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %69, i32 0, i32 0, !dbg !4764
  %70 = load i32, i32* %options, align 8, !dbg !4764
  %call90 = call i8* @cplus_demangle(i8* %68, i32 %70), !dbg !4765
  store i8* %call90, i8** %q, align 8, !dbg !4766
  %71 = load i32, i32* %tk.addr, align 4, !dbg !4767
  %cmp91 = icmp eq i32 %71, 1, !dbg !4769
  br i1 %cmp91, label %if.then93, label %if.end94, !dbg !4770

if.then93:                                        ; preds = %if.else83
  %72 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4771
  call void @string_appendn(%struct.string* %72, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i64 0, i64 0), i32 1), !dbg !4772
  br label %if.end94, !dbg !4772

if.end94:                                         ; preds = %if.then93, %if.else83
  %73 = load i8*, i8** %q, align 8, !dbg !4773
  %tobool95 = icmp ne i8* %73, null, !dbg !4773
  br i1 %tobool95, label %if.then96, label %if.else97, !dbg !4775

if.then96:                                        ; preds = %if.end94
  %74 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4776
  %75 = load i8*, i8** %q, align 8, !dbg !4778
  call void @string_append(%struct.string* %74, i8* %75), !dbg !4779
  %76 = load i8*, i8** %q, align 8, !dbg !4780
  call void @free(i8* %76), !dbg !4781
  br label %if.end98, !dbg !4782

if.else97:                                        ; preds = %if.end94
  %77 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4783
  %78 = load i8*, i8** %p, align 8, !dbg !4784
  call void @string_append(%struct.string* %77, i8* %78), !dbg !4785
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.then96
  %79 = load i8*, i8** %p, align 8, !dbg !4786
  call void @free(i8* %79), !dbg !4787
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.then82
  %80 = load i32, i32* %symbol_len, align 4, !dbg !4788
  %81 = load i8**, i8*** %mangled.addr, align 8, !dbg !4789
  %82 = load i8*, i8** %81, align 8, !dbg !4790
  %idx.ext = sext i32 %80 to i64, !dbg !4790
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 %idx.ext, !dbg !4790
  store i8* %add.ptr, i8** %81, align 8, !dbg !4790
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then72
  br label %if.end101, !dbg !4791

if.end101:                                        ; preds = %if.end100, %lor.lhs.false65
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then60
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.end56
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end40
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then19
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.end15
  %83 = load i32, i32* %success, align 4, !dbg !4792
  store i32 %83, i32* %retval, align 4, !dbg !4793
  br label %return, !dbg !4793

return:                                           ; preds = %if.end106, %if.then78, %if.then10
  %84 = load i32, i32* %retval, align 4, !dbg !4794
  ret i32 %84, !dbg !4794
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_integral_value(%struct.work_stuff* %work, i8** %mangled, %struct.string* %s) #0 !dbg !4795 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %s.addr = alloca %struct.string*, align 8
  %success = alloca i32, align 4
  %value = alloca i32, align 4
  %multidigit_without_leading_underscore = alloca i32, align 4
  %leave_following_underscore = alloca i32, align 4
  %buf = alloca [32 x i8], align 16
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !4798, metadata !DIExpression()), !dbg !4799
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4800, metadata !DIExpression()), !dbg !4801
  call void @llvm.dbg.declare(metadata i32* %success, metadata !4802, metadata !DIExpression()), !dbg !4803
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !4804
  %1 = load i8*, i8** %0, align 8, !dbg !4806
  %2 = load i8, i8* %1, align 1, !dbg !4807
  %conv = sext i8 %2 to i32, !dbg !4807
  %cmp = icmp eq i32 %conv, 69, !dbg !4808
  br i1 %cmp, label %if.then, label %if.else, !dbg !4809

if.then:                                          ; preds = %entry
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4810
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !4811
  %5 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4812
  %call = call i32 @demangle_expression(%struct.work_stuff* %3, i8** %4, %struct.string* %5, i32 3), !dbg !4813
  store i32 %call, i32* %success, align 4, !dbg !4814
  br label %if.end52, !dbg !4815

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !4816
  %7 = load i8*, i8** %6, align 8, !dbg !4818
  %8 = load i8, i8* %7, align 1, !dbg !4819
  %conv2 = sext i8 %8 to i32, !dbg !4819
  %cmp3 = icmp eq i32 %conv2, 81, !dbg !4820
  br i1 %cmp3, label %if.then8, label %lor.lhs.false, !dbg !4821

lor.lhs.false:                                    ; preds = %if.else
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !4822
  %10 = load i8*, i8** %9, align 8, !dbg !4823
  %11 = load i8, i8* %10, align 1, !dbg !4824
  %conv5 = sext i8 %11 to i32, !dbg !4824
  %cmp6 = icmp eq i32 %conv5, 75, !dbg !4825
  br i1 %cmp6, label %if.then8, label %if.else10, !dbg !4826

if.then8:                                         ; preds = %lor.lhs.false, %if.else
  %12 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4827
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !4828
  %14 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4829
  %call9 = call i32 @demangle_qualified(%struct.work_stuff* %12, i8** %13, %struct.string* %14, i32 0, i32 1), !dbg !4830
  store i32 %call9, i32* %success, align 4, !dbg !4831
  br label %if.end51, !dbg !4832

if.else10:                                        ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i32* %value, metadata !4833, metadata !DIExpression()), !dbg !4835
  call void @llvm.dbg.declare(metadata i32* %multidigit_without_leading_underscore, metadata !4836, metadata !DIExpression()), !dbg !4837
  store i32 0, i32* %multidigit_without_leading_underscore, align 4, !dbg !4837
  call void @llvm.dbg.declare(metadata i32* %leave_following_underscore, metadata !4838, metadata !DIExpression()), !dbg !4839
  store i32 0, i32* %leave_following_underscore, align 4, !dbg !4839
  store i32 0, i32* %success, align 4, !dbg !4840
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !4841
  %16 = load i8*, i8** %15, align 8, !dbg !4843
  %17 = load i8, i8* %16, align 1, !dbg !4844
  %conv11 = sext i8 %17 to i32, !dbg !4844
  %cmp12 = icmp eq i32 %conv11, 95, !dbg !4845
  br i1 %cmp12, label %if.then14, label %if.else21, !dbg !4846

if.then14:                                        ; preds = %if.else10
  %18 = load i8**, i8*** %mangled.addr, align 8, !dbg !4847
  %arrayidx = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !4847
  %19 = load i8*, i8** %arrayidx, align 8, !dbg !4847
  %arrayidx15 = getelementptr inbounds i8, i8* %19, i64 1, !dbg !4847
  %20 = load i8, i8* %arrayidx15, align 1, !dbg !4847
  %conv16 = sext i8 %20 to i32, !dbg !4847
  %cmp17 = icmp eq i32 %conv16, 109, !dbg !4850
  br i1 %cmp17, label %if.then19, label %if.else20, !dbg !4851

if.then19:                                        ; preds = %if.then14
  store i32 1, i32* %multidigit_without_leading_underscore, align 4, !dbg !4852
  %21 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4854
  call void @string_appendn(%struct.string* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0), i32 1), !dbg !4855
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !4856
  %23 = load i8*, i8** %22, align 8, !dbg !4857
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 2, !dbg !4857
  store i8* %add.ptr, i8** %22, align 8, !dbg !4857
  br label %if.end, !dbg !4858

if.else20:                                        ; preds = %if.then14
  store i32 1, i32* %leave_following_underscore, align 4, !dbg !4859
  br label %if.end

if.end:                                           ; preds = %if.else20, %if.then19
  br label %if.end27, !dbg !4861

if.else21:                                        ; preds = %if.else10
  %24 = load i8**, i8*** %mangled.addr, align 8, !dbg !4862
  %25 = load i8*, i8** %24, align 8, !dbg !4865
  %26 = load i8, i8* %25, align 1, !dbg !4866
  %conv22 = sext i8 %26 to i32, !dbg !4866
  %cmp23 = icmp eq i32 %conv22, 109, !dbg !4867
  br i1 %cmp23, label %if.then25, label %if.end26, !dbg !4868

if.then25:                                        ; preds = %if.else21
  %27 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4869
  call void @string_appendn(%struct.string* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0), i32 1), !dbg !4871
  %28 = load i8**, i8*** %mangled.addr, align 8, !dbg !4872
  %29 = load i8*, i8** %28, align 8, !dbg !4873
  %incdec.ptr = getelementptr inbounds i8, i8* %29, i32 1, !dbg !4873
  store i8* %incdec.ptr, i8** %28, align 8, !dbg !4873
  br label %if.end26, !dbg !4874

if.end26:                                         ; preds = %if.then25, %if.else21
  store i32 1, i32* %multidigit_without_leading_underscore, align 4, !dbg !4875
  store i32 1, i32* %leave_following_underscore, align 4, !dbg !4876
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end
  %30 = load i32, i32* %multidigit_without_leading_underscore, align 4, !dbg !4877
  %tobool = icmp ne i32 %30, 0, !dbg !4877
  br i1 %tobool, label %if.then28, label %if.else30, !dbg !4879

if.then28:                                        ; preds = %if.end27
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !4880
  %call29 = call i32 @consume_count(i8** %31), !dbg !4881
  store i32 %call29, i32* %value, align 4, !dbg !4882
  br label %if.end32, !dbg !4883

if.else30:                                        ; preds = %if.end27
  %32 = load i8**, i8*** %mangled.addr, align 8, !dbg !4884
  %call31 = call i32 @consume_count_with_underscores(i8** %32), !dbg !4885
  store i32 %call31, i32* %value, align 4, !dbg !4886
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then28
  %33 = load i32, i32* %value, align 4, !dbg !4887
  %cmp33 = icmp ne i32 %33, -1, !dbg !4889
  br i1 %cmp33, label %if.then35, label %if.end50, !dbg !4890

if.then35:                                        ; preds = %if.end32
  call void @llvm.dbg.declare(metadata [32 x i8]* %buf, metadata !4891, metadata !DIExpression()), !dbg !4896
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0, !dbg !4897
  %34 = load i32, i32* %value, align 4, !dbg !4898
  %call36 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.207, i64 0, i64 0), i32 %34), !dbg !4899
  %35 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4900
  %arraydecay37 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0, !dbg !4901
  call void @string_append(%struct.string* %35, i8* %arraydecay37), !dbg !4902
  %36 = load i32, i32* %value, align 4, !dbg !4903
  %cmp38 = icmp sgt i32 %36, 9, !dbg !4905
  br i1 %cmp38, label %land.lhs.true, label %lor.lhs.false40, !dbg !4906

lor.lhs.false40:                                  ; preds = %if.then35
  %37 = load i32, i32* %multidigit_without_leading_underscore, align 4, !dbg !4907
  %tobool41 = icmp ne i32 %37, 0, !dbg !4907
  br i1 %tobool41, label %land.lhs.true, label %if.end49, !dbg !4908

land.lhs.true:                                    ; preds = %lor.lhs.false40, %if.then35
  %38 = load i32, i32* %leave_following_underscore, align 4, !dbg !4909
  %tobool42 = icmp ne i32 %38, 0, !dbg !4909
  br i1 %tobool42, label %if.end49, label %land.lhs.true43, !dbg !4910

land.lhs.true43:                                  ; preds = %land.lhs.true
  %39 = load i8**, i8*** %mangled.addr, align 8, !dbg !4911
  %40 = load i8*, i8** %39, align 8, !dbg !4912
  %41 = load i8, i8* %40, align 1, !dbg !4913
  %conv44 = sext i8 %41 to i32, !dbg !4913
  %cmp45 = icmp eq i32 %conv44, 95, !dbg !4914
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !4915

if.then47:                                        ; preds = %land.lhs.true43
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !4916
  %43 = load i8*, i8** %42, align 8, !dbg !4917
  %incdec.ptr48 = getelementptr inbounds i8, i8* %43, i32 1, !dbg !4917
  store i8* %incdec.ptr48, i8** %42, align 8, !dbg !4917
  br label %if.end49, !dbg !4918

if.end49:                                         ; preds = %if.then47, %land.lhs.true43, %land.lhs.true, %lor.lhs.false40
  store i32 1, i32* %success, align 4, !dbg !4919
  br label %if.end50, !dbg !4920

if.end50:                                         ; preds = %if.end49, %if.end32
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then8
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then
  %44 = load i32, i32* %success, align 4, !dbg !4921
  ret i32 %44, !dbg !4922
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_real_value(%struct.work_stuff* %work, i8** %mangled, %struct.string* %s) #0 !dbg !4923 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %s.addr = alloca %struct.string*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !4924, metadata !DIExpression()), !dbg !4925
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !4926, metadata !DIExpression()), !dbg !4927
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !4928, metadata !DIExpression()), !dbg !4929
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !4930
  %1 = load i8*, i8** %0, align 8, !dbg !4932
  %2 = load i8, i8* %1, align 1, !dbg !4933
  %conv = sext i8 %2 to i32, !dbg !4933
  %cmp = icmp eq i32 %conv, 69, !dbg !4934
  br i1 %cmp, label %if.then, label %if.end, !dbg !4935

if.then:                                          ; preds = %entry
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !4936
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !4937
  %5 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4938
  %call = call i32 @demangle_expression(%struct.work_stuff* %3, i8** %4, %struct.string* %5, i32 6), !dbg !4939
  store i32 %call, i32* %retval, align 4, !dbg !4940
  br label %return, !dbg !4940

if.end:                                           ; preds = %entry
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !4941
  %7 = load i8*, i8** %6, align 8, !dbg !4943
  %8 = load i8, i8* %7, align 1, !dbg !4944
  %conv2 = sext i8 %8 to i32, !dbg !4944
  %cmp3 = icmp eq i32 %conv2, 109, !dbg !4945
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !4946

if.then5:                                         ; preds = %if.end
  %9 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4947
  call void @string_appendn(%struct.string* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0), i32 1), !dbg !4949
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !4950
  %11 = load i8*, i8** %10, align 8, !dbg !4951
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1, !dbg !4951
  store i8* %incdec.ptr, i8** %10, align 8, !dbg !4951
  br label %if.end6, !dbg !4952

if.end6:                                          ; preds = %if.then5, %if.end
  br label %while.cond, !dbg !4953

while.cond:                                       ; preds = %while.body, %if.end6
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !4954
  %13 = load i8*, i8** %12, align 8, !dbg !4954
  %14 = load i8, i8* %13, align 1, !dbg !4954
  %conv7 = zext i8 %14 to i32, !dbg !4954
  %and = and i32 %conv7, 255, !dbg !4954
  %idxprom = sext i32 %and to i64, !dbg !4954
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !4954
  %15 = load i16, i16* %arrayidx, align 2, !dbg !4954
  %conv8 = zext i16 %15 to i32, !dbg !4954
  %and9 = and i32 %conv8, 4, !dbg !4954
  %tobool = icmp ne i32 %and9, 0, !dbg !4953
  br i1 %tobool, label %while.body, label %while.end, !dbg !4953

while.body:                                       ; preds = %while.cond
  %16 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4955
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !4957
  %18 = load i8*, i8** %17, align 8, !dbg !4958
  call void @string_appendn(%struct.string* %16, i8* %18, i32 1), !dbg !4959
  %19 = load i8**, i8*** %mangled.addr, align 8, !dbg !4960
  %20 = load i8*, i8** %19, align 8, !dbg !4961
  %incdec.ptr10 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !4961
  store i8* %incdec.ptr10, i8** %19, align 8, !dbg !4961
  br label %while.cond, !dbg !4953, !llvm.loop !4962

while.end:                                        ; preds = %while.cond
  %21 = load i8**, i8*** %mangled.addr, align 8, !dbg !4964
  %22 = load i8*, i8** %21, align 8, !dbg !4966
  %23 = load i8, i8* %22, align 1, !dbg !4967
  %conv11 = sext i8 %23 to i32, !dbg !4967
  %cmp12 = icmp eq i32 %conv11, 46, !dbg !4968
  br i1 %cmp12, label %if.then14, label %if.end27, !dbg !4969

if.then14:                                        ; preds = %while.end
  %24 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4970
  call void @string_appendn(%struct.string* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i32 1), !dbg !4972
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !4973
  %26 = load i8*, i8** %25, align 8, !dbg !4974
  %incdec.ptr15 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !4974
  store i8* %incdec.ptr15, i8** %25, align 8, !dbg !4974
  br label %while.cond16, !dbg !4975

while.cond16:                                     ; preds = %while.body24, %if.then14
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !4976
  %28 = load i8*, i8** %27, align 8, !dbg !4976
  %29 = load i8, i8* %28, align 1, !dbg !4976
  %conv17 = zext i8 %29 to i32, !dbg !4976
  %and18 = and i32 %conv17, 255, !dbg !4976
  %idxprom19 = sext i32 %and18 to i64, !dbg !4976
  %arrayidx20 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom19, !dbg !4976
  %30 = load i16, i16* %arrayidx20, align 2, !dbg !4976
  %conv21 = zext i16 %30 to i32, !dbg !4976
  %and22 = and i32 %conv21, 4, !dbg !4976
  %tobool23 = icmp ne i32 %and22, 0, !dbg !4975
  br i1 %tobool23, label %while.body24, label %while.end26, !dbg !4975

while.body24:                                     ; preds = %while.cond16
  %31 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4977
  %32 = load i8**, i8*** %mangled.addr, align 8, !dbg !4979
  %33 = load i8*, i8** %32, align 8, !dbg !4980
  call void @string_appendn(%struct.string* %31, i8* %33, i32 1), !dbg !4981
  %34 = load i8**, i8*** %mangled.addr, align 8, !dbg !4982
  %35 = load i8*, i8** %34, align 8, !dbg !4983
  %incdec.ptr25 = getelementptr inbounds i8, i8* %35, i32 1, !dbg !4983
  store i8* %incdec.ptr25, i8** %34, align 8, !dbg !4983
  br label %while.cond16, !dbg !4975, !llvm.loop !4984

while.end26:                                      ; preds = %while.cond16
  br label %if.end27, !dbg !4986

if.end27:                                         ; preds = %while.end26, %while.end
  %36 = load i8**, i8*** %mangled.addr, align 8, !dbg !4987
  %37 = load i8*, i8** %36, align 8, !dbg !4989
  %38 = load i8, i8* %37, align 1, !dbg !4990
  %conv28 = sext i8 %38 to i32, !dbg !4990
  %cmp29 = icmp eq i32 %conv28, 101, !dbg !4991
  br i1 %cmp29, label %if.then31, label %if.end44, !dbg !4992

if.then31:                                        ; preds = %if.end27
  %39 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !4993
  call void @string_appendn(%struct.string* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i64 0, i64 0), i32 1), !dbg !4995
  %40 = load i8**, i8*** %mangled.addr, align 8, !dbg !4996
  %41 = load i8*, i8** %40, align 8, !dbg !4997
  %incdec.ptr32 = getelementptr inbounds i8, i8* %41, i32 1, !dbg !4997
  store i8* %incdec.ptr32, i8** %40, align 8, !dbg !4997
  br label %while.cond33, !dbg !4998

while.cond33:                                     ; preds = %while.body41, %if.then31
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !4999
  %43 = load i8*, i8** %42, align 8, !dbg !4999
  %44 = load i8, i8* %43, align 1, !dbg !4999
  %conv34 = zext i8 %44 to i32, !dbg !4999
  %and35 = and i32 %conv34, 255, !dbg !4999
  %idxprom36 = sext i32 %and35 to i64, !dbg !4999
  %arrayidx37 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom36, !dbg !4999
  %45 = load i16, i16* %arrayidx37, align 2, !dbg !4999
  %conv38 = zext i16 %45 to i32, !dbg !4999
  %and39 = and i32 %conv38, 4, !dbg !4999
  %tobool40 = icmp ne i32 %and39, 0, !dbg !4998
  br i1 %tobool40, label %while.body41, label %while.end43, !dbg !4998

while.body41:                                     ; preds = %while.cond33
  %46 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5000
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !5002
  %48 = load i8*, i8** %47, align 8, !dbg !5003
  call void @string_appendn(%struct.string* %46, i8* %48, i32 1), !dbg !5004
  %49 = load i8**, i8*** %mangled.addr, align 8, !dbg !5005
  %50 = load i8*, i8** %49, align 8, !dbg !5006
  %incdec.ptr42 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !5006
  store i8* %incdec.ptr42, i8** %49, align 8, !dbg !5006
  br label %while.cond33, !dbg !4998, !llvm.loop !5007

while.end43:                                      ; preds = %while.cond33
  br label %if.end44, !dbg !5009

if.end44:                                         ; preds = %while.end43, %if.end27
  store i32 1, i32* %retval, align 4, !dbg !5010
  br label %return, !dbg !5010

return:                                           ; preds = %if.end44, %if.then
  %51 = load i32, i32* %retval, align 4, !dbg !5011
  ret i32 %51, !dbg !5011
}

declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_expression(%struct.work_stuff* %work, i8** %mangled, %struct.string* %s, i32 %tk) #0 !dbg !5012 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %s.addr = alloca %struct.string*, align 8
  %tk.addr = alloca i32, align 4
  %need_operator = alloca i32, align 4
  %success = alloca i32, align 4
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %l = alloca i64, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5013, metadata !DIExpression()), !dbg !5014
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  store %struct.string* %s, %struct.string** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %s.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store i32 %tk, i32* %tk.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tk.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %need_operator, metadata !5021, metadata !DIExpression()), !dbg !5022
  store i32 0, i32* %need_operator, align 4, !dbg !5022
  call void @llvm.dbg.declare(metadata i32* %success, metadata !5023, metadata !DIExpression()), !dbg !5024
  store i32 1, i32* %success, align 4, !dbg !5025
  %0 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5026
  call void @string_appendn(%struct.string* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0), i32 1), !dbg !5027
  %1 = load i8**, i8*** %mangled.addr, align 8, !dbg !5028
  %2 = load i8*, i8** %1, align 8, !dbg !5029
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !5029
  store i8* %incdec.ptr, i8** %1, align 8, !dbg !5029
  br label %while.cond, !dbg !5030

while.cond:                                       ; preds = %if.end22, %entry
  %3 = load i32, i32* %success, align 4, !dbg !5031
  %tobool = icmp ne i32 %3, 0, !dbg !5031
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !5032

land.lhs.true:                                    ; preds = %while.cond
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !5033
  %5 = load i8*, i8** %4, align 8, !dbg !5034
  %6 = load i8, i8* %5, align 1, !dbg !5035
  %conv = sext i8 %6 to i32, !dbg !5035
  %cmp = icmp ne i32 %conv, 87, !dbg !5036
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5037

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load i8**, i8*** %mangled.addr, align 8, !dbg !5038
  %8 = load i8*, i8** %7, align 8, !dbg !5039
  %9 = load i8, i8* %8, align 1, !dbg !5040
  %conv2 = sext i8 %9 to i32, !dbg !5040
  %cmp3 = icmp ne i32 %conv2, 0, !dbg !5041
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp3, %land.rhs ], !dbg !5042
  br i1 %10, label %while.body, label %while.end, !dbg !5030

while.body:                                       ; preds = %land.end
  %11 = load i32, i32* %need_operator, align 4, !dbg !5043
  %tobool5 = icmp ne i32 %11, 0, !dbg !5043
  br i1 %tobool5, label %if.then, label %if.else, !dbg !5046

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5047, metadata !DIExpression()), !dbg !5049
  call void @llvm.dbg.declare(metadata i64* %len, metadata !5050, metadata !DIExpression()), !dbg !5051
  store i32 0, i32* %success, align 4, !dbg !5052
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !5053
  %13 = load i8*, i8** %12, align 8, !dbg !5054
  %call = call i64 @strlen(i8* %13), !dbg !5055
  store i64 %call, i64* %len, align 8, !dbg !5056
  store i64 0, i64* %i, align 8, !dbg !5057
  br label %for.cond, !dbg !5059

for.cond:                                         ; preds = %for.inc, %if.then
  %14 = load i64, i64* %i, align 8, !dbg !5060
  %cmp6 = icmp ult i64 %14, 79, !dbg !5062
  br i1 %cmp6, label %for.body, label %for.end, !dbg !5063

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %l, metadata !5064, metadata !DIExpression()), !dbg !5066
  %15 = load i64, i64* %i, align 8, !dbg !5067
  %arrayidx = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %15, !dbg !5068
  %in = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx, i32 0, i32 0, !dbg !5069
  %16 = load i8*, i8** %in, align 8, !dbg !5069
  %call8 = call i64 @strlen(i8* %16), !dbg !5070
  store i64 %call8, i64* %l, align 8, !dbg !5066
  %17 = load i64, i64* %l, align 8, !dbg !5071
  %18 = load i64, i64* %len, align 8, !dbg !5073
  %cmp9 = icmp ule i64 %17, %18, !dbg !5074
  br i1 %cmp9, label %land.lhs.true11, label %if.end, !dbg !5075

land.lhs.true11:                                  ; preds = %for.body
  %19 = load i64, i64* %i, align 8, !dbg !5076
  %arrayidx12 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %19, !dbg !5077
  %in13 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx12, i32 0, i32 0, !dbg !5078
  %20 = load i8*, i8** %in13, align 8, !dbg !5078
  %21 = load i8**, i8*** %mangled.addr, align 8, !dbg !5079
  %22 = load i8*, i8** %21, align 8, !dbg !5080
  %23 = load i64, i64* %l, align 8, !dbg !5081
  %call14 = call i32 @memcmp(i8* %20, i8* %22, i64 %23), !dbg !5082
  %cmp15 = icmp eq i32 %call14, 0, !dbg !5083
  br i1 %cmp15, label %if.then17, label %if.end, !dbg !5084

if.then17:                                        ; preds = %land.lhs.true11
  %24 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5085
  call void @string_appendn(%struct.string* %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0), i32 1), !dbg !5087
  %25 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5088
  %26 = load i64, i64* %i, align 8, !dbg !5089
  %arrayidx18 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %26, !dbg !5090
  %out = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx18, i32 0, i32 1, !dbg !5091
  %27 = load i8*, i8** %out, align 8, !dbg !5091
  call void @string_append(%struct.string* %25, i8* %27), !dbg !5092
  %28 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5093
  call void @string_appendn(%struct.string* %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0), i32 1), !dbg !5094
  store i32 1, i32* %success, align 4, !dbg !5095
  %29 = load i64, i64* %l, align 8, !dbg !5096
  %30 = load i8**, i8*** %mangled.addr, align 8, !dbg !5097
  %31 = load i8*, i8** %30, align 8, !dbg !5098
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %29, !dbg !5098
  store i8* %add.ptr, i8** %30, align 8, !dbg !5098
  br label %for.end, !dbg !5099

if.end:                                           ; preds = %land.lhs.true11, %for.body
  br label %for.inc, !dbg !5100

for.inc:                                          ; preds = %if.end
  %32 = load i64, i64* %i, align 8, !dbg !5101
  %inc = add i64 %32, 1, !dbg !5101
  store i64 %inc, i64* %i, align 8, !dbg !5101
  br label %for.cond, !dbg !5102, !llvm.loop !5103

for.end:                                          ; preds = %if.then17, %for.cond
  %33 = load i32, i32* %success, align 4, !dbg !5105
  %tobool19 = icmp ne i32 %33, 0, !dbg !5105
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !5107

if.then20:                                        ; preds = %for.end
  br label %while.end, !dbg !5108

if.end21:                                         ; preds = %for.end
  br label %if.end22, !dbg !5109

if.else:                                          ; preds = %while.body
  store i32 1, i32* %need_operator, align 4, !dbg !5110
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.end21
  %34 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5111
  %35 = load i8**, i8*** %mangled.addr, align 8, !dbg !5112
  %36 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5113
  %37 = load i32, i32* %tk.addr, align 4, !dbg !5114
  %call23 = call i32 @demangle_template_value_parm(%struct.work_stuff* %34, i8** %35, %struct.string* %36, i32 %37), !dbg !5115
  store i32 %call23, i32* %success, align 4, !dbg !5116
  br label %while.cond, !dbg !5030, !llvm.loop !5117

while.end:                                        ; preds = %if.then20, %land.end
  %38 = load i8**, i8*** %mangled.addr, align 8, !dbg !5119
  %39 = load i8*, i8** %38, align 8, !dbg !5121
  %40 = load i8, i8* %39, align 1, !dbg !5122
  %conv24 = sext i8 %40 to i32, !dbg !5122
  %cmp25 = icmp ne i32 %conv24, 87, !dbg !5123
  br i1 %cmp25, label %if.then27, label %if.else28, !dbg !5124

if.then27:                                        ; preds = %while.end
  store i32 0, i32* %success, align 4, !dbg !5125
  br label %if.end30, !dbg !5126

if.else28:                                        ; preds = %while.end
  %41 = load %struct.string*, %struct.string** %s.addr, align 8, !dbg !5127
  call void @string_appendn(%struct.string* %41, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0), i32 1), !dbg !5129
  %42 = load i8**, i8*** %mangled.addr, align 8, !dbg !5130
  %43 = load i8*, i8** %42, align 8, !dbg !5131
  %incdec.ptr29 = getelementptr inbounds i8, i8* %43, i32 1, !dbg !5131
  store i8* %incdec.ptr29, i8** %42, align 8, !dbg !5131
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then27
  %44 = load i32, i32* %success, align 4, !dbg !5132
  ret i32 %44, !dbg !5133
}

declare dso_local i64 @strspn(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @demangle_arm_hp_template(%struct.work_stuff* %work, i8** %mangled, i32 %n, %struct.string* %declp) #0 !dbg !5134 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %n.addr = alloca i32, align 4
  %declp.addr = alloca %struct.string*, align 8
  %p = alloca i8*, align 8
  %args = alloca i8*, align 8
  %e = alloca i8*, align 8
  %arg = alloca %struct.string, align 8
  %start_spec_args = alloca i8*, align 8
  %hold_options = alloca i32, align 4
  %hold_options61 = alloca i32, align 4
  %type_str = alloca %struct.string, align 8
  %old_args = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5137, metadata !DIExpression()), !dbg !5138
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5139, metadata !DIExpression()), !dbg !5140
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5141, metadata !DIExpression()), !dbg !5142
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !5143, metadata !DIExpression()), !dbg !5144
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5145, metadata !DIExpression()), !dbg !5146
  call void @llvm.dbg.declare(metadata i8** %args, metadata !5147, metadata !DIExpression()), !dbg !5148
  call void @llvm.dbg.declare(metadata i8** %e, metadata !5149, metadata !DIExpression()), !dbg !5150
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !5151
  %1 = load i8*, i8** %0, align 8, !dbg !5152
  %2 = load i32, i32* %n.addr, align 4, !dbg !5153
  %idx.ext = sext i32 %2 to i64, !dbg !5154
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext, !dbg !5154
  store i8* %add.ptr, i8** %e, align 8, !dbg !5150
  call void @llvm.dbg.declare(metadata %struct.string* %arg, metadata !5155, metadata !DIExpression()), !dbg !5156
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5157
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %3, i32 0, i32 0, !dbg !5157
  %4 = load i32, i32* %options, align 8, !dbg !5157
  %and = and i32 %4, 4096, !dbg !5157
  %tobool = icmp ne i32 %and, 0, !dbg !5157
  br i1 %tobool, label %land.lhs.true, label %if.else57, !dbg !5159

land.lhs.true:                                    ; preds = %entry
  %5 = load i8**, i8*** %mangled.addr, align 8, !dbg !5160
  %6 = load i8*, i8** %5, align 8, !dbg !5161
  %7 = load i32, i32* %n.addr, align 4, !dbg !5162
  %idxprom = sext i32 %7 to i64, !dbg !5163
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !5163
  %8 = load i8, i8* %arrayidx, align 1, !dbg !5163
  %conv = sext i8 %8 to i32, !dbg !5163
  %cmp = icmp eq i32 %conv, 88, !dbg !5164
  br i1 %cmp, label %if.then, label %if.else57, !dbg !5165

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %start_spec_args, metadata !5166, metadata !DIExpression()), !dbg !5168
  store i8* null, i8** %start_spec_args, align 8, !dbg !5168
  call void @llvm.dbg.declare(metadata i32* %hold_options, metadata !5169, metadata !DIExpression()), !dbg !5170
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !5171
  %10 = load i8*, i8** %9, align 8, !dbg !5172
  %call = call i8* @strchr(i8* %10, i32 60), !dbg !5173
  store i8* %call, i8** %start_spec_args, align 8, !dbg !5174
  %11 = load i8*, i8** %start_spec_args, align 8, !dbg !5175
  %tobool2 = icmp ne i8* %11, null, !dbg !5175
  br i1 %tobool2, label %land.lhs.true3, label %if.else, !dbg !5177

land.lhs.true3:                                   ; preds = %if.then
  %12 = load i8*, i8** %start_spec_args, align 8, !dbg !5178
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !5179
  %14 = load i8*, i8** %13, align 8, !dbg !5180
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64, !dbg !5181
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64, !dbg !5181
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5181
  %15 = load i32, i32* %n.addr, align 4, !dbg !5182
  %conv4 = sext i32 %15 to i64, !dbg !5182
  %cmp5 = icmp slt i64 %sub.ptr.sub, %conv4, !dbg !5183
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !5184

if.then7:                                         ; preds = %land.lhs.true3
  %16 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5185
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !5186
  %18 = load i8*, i8** %17, align 8, !dbg !5187
  %19 = load i8*, i8** %start_spec_args, align 8, !dbg !5188
  %20 = load i8**, i8*** %mangled.addr, align 8, !dbg !5189
  %21 = load i8*, i8** %20, align 8, !dbg !5190
  %sub.ptr.lhs.cast8 = ptrtoint i8* %19 to i64, !dbg !5191
  %sub.ptr.rhs.cast9 = ptrtoint i8* %21 to i64, !dbg !5191
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast8, %sub.ptr.rhs.cast9, !dbg !5191
  %conv11 = trunc i64 %sub.ptr.sub10 to i32, !dbg !5188
  call void @string_appendn(%struct.string* %16, i8* %18, i32 %conv11), !dbg !5192
  br label %if.end, !dbg !5192

if.else:                                          ; preds = %land.lhs.true3, %if.then
  %22 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5193
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !5194
  %24 = load i8*, i8** %23, align 8, !dbg !5195
  %25 = load i32, i32* %n.addr, align 4, !dbg !5196
  call void @string_appendn(%struct.string* %22, i8* %24, i32 %25), !dbg !5197
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %26 = load i32, i32* %n.addr, align 4, !dbg !5198
  %add = add nsw i32 %26, 1, !dbg !5199
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !5200
  %28 = load i8*, i8** %27, align 8, !dbg !5201
  %idx.ext12 = sext i32 %add to i64, !dbg !5201
  %add.ptr13 = getelementptr inbounds i8, i8* %28, i64 %idx.ext12, !dbg !5201
  store i8* %add.ptr13, i8** %27, align 8, !dbg !5201
  call void @string_init(%struct.string* %arg), !dbg !5202
  %29 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5203
  %temp_start = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %29, i32 0, i32 13, !dbg !5205
  %30 = load i32, i32* %temp_start, align 4, !dbg !5205
  %cmp14 = icmp eq i32 %30, -1, !dbg !5206
  br i1 %cmp14, label %if.then16, label %if.end23, !dbg !5207

if.then16:                                        ; preds = %if.end
  %31 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5208
  %p17 = getelementptr inbounds %struct.string, %struct.string* %31, i32 0, i32 1, !dbg !5209
  %32 = load i8*, i8** %p17, align 8, !dbg !5209
  %33 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5210
  %b = getelementptr inbounds %struct.string, %struct.string* %33, i32 0, i32 0, !dbg !5211
  %34 = load i8*, i8** %b, align 8, !dbg !5211
  %sub.ptr.lhs.cast18 = ptrtoint i8* %32 to i64, !dbg !5212
  %sub.ptr.rhs.cast19 = ptrtoint i8* %34 to i64, !dbg !5212
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19, !dbg !5212
  %conv21 = trunc i64 %sub.ptr.sub20 to i32, !dbg !5208
  %35 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5213
  %temp_start22 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %35, i32 0, i32 13, !dbg !5214
  store i32 %conv21, i32* %temp_start22, align 4, !dbg !5215
  br label %if.end23, !dbg !5213

if.end23:                                         ; preds = %if.then16, %if.end
  %36 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5216
  %options24 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %36, i32 0, i32 0, !dbg !5217
  %37 = load i32, i32* %options24, align 8, !dbg !5217
  store i32 %37, i32* %hold_options, align 4, !dbg !5218
  %38 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5219
  %options25 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %38, i32 0, i32 0, !dbg !5220
  %39 = load i32, i32* %options25, align 8, !dbg !5221
  %or = or i32 %39, 1, !dbg !5221
  store i32 %or, i32* %options25, align 8, !dbg !5221
  %40 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5222
  call void @string_append(%struct.string* %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i64 0, i64 0)), !dbg !5223
  br label %while.body, !dbg !5224

while.body:                                       ; preds = %if.end23, %if.end49
  call void @string_delete(%struct.string* %arg), !dbg !5225
  %41 = load i8**, i8*** %mangled.addr, align 8, !dbg !5227
  %42 = load i8*, i8** %41, align 8, !dbg !5228
  %43 = load i8, i8* %42, align 1, !dbg !5229
  %conv26 = sext i8 %43 to i32, !dbg !5229
  switch i32 %conv26, label %sw.default [
    i32 84, label %sw.bb
    i32 85, label %sw.bb31
    i32 83, label %sw.bb31
    i32 65, label %sw.bb36
  ], !dbg !5230

sw.bb:                                            ; preds = %while.body
  %44 = load i8**, i8*** %mangled.addr, align 8, !dbg !5231
  %45 = load i8*, i8** %44, align 8, !dbg !5233
  %incdec.ptr = getelementptr inbounds i8, i8* %45, i32 1, !dbg !5233
  store i8* %incdec.ptr, i8** %44, align 8, !dbg !5233
  %46 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5234
  %47 = load i8**, i8*** %mangled.addr, align 8, !dbg !5236
  %call27 = call i32 @do_type(%struct.work_stuff* %46, i8** %47, %struct.string* %arg), !dbg !5237
  %tobool28 = icmp ne i32 %call27, 0, !dbg !5237
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !5238

if.then29:                                        ; preds = %sw.bb
  br label %hpacc_template_args_done, !dbg !5239

if.end30:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !5240

sw.bb31:                                          ; preds = %while.body, %while.body
  %48 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5241
  %49 = load i8**, i8*** %mangled.addr, align 8, !dbg !5243
  %call32 = call i32 @do_hpacc_template_const_value(%struct.work_stuff* %48, i8** %49, %struct.string* %arg), !dbg !5244
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5244
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !5245

if.then34:                                        ; preds = %sw.bb31
  br label %hpacc_template_args_done, !dbg !5246

if.end35:                                         ; preds = %sw.bb31
  br label %sw.epilog, !dbg !5247

sw.bb36:                                          ; preds = %while.body
  %50 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5248
  %51 = load i8**, i8*** %mangled.addr, align 8, !dbg !5250
  %call37 = call i32 @do_hpacc_template_literal(%struct.work_stuff* %50, i8** %51, %struct.string* %arg), !dbg !5251
  %tobool38 = icmp ne i32 %call37, 0, !dbg !5251
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !5252

if.then39:                                        ; preds = %sw.bb36
  br label %hpacc_template_args_done, !dbg !5253

if.end40:                                         ; preds = %sw.bb36
  br label %sw.epilog, !dbg !5254

sw.default:                                       ; preds = %while.body
  br label %hpacc_template_args_done, !dbg !5255

sw.epilog:                                        ; preds = %if.end40, %if.end35, %if.end30
  %52 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5256
  call void @string_appends(%struct.string* %52, %struct.string* %arg), !dbg !5257
  %53 = load i8**, i8*** %mangled.addr, align 8, !dbg !5258
  %54 = load i8*, i8** %53, align 8, !dbg !5260
  %55 = load i8, i8* %54, align 1, !dbg !5261
  %conv41 = sext i8 %55 to i32, !dbg !5261
  %cmp42 = icmp eq i32 %conv41, 0, !dbg !5262
  br i1 %cmp42, label %if.then47, label %lor.lhs.false, !dbg !5263

lor.lhs.false:                                    ; preds = %sw.epilog
  %56 = load i8**, i8*** %mangled.addr, align 8, !dbg !5264
  %57 = load i8*, i8** %56, align 8, !dbg !5265
  %58 = load i8, i8* %57, align 1, !dbg !5266
  %conv44 = sext i8 %58 to i32, !dbg !5266
  %cmp45 = icmp eq i32 %conv44, 95, !dbg !5267
  br i1 %cmp45, label %if.then47, label %if.else48, !dbg !5268

if.then47:                                        ; preds = %lor.lhs.false, %sw.epilog
  br label %while.end, !dbg !5269

if.else48:                                        ; preds = %lor.lhs.false
  %59 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5270
  call void @string_append(%struct.string* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.217, i64 0, i64 0)), !dbg !5271
  br label %if.end49

if.end49:                                         ; preds = %if.else48
  br label %while.body, !dbg !5224, !llvm.loop !5272

while.end:                                        ; preds = %if.then47
  br label %hpacc_template_args_done, !dbg !5224

hpacc_template_args_done:                         ; preds = %while.end, %sw.default, %if.then39, %if.then34, %if.then29
  call void @llvm.dbg.label(metadata !5274), !dbg !5275
  %60 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5276
  call void @string_append(%struct.string* %60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !5277
  call void @string_delete(%struct.string* %arg), !dbg !5278
  %61 = load i8**, i8*** %mangled.addr, align 8, !dbg !5279
  %62 = load i8*, i8** %61, align 8, !dbg !5281
  %63 = load i8, i8* %62, align 1, !dbg !5282
  %conv50 = sext i8 %63 to i32, !dbg !5282
  %cmp51 = icmp eq i32 %conv50, 95, !dbg !5283
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !5284

if.then53:                                        ; preds = %hpacc_template_args_done
  %64 = load i8**, i8*** %mangled.addr, align 8, !dbg !5285
  %65 = load i8*, i8** %64, align 8, !dbg !5286
  %incdec.ptr54 = getelementptr inbounds i8, i8* %65, i32 1, !dbg !5286
  store i8* %incdec.ptr54, i8** %64, align 8, !dbg !5286
  br label %if.end55, !dbg !5287

if.end55:                                         ; preds = %if.then53, %hpacc_template_args_done
  %66 = load i32, i32* %hold_options, align 4, !dbg !5288
  %67 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5289
  %options56 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %67, i32 0, i32 0, !dbg !5290
  store i32 %66, i32* %options56, align 8, !dbg !5291
  br label %return, !dbg !5292

if.else57:                                        ; preds = %land.lhs.true, %entry
  %68 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5293
  %69 = load i8**, i8*** %mangled.addr, align 8, !dbg !5295
  %70 = load i8*, i8** %69, align 8, !dbg !5296
  %71 = load i32, i32* %n.addr, align 4, !dbg !5297
  %call58 = call i32 @arm_pt(%struct.work_stuff* %68, i8* %70, i32 %71, i8** %p, i8** %args), !dbg !5298
  %tobool59 = icmp ne i32 %call58, 0, !dbg !5298
  br i1 %tobool59, label %if.then60, label %if.else126, !dbg !5299

if.then60:                                        ; preds = %if.else57
  call void @llvm.dbg.declare(metadata i32* %hold_options61, metadata !5300, metadata !DIExpression()), !dbg !5302
  call void @llvm.dbg.declare(metadata %struct.string* %type_str, metadata !5303, metadata !DIExpression()), !dbg !5304
  call void @string_init(%struct.string* %arg), !dbg !5305
  %72 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5306
  %73 = load i8**, i8*** %mangled.addr, align 8, !dbg !5307
  %74 = load i8*, i8** %73, align 8, !dbg !5308
  %75 = load i8*, i8** %p, align 8, !dbg !5309
  %76 = load i8**, i8*** %mangled.addr, align 8, !dbg !5310
  %77 = load i8*, i8** %76, align 8, !dbg !5311
  %sub.ptr.lhs.cast62 = ptrtoint i8* %75 to i64, !dbg !5312
  %sub.ptr.rhs.cast63 = ptrtoint i8* %77 to i64, !dbg !5312
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63, !dbg !5312
  %conv65 = trunc i64 %sub.ptr.sub64 to i32, !dbg !5309
  call void @string_appendn(%struct.string* %72, i8* %74, i32 %conv65), !dbg !5313
  %78 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5314
  %temp_start66 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %78, i32 0, i32 13, !dbg !5316
  %79 = load i32, i32* %temp_start66, align 4, !dbg !5316
  %cmp67 = icmp eq i32 %79, -1, !dbg !5317
  br i1 %cmp67, label %if.then69, label %if.end77, !dbg !5318

if.then69:                                        ; preds = %if.then60
  %80 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5319
  %p70 = getelementptr inbounds %struct.string, %struct.string* %80, i32 0, i32 1, !dbg !5320
  %81 = load i8*, i8** %p70, align 8, !dbg !5320
  %82 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5321
  %b71 = getelementptr inbounds %struct.string, %struct.string* %82, i32 0, i32 0, !dbg !5322
  %83 = load i8*, i8** %b71, align 8, !dbg !5322
  %sub.ptr.lhs.cast72 = ptrtoint i8* %81 to i64, !dbg !5323
  %sub.ptr.rhs.cast73 = ptrtoint i8* %83 to i64, !dbg !5323
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73, !dbg !5323
  %conv75 = trunc i64 %sub.ptr.sub74 to i32, !dbg !5319
  %84 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5324
  %temp_start76 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %84, i32 0, i32 13, !dbg !5325
  store i32 %conv75, i32* %temp_start76, align 4, !dbg !5326
  br label %if.end77, !dbg !5324

if.end77:                                         ; preds = %if.then69, %if.then60
  %85 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5327
  %options78 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %85, i32 0, i32 0, !dbg !5328
  %86 = load i32, i32* %options78, align 8, !dbg !5328
  store i32 %86, i32* %hold_options61, align 4, !dbg !5329
  %87 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5330
  %options79 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %87, i32 0, i32 0, !dbg !5331
  %88 = load i32, i32* %options79, align 8, !dbg !5332
  %or80 = or i32 %88, 1, !dbg !5332
  store i32 %or80, i32* %options79, align 8, !dbg !5332
  %89 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5333
  call void @string_append(%struct.string* %89, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.44, i64 0, i64 0)), !dbg !5334
  br label %while.cond, !dbg !5335

while.cond:                                       ; preds = %sw.epilog117, %if.end77
  %90 = load i8*, i8** %args, align 8, !dbg !5336
  %91 = load i8*, i8** %e, align 8, !dbg !5337
  %cmp81 = icmp ult i8* %90, %91, !dbg !5338
  br i1 %cmp81, label %while.body83, label %while.end118, !dbg !5335

while.body83:                                     ; preds = %while.cond
  call void @string_delete(%struct.string* %arg), !dbg !5339
  %92 = load i8*, i8** %args, align 8, !dbg !5341
  %93 = load i8, i8* %92, align 1, !dbg !5342
  %conv84 = sext i8 %93 to i32, !dbg !5342
  switch i32 %conv84, label %sw.default107 [
    i32 88, label %sw.bb85
    i32 76, label %sw.bb101
  ], !dbg !5343

sw.bb85:                                          ; preds = %while.body83
  %94 = load i8*, i8** %args, align 8, !dbg !5344
  %incdec.ptr86 = getelementptr inbounds i8, i8* %94, i32 1, !dbg !5344
  store i8* %incdec.ptr86, i8** %args, align 8, !dbg !5344
  %95 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5346
  %call87 = call i32 @do_type(%struct.work_stuff* %95, i8** %args, %struct.string* %type_str), !dbg !5348
  %tobool88 = icmp ne i32 %call87, 0, !dbg !5348
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !5349

if.then89:                                        ; preds = %sw.bb85
  br label %cfront_template_args_done, !dbg !5350

if.end90:                                         ; preds = %sw.bb85
  call void @string_append(%struct.string* %arg, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0)), !dbg !5351
  call void @string_appends(%struct.string* %arg, %struct.string* %type_str), !dbg !5352
  call void @string_delete(%struct.string* %type_str), !dbg !5353
  call void @string_append(%struct.string* %arg, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)), !dbg !5354
  %96 = load i8*, i8** %args, align 8, !dbg !5355
  %97 = load i8, i8* %96, align 1, !dbg !5357
  %conv91 = sext i8 %97 to i32, !dbg !5357
  %cmp92 = icmp ne i32 %conv91, 76, !dbg !5358
  br i1 %cmp92, label %if.then94, label %if.end95, !dbg !5359

if.then94:                                        ; preds = %if.end90
  br label %cfront_template_args_done, !dbg !5360

if.end95:                                         ; preds = %if.end90
  %98 = load i8*, i8** %args, align 8, !dbg !5361
  %incdec.ptr96 = getelementptr inbounds i8, i8* %98, i32 1, !dbg !5361
  store i8* %incdec.ptr96, i8** %args, align 8, !dbg !5361
  %call97 = call i32 @snarf_numeric_literal(i8** %args, %struct.string* %arg), !dbg !5362
  %tobool98 = icmp ne i32 %call97, 0, !dbg !5362
  br i1 %tobool98, label %if.end100, label %if.then99, !dbg !5364

if.then99:                                        ; preds = %if.end95
  br label %cfront_template_args_done, !dbg !5365

if.end100:                                        ; preds = %if.end95
  br label %sw.epilog117, !dbg !5366

sw.bb101:                                         ; preds = %while.body83
  %99 = load i8*, i8** %args, align 8, !dbg !5367
  %incdec.ptr102 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !5367
  store i8* %incdec.ptr102, i8** %args, align 8, !dbg !5367
  %call103 = call i32 @snarf_numeric_literal(i8** %args, %struct.string* %arg), !dbg !5368
  %tobool104 = icmp ne i32 %call103, 0, !dbg !5368
  br i1 %tobool104, label %if.end106, label %if.then105, !dbg !5370

if.then105:                                       ; preds = %sw.bb101
  br label %cfront_template_args_done, !dbg !5371

if.end106:                                        ; preds = %sw.bb101
  br label %sw.epilog117, !dbg !5372

sw.default107:                                    ; preds = %while.body83
  call void @llvm.dbg.declare(metadata i8** %old_args, metadata !5373, metadata !DIExpression()), !dbg !5375
  %100 = load i8*, i8** %args, align 8, !dbg !5376
  store i8* %100, i8** %old_args, align 8, !dbg !5375
  %101 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5377
  %call108 = call i32 @do_type(%struct.work_stuff* %101, i8** %args, %struct.string* %arg), !dbg !5379
  %tobool109 = icmp ne i32 %call108, 0, !dbg !5379
  br i1 %tobool109, label %if.end111, label %if.then110, !dbg !5380

if.then110:                                       ; preds = %sw.default107
  br label %cfront_template_args_done, !dbg !5381

if.end111:                                        ; preds = %sw.default107
  %102 = load i8*, i8** %args, align 8, !dbg !5382
  %103 = load i8*, i8** %old_args, align 8, !dbg !5384
  %cmp112 = icmp eq i8* %102, %103, !dbg !5385
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !5386

if.then114:                                       ; preds = %if.end111
  %104 = load i32, i32* %hold_options61, align 4, !dbg !5387
  %105 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5389
  %options115 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %105, i32 0, i32 0, !dbg !5390
  store i32 %104, i32* %options115, align 8, !dbg !5391
  br label %return, !dbg !5392

if.end116:                                        ; preds = %if.end111
  br label %sw.epilog117, !dbg !5393

sw.epilog117:                                     ; preds = %if.end116, %if.end106, %if.end100
  %106 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5394
  call void @string_appends(%struct.string* %106, %struct.string* %arg), !dbg !5395
  %107 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5396
  call void @string_append(%struct.string* %107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.217, i64 0, i64 0)), !dbg !5397
  br label %while.cond, !dbg !5335, !llvm.loop !5398

while.end118:                                     ; preds = %while.cond
  br label %cfront_template_args_done, !dbg !5335

cfront_template_args_done:                        ; preds = %while.end118, %if.then110, %if.then105, %if.then99, %if.then94, %if.then89
  call void @llvm.dbg.label(metadata !5400), !dbg !5401
  call void @string_delete(%struct.string* %arg), !dbg !5402
  %108 = load i8*, i8** %args, align 8, !dbg !5403
  %109 = load i8*, i8** %e, align 8, !dbg !5405
  %cmp119 = icmp uge i8* %108, %109, !dbg !5406
  br i1 %cmp119, label %if.then121, label %if.end124, !dbg !5407

if.then121:                                       ; preds = %cfront_template_args_done
  %110 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5408
  %p122 = getelementptr inbounds %struct.string, %struct.string* %110, i32 0, i32 1, !dbg !5409
  %111 = load i8*, i8** %p122, align 8, !dbg !5410
  %incdec.ptr123 = getelementptr inbounds i8, i8* %111, i32 -1, !dbg !5410
  store i8* %incdec.ptr123, i8** %p122, align 8, !dbg !5410
  br label %if.end124, !dbg !5410

if.end124:                                        ; preds = %if.then121, %cfront_template_args_done
  %112 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5411
  call void @string_append(%struct.string* %112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)), !dbg !5412
  %113 = load i32, i32* %hold_options61, align 4, !dbg !5413
  %114 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5414
  %options125 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %114, i32 0, i32 0, !dbg !5415
  store i32 %113, i32* %options125, align 8, !dbg !5416
  br label %if.end159, !dbg !5417

if.else126:                                       ; preds = %if.else57
  %115 = load i32, i32* %n.addr, align 4, !dbg !5418
  %cmp127 = icmp sgt i32 %115, 10, !dbg !5420
  br i1 %cmp127, label %land.lhs.true129, label %if.else151, !dbg !5421

land.lhs.true129:                                 ; preds = %if.else126
  %116 = load i8**, i8*** %mangled.addr, align 8, !dbg !5422
  %117 = load i8*, i8** %116, align 8, !dbg !5423
  %call130 = call i32 @strncmp(i8* %117, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.190, i64 0, i64 0), i64 8), !dbg !5424
  %cmp131 = icmp eq i32 %call130, 0, !dbg !5425
  br i1 %cmp131, label %land.lhs.true133, label %if.else151, !dbg !5426

land.lhs.true133:                                 ; preds = %land.lhs.true129
  %118 = load i8**, i8*** %mangled.addr, align 8, !dbg !5427
  %119 = load i8*, i8** %118, align 8, !dbg !5428
  %arrayidx134 = getelementptr inbounds i8, i8* %119, i64 9, !dbg !5429
  %120 = load i8, i8* %arrayidx134, align 1, !dbg !5429
  %conv135 = sext i8 %120 to i32, !dbg !5429
  %cmp136 = icmp eq i32 %conv135, 78, !dbg !5430
  br i1 %cmp136, label %land.lhs.true138, label %if.else151, !dbg !5431

land.lhs.true138:                                 ; preds = %land.lhs.true133
  %121 = load i8**, i8*** %mangled.addr, align 8, !dbg !5432
  %122 = load i8*, i8** %121, align 8, !dbg !5433
  %arrayidx139 = getelementptr inbounds i8, i8* %122, i64 8, !dbg !5434
  %123 = load i8, i8* %arrayidx139, align 1, !dbg !5434
  %conv140 = sext i8 %123 to i32, !dbg !5434
  %124 = load i8**, i8*** %mangled.addr, align 8, !dbg !5435
  %125 = load i8*, i8** %124, align 8, !dbg !5436
  %arrayidx141 = getelementptr inbounds i8, i8* %125, i64 10, !dbg !5437
  %126 = load i8, i8* %arrayidx141, align 1, !dbg !5437
  %conv142 = sext i8 %126 to i32, !dbg !5437
  %cmp143 = icmp eq i32 %conv140, %conv142, !dbg !5438
  br i1 %cmp143, label %land.lhs.true145, label %if.else151, !dbg !5439

land.lhs.true145:                                 ; preds = %land.lhs.true138
  %127 = load i8**, i8*** %mangled.addr, align 8, !dbg !5440
  %128 = load i8*, i8** %127, align 8, !dbg !5441
  %arrayidx146 = getelementptr inbounds i8, i8* %128, i64 8, !dbg !5442
  %129 = load i8, i8* %arrayidx146, align 1, !dbg !5442
  %conv147 = sext i8 %129 to i32, !dbg !5442
  %call148 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv147), !dbg !5443
  %tobool149 = icmp ne i8* %call148, null, !dbg !5443
  br i1 %tobool149, label %if.then150, label %if.else151, !dbg !5444

if.then150:                                       ; preds = %land.lhs.true145
  %130 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5445
  call void @string_append(%struct.string* %130, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.191, i64 0, i64 0)), !dbg !5447
  br label %if.end158, !dbg !5448

if.else151:                                       ; preds = %land.lhs.true145, %land.lhs.true138, %land.lhs.true133, %land.lhs.true129, %if.else126
  %131 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5449
  %temp_start152 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %131, i32 0, i32 13, !dbg !5452
  %132 = load i32, i32* %temp_start152, align 4, !dbg !5452
  %cmp153 = icmp eq i32 %132, -1, !dbg !5453
  br i1 %cmp153, label %if.then155, label %if.end157, !dbg !5454

if.then155:                                       ; preds = %if.else151
  %133 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5455
  %temp_start156 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %133, i32 0, i32 13, !dbg !5456
  store i32 0, i32* %temp_start156, align 4, !dbg !5457
  br label %if.end157, !dbg !5455

if.end157:                                        ; preds = %if.then155, %if.else151
  %134 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5458
  %135 = load i8**, i8*** %mangled.addr, align 8, !dbg !5459
  %136 = load i8*, i8** %135, align 8, !dbg !5460
  %137 = load i32, i32* %n.addr, align 4, !dbg !5461
  call void @string_appendn(%struct.string* %134, i8* %136, i32 %137), !dbg !5462
  br label %if.end158

if.end158:                                        ; preds = %if.end157, %if.then150
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.end124
  br label %if.end160

if.end160:                                        ; preds = %if.end159
  %138 = load i32, i32* %n.addr, align 4, !dbg !5463
  %139 = load i8**, i8*** %mangled.addr, align 8, !dbg !5464
  %140 = load i8*, i8** %139, align 8, !dbg !5465
  %idx.ext161 = sext i32 %138 to i64, !dbg !5465
  %add.ptr162 = getelementptr inbounds i8, i8* %140, i64 %idx.ext161, !dbg !5465
  store i8* %add.ptr162, i8** %139, align 8, !dbg !5465
  br label %return, !dbg !5466

return:                                           ; preds = %if.end160, %if.then114, %if.end55
  ret void, !dbg !5466
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @arm_special(i8** %mangled, %struct.string* %declp) #0 !dbg !5467 {
entry:
  %retval = alloca i32, align 4
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %n = alloca i32, align 4
  %success = alloca i32, align 4
  %scan = alloca i8*, align 8
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5474, metadata !DIExpression()), !dbg !5475
  call void @llvm.dbg.declare(metadata i32* %success, metadata !5476, metadata !DIExpression()), !dbg !5477
  store i32 1, i32* %success, align 4, !dbg !5477
  call void @llvm.dbg.declare(metadata i8** %scan, metadata !5478, metadata !DIExpression()), !dbg !5479
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !5480
  %1 = load i8*, i8** %0, align 8, !dbg !5482
  %call = call i32 @strncmp(i8* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.224, i64 0, i64 0), i64 8), !dbg !5483
  %cmp = icmp eq i32 %call, 0, !dbg !5484
  br i1 %cmp, label %if.then, label %if.else, !dbg !5485

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** %mangled.addr, align 8, !dbg !5486
  %3 = load i8*, i8** %2, align 8, !dbg !5488
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 8, !dbg !5489
  store i8* %add.ptr, i8** %scan, align 8, !dbg !5490
  br label %while.cond, !dbg !5491

while.cond:                                       ; preds = %if.end17, %if.then
  %4 = load i8*, i8** %scan, align 8, !dbg !5492
  %5 = load i8, i8* %4, align 1, !dbg !5493
  %conv = sext i8 %5 to i32, !dbg !5493
  %cmp1 = icmp ne i32 %conv, 0, !dbg !5494
  br i1 %cmp1, label %while.body, label %while.end, !dbg !5491

while.body:                                       ; preds = %while.cond
  %call3 = call i32 @consume_count(i8** %scan), !dbg !5495
  store i32 %call3, i32* %n, align 4, !dbg !5497
  %6 = load i32, i32* %n, align 4, !dbg !5498
  %cmp4 = icmp eq i32 %6, -1, !dbg !5500
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !5501

if.then6:                                         ; preds = %while.body
  store i32 0, i32* %retval, align 4, !dbg !5502
  br label %return, !dbg !5502

if.end:                                           ; preds = %while.body
  %7 = load i32, i32* %n, align 4, !dbg !5504
  %8 = load i8*, i8** %scan, align 8, !dbg !5505
  %idx.ext = sext i32 %7 to i64, !dbg !5505
  %add.ptr7 = getelementptr inbounds i8, i8* %8, i64 %idx.ext, !dbg !5505
  store i8* %add.ptr7, i8** %scan, align 8, !dbg !5505
  %9 = load i8*, i8** %scan, align 8, !dbg !5506
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 0, !dbg !5506
  %10 = load i8, i8* %arrayidx, align 1, !dbg !5506
  %conv8 = sext i8 %10 to i32, !dbg !5506
  %cmp9 = icmp eq i32 %conv8, 95, !dbg !5508
  br i1 %cmp9, label %land.lhs.true, label %if.end17, !dbg !5509

land.lhs.true:                                    ; preds = %if.end
  %11 = load i8*, i8** %scan, align 8, !dbg !5510
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 1, !dbg !5510
  %12 = load i8, i8* %arrayidx11, align 1, !dbg !5510
  %conv12 = sext i8 %12 to i32, !dbg !5510
  %cmp13 = icmp eq i32 %conv12, 95, !dbg !5511
  br i1 %cmp13, label %if.then15, label %if.end17, !dbg !5512

if.then15:                                        ; preds = %land.lhs.true
  %13 = load i8*, i8** %scan, align 8, !dbg !5513
  %add.ptr16 = getelementptr inbounds i8, i8* %13, i64 2, !dbg !5513
  store i8* %add.ptr16, i8** %scan, align 8, !dbg !5513
  br label %if.end17, !dbg !5515

if.end17:                                         ; preds = %if.then15, %land.lhs.true, %if.end
  br label %while.cond, !dbg !5491, !llvm.loop !5516

while.end:                                        ; preds = %while.cond
  %14 = load i8**, i8*** %mangled.addr, align 8, !dbg !5518
  %15 = load i8*, i8** %14, align 8, !dbg !5519
  %add.ptr18 = getelementptr inbounds i8, i8* %15, i64 8, !dbg !5519
  store i8* %add.ptr18, i8** %14, align 8, !dbg !5519
  br label %while.cond19, !dbg !5520

while.cond19:                                     ; preds = %if.end46, %while.end
  %16 = load i8**, i8*** %mangled.addr, align 8, !dbg !5521
  %17 = load i8*, i8** %16, align 8, !dbg !5522
  %18 = load i8, i8* %17, align 1, !dbg !5523
  %conv20 = sext i8 %18 to i32, !dbg !5523
  %cmp21 = icmp ne i32 %conv20, 0, !dbg !5524
  br i1 %cmp21, label %while.body23, label %while.end47, !dbg !5520

while.body23:                                     ; preds = %while.cond19
  %19 = load i8**, i8*** %mangled.addr, align 8, !dbg !5525
  %call24 = call i32 @consume_count(i8** %19), !dbg !5527
  store i32 %call24, i32* %n, align 4, !dbg !5528
  %20 = load i32, i32* %n, align 4, !dbg !5529
  %cmp25 = icmp eq i32 %20, -1, !dbg !5531
  br i1 %cmp25, label %if.then31, label %lor.lhs.false, !dbg !5532

lor.lhs.false:                                    ; preds = %while.body23
  %21 = load i32, i32* %n, align 4, !dbg !5533
  %conv27 = sext i32 %21 to i64, !dbg !5533
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !5534
  %23 = load i8*, i8** %22, align 8, !dbg !5535
  %call28 = call i64 @strlen(i8* %23), !dbg !5536
  %cmp29 = icmp sgt i64 %conv27, %call28, !dbg !5537
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !5538

if.then31:                                        ; preds = %lor.lhs.false, %while.body23
  store i32 0, i32* %retval, align 4, !dbg !5539
  br label %return, !dbg !5539

if.end32:                                         ; preds = %lor.lhs.false
  %24 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5540
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !5541
  %26 = load i8*, i8** %25, align 8, !dbg !5542
  %27 = load i32, i32* %n, align 4, !dbg !5543
  call void @string_prependn(%struct.string* %24, i8* %26, i32 %27), !dbg !5544
  %28 = load i32, i32* %n, align 4, !dbg !5545
  %29 = load i8**, i8*** %mangled.addr, align 8, !dbg !5546
  %30 = load i8*, i8** %29, align 8, !dbg !5547
  %idx.ext33 = sext i32 %28 to i64, !dbg !5547
  %add.ptr34 = getelementptr inbounds i8, i8* %30, i64 %idx.ext33, !dbg !5547
  store i8* %add.ptr34, i8** %29, align 8, !dbg !5547
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !5548
  %32 = load i8*, i8** %31, align 8, !dbg !5550
  %arrayidx35 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !5551
  %33 = load i8, i8* %arrayidx35, align 1, !dbg !5551
  %conv36 = sext i8 %33 to i32, !dbg !5551
  %cmp37 = icmp eq i32 %conv36, 95, !dbg !5552
  br i1 %cmp37, label %land.lhs.true39, label %if.end46, !dbg !5553

land.lhs.true39:                                  ; preds = %if.end32
  %34 = load i8**, i8*** %mangled.addr, align 8, !dbg !5554
  %35 = load i8*, i8** %34, align 8, !dbg !5555
  %arrayidx40 = getelementptr inbounds i8, i8* %35, i64 1, !dbg !5556
  %36 = load i8, i8* %arrayidx40, align 1, !dbg !5556
  %conv41 = sext i8 %36 to i32, !dbg !5556
  %cmp42 = icmp eq i32 %conv41, 95, !dbg !5557
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !5558

if.then44:                                        ; preds = %land.lhs.true39
  %37 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5559
  call void @string_prepend(%struct.string* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0)), !dbg !5561
  %38 = load i8**, i8*** %mangled.addr, align 8, !dbg !5562
  %39 = load i8*, i8** %38, align 8, !dbg !5563
  %add.ptr45 = getelementptr inbounds i8, i8* %39, i64 2, !dbg !5563
  store i8* %add.ptr45, i8** %38, align 8, !dbg !5563
  br label %if.end46, !dbg !5564

if.end46:                                         ; preds = %if.then44, %land.lhs.true39, %if.end32
  br label %while.cond19, !dbg !5520, !llvm.loop !5565

while.end47:                                      ; preds = %while.cond19
  %40 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5567
  call void @string_append(%struct.string* %40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.188, i64 0, i64 0)), !dbg !5568
  br label %if.end48, !dbg !5569

if.else:                                          ; preds = %entry
  store i32 0, i32* %success, align 4, !dbg !5570
  br label %if.end48

if.end48:                                         ; preds = %if.else, %while.end47
  %41 = load i32, i32* %success, align 4, !dbg !5572
  store i32 %41, i32* %retval, align 4, !dbg !5573
  br label %return, !dbg !5573

return:                                           ; preds = %if.end48, %if.then31, %if.then6
  %42 = load i32, i32* %retval, align 4, !dbg !5574
  ret i32 %42, !dbg !5574
}

declare dso_local i8* @strstr(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @iterate_demangle_function(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp, i8* %scan) #0 !dbg !5575 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %scan.addr = alloca i8*, align 8
  %mangle_init = alloca i8*, align 8
  %success = alloca i32, align 4
  %decl_init = alloca %struct.string, align 8
  %work_init = alloca %struct.work_stuff, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !5582, metadata !DIExpression()), !dbg !5583
  store i8* %scan, i8** %scan.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %scan.addr, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata i8** %mangle_init, metadata !5586, metadata !DIExpression()), !dbg !5587
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !5588
  %1 = load i8*, i8** %0, align 8, !dbg !5589
  store i8* %1, i8** %mangle_init, align 8, !dbg !5587
  call void @llvm.dbg.declare(metadata i32* %success, metadata !5590, metadata !DIExpression()), !dbg !5591
  store i32 0, i32* %success, align 4, !dbg !5591
  call void @llvm.dbg.declare(metadata %struct.string* %decl_init, metadata !5592, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.declare(metadata %struct.work_stuff* %work_init, metadata !5594, metadata !DIExpression()), !dbg !5595
  %2 = load i8*, i8** %scan.addr, align 8, !dbg !5596
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 2, !dbg !5598
  %3 = load i8, i8* %add.ptr, align 1, !dbg !5599
  %conv = sext i8 %3 to i32, !dbg !5599
  %cmp = icmp eq i32 %conv, 0, !dbg !5600
  br i1 %cmp, label %if.then, label %if.end, !dbg !5601

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5602
  br label %return, !dbg !5602

if.end:                                           ; preds = %entry
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5603
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 0, !dbg !5603
  %5 = load i32, i32* %options, align 8, !dbg !5603
  %and = and i32 %5, 2048, !dbg !5603
  %tobool = icmp ne i32 %and, 0, !dbg !5603
  br i1 %tobool, label %if.then17, label %lor.lhs.false, !dbg !5605

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5606
  %options2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 0, !dbg !5606
  %7 = load i32, i32* %options2, align 8, !dbg !5606
  %and3 = and i32 %7, 1024, !dbg !5606
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5606
  br i1 %tobool4, label %if.then17, label %lor.lhs.false5, !dbg !5607

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5608
  %options6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 0, !dbg !5608
  %9 = load i32, i32* %options6, align 8, !dbg !5608
  %and7 = and i32 %9, 4096, !dbg !5608
  %tobool8 = icmp ne i32 %and7, 0, !dbg !5608
  br i1 %tobool8, label %if.then17, label %lor.lhs.false9, !dbg !5609

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5610
  %options10 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 0, !dbg !5610
  %11 = load i32, i32* %options10, align 8, !dbg !5610
  %and11 = and i32 %11, 8192, !dbg !5610
  %tobool12 = icmp ne i32 %and11, 0, !dbg !5610
  br i1 %tobool12, label %if.then17, label %lor.lhs.false13, !dbg !5611

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %12 = load i8*, i8** %scan.addr, align 8, !dbg !5612
  %add.ptr14 = getelementptr inbounds i8, i8* %12, i64 2, !dbg !5613
  %call = call i8* @strstr(i8* %add.ptr14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.216, i64 0, i64 0)), !dbg !5614
  %cmp15 = icmp eq i8* %call, null, !dbg !5615
  br i1 %cmp15, label %if.then17, label %if.end19, !dbg !5616

if.then17:                                        ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %if.end
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5617
  %14 = load i8**, i8*** %mangled.addr, align 8, !dbg !5618
  %15 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5619
  %16 = load i8*, i8** %scan.addr, align 8, !dbg !5620
  %call18 = call i32 @demangle_function_name(%struct.work_stuff* %13, i8** %14, %struct.string* %15, i8* %16), !dbg !5621
  store i32 %call18, i32* %retval, align 4, !dbg !5622
  br label %return, !dbg !5622

if.end19:                                         ; preds = %lor.lhs.false13
  call void @string_init(%struct.string* %decl_init), !dbg !5623
  %17 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5624
  call void @string_appends(%struct.string* %decl_init, %struct.string* %17), !dbg !5625
  %18 = bitcast %struct.work_stuff* %work_init to i8*, !dbg !5626
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 112, i1 false), !dbg !5626
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5627
  call void @work_stuff_copy_to_from(%struct.work_stuff* %work_init, %struct.work_stuff* %19), !dbg !5628
  br label %while.cond, !dbg !5629

while.cond:                                       ; preds = %while.end52, %if.end19
  %20 = load i8*, i8** %scan.addr, align 8, !dbg !5630
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 2, !dbg !5630
  %21 = load i8, i8* %arrayidx, align 1, !dbg !5630
  %tobool20 = icmp ne i8 %21, 0, !dbg !5629
  br i1 %tobool20, label %while.body, label %while.end54, !dbg !5629

while.body:                                       ; preds = %while.cond
  %22 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5631
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !5634
  %24 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5635
  %25 = load i8*, i8** %scan.addr, align 8, !dbg !5636
  %call21 = call i32 @demangle_function_name(%struct.work_stuff* %22, i8** %23, %struct.string* %24, i8* %25), !dbg !5637
  %tobool22 = icmp ne i32 %call21, 0, !dbg !5637
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !5638

if.then23:                                        ; preds = %while.body
  %26 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5639
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !5641
  %28 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5642
  %call24 = call i32 @demangle_signature(%struct.work_stuff* %26, i8** %27, %struct.string* %28), !dbg !5643
  store i32 %call24, i32* %success, align 4, !dbg !5644
  %29 = load i32, i32* %success, align 4, !dbg !5645
  %tobool25 = icmp ne i32 %29, 0, !dbg !5645
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !5647

if.then26:                                        ; preds = %if.then23
  br label %while.end54, !dbg !5648

if.end27:                                         ; preds = %if.then23
  br label %if.end28, !dbg !5649

if.end28:                                         ; preds = %if.end27, %while.body
  %30 = load i8*, i8** %mangle_init, align 8, !dbg !5650
  %31 = load i8**, i8*** %mangled.addr, align 8, !dbg !5651
  store i8* %30, i8** %31, align 8, !dbg !5652
  %32 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5653
  call void @string_clear(%struct.string* %32), !dbg !5654
  %33 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !5655
  call void @string_appends(%struct.string* %33, %struct.string* %decl_init), !dbg !5656
  %34 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5657
  call void @work_stuff_copy_to_from(%struct.work_stuff* %34, %struct.work_stuff* %work_init), !dbg !5658
  %35 = load i8*, i8** %scan.addr, align 8, !dbg !5659
  %add.ptr29 = getelementptr inbounds i8, i8* %35, i64 2, !dbg !5659
  store i8* %add.ptr29, i8** %scan.addr, align 8, !dbg !5659
  br label %while.cond30, !dbg !5660

while.cond30:                                     ; preds = %while.body41, %if.end28
  %36 = load i8*, i8** %scan.addr, align 8, !dbg !5661
  %37 = load i8, i8* %36, align 1, !dbg !5662
  %conv31 = sext i8 %37 to i32, !dbg !5662
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !5662
  br i1 %tobool32, label %land.rhs, label %land.end, !dbg !5663

land.rhs:                                         ; preds = %while.cond30
  %38 = load i8*, i8** %scan.addr, align 8, !dbg !5664
  %arrayidx33 = getelementptr inbounds i8, i8* %38, i64 0, !dbg !5664
  %39 = load i8, i8* %arrayidx33, align 1, !dbg !5664
  %conv34 = sext i8 %39 to i32, !dbg !5664
  %cmp35 = icmp ne i32 %conv34, 95, !dbg !5665
  br i1 %cmp35, label %lor.end, label %lor.rhs, !dbg !5666

lor.rhs:                                          ; preds = %land.rhs
  %40 = load i8*, i8** %scan.addr, align 8, !dbg !5667
  %arrayidx37 = getelementptr inbounds i8, i8* %40, i64 1, !dbg !5667
  %41 = load i8, i8* %arrayidx37, align 1, !dbg !5667
  %conv38 = sext i8 %41 to i32, !dbg !5667
  %cmp39 = icmp ne i32 %conv38, 95, !dbg !5668
  br label %lor.end, !dbg !5666

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %42 = phi i1 [ true, %land.rhs ], [ %cmp39, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond30
  %43 = phi i1 [ false, %while.cond30 ], [ %42, %lor.end ], !dbg !5669
  br i1 %43, label %while.body41, label %while.end, !dbg !5660

while.body41:                                     ; preds = %land.end
  %44 = load i8*, i8** %scan.addr, align 8, !dbg !5670
  %incdec.ptr = getelementptr inbounds i8, i8* %44, i32 1, !dbg !5670
  store i8* %incdec.ptr, i8** %scan.addr, align 8, !dbg !5670
  br label %while.cond30, !dbg !5660, !llvm.loop !5671

while.end:                                        ; preds = %land.end
  br label %while.cond42, !dbg !5672

while.cond42:                                     ; preds = %while.body50, %while.end
  %45 = load i8*, i8** %scan.addr, align 8, !dbg !5673
  %46 = load i8, i8* %45, align 1, !dbg !5674
  %conv43 = sext i8 %46 to i32, !dbg !5674
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5674
  br i1 %tobool44, label %land.rhs45, label %land.end49, !dbg !5675

land.rhs45:                                       ; preds = %while.cond42
  %47 = load i8*, i8** %scan.addr, align 8, !dbg !5676
  %48 = load i8, i8* %47, align 1, !dbg !5677
  %conv46 = sext i8 %48 to i32, !dbg !5677
  %cmp47 = icmp eq i32 %conv46, 95, !dbg !5678
  br label %land.end49

land.end49:                                       ; preds = %land.rhs45, %while.cond42
  %49 = phi i1 [ false, %while.cond42 ], [ %cmp47, %land.rhs45 ], !dbg !5669
  br i1 %49, label %while.body50, label %while.end52, !dbg !5672

while.body50:                                     ; preds = %land.end49
  %50 = load i8*, i8** %scan.addr, align 8, !dbg !5679
  %incdec.ptr51 = getelementptr inbounds i8, i8* %50, i32 1, !dbg !5679
  store i8* %incdec.ptr51, i8** %scan.addr, align 8, !dbg !5679
  br label %while.cond42, !dbg !5672, !llvm.loop !5680

while.end52:                                      ; preds = %land.end49
  %51 = load i8*, i8** %scan.addr, align 8, !dbg !5681
  %add.ptr53 = getelementptr inbounds i8, i8* %51, i64 -2, !dbg !5681
  store i8* %add.ptr53, i8** %scan.addr, align 8, !dbg !5681
  br label %while.cond, !dbg !5629, !llvm.loop !5682

while.end54:                                      ; preds = %if.then26, %while.cond
  call void @delete_work_stuff(%struct.work_stuff* %work_init), !dbg !5684
  call void @string_delete(%struct.string* %decl_init), !dbg !5685
  %52 = load i32, i32* %success, align 4, !dbg !5686
  store i32 %52, i32* %retval, align 4, !dbg !5687
  br label %return, !dbg !5687

return:                                           ; preds = %while.end54, %if.then17, %if.then
  %53 = load i32, i32* %retval, align 4, !dbg !5688
  ret i32 %53, !dbg !5688
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_hpacc_template_const_value(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result) #0 !dbg !5689 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %unsigned_const = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5692, metadata !DIExpression()), !dbg !5693
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !5694, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.declare(metadata i32* %unsigned_const, metadata !5696, metadata !DIExpression()), !dbg !5697
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !5698
  %1 = load i8*, i8** %0, align 8, !dbg !5700
  %2 = load i8, i8* %1, align 1, !dbg !5701
  %conv = sext i8 %2 to i32, !dbg !5701
  %cmp = icmp ne i32 %conv, 85, !dbg !5702
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5703

land.lhs.true:                                    ; preds = %entry
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !5704
  %4 = load i8*, i8** %3, align 8, !dbg !5705
  %5 = load i8, i8* %4, align 1, !dbg !5706
  %conv2 = sext i8 %5 to i32, !dbg !5706
  %cmp3 = icmp ne i32 %conv2, 83, !dbg !5707
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5708

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !5709
  br label %return, !dbg !5709

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !5710
  %7 = load i8*, i8** %6, align 8, !dbg !5711
  %8 = load i8, i8* %7, align 1, !dbg !5712
  %conv5 = sext i8 %8 to i32, !dbg !5712
  %cmp6 = icmp eq i32 %conv5, 85, !dbg !5713
  %conv7 = zext i1 %cmp6 to i32, !dbg !5713
  store i32 %conv7, i32* %unsigned_const, align 4, !dbg !5714
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !5715
  %10 = load i8*, i8** %9, align 8, !dbg !5716
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !5716
  store i8* %incdec.ptr, i8** %9, align 8, !dbg !5716
  %11 = load i8**, i8*** %mangled.addr, align 8, !dbg !5717
  %12 = load i8*, i8** %11, align 8, !dbg !5718
  %13 = load i8, i8* %12, align 1, !dbg !5719
  %conv8 = sext i8 %13 to i32, !dbg !5719
  switch i32 %conv8, label %sw.default [
    i32 78, label %sw.bb
    i32 80, label %sw.bb9
    i32 77, label %sw.bb11
  ], !dbg !5720

sw.bb:                                            ; preds = %if.end
  %14 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5721
  call void @string_append(%struct.string* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54, i64 0, i64 0)), !dbg !5723
  br label %sw.bb9, !dbg !5723

sw.bb9:                                           ; preds = %if.end, %sw.bb
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !5724
  %16 = load i8*, i8** %15, align 8, !dbg !5725
  %incdec.ptr10 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !5725
  store i8* %incdec.ptr10, i8** %15, align 8, !dbg !5725
  br label %sw.epilog, !dbg !5726

sw.bb11:                                          ; preds = %if.end
  %17 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5727
  call void @string_append(%struct.string* %17, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.218, i64 0, i64 0)), !dbg !5728
  %18 = load i8**, i8*** %mangled.addr, align 8, !dbg !5729
  %19 = load i8*, i8** %18, align 8, !dbg !5730
  %incdec.ptr12 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !5730
  store i8* %incdec.ptr12, i8** %18, align 8, !dbg !5730
  store i32 1, i32* %retval, align 4, !dbg !5731
  br label %return, !dbg !5731

sw.default:                                       ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5732
  br label %return, !dbg !5732

sw.epilog:                                        ; preds = %sw.bb9
  %20 = load i8**, i8*** %mangled.addr, align 8, !dbg !5733
  %21 = load i8*, i8** %20, align 8, !dbg !5733
  %22 = load i8, i8* %21, align 1, !dbg !5733
  %conv13 = zext i8 %22 to i32, !dbg !5733
  %and = and i32 %conv13, 255, !dbg !5733
  %idxprom = sext i32 %and to i64, !dbg !5733
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !5733
  %23 = load i16, i16* %arrayidx, align 2, !dbg !5733
  %conv14 = zext i16 %23 to i32, !dbg !5733
  %and15 = and i32 %conv14, 4, !dbg !5733
  %tobool = icmp ne i32 %and15, 0, !dbg !5733
  br i1 %tobool, label %if.end17, label %if.then16, !dbg !5735

if.then16:                                        ; preds = %sw.epilog
  store i32 0, i32* %retval, align 4, !dbg !5736
  br label %return, !dbg !5736

if.end17:                                         ; preds = %sw.epilog
  br label %while.cond, !dbg !5737

while.cond:                                       ; preds = %while.body, %if.end17
  %24 = load i8**, i8*** %mangled.addr, align 8, !dbg !5738
  %25 = load i8*, i8** %24, align 8, !dbg !5738
  %26 = load i8, i8* %25, align 1, !dbg !5738
  %conv18 = zext i8 %26 to i32, !dbg !5738
  %and19 = and i32 %conv18, 255, !dbg !5738
  %idxprom20 = sext i32 %and19 to i64, !dbg !5738
  %arrayidx21 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom20, !dbg !5738
  %27 = load i16, i16* %arrayidx21, align 2, !dbg !5738
  %conv22 = zext i16 %27 to i32, !dbg !5738
  %and23 = and i32 %conv22, 4, !dbg !5738
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5737
  br i1 %tobool24, label %while.body, label %while.end, !dbg !5737

while.body:                                       ; preds = %while.cond
  %28 = load i8**, i8*** %mangled.addr, align 8, !dbg !5739
  %29 = load i8*, i8** %28, align 8, !dbg !5741
  %30 = load i8, i8* %29, align 1, !dbg !5742
  store i8 %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0), align 1, !dbg !5743
  %31 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5744
  call void @string_append(%struct.string* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0)), !dbg !5745
  %32 = load i8**, i8*** %mangled.addr, align 8, !dbg !5746
  %33 = load i8*, i8** %32, align 8, !dbg !5747
  %incdec.ptr25 = getelementptr inbounds i8, i8* %33, i32 1, !dbg !5747
  store i8* %incdec.ptr25, i8** %32, align 8, !dbg !5747
  br label %while.cond, !dbg !5737, !llvm.loop !5748

while.end:                                        ; preds = %while.cond
  %34 = load i32, i32* %unsigned_const, align 4, !dbg !5750
  %tobool26 = icmp ne i32 %34, 0, !dbg !5750
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !5752

if.then27:                                        ; preds = %while.end
  %35 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5753
  call void @string_append(%struct.string* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.219, i64 0, i64 0)), !dbg !5754
  br label %if.end28, !dbg !5754

if.end28:                                         ; preds = %if.then27, %while.end
  store i32 1, i32* %retval, align 4, !dbg !5755
  br label %return, !dbg !5755

return:                                           ; preds = %if.end28, %if.then16, %sw.default, %sw.bb11, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !5756
  ret i32 %36, !dbg !5756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_hpacc_template_literal(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result) #0 !dbg !5757 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %literal_len = alloca i32, align 4
  %recurse = alloca i8*, align 8
  %recurse_dem = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5758, metadata !DIExpression()), !dbg !5759
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !5760, metadata !DIExpression()), !dbg !5761
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !5762, metadata !DIExpression()), !dbg !5763
  call void @llvm.dbg.declare(metadata i32* %literal_len, metadata !5764, metadata !DIExpression()), !dbg !5765
  store i32 0, i32* %literal_len, align 4, !dbg !5765
  call void @llvm.dbg.declare(metadata i8** %recurse, metadata !5766, metadata !DIExpression()), !dbg !5767
  call void @llvm.dbg.declare(metadata i8** %recurse_dem, metadata !5768, metadata !DIExpression()), !dbg !5769
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !5770
  %1 = load i8*, i8** %0, align 8, !dbg !5772
  %2 = load i8, i8* %1, align 1, !dbg !5773
  %conv = sext i8 %2 to i32, !dbg !5773
  %cmp = icmp ne i32 %conv, 65, !dbg !5774
  br i1 %cmp, label %if.then, label %if.end, !dbg !5775

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5776
  br label %return, !dbg !5776

if.end:                                           ; preds = %entry
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !5777
  %4 = load i8*, i8** %3, align 8, !dbg !5778
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !5778
  store i8* %incdec.ptr, i8** %3, align 8, !dbg !5778
  %5 = load i8**, i8*** %mangled.addr, align 8, !dbg !5779
  %call = call i32 @consume_count(i8** %5), !dbg !5780
  store i32 %call, i32* %literal_len, align 4, !dbg !5781
  %6 = load i32, i32* %literal_len, align 4, !dbg !5782
  %cmp2 = icmp sle i32 %6, 0, !dbg !5784
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !5785

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5786
  br label %return, !dbg !5786

if.end5:                                          ; preds = %if.end
  %7 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5787
  call void @string_append(%struct.string* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i64 0, i64 0)), !dbg !5788
  %8 = load i32, i32* %literal_len, align 4, !dbg !5789
  %add = add nsw i32 %8, 1, !dbg !5789
  %conv6 = sext i32 %add to i64, !dbg !5789
  %mul = mul i64 1, %conv6, !dbg !5789
  %call7 = call i8* @xmalloc(i64 %mul), !dbg !5789
  store i8* %call7, i8** %recurse, align 8, !dbg !5790
  %9 = load i8*, i8** %recurse, align 8, !dbg !5791
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !5792
  %11 = load i8*, i8** %10, align 8, !dbg !5793
  %12 = load i32, i32* %literal_len, align 4, !dbg !5794
  %conv8 = sext i32 %12 to i64, !dbg !5794
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %11, i64 %conv8, i1 false), !dbg !5795
  %13 = load i8*, i8** %recurse, align 8, !dbg !5796
  %14 = load i32, i32* %literal_len, align 4, !dbg !5797
  %idxprom = sext i32 %14 to i64, !dbg !5796
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %idxprom, !dbg !5796
  store i8 0, i8* %arrayidx, align 1, !dbg !5798
  %15 = load i8*, i8** %recurse, align 8, !dbg !5799
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5800
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 0, !dbg !5801
  %17 = load i32, i32* %options, align 8, !dbg !5801
  %call9 = call i8* @cplus_demangle(i8* %15, i32 %17), !dbg !5802
  store i8* %call9, i8** %recurse_dem, align 8, !dbg !5803
  %18 = load i8*, i8** %recurse_dem, align 8, !dbg !5804
  %tobool = icmp ne i8* %18, null, !dbg !5804
  br i1 %tobool, label %if.then10, label %if.else, !dbg !5806

if.then10:                                        ; preds = %if.end5
  %19 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5807
  %20 = load i8*, i8** %recurse_dem, align 8, !dbg !5809
  call void @string_append(%struct.string* %19, i8* %20), !dbg !5810
  %21 = load i8*, i8** %recurse_dem, align 8, !dbg !5811
  call void @free(i8* %21), !dbg !5812
  br label %if.end11, !dbg !5813

if.else:                                          ; preds = %if.end5
  %22 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !5814
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !5816
  %24 = load i8*, i8** %23, align 8, !dbg !5817
  %25 = load i32, i32* %literal_len, align 4, !dbg !5818
  call void @string_appendn(%struct.string* %22, i8* %24, i32 %25), !dbg !5819
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then10
  %26 = load i32, i32* %literal_len, align 4, !dbg !5820
  %27 = load i8**, i8*** %mangled.addr, align 8, !dbg !5821
  %28 = load i8*, i8** %27, align 8, !dbg !5822
  %idx.ext = sext i32 %26 to i64, !dbg !5822
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext, !dbg !5822
  store i8* %add.ptr, i8** %27, align 8, !dbg !5822
  %29 = load i8*, i8** %recurse, align 8, !dbg !5823
  call void @free(i8* %29), !dbg !5824
  store i32 1, i32* %retval, align 4, !dbg !5825
  br label %return, !dbg !5825

return:                                           ; preds = %if.end11, %if.then4, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !5826
  ret i32 %30, !dbg !5826
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @arm_pt(%struct.work_stuff* %work, i8* %mangled, i32 %n, i8** %anchor, i8** %args) #0 !dbg !5827 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %anchor.addr = alloca i8**, align 8
  %args.addr = alloca i8**, align 8
  %len = alloca i32, align 4
  %len34 = alloca i32, align 4
  %len57 = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !5830, metadata !DIExpression()), !dbg !5831
  store i8* %mangled, i8** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mangled.addr, metadata !5832, metadata !DIExpression()), !dbg !5833
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5834, metadata !DIExpression()), !dbg !5835
  store i8** %anchor, i8*** %anchor.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %anchor.addr, metadata !5836, metadata !DIExpression()), !dbg !5837
  store i8** %args, i8*** %args.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %args.addr, metadata !5838, metadata !DIExpression()), !dbg !5839
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5840
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 0, !dbg !5840
  %1 = load i32, i32* %options, align 8, !dbg !5840
  %and = and i32 %1, 2048, !dbg !5840
  %tobool = icmp ne i32 %and, 0, !dbg !5840
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !5842

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5843
  %options1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 0, !dbg !5843
  %3 = load i32, i32* %options1, align 8, !dbg !5843
  %and2 = and i32 %3, 4096, !dbg !5843
  %tobool3 = icmp ne i32 %and2, 0, !dbg !5843
  br i1 %tobool3, label %land.lhs.true, label %if.end16, !dbg !5844

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %mangled.addr, align 8, !dbg !5845
  %call = call i8* @strstr(i8* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i64 0, i64 0)), !dbg !5846
  %5 = load i8**, i8*** %anchor.addr, align 8, !dbg !5847
  store i8* %call, i8** %5, align 8, !dbg !5848
  %tobool4 = icmp ne i8* %call, null, !dbg !5848
  br i1 %tobool4, label %if.then, label %if.end16, !dbg !5849

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %len, metadata !5850, metadata !DIExpression()), !dbg !5852
  %6 = load i8**, i8*** %anchor.addr, align 8, !dbg !5853
  %7 = load i8*, i8** %6, align 8, !dbg !5854
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 6, !dbg !5855
  %8 = load i8**, i8*** %args.addr, align 8, !dbg !5856
  store i8* %add.ptr, i8** %8, align 8, !dbg !5857
  %9 = load i8**, i8*** %args.addr, align 8, !dbg !5858
  %call5 = call i32 @consume_count(i8** %9), !dbg !5859
  store i32 %call5, i32* %len, align 4, !dbg !5860
  %10 = load i32, i32* %len, align 4, !dbg !5861
  %cmp = icmp eq i32 %10, -1, !dbg !5863
  br i1 %cmp, label %if.then6, label %if.end, !dbg !5864

if.then6:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !5865
  br label %return, !dbg !5865

if.end:                                           ; preds = %if.then
  %11 = load i8**, i8*** %args.addr, align 8, !dbg !5866
  %12 = load i8*, i8** %11, align 8, !dbg !5868
  %13 = load i32, i32* %len, align 4, !dbg !5869
  %idx.ext = sext i32 %13 to i64, !dbg !5870
  %add.ptr7 = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !5870
  %14 = load i8*, i8** %mangled.addr, align 8, !dbg !5871
  %15 = load i32, i32* %n.addr, align 4, !dbg !5872
  %idx.ext8 = sext i32 %15 to i64, !dbg !5873
  %add.ptr9 = getelementptr inbounds i8, i8* %14, i64 %idx.ext8, !dbg !5873
  %cmp10 = icmp eq i8* %add.ptr7, %add.ptr9, !dbg !5874
  br i1 %cmp10, label %land.lhs.true11, label %if.end15, !dbg !5875

land.lhs.true11:                                  ; preds = %if.end
  %16 = load i8**, i8*** %args.addr, align 8, !dbg !5876
  %17 = load i8*, i8** %16, align 8, !dbg !5877
  %18 = load i8, i8* %17, align 1, !dbg !5878
  %conv = sext i8 %18 to i32, !dbg !5878
  %cmp12 = icmp eq i32 %conv, 95, !dbg !5879
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !5880

if.then14:                                        ; preds = %land.lhs.true11
  %19 = load i8**, i8*** %args.addr, align 8, !dbg !5881
  %20 = load i8*, i8** %19, align 8, !dbg !5883
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1, !dbg !5883
  store i8* %incdec.ptr, i8** %19, align 8, !dbg !5883
  store i32 1, i32* %retval, align 4, !dbg !5884
  br label %return, !dbg !5884

if.end15:                                         ; preds = %land.lhs.true11, %if.end
  br label %if.end16, !dbg !5885

if.end16:                                         ; preds = %if.end15, %land.lhs.true, %lor.lhs.false
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5886
  %options17 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 0, !dbg !5886
  %22 = load i32, i32* %options17, align 8, !dbg !5886
  %and18 = and i32 %22, 256, !dbg !5886
  %tobool19 = icmp ne i32 %and18, 0, !dbg !5886
  br i1 %tobool19, label %if.then24, label %lor.lhs.false20, !dbg !5888

lor.lhs.false20:                                  ; preds = %if.end16
  %23 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !5889
  %options21 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %23, i32 0, i32 0, !dbg !5889
  %24 = load i32, i32* %options21, align 8, !dbg !5889
  %and22 = and i32 %24, 8192, !dbg !5889
  %tobool23 = icmp ne i32 %and22, 0, !dbg !5889
  br i1 %tobool23, label %if.then24, label %if.end79, !dbg !5890

if.then24:                                        ; preds = %lor.lhs.false20, %if.end16
  %25 = load i8*, i8** %mangled.addr, align 8, !dbg !5891
  %call25 = call i8* @strstr(i8* %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.221, i64 0, i64 0)), !dbg !5894
  %26 = load i8**, i8*** %anchor.addr, align 8, !dbg !5895
  store i8* %call25, i8** %26, align 8, !dbg !5896
  %tobool26 = icmp ne i8* %call25, null, !dbg !5896
  br i1 %tobool26, label %if.then33, label %lor.lhs.false27, !dbg !5897

lor.lhs.false27:                                  ; preds = %if.then24
  %27 = load i8*, i8** %mangled.addr, align 8, !dbg !5898
  %call28 = call i8* @strstr(i8* %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.222, i64 0, i64 0)), !dbg !5899
  %28 = load i8**, i8*** %anchor.addr, align 8, !dbg !5900
  store i8* %call28, i8** %28, align 8, !dbg !5901
  %tobool29 = icmp ne i8* %call28, null, !dbg !5901
  br i1 %tobool29, label %if.then33, label %lor.lhs.false30, !dbg !5902

lor.lhs.false30:                                  ; preds = %lor.lhs.false27
  %29 = load i8*, i8** %mangled.addr, align 8, !dbg !5903
  %call31 = call i8* @strstr(i8* %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i64 0, i64 0)), !dbg !5904
  %30 = load i8**, i8*** %anchor.addr, align 8, !dbg !5905
  store i8* %call31, i8** %30, align 8, !dbg !5906
  %tobool32 = icmp ne i8* %call31, null, !dbg !5906
  br i1 %tobool32, label %if.then33, label %if.else, !dbg !5907

if.then33:                                        ; preds = %lor.lhs.false30, %lor.lhs.false27, %if.then24
  call void @llvm.dbg.declare(metadata i32* %len34, metadata !5908, metadata !DIExpression()), !dbg !5910
  %31 = load i8**, i8*** %anchor.addr, align 8, !dbg !5911
  %32 = load i8*, i8** %31, align 8, !dbg !5912
  %add.ptr35 = getelementptr inbounds i8, i8* %32, i64 6, !dbg !5913
  %33 = load i8**, i8*** %args.addr, align 8, !dbg !5914
  store i8* %add.ptr35, i8** %33, align 8, !dbg !5915
  %34 = load i8**, i8*** %args.addr, align 8, !dbg !5916
  %call36 = call i32 @consume_count(i8** %34), !dbg !5917
  store i32 %call36, i32* %len34, align 4, !dbg !5918
  %35 = load i32, i32* %len34, align 4, !dbg !5919
  %cmp37 = icmp eq i32 %35, -1, !dbg !5921
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !5922

if.then39:                                        ; preds = %if.then33
  store i32 0, i32* %retval, align 4, !dbg !5923
  br label %return, !dbg !5923

if.end40:                                         ; preds = %if.then33
  %36 = load i8**, i8*** %args.addr, align 8, !dbg !5924
  %37 = load i8*, i8** %36, align 8, !dbg !5926
  %38 = load i32, i32* %len34, align 4, !dbg !5927
  %idx.ext41 = sext i32 %38 to i64, !dbg !5928
  %add.ptr42 = getelementptr inbounds i8, i8* %37, i64 %idx.ext41, !dbg !5928
  %39 = load i8*, i8** %mangled.addr, align 8, !dbg !5929
  %40 = load i32, i32* %n.addr, align 4, !dbg !5930
  %idx.ext43 = sext i32 %40 to i64, !dbg !5931
  %add.ptr44 = getelementptr inbounds i8, i8* %39, i64 %idx.ext43, !dbg !5931
  %cmp45 = icmp eq i8* %add.ptr42, %add.ptr44, !dbg !5932
  br i1 %cmp45, label %land.lhs.true47, label %if.end53, !dbg !5933

land.lhs.true47:                                  ; preds = %if.end40
  %41 = load i8**, i8*** %args.addr, align 8, !dbg !5934
  %42 = load i8*, i8** %41, align 8, !dbg !5935
  %43 = load i8, i8* %42, align 1, !dbg !5936
  %conv48 = sext i8 %43 to i32, !dbg !5936
  %cmp49 = icmp eq i32 %conv48, 95, !dbg !5937
  br i1 %cmp49, label %if.then51, label %if.end53, !dbg !5938

if.then51:                                        ; preds = %land.lhs.true47
  %44 = load i8**, i8*** %args.addr, align 8, !dbg !5939
  %45 = load i8*, i8** %44, align 8, !dbg !5941
  %incdec.ptr52 = getelementptr inbounds i8, i8* %45, i32 1, !dbg !5941
  store i8* %incdec.ptr52, i8** %44, align 8, !dbg !5941
  store i32 1, i32* %retval, align 4, !dbg !5942
  br label %return, !dbg !5942

if.end53:                                         ; preds = %land.lhs.true47, %if.end40
  br label %if.end78, !dbg !5943

if.else:                                          ; preds = %lor.lhs.false30
  %46 = load i8*, i8** %mangled.addr, align 8, !dbg !5944
  %call54 = call i8* @strstr(i8* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223, i64 0, i64 0)), !dbg !5946
  %47 = load i8**, i8*** %anchor.addr, align 8, !dbg !5947
  store i8* %call54, i8** %47, align 8, !dbg !5948
  %tobool55 = icmp ne i8* %call54, null, !dbg !5948
  br i1 %tobool55, label %if.then56, label %if.end77, !dbg !5949

if.then56:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %len57, metadata !5950, metadata !DIExpression()), !dbg !5952
  %48 = load i8**, i8*** %anchor.addr, align 8, !dbg !5953
  %49 = load i8*, i8** %48, align 8, !dbg !5954
  %add.ptr58 = getelementptr inbounds i8, i8* %49, i64 3, !dbg !5955
  %50 = load i8**, i8*** %args.addr, align 8, !dbg !5956
  store i8* %add.ptr58, i8** %50, align 8, !dbg !5957
  %51 = load i8**, i8*** %args.addr, align 8, !dbg !5958
  %call59 = call i32 @consume_count(i8** %51), !dbg !5959
  store i32 %call59, i32* %len57, align 4, !dbg !5960
  %52 = load i32, i32* %len57, align 4, !dbg !5961
  %cmp60 = icmp eq i32 %52, -1, !dbg !5963
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !5964

if.then62:                                        ; preds = %if.then56
  store i32 0, i32* %retval, align 4, !dbg !5965
  br label %return, !dbg !5965

if.end63:                                         ; preds = %if.then56
  %53 = load i8**, i8*** %args.addr, align 8, !dbg !5966
  %54 = load i8*, i8** %53, align 8, !dbg !5968
  %55 = load i32, i32* %len57, align 4, !dbg !5969
  %idx.ext64 = sext i32 %55 to i64, !dbg !5970
  %add.ptr65 = getelementptr inbounds i8, i8* %54, i64 %idx.ext64, !dbg !5970
  %56 = load i8*, i8** %mangled.addr, align 8, !dbg !5971
  %57 = load i32, i32* %n.addr, align 4, !dbg !5972
  %idx.ext66 = sext i32 %57 to i64, !dbg !5973
  %add.ptr67 = getelementptr inbounds i8, i8* %56, i64 %idx.ext66, !dbg !5973
  %cmp68 = icmp eq i8* %add.ptr65, %add.ptr67, !dbg !5974
  br i1 %cmp68, label %land.lhs.true70, label %if.end76, !dbg !5975

land.lhs.true70:                                  ; preds = %if.end63
  %58 = load i8**, i8*** %args.addr, align 8, !dbg !5976
  %59 = load i8*, i8** %58, align 8, !dbg !5977
  %60 = load i8, i8* %59, align 1, !dbg !5978
  %conv71 = sext i8 %60 to i32, !dbg !5978
  %cmp72 = icmp eq i32 %conv71, 95, !dbg !5979
  br i1 %cmp72, label %if.then74, label %if.end76, !dbg !5980

if.then74:                                        ; preds = %land.lhs.true70
  %61 = load i8**, i8*** %args.addr, align 8, !dbg !5981
  %62 = load i8*, i8** %61, align 8, !dbg !5983
  %incdec.ptr75 = getelementptr inbounds i8, i8* %62, i32 1, !dbg !5983
  store i8* %incdec.ptr75, i8** %61, align 8, !dbg !5983
  store i32 1, i32* %retval, align 4, !dbg !5984
  br label %return, !dbg !5984

if.end76:                                         ; preds = %land.lhs.true70, %if.end63
  br label %if.end77, !dbg !5985

if.end77:                                         ; preds = %if.end76, %if.else
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end53
  br label %if.end79, !dbg !5986

if.end79:                                         ; preds = %if.end78, %lor.lhs.false20
  store i32 0, i32* %retval, align 4, !dbg !5987
  br label %return, !dbg !5987

return:                                           ; preds = %if.end79, %if.then74, %if.then62, %if.then51, %if.then39, %if.then14, %if.then6
  %63 = load i32, i32* %retval, align 4, !dbg !5988
  ret i32 %63, !dbg !5988
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snarf_numeric_literal(i8** %args, %struct.string* %arg) #0 !dbg !5989 {
entry:
  %retval = alloca i32, align 4
  %args.addr = alloca i8**, align 8
  %arg.addr = alloca %struct.string*, align 8
  store i8** %args, i8*** %args.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %args.addr, metadata !5990, metadata !DIExpression()), !dbg !5991
  store %struct.string* %arg, %struct.string** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %arg.addr, metadata !5992, metadata !DIExpression()), !dbg !5993
  %0 = load i8**, i8*** %args.addr, align 8, !dbg !5994
  %1 = load i8*, i8** %0, align 8, !dbg !5996
  %2 = load i8, i8* %1, align 1, !dbg !5997
  %conv = sext i8 %2 to i32, !dbg !5997
  %cmp = icmp eq i32 %conv, 45, !dbg !5998
  br i1 %cmp, label %if.then, label %if.else, !dbg !5999

if.then:                                          ; preds = %entry
  store i8 45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0), align 1, !dbg !6000
  %3 = load %struct.string*, %struct.string** %arg.addr, align 8, !dbg !6002
  call void @string_append(%struct.string* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0)), !dbg !6003
  %4 = load i8**, i8*** %args.addr, align 8, !dbg !6004
  %5 = load i8*, i8** %4, align 8, !dbg !6005
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !6005
  store i8* %incdec.ptr, i8** %4, align 8, !dbg !6005
  br label %if.end7, !dbg !6006

if.else:                                          ; preds = %entry
  %6 = load i8**, i8*** %args.addr, align 8, !dbg !6007
  %7 = load i8*, i8** %6, align 8, !dbg !6009
  %8 = load i8, i8* %7, align 1, !dbg !6010
  %conv2 = sext i8 %8 to i32, !dbg !6010
  %cmp3 = icmp eq i32 %conv2, 43, !dbg !6011
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !6012

if.then5:                                         ; preds = %if.else
  %9 = load i8**, i8*** %args.addr, align 8, !dbg !6013
  %10 = load i8*, i8** %9, align 8, !dbg !6014
  %incdec.ptr6 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !6014
  store i8* %incdec.ptr6, i8** %9, align 8, !dbg !6014
  br label %if.end, !dbg !6015

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %11 = load i8**, i8*** %args.addr, align 8, !dbg !6016
  %12 = load i8*, i8** %11, align 8, !dbg !6016
  %13 = load i8, i8* %12, align 1, !dbg !6016
  %conv8 = zext i8 %13 to i32, !dbg !6016
  %and = and i32 %conv8, 255, !dbg !6016
  %idxprom = sext i32 %and to i64, !dbg !6016
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !6016
  %14 = load i16, i16* %arrayidx, align 2, !dbg !6016
  %conv9 = zext i16 %14 to i32, !dbg !6016
  %and10 = and i32 %conv9, 4, !dbg !6016
  %tobool = icmp ne i32 %and10, 0, !dbg !6016
  br i1 %tobool, label %if.end12, label %if.then11, !dbg !6018

if.then11:                                        ; preds = %if.end7
  store i32 0, i32* %retval, align 4, !dbg !6019
  br label %return, !dbg !6019

if.end12:                                         ; preds = %if.end7
  br label %while.cond, !dbg !6020

while.cond:                                       ; preds = %while.body, %if.end12
  %15 = load i8**, i8*** %args.addr, align 8, !dbg !6021
  %16 = load i8*, i8** %15, align 8, !dbg !6021
  %17 = load i8, i8* %16, align 1, !dbg !6021
  %conv13 = zext i8 %17 to i32, !dbg !6021
  %and14 = and i32 %conv13, 255, !dbg !6021
  %idxprom15 = sext i32 %and14 to i64, !dbg !6021
  %arrayidx16 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom15, !dbg !6021
  %18 = load i16, i16* %arrayidx16, align 2, !dbg !6021
  %conv17 = zext i16 %18 to i32, !dbg !6021
  %and18 = and i32 %conv17, 4, !dbg !6021
  %tobool19 = icmp ne i32 %and18, 0, !dbg !6020
  br i1 %tobool19, label %while.body, label %while.end, !dbg !6020

while.body:                                       ; preds = %while.cond
  %19 = load i8**, i8*** %args.addr, align 8, !dbg !6022
  %20 = load i8*, i8** %19, align 8, !dbg !6024
  %21 = load i8, i8* %20, align 1, !dbg !6025
  store i8 %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0), align 1, !dbg !6026
  %22 = load %struct.string*, %struct.string** %arg.addr, align 8, !dbg !6027
  call void @string_append(%struct.string* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @char_str, i64 0, i64 0)), !dbg !6028
  %23 = load i8**, i8*** %args.addr, align 8, !dbg !6029
  %24 = load i8*, i8** %23, align 8, !dbg !6030
  %incdec.ptr20 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !6030
  store i8* %incdec.ptr20, i8** %23, align 8, !dbg !6030
  br label %while.cond, !dbg !6020, !llvm.loop !6031

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4, !dbg !6033
  br label %return, !dbg !6033

return:                                           ; preds = %while.end, %if.then11
  %25 = load i32, i32* %retval, align 4, !dbg !6034
  ret i32 %25, !dbg !6034
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_function_name(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp, i8* %scan) #0 !dbg !6035 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %scan.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %type = alloca %struct.string, align 8
  %tem = alloca i8*, align 8
  %len = alloca i32, align 4
  %len100 = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !6038, metadata !DIExpression()), !dbg !6039
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !6040, metadata !DIExpression()), !dbg !6041
  store i8* %scan, i8** %scan.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %scan.addr, metadata !6042, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata %struct.string* %type, metadata !6046, metadata !DIExpression()), !dbg !6047
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !6048, metadata !DIExpression()), !dbg !6049
  %0 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6050
  %1 = load i8**, i8*** %mangled.addr, align 8, !dbg !6051
  %2 = load i8*, i8** %1, align 8, !dbg !6052
  %3 = load i8*, i8** %scan.addr, align 8, !dbg !6053
  %4 = load i8**, i8*** %mangled.addr, align 8, !dbg !6054
  %5 = load i8*, i8** %4, align 8, !dbg !6055
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !6056
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !6056
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6056
  %conv = trunc i64 %sub.ptr.sub to i32, !dbg !6053
  call void @string_appendn(%struct.string* %0, i8* %2, i32 %conv), !dbg !6057
  %6 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6058
  call void @string_need(%struct.string* %6, i32 1), !dbg !6059
  %7 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6060
  %p = getelementptr inbounds %struct.string, %struct.string* %7, i32 0, i32 1, !dbg !6061
  %8 = load i8*, i8** %p, align 8, !dbg !6061
  store i8 0, i8* %8, align 1, !dbg !6062
  %9 = load i8*, i8** %scan.addr, align 8, !dbg !6063
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 2, !dbg !6064
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !6065
  store i8* %add.ptr, i8** %10, align 8, !dbg !6066
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6067
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 0, !dbg !6067
  %12 = load i32, i32* %options, align 8, !dbg !6067
  %and = and i32 %12, 4096, !dbg !6067
  %tobool = icmp ne i32 %and, 0, !dbg !6067
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6069

land.lhs.true:                                    ; preds = %entry
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !6070
  %14 = load i8*, i8** %13, align 8, !dbg !6071
  %15 = load i8, i8* %14, align 1, !dbg !6072
  %conv1 = sext i8 %15 to i32, !dbg !6072
  %cmp = icmp eq i32 %conv1, 88, !dbg !6073
  br i1 %cmp, label %if.then, label %if.end, !dbg !6074

if.then:                                          ; preds = %land.lhs.true
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6075
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !6077
  %18 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6078
  call void @demangle_arm_hp_template(%struct.work_stuff* %16, i8** %17, i32 0, %struct.string* %18), !dbg !6079
  br label %if.end, !dbg !6080

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6081
  %options3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 0, !dbg !6081
  %20 = load i32, i32* %options3, align 8, !dbg !6081
  %and4 = and i32 %20, 1024, !dbg !6081
  %tobool5 = icmp ne i32 %and4, 0, !dbg !6081
  br i1 %tobool5, label %if.then17, label %lor.lhs.false, !dbg !6083

lor.lhs.false:                                    ; preds = %if.end
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6084
  %options6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 0, !dbg !6084
  %22 = load i32, i32* %options6, align 8, !dbg !6084
  %and7 = and i32 %22, 2048, !dbg !6084
  %tobool8 = icmp ne i32 %and7, 0, !dbg !6084
  br i1 %tobool8, label %if.then17, label %lor.lhs.false9, !dbg !6085

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %23 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6086
  %options10 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %23, i32 0, i32 0, !dbg !6086
  %24 = load i32, i32* %options10, align 8, !dbg !6086
  %and11 = and i32 %24, 4096, !dbg !6086
  %tobool12 = icmp ne i32 %and11, 0, !dbg !6086
  br i1 %tobool12, label %if.then17, label %lor.lhs.false13, !dbg !6087

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %25 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6088
  %options14 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %25, i32 0, i32 0, !dbg !6088
  %26 = load i32, i32* %options14, align 8, !dbg !6088
  %and15 = and i32 %26, 8192, !dbg !6088
  %tobool16 = icmp ne i32 %and15, 0, !dbg !6088
  br i1 %tobool16, label %if.then17, label %if.end29, !dbg !6089

if.then17:                                        ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false, %if.end
  %27 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6090
  %b = getelementptr inbounds %struct.string, %struct.string* %27, i32 0, i32 0, !dbg !6093
  %28 = load i8*, i8** %b, align 8, !dbg !6093
  %call = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225, i64 0, i64 0)), !dbg !6094
  %cmp18 = icmp eq i32 %call, 0, !dbg !6095
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !6096

if.then20:                                        ; preds = %if.then17
  %29 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6097
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %29, i32 0, i32 10, !dbg !6099
  %30 = load i32, i32* %constructor, align 8, !dbg !6100
  %add = add nsw i32 %30, 1, !dbg !6100
  store i32 %add, i32* %constructor, align 8, !dbg !6100
  %31 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6101
  call void @string_clear(%struct.string* %31), !dbg !6102
  store i32 1, i32* %retval, align 4, !dbg !6103
  br label %return, !dbg !6103

if.else:                                          ; preds = %if.then17
  %32 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6104
  %b21 = getelementptr inbounds %struct.string, %struct.string* %32, i32 0, i32 0, !dbg !6106
  %33 = load i8*, i8** %b21, align 8, !dbg !6106
  %call22 = call i32 @strcmp(i8* %33, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.226, i64 0, i64 0)), !dbg !6107
  %cmp23 = icmp eq i32 %call22, 0, !dbg !6108
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !6109

if.then25:                                        ; preds = %if.else
  %34 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6110
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %34, i32 0, i32 11, !dbg !6112
  %35 = load i32, i32* %destructor, align 4, !dbg !6113
  %add26 = add nsw i32 %35, 1, !dbg !6113
  store i32 %add26, i32* %destructor, align 4, !dbg !6113
  %36 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6114
  call void @string_clear(%struct.string* %36), !dbg !6115
  store i32 1, i32* %retval, align 4, !dbg !6116
  br label %return, !dbg !6116

if.end27:                                         ; preds = %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  br label %if.end29, !dbg !6117

if.end29:                                         ; preds = %if.end28, %lor.lhs.false13
  %37 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6118
  %p30 = getelementptr inbounds %struct.string, %struct.string* %37, i32 0, i32 1, !dbg !6120
  %38 = load i8*, i8** %p30, align 8, !dbg !6120
  %39 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6121
  %b31 = getelementptr inbounds %struct.string, %struct.string* %39, i32 0, i32 0, !dbg !6122
  %40 = load i8*, i8** %b31, align 8, !dbg !6122
  %sub.ptr.lhs.cast32 = ptrtoint i8* %38 to i64, !dbg !6123
  %sub.ptr.rhs.cast33 = ptrtoint i8* %40 to i64, !dbg !6123
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33, !dbg !6123
  %cmp35 = icmp sge i64 %sub.ptr.sub34, 3, !dbg !6124
  br i1 %cmp35, label %land.lhs.true37, label %if.else131, !dbg !6125

land.lhs.true37:                                  ; preds = %if.end29
  %41 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6126
  %b38 = getelementptr inbounds %struct.string, %struct.string* %41, i32 0, i32 0, !dbg !6127
  %42 = load i8*, i8** %b38, align 8, !dbg !6127
  %arrayidx = getelementptr inbounds i8, i8* %42, i64 0, !dbg !6126
  %43 = load i8, i8* %arrayidx, align 1, !dbg !6126
  %conv39 = sext i8 %43 to i32, !dbg !6126
  %cmp40 = icmp eq i32 %conv39, 111, !dbg !6128
  br i1 %cmp40, label %land.lhs.true42, label %if.else131, !dbg !6129

land.lhs.true42:                                  ; preds = %land.lhs.true37
  %44 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6130
  %b43 = getelementptr inbounds %struct.string, %struct.string* %44, i32 0, i32 0, !dbg !6131
  %45 = load i8*, i8** %b43, align 8, !dbg !6131
  %arrayidx44 = getelementptr inbounds i8, i8* %45, i64 1, !dbg !6130
  %46 = load i8, i8* %arrayidx44, align 1, !dbg !6130
  %conv45 = sext i8 %46 to i32, !dbg !6130
  %cmp46 = icmp eq i32 %conv45, 112, !dbg !6132
  br i1 %cmp46, label %land.lhs.true48, label %if.else131, !dbg !6133

land.lhs.true48:                                  ; preds = %land.lhs.true42
  %47 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6134
  %b49 = getelementptr inbounds %struct.string, %struct.string* %47, i32 0, i32 0, !dbg !6135
  %48 = load i8*, i8** %b49, align 8, !dbg !6135
  %arrayidx50 = getelementptr inbounds i8, i8* %48, i64 2, !dbg !6134
  %49 = load i8, i8* %arrayidx50, align 1, !dbg !6134
  %conv51 = sext i8 %49 to i32, !dbg !6134
  %call52 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv51), !dbg !6136
  %cmp53 = icmp ne i8* %call52, null, !dbg !6137
  br i1 %cmp53, label %if.then55, label %if.else131, !dbg !6138

if.then55:                                        ; preds = %land.lhs.true48
  %50 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6139
  %p56 = getelementptr inbounds %struct.string, %struct.string* %50, i32 0, i32 1, !dbg !6142
  %51 = load i8*, i8** %p56, align 8, !dbg !6142
  %52 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6143
  %b57 = getelementptr inbounds %struct.string, %struct.string* %52, i32 0, i32 0, !dbg !6144
  %53 = load i8*, i8** %b57, align 8, !dbg !6144
  %sub.ptr.lhs.cast58 = ptrtoint i8* %51 to i64, !dbg !6145
  %sub.ptr.rhs.cast59 = ptrtoint i8* %53 to i64, !dbg !6145
  %sub.ptr.sub60 = sub i64 %sub.ptr.lhs.cast58, %sub.ptr.rhs.cast59, !dbg !6145
  %cmp61 = icmp sge i64 %sub.ptr.sub60, 10, !dbg !6146
  br i1 %cmp61, label %land.lhs.true63, label %if.else95, !dbg !6147

land.lhs.true63:                                  ; preds = %if.then55
  %54 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6148
  %b64 = getelementptr inbounds %struct.string, %struct.string* %54, i32 0, i32 0, !dbg !6149
  %55 = load i8*, i8** %b64, align 8, !dbg !6149
  %add.ptr65 = getelementptr inbounds i8, i8* %55, i64 3, !dbg !6150
  %call66 = call i32 @memcmp(i8* %add.ptr65, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22, i64 0, i64 0), i64 7), !dbg !6151
  %cmp67 = icmp eq i32 %call66, 0, !dbg !6152
  br i1 %cmp67, label %if.then69, label %if.else95, !dbg !6153

if.then69:                                        ; preds = %land.lhs.true63
  store i64 0, i64* %i, align 8, !dbg !6154
  br label %for.cond, !dbg !6157

for.cond:                                         ; preds = %for.inc, %if.then69
  %56 = load i64, i64* %i, align 8, !dbg !6158
  %cmp70 = icmp ult i64 %56, 79, !dbg !6160
  br i1 %cmp70, label %for.body, label %for.end, !dbg !6161

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6162, metadata !DIExpression()), !dbg !6164
  %57 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6165
  %p72 = getelementptr inbounds %struct.string, %struct.string* %57, i32 0, i32 1, !dbg !6166
  %58 = load i8*, i8** %p72, align 8, !dbg !6166
  %59 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6167
  %b73 = getelementptr inbounds %struct.string, %struct.string* %59, i32 0, i32 0, !dbg !6168
  %60 = load i8*, i8** %b73, align 8, !dbg !6168
  %sub.ptr.lhs.cast74 = ptrtoint i8* %58 to i64, !dbg !6169
  %sub.ptr.rhs.cast75 = ptrtoint i8* %60 to i64, !dbg !6169
  %sub.ptr.sub76 = sub i64 %sub.ptr.lhs.cast74, %sub.ptr.rhs.cast75, !dbg !6169
  %sub = sub nsw i64 %sub.ptr.sub76, 10, !dbg !6170
  %conv77 = trunc i64 %sub to i32, !dbg !6165
  store i32 %conv77, i32* %len, align 4, !dbg !6164
  %61 = load i64, i64* %i, align 8, !dbg !6171
  %arrayidx78 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %61, !dbg !6173
  %in = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx78, i32 0, i32 0, !dbg !6174
  %62 = load i8*, i8** %in, align 8, !dbg !6174
  %call79 = call i64 @strlen(i8* %62), !dbg !6175
  %conv80 = trunc i64 %call79 to i32, !dbg !6176
  %63 = load i32, i32* %len, align 4, !dbg !6177
  %cmp81 = icmp eq i32 %conv80, %63, !dbg !6178
  br i1 %cmp81, label %land.lhs.true83, label %if.end94, !dbg !6179

land.lhs.true83:                                  ; preds = %for.body
  %64 = load i64, i64* %i, align 8, !dbg !6180
  %arrayidx84 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %64, !dbg !6181
  %in85 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx84, i32 0, i32 0, !dbg !6182
  %65 = load i8*, i8** %in85, align 8, !dbg !6182
  %66 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6183
  %b86 = getelementptr inbounds %struct.string, %struct.string* %66, i32 0, i32 0, !dbg !6184
  %67 = load i8*, i8** %b86, align 8, !dbg !6184
  %add.ptr87 = getelementptr inbounds i8, i8* %67, i64 10, !dbg !6185
  %68 = load i32, i32* %len, align 4, !dbg !6186
  %conv88 = sext i32 %68 to i64, !dbg !6186
  %call89 = call i32 @memcmp(i8* %65, i8* %add.ptr87, i64 %conv88), !dbg !6187
  %cmp90 = icmp eq i32 %call89, 0, !dbg !6188
  br i1 %cmp90, label %if.then92, label %if.end94, !dbg !6189

if.then92:                                        ; preds = %land.lhs.true83
  %69 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6190
  call void @string_clear(%struct.string* %69), !dbg !6192
  %70 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6193
  call void @string_append(%struct.string* %70, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !6194
  %71 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6195
  %72 = load i64, i64* %i, align 8, !dbg !6196
  %arrayidx93 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %72, !dbg !6197
  %out = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx93, i32 0, i32 1, !dbg !6198
  %73 = load i8*, i8** %out, align 8, !dbg !6198
  call void @string_append(%struct.string* %71, i8* %73), !dbg !6199
  %74 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6200
  call void @string_append(%struct.string* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)), !dbg !6201
  br label %for.end, !dbg !6202

if.end94:                                         ; preds = %land.lhs.true83, %for.body
  br label %for.inc, !dbg !6203

for.inc:                                          ; preds = %if.end94
  %75 = load i64, i64* %i, align 8, !dbg !6204
  %inc = add i64 %75, 1, !dbg !6204
  store i64 %inc, i64* %i, align 8, !dbg !6204
  br label %for.cond, !dbg !6205, !llvm.loop !6206

for.end:                                          ; preds = %if.then92, %for.cond
  br label %if.end130, !dbg !6208

if.else95:                                        ; preds = %land.lhs.true63, %if.then55
  store i64 0, i64* %i, align 8, !dbg !6209
  br label %for.cond96, !dbg !6212

for.cond96:                                       ; preds = %for.inc127, %if.else95
  %76 = load i64, i64* %i, align 8, !dbg !6213
  %cmp97 = icmp ult i64 %76, 79, !dbg !6215
  br i1 %cmp97, label %for.body99, label %for.end129, !dbg !6216

for.body99:                                       ; preds = %for.cond96
  call void @llvm.dbg.declare(metadata i32* %len100, metadata !6217, metadata !DIExpression()), !dbg !6219
  %77 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6220
  %p101 = getelementptr inbounds %struct.string, %struct.string* %77, i32 0, i32 1, !dbg !6221
  %78 = load i8*, i8** %p101, align 8, !dbg !6221
  %79 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6222
  %b102 = getelementptr inbounds %struct.string, %struct.string* %79, i32 0, i32 0, !dbg !6223
  %80 = load i8*, i8** %b102, align 8, !dbg !6223
  %sub.ptr.lhs.cast103 = ptrtoint i8* %78 to i64, !dbg !6224
  %sub.ptr.rhs.cast104 = ptrtoint i8* %80 to i64, !dbg !6224
  %sub.ptr.sub105 = sub i64 %sub.ptr.lhs.cast103, %sub.ptr.rhs.cast104, !dbg !6224
  %sub106 = sub nsw i64 %sub.ptr.sub105, 3, !dbg !6225
  %conv107 = trunc i64 %sub106 to i32, !dbg !6220
  store i32 %conv107, i32* %len100, align 4, !dbg !6219
  %81 = load i64, i64* %i, align 8, !dbg !6226
  %arrayidx108 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %81, !dbg !6228
  %in109 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx108, i32 0, i32 0, !dbg !6229
  %82 = load i8*, i8** %in109, align 8, !dbg !6229
  %call110 = call i64 @strlen(i8* %82), !dbg !6230
  %conv111 = trunc i64 %call110 to i32, !dbg !6231
  %83 = load i32, i32* %len100, align 4, !dbg !6232
  %cmp112 = icmp eq i32 %conv111, %83, !dbg !6233
  br i1 %cmp112, label %land.lhs.true114, label %if.end126, !dbg !6234

land.lhs.true114:                                 ; preds = %for.body99
  %84 = load i64, i64* %i, align 8, !dbg !6235
  %arrayidx115 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %84, !dbg !6236
  %in116 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx115, i32 0, i32 0, !dbg !6237
  %85 = load i8*, i8** %in116, align 8, !dbg !6237
  %86 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6238
  %b117 = getelementptr inbounds %struct.string, %struct.string* %86, i32 0, i32 0, !dbg !6239
  %87 = load i8*, i8** %b117, align 8, !dbg !6239
  %add.ptr118 = getelementptr inbounds i8, i8* %87, i64 3, !dbg !6240
  %88 = load i32, i32* %len100, align 4, !dbg !6241
  %conv119 = sext i32 %88 to i64, !dbg !6241
  %call120 = call i32 @memcmp(i8* %85, i8* %add.ptr118, i64 %conv119), !dbg !6242
  %cmp121 = icmp eq i32 %call120, 0, !dbg !6243
  br i1 %cmp121, label %if.then123, label %if.end126, !dbg !6244

if.then123:                                       ; preds = %land.lhs.true114
  %89 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6245
  call void @string_clear(%struct.string* %89), !dbg !6247
  %90 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6248
  call void @string_append(%struct.string* %90, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !6249
  %91 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6250
  %92 = load i64, i64* %i, align 8, !dbg !6251
  %arrayidx124 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %92, !dbg !6252
  %out125 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx124, i32 0, i32 1, !dbg !6253
  %93 = load i8*, i8** %out125, align 8, !dbg !6253
  call void @string_append(%struct.string* %91, i8* %93), !dbg !6254
  br label %for.end129, !dbg !6255

if.end126:                                        ; preds = %land.lhs.true114, %for.body99
  br label %for.inc127, !dbg !6256

for.inc127:                                       ; preds = %if.end126
  %94 = load i64, i64* %i, align 8, !dbg !6257
  %inc128 = add i64 %94, 1, !dbg !6257
  store i64 %inc128, i64* %i, align 8, !dbg !6257
  br label %for.cond96, !dbg !6258, !llvm.loop !6259

for.end129:                                       ; preds = %if.then123, %for.cond96
  br label %if.end130

if.end130:                                        ; preds = %for.end129, %for.end
  br label %if.end293, !dbg !6261

if.else131:                                       ; preds = %land.lhs.true48, %land.lhs.true42, %land.lhs.true37, %if.end29
  %95 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6262
  %p132 = getelementptr inbounds %struct.string, %struct.string* %95, i32 0, i32 1, !dbg !6264
  %96 = load i8*, i8** %p132, align 8, !dbg !6264
  %97 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6265
  %b133 = getelementptr inbounds %struct.string, %struct.string* %97, i32 0, i32 0, !dbg !6266
  %98 = load i8*, i8** %b133, align 8, !dbg !6266
  %sub.ptr.lhs.cast134 = ptrtoint i8* %96 to i64, !dbg !6267
  %sub.ptr.rhs.cast135 = ptrtoint i8* %98 to i64, !dbg !6267
  %sub.ptr.sub136 = sub i64 %sub.ptr.lhs.cast134, %sub.ptr.rhs.cast135, !dbg !6267
  %cmp137 = icmp sge i64 %sub.ptr.sub136, 5, !dbg !6268
  br i1 %cmp137, label %land.lhs.true139, label %if.else158, !dbg !6269

land.lhs.true139:                                 ; preds = %if.else131
  %99 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6270
  %b140 = getelementptr inbounds %struct.string, %struct.string* %99, i32 0, i32 0, !dbg !6271
  %100 = load i8*, i8** %b140, align 8, !dbg !6271
  %call141 = call i32 @memcmp(i8* %100, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i64 4), !dbg !6272
  %cmp142 = icmp eq i32 %call141, 0, !dbg !6273
  br i1 %cmp142, label %land.lhs.true144, label %if.else158, !dbg !6274

land.lhs.true144:                                 ; preds = %land.lhs.true139
  %101 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6275
  %b145 = getelementptr inbounds %struct.string, %struct.string* %101, i32 0, i32 0, !dbg !6276
  %102 = load i8*, i8** %b145, align 8, !dbg !6276
  %arrayidx146 = getelementptr inbounds i8, i8* %102, i64 4, !dbg !6275
  %103 = load i8, i8* %arrayidx146, align 1, !dbg !6275
  %conv147 = sext i8 %103 to i32, !dbg !6275
  %call148 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @cplus_markers, i64 0, i64 0), i32 %conv147), !dbg !6277
  %cmp149 = icmp ne i8* %call148, null, !dbg !6278
  br i1 %cmp149, label %if.then151, label %if.else158, !dbg !6279

if.then151:                                       ; preds = %land.lhs.true144
  %104 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6280
  %b152 = getelementptr inbounds %struct.string, %struct.string* %104, i32 0, i32 0, !dbg !6282
  %105 = load i8*, i8** %b152, align 8, !dbg !6282
  %add.ptr153 = getelementptr inbounds i8, i8* %105, i64 5, !dbg !6283
  store i8* %add.ptr153, i8** %tem, align 8, !dbg !6284
  %106 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6285
  %call154 = call i32 @do_type(%struct.work_stuff* %106, i8** %tem, %struct.string* %type), !dbg !6287
  %tobool155 = icmp ne i32 %call154, 0, !dbg !6287
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !6288

if.then156:                                       ; preds = %if.then151
  %107 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6289
  call void @string_clear(%struct.string* %107), !dbg !6291
  %108 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6292
  call void @string_append(%struct.string* %108, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0)), !dbg !6293
  %109 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6294
  call void @string_appends(%struct.string* %109, %struct.string* %type), !dbg !6295
  call void @string_delete(%struct.string* %type), !dbg !6296
  br label %if.end157, !dbg !6297

if.end157:                                        ; preds = %if.then156, %if.then151
  br label %if.end292, !dbg !6298

if.else158:                                       ; preds = %land.lhs.true144, %land.lhs.true139, %if.else131
  %110 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6299
  %b159 = getelementptr inbounds %struct.string, %struct.string* %110, i32 0, i32 0, !dbg !6301
  %111 = load i8*, i8** %b159, align 8, !dbg !6301
  %arrayidx160 = getelementptr inbounds i8, i8* %111, i64 0, !dbg !6299
  %112 = load i8, i8* %arrayidx160, align 1, !dbg !6299
  %conv161 = sext i8 %112 to i32, !dbg !6299
  %cmp162 = icmp eq i32 %conv161, 95, !dbg !6302
  br i1 %cmp162, label %land.lhs.true164, label %if.else189, !dbg !6303

land.lhs.true164:                                 ; preds = %if.else158
  %113 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6304
  %b165 = getelementptr inbounds %struct.string, %struct.string* %113, i32 0, i32 0, !dbg !6305
  %114 = load i8*, i8** %b165, align 8, !dbg !6305
  %arrayidx166 = getelementptr inbounds i8, i8* %114, i64 1, !dbg !6304
  %115 = load i8, i8* %arrayidx166, align 1, !dbg !6304
  %conv167 = sext i8 %115 to i32, !dbg !6304
  %cmp168 = icmp eq i32 %conv167, 95, !dbg !6306
  br i1 %cmp168, label %land.lhs.true170, label %if.else189, !dbg !6307

land.lhs.true170:                                 ; preds = %land.lhs.true164
  %116 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6308
  %b171 = getelementptr inbounds %struct.string, %struct.string* %116, i32 0, i32 0, !dbg !6309
  %117 = load i8*, i8** %b171, align 8, !dbg !6309
  %arrayidx172 = getelementptr inbounds i8, i8* %117, i64 2, !dbg !6308
  %118 = load i8, i8* %arrayidx172, align 1, !dbg !6308
  %conv173 = sext i8 %118 to i32, !dbg !6308
  %cmp174 = icmp eq i32 %conv173, 111, !dbg !6310
  br i1 %cmp174, label %land.lhs.true176, label %if.else189, !dbg !6311

land.lhs.true176:                                 ; preds = %land.lhs.true170
  %119 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6312
  %b177 = getelementptr inbounds %struct.string, %struct.string* %119, i32 0, i32 0, !dbg !6313
  %120 = load i8*, i8** %b177, align 8, !dbg !6313
  %arrayidx178 = getelementptr inbounds i8, i8* %120, i64 3, !dbg !6312
  %121 = load i8, i8* %arrayidx178, align 1, !dbg !6312
  %conv179 = sext i8 %121 to i32, !dbg !6312
  %cmp180 = icmp eq i32 %conv179, 112, !dbg !6314
  br i1 %cmp180, label %if.then182, label %if.else189, !dbg !6315

if.then182:                                       ; preds = %land.lhs.true176
  %122 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6316
  %b183 = getelementptr inbounds %struct.string, %struct.string* %122, i32 0, i32 0, !dbg !6318
  %123 = load i8*, i8** %b183, align 8, !dbg !6318
  %add.ptr184 = getelementptr inbounds i8, i8* %123, i64 4, !dbg !6319
  store i8* %add.ptr184, i8** %tem, align 8, !dbg !6320
  %124 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6321
  %call185 = call i32 @do_type(%struct.work_stuff* %124, i8** %tem, %struct.string* %type), !dbg !6323
  %tobool186 = icmp ne i32 %call185, 0, !dbg !6323
  br i1 %tobool186, label %if.then187, label %if.end188, !dbg !6324

if.then187:                                       ; preds = %if.then182
  %125 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6325
  call void @string_clear(%struct.string* %125), !dbg !6327
  %126 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6328
  call void @string_append(%struct.string* %126, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0)), !dbg !6329
  %127 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6330
  call void @string_appends(%struct.string* %127, %struct.string* %type), !dbg !6331
  call void @string_delete(%struct.string* %type), !dbg !6332
  br label %if.end188, !dbg !6333

if.end188:                                        ; preds = %if.then187, %if.then182
  br label %if.end291, !dbg !6334

if.else189:                                       ; preds = %land.lhs.true176, %land.lhs.true170, %land.lhs.true164, %if.else158
  %128 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6335
  %b190 = getelementptr inbounds %struct.string, %struct.string* %128, i32 0, i32 0, !dbg !6337
  %129 = load i8*, i8** %b190, align 8, !dbg !6337
  %arrayidx191 = getelementptr inbounds i8, i8* %129, i64 0, !dbg !6335
  %130 = load i8, i8* %arrayidx191, align 1, !dbg !6335
  %conv192 = sext i8 %130 to i32, !dbg !6335
  %cmp193 = icmp eq i32 %conv192, 95, !dbg !6338
  br i1 %cmp193, label %land.lhs.true195, label %if.end290, !dbg !6339

land.lhs.true195:                                 ; preds = %if.else189
  %131 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6340
  %b196 = getelementptr inbounds %struct.string, %struct.string* %131, i32 0, i32 0, !dbg !6341
  %132 = load i8*, i8** %b196, align 8, !dbg !6341
  %arrayidx197 = getelementptr inbounds i8, i8* %132, i64 1, !dbg !6340
  %133 = load i8, i8* %arrayidx197, align 1, !dbg !6340
  %conv198 = sext i8 %133 to i32, !dbg !6340
  %cmp199 = icmp eq i32 %conv198, 95, !dbg !6342
  br i1 %cmp199, label %land.lhs.true201, label %if.end290, !dbg !6343

land.lhs.true201:                                 ; preds = %land.lhs.true195
  %134 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6344
  %b202 = getelementptr inbounds %struct.string, %struct.string* %134, i32 0, i32 0, !dbg !6344
  %135 = load i8*, i8** %b202, align 8, !dbg !6344
  %arrayidx203 = getelementptr inbounds i8, i8* %135, i64 2, !dbg !6344
  %136 = load i8, i8* %arrayidx203, align 1, !dbg !6344
  %conv204 = zext i8 %136 to i32, !dbg !6344
  %and205 = and i32 %conv204, 255, !dbg !6344
  %idxprom = sext i32 %and205 to i64, !dbg !6344
  %arrayidx206 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !6344
  %137 = load i16, i16* %arrayidx206, align 2, !dbg !6344
  %conv207 = zext i16 %137 to i32, !dbg !6344
  %and208 = and i32 %conv207, 8, !dbg !6344
  %tobool209 = icmp ne i32 %and208, 0, !dbg !6344
  br i1 %tobool209, label %land.lhs.true210, label %if.end290, !dbg !6345

land.lhs.true210:                                 ; preds = %land.lhs.true201
  %138 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6346
  %b211 = getelementptr inbounds %struct.string, %struct.string* %138, i32 0, i32 0, !dbg !6346
  %139 = load i8*, i8** %b211, align 8, !dbg !6346
  %arrayidx212 = getelementptr inbounds i8, i8* %139, i64 3, !dbg !6346
  %140 = load i8, i8* %arrayidx212, align 1, !dbg !6346
  %conv213 = zext i8 %140 to i32, !dbg !6346
  %and214 = and i32 %conv213, 255, !dbg !6346
  %idxprom215 = sext i32 %and214 to i64, !dbg !6346
  %arrayidx216 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom215, !dbg !6346
  %141 = load i16, i16* %arrayidx216, align 2, !dbg !6346
  %conv217 = zext i16 %141 to i32, !dbg !6346
  %and218 = and i32 %conv217, 8, !dbg !6346
  %tobool219 = icmp ne i32 %and218, 0, !dbg !6346
  br i1 %tobool219, label %if.then220, label %if.end290, !dbg !6347

if.then220:                                       ; preds = %land.lhs.true210
  %142 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6348
  %b221 = getelementptr inbounds %struct.string, %struct.string* %142, i32 0, i32 0, !dbg !6351
  %143 = load i8*, i8** %b221, align 8, !dbg !6351
  %arrayidx222 = getelementptr inbounds i8, i8* %143, i64 4, !dbg !6348
  %144 = load i8, i8* %arrayidx222, align 1, !dbg !6348
  %conv223 = sext i8 %144 to i32, !dbg !6348
  %cmp224 = icmp eq i32 %conv223, 0, !dbg !6352
  br i1 %cmp224, label %if.then226, label %if.else251, !dbg !6353

if.then226:                                       ; preds = %if.then220
  store i64 0, i64* %i, align 8, !dbg !6354
  br label %for.cond227, !dbg !6357

for.cond227:                                      ; preds = %for.inc248, %if.then226
  %145 = load i64, i64* %i, align 8, !dbg !6358
  %cmp228 = icmp ult i64 %145, 79, !dbg !6360
  br i1 %cmp228, label %for.body230, label %for.end250, !dbg !6361

for.body230:                                      ; preds = %for.cond227
  %146 = load i64, i64* %i, align 8, !dbg !6362
  %arrayidx231 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %146, !dbg !6365
  %in232 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx231, i32 0, i32 0, !dbg !6366
  %147 = load i8*, i8** %in232, align 8, !dbg !6366
  %call233 = call i64 @strlen(i8* %147), !dbg !6367
  %cmp234 = icmp eq i64 %call233, 2, !dbg !6368
  br i1 %cmp234, label %land.lhs.true236, label %if.end247, !dbg !6369

land.lhs.true236:                                 ; preds = %for.body230
  %148 = load i64, i64* %i, align 8, !dbg !6370
  %arrayidx237 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %148, !dbg !6371
  %in238 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx237, i32 0, i32 0, !dbg !6372
  %149 = load i8*, i8** %in238, align 8, !dbg !6372
  %150 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6373
  %b239 = getelementptr inbounds %struct.string, %struct.string* %150, i32 0, i32 0, !dbg !6374
  %151 = load i8*, i8** %b239, align 8, !dbg !6374
  %add.ptr240 = getelementptr inbounds i8, i8* %151, i64 2, !dbg !6375
  %call241 = call i32 @memcmp(i8* %149, i8* %add.ptr240, i64 2), !dbg !6376
  %cmp242 = icmp eq i32 %call241, 0, !dbg !6377
  br i1 %cmp242, label %if.then244, label %if.end247, !dbg !6378

if.then244:                                       ; preds = %land.lhs.true236
  %152 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6379
  call void @string_clear(%struct.string* %152), !dbg !6381
  %153 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6382
  call void @string_append(%struct.string* %153, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !6383
  %154 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6384
  %155 = load i64, i64* %i, align 8, !dbg !6385
  %arrayidx245 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %155, !dbg !6386
  %out246 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx245, i32 0, i32 1, !dbg !6387
  %156 = load i8*, i8** %out246, align 8, !dbg !6387
  call void @string_append(%struct.string* %154, i8* %156), !dbg !6388
  br label %for.end250, !dbg !6389

if.end247:                                        ; preds = %land.lhs.true236, %for.body230
  br label %for.inc248, !dbg !6390

for.inc248:                                       ; preds = %if.end247
  %157 = load i64, i64* %i, align 8, !dbg !6391
  %inc249 = add i64 %157, 1, !dbg !6391
  store i64 %inc249, i64* %i, align 8, !dbg !6391
  br label %for.cond227, !dbg !6392, !llvm.loop !6393

for.end250:                                       ; preds = %if.then244, %for.cond227
  br label %if.end289, !dbg !6395

if.else251:                                       ; preds = %if.then220
  %158 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6396
  %b252 = getelementptr inbounds %struct.string, %struct.string* %158, i32 0, i32 0, !dbg !6399
  %159 = load i8*, i8** %b252, align 8, !dbg !6399
  %arrayidx253 = getelementptr inbounds i8, i8* %159, i64 2, !dbg !6396
  %160 = load i8, i8* %arrayidx253, align 1, !dbg !6396
  %conv254 = sext i8 %160 to i32, !dbg !6396
  %cmp255 = icmp eq i32 %conv254, 97, !dbg !6400
  br i1 %cmp255, label %land.lhs.true257, label %if.end288, !dbg !6401

land.lhs.true257:                                 ; preds = %if.else251
  %161 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6402
  %b258 = getelementptr inbounds %struct.string, %struct.string* %161, i32 0, i32 0, !dbg !6403
  %162 = load i8*, i8** %b258, align 8, !dbg !6403
  %arrayidx259 = getelementptr inbounds i8, i8* %162, i64 5, !dbg !6402
  %163 = load i8, i8* %arrayidx259, align 1, !dbg !6402
  %conv260 = sext i8 %163 to i32, !dbg !6402
  %cmp261 = icmp eq i32 %conv260, 0, !dbg !6404
  br i1 %cmp261, label %if.then263, label %if.end288, !dbg !6405

if.then263:                                       ; preds = %land.lhs.true257
  store i64 0, i64* %i, align 8, !dbg !6406
  br label %for.cond264, !dbg !6409

for.cond264:                                      ; preds = %for.inc285, %if.then263
  %164 = load i64, i64* %i, align 8, !dbg !6410
  %cmp265 = icmp ult i64 %164, 79, !dbg !6412
  br i1 %cmp265, label %for.body267, label %for.end287, !dbg !6413

for.body267:                                      ; preds = %for.cond264
  %165 = load i64, i64* %i, align 8, !dbg !6414
  %arrayidx268 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %165, !dbg !6417
  %in269 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx268, i32 0, i32 0, !dbg !6418
  %166 = load i8*, i8** %in269, align 8, !dbg !6418
  %call270 = call i64 @strlen(i8* %166), !dbg !6419
  %cmp271 = icmp eq i64 %call270, 3, !dbg !6420
  br i1 %cmp271, label %land.lhs.true273, label %if.end284, !dbg !6421

land.lhs.true273:                                 ; preds = %for.body267
  %167 = load i64, i64* %i, align 8, !dbg !6422
  %arrayidx274 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %167, !dbg !6423
  %in275 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx274, i32 0, i32 0, !dbg !6424
  %168 = load i8*, i8** %in275, align 8, !dbg !6424
  %169 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6425
  %b276 = getelementptr inbounds %struct.string, %struct.string* %169, i32 0, i32 0, !dbg !6426
  %170 = load i8*, i8** %b276, align 8, !dbg !6426
  %add.ptr277 = getelementptr inbounds i8, i8* %170, i64 2, !dbg !6427
  %call278 = call i32 @memcmp(i8* %168, i8* %add.ptr277, i64 3), !dbg !6428
  %cmp279 = icmp eq i32 %call278, 0, !dbg !6429
  br i1 %cmp279, label %if.then281, label %if.end284, !dbg !6430

if.then281:                                       ; preds = %land.lhs.true273
  %171 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6431
  call void @string_clear(%struct.string* %171), !dbg !6433
  %172 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6434
  call void @string_append(%struct.string* %172, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0)), !dbg !6435
  %173 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6436
  %174 = load i64, i64* %i, align 8, !dbg !6437
  %arrayidx282 = getelementptr inbounds [79 x %struct.optable], [79 x %struct.optable]* @optable, i64 0, i64 %174, !dbg !6438
  %out283 = getelementptr inbounds %struct.optable, %struct.optable* %arrayidx282, i32 0, i32 1, !dbg !6439
  %175 = load i8*, i8** %out283, align 8, !dbg !6439
  call void @string_append(%struct.string* %173, i8* %175), !dbg !6440
  br label %for.end287, !dbg !6441

if.end284:                                        ; preds = %land.lhs.true273, %for.body267
  br label %for.inc285, !dbg !6442

for.inc285:                                       ; preds = %if.end284
  %176 = load i64, i64* %i, align 8, !dbg !6443
  %inc286 = add i64 %176, 1, !dbg !6443
  store i64 %inc286, i64* %i, align 8, !dbg !6443
  br label %for.cond264, !dbg !6444, !llvm.loop !6445

for.end287:                                       ; preds = %if.then281, %for.cond264
  br label %if.end288, !dbg !6447

if.end288:                                        ; preds = %for.end287, %land.lhs.true257, %if.else251
  br label %if.end289

if.end289:                                        ; preds = %if.end288, %for.end250
  br label %if.end290, !dbg !6448

if.end290:                                        ; preds = %if.end289, %land.lhs.true210, %land.lhs.true201, %land.lhs.true195, %if.else189
  br label %if.end291

if.end291:                                        ; preds = %if.end290, %if.end188
  br label %if.end292

if.end292:                                        ; preds = %if.end291, %if.end157
  br label %if.end293

if.end293:                                        ; preds = %if.end292, %if.end130
  %177 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6449
  %b294 = getelementptr inbounds %struct.string, %struct.string* %177, i32 0, i32 0, !dbg !6449
  %178 = load i8*, i8** %b294, align 8, !dbg !6449
  %179 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6449
  %p295 = getelementptr inbounds %struct.string, %struct.string* %179, i32 0, i32 1, !dbg !6449
  %180 = load i8*, i8** %p295, align 8, !dbg !6449
  %cmp296 = icmp eq i8* %178, %180, !dbg !6449
  br i1 %cmp296, label %cond.true, label %cond.false, !dbg !6449

cond.true:                                        ; preds = %if.end293
  br label %cond.end, !dbg !6449

cond.false:                                       ; preds = %if.end293
  %181 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6449
  %p298 = getelementptr inbounds %struct.string, %struct.string* %181, i32 0, i32 1, !dbg !6449
  %182 = load i8*, i8** %p298, align 8, !dbg !6449
  %183 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6449
  %b299 = getelementptr inbounds %struct.string, %struct.string* %183, i32 0, i32 0, !dbg !6449
  %184 = load i8*, i8** %b299, align 8, !dbg !6449
  %sub.ptr.lhs.cast300 = ptrtoint i8* %182 to i64, !dbg !6449
  %sub.ptr.rhs.cast301 = ptrtoint i8* %184 to i64, !dbg !6449
  %sub.ptr.sub302 = sub i64 %sub.ptr.lhs.cast300, %sub.ptr.rhs.cast301, !dbg !6449
  br label %cond.end, !dbg !6449

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub.ptr.sub302, %cond.false ], !dbg !6449
  %cmp303 = icmp eq i64 %cond, 1, !dbg !6451
  br i1 %cmp303, label %land.lhs.true305, label %if.else312, !dbg !6452

land.lhs.true305:                                 ; preds = %cond.end
  %185 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6453
  %b306 = getelementptr inbounds %struct.string, %struct.string* %185, i32 0, i32 0, !dbg !6454
  %186 = load i8*, i8** %b306, align 8, !dbg !6454
  %arrayidx307 = getelementptr inbounds i8, i8* %186, i64 0, !dbg !6453
  %187 = load i8, i8* %arrayidx307, align 1, !dbg !6453
  %conv308 = sext i8 %187 to i32, !dbg !6453
  %cmp309 = icmp eq i32 %conv308, 46, !dbg !6455
  br i1 %cmp309, label %if.then311, label %if.else312, !dbg !6456

if.then311:                                       ; preds = %land.lhs.true305
  store i32 0, i32* %retval, align 4, !dbg !6457
  br label %return, !dbg !6457

if.else312:                                       ; preds = %land.lhs.true305, %cond.end
  store i32 1, i32* %retval, align 4, !dbg !6458
  br label %return, !dbg !6458

return:                                           ; preds = %if.else312, %if.then311, %if.then25, %if.then20
  %188 = load i32, i32* %retval, align 4, !dbg !6459
  ret i32 %188, !dbg !6459
}

; Function Attrs: noinline nounwind uwtable
define internal void @work_stuff_copy_to_from(%struct.work_stuff* %to, %struct.work_stuff* %from) #0 !dbg !6460 {
entry:
  %to.addr = alloca %struct.work_stuff*, align 8
  %from.addr = alloca %struct.work_stuff*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %len30 = alloca i32, align 4
  %len64 = alloca i32, align 4
  %len99 = alloca i32, align 4
  store %struct.work_stuff* %to, %struct.work_stuff** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %to.addr, metadata !6463, metadata !DIExpression()), !dbg !6464
  store %struct.work_stuff* %from, %struct.work_stuff** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %from.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6467, metadata !DIExpression()), !dbg !6468
  %0 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6469
  call void @delete_work_stuff(%struct.work_stuff* %0), !dbg !6470
  %1 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6471
  %2 = bitcast %struct.work_stuff* %1 to i8*, !dbg !6472
  %3 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6473
  %4 = bitcast %struct.work_stuff* %3 to i8*, !dbg !6472
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %4, i64 112, i1 false), !dbg !6472
  %5 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6474
  %typevec_size = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %5, i32 0, i32 9, !dbg !6476
  %6 = load i32, i32* %typevec_size, align 4, !dbg !6476
  %tobool = icmp ne i32 %6, 0, !dbg !6474
  br i1 %tobool, label %if.then, label %if.end, !dbg !6477

if.then:                                          ; preds = %entry
  %7 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6478
  %typevec_size1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 9, !dbg !6478
  %8 = load i32, i32* %typevec_size1, align 4, !dbg !6478
  %conv = sext i32 %8 to i64, !dbg !6478
  %mul = mul i64 8, %conv, !dbg !6478
  %call = call i8* @xmalloc(i64 %mul), !dbg !6478
  %9 = bitcast i8* %call to i8**, !dbg !6478
  %10 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6479
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 1, !dbg !6480
  store i8** %9, i8*** %typevec, align 8, !dbg !6481
  br label %if.end, !dbg !6479

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !6482
  br label %for.cond, !dbg !6484

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %i, align 4, !dbg !6485
  %12 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6487
  %ntypes = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %12, i32 0, i32 8, !dbg !6488
  %13 = load i32, i32* %ntypes, align 8, !dbg !6488
  %cmp = icmp slt i32 %11, %13, !dbg !6489
  br i1 %cmp, label %for.body, label %for.end, !dbg !6490

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6491, metadata !DIExpression()), !dbg !6493
  %14 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6494
  %typevec3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %14, i32 0, i32 1, !dbg !6495
  %15 = load i8**, i8*** %typevec3, align 8, !dbg !6495
  %16 = load i32, i32* %i, align 4, !dbg !6496
  %idxprom = sext i32 %16 to i64, !dbg !6494
  %arrayidx = getelementptr inbounds i8*, i8** %15, i64 %idxprom, !dbg !6494
  %17 = load i8*, i8** %arrayidx, align 8, !dbg !6494
  %call4 = call i64 @strlen(i8* %17), !dbg !6497
  %add = add i64 %call4, 1, !dbg !6498
  %conv5 = trunc i64 %add to i32, !dbg !6497
  store i32 %conv5, i32* %len, align 4, !dbg !6493
  %18 = load i32, i32* %len, align 4, !dbg !6499
  %conv6 = sext i32 %18 to i64, !dbg !6499
  %mul7 = mul i64 1, %conv6, !dbg !6499
  %call8 = call i8* @xmalloc(i64 %mul7), !dbg !6499
  %19 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6500
  %typevec9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 1, !dbg !6501
  %20 = load i8**, i8*** %typevec9, align 8, !dbg !6501
  %21 = load i32, i32* %i, align 4, !dbg !6502
  %idxprom10 = sext i32 %21 to i64, !dbg !6500
  %arrayidx11 = getelementptr inbounds i8*, i8** %20, i64 %idxprom10, !dbg !6500
  store i8* %call8, i8** %arrayidx11, align 8, !dbg !6503
  %22 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6504
  %typevec12 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %22, i32 0, i32 1, !dbg !6505
  %23 = load i8**, i8*** %typevec12, align 8, !dbg !6505
  %24 = load i32, i32* %i, align 4, !dbg !6506
  %idxprom13 = sext i32 %24 to i64, !dbg !6504
  %arrayidx14 = getelementptr inbounds i8*, i8** %23, i64 %idxprom13, !dbg !6504
  %25 = load i8*, i8** %arrayidx14, align 8, !dbg !6504
  %26 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6507
  %typevec15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %26, i32 0, i32 1, !dbg !6508
  %27 = load i8**, i8*** %typevec15, align 8, !dbg !6508
  %28 = load i32, i32* %i, align 4, !dbg !6509
  %idxprom16 = sext i32 %28 to i64, !dbg !6507
  %arrayidx17 = getelementptr inbounds i8*, i8** %27, i64 %idxprom16, !dbg !6507
  %29 = load i8*, i8** %arrayidx17, align 8, !dbg !6507
  %30 = load i32, i32* %len, align 4, !dbg !6510
  %conv18 = sext i32 %30 to i64, !dbg !6510
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %29, i64 %conv18, i1 false), !dbg !6511
  br label %for.inc, !dbg !6512

for.inc:                                          ; preds = %for.body
  %31 = load i32, i32* %i, align 4, !dbg !6513
  %inc = add nsw i32 %31, 1, !dbg !6513
  store i32 %inc, i32* %i, align 4, !dbg !6513
  br label %for.cond, !dbg !6514, !llvm.loop !6515

for.end:                                          ; preds = %for.cond
  %32 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6517
  %ksize = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %32, i32 0, i32 6, !dbg !6519
  %33 = load i32, i32* %ksize, align 8, !dbg !6519
  %tobool19 = icmp ne i32 %33, 0, !dbg !6517
  br i1 %tobool19, label %if.then20, label %if.end25, !dbg !6520

if.then20:                                        ; preds = %for.end
  %34 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6521
  %ksize21 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %34, i32 0, i32 6, !dbg !6521
  %35 = load i32, i32* %ksize21, align 8, !dbg !6521
  %conv22 = sext i32 %35 to i64, !dbg !6521
  %mul23 = mul i64 8, %conv22, !dbg !6521
  %call24 = call i8* @xmalloc(i64 %mul23), !dbg !6521
  %36 = bitcast i8* %call24 to i8**, !dbg !6521
  %37 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6522
  %ktypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %37, i32 0, i32 2, !dbg !6523
  store i8** %36, i8*** %ktypevec, align 8, !dbg !6524
  br label %if.end25, !dbg !6522

if.end25:                                         ; preds = %if.then20, %for.end
  store i32 0, i32* %i, align 4, !dbg !6525
  br label %for.cond26, !dbg !6527

for.cond26:                                       ; preds = %for.inc50, %if.end25
  %38 = load i32, i32* %i, align 4, !dbg !6528
  %39 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6530
  %numk = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %39, i32 0, i32 4, !dbg !6531
  %40 = load i32, i32* %numk, align 8, !dbg !6531
  %cmp27 = icmp slt i32 %38, %40, !dbg !6532
  br i1 %cmp27, label %for.body29, label %for.end52, !dbg !6533

for.body29:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata i32* %len30, metadata !6534, metadata !DIExpression()), !dbg !6536
  %41 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6537
  %ktypevec31 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %41, i32 0, i32 2, !dbg !6538
  %42 = load i8**, i8*** %ktypevec31, align 8, !dbg !6538
  %43 = load i32, i32* %i, align 4, !dbg !6539
  %idxprom32 = sext i32 %43 to i64, !dbg !6537
  %arrayidx33 = getelementptr inbounds i8*, i8** %42, i64 %idxprom32, !dbg !6537
  %44 = load i8*, i8** %arrayidx33, align 8, !dbg !6537
  %call34 = call i64 @strlen(i8* %44), !dbg !6540
  %add35 = add i64 %call34, 1, !dbg !6541
  %conv36 = trunc i64 %add35 to i32, !dbg !6540
  store i32 %conv36, i32* %len30, align 4, !dbg !6536
  %45 = load i32, i32* %len30, align 4, !dbg !6542
  %conv37 = sext i32 %45 to i64, !dbg !6542
  %mul38 = mul i64 1, %conv37, !dbg !6542
  %call39 = call i8* @xmalloc(i64 %mul38), !dbg !6542
  %46 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6543
  %ktypevec40 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %46, i32 0, i32 2, !dbg !6544
  %47 = load i8**, i8*** %ktypevec40, align 8, !dbg !6544
  %48 = load i32, i32* %i, align 4, !dbg !6545
  %idxprom41 = sext i32 %48 to i64, !dbg !6543
  %arrayidx42 = getelementptr inbounds i8*, i8** %47, i64 %idxprom41, !dbg !6543
  store i8* %call39, i8** %arrayidx42, align 8, !dbg !6546
  %49 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6547
  %ktypevec43 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %49, i32 0, i32 2, !dbg !6548
  %50 = load i8**, i8*** %ktypevec43, align 8, !dbg !6548
  %51 = load i32, i32* %i, align 4, !dbg !6549
  %idxprom44 = sext i32 %51 to i64, !dbg !6547
  %arrayidx45 = getelementptr inbounds i8*, i8** %50, i64 %idxprom44, !dbg !6547
  %52 = load i8*, i8** %arrayidx45, align 8, !dbg !6547
  %53 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6550
  %ktypevec46 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %53, i32 0, i32 2, !dbg !6551
  %54 = load i8**, i8*** %ktypevec46, align 8, !dbg !6551
  %55 = load i32, i32* %i, align 4, !dbg !6552
  %idxprom47 = sext i32 %55 to i64, !dbg !6550
  %arrayidx48 = getelementptr inbounds i8*, i8** %54, i64 %idxprom47, !dbg !6550
  %56 = load i8*, i8** %arrayidx48, align 8, !dbg !6550
  %57 = load i32, i32* %len30, align 4, !dbg !6553
  %conv49 = sext i32 %57 to i64, !dbg !6553
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %56, i64 %conv49, i1 false), !dbg !6554
  br label %for.inc50, !dbg !6555

for.inc50:                                        ; preds = %for.body29
  %58 = load i32, i32* %i, align 4, !dbg !6556
  %inc51 = add nsw i32 %58, 1, !dbg !6556
  store i32 %inc51, i32* %i, align 4, !dbg !6556
  br label %for.cond26, !dbg !6557, !llvm.loop !6558

for.end52:                                        ; preds = %for.cond26
  %59 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6560
  %bsize = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %59, i32 0, i32 7, !dbg !6562
  %60 = load i32, i32* %bsize, align 4, !dbg !6562
  %tobool53 = icmp ne i32 %60, 0, !dbg !6560
  br i1 %tobool53, label %if.then54, label %if.end59, !dbg !6563

if.then54:                                        ; preds = %for.end52
  %61 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6564
  %bsize55 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %61, i32 0, i32 7, !dbg !6564
  %62 = load i32, i32* %bsize55, align 4, !dbg !6564
  %conv56 = sext i32 %62 to i64, !dbg !6564
  %mul57 = mul i64 8, %conv56, !dbg !6564
  %call58 = call i8* @xmalloc(i64 %mul57), !dbg !6564
  %63 = bitcast i8* %call58 to i8**, !dbg !6564
  %64 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6565
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %64, i32 0, i32 3, !dbg !6566
  store i8** %63, i8*** %btypevec, align 8, !dbg !6567
  br label %if.end59, !dbg !6565

if.end59:                                         ; preds = %if.then54, %for.end52
  store i32 0, i32* %i, align 4, !dbg !6568
  br label %for.cond60, !dbg !6570

for.cond60:                                       ; preds = %for.inc84, %if.end59
  %65 = load i32, i32* %i, align 4, !dbg !6571
  %66 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6573
  %numb = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %66, i32 0, i32 5, !dbg !6574
  %67 = load i32, i32* %numb, align 4, !dbg !6574
  %cmp61 = icmp slt i32 %65, %67, !dbg !6575
  br i1 %cmp61, label %for.body63, label %for.end86, !dbg !6576

for.body63:                                       ; preds = %for.cond60
  call void @llvm.dbg.declare(metadata i32* %len64, metadata !6577, metadata !DIExpression()), !dbg !6579
  %68 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6580
  %btypevec65 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %68, i32 0, i32 3, !dbg !6581
  %69 = load i8**, i8*** %btypevec65, align 8, !dbg !6581
  %70 = load i32, i32* %i, align 4, !dbg !6582
  %idxprom66 = sext i32 %70 to i64, !dbg !6580
  %arrayidx67 = getelementptr inbounds i8*, i8** %69, i64 %idxprom66, !dbg !6580
  %71 = load i8*, i8** %arrayidx67, align 8, !dbg !6580
  %call68 = call i64 @strlen(i8* %71), !dbg !6583
  %add69 = add i64 %call68, 1, !dbg !6584
  %conv70 = trunc i64 %add69 to i32, !dbg !6583
  store i32 %conv70, i32* %len64, align 4, !dbg !6579
  %72 = load i32, i32* %len64, align 4, !dbg !6585
  %conv71 = sext i32 %72 to i64, !dbg !6585
  %mul72 = mul i64 1, %conv71, !dbg !6585
  %call73 = call i8* @xmalloc(i64 %mul72), !dbg !6585
  %73 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6586
  %btypevec74 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %73, i32 0, i32 3, !dbg !6587
  %74 = load i8**, i8*** %btypevec74, align 8, !dbg !6587
  %75 = load i32, i32* %i, align 4, !dbg !6588
  %idxprom75 = sext i32 %75 to i64, !dbg !6586
  %arrayidx76 = getelementptr inbounds i8*, i8** %74, i64 %idxprom75, !dbg !6586
  store i8* %call73, i8** %arrayidx76, align 8, !dbg !6589
  %76 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6590
  %btypevec77 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %76, i32 0, i32 3, !dbg !6591
  %77 = load i8**, i8*** %btypevec77, align 8, !dbg !6591
  %78 = load i32, i32* %i, align 4, !dbg !6592
  %idxprom78 = sext i32 %78 to i64, !dbg !6590
  %arrayidx79 = getelementptr inbounds i8*, i8** %77, i64 %idxprom78, !dbg !6590
  %79 = load i8*, i8** %arrayidx79, align 8, !dbg !6590
  %80 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6593
  %btypevec80 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %80, i32 0, i32 3, !dbg !6594
  %81 = load i8**, i8*** %btypevec80, align 8, !dbg !6594
  %82 = load i32, i32* %i, align 4, !dbg !6595
  %idxprom81 = sext i32 %82 to i64, !dbg !6593
  %arrayidx82 = getelementptr inbounds i8*, i8** %81, i64 %idxprom81, !dbg !6593
  %83 = load i8*, i8** %arrayidx82, align 8, !dbg !6593
  %84 = load i32, i32* %len64, align 4, !dbg !6596
  %conv83 = sext i32 %84 to i64, !dbg !6596
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %79, i8* align 1 %83, i64 %conv83, i1 false), !dbg !6597
  br label %for.inc84, !dbg !6598

for.inc84:                                        ; preds = %for.body63
  %85 = load i32, i32* %i, align 4, !dbg !6599
  %inc85 = add nsw i32 %85, 1, !dbg !6599
  store i32 %inc85, i32* %i, align 4, !dbg !6599
  br label %for.cond60, !dbg !6600, !llvm.loop !6601

for.end86:                                        ; preds = %for.cond60
  %86 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6603
  %ntmpl_args = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %86, i32 0, i32 17, !dbg !6605
  %87 = load i32, i32* %ntmpl_args, align 8, !dbg !6605
  %tobool87 = icmp ne i32 %87, 0, !dbg !6603
  br i1 %tobool87, label %if.then88, label %if.end93, !dbg !6606

if.then88:                                        ; preds = %for.end86
  %88 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6607
  %ntmpl_args89 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %88, i32 0, i32 17, !dbg !6607
  %89 = load i32, i32* %ntmpl_args89, align 8, !dbg !6607
  %conv90 = sext i32 %89 to i64, !dbg !6607
  %mul91 = mul i64 8, %conv90, !dbg !6607
  %call92 = call i8* @xmalloc(i64 %mul91), !dbg !6607
  %90 = bitcast i8* %call92 to i8**, !dbg !6607
  %91 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6608
  %tmpl_argvec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %91, i32 0, i32 16, !dbg !6609
  store i8** %90, i8*** %tmpl_argvec, align 8, !dbg !6610
  br label %if.end93, !dbg !6608

if.end93:                                         ; preds = %if.then88, %for.end86
  store i32 0, i32* %i, align 4, !dbg !6611
  br label %for.cond94, !dbg !6613

for.cond94:                                       ; preds = %for.inc119, %if.end93
  %92 = load i32, i32* %i, align 4, !dbg !6614
  %93 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6616
  %ntmpl_args95 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %93, i32 0, i32 17, !dbg !6617
  %94 = load i32, i32* %ntmpl_args95, align 8, !dbg !6617
  %cmp96 = icmp slt i32 %92, %94, !dbg !6618
  br i1 %cmp96, label %for.body98, label %for.end121, !dbg !6619

for.body98:                                       ; preds = %for.cond94
  call void @llvm.dbg.declare(metadata i32* %len99, metadata !6620, metadata !DIExpression()), !dbg !6622
  %95 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6623
  %tmpl_argvec100 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %95, i32 0, i32 16, !dbg !6624
  %96 = load i8**, i8*** %tmpl_argvec100, align 8, !dbg !6624
  %97 = load i32, i32* %i, align 4, !dbg !6625
  %idxprom101 = sext i32 %97 to i64, !dbg !6623
  %arrayidx102 = getelementptr inbounds i8*, i8** %96, i64 %idxprom101, !dbg !6623
  %98 = load i8*, i8** %arrayidx102, align 8, !dbg !6623
  %call103 = call i64 @strlen(i8* %98), !dbg !6626
  %add104 = add i64 %call103, 1, !dbg !6627
  %conv105 = trunc i64 %add104 to i32, !dbg !6626
  store i32 %conv105, i32* %len99, align 4, !dbg !6622
  %99 = load i32, i32* %len99, align 4, !dbg !6628
  %conv106 = sext i32 %99 to i64, !dbg !6628
  %mul107 = mul i64 1, %conv106, !dbg !6628
  %call108 = call i8* @xmalloc(i64 %mul107), !dbg !6628
  %100 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6629
  %tmpl_argvec109 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %100, i32 0, i32 16, !dbg !6630
  %101 = load i8**, i8*** %tmpl_argvec109, align 8, !dbg !6630
  %102 = load i32, i32* %i, align 4, !dbg !6631
  %idxprom110 = sext i32 %102 to i64, !dbg !6629
  %arrayidx111 = getelementptr inbounds i8*, i8** %101, i64 %idxprom110, !dbg !6629
  store i8* %call108, i8** %arrayidx111, align 8, !dbg !6632
  %103 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6633
  %tmpl_argvec112 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %103, i32 0, i32 16, !dbg !6634
  %104 = load i8**, i8*** %tmpl_argvec112, align 8, !dbg !6634
  %105 = load i32, i32* %i, align 4, !dbg !6635
  %idxprom113 = sext i32 %105 to i64, !dbg !6633
  %arrayidx114 = getelementptr inbounds i8*, i8** %104, i64 %idxprom113, !dbg !6633
  %106 = load i8*, i8** %arrayidx114, align 8, !dbg !6633
  %107 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6636
  %tmpl_argvec115 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %107, i32 0, i32 16, !dbg !6637
  %108 = load i8**, i8*** %tmpl_argvec115, align 8, !dbg !6637
  %109 = load i32, i32* %i, align 4, !dbg !6638
  %idxprom116 = sext i32 %109 to i64, !dbg !6636
  %arrayidx117 = getelementptr inbounds i8*, i8** %108, i64 %idxprom116, !dbg !6636
  %110 = load i8*, i8** %arrayidx117, align 8, !dbg !6636
  %111 = load i32, i32* %len99, align 4, !dbg !6639
  %conv118 = sext i32 %111 to i64, !dbg !6639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %110, i64 %conv118, i1 false), !dbg !6640
  br label %for.inc119, !dbg !6641

for.inc119:                                       ; preds = %for.body98
  %112 = load i32, i32* %i, align 4, !dbg !6642
  %inc120 = add nsw i32 %112, 1, !dbg !6642
  store i32 %inc120, i32* %i, align 4, !dbg !6642
  br label %for.cond94, !dbg !6643, !llvm.loop !6644

for.end121:                                       ; preds = %for.cond94
  %113 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6646
  %previous_argument = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %113, i32 0, i32 19, !dbg !6648
  %114 = load %struct.string*, %struct.string** %previous_argument, align 8, !dbg !6648
  %tobool122 = icmp ne %struct.string* %114, null, !dbg !6646
  br i1 %tobool122, label %if.then123, label %if.end129, !dbg !6649

if.then123:                                       ; preds = %for.end121
  %call124 = call i8* @xmalloc(i64 24), !dbg !6650
  %115 = bitcast i8* %call124 to %struct.string*, !dbg !6650
  %116 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6652
  %previous_argument125 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %116, i32 0, i32 19, !dbg !6653
  store %struct.string* %115, %struct.string** %previous_argument125, align 8, !dbg !6654
  %117 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6655
  %previous_argument126 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %117, i32 0, i32 19, !dbg !6656
  %118 = load %struct.string*, %struct.string** %previous_argument126, align 8, !dbg !6656
  call void @string_init(%struct.string* %118), !dbg !6657
  %119 = load %struct.work_stuff*, %struct.work_stuff** %to.addr, align 8, !dbg !6658
  %previous_argument127 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %119, i32 0, i32 19, !dbg !6659
  %120 = load %struct.string*, %struct.string** %previous_argument127, align 8, !dbg !6659
  %121 = load %struct.work_stuff*, %struct.work_stuff** %from.addr, align 8, !dbg !6660
  %previous_argument128 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %121, i32 0, i32 19, !dbg !6661
  %122 = load %struct.string*, %struct.string** %previous_argument128, align 8, !dbg !6661
  call void @string_appends(%struct.string* %120, %struct.string* %122), !dbg !6662
  br label %if.end129, !dbg !6663

if.end129:                                        ; preds = %if.then123, %for.end121
  ret void, !dbg !6664
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_work_stuff(%struct.work_stuff* %work) #0 !dbg !6665 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6666, metadata !DIExpression()), !dbg !6667
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6668
  call void @delete_non_B_K_work_stuff(%struct.work_stuff* %0), !dbg !6669
  %1 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6670
  call void @squangle_mop_up(%struct.work_stuff* %1), !dbg !6671
  ret void, !dbg !6672
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_non_B_K_work_stuff(%struct.work_stuff* %work) #0 !dbg !6673 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %i = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6674, metadata !DIExpression()), !dbg !6675
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6676
  call void @forget_types(%struct.work_stuff* %0), !dbg !6677
  %1 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6678
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %1, i32 0, i32 1, !dbg !6680
  %2 = load i8**, i8*** %typevec, align 8, !dbg !6680
  %cmp = icmp ne i8** %2, null, !dbg !6681
  br i1 %cmp, label %if.then, label %if.end, !dbg !6682

if.then:                                          ; preds = %entry
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6683
  %typevec1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %3, i32 0, i32 1, !dbg !6685
  %4 = load i8**, i8*** %typevec1, align 8, !dbg !6685
  %5 = bitcast i8** %4 to i8*, !dbg !6686
  call void @free(i8* %5), !dbg !6687
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6688
  %typevec2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 1, !dbg !6689
  store i8** null, i8*** %typevec2, align 8, !dbg !6690
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6691
  %typevec_size = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 9, !dbg !6692
  store i32 0, i32* %typevec_size, align 4, !dbg !6693
  br label %if.end, !dbg !6694

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6695
  %tmpl_argvec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 16, !dbg !6697
  %9 = load i8**, i8*** %tmpl_argvec, align 8, !dbg !6697
  %tobool = icmp ne i8** %9, null, !dbg !6695
  br i1 %tobool, label %if.then3, label %if.end14, !dbg !6698

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6699, metadata !DIExpression()), !dbg !6701
  store i32 0, i32* %i, align 4, !dbg !6702
  br label %for.cond, !dbg !6704

for.cond:                                         ; preds = %for.inc, %if.then3
  %10 = load i32, i32* %i, align 4, !dbg !6705
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6707
  %ntmpl_args = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 17, !dbg !6708
  %12 = load i32, i32* %ntmpl_args, align 8, !dbg !6708
  %cmp4 = icmp slt i32 %10, %12, !dbg !6709
  br i1 %cmp4, label %for.body, label %for.end, !dbg !6710

for.body:                                         ; preds = %for.cond
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6711
  %tmpl_argvec5 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 16, !dbg !6713
  %14 = load i8**, i8*** %tmpl_argvec5, align 8, !dbg !6713
  %15 = load i32, i32* %i, align 4, !dbg !6714
  %idxprom = sext i32 %15 to i64, !dbg !6711
  %arrayidx = getelementptr inbounds i8*, i8** %14, i64 %idxprom, !dbg !6711
  %16 = load i8*, i8** %arrayidx, align 8, !dbg !6711
  %tobool6 = icmp ne i8* %16, null, !dbg !6711
  br i1 %tobool6, label %if.then7, label %if.end11, !dbg !6715

if.then7:                                         ; preds = %for.body
  %17 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6716
  %tmpl_argvec8 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %17, i32 0, i32 16, !dbg !6717
  %18 = load i8**, i8*** %tmpl_argvec8, align 8, !dbg !6717
  %19 = load i32, i32* %i, align 4, !dbg !6718
  %idxprom9 = sext i32 %19 to i64, !dbg !6716
  %arrayidx10 = getelementptr inbounds i8*, i8** %18, i64 %idxprom9, !dbg !6716
  %20 = load i8*, i8** %arrayidx10, align 8, !dbg !6716
  call void @free(i8* %20), !dbg !6719
  br label %if.end11, !dbg !6719

if.end11:                                         ; preds = %if.then7, %for.body
  br label %for.inc, !dbg !6720

for.inc:                                          ; preds = %if.end11
  %21 = load i32, i32* %i, align 4, !dbg !6721
  %inc = add nsw i32 %21, 1, !dbg !6721
  store i32 %inc, i32* %i, align 4, !dbg !6721
  br label %for.cond, !dbg !6722, !llvm.loop !6723

for.end:                                          ; preds = %for.cond
  %22 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6725
  %tmpl_argvec12 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %22, i32 0, i32 16, !dbg !6726
  %23 = load i8**, i8*** %tmpl_argvec12, align 8, !dbg !6726
  %24 = bitcast i8** %23 to i8*, !dbg !6727
  call void @free(i8* %24), !dbg !6728
  %25 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6729
  %tmpl_argvec13 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %25, i32 0, i32 16, !dbg !6730
  store i8** null, i8*** %tmpl_argvec13, align 8, !dbg !6731
  br label %if.end14, !dbg !6732

if.end14:                                         ; preds = %for.end, %if.end
  %26 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6733
  %previous_argument = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %26, i32 0, i32 19, !dbg !6735
  %27 = load %struct.string*, %struct.string** %previous_argument, align 8, !dbg !6735
  %tobool15 = icmp ne %struct.string* %27, null, !dbg !6733
  br i1 %tobool15, label %if.then16, label %if.end20, !dbg !6736

if.then16:                                        ; preds = %if.end14
  %28 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6737
  %previous_argument17 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %28, i32 0, i32 19, !dbg !6739
  %29 = load %struct.string*, %struct.string** %previous_argument17, align 8, !dbg !6739
  call void @string_delete(%struct.string* %29), !dbg !6740
  %30 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6741
  %previous_argument18 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %30, i32 0, i32 19, !dbg !6742
  %31 = load %struct.string*, %struct.string** %previous_argument18, align 8, !dbg !6742
  %32 = bitcast %struct.string* %31 to i8*, !dbg !6743
  call void @free(i8* %32), !dbg !6744
  %33 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6745
  %previous_argument19 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %33, i32 0, i32 19, !dbg !6746
  store %struct.string* null, %struct.string** %previous_argument19, align 8, !dbg !6747
  br label %if.end20, !dbg !6748

if.end20:                                         ; preds = %if.then16, %if.end14
  ret void, !dbg !6749
}

; Function Attrs: noinline nounwind uwtable
define internal void @forget_types(%struct.work_stuff* %work) #0 !dbg !6750 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %i = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6751, metadata !DIExpression()), !dbg !6752
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6753, metadata !DIExpression()), !dbg !6754
  br label %while.cond, !dbg !6755

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6756
  %ntypes = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 8, !dbg !6757
  %1 = load i32, i32* %ntypes, align 8, !dbg !6757
  %cmp = icmp sgt i32 %1, 0, !dbg !6758
  br i1 %cmp, label %while.body, label %while.end, !dbg !6755

while.body:                                       ; preds = %while.cond
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6759
  %ntypes1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 8, !dbg !6761
  %3 = load i32, i32* %ntypes1, align 8, !dbg !6762
  %dec = add nsw i32 %3, -1, !dbg !6762
  store i32 %dec, i32* %ntypes1, align 8, !dbg !6762
  store i32 %dec, i32* %i, align 4, !dbg !6763
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6764
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 1, !dbg !6766
  %5 = load i8**, i8*** %typevec, align 8, !dbg !6766
  %6 = load i32, i32* %i, align 4, !dbg !6767
  %idxprom = sext i32 %6 to i64, !dbg !6764
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom, !dbg !6764
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !6764
  %cmp2 = icmp ne i8* %7, null, !dbg !6768
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6769

if.then:                                          ; preds = %while.body
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6770
  %typevec3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 1, !dbg !6772
  %9 = load i8**, i8*** %typevec3, align 8, !dbg !6772
  %10 = load i32, i32* %i, align 4, !dbg !6773
  %idxprom4 = sext i32 %10 to i64, !dbg !6770
  %arrayidx5 = getelementptr inbounds i8*, i8** %9, i64 %idxprom4, !dbg !6770
  %11 = load i8*, i8** %arrayidx5, align 8, !dbg !6770
  call void @free(i8* %11), !dbg !6774
  %12 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6775
  %typevec6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %12, i32 0, i32 1, !dbg !6776
  %13 = load i8**, i8*** %typevec6, align 8, !dbg !6776
  %14 = load i32, i32* %i, align 4, !dbg !6777
  %idxprom7 = sext i32 %14 to i64, !dbg !6775
  %arrayidx8 = getelementptr inbounds i8*, i8** %13, i64 %idxprom7, !dbg !6775
  store i8* null, i8** %arrayidx8, align 8, !dbg !6778
  br label %if.end, !dbg !6779

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !6755, !llvm.loop !6780

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6782
}

; Function Attrs: noinline nounwind uwtable
define internal void @remember_type(%struct.work_stuff* %work, i8* %start, i32 %len) #0 !dbg !6783 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %start.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %tem = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6784, metadata !DIExpression()), !dbg !6785
  store i8* %start, i8** %start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %start.addr, metadata !6786, metadata !DIExpression()), !dbg !6787
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6788, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !6790, metadata !DIExpression()), !dbg !6791
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6792
  %forgetting_types = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 18, !dbg !6794
  %1 = load i32, i32* %forgetting_types, align 4, !dbg !6794
  %tobool = icmp ne i32 %1, 0, !dbg !6792
  br i1 %tobool, label %if.then, label %if.end, !dbg !6795

if.then:                                          ; preds = %entry
  br label %return, !dbg !6796

if.end:                                           ; preds = %entry
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6797
  %ntypes = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 8, !dbg !6799
  %3 = load i32, i32* %ntypes, align 8, !dbg !6799
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6800
  %typevec_size = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 9, !dbg !6801
  %5 = load i32, i32* %typevec_size, align 4, !dbg !6801
  %cmp = icmp sge i32 %3, %5, !dbg !6802
  br i1 %cmp, label %if.then1, label %if.end16, !dbg !6803

if.then1:                                         ; preds = %if.end
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6804
  %typevec_size2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 9, !dbg !6807
  %7 = load i32, i32* %typevec_size2, align 4, !dbg !6807
  %cmp3 = icmp eq i32 %7, 0, !dbg !6808
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !6809

if.then4:                                         ; preds = %if.then1
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6810
  %typevec_size5 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 9, !dbg !6812
  store i32 3, i32* %typevec_size5, align 4, !dbg !6813
  %9 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6814
  %typevec_size6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %9, i32 0, i32 9, !dbg !6814
  %10 = load i32, i32* %typevec_size6, align 4, !dbg !6814
  %conv = sext i32 %10 to i64, !dbg !6814
  %mul = mul i64 8, %conv, !dbg !6814
  %call = call i8* @xmalloc(i64 %mul), !dbg !6814
  %11 = bitcast i8* %call to i8**, !dbg !6814
  %12 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6815
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %12, i32 0, i32 1, !dbg !6816
  store i8** %11, i8*** %typevec, align 8, !dbg !6817
  br label %if.end15, !dbg !6818

if.else:                                          ; preds = %if.then1
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6819
  %typevec_size7 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 9, !dbg !6821
  %14 = load i32, i32* %typevec_size7, align 4, !dbg !6822
  %mul8 = mul nsw i32 %14, 2, !dbg !6822
  store i32 %mul8, i32* %typevec_size7, align 4, !dbg !6822
  %15 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6823
  %typevec9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %15, i32 0, i32 1, !dbg !6823
  %16 = load i8**, i8*** %typevec9, align 8, !dbg !6823
  %17 = bitcast i8** %16 to i8*, !dbg !6823
  %18 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6823
  %typevec_size10 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %18, i32 0, i32 9, !dbg !6823
  %19 = load i32, i32* %typevec_size10, align 4, !dbg !6823
  %conv11 = sext i32 %19 to i64, !dbg !6823
  %mul12 = mul i64 8, %conv11, !dbg !6823
  %call13 = call i8* @xrealloc(i8* %17, i64 %mul12), !dbg !6823
  %20 = bitcast i8* %call13 to i8**, !dbg !6823
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6824
  %typevec14 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 1, !dbg !6825
  store i8** %20, i8*** %typevec14, align 8, !dbg !6826
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then4
  br label %if.end16, !dbg !6827

if.end16:                                         ; preds = %if.end15, %if.end
  %22 = load i32, i32* %len.addr, align 4, !dbg !6828
  %add = add nsw i32 %22, 1, !dbg !6828
  %conv17 = sext i32 %add to i64, !dbg !6828
  %mul18 = mul i64 1, %conv17, !dbg !6828
  %call19 = call i8* @xmalloc(i64 %mul18), !dbg !6828
  store i8* %call19, i8** %tem, align 8, !dbg !6829
  %23 = load i8*, i8** %tem, align 8, !dbg !6830
  %24 = load i8*, i8** %start.addr, align 8, !dbg !6831
  %25 = load i32, i32* %len.addr, align 4, !dbg !6832
  %conv20 = sext i32 %25 to i64, !dbg !6832
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 %24, i64 %conv20, i1 false), !dbg !6833
  %26 = load i8*, i8** %tem, align 8, !dbg !6834
  %27 = load i32, i32* %len.addr, align 4, !dbg !6835
  %idxprom = sext i32 %27 to i64, !dbg !6834
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %idxprom, !dbg !6834
  store i8 0, i8* %arrayidx, align 1, !dbg !6836
  %28 = load i8*, i8** %tem, align 8, !dbg !6837
  %29 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6838
  %typevec21 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %29, i32 0, i32 1, !dbg !6839
  %30 = load i8**, i8*** %typevec21, align 8, !dbg !6839
  %31 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6840
  %ntypes22 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %31, i32 0, i32 8, !dbg !6841
  %32 = load i32, i32* %ntypes22, align 8, !dbg !6842
  %inc = add nsw i32 %32, 1, !dbg !6842
  store i32 %inc, i32* %ntypes22, align 8, !dbg !6842
  %idxprom23 = sext i32 %32 to i64, !dbg !6838
  %arrayidx24 = getelementptr inbounds i8*, i8** %30, i64 %idxprom23, !dbg !6838
  store i8* %28, i8** %arrayidx24, align 8, !dbg !6843
  br label %return, !dbg !6844

return:                                           ; preds = %if.end16, %if.then
  ret void, !dbg !6844
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @code_for_qualifier(i32 %c) #0 !dbg !6845 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !6848, metadata !DIExpression()), !dbg !6849
  %0 = load i32, i32* %c.addr, align 4, !dbg !6850
  switch i32 %0, label %sw.default [
    i32 67, label %sw.bb
    i32 86, label %sw.bb1
    i32 117, label %sw.bb2
  ], !dbg !6851

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !6852
  br label %return, !dbg !6852

sw.bb1:                                           ; preds = %entry
  store i32 2, i32* %retval, align 4, !dbg !6854
  br label %return, !dbg !6854

sw.bb2:                                           ; preds = %entry
  store i32 4, i32* %retval, align 4, !dbg !6855
  br label %return, !dbg !6855

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6856

sw.epilog:                                        ; preds = %sw.default
  call void @abort() #5, !dbg !6857
  unreachable, !dbg !6857

return:                                           ; preds = %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %retval, align 4, !dbg !6858
  ret i32 %1, !dbg !6858
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_class(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !6859 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %success = alloca i32, align 4
  %btype = alloca i32, align 4
  %class_name = alloca %struct.string, align 8
  %save_class_name_end = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6860, metadata !DIExpression()), !dbg !6861
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !6862, metadata !DIExpression()), !dbg !6863
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !6864, metadata !DIExpression()), !dbg !6865
  call void @llvm.dbg.declare(metadata i32* %success, metadata !6866, metadata !DIExpression()), !dbg !6867
  store i32 0, i32* %success, align 4, !dbg !6867
  call void @llvm.dbg.declare(metadata i32* %btype, metadata !6868, metadata !DIExpression()), !dbg !6869
  call void @llvm.dbg.declare(metadata %struct.string* %class_name, metadata !6870, metadata !DIExpression()), !dbg !6871
  call void @llvm.dbg.declare(metadata i8** %save_class_name_end, metadata !6872, metadata !DIExpression()), !dbg !6873
  store i8* null, i8** %save_class_name_end, align 8, !dbg !6873
  call void @string_init(%struct.string* %class_name), !dbg !6874
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6875
  %call = call i32 @register_Btype(%struct.work_stuff* %0), !dbg !6876
  store i32 %call, i32* %btype, align 4, !dbg !6877
  %1 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6878
  %2 = load i8**, i8*** %mangled.addr, align 8, !dbg !6880
  %call1 = call i32 @demangle_class_name(%struct.work_stuff* %1, i8** %2, %struct.string* %class_name), !dbg !6881
  %tobool = icmp ne i32 %call1, 0, !dbg !6881
  br i1 %tobool, label %if.then, label %if.end45, !dbg !6882

if.then:                                          ; preds = %entry
  %p = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6883
  %3 = load i8*, i8** %p, align 8, !dbg !6883
  store i8* %3, i8** %save_class_name_end, align 8, !dbg !6885
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6886
  %constructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 10, !dbg !6888
  %5 = load i32, i32* %constructor, align 8, !dbg !6888
  %and = and i32 %5, 1, !dbg !6889
  %tobool2 = icmp ne i32 %and, 0, !dbg !6889
  br i1 %tobool2, label %if.then5, label %lor.lhs.false, !dbg !6890

lor.lhs.false:                                    ; preds = %if.then
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6891
  %destructor = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 11, !dbg !6892
  %7 = load i32, i32* %destructor, align 4, !dbg !6892
  %and3 = and i32 %7, 1, !dbg !6893
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6893
  br i1 %tobool4, label %if.then5, label %if.end19, !dbg !6894

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6895
  %temp_start = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 13, !dbg !6898
  %9 = load i32, i32* %temp_start, align 4, !dbg !6898
  %tobool6 = icmp ne i32 %9, 0, !dbg !6895
  br i1 %tobool6, label %land.lhs.true, label %if.end, !dbg !6899

land.lhs.true:                                    ; preds = %if.then5
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6900
  %temp_start7 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 13, !dbg !6901
  %11 = load i32, i32* %temp_start7, align 4, !dbg !6901
  %cmp = icmp ne i32 %11, -1, !dbg !6902
  br i1 %cmp, label %if.then8, label %if.end, !dbg !6903

if.then8:                                         ; preds = %land.lhs.true
  %b = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6904
  %12 = load i8*, i8** %b, align 8, !dbg !6904
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6906
  %temp_start9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 13, !dbg !6907
  %14 = load i32, i32* %temp_start9, align 4, !dbg !6907
  %idx.ext = sext i32 %14 to i64, !dbg !6908
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !6908
  %p10 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6909
  store i8* %add.ptr, i8** %p10, align 8, !dbg !6910
  br label %if.end, !dbg !6911

if.end:                                           ; preds = %if.then8, %land.lhs.true, %if.then5
  %15 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6912
  call void @string_prepends(%struct.string* %15, %struct.string* %class_name), !dbg !6913
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6914
  %destructor11 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 11, !dbg !6916
  %17 = load i32, i32* %destructor11, align 4, !dbg !6916
  %and12 = and i32 %17, 1, !dbg !6917
  %tobool13 = icmp ne i32 %and12, 0, !dbg !6917
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !6918

if.then14:                                        ; preds = %if.end
  %18 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6919
  call void @string_prepend(%struct.string* %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i64 0, i64 0)), !dbg !6921
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6922
  %destructor15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 11, !dbg !6923
  %20 = load i32, i32* %destructor15, align 4, !dbg !6924
  %sub = sub nsw i32 %20, 1, !dbg !6924
  store i32 %sub, i32* %destructor15, align 4, !dbg !6924
  br label %if.end18, !dbg !6925

if.else:                                          ; preds = %if.end
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6926
  %constructor16 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 10, !dbg !6928
  %22 = load i32, i32* %constructor16, align 8, !dbg !6929
  %sub17 = sub nsw i32 %22, 1, !dbg !6929
  store i32 %sub17, i32* %constructor16, align 8, !dbg !6929
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then14
  br label %if.end19, !dbg !6930

if.end19:                                         ; preds = %if.end18, %lor.lhs.false
  %23 = load i8*, i8** %save_class_name_end, align 8, !dbg !6931
  %p20 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6932
  store i8* %23, i8** %p20, align 8, !dbg !6933
  %24 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6934
  %b21 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6935
  %25 = load i8*, i8** %b21, align 8, !dbg !6935
  %b22 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6936
  %26 = load i8*, i8** %b22, align 8, !dbg !6936
  %p23 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6936
  %27 = load i8*, i8** %p23, align 8, !dbg !6936
  %cmp24 = icmp eq i8* %26, %27, !dbg !6936
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !6936

cond.true:                                        ; preds = %if.end19
  br label %cond.end, !dbg !6936

cond.false:                                       ; preds = %if.end19
  %p25 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6936
  %28 = load i8*, i8** %p25, align 8, !dbg !6936
  %b26 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6936
  %29 = load i8*, i8** %b26, align 8, !dbg !6936
  %sub.ptr.lhs.cast = ptrtoint i8* %28 to i64, !dbg !6936
  %sub.ptr.rhs.cast = ptrtoint i8* %29 to i64, !dbg !6936
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6936
  br label %cond.end, !dbg !6936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub.ptr.sub, %cond.false ], !dbg !6936
  %conv = trunc i64 %cond to i32, !dbg !6936
  call void @remember_Ktype(%struct.work_stuff* %24, i8* %25, i32 %conv), !dbg !6937
  %30 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6938
  %b27 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6939
  %31 = load i8*, i8** %b27, align 8, !dbg !6939
  %b28 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6940
  %32 = load i8*, i8** %b28, align 8, !dbg !6940
  %p29 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6940
  %33 = load i8*, i8** %p29, align 8, !dbg !6940
  %cmp30 = icmp eq i8* %32, %33, !dbg !6940
  br i1 %cmp30, label %cond.true32, label %cond.false33, !dbg !6940

cond.true32:                                      ; preds = %cond.end
  br label %cond.end39, !dbg !6940

cond.false33:                                     ; preds = %cond.end
  %p34 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 1, !dbg !6940
  %34 = load i8*, i8** %p34, align 8, !dbg !6940
  %b35 = getelementptr inbounds %struct.string, %struct.string* %class_name, i32 0, i32 0, !dbg !6940
  %35 = load i8*, i8** %b35, align 8, !dbg !6940
  %sub.ptr.lhs.cast36 = ptrtoint i8* %34 to i64, !dbg !6940
  %sub.ptr.rhs.cast37 = ptrtoint i8* %35 to i64, !dbg !6940
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37, !dbg !6940
  br label %cond.end39, !dbg !6940

cond.end39:                                       ; preds = %cond.false33, %cond.true32
  %cond40 = phi i64 [ 0, %cond.true32 ], [ %sub.ptr.sub38, %cond.false33 ], !dbg !6940
  %conv41 = trunc i64 %cond40 to i32, !dbg !6940
  %36 = load i32, i32* %btype, align 4, !dbg !6941
  call void @remember_Btype(%struct.work_stuff* %30, i8* %31, i32 %conv41, i32 %36), !dbg !6942
  %37 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6943
  %38 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6944
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %38, i32 0, i32 0, !dbg !6944
  %39 = load i32, i32* %options, align 8, !dbg !6944
  %and42 = and i32 %39, 4, !dbg !6944
  %tobool43 = icmp ne i32 %and42, 0, !dbg !6944
  %40 = zext i1 %tobool43 to i64, !dbg !6944
  %cond44 = select i1 %tobool43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.186, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i64 0, i64 0), !dbg !6944
  call void @string_prepend(%struct.string* %37, i8* %cond44), !dbg !6945
  %41 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6946
  call void @string_prepends(%struct.string* %41, %struct.string* %class_name), !dbg !6947
  store i32 1, i32* %success, align 4, !dbg !6948
  br label %if.end45, !dbg !6949

if.end45:                                         ; preds = %cond.end39, %entry
  call void @string_delete(%struct.string* %class_name), !dbg !6950
  %42 = load i32, i32* %success, align 4, !dbg !6951
  ret i32 %42, !dbg !6952
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_args(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !6953 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %arg = alloca %struct.string, align 8
  %need_comma = alloca i32, align 4
  %r = alloca i32, align 4
  %t = alloca i32, align 4
  %tem = alloca i8*, align 8
  %temptype = alloca i8, align 1
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !6954, metadata !DIExpression()), !dbg !6955
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !6956, metadata !DIExpression()), !dbg !6957
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !6958, metadata !DIExpression()), !dbg !6959
  call void @llvm.dbg.declare(metadata %struct.string* %arg, metadata !6960, metadata !DIExpression()), !dbg !6961
  call void @llvm.dbg.declare(metadata i32* %need_comma, metadata !6962, metadata !DIExpression()), !dbg !6963
  store i32 0, i32* %need_comma, align 4, !dbg !6963
  call void @llvm.dbg.declare(metadata i32* %r, metadata !6964, metadata !DIExpression()), !dbg !6965
  call void @llvm.dbg.declare(metadata i32* %t, metadata !6966, metadata !DIExpression()), !dbg !6967
  call void @llvm.dbg.declare(metadata i8** %tem, metadata !6968, metadata !DIExpression()), !dbg !6969
  call void @llvm.dbg.declare(metadata i8* %temptype, metadata !6970, metadata !DIExpression()), !dbg !6971
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !6972
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 0, !dbg !6972
  %1 = load i32, i32* %options, align 8, !dbg !6972
  %and = and i32 %1, 1, !dbg !6972
  %tobool = icmp ne i32 %and, 0, !dbg !6972
  br i1 %tobool, label %if.then, label %if.end3, !dbg !6974

if.then:                                          ; preds = %entry
  %2 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6975
  call void @string_append(%struct.string* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.208, i64 0, i64 0)), !dbg !6977
  %3 = load i8**, i8*** %mangled.addr, align 8, !dbg !6978
  %4 = load i8*, i8** %3, align 8, !dbg !6980
  %5 = load i8, i8* %4, align 1, !dbg !6981
  %conv = sext i8 %5 to i32, !dbg !6981
  %cmp = icmp eq i32 %conv, 0, !dbg !6982
  br i1 %cmp, label %if.then2, label %if.end, !dbg !6983

if.then2:                                         ; preds = %if.then
  %6 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !6984
  call void @string_append(%struct.string* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.228, i64 0, i64 0)), !dbg !6986
  br label %if.end, !dbg !6987

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end3, !dbg !6988

if.end3:                                          ; preds = %if.end, %entry
  br label %while.cond, !dbg !6989

while.cond:                                       ; preds = %if.end125, %if.end3
  %7 = load i8**, i8*** %mangled.addr, align 8, !dbg !6990
  %8 = load i8*, i8** %7, align 8, !dbg !6991
  %9 = load i8, i8* %8, align 1, !dbg !6992
  %conv4 = sext i8 %9 to i32, !dbg !6992
  %cmp5 = icmp ne i32 %conv4, 95, !dbg !6993
  br i1 %cmp5, label %land.lhs.true, label %lor.rhs, !dbg !6994

land.lhs.true:                                    ; preds = %while.cond
  %10 = load i8**, i8*** %mangled.addr, align 8, !dbg !6995
  %11 = load i8*, i8** %10, align 8, !dbg !6996
  %12 = load i8, i8* %11, align 1, !dbg !6997
  %conv7 = sext i8 %12 to i32, !dbg !6997
  %cmp8 = icmp ne i32 %conv7, 0, !dbg !6998
  br i1 %cmp8, label %land.lhs.true10, label %lor.rhs, !dbg !6999

land.lhs.true10:                                  ; preds = %land.lhs.true
  %13 = load i8**, i8*** %mangled.addr, align 8, !dbg !7000
  %14 = load i8*, i8** %13, align 8, !dbg !7001
  %15 = load i8, i8* %14, align 1, !dbg !7002
  %conv11 = sext i8 %15 to i32, !dbg !7002
  %cmp12 = icmp ne i32 %conv11, 101, !dbg !7003
  br i1 %cmp12, label %lor.end, label %lor.rhs, !dbg !7004

lor.rhs:                                          ; preds = %land.lhs.true10, %land.lhs.true, %while.cond
  %16 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7005
  %nrepeats = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %16, i32 0, i32 20, !dbg !7006
  %17 = load i32, i32* %nrepeats, align 8, !dbg !7006
  %cmp14 = icmp sgt i32 %17, 0, !dbg !7007
  br label %lor.end, !dbg !7004

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true10
  %18 = phi i1 [ true, %land.lhs.true10 ], [ %cmp14, %lor.rhs ]
  br i1 %18, label %while.body, label %while.end126, !dbg !6989

while.body:                                       ; preds = %lor.end
  %19 = load i8**, i8*** %mangled.addr, align 8, !dbg !7008
  %20 = load i8*, i8** %19, align 8, !dbg !7011
  %21 = load i8, i8* %20, align 1, !dbg !7012
  %conv16 = sext i8 %21 to i32, !dbg !7012
  %cmp17 = icmp eq i32 %conv16, 78, !dbg !7013
  br i1 %cmp17, label %if.then22, label %lor.lhs.false, !dbg !7014

lor.lhs.false:                                    ; preds = %while.body
  %22 = load i8**, i8*** %mangled.addr, align 8, !dbg !7015
  %23 = load i8*, i8** %22, align 8, !dbg !7016
  %24 = load i8, i8* %23, align 1, !dbg !7017
  %conv19 = sext i8 %24 to i32, !dbg !7017
  %cmp20 = icmp eq i32 %conv19, 84, !dbg !7018
  br i1 %cmp20, label %if.then22, label %if.else108, !dbg !7019

if.then22:                                        ; preds = %lor.lhs.false, %while.body
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !7020
  %26 = load i8*, i8** %25, align 8, !dbg !7022
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1, !dbg !7022
  store i8* %incdec.ptr, i8** %25, align 8, !dbg !7022
  %27 = load i8, i8* %26, align 1, !dbg !7023
  store i8 %27, i8* %temptype, align 1, !dbg !7024
  %28 = load i8, i8* %temptype, align 1, !dbg !7025
  %conv23 = sext i8 %28 to i32, !dbg !7025
  %cmp24 = icmp eq i32 %conv23, 78, !dbg !7027
  br i1 %cmp24, label %if.then26, label %if.else, !dbg !7028

if.then26:                                        ; preds = %if.then22
  %29 = load i8**, i8*** %mangled.addr, align 8, !dbg !7029
  %call = call i32 @get_count(i8** %29, i32* %r), !dbg !7032
  %tobool27 = icmp ne i32 %call, 0, !dbg !7032
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !7033

if.then28:                                        ; preds = %if.then26
  store i32 0, i32* %retval, align 4, !dbg !7034
  br label %return, !dbg !7034

if.end29:                                         ; preds = %if.then26
  br label %if.end30, !dbg !7036

if.else:                                          ; preds = %if.then22
  store i32 1, i32* %r, align 4, !dbg !7037
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.end29
  %30 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7039
  %options31 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %30, i32 0, i32 0, !dbg !7039
  %31 = load i32, i32* %options31, align 8, !dbg !7039
  %and32 = and i32 %31, 4096, !dbg !7039
  %tobool33 = icmp ne i32 %and32, 0, !dbg !7039
  br i1 %tobool33, label %land.lhs.true42, label %lor.lhs.false34, !dbg !7041

lor.lhs.false34:                                  ; preds = %if.end30
  %32 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7042
  %options35 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %32, i32 0, i32 0, !dbg !7042
  %33 = load i32, i32* %options35, align 8, !dbg !7042
  %and36 = and i32 %33, 2048, !dbg !7042
  %tobool37 = icmp ne i32 %and36, 0, !dbg !7042
  br i1 %tobool37, label %land.lhs.true42, label %lor.lhs.false38, !dbg !7043

lor.lhs.false38:                                  ; preds = %lor.lhs.false34
  %34 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7044
  %options39 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %34, i32 0, i32 0, !dbg !7044
  %35 = load i32, i32* %options39, align 8, !dbg !7044
  %and40 = and i32 %35, 8192, !dbg !7044
  %tobool41 = icmp ne i32 %and40, 0, !dbg !7044
  br i1 %tobool41, label %land.lhs.true42, label %if.else51, !dbg !7045

land.lhs.true42:                                  ; preds = %lor.lhs.false38, %lor.lhs.false34, %if.end30
  %36 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7046
  %ntypes = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %36, i32 0, i32 8, !dbg !7047
  %37 = load i32, i32* %ntypes, align 8, !dbg !7047
  %cmp43 = icmp sge i32 %37, 10, !dbg !7048
  br i1 %cmp43, label %if.then45, label %if.else51, !dbg !7049

if.then45:                                        ; preds = %land.lhs.true42
  %38 = load i8**, i8*** %mangled.addr, align 8, !dbg !7050
  %call46 = call i32 @consume_count(i8** %38), !dbg !7053
  store i32 %call46, i32* %t, align 4, !dbg !7054
  %cmp47 = icmp sle i32 %call46, 0, !dbg !7055
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !7056

if.then49:                                        ; preds = %if.then45
  store i32 0, i32* %retval, align 4, !dbg !7057
  br label %return, !dbg !7057

if.end50:                                         ; preds = %if.then45
  br label %if.end56, !dbg !7059

if.else51:                                        ; preds = %land.lhs.true42, %lor.lhs.false38
  %39 = load i8**, i8*** %mangled.addr, align 8, !dbg !7060
  %call52 = call i32 @get_count(i8** %39, i32* %t), !dbg !7063
  %tobool53 = icmp ne i32 %call52, 0, !dbg !7063
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !7064

if.then54:                                        ; preds = %if.else51
  store i32 0, i32* %retval, align 4, !dbg !7065
  br label %return, !dbg !7065

if.end55:                                         ; preds = %if.else51
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end50
  %40 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7067
  %options57 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %40, i32 0, i32 0, !dbg !7067
  %41 = load i32, i32* %options57, align 8, !dbg !7067
  %and58 = and i32 %41, 1024, !dbg !7067
  %tobool59 = icmp ne i32 %and58, 0, !dbg !7067
  br i1 %tobool59, label %if.then72, label %lor.lhs.false60, !dbg !7069

lor.lhs.false60:                                  ; preds = %if.end56
  %42 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7070
  %options61 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %42, i32 0, i32 0, !dbg !7070
  %43 = load i32, i32* %options61, align 8, !dbg !7070
  %and62 = and i32 %43, 2048, !dbg !7070
  %tobool63 = icmp ne i32 %and62, 0, !dbg !7070
  br i1 %tobool63, label %if.then72, label %lor.lhs.false64, !dbg !7071

lor.lhs.false64:                                  ; preds = %lor.lhs.false60
  %44 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7072
  %options65 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %44, i32 0, i32 0, !dbg !7072
  %45 = load i32, i32* %options65, align 8, !dbg !7072
  %and66 = and i32 %45, 4096, !dbg !7072
  %tobool67 = icmp ne i32 %and66, 0, !dbg !7072
  br i1 %tobool67, label %if.then72, label %lor.lhs.false68, !dbg !7073

lor.lhs.false68:                                  ; preds = %lor.lhs.false64
  %46 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7074
  %options69 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %46, i32 0, i32 0, !dbg !7074
  %47 = load i32, i32* %options69, align 8, !dbg !7074
  %and70 = and i32 %47, 8192, !dbg !7074
  %tobool71 = icmp ne i32 %and70, 0, !dbg !7074
  br i1 %tobool71, label %if.then72, label %if.end73, !dbg !7075

if.then72:                                        ; preds = %lor.lhs.false68, %lor.lhs.false64, %lor.lhs.false60, %if.end56
  %48 = load i32, i32* %t, align 4, !dbg !7076
  %dec = add nsw i32 %48, -1, !dbg !7076
  store i32 %dec, i32* %t, align 4, !dbg !7076
  br label %if.end73, !dbg !7078

if.end73:                                         ; preds = %if.then72, %lor.lhs.false68
  %49 = load i32, i32* %t, align 4, !dbg !7079
  %cmp74 = icmp slt i32 %49, 0, !dbg !7081
  br i1 %cmp74, label %if.then80, label %lor.lhs.false76, !dbg !7082

lor.lhs.false76:                                  ; preds = %if.end73
  %50 = load i32, i32* %t, align 4, !dbg !7083
  %51 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7084
  %ntypes77 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %51, i32 0, i32 8, !dbg !7085
  %52 = load i32, i32* %ntypes77, align 8, !dbg !7085
  %cmp78 = icmp sge i32 %50, %52, !dbg !7086
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !7087

if.then80:                                        ; preds = %lor.lhs.false76, %if.end73
  store i32 0, i32* %retval, align 4, !dbg !7088
  br label %return, !dbg !7088

if.end81:                                         ; preds = %lor.lhs.false76
  br label %while.cond82, !dbg !7090

while.cond82:                                     ; preds = %if.end107, %if.end81
  %53 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7091
  %nrepeats83 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %53, i32 0, i32 20, !dbg !7092
  %54 = load i32, i32* %nrepeats83, align 8, !dbg !7092
  %cmp84 = icmp sgt i32 %54, 0, !dbg !7093
  br i1 %cmp84, label %lor.end90, label %lor.rhs86, !dbg !7094

lor.rhs86:                                        ; preds = %while.cond82
  %55 = load i32, i32* %r, align 4, !dbg !7095
  %dec87 = add nsw i32 %55, -1, !dbg !7095
  store i32 %dec87, i32* %r, align 4, !dbg !7095
  %cmp88 = icmp sge i32 %dec87, 0, !dbg !7096
  br label %lor.end90, !dbg !7094

lor.end90:                                        ; preds = %lor.rhs86, %while.cond82
  %56 = phi i1 [ true, %while.cond82 ], [ %cmp88, %lor.rhs86 ]
  br i1 %56, label %while.body91, label %while.end, !dbg !7090

while.body91:                                     ; preds = %lor.end90
  %57 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7097
  %typevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %57, i32 0, i32 1, !dbg !7099
  %58 = load i8**, i8*** %typevec, align 8, !dbg !7099
  %59 = load i32, i32* %t, align 4, !dbg !7100
  %idxprom = sext i32 %59 to i64, !dbg !7097
  %arrayidx = getelementptr inbounds i8*, i8** %58, i64 %idxprom, !dbg !7097
  %60 = load i8*, i8** %arrayidx, align 8, !dbg !7097
  store i8* %60, i8** %tem, align 8, !dbg !7101
  %61 = load i32, i32* %need_comma, align 4, !dbg !7102
  %tobool92 = icmp ne i32 %61, 0, !dbg !7102
  br i1 %tobool92, label %land.lhs.true93, label %if.end98, !dbg !7104

land.lhs.true93:                                  ; preds = %while.body91
  %62 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7105
  %options94 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %62, i32 0, i32 0, !dbg !7105
  %63 = load i32, i32* %options94, align 8, !dbg !7105
  %and95 = and i32 %63, 1, !dbg !7105
  %tobool96 = icmp ne i32 %and95, 0, !dbg !7105
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !7106

if.then97:                                        ; preds = %land.lhs.true93
  %64 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7107
  call void @string_append(%struct.string* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0)), !dbg !7109
  br label %if.end98, !dbg !7110

if.end98:                                         ; preds = %if.then97, %land.lhs.true93, %while.body91
  %65 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7111
  %call99 = call i32 @do_arg(%struct.work_stuff* %65, i8** %tem, %struct.string* %arg), !dbg !7113
  %tobool100 = icmp ne i32 %call99, 0, !dbg !7113
  br i1 %tobool100, label %if.end102, label %if.then101, !dbg !7114

if.then101:                                       ; preds = %if.end98
  store i32 0, i32* %retval, align 4, !dbg !7115
  br label %return, !dbg !7115

if.end102:                                        ; preds = %if.end98
  %66 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7117
  %options103 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %66, i32 0, i32 0, !dbg !7117
  %67 = load i32, i32* %options103, align 8, !dbg !7117
  %and104 = and i32 %67, 1, !dbg !7117
  %tobool105 = icmp ne i32 %and104, 0, !dbg !7117
  br i1 %tobool105, label %if.then106, label %if.end107, !dbg !7119

if.then106:                                       ; preds = %if.end102
  %68 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7120
  call void @string_appends(%struct.string* %68, %struct.string* %arg), !dbg !7122
  br label %if.end107, !dbg !7123

if.end107:                                        ; preds = %if.then106, %if.end102
  call void @string_delete(%struct.string* %arg), !dbg !7124
  store i32 1, i32* %need_comma, align 4, !dbg !7125
  br label %while.cond82, !dbg !7090, !llvm.loop !7126

while.end:                                        ; preds = %lor.end90
  br label %if.end125, !dbg !7128

if.else108:                                       ; preds = %lor.lhs.false
  %69 = load i32, i32* %need_comma, align 4, !dbg !7129
  %tobool109 = icmp ne i32 %69, 0, !dbg !7129
  br i1 %tobool109, label %land.lhs.true110, label %if.end115, !dbg !7132

land.lhs.true110:                                 ; preds = %if.else108
  %70 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7133
  %options111 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %70, i32 0, i32 0, !dbg !7133
  %71 = load i32, i32* %options111, align 8, !dbg !7133
  %and112 = and i32 %71, 1, !dbg !7133
  %tobool113 = icmp ne i32 %and112, 0, !dbg !7133
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !7134

if.then114:                                       ; preds = %land.lhs.true110
  %72 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7135
  call void @string_append(%struct.string* %72, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0)), !dbg !7136
  br label %if.end115, !dbg !7136

if.end115:                                        ; preds = %if.then114, %land.lhs.true110, %if.else108
  %73 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7137
  %74 = load i8**, i8*** %mangled.addr, align 8, !dbg !7139
  %call116 = call i32 @do_arg(%struct.work_stuff* %73, i8** %74, %struct.string* %arg), !dbg !7140
  %tobool117 = icmp ne i32 %call116, 0, !dbg !7140
  br i1 %tobool117, label %if.end119, label %if.then118, !dbg !7141

if.then118:                                       ; preds = %if.end115
  store i32 0, i32* %retval, align 4, !dbg !7142
  br label %return, !dbg !7142

if.end119:                                        ; preds = %if.end115
  %75 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7143
  %options120 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %75, i32 0, i32 0, !dbg !7143
  %76 = load i32, i32* %options120, align 8, !dbg !7143
  %and121 = and i32 %76, 1, !dbg !7143
  %tobool122 = icmp ne i32 %and121, 0, !dbg !7143
  br i1 %tobool122, label %if.then123, label %if.end124, !dbg !7145

if.then123:                                       ; preds = %if.end119
  %77 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7146
  call void @string_appends(%struct.string* %77, %struct.string* %arg), !dbg !7147
  br label %if.end124, !dbg !7147

if.end124:                                        ; preds = %if.then123, %if.end119
  call void @string_delete(%struct.string* %arg), !dbg !7148
  store i32 1, i32* %need_comma, align 4, !dbg !7149
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %while.end
  br label %while.cond, !dbg !6989, !llvm.loop !7150

while.end126:                                     ; preds = %lor.end
  %78 = load i8**, i8*** %mangled.addr, align 8, !dbg !7152
  %79 = load i8*, i8** %78, align 8, !dbg !7154
  %80 = load i8, i8* %79, align 1, !dbg !7155
  %conv127 = sext i8 %80 to i32, !dbg !7155
  %cmp128 = icmp eq i32 %conv127, 101, !dbg !7156
  br i1 %cmp128, label %if.then130, label %if.end140, !dbg !7157

if.then130:                                       ; preds = %while.end126
  %81 = load i8**, i8*** %mangled.addr, align 8, !dbg !7158
  %82 = load i8*, i8** %81, align 8, !dbg !7160
  %incdec.ptr131 = getelementptr inbounds i8, i8* %82, i32 1, !dbg !7160
  store i8* %incdec.ptr131, i8** %81, align 8, !dbg !7160
  %83 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7161
  %options132 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %83, i32 0, i32 0, !dbg !7161
  %84 = load i32, i32* %options132, align 8, !dbg !7161
  %and133 = and i32 %84, 1, !dbg !7161
  %tobool134 = icmp ne i32 %and133, 0, !dbg !7161
  br i1 %tobool134, label %if.then135, label %if.end139, !dbg !7163

if.then135:                                       ; preds = %if.then130
  %85 = load i32, i32* %need_comma, align 4, !dbg !7164
  %tobool136 = icmp ne i32 %85, 0, !dbg !7164
  br i1 %tobool136, label %if.then137, label %if.end138, !dbg !7167

if.then137:                                       ; preds = %if.then135
  %86 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7168
  call void @string_append(%struct.string* %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.217, i64 0, i64 0)), !dbg !7170
  br label %if.end138, !dbg !7171

if.end138:                                        ; preds = %if.then137, %if.then135
  %87 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7172
  call void @string_append(%struct.string* %87, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229, i64 0, i64 0)), !dbg !7173
  br label %if.end139, !dbg !7174

if.end139:                                        ; preds = %if.end138, %if.then130
  br label %if.end140, !dbg !7175

if.end140:                                        ; preds = %if.end139, %while.end126
  %88 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7176
  %options141 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %88, i32 0, i32 0, !dbg !7176
  %89 = load i32, i32* %options141, align 8, !dbg !7176
  %and142 = and i32 %89, 1, !dbg !7176
  %tobool143 = icmp ne i32 %and142, 0, !dbg !7176
  br i1 %tobool143, label %if.then144, label %if.end145, !dbg !7178

if.then144:                                       ; preds = %if.end140
  %90 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7179
  call void @string_append(%struct.string* %90, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i64 0, i64 0)), !dbg !7181
  br label %if.end145, !dbg !7182

if.end145:                                        ; preds = %if.then144, %if.end140
  store i32 1, i32* %retval, align 4, !dbg !7183
  br label %return, !dbg !7183

return:                                           ; preds = %if.end145, %if.then118, %if.then101, %if.then80, %if.then54, %if.then49, %if.then28
  %91 = load i32, i32* %retval, align 4, !dbg !7184
  ret i32 %91, !dbg !7184
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @qualifier_string(i32 %type_quals) #0 !dbg !7185 {
entry:
  %retval = alloca i8*, align 8
  %type_quals.addr = alloca i32, align 4
  store i32 %type_quals, i32* %type_quals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type_quals.addr, metadata !7188, metadata !DIExpression()), !dbg !7189
  %0 = load i32, i32* %type_quals.addr, align 4, !dbg !7190
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 4, label %sw.bb3
    i32 3, label %sw.bb4
    i32 5, label %sw.bb5
    i32 6, label %sw.bb6
    i32 7, label %sw.bb7
  ], !dbg !7191

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.178, i64 0, i64 0), i8** %retval, align 8, !dbg !7192
  br label %return, !dbg !7192

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.230, i64 0, i64 0), i8** %retval, align 8, !dbg !7194
  br label %return, !dbg !7194

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.231, i64 0, i64 0), i8** %retval, align 8, !dbg !7195
  br label %return, !dbg !7195

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.232, i64 0, i64 0), i8** %retval, align 8, !dbg !7196
  br label %return, !dbg !7196

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.233, i64 0, i64 0), i8** %retval, align 8, !dbg !7197
  br label %return, !dbg !7197

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.234, i64 0, i64 0), i8** %retval, align 8, !dbg !7198
  br label %return, !dbg !7198

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.235, i64 0, i64 0), i8** %retval, align 8, !dbg !7199
  br label %return, !dbg !7199

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.236, i64 0, i64 0), i8** %retval, align 8, !dbg !7200
  br label %return, !dbg !7200

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7201

sw.epilog:                                        ; preds = %sw.default
  call void @abort() #5, !dbg !7202
  unreachable, !dbg !7202

return:                                           ; preds = %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8, !dbg !7203
  ret i8* %1, !dbg !7203
}

; Function Attrs: noreturn
declare dso_local void @abort() #4

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_class_name(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !7204 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %n = alloca i32, align 4
  %success = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !7205, metadata !DIExpression()), !dbg !7206
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !7207, metadata !DIExpression()), !dbg !7208
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7211, metadata !DIExpression()), !dbg !7212
  call void @llvm.dbg.declare(metadata i32* %success, metadata !7213, metadata !DIExpression()), !dbg !7214
  store i32 0, i32* %success, align 4, !dbg !7214
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !7215
  %call = call i32 @consume_count(i8** %0), !dbg !7216
  store i32 %call, i32* %n, align 4, !dbg !7217
  %1 = load i32, i32* %n, align 4, !dbg !7218
  %cmp = icmp eq i32 %1, -1, !dbg !7220
  br i1 %cmp, label %if.then, label %if.end, !dbg !7221

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7222
  br label %return, !dbg !7222

if.end:                                           ; preds = %entry
  %2 = load i8**, i8*** %mangled.addr, align 8, !dbg !7223
  %3 = load i8*, i8** %2, align 8, !dbg !7225
  %call1 = call i64 @strlen(i8* %3), !dbg !7226
  %conv = trunc i64 %call1 to i32, !dbg !7227
  %4 = load i32, i32* %n, align 4, !dbg !7228
  %cmp2 = icmp sge i32 %conv, %4, !dbg !7229
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !7230

if.then4:                                         ; preds = %if.end
  %5 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7231
  %6 = load i8**, i8*** %mangled.addr, align 8, !dbg !7233
  %7 = load i32, i32* %n, align 4, !dbg !7234
  %8 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7235
  call void @demangle_arm_hp_template(%struct.work_stuff* %5, i8** %6, i32 %7, %struct.string* %8), !dbg !7236
  store i32 1, i32* %success, align 4, !dbg !7237
  br label %if.end5, !dbg !7238

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load i32, i32* %success, align 4, !dbg !7239
  store i32 %9, i32* %retval, align 4, !dbg !7240
  br label %return, !dbg !7240

return:                                           ; preds = %if.end5, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !7241
  ret i32 %10, !dbg !7241
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @do_arg(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result) #0 !dbg !7242 {
entry:
  %retval = alloca i32, align 4
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %start = alloca i8*, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !7243, metadata !DIExpression()), !dbg !7244
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !7245, metadata !DIExpression()), !dbg !7246
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !7247, metadata !DIExpression()), !dbg !7248
  call void @llvm.dbg.declare(metadata i8** %start, metadata !7249, metadata !DIExpression()), !dbg !7250
  %0 = load i8**, i8*** %mangled.addr, align 8, !dbg !7251
  %1 = load i8*, i8** %0, align 8, !dbg !7252
  store i8* %1, i8** %start, align 8, !dbg !7250
  %2 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7253
  call void @string_init(%struct.string* %2), !dbg !7254
  %3 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7255
  %nrepeats = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %3, i32 0, i32 20, !dbg !7257
  %4 = load i32, i32* %nrepeats, align 8, !dbg !7257
  %cmp = icmp sgt i32 %4, 0, !dbg !7258
  br i1 %cmp, label %if.then, label %if.end5, !dbg !7259

if.then:                                          ; preds = %entry
  %5 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7260
  %nrepeats1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %5, i32 0, i32 20, !dbg !7262
  %6 = load i32, i32* %nrepeats1, align 8, !dbg !7263
  %dec = add nsw i32 %6, -1, !dbg !7263
  store i32 %dec, i32* %nrepeats1, align 8, !dbg !7263
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7264
  %previous_argument = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 19, !dbg !7266
  %8 = load %struct.string*, %struct.string** %previous_argument, align 8, !dbg !7266
  %cmp2 = icmp eq %struct.string* %8, null, !dbg !7267
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !7268

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !7269
  br label %return, !dbg !7269

if.end:                                           ; preds = %if.then
  %9 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7270
  %10 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7271
  %previous_argument4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %10, i32 0, i32 19, !dbg !7272
  %11 = load %struct.string*, %struct.string** %previous_argument4, align 8, !dbg !7272
  call void @string_appends(%struct.string* %9, %struct.string* %11), !dbg !7273
  store i32 1, i32* %retval, align 4, !dbg !7274
  br label %return, !dbg !7274

if.end5:                                          ; preds = %entry
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !7275
  %13 = load i8*, i8** %12, align 8, !dbg !7277
  %14 = load i8, i8* %13, align 1, !dbg !7278
  %conv = sext i8 %14 to i32, !dbg !7278
  %cmp6 = icmp eq i32 %conv, 110, !dbg !7279
  br i1 %cmp6, label %if.then8, label %if.end27, !dbg !7280

if.then8:                                         ; preds = %if.end5
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !7281
  %16 = load i8*, i8** %15, align 8, !dbg !7283
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1, !dbg !7283
  store i8* %incdec.ptr, i8** %15, align 8, !dbg !7283
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !7284
  %call = call i32 @consume_count(i8** %17), !dbg !7285
  %18 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7286
  %nrepeats9 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %18, i32 0, i32 20, !dbg !7287
  store i32 %call, i32* %nrepeats9, align 8, !dbg !7288
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7289
  %nrepeats10 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 20, !dbg !7291
  %20 = load i32, i32* %nrepeats10, align 8, !dbg !7291
  %cmp11 = icmp sle i32 %20, 0, !dbg !7292
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !7293

if.then13:                                        ; preds = %if.then8
  store i32 0, i32* %retval, align 4, !dbg !7294
  br label %return, !dbg !7294

if.end14:                                         ; preds = %if.then8
  %21 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7295
  %nrepeats15 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %21, i32 0, i32 20, !dbg !7297
  %22 = load i32, i32* %nrepeats15, align 8, !dbg !7297
  %cmp16 = icmp sgt i32 %22, 9, !dbg !7298
  br i1 %cmp16, label %if.then18, label %if.end25, !dbg !7299

if.then18:                                        ; preds = %if.end14
  %23 = load i8**, i8*** %mangled.addr, align 8, !dbg !7300
  %24 = load i8*, i8** %23, align 8, !dbg !7303
  %25 = load i8, i8* %24, align 1, !dbg !7304
  %conv19 = sext i8 %25 to i32, !dbg !7304
  %cmp20 = icmp ne i32 %conv19, 95, !dbg !7305
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !7306

if.then22:                                        ; preds = %if.then18
  store i32 0, i32* %retval, align 4, !dbg !7307
  br label %return, !dbg !7307

if.else:                                          ; preds = %if.then18
  %26 = load i8**, i8*** %mangled.addr, align 8, !dbg !7308
  %27 = load i8*, i8** %26, align 8, !dbg !7309
  %incdec.ptr23 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !7309
  store i8* %incdec.ptr23, i8** %26, align 8, !dbg !7309
  br label %if.end24

if.end24:                                         ; preds = %if.else
  br label %if.end25, !dbg !7310

if.end25:                                         ; preds = %if.end24, %if.end14
  %28 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7311
  %29 = load i8**, i8*** %mangled.addr, align 8, !dbg !7312
  %30 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7313
  %call26 = call i32 @do_arg(%struct.work_stuff* %28, i8** %29, %struct.string* %30), !dbg !7314
  store i32 %call26, i32* %retval, align 4, !dbg !7315
  br label %return, !dbg !7315

if.end27:                                         ; preds = %if.end5
  %31 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7316
  %previous_argument28 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %31, i32 0, i32 19, !dbg !7318
  %32 = load %struct.string*, %struct.string** %previous_argument28, align 8, !dbg !7318
  %tobool = icmp ne %struct.string* %32, null, !dbg !7316
  br i1 %tobool, label %if.then29, label %if.else31, !dbg !7319

if.then29:                                        ; preds = %if.end27
  %33 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7320
  %previous_argument30 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %33, i32 0, i32 19, !dbg !7321
  %34 = load %struct.string*, %struct.string** %previous_argument30, align 8, !dbg !7321
  call void @string_delete(%struct.string* %34), !dbg !7322
  br label %if.end34, !dbg !7322

if.else31:                                        ; preds = %if.end27
  %call32 = call i8* @xmalloc(i64 24), !dbg !7323
  %35 = bitcast i8* %call32 to %struct.string*, !dbg !7323
  %36 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7324
  %previous_argument33 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %36, i32 0, i32 19, !dbg !7325
  store %struct.string* %35, %struct.string** %previous_argument33, align 8, !dbg !7326
  br label %if.end34

if.end34:                                         ; preds = %if.else31, %if.then29
  %37 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7327
  %38 = load i8**, i8*** %mangled.addr, align 8, !dbg !7329
  %39 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7330
  %previous_argument35 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %39, i32 0, i32 19, !dbg !7331
  %40 = load %struct.string*, %struct.string** %previous_argument35, align 8, !dbg !7331
  %call36 = call i32 @do_type(%struct.work_stuff* %37, i8** %38, %struct.string* %40), !dbg !7332
  %tobool37 = icmp ne i32 %call36, 0, !dbg !7332
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !7333

if.then38:                                        ; preds = %if.end34
  store i32 0, i32* %retval, align 4, !dbg !7334
  br label %return, !dbg !7334

if.end39:                                         ; preds = %if.end34
  %41 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7335
  %42 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7336
  %previous_argument40 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %42, i32 0, i32 19, !dbg !7337
  %43 = load %struct.string*, %struct.string** %previous_argument40, align 8, !dbg !7337
  call void @string_appends(%struct.string* %41, %struct.string* %43), !dbg !7338
  %44 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7339
  %45 = load i8*, i8** %start, align 8, !dbg !7340
  %46 = load i8**, i8*** %mangled.addr, align 8, !dbg !7341
  %47 = load i8*, i8** %46, align 8, !dbg !7342
  %48 = load i8*, i8** %start, align 8, !dbg !7343
  %sub.ptr.lhs.cast = ptrtoint i8* %47 to i64, !dbg !7344
  %sub.ptr.rhs.cast = ptrtoint i8* %48 to i64, !dbg !7344
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !7344
  %conv41 = trunc i64 %sub.ptr.sub to i32, !dbg !7342
  call void @remember_type(%struct.work_stuff* %44, i8* %45, i32 %conv41), !dbg !7345
  store i32 1, i32* %retval, align 4, !dbg !7346
  br label %return, !dbg !7346

return:                                           ; preds = %if.end39, %if.then38, %if.end25, %if.then22, %if.then13, %if.end, %if.then3
  %49 = load i32, i32* %retval, align 4, !dbg !7347
  ret i32 %49, !dbg !7347
}

; Function Attrs: noinline nounwind uwtable
define internal void @forget_B_and_K_types(%struct.work_stuff* %work) #0 !dbg !7348 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %i = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7351, metadata !DIExpression()), !dbg !7352
  br label %while.cond, !dbg !7353

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7354
  %numk = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 4, !dbg !7355
  %1 = load i32, i32* %numk, align 8, !dbg !7355
  %cmp = icmp sgt i32 %1, 0, !dbg !7356
  br i1 %cmp, label %while.body, label %while.end, !dbg !7353

while.body:                                       ; preds = %while.cond
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7357
  %numk1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 4, !dbg !7359
  %3 = load i32, i32* %numk1, align 8, !dbg !7360
  %dec = add nsw i32 %3, -1, !dbg !7360
  store i32 %dec, i32* %numk1, align 8, !dbg !7360
  store i32 %dec, i32* %i, align 4, !dbg !7361
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7362
  %ktypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 2, !dbg !7364
  %5 = load i8**, i8*** %ktypevec, align 8, !dbg !7364
  %6 = load i32, i32* %i, align 4, !dbg !7365
  %idxprom = sext i32 %6 to i64, !dbg !7362
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %idxprom, !dbg !7362
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !7362
  %cmp2 = icmp ne i8* %7, null, !dbg !7366
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7367

if.then:                                          ; preds = %while.body
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7368
  %ktypevec3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %8, i32 0, i32 2, !dbg !7370
  %9 = load i8**, i8*** %ktypevec3, align 8, !dbg !7370
  %10 = load i32, i32* %i, align 4, !dbg !7371
  %idxprom4 = sext i32 %10 to i64, !dbg !7368
  %arrayidx5 = getelementptr inbounds i8*, i8** %9, i64 %idxprom4, !dbg !7368
  %11 = load i8*, i8** %arrayidx5, align 8, !dbg !7368
  call void @free(i8* %11), !dbg !7372
  %12 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7373
  %ktypevec6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %12, i32 0, i32 2, !dbg !7374
  %13 = load i8**, i8*** %ktypevec6, align 8, !dbg !7374
  %14 = load i32, i32* %i, align 4, !dbg !7375
  %idxprom7 = sext i32 %14 to i64, !dbg !7373
  %arrayidx8 = getelementptr inbounds i8*, i8** %13, i64 %idxprom7, !dbg !7373
  store i8* null, i8** %arrayidx8, align 8, !dbg !7376
  br label %if.end, !dbg !7377

if.end:                                           ; preds = %if.then, %while.body
  br label %while.cond, !dbg !7353, !llvm.loop !7378

while.end:                                        ; preds = %while.cond
  br label %while.cond9, !dbg !7380

while.cond9:                                      ; preds = %if.end24, %while.end
  %15 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7381
  %numb = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %15, i32 0, i32 5, !dbg !7382
  %16 = load i32, i32* %numb, align 4, !dbg !7382
  %cmp10 = icmp sgt i32 %16, 0, !dbg !7383
  br i1 %cmp10, label %while.body11, label %while.end25, !dbg !7380

while.body11:                                     ; preds = %while.cond9
  %17 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7384
  %numb12 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %17, i32 0, i32 5, !dbg !7386
  %18 = load i32, i32* %numb12, align 4, !dbg !7387
  %dec13 = add nsw i32 %18, -1, !dbg !7387
  store i32 %dec13, i32* %numb12, align 4, !dbg !7387
  store i32 %dec13, i32* %i, align 4, !dbg !7388
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7389
  %btypevec = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 3, !dbg !7391
  %20 = load i8**, i8*** %btypevec, align 8, !dbg !7391
  %21 = load i32, i32* %i, align 4, !dbg !7392
  %idxprom14 = sext i32 %21 to i64, !dbg !7389
  %arrayidx15 = getelementptr inbounds i8*, i8** %20, i64 %idxprom14, !dbg !7389
  %22 = load i8*, i8** %arrayidx15, align 8, !dbg !7389
  %cmp16 = icmp ne i8* %22, null, !dbg !7393
  br i1 %cmp16, label %if.then17, label %if.end24, !dbg !7394

if.then17:                                        ; preds = %while.body11
  %23 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7395
  %btypevec18 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %23, i32 0, i32 3, !dbg !7397
  %24 = load i8**, i8*** %btypevec18, align 8, !dbg !7397
  %25 = load i32, i32* %i, align 4, !dbg !7398
  %idxprom19 = sext i32 %25 to i64, !dbg !7395
  %arrayidx20 = getelementptr inbounds i8*, i8** %24, i64 %idxprom19, !dbg !7395
  %26 = load i8*, i8** %arrayidx20, align 8, !dbg !7395
  call void @free(i8* %26), !dbg !7399
  %27 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7400
  %btypevec21 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %27, i32 0, i32 3, !dbg !7401
  %28 = load i8**, i8*** %btypevec21, align 8, !dbg !7401
  %29 = load i32, i32* %i, align 4, !dbg !7402
  %idxprom22 = sext i32 %29 to i64, !dbg !7400
  %arrayidx23 = getelementptr inbounds i8*, i8** %28, i64 %idxprom22, !dbg !7400
  store i8* null, i8** %arrayidx23, align 8, !dbg !7403
  br label %if.end24, !dbg !7404

if.end24:                                         ; preds = %if.then17, %while.body11
  br label %while.cond9, !dbg !7380, !llvm.loop !7405

while.end25:                                      ; preds = %while.cond9
  ret void, !dbg !7407
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_nested_args(%struct.work_stuff* %work, i8** %mangled, %struct.string* %declp) #0 !dbg !7408 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %declp.addr = alloca %struct.string*, align 8
  %saved_previous_argument = alloca %struct.string*, align 8
  %result = alloca i32, align 4
  %saved_nrepeats = alloca i32, align 4
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !7409, metadata !DIExpression()), !dbg !7410
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !7411, metadata !DIExpression()), !dbg !7412
  store %struct.string* %declp, %struct.string** %declp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %declp.addr, metadata !7413, metadata !DIExpression()), !dbg !7414
  call void @llvm.dbg.declare(metadata %struct.string** %saved_previous_argument, metadata !7415, metadata !DIExpression()), !dbg !7416
  call void @llvm.dbg.declare(metadata i32* %result, metadata !7417, metadata !DIExpression()), !dbg !7418
  call void @llvm.dbg.declare(metadata i32* %saved_nrepeats, metadata !7419, metadata !DIExpression()), !dbg !7420
  %0 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7421
  %forgetting_types = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %0, i32 0, i32 18, !dbg !7422
  %1 = load i32, i32* %forgetting_types, align 4, !dbg !7423
  %inc = add nsw i32 %1, 1, !dbg !7423
  store i32 %inc, i32* %forgetting_types, align 4, !dbg !7423
  %2 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7424
  %previous_argument = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %2, i32 0, i32 19, !dbg !7425
  %3 = load %struct.string*, %struct.string** %previous_argument, align 8, !dbg !7425
  store %struct.string* %3, %struct.string** %saved_previous_argument, align 8, !dbg !7426
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7427
  %nrepeats = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 20, !dbg !7428
  %5 = load i32, i32* %nrepeats, align 8, !dbg !7428
  store i32 %5, i32* %saved_nrepeats, align 4, !dbg !7429
  %6 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7430
  %previous_argument1 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %6, i32 0, i32 19, !dbg !7431
  store %struct.string* null, %struct.string** %previous_argument1, align 8, !dbg !7432
  %7 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7433
  %nrepeats2 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %7, i32 0, i32 20, !dbg !7434
  store i32 0, i32* %nrepeats2, align 8, !dbg !7435
  %8 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7436
  %9 = load i8**, i8*** %mangled.addr, align 8, !dbg !7437
  %10 = load %struct.string*, %struct.string** %declp.addr, align 8, !dbg !7438
  %call = call i32 @demangle_args(%struct.work_stuff* %8, i8** %9, %struct.string* %10), !dbg !7439
  store i32 %call, i32* %result, align 4, !dbg !7440
  %11 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7441
  %previous_argument3 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %11, i32 0, i32 19, !dbg !7443
  %12 = load %struct.string*, %struct.string** %previous_argument3, align 8, !dbg !7443
  %tobool = icmp ne %struct.string* %12, null, !dbg !7441
  br i1 %tobool, label %if.then, label %if.end, !dbg !7444

if.then:                                          ; preds = %entry
  %13 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7445
  %previous_argument4 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %13, i32 0, i32 19, !dbg !7447
  %14 = load %struct.string*, %struct.string** %previous_argument4, align 8, !dbg !7447
  call void @string_delete(%struct.string* %14), !dbg !7448
  %15 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7449
  %previous_argument5 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %15, i32 0, i32 19, !dbg !7450
  %16 = load %struct.string*, %struct.string** %previous_argument5, align 8, !dbg !7450
  %17 = bitcast %struct.string* %16 to i8*, !dbg !7451
  call void @free(i8* %17), !dbg !7452
  br label %if.end, !dbg !7453

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.string*, %struct.string** %saved_previous_argument, align 8, !dbg !7454
  %19 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7455
  %previous_argument6 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %19, i32 0, i32 19, !dbg !7456
  store %struct.string* %18, %struct.string** %previous_argument6, align 8, !dbg !7457
  %20 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7458
  %forgetting_types7 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %20, i32 0, i32 18, !dbg !7459
  %21 = load i32, i32* %forgetting_types7, align 4, !dbg !7460
  %dec = add nsw i32 %21, -1, !dbg !7460
  store i32 %dec, i32* %forgetting_types7, align 4, !dbg !7460
  %22 = load i32, i32* %saved_nrepeats, align 4, !dbg !7461
  %23 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7462
  %nrepeats8 = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %23, i32 0, i32 20, !dbg !7463
  store i32 %22, i32* %nrepeats8, align 8, !dbg !7464
  %24 = load i32, i32* %result, align 4, !dbg !7465
  ret i32 %24, !dbg !7466
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @demangle_qualifier(i32 %c) #0 !dbg !7467 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !7468, metadata !DIExpression()), !dbg !7469
  %0 = load i32, i32* %c.addr, align 4, !dbg !7470
  %call = call i32 @code_for_qualifier(i32 %0), !dbg !7471
  %call1 = call i8* @qualifier_string(i32 %call), !dbg !7472
  ret i8* %call1, !dbg !7473
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @demangle_fund_type(%struct.work_stuff* %work, i8** %mangled, %struct.string* %result) #0 !dbg !7474 {
entry:
  %work.addr = alloca %struct.work_stuff*, align 8
  %mangled.addr = alloca i8**, align 8
  %result.addr = alloca %struct.string*, align 8
  %done = alloca i32, align 4
  %success = alloca i32, align 4
  %buf = alloca [37 x i8], align 16
  %dec = alloca i32, align 4
  %tk = alloca i32, align 4
  %i = alloca i32, align 4
  %bindex = alloca i32, align 4
  %btype = alloca %struct.string, align 8
  %btype199 = alloca %struct.string, align 8
  store %struct.work_stuff* %work, %struct.work_stuff** %work.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.work_stuff** %work.addr, metadata !7475, metadata !DIExpression()), !dbg !7476
  store i8** %mangled, i8*** %mangled.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %mangled.addr, metadata !7477, metadata !DIExpression()), !dbg !7478
  store %struct.string* %result, %struct.string** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.string** %result.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  call void @llvm.dbg.declare(metadata i32* %done, metadata !7481, metadata !DIExpression()), !dbg !7482
  store i32 0, i32* %done, align 4, !dbg !7482
  call void @llvm.dbg.declare(metadata i32* %success, metadata !7483, metadata !DIExpression()), !dbg !7484
  store i32 1, i32* %success, align 4, !dbg !7484
  call void @llvm.dbg.declare(metadata [37 x i8]* %buf, metadata !7485, metadata !DIExpression()), !dbg !7489
  call void @llvm.dbg.declare(metadata i32* %dec, metadata !7490, metadata !DIExpression()), !dbg !7491
  store i32 0, i32* %dec, align 4, !dbg !7491
  call void @llvm.dbg.declare(metadata i32* %tk, metadata !7492, metadata !DIExpression()), !dbg !7493
  store i32 3, i32* %tk, align 4, !dbg !7493
  br label %while.cond, !dbg !7494

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i32, i32* %done, align 4, !dbg !7495
  %tobool = icmp ne i32 %0, 0, !dbg !7496
  %lnot = xor i1 %tobool, true, !dbg !7496
  br i1 %lnot, label %while.body, label %while.end, !dbg !7494

while.body:                                       ; preds = %while.cond
  %1 = load i8**, i8*** %mangled.addr, align 8, !dbg !7497
  %2 = load i8*, i8** %1, align 8, !dbg !7499
  %3 = load i8, i8* %2, align 1, !dbg !7500
  %conv = sext i8 %3 to i32, !dbg !7500
  switch i32 %conv, label %sw.default [
    i32 67, label %sw.bb
    i32 86, label %sw.bb
    i32 117, label %sw.bb
    i32 85, label %sw.bb6
    i32 83, label %sw.bb14
    i32 74, label %sw.bb22
  ], !dbg !7501

sw.bb:                                            ; preds = %while.body, %while.body, %while.body
  %4 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7502
  %options = getelementptr inbounds %struct.work_stuff, %struct.work_stuff* %4, i32 0, i32 0, !dbg !7502
  %5 = load i32, i32* %options, align 8, !dbg !7502
  %and = and i32 %5, 2, !dbg !7502
  %tobool1 = icmp ne i32 %and, 0, !dbg !7502
  br i1 %tobool1, label %if.then, label %if.end5, !dbg !7505

if.then:                                          ; preds = %sw.bb
  %6 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7506
  %b = getelementptr inbounds %struct.string, %struct.string* %6, i32 0, i32 0, !dbg !7506
  %7 = load i8*, i8** %b, align 8, !dbg !7506
  %8 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7506
  %p = getelementptr inbounds %struct.string, %struct.string* %8, i32 0, i32 1, !dbg !7506
  %9 = load i8*, i8** %p, align 8, !dbg !7506
  %cmp = icmp eq i8* %7, %9, !dbg !7506
  br i1 %cmp, label %if.end, label %if.then3, !dbg !7509

if.then3:                                         ; preds = %if.then
  %10 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7510
  call void @string_prepend(%struct.string* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7511
  br label %if.end, !dbg !7511

if.end:                                           ; preds = %if.then3, %if.then
  %11 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7512
  %12 = load i8**, i8*** %mangled.addr, align 8, !dbg !7513
  %13 = load i8*, i8** %12, align 8, !dbg !7514
  %14 = load i8, i8* %13, align 1, !dbg !7515
  %conv4 = sext i8 %14 to i32, !dbg !7515
  %call = call i8* @demangle_qualifier(i32 %conv4), !dbg !7516
  call void @string_prepend(%struct.string* %11, i8* %call), !dbg !7517
  br label %if.end5, !dbg !7518

if.end5:                                          ; preds = %if.end, %sw.bb
  %15 = load i8**, i8*** %mangled.addr, align 8, !dbg !7519
  %16 = load i8*, i8** %15, align 8, !dbg !7520
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1, !dbg !7520
  store i8* %incdec.ptr, i8** %15, align 8, !dbg !7520
  br label %sw.epilog, !dbg !7521

sw.bb6:                                           ; preds = %while.body
  %17 = load i8**, i8*** %mangled.addr, align 8, !dbg !7522
  %18 = load i8*, i8** %17, align 8, !dbg !7523
  %incdec.ptr7 = getelementptr inbounds i8, i8* %18, i32 1, !dbg !7523
  store i8* %incdec.ptr7, i8** %17, align 8, !dbg !7523
  %19 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7524
  %b8 = getelementptr inbounds %struct.string, %struct.string* %19, i32 0, i32 0, !dbg !7524
  %20 = load i8*, i8** %b8, align 8, !dbg !7524
  %21 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7524
  %p9 = getelementptr inbounds %struct.string, %struct.string* %21, i32 0, i32 1, !dbg !7524
  %22 = load i8*, i8** %p9, align 8, !dbg !7524
  %cmp10 = icmp eq i8* %20, %22, !dbg !7524
  br i1 %cmp10, label %if.end13, label %if.then12, !dbg !7527

if.then12:                                        ; preds = %sw.bb6
  %23 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7524
  call void @string_append(%struct.string* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7524
  br label %if.end13, !dbg !7524

if.end13:                                         ; preds = %if.then12, %sw.bb6
  %24 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7528
  call void @string_append(%struct.string* %24, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.239, i64 0, i64 0)), !dbg !7529
  br label %sw.epilog, !dbg !7530

sw.bb14:                                          ; preds = %while.body
  %25 = load i8**, i8*** %mangled.addr, align 8, !dbg !7531
  %26 = load i8*, i8** %25, align 8, !dbg !7532
  %incdec.ptr15 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !7532
  store i8* %incdec.ptr15, i8** %25, align 8, !dbg !7532
  %27 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7533
  %b16 = getelementptr inbounds %struct.string, %struct.string* %27, i32 0, i32 0, !dbg !7533
  %28 = load i8*, i8** %b16, align 8, !dbg !7533
  %29 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7533
  %p17 = getelementptr inbounds %struct.string, %struct.string* %29, i32 0, i32 1, !dbg !7533
  %30 = load i8*, i8** %p17, align 8, !dbg !7533
  %cmp18 = icmp eq i8* %28, %30, !dbg !7533
  br i1 %cmp18, label %if.end21, label %if.then20, !dbg !7536

if.then20:                                        ; preds = %sw.bb14
  %31 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7533
  call void @string_append(%struct.string* %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7533
  br label %if.end21, !dbg !7533

if.end21:                                         ; preds = %if.then20, %sw.bb14
  %32 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7537
  call void @string_append(%struct.string* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.240, i64 0, i64 0)), !dbg !7538
  br label %sw.epilog, !dbg !7539

sw.bb22:                                          ; preds = %while.body
  %33 = load i8**, i8*** %mangled.addr, align 8, !dbg !7540
  %34 = load i8*, i8** %33, align 8, !dbg !7541
  %incdec.ptr23 = getelementptr inbounds i8, i8* %34, i32 1, !dbg !7541
  store i8* %incdec.ptr23, i8** %33, align 8, !dbg !7541
  %35 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7542
  %b24 = getelementptr inbounds %struct.string, %struct.string* %35, i32 0, i32 0, !dbg !7542
  %36 = load i8*, i8** %b24, align 8, !dbg !7542
  %37 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7542
  %p25 = getelementptr inbounds %struct.string, %struct.string* %37, i32 0, i32 1, !dbg !7542
  %38 = load i8*, i8** %p25, align 8, !dbg !7542
  %cmp26 = icmp eq i8* %36, %38, !dbg !7542
  br i1 %cmp26, label %if.end29, label %if.then28, !dbg !7545

if.then28:                                        ; preds = %sw.bb22
  %39 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7542
  call void @string_append(%struct.string* %39, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7542
  br label %if.end29, !dbg !7542

if.end29:                                         ; preds = %if.then28, %sw.bb22
  %40 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7546
  call void @string_append(%struct.string* %40, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.241, i64 0, i64 0)), !dbg !7547
  br label %sw.epilog, !dbg !7548

sw.default:                                       ; preds = %while.body
  store i32 1, i32* %done, align 4, !dbg !7549
  br label %sw.epilog, !dbg !7550

sw.epilog:                                        ; preds = %sw.default, %if.end29, %if.end21, %if.end13, %if.end5
  br label %while.cond, !dbg !7494, !llvm.loop !7551

while.end:                                        ; preds = %while.cond
  %41 = load i8**, i8*** %mangled.addr, align 8, !dbg !7553
  %42 = load i8*, i8** %41, align 8, !dbg !7554
  %43 = load i8, i8* %42, align 1, !dbg !7555
  %conv30 = sext i8 %43 to i32, !dbg !7555
  switch i32 %conv30, label %sw.default201 [
    i32 0, label %sw.bb31
    i32 95, label %sw.bb31
    i32 118, label %sw.bb32
    i32 120, label %sw.bb40
    i32 108, label %sw.bb48
    i32 105, label %sw.bb56
    i32 115, label %sw.bb64
    i32 98, label %sw.bb72
    i32 99, label %sw.bb80
    i32 119, label %sw.bb88
    i32 114, label %sw.bb96
    i32 100, label %sw.bb104
    i32 102, label %sw.bb112
    i32 71, label %sw.bb120
    i32 73, label %sw.bb129
    i32 48, label %sw.bb173
    i32 49, label %sw.bb173
    i32 50, label %sw.bb173
    i32 51, label %sw.bb173
    i32 52, label %sw.bb173
    i32 53, label %sw.bb173
    i32 54, label %sw.bb173
    i32 55, label %sw.bb173
    i32 56, label %sw.bb173
    i32 57, label %sw.bb173
    i32 116, label %sw.bb198
  ], !dbg !7556

sw.bb31:                                          ; preds = %while.end, %while.end
  br label %sw.epilog202, !dbg !7557

sw.bb32:                                          ; preds = %while.end
  %44 = load i8**, i8*** %mangled.addr, align 8, !dbg !7559
  %45 = load i8*, i8** %44, align 8, !dbg !7560
  %incdec.ptr33 = getelementptr inbounds i8, i8* %45, i32 1, !dbg !7560
  store i8* %incdec.ptr33, i8** %44, align 8, !dbg !7560
  %46 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7561
  %b34 = getelementptr inbounds %struct.string, %struct.string* %46, i32 0, i32 0, !dbg !7561
  %47 = load i8*, i8** %b34, align 8, !dbg !7561
  %48 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7561
  %p35 = getelementptr inbounds %struct.string, %struct.string* %48, i32 0, i32 1, !dbg !7561
  %49 = load i8*, i8** %p35, align 8, !dbg !7561
  %cmp36 = icmp eq i8* %47, %49, !dbg !7561
  br i1 %cmp36, label %if.end39, label %if.then38, !dbg !7564

if.then38:                                        ; preds = %sw.bb32
  %50 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7561
  call void @string_append(%struct.string* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7561
  br label %if.end39, !dbg !7561

if.end39:                                         ; preds = %if.then38, %sw.bb32
  %51 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7565
  call void @string_append(%struct.string* %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.228, i64 0, i64 0)), !dbg !7566
  br label %sw.epilog202, !dbg !7567

sw.bb40:                                          ; preds = %while.end
  %52 = load i8**, i8*** %mangled.addr, align 8, !dbg !7568
  %53 = load i8*, i8** %52, align 8, !dbg !7569
  %incdec.ptr41 = getelementptr inbounds i8, i8* %53, i32 1, !dbg !7569
  store i8* %incdec.ptr41, i8** %52, align 8, !dbg !7569
  %54 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7570
  %b42 = getelementptr inbounds %struct.string, %struct.string* %54, i32 0, i32 0, !dbg !7570
  %55 = load i8*, i8** %b42, align 8, !dbg !7570
  %56 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7570
  %p43 = getelementptr inbounds %struct.string, %struct.string* %56, i32 0, i32 1, !dbg !7570
  %57 = load i8*, i8** %p43, align 8, !dbg !7570
  %cmp44 = icmp eq i8* %55, %57, !dbg !7570
  br i1 %cmp44, label %if.end47, label %if.then46, !dbg !7573

if.then46:                                        ; preds = %sw.bb40
  %58 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7570
  call void @string_append(%struct.string* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7570
  br label %if.end47, !dbg !7570

if.end47:                                         ; preds = %if.then46, %sw.bb40
  %59 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7574
  call void @string_append(%struct.string* %59, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.242, i64 0, i64 0)), !dbg !7575
  br label %sw.epilog202, !dbg !7576

sw.bb48:                                          ; preds = %while.end
  %60 = load i8**, i8*** %mangled.addr, align 8, !dbg !7577
  %61 = load i8*, i8** %60, align 8, !dbg !7578
  %incdec.ptr49 = getelementptr inbounds i8, i8* %61, i32 1, !dbg !7578
  store i8* %incdec.ptr49, i8** %60, align 8, !dbg !7578
  %62 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7579
  %b50 = getelementptr inbounds %struct.string, %struct.string* %62, i32 0, i32 0, !dbg !7579
  %63 = load i8*, i8** %b50, align 8, !dbg !7579
  %64 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7579
  %p51 = getelementptr inbounds %struct.string, %struct.string* %64, i32 0, i32 1, !dbg !7579
  %65 = load i8*, i8** %p51, align 8, !dbg !7579
  %cmp52 = icmp eq i8* %63, %65, !dbg !7579
  br i1 %cmp52, label %if.end55, label %if.then54, !dbg !7582

if.then54:                                        ; preds = %sw.bb48
  %66 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7579
  call void @string_append(%struct.string* %66, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7579
  br label %if.end55, !dbg !7579

if.end55:                                         ; preds = %if.then54, %sw.bb48
  %67 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7583
  call void @string_append(%struct.string* %67, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.243, i64 0, i64 0)), !dbg !7584
  br label %sw.epilog202, !dbg !7585

sw.bb56:                                          ; preds = %while.end
  %68 = load i8**, i8*** %mangled.addr, align 8, !dbg !7586
  %69 = load i8*, i8** %68, align 8, !dbg !7587
  %incdec.ptr57 = getelementptr inbounds i8, i8* %69, i32 1, !dbg !7587
  store i8* %incdec.ptr57, i8** %68, align 8, !dbg !7587
  %70 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7588
  %b58 = getelementptr inbounds %struct.string, %struct.string* %70, i32 0, i32 0, !dbg !7588
  %71 = load i8*, i8** %b58, align 8, !dbg !7588
  %72 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7588
  %p59 = getelementptr inbounds %struct.string, %struct.string* %72, i32 0, i32 1, !dbg !7588
  %73 = load i8*, i8** %p59, align 8, !dbg !7588
  %cmp60 = icmp eq i8* %71, %73, !dbg !7588
  br i1 %cmp60, label %if.end63, label %if.then62, !dbg !7591

if.then62:                                        ; preds = %sw.bb56
  %74 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7588
  call void @string_append(%struct.string* %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7588
  br label %if.end63, !dbg !7588

if.end63:                                         ; preds = %if.then62, %sw.bb56
  %75 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7592
  call void @string_append(%struct.string* %75, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.244, i64 0, i64 0)), !dbg !7593
  br label %sw.epilog202, !dbg !7594

sw.bb64:                                          ; preds = %while.end
  %76 = load i8**, i8*** %mangled.addr, align 8, !dbg !7595
  %77 = load i8*, i8** %76, align 8, !dbg !7596
  %incdec.ptr65 = getelementptr inbounds i8, i8* %77, i32 1, !dbg !7596
  store i8* %incdec.ptr65, i8** %76, align 8, !dbg !7596
  %78 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7597
  %b66 = getelementptr inbounds %struct.string, %struct.string* %78, i32 0, i32 0, !dbg !7597
  %79 = load i8*, i8** %b66, align 8, !dbg !7597
  %80 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7597
  %p67 = getelementptr inbounds %struct.string, %struct.string* %80, i32 0, i32 1, !dbg !7597
  %81 = load i8*, i8** %p67, align 8, !dbg !7597
  %cmp68 = icmp eq i8* %79, %81, !dbg !7597
  br i1 %cmp68, label %if.end71, label %if.then70, !dbg !7600

if.then70:                                        ; preds = %sw.bb64
  %82 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7597
  call void @string_append(%struct.string* %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7597
  br label %if.end71, !dbg !7597

if.end71:                                         ; preds = %if.then70, %sw.bb64
  %83 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7601
  call void @string_append(%struct.string* %83, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.245, i64 0, i64 0)), !dbg !7602
  br label %sw.epilog202, !dbg !7603

sw.bb72:                                          ; preds = %while.end
  %84 = load i8**, i8*** %mangled.addr, align 8, !dbg !7604
  %85 = load i8*, i8** %84, align 8, !dbg !7605
  %incdec.ptr73 = getelementptr inbounds i8, i8* %85, i32 1, !dbg !7605
  store i8* %incdec.ptr73, i8** %84, align 8, !dbg !7605
  %86 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7606
  %b74 = getelementptr inbounds %struct.string, %struct.string* %86, i32 0, i32 0, !dbg !7606
  %87 = load i8*, i8** %b74, align 8, !dbg !7606
  %88 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7606
  %p75 = getelementptr inbounds %struct.string, %struct.string* %88, i32 0, i32 1, !dbg !7606
  %89 = load i8*, i8** %p75, align 8, !dbg !7606
  %cmp76 = icmp eq i8* %87, %89, !dbg !7606
  br i1 %cmp76, label %if.end79, label %if.then78, !dbg !7609

if.then78:                                        ; preds = %sw.bb72
  %90 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7606
  call void @string_append(%struct.string* %90, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7606
  br label %if.end79, !dbg !7606

if.end79:                                         ; preds = %if.then78, %sw.bb72
  %91 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7610
  call void @string_append(%struct.string* %91, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.246, i64 0, i64 0)), !dbg !7611
  store i32 4, i32* %tk, align 4, !dbg !7612
  br label %sw.epilog202, !dbg !7613

sw.bb80:                                          ; preds = %while.end
  %92 = load i8**, i8*** %mangled.addr, align 8, !dbg !7614
  %93 = load i8*, i8** %92, align 8, !dbg !7615
  %incdec.ptr81 = getelementptr inbounds i8, i8* %93, i32 1, !dbg !7615
  store i8* %incdec.ptr81, i8** %92, align 8, !dbg !7615
  %94 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7616
  %b82 = getelementptr inbounds %struct.string, %struct.string* %94, i32 0, i32 0, !dbg !7616
  %95 = load i8*, i8** %b82, align 8, !dbg !7616
  %96 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7616
  %p83 = getelementptr inbounds %struct.string, %struct.string* %96, i32 0, i32 1, !dbg !7616
  %97 = load i8*, i8** %p83, align 8, !dbg !7616
  %cmp84 = icmp eq i8* %95, %97, !dbg !7616
  br i1 %cmp84, label %if.end87, label %if.then86, !dbg !7619

if.then86:                                        ; preds = %sw.bb80
  %98 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7616
  call void @string_append(%struct.string* %98, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7616
  br label %if.end87, !dbg !7616

if.end87:                                         ; preds = %if.then86, %sw.bb80
  %99 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7620
  call void @string_append(%struct.string* %99, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.247, i64 0, i64 0)), !dbg !7621
  store i32 5, i32* %tk, align 4, !dbg !7622
  br label %sw.epilog202, !dbg !7623

sw.bb88:                                          ; preds = %while.end
  %100 = load i8**, i8*** %mangled.addr, align 8, !dbg !7624
  %101 = load i8*, i8** %100, align 8, !dbg !7625
  %incdec.ptr89 = getelementptr inbounds i8, i8* %101, i32 1, !dbg !7625
  store i8* %incdec.ptr89, i8** %100, align 8, !dbg !7625
  %102 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7626
  %b90 = getelementptr inbounds %struct.string, %struct.string* %102, i32 0, i32 0, !dbg !7626
  %103 = load i8*, i8** %b90, align 8, !dbg !7626
  %104 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7626
  %p91 = getelementptr inbounds %struct.string, %struct.string* %104, i32 0, i32 1, !dbg !7626
  %105 = load i8*, i8** %p91, align 8, !dbg !7626
  %cmp92 = icmp eq i8* %103, %105, !dbg !7626
  br i1 %cmp92, label %if.end95, label %if.then94, !dbg !7629

if.then94:                                        ; preds = %sw.bb88
  %106 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7626
  call void @string_append(%struct.string* %106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7626
  br label %if.end95, !dbg !7626

if.end95:                                         ; preds = %if.then94, %sw.bb88
  %107 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7630
  call void @string_append(%struct.string* %107, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.248, i64 0, i64 0)), !dbg !7631
  store i32 5, i32* %tk, align 4, !dbg !7632
  br label %sw.epilog202, !dbg !7633

sw.bb96:                                          ; preds = %while.end
  %108 = load i8**, i8*** %mangled.addr, align 8, !dbg !7634
  %109 = load i8*, i8** %108, align 8, !dbg !7635
  %incdec.ptr97 = getelementptr inbounds i8, i8* %109, i32 1, !dbg !7635
  store i8* %incdec.ptr97, i8** %108, align 8, !dbg !7635
  %110 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7636
  %b98 = getelementptr inbounds %struct.string, %struct.string* %110, i32 0, i32 0, !dbg !7636
  %111 = load i8*, i8** %b98, align 8, !dbg !7636
  %112 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7636
  %p99 = getelementptr inbounds %struct.string, %struct.string* %112, i32 0, i32 1, !dbg !7636
  %113 = load i8*, i8** %p99, align 8, !dbg !7636
  %cmp100 = icmp eq i8* %111, %113, !dbg !7636
  br i1 %cmp100, label %if.end103, label %if.then102, !dbg !7639

if.then102:                                       ; preds = %sw.bb96
  %114 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7636
  call void @string_append(%struct.string* %114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7636
  br label %if.end103, !dbg !7636

if.end103:                                        ; preds = %if.then102, %sw.bb96
  %115 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7640
  call void @string_append(%struct.string* %115, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i64 0, i64 0)), !dbg !7641
  store i32 6, i32* %tk, align 4, !dbg !7642
  br label %sw.epilog202, !dbg !7643

sw.bb104:                                         ; preds = %while.end
  %116 = load i8**, i8*** %mangled.addr, align 8, !dbg !7644
  %117 = load i8*, i8** %116, align 8, !dbg !7645
  %incdec.ptr105 = getelementptr inbounds i8, i8* %117, i32 1, !dbg !7645
  store i8* %incdec.ptr105, i8** %116, align 8, !dbg !7645
  %118 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7646
  %b106 = getelementptr inbounds %struct.string, %struct.string* %118, i32 0, i32 0, !dbg !7646
  %119 = load i8*, i8** %b106, align 8, !dbg !7646
  %120 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7646
  %p107 = getelementptr inbounds %struct.string, %struct.string* %120, i32 0, i32 1, !dbg !7646
  %121 = load i8*, i8** %p107, align 8, !dbg !7646
  %cmp108 = icmp eq i8* %119, %121, !dbg !7646
  br i1 %cmp108, label %if.end111, label %if.then110, !dbg !7649

if.then110:                                       ; preds = %sw.bb104
  %122 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7646
  call void @string_append(%struct.string* %122, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7646
  br label %if.end111, !dbg !7646

if.end111:                                        ; preds = %if.then110, %sw.bb104
  %123 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7650
  call void @string_append(%struct.string* %123, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.250, i64 0, i64 0)), !dbg !7651
  store i32 6, i32* %tk, align 4, !dbg !7652
  br label %sw.epilog202, !dbg !7653

sw.bb112:                                         ; preds = %while.end
  %124 = load i8**, i8*** %mangled.addr, align 8, !dbg !7654
  %125 = load i8*, i8** %124, align 8, !dbg !7655
  %incdec.ptr113 = getelementptr inbounds i8, i8* %125, i32 1, !dbg !7655
  store i8* %incdec.ptr113, i8** %124, align 8, !dbg !7655
  %126 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7656
  %b114 = getelementptr inbounds %struct.string, %struct.string* %126, i32 0, i32 0, !dbg !7656
  %127 = load i8*, i8** %b114, align 8, !dbg !7656
  %128 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7656
  %p115 = getelementptr inbounds %struct.string, %struct.string* %128, i32 0, i32 1, !dbg !7656
  %129 = load i8*, i8** %p115, align 8, !dbg !7656
  %cmp116 = icmp eq i8* %127, %129, !dbg !7656
  br i1 %cmp116, label %if.end119, label %if.then118, !dbg !7659

if.then118:                                       ; preds = %sw.bb112
  %130 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7656
  call void @string_append(%struct.string* %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7656
  br label %if.end119, !dbg !7656

if.end119:                                        ; preds = %if.then118, %sw.bb112
  %131 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7660
  call void @string_append(%struct.string* %131, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.251, i64 0, i64 0)), !dbg !7661
  store i32 6, i32* %tk, align 4, !dbg !7662
  br label %sw.epilog202, !dbg !7663

sw.bb120:                                         ; preds = %while.end
  %132 = load i8**, i8*** %mangled.addr, align 8, !dbg !7664
  %133 = load i8*, i8** %132, align 8, !dbg !7665
  %incdec.ptr121 = getelementptr inbounds i8, i8* %133, i32 1, !dbg !7665
  store i8* %incdec.ptr121, i8** %132, align 8, !dbg !7665
  %134 = load i8**, i8*** %mangled.addr, align 8, !dbg !7666
  %135 = load i8*, i8** %134, align 8, !dbg !7666
  %136 = load i8, i8* %135, align 1, !dbg !7666
  %conv122 = zext i8 %136 to i32, !dbg !7666
  %and123 = and i32 %conv122, 255, !dbg !7666
  %idxprom = sext i32 %and123 to i64, !dbg !7666
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !7666
  %137 = load i16, i16* %arrayidx, align 2, !dbg !7666
  %conv124 = zext i16 %137 to i32, !dbg !7666
  %and125 = and i32 %conv124, 4, !dbg !7666
  %tobool126 = icmp ne i32 %and125, 0, !dbg !7666
  br i1 %tobool126, label %if.end128, label %if.then127, !dbg !7668

if.then127:                                       ; preds = %sw.bb120
  store i32 0, i32* %success, align 4, !dbg !7669
  br label %sw.epilog202, !dbg !7671

if.end128:                                        ; preds = %sw.bb120
  br label %sw.bb129, !dbg !7666

sw.bb129:                                         ; preds = %while.end, %if.end128
  %138 = load i8**, i8*** %mangled.addr, align 8, !dbg !7672
  %139 = load i8*, i8** %138, align 8, !dbg !7673
  %incdec.ptr130 = getelementptr inbounds i8, i8* %139, i32 1, !dbg !7673
  store i8* %incdec.ptr130, i8** %138, align 8, !dbg !7673
  %140 = load i8**, i8*** %mangled.addr, align 8, !dbg !7674
  %141 = load i8*, i8** %140, align 8, !dbg !7676
  %142 = load i8, i8* %141, align 1, !dbg !7677
  %conv131 = sext i8 %142 to i32, !dbg !7677
  %cmp132 = icmp eq i32 %conv131, 95, !dbg !7678
  br i1 %cmp132, label %if.then134, label %if.else, !dbg !7679

if.then134:                                       ; preds = %sw.bb129
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7680, metadata !DIExpression()), !dbg !7682
  %143 = load i8**, i8*** %mangled.addr, align 8, !dbg !7683
  %144 = load i8*, i8** %143, align 8, !dbg !7684
  %incdec.ptr135 = getelementptr inbounds i8, i8* %144, i32 1, !dbg !7684
  store i8* %incdec.ptr135, i8** %143, align 8, !dbg !7684
  store i32 0, i32* %i, align 4, !dbg !7685
  br label %for.cond, !dbg !7687

for.cond:                                         ; preds = %for.inc, %if.then134
  %145 = load i32, i32* %i, align 4, !dbg !7688
  %conv136 = sext i32 %145 to i64, !dbg !7688
  %cmp137 = icmp slt i64 %conv136, 36, !dbg !7690
  br i1 %cmp137, label %land.lhs.true, label %land.end, !dbg !7691

land.lhs.true:                                    ; preds = %for.cond
  %146 = load i8**, i8*** %mangled.addr, align 8, !dbg !7692
  %147 = load i8*, i8** %146, align 8, !dbg !7693
  %148 = load i8, i8* %147, align 1, !dbg !7694
  %conv139 = sext i8 %148 to i32, !dbg !7694
  %tobool140 = icmp ne i32 %conv139, 0, !dbg !7694
  br i1 %tobool140, label %land.rhs, label %land.end, !dbg !7695

land.rhs:                                         ; preds = %land.lhs.true
  %149 = load i8**, i8*** %mangled.addr, align 8, !dbg !7696
  %150 = load i8*, i8** %149, align 8, !dbg !7697
  %151 = load i8, i8* %150, align 1, !dbg !7698
  %conv141 = sext i8 %151 to i32, !dbg !7698
  %cmp142 = icmp ne i32 %conv141, 95, !dbg !7699
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %for.cond
  %152 = phi i1 [ false, %land.lhs.true ], [ false, %for.cond ], [ %cmp142, %land.rhs ], !dbg !7700
  br i1 %152, label %for.body, label %for.end, !dbg !7701

for.body:                                         ; preds = %land.end
  %153 = load i8**, i8*** %mangled.addr, align 8, !dbg !7702
  %154 = load i8*, i8** %153, align 8, !dbg !7703
  %155 = load i8, i8* %154, align 1, !dbg !7704
  %156 = load i32, i32* %i, align 4, !dbg !7705
  %idxprom144 = sext i32 %156 to i64, !dbg !7706
  %arrayidx145 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 %idxprom144, !dbg !7706
  store i8 %155, i8* %arrayidx145, align 1, !dbg !7707
  br label %for.inc, !dbg !7706

for.inc:                                          ; preds = %for.body
  %157 = load i8**, i8*** %mangled.addr, align 8, !dbg !7708
  %158 = load i8*, i8** %157, align 8, !dbg !7709
  %incdec.ptr146 = getelementptr inbounds i8, i8* %158, i32 1, !dbg !7709
  store i8* %incdec.ptr146, i8** %157, align 8, !dbg !7709
  %159 = load i32, i32* %i, align 4, !dbg !7710
  %inc = add nsw i32 %159, 1, !dbg !7710
  store i32 %inc, i32* %i, align 4, !dbg !7710
  br label %for.cond, !dbg !7711, !llvm.loop !7712

for.end:                                          ; preds = %land.end
  %160 = load i8**, i8*** %mangled.addr, align 8, !dbg !7714
  %161 = load i8*, i8** %160, align 8, !dbg !7716
  %162 = load i8, i8* %161, align 1, !dbg !7717
  %conv147 = sext i8 %162 to i32, !dbg !7717
  %cmp148 = icmp ne i32 %conv147, 95, !dbg !7718
  br i1 %cmp148, label %if.then150, label %if.end151, !dbg !7719

if.then150:                                       ; preds = %for.end
  store i32 0, i32* %success, align 4, !dbg !7720
  br label %sw.epilog202, !dbg !7722

if.end151:                                        ; preds = %for.end
  %163 = load i32, i32* %i, align 4, !dbg !7723
  %idxprom152 = sext i32 %163 to i64, !dbg !7724
  %arrayidx153 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 %idxprom152, !dbg !7724
  store i8 0, i8* %arrayidx153, align 1, !dbg !7725
  %164 = load i8**, i8*** %mangled.addr, align 8, !dbg !7726
  %165 = load i8*, i8** %164, align 8, !dbg !7727
  %incdec.ptr154 = getelementptr inbounds i8, i8* %165, i32 1, !dbg !7727
  store i8* %incdec.ptr154, i8** %164, align 8, !dbg !7727
  br label %if.end161, !dbg !7728

if.else:                                          ; preds = %sw.bb129
  %arraydecay = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 0, !dbg !7729
  %166 = load i8**, i8*** %mangled.addr, align 8, !dbg !7731
  %167 = load i8*, i8** %166, align 8, !dbg !7732
  %call155 = call i8* @strncpy(i8* %arraydecay, i8* %167, i64 2), !dbg !7733
  %arrayidx156 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 2, !dbg !7734
  store i8 0, i8* %arrayidx156, align 2, !dbg !7735
  %168 = load i8**, i8*** %mangled.addr, align 8, !dbg !7736
  %169 = load i8*, i8** %168, align 8, !dbg !7736
  %call157 = call i64 @strlen(i8* %169), !dbg !7736
  %cmp158 = icmp ult i64 %call157, 2, !dbg !7736
  br i1 %cmp158, label %cond.true, label %cond.false, !dbg !7736

cond.true:                                        ; preds = %if.else
  %170 = load i8**, i8*** %mangled.addr, align 8, !dbg !7736
  %171 = load i8*, i8** %170, align 8, !dbg !7736
  %call160 = call i64 @strlen(i8* %171), !dbg !7736
  br label %cond.end, !dbg !7736

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !7736

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call160, %cond.true ], [ 2, %cond.false ], !dbg !7736
  %172 = load i8**, i8*** %mangled.addr, align 8, !dbg !7737
  %173 = load i8*, i8** %172, align 8, !dbg !7738
  %add.ptr = getelementptr inbounds i8, i8* %173, i64 %cond, !dbg !7738
  store i8* %add.ptr, i8** %172, align 8, !dbg !7738
  br label %if.end161

if.end161:                                        ; preds = %cond.end, %if.end151
  %arraydecay162 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 0, !dbg !7739
  %call163 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %arraydecay162, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.252, i64 0, i64 0), i32* %dec), !dbg !7740
  %arraydecay164 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 0, !dbg !7741
  %174 = load i32, i32* %dec, align 4, !dbg !7742
  %call165 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay164, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.253, i64 0, i64 0), i32 %174), !dbg !7743
  %175 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7744
  %b166 = getelementptr inbounds %struct.string, %struct.string* %175, i32 0, i32 0, !dbg !7744
  %176 = load i8*, i8** %b166, align 8, !dbg !7744
  %177 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7744
  %p167 = getelementptr inbounds %struct.string, %struct.string* %177, i32 0, i32 1, !dbg !7744
  %178 = load i8*, i8** %p167, align 8, !dbg !7744
  %cmp168 = icmp eq i8* %176, %178, !dbg !7744
  br i1 %cmp168, label %if.end171, label %if.then170, !dbg !7747

if.then170:                                       ; preds = %if.end161
  %179 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7744
  call void @string_append(%struct.string* %179, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7744
  br label %if.end171, !dbg !7744

if.end171:                                        ; preds = %if.then170, %if.end161
  %180 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7748
  %arraydecay172 = getelementptr inbounds [37 x i8], [37 x i8]* %buf, i64 0, i64 0, !dbg !7749
  call void @string_append(%struct.string* %180, i8* %arraydecay172), !dbg !7750
  br label %sw.epilog202, !dbg !7751

sw.bb173:                                         ; preds = %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end, %while.end
  call void @llvm.dbg.declare(metadata i32* %bindex, metadata !7752, metadata !DIExpression()), !dbg !7754
  %181 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7755
  %call174 = call i32 @register_Btype(%struct.work_stuff* %181), !dbg !7756
  store i32 %call174, i32* %bindex, align 4, !dbg !7754
  call void @llvm.dbg.declare(metadata %struct.string* %btype, metadata !7757, metadata !DIExpression()), !dbg !7758
  call void @string_init(%struct.string* %btype), !dbg !7759
  %182 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7760
  %183 = load i8**, i8*** %mangled.addr, align 8, !dbg !7762
  %call175 = call i32 @demangle_class_name(%struct.work_stuff* %182, i8** %183, %struct.string* %btype), !dbg !7763
  %tobool176 = icmp ne i32 %call175, 0, !dbg !7763
  br i1 %tobool176, label %if.then177, label %if.else196, !dbg !7764

if.then177:                                       ; preds = %sw.bb173
  %184 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7765
  %b178 = getelementptr inbounds %struct.string, %struct.string* %btype, i32 0, i32 0, !dbg !7767
  %185 = load i8*, i8** %b178, align 8, !dbg !7767
  %b179 = getelementptr inbounds %struct.string, %struct.string* %btype, i32 0, i32 0, !dbg !7768
  %186 = load i8*, i8** %b179, align 8, !dbg !7768
  %p180 = getelementptr inbounds %struct.string, %struct.string* %btype, i32 0, i32 1, !dbg !7768
  %187 = load i8*, i8** %p180, align 8, !dbg !7768
  %cmp181 = icmp eq i8* %186, %187, !dbg !7768
  br i1 %cmp181, label %cond.true183, label %cond.false184, !dbg !7768

cond.true183:                                     ; preds = %if.then177
  br label %cond.end187, !dbg !7768

cond.false184:                                    ; preds = %if.then177
  %p185 = getelementptr inbounds %struct.string, %struct.string* %btype, i32 0, i32 1, !dbg !7768
  %188 = load i8*, i8** %p185, align 8, !dbg !7768
  %b186 = getelementptr inbounds %struct.string, %struct.string* %btype, i32 0, i32 0, !dbg !7768
  %189 = load i8*, i8** %b186, align 8, !dbg !7768
  %sub.ptr.lhs.cast = ptrtoint i8* %188 to i64, !dbg !7768
  %sub.ptr.rhs.cast = ptrtoint i8* %189 to i64, !dbg !7768
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !7768
  br label %cond.end187, !dbg !7768

cond.end187:                                      ; preds = %cond.false184, %cond.true183
  %cond188 = phi i64 [ 0, %cond.true183 ], [ %sub.ptr.sub, %cond.false184 ], !dbg !7768
  %conv189 = trunc i64 %cond188 to i32, !dbg !7768
  %190 = load i32, i32* %bindex, align 4, !dbg !7769
  call void @remember_Btype(%struct.work_stuff* %184, i8* %185, i32 %conv189, i32 %190), !dbg !7770
  %191 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7771
  %b190 = getelementptr inbounds %struct.string, %struct.string* %191, i32 0, i32 0, !dbg !7771
  %192 = load i8*, i8** %b190, align 8, !dbg !7771
  %193 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7771
  %p191 = getelementptr inbounds %struct.string, %struct.string* %193, i32 0, i32 1, !dbg !7771
  %194 = load i8*, i8** %p191, align 8, !dbg !7771
  %cmp192 = icmp eq i8* %192, %194, !dbg !7771
  br i1 %cmp192, label %if.end195, label %if.then194, !dbg !7774

if.then194:                                       ; preds = %cond.end187
  %195 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7771
  call void @string_append(%struct.string* %195, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.198, i64 0, i64 0)), !dbg !7771
  br label %if.end195, !dbg !7771

if.end195:                                        ; preds = %if.then194, %cond.end187
  %196 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7775
  call void @string_appends(%struct.string* %196, %struct.string* %btype), !dbg !7776
  br label %if.end197, !dbg !7777

if.else196:                                       ; preds = %sw.bb173
  store i32 0, i32* %success, align 4, !dbg !7778
  br label %if.end197

if.end197:                                        ; preds = %if.else196, %if.end195
  call void @string_delete(%struct.string* %btype), !dbg !7779
  br label %sw.epilog202, !dbg !7780

sw.bb198:                                         ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.string* %btype199, metadata !7781, metadata !DIExpression()), !dbg !7783
  call void @string_init(%struct.string* %btype199), !dbg !7784
  %197 = load %struct.work_stuff*, %struct.work_stuff** %work.addr, align 8, !dbg !7785
  %198 = load i8**, i8*** %mangled.addr, align 8, !dbg !7786
  %call200 = call i32 @demangle_template(%struct.work_stuff* %197, i8** %198, %struct.string* %btype199, %struct.string* null, i32 1, i32 1), !dbg !7787
  store i32 %call200, i32* %success, align 4, !dbg !7788
  %199 = load %struct.string*, %struct.string** %result.addr, align 8, !dbg !7789
  call void @string_appends(%struct.string* %199, %struct.string* %btype199), !dbg !7790
  call void @string_delete(%struct.string* %btype199), !dbg !7791
  br label %sw.epilog202, !dbg !7792

sw.default201:                                    ; preds = %while.end
  store i32 0, i32* %success, align 4, !dbg !7793
  br label %sw.epilog202, !dbg !7794

sw.epilog202:                                     ; preds = %sw.default201, %sw.bb198, %if.end197, %if.end171, %if.then150, %if.then127, %if.end119, %if.end111, %if.end103, %if.end95, %if.end87, %if.end79, %if.end71, %if.end63, %if.end55, %if.end47, %if.end39, %sw.bb31
  %200 = load i32, i32* %success, align 4, !dbg !7795
  %tobool203 = icmp ne i32 %200, 0, !dbg !7795
  br i1 %tobool203, label %cond.true204, label %cond.false205, !dbg !7795

cond.true204:                                     ; preds = %sw.epilog202
  %201 = load i32, i32* %tk, align 4, !dbg !7796
  br label %cond.end206, !dbg !7795

cond.false205:                                    ; preds = %sw.epilog202
  br label %cond.end206, !dbg !7795

cond.end206:                                      ; preds = %cond.false205, %cond.true204
  %cond207 = phi i32 [ %201, %cond.true204 ], [ 0, %cond.false205 ], !dbg !7795
  ret i32 %cond207, !dbg !7797
}

declare dso_local i32 @__isoc99_sscanf(i8*, i8*, ...) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!114, !115, !116}
!llvm.ident = !{!117}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "current_demangling_style", scope: !2, file: !3, line: 93, type: !5, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !51, globals: !67, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cplus-dem.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !20, !42}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "demangling_styles", file: !6, line: 72, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./include/demangle.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19}
!9 = !DIEnumerator(name: "no_demangling", value: -1)
!10 = !DIEnumerator(name: "unknown_demangling", value: 0)
!11 = !DIEnumerator(name: "auto_demangling", value: 256)
!12 = !DIEnumerator(name: "gnu_demangling", value: 512)
!13 = !DIEnumerator(name: "lucid_demangling", value: 1024)
!14 = !DIEnumerator(name: "arm_demangling", value: 2048)
!15 = !DIEnumerator(name: "hp_demangling", value: 4096)
!16 = !DIEnumerator(name: "edg_demangling", value: 8192)
!17 = !DIEnumerator(name: "gnu_v3_demangling", value: 16384)
!18 = !DIEnumerator(name: "java_demangling", value: 4)
!19 = !DIEnumerator(name: "gnat_demangling", value: 32768)
!20 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !21, line: 57, baseType: !22, size: 32, elements: !23)
!21 = !DIFile(filename: "./include/safe-ctype.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!22 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!23 = !{!24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41}
!24 = !DIEnumerator(name: "_sch_isblank", value: 1, isUnsigned: true)
!25 = !DIEnumerator(name: "_sch_iscntrl", value: 2, isUnsigned: true)
!26 = !DIEnumerator(name: "_sch_isdigit", value: 4, isUnsigned: true)
!27 = !DIEnumerator(name: "_sch_islower", value: 8, isUnsigned: true)
!28 = !DIEnumerator(name: "_sch_isprint", value: 16, isUnsigned: true)
!29 = !DIEnumerator(name: "_sch_ispunct", value: 32, isUnsigned: true)
!30 = !DIEnumerator(name: "_sch_isspace", value: 64, isUnsigned: true)
!31 = !DIEnumerator(name: "_sch_isupper", value: 128, isUnsigned: true)
!32 = !DIEnumerator(name: "_sch_isxdigit", value: 256, isUnsigned: true)
!33 = !DIEnumerator(name: "_sch_isidst", value: 512, isUnsigned: true)
!34 = !DIEnumerator(name: "_sch_isvsp", value: 1024, isUnsigned: true)
!35 = !DIEnumerator(name: "_sch_isnvsp", value: 2048, isUnsigned: true)
!36 = !DIEnumerator(name: "_sch_isalpha", value: 136, isUnsigned: true)
!37 = !DIEnumerator(name: "_sch_isalnum", value: 140, isUnsigned: true)
!38 = !DIEnumerator(name: "_sch_isidnum", value: 516, isUnsigned: true)
!39 = !DIEnumerator(name: "_sch_isgraph", value: 172, isUnsigned: true)
!40 = !DIEnumerator(name: "_sch_iscppsp", value: 3072, isUnsigned: true)
!41 = !DIEnumerator(name: "_sch_isbasic", value: 3088, isUnsigned: true)
!42 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "type_kind_t", file: !3, line: 235, baseType: !22, size: 32, elements: !43)
!43 = !{!44, !45, !46, !47, !48, !49, !50}
!44 = !DIEnumerator(name: "tk_none", value: 0, isUnsigned: true)
!45 = !DIEnumerator(name: "tk_pointer", value: 1, isUnsigned: true)
!46 = !DIEnumerator(name: "tk_reference", value: 2, isUnsigned: true)
!47 = !DIEnumerator(name: "tk_integral", value: 3, isUnsigned: true)
!48 = !DIEnumerator(name: "tk_bool", value: 4, isUnsigned: true)
!49 = !DIEnumerator(name: "tk_char", value: 5, isUnsigned: true)
!50 = !DIEnumerator(name: "tk_real", value: 6, isUnsigned: true)
!51 = !{!52, !54, !55, !56, !7, !57, !58, !59, !53, !60}
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!53 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!54 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!55 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!57 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "type_kind_t", file: !3, line: 244, baseType: !42)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "string", file: !3, line: 110, baseType: !62)
!62 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "string", file: !3, line: 105, size: 192, elements: !63)
!63 = !{!64, !65, !66}
!64 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !62, file: !3, line: 107, baseType: !52, size: 64)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !62, file: !3, line: 108, baseType: !52, size: 64, offset: 64)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !62, file: !3, line: 109, baseType: !52, size: 64, offset: 128)
!67 = !{!0, !68, !83, !93, !98, !110}
!68 = !DIGlobalVariableExpression(var: !69, expr: !DIExpression())
!69 = distinct !DIGlobalVariable(name: "libiberty_demanglers", scope: !2, file: !3, line: 246, type: !70, isLocal: false, isDefinition: true)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !71, size: 2112, elements: !81)
!71 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !72)
!72 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "demangler_engine", file: !6, line: 116, size: 192, elements: !73)
!73 = !{!74, !78, !80}
!74 = !DIDerivedType(tag: DW_TAG_member, name: "demangling_style_name", scope: !72, file: !6, line: 118, baseType: !75, size: 64)
!75 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!76 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !77, size: 64)
!77 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !53)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "demangling_style", scope: !72, file: !6, line: 119, baseType: !79, size: 32, offset: 64)
!79 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "demangling_style_doc", scope: !72, file: !6, line: 120, baseType: !75, size: 64, offset: 128)
!81 = !{!82}
!82 = !DISubrange(count: 11)
!83 = !DIGlobalVariableExpression(var: !84, expr: !DIExpression())
!84 = distinct !DIGlobalVariable(name: "operators", scope: !85, file: !3, line: 917, type: !89, isLocal: true, isDefinition: true)
!85 = distinct !DISubprogram(name: "ada_demangle", scope: !3, file: !3, line: 881, type: !86, scopeLine: 882, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!86 = !DISubroutineType(types: !87)
!87 = !{!52, !76, !7}
!88 = !{}
!89 = !DICompositeType(tag: DW_TAG_array_type, baseType: !75, size: 2560, elements: !90)
!90 = !{!91, !92}
!91 = !DISubrange(count: 20)
!92 = !DISubrange(count: 2)
!93 = !DIGlobalVariableExpression(var: !94, expr: !DIExpression())
!94 = distinct !DIGlobalVariable(name: "cplus_markers", scope: !2, file: !3, line: 95, type: !95, isLocal: true, isDefinition: true)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 32, elements: !96)
!96 = !{!97}
!97 = !DISubrange(count: 4)
!98 = !DIGlobalVariableExpression(var: !99, expr: !DIExpression())
!99 = distinct !DIGlobalVariable(name: "optable", scope: !2, file: !3, line: 150, type: !100, isLocal: true, isDefinition: true)
!100 = !DICompositeType(tag: DW_TAG_array_type, baseType: !101, size: 15168, elements: !108)
!101 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !102)
!102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optable", file: !3, line: 145, size: 192, elements: !103)
!103 = !{!104, !105, !106}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !102, file: !3, line: 147, baseType: !75, size: 64)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !102, file: !3, line: 148, baseType: !75, size: 64, offset: 64)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !102, file: !3, line: 149, baseType: !107, size: 32, offset: 128)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!108 = !{!109}
!109 = !DISubrange(count: 79)
!110 = !DIGlobalVariableExpression(var: !111, expr: !DIExpression())
!111 = distinct !DIGlobalVariable(name: "char_str", scope: !2, file: !3, line: 97, type: !112, isLocal: true, isDefinition: true)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 16, elements: !113)
!113 = !{!92}
!114 = !{i32 7, !"Dwarf Version", i32 4}
!115 = !{i32 2, !"Debug Info Version", i32 3}
!116 = !{i32 1, !"wchar_size", i32 4}
!117 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!118 = distinct !DISubprogram(name: "set_cplus_marker_for_demangling", scope: !3, file: !3, line: 100, type: !119, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!119 = !DISubroutineType(types: !120)
!120 = !{null, !7}
!121 = !DILocalVariable(name: "ch", arg: 1, scope: !118, file: !3, line: 100, type: !7)
!122 = !DILocation(line: 100, column: 38, scope: !118)
!123 = !DILocation(line: 102, column: 22, scope: !118)
!124 = !DILocation(line: 102, column: 20, scope: !118)
!125 = !DILocation(line: 103, column: 1, scope: !118)
!126 = distinct !DISubprogram(name: "cplus_demangle_opname", scope: !3, file: !3, line: 632, type: !127, scopeLine: 633, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!127 = !DISubroutineType(types: !128)
!128 = !{!7, !76, !52, !7}
!129 = !DILocalVariable(name: "opname", arg: 1, scope: !126, file: !3, line: 632, type: !76)
!130 = !DILocation(line: 632, column: 36, scope: !126)
!131 = !DILocalVariable(name: "result", arg: 2, scope: !126, file: !3, line: 632, type: !52)
!132 = !DILocation(line: 632, column: 50, scope: !126)
!133 = !DILocalVariable(name: "options", arg: 3, scope: !126, file: !3, line: 632, type: !7)
!134 = !DILocation(line: 632, column: 62, scope: !126)
!135 = !DILocalVariable(name: "len", scope: !126, file: !3, line: 634, type: !7)
!136 = !DILocation(line: 634, column: 7, scope: !126)
!137 = !DILocalVariable(name: "len1", scope: !126, file: !3, line: 634, type: !7)
!138 = !DILocation(line: 634, column: 12, scope: !126)
!139 = !DILocalVariable(name: "ret", scope: !126, file: !3, line: 634, type: !7)
!140 = !DILocation(line: 634, column: 18, scope: !126)
!141 = !DILocalVariable(name: "type", scope: !126, file: !3, line: 635, type: !61)
!142 = !DILocation(line: 635, column: 10, scope: !126)
!143 = !DILocalVariable(name: "work", scope: !126, file: !3, line: 636, type: !144)
!144 = !DICompositeType(tag: DW_TAG_array_type, baseType: !145, size: 896, elements: !168)
!145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "work_stuff", file: !3, line: 115, size: 896, elements: !146)
!146 = !{!147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167}
!147 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !145, file: !3, line: 117, baseType: !7, size: 32)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "typevec", scope: !145, file: !3, line: 118, baseType: !58, size: 64, offset: 64)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "ktypevec", scope: !145, file: !3, line: 119, baseType: !58, size: 64, offset: 128)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "btypevec", scope: !145, file: !3, line: 120, baseType: !58, size: 64, offset: 192)
!151 = !DIDerivedType(tag: DW_TAG_member, name: "numk", scope: !145, file: !3, line: 121, baseType: !7, size: 32, offset: 256)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "numb", scope: !145, file: !3, line: 122, baseType: !7, size: 32, offset: 288)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "ksize", scope: !145, file: !3, line: 123, baseType: !7, size: 32, offset: 320)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "bsize", scope: !145, file: !3, line: 124, baseType: !7, size: 32, offset: 352)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "ntypes", scope: !145, file: !3, line: 125, baseType: !7, size: 32, offset: 384)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "typevec_size", scope: !145, file: !3, line: 126, baseType: !7, size: 32, offset: 416)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !145, file: !3, line: 127, baseType: !7, size: 32, offset: 448)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "destructor", scope: !145, file: !3, line: 128, baseType: !7, size: 32, offset: 480)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "static_type", scope: !145, file: !3, line: 129, baseType: !7, size: 32, offset: 512)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "temp_start", scope: !145, file: !3, line: 130, baseType: !7, size: 32, offset: 544)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "type_quals", scope: !145, file: !3, line: 131, baseType: !7, size: 32, offset: 576)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "dllimported", scope: !145, file: !3, line: 132, baseType: !7, size: 32, offset: 608)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "tmpl_argvec", scope: !145, file: !3, line: 133, baseType: !58, size: 64, offset: 640)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "ntmpl_args", scope: !145, file: !3, line: 134, baseType: !7, size: 32, offset: 704)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "forgetting_types", scope: !145, file: !3, line: 135, baseType: !7, size: 32, offset: 736)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "previous_argument", scope: !145, file: !3, line: 137, baseType: !60, size: 64, offset: 768)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "nrepeats", scope: !145, file: !3, line: 138, baseType: !7, size: 32, offset: 832)
!168 = !{!169}
!169 = !DISubrange(count: 1)
!170 = !DILocation(line: 636, column: 21, scope: !126)
!171 = !DILocalVariable(name: "tem", scope: !126, file: !3, line: 637, type: !76)
!172 = !DILocation(line: 637, column: 15, scope: !126)
!173 = !DILocation(line: 639, column: 16, scope: !126)
!174 = !DILocation(line: 639, column: 9, scope: !126)
!175 = !DILocation(line: 639, column: 7, scope: !126)
!176 = !DILocation(line: 640, column: 3, scope: !126)
!177 = !DILocation(line: 640, column: 13, scope: !126)
!178 = !DILocation(line: 641, column: 7, scope: !126)
!179 = !DILocation(line: 642, column: 3, scope: !126)
!180 = !DILocation(line: 643, column: 19, scope: !126)
!181 = !DILocation(line: 643, column: 9, scope: !126)
!182 = !DILocation(line: 643, column: 17, scope: !126)
!183 = !DILocation(line: 645, column: 7, scope: !184)
!184 = distinct !DILexicalBlock(scope: !126, file: !3, line: 645, column: 7)
!185 = !DILocation(line: 645, column: 17, scope: !184)
!186 = !DILocation(line: 645, column: 24, scope: !184)
!187 = !DILocation(line: 645, column: 27, scope: !184)
!188 = !DILocation(line: 645, column: 37, scope: !184)
!189 = !DILocation(line: 646, column: 7, scope: !184)
!190 = !DILocation(line: 646, column: 10, scope: !184)
!191 = !DILocation(line: 646, column: 20, scope: !184)
!192 = !DILocation(line: 646, column: 27, scope: !184)
!193 = !DILocation(line: 646, column: 30, scope: !184)
!194 = !DILocation(line: 646, column: 40, scope: !184)
!195 = !DILocation(line: 645, column: 7, scope: !126)
!196 = !DILocation(line: 650, column: 13, scope: !197)
!197 = distinct !DILexicalBlock(scope: !184, file: !3, line: 647, column: 5)
!198 = !DILocation(line: 650, column: 20, scope: !197)
!199 = !DILocation(line: 650, column: 11, scope: !197)
!200 = !DILocation(line: 651, column: 20, scope: !201)
!201 = distinct !DILexicalBlock(scope: !197, file: !3, line: 651, column: 11)
!202 = !DILocation(line: 651, column: 11, scope: !201)
!203 = !DILocation(line: 651, column: 11, scope: !197)
!204 = !DILocation(line: 653, column: 12, scope: !205)
!205 = distinct !DILexicalBlock(scope: !201, file: !3, line: 652, column: 2)
!206 = !DILocation(line: 653, column: 4, scope: !205)
!207 = !DILocation(line: 654, column: 13, scope: !205)
!208 = !DILocation(line: 654, column: 26, scope: !205)
!209 = !DILocation(line: 654, column: 34, scope: !205)
!210 = !DILocation(line: 654, column: 43, scope: !205)
!211 = !DILocation(line: 654, column: 36, scope: !205)
!212 = !DILocation(line: 654, column: 4, scope: !205)
!213 = !DILocation(line: 655, column: 4, scope: !205)
!214 = !DILocation(line: 656, column: 8, scope: !205)
!215 = !DILocation(line: 657, column: 2, scope: !205)
!216 = !DILocation(line: 658, column: 5, scope: !197)
!217 = !DILocation(line: 659, column: 12, scope: !218)
!218 = distinct !DILexicalBlock(scope: !184, file: !3, line: 659, column: 12)
!219 = !DILocation(line: 659, column: 22, scope: !218)
!220 = !DILocation(line: 659, column: 29, scope: !218)
!221 = !DILocation(line: 659, column: 32, scope: !218)
!222 = !DILocation(line: 659, column: 42, scope: !218)
!223 = !DILocation(line: 660, column: 5, scope: !218)
!224 = !DILocation(line: 660, column: 8, scope: !218)
!225 = !DILocation(line: 661, column: 5, scope: !218)
!226 = !DILocation(line: 661, column: 8, scope: !218)
!227 = !DILocation(line: 659, column: 12, scope: !184)
!228 = !DILocation(line: 663, column: 11, scope: !229)
!229 = distinct !DILexicalBlock(scope: !230, file: !3, line: 663, column: 11)
!230 = distinct !DILexicalBlock(scope: !218, file: !3, line: 662, column: 5)
!231 = !DILocation(line: 663, column: 21, scope: !229)
!232 = !DILocation(line: 663, column: 11, scope: !230)
!233 = !DILocalVariable(name: "i", scope: !234, file: !3, line: 666, type: !235)
!234 = distinct !DILexicalBlock(scope: !229, file: !3, line: 664, column: 2)
!235 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !236, line: 46, baseType: !237)
!236 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!237 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!238 = !DILocation(line: 666, column: 11, scope: !234)
!239 = !DILocation(line: 667, column: 11, scope: !240)
!240 = distinct !DILexicalBlock(scope: !234, file: !3, line: 667, column: 4)
!241 = !DILocation(line: 667, column: 9, scope: !240)
!242 = !DILocation(line: 667, column: 16, scope: !243)
!243 = distinct !DILexicalBlock(scope: !240, file: !3, line: 667, column: 4)
!244 = !DILocation(line: 667, column: 18, scope: !243)
!245 = !DILocation(line: 667, column: 4, scope: !240)
!246 = !DILocation(line: 669, column: 28, scope: !247)
!247 = distinct !DILexicalBlock(scope: !248, file: !3, line: 669, column: 12)
!248 = distinct !DILexicalBlock(scope: !243, file: !3, line: 668, column: 6)
!249 = !DILocation(line: 669, column: 20, scope: !247)
!250 = !DILocation(line: 669, column: 31, scope: !247)
!251 = !DILocation(line: 669, column: 12, scope: !247)
!252 = !DILocation(line: 669, column: 35, scope: !247)
!253 = !DILocation(line: 670, column: 5, scope: !247)
!254 = !DILocation(line: 670, column: 24, scope: !247)
!255 = !DILocation(line: 670, column: 16, scope: !247)
!256 = !DILocation(line: 670, column: 27, scope: !247)
!257 = !DILocation(line: 670, column: 31, scope: !247)
!258 = !DILocation(line: 670, column: 38, scope: !247)
!259 = !DILocation(line: 670, column: 8, scope: !247)
!260 = !DILocation(line: 670, column: 46, scope: !247)
!261 = !DILocation(line: 669, column: 12, scope: !248)
!262 = !DILocation(line: 672, column: 13, scope: !263)
!263 = distinct !DILexicalBlock(scope: !247, file: !3, line: 671, column: 3)
!264 = !DILocation(line: 672, column: 5, scope: !263)
!265 = !DILocation(line: 673, column: 13, scope: !263)
!266 = !DILocation(line: 673, column: 29, scope: !263)
!267 = !DILocation(line: 673, column: 21, scope: !263)
!268 = !DILocation(line: 673, column: 32, scope: !263)
!269 = !DILocation(line: 673, column: 5, scope: !263)
!270 = !DILocation(line: 674, column: 9, scope: !263)
!271 = !DILocation(line: 675, column: 5, scope: !263)
!272 = !DILocation(line: 677, column: 6, scope: !248)
!273 = !DILocation(line: 667, column: 43, scope: !243)
!274 = !DILocation(line: 667, column: 4, scope: !243)
!275 = distinct !{!275, !245, !276}
!276 = !DILocation(line: 677, column: 6, scope: !240)
!277 = !DILocation(line: 678, column: 2, scope: !234)
!278 = !DILocation(line: 681, column: 8, scope: !279)
!279 = distinct !DILexicalBlock(scope: !280, file: !3, line: 681, column: 8)
!280 = distinct !DILexicalBlock(scope: !229, file: !3, line: 680, column: 2)
!281 = !DILocation(line: 681, column: 18, scope: !279)
!282 = !DILocation(line: 681, column: 25, scope: !279)
!283 = !DILocation(line: 681, column: 28, scope: !279)
!284 = !DILocation(line: 681, column: 38, scope: !279)
!285 = !DILocation(line: 681, column: 8, scope: !280)
!286 = !DILocalVariable(name: "i", scope: !287, file: !3, line: 684, type: !235)
!287 = distinct !DILexicalBlock(scope: !279, file: !3, line: 682, column: 6)
!288 = !DILocation(line: 684, column: 15, scope: !287)
!289 = !DILocation(line: 685, column: 15, scope: !290)
!290 = distinct !DILexicalBlock(scope: !287, file: !3, line: 685, column: 8)
!291 = !DILocation(line: 685, column: 13, scope: !290)
!292 = !DILocation(line: 685, column: 20, scope: !293)
!293 = distinct !DILexicalBlock(scope: !290, file: !3, line: 685, column: 8)
!294 = !DILocation(line: 685, column: 22, scope: !293)
!295 = !DILocation(line: 685, column: 8, scope: !290)
!296 = !DILocation(line: 687, column: 25, scope: !297)
!297 = distinct !DILexicalBlock(scope: !298, file: !3, line: 687, column: 9)
!298 = distinct !DILexicalBlock(scope: !293, file: !3, line: 686, column: 3)
!299 = !DILocation(line: 687, column: 17, scope: !297)
!300 = !DILocation(line: 687, column: 28, scope: !297)
!301 = !DILocation(line: 687, column: 9, scope: !297)
!302 = !DILocation(line: 687, column: 32, scope: !297)
!303 = !DILocation(line: 688, column: 9, scope: !297)
!304 = !DILocation(line: 688, column: 28, scope: !297)
!305 = !DILocation(line: 688, column: 20, scope: !297)
!306 = !DILocation(line: 688, column: 31, scope: !297)
!307 = !DILocation(line: 688, column: 35, scope: !297)
!308 = !DILocation(line: 688, column: 42, scope: !297)
!309 = !DILocation(line: 688, column: 12, scope: !297)
!310 = !DILocation(line: 688, column: 50, scope: !297)
!311 = !DILocation(line: 687, column: 9, scope: !298)
!312 = !DILocation(line: 690, column: 17, scope: !313)
!313 = distinct !DILexicalBlock(scope: !297, file: !3, line: 689, column: 7)
!314 = !DILocation(line: 690, column: 9, scope: !313)
!315 = !DILocation(line: 691, column: 17, scope: !313)
!316 = !DILocation(line: 691, column: 33, scope: !313)
!317 = !DILocation(line: 691, column: 25, scope: !313)
!318 = !DILocation(line: 691, column: 36, scope: !313)
!319 = !DILocation(line: 691, column: 9, scope: !313)
!320 = !DILocation(line: 692, column: 13, scope: !313)
!321 = !DILocation(line: 693, column: 9, scope: !313)
!322 = !DILocation(line: 695, column: 3, scope: !298)
!323 = !DILocation(line: 685, column: 47, scope: !293)
!324 = !DILocation(line: 685, column: 8, scope: !293)
!325 = distinct !{!325, !295, !326}
!326 = !DILocation(line: 695, column: 3, scope: !290)
!327 = !DILocation(line: 696, column: 6, scope: !287)
!328 = !DILocation(line: 698, column: 5, scope: !230)
!329 = !DILocation(line: 699, column: 12, scope: !330)
!330 = distinct !DILexicalBlock(scope: !218, file: !3, line: 699, column: 12)
!331 = !DILocation(line: 699, column: 16, scope: !330)
!332 = !DILocation(line: 700, column: 5, scope: !330)
!333 = !DILocation(line: 700, column: 8, scope: !330)
!334 = !DILocation(line: 700, column: 18, scope: !330)
!335 = !DILocation(line: 701, column: 5, scope: !330)
!336 = !DILocation(line: 701, column: 8, scope: !330)
!337 = !DILocation(line: 701, column: 18, scope: !330)
!338 = !DILocation(line: 702, column: 5, scope: !330)
!339 = !DILocation(line: 702, column: 31, scope: !330)
!340 = !DILocation(line: 702, column: 8, scope: !330)
!341 = !DILocation(line: 702, column: 42, scope: !330)
!342 = !DILocation(line: 699, column: 12, scope: !218)
!343 = !DILocation(line: 705, column: 11, scope: !344)
!344 = distinct !DILexicalBlock(scope: !345, file: !3, line: 705, column: 11)
!345 = distinct !DILexicalBlock(scope: !330, file: !3, line: 703, column: 5)
!346 = !DILocation(line: 705, column: 15, scope: !344)
!347 = !DILocation(line: 706, column: 4, scope: !344)
!348 = !DILocation(line: 706, column: 15, scope: !344)
!349 = !DILocation(line: 706, column: 22, scope: !344)
!350 = !DILocation(line: 706, column: 7, scope: !344)
!351 = !DILocation(line: 706, column: 41, scope: !344)
!352 = !DILocation(line: 705, column: 11, scope: !345)
!353 = !DILocalVariable(name: "i", scope: !354, file: !3, line: 708, type: !235)
!354 = distinct !DILexicalBlock(scope: !344, file: !3, line: 707, column: 2)
!355 = !DILocation(line: 708, column: 11, scope: !354)
!356 = !DILocation(line: 709, column: 11, scope: !357)
!357 = distinct !DILexicalBlock(scope: !354, file: !3, line: 709, column: 4)
!358 = !DILocation(line: 709, column: 9, scope: !357)
!359 = !DILocation(line: 709, column: 16, scope: !360)
!360 = distinct !DILexicalBlock(scope: !357, file: !3, line: 709, column: 4)
!361 = !DILocation(line: 709, column: 18, scope: !360)
!362 = !DILocation(line: 709, column: 4, scope: !357)
!363 = !DILocation(line: 711, column: 15, scope: !364)
!364 = distinct !DILexicalBlock(scope: !360, file: !3, line: 710, column: 6)
!365 = !DILocation(line: 711, column: 19, scope: !364)
!366 = !DILocation(line: 711, column: 13, scope: !364)
!367 = !DILocation(line: 712, column: 34, scope: !368)
!368 = distinct !DILexicalBlock(scope: !364, file: !3, line: 712, column: 12)
!369 = !DILocation(line: 712, column: 26, scope: !368)
!370 = !DILocation(line: 712, column: 37, scope: !368)
!371 = !DILocation(line: 712, column: 18, scope: !368)
!372 = !DILocation(line: 712, column: 12, scope: !368)
!373 = !DILocation(line: 712, column: 44, scope: !368)
!374 = !DILocation(line: 712, column: 41, scope: !368)
!375 = !DILocation(line: 713, column: 5, scope: !368)
!376 = !DILocation(line: 713, column: 24, scope: !368)
!377 = !DILocation(line: 713, column: 16, scope: !368)
!378 = !DILocation(line: 713, column: 27, scope: !368)
!379 = !DILocation(line: 713, column: 31, scope: !368)
!380 = !DILocation(line: 713, column: 38, scope: !368)
!381 = !DILocation(line: 713, column: 44, scope: !368)
!382 = !DILocation(line: 713, column: 8, scope: !368)
!383 = !DILocation(line: 713, column: 50, scope: !368)
!384 = !DILocation(line: 712, column: 12, scope: !364)
!385 = !DILocation(line: 715, column: 13, scope: !386)
!386 = distinct !DILexicalBlock(scope: !368, file: !3, line: 714, column: 3)
!387 = !DILocation(line: 715, column: 5, scope: !386)
!388 = !DILocation(line: 716, column: 13, scope: !386)
!389 = !DILocation(line: 716, column: 29, scope: !386)
!390 = !DILocation(line: 716, column: 21, scope: !386)
!391 = !DILocation(line: 716, column: 32, scope: !386)
!392 = !DILocation(line: 716, column: 5, scope: !386)
!393 = !DILocation(line: 717, column: 13, scope: !386)
!394 = !DILocation(line: 717, column: 5, scope: !386)
!395 = !DILocation(line: 718, column: 9, scope: !386)
!396 = !DILocation(line: 719, column: 5, scope: !386)
!397 = !DILocation(line: 721, column: 6, scope: !364)
!398 = !DILocation(line: 709, column: 43, scope: !360)
!399 = !DILocation(line: 709, column: 4, scope: !360)
!400 = distinct !{!400, !362, !401}
!401 = !DILocation(line: 721, column: 6, scope: !357)
!402 = !DILocation(line: 722, column: 2, scope: !354)
!403 = !DILocalVariable(name: "i", scope: !404, file: !3, line: 725, type: !235)
!404 = distinct !DILexicalBlock(scope: !344, file: !3, line: 724, column: 2)
!405 = !DILocation(line: 725, column: 11, scope: !404)
!406 = !DILocation(line: 726, column: 11, scope: !407)
!407 = distinct !DILexicalBlock(scope: !404, file: !3, line: 726, column: 4)
!408 = !DILocation(line: 726, column: 9, scope: !407)
!409 = !DILocation(line: 726, column: 16, scope: !410)
!410 = distinct !DILexicalBlock(scope: !407, file: !3, line: 726, column: 4)
!411 = !DILocation(line: 726, column: 18, scope: !410)
!412 = !DILocation(line: 726, column: 4, scope: !407)
!413 = !DILocation(line: 728, column: 15, scope: !414)
!414 = distinct !DILexicalBlock(scope: !410, file: !3, line: 727, column: 6)
!415 = !DILocation(line: 728, column: 19, scope: !414)
!416 = !DILocation(line: 728, column: 13, scope: !414)
!417 = !DILocation(line: 729, column: 34, scope: !418)
!418 = distinct !DILexicalBlock(scope: !414, file: !3, line: 729, column: 12)
!419 = !DILocation(line: 729, column: 26, scope: !418)
!420 = !DILocation(line: 729, column: 37, scope: !418)
!421 = !DILocation(line: 729, column: 18, scope: !418)
!422 = !DILocation(line: 729, column: 12, scope: !418)
!423 = !DILocation(line: 729, column: 44, scope: !418)
!424 = !DILocation(line: 729, column: 41, scope: !418)
!425 = !DILocation(line: 730, column: 5, scope: !418)
!426 = !DILocation(line: 730, column: 24, scope: !418)
!427 = !DILocation(line: 730, column: 16, scope: !418)
!428 = !DILocation(line: 730, column: 27, scope: !418)
!429 = !DILocation(line: 730, column: 31, scope: !418)
!430 = !DILocation(line: 730, column: 38, scope: !418)
!431 = !DILocation(line: 730, column: 43, scope: !418)
!432 = !DILocation(line: 730, column: 8, scope: !418)
!433 = !DILocation(line: 730, column: 49, scope: !418)
!434 = !DILocation(line: 729, column: 12, scope: !414)
!435 = !DILocation(line: 732, column: 13, scope: !436)
!436 = distinct !DILexicalBlock(scope: !418, file: !3, line: 731, column: 3)
!437 = !DILocation(line: 732, column: 5, scope: !436)
!438 = !DILocation(line: 733, column: 13, scope: !436)
!439 = !DILocation(line: 733, column: 29, scope: !436)
!440 = !DILocation(line: 733, column: 21, scope: !436)
!441 = !DILocation(line: 733, column: 32, scope: !436)
!442 = !DILocation(line: 733, column: 5, scope: !436)
!443 = !DILocation(line: 734, column: 9, scope: !436)
!444 = !DILocation(line: 735, column: 5, scope: !436)
!445 = !DILocation(line: 737, column: 6, scope: !414)
!446 = !DILocation(line: 726, column: 43, scope: !410)
!447 = !DILocation(line: 726, column: 4, scope: !410)
!448 = distinct !{!448, !412, !449}
!449 = !DILocation(line: 737, column: 6, scope: !407)
!450 = !DILocation(line: 739, column: 5, scope: !345)
!451 = !DILocation(line: 740, column: 12, scope: !452)
!452 = distinct !DILexicalBlock(scope: !330, file: !3, line: 740, column: 12)
!453 = !DILocation(line: 740, column: 16, scope: !452)
!454 = !DILocation(line: 740, column: 21, scope: !452)
!455 = !DILocation(line: 740, column: 32, scope: !452)
!456 = !DILocation(line: 740, column: 24, scope: !452)
!457 = !DILocation(line: 740, column: 51, scope: !452)
!458 = !DILocation(line: 741, column: 5, scope: !452)
!459 = !DILocation(line: 741, column: 31, scope: !452)
!460 = !DILocation(line: 741, column: 8, scope: !452)
!461 = !DILocation(line: 741, column: 42, scope: !452)
!462 = !DILocation(line: 740, column: 12, scope: !330)
!463 = !DILocation(line: 744, column: 13, scope: !464)
!464 = distinct !DILexicalBlock(scope: !452, file: !3, line: 742, column: 5)
!465 = !DILocation(line: 744, column: 20, scope: !464)
!466 = !DILocation(line: 744, column: 11, scope: !464)
!467 = !DILocation(line: 745, column: 20, scope: !468)
!468 = distinct !DILexicalBlock(scope: !464, file: !3, line: 745, column: 11)
!469 = !DILocation(line: 745, column: 11, scope: !468)
!470 = !DILocation(line: 745, column: 11, scope: !464)
!471 = !DILocation(line: 747, column: 12, scope: !472)
!472 = distinct !DILexicalBlock(scope: !468, file: !3, line: 746, column: 2)
!473 = !DILocation(line: 747, column: 4, scope: !472)
!474 = !DILocation(line: 748, column: 13, scope: !472)
!475 = !DILocation(line: 748, column: 26, scope: !472)
!476 = !DILocation(line: 748, column: 34, scope: !472)
!477 = !DILocation(line: 748, column: 43, scope: !472)
!478 = !DILocation(line: 748, column: 36, scope: !472)
!479 = !DILocation(line: 748, column: 4, scope: !472)
!480 = !DILocation(line: 749, column: 4, scope: !472)
!481 = !DILocation(line: 750, column: 8, scope: !472)
!482 = !DILocation(line: 751, column: 2, scope: !472)
!483 = !DILocation(line: 752, column: 5, scope: !464)
!484 = !DILocation(line: 753, column: 20, scope: !126)
!485 = !DILocation(line: 753, column: 3, scope: !126)
!486 = !DILocation(line: 754, column: 10, scope: !126)
!487 = !DILocation(line: 754, column: 3, scope: !126)
!488 = distinct !DISubprogram(name: "do_type", scope: !3, file: !3, line: 3445, type: !489, scopeLine: 3446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!489 = !DISubroutineType(types: !490)
!490 = !{!7, !491, !492, !60}
!491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !145, size: 64)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !76, size: 64)
!493 = !DILocalVariable(name: "work", arg: 1, scope: !488, file: !3, line: 3445, type: !491)
!494 = !DILocation(line: 3445, column: 29, scope: !488)
!495 = !DILocalVariable(name: "mangled", arg: 2, scope: !488, file: !3, line: 3445, type: !492)
!496 = !DILocation(line: 3445, column: 48, scope: !488)
!497 = !DILocalVariable(name: "result", arg: 3, scope: !488, file: !3, line: 3445, type: !60)
!498 = !DILocation(line: 3445, column: 65, scope: !488)
!499 = !DILocalVariable(name: "n", scope: !488, file: !3, line: 3447, type: !7)
!500 = !DILocation(line: 3447, column: 7, scope: !488)
!501 = !DILocalVariable(name: "done", scope: !488, file: !3, line: 3448, type: !7)
!502 = !DILocation(line: 3448, column: 7, scope: !488)
!503 = !DILocalVariable(name: "success", scope: !488, file: !3, line: 3449, type: !7)
!504 = !DILocation(line: 3449, column: 7, scope: !488)
!505 = !DILocalVariable(name: "decl", scope: !488, file: !3, line: 3450, type: !61)
!506 = !DILocation(line: 3450, column: 10, scope: !488)
!507 = !DILocalVariable(name: "remembered_type", scope: !488, file: !3, line: 3451, type: !76)
!508 = !DILocation(line: 3451, column: 15, scope: !488)
!509 = !DILocalVariable(name: "type_quals", scope: !488, file: !3, line: 3452, type: !7)
!510 = !DILocation(line: 3452, column: 7, scope: !488)
!511 = !DILocalVariable(name: "tk", scope: !488, file: !3, line: 3453, type: !59)
!512 = !DILocation(line: 3453, column: 15, scope: !488)
!513 = !DILocation(line: 3455, column: 3, scope: !488)
!514 = !DILocation(line: 3456, column: 16, scope: !488)
!515 = !DILocation(line: 3456, column: 3, scope: !488)
!516 = !DILocation(line: 3458, column: 8, scope: !488)
!517 = !DILocation(line: 3459, column: 11, scope: !488)
!518 = !DILocation(line: 3460, column: 3, scope: !488)
!519 = !DILocation(line: 3460, column: 10, scope: !488)
!520 = !DILocation(line: 3460, column: 18, scope: !488)
!521 = !DILocation(line: 3460, column: 22, scope: !488)
!522 = !DILocation(line: 3460, column: 21, scope: !488)
!523 = !DILocation(line: 0, scope: !488)
!524 = !DILocalVariable(name: "member", scope: !525, file: !3, line: 3462, type: !7)
!525 = distinct !DILexicalBlock(scope: !488, file: !3, line: 3461, column: 5)
!526 = !DILocation(line: 3462, column: 11, scope: !525)
!527 = !DILocation(line: 3463, column: 17, scope: !525)
!528 = !DILocation(line: 3463, column: 16, scope: !525)
!529 = !DILocation(line: 3463, column: 15, scope: !525)
!530 = !DILocation(line: 3463, column: 7, scope: !525)
!531 = !DILocation(line: 3469, column: 6, scope: !532)
!532 = distinct !DILexicalBlock(scope: !525, file: !3, line: 3464, column: 2)
!533 = !DILocation(line: 3469, column: 14, scope: !532)
!534 = !DILocation(line: 3470, column: 11, scope: !535)
!535 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3470, column: 8)
!536 = !DILocation(line: 3470, column: 19, scope: !535)
!537 = !DILocation(line: 3470, column: 27, scope: !535)
!538 = !DILocation(line: 3470, column: 8, scope: !532)
!539 = !DILocation(line: 3471, column: 6, scope: !535)
!540 = !DILocation(line: 3472, column: 8, scope: !541)
!541 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3472, column: 8)
!542 = !DILocation(line: 3472, column: 11, scope: !541)
!543 = !DILocation(line: 3472, column: 8, scope: !532)
!544 = !DILocation(line: 3473, column: 9, scope: !541)
!545 = !DILocation(line: 3473, column: 6, scope: !541)
!546 = !DILocation(line: 3474, column: 4, scope: !532)
!547 = !DILocation(line: 3478, column: 6, scope: !532)
!548 = !DILocation(line: 3478, column: 14, scope: !532)
!549 = !DILocation(line: 3479, column: 4, scope: !532)
!550 = !DILocation(line: 3480, column: 8, scope: !551)
!551 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3480, column: 8)
!552 = !DILocation(line: 3480, column: 11, scope: !551)
!553 = !DILocation(line: 3480, column: 8, scope: !532)
!554 = !DILocation(line: 3481, column: 9, scope: !551)
!555 = !DILocation(line: 3481, column: 6, scope: !551)
!556 = !DILocation(line: 3482, column: 4, scope: !532)
!557 = !DILocation(line: 3487, column: 10, scope: !558)
!558 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3486, column: 4)
!559 = !DILocation(line: 3487, column: 6, scope: !558)
!560 = !DILocation(line: 3488, column: 11, scope: !561)
!561 = distinct !DILexicalBlock(scope: !558, file: !3, line: 3488, column: 10)
!562 = !DILocation(line: 3489, column: 3, scope: !561)
!563 = !DILocation(line: 3489, column: 12, scope: !561)
!564 = !DILocation(line: 3489, column: 7, scope: !561)
!565 = !DILocation(line: 3489, column: 17, scope: !561)
!566 = !DILocation(line: 3489, column: 24, scope: !561)
!567 = !DILocation(line: 3489, column: 32, scope: !561)
!568 = !DILocation(line: 3489, column: 27, scope: !561)
!569 = !DILocation(line: 3489, column: 37, scope: !561)
!570 = !DILocation(line: 3488, column: 10, scope: !558)
!571 = !DILocation(line: 3491, column: 3, scope: !572)
!572 = distinct !DILexicalBlock(scope: !561, file: !3, line: 3490, column: 8)
!573 = !DILocation(line: 3492, column: 3, scope: !572)
!574 = !DILocation(line: 3493, column: 8, scope: !572)
!575 = !DILocation(line: 3494, column: 6, scope: !558)
!576 = !DILocation(line: 3495, column: 12, scope: !577)
!577 = distinct !DILexicalBlock(scope: !558, file: !3, line: 3495, column: 10)
!578 = !DILocation(line: 3495, column: 11, scope: !577)
!579 = !DILocation(line: 3495, column: 10, scope: !577)
!580 = !DILocation(line: 3495, column: 20, scope: !577)
!581 = !DILocation(line: 3495, column: 10, scope: !558)
!582 = !DILocation(line: 3496, column: 48, scope: !577)
!583 = !DILocation(line: 3496, column: 54, scope: !577)
!584 = !DILocation(line: 3496, column: 18, scope: !577)
!585 = !DILocation(line: 3496, column: 16, scope: !577)
!586 = !DILocation(line: 3496, column: 8, scope: !577)
!587 = !DILocation(line: 3498, column: 12, scope: !588)
!588 = distinct !DILexicalBlock(scope: !558, file: !3, line: 3498, column: 10)
!589 = !DILocation(line: 3498, column: 11, scope: !588)
!590 = !DILocation(line: 3498, column: 10, scope: !588)
!591 = !DILocation(line: 3498, column: 20, scope: !588)
!592 = !DILocation(line: 3498, column: 10, scope: !558)
!593 = !DILocation(line: 3499, column: 12, scope: !588)
!594 = !DILocation(line: 3499, column: 8, scope: !588)
!595 = !DILocation(line: 3500, column: 6, scope: !558)
!596 = !DILocation(line: 3501, column: 6, scope: !558)
!597 = !DILocation(line: 3506, column: 6, scope: !532)
!598 = !DILocation(line: 3506, column: 14, scope: !532)
!599 = !DILocation(line: 3507, column: 20, scope: !600)
!600 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3507, column: 8)
!601 = !DILocation(line: 3507, column: 9, scope: !600)
!602 = !DILocation(line: 3507, column: 33, scope: !600)
!603 = !DILocation(line: 3507, column: 36, scope: !600)
!604 = !DILocation(line: 3507, column: 41, scope: !600)
!605 = !DILocation(line: 3507, column: 49, scope: !600)
!606 = !DILocation(line: 3507, column: 38, scope: !600)
!607 = !DILocation(line: 3507, column: 8, scope: !532)
!608 = !DILocation(line: 3509, column: 16, scope: !609)
!609 = distinct !DILexicalBlock(scope: !600, file: !3, line: 3508, column: 6)
!610 = !DILocation(line: 3510, column: 6, scope: !609)
!611 = !DILocation(line: 3513, column: 26, scope: !612)
!612 = distinct !DILexicalBlock(scope: !600, file: !3, line: 3512, column: 6)
!613 = !DILocation(line: 3513, column: 34, scope: !612)
!614 = !DILocation(line: 3513, column: 42, scope: !612)
!615 = !DILocation(line: 3513, column: 24, scope: !612)
!616 = !DILocation(line: 3514, column: 16, scope: !612)
!617 = !DILocation(line: 3516, column: 4, scope: !532)
!618 = !DILocation(line: 3520, column: 6, scope: !532)
!619 = !DILocation(line: 3520, column: 14, scope: !532)
!620 = !DILocation(line: 3521, column: 11, scope: !621)
!621 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3521, column: 10)
!622 = !DILocation(line: 3522, column: 3, scope: !621)
!623 = !DILocation(line: 3522, column: 12, scope: !621)
!624 = !DILocation(line: 3522, column: 7, scope: !621)
!625 = !DILocation(line: 3522, column: 17, scope: !621)
!626 = !DILocation(line: 3522, column: 24, scope: !621)
!627 = !DILocation(line: 3522, column: 32, scope: !621)
!628 = !DILocation(line: 3522, column: 27, scope: !621)
!629 = !DILocation(line: 3522, column: 37, scope: !621)
!630 = !DILocation(line: 3521, column: 10, scope: !532)
!631 = !DILocation(line: 3524, column: 8, scope: !632)
!632 = distinct !DILexicalBlock(scope: !621, file: !3, line: 3523, column: 6)
!633 = !DILocation(line: 3525, column: 8, scope: !632)
!634 = !DILocation(line: 3526, column: 6, scope: !632)
!635 = !DILocation(line: 3530, column: 31, scope: !636)
!636 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3530, column: 8)
!637 = !DILocation(line: 3530, column: 37, scope: !636)
!638 = !DILocation(line: 3530, column: 9, scope: !636)
!639 = !DILocation(line: 3531, column: 8, scope: !636)
!640 = !DILocation(line: 3531, column: 14, scope: !636)
!641 = !DILocation(line: 3531, column: 13, scope: !636)
!642 = !DILocation(line: 3531, column: 12, scope: !636)
!643 = !DILocation(line: 3531, column: 22, scope: !636)
!644 = !DILocation(line: 3531, column: 29, scope: !636)
!645 = !DILocation(line: 3531, column: 34, scope: !636)
!646 = !DILocation(line: 3531, column: 33, scope: !636)
!647 = !DILocation(line: 3531, column: 32, scope: !636)
!648 = !DILocation(line: 3531, column: 42, scope: !636)
!649 = !DILocation(line: 3530, column: 8, scope: !532)
!650 = !DILocation(line: 3533, column: 16, scope: !651)
!651 = distinct !DILexicalBlock(scope: !636, file: !3, line: 3532, column: 6)
!652 = !DILocation(line: 3534, column: 8, scope: !651)
!653 = !DILocation(line: 3536, column: 8, scope: !654)
!654 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3536, column: 8)
!655 = !DILocation(line: 3536, column: 16, scope: !654)
!656 = !DILocation(line: 3536, column: 22, scope: !654)
!657 = !DILocation(line: 3536, column: 21, scope: !654)
!658 = !DILocation(line: 3536, column: 20, scope: !654)
!659 = !DILocation(line: 3536, column: 30, scope: !654)
!660 = !DILocation(line: 3536, column: 8, scope: !532)
!661 = !DILocation(line: 3537, column: 8, scope: !654)
!662 = !DILocation(line: 3537, column: 16, scope: !654)
!663 = !DILocation(line: 3537, column: 6, scope: !654)
!664 = !DILocation(line: 3538, column: 4, scope: !532)
!665 = !DILocation(line: 3543, column: 17, scope: !666)
!666 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3542, column: 4)
!667 = !DILocation(line: 3545, column: 17, scope: !666)
!668 = !DILocation(line: 3545, column: 16, scope: !666)
!669 = !DILocation(line: 3545, column: 15, scope: !666)
!670 = !DILocation(line: 3545, column: 25, scope: !666)
!671 = !DILocation(line: 3545, column: 13, scope: !666)
!672 = !DILocation(line: 3546, column: 8, scope: !666)
!673 = !DILocation(line: 3546, column: 16, scope: !666)
!674 = !DILocation(line: 3548, column: 6, scope: !666)
!675 = !DILocation(line: 3552, column: 12, scope: !676)
!676 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3552, column: 10)
!677 = !DILocation(line: 3552, column: 11, scope: !676)
!678 = !DILocation(line: 3552, column: 10, scope: !676)
!679 = !DILocation(line: 3552, column: 20, scope: !676)
!680 = !DILocation(line: 3552, column: 10, scope: !666)
!681 = !DILocation(line: 3553, column: 31, scope: !676)
!682 = !DILocation(line: 3553, column: 8, scope: !676)
!683 = !DILocation(line: 3555, column: 10, scope: !684)
!684 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3555, column: 10)
!685 = !DILocation(line: 3555, column: 10, scope: !666)
!686 = !DILocation(line: 3557, column: 22, scope: !687)
!687 = distinct !DILexicalBlock(scope: !684, file: !3, line: 3556, column: 8)
!688 = !DILocation(line: 3557, column: 7, scope: !687)
!689 = !DILocation(line: 3557, column: 5, scope: !687)
!690 = !DILocation(line: 3558, column: 7, scope: !691)
!691 = distinct !DILexicalBlock(scope: !687, file: !3, line: 3558, column: 7)
!692 = !DILocation(line: 3558, column: 9, scope: !691)
!693 = !DILocation(line: 3559, column: 7, scope: !691)
!694 = !DILocation(line: 3559, column: 25, scope: !691)
!695 = !DILocation(line: 3559, column: 24, scope: !691)
!696 = !DILocation(line: 3559, column: 16, scope: !691)
!697 = !DILocation(line: 3559, column: 10, scope: !691)
!698 = !DILocation(line: 3559, column: 36, scope: !691)
!699 = !DILocation(line: 3559, column: 34, scope: !691)
!700 = !DILocation(line: 3558, column: 7, scope: !687)
!701 = !DILocation(line: 3561, column: 15, scope: !702)
!702 = distinct !DILexicalBlock(scope: !691, file: !3, line: 3560, column: 5)
!703 = !DILocation(line: 3562, column: 7, scope: !702)
!704 = !DILocation(line: 3564, column: 28, scope: !687)
!705 = !DILocation(line: 3564, column: 27, scope: !687)
!706 = !DILocation(line: 3564, column: 37, scope: !687)
!707 = !DILocation(line: 3564, column: 3, scope: !687)
!708 = !DILocation(line: 3565, column: 15, scope: !687)
!709 = !DILocation(line: 3565, column: 4, scope: !687)
!710 = !DILocation(line: 3565, column: 12, scope: !687)
!711 = !DILocation(line: 3566, column: 8, scope: !687)
!712 = !DILocation(line: 3567, column: 17, scope: !713)
!713 = distinct !DILexicalBlock(scope: !684, file: !3, line: 3567, column: 15)
!714 = !DILocation(line: 3567, column: 16, scope: !713)
!715 = !DILocation(line: 3567, column: 15, scope: !713)
!716 = !DILocation(line: 3567, column: 25, scope: !713)
!717 = !DILocation(line: 3567, column: 32, scope: !713)
!718 = !DILocation(line: 3567, column: 37, scope: !713)
!719 = !DILocation(line: 3567, column: 36, scope: !713)
!720 = !DILocation(line: 3567, column: 35, scope: !713)
!721 = !DILocation(line: 3567, column: 45, scope: !713)
!722 = !DILocation(line: 3567, column: 15, scope: !684)
!723 = !DILocalVariable(name: "temp", scope: !724, file: !3, line: 3569, type: !61)
!724 = distinct !DILexicalBlock(scope: !713, file: !3, line: 3568, column: 8)
!725 = !DILocation(line: 3569, column: 10, scope: !724)
!726 = !DILocation(line: 3570, column: 12, scope: !724)
!727 = !DILocation(line: 3570, column: 18, scope: !724)
!728 = !DILocation(line: 3570, column: 3, scope: !724)
!729 = !DILocation(line: 3571, column: 3, scope: !724)
!730 = !DILocation(line: 3572, column: 3, scope: !724)
!731 = !DILocation(line: 3573, column: 8, scope: !724)
!732 = !DILocation(line: 3574, column: 17, scope: !733)
!733 = distinct !DILexicalBlock(scope: !713, file: !3, line: 3574, column: 15)
!734 = !DILocation(line: 3574, column: 16, scope: !733)
!735 = !DILocation(line: 3574, column: 15, scope: !733)
!736 = !DILocation(line: 3574, column: 25, scope: !733)
!737 = !DILocation(line: 3574, column: 15, scope: !713)
!738 = !DILocalVariable(name: "temp", scope: !739, file: !3, line: 3576, type: !61)
!739 = distinct !DILexicalBlock(scope: !733, file: !3, line: 3575, column: 8)
!740 = !DILocation(line: 3576, column: 10, scope: !739)
!741 = !DILocation(line: 3577, column: 3, scope: !739)
!742 = !DILocation(line: 3578, column: 32, scope: !739)
!743 = !DILocation(line: 3578, column: 38, scope: !739)
!744 = !DILocation(line: 3578, column: 13, scope: !739)
!745 = !DILocation(line: 3578, column: 11, scope: !739)
!746 = !DILocation(line: 3580, column: 7, scope: !747)
!747 = distinct !DILexicalBlock(scope: !739, file: !3, line: 3580, column: 7)
!748 = !DILocation(line: 3580, column: 7, scope: !739)
!749 = !DILocation(line: 3582, column: 36, scope: !750)
!750 = distinct !DILexicalBlock(scope: !747, file: !3, line: 3581, column: 5)
!751 = !DILocation(line: 3582, column: 44, scope: !750)
!752 = !DILocation(line: 3582, column: 53, scope: !750)
!753 = !DILocation(line: 3582, column: 46, scope: !750)
!754 = !DILocation(line: 3582, column: 39, scope: !750)
!755 = !DILocation(line: 3582, column: 7, scope: !750)
!756 = !DILocation(line: 3583, column: 7, scope: !750)
!757 = !DILocation(line: 3584, column: 5, scope: !750)
!758 = !DILocation(line: 3586, column: 5, scope: !747)
!759 = !DILocation(line: 3587, column: 8, scope: !739)
!760 = !DILocation(line: 3588, column: 17, scope: !761)
!761 = distinct !DILexicalBlock(scope: !733, file: !3, line: 3588, column: 15)
!762 = !DILocation(line: 3588, column: 16, scope: !761)
!763 = !DILocation(line: 3588, column: 15, scope: !761)
!764 = !DILocation(line: 3588, column: 25, scope: !761)
!765 = !DILocation(line: 3588, column: 15, scope: !733)
!766 = !DILocation(line: 3590, column: 33, scope: !767)
!767 = distinct !DILexicalBlock(scope: !761, file: !3, line: 3589, column: 8)
!768 = !DILocation(line: 3590, column: 39, scope: !767)
!769 = !DILocation(line: 3590, column: 13, scope: !767)
!770 = !DILocation(line: 3590, column: 11, scope: !767)
!771 = !DILocation(line: 3593, column: 8, scope: !772)
!772 = distinct !DILexicalBlock(scope: !767, file: !3, line: 3593, column: 7)
!773 = !DILocation(line: 3593, column: 7, scope: !767)
!774 = !DILocation(line: 3594, column: 5, scope: !772)
!775 = !DILocation(line: 3595, column: 8, scope: !767)
!776 = !DILocation(line: 3598, column: 11, scope: !777)
!777 = distinct !DILexicalBlock(scope: !761, file: !3, line: 3597, column: 8)
!778 = !DILocation(line: 3599, column: 3, scope: !777)
!779 = !DILocation(line: 3602, column: 6, scope: !666)
!780 = !DILocation(line: 3603, column: 10, scope: !781)
!781 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3603, column: 10)
!782 = !DILocation(line: 3603, column: 10, scope: !666)
!783 = !DILocation(line: 3605, column: 13, scope: !784)
!784 = distinct !DILexicalBlock(scope: !781, file: !3, line: 3604, column: 8)
!785 = !DILocation(line: 3605, column: 12, scope: !784)
!786 = !DILocation(line: 3605, column: 11, scope: !784)
!787 = !DILocation(line: 3605, column: 3, scope: !784)
!788 = !DILocation(line: 3610, column: 43, scope: !789)
!789 = distinct !DILexicalBlock(scope: !784, file: !3, line: 3606, column: 5)
!790 = !DILocation(line: 3610, column: 42, scope: !789)
!791 = !DILocation(line: 3610, column: 41, scope: !789)
!792 = !DILocation(line: 3610, column: 21, scope: !789)
!793 = !DILocation(line: 3610, column: 18, scope: !789)
!794 = !DILocation(line: 3611, column: 9, scope: !789)
!795 = !DILocation(line: 3611, column: 17, scope: !789)
!796 = !DILocation(line: 3612, column: 7, scope: !789)
!797 = !DILocation(line: 3615, column: 7, scope: !789)
!798 = !DILocation(line: 3618, column: 10, scope: !799)
!799 = distinct !DILexicalBlock(scope: !784, file: !3, line: 3618, column: 7)
!800 = !DILocation(line: 3618, column: 18, scope: !799)
!801 = !DILocation(line: 3618, column: 7, scope: !799)
!802 = !DILocation(line: 3618, column: 21, scope: !799)
!803 = !DILocation(line: 3618, column: 7, scope: !784)
!804 = !DILocation(line: 3620, column: 15, scope: !805)
!805 = distinct !DILexicalBlock(scope: !799, file: !3, line: 3619, column: 5)
!806 = !DILocation(line: 3621, column: 7, scope: !805)
!807 = !DILocation(line: 3623, column: 8, scope: !784)
!808 = !DILocation(line: 3624, column: 11, scope: !809)
!809 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3624, column: 10)
!810 = !DILocation(line: 3624, column: 18, scope: !809)
!811 = !DILocation(line: 3624, column: 44, scope: !809)
!812 = !DILocation(line: 3624, column: 50, scope: !809)
!813 = !DILocation(line: 3624, column: 22, scope: !809)
!814 = !DILocation(line: 3625, column: 3, scope: !809)
!815 = !DILocation(line: 3625, column: 8, scope: !809)
!816 = !DILocation(line: 3625, column: 7, scope: !809)
!817 = !DILocation(line: 3625, column: 6, scope: !809)
!818 = !DILocation(line: 3625, column: 16, scope: !809)
!819 = !DILocation(line: 3624, column: 10, scope: !666)
!820 = !DILocation(line: 3627, column: 11, scope: !821)
!821 = distinct !DILexicalBlock(scope: !809, file: !3, line: 3626, column: 8)
!822 = !DILocation(line: 3628, column: 3, scope: !821)
!823 = !DILocation(line: 3630, column: 8, scope: !666)
!824 = !DILocation(line: 3630, column: 16, scope: !666)
!825 = !DILocation(line: 3631, column: 12, scope: !826)
!826 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3631, column: 10)
!827 = !DILocation(line: 3631, column: 10, scope: !666)
!828 = !DILocation(line: 3633, column: 3, scope: !829)
!829 = distinct !DILexicalBlock(scope: !826, file: !3, line: 3632, column: 8)
!830 = !DILocation(line: 3635, column: 10, scope: !831)
!831 = distinct !DILexicalBlock(scope: !666, file: !3, line: 3635, column: 10)
!832 = !DILocation(line: 3635, column: 21, scope: !831)
!833 = !DILocation(line: 3635, column: 10, scope: !666)
!834 = !DILocation(line: 3637, column: 3, scope: !835)
!835 = distinct !DILexicalBlock(scope: !836, file: !3, line: 3637, column: 3)
!836 = distinct !DILexicalBlock(scope: !837, file: !3, line: 3637, column: 3)
!837 = distinct !DILexicalBlock(scope: !831, file: !3, line: 3636, column: 8)
!838 = !DILocation(line: 3637, column: 3, scope: !836)
!839 = !DILocation(line: 3638, column: 43, scope: !837)
!840 = !DILocation(line: 3638, column: 25, scope: !837)
!841 = !DILocation(line: 3638, column: 3, scope: !837)
!842 = !DILocation(line: 3639, column: 8, scope: !837)
!843 = !DILocation(line: 3640, column: 6, scope: !666)
!844 = !DILocation(line: 3643, column: 6, scope: !532)
!845 = !DILocation(line: 3643, column: 14, scope: !532)
!846 = !DILocation(line: 3644, column: 4, scope: !532)
!847 = !DILocation(line: 3649, column: 8, scope: !848)
!848 = distinct !DILexicalBlock(scope: !532, file: !3, line: 3649, column: 8)
!849 = !DILocation(line: 3649, column: 8, scope: !532)
!850 = !DILocation(line: 3651, column: 13, scope: !851)
!851 = distinct !DILexicalBlock(scope: !852, file: !3, line: 3651, column: 12)
!852 = distinct !DILexicalBlock(scope: !848, file: !3, line: 3650, column: 6)
!853 = !DILocation(line: 3651, column: 12, scope: !852)
!854 = !DILocation(line: 3652, column: 3, scope: !851)
!855 = !DILocation(line: 3654, column: 53, scope: !852)
!856 = !DILocation(line: 3654, column: 52, scope: !852)
!857 = !DILocation(line: 3654, column: 51, scope: !852)
!858 = !DILocation(line: 3654, column: 31, scope: !852)
!859 = !DILocation(line: 3654, column: 8, scope: !852)
!860 = !DILocation(line: 3655, column: 6, scope: !852)
!861 = !DILocation(line: 3656, column: 6, scope: !532)
!862 = !DILocation(line: 3656, column: 14, scope: !532)
!863 = !DILocation(line: 3657, column: 4, scope: !532)
!864 = !DILocation(line: 3664, column: 9, scope: !532)
!865 = !DILocation(line: 3665, column: 4, scope: !532)
!866 = distinct !{!866, !518, !867}
!867 = !DILocation(line: 3667, column: 5, scope: !488)
!868 = !DILocation(line: 3669, column: 7, scope: !869)
!869 = distinct !DILexicalBlock(scope: !488, file: !3, line: 3669, column: 7)
!870 = !DILocation(line: 3669, column: 7, scope: !488)
!871 = !DILocation(line: 3669, column: 26, scope: !869)
!872 = !DILocation(line: 3669, column: 25, scope: !869)
!873 = !DILocation(line: 3669, column: 24, scope: !869)
!874 = !DILocation(line: 3669, column: 16, scope: !869)
!875 = !DILocation(line: 3675, column: 39, scope: !876)
!876 = distinct !DILexicalBlock(scope: !877, file: !3, line: 3674, column: 7)
!877 = distinct !DILexicalBlock(scope: !869, file: !3, line: 3670, column: 5)
!878 = !DILocation(line: 3675, column: 45, scope: !876)
!879 = !DILocation(line: 3675, column: 54, scope: !876)
!880 = !DILocation(line: 3675, column: 19, scope: !876)
!881 = !DILocation(line: 3675, column: 17, scope: !876)
!882 = !DILocation(line: 3676, column: 9, scope: !876)
!883 = !DILocation(line: 3681, column: 9, scope: !877)
!884 = !DILocation(line: 3681, column: 17, scope: !877)
!885 = !DILocation(line: 3682, column: 23, scope: !886)
!886 = distinct !DILexicalBlock(scope: !877, file: !3, line: 3682, column: 11)
!887 = !DILocation(line: 3682, column: 12, scope: !886)
!888 = !DILocation(line: 3682, column: 36, scope: !886)
!889 = !DILocation(line: 3682, column: 39, scope: !886)
!890 = !DILocation(line: 3682, column: 44, scope: !886)
!891 = !DILocation(line: 3682, column: 52, scope: !886)
!892 = !DILocation(line: 3682, column: 41, scope: !886)
!893 = !DILocation(line: 3682, column: 11, scope: !877)
!894 = !DILocation(line: 3683, column: 10, scope: !886)
!895 = !DILocation(line: 3683, column: 2, scope: !886)
!896 = !DILocation(line: 3685, column: 17, scope: !886)
!897 = !DILocation(line: 3685, column: 25, scope: !886)
!898 = !DILocation(line: 3685, column: 31, scope: !886)
!899 = !DILocation(line: 3685, column: 40, scope: !886)
!900 = !DILocation(line: 3685, column: 2, scope: !886)
!901 = !DILocation(line: 3686, column: 7, scope: !877)
!902 = !DILocalVariable(name: "idx", scope: !903, file: !3, line: 3692, type: !7)
!903 = distinct !DILexicalBlock(scope: !877, file: !3, line: 3691, column: 7)
!904 = !DILocation(line: 3692, column: 6, scope: !903)
!905 = !DILocation(line: 3694, column: 4, scope: !903)
!906 = !DILocation(line: 3694, column: 12, scope: !903)
!907 = !DILocation(line: 3695, column: 40, scope: !903)
!908 = !DILocation(line: 3695, column: 8, scope: !903)
!909 = !DILocation(line: 3695, column: 6, scope: !903)
!910 = !DILocation(line: 3697, column: 6, scope: !911)
!911 = distinct !DILexicalBlock(scope: !903, file: !3, line: 3697, column: 6)
!912 = !DILocation(line: 3697, column: 10, scope: !911)
!913 = !DILocation(line: 3698, column: 6, scope: !911)
!914 = !DILocation(line: 3698, column: 10, scope: !911)
!915 = !DILocation(line: 3698, column: 16, scope: !911)
!916 = !DILocation(line: 3698, column: 28, scope: !911)
!917 = !DILocation(line: 3698, column: 31, scope: !911)
!918 = !DILocation(line: 3698, column: 38, scope: !911)
!919 = !DILocation(line: 3698, column: 44, scope: !911)
!920 = !DILocation(line: 3698, column: 35, scope: !911)
!921 = !DILocation(line: 3699, column: 6, scope: !911)
!922 = !DILocation(line: 3699, column: 41, scope: !911)
!923 = !DILocation(line: 3699, column: 9, scope: !911)
!924 = !DILocation(line: 3699, column: 50, scope: !911)
!925 = !DILocation(line: 3697, column: 6, scope: !903)
!926 = !DILocation(line: 3701, column: 14, scope: !927)
!927 = distinct !DILexicalBlock(scope: !911, file: !3, line: 3700, column: 4)
!928 = !DILocation(line: 3702, column: 6, scope: !927)
!929 = !DILocation(line: 3705, column: 6, scope: !930)
!930 = distinct !DILexicalBlock(scope: !903, file: !3, line: 3705, column: 6)
!931 = !DILocation(line: 3705, column: 12, scope: !930)
!932 = !DILocation(line: 3705, column: 6, scope: !903)
!933 = !DILocation(line: 3706, column: 19, scope: !930)
!934 = !DILocation(line: 3706, column: 27, scope: !930)
!935 = !DILocation(line: 3706, column: 33, scope: !930)
!936 = !DILocation(line: 3706, column: 45, scope: !930)
!937 = !DILocation(line: 3706, column: 4, scope: !930)
!938 = !DILocation(line: 3708, column: 32, scope: !930)
!939 = !DILocation(line: 3708, column: 40, scope: !930)
!940 = !DILocation(line: 3708, column: 4, scope: !930)
!941 = !DILocation(line: 3710, column: 10, scope: !903)
!942 = !DILocation(line: 3712, column: 5, scope: !877)
!943 = !DILocation(line: 3715, column: 37, scope: !877)
!944 = !DILocation(line: 3715, column: 43, scope: !877)
!945 = !DILocation(line: 3715, column: 52, scope: !877)
!946 = !DILocation(line: 3715, column: 17, scope: !877)
!947 = !DILocation(line: 3715, column: 15, scope: !877)
!948 = !DILocation(line: 3716, column: 11, scope: !949)
!949 = distinct !DILexicalBlock(scope: !877, file: !3, line: 3716, column: 11)
!950 = !DILocation(line: 3716, column: 14, scope: !949)
!951 = !DILocation(line: 3716, column: 11, scope: !877)
!952 = !DILocation(line: 3717, column: 21, scope: !949)
!953 = !DILocation(line: 3717, column: 5, scope: !949)
!954 = !DILocation(line: 3717, column: 2, scope: !949)
!955 = !DILocation(line: 3718, column: 7, scope: !877)
!956 = !DILocation(line: 3719, column: 5, scope: !877)
!957 = !DILocation(line: 3721, column: 7, scope: !958)
!958 = distinct !DILexicalBlock(scope: !488, file: !3, line: 3721, column: 7)
!959 = !DILocation(line: 3721, column: 7, scope: !488)
!960 = !DILocation(line: 3723, column: 12, scope: !961)
!961 = distinct !DILexicalBlock(scope: !962, file: !3, line: 3723, column: 11)
!962 = distinct !DILexicalBlock(scope: !958, file: !3, line: 3722, column: 5)
!963 = !DILocation(line: 3723, column: 11, scope: !962)
!964 = !DILocation(line: 3725, column: 19, scope: !965)
!965 = distinct !DILexicalBlock(scope: !961, file: !3, line: 3724, column: 2)
!966 = !DILocation(line: 3725, column: 4, scope: !965)
!967 = !DILocation(line: 3726, column: 20, scope: !965)
!968 = !DILocation(line: 3726, column: 4, scope: !965)
!969 = !DILocation(line: 3727, column: 2, scope: !965)
!970 = !DILocation(line: 3728, column: 5, scope: !962)
!971 = !DILocation(line: 3730, column: 20, scope: !958)
!972 = !DILocation(line: 3730, column: 5, scope: !958)
!973 = !DILocation(line: 3731, column: 3, scope: !488)
!974 = !DILocation(line: 3733, column: 7, scope: !975)
!975 = distinct !DILexicalBlock(scope: !488, file: !3, line: 3733, column: 7)
!976 = !DILocation(line: 3733, column: 7, scope: !488)
!977 = !DILocation(line: 3735, column: 20, scope: !975)
!978 = !DILocation(line: 3735, column: 23, scope: !975)
!979 = !DILocation(line: 3735, column: 19, scope: !975)
!980 = !DILocation(line: 3735, column: 51, scope: !975)
!981 = !DILocation(line: 3735, column: 5, scope: !975)
!982 = !DILocation(line: 3737, column: 5, scope: !975)
!983 = !DILocation(line: 3738, column: 1, scope: !488)
!984 = distinct !DISubprogram(name: "string_delete", scope: !3, file: !3, line: 4680, type: !985, scopeLine: 4681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!985 = !DISubroutineType(types: !986)
!986 = !{null, !60}
!987 = !DILocalVariable(name: "s", arg: 1, scope: !984, file: !3, line: 4680, type: !60)
!988 = !DILocation(line: 4680, column: 24, scope: !984)
!989 = !DILocation(line: 4682, column: 7, scope: !990)
!990 = distinct !DILexicalBlock(scope: !984, file: !3, line: 4682, column: 7)
!991 = !DILocation(line: 4682, column: 10, scope: !990)
!992 = !DILocation(line: 4682, column: 12, scope: !990)
!993 = !DILocation(line: 4682, column: 7, scope: !984)
!994 = !DILocation(line: 4684, column: 13, scope: !995)
!995 = distinct !DILexicalBlock(scope: !990, file: !3, line: 4683, column: 5)
!996 = !DILocation(line: 4684, column: 16, scope: !995)
!997 = !DILocation(line: 4684, column: 7, scope: !995)
!998 = !DILocation(line: 4685, column: 21, scope: !995)
!999 = !DILocation(line: 4685, column: 24, scope: !995)
!1000 = !DILocation(line: 4685, column: 26, scope: !995)
!1001 = !DILocation(line: 4685, column: 14, scope: !995)
!1002 = !DILocation(line: 4685, column: 17, scope: !995)
!1003 = !DILocation(line: 4685, column: 19, scope: !995)
!1004 = !DILocation(line: 4685, column: 7, scope: !995)
!1005 = !DILocation(line: 4685, column: 10, scope: !995)
!1006 = !DILocation(line: 4685, column: 12, scope: !995)
!1007 = !DILocation(line: 4686, column: 5, scope: !995)
!1008 = !DILocation(line: 4687, column: 1, scope: !984)
!1009 = distinct !DISubprogram(name: "squangle_mop_up", scope: !3, file: !3, line: 1140, type: !1010, scopeLine: 1141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1010 = !DISubroutineType(types: !1011)
!1011 = !{null, !491}
!1012 = !DILocalVariable(name: "work", arg: 1, scope: !1009, file: !3, line: 1140, type: !491)
!1013 = !DILocation(line: 1140, column: 37, scope: !1009)
!1014 = !DILocation(line: 1143, column: 25, scope: !1009)
!1015 = !DILocation(line: 1143, column: 3, scope: !1009)
!1016 = !DILocation(line: 1144, column: 7, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !1009, file: !3, line: 1144, column: 7)
!1018 = !DILocation(line: 1144, column: 15, scope: !1017)
!1019 = !DILocation(line: 1144, column: 24, scope: !1017)
!1020 = !DILocation(line: 1144, column: 7, scope: !1009)
!1021 = !DILocation(line: 1146, column: 22, scope: !1022)
!1022 = distinct !DILexicalBlock(scope: !1017, file: !3, line: 1145, column: 5)
!1023 = !DILocation(line: 1146, column: 30, scope: !1022)
!1024 = !DILocation(line: 1146, column: 13, scope: !1022)
!1025 = !DILocation(line: 1146, column: 7, scope: !1022)
!1026 = !DILocation(line: 1147, column: 5, scope: !1022)
!1027 = !DILocation(line: 1148, column: 7, scope: !1028)
!1028 = distinct !DILexicalBlock(scope: !1009, file: !3, line: 1148, column: 7)
!1029 = !DILocation(line: 1148, column: 15, scope: !1028)
!1030 = !DILocation(line: 1148, column: 24, scope: !1028)
!1031 = !DILocation(line: 1148, column: 7, scope: !1009)
!1032 = !DILocation(line: 1150, column: 22, scope: !1033)
!1033 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 1149, column: 5)
!1034 = !DILocation(line: 1150, column: 30, scope: !1033)
!1035 = !DILocation(line: 1150, column: 13, scope: !1033)
!1036 = !DILocation(line: 1150, column: 7, scope: !1033)
!1037 = !DILocation(line: 1151, column: 5, scope: !1033)
!1038 = !DILocation(line: 1152, column: 1, scope: !1009)
!1039 = distinct !DISubprogram(name: "cplus_mangle_opname", scope: !3, file: !3, line: 765, type: !1040, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1040 = !DISubroutineType(types: !1041)
!1041 = !{!76, !76, !7}
!1042 = !DILocalVariable(name: "opname", arg: 1, scope: !1039, file: !3, line: 765, type: !76)
!1043 = !DILocation(line: 765, column: 34, scope: !1039)
!1044 = !DILocalVariable(name: "options", arg: 2, scope: !1039, file: !3, line: 765, type: !7)
!1045 = !DILocation(line: 765, column: 46, scope: !1039)
!1046 = !DILocalVariable(name: "i", scope: !1039, file: !3, line: 767, type: !235)
!1047 = !DILocation(line: 767, column: 10, scope: !1039)
!1048 = !DILocalVariable(name: "len", scope: !1039, file: !3, line: 768, type: !7)
!1049 = !DILocation(line: 768, column: 7, scope: !1039)
!1050 = !DILocation(line: 770, column: 17, scope: !1039)
!1051 = !DILocation(line: 770, column: 9, scope: !1039)
!1052 = !DILocation(line: 770, column: 7, scope: !1039)
!1053 = !DILocation(line: 771, column: 10, scope: !1054)
!1054 = distinct !DILexicalBlock(scope: !1039, file: !3, line: 771, column: 3)
!1055 = !DILocation(line: 771, column: 8, scope: !1054)
!1056 = !DILocation(line: 771, column: 15, scope: !1057)
!1057 = distinct !DILexicalBlock(scope: !1054, file: !3, line: 771, column: 3)
!1058 = !DILocation(line: 771, column: 17, scope: !1057)
!1059 = !DILocation(line: 771, column: 3, scope: !1054)
!1060 = !DILocation(line: 773, column: 33, scope: !1061)
!1061 = distinct !DILexicalBlock(scope: !1062, file: !3, line: 773, column: 11)
!1062 = distinct !DILexicalBlock(scope: !1057, file: !3, line: 772, column: 5)
!1063 = !DILocation(line: 773, column: 25, scope: !1061)
!1064 = !DILocation(line: 773, column: 36, scope: !1061)
!1065 = !DILocation(line: 773, column: 17, scope: !1061)
!1066 = !DILocation(line: 773, column: 11, scope: !1061)
!1067 = !DILocation(line: 773, column: 44, scope: !1061)
!1068 = !DILocation(line: 773, column: 41, scope: !1061)
!1069 = !DILocation(line: 774, column: 4, scope: !1061)
!1070 = !DILocation(line: 774, column: 8, scope: !1061)
!1071 = !DILocation(line: 774, column: 16, scope: !1061)
!1072 = !DILocation(line: 774, column: 41, scope: !1061)
!1073 = !DILocation(line: 774, column: 33, scope: !1061)
!1074 = !DILocation(line: 774, column: 44, scope: !1061)
!1075 = !DILocation(line: 774, column: 50, scope: !1061)
!1076 = !DILocation(line: 774, column: 29, scope: !1061)
!1077 = !DILocation(line: 775, column: 4, scope: !1061)
!1078 = !DILocation(line: 775, column: 23, scope: !1061)
!1079 = !DILocation(line: 775, column: 15, scope: !1061)
!1080 = !DILocation(line: 775, column: 26, scope: !1061)
!1081 = !DILocation(line: 775, column: 31, scope: !1061)
!1082 = !DILocation(line: 775, column: 39, scope: !1061)
!1083 = !DILocation(line: 775, column: 7, scope: !1061)
!1084 = !DILocation(line: 775, column: 44, scope: !1061)
!1085 = !DILocation(line: 773, column: 11, scope: !1062)
!1086 = !DILocation(line: 776, column: 17, scope: !1061)
!1087 = !DILocation(line: 776, column: 9, scope: !1061)
!1088 = !DILocation(line: 776, column: 20, scope: !1061)
!1089 = !DILocation(line: 776, column: 2, scope: !1061)
!1090 = !DILocation(line: 777, column: 5, scope: !1062)
!1091 = !DILocation(line: 771, column: 42, scope: !1057)
!1092 = !DILocation(line: 771, column: 3, scope: !1057)
!1093 = distinct !{!1093, !1059, !1094}
!1094 = !DILocation(line: 777, column: 5, scope: !1054)
!1095 = !DILocation(line: 778, column: 3, scope: !1039)
!1096 = !DILocation(line: 779, column: 1, scope: !1039)
!1097 = distinct !DISubprogram(name: "cplus_demangle_set_style", scope: !3, file: !3, line: 785, type: !1098, scopeLine: 786, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1098 = !DISubroutineType(types: !1099)
!1099 = !{!5, !5}
!1100 = !DILocalVariable(name: "style", arg: 1, scope: !1097, file: !3, line: 785, type: !5)
!1101 = !DILocation(line: 785, column: 50, scope: !1097)
!1102 = !DILocalVariable(name: "demangler", scope: !1097, file: !3, line: 787, type: !1103)
!1103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !71, size: 64)
!1104 = !DILocation(line: 787, column: 34, scope: !1097)
!1105 = !DILocation(line: 789, column: 3, scope: !1097)
!1106 = !DILocation(line: 789, column: 10, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1108, file: !3, line: 789, column: 3)
!1108 = distinct !DILexicalBlock(scope: !1097, file: !3, line: 789, column: 3)
!1109 = !DILocation(line: 789, column: 21, scope: !1107)
!1110 = !DILocation(line: 789, column: 38, scope: !1107)
!1111 = !DILocation(line: 789, column: 3, scope: !1108)
!1112 = !DILocation(line: 790, column: 9, scope: !1113)
!1113 = distinct !DILexicalBlock(scope: !1107, file: !3, line: 790, column: 9)
!1114 = !DILocation(line: 790, column: 18, scope: !1113)
!1115 = !DILocation(line: 790, column: 29, scope: !1113)
!1116 = !DILocation(line: 790, column: 15, scope: !1113)
!1117 = !DILocation(line: 790, column: 9, scope: !1107)
!1118 = !DILocation(line: 792, column: 29, scope: !1119)
!1119 = distinct !DILexicalBlock(scope: !1113, file: !3, line: 791, column: 7)
!1120 = !DILocation(line: 792, column: 27, scope: !1119)
!1121 = !DILocation(line: 793, column: 9, scope: !1119)
!1122 = !DILocation(line: 793, column: 2, scope: !1119)
!1123 = !DILocation(line: 789, column: 61, scope: !1107)
!1124 = !DILocation(line: 789, column: 3, scope: !1107)
!1125 = distinct !{!1125, !1111, !1126}
!1126 = !DILocation(line: 794, column: 7, scope: !1108)
!1127 = !DILocation(line: 796, column: 3, scope: !1097)
!1128 = !DILocation(line: 797, column: 1, scope: !1097)
!1129 = distinct !DISubprogram(name: "cplus_demangle_name_to_style", scope: !3, file: !3, line: 802, type: !1130, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1130 = !DISubroutineType(types: !1131)
!1131 = !{!5, !76}
!1132 = !DILocalVariable(name: "name", arg: 1, scope: !1129, file: !3, line: 802, type: !76)
!1133 = !DILocation(line: 802, column: 43, scope: !1129)
!1134 = !DILocalVariable(name: "demangler", scope: !1129, file: !3, line: 804, type: !1103)
!1135 = !DILocation(line: 804, column: 34, scope: !1129)
!1136 = !DILocation(line: 806, column: 3, scope: !1129)
!1137 = !DILocation(line: 806, column: 10, scope: !1138)
!1138 = distinct !DILexicalBlock(scope: !1139, file: !3, line: 806, column: 3)
!1139 = distinct !DILexicalBlock(scope: !1129, file: !3, line: 806, column: 3)
!1140 = !DILocation(line: 806, column: 21, scope: !1138)
!1141 = !DILocation(line: 806, column: 38, scope: !1138)
!1142 = !DILocation(line: 806, column: 3, scope: !1139)
!1143 = !DILocation(line: 807, column: 17, scope: !1144)
!1144 = distinct !DILexicalBlock(scope: !1138, file: !3, line: 807, column: 9)
!1145 = !DILocation(line: 807, column: 23, scope: !1144)
!1146 = !DILocation(line: 807, column: 34, scope: !1144)
!1147 = !DILocation(line: 807, column: 9, scope: !1144)
!1148 = !DILocation(line: 807, column: 57, scope: !1144)
!1149 = !DILocation(line: 807, column: 9, scope: !1138)
!1150 = !DILocation(line: 808, column: 14, scope: !1144)
!1151 = !DILocation(line: 808, column: 25, scope: !1144)
!1152 = !DILocation(line: 808, column: 7, scope: !1144)
!1153 = !DILocation(line: 807, column: 60, scope: !1144)
!1154 = !DILocation(line: 806, column: 61, scope: !1138)
!1155 = !DILocation(line: 806, column: 3, scope: !1138)
!1156 = distinct !{!1156, !1142, !1157}
!1157 = !DILocation(line: 808, column: 25, scope: !1139)
!1158 = !DILocation(line: 810, column: 3, scope: !1129)
!1159 = !DILocation(line: 811, column: 1, scope: !1129)
!1160 = distinct !DISubprogram(name: "cplus_demangle", scope: !3, file: !3, line: 842, type: !86, scopeLine: 843, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1161 = !DILocalVariable(name: "mangled", arg: 1, scope: !1160, file: !3, line: 842, type: !76)
!1162 = !DILocation(line: 842, column: 29, scope: !1160)
!1163 = !DILocalVariable(name: "options", arg: 2, scope: !1160, file: !3, line: 842, type: !7)
!1164 = !DILocation(line: 842, column: 42, scope: !1160)
!1165 = !DILocalVariable(name: "ret", scope: !1160, file: !3, line: 844, type: !52)
!1166 = !DILocation(line: 844, column: 9, scope: !1160)
!1167 = !DILocalVariable(name: "work", scope: !1160, file: !3, line: 845, type: !144)
!1168 = !DILocation(line: 845, column: 21, scope: !1160)
!1169 = !DILocation(line: 847, column: 7, scope: !1170)
!1170 = distinct !DILexicalBlock(scope: !1160, file: !3, line: 847, column: 7)
!1171 = !DILocation(line: 847, column: 32, scope: !1170)
!1172 = !DILocation(line: 847, column: 7, scope: !1160)
!1173 = !DILocation(line: 848, column: 21, scope: !1170)
!1174 = !DILocation(line: 848, column: 12, scope: !1170)
!1175 = !DILocation(line: 848, column: 5, scope: !1170)
!1176 = !DILocation(line: 850, column: 3, scope: !1160)
!1177 = !DILocation(line: 851, column: 19, scope: !1160)
!1178 = !DILocation(line: 851, column: 9, scope: !1160)
!1179 = !DILocation(line: 851, column: 17, scope: !1160)
!1180 = !DILocation(line: 852, column: 14, scope: !1181)
!1181 = distinct !DILexicalBlock(scope: !1160, file: !3, line: 852, column: 7)
!1182 = !DILocation(line: 852, column: 22, scope: !1181)
!1183 = !DILocation(line: 852, column: 41, scope: !1181)
!1184 = !DILocation(line: 852, column: 7, scope: !1160)
!1185 = !DILocation(line: 853, column: 28, scope: !1181)
!1186 = !DILocation(line: 853, column: 53, scope: !1181)
!1187 = !DILocation(line: 853, column: 11, scope: !1181)
!1188 = !DILocation(line: 853, column: 19, scope: !1181)
!1189 = !DILocation(line: 853, column: 5, scope: !1181)
!1190 = !DILocation(line: 856, column: 7, scope: !1191)
!1191 = distinct !DILexicalBlock(scope: !1160, file: !3, line: 856, column: 7)
!1192 = !DILocation(line: 856, column: 25, scope: !1191)
!1193 = !DILocation(line: 856, column: 28, scope: !1191)
!1194 = !DILocation(line: 856, column: 7, scope: !1160)
!1195 = !DILocation(line: 858, column: 32, scope: !1196)
!1196 = distinct !DILexicalBlock(scope: !1191, file: !3, line: 857, column: 5)
!1197 = !DILocation(line: 858, column: 47, scope: !1196)
!1198 = !DILocation(line: 858, column: 13, scope: !1196)
!1199 = !DILocation(line: 858, column: 11, scope: !1196)
!1200 = !DILocation(line: 859, column: 11, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1196, file: !3, line: 859, column: 11)
!1202 = !DILocation(line: 859, column: 15, scope: !1201)
!1203 = !DILocation(line: 859, column: 18, scope: !1201)
!1204 = !DILocation(line: 859, column: 11, scope: !1196)
!1205 = !DILocation(line: 860, column: 9, scope: !1201)
!1206 = !DILocation(line: 860, column: 2, scope: !1201)
!1207 = !DILocation(line: 861, column: 5, scope: !1196)
!1208 = !DILocation(line: 863, column: 7, scope: !1209)
!1209 = distinct !DILexicalBlock(scope: !1160, file: !3, line: 863, column: 7)
!1210 = !DILocation(line: 863, column: 7, scope: !1160)
!1211 = !DILocation(line: 865, column: 31, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1209, file: !3, line: 864, column: 5)
!1213 = !DILocation(line: 865, column: 13, scope: !1212)
!1214 = !DILocation(line: 865, column: 11, scope: !1212)
!1215 = !DILocation(line: 866, column: 11, scope: !1216)
!1216 = distinct !DILexicalBlock(scope: !1212, file: !3, line: 866, column: 11)
!1217 = !DILocation(line: 866, column: 11, scope: !1212)
!1218 = !DILocation(line: 867, column: 16, scope: !1216)
!1219 = !DILocation(line: 867, column: 9, scope: !1216)
!1220 = !DILocation(line: 868, column: 5, scope: !1212)
!1221 = !DILocation(line: 870, column: 7, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1160, file: !3, line: 870, column: 7)
!1223 = !DILocation(line: 870, column: 7, scope: !1160)
!1224 = !DILocation(line: 871, column: 26, scope: !1222)
!1225 = !DILocation(line: 871, column: 35, scope: !1222)
!1226 = !DILocation(line: 871, column: 12, scope: !1222)
!1227 = !DILocation(line: 871, column: 5, scope: !1222)
!1228 = !DILocation(line: 873, column: 34, scope: !1160)
!1229 = !DILocation(line: 873, column: 40, scope: !1160)
!1230 = !DILocation(line: 873, column: 9, scope: !1160)
!1231 = !DILocation(line: 873, column: 7, scope: !1160)
!1232 = !DILocation(line: 874, column: 20, scope: !1160)
!1233 = !DILocation(line: 874, column: 3, scope: !1160)
!1234 = !DILocation(line: 875, column: 11, scope: !1160)
!1235 = !DILocation(line: 875, column: 3, scope: !1160)
!1236 = !DILocation(line: 876, column: 1, scope: !1160)
!1237 = !DILocalVariable(name: "mangled", arg: 1, scope: !85, file: !3, line: 881, type: !76)
!1238 = !DILocation(line: 881, column: 27, scope: !85)
!1239 = !DILocalVariable(name: "option", arg: 2, scope: !85, file: !3, line: 881, type: !7)
!1240 = !DILocation(line: 881, column: 40, scope: !85)
!1241 = !DILocalVariable(name: "len0", scope: !85, file: !3, line: 883, type: !7)
!1242 = !DILocation(line: 883, column: 7, scope: !85)
!1243 = !DILocalVariable(name: "p", scope: !85, file: !3, line: 884, type: !76)
!1244 = !DILocation(line: 884, column: 15, scope: !85)
!1245 = !DILocalVariable(name: "d", scope: !85, file: !3, line: 885, type: !52)
!1246 = !DILocation(line: 885, column: 9, scope: !85)
!1247 = !DILocalVariable(name: "demangled", scope: !85, file: !3, line: 886, type: !52)
!1248 = !DILocation(line: 886, column: 9, scope: !85)
!1249 = !DILocation(line: 889, column: 16, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !85, file: !3, line: 889, column: 7)
!1251 = !DILocation(line: 889, column: 7, scope: !1250)
!1252 = !DILocation(line: 889, column: 37, scope: !1250)
!1253 = !DILocation(line: 889, column: 7, scope: !85)
!1254 = !DILocation(line: 890, column: 13, scope: !1250)
!1255 = !DILocation(line: 890, column: 5, scope: !1250)
!1256 = !DILocation(line: 893, column: 8, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !85, file: !3, line: 893, column: 7)
!1258 = !DILocation(line: 893, column: 7, scope: !85)
!1259 = !DILocation(line: 894, column: 5, scope: !1257)
!1260 = !DILocation(line: 900, column: 18, scope: !85)
!1261 = !DILocation(line: 900, column: 10, scope: !85)
!1262 = !DILocation(line: 900, column: 27, scope: !85)
!1263 = !DILocation(line: 900, column: 31, scope: !85)
!1264 = !DILocation(line: 900, column: 8, scope: !85)
!1265 = !DILocation(line: 901, column: 15, scope: !85)
!1266 = !DILocation(line: 901, column: 13, scope: !85)
!1267 = !DILocation(line: 903, column: 7, scope: !85)
!1268 = !DILocation(line: 903, column: 5, scope: !85)
!1269 = !DILocation(line: 904, column: 7, scope: !85)
!1270 = !DILocation(line: 904, column: 5, scope: !85)
!1271 = !DILocation(line: 905, column: 3, scope: !85)
!1272 = !DILocation(line: 908, column: 11, scope: !1273)
!1273 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 908, column: 11)
!1274 = distinct !DILexicalBlock(scope: !85, file: !3, line: 906, column: 5)
!1275 = !DILocation(line: 908, column: 11, scope: !1274)
!1276 = !DILocation(line: 910, column: 11, scope: !1277)
!1277 = distinct !DILexicalBlock(scope: !1273, file: !3, line: 909, column: 9)
!1278 = !DILocation(line: 911, column: 22, scope: !1277)
!1279 = !DILocation(line: 911, column: 20, scope: !1277)
!1280 = !DILocation(line: 911, column: 15, scope: !1277)
!1281 = !DILocation(line: 911, column: 18, scope: !1277)
!1282 = !DILocation(line: 911, column: 13, scope: !1277)
!1283 = !DILocation(line: 912, column: 18, scope: !1277)
!1284 = !DILocation(line: 912, column: 30, scope: !1277)
!1285 = !DILocation(line: 912, column: 33, scope: !1277)
!1286 = !DILocation(line: 913, column: 18, scope: !1277)
!1287 = !DILocation(line: 913, column: 22, scope: !1277)
!1288 = !DILocation(line: 913, column: 27, scope: !1277)
!1289 = !DILocation(line: 913, column: 34, scope: !1277)
!1290 = !DILocation(line: 913, column: 38, scope: !1277)
!1291 = !DILocation(line: 913, column: 53, scope: !1277)
!1292 = !DILocation(line: 913, column: 56, scope: !1277)
!1293 = !DILocation(line: 0, scope: !1277)
!1294 = distinct !{!1294, !1276, !1295}
!1295 = !DILocation(line: 913, column: 72, scope: !1277)
!1296 = !DILocation(line: 914, column: 9, scope: !1277)
!1297 = !DILocation(line: 915, column: 16, scope: !1298)
!1298 = distinct !DILexicalBlock(scope: !1273, file: !3, line: 915, column: 16)
!1299 = !DILocation(line: 915, column: 21, scope: !1298)
!1300 = !DILocation(line: 915, column: 16, scope: !1273)
!1301 = !DILocalVariable(name: "k", scope: !1302, file: !3, line: 925, type: !7)
!1302 = distinct !DILexicalBlock(scope: !1298, file: !3, line: 916, column: 9)
!1303 = !DILocation(line: 925, column: 15, scope: !1302)
!1304 = !DILocation(line: 927, column: 18, scope: !1305)
!1305 = distinct !DILexicalBlock(scope: !1302, file: !3, line: 927, column: 11)
!1306 = !DILocation(line: 927, column: 16, scope: !1305)
!1307 = !DILocation(line: 927, column: 33, scope: !1308)
!1308 = distinct !DILexicalBlock(scope: !1305, file: !3, line: 927, column: 11)
!1309 = !DILocation(line: 927, column: 23, scope: !1308)
!1310 = !DILocation(line: 927, column: 11, scope: !1305)
!1311 = !DILocalVariable(name: "l", scope: !1312, file: !3, line: 929, type: !7)
!1312 = distinct !DILexicalBlock(scope: !1308, file: !3, line: 928, column: 13)
!1313 = !DILocation(line: 929, column: 19, scope: !1312)
!1314 = !DILocation(line: 929, column: 41, scope: !1312)
!1315 = !DILocation(line: 929, column: 31, scope: !1312)
!1316 = !DILocation(line: 929, column: 23, scope: !1312)
!1317 = !DILocation(line: 930, column: 29, scope: !1318)
!1318 = distinct !DILexicalBlock(scope: !1312, file: !3, line: 930, column: 19)
!1319 = !DILocation(line: 930, column: 42, scope: !1318)
!1320 = !DILocation(line: 930, column: 32, scope: !1318)
!1321 = !DILocation(line: 930, column: 49, scope: !1318)
!1322 = !DILocation(line: 930, column: 20, scope: !1318)
!1323 = !DILocation(line: 930, column: 19, scope: !1312)
!1324 = !DILocation(line: 932, column: 24, scope: !1325)
!1325 = distinct !DILexicalBlock(scope: !1318, file: !3, line: 931, column: 17)
!1326 = !DILocation(line: 932, column: 21, scope: !1325)
!1327 = !DILocation(line: 933, column: 41, scope: !1325)
!1328 = !DILocation(line: 933, column: 31, scope: !1325)
!1329 = !DILocation(line: 933, column: 23, scope: !1325)
!1330 = !DILocation(line: 933, column: 21, scope: !1325)
!1331 = !DILocation(line: 934, column: 21, scope: !1325)
!1332 = !DILocation(line: 934, column: 24, scope: !1325)
!1333 = !DILocation(line: 935, column: 27, scope: !1325)
!1334 = !DILocation(line: 935, column: 40, scope: !1325)
!1335 = !DILocation(line: 935, column: 30, scope: !1325)
!1336 = !DILocation(line: 935, column: 47, scope: !1325)
!1337 = !DILocation(line: 935, column: 19, scope: !1325)
!1338 = !DILocation(line: 936, column: 24, scope: !1325)
!1339 = !DILocation(line: 936, column: 21, scope: !1325)
!1340 = !DILocation(line: 937, column: 21, scope: !1325)
!1341 = !DILocation(line: 937, column: 24, scope: !1325)
!1342 = !DILocation(line: 938, column: 19, scope: !1325)
!1343 = !DILocation(line: 940, column: 13, scope: !1312)
!1344 = !DILocation(line: 927, column: 41, scope: !1308)
!1345 = !DILocation(line: 927, column: 11, scope: !1308)
!1346 = distinct !{!1346, !1310, !1347}
!1347 = !DILocation(line: 940, column: 13, scope: !1305)
!1348 = !DILocation(line: 942, column: 26, scope: !1349)
!1349 = distinct !DILexicalBlock(scope: !1302, file: !3, line: 942, column: 15)
!1350 = !DILocation(line: 942, column: 16, scope: !1349)
!1351 = !DILocation(line: 942, column: 15, scope: !1302)
!1352 = !DILocation(line: 943, column: 13, scope: !1349)
!1353 = !DILocation(line: 944, column: 9, scope: !1302)
!1354 = !DILocation(line: 948, column: 11, scope: !1355)
!1355 = distinct !DILexicalBlock(scope: !1298, file: !3, line: 946, column: 9)
!1356 = !DILocation(line: 951, column: 11, scope: !1357)
!1357 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 951, column: 11)
!1358 = !DILocation(line: 951, column: 16, scope: !1357)
!1359 = !DILocation(line: 951, column: 11, scope: !1274)
!1360 = !DILocation(line: 954, column: 15, scope: !1361)
!1361 = distinct !DILexicalBlock(scope: !1362, file: !3, line: 954, column: 15)
!1362 = distinct !DILexicalBlock(scope: !1357, file: !3, line: 952, column: 9)
!1363 = !DILocation(line: 954, column: 20, scope: !1361)
!1364 = !DILocation(line: 954, column: 15, scope: !1362)
!1365 = !DILocation(line: 957, column: 17, scope: !1366)
!1366 = distinct !DILexicalBlock(scope: !1361, file: !3, line: 955, column: 13)
!1367 = !DILocation(line: 958, column: 19, scope: !1368)
!1368 = distinct !DILexicalBlock(scope: !1366, file: !3, line: 958, column: 19)
!1369 = !DILocation(line: 958, column: 19, scope: !1366)
!1370 = !DILocation(line: 961, column: 19, scope: !1371)
!1371 = distinct !DILexicalBlock(scope: !1368, file: !3, line: 959, column: 17)
!1372 = !DILocation(line: 962, column: 22, scope: !1371)
!1373 = !DILocation(line: 962, column: 21, scope: !1371)
!1374 = !DILocation(line: 963, column: 26, scope: !1371)
!1375 = !DILocation(line: 963, column: 39, scope: !1371)
!1376 = !DILocation(line: 963, column: 43, scope: !1371)
!1377 = !DILocation(line: 963, column: 48, scope: !1371)
!1378 = !DILocation(line: 963, column: 55, scope: !1371)
!1379 = !DILocation(line: 963, column: 58, scope: !1371)
!1380 = !DILocation(line: 0, scope: !1371)
!1381 = distinct !{!1381, !1370, !1382}
!1382 = !DILocation(line: 963, column: 73, scope: !1371)
!1383 = !DILocation(line: 964, column: 17, scope: !1371)
!1384 = !DILocation(line: 965, column: 25, scope: !1385)
!1385 = distinct !DILexicalBlock(scope: !1368, file: !3, line: 965, column: 24)
!1386 = !DILocation(line: 965, column: 24, scope: !1385)
!1387 = !DILocation(line: 965, column: 27, scope: !1385)
!1388 = !DILocation(line: 965, column: 34, scope: !1385)
!1389 = !DILocation(line: 965, column: 46, scope: !1385)
!1390 = !DILocation(line: 965, column: 48, scope: !1385)
!1391 = !DILocation(line: 965, column: 38, scope: !1385)
!1392 = !DILocation(line: 965, column: 24, scope: !1368)
!1393 = !DILocation(line: 967, column: 27, scope: !1394)
!1394 = distinct !DILexicalBlock(scope: !1385, file: !3, line: 966, column: 17)
!1395 = !DILocation(line: 967, column: 19, scope: !1394)
!1396 = !DILocation(line: 968, column: 21, scope: !1394)
!1397 = !DILocation(line: 969, column: 19, scope: !1394)
!1398 = !DILocation(line: 971, column: 25, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1385, file: !3, line: 971, column: 24)
!1400 = !DILocation(line: 971, column: 24, scope: !1399)
!1401 = !DILocation(line: 971, column: 27, scope: !1399)
!1402 = !DILocation(line: 971, column: 34, scope: !1399)
!1403 = !DILocation(line: 971, column: 46, scope: !1399)
!1404 = !DILocation(line: 971, column: 48, scope: !1399)
!1405 = !DILocation(line: 971, column: 38, scope: !1399)
!1406 = !DILocation(line: 971, column: 24, scope: !1385)
!1407 = !DILocation(line: 973, column: 27, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1399, file: !3, line: 972, column: 17)
!1409 = !DILocation(line: 973, column: 19, scope: !1408)
!1410 = !DILocation(line: 974, column: 21, scope: !1408)
!1411 = !DILocation(line: 975, column: 19, scope: !1408)
!1412 = !DILocation(line: 979, column: 21, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1399, file: !3, line: 978, column: 17)
!1414 = !DILocation(line: 979, column: 24, scope: !1413)
!1415 = !DILocation(line: 980, column: 19, scope: !1413)
!1416 = distinct !{!1416, !1271, !1417}
!1417 = !DILocation(line: 1052, column: 5, scope: !85)
!1418 = !DILocation(line: 982, column: 13, scope: !1366)
!1419 = !DILocation(line: 983, column: 20, scope: !1420)
!1420 = distinct !DILexicalBlock(scope: !1361, file: !3, line: 983, column: 20)
!1421 = !DILocation(line: 983, column: 25, scope: !1420)
!1422 = !DILocation(line: 983, column: 32, scope: !1420)
!1423 = !DILocation(line: 983, column: 35, scope: !1420)
!1424 = !DILocation(line: 983, column: 40, scope: !1420)
!1425 = !DILocation(line: 983, column: 20, scope: !1361)
!1426 = !DILocation(line: 986, column: 17, scope: !1427)
!1427 = distinct !DILexicalBlock(scope: !1420, file: !3, line: 984, column: 13)
!1428 = !DILocation(line: 987, column: 15, scope: !1427)
!1429 = !DILocation(line: 987, column: 22, scope: !1427)
!1430 = !DILocation(line: 988, column: 18, scope: !1427)
!1431 = distinct !{!1431, !1428, !1430}
!1432 = !DILocation(line: 989, column: 19, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1427, file: !3, line: 989, column: 19)
!1434 = !DILocation(line: 989, column: 24, scope: !1433)
!1435 = !DILocation(line: 989, column: 31, scope: !1433)
!1436 = !DILocation(line: 989, column: 34, scope: !1433)
!1437 = !DILocation(line: 989, column: 39, scope: !1433)
!1438 = !DILocation(line: 989, column: 19, scope: !1427)
!1439 = !DILocation(line: 990, column: 17, scope: !1433)
!1440 = !DILocation(line: 992, column: 17, scope: !1433)
!1441 = !DILocation(line: 995, column: 13, scope: !1420)
!1442 = !DILocation(line: 996, column: 9, scope: !1362)
!1443 = !DILocation(line: 998, column: 11, scope: !1444)
!1444 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 998, column: 11)
!1445 = !DILocation(line: 998, column: 16, scope: !1444)
!1446 = !DILocation(line: 998, column: 23, scope: !1444)
!1447 = !DILocation(line: 998, column: 26, scope: !1444)
!1448 = !DILocation(line: 998, column: 31, scope: !1444)
!1449 = !DILocation(line: 998, column: 11, scope: !1274)
!1450 = !DILocation(line: 1000, column: 15, scope: !1451)
!1451 = distinct !DILexicalBlock(scope: !1452, file: !3, line: 1000, column: 15)
!1452 = distinct !DILexicalBlock(scope: !1444, file: !3, line: 999, column: 9)
!1453 = !DILocation(line: 1000, column: 20, scope: !1451)
!1454 = !DILocation(line: 1000, column: 27, scope: !1451)
!1455 = !DILocation(line: 1000, column: 30, scope: !1451)
!1456 = !DILocation(line: 1000, column: 35, scope: !1451)
!1457 = !DILocation(line: 1000, column: 15, scope: !1452)
!1458 = !DILocation(line: 1003, column: 15, scope: !1459)
!1459 = distinct !DILexicalBlock(scope: !1451, file: !3, line: 1001, column: 13)
!1460 = !DILocation(line: 1005, column: 20, scope: !1461)
!1461 = distinct !DILexicalBlock(scope: !1451, file: !3, line: 1005, column: 20)
!1462 = !DILocation(line: 1005, column: 25, scope: !1461)
!1463 = !DILocation(line: 1005, column: 32, scope: !1461)
!1464 = !DILocation(line: 1005, column: 35, scope: !1461)
!1465 = !DILocation(line: 1005, column: 40, scope: !1461)
!1466 = !DILocation(line: 1005, column: 20, scope: !1451)
!1467 = !DILocation(line: 1008, column: 17, scope: !1468)
!1468 = distinct !DILexicalBlock(scope: !1461, file: !3, line: 1006, column: 13)
!1469 = !DILocation(line: 1009, column: 17, scope: !1468)
!1470 = !DILocation(line: 1009, column: 20, scope: !1468)
!1471 = !DILocation(line: 1010, column: 15, scope: !1468)
!1472 = !DILocation(line: 1013, column: 13, scope: !1461)
!1473 = !DILocation(line: 1015, column: 12, scope: !1474)
!1474 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1015, column: 11)
!1475 = !DILocation(line: 1015, column: 17, scope: !1474)
!1476 = !DILocation(line: 1015, column: 24, scope: !1474)
!1477 = !DILocation(line: 1015, column: 27, scope: !1474)
!1478 = !DILocation(line: 1015, column: 32, scope: !1474)
!1479 = !DILocation(line: 1015, column: 40, scope: !1474)
!1480 = !DILocation(line: 1015, column: 43, scope: !1474)
!1481 = !DILocation(line: 1015, column: 48, scope: !1474)
!1482 = !DILocation(line: 1015, column: 11, scope: !1274)
!1483 = !DILocation(line: 1018, column: 11, scope: !1484)
!1484 = distinct !DILexicalBlock(scope: !1474, file: !3, line: 1016, column: 9)
!1485 = !DILocation(line: 1020, column: 11, scope: !1486)
!1486 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1020, column: 11)
!1487 = !DILocation(line: 1020, column: 16, scope: !1486)
!1488 = !DILocation(line: 1020, column: 23, scope: !1486)
!1489 = !DILocation(line: 1020, column: 26, scope: !1486)
!1490 = !DILocation(line: 1020, column: 31, scope: !1486)
!1491 = !DILocation(line: 1020, column: 11, scope: !1274)
!1492 = !DILocation(line: 1023, column: 11, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1486, file: !3, line: 1021, column: 9)
!1494 = !DILocation(line: 1025, column: 12, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1025, column: 11)
!1496 = !DILocation(line: 1025, column: 11, scope: !1495)
!1497 = !DILocation(line: 1025, column: 14, scope: !1495)
!1498 = !DILocation(line: 1025, column: 21, scope: !1495)
!1499 = !DILocation(line: 1025, column: 25, scope: !1495)
!1500 = !DILocation(line: 1025, column: 24, scope: !1495)
!1501 = !DILocation(line: 1025, column: 27, scope: !1495)
!1502 = !DILocation(line: 1025, column: 11, scope: !1274)
!1503 = !DILocation(line: 1028, column: 11, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1495, file: !3, line: 1026, column: 9)
!1505 = !DILocation(line: 1030, column: 11, scope: !1506)
!1506 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1030, column: 11)
!1507 = !DILocation(line: 1030, column: 16, scope: !1506)
!1508 = !DILocation(line: 1030, column: 11, scope: !1274)
!1509 = !DILocation(line: 1033, column: 15, scope: !1510)
!1510 = distinct !DILexicalBlock(scope: !1511, file: !3, line: 1033, column: 15)
!1511 = distinct !DILexicalBlock(scope: !1506, file: !3, line: 1031, column: 9)
!1512 = !DILocation(line: 1033, column: 20, scope: !1510)
!1513 = !DILocation(line: 1033, column: 27, scope: !1510)
!1514 = !DILocation(line: 1033, column: 30, scope: !1510)
!1515 = !DILocation(line: 1033, column: 35, scope: !1510)
!1516 = !DILocation(line: 1033, column: 15, scope: !1511)
!1517 = !DILocation(line: 1034, column: 15, scope: !1510)
!1518 = !DILocation(line: 1034, column: 13, scope: !1510)
!1519 = !DILocation(line: 1035, column: 20, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !1510, file: !3, line: 1035, column: 20)
!1521 = !DILocation(line: 1035, column: 25, scope: !1520)
!1522 = !DILocation(line: 1035, column: 20, scope: !1510)
!1523 = !DILocation(line: 1036, column: 14, scope: !1520)
!1524 = !DILocation(line: 1036, column: 13, scope: !1520)
!1525 = !DILocation(line: 1037, column: 9, scope: !1511)
!1526 = !DILocation(line: 1038, column: 11, scope: !1527)
!1527 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1038, column: 11)
!1528 = !DILocation(line: 1038, column: 16, scope: !1527)
!1529 = !DILocation(line: 1038, column: 23, scope: !1527)
!1530 = !DILocation(line: 1038, column: 26, scope: !1527)
!1531 = !DILocation(line: 1038, column: 11, scope: !1274)
!1532 = !DILocation(line: 1041, column: 13, scope: !1533)
!1533 = distinct !DILexicalBlock(scope: !1527, file: !3, line: 1039, column: 9)
!1534 = !DILocation(line: 1042, column: 11, scope: !1533)
!1535 = !DILocation(line: 1042, column: 18, scope: !1533)
!1536 = !DILocation(line: 1043, column: 14, scope: !1533)
!1537 = distinct !{!1537, !1534, !1536}
!1538 = !DILocation(line: 1044, column: 9, scope: !1533)
!1539 = !DILocation(line: 1045, column: 12, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !1274, file: !3, line: 1045, column: 11)
!1541 = !DILocation(line: 1045, column: 11, scope: !1540)
!1542 = !DILocation(line: 1045, column: 14, scope: !1540)
!1543 = !DILocation(line: 1045, column: 11, scope: !1274)
!1544 = !DILocation(line: 1048, column: 11, scope: !1545)
!1545 = distinct !DILexicalBlock(scope: !1540, file: !3, line: 1046, column: 9)
!1546 = !DILocation(line: 1051, column: 9, scope: !1540)
!1547 = !DILocation(line: 1053, column: 4, scope: !85)
!1548 = !DILocation(line: 1053, column: 6, scope: !85)
!1549 = !DILocation(line: 1054, column: 10, scope: !85)
!1550 = !DILocation(line: 1054, column: 3, scope: !85)
!1551 = !DILabel(scope: !85, name: "unknown", file: !3, line: 1056)
!1552 = !DILocation(line: 1056, column: 2, scope: !85)
!1553 = !DILocation(line: 1057, column: 18, scope: !85)
!1554 = !DILocation(line: 1057, column: 10, scope: !85)
!1555 = !DILocation(line: 1057, column: 8, scope: !85)
!1556 = !DILocation(line: 1058, column: 15, scope: !85)
!1557 = !DILocation(line: 1058, column: 13, scope: !85)
!1558 = !DILocation(line: 1060, column: 7, scope: !1559)
!1559 = distinct !DILexicalBlock(scope: !85, file: !3, line: 1060, column: 7)
!1560 = !DILocation(line: 1060, column: 18, scope: !1559)
!1561 = !DILocation(line: 1060, column: 7, scope: !85)
!1562 = !DILocation(line: 1061, column: 14, scope: !1559)
!1563 = !DILocation(line: 1061, column: 25, scope: !1559)
!1564 = !DILocation(line: 1061, column: 6, scope: !1559)
!1565 = !DILocation(line: 1063, column: 14, scope: !1559)
!1566 = !DILocation(line: 1063, column: 33, scope: !1559)
!1567 = !DILocation(line: 1063, column: 5, scope: !1559)
!1568 = !DILocation(line: 1065, column: 10, scope: !85)
!1569 = !DILocation(line: 1065, column: 3, scope: !85)
!1570 = !DILocation(line: 1066, column: 1, scope: !85)
!1571 = distinct !DISubprogram(name: "internal_cplus_demangle", scope: !3, file: !3, line: 1075, type: !1572, scopeLine: 1076, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1572 = !DISubroutineType(types: !1573)
!1573 = !{!52, !491, !76}
!1574 = !DILocalVariable(name: "work", arg: 1, scope: !1571, file: !3, line: 1075, type: !491)
!1575 = !DILocation(line: 1075, column: 45, scope: !1571)
!1576 = !DILocalVariable(name: "mangled", arg: 2, scope: !1571, file: !3, line: 1075, type: !76)
!1577 = !DILocation(line: 1075, column: 63, scope: !1571)
!1578 = !DILocalVariable(name: "decl", scope: !1571, file: !3, line: 1078, type: !61)
!1579 = !DILocation(line: 1078, column: 10, scope: !1571)
!1580 = !DILocalVariable(name: "success", scope: !1571, file: !3, line: 1079, type: !7)
!1581 = !DILocation(line: 1079, column: 7, scope: !1571)
!1582 = !DILocalVariable(name: "demangled", scope: !1571, file: !3, line: 1080, type: !52)
!1583 = !DILocation(line: 1080, column: 9, scope: !1571)
!1584 = !DILocalVariable(name: "s1", scope: !1571, file: !3, line: 1081, type: !7)
!1585 = !DILocation(line: 1081, column: 7, scope: !1571)
!1586 = !DILocalVariable(name: "s2", scope: !1571, file: !3, line: 1081, type: !7)
!1587 = !DILocation(line: 1081, column: 11, scope: !1571)
!1588 = !DILocalVariable(name: "s3", scope: !1571, file: !3, line: 1081, type: !7)
!1589 = !DILocation(line: 1081, column: 15, scope: !1571)
!1590 = !DILocalVariable(name: "s4", scope: !1571, file: !3, line: 1081, type: !7)
!1591 = !DILocation(line: 1081, column: 19, scope: !1571)
!1592 = !DILocation(line: 1082, column: 8, scope: !1571)
!1593 = !DILocation(line: 1082, column: 14, scope: !1571)
!1594 = !DILocation(line: 1082, column: 6, scope: !1571)
!1595 = !DILocation(line: 1083, column: 8, scope: !1571)
!1596 = !DILocation(line: 1083, column: 14, scope: !1571)
!1597 = !DILocation(line: 1083, column: 6, scope: !1571)
!1598 = !DILocation(line: 1084, column: 8, scope: !1571)
!1599 = !DILocation(line: 1084, column: 14, scope: !1571)
!1600 = !DILocation(line: 1084, column: 6, scope: !1571)
!1601 = !DILocation(line: 1085, column: 8, scope: !1571)
!1602 = !DILocation(line: 1085, column: 14, scope: !1571)
!1603 = !DILocation(line: 1085, column: 6, scope: !1571)
!1604 = !DILocation(line: 1086, column: 23, scope: !1571)
!1605 = !DILocation(line: 1086, column: 29, scope: !1571)
!1606 = !DILocation(line: 1086, column: 40, scope: !1571)
!1607 = !DILocation(line: 1086, column: 3, scope: !1571)
!1608 = !DILocation(line: 1086, column: 9, scope: !1571)
!1609 = !DILocation(line: 1086, column: 21, scope: !1571)
!1610 = !DILocation(line: 1087, column: 3, scope: !1571)
!1611 = !DILocation(line: 1087, column: 9, scope: !1571)
!1612 = !DILocation(line: 1087, column: 20, scope: !1571)
!1613 = !DILocation(line: 1088, column: 3, scope: !1571)
!1614 = !DILocation(line: 1088, column: 9, scope: !1571)
!1615 = !DILocation(line: 1088, column: 21, scope: !1571)
!1616 = !DILocation(line: 1090, column: 8, scope: !1617)
!1617 = distinct !DILexicalBlock(scope: !1571, file: !3, line: 1090, column: 7)
!1618 = !DILocation(line: 1090, column: 16, scope: !1617)
!1619 = !DILocation(line: 1090, column: 25, scope: !1617)
!1620 = !DILocation(line: 1090, column: 30, scope: !1617)
!1621 = !DILocation(line: 1090, column: 29, scope: !1617)
!1622 = !DILocation(line: 1090, column: 38, scope: !1617)
!1623 = !DILocation(line: 1090, column: 7, scope: !1571)
!1624 = !DILocation(line: 1092, column: 7, scope: !1625)
!1625 = distinct !DILexicalBlock(scope: !1617, file: !3, line: 1091, column: 5)
!1626 = !DILocation(line: 1101, column: 12, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1101, column: 11)
!1628 = !DILocation(line: 1101, column: 28, scope: !1627)
!1629 = !DILocation(line: 1101, column: 31, scope: !1627)
!1630 = !DILocation(line: 1101, column: 11, scope: !1625)
!1631 = !DILocation(line: 1103, column: 27, scope: !1632)
!1632 = distinct !DILexicalBlock(scope: !1627, file: !3, line: 1102, column: 2)
!1633 = !DILocation(line: 1103, column: 14, scope: !1632)
!1634 = !DILocation(line: 1103, column: 12, scope: !1632)
!1635 = !DILocation(line: 1104, column: 2, scope: !1632)
!1636 = !DILocation(line: 1105, column: 12, scope: !1637)
!1637 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1105, column: 11)
!1638 = !DILocation(line: 1105, column: 11, scope: !1625)
!1639 = !DILocation(line: 1107, column: 31, scope: !1640)
!1640 = distinct !DILexicalBlock(scope: !1637, file: !3, line: 1106, column: 2)
!1641 = !DILocation(line: 1107, column: 14, scope: !1640)
!1642 = !DILocation(line: 1107, column: 12, scope: !1640)
!1643 = !DILocation(line: 1108, column: 2, scope: !1640)
!1644 = !DILocation(line: 1109, column: 11, scope: !1645)
!1645 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1109, column: 11)
!1646 = !DILocation(line: 1109, column: 19, scope: !1645)
!1647 = !DILocation(line: 1109, column: 24, scope: !1645)
!1648 = !DILocation(line: 1109, column: 23, scope: !1645)
!1649 = !DILocation(line: 1109, column: 32, scope: !1645)
!1650 = !DILocation(line: 1109, column: 11, scope: !1625)
!1651 = !DILocation(line: 1111, column: 34, scope: !1652)
!1652 = distinct !DILexicalBlock(scope: !1645, file: !3, line: 1110, column: 2)
!1653 = !DILocation(line: 1111, column: 14, scope: !1652)
!1654 = !DILocation(line: 1111, column: 12, scope: !1652)
!1655 = !DILocation(line: 1112, column: 2, scope: !1652)
!1656 = !DILocation(line: 1113, column: 11, scope: !1657)
!1657 = distinct !DILexicalBlock(scope: !1625, file: !3, line: 1113, column: 11)
!1658 = !DILocation(line: 1113, column: 17, scope: !1657)
!1659 = !DILocation(line: 1113, column: 29, scope: !1657)
!1660 = !DILocation(line: 1113, column: 11, scope: !1625)
!1661 = !DILocation(line: 1115, column: 11, scope: !1662)
!1662 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1114, column: 9)
!1663 = !DILocation(line: 1116, column: 11, scope: !1662)
!1664 = !DILocation(line: 1116, column: 17, scope: !1662)
!1665 = !DILocation(line: 1116, column: 29, scope: !1662)
!1666 = !DILocation(line: 1117, column: 9, scope: !1662)
!1667 = !DILocation(line: 1118, column: 16, scope: !1668)
!1668 = distinct !DILexicalBlock(scope: !1657, file: !3, line: 1118, column: 16)
!1669 = !DILocation(line: 1118, column: 22, scope: !1668)
!1670 = !DILocation(line: 1118, column: 33, scope: !1668)
!1671 = !DILocation(line: 1118, column: 16, scope: !1657)
!1672 = !DILocation(line: 1120, column: 11, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1668, file: !3, line: 1119, column: 9)
!1674 = !DILocation(line: 1121, column: 11, scope: !1673)
!1675 = !DILocation(line: 1121, column: 17, scope: !1673)
!1676 = !DILocation(line: 1121, column: 28, scope: !1673)
!1677 = !DILocation(line: 1122, column: 9, scope: !1673)
!1678 = !DILocation(line: 1123, column: 16, scope: !1679)
!1679 = distinct !DILexicalBlock(scope: !1668, file: !3, line: 1123, column: 16)
!1680 = !DILocation(line: 1123, column: 22, scope: !1679)
!1681 = !DILocation(line: 1123, column: 34, scope: !1679)
!1682 = !DILocation(line: 1123, column: 16, scope: !1668)
!1683 = !DILocation(line: 1125, column: 11, scope: !1684)
!1684 = distinct !DILexicalBlock(scope: !1679, file: !3, line: 1124, column: 9)
!1685 = !DILocation(line: 1126, column: 11, scope: !1684)
!1686 = !DILocation(line: 1126, column: 17, scope: !1684)
!1687 = !DILocation(line: 1126, column: 29, scope: !1684)
!1688 = !DILocation(line: 1127, column: 9, scope: !1684)
!1689 = !DILocation(line: 1128, column: 27, scope: !1625)
!1690 = !DILocation(line: 1128, column: 40, scope: !1625)
!1691 = !DILocation(line: 1128, column: 19, scope: !1625)
!1692 = !DILocation(line: 1128, column: 17, scope: !1625)
!1693 = !DILocation(line: 1129, column: 5, scope: !1625)
!1694 = !DILocation(line: 1130, column: 23, scope: !1571)
!1695 = !DILocation(line: 1130, column: 3, scope: !1571)
!1696 = !DILocation(line: 1130, column: 9, scope: !1571)
!1697 = !DILocation(line: 1130, column: 21, scope: !1571)
!1698 = !DILocation(line: 1131, column: 22, scope: !1571)
!1699 = !DILocation(line: 1131, column: 3, scope: !1571)
!1700 = !DILocation(line: 1131, column: 9, scope: !1571)
!1701 = !DILocation(line: 1131, column: 20, scope: !1571)
!1702 = !DILocation(line: 1132, column: 23, scope: !1571)
!1703 = !DILocation(line: 1132, column: 3, scope: !1571)
!1704 = !DILocation(line: 1132, column: 9, scope: !1571)
!1705 = !DILocation(line: 1132, column: 21, scope: !1571)
!1706 = !DILocation(line: 1133, column: 22, scope: !1571)
!1707 = !DILocation(line: 1133, column: 3, scope: !1571)
!1708 = !DILocation(line: 1133, column: 9, scope: !1571)
!1709 = !DILocation(line: 1133, column: 20, scope: !1571)
!1710 = !DILocation(line: 1134, column: 10, scope: !1571)
!1711 = !DILocation(line: 1134, column: 3, scope: !1571)
!1712 = distinct !DISubprogram(name: "string_init", scope: !3, file: !3, line: 4690, type: !985, scopeLine: 4691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1713 = !DILocalVariable(name: "s", arg: 1, scope: !1712, file: !3, line: 4690, type: !60)
!1714 = !DILocation(line: 4690, column: 22, scope: !1712)
!1715 = !DILocation(line: 4692, column: 17, scope: !1712)
!1716 = !DILocation(line: 4692, column: 20, scope: !1712)
!1717 = !DILocation(line: 4692, column: 22, scope: !1712)
!1718 = !DILocation(line: 4692, column: 10, scope: !1712)
!1719 = !DILocation(line: 4692, column: 13, scope: !1712)
!1720 = !DILocation(line: 4692, column: 15, scope: !1712)
!1721 = !DILocation(line: 4692, column: 3, scope: !1712)
!1722 = !DILocation(line: 4692, column: 6, scope: !1712)
!1723 = !DILocation(line: 4692, column: 8, scope: !1712)
!1724 = !DILocation(line: 4693, column: 1, scope: !1712)
!1725 = distinct !DISubprogram(name: "gnu_special", scope: !3, file: !3, line: 2853, type: !489, scopeLine: 2854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!1726 = !DILocalVariable(name: "work", arg: 1, scope: !1725, file: !3, line: 2853, type: !491)
!1727 = !DILocation(line: 2853, column: 33, scope: !1725)
!1728 = !DILocalVariable(name: "mangled", arg: 2, scope: !1725, file: !3, line: 2853, type: !492)
!1729 = !DILocation(line: 2853, column: 52, scope: !1725)
!1730 = !DILocalVariable(name: "declp", arg: 3, scope: !1725, file: !3, line: 2853, type: !60)
!1731 = !DILocation(line: 2853, column: 69, scope: !1725)
!1732 = !DILocalVariable(name: "n", scope: !1725, file: !3, line: 2855, type: !7)
!1733 = !DILocation(line: 2855, column: 7, scope: !1725)
!1734 = !DILocalVariable(name: "success", scope: !1725, file: !3, line: 2856, type: !7)
!1735 = !DILocation(line: 2856, column: 7, scope: !1725)
!1736 = !DILocalVariable(name: "p", scope: !1725, file: !3, line: 2857, type: !76)
!1737 = !DILocation(line: 2857, column: 15, scope: !1725)
!1738 = !DILocation(line: 2859, column: 9, scope: !1739)
!1739 = distinct !DILexicalBlock(scope: !1725, file: !3, line: 2859, column: 7)
!1740 = !DILocation(line: 2859, column: 8, scope: !1739)
!1741 = !DILocation(line: 2859, column: 7, scope: !1739)
!1742 = !DILocation(line: 2859, column: 21, scope: !1739)
!1743 = !DILocation(line: 2860, column: 7, scope: !1739)
!1744 = !DILocation(line: 2860, column: 35, scope: !1739)
!1745 = !DILocation(line: 2860, column: 34, scope: !1739)
!1746 = !DILocation(line: 2860, column: 33, scope: !1739)
!1747 = !DILocation(line: 2860, column: 10, scope: !1739)
!1748 = !DILocation(line: 2860, column: 48, scope: !1739)
!1749 = !DILocation(line: 2861, column: 7, scope: !1739)
!1750 = !DILocation(line: 2861, column: 12, scope: !1739)
!1751 = !DILocation(line: 2861, column: 11, scope: !1739)
!1752 = !DILocation(line: 2861, column: 10, scope: !1739)
!1753 = !DILocation(line: 2861, column: 24, scope: !1739)
!1754 = !DILocation(line: 2859, column: 7, scope: !1725)
!1755 = !DILocation(line: 2864, column: 9, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1739, file: !3, line: 2862, column: 5)
!1757 = !DILocation(line: 2864, column: 18, scope: !1756)
!1758 = !DILocation(line: 2865, column: 7, scope: !1756)
!1759 = !DILocation(line: 2865, column: 15, scope: !1756)
!1760 = !DILocation(line: 2865, column: 26, scope: !1756)
!1761 = !DILocation(line: 2866, column: 5, scope: !1756)
!1762 = !DILocation(line: 2867, column: 14, scope: !1763)
!1763 = distinct !DILexicalBlock(scope: !1739, file: !3, line: 2867, column: 12)
!1764 = !DILocation(line: 2867, column: 13, scope: !1763)
!1765 = !DILocation(line: 2867, column: 12, scope: !1763)
!1766 = !DILocation(line: 2867, column: 26, scope: !1763)
!1767 = !DILocation(line: 2868, column: 5, scope: !1763)
!1768 = !DILocation(line: 2868, column: 12, scope: !1763)
!1769 = !DILocation(line: 2868, column: 11, scope: !1763)
!1770 = !DILocation(line: 2868, column: 10, scope: !1763)
!1771 = !DILocation(line: 2868, column: 24, scope: !1763)
!1772 = !DILocation(line: 2869, column: 3, scope: !1763)
!1773 = !DILocation(line: 2869, column: 8, scope: !1763)
!1774 = !DILocation(line: 2869, column: 7, scope: !1763)
!1775 = !DILocation(line: 2869, column: 6, scope: !1763)
!1776 = !DILocation(line: 2869, column: 20, scope: !1763)
!1777 = !DILocation(line: 2870, column: 3, scope: !1763)
!1778 = !DILocation(line: 2870, column: 8, scope: !1763)
!1779 = !DILocation(line: 2870, column: 7, scope: !1763)
!1780 = !DILocation(line: 2870, column: 6, scope: !1763)
!1781 = !DILocation(line: 2870, column: 20, scope: !1763)
!1782 = !DILocation(line: 2871, column: 3, scope: !1763)
!1783 = !DILocation(line: 2871, column: 8, scope: !1763)
!1784 = !DILocation(line: 2871, column: 7, scope: !1763)
!1785 = !DILocation(line: 2871, column: 6, scope: !1763)
!1786 = !DILocation(line: 2871, column: 20, scope: !1763)
!1787 = !DILocation(line: 2872, column: 9, scope: !1763)
!1788 = !DILocation(line: 2872, column: 15, scope: !1763)
!1789 = !DILocation(line: 2872, column: 14, scope: !1763)
!1790 = !DILocation(line: 2872, column: 13, scope: !1763)
!1791 = !DILocation(line: 2872, column: 27, scope: !1763)
!1792 = !DILocation(line: 2873, column: 6, scope: !1763)
!1793 = !DILocation(line: 2873, column: 11, scope: !1763)
!1794 = !DILocation(line: 2873, column: 10, scope: !1763)
!1795 = !DILocation(line: 2873, column: 9, scope: !1763)
!1796 = !DILocation(line: 2873, column: 23, scope: !1763)
!1797 = !DILocation(line: 2874, column: 6, scope: !1763)
!1798 = !DILocation(line: 2874, column: 34, scope: !1763)
!1799 = !DILocation(line: 2874, column: 33, scope: !1763)
!1800 = !DILocation(line: 2874, column: 32, scope: !1763)
!1801 = !DILocation(line: 2874, column: 9, scope: !1763)
!1802 = !DILocation(line: 2874, column: 47, scope: !1763)
!1803 = !DILocation(line: 2867, column: 12, scope: !1739)
!1804 = !DILocation(line: 2880, column: 13, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !3, line: 2880, column: 11)
!1806 = distinct !DILexicalBlock(scope: !1763, file: !3, line: 2875, column: 5)
!1807 = !DILocation(line: 2880, column: 12, scope: !1805)
!1808 = !DILocation(line: 2880, column: 11, scope: !1805)
!1809 = !DILocation(line: 2880, column: 25, scope: !1805)
!1810 = !DILocation(line: 2880, column: 11, scope: !1806)
!1811 = !DILocation(line: 2881, column: 4, scope: !1805)
!1812 = !DILocation(line: 2881, column: 13, scope: !1805)
!1813 = !DILocation(line: 2881, column: 2, scope: !1805)
!1814 = !DILocation(line: 2883, column: 4, scope: !1805)
!1815 = !DILocation(line: 2883, column: 13, scope: !1805)
!1816 = !DILocation(line: 2884, column: 7, scope: !1806)
!1817 = !DILocation(line: 2884, column: 16, scope: !1806)
!1818 = !DILocation(line: 2884, column: 15, scope: !1806)
!1819 = !DILocation(line: 2884, column: 14, scope: !1806)
!1820 = !DILocation(line: 2884, column: 24, scope: !1806)
!1821 = !DILocation(line: 2886, column: 14, scope: !1822)
!1822 = distinct !DILexicalBlock(scope: !1806, file: !3, line: 2885, column: 2)
!1823 = !DILocation(line: 2886, column: 13, scope: !1822)
!1824 = !DILocation(line: 2886, column: 12, scope: !1822)
!1825 = !DILocation(line: 2886, column: 4, scope: !1822)
!1826 = !DILocation(line: 2890, column: 38, scope: !1827)
!1827 = distinct !DILexicalBlock(scope: !1822, file: !3, line: 2887, column: 6)
!1828 = !DILocation(line: 2890, column: 44, scope: !1827)
!1829 = !DILocation(line: 2890, column: 53, scope: !1827)
!1830 = !DILocation(line: 2890, column: 18, scope: !1827)
!1831 = !DILocation(line: 2890, column: 16, scope: !1827)
!1832 = !DILocation(line: 2891, column: 8, scope: !1827)
!1833 = !DILocation(line: 2893, column: 37, scope: !1827)
!1834 = !DILocation(line: 2893, column: 43, scope: !1827)
!1835 = !DILocation(line: 2893, column: 52, scope: !1827)
!1836 = !DILocation(line: 2893, column: 18, scope: !1827)
!1837 = !DILocation(line: 2893, column: 16, scope: !1827)
!1838 = !DILocation(line: 2895, column: 8, scope: !1827)
!1839 = !DILocation(line: 2897, column: 12, scope: !1840)
!1840 = distinct !DILexicalBlock(scope: !1827, file: !3, line: 2897, column: 12)
!1841 = !DILocation(line: 2897, column: 12, scope: !1827)
!1842 = !DILocation(line: 2899, column: 23, scope: !1843)
!1843 = distinct !DILexicalBlock(scope: !1840, file: !3, line: 2898, column: 3)
!1844 = !DILocation(line: 2899, column: 9, scope: !1843)
!1845 = !DILocation(line: 2899, column: 7, scope: !1843)
!1846 = !DILocation(line: 2904, column: 9, scope: !1847)
!1847 = distinct !DILexicalBlock(scope: !1843, file: !3, line: 2904, column: 9)
!1848 = !DILocation(line: 2904, column: 28, scope: !1847)
!1849 = !DILocation(line: 2904, column: 27, scope: !1847)
!1850 = !DILocation(line: 2904, column: 19, scope: !1847)
!1851 = !DILocation(line: 2904, column: 13, scope: !1847)
!1852 = !DILocation(line: 2904, column: 11, scope: !1847)
!1853 = !DILocation(line: 2904, column: 9, scope: !1843)
!1854 = !DILocation(line: 2906, column: 17, scope: !1855)
!1855 = distinct !DILexicalBlock(scope: !1847, file: !3, line: 2905, column: 7)
!1856 = !DILocation(line: 2907, column: 9, scope: !1855)
!1857 = !DILocation(line: 2909, column: 3, scope: !1843)
!1858 = !DILocation(line: 2912, column: 19, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1840, file: !3, line: 2911, column: 3)
!1860 = !DILocation(line: 2912, column: 18, scope: !1859)
!1861 = !DILocation(line: 2912, column: 9, scope: !1859)
!1862 = !DILocation(line: 2912, column: 7, scope: !1859)
!1863 = !DILocation(line: 2914, column: 24, scope: !1827)
!1864 = !DILocation(line: 2914, column: 32, scope: !1827)
!1865 = !DILocation(line: 2914, column: 31, scope: !1827)
!1866 = !DILocation(line: 2914, column: 41, scope: !1827)
!1867 = !DILocation(line: 2914, column: 8, scope: !1827)
!1868 = !DILocation(line: 2915, column: 22, scope: !1827)
!1869 = !DILocation(line: 2915, column: 10, scope: !1827)
!1870 = !DILocation(line: 2915, column: 19, scope: !1827)
!1871 = !DILocation(line: 2916, column: 6, scope: !1827)
!1872 = !DILocation(line: 2918, column: 18, scope: !1822)
!1873 = !DILocation(line: 2918, column: 17, scope: !1822)
!1874 = !DILocation(line: 2918, column: 8, scope: !1822)
!1875 = !DILocation(line: 2918, column: 6, scope: !1822)
!1876 = !DILocation(line: 2919, column: 8, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1822, file: !3, line: 2919, column: 8)
!1878 = !DILocation(line: 2919, column: 16, scope: !1877)
!1879 = !DILocation(line: 2919, column: 21, scope: !1877)
!1880 = !DILocation(line: 2919, column: 23, scope: !1877)
!1881 = !DILocation(line: 2919, column: 32, scope: !1877)
!1882 = !DILocation(line: 2919, column: 36, scope: !1877)
!1883 = !DILocation(line: 2919, column: 42, scope: !1877)
!1884 = !DILocation(line: 2919, column: 41, scope: !1877)
!1885 = !DILocation(line: 2919, column: 38, scope: !1877)
!1886 = !DILocation(line: 2919, column: 8, scope: !1822)
!1887 = !DILocation(line: 2921, column: 12, scope: !1888)
!1888 = distinct !DILexicalBlock(scope: !1889, file: !3, line: 2921, column: 12)
!1889 = distinct !DILexicalBlock(scope: !1877, file: !3, line: 2920, column: 6)
!1890 = !DILocation(line: 2921, column: 14, scope: !1888)
!1891 = !DILocation(line: 2921, column: 12, scope: !1889)
!1892 = !DILocation(line: 2923, column: 20, scope: !1893)
!1893 = distinct !DILexicalBlock(scope: !1888, file: !3, line: 2922, column: 3)
!1894 = !DILocation(line: 2923, column: 27, scope: !1893)
!1895 = !DILocation(line: 2923, column: 5, scope: !1893)
!1896 = !DILocation(line: 2924, column: 7, scope: !1893)
!1897 = !DILocation(line: 2924, column: 15, scope: !1893)
!1898 = !DILocation(line: 2925, column: 3, scope: !1893)
!1899 = !DILocation(line: 2926, column: 6, scope: !1889)
!1900 = !DILocation(line: 2929, column: 16, scope: !1901)
!1901 = distinct !DILexicalBlock(scope: !1877, file: !3, line: 2928, column: 6)
!1902 = !DILocation(line: 2930, column: 8, scope: !1901)
!1903 = distinct !{!1903, !1816, !1904}
!1904 = !DILocation(line: 2932, column: 2, scope: !1806)
!1905 = !DILocation(line: 2933, column: 11, scope: !1906)
!1906 = distinct !DILexicalBlock(scope: !1806, file: !3, line: 2933, column: 11)
!1907 = !DILocation(line: 2933, column: 11, scope: !1806)
!1908 = !DILocation(line: 2934, column: 17, scope: !1906)
!1909 = !DILocation(line: 2934, column: 2, scope: !1906)
!1910 = !DILocation(line: 2935, column: 5, scope: !1806)
!1911 = !DILocation(line: 2936, column: 14, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1763, file: !3, line: 2936, column: 12)
!1913 = !DILocation(line: 2936, column: 13, scope: !1912)
!1914 = !DILocation(line: 2936, column: 12, scope: !1912)
!1915 = !DILocation(line: 2936, column: 26, scope: !1912)
!1916 = !DILocation(line: 2937, column: 5, scope: !1912)
!1917 = !DILocation(line: 2937, column: 34, scope: !1912)
!1918 = !DILocation(line: 2937, column: 33, scope: !1912)
!1919 = !DILocation(line: 2937, column: 32, scope: !1912)
!1920 = !DILocation(line: 2937, column: 9, scope: !1912)
!1921 = !DILocation(line: 2937, column: 47, scope: !1912)
!1922 = !DILocation(line: 2938, column: 5, scope: !1912)
!1923 = !DILocation(line: 2938, column: 23, scope: !1912)
!1924 = !DILocation(line: 2938, column: 22, scope: !1912)
!1925 = !DILocation(line: 2938, column: 13, scope: !1912)
!1926 = !DILocation(line: 2938, column: 11, scope: !1912)
!1927 = !DILocation(line: 2938, column: 48, scope: !1912)
!1928 = !DILocation(line: 2936, column: 12, scope: !1763)
!1929 = !DILocation(line: 2941, column: 9, scope: !1930)
!1930 = distinct !DILexicalBlock(scope: !1912, file: !3, line: 2939, column: 5)
!1931 = !DILocation(line: 2941, column: 17, scope: !1930)
!1932 = !DILocation(line: 2942, column: 17, scope: !1930)
!1933 = !DILocation(line: 2942, column: 16, scope: !1930)
!1934 = !DILocation(line: 2942, column: 15, scope: !1930)
!1935 = !DILocation(line: 2942, column: 7, scope: !1930)
!1936 = !DILocation(line: 2946, column: 34, scope: !1937)
!1937 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 2943, column: 2)
!1938 = !DILocation(line: 2946, column: 40, scope: !1937)
!1939 = !DILocation(line: 2946, column: 49, scope: !1937)
!1940 = !DILocation(line: 2946, column: 14, scope: !1937)
!1941 = !DILocation(line: 2946, column: 12, scope: !1937)
!1942 = !DILocation(line: 2947, column: 4, scope: !1937)
!1943 = !DILocation(line: 2949, column: 33, scope: !1937)
!1944 = !DILocation(line: 2949, column: 39, scope: !1937)
!1945 = !DILocation(line: 2949, column: 48, scope: !1937)
!1946 = !DILocation(line: 2949, column: 14, scope: !1937)
!1947 = !DILocation(line: 2949, column: 12, scope: !1937)
!1948 = !DILocation(line: 2950, column: 4, scope: !1937)
!1949 = !DILocation(line: 2952, column: 23, scope: !1937)
!1950 = !DILocation(line: 2952, column: 8, scope: !1937)
!1951 = !DILocation(line: 2952, column: 6, scope: !1937)
!1952 = !DILocation(line: 2953, column: 8, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1937, file: !3, line: 2953, column: 8)
!1954 = !DILocation(line: 2953, column: 10, scope: !1953)
!1955 = !DILocation(line: 2953, column: 14, scope: !1953)
!1956 = !DILocation(line: 2953, column: 17, scope: !1953)
!1957 = !DILocation(line: 2953, column: 37, scope: !1953)
!1958 = !DILocation(line: 2953, column: 36, scope: !1953)
!1959 = !DILocation(line: 2953, column: 28, scope: !1953)
!1960 = !DILocation(line: 2953, column: 19, scope: !1953)
!1961 = !DILocation(line: 2953, column: 8, scope: !1937)
!1962 = !DILocation(line: 2955, column: 16, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1953, file: !3, line: 2954, column: 6)
!1964 = !DILocation(line: 2956, column: 8, scope: !1963)
!1965 = !DILocation(line: 2959, column: 8, scope: !1966)
!1966 = distinct !DILexicalBlock(scope: !1937, file: !3, line: 2959, column: 8)
!1967 = !DILocation(line: 2959, column: 10, scope: !1966)
!1968 = !DILocation(line: 2959, column: 15, scope: !1966)
!1969 = !DILocation(line: 2959, column: 28, scope: !1966)
!1970 = !DILocation(line: 2959, column: 27, scope: !1966)
!1971 = !DILocation(line: 2959, column: 18, scope: !1966)
!1972 = !DILocation(line: 2959, column: 52, scope: !1966)
!1973 = !DILocation(line: 2960, column: 8, scope: !1966)
!1974 = !DILocation(line: 2960, column: 13, scope: !1966)
!1975 = !DILocation(line: 2960, column: 12, scope: !1966)
!1976 = !DILocation(line: 2960, column: 11, scope: !1966)
!1977 = !DILocation(line: 2960, column: 25, scope: !1966)
!1978 = !DILocation(line: 2961, column: 8, scope: !1966)
!1979 = !DILocation(line: 2961, column: 13, scope: !1966)
!1980 = !DILocation(line: 2961, column: 12, scope: !1966)
!1981 = !DILocation(line: 2961, column: 11, scope: !1966)
!1982 = !DILocation(line: 2961, column: 30, scope: !1966)
!1983 = !DILocation(line: 2961, column: 29, scope: !1966)
!1984 = !DILocation(line: 2961, column: 28, scope: !1966)
!1985 = !DILocation(line: 2961, column: 25, scope: !1966)
!1986 = !DILocation(line: 2962, column: 8, scope: !1966)
!1987 = !DILocation(line: 2962, column: 36, scope: !1966)
!1988 = !DILocation(line: 2962, column: 35, scope: !1966)
!1989 = !DILocation(line: 2962, column: 34, scope: !1966)
!1990 = !DILocation(line: 2962, column: 11, scope: !1966)
!1991 = !DILocation(line: 2959, column: 8, scope: !1937)
!1992 = !DILocation(line: 2968, column: 23, scope: !1993)
!1993 = distinct !DILexicalBlock(scope: !1966, file: !3, line: 2963, column: 6)
!1994 = !DILocation(line: 2968, column: 8, scope: !1993)
!1995 = !DILocation(line: 2969, column: 22, scope: !1993)
!1996 = !DILocation(line: 2969, column: 10, scope: !1993)
!1997 = !DILocation(line: 2969, column: 19, scope: !1993)
!1998 = !DILocation(line: 2973, column: 22, scope: !1993)
!1999 = !DILocation(line: 2973, column: 21, scope: !1993)
!2000 = !DILocation(line: 2973, column: 12, scope: !1993)
!2001 = !DILocation(line: 2973, column: 10, scope: !1993)
!2002 = !DILocation(line: 2974, column: 8, scope: !1993)
!2003 = !DILocation(line: 2977, column: 20, scope: !1937)
!2004 = !DILocation(line: 2977, column: 28, scope: !1937)
!2005 = !DILocation(line: 2977, column: 27, scope: !1937)
!2006 = !DILocation(line: 2977, column: 37, scope: !1937)
!2007 = !DILocation(line: 2977, column: 4, scope: !1937)
!2008 = !DILocation(line: 2978, column: 18, scope: !1937)
!2009 = !DILocation(line: 2978, column: 6, scope: !1937)
!2010 = !DILocation(line: 2978, column: 15, scope: !1937)
!2011 = !DILocation(line: 2979, column: 2, scope: !1937)
!2012 = !DILocation(line: 2980, column: 11, scope: !2013)
!2013 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 2980, column: 11)
!2014 = !DILocation(line: 2980, column: 19, scope: !2013)
!2015 = !DILocation(line: 2980, column: 23, scope: !2013)
!2016 = !DILocation(line: 2980, column: 29, scope: !2013)
!2017 = !DILocation(line: 2980, column: 28, scope: !2013)
!2018 = !DILocation(line: 2980, column: 25, scope: !2013)
!2019 = !DILocation(line: 2980, column: 11, scope: !1930)
!2020 = !DILocation(line: 2984, column: 6, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2013, file: !3, line: 2981, column: 2)
!2022 = !DILocation(line: 2984, column: 14, scope: !2021)
!2023 = !DILocation(line: 2985, column: 19, scope: !2021)
!2024 = !DILocation(line: 2985, column: 26, scope: !2021)
!2025 = !DILocation(line: 2985, column: 4, scope: !2021)
!2026 = !DILocation(line: 2986, column: 17, scope: !2021)
!2027 = !DILocation(line: 2986, column: 16, scope: !2021)
!2028 = !DILocation(line: 2986, column: 8, scope: !2021)
!2029 = !DILocation(line: 2986, column: 6, scope: !2021)
!2030 = !DILocation(line: 2987, column: 20, scope: !2021)
!2031 = !DILocation(line: 2987, column: 28, scope: !2021)
!2032 = !DILocation(line: 2987, column: 27, scope: !2021)
!2033 = !DILocation(line: 2987, column: 37, scope: !2021)
!2034 = !DILocation(line: 2987, column: 4, scope: !2021)
!2035 = !DILocation(line: 2988, column: 18, scope: !2021)
!2036 = !DILocation(line: 2988, column: 6, scope: !2021)
!2037 = !DILocation(line: 2988, column: 15, scope: !2021)
!2038 = !DILocation(line: 2989, column: 2, scope: !2021)
!2039 = !DILocation(line: 2992, column: 12, scope: !2040)
!2040 = distinct !DILexicalBlock(scope: !2013, file: !3, line: 2991, column: 2)
!2041 = !DILocation(line: 2994, column: 5, scope: !1930)
!2042 = !DILocation(line: 2995, column: 22, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !1912, file: !3, line: 2995, column: 12)
!2044 = !DILocation(line: 2995, column: 21, scope: !2043)
!2045 = !DILocation(line: 2995, column: 12, scope: !2043)
!2046 = !DILocation(line: 2995, column: 46, scope: !2043)
!2047 = !DILocation(line: 2995, column: 12, scope: !1912)
!2048 = !DILocalVariable(name: "delta", scope: !2049, file: !3, line: 2997, type: !7)
!2049 = distinct !DILexicalBlock(scope: !2043, file: !3, line: 2996, column: 5)
!2050 = !DILocation(line: 2997, column: 11, scope: !2049)
!2051 = !DILocation(line: 2999, column: 9, scope: !2049)
!2052 = !DILocation(line: 2999, column: 18, scope: !2049)
!2053 = !DILocation(line: 3000, column: 30, scope: !2049)
!2054 = !DILocation(line: 3000, column: 15, scope: !2049)
!2055 = !DILocation(line: 3000, column: 13, scope: !2049)
!2056 = !DILocation(line: 3001, column: 11, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2049, file: !3, line: 3001, column: 11)
!2058 = !DILocation(line: 3001, column: 17, scope: !2057)
!2059 = !DILocation(line: 3001, column: 11, scope: !2049)
!2060 = !DILocation(line: 3002, column: 10, scope: !2057)
!2061 = !DILocation(line: 3002, column: 2, scope: !2057)
!2062 = !DILocalVariable(name: "method", scope: !2063, file: !3, line: 3005, type: !52)
!2063 = distinct !DILexicalBlock(scope: !2057, file: !3, line: 3004, column: 2)
!2064 = !DILocation(line: 3005, column: 10, scope: !2063)
!2065 = !DILocation(line: 3005, column: 44, scope: !2063)
!2066 = !DILocation(line: 3005, column: 53, scope: !2063)
!2067 = !DILocation(line: 3005, column: 50, scope: !2063)
!2068 = !DILocation(line: 3005, column: 19, scope: !2063)
!2069 = !DILocation(line: 3007, column: 8, scope: !2070)
!2070 = distinct !DILexicalBlock(scope: !2063, file: !3, line: 3007, column: 8)
!2071 = !DILocation(line: 3007, column: 8, scope: !2063)
!2072 = !DILocalVariable(name: "buf", scope: !2073, file: !3, line: 3009, type: !2074)
!2073 = distinct !DILexicalBlock(scope: !2070, file: !3, line: 3008, column: 6)
!2074 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 400, elements: !2075)
!2075 = !{!2076}
!2076 = !DISubrange(count: 50)
!2077 = !DILocation(line: 3009, column: 13, scope: !2073)
!2078 = !DILocation(line: 3010, column: 17, scope: !2073)
!2079 = !DILocation(line: 3010, column: 65, scope: !2073)
!2080 = !DILocation(line: 3010, column: 64, scope: !2073)
!2081 = !DILocation(line: 3010, column: 8, scope: !2073)
!2082 = !DILocation(line: 3011, column: 23, scope: !2073)
!2083 = !DILocation(line: 3011, column: 30, scope: !2073)
!2084 = !DILocation(line: 3011, column: 8, scope: !2073)
!2085 = !DILocation(line: 3012, column: 23, scope: !2073)
!2086 = !DILocation(line: 3012, column: 30, scope: !2073)
!2087 = !DILocation(line: 3012, column: 8, scope: !2073)
!2088 = !DILocation(line: 3013, column: 14, scope: !2073)
!2089 = !DILocation(line: 3013, column: 8, scope: !2073)
!2090 = !DILocation(line: 3014, column: 21, scope: !2073)
!2091 = !DILocation(line: 3014, column: 20, scope: !2073)
!2092 = !DILocation(line: 3014, column: 12, scope: !2073)
!2093 = !DILocation(line: 3014, column: 10, scope: !2073)
!2094 = !DILocation(line: 3015, column: 22, scope: !2073)
!2095 = !DILocation(line: 3015, column: 10, scope: !2073)
!2096 = !DILocation(line: 3015, column: 19, scope: !2073)
!2097 = !DILocation(line: 3016, column: 6, scope: !2073)
!2098 = !DILocation(line: 3019, column: 16, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2070, file: !3, line: 3018, column: 6)
!2100 = !DILocation(line: 3022, column: 5, scope: !2049)
!2101 = !DILocation(line: 3023, column: 22, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !2043, file: !3, line: 3023, column: 12)
!2103 = !DILocation(line: 3023, column: 21, scope: !2102)
!2104 = !DILocation(line: 3023, column: 12, scope: !2102)
!2105 = !DILocation(line: 3023, column: 41, scope: !2102)
!2106 = !DILocation(line: 3024, column: 5, scope: !2102)
!2107 = !DILocation(line: 3024, column: 11, scope: !2102)
!2108 = !DILocation(line: 3024, column: 10, scope: !2102)
!2109 = !DILocation(line: 3024, column: 9, scope: !2102)
!2110 = !DILocation(line: 3024, column: 23, scope: !2102)
!2111 = !DILocation(line: 3024, column: 30, scope: !2102)
!2112 = !DILocation(line: 3024, column: 35, scope: !2102)
!2113 = !DILocation(line: 3024, column: 34, scope: !2102)
!2114 = !DILocation(line: 3024, column: 33, scope: !2102)
!2115 = !DILocation(line: 3024, column: 47, scope: !2102)
!2116 = !DILocation(line: 3023, column: 12, scope: !2043)
!2117 = !DILocation(line: 3026, column: 13, scope: !2118)
!2118 = distinct !DILexicalBlock(scope: !2102, file: !3, line: 3025, column: 5)
!2119 = !DILocation(line: 3026, column: 12, scope: !2118)
!2120 = !DILocation(line: 3026, column: 11, scope: !2118)
!2121 = !DILocation(line: 3026, column: 25, scope: !2118)
!2122 = !DILocation(line: 3026, column: 9, scope: !2118)
!2123 = !DILocation(line: 3027, column: 9, scope: !2118)
!2124 = !DILocation(line: 3027, column: 18, scope: !2118)
!2125 = !DILocation(line: 3028, column: 17, scope: !2118)
!2126 = !DILocation(line: 3028, column: 16, scope: !2118)
!2127 = !DILocation(line: 3028, column: 15, scope: !2118)
!2128 = !DILocation(line: 3028, column: 7, scope: !2118)
!2129 = !DILocation(line: 3032, column: 34, scope: !2130)
!2130 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 3029, column: 2)
!2131 = !DILocation(line: 3032, column: 40, scope: !2130)
!2132 = !DILocation(line: 3032, column: 49, scope: !2130)
!2133 = !DILocation(line: 3032, column: 14, scope: !2130)
!2134 = !DILocation(line: 3032, column: 12, scope: !2130)
!2135 = !DILocation(line: 3033, column: 4, scope: !2130)
!2136 = !DILocation(line: 3035, column: 33, scope: !2130)
!2137 = !DILocation(line: 3035, column: 39, scope: !2130)
!2138 = !DILocation(line: 3035, column: 48, scope: !2130)
!2139 = !DILocation(line: 3035, column: 14, scope: !2130)
!2140 = !DILocation(line: 3035, column: 12, scope: !2130)
!2141 = !DILocation(line: 3036, column: 4, scope: !2130)
!2142 = !DILocation(line: 3038, column: 23, scope: !2130)
!2143 = !DILocation(line: 3038, column: 29, scope: !2130)
!2144 = !DILocation(line: 3038, column: 38, scope: !2130)
!2145 = !DILocation(line: 3038, column: 14, scope: !2130)
!2146 = !DILocation(line: 3038, column: 12, scope: !2130)
!2147 = !DILocation(line: 3039, column: 4, scope: !2130)
!2148 = !DILocation(line: 3041, column: 11, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 3041, column: 11)
!2150 = !DILocation(line: 3041, column: 19, scope: !2149)
!2151 = !DILocation(line: 3041, column: 24, scope: !2149)
!2152 = !DILocation(line: 3041, column: 23, scope: !2149)
!2153 = !DILocation(line: 3041, column: 22, scope: !2149)
!2154 = !DILocation(line: 3041, column: 32, scope: !2149)
!2155 = !DILocation(line: 3041, column: 11, scope: !2118)
!2156 = !DILocation(line: 3042, column: 10, scope: !2149)
!2157 = !DILocation(line: 3042, column: 2, scope: !2149)
!2158 = !DILocation(line: 3043, column: 11, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2118, file: !3, line: 3043, column: 11)
!2160 = !DILocation(line: 3043, column: 11, scope: !2118)
!2161 = !DILocation(line: 3044, column: 17, scope: !2159)
!2162 = !DILocation(line: 3044, column: 24, scope: !2159)
!2163 = !DILocation(line: 3044, column: 2, scope: !2159)
!2164 = !DILocation(line: 3045, column: 5, scope: !2118)
!2165 = !DILocation(line: 3048, column: 15, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2102, file: !3, line: 3047, column: 5)
!2167 = !DILocation(line: 3050, column: 11, scope: !1725)
!2168 = !DILocation(line: 3050, column: 3, scope: !1725)
!2169 = distinct !DISubprogram(name: "demangle_prefix", scope: !3, file: !3, line: 2644, type: !489, scopeLine: 2646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!2170 = !DILocalVariable(name: "work", arg: 1, scope: !2169, file: !3, line: 2644, type: !491)
!2171 = !DILocation(line: 2644, column: 37, scope: !2169)
!2172 = !DILocalVariable(name: "mangled", arg: 2, scope: !2169, file: !3, line: 2644, type: !492)
!2173 = !DILocation(line: 2644, column: 56, scope: !2169)
!2174 = !DILocalVariable(name: "declp", arg: 3, scope: !2169, file: !3, line: 2645, type: !60)
!2175 = !DILocation(line: 2645, column: 26, scope: !2169)
!2176 = !DILocalVariable(name: "success", scope: !2169, file: !3, line: 2647, type: !7)
!2177 = !DILocation(line: 2647, column: 7, scope: !2169)
!2178 = !DILocalVariable(name: "scan", scope: !2169, file: !3, line: 2648, type: !76)
!2179 = !DILocation(line: 2648, column: 15, scope: !2169)
!2180 = !DILocalVariable(name: "i", scope: !2169, file: !3, line: 2649, type: !7)
!2181 = !DILocation(line: 2649, column: 7, scope: !2169)
!2182 = !DILocation(line: 2651, column: 15, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 2651, column: 7)
!2184 = !DILocation(line: 2651, column: 14, scope: !2183)
!2185 = !DILocation(line: 2651, column: 7, scope: !2183)
!2186 = !DILocation(line: 2651, column: 24, scope: !2183)
!2187 = !DILocation(line: 2652, column: 7, scope: !2183)
!2188 = !DILocation(line: 2652, column: 20, scope: !2183)
!2189 = !DILocation(line: 2652, column: 19, scope: !2183)
!2190 = !DILocation(line: 2652, column: 11, scope: !2183)
!2191 = !DILocation(line: 2652, column: 42, scope: !2183)
!2192 = !DILocation(line: 2653, column: 11, scope: !2183)
!2193 = !DILocation(line: 2653, column: 23, scope: !2183)
!2194 = !DILocation(line: 2653, column: 22, scope: !2183)
!2195 = !DILocation(line: 2653, column: 14, scope: !2183)
!2196 = !DILocation(line: 2653, column: 45, scope: !2183)
!2197 = !DILocation(line: 2651, column: 7, scope: !2169)
!2198 = !DILocation(line: 2658, column: 9, scope: !2199)
!2199 = distinct !DILexicalBlock(scope: !2183, file: !3, line: 2654, column: 5)
!2200 = !DILocation(line: 2658, column: 18, scope: !2199)
!2201 = !DILocation(line: 2659, column: 7, scope: !2199)
!2202 = !DILocation(line: 2659, column: 13, scope: !2199)
!2203 = !DILocation(line: 2659, column: 25, scope: !2199)
!2204 = !DILocation(line: 2660, column: 5, scope: !2199)
!2205 = !DILocation(line: 2661, column: 20, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2183, file: !3, line: 2661, column: 12)
!2207 = !DILocation(line: 2661, column: 19, scope: !2206)
!2208 = !DILocation(line: 2661, column: 12, scope: !2206)
!2209 = !DILocation(line: 2661, column: 29, scope: !2206)
!2210 = !DILocation(line: 2661, column: 35, scope: !2206)
!2211 = !DILocation(line: 2661, column: 47, scope: !2206)
!2212 = !DILocation(line: 2661, column: 46, scope: !2206)
!2213 = !DILocation(line: 2661, column: 38, scope: !2206)
!2214 = !DILocation(line: 2661, column: 71, scope: !2206)
!2215 = !DILocation(line: 2661, column: 12, scope: !2183)
!2216 = !DILocalVariable(name: "marker", scope: !2217, file: !3, line: 2663, type: !52)
!2217 = distinct !DILexicalBlock(scope: !2206, file: !3, line: 2662, column: 5)
!2218 = !DILocation(line: 2663, column: 13, scope: !2217)
!2219 = !DILocation(line: 2663, column: 47, scope: !2217)
!2220 = !DILocation(line: 2663, column: 46, scope: !2217)
!2221 = !DILocation(line: 2663, column: 45, scope: !2217)
!2222 = !DILocation(line: 2663, column: 22, scope: !2217)
!2223 = !DILocation(line: 2664, column: 11, scope: !2224)
!2224 = distinct !DILexicalBlock(scope: !2217, file: !3, line: 2664, column: 11)
!2225 = !DILocation(line: 2664, column: 18, scope: !2224)
!2226 = !DILocation(line: 2664, column: 26, scope: !2224)
!2227 = !DILocation(line: 2664, column: 30, scope: !2224)
!2228 = !DILocation(line: 2664, column: 29, scope: !2224)
!2229 = !DILocation(line: 2664, column: 42, scope: !2224)
!2230 = !DILocation(line: 2664, column: 41, scope: !2224)
!2231 = !DILocation(line: 2664, column: 40, scope: !2224)
!2232 = !DILocation(line: 2664, column: 37, scope: !2224)
!2233 = !DILocation(line: 2664, column: 11, scope: !2217)
!2234 = !DILocation(line: 2666, column: 10, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2236, file: !3, line: 2666, column: 8)
!2236 = distinct !DILexicalBlock(scope: !2224, file: !3, line: 2665, column: 2)
!2237 = !DILocation(line: 2666, column: 9, scope: !2235)
!2238 = !DILocation(line: 2666, column: 8, scope: !2235)
!2239 = !DILocation(line: 2666, column: 22, scope: !2235)
!2240 = !DILocation(line: 2666, column: 8, scope: !2236)
!2241 = !DILocation(line: 2669, column: 10, scope: !2242)
!2242 = distinct !DILexicalBlock(scope: !2235, file: !3, line: 2667, column: 6)
!2243 = !DILocation(line: 2669, column: 19, scope: !2242)
!2244 = !DILocation(line: 2670, column: 8, scope: !2242)
!2245 = !DILocation(line: 2670, column: 14, scope: !2242)
!2246 = !DILocation(line: 2670, column: 25, scope: !2242)
!2247 = !DILocation(line: 2671, column: 25, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2242, file: !3, line: 2671, column: 12)
!2249 = !DILocation(line: 2671, column: 31, scope: !2248)
!2250 = !DILocation(line: 2671, column: 40, scope: !2248)
!2251 = !DILocation(line: 2671, column: 12, scope: !2248)
!2252 = !DILocation(line: 2671, column: 12, scope: !2242)
!2253 = !DILocation(line: 2672, column: 10, scope: !2248)
!2254 = !DILocation(line: 2672, column: 3, scope: !2248)
!2255 = !DILocation(line: 2673, column: 6, scope: !2242)
!2256 = !DILocation(line: 2674, column: 15, scope: !2257)
!2257 = distinct !DILexicalBlock(scope: !2235, file: !3, line: 2674, column: 13)
!2258 = !DILocation(line: 2674, column: 14, scope: !2257)
!2259 = !DILocation(line: 2674, column: 13, scope: !2257)
!2260 = !DILocation(line: 2674, column: 27, scope: !2257)
!2261 = !DILocation(line: 2674, column: 13, scope: !2235)
!2262 = !DILocation(line: 2677, column: 10, scope: !2263)
!2263 = distinct !DILexicalBlock(scope: !2257, file: !3, line: 2675, column: 6)
!2264 = !DILocation(line: 2677, column: 19, scope: !2263)
!2265 = !DILocation(line: 2678, column: 8, scope: !2263)
!2266 = !DILocation(line: 2678, column: 14, scope: !2263)
!2267 = !DILocation(line: 2678, column: 26, scope: !2263)
!2268 = !DILocation(line: 2679, column: 25, scope: !2269)
!2269 = distinct !DILexicalBlock(scope: !2263, file: !3, line: 2679, column: 12)
!2270 = !DILocation(line: 2679, column: 31, scope: !2269)
!2271 = !DILocation(line: 2679, column: 40, scope: !2269)
!2272 = !DILocation(line: 2679, column: 12, scope: !2269)
!2273 = !DILocation(line: 2679, column: 12, scope: !2263)
!2274 = !DILocation(line: 2680, column: 10, scope: !2269)
!2275 = !DILocation(line: 2680, column: 3, scope: !2269)
!2276 = !DILocation(line: 2681, column: 6, scope: !2263)
!2277 = !DILocation(line: 2682, column: 2, scope: !2236)
!2278 = !DILocation(line: 2683, column: 5, scope: !2217)
!2279 = !DILocation(line: 2684, column: 13, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2206, file: !3, line: 2684, column: 12)
!2281 = !DILocation(line: 2684, column: 28, scope: !2280)
!2282 = !DILocation(line: 2684, column: 31, scope: !2280)
!2283 = !DILocation(line: 2684, column: 45, scope: !2280)
!2284 = !DILocation(line: 2684, column: 48, scope: !2280)
!2285 = !DILocation(line: 2684, column: 64, scope: !2280)
!2286 = !DILocation(line: 2684, column: 76, scope: !2280)
!2287 = !DILocation(line: 2684, column: 75, scope: !2280)
!2288 = !DILocation(line: 2684, column: 67, scope: !2280)
!2289 = !DILocation(line: 2684, column: 99, scope: !2280)
!2290 = !DILocation(line: 2684, column: 12, scope: !2206)
!2291 = !DILocation(line: 2687, column: 9, scope: !2292)
!2292 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 2685, column: 5)
!2293 = !DILocation(line: 2687, column: 18, scope: !2292)
!2294 = !DILocation(line: 2688, column: 7, scope: !2292)
!2295 = !DILocation(line: 2688, column: 13, scope: !2292)
!2296 = !DILocation(line: 2688, column: 24, scope: !2292)
!2297 = !DILocation(line: 2689, column: 5, scope: !2292)
!2298 = !DILocation(line: 2690, column: 13, scope: !2299)
!2299 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 2690, column: 12)
!2300 = !DILocation(line: 2690, column: 28, scope: !2299)
!2301 = !DILocation(line: 2690, column: 31, scope: !2299)
!2302 = !DILocation(line: 2690, column: 45, scope: !2299)
!2303 = !DILocation(line: 2690, column: 48, scope: !2299)
!2304 = !DILocation(line: 2690, column: 64, scope: !2299)
!2305 = !DILocation(line: 2690, column: 76, scope: !2299)
!2306 = !DILocation(line: 2690, column: 75, scope: !2299)
!2307 = !DILocation(line: 2690, column: 67, scope: !2299)
!2308 = !DILocation(line: 2690, column: 99, scope: !2299)
!2309 = !DILocation(line: 2690, column: 12, scope: !2280)
!2310 = !DILocation(line: 2693, column: 9, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2299, file: !3, line: 2691, column: 5)
!2312 = !DILocation(line: 2693, column: 18, scope: !2311)
!2313 = !DILocation(line: 2694, column: 7, scope: !2311)
!2314 = !DILocation(line: 2694, column: 13, scope: !2311)
!2315 = !DILocation(line: 2694, column: 25, scope: !2311)
!2316 = !DILocation(line: 2695, column: 5, scope: !2311)
!2317 = !DILocation(line: 2702, column: 13, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 2701, column: 3)
!2319 = !DILocation(line: 2702, column: 12, scope: !2318)
!2320 = !DILocation(line: 2702, column: 10, scope: !2318)
!2321 = !DILocation(line: 2704, column: 5, scope: !2318)
!2322 = !DILocation(line: 2705, column: 22, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2318, file: !3, line: 2704, column: 8)
!2324 = !DILocation(line: 2705, column: 14, scope: !2323)
!2325 = !DILocation(line: 2705, column: 12, scope: !2323)
!2326 = !DILocation(line: 2706, column: 5, scope: !2323)
!2327 = !DILocation(line: 2706, column: 14, scope: !2318)
!2328 = !DILocation(line: 2706, column: 19, scope: !2318)
!2329 = !DILocation(line: 2706, column: 27, scope: !2318)
!2330 = !DILocation(line: 2706, column: 31, scope: !2318)
!2331 = !DILocation(line: 2706, column: 30, scope: !2318)
!2332 = !DILocation(line: 2706, column: 38, scope: !2318)
!2333 = !DILocation(line: 0, scope: !2318)
!2334 = distinct !{!2334, !2321, !2335}
!2335 = !DILocation(line: 2706, column: 44, scope: !2318)
!2336 = !DILocation(line: 2708, column: 9, scope: !2337)
!2337 = distinct !DILexicalBlock(scope: !2318, file: !3, line: 2708, column: 9)
!2338 = !DILocation(line: 2708, column: 14, scope: !2337)
!2339 = !DILocation(line: 2708, column: 9, scope: !2318)
!2340 = !DILocation(line: 2708, column: 23, scope: !2337)
!2341 = !DILocation(line: 2711, column: 7, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 2711, column: 7)
!2343 = !DILocation(line: 2711, column: 12, scope: !2342)
!2344 = !DILocation(line: 2711, column: 7, scope: !2169)
!2345 = !DILocation(line: 2715, column: 19, scope: !2346)
!2346 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 2712, column: 5)
!2347 = !DILocation(line: 2715, column: 11, scope: !2346)
!2348 = !DILocation(line: 2715, column: 9, scope: !2346)
!2349 = !DILocation(line: 2716, column: 11, scope: !2350)
!2350 = distinct !DILexicalBlock(scope: !2346, file: !3, line: 2716, column: 11)
!2351 = !DILocation(line: 2716, column: 13, scope: !2350)
!2352 = !DILocation(line: 2716, column: 11, scope: !2346)
!2353 = !DILocation(line: 2718, column: 13, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2350, file: !3, line: 2717, column: 2)
!2355 = !DILocation(line: 2718, column: 15, scope: !2354)
!2356 = !DILocation(line: 2718, column: 9, scope: !2354)
!2357 = !DILocation(line: 2719, column: 2, scope: !2354)
!2358 = !DILocation(line: 2720, column: 5, scope: !2346)
!2359 = !DILocation(line: 2722, column: 7, scope: !2360)
!2360 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 2722, column: 7)
!2361 = !DILocation(line: 2722, column: 12, scope: !2360)
!2362 = !DILocation(line: 2722, column: 7, scope: !2169)
!2363 = !DILocation(line: 2724, column: 15, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !2360, file: !3, line: 2723, column: 5)
!2365 = !DILocation(line: 2725, column: 5, scope: !2364)
!2366 = !DILocation(line: 2726, column: 12, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2360, file: !3, line: 2726, column: 12)
!2368 = !DILocation(line: 2726, column: 20, scope: !2367)
!2369 = !DILocation(line: 2726, column: 12, scope: !2360)
!2370 = !DILocation(line: 2728, column: 12, scope: !2371)
!2371 = distinct !DILexicalBlock(scope: !2372, file: !3, line: 2728, column: 11)
!2372 = distinct !DILexicalBlock(scope: !2367, file: !3, line: 2727, column: 5)
!2373 = !DILocation(line: 2728, column: 45, scope: !2371)
!2374 = !DILocation(line: 2728, column: 49, scope: !2371)
!2375 = !DILocation(line: 2728, column: 57, scope: !2371)
!2376 = !DILocation(line: 2728, column: 11, scope: !2372)
!2377 = !DILocation(line: 2730, column: 12, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2729, column: 2)
!2379 = !DILocation(line: 2731, column: 2, scope: !2378)
!2380 = !DILocation(line: 2732, column: 5, scope: !2372)
!2381 = !DILocation(line: 2733, column: 13, scope: !2382)
!2382 = distinct !DILexicalBlock(scope: !2367, file: !3, line: 2733, column: 12)
!2383 = !DILocation(line: 2733, column: 22, scope: !2382)
!2384 = !DILocation(line: 2733, column: 21, scope: !2382)
!2385 = !DILocation(line: 2733, column: 18, scope: !2382)
!2386 = !DILocation(line: 2734, column: 5, scope: !2382)
!2387 = !DILocation(line: 2734, column: 9, scope: !2382)
!2388 = !DILocation(line: 2734, column: 42, scope: !2382)
!2389 = !DILocation(line: 2734, column: 46, scope: !2382)
!2390 = !DILocation(line: 2734, column: 54, scope: !2382)
!2391 = !DILocation(line: 2735, column: 9, scope: !2382)
!2392 = !DILocation(line: 2735, column: 13, scope: !2382)
!2393 = !DILocation(line: 2735, column: 21, scope: !2382)
!2394 = !DILocation(line: 2735, column: 29, scope: !2382)
!2395 = !DILocation(line: 2735, column: 33, scope: !2382)
!2396 = !DILocation(line: 2735, column: 41, scope: !2382)
!2397 = !DILocation(line: 2735, column: 49, scope: !2382)
!2398 = !DILocation(line: 2735, column: 53, scope: !2382)
!2399 = !DILocation(line: 2735, column: 61, scope: !2382)
!2400 = !DILocation(line: 2733, column: 12, scope: !2367)
!2401 = !DILocation(line: 2740, column: 12, scope: !2402)
!2402 = distinct !DILexicalBlock(scope: !2403, file: !3, line: 2740, column: 11)
!2403 = distinct !DILexicalBlock(scope: !2382, file: !3, line: 2736, column: 5)
!2404 = !DILocation(line: 2740, column: 29, scope: !2402)
!2405 = !DILocation(line: 2740, column: 32, scope: !2402)
!2406 = !DILocation(line: 2740, column: 47, scope: !2402)
!2407 = !DILocation(line: 2740, column: 50, scope: !2402)
!2408 = !DILocation(line: 2741, column: 4, scope: !2402)
!2409 = !DILocation(line: 2741, column: 7, scope: !2402)
!2410 = !DILocation(line: 2740, column: 11, scope: !2403)
!2411 = !DILocation(line: 2743, column: 15, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2402, file: !3, line: 2742, column: 2)
!2413 = !DILocation(line: 2743, column: 20, scope: !2412)
!2414 = !DILocation(line: 2743, column: 5, scope: !2412)
!2415 = !DILocation(line: 2743, column: 13, scope: !2412)
!2416 = !DILocation(line: 2744, column: 19, scope: !2412)
!2417 = !DILocation(line: 2744, column: 4, scope: !2412)
!2418 = !DILocation(line: 2745, column: 19, scope: !2412)
!2419 = !DILocation(line: 2745, column: 27, scope: !2412)
!2420 = !DILocation(line: 2745, column: 26, scope: !2412)
!2421 = !DILocation(line: 2745, column: 4, scope: !2412)
!2422 = !DILocation(line: 2746, column: 25, scope: !2412)
!2423 = !DILocation(line: 2746, column: 24, scope: !2412)
!2424 = !DILocation(line: 2746, column: 16, scope: !2412)
!2425 = !DILocation(line: 2746, column: 5, scope: !2412)
!2426 = !DILocation(line: 2746, column: 13, scope: !2412)
!2427 = !DILocation(line: 2747, column: 12, scope: !2412)
!2428 = !DILocation(line: 2748, column: 2, scope: !2412)
!2429 = !DILocation(line: 2755, column: 10, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !2431, file: !3, line: 2755, column: 8)
!2431 = distinct !DILexicalBlock(scope: !2402, file: !3, line: 2750, column: 2)
!2432 = !DILocation(line: 2755, column: 27, scope: !2430)
!2433 = !DILocation(line: 2755, column: 30, scope: !2430)
!2434 = !DILocation(line: 2755, column: 45, scope: !2430)
!2435 = !DILocation(line: 2755, column: 48, scope: !2430)
!2436 = !DILocation(line: 2755, column: 62, scope: !2430)
!2437 = !DILocation(line: 2755, column: 65, scope: !2430)
!2438 = !DILocation(line: 2755, column: 8, scope: !2431)
!2439 = !DILocation(line: 2756, column: 6, scope: !2430)
!2440 = !DILocation(line: 2756, column: 14, scope: !2430)
!2441 = !DILocation(line: 2756, column: 26, scope: !2430)
!2442 = !DILocation(line: 2757, column: 15, scope: !2431)
!2443 = !DILocation(line: 2757, column: 20, scope: !2431)
!2444 = !DILocation(line: 2757, column: 5, scope: !2431)
!2445 = !DILocation(line: 2757, column: 13, scope: !2431)
!2446 = !DILocation(line: 2759, column: 5, scope: !2403)
!2447 = !DILocation(line: 2760, column: 12, scope: !2448)
!2448 = distinct !DILexicalBlock(scope: !2382, file: !3, line: 2760, column: 12)
!2449 = !DILocation(line: 2760, column: 27, scope: !2448)
!2450 = !DILocation(line: 2760, column: 30, scope: !2448)
!2451 = !DILocation(line: 2760, column: 38, scope: !2448)
!2452 = !DILocation(line: 2760, column: 45, scope: !2448)
!2453 = !DILocation(line: 2760, column: 48, scope: !2448)
!2454 = !DILocation(line: 2760, column: 56, scope: !2448)
!2455 = !DILocation(line: 2760, column: 12, scope: !2382)
!2456 = !DILocation(line: 2763, column: 15, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 2761, column: 5)
!2458 = !DILocation(line: 2766, column: 33, scope: !2457)
!2459 = !DILocation(line: 2766, column: 39, scope: !2457)
!2460 = !DILocation(line: 2766, column: 57, scope: !2457)
!2461 = !DILocation(line: 2766, column: 56, scope: !2457)
!2462 = !DILocation(line: 2766, column: 48, scope: !2457)
!2463 = !DILocation(line: 2766, column: 67, scope: !2457)
!2464 = !DILocation(line: 2766, column: 7, scope: !2457)
!2465 = !DILocation(line: 2767, column: 5, scope: !2457)
!2466 = !DILocation(line: 2768, column: 12, scope: !2467)
!2467 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 2768, column: 12)
!2468 = !DILocation(line: 2768, column: 27, scope: !2467)
!2469 = !DILocation(line: 2768, column: 32, scope: !2467)
!2470 = !DILocation(line: 2768, column: 40, scope: !2467)
!2471 = !DILocation(line: 2768, column: 47, scope: !2467)
!2472 = !DILocation(line: 2768, column: 50, scope: !2467)
!2473 = !DILocation(line: 2768, column: 58, scope: !2467)
!2474 = !DILocation(line: 2769, column: 31, scope: !2467)
!2475 = !DILocation(line: 2769, column: 35, scope: !2467)
!2476 = !DILocation(line: 2769, column: 43, scope: !2467)
!2477 = !DILocation(line: 2769, column: 50, scope: !2467)
!2478 = !DILocation(line: 2769, column: 53, scope: !2467)
!2479 = !DILocation(line: 2769, column: 61, scope: !2467)
!2480 = !DILocation(line: 2770, column: 31, scope: !2467)
!2481 = !DILocation(line: 2770, column: 35, scope: !2467)
!2482 = !DILocation(line: 2770, column: 43, scope: !2467)
!2483 = !DILocation(line: 2770, column: 50, scope: !2467)
!2484 = !DILocation(line: 2770, column: 53, scope: !2467)
!2485 = !DILocation(line: 2770, column: 61, scope: !2467)
!2486 = !DILocation(line: 2768, column: 12, scope: !2448)
!2487 = !DILocation(line: 2773, column: 15, scope: !2488)
!2488 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 2771, column: 5)
!2489 = !DILocation(line: 2776, column: 33, scope: !2488)
!2490 = !DILocation(line: 2776, column: 39, scope: !2488)
!2491 = !DILocation(line: 2776, column: 57, scope: !2488)
!2492 = !DILocation(line: 2776, column: 56, scope: !2488)
!2493 = !DILocation(line: 2776, column: 48, scope: !2488)
!2494 = !DILocation(line: 2776, column: 67, scope: !2488)
!2495 = !DILocation(line: 2776, column: 7, scope: !2488)
!2496 = !DILocation(line: 2777, column: 5, scope: !2488)
!2497 = !DILocation(line: 2778, column: 13, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2467, file: !3, line: 2778, column: 12)
!2499 = !DILocation(line: 2778, column: 22, scope: !2498)
!2500 = !DILocation(line: 2778, column: 21, scope: !2498)
!2501 = !DILocation(line: 2778, column: 18, scope: !2498)
!2502 = !DILocation(line: 2778, column: 31, scope: !2498)
!2503 = !DILocation(line: 2778, column: 35, scope: !2498)
!2504 = !DILocation(line: 2779, column: 5, scope: !2498)
!2505 = !DILocation(line: 2779, column: 9, scope: !2498)
!2506 = !DILocation(line: 2779, column: 17, scope: !2498)
!2507 = !DILocation(line: 2778, column: 12, scope: !2467)
!2508 = !DILocation(line: 2784, column: 13, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2510, file: !3, line: 2784, column: 11)
!2510 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 2780, column: 5)
!2511 = !DILocation(line: 2784, column: 28, scope: !2509)
!2512 = !DILocation(line: 2784, column: 31, scope: !2509)
!2513 = !DILocation(line: 2784, column: 48, scope: !2509)
!2514 = !DILocation(line: 2784, column: 51, scope: !2509)
!2515 = !DILocation(line: 2784, column: 65, scope: !2509)
!2516 = !DILocation(line: 2784, column: 68, scope: !2509)
!2517 = !DILocation(line: 2785, column: 4, scope: !2509)
!2518 = !DILocation(line: 2785, column: 21, scope: !2509)
!2519 = !DILocation(line: 2785, column: 30, scope: !2509)
!2520 = !DILocation(line: 2785, column: 8, scope: !2509)
!2521 = !DILocation(line: 2785, column: 37, scope: !2509)
!2522 = !DILocation(line: 2784, column: 11, scope: !2510)
!2523 = !DILocation(line: 2787, column: 4, scope: !2524)
!2524 = distinct !DILexicalBlock(scope: !2509, file: !3, line: 2786, column: 2)
!2525 = !DILocation(line: 2787, column: 12, scope: !2524)
!2526 = !DILocation(line: 2787, column: 11, scope: !2524)
!2527 = !DILocation(line: 2787, column: 17, scope: !2524)
!2528 = !DILocation(line: 2789, column: 12, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2524, file: !3, line: 2788, column: 6)
!2530 = distinct !{!2530, !2523, !2531}
!2531 = !DILocation(line: 2790, column: 6, scope: !2524)
!2532 = !DILocation(line: 2791, column: 24, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !2524, file: !3, line: 2791, column: 8)
!2534 = !DILocation(line: 2791, column: 16, scope: !2533)
!2535 = !DILocation(line: 2791, column: 14, scope: !2533)
!2536 = !DILocation(line: 2791, column: 37, scope: !2533)
!2537 = !DILocation(line: 2791, column: 45, scope: !2533)
!2538 = !DILocation(line: 2791, column: 51, scope: !2533)
!2539 = !DILocation(line: 2791, column: 56, scope: !2533)
!2540 = !DILocation(line: 2791, column: 49, scope: !2533)
!2541 = !DILocation(line: 2791, column: 61, scope: !2533)
!2542 = !DILocation(line: 2791, column: 8, scope: !2524)
!2543 = !DILocation(line: 2795, column: 16, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2533, file: !3, line: 2792, column: 6)
!2545 = !DILocation(line: 2796, column: 6, scope: !2544)
!2546 = !DILocation(line: 2798, column: 40, scope: !2533)
!2547 = !DILocation(line: 2798, column: 46, scope: !2533)
!2548 = !DILocation(line: 2798, column: 55, scope: !2533)
!2549 = !DILocation(line: 2798, column: 62, scope: !2533)
!2550 = !DILocation(line: 2798, column: 13, scope: !2533)
!2551 = !DILocation(line: 2798, column: 6, scope: !2533)
!2552 = !DILocation(line: 2799, column: 2, scope: !2524)
!2553 = !DILocation(line: 2800, column: 5, scope: !2510)
!2554 = !DILocation(line: 2801, column: 14, scope: !2555)
!2555 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 2801, column: 12)
!2556 = !DILocation(line: 2801, column: 19, scope: !2555)
!2557 = !DILocation(line: 2801, column: 12, scope: !2555)
!2558 = !DILocation(line: 2801, column: 24, scope: !2555)
!2559 = !DILocation(line: 2801, column: 12, scope: !2498)
!2560 = !DILocation(line: 2807, column: 41, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 2802, column: 5)
!2562 = !DILocation(line: 2807, column: 47, scope: !2561)
!2563 = !DILocation(line: 2807, column: 56, scope: !2561)
!2564 = !DILocation(line: 2807, column: 63, scope: !2561)
!2565 = !DILocation(line: 2807, column: 14, scope: !2561)
!2566 = !DILocation(line: 2807, column: 7, scope: !2561)
!2567 = !DILocation(line: 2812, column: 15, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2555, file: !3, line: 2810, column: 5)
!2569 = !DILocation(line: 2815, column: 8, scope: !2570)
!2570 = distinct !DILexicalBlock(scope: !2169, file: !3, line: 2815, column: 7)
!2571 = !DILocation(line: 2815, column: 16, scope: !2570)
!2572 = !DILocation(line: 2815, column: 20, scope: !2570)
!2573 = !DILocation(line: 2815, column: 26, scope: !2570)
!2574 = !DILocation(line: 2815, column: 38, scope: !2570)
!2575 = !DILocation(line: 2815, column: 43, scope: !2570)
!2576 = !DILocation(line: 2815, column: 46, scope: !2570)
!2577 = !DILocation(line: 2815, column: 52, scope: !2570)
!2578 = !DILocation(line: 2815, column: 63, scope: !2570)
!2579 = !DILocation(line: 2815, column: 7, scope: !2169)
!2580 = !DILocation(line: 2817, column: 22, scope: !2581)
!2581 = distinct !DILexicalBlock(scope: !2570, file: !3, line: 2816, column: 5)
!2582 = !DILocation(line: 2817, column: 30, scope: !2581)
!2583 = !DILocation(line: 2817, column: 29, scope: !2581)
!2584 = !DILocation(line: 2817, column: 7, scope: !2581)
!2585 = !DILocation(line: 2818, column: 28, scope: !2581)
!2586 = !DILocation(line: 2818, column: 27, scope: !2581)
!2587 = !DILocation(line: 2818, column: 19, scope: !2581)
!2588 = !DILocation(line: 2818, column: 8, scope: !2581)
!2589 = !DILocation(line: 2818, column: 16, scope: !2581)
!2590 = !DILocation(line: 2819, column: 15, scope: !2581)
!2591 = !DILocation(line: 2820, column: 5, scope: !2581)
!2592 = !DILocation(line: 2821, column: 11, scope: !2169)
!2593 = !DILocation(line: 2821, column: 3, scope: !2169)
!2594 = !DILocation(line: 2822, column: 1, scope: !2169)
!2595 = distinct !DISubprogram(name: "demangle_signature", scope: !3, file: !3, line: 1319, type: !489, scopeLine: 1321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!2596 = !DILocalVariable(name: "work", arg: 1, scope: !2595, file: !3, line: 1319, type: !491)
!2597 = !DILocation(line: 1319, column: 40, scope: !2595)
!2598 = !DILocalVariable(name: "mangled", arg: 2, scope: !2595, file: !3, line: 1320, type: !492)
!2599 = !DILocation(line: 1320, column: 34, scope: !2595)
!2600 = !DILocalVariable(name: "declp", arg: 3, scope: !2595, file: !3, line: 1320, type: !60)
!2601 = !DILocation(line: 1320, column: 51, scope: !2595)
!2602 = !DILocalVariable(name: "success", scope: !2595, file: !3, line: 1322, type: !7)
!2603 = !DILocation(line: 1322, column: 7, scope: !2595)
!2604 = !DILocalVariable(name: "func_done", scope: !2595, file: !3, line: 1323, type: !7)
!2605 = !DILocation(line: 1323, column: 7, scope: !2595)
!2606 = !DILocalVariable(name: "expect_func", scope: !2595, file: !3, line: 1324, type: !7)
!2607 = !DILocation(line: 1324, column: 7, scope: !2595)
!2608 = !DILocalVariable(name: "expect_return_type", scope: !2595, file: !3, line: 1325, type: !7)
!2609 = !DILocation(line: 1325, column: 7, scope: !2595)
!2610 = !DILocalVariable(name: "oldmangled", scope: !2595, file: !3, line: 1326, type: !76)
!2611 = !DILocation(line: 1326, column: 15, scope: !2595)
!2612 = !DILocalVariable(name: "trawname", scope: !2595, file: !3, line: 1327, type: !61)
!2613 = !DILocation(line: 1327, column: 10, scope: !2595)
!2614 = !DILocalVariable(name: "tname", scope: !2595, file: !3, line: 1328, type: !61)
!2615 = !DILocation(line: 1328, column: 10, scope: !2595)
!2616 = !DILocation(line: 1330, column: 3, scope: !2595)
!2617 = !DILocation(line: 1330, column: 10, scope: !2595)
!2618 = !DILocation(line: 1330, column: 18, scope: !2595)
!2619 = !DILocation(line: 1330, column: 24, scope: !2595)
!2620 = !DILocation(line: 1330, column: 23, scope: !2595)
!2621 = !DILocation(line: 1330, column: 22, scope: !2595)
!2622 = !DILocation(line: 1330, column: 32, scope: !2595)
!2623 = !DILocation(line: 0, scope: !2595)
!2624 = !DILocation(line: 1332, column: 17, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2595, file: !3, line: 1331, column: 5)
!2626 = !DILocation(line: 1332, column: 16, scope: !2625)
!2627 = !DILocation(line: 1332, column: 15, scope: !2625)
!2628 = !DILocation(line: 1332, column: 7, scope: !2625)
!2629 = !DILocation(line: 1335, column: 18, scope: !2630)
!2630 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 1333, column: 2)
!2631 = !DILocation(line: 1335, column: 17, scope: !2630)
!2632 = !DILocation(line: 1335, column: 15, scope: !2630)
!2633 = !DILocation(line: 1336, column: 34, scope: !2630)
!2634 = !DILocation(line: 1336, column: 40, scope: !2630)
!2635 = !DILocation(line: 1336, column: 49, scope: !2630)
!2636 = !DILocation(line: 1336, column: 14, scope: !2630)
!2637 = !DILocation(line: 1336, column: 12, scope: !2630)
!2638 = !DILocation(line: 1337, column: 8, scope: !2639)
!2639 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1337, column: 8)
!2640 = !DILocation(line: 1337, column: 8, scope: !2630)
!2641 = !DILocation(line: 1338, column: 21, scope: !2639)
!2642 = !DILocation(line: 1338, column: 27, scope: !2639)
!2643 = !DILocation(line: 1338, column: 40, scope: !2639)
!2644 = !DILocation(line: 1338, column: 39, scope: !2639)
!2645 = !DILocation(line: 1338, column: 50, scope: !2639)
!2646 = !DILocation(line: 1338, column: 48, scope: !2639)
!2647 = !DILocation(line: 1338, column: 6, scope: !2639)
!2648 = !DILocation(line: 1339, column: 8, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1339, column: 8)
!2650 = !DILocation(line: 1339, column: 24, scope: !2649)
!2651 = !DILocation(line: 1339, column: 27, scope: !2649)
!2652 = !DILocation(line: 1339, column: 8, scope: !2630)
!2653 = !DILocation(line: 1340, column: 18, scope: !2649)
!2654 = !DILocation(line: 1340, column: 6, scope: !2649)
!2655 = !DILocation(line: 1341, column: 15, scope: !2630)
!2656 = !DILocation(line: 1342, column: 4, scope: !2630)
!2657 = !DILocation(line: 1345, column: 18, scope: !2630)
!2658 = !DILocation(line: 1345, column: 17, scope: !2630)
!2659 = !DILocation(line: 1345, column: 15, scope: !2630)
!2660 = !DILocation(line: 1346, column: 34, scope: !2630)
!2661 = !DILocation(line: 1346, column: 40, scope: !2630)
!2662 = !DILocation(line: 1346, column: 49, scope: !2630)
!2663 = !DILocation(line: 1346, column: 14, scope: !2630)
!2664 = !DILocation(line: 1346, column: 12, scope: !2630)
!2665 = !DILocation(line: 1347, column: 8, scope: !2666)
!2666 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1347, column: 8)
!2667 = !DILocation(line: 1347, column: 24, scope: !2666)
!2668 = !DILocation(line: 1347, column: 27, scope: !2666)
!2669 = !DILocation(line: 1347, column: 8, scope: !2630)
!2670 = !DILocation(line: 1349, column: 20, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2666, file: !3, line: 1348, column: 6)
!2672 = !DILocation(line: 1350, column: 6, scope: !2671)
!2673 = !DILocation(line: 1351, column: 15, scope: !2630)
!2674 = !DILocation(line: 1352, column: 4, scope: !2630)
!2675 = !DILocation(line: 1356, column: 8, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1356, column: 8)
!2677 = !DILocation(line: 1356, column: 19, scope: !2676)
!2678 = !DILocation(line: 1356, column: 8, scope: !2630)
!2679 = !DILocation(line: 1358, column: 22, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2676, file: !3, line: 1357, column: 6)
!2681 = !DILocation(line: 1358, column: 21, scope: !2680)
!2682 = !DILocation(line: 1358, column: 19, scope: !2680)
!2683 = !DILocation(line: 1359, column: 6, scope: !2680)
!2684 = !DILocation(line: 1360, column: 6, scope: !2630)
!2685 = !DILocation(line: 1360, column: 14, scope: !2630)
!2686 = !DILocation(line: 1361, column: 4, scope: !2630)
!2687 = !DILocation(line: 1361, column: 12, scope: !2630)
!2688 = !DILocation(line: 1361, column: 24, scope: !2630)
!2689 = !DILocation(line: 1362, column: 4, scope: !2630)
!2690 = !DILocation(line: 1367, column: 46, scope: !2630)
!2691 = !DILocation(line: 1367, column: 45, scope: !2630)
!2692 = !DILocation(line: 1367, column: 44, scope: !2630)
!2693 = !DILocation(line: 1367, column: 24, scope: !2630)
!2694 = !DILocation(line: 1367, column: 4, scope: !2630)
!2695 = !DILocation(line: 1367, column: 10, scope: !2630)
!2696 = !DILocation(line: 1367, column: 21, scope: !2630)
!2697 = !DILocation(line: 1370, column: 8, scope: !2698)
!2698 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1370, column: 8)
!2699 = !DILocation(line: 1370, column: 19, scope: !2698)
!2700 = !DILocation(line: 1370, column: 8, scope: !2630)
!2701 = !DILocation(line: 1371, column: 20, scope: !2698)
!2702 = !DILocation(line: 1371, column: 19, scope: !2698)
!2703 = !DILocation(line: 1371, column: 17, scope: !2698)
!2704 = !DILocation(line: 1371, column: 6, scope: !2698)
!2705 = !DILocation(line: 1372, column: 6, scope: !2630)
!2706 = !DILocation(line: 1372, column: 14, scope: !2630)
!2707 = !DILocation(line: 1373, column: 4, scope: !2630)
!2708 = !DILocation(line: 1377, column: 8, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1377, column: 8)
!2710 = !DILocation(line: 1377, column: 8, scope: !2630)
!2711 = !DILocation(line: 1379, column: 8, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2709, file: !3, line: 1378, column: 6)
!2713 = !DILocation(line: 1379, column: 17, scope: !2712)
!2714 = !DILocation(line: 1379, column: 16, scope: !2712)
!2715 = !DILocation(line: 1379, column: 15, scope: !2712)
!2716 = !DILocation(line: 1379, column: 25, scope: !2712)
!2717 = !DILocation(line: 1379, column: 31, scope: !2712)
!2718 = !DILocation(line: 1379, column: 30, scope: !2712)
!2719 = !DILocation(line: 1379, column: 29, scope: !2712)
!2720 = !DILocation(line: 1379, column: 39, scope: !2712)
!2721 = !DILocation(line: 0, scope: !2712)
!2722 = !DILocation(line: 1380, column: 5, scope: !2712)
!2723 = !DILocation(line: 1380, column: 13, scope: !2712)
!2724 = distinct !{!2724, !2711, !2723}
!2725 = !DILocation(line: 1381, column: 15, scope: !2726)
!2726 = distinct !DILexicalBlock(scope: !2712, file: !3, line: 1381, column: 12)
!2727 = !DILocation(line: 1381, column: 14, scope: !2726)
!2728 = !DILocation(line: 1381, column: 13, scope: !2726)
!2729 = !DILocation(line: 1381, column: 12, scope: !2712)
!2730 = !DILocation(line: 1382, column: 11, scope: !2726)
!2731 = !DILocation(line: 1382, column: 3, scope: !2726)
!2732 = !DILocation(line: 1384, column: 5, scope: !2726)
!2733 = !DILocation(line: 1384, column: 13, scope: !2726)
!2734 = !DILocation(line: 1385, column: 6, scope: !2712)
!2735 = !DILocation(line: 1387, column: 14, scope: !2709)
!2736 = !DILocation(line: 1388, column: 4, scope: !2630)
!2737 = !DILocation(line: 1392, column: 8, scope: !2738)
!2738 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1392, column: 8)
!2739 = !DILocation(line: 1392, column: 19, scope: !2738)
!2740 = !DILocation(line: 1392, column: 8, scope: !2630)
!2741 = !DILocation(line: 1394, column: 22, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2738, file: !3, line: 1393, column: 6)
!2743 = !DILocation(line: 1394, column: 21, scope: !2742)
!2744 = !DILocation(line: 1394, column: 19, scope: !2742)
!2745 = !DILocation(line: 1395, column: 6, scope: !2742)
!2746 = !DILocation(line: 1396, column: 11, scope: !2630)
!2747 = !DILocation(line: 1396, column: 17, scope: !2630)
!2748 = !DILocation(line: 1396, column: 28, scope: !2630)
!2749 = !DILocation(line: 1397, column: 30, scope: !2630)
!2750 = !DILocation(line: 1397, column: 36, scope: !2630)
!2751 = !DILocation(line: 1397, column: 45, scope: !2630)
!2752 = !DILocation(line: 1397, column: 14, scope: !2630)
!2753 = !DILocation(line: 1397, column: 12, scope: !2630)
!2754 = !DILocation(line: 1398, column: 8, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1398, column: 8)
!2756 = !DILocation(line: 1398, column: 8, scope: !2630)
!2757 = !DILocation(line: 1400, column: 23, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2755, file: !3, line: 1399, column: 6)
!2759 = !DILocation(line: 1400, column: 29, scope: !2758)
!2760 = !DILocation(line: 1400, column: 42, scope: !2758)
!2761 = !DILocation(line: 1400, column: 41, scope: !2758)
!2762 = !DILocation(line: 1400, column: 52, scope: !2758)
!2763 = !DILocation(line: 1400, column: 50, scope: !2758)
!2764 = !DILocation(line: 1400, column: 8, scope: !2758)
!2765 = !DILocation(line: 1401, column: 6, scope: !2758)
!2766 = !DILocation(line: 1402, column: 8, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1402, column: 8)
!2768 = !DILocation(line: 1402, column: 24, scope: !2767)
!2769 = !DILocation(line: 1402, column: 27, scope: !2767)
!2770 = !DILocation(line: 1402, column: 42, scope: !2767)
!2771 = !DILocation(line: 1402, column: 45, scope: !2767)
!2772 = !DILocation(line: 1402, column: 8, scope: !2630)
!2773 = !DILocation(line: 1406, column: 21, scope: !2774)
!2774 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 1406, column: 19)
!2775 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 1403, column: 6)
!2776 = !DILocation(line: 1406, column: 20, scope: !2774)
!2777 = !DILocation(line: 1406, column: 19, scope: !2774)
!2778 = !DILocation(line: 1406, column: 29, scope: !2774)
!2779 = !DILocation(line: 1406, column: 19, scope: !2775)
!2780 = !DILocation(line: 1407, column: 30, scope: !2774)
!2781 = !DILocation(line: 1407, column: 18, scope: !2774)
!2782 = !DILocation(line: 1408, column: 6, scope: !2775)
!2783 = !DILocation(line: 1409, column: 15, scope: !2630)
!2784 = !DILocation(line: 1410, column: 4, scope: !2630)
!2785 = !DILocalVariable(name: "s", scope: !2786, file: !3, line: 1414, type: !61)
!2786 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1413, column: 4)
!2787 = !DILocation(line: 1414, column: 13, scope: !2786)
!2788 = !DILocation(line: 1415, column: 25, scope: !2786)
!2789 = !DILocation(line: 1415, column: 31, scope: !2786)
!2790 = !DILocation(line: 1415, column: 16, scope: !2786)
!2791 = !DILocation(line: 1415, column: 14, scope: !2786)
!2792 = !DILocation(line: 1416, column: 10, scope: !2793)
!2793 = distinct !DILexicalBlock(scope: !2786, file: !3, line: 1416, column: 10)
!2794 = !DILocation(line: 1416, column: 10, scope: !2786)
!2795 = !DILocation(line: 1418, column: 22, scope: !2796)
!2796 = distinct !DILexicalBlock(scope: !2793, file: !3, line: 1417, column: 8)
!2797 = !DILocation(line: 1418, column: 3, scope: !2796)
!2798 = !DILocation(line: 1419, column: 20, scope: !2796)
!2799 = !DILocation(line: 1419, column: 3, scope: !2796)
!2800 = !DILocation(line: 1420, column: 3, scope: !2796)
!2801 = !DILocation(line: 1421, column: 8, scope: !2796)
!2802 = !DILocation(line: 1422, column: 17, scope: !2786)
!2803 = !DILocation(line: 1423, column: 18, scope: !2786)
!2804 = !DILocation(line: 1425, column: 4, scope: !2630)
!2805 = !DILocation(line: 1434, column: 15, scope: !2630)
!2806 = !DILocation(line: 1435, column: 14, scope: !2630)
!2807 = !DILocation(line: 1436, column: 6, scope: !2630)
!2808 = !DILocation(line: 1436, column: 14, scope: !2630)
!2809 = !DILocation(line: 1443, column: 8, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1443, column: 8)
!2811 = !DILocation(line: 1443, column: 25, scope: !2810)
!2812 = !DILocation(line: 1443, column: 28, scope: !2810)
!2813 = !DILocation(line: 1443, column: 43, scope: !2810)
!2814 = !DILocation(line: 1443, column: 46, scope: !2810)
!2815 = !DILocation(line: 1443, column: 60, scope: !2810)
!2816 = !DILocation(line: 1443, column: 63, scope: !2810)
!2817 = !DILocation(line: 1443, column: 8, scope: !2630)
!2818 = !DILocation(line: 1445, column: 22, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2810, file: !3, line: 1444, column: 6)
!2820 = !DILocation(line: 1445, column: 8, scope: !2819)
!2821 = !DILocation(line: 1446, column: 6, scope: !2819)
!2822 = !DILocation(line: 1447, column: 29, scope: !2630)
!2823 = !DILocation(line: 1447, column: 35, scope: !2630)
!2824 = !DILocation(line: 1447, column: 44, scope: !2630)
!2825 = !DILocation(line: 1447, column: 14, scope: !2630)
!2826 = !DILocation(line: 1447, column: 12, scope: !2630)
!2827 = !DILocation(line: 1451, column: 8, scope: !2828)
!2828 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1451, column: 8)
!2829 = !DILocation(line: 1451, column: 16, scope: !2828)
!2830 = !DILocation(line: 1451, column: 20, scope: !2828)
!2831 = !DILocation(line: 1451, column: 36, scope: !2828)
!2832 = !DILocation(line: 1451, column: 39, scope: !2828)
!2833 = !DILocation(line: 1451, column: 55, scope: !2828)
!2834 = !DILocation(line: 1451, column: 60, scope: !2828)
!2835 = !DILocation(line: 1451, column: 59, scope: !2828)
!2836 = !DILocation(line: 1451, column: 58, scope: !2828)
!2837 = !DILocation(line: 1451, column: 68, scope: !2828)
!2838 = !DILocation(line: 1451, column: 8, scope: !2630)
!2839 = !DILocation(line: 1453, column: 12, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2828, file: !3, line: 1452, column: 6)
!2841 = !DILocation(line: 1453, column: 8, scope: !2840)
!2842 = !DILocation(line: 1455, column: 34, scope: !2840)
!2843 = !DILocation(line: 1455, column: 40, scope: !2840)
!2844 = !DILocation(line: 1455, column: 25, scope: !2840)
!2845 = !DILocation(line: 1455, column: 23, scope: !2840)
!2846 = !DILocation(line: 1456, column: 15, scope: !2840)
!2847 = !DILocation(line: 1457, column: 13, scope: !2840)
!2848 = !DILocation(line: 1459, column: 4, scope: !2630)
!2849 = !DILocation(line: 1463, column: 4, scope: !2630)
!2850 = !DILocation(line: 1464, column: 4, scope: !2630)
!2851 = !DILocation(line: 1465, column: 8, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1465, column: 8)
!2853 = !DILocation(line: 1465, column: 19, scope: !2852)
!2854 = !DILocation(line: 1465, column: 8, scope: !2630)
!2855 = !DILocation(line: 1467, column: 22, scope: !2856)
!2856 = distinct !DILexicalBlock(scope: !2852, file: !3, line: 1466, column: 6)
!2857 = !DILocation(line: 1467, column: 21, scope: !2856)
!2858 = !DILocation(line: 1467, column: 19, scope: !2856)
!2859 = !DILocation(line: 1468, column: 6, scope: !2856)
!2860 = !DILocation(line: 1469, column: 33, scope: !2630)
!2861 = !DILocation(line: 1469, column: 39, scope: !2630)
!2862 = !DILocation(line: 1469, column: 14, scope: !2630)
!2863 = !DILocation(line: 1469, column: 12, scope: !2630)
!2864 = !DILocation(line: 1471, column: 8, scope: !2865)
!2865 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1471, column: 8)
!2866 = !DILocation(line: 1471, column: 8, scope: !2630)
!2867 = !DILocation(line: 1473, column: 23, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2865, file: !3, line: 1472, column: 6)
!2869 = !DILocation(line: 1473, column: 29, scope: !2868)
!2870 = !DILocation(line: 1473, column: 42, scope: !2868)
!2871 = !DILocation(line: 1473, column: 41, scope: !2868)
!2872 = !DILocation(line: 1473, column: 52, scope: !2868)
!2873 = !DILocation(line: 1473, column: 50, scope: !2868)
!2874 = !DILocation(line: 1473, column: 8, scope: !2868)
!2875 = !DILocation(line: 1474, column: 6, scope: !2868)
!2876 = !DILocation(line: 1475, column: 27, scope: !2630)
!2877 = !DILocation(line: 1475, column: 4, scope: !2630)
!2878 = !DILocation(line: 1477, column: 20, scope: !2630)
!2879 = !DILocation(line: 1477, column: 4, scope: !2630)
!2880 = !DILocation(line: 1478, column: 8, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1478, column: 8)
!2882 = !DILocation(line: 1478, column: 16, scope: !2881)
!2883 = !DILocation(line: 1478, column: 27, scope: !2881)
!2884 = !DILocation(line: 1478, column: 8, scope: !2630)
!2885 = !DILocation(line: 1480, column: 8, scope: !2886)
!2886 = distinct !DILexicalBlock(scope: !2881, file: !3, line: 1479, column: 6)
!2887 = !DILocation(line: 1481, column: 24, scope: !2886)
!2888 = !DILocation(line: 1481, column: 8, scope: !2886)
!2889 = !DILocation(line: 1482, column: 8, scope: !2886)
!2890 = !DILocation(line: 1482, column: 14, scope: !2886)
!2891 = !DILocation(line: 1482, column: 25, scope: !2886)
!2892 = !DILocation(line: 1483, column: 6, scope: !2886)
!2893 = !DILocation(line: 1484, column: 9, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1484, column: 8)
!2895 = !DILocation(line: 1484, column: 15, scope: !2894)
!2896 = !DILocation(line: 1484, column: 27, scope: !2894)
!2897 = !DILocation(line: 1484, column: 32, scope: !2894)
!2898 = !DILocation(line: 1484, column: 36, scope: !2894)
!2899 = !DILocation(line: 1484, column: 42, scope: !2894)
!2900 = !DILocation(line: 1484, column: 53, scope: !2894)
!2901 = !DILocation(line: 1484, column: 8, scope: !2630)
!2902 = !DILocation(line: 1486, column: 24, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 1485, column: 6)
!2904 = !DILocation(line: 1486, column: 8, scope: !2903)
!2905 = !DILocation(line: 1487, column: 8, scope: !2903)
!2906 = !DILocation(line: 1487, column: 14, scope: !2903)
!2907 = !DILocation(line: 1487, column: 26, scope: !2903)
!2908 = !DILocation(line: 1488, column: 6, scope: !2903)
!2909 = !DILocation(line: 1489, column: 4, scope: !2630)
!2910 = !DILocation(line: 1490, column: 4, scope: !2630)
!2911 = !DILocation(line: 1491, column: 15, scope: !2630)
!2912 = !DILocation(line: 1492, column: 16, scope: !2630)
!2913 = !DILocation(line: 1493, column: 4, scope: !2630)
!2914 = !DILocation(line: 1496, column: 9, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1496, column: 8)
!2916 = !DILocation(line: 1496, column: 25, scope: !2915)
!2917 = !DILocation(line: 1496, column: 28, scope: !2915)
!2918 = !DILocation(line: 1496, column: 44, scope: !2915)
!2919 = !DILocation(line: 1496, column: 47, scope: !2915)
!2920 = !DILocation(line: 1496, column: 8, scope: !2630)
!2921 = !DILocalVariable(name: "return_type", scope: !2922, file: !3, line: 1499, type: !61)
!2922 = distinct !DILexicalBlock(scope: !2915, file: !3, line: 1497, column: 6)
!2923 = !DILocation(line: 1499, column: 15, scope: !2922)
!2924 = !DILocation(line: 1501, column: 10, scope: !2922)
!2925 = !DILocation(line: 1501, column: 18, scope: !2922)
!2926 = !DILocation(line: 1502, column: 27, scope: !2922)
!2927 = !DILocation(line: 1502, column: 33, scope: !2922)
!2928 = !DILocation(line: 1502, column: 18, scope: !2922)
!2929 = !DILocation(line: 1502, column: 16, scope: !2922)
!2930 = !DILocation(line: 1503, column: 8, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 1503, column: 8)
!2932 = distinct !DILexicalBlock(scope: !2922, file: !3, line: 1503, column: 8)
!2933 = !DILocation(line: 1503, column: 8, scope: !2932)
!2934 = !DILocation(line: 1505, column: 25, scope: !2922)
!2935 = !DILocation(line: 1505, column: 8, scope: !2922)
!2936 = !DILocation(line: 1506, column: 8, scope: !2922)
!2937 = !DILocation(line: 1507, column: 8, scope: !2922)
!2938 = !DILocation(line: 1518, column: 17, scope: !2939)
!2939 = distinct !DILexicalBlock(scope: !2915, file: !3, line: 1518, column: 17)
!2940 = !DILocation(line: 1518, column: 17, scope: !2915)
!2941 = !DILocation(line: 1520, column: 19, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !2939, file: !3, line: 1519, column: 15)
!2943 = !DILocation(line: 1520, column: 27, scope: !2942)
!2944 = !DILocation(line: 1521, column: 17, scope: !2942)
!2945 = !DILocation(line: 1521, column: 26, scope: !2942)
!2946 = !DILocation(line: 1521, column: 25, scope: !2942)
!2947 = !DILocation(line: 1521, column: 24, scope: !2942)
!2948 = !DILocation(line: 1521, column: 34, scope: !2942)
!2949 = !DILocation(line: 1521, column: 37, scope: !2942)
!2950 = !DILocation(line: 0, scope: !2942)
!2951 = !DILocation(line: 1522, column: 21, scope: !2942)
!2952 = !DILocation(line: 1522, column: 29, scope: !2942)
!2953 = distinct !{!2953, !2944, !2952}
!2954 = !DILocation(line: 1523, column: 15, scope: !2942)
!2955 = !DILocation(line: 1525, column: 16, scope: !2939)
!2956 = !DILocation(line: 1526, column: 4, scope: !2630)
!2957 = !DILocation(line: 1529, column: 8, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1529, column: 8)
!2959 = !DILocation(line: 1529, column: 24, scope: !2958)
!2960 = !DILocation(line: 1529, column: 27, scope: !2958)
!2961 = !DILocation(line: 1529, column: 8, scope: !2630)
!2962 = !DILocation(line: 1532, column: 37, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2958, file: !3, line: 1530, column: 6)
!2964 = !DILocation(line: 1532, column: 43, scope: !2963)
!2965 = !DILocation(line: 1532, column: 52, scope: !2963)
!2966 = !DILocation(line: 1532, column: 18, scope: !2963)
!2967 = !DILocation(line: 1532, column: 16, scope: !2963)
!2968 = !DILocation(line: 1534, column: 14, scope: !2969)
!2969 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 1534, column: 12)
!2970 = !DILocation(line: 1534, column: 20, scope: !2969)
!2971 = !DILocation(line: 1534, column: 32, scope: !2969)
!2972 = !DILocation(line: 1534, column: 12, scope: !2963)
!2973 = !DILocation(line: 1535, column: 22, scope: !2969)
!2974 = !DILocation(line: 1535, column: 3, scope: !2969)
!2975 = !DILocation(line: 1536, column: 10, scope: !2963)
!2976 = !DILocation(line: 1536, column: 18, scope: !2963)
!2977 = !DILocation(line: 1537, column: 8, scope: !2963)
!2978 = !DILocation(line: 1544, column: 8, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 1544, column: 8)
!2980 = !DILocation(line: 1544, column: 24, scope: !2979)
!2981 = !DILocation(line: 1544, column: 27, scope: !2979)
!2982 = !DILocation(line: 1544, column: 8, scope: !2630)
!2983 = !DILocation(line: 1548, column: 18, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2979, file: !3, line: 1545, column: 6)
!2985 = !DILocation(line: 1549, column: 33, scope: !2984)
!2986 = !DILocation(line: 1549, column: 39, scope: !2984)
!2987 = !DILocation(line: 1549, column: 48, scope: !2984)
!2988 = !DILocation(line: 1549, column: 18, scope: !2984)
!2989 = !DILocation(line: 1549, column: 16, scope: !2984)
!2990 = !DILocation(line: 1550, column: 6, scope: !2984)
!2991 = !DILocation(line: 1557, column: 16, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2979, file: !3, line: 1552, column: 6)
!2993 = !DILocation(line: 1559, column: 4, scope: !2630)
!2994 = !DILocation(line: 1565, column: 6, scope: !2995)
!2995 = distinct !DILexicalBlock(scope: !2996, file: !3, line: 1565, column: 6)
!2996 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 1564, column: 7)
!2997 = !DILocation(line: 1565, column: 14, scope: !2995)
!2998 = !DILocation(line: 1565, column: 17, scope: !2995)
!2999 = !DILocation(line: 1565, column: 6, scope: !2996)
!3000 = !DILocation(line: 1567, column: 16, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2995, file: !3, line: 1566, column: 4)
!3002 = !DILocation(line: 1568, column: 19, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 1568, column: 19)
!3004 = !DILocation(line: 1568, column: 36, scope: !3003)
!3005 = !DILocation(line: 1568, column: 39, scope: !3003)
!3006 = !DILocation(line: 1568, column: 54, scope: !3003)
!3007 = !DILocation(line: 1568, column: 57, scope: !3003)
!3008 = !DILocation(line: 1568, column: 19, scope: !3001)
!3009 = !DILocation(line: 1570, column: 33, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !3003, file: !3, line: 1569, column: 17)
!3011 = !DILocation(line: 1570, column: 19, scope: !3010)
!3012 = !DILocation(line: 1571, column: 17, scope: !3010)
!3013 = !DILocation(line: 1572, column: 31, scope: !3001)
!3014 = !DILocation(line: 1572, column: 37, scope: !3001)
!3015 = !DILocation(line: 1572, column: 46, scope: !3001)
!3016 = !DILocation(line: 1572, column: 16, scope: !3001)
!3017 = !DILocation(line: 1572, column: 14, scope: !3001)
!3018 = !DILocation(line: 1576, column: 18, scope: !3001)
!3019 = !DILocation(line: 1577, column: 4, scope: !3001)
!3020 = distinct !{!3020, !2616, !3021}
!3021 = !DILocation(line: 1579, column: 5, scope: !2595)
!3022 = !DILocation(line: 1580, column: 7, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2595, file: !3, line: 1580, column: 7)
!3024 = !DILocation(line: 1580, column: 15, scope: !3023)
!3025 = !DILocation(line: 1580, column: 19, scope: !3023)
!3026 = !DILocation(line: 1580, column: 7, scope: !2595)
!3027 = !DILocation(line: 1582, column: 11, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3029, file: !3, line: 1582, column: 11)
!3029 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 1581, column: 5)
!3030 = !DILocation(line: 1582, column: 27, scope: !3028)
!3031 = !DILocation(line: 1582, column: 30, scope: !3028)
!3032 = !DILocation(line: 1582, column: 11, scope: !3029)
!3033 = !DILocation(line: 1590, column: 29, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1583, column: 2)
!3035 = !DILocation(line: 1590, column: 35, scope: !3034)
!3036 = !DILocation(line: 1590, column: 44, scope: !3034)
!3037 = !DILocation(line: 1590, column: 14, scope: !3034)
!3038 = !DILocation(line: 1590, column: 12, scope: !3034)
!3039 = !DILocation(line: 1591, column: 2, scope: !3034)
!3040 = !DILocation(line: 1592, column: 5, scope: !3029)
!3041 = !DILocation(line: 1593, column: 7, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !2595, file: !3, line: 1593, column: 7)
!3043 = !DILocation(line: 1593, column: 15, scope: !3042)
!3044 = !DILocation(line: 1593, column: 18, scope: !3042)
!3045 = !DILocation(line: 1593, column: 7, scope: !2595)
!3046 = !DILocation(line: 1595, column: 11, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 1595, column: 11)
!3048 = distinct !DILexicalBlock(scope: !3042, file: !3, line: 1594, column: 5)
!3049 = !DILocation(line: 1595, column: 17, scope: !3047)
!3050 = !DILocation(line: 1595, column: 11, scope: !3048)
!3051 = !DILocation(line: 1596, column: 17, scope: !3047)
!3052 = !DILocation(line: 1596, column: 2, scope: !3047)
!3053 = !DILocation(line: 1597, column: 11, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 1597, column: 11)
!3055 = !DILocation(line: 1597, column: 17, scope: !3054)
!3056 = !DILocation(line: 1597, column: 28, scope: !3054)
!3057 = !DILocation(line: 1597, column: 11, scope: !3048)
!3058 = !DILocation(line: 1599, column: 4, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3060, file: !3, line: 1599, column: 4)
!3060 = distinct !DILexicalBlock(scope: !3061, file: !3, line: 1599, column: 4)
!3061 = distinct !DILexicalBlock(scope: !3054, file: !3, line: 1598, column: 2)
!3062 = !DILocation(line: 1599, column: 4, scope: !3060)
!3063 = !DILocation(line: 1600, column: 19, scope: !3061)
!3064 = !DILocation(line: 1600, column: 44, scope: !3061)
!3065 = !DILocation(line: 1600, column: 50, scope: !3061)
!3066 = !DILocation(line: 1600, column: 26, scope: !3061)
!3067 = !DILocation(line: 1600, column: 4, scope: !3061)
!3068 = !DILocation(line: 1601, column: 2, scope: !3061)
!3069 = !DILocation(line: 1602, column: 5, scope: !3048)
!3070 = !DILocation(line: 1604, column: 11, scope: !2595)
!3071 = !DILocation(line: 1604, column: 3, scope: !2595)
!3072 = distinct !DISubprogram(name: "string_prepend", scope: !3, file: !3, line: 4749, type: !3073, scopeLine: 4750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3073 = !DISubroutineType(types: !3074)
!3074 = !{null, !60, !76}
!3075 = !DILocalVariable(name: "p", arg: 1, scope: !3072, file: !3, line: 4749, type: !60)
!3076 = !DILocation(line: 4749, column: 25, scope: !3072)
!3077 = !DILocalVariable(name: "s", arg: 2, scope: !3072, file: !3, line: 4749, type: !76)
!3078 = !DILocation(line: 4749, column: 40, scope: !3072)
!3079 = !DILocation(line: 4751, column: 7, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 4751, column: 7)
!3081 = !DILocation(line: 4751, column: 9, scope: !3080)
!3082 = !DILocation(line: 4751, column: 17, scope: !3080)
!3083 = !DILocation(line: 4751, column: 21, scope: !3080)
!3084 = !DILocation(line: 4751, column: 20, scope: !3080)
!3085 = !DILocation(line: 4751, column: 23, scope: !3080)
!3086 = !DILocation(line: 4751, column: 7, scope: !3072)
!3087 = !DILocation(line: 4753, column: 24, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3080, file: !3, line: 4752, column: 5)
!3089 = !DILocation(line: 4753, column: 27, scope: !3088)
!3090 = !DILocation(line: 4753, column: 38, scope: !3088)
!3091 = !DILocation(line: 4753, column: 30, scope: !3088)
!3092 = !DILocation(line: 4753, column: 7, scope: !3088)
!3093 = !DILocation(line: 4754, column: 5, scope: !3088)
!3094 = !DILocation(line: 4755, column: 1, scope: !3072)
!3095 = distinct !DISubprogram(name: "mop_up", scope: !3, file: !3, line: 1267, type: !3096, scopeLine: 1268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3096 = !DISubroutineType(types: !3097)
!3097 = !{!52, !491, !60, !7}
!3098 = !DILocalVariable(name: "work", arg: 1, scope: !3095, file: !3, line: 1267, type: !491)
!3099 = !DILocation(line: 1267, column: 28, scope: !3095)
!3100 = !DILocalVariable(name: "declp", arg: 2, scope: !3095, file: !3, line: 1267, type: !60)
!3101 = !DILocation(line: 1267, column: 42, scope: !3095)
!3102 = !DILocalVariable(name: "success", arg: 3, scope: !3095, file: !3, line: 1267, type: !7)
!3103 = !DILocation(line: 1267, column: 53, scope: !3095)
!3104 = !DILocalVariable(name: "demangled", scope: !3095, file: !3, line: 1269, type: !52)
!3105 = !DILocation(line: 1269, column: 9, scope: !3095)
!3106 = !DILocation(line: 1271, column: 30, scope: !3095)
!3107 = !DILocation(line: 1271, column: 3, scope: !3095)
!3108 = !DILocation(line: 1276, column: 8, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3095, file: !3, line: 1276, column: 7)
!3110 = !DILocation(line: 1276, column: 7, scope: !3095)
!3111 = !DILocation(line: 1278, column: 22, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1277, column: 5)
!3113 = !DILocation(line: 1278, column: 7, scope: !3112)
!3114 = !DILocation(line: 1279, column: 5, scope: !3112)
!3115 = !DILocation(line: 1282, column: 23, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3109, file: !3, line: 1281, column: 5)
!3117 = !DILocation(line: 1282, column: 7, scope: !3116)
!3118 = !DILocation(line: 1283, column: 19, scope: !3116)
!3119 = !DILocation(line: 1283, column: 26, scope: !3116)
!3120 = !DILocation(line: 1283, column: 17, scope: !3116)
!3121 = !DILocation(line: 1285, column: 11, scope: !3095)
!3122 = !DILocation(line: 1285, column: 3, scope: !3095)
!3123 = distinct !DISubprogram(name: "demangle_qualified", scope: !3, file: !3, line: 3186, type: !3124, scopeLine: 3188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3124 = !DISubroutineType(types: !3125)
!3125 = !{!7, !491, !492, !60, !7, !7}
!3126 = !DILocalVariable(name: "work", arg: 1, scope: !3123, file: !3, line: 3186, type: !491)
!3127 = !DILocation(line: 3186, column: 40, scope: !3123)
!3128 = !DILocalVariable(name: "mangled", arg: 2, scope: !3123, file: !3, line: 3186, type: !492)
!3129 = !DILocation(line: 3186, column: 59, scope: !3123)
!3130 = !DILocalVariable(name: "result", arg: 3, scope: !3123, file: !3, line: 3187, type: !60)
!3131 = !DILocation(line: 3187, column: 29, scope: !3123)
!3132 = !DILocalVariable(name: "isfuncname", arg: 4, scope: !3123, file: !3, line: 3187, type: !7)
!3133 = !DILocation(line: 3187, column: 41, scope: !3123)
!3134 = !DILocalVariable(name: "append", arg: 5, scope: !3123, file: !3, line: 3187, type: !7)
!3135 = !DILocation(line: 3187, column: 57, scope: !3123)
!3136 = !DILocalVariable(name: "qualifiers", scope: !3123, file: !3, line: 3189, type: !7)
!3137 = !DILocation(line: 3189, column: 7, scope: !3123)
!3138 = !DILocalVariable(name: "success", scope: !3123, file: !3, line: 3190, type: !7)
!3139 = !DILocation(line: 3190, column: 7, scope: !3123)
!3140 = !DILocalVariable(name: "num", scope: !3123, file: !3, line: 3191, type: !112)
!3141 = !DILocation(line: 3191, column: 8, scope: !3123)
!3142 = !DILocalVariable(name: "temp", scope: !3123, file: !3, line: 3192, type: !61)
!3143 = !DILocation(line: 3192, column: 10, scope: !3123)
!3144 = !DILocalVariable(name: "last_name", scope: !3123, file: !3, line: 3193, type: !61)
!3145 = !DILocation(line: 3193, column: 10, scope: !3123)
!3146 = !DILocalVariable(name: "bindex", scope: !3123, file: !3, line: 3194, type: !7)
!3147 = !DILocation(line: 3194, column: 7, scope: !3123)
!3148 = !DILocation(line: 3194, column: 32, scope: !3123)
!3149 = !DILocation(line: 3194, column: 16, scope: !3123)
!3150 = !DILocation(line: 3198, column: 17, scope: !3123)
!3151 = !DILocation(line: 3199, column: 3, scope: !3123)
!3152 = !DILocation(line: 3199, column: 8, scope: !3123)
!3153 = !DILocation(line: 3199, column: 14, scope: !3123)
!3154 = !DILocation(line: 3199, column: 26, scope: !3123)
!3155 = !DILocation(line: 3199, column: 31, scope: !3123)
!3156 = !DILocation(line: 3199, column: 35, scope: !3123)
!3157 = !DILocation(line: 3199, column: 41, scope: !3123)
!3158 = !DILocation(line: 3199, column: 52, scope: !3123)
!3159 = !DILocation(line: 0, scope: !3123)
!3160 = !DILocation(line: 3198, column: 14, scope: !3123)
!3161 = !DILocation(line: 3201, column: 3, scope: !3123)
!3162 = !DILocation(line: 3202, column: 3, scope: !3123)
!3163 = !DILocation(line: 3204, column: 9, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 3204, column: 7)
!3165 = !DILocation(line: 3204, column: 8, scope: !3164)
!3166 = !DILocation(line: 3204, column: 7, scope: !3164)
!3167 = !DILocation(line: 3204, column: 21, scope: !3164)
!3168 = !DILocation(line: 3204, column: 7, scope: !3123)
!3169 = !DILocalVariable(name: "idx", scope: !3170, file: !3, line: 3207, type: !7)
!3170 = distinct !DILexicalBlock(scope: !3164, file: !3, line: 3205, column: 5)
!3171 = !DILocation(line: 3207, column: 11, scope: !3170)
!3172 = !DILocation(line: 3208, column: 9, scope: !3170)
!3173 = !DILocation(line: 3208, column: 17, scope: !3170)
!3174 = !DILocation(line: 3209, column: 45, scope: !3170)
!3175 = !DILocation(line: 3209, column: 13, scope: !3170)
!3176 = !DILocation(line: 3209, column: 11, scope: !3170)
!3177 = !DILocation(line: 3210, column: 11, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3170, file: !3, line: 3210, column: 11)
!3179 = !DILocation(line: 3210, column: 15, scope: !3178)
!3180 = !DILocation(line: 3210, column: 21, scope: !3178)
!3181 = !DILocation(line: 3210, column: 24, scope: !3178)
!3182 = !DILocation(line: 3210, column: 31, scope: !3178)
!3183 = !DILocation(line: 3210, column: 39, scope: !3178)
!3184 = !DILocation(line: 3210, column: 28, scope: !3178)
!3185 = !DILocation(line: 3210, column: 11, scope: !3170)
!3186 = !DILocation(line: 3211, column: 17, scope: !3178)
!3187 = !DILocation(line: 3211, column: 9, scope: !3178)
!3188 = !DILocation(line: 3213, column: 31, scope: !3178)
!3189 = !DILocation(line: 3213, column: 39, scope: !3178)
!3190 = !DILocation(line: 3213, column: 48, scope: !3178)
!3191 = !DILocation(line: 3213, column: 9, scope: !3178)
!3192 = !DILocation(line: 3214, column: 5, scope: !3170)
!3193 = !DILocation(line: 3216, column: 15, scope: !3164)
!3194 = !DILocation(line: 3216, column: 14, scope: !3164)
!3195 = !DILocation(line: 3216, column: 13, scope: !3164)
!3196 = !DILocation(line: 3216, column: 5, scope: !3164)
!3197 = !DILocation(line: 3222, column: 9, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3164, file: !3, line: 3217, column: 5)
!3199 = !DILocation(line: 3222, column: 17, scope: !3198)
!3200 = !DILocation(line: 3223, column: 52, scope: !3198)
!3201 = !DILocation(line: 3223, column: 20, scope: !3198)
!3202 = !DILocation(line: 3223, column: 18, scope: !3198)
!3203 = !DILocation(line: 3224, column: 11, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3198, file: !3, line: 3224, column: 11)
!3205 = !DILocation(line: 3224, column: 22, scope: !3204)
!3206 = !DILocation(line: 3224, column: 11, scope: !3198)
!3207 = !DILocation(line: 3225, column: 10, scope: !3204)
!3208 = !DILocation(line: 3225, column: 2, scope: !3204)
!3209 = !DILocation(line: 3226, column: 7, scope: !3198)
!3210 = !DILocation(line: 3238, column: 18, scope: !3198)
!3211 = !DILocation(line: 3238, column: 17, scope: !3198)
!3212 = !DILocation(line: 3238, column: 16, scope: !3198)
!3213 = !DILocation(line: 3238, column: 7, scope: !3198)
!3214 = !DILocation(line: 3238, column: 14, scope: !3198)
!3215 = !DILocation(line: 3239, column: 7, scope: !3198)
!3216 = !DILocation(line: 3239, column: 14, scope: !3198)
!3217 = !DILocation(line: 3240, column: 26, scope: !3198)
!3218 = !DILocation(line: 3240, column: 20, scope: !3198)
!3219 = !DILocation(line: 3240, column: 18, scope: !3198)
!3220 = !DILocation(line: 3245, column: 13, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3198, file: !3, line: 3245, column: 11)
!3222 = !DILocation(line: 3245, column: 12, scope: !3221)
!3223 = !DILocation(line: 3245, column: 11, scope: !3221)
!3224 = !DILocation(line: 3245, column: 25, scope: !3221)
!3225 = !DILocation(line: 3245, column: 11, scope: !3198)
!3226 = !DILocation(line: 3247, column: 6, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3221, file: !3, line: 3246, column: 2)
!3228 = !DILocation(line: 3247, column: 14, scope: !3227)
!3229 = !DILocation(line: 3248, column: 2, scope: !3227)
!3230 = !DILocation(line: 3249, column: 9, scope: !3198)
!3231 = !DILocation(line: 3249, column: 18, scope: !3198)
!3232 = !DILocation(line: 3250, column: 7, scope: !3198)
!3233 = !DILocation(line: 3254, column: 15, scope: !3198)
!3234 = !DILocation(line: 3255, column: 5, scope: !3198)
!3235 = !DILocation(line: 3257, column: 8, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 3257, column: 7)
!3237 = !DILocation(line: 3257, column: 7, scope: !3123)
!3238 = !DILocation(line: 3258, column: 12, scope: !3236)
!3239 = !DILocation(line: 3258, column: 5, scope: !3236)
!3240 = !DILocation(line: 3263, column: 3, scope: !3123)
!3241 = !DILocation(line: 3263, column: 20, scope: !3123)
!3242 = !DILocation(line: 3263, column: 23, scope: !3123)
!3243 = !DILocalVariable(name: "remember_K", scope: !3244, file: !3, line: 3265, type: !7)
!3244 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 3264, column: 5)
!3245 = !DILocation(line: 3265, column: 11, scope: !3244)
!3246 = !DILocation(line: 3266, column: 7, scope: !3244)
!3247 = !DILocation(line: 3268, column: 12, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 3268, column: 11)
!3249 = !DILocation(line: 3268, column: 11, scope: !3248)
!3250 = !DILocation(line: 3268, column: 23, scope: !3248)
!3251 = !DILocation(line: 3268, column: 11, scope: !3244)
!3252 = !DILocation(line: 3269, column: 4, scope: !3248)
!3253 = !DILocation(line: 3269, column: 12, scope: !3248)
!3254 = !DILocation(line: 3269, column: 2, scope: !3248)
!3255 = !DILocation(line: 3271, column: 12, scope: !3256)
!3256 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 3271, column: 11)
!3257 = !DILocation(line: 3271, column: 11, scope: !3256)
!3258 = !DILocation(line: 3271, column: 23, scope: !3256)
!3259 = !DILocation(line: 3271, column: 11, scope: !3244)
!3260 = !DILocation(line: 3279, column: 32, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 3272, column: 2)
!3262 = !DILocation(line: 3279, column: 38, scope: !3261)
!3263 = !DILocation(line: 3279, column: 14, scope: !3261)
!3264 = !DILocation(line: 3279, column: 12, scope: !3261)
!3265 = !DILocation(line: 3281, column: 9, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3261, file: !3, line: 3281, column: 8)
!3267 = !DILocation(line: 3281, column: 8, scope: !3261)
!3268 = !DILocation(line: 3282, column: 6, scope: !3266)
!3269 = !DILocation(line: 3283, column: 2, scope: !3261)
!3270 = !DILocation(line: 3284, column: 17, scope: !3271)
!3271 = distinct !DILexicalBlock(scope: !3256, file: !3, line: 3284, column: 16)
!3272 = !DILocation(line: 3284, column: 16, scope: !3271)
!3273 = !DILocation(line: 3284, column: 28, scope: !3271)
!3274 = !DILocation(line: 3284, column: 16, scope: !3256)
!3275 = !DILocalVariable(name: "idx", scope: !3276, file: !3, line: 3286, type: !7)
!3276 = distinct !DILexicalBlock(scope: !3271, file: !3, line: 3285, column: 2)
!3277 = !DILocation(line: 3286, column: 15, scope: !3276)
!3278 = !DILocation(line: 3287, column: 13, scope: !3276)
!3279 = !DILocation(line: 3287, column: 21, scope: !3276)
!3280 = !DILocation(line: 3288, column: 49, scope: !3276)
!3281 = !DILocation(line: 3288, column: 17, scope: !3276)
!3282 = !DILocation(line: 3288, column: 15, scope: !3276)
!3283 = !DILocation(line: 3289, column: 15, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 3289, column: 15)
!3285 = !DILocation(line: 3289, column: 19, scope: !3284)
!3286 = !DILocation(line: 3289, column: 25, scope: !3284)
!3287 = !DILocation(line: 3289, column: 28, scope: !3284)
!3288 = !DILocation(line: 3289, column: 35, scope: !3284)
!3289 = !DILocation(line: 3289, column: 41, scope: !3284)
!3290 = !DILocation(line: 3289, column: 32, scope: !3284)
!3291 = !DILocation(line: 3289, column: 15, scope: !3276)
!3292 = !DILocation(line: 3290, column: 21, scope: !3284)
!3293 = !DILocation(line: 3290, column: 13, scope: !3284)
!3294 = !DILocation(line: 3292, column: 35, scope: !3284)
!3295 = !DILocation(line: 3292, column: 41, scope: !3284)
!3296 = !DILocation(line: 3292, column: 50, scope: !3284)
!3297 = !DILocation(line: 3292, column: 13, scope: !3284)
!3298 = !DILocation(line: 3293, column: 22, scope: !3276)
!3299 = !DILocation(line: 3295, column: 9, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 3295, column: 8)
!3301 = !DILocation(line: 3295, column: 8, scope: !3276)
!3302 = !DILocation(line: 3295, column: 18, scope: !3300)
!3303 = !DILocation(line: 3296, column: 2, scope: !3276)
!3304 = !DILocation(line: 3299, column: 8, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3306, file: !3, line: 3299, column: 8)
!3306 = distinct !DILexicalBlock(scope: !3271, file: !3, line: 3298, column: 2)
!3307 = !DILocation(line: 3299, column: 8, scope: !3306)
!3308 = !DILocalVariable(name: "namelength", scope: !3309, file: !3, line: 3301, type: !7)
!3309 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 3300, column: 13)
!3310 = !DILocation(line: 3301, column: 12, scope: !3309)
!3311 = !DILocation(line: 3305, column: 36, scope: !3309)
!3312 = !DILocation(line: 3305, column: 21, scope: !3309)
!3313 = !DILocation(line: 3305, column: 19, scope: !3309)
!3314 = !DILocation(line: 3306, column: 12, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3309, file: !3, line: 3306, column: 12)
!3316 = !DILocation(line: 3306, column: 23, scope: !3315)
!3317 = !DILocation(line: 3306, column: 12, scope: !3309)
!3318 = !DILocation(line: 3308, column: 13, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3315, file: !3, line: 3307, column: 3)
!3320 = !DILocation(line: 3309, column: 5, scope: !3319)
!3321 = !DILocation(line: 3311, column: 30, scope: !3309)
!3322 = !DILocation(line: 3311, column: 36, scope: !3309)
!3323 = !DILocation(line: 3311, column: 52, scope: !3309)
!3324 = !DILocation(line: 3311, column: 9, scope: !3309)
!3325 = !DILocation(line: 3312, column: 13, scope: !3309)
!3326 = !DILocation(line: 3315, column: 15, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 3314, column: 13)
!3328 = !DILocation(line: 3316, column: 34, scope: !3327)
!3329 = !DILocation(line: 3316, column: 40, scope: !3327)
!3330 = !DILocation(line: 3316, column: 25, scope: !3327)
!3331 = !DILocation(line: 3316, column: 23, scope: !3327)
!3332 = !DILocation(line: 3317, column: 20, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3327, file: !3, line: 3317, column: 19)
!3334 = !DILocation(line: 3317, column: 19, scope: !3327)
!3335 = !DILocation(line: 3318, column: 17, scope: !3333)
!3336 = !DILocation(line: 3319, column: 15, scope: !3327)
!3337 = !DILocation(line: 3323, column: 11, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 3323, column: 11)
!3339 = !DILocation(line: 3323, column: 11, scope: !3244)
!3340 = !DILocation(line: 3324, column: 18, scope: !3338)
!3341 = !DILocation(line: 3324, column: 29, scope: !3338)
!3342 = !DILocation(line: 3324, column: 32, scope: !3338)
!3343 = !DILocation(line: 3324, column: 2, scope: !3338)
!3344 = !DILocation(line: 3326, column: 11, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 3326, column: 11)
!3346 = !DILocation(line: 3326, column: 22, scope: !3345)
!3347 = !DILocation(line: 3326, column: 11, scope: !3244)
!3348 = !DILocation(line: 3327, column: 24, scope: !3345)
!3349 = !DILocation(line: 3327, column: 2, scope: !3345)
!3350 = distinct !{!3350, !3240, !3351}
!3351 = !DILocation(line: 3328, column: 5, scope: !3123)
!3352 = !DILocation(line: 3330, column: 19, scope: !3123)
!3353 = !DILocation(line: 3330, column: 30, scope: !3123)
!3354 = !DILocation(line: 3330, column: 33, scope: !3123)
!3355 = !DILocation(line: 3330, column: 53, scope: !3123)
!3356 = !DILocation(line: 3330, column: 3, scope: !3123)
!3357 = !DILocation(line: 3337, column: 7, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 3337, column: 7)
!3359 = !DILocation(line: 3337, column: 7, scope: !3123)
!3360 = !DILocation(line: 3339, column: 29, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3358, file: !3, line: 3338, column: 5)
!3362 = !DILocation(line: 3339, column: 7, scope: !3361)
!3363 = !DILocation(line: 3340, column: 11, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3361, file: !3, line: 3340, column: 11)
!3365 = !DILocation(line: 3340, column: 19, scope: !3364)
!3366 = !DILocation(line: 3340, column: 30, scope: !3364)
!3367 = !DILocation(line: 3340, column: 11, scope: !3361)
!3368 = !DILocation(line: 3341, column: 2, scope: !3364)
!3369 = !DILocation(line: 3342, column: 7, scope: !3361)
!3370 = !DILocation(line: 3343, column: 5, scope: !3361)
!3371 = !DILocation(line: 3348, column: 7, scope: !3372)
!3372 = distinct !DILexicalBlock(scope: !3123, file: !3, line: 3348, column: 7)
!3373 = !DILocation(line: 3348, column: 7, scope: !3123)
!3374 = !DILocation(line: 3349, column: 21, scope: !3372)
!3375 = !DILocation(line: 3349, column: 5, scope: !3372)
!3376 = !DILocation(line: 3352, column: 12, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3378, file: !3, line: 3352, column: 11)
!3378 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 3351, column: 5)
!3379 = !DILocation(line: 3352, column: 11, scope: !3378)
!3380 = !DILocation(line: 3353, column: 24, scope: !3377)
!3381 = !DILocation(line: 3353, column: 2, scope: !3377)
!3382 = !DILocation(line: 3354, column: 24, scope: !3378)
!3383 = !DILocation(line: 3354, column: 7, scope: !3378)
!3384 = !DILocation(line: 3357, column: 3, scope: !3123)
!3385 = !DILocation(line: 3358, column: 3, scope: !3123)
!3386 = !DILocation(line: 3359, column: 11, scope: !3123)
!3387 = !DILocation(line: 3359, column: 3, scope: !3123)
!3388 = !DILocation(line: 3360, column: 1, scope: !3123)
!3389 = distinct !DISubprogram(name: "demangle_template", scope: !3, file: !3, line: 1996, type: !3390, scopeLine: 1999, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3390 = !DISubroutineType(types: !3391)
!3391 = !{!7, !491, !492, !60, !60, !7, !7}
!3392 = !DILocalVariable(name: "work", arg: 1, scope: !3389, file: !3, line: 1996, type: !491)
!3393 = !DILocation(line: 1996, column: 39, scope: !3389)
!3394 = !DILocalVariable(name: "mangled", arg: 2, scope: !3389, file: !3, line: 1996, type: !492)
!3395 = !DILocation(line: 1996, column: 58, scope: !3389)
!3396 = !DILocalVariable(name: "tname", arg: 3, scope: !3389, file: !3, line: 1997, type: !60)
!3397 = !DILocation(line: 1997, column: 28, scope: !3389)
!3398 = !DILocalVariable(name: "trawname", arg: 4, scope: !3389, file: !3, line: 1997, type: !60)
!3399 = !DILocation(line: 1997, column: 43, scope: !3389)
!3400 = !DILocalVariable(name: "is_type", arg: 5, scope: !3389, file: !3, line: 1998, type: !7)
!3401 = !DILocation(line: 1998, column: 24, scope: !3389)
!3402 = !DILocalVariable(name: "remember", arg: 6, scope: !3389, file: !3, line: 1998, type: !7)
!3403 = !DILocation(line: 1998, column: 37, scope: !3389)
!3404 = !DILocalVariable(name: "i", scope: !3389, file: !3, line: 2000, type: !7)
!3405 = !DILocation(line: 2000, column: 7, scope: !3389)
!3406 = !DILocalVariable(name: "r", scope: !3389, file: !3, line: 2001, type: !7)
!3407 = !DILocation(line: 2001, column: 7, scope: !3389)
!3408 = !DILocalVariable(name: "need_comma", scope: !3389, file: !3, line: 2002, type: !7)
!3409 = !DILocation(line: 2002, column: 7, scope: !3389)
!3410 = !DILocalVariable(name: "success", scope: !3389, file: !3, line: 2003, type: !7)
!3411 = !DILocation(line: 2003, column: 7, scope: !3389)
!3412 = !DILocalVariable(name: "is_java_array", scope: !3389, file: !3, line: 2004, type: !7)
!3413 = !DILocation(line: 2004, column: 7, scope: !3389)
!3414 = !DILocalVariable(name: "temp", scope: !3389, file: !3, line: 2005, type: !61)
!3415 = !DILocation(line: 2005, column: 10, scope: !3389)
!3416 = !DILocation(line: 2007, column: 5, scope: !3389)
!3417 = !DILocation(line: 2007, column: 13, scope: !3389)
!3418 = !DILocation(line: 2008, column: 7, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2008, column: 7)
!3420 = !DILocation(line: 2008, column: 7, scope: !3389)
!3421 = !DILocation(line: 2011, column: 13, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3423, file: !3, line: 2011, column: 11)
!3423 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 2009, column: 5)
!3424 = !DILocation(line: 2011, column: 12, scope: !3422)
!3425 = !DILocation(line: 2011, column: 11, scope: !3422)
!3426 = !DILocation(line: 2011, column: 21, scope: !3422)
!3427 = !DILocation(line: 2011, column: 11, scope: !3423)
!3428 = !DILocalVariable(name: "idx", scope: !3429, file: !3, line: 2013, type: !7)
!3429 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2012, column: 2)
!3430 = !DILocation(line: 2013, column: 8, scope: !3429)
!3431 = !DILocation(line: 2014, column: 6, scope: !3429)
!3432 = !DILocation(line: 2014, column: 14, scope: !3429)
!3433 = !DILocation(line: 2015, column: 6, scope: !3429)
!3434 = !DILocation(line: 2015, column: 14, scope: !3429)
!3435 = !DILocation(line: 2017, column: 42, scope: !3429)
!3436 = !DILocation(line: 2017, column: 10, scope: !3429)
!3437 = !DILocation(line: 2017, column: 8, scope: !3429)
!3438 = !DILocation(line: 2018, column: 8, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3429, file: !3, line: 2018, column: 8)
!3440 = !DILocation(line: 2018, column: 12, scope: !3439)
!3441 = !DILocation(line: 2019, column: 8, scope: !3439)
!3442 = !DILocation(line: 2019, column: 12, scope: !3439)
!3443 = !DILocation(line: 2019, column: 18, scope: !3439)
!3444 = !DILocation(line: 2019, column: 30, scope: !3439)
!3445 = !DILocation(line: 2019, column: 33, scope: !3439)
!3446 = !DILocation(line: 2019, column: 40, scope: !3439)
!3447 = !DILocation(line: 2019, column: 46, scope: !3439)
!3448 = !DILocation(line: 2019, column: 37, scope: !3439)
!3449 = !DILocation(line: 2020, column: 8, scope: !3439)
!3450 = !DILocation(line: 2020, column: 43, scope: !3439)
!3451 = !DILocation(line: 2020, column: 11, scope: !3439)
!3452 = !DILocation(line: 2020, column: 52, scope: !3439)
!3453 = !DILocation(line: 2018, column: 8, scope: !3429)
!3454 = !DILocation(line: 2021, column: 6, scope: !3439)
!3455 = !DILocation(line: 2023, column: 8, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3429, file: !3, line: 2023, column: 8)
!3457 = !DILocation(line: 2023, column: 14, scope: !3456)
!3458 = !DILocation(line: 2023, column: 8, scope: !3429)
!3459 = !DILocation(line: 2025, column: 23, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3456, file: !3, line: 2024, column: 6)
!3461 = !DILocation(line: 2025, column: 30, scope: !3460)
!3462 = !DILocation(line: 2025, column: 36, scope: !3460)
!3463 = !DILocation(line: 2025, column: 48, scope: !3460)
!3464 = !DILocation(line: 2025, column: 8, scope: !3460)
!3465 = !DILocation(line: 2026, column: 12, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 2026, column: 12)
!3467 = !DILocation(line: 2026, column: 12, scope: !3460)
!3468 = !DILocation(line: 2027, column: 18, scope: !3466)
!3469 = !DILocation(line: 2027, column: 28, scope: !3466)
!3470 = !DILocation(line: 2027, column: 34, scope: !3466)
!3471 = !DILocation(line: 2027, column: 46, scope: !3466)
!3472 = !DILocation(line: 2027, column: 3, scope: !3466)
!3473 = !DILocation(line: 2028, column: 6, scope: !3460)
!3474 = !DILocation(line: 2031, column: 36, scope: !3475)
!3475 = distinct !DILexicalBlock(scope: !3456, file: !3, line: 2030, column: 6)
!3476 = !DILocation(line: 2031, column: 43, scope: !3475)
!3477 = !DILocation(line: 2031, column: 8, scope: !3475)
!3478 = !DILocation(line: 2032, column: 12, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3475, file: !3, line: 2032, column: 12)
!3480 = !DILocation(line: 2032, column: 12, scope: !3475)
!3481 = !DILocation(line: 2033, column: 31, scope: !3479)
!3482 = !DILocation(line: 2033, column: 41, scope: !3479)
!3483 = !DILocation(line: 2033, column: 3, scope: !3479)
!3484 = !DILocation(line: 2035, column: 2, scope: !3429)
!3485 = !DILocation(line: 2038, column: 28, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 2038, column: 8)
!3487 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2037, column: 2)
!3488 = !DILocation(line: 2038, column: 13, scope: !3486)
!3489 = !DILocation(line: 2038, column: 11, scope: !3486)
!3490 = !DILocation(line: 2038, column: 38, scope: !3486)
!3491 = !DILocation(line: 2039, column: 8, scope: !3486)
!3492 = !DILocation(line: 2039, column: 26, scope: !3486)
!3493 = !DILocation(line: 2039, column: 25, scope: !3486)
!3494 = !DILocation(line: 2039, column: 17, scope: !3486)
!3495 = !DILocation(line: 2039, column: 11, scope: !3486)
!3496 = !DILocation(line: 2039, column: 37, scope: !3486)
!3497 = !DILocation(line: 2039, column: 35, scope: !3486)
!3498 = !DILocation(line: 2038, column: 8, scope: !3487)
!3499 = !DILocation(line: 2041, column: 8, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 2040, column: 6)
!3501 = !DILocation(line: 2043, column: 21, scope: !3487)
!3502 = !DILocation(line: 2043, column: 29, scope: !3487)
!3503 = !DILocation(line: 2043, column: 37, scope: !3487)
!3504 = !DILocation(line: 2044, column: 6, scope: !3487)
!3505 = !DILocation(line: 2044, column: 19, scope: !3487)
!3506 = !DILocation(line: 2044, column: 18, scope: !3487)
!3507 = !DILocation(line: 2044, column: 9, scope: !3487)
!3508 = !DILocation(line: 2044, column: 43, scope: !3487)
!3509 = !DILocation(line: 0, scope: !3487)
!3510 = !DILocation(line: 2043, column: 18, scope: !3487)
!3511 = !DILocation(line: 2045, column: 10, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 2045, column: 8)
!3513 = !DILocation(line: 2045, column: 8, scope: !3487)
!3514 = !DILocation(line: 2047, column: 24, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2046, column: 6)
!3516 = !DILocation(line: 2047, column: 32, scope: !3515)
!3517 = !DILocation(line: 2047, column: 31, scope: !3515)
!3518 = !DILocation(line: 2047, column: 41, scope: !3515)
!3519 = !DILocation(line: 2047, column: 8, scope: !3515)
!3520 = !DILocation(line: 2048, column: 6, scope: !3515)
!3521 = !DILocation(line: 2049, column: 8, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3487, file: !3, line: 2049, column: 8)
!3523 = !DILocation(line: 2049, column: 8, scope: !3487)
!3524 = !DILocation(line: 2050, column: 22, scope: !3522)
!3525 = !DILocation(line: 2050, column: 33, scope: !3522)
!3526 = !DILocation(line: 2050, column: 32, scope: !3522)
!3527 = !DILocation(line: 2050, column: 42, scope: !3522)
!3528 = !DILocation(line: 2050, column: 6, scope: !3522)
!3529 = !DILocation(line: 2051, column: 16, scope: !3487)
!3530 = !DILocation(line: 2051, column: 5, scope: !3487)
!3531 = !DILocation(line: 2051, column: 13, scope: !3487)
!3532 = !DILocation(line: 2053, column: 5, scope: !3423)
!3533 = !DILocation(line: 2054, column: 8, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2054, column: 7)
!3535 = !DILocation(line: 2054, column: 7, scope: !3389)
!3536 = !DILocation(line: 2055, column: 20, scope: !3534)
!3537 = !DILocation(line: 2055, column: 5, scope: !3534)
!3538 = !DILocation(line: 2057, column: 19, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2057, column: 7)
!3540 = !DILocation(line: 2057, column: 8, scope: !3539)
!3541 = !DILocation(line: 2057, column: 7, scope: !3389)
!3542 = !DILocation(line: 2059, column: 7, scope: !3543)
!3543 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 2058, column: 5)
!3544 = !DILocation(line: 2061, column: 8, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2061, column: 7)
!3546 = !DILocation(line: 2061, column: 7, scope: !3389)
!3547 = !DILocation(line: 2064, column: 27, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 2062, column: 5)
!3549 = !DILocation(line: 2064, column: 7, scope: !3548)
!3550 = !DILocation(line: 2064, column: 13, scope: !3548)
!3551 = !DILocation(line: 2064, column: 25, scope: !3548)
!3552 = !DILocation(line: 2065, column: 26, scope: !3548)
!3553 = !DILocation(line: 2065, column: 7, scope: !3548)
!3554 = !DILocation(line: 2065, column: 13, scope: !3548)
!3555 = !DILocation(line: 2065, column: 24, scope: !3548)
!3556 = !DILocation(line: 2066, column: 14, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 2066, column: 7)
!3558 = !DILocation(line: 2066, column: 12, scope: !3557)
!3559 = !DILocation(line: 2066, column: 19, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 2066, column: 7)
!3561 = !DILocation(line: 2066, column: 23, scope: !3560)
!3562 = !DILocation(line: 2066, column: 21, scope: !3560)
!3563 = !DILocation(line: 2066, column: 7, scope: !3557)
!3564 = !DILocation(line: 2067, column: 2, scope: !3560)
!3565 = !DILocation(line: 2067, column: 8, scope: !3560)
!3566 = !DILocation(line: 2067, column: 20, scope: !3560)
!3567 = !DILocation(line: 2067, column: 23, scope: !3560)
!3568 = !DILocation(line: 2066, column: 27, scope: !3560)
!3569 = !DILocation(line: 2066, column: 7, scope: !3560)
!3570 = distinct !{!3570, !3563, !3571}
!3571 = !DILocation(line: 2067, column: 25, scope: !3557)
!3572 = !DILocation(line: 2068, column: 5, scope: !3548)
!3573 = !DILocation(line: 2069, column: 10, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2069, column: 3)
!3575 = !DILocation(line: 2069, column: 8, scope: !3574)
!3576 = !DILocation(line: 2069, column: 15, scope: !3577)
!3577 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 2069, column: 3)
!3578 = !DILocation(line: 2069, column: 19, scope: !3577)
!3579 = !DILocation(line: 2069, column: 17, scope: !3577)
!3580 = !DILocation(line: 2069, column: 3, scope: !3574)
!3581 = !DILocation(line: 2071, column: 11, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 2071, column: 11)
!3583 = distinct !DILexicalBlock(scope: !3577, file: !3, line: 2070, column: 5)
!3584 = !DILocation(line: 2071, column: 11, scope: !3583)
!3585 = !DILocation(line: 2073, column: 19, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3582, file: !3, line: 2072, column: 2)
!3587 = !DILocation(line: 2073, column: 4, scope: !3586)
!3588 = !DILocation(line: 2074, column: 2, scope: !3586)
!3589 = !DILocation(line: 2076, column: 13, scope: !3590)
!3590 = distinct !DILexicalBlock(scope: !3583, file: !3, line: 2076, column: 11)
!3591 = !DILocation(line: 2076, column: 12, scope: !3590)
!3592 = !DILocation(line: 2076, column: 11, scope: !3590)
!3593 = !DILocation(line: 2076, column: 21, scope: !3590)
!3594 = !DILocation(line: 2076, column: 11, scope: !3583)
!3595 = !DILocation(line: 2078, column: 6, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3590, file: !3, line: 2077, column: 2)
!3597 = !DILocation(line: 2078, column: 14, scope: !3596)
!3598 = !DILocation(line: 2080, column: 23, scope: !3596)
!3599 = !DILocation(line: 2080, column: 29, scope: !3596)
!3600 = !DILocation(line: 2080, column: 14, scope: !3596)
!3601 = !DILocation(line: 2080, column: 12, scope: !3596)
!3602 = !DILocation(line: 2081, column: 8, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 2081, column: 8)
!3604 = !DILocation(line: 2081, column: 8, scope: !3596)
!3605 = !DILocation(line: 2083, column: 24, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2082, column: 6)
!3607 = !DILocation(line: 2083, column: 8, scope: !3606)
!3608 = !DILocation(line: 2085, column: 13, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3606, file: !3, line: 2085, column: 12)
!3610 = !DILocation(line: 2085, column: 12, scope: !3606)
!3611 = !DILocalVariable(name: "len", scope: !3612, file: !3, line: 2088, type: !7)
!3612 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 2086, column: 3)
!3613 = !DILocation(line: 2088, column: 9, scope: !3612)
!3614 = !DILocation(line: 2088, column: 20, scope: !3612)
!3615 = !DILocation(line: 2088, column: 29, scope: !3612)
!3616 = !DILocation(line: 2088, column: 22, scope: !3612)
!3617 = !DILocation(line: 2088, column: 15, scope: !3612)
!3618 = !DILocation(line: 2089, column: 28, scope: !3612)
!3619 = !DILocation(line: 2089, column: 5, scope: !3612)
!3620 = !DILocation(line: 2089, column: 11, scope: !3612)
!3621 = !DILocation(line: 2089, column: 23, scope: !3612)
!3622 = !DILocation(line: 2089, column: 26, scope: !3612)
!3623 = !DILocation(line: 2090, column: 13, scope: !3612)
!3624 = !DILocation(line: 2090, column: 19, scope: !3612)
!3625 = !DILocation(line: 2090, column: 31, scope: !3612)
!3626 = !DILocation(line: 2090, column: 40, scope: !3612)
!3627 = !DILocation(line: 2090, column: 43, scope: !3612)
!3628 = !DILocation(line: 2090, column: 5, scope: !3612)
!3629 = !DILocation(line: 2091, column: 5, scope: !3612)
!3630 = !DILocation(line: 2091, column: 11, scope: !3612)
!3631 = !DILocation(line: 2091, column: 23, scope: !3612)
!3632 = !DILocation(line: 2091, column: 26, scope: !3612)
!3633 = !DILocation(line: 2091, column: 31, scope: !3612)
!3634 = !DILocation(line: 2092, column: 3, scope: !3612)
!3635 = !DILocation(line: 2093, column: 6, scope: !3606)
!3636 = !DILocation(line: 2094, column: 4, scope: !3596)
!3637 = !DILocation(line: 2095, column: 9, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3596, file: !3, line: 2095, column: 8)
!3639 = !DILocation(line: 2095, column: 8, scope: !3596)
!3640 = !DILocation(line: 2097, column: 8, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3638, file: !3, line: 2096, column: 6)
!3642 = !DILocation(line: 2099, column: 2, scope: !3596)
!3643 = !DILocation(line: 2101, column: 18, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3590, file: !3, line: 2101, column: 16)
!3645 = !DILocation(line: 2101, column: 17, scope: !3644)
!3646 = !DILocation(line: 2101, column: 16, scope: !3644)
!3647 = !DILocation(line: 2101, column: 26, scope: !3644)
!3648 = !DILocation(line: 2101, column: 16, scope: !3590)
!3649 = !DILocalVariable(name: "r2", scope: !3650, file: !3, line: 2103, type: !7)
!3650 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 2102, column: 2)
!3651 = !DILocation(line: 2103, column: 8, scope: !3650)
!3652 = !DILocation(line: 2104, column: 6, scope: !3650)
!3653 = !DILocation(line: 2104, column: 14, scope: !3650)
!3654 = !DILocation(line: 2105, column: 47, scope: !3650)
!3655 = !DILocation(line: 2105, column: 53, scope: !3650)
!3656 = !DILocation(line: 2105, column: 62, scope: !3650)
!3657 = !DILocation(line: 2105, column: 14, scope: !3650)
!3658 = !DILocation(line: 2105, column: 12, scope: !3650)
!3659 = !DILocation(line: 2107, column: 8, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 2107, column: 8)
!3661 = !DILocation(line: 2108, column: 8, scope: !3660)
!3662 = !DILocation(line: 2108, column: 32, scope: !3660)
!3663 = !DILocation(line: 2108, column: 17, scope: !3660)
!3664 = !DILocation(line: 2108, column: 15, scope: !3660)
!3665 = !DILocation(line: 2108, column: 42, scope: !3660)
!3666 = !DILocation(line: 2109, column: 8, scope: !3660)
!3667 = !DILocation(line: 2109, column: 26, scope: !3660)
!3668 = !DILocation(line: 2109, column: 25, scope: !3660)
!3669 = !DILocation(line: 2109, column: 17, scope: !3660)
!3670 = !DILocation(line: 2109, column: 11, scope: !3660)
!3671 = !DILocation(line: 2109, column: 38, scope: !3660)
!3672 = !DILocation(line: 2109, column: 35, scope: !3660)
!3673 = !DILocation(line: 2107, column: 8, scope: !3650)
!3674 = !DILocation(line: 2111, column: 23, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 2110, column: 6)
!3676 = !DILocation(line: 2111, column: 8, scope: !3675)
!3677 = !DILocation(line: 2112, column: 24, scope: !3675)
!3678 = !DILocation(line: 2112, column: 32, scope: !3675)
!3679 = !DILocation(line: 2112, column: 31, scope: !3675)
!3680 = !DILocation(line: 2112, column: 41, scope: !3675)
!3681 = !DILocation(line: 2112, column: 8, scope: !3675)
!3682 = !DILocation(line: 2113, column: 13, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !3675, file: !3, line: 2113, column: 12)
!3684 = !DILocation(line: 2113, column: 12, scope: !3675)
!3685 = !DILocalVariable(name: "len", scope: !3686, file: !3, line: 2116, type: !7)
!3686 = distinct !DILexicalBlock(scope: !3683, file: !3, line: 2114, column: 3)
!3687 = !DILocation(line: 2116, column: 9, scope: !3686)
!3688 = !DILocation(line: 2116, column: 15, scope: !3686)
!3689 = !DILocation(line: 2117, column: 28, scope: !3686)
!3690 = !DILocation(line: 2117, column: 5, scope: !3686)
!3691 = !DILocation(line: 2117, column: 11, scope: !3686)
!3692 = !DILocation(line: 2117, column: 23, scope: !3686)
!3693 = !DILocation(line: 2117, column: 26, scope: !3686)
!3694 = !DILocation(line: 2118, column: 13, scope: !3686)
!3695 = !DILocation(line: 2118, column: 19, scope: !3686)
!3696 = !DILocation(line: 2118, column: 31, scope: !3686)
!3697 = !DILocation(line: 2118, column: 36, scope: !3686)
!3698 = !DILocation(line: 2118, column: 35, scope: !3686)
!3699 = !DILocation(line: 2118, column: 45, scope: !3686)
!3700 = !DILocation(line: 2118, column: 5, scope: !3686)
!3701 = !DILocation(line: 2119, column: 5, scope: !3686)
!3702 = !DILocation(line: 2119, column: 11, scope: !3686)
!3703 = !DILocation(line: 2119, column: 23, scope: !3686)
!3704 = !DILocation(line: 2119, column: 26, scope: !3686)
!3705 = !DILocation(line: 2119, column: 31, scope: !3686)
!3706 = !DILocation(line: 2120, column: 3, scope: !3686)
!3707 = !DILocation(line: 2121, column: 20, scope: !3675)
!3708 = !DILocation(line: 2121, column: 9, scope: !3675)
!3709 = !DILocation(line: 2121, column: 17, scope: !3675)
!3710 = !DILocation(line: 2122, column: 6, scope: !3675)
!3711 = !DILocation(line: 2123, column: 9, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 2123, column: 8)
!3713 = !DILocation(line: 2123, column: 8, scope: !3650)
!3714 = !DILocation(line: 2125, column: 8, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 2124, column: 6)
!3716 = !DILocation(line: 2127, column: 2, scope: !3650)
!3717 = !DILocalVariable(name: "param", scope: !3718, file: !3, line: 2130, type: !61)
!3718 = distinct !DILexicalBlock(scope: !3644, file: !3, line: 2129, column: 2)
!3719 = !DILocation(line: 2130, column: 12, scope: !3718)
!3720 = !DILocalVariable(name: "s", scope: !3718, file: !3, line: 2131, type: !60)
!3721 = !DILocation(line: 2131, column: 12, scope: !3718)
!3722 = !DILocation(line: 2136, column: 23, scope: !3718)
!3723 = !DILocation(line: 2136, column: 29, scope: !3718)
!3724 = !DILocation(line: 2136, column: 14, scope: !3718)
!3725 = !DILocation(line: 2136, column: 12, scope: !3718)
!3726 = !DILocation(line: 2137, column: 4, scope: !3718)
!3727 = !DILocation(line: 2138, column: 9, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 2138, column: 8)
!3729 = !DILocation(line: 2138, column: 8, scope: !3718)
!3730 = !DILocation(line: 2139, column: 6, scope: !3728)
!3731 = !DILocation(line: 2141, column: 9, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 2141, column: 8)
!3733 = !DILocation(line: 2141, column: 8, scope: !3718)
!3734 = !DILocation(line: 2143, column: 10, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 2142, column: 6)
!3736 = !DILocation(line: 2144, column: 21, scope: !3735)
!3737 = !DILocation(line: 2144, column: 8, scope: !3735)
!3738 = !DILocation(line: 2145, column: 6, scope: !3735)
!3739 = !DILocation(line: 2147, column: 10, scope: !3732)
!3740 = !DILocation(line: 2147, column: 8, scope: !3732)
!3741 = !DILocation(line: 2149, column: 44, scope: !3718)
!3742 = !DILocation(line: 2149, column: 50, scope: !3718)
!3743 = !DILocation(line: 2149, column: 59, scope: !3718)
!3744 = !DILocation(line: 2150, column: 23, scope: !3718)
!3745 = !DILocation(line: 2149, column: 14, scope: !3718)
!3746 = !DILocation(line: 2149, column: 12, scope: !3718)
!3747 = !DILocation(line: 2152, column: 9, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 2152, column: 8)
!3749 = !DILocation(line: 2152, column: 8, scope: !3718)
!3750 = !DILocation(line: 2154, column: 13, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 2154, column: 12)
!3752 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 2153, column: 6)
!3753 = !DILocation(line: 2154, column: 12, scope: !3752)
!3754 = !DILocation(line: 2155, column: 18, scope: !3751)
!3755 = !DILocation(line: 2155, column: 3, scope: !3751)
!3756 = !DILocation(line: 2156, column: 16, scope: !3752)
!3757 = !DILocation(line: 2157, column: 8, scope: !3752)
!3758 = !DILocation(line: 2160, column: 9, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 2160, column: 8)
!3760 = !DILocation(line: 2160, column: 8, scope: !3718)
!3761 = !DILocalVariable(name: "len", scope: !3762, file: !3, line: 2162, type: !7)
!3762 = distinct !DILexicalBlock(scope: !3759, file: !3, line: 2161, column: 6)
!3763 = !DILocation(line: 2162, column: 12, scope: !3762)
!3764 = !DILocation(line: 2162, column: 18, scope: !3762)
!3765 = !DILocation(line: 2162, column: 21, scope: !3762)
!3766 = !DILocation(line: 2162, column: 25, scope: !3762)
!3767 = !DILocation(line: 2162, column: 28, scope: !3762)
!3768 = !DILocation(line: 2162, column: 23, scope: !3762)
!3769 = !DILocation(line: 2163, column: 31, scope: !3762)
!3770 = !DILocation(line: 2163, column: 8, scope: !3762)
!3771 = !DILocation(line: 2163, column: 14, scope: !3762)
!3772 = !DILocation(line: 2163, column: 26, scope: !3762)
!3773 = !DILocation(line: 2163, column: 29, scope: !3762)
!3774 = !DILocation(line: 2164, column: 16, scope: !3762)
!3775 = !DILocation(line: 2164, column: 22, scope: !3762)
!3776 = !DILocation(line: 2164, column: 34, scope: !3762)
!3777 = !DILocation(line: 2164, column: 38, scope: !3762)
!3778 = !DILocation(line: 2164, column: 41, scope: !3762)
!3779 = !DILocation(line: 2164, column: 44, scope: !3762)
!3780 = !DILocation(line: 2164, column: 8, scope: !3762)
!3781 = !DILocation(line: 2165, column: 8, scope: !3762)
!3782 = !DILocation(line: 2165, column: 14, scope: !3762)
!3783 = !DILocation(line: 2165, column: 26, scope: !3762)
!3784 = !DILocation(line: 2165, column: 29, scope: !3762)
!3785 = !DILocation(line: 2165, column: 34, scope: !3762)
!3786 = !DILocation(line: 2167, column: 24, scope: !3762)
!3787 = !DILocation(line: 2167, column: 31, scope: !3762)
!3788 = !DILocation(line: 2167, column: 8, scope: !3762)
!3789 = !DILocation(line: 2168, column: 23, scope: !3762)
!3790 = !DILocation(line: 2168, column: 8, scope: !3762)
!3791 = !DILocation(line: 2169, column: 6, scope: !3762)
!3792 = !DILocation(line: 2171, column: 18, scope: !3583)
!3793 = !DILocation(line: 2172, column: 5, scope: !3583)
!3794 = !DILocation(line: 2069, column: 23, scope: !3577)
!3795 = !DILocation(line: 2069, column: 3, scope: !3577)
!3796 = distinct !{!3796, !3580, !3797}
!3797 = !DILocation(line: 2172, column: 5, scope: !3574)
!3798 = !DILocation(line: 2173, column: 7, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2173, column: 7)
!3800 = !DILocation(line: 2173, column: 7, scope: !3389)
!3801 = !DILocation(line: 2175, column: 22, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 2174, column: 5)
!3803 = !DILocation(line: 2175, column: 7, scope: !3802)
!3804 = !DILocation(line: 2176, column: 5, scope: !3802)
!3805 = !DILocation(line: 2179, column: 11, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3807, file: !3, line: 2179, column: 11)
!3807 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 2178, column: 5)
!3808 = !DILocation(line: 2179, column: 18, scope: !3806)
!3809 = !DILocation(line: 2179, column: 24, scope: !3806)
!3810 = !DILocation(line: 2179, column: 11, scope: !3807)
!3811 = !DILocation(line: 2180, column: 17, scope: !3806)
!3812 = !DILocation(line: 2180, column: 2, scope: !3806)
!3813 = !DILocation(line: 2181, column: 22, scope: !3807)
!3814 = !DILocation(line: 2181, column: 7, scope: !3807)
!3815 = !DILocation(line: 2184, column: 7, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 2184, column: 7)
!3817 = !DILocation(line: 2184, column: 15, scope: !3816)
!3818 = !DILocation(line: 2184, column: 18, scope: !3816)
!3819 = !DILocation(line: 2184, column: 7, scope: !3389)
!3820 = !DILocalVariable(name: "bindex", scope: !3821, file: !3, line: 2186, type: !107)
!3821 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 2185, column: 5)
!3822 = !DILocation(line: 2186, column: 17, scope: !3821)
!3823 = !DILocation(line: 2186, column: 42, scope: !3821)
!3824 = !DILocation(line: 2186, column: 26, scope: !3821)
!3825 = !DILocation(line: 2187, column: 23, scope: !3821)
!3826 = !DILocation(line: 2187, column: 29, scope: !3821)
!3827 = !DILocation(line: 2187, column: 36, scope: !3821)
!3828 = !DILocation(line: 2187, column: 39, scope: !3821)
!3829 = !DILocation(line: 2187, column: 59, scope: !3821)
!3830 = !DILocation(line: 2187, column: 7, scope: !3821)
!3831 = !DILocation(line: 2188, column: 5, scope: !3821)
!3832 = !DILocation(line: 2203, column: 11, scope: !3389)
!3833 = !DILocation(line: 2203, column: 3, scope: !3389)
!3834 = !DILocation(line: 2204, column: 1, scope: !3389)
!3835 = distinct !DISubprogram(name: "consume_count", scope: !3, file: !3, line: 488, type: !3836, scopeLine: 489, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3836 = !DISubroutineType(types: !3837)
!3837 = !{!7, !492}
!3838 = !DILocalVariable(name: "type", arg: 1, scope: !3835, file: !3, line: 488, type: !492)
!3839 = !DILocation(line: 488, column: 29, scope: !3835)
!3840 = !DILocalVariable(name: "count", scope: !3835, file: !3, line: 490, type: !7)
!3841 = !DILocation(line: 490, column: 7, scope: !3835)
!3842 = !DILocation(line: 492, column: 9, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 492, column: 7)
!3844 = !DILocation(line: 492, column: 7, scope: !3835)
!3845 = !DILocation(line: 493, column: 5, scope: !3843)
!3846 = !DILocation(line: 495, column: 3, scope: !3835)
!3847 = !DILocation(line: 495, column: 10, scope: !3835)
!3848 = !DILocation(line: 497, column: 13, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 496, column: 5)
!3850 = !DILocation(line: 504, column: 12, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 504, column: 11)
!3852 = !DILocation(line: 504, column: 18, scope: !3851)
!3853 = !DILocation(line: 504, column: 24, scope: !3851)
!3854 = !DILocation(line: 504, column: 11, scope: !3849)
!3855 = !DILocation(line: 506, column: 4, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3851, file: !3, line: 505, column: 2)
!3857 = !DILocation(line: 506, column: 11, scope: !3856)
!3858 = !DILocation(line: 507, column: 8, scope: !3856)
!3859 = !DILocation(line: 507, column: 13, scope: !3856)
!3860 = distinct !{!3860, !3855, !3859}
!3861 = !DILocation(line: 508, column: 4, scope: !3856)
!3862 = !DILocation(line: 511, column: 18, scope: !3849)
!3863 = !DILocation(line: 511, column: 17, scope: !3849)
!3864 = !DILocation(line: 511, column: 16, scope: !3849)
!3865 = !DILocation(line: 511, column: 23, scope: !3849)
!3866 = !DILocation(line: 511, column: 13, scope: !3849)
!3867 = !DILocation(line: 512, column: 9, scope: !3849)
!3868 = !DILocation(line: 512, column: 14, scope: !3849)
!3869 = distinct !{!3869, !3846, !3870}
!3870 = !DILocation(line: 513, column: 5, scope: !3835)
!3871 = !DILocation(line: 515, column: 7, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3835, file: !3, line: 515, column: 7)
!3873 = !DILocation(line: 515, column: 13, scope: !3872)
!3874 = !DILocation(line: 515, column: 7, scope: !3835)
!3875 = !DILocation(line: 516, column: 11, scope: !3872)
!3876 = !DILocation(line: 516, column: 5, scope: !3872)
!3877 = !DILocation(line: 518, column: 11, scope: !3835)
!3878 = !DILocation(line: 518, column: 3, scope: !3835)
!3879 = !DILocation(line: 519, column: 1, scope: !3835)
!3880 = distinct !DISubprogram(name: "string_appendn", scope: !3, file: !3, line: 4738, type: !3881, scopeLine: 4739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3881 = !DISubroutineType(types: !3882)
!3882 = !{null, !60, !76, !7}
!3883 = !DILocalVariable(name: "p", arg: 1, scope: !3880, file: !3, line: 4738, type: !60)
!3884 = !DILocation(line: 4738, column: 25, scope: !3880)
!3885 = !DILocalVariable(name: "s", arg: 2, scope: !3880, file: !3, line: 4738, type: !76)
!3886 = !DILocation(line: 4738, column: 40, scope: !3880)
!3887 = !DILocalVariable(name: "n", arg: 3, scope: !3880, file: !3, line: 4738, type: !7)
!3888 = !DILocation(line: 4738, column: 47, scope: !3880)
!3889 = !DILocation(line: 4740, column: 7, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 4740, column: 7)
!3891 = !DILocation(line: 4740, column: 9, scope: !3890)
!3892 = !DILocation(line: 4740, column: 7, scope: !3880)
!3893 = !DILocation(line: 4742, column: 20, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 4741, column: 5)
!3895 = !DILocation(line: 4742, column: 23, scope: !3894)
!3896 = !DILocation(line: 4742, column: 7, scope: !3894)
!3897 = !DILocation(line: 4743, column: 15, scope: !3894)
!3898 = !DILocation(line: 4743, column: 18, scope: !3894)
!3899 = !DILocation(line: 4743, column: 21, scope: !3894)
!3900 = !DILocation(line: 4743, column: 24, scope: !3894)
!3901 = !DILocation(line: 4743, column: 7, scope: !3894)
!3902 = !DILocation(line: 4744, column: 15, scope: !3894)
!3903 = !DILocation(line: 4744, column: 7, scope: !3894)
!3904 = !DILocation(line: 4744, column: 10, scope: !3894)
!3905 = !DILocation(line: 4744, column: 12, scope: !3894)
!3906 = !DILocation(line: 4745, column: 5, scope: !3894)
!3907 = !DILocation(line: 4746, column: 1, scope: !3880)
!3908 = distinct !DISubprogram(name: "string_append", scope: !3, file: !3, line: 4712, type: !3073, scopeLine: 4713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3909 = !DILocalVariable(name: "p", arg: 1, scope: !3908, file: !3, line: 4712, type: !60)
!3910 = !DILocation(line: 4712, column: 24, scope: !3908)
!3911 = !DILocalVariable(name: "s", arg: 2, scope: !3908, file: !3, line: 4712, type: !76)
!3912 = !DILocation(line: 4712, column: 39, scope: !3908)
!3913 = !DILocalVariable(name: "n", scope: !3908, file: !3, line: 4714, type: !7)
!3914 = !DILocation(line: 4714, column: 7, scope: !3908)
!3915 = !DILocation(line: 4715, column: 7, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 4715, column: 7)
!3917 = !DILocation(line: 4715, column: 9, scope: !3916)
!3918 = !DILocation(line: 4715, column: 17, scope: !3916)
!3919 = !DILocation(line: 4715, column: 21, scope: !3916)
!3920 = !DILocation(line: 4715, column: 20, scope: !3916)
!3921 = !DILocation(line: 4715, column: 23, scope: !3916)
!3922 = !DILocation(line: 4715, column: 7, scope: !3908)
!3923 = !DILocation(line: 4716, column: 5, scope: !3916)
!3924 = !DILocation(line: 4717, column: 15, scope: !3908)
!3925 = !DILocation(line: 4717, column: 7, scope: !3908)
!3926 = !DILocation(line: 4717, column: 5, scope: !3908)
!3927 = !DILocation(line: 4718, column: 16, scope: !3908)
!3928 = !DILocation(line: 4718, column: 19, scope: !3908)
!3929 = !DILocation(line: 4718, column: 3, scope: !3908)
!3930 = !DILocation(line: 4719, column: 11, scope: !3908)
!3931 = !DILocation(line: 4719, column: 14, scope: !3908)
!3932 = !DILocation(line: 4719, column: 17, scope: !3908)
!3933 = !DILocation(line: 4719, column: 20, scope: !3908)
!3934 = !DILocation(line: 4719, column: 3, scope: !3908)
!3935 = !DILocation(line: 4720, column: 11, scope: !3908)
!3936 = !DILocation(line: 4720, column: 3, scope: !3908)
!3937 = !DILocation(line: 4720, column: 6, scope: !3908)
!3938 = !DILocation(line: 4720, column: 8, scope: !3908)
!3939 = !DILocation(line: 4721, column: 1, scope: !3908)
!3940 = distinct !DISubprogram(name: "register_Btype", scope: !3, file: !3, line: 4204, type: !3941, scopeLine: 4205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3941 = !DISubroutineType(types: !3942)
!3942 = !{!7, !491}
!3943 = !DILocalVariable(name: "work", arg: 1, scope: !3940, file: !3, line: 4204, type: !491)
!3944 = !DILocation(line: 4204, column: 36, scope: !3940)
!3945 = !DILocalVariable(name: "ret", scope: !3940, file: !3, line: 4206, type: !7)
!3946 = !DILocation(line: 4206, column: 7, scope: !3940)
!3947 = !DILocation(line: 4208, column: 7, scope: !3948)
!3948 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 4208, column: 7)
!3949 = !DILocation(line: 4208, column: 15, scope: !3948)
!3950 = !DILocation(line: 4208, column: 23, scope: !3948)
!3951 = !DILocation(line: 4208, column: 31, scope: !3948)
!3952 = !DILocation(line: 4208, column: 20, scope: !3948)
!3953 = !DILocation(line: 4208, column: 7, scope: !3940)
!3954 = !DILocation(line: 4210, column: 11, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3956, file: !3, line: 4210, column: 11)
!3956 = distinct !DILexicalBlock(scope: !3948, file: !3, line: 4209, column: 5)
!3957 = !DILocation(line: 4210, column: 19, scope: !3955)
!3958 = !DILocation(line: 4210, column: 25, scope: !3955)
!3959 = !DILocation(line: 4210, column: 11, scope: !3956)
!3960 = !DILocation(line: 4212, column: 4, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 4211, column: 2)
!3962 = !DILocation(line: 4212, column: 12, scope: !3961)
!3963 = !DILocation(line: 4212, column: 18, scope: !3961)
!3964 = !DILocation(line: 4213, column: 23, scope: !3961)
!3965 = !DILocation(line: 4213, column: 4, scope: !3961)
!3966 = !DILocation(line: 4213, column: 12, scope: !3961)
!3967 = !DILocation(line: 4213, column: 21, scope: !3961)
!3968 = !DILocation(line: 4214, column: 2, scope: !3961)
!3969 = !DILocation(line: 4217, column: 4, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 4216, column: 2)
!3971 = !DILocation(line: 4217, column: 12, scope: !3970)
!3972 = !DILocation(line: 4217, column: 18, scope: !3970)
!3973 = !DILocation(line: 4219, column: 8, scope: !3970)
!3974 = !DILocation(line: 4218, column: 4, scope: !3970)
!3975 = !DILocation(line: 4218, column: 12, scope: !3970)
!3976 = !DILocation(line: 4219, column: 6, scope: !3970)
!3977 = !DILocation(line: 4221, column: 5, scope: !3956)
!3978 = !DILocation(line: 4222, column: 9, scope: !3940)
!3979 = !DILocation(line: 4222, column: 17, scope: !3940)
!3980 = !DILocation(line: 4222, column: 21, scope: !3940)
!3981 = !DILocation(line: 4222, column: 7, scope: !3940)
!3982 = !DILocation(line: 4223, column: 3, scope: !3940)
!3983 = !DILocation(line: 4223, column: 11, scope: !3940)
!3984 = !DILocation(line: 4223, column: 20, scope: !3940)
!3985 = !DILocation(line: 4223, column: 25, scope: !3940)
!3986 = !DILocation(line: 4224, column: 10, scope: !3940)
!3987 = !DILocation(line: 4224, column: 3, scope: !3940)
!3988 = distinct !DISubprogram(name: "consume_count_with_underscores", scope: !3, file: !3, line: 527, type: !3836, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!3989 = !DILocalVariable(name: "mangled", arg: 1, scope: !3988, file: !3, line: 527, type: !492)
!3990 = !DILocation(line: 527, column: 46, scope: !3988)
!3991 = !DILocalVariable(name: "idx", scope: !3988, file: !3, line: 529, type: !7)
!3992 = !DILocation(line: 529, column: 7, scope: !3988)
!3993 = !DILocation(line: 531, column: 9, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3988, file: !3, line: 531, column: 7)
!3995 = !DILocation(line: 531, column: 8, scope: !3994)
!3996 = !DILocation(line: 531, column: 7, scope: !3994)
!3997 = !DILocation(line: 531, column: 17, scope: !3994)
!3998 = !DILocation(line: 531, column: 7, scope: !3988)
!3999 = !DILocation(line: 533, column: 9, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3994, file: !3, line: 532, column: 5)
!4001 = !DILocation(line: 533, column: 17, scope: !4000)
!4002 = !DILocation(line: 534, column: 12, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 534, column: 11)
!4004 = !DILocation(line: 534, column: 11, scope: !4000)
!4005 = !DILocation(line: 535, column: 2, scope: !4003)
!4006 = !DILocation(line: 537, column: 28, scope: !4000)
!4007 = !DILocation(line: 537, column: 13, scope: !4000)
!4008 = !DILocation(line: 537, column: 11, scope: !4000)
!4009 = !DILocation(line: 538, column: 13, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 538, column: 11)
!4011 = !DILocation(line: 538, column: 12, scope: !4010)
!4012 = !DILocation(line: 538, column: 11, scope: !4010)
!4013 = !DILocation(line: 538, column: 21, scope: !4010)
!4014 = !DILocation(line: 538, column: 11, scope: !4000)
!4015 = !DILocation(line: 540, column: 2, scope: !4010)
!4016 = !DILocation(line: 542, column: 9, scope: !4000)
!4017 = !DILocation(line: 542, column: 17, scope: !4000)
!4018 = !DILocation(line: 543, column: 5, scope: !4000)
!4019 = !DILocation(line: 546, column: 13, scope: !4020)
!4020 = distinct !DILexicalBlock(scope: !4021, file: !3, line: 546, column: 11)
!4021 = distinct !DILexicalBlock(scope: !3994, file: !3, line: 545, column: 5)
!4022 = !DILocation(line: 546, column: 12, scope: !4020)
!4023 = !DILocation(line: 546, column: 11, scope: !4020)
!4024 = !DILocation(line: 546, column: 21, scope: !4020)
!4025 = !DILocation(line: 546, column: 27, scope: !4020)
!4026 = !DILocation(line: 546, column: 32, scope: !4020)
!4027 = !DILocation(line: 546, column: 31, scope: !4020)
!4028 = !DILocation(line: 546, column: 30, scope: !4020)
!4029 = !DILocation(line: 546, column: 40, scope: !4020)
!4030 = !DILocation(line: 546, column: 11, scope: !4021)
!4031 = !DILocation(line: 547, column: 2, scope: !4020)
!4032 = !DILocation(line: 549, column: 15, scope: !4021)
!4033 = !DILocation(line: 549, column: 14, scope: !4021)
!4034 = !DILocation(line: 549, column: 13, scope: !4021)
!4035 = !DILocation(line: 549, column: 23, scope: !4021)
!4036 = !DILocation(line: 549, column: 11, scope: !4021)
!4037 = !DILocation(line: 550, column: 9, scope: !4021)
!4038 = !DILocation(line: 550, column: 17, scope: !4021)
!4039 = !DILocation(line: 553, column: 10, scope: !3988)
!4040 = !DILocation(line: 553, column: 3, scope: !3988)
!4041 = !DILocation(line: 554, column: 1, scope: !3988)
!4042 = distinct !DISubprogram(name: "string_clear", scope: !3, file: !3, line: 4696, type: !985, scopeLine: 4697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4043 = !DILocalVariable(name: "s", arg: 1, scope: !4042, file: !3, line: 4696, type: !60)
!4044 = !DILocation(line: 4696, column: 23, scope: !4042)
!4045 = !DILocation(line: 4698, column: 10, scope: !4042)
!4046 = !DILocation(line: 4698, column: 13, scope: !4042)
!4047 = !DILocation(line: 4698, column: 3, scope: !4042)
!4048 = !DILocation(line: 4698, column: 6, scope: !4042)
!4049 = !DILocation(line: 4698, column: 8, scope: !4042)
!4050 = !DILocation(line: 4699, column: 1, scope: !4042)
!4051 = distinct !DISubprogram(name: "recursively_demangle", scope: !3, file: !3, line: 3054, type: !4052, scopeLine: 3056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4052 = !DISubroutineType(types: !4053)
!4053 = !{null, !491, !492, !60, !7}
!4054 = !DILocalVariable(name: "work", arg: 1, scope: !4051, file: !3, line: 3054, type: !491)
!4055 = !DILocation(line: 3054, column: 41, scope: !4051)
!4056 = !DILocalVariable(name: "mangled", arg: 2, scope: !4051, file: !3, line: 3054, type: !492)
!4057 = !DILocation(line: 3054, column: 60, scope: !4051)
!4058 = !DILocalVariable(name: "result", arg: 3, scope: !4051, file: !3, line: 3055, type: !60)
!4059 = !DILocation(line: 3055, column: 30, scope: !4051)
!4060 = !DILocalVariable(name: "namelength", arg: 4, scope: !4051, file: !3, line: 3055, type: !7)
!4061 = !DILocation(line: 3055, column: 42, scope: !4051)
!4062 = !DILocalVariable(name: "recurse", scope: !4051, file: !3, line: 3057, type: !52)
!4063 = !DILocation(line: 3057, column: 10, scope: !4051)
!4064 = !DILocalVariable(name: "recurse_dem", scope: !4051, file: !3, line: 3058, type: !52)
!4065 = !DILocation(line: 3058, column: 10, scope: !4051)
!4066 = !DILocation(line: 3060, column: 13, scope: !4051)
!4067 = !DILocation(line: 3060, column: 11, scope: !4051)
!4068 = !DILocation(line: 3061, column: 11, scope: !4051)
!4069 = !DILocation(line: 3061, column: 21, scope: !4051)
!4070 = !DILocation(line: 3061, column: 20, scope: !4051)
!4071 = !DILocation(line: 3061, column: 30, scope: !4051)
!4072 = !DILocation(line: 3061, column: 3, scope: !4051)
!4073 = !DILocation(line: 3062, column: 3, scope: !4051)
!4074 = !DILocation(line: 3062, column: 11, scope: !4051)
!4075 = !DILocation(line: 3062, column: 23, scope: !4051)
!4076 = !DILocation(line: 3064, column: 33, scope: !4051)
!4077 = !DILocation(line: 3064, column: 42, scope: !4051)
!4078 = !DILocation(line: 3064, column: 48, scope: !4051)
!4079 = !DILocation(line: 3064, column: 17, scope: !4051)
!4080 = !DILocation(line: 3064, column: 15, scope: !4051)
!4081 = !DILocation(line: 3066, column: 7, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 3066, column: 7)
!4083 = !DILocation(line: 3066, column: 7, scope: !4051)
!4084 = !DILocation(line: 3068, column: 22, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4082, file: !3, line: 3067, column: 5)
!4086 = !DILocation(line: 3068, column: 30, scope: !4085)
!4087 = !DILocation(line: 3068, column: 7, scope: !4085)
!4088 = !DILocation(line: 3069, column: 13, scope: !4085)
!4089 = !DILocation(line: 3069, column: 7, scope: !4085)
!4090 = !DILocation(line: 3070, column: 5, scope: !4085)
!4091 = !DILocation(line: 3073, column: 23, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4082, file: !3, line: 3072, column: 5)
!4093 = !DILocation(line: 3073, column: 32, scope: !4092)
!4094 = !DILocation(line: 3073, column: 31, scope: !4092)
!4095 = !DILocation(line: 3073, column: 41, scope: !4092)
!4096 = !DILocation(line: 3073, column: 7, scope: !4092)
!4097 = !DILocation(line: 3075, column: 9, scope: !4051)
!4098 = !DILocation(line: 3075, column: 3, scope: !4051)
!4099 = !DILocation(line: 3076, column: 15, scope: !4051)
!4100 = !DILocation(line: 3076, column: 4, scope: !4051)
!4101 = !DILocation(line: 3076, column: 12, scope: !4051)
!4102 = !DILocation(line: 3077, column: 1, scope: !4051)
!4103 = distinct !DISubprogram(name: "string_appends", scope: !3, file: !3, line: 4724, type: !4104, scopeLine: 4725, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4104 = !DISubroutineType(types: !4105)
!4105 = !{null, !60, !60}
!4106 = !DILocalVariable(name: "p", arg: 1, scope: !4103, file: !3, line: 4724, type: !60)
!4107 = !DILocation(line: 4724, column: 25, scope: !4103)
!4108 = !DILocalVariable(name: "s", arg: 2, scope: !4103, file: !3, line: 4724, type: !60)
!4109 = !DILocation(line: 4724, column: 36, scope: !4103)
!4110 = !DILocalVariable(name: "n", scope: !4103, file: !3, line: 4726, type: !7)
!4111 = !DILocation(line: 4726, column: 7, scope: !4103)
!4112 = !DILocation(line: 4728, column: 7, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 4728, column: 7)
!4114 = !DILocation(line: 4728, column: 10, scope: !4113)
!4115 = !DILocation(line: 4728, column: 15, scope: !4113)
!4116 = !DILocation(line: 4728, column: 18, scope: !4113)
!4117 = !DILocation(line: 4728, column: 12, scope: !4113)
!4118 = !DILocation(line: 4728, column: 7, scope: !4103)
!4119 = !DILocation(line: 4730, column: 11, scope: !4120)
!4120 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 4729, column: 5)
!4121 = !DILocation(line: 4730, column: 14, scope: !4120)
!4122 = !DILocation(line: 4730, column: 18, scope: !4120)
!4123 = !DILocation(line: 4730, column: 21, scope: !4120)
!4124 = !DILocation(line: 4730, column: 16, scope: !4120)
!4125 = !DILocation(line: 4730, column: 9, scope: !4120)
!4126 = !DILocation(line: 4731, column: 20, scope: !4120)
!4127 = !DILocation(line: 4731, column: 23, scope: !4120)
!4128 = !DILocation(line: 4731, column: 7, scope: !4120)
!4129 = !DILocation(line: 4732, column: 15, scope: !4120)
!4130 = !DILocation(line: 4732, column: 18, scope: !4120)
!4131 = !DILocation(line: 4732, column: 21, scope: !4120)
!4132 = !DILocation(line: 4732, column: 24, scope: !4120)
!4133 = !DILocation(line: 4732, column: 27, scope: !4120)
!4134 = !DILocation(line: 4732, column: 7, scope: !4120)
!4135 = !DILocation(line: 4733, column: 15, scope: !4120)
!4136 = !DILocation(line: 4733, column: 7, scope: !4120)
!4137 = !DILocation(line: 4733, column: 10, scope: !4120)
!4138 = !DILocation(line: 4733, column: 12, scope: !4120)
!4139 = !DILocation(line: 4734, column: 5, scope: !4120)
!4140 = !DILocation(line: 4735, column: 1, scope: !4103)
!4141 = distinct !DISubprogram(name: "remember_Ktype", scope: !3, file: !3, line: 4175, type: !4142, scopeLine: 4176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4142 = !DISubroutineType(types: !4143)
!4143 = !{null, !491, !76, !7}
!4144 = !DILocalVariable(name: "work", arg: 1, scope: !4141, file: !3, line: 4175, type: !491)
!4145 = !DILocation(line: 4175, column: 36, scope: !4141)
!4146 = !DILocalVariable(name: "start", arg: 2, scope: !4141, file: !3, line: 4175, type: !76)
!4147 = !DILocation(line: 4175, column: 54, scope: !4141)
!4148 = !DILocalVariable(name: "len", arg: 3, scope: !4141, file: !3, line: 4175, type: !7)
!4149 = !DILocation(line: 4175, column: 65, scope: !4141)
!4150 = !DILocalVariable(name: "tem", scope: !4141, file: !3, line: 4177, type: !52)
!4151 = !DILocation(line: 4177, column: 9, scope: !4141)
!4152 = !DILocation(line: 4179, column: 7, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4141, file: !3, line: 4179, column: 7)
!4154 = !DILocation(line: 4179, column: 15, scope: !4153)
!4155 = !DILocation(line: 4179, column: 23, scope: !4153)
!4156 = !DILocation(line: 4179, column: 31, scope: !4153)
!4157 = !DILocation(line: 4179, column: 20, scope: !4153)
!4158 = !DILocation(line: 4179, column: 7, scope: !4141)
!4159 = !DILocation(line: 4181, column: 11, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 4181, column: 11)
!4161 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 4180, column: 5)
!4162 = !DILocation(line: 4181, column: 19, scope: !4160)
!4163 = !DILocation(line: 4181, column: 25, scope: !4160)
!4164 = !DILocation(line: 4181, column: 11, scope: !4161)
!4165 = !DILocation(line: 4183, column: 4, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 4182, column: 2)
!4167 = !DILocation(line: 4183, column: 12, scope: !4166)
!4168 = !DILocation(line: 4183, column: 18, scope: !4166)
!4169 = !DILocation(line: 4184, column: 23, scope: !4166)
!4170 = !DILocation(line: 4184, column: 4, scope: !4166)
!4171 = !DILocation(line: 4184, column: 12, scope: !4166)
!4172 = !DILocation(line: 4184, column: 21, scope: !4166)
!4173 = !DILocation(line: 4185, column: 2, scope: !4166)
!4174 = !DILocation(line: 4188, column: 4, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 4187, column: 2)
!4176 = !DILocation(line: 4188, column: 12, scope: !4175)
!4177 = !DILocation(line: 4188, column: 18, scope: !4175)
!4178 = !DILocation(line: 4190, column: 8, scope: !4175)
!4179 = !DILocation(line: 4189, column: 4, scope: !4175)
!4180 = !DILocation(line: 4189, column: 12, scope: !4175)
!4181 = !DILocation(line: 4190, column: 6, scope: !4175)
!4182 = !DILocation(line: 4192, column: 5, scope: !4161)
!4183 = !DILocation(line: 4193, column: 9, scope: !4141)
!4184 = !DILocation(line: 4193, column: 7, scope: !4141)
!4185 = !DILocation(line: 4194, column: 11, scope: !4141)
!4186 = !DILocation(line: 4194, column: 16, scope: !4141)
!4187 = !DILocation(line: 4194, column: 23, scope: !4141)
!4188 = !DILocation(line: 4194, column: 3, scope: !4141)
!4189 = !DILocation(line: 4195, column: 3, scope: !4141)
!4190 = !DILocation(line: 4195, column: 7, scope: !4141)
!4191 = !DILocation(line: 4195, column: 12, scope: !4141)
!4192 = !DILocation(line: 4196, column: 38, scope: !4141)
!4193 = !DILocation(line: 4196, column: 3, scope: !4141)
!4194 = !DILocation(line: 4196, column: 11, scope: !4141)
!4195 = !DILocation(line: 4196, column: 20, scope: !4141)
!4196 = !DILocation(line: 4196, column: 28, scope: !4141)
!4197 = !DILocation(line: 4196, column: 32, scope: !4141)
!4198 = !DILocation(line: 4196, column: 36, scope: !4141)
!4199 = !DILocation(line: 4197, column: 1, scope: !4141)
!4200 = distinct !DISubprogram(name: "remember_Btype", scope: !3, file: !3, line: 4230, type: !4201, scopeLine: 4232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4201 = !DISubroutineType(types: !4202)
!4202 = !{null, !491, !76, !7, !7}
!4203 = !DILocalVariable(name: "work", arg: 1, scope: !4200, file: !3, line: 4230, type: !491)
!4204 = !DILocation(line: 4230, column: 36, scope: !4200)
!4205 = !DILocalVariable(name: "start", arg: 2, scope: !4200, file: !3, line: 4230, type: !76)
!4206 = !DILocation(line: 4230, column: 54, scope: !4200)
!4207 = !DILocalVariable(name: "len", arg: 3, scope: !4200, file: !3, line: 4231, type: !7)
!4208 = !DILocation(line: 4231, column: 21, scope: !4200)
!4209 = !DILocalVariable(name: "index", arg: 4, scope: !4200, file: !3, line: 4231, type: !7)
!4210 = !DILocation(line: 4231, column: 30, scope: !4200)
!4211 = !DILocalVariable(name: "tem", scope: !4200, file: !3, line: 4233, type: !52)
!4212 = !DILocation(line: 4233, column: 9, scope: !4200)
!4213 = !DILocation(line: 4235, column: 9, scope: !4200)
!4214 = !DILocation(line: 4235, column: 7, scope: !4200)
!4215 = !DILocation(line: 4236, column: 11, scope: !4200)
!4216 = !DILocation(line: 4236, column: 16, scope: !4200)
!4217 = !DILocation(line: 4236, column: 23, scope: !4200)
!4218 = !DILocation(line: 4236, column: 3, scope: !4200)
!4219 = !DILocation(line: 4237, column: 3, scope: !4200)
!4220 = !DILocation(line: 4237, column: 7, scope: !4200)
!4221 = !DILocation(line: 4237, column: 12, scope: !4200)
!4222 = !DILocation(line: 4238, column: 29, scope: !4200)
!4223 = !DILocation(line: 4238, column: 3, scope: !4200)
!4224 = !DILocation(line: 4238, column: 11, scope: !4200)
!4225 = !DILocation(line: 4238, column: 20, scope: !4200)
!4226 = !DILocation(line: 4238, column: 27, scope: !4200)
!4227 = !DILocation(line: 4239, column: 1, scope: !4200)
!4228 = distinct !DISubprogram(name: "string_prepends", scope: !3, file: !3, line: 4758, type: !4104, scopeLine: 4759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4229 = !DILocalVariable(name: "p", arg: 1, scope: !4228, file: !3, line: 4758, type: !60)
!4230 = !DILocation(line: 4758, column: 26, scope: !4228)
!4231 = !DILocalVariable(name: "s", arg: 2, scope: !4228, file: !3, line: 4758, type: !60)
!4232 = !DILocation(line: 4758, column: 37, scope: !4228)
!4233 = !DILocation(line: 4760, column: 7, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4228, file: !3, line: 4760, column: 7)
!4235 = !DILocation(line: 4760, column: 10, scope: !4234)
!4236 = !DILocation(line: 4760, column: 15, scope: !4234)
!4237 = !DILocation(line: 4760, column: 18, scope: !4234)
!4238 = !DILocation(line: 4760, column: 12, scope: !4234)
!4239 = !DILocation(line: 4760, column: 7, scope: !4228)
!4240 = !DILocation(line: 4762, column: 24, scope: !4241)
!4241 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 4761, column: 5)
!4242 = !DILocation(line: 4762, column: 27, scope: !4241)
!4243 = !DILocation(line: 4762, column: 30, scope: !4241)
!4244 = !DILocation(line: 4762, column: 33, scope: !4241)
!4245 = !DILocation(line: 4762, column: 36, scope: !4241)
!4246 = !DILocation(line: 4762, column: 40, scope: !4241)
!4247 = !DILocation(line: 4762, column: 43, scope: !4241)
!4248 = !DILocation(line: 4762, column: 38, scope: !4241)
!4249 = !DILocation(line: 4762, column: 7, scope: !4241)
!4250 = !DILocation(line: 4763, column: 5, scope: !4241)
!4251 = !DILocation(line: 4764, column: 1, scope: !4228)
!4252 = distinct !DISubprogram(name: "string_need", scope: !3, file: !3, line: 4655, type: !4253, scopeLine: 4656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4253 = !DISubroutineType(types: !4254)
!4254 = !{null, !60, !7}
!4255 = !DILocalVariable(name: "s", arg: 1, scope: !4252, file: !3, line: 4655, type: !60)
!4256 = !DILocation(line: 4655, column: 22, scope: !4252)
!4257 = !DILocalVariable(name: "n", arg: 2, scope: !4252, file: !3, line: 4655, type: !7)
!4258 = !DILocation(line: 4655, column: 29, scope: !4252)
!4259 = !DILocalVariable(name: "tem", scope: !4252, file: !3, line: 4657, type: !7)
!4260 = !DILocation(line: 4657, column: 7, scope: !4252)
!4261 = !DILocation(line: 4659, column: 7, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 4659, column: 7)
!4263 = !DILocation(line: 4659, column: 10, scope: !4262)
!4264 = !DILocation(line: 4659, column: 12, scope: !4262)
!4265 = !DILocation(line: 4659, column: 7, scope: !4252)
!4266 = !DILocation(line: 4661, column: 11, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 4661, column: 11)
!4268 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 4660, column: 5)
!4269 = !DILocation(line: 4661, column: 13, scope: !4267)
!4270 = !DILocation(line: 4661, column: 11, scope: !4268)
!4271 = !DILocation(line: 4663, column: 6, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 4662, column: 2)
!4273 = !DILocation(line: 4664, column: 2, scope: !4272)
!4274 = !DILocation(line: 4665, column: 21, scope: !4268)
!4275 = !DILocation(line: 4665, column: 14, scope: !4268)
!4276 = !DILocation(line: 4665, column: 17, scope: !4268)
!4277 = !DILocation(line: 4665, column: 19, scope: !4268)
!4278 = !DILocation(line: 4665, column: 7, scope: !4268)
!4279 = !DILocation(line: 4665, column: 10, scope: !4268)
!4280 = !DILocation(line: 4665, column: 12, scope: !4268)
!4281 = !DILocation(line: 4666, column: 14, scope: !4268)
!4282 = !DILocation(line: 4666, column: 17, scope: !4268)
!4283 = !DILocation(line: 4666, column: 21, scope: !4268)
!4284 = !DILocation(line: 4666, column: 19, scope: !4268)
!4285 = !DILocation(line: 4666, column: 7, scope: !4268)
!4286 = !DILocation(line: 4666, column: 10, scope: !4268)
!4287 = !DILocation(line: 4666, column: 12, scope: !4268)
!4288 = !DILocation(line: 4667, column: 5, scope: !4268)
!4289 = !DILocation(line: 4668, column: 12, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 4668, column: 12)
!4291 = !DILocation(line: 4668, column: 15, scope: !4290)
!4292 = !DILocation(line: 4668, column: 19, scope: !4290)
!4293 = !DILocation(line: 4668, column: 22, scope: !4290)
!4294 = !DILocation(line: 4668, column: 17, scope: !4290)
!4295 = !DILocation(line: 4668, column: 26, scope: !4290)
!4296 = !DILocation(line: 4668, column: 24, scope: !4290)
!4297 = !DILocation(line: 4668, column: 12, scope: !4262)
!4298 = !DILocation(line: 4670, column: 13, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 4669, column: 5)
!4300 = !DILocation(line: 4670, column: 16, scope: !4299)
!4301 = !DILocation(line: 4670, column: 20, scope: !4299)
!4302 = !DILocation(line: 4670, column: 23, scope: !4299)
!4303 = !DILocation(line: 4670, column: 18, scope: !4299)
!4304 = !DILocation(line: 4670, column: 11, scope: !4299)
!4305 = !DILocation(line: 4671, column: 12, scope: !4299)
!4306 = !DILocation(line: 4671, column: 9, scope: !4299)
!4307 = !DILocation(line: 4672, column: 9, scope: !4299)
!4308 = !DILocation(line: 4673, column: 14, scope: !4299)
!4309 = !DILocation(line: 4673, column: 7, scope: !4299)
!4310 = !DILocation(line: 4673, column: 10, scope: !4299)
!4311 = !DILocation(line: 4673, column: 12, scope: !4299)
!4312 = !DILocation(line: 4674, column: 14, scope: !4299)
!4313 = !DILocation(line: 4674, column: 17, scope: !4299)
!4314 = !DILocation(line: 4674, column: 21, scope: !4299)
!4315 = !DILocation(line: 4674, column: 19, scope: !4299)
!4316 = !DILocation(line: 4674, column: 7, scope: !4299)
!4317 = !DILocation(line: 4674, column: 10, scope: !4299)
!4318 = !DILocation(line: 4674, column: 12, scope: !4299)
!4319 = !DILocation(line: 4675, column: 14, scope: !4299)
!4320 = !DILocation(line: 4675, column: 17, scope: !4299)
!4321 = !DILocation(line: 4675, column: 21, scope: !4299)
!4322 = !DILocation(line: 4675, column: 19, scope: !4299)
!4323 = !DILocation(line: 4675, column: 7, scope: !4299)
!4324 = !DILocation(line: 4675, column: 10, scope: !4299)
!4325 = !DILocation(line: 4675, column: 12, scope: !4299)
!4326 = !DILocation(line: 4676, column: 5, scope: !4299)
!4327 = !DILocation(line: 4677, column: 1, scope: !4252)
!4328 = distinct !DISubprogram(name: "string_prependn", scope: !3, file: !3, line: 4767, type: !3881, scopeLine: 4768, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4329 = !DILocalVariable(name: "p", arg: 1, scope: !4328, file: !3, line: 4767, type: !60)
!4330 = !DILocation(line: 4767, column: 26, scope: !4328)
!4331 = !DILocalVariable(name: "s", arg: 2, scope: !4328, file: !3, line: 4767, type: !76)
!4332 = !DILocation(line: 4767, column: 41, scope: !4328)
!4333 = !DILocalVariable(name: "n", arg: 3, scope: !4328, file: !3, line: 4767, type: !7)
!4334 = !DILocation(line: 4767, column: 48, scope: !4328)
!4335 = !DILocalVariable(name: "q", scope: !4328, file: !3, line: 4769, type: !52)
!4336 = !DILocation(line: 4769, column: 9, scope: !4328)
!4337 = !DILocation(line: 4771, column: 7, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 4771, column: 7)
!4339 = !DILocation(line: 4771, column: 9, scope: !4338)
!4340 = !DILocation(line: 4771, column: 7, scope: !4328)
!4341 = !DILocation(line: 4773, column: 20, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4338, file: !3, line: 4772, column: 5)
!4343 = !DILocation(line: 4773, column: 23, scope: !4342)
!4344 = !DILocation(line: 4773, column: 7, scope: !4342)
!4345 = !DILocation(line: 4774, column: 16, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 4774, column: 7)
!4347 = !DILocation(line: 4774, column: 19, scope: !4346)
!4348 = !DILocation(line: 4774, column: 21, scope: !4346)
!4349 = !DILocation(line: 4774, column: 14, scope: !4346)
!4350 = !DILocation(line: 4774, column: 12, scope: !4346)
!4351 = !DILocation(line: 4774, column: 26, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4346, file: !3, line: 4774, column: 7)
!4353 = !DILocation(line: 4774, column: 31, scope: !4352)
!4354 = !DILocation(line: 4774, column: 34, scope: !4352)
!4355 = !DILocation(line: 4774, column: 28, scope: !4352)
!4356 = !DILocation(line: 4774, column: 7, scope: !4346)
!4357 = !DILocation(line: 4776, column: 11, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 4775, column: 2)
!4359 = !DILocation(line: 4776, column: 4, scope: !4358)
!4360 = !DILocation(line: 4776, column: 6, scope: !4358)
!4361 = !DILocation(line: 4776, column: 9, scope: !4358)
!4362 = !DILocation(line: 4777, column: 2, scope: !4358)
!4363 = !DILocation(line: 4774, column: 38, scope: !4352)
!4364 = !DILocation(line: 4774, column: 7, scope: !4352)
!4365 = distinct !{!4365, !4356, !4366}
!4366 = !DILocation(line: 4777, column: 2, scope: !4346)
!4367 = !DILocation(line: 4778, column: 15, scope: !4342)
!4368 = !DILocation(line: 4778, column: 18, scope: !4342)
!4369 = !DILocation(line: 4778, column: 21, scope: !4342)
!4370 = !DILocation(line: 4778, column: 24, scope: !4342)
!4371 = !DILocation(line: 4778, column: 7, scope: !4342)
!4372 = !DILocation(line: 4779, column: 15, scope: !4342)
!4373 = !DILocation(line: 4779, column: 7, scope: !4342)
!4374 = !DILocation(line: 4779, column: 10, scope: !4342)
!4375 = !DILocation(line: 4779, column: 12, scope: !4342)
!4376 = !DILocation(line: 4780, column: 5, scope: !4342)
!4377 = !DILocation(line: 4781, column: 1, scope: !4328)
!4378 = distinct !DISubprogram(name: "string_append_template_idx", scope: !3, file: !3, line: 4784, type: !4253, scopeLine: 4785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4379 = !DILocalVariable(name: "s", arg: 1, scope: !4378, file: !3, line: 4784, type: !60)
!4380 = !DILocation(line: 4784, column: 37, scope: !4378)
!4381 = !DILocalVariable(name: "idx", arg: 2, scope: !4378, file: !3, line: 4784, type: !7)
!4382 = !DILocation(line: 4784, column: 44, scope: !4378)
!4383 = !DILocalVariable(name: "buf", scope: !4378, file: !3, line: 4786, type: !4384)
!4384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 264, elements: !4385)
!4385 = !{!4386}
!4386 = !DISubrange(count: 33)
!4387 = !DILocation(line: 4786, column: 8, scope: !4378)
!4388 = !DILocation(line: 4787, column: 11, scope: !4378)
!4389 = !DILocation(line: 4787, column: 23, scope: !4378)
!4390 = !DILocation(line: 4787, column: 3, scope: !4378)
!4391 = !DILocation(line: 4788, column: 18, scope: !4378)
!4392 = !DILocation(line: 4788, column: 21, scope: !4378)
!4393 = !DILocation(line: 4788, column: 3, scope: !4378)
!4394 = !DILocation(line: 4789, column: 1, scope: !4378)
!4395 = distinct !DISubprogram(name: "get_count", scope: !3, file: !3, line: 3409, type: !4396, scopeLine: 3410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{!7, !492, !4398}
!4398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4399 = !DILocalVariable(name: "type", arg: 1, scope: !4395, file: !3, line: 3409, type: !492)
!4400 = !DILocation(line: 3409, column: 25, scope: !4395)
!4401 = !DILocalVariable(name: "count", arg: 2, scope: !4395, file: !3, line: 3409, type: !4398)
!4402 = !DILocation(line: 3409, column: 36, scope: !4395)
!4403 = !DILocalVariable(name: "p", scope: !4395, file: !3, line: 3411, type: !76)
!4404 = !DILocation(line: 3411, column: 15, scope: !4395)
!4405 = !DILocalVariable(name: "n", scope: !4395, file: !3, line: 3412, type: !7)
!4406 = !DILocation(line: 3412, column: 7, scope: !4395)
!4407 = !DILocation(line: 3414, column: 8, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 3414, column: 7)
!4409 = !DILocation(line: 3414, column: 7, scope: !4395)
!4410 = !DILocation(line: 3415, column: 5, scope: !4408)
!4411 = !DILocation(line: 3418, column: 18, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 3417, column: 5)
!4413 = !DILocation(line: 3418, column: 17, scope: !4412)
!4414 = !DILocation(line: 3418, column: 16, scope: !4412)
!4415 = !DILocation(line: 3418, column: 23, scope: !4412)
!4416 = !DILocation(line: 3418, column: 8, scope: !4412)
!4417 = !DILocation(line: 3418, column: 14, scope: !4412)
!4418 = !DILocation(line: 3419, column: 9, scope: !4412)
!4419 = !DILocation(line: 3419, column: 14, scope: !4412)
!4420 = !DILocation(line: 3420, column: 11, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 3420, column: 11)
!4422 = !DILocation(line: 3420, column: 11, scope: !4412)
!4423 = !DILocation(line: 3422, column: 9, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 3421, column: 2)
!4425 = !DILocation(line: 3422, column: 8, scope: !4424)
!4426 = !DILocation(line: 3422, column: 6, scope: !4424)
!4427 = !DILocation(line: 3423, column: 9, scope: !4424)
!4428 = !DILocation(line: 3423, column: 8, scope: !4424)
!4429 = !DILocation(line: 3423, column: 6, scope: !4424)
!4430 = !DILocation(line: 3424, column: 4, scope: !4424)
!4431 = !DILocation(line: 3426, column: 10, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4424, file: !3, line: 3425, column: 6)
!4433 = !DILocation(line: 3427, column: 14, scope: !4432)
!4434 = !DILocation(line: 3427, column: 13, scope: !4432)
!4435 = !DILocation(line: 3427, column: 16, scope: !4432)
!4436 = !DILocation(line: 3427, column: 10, scope: !4432)
!4437 = !DILocation(line: 3428, column: 9, scope: !4432)
!4438 = !DILocation(line: 3429, column: 6, scope: !4432)
!4439 = !DILocation(line: 3430, column: 11, scope: !4424)
!4440 = distinct !{!4440, !4430, !4441}
!4441 = !DILocation(line: 3430, column: 38, scope: !4424)
!4442 = !DILocation(line: 3431, column: 9, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4424, file: !3, line: 3431, column: 8)
!4444 = !DILocation(line: 3431, column: 8, scope: !4443)
!4445 = !DILocation(line: 3431, column: 11, scope: !4443)
!4446 = !DILocation(line: 3431, column: 8, scope: !4424)
!4447 = !DILocation(line: 3433, column: 16, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 3432, column: 6)
!4449 = !DILocation(line: 3433, column: 18, scope: !4448)
!4450 = !DILocation(line: 3433, column: 9, scope: !4448)
!4451 = !DILocation(line: 3433, column: 14, scope: !4448)
!4452 = !DILocation(line: 3434, column: 17, scope: !4448)
!4453 = !DILocation(line: 3434, column: 9, scope: !4448)
!4454 = !DILocation(line: 3434, column: 15, scope: !4448)
!4455 = !DILocation(line: 3435, column: 6, scope: !4448)
!4456 = !DILocation(line: 3436, column: 2, scope: !4424)
!4457 = !DILocation(line: 3438, column: 3, scope: !4395)
!4458 = !DILocation(line: 3439, column: 1, scope: !4395)
!4459 = distinct !DISubprogram(name: "demangle_template_template_parm", scope: !3, file: !3, line: 1631, type: !489, scopeLine: 1633, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4460 = !DILocalVariable(name: "work", arg: 1, scope: !4459, file: !3, line: 1631, type: !491)
!4461 = !DILocation(line: 1631, column: 53, scope: !4459)
!4462 = !DILocalVariable(name: "mangled", arg: 2, scope: !4459, file: !3, line: 1632, type: !492)
!4463 = !DILocation(line: 1632, column: 47, scope: !4459)
!4464 = !DILocalVariable(name: "tname", arg: 3, scope: !4459, file: !3, line: 1632, type: !60)
!4465 = !DILocation(line: 1632, column: 64, scope: !4459)
!4466 = !DILocalVariable(name: "i", scope: !4459, file: !3, line: 1634, type: !7)
!4467 = !DILocation(line: 1634, column: 7, scope: !4459)
!4468 = !DILocalVariable(name: "r", scope: !4459, file: !3, line: 1635, type: !7)
!4469 = !DILocation(line: 1635, column: 7, scope: !4459)
!4470 = !DILocalVariable(name: "need_comma", scope: !4459, file: !3, line: 1636, type: !7)
!4471 = !DILocation(line: 1636, column: 7, scope: !4459)
!4472 = !DILocalVariable(name: "success", scope: !4459, file: !3, line: 1637, type: !7)
!4473 = !DILocation(line: 1637, column: 7, scope: !4459)
!4474 = !DILocalVariable(name: "temp", scope: !4459, file: !3, line: 1638, type: !61)
!4475 = !DILocation(line: 1638, column: 10, scope: !4459)
!4476 = !DILocation(line: 1640, column: 18, scope: !4459)
!4477 = !DILocation(line: 1640, column: 3, scope: !4459)
!4478 = !DILocation(line: 1642, column: 18, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1642, column: 7)
!4480 = !DILocation(line: 1642, column: 7, scope: !4479)
!4481 = !DILocation(line: 1642, column: 7, scope: !4459)
!4482 = !DILocation(line: 1644, column: 14, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 1644, column: 7)
!4484 = distinct !DILexicalBlock(scope: !4479, file: !3, line: 1643, column: 5)
!4485 = !DILocation(line: 1644, column: 12, scope: !4483)
!4486 = !DILocation(line: 1644, column: 19, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4483, file: !3, line: 1644, column: 7)
!4488 = !DILocation(line: 1644, column: 23, scope: !4487)
!4489 = !DILocation(line: 1644, column: 21, scope: !4487)
!4490 = !DILocation(line: 1644, column: 7, scope: !4483)
!4491 = !DILocation(line: 1646, column: 8, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 1646, column: 8)
!4493 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 1645, column: 2)
!4494 = !DILocation(line: 1646, column: 8, scope: !4493)
!4495 = !DILocation(line: 1648, column: 23, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 1647, column: 6)
!4497 = !DILocation(line: 1648, column: 8, scope: !4496)
!4498 = !DILocation(line: 1649, column: 6, scope: !4496)
!4499 = !DILocation(line: 1652, column: 12, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 1652, column: 10)
!4501 = !DILocation(line: 1652, column: 11, scope: !4500)
!4502 = !DILocation(line: 1652, column: 10, scope: !4500)
!4503 = !DILocation(line: 1652, column: 20, scope: !4500)
!4504 = !DILocation(line: 1652, column: 10, scope: !4493)
!4505 = !DILocation(line: 1654, column: 5, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 1653, column: 8)
!4507 = !DILocation(line: 1654, column: 13, scope: !4506)
!4508 = !DILocation(line: 1655, column: 18, scope: !4506)
!4509 = !DILocation(line: 1655, column: 3, scope: !4506)
!4510 = !DILocation(line: 1656, column: 8, scope: !4506)
!4511 = !DILocation(line: 1658, column: 17, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4500, file: !3, line: 1658, column: 15)
!4513 = !DILocation(line: 1658, column: 16, scope: !4512)
!4514 = !DILocation(line: 1658, column: 15, scope: !4512)
!4515 = !DILocation(line: 1658, column: 25, scope: !4512)
!4516 = !DILocation(line: 1658, column: 15, scope: !4500)
!4517 = !DILocation(line: 1660, column: 5, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 1659, column: 8)
!4519 = !DILocation(line: 1660, column: 13, scope: !4518)
!4520 = !DILocation(line: 1662, column: 38, scope: !4518)
!4521 = !DILocation(line: 1662, column: 44, scope: !4518)
!4522 = !DILocation(line: 1662, column: 53, scope: !4518)
!4523 = !DILocation(line: 1662, column: 5, scope: !4518)
!4524 = !DILocation(line: 1661, column: 11, scope: !4518)
!4525 = !DILocation(line: 1663, column: 8, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 1663, column: 7)
!4527 = !DILocation(line: 1663, column: 7, scope: !4518)
!4528 = !DILocation(line: 1665, column: 7, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 1664, column: 5)
!4530 = !DILocation(line: 1667, column: 8, scope: !4518)
!4531 = !DILocation(line: 1671, column: 22, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 1669, column: 8)
!4533 = !DILocation(line: 1671, column: 28, scope: !4532)
!4534 = !DILocation(line: 1671, column: 13, scope: !4532)
!4535 = !DILocation(line: 1671, column: 11, scope: !4532)
!4536 = !DILocation(line: 1672, column: 7, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1672, column: 7)
!4538 = !DILocation(line: 1672, column: 7, scope: !4532)
!4539 = !DILocation(line: 1674, column: 23, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 1673, column: 5)
!4541 = !DILocation(line: 1674, column: 7, scope: !4540)
!4542 = !DILocation(line: 1675, column: 5, scope: !4540)
!4543 = !DILocation(line: 1676, column: 3, scope: !4532)
!4544 = !DILocation(line: 1677, column: 8, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 1677, column: 7)
!4546 = !DILocation(line: 1677, column: 7, scope: !4532)
!4547 = !DILocation(line: 1679, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4545, file: !3, line: 1678, column: 5)
!4549 = !DILocation(line: 1682, column: 15, scope: !4493)
!4550 = !DILocation(line: 1683, column: 2, scope: !4493)
!4551 = !DILocation(line: 1644, column: 27, scope: !4487)
!4552 = !DILocation(line: 1644, column: 7, scope: !4487)
!4553 = distinct !{!4553, !4490, !4554}
!4554 = !DILocation(line: 1683, column: 2, scope: !4483)
!4555 = !DILocation(line: 1685, column: 5, scope: !4484)
!4556 = !DILocation(line: 1686, column: 7, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 1686, column: 7)
!4558 = !DILocation(line: 1686, column: 14, scope: !4557)
!4559 = !DILocation(line: 1686, column: 20, scope: !4557)
!4560 = !DILocation(line: 1686, column: 7, scope: !4459)
!4561 = !DILocation(line: 1687, column: 20, scope: !4557)
!4562 = !DILocation(line: 1687, column: 5, scope: !4557)
!4563 = !DILocation(line: 1688, column: 18, scope: !4459)
!4564 = !DILocation(line: 1688, column: 3, scope: !4459)
!4565 = !DILocation(line: 1689, column: 11, scope: !4459)
!4566 = !DILocation(line: 1689, column: 3, scope: !4459)
!4567 = distinct !DISubprogram(name: "demangle_template_value_parm", scope: !3, file: !3, line: 1887, type: !4568, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4568 = !DISubroutineType(types: !4569)
!4569 = !{!7, !491, !492, !60, !59}
!4570 = !DILocalVariable(name: "work", arg: 1, scope: !4567, file: !3, line: 1887, type: !491)
!4571 = !DILocation(line: 1887, column: 50, scope: !4567)
!4572 = !DILocalVariable(name: "mangled", arg: 2, scope: !4567, file: !3, line: 1887, type: !492)
!4573 = !DILocation(line: 1887, column: 69, scope: !4567)
!4574 = !DILocalVariable(name: "s", arg: 3, scope: !4567, file: !3, line: 1888, type: !60)
!4575 = !DILocation(line: 1888, column: 39, scope: !4567)
!4576 = !DILocalVariable(name: "tk", arg: 4, scope: !4567, file: !3, line: 1888, type: !59)
!4577 = !DILocation(line: 1888, column: 54, scope: !4567)
!4578 = !DILocalVariable(name: "success", scope: !4567, file: !3, line: 1890, type: !7)
!4579 = !DILocation(line: 1890, column: 7, scope: !4567)
!4580 = !DILocation(line: 1892, column: 9, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4567, file: !3, line: 1892, column: 7)
!4582 = !DILocation(line: 1892, column: 8, scope: !4581)
!4583 = !DILocation(line: 1892, column: 7, scope: !4581)
!4584 = !DILocation(line: 1892, column: 17, scope: !4581)
!4585 = !DILocation(line: 1892, column: 7, scope: !4567)
!4586 = !DILocalVariable(name: "idx", scope: !4587, file: !3, line: 1895, type: !7)
!4587 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 1893, column: 5)
!4588 = !DILocation(line: 1895, column: 11, scope: !4587)
!4589 = !DILocation(line: 1897, column: 9, scope: !4587)
!4590 = !DILocation(line: 1897, column: 17, scope: !4587)
!4591 = !DILocation(line: 1898, column: 45, scope: !4587)
!4592 = !DILocation(line: 1898, column: 13, scope: !4587)
!4593 = !DILocation(line: 1898, column: 11, scope: !4587)
!4594 = !DILocation(line: 1899, column: 11, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 1899, column: 11)
!4596 = !DILocation(line: 1899, column: 15, scope: !4595)
!4597 = !DILocation(line: 1900, column: 4, scope: !4595)
!4598 = !DILocation(line: 1900, column: 8, scope: !4595)
!4599 = !DILocation(line: 1900, column: 14, scope: !4595)
!4600 = !DILocation(line: 1900, column: 26, scope: !4595)
!4601 = !DILocation(line: 1900, column: 29, scope: !4595)
!4602 = !DILocation(line: 1900, column: 36, scope: !4595)
!4603 = !DILocation(line: 1900, column: 42, scope: !4595)
!4604 = !DILocation(line: 1900, column: 33, scope: !4595)
!4605 = !DILocation(line: 1901, column: 4, scope: !4595)
!4606 = !DILocation(line: 1901, column: 39, scope: !4595)
!4607 = !DILocation(line: 1901, column: 7, scope: !4595)
!4608 = !DILocation(line: 1901, column: 48, scope: !4595)
!4609 = !DILocation(line: 1899, column: 11, scope: !4587)
!4610 = !DILocation(line: 1902, column: 2, scope: !4595)
!4611 = !DILocation(line: 1903, column: 11, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4587, file: !3, line: 1903, column: 11)
!4613 = !DILocation(line: 1903, column: 17, scope: !4612)
!4614 = !DILocation(line: 1903, column: 11, scope: !4587)
!4615 = !DILocation(line: 1904, column: 17, scope: !4612)
!4616 = !DILocation(line: 1904, column: 20, scope: !4612)
!4617 = !DILocation(line: 1904, column: 26, scope: !4612)
!4618 = !DILocation(line: 1904, column: 38, scope: !4612)
!4619 = !DILocation(line: 1904, column: 2, scope: !4612)
!4620 = !DILocation(line: 1906, column: 30, scope: !4612)
!4621 = !DILocation(line: 1906, column: 33, scope: !4612)
!4622 = !DILocation(line: 1906, column: 2, scope: !4612)
!4623 = !DILocation(line: 1907, column: 5, scope: !4587)
!4624 = !DILocation(line: 1908, column: 12, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4581, file: !3, line: 1908, column: 12)
!4626 = !DILocation(line: 1908, column: 15, scope: !4625)
!4627 = !DILocation(line: 1908, column: 12, scope: !4581)
!4628 = !DILocation(line: 1909, column: 40, scope: !4625)
!4629 = !DILocation(line: 1909, column: 46, scope: !4625)
!4630 = !DILocation(line: 1909, column: 55, scope: !4625)
!4631 = !DILocation(line: 1909, column: 15, scope: !4625)
!4632 = !DILocation(line: 1909, column: 13, scope: !4625)
!4633 = !DILocation(line: 1909, column: 5, scope: !4625)
!4634 = !DILocation(line: 1910, column: 12, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 1910, column: 12)
!4636 = !DILocation(line: 1910, column: 15, scope: !4635)
!4637 = !DILocation(line: 1910, column: 12, scope: !4625)
!4638 = !DILocalVariable(name: "tmp", scope: !4639, file: !3, line: 1912, type: !112)
!4639 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 1911, column: 5)
!4640 = !DILocation(line: 1912, column: 12, scope: !4639)
!4641 = !DILocalVariable(name: "val", scope: !4639, file: !3, line: 1913, type: !7)
!4642 = !DILocation(line: 1913, column: 11, scope: !4639)
!4643 = !DILocation(line: 1914, column: 13, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4639, file: !3, line: 1914, column: 11)
!4645 = !DILocation(line: 1914, column: 12, scope: !4644)
!4646 = !DILocation(line: 1914, column: 11, scope: !4644)
!4647 = !DILocation(line: 1914, column: 21, scope: !4644)
!4648 = !DILocation(line: 1914, column: 11, scope: !4639)
!4649 = !DILocation(line: 1916, column: 20, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4644, file: !3, line: 1915, column: 2)
!4651 = !DILocation(line: 1916, column: 4, scope: !4650)
!4652 = !DILocation(line: 1917, column: 6, scope: !4650)
!4653 = !DILocation(line: 1917, column: 14, scope: !4650)
!4654 = !DILocation(line: 1918, column: 2, scope: !4650)
!4655 = !DILocation(line: 1919, column: 23, scope: !4639)
!4656 = !DILocation(line: 1919, column: 7, scope: !4639)
!4657 = !DILocation(line: 1920, column: 27, scope: !4639)
!4658 = !DILocation(line: 1920, column: 13, scope: !4639)
!4659 = !DILocation(line: 1920, column: 11, scope: !4639)
!4660 = !DILocation(line: 1921, column: 11, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4639, file: !3, line: 1921, column: 11)
!4662 = !DILocation(line: 1921, column: 15, scope: !4661)
!4663 = !DILocation(line: 1921, column: 11, scope: !4639)
!4664 = !DILocation(line: 1922, column: 10, scope: !4661)
!4665 = !DILocation(line: 1922, column: 2, scope: !4661)
!4666 = !DILocation(line: 1925, column: 19, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 1924, column: 2)
!4668 = !DILocation(line: 1925, column: 13, scope: !4667)
!4669 = !DILocation(line: 1925, column: 4, scope: !4667)
!4670 = !DILocation(line: 1925, column: 11, scope: !4667)
!4671 = !DILocation(line: 1926, column: 4, scope: !4667)
!4672 = !DILocation(line: 1926, column: 11, scope: !4667)
!4673 = !DILocation(line: 1927, column: 20, scope: !4667)
!4674 = !DILocation(line: 1927, column: 24, scope: !4667)
!4675 = !DILocation(line: 1927, column: 4, scope: !4667)
!4676 = !DILocation(line: 1928, column: 20, scope: !4667)
!4677 = !DILocation(line: 1928, column: 4, scope: !4667)
!4678 = !DILocation(line: 1930, column: 5, scope: !4639)
!4679 = !DILocation(line: 1931, column: 12, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4635, file: !3, line: 1931, column: 12)
!4681 = !DILocation(line: 1931, column: 15, scope: !4680)
!4682 = !DILocation(line: 1931, column: 12, scope: !4635)
!4683 = !DILocalVariable(name: "val", scope: !4684, file: !3, line: 1933, type: !7)
!4684 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 1932, column: 5)
!4685 = !DILocation(line: 1933, column: 11, scope: !4684)
!4686 = !DILocation(line: 1933, column: 32, scope: !4684)
!4687 = !DILocation(line: 1933, column: 17, scope: !4684)
!4688 = !DILocation(line: 1934, column: 11, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1934, column: 11)
!4690 = !DILocation(line: 1934, column: 15, scope: !4689)
!4691 = !DILocation(line: 1934, column: 11, scope: !4684)
!4692 = !DILocation(line: 1935, column: 18, scope: !4689)
!4693 = !DILocation(line: 1935, column: 2, scope: !4689)
!4694 = !DILocation(line: 1936, column: 16, scope: !4695)
!4695 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 1936, column: 16)
!4696 = !DILocation(line: 1936, column: 20, scope: !4695)
!4697 = !DILocation(line: 1936, column: 16, scope: !4689)
!4698 = !DILocation(line: 1937, column: 18, scope: !4695)
!4699 = !DILocation(line: 1937, column: 2, scope: !4695)
!4700 = !DILocation(line: 1939, column: 10, scope: !4695)
!4701 = !DILocation(line: 1940, column: 5, scope: !4684)
!4702 = !DILocation(line: 1941, column: 12, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 1941, column: 12)
!4704 = !DILocation(line: 1941, column: 15, scope: !4703)
!4705 = !DILocation(line: 1941, column: 12, scope: !4680)
!4706 = !DILocation(line: 1942, column: 36, scope: !4703)
!4707 = !DILocation(line: 1942, column: 42, scope: !4703)
!4708 = !DILocation(line: 1942, column: 51, scope: !4703)
!4709 = !DILocation(line: 1942, column: 15, scope: !4703)
!4710 = !DILocation(line: 1942, column: 13, scope: !4703)
!4711 = !DILocation(line: 1942, column: 5, scope: !4703)
!4712 = !DILocation(line: 1943, column: 12, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1943, column: 12)
!4714 = !DILocation(line: 1943, column: 15, scope: !4713)
!4715 = !DILocation(line: 1943, column: 29, scope: !4713)
!4716 = !DILocation(line: 1943, column: 32, scope: !4713)
!4717 = !DILocation(line: 1943, column: 35, scope: !4713)
!4718 = !DILocation(line: 1943, column: 12, scope: !4703)
!4719 = !DILocation(line: 1945, column: 13, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 1945, column: 11)
!4721 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 1944, column: 5)
!4722 = !DILocation(line: 1945, column: 12, scope: !4720)
!4723 = !DILocation(line: 1945, column: 11, scope: !4720)
!4724 = !DILocation(line: 1945, column: 21, scope: !4720)
!4725 = !DILocation(line: 1945, column: 11, scope: !4721)
!4726 = !DILocation(line: 1946, column: 32, scope: !4720)
!4727 = !DILocation(line: 1946, column: 38, scope: !4720)
!4728 = !DILocation(line: 1946, column: 47, scope: !4720)
!4729 = !DILocation(line: 1946, column: 12, scope: !4720)
!4730 = !DILocation(line: 1946, column: 10, scope: !4720)
!4731 = !DILocation(line: 1946, column: 2, scope: !4720)
!4732 = !DILocalVariable(name: "symbol_len", scope: !4733, file: !3, line: 1951, type: !7)
!4733 = distinct !DILexicalBlock(scope: !4720, file: !3, line: 1950, column: 2)
!4734 = !DILocation(line: 1951, column: 8, scope: !4733)
!4735 = !DILocation(line: 1951, column: 37, scope: !4733)
!4736 = !DILocation(line: 1951, column: 22, scope: !4733)
!4737 = !DILocation(line: 1952, column: 8, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4733, file: !3, line: 1952, column: 8)
!4739 = !DILocation(line: 1952, column: 19, scope: !4738)
!4740 = !DILocation(line: 1952, column: 8, scope: !4733)
!4741 = !DILocation(line: 1953, column: 6, scope: !4738)
!4742 = !DILocation(line: 1954, column: 8, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4733, file: !3, line: 1954, column: 8)
!4744 = !DILocation(line: 1954, column: 19, scope: !4743)
!4745 = !DILocation(line: 1954, column: 8, scope: !4733)
!4746 = !DILocation(line: 1955, column: 22, scope: !4743)
!4747 = !DILocation(line: 1955, column: 6, scope: !4743)
!4748 = !DILocalVariable(name: "p", scope: !4749, file: !3, line: 1958, type: !52)
!4749 = distinct !DILexicalBlock(scope: !4743, file: !3, line: 1957, column: 6)
!4750 = !DILocation(line: 1958, column: 14, scope: !4749)
!4751 = !DILocation(line: 1958, column: 18, scope: !4749)
!4752 = !DILocalVariable(name: "q", scope: !4749, file: !3, line: 1958, type: !52)
!4753 = !DILocation(line: 1958, column: 51, scope: !4749)
!4754 = !DILocation(line: 1959, column: 17, scope: !4749)
!4755 = !DILocation(line: 1959, column: 21, scope: !4749)
!4756 = !DILocation(line: 1959, column: 20, scope: !4749)
!4757 = !DILocation(line: 1959, column: 30, scope: !4749)
!4758 = !DILocation(line: 1959, column: 8, scope: !4749)
!4759 = !DILocation(line: 1960, column: 8, scope: !4749)
!4760 = !DILocation(line: 1960, column: 11, scope: !4749)
!4761 = !DILocation(line: 1960, column: 23, scope: !4749)
!4762 = !DILocation(line: 1966, column: 28, scope: !4749)
!4763 = !DILocation(line: 1966, column: 31, scope: !4749)
!4764 = !DILocation(line: 1966, column: 37, scope: !4749)
!4765 = !DILocation(line: 1966, column: 12, scope: !4749)
!4766 = !DILocation(line: 1966, column: 10, scope: !4749)
!4767 = !DILocation(line: 1967, column: 12, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 1967, column: 12)
!4769 = !DILocation(line: 1967, column: 15, scope: !4768)
!4770 = !DILocation(line: 1967, column: 12, scope: !4749)
!4771 = !DILocation(line: 1968, column: 19, scope: !4768)
!4772 = !DILocation(line: 1968, column: 3, scope: !4768)
!4773 = !DILocation(line: 1971, column: 12, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 1971, column: 12)
!4775 = !DILocation(line: 1971, column: 12, scope: !4749)
!4776 = !DILocation(line: 1973, column: 20, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4774, file: !3, line: 1972, column: 3)
!4778 = !DILocation(line: 1973, column: 23, scope: !4777)
!4779 = !DILocation(line: 1973, column: 5, scope: !4777)
!4780 = !DILocation(line: 1974, column: 11, scope: !4777)
!4781 = !DILocation(line: 1974, column: 5, scope: !4777)
!4782 = !DILocation(line: 1975, column: 3, scope: !4777)
!4783 = !DILocation(line: 1977, column: 18, scope: !4774)
!4784 = !DILocation(line: 1977, column: 21, scope: !4774)
!4785 = !DILocation(line: 1977, column: 3, scope: !4774)
!4786 = !DILocation(line: 1978, column: 14, scope: !4749)
!4787 = !DILocation(line: 1978, column: 8, scope: !4749)
!4788 = !DILocation(line: 1980, column: 16, scope: !4733)
!4789 = !DILocation(line: 1980, column: 5, scope: !4733)
!4790 = !DILocation(line: 1980, column: 13, scope: !4733)
!4791 = !DILocation(line: 1982, column: 5, scope: !4721)
!4792 = !DILocation(line: 1984, column: 10, scope: !4567)
!4793 = !DILocation(line: 1984, column: 3, scope: !4567)
!4794 = !DILocation(line: 1985, column: 1, scope: !4567)
!4795 = distinct !DISubprogram(name: "demangle_integral_value", scope: !3, file: !3, line: 1750, type: !489, scopeLine: 1752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4796 = !DILocalVariable(name: "work", arg: 1, scope: !4795, file: !3, line: 1750, type: !491)
!4797 = !DILocation(line: 1750, column: 45, scope: !4795)
!4798 = !DILocalVariable(name: "mangled", arg: 2, scope: !4795, file: !3, line: 1751, type: !492)
!4799 = !DILocation(line: 1751, column: 39, scope: !4795)
!4800 = !DILocalVariable(name: "s", arg: 3, scope: !4795, file: !3, line: 1751, type: !60)
!4801 = !DILocation(line: 1751, column: 56, scope: !4795)
!4802 = !DILocalVariable(name: "success", scope: !4795, file: !3, line: 1753, type: !7)
!4803 = !DILocation(line: 1753, column: 7, scope: !4795)
!4804 = !DILocation(line: 1755, column: 9, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 1755, column: 7)
!4806 = !DILocation(line: 1755, column: 8, scope: !4805)
!4807 = !DILocation(line: 1755, column: 7, scope: !4805)
!4808 = !DILocation(line: 1755, column: 17, scope: !4805)
!4809 = !DILocation(line: 1755, column: 7, scope: !4795)
!4810 = !DILocation(line: 1756, column: 36, scope: !4805)
!4811 = !DILocation(line: 1756, column: 42, scope: !4805)
!4812 = !DILocation(line: 1756, column: 51, scope: !4805)
!4813 = !DILocation(line: 1756, column: 15, scope: !4805)
!4814 = !DILocation(line: 1756, column: 13, scope: !4805)
!4815 = !DILocation(line: 1756, column: 5, scope: !4805)
!4816 = !DILocation(line: 1757, column: 14, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 1757, column: 12)
!4818 = !DILocation(line: 1757, column: 13, scope: !4817)
!4819 = !DILocation(line: 1757, column: 12, scope: !4817)
!4820 = !DILocation(line: 1757, column: 22, scope: !4817)
!4821 = !DILocation(line: 1757, column: 29, scope: !4817)
!4822 = !DILocation(line: 1757, column: 34, scope: !4817)
!4823 = !DILocation(line: 1757, column: 33, scope: !4817)
!4824 = !DILocation(line: 1757, column: 32, scope: !4817)
!4825 = !DILocation(line: 1757, column: 42, scope: !4817)
!4826 = !DILocation(line: 1757, column: 12, scope: !4805)
!4827 = !DILocation(line: 1758, column: 35, scope: !4817)
!4828 = !DILocation(line: 1758, column: 41, scope: !4817)
!4829 = !DILocation(line: 1758, column: 50, scope: !4817)
!4830 = !DILocation(line: 1758, column: 15, scope: !4817)
!4831 = !DILocation(line: 1758, column: 13, scope: !4817)
!4832 = !DILocation(line: 1758, column: 5, scope: !4817)
!4833 = !DILocalVariable(name: "value", scope: !4834, file: !3, line: 1761, type: !7)
!4834 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1760, column: 5)
!4835 = !DILocation(line: 1761, column: 11, scope: !4834)
!4836 = !DILocalVariable(name: "multidigit_without_leading_underscore", scope: !4834, file: !3, line: 1765, type: !7)
!4837 = !DILocation(line: 1765, column: 11, scope: !4834)
!4838 = !DILocalVariable(name: "leave_following_underscore", scope: !4834, file: !3, line: 1766, type: !7)
!4839 = !DILocation(line: 1766, column: 11, scope: !4834)
!4840 = !DILocation(line: 1768, column: 15, scope: !4834)
!4841 = !DILocation(line: 1770, column: 13, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 1770, column: 11)
!4843 = !DILocation(line: 1770, column: 12, scope: !4842)
!4844 = !DILocation(line: 1770, column: 11, scope: !4842)
!4845 = !DILocation(line: 1770, column: 21, scope: !4842)
!4846 = !DILocation(line: 1770, column: 11, scope: !4834)
!4847 = !DILocation(line: 1772, column: 8, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 1772, column: 8)
!4849 = distinct !DILexicalBlock(scope: !4842, file: !3, line: 1771, column: 9)
!4850 = !DILocation(line: 1772, column: 22, scope: !4848)
!4851 = !DILocation(line: 1772, column: 8, scope: !4849)
!4852 = !DILocation(line: 1778, column: 46, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1773, column: 6)
!4854 = !DILocation(line: 1779, column: 24, scope: !4853)
!4855 = !DILocation(line: 1779, column: 8, scope: !4853)
!4856 = !DILocation(line: 1780, column: 10, scope: !4853)
!4857 = !DILocation(line: 1780, column: 19, scope: !4853)
!4858 = !DILocation(line: 1781, column: 6, scope: !4853)
!4859 = !DILocation(line: 1787, column: 35, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1783, column: 6)
!4861 = !DILocation(line: 1789, column: 2, scope: !4849)
!4862 = !DILocation(line: 1793, column: 10, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 1793, column: 8)
!4864 = distinct !DILexicalBlock(scope: !4842, file: !3, line: 1791, column: 2)
!4865 = !DILocation(line: 1793, column: 9, scope: !4863)
!4866 = !DILocation(line: 1793, column: 8, scope: !4863)
!4867 = !DILocation(line: 1793, column: 18, scope: !4863)
!4868 = !DILocation(line: 1793, column: 8, scope: !4864)
!4869 = !DILocation(line: 1795, column: 22, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4863, file: !3, line: 1794, column: 4)
!4871 = !DILocation(line: 1795, column: 6, scope: !4870)
!4872 = !DILocation(line: 1796, column: 8, scope: !4870)
!4873 = !DILocation(line: 1796, column: 16, scope: !4870)
!4874 = !DILocation(line: 1797, column: 4, scope: !4870)
!4875 = !DILocation(line: 1802, column: 42, scope: !4864)
!4876 = !DILocation(line: 1805, column: 31, scope: !4864)
!4877 = !DILocation(line: 1812, column: 11, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 1812, column: 11)
!4879 = !DILocation(line: 1812, column: 11, scope: !4834)
!4880 = !DILocation(line: 1813, column: 25, scope: !4878)
!4881 = !DILocation(line: 1813, column: 10, scope: !4878)
!4882 = !DILocation(line: 1813, column: 8, scope: !4878)
!4883 = !DILocation(line: 1813, column: 2, scope: !4878)
!4884 = !DILocation(line: 1815, column: 42, scope: !4878)
!4885 = !DILocation(line: 1815, column: 10, scope: !4878)
!4886 = !DILocation(line: 1815, column: 8, scope: !4878)
!4887 = !DILocation(line: 1817, column: 11, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4834, file: !3, line: 1817, column: 11)
!4889 = !DILocation(line: 1817, column: 17, scope: !4888)
!4890 = !DILocation(line: 1817, column: 11, scope: !4834)
!4891 = !DILocalVariable(name: "buf", scope: !4892, file: !3, line: 1819, type: !4893)
!4892 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1818, column: 2)
!4893 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 256, elements: !4894)
!4894 = !{!4895}
!4895 = !DISubrange(count: 32)
!4896 = !DILocation(line: 1819, column: 9, scope: !4892)
!4897 = !DILocation(line: 1820, column: 13, scope: !4892)
!4898 = !DILocation(line: 1820, column: 24, scope: !4892)
!4899 = !DILocation(line: 1820, column: 4, scope: !4892)
!4900 = !DILocation(line: 1821, column: 19, scope: !4892)
!4901 = !DILocation(line: 1821, column: 22, scope: !4892)
!4902 = !DILocation(line: 1821, column: 4, scope: !4892)
!4903 = !DILocation(line: 1830, column: 9, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4892, file: !3, line: 1830, column: 8)
!4905 = !DILocation(line: 1830, column: 15, scope: !4904)
!4906 = !DILocation(line: 1830, column: 19, scope: !4904)
!4907 = !DILocation(line: 1830, column: 22, scope: !4904)
!4908 = !DILocation(line: 1831, column: 8, scope: !4904)
!4909 = !DILocation(line: 1831, column: 13, scope: !4904)
!4910 = !DILocation(line: 1832, column: 8, scope: !4904)
!4911 = !DILocation(line: 1832, column: 13, scope: !4904)
!4912 = !DILocation(line: 1832, column: 12, scope: !4904)
!4913 = !DILocation(line: 1832, column: 11, scope: !4904)
!4914 = !DILocation(line: 1832, column: 21, scope: !4904)
!4915 = !DILocation(line: 1830, column: 8, scope: !4892)
!4916 = !DILocation(line: 1833, column: 8, scope: !4904)
!4917 = !DILocation(line: 1833, column: 16, scope: !4904)
!4918 = !DILocation(line: 1833, column: 6, scope: !4904)
!4919 = !DILocation(line: 1836, column: 12, scope: !4892)
!4920 = !DILocation(line: 1837, column: 2, scope: !4892)
!4921 = !DILocation(line: 1840, column: 10, scope: !4795)
!4922 = !DILocation(line: 1840, column: 3, scope: !4795)
!4923 = distinct !DISubprogram(name: "demangle_real_value", scope: !3, file: !3, line: 1846, type: !489, scopeLine: 1848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!4924 = !DILocalVariable(name: "work", arg: 1, scope: !4923, file: !3, line: 1846, type: !491)
!4925 = !DILocation(line: 1846, column: 41, scope: !4923)
!4926 = !DILocalVariable(name: "mangled", arg: 2, scope: !4923, file: !3, line: 1847, type: !492)
!4927 = !DILocation(line: 1847, column: 35, scope: !4923)
!4928 = !DILocalVariable(name: "s", arg: 3, scope: !4923, file: !3, line: 1847, type: !60)
!4929 = !DILocation(line: 1847, column: 52, scope: !4923)
!4930 = !DILocation(line: 1849, column: 9, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1849, column: 7)
!4932 = !DILocation(line: 1849, column: 8, scope: !4931)
!4933 = !DILocation(line: 1849, column: 7, scope: !4931)
!4934 = !DILocation(line: 1849, column: 17, scope: !4931)
!4935 = !DILocation(line: 1849, column: 7, scope: !4923)
!4936 = !DILocation(line: 1850, column: 33, scope: !4931)
!4937 = !DILocation(line: 1850, column: 39, scope: !4931)
!4938 = !DILocation(line: 1850, column: 48, scope: !4931)
!4939 = !DILocation(line: 1850, column: 12, scope: !4931)
!4940 = !DILocation(line: 1850, column: 5, scope: !4931)
!4941 = !DILocation(line: 1852, column: 9, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1852, column: 7)
!4943 = !DILocation(line: 1852, column: 8, scope: !4942)
!4944 = !DILocation(line: 1852, column: 7, scope: !4942)
!4945 = !DILocation(line: 1852, column: 17, scope: !4942)
!4946 = !DILocation(line: 1852, column: 7, scope: !4923)
!4947 = !DILocation(line: 1854, column: 23, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 1853, column: 5)
!4949 = !DILocation(line: 1854, column: 7, scope: !4948)
!4950 = !DILocation(line: 1855, column: 9, scope: !4948)
!4951 = !DILocation(line: 1855, column: 17, scope: !4948)
!4952 = !DILocation(line: 1856, column: 5, scope: !4948)
!4953 = !DILocation(line: 1857, column: 3, scope: !4923)
!4954 = !DILocation(line: 1857, column: 10, scope: !4923)
!4955 = !DILocation(line: 1859, column: 23, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1858, column: 5)
!4957 = !DILocation(line: 1859, column: 27, scope: !4956)
!4958 = !DILocation(line: 1859, column: 26, scope: !4956)
!4959 = !DILocation(line: 1859, column: 7, scope: !4956)
!4960 = !DILocation(line: 1860, column: 9, scope: !4956)
!4961 = !DILocation(line: 1860, column: 17, scope: !4956)
!4962 = distinct !{!4962, !4953, !4963}
!4963 = !DILocation(line: 1861, column: 5, scope: !4923)
!4964 = !DILocation(line: 1862, column: 9, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1862, column: 7)
!4966 = !DILocation(line: 1862, column: 8, scope: !4965)
!4967 = !DILocation(line: 1862, column: 7, scope: !4965)
!4968 = !DILocation(line: 1862, column: 17, scope: !4965)
!4969 = !DILocation(line: 1862, column: 7, scope: !4923)
!4970 = !DILocation(line: 1864, column: 23, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 1863, column: 5)
!4972 = !DILocation(line: 1864, column: 7, scope: !4971)
!4973 = !DILocation(line: 1865, column: 9, scope: !4971)
!4974 = !DILocation(line: 1865, column: 17, scope: !4971)
!4975 = !DILocation(line: 1866, column: 7, scope: !4971)
!4976 = !DILocation(line: 1866, column: 14, scope: !4971)
!4977 = !DILocation(line: 1868, column: 20, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 1867, column: 2)
!4979 = !DILocation(line: 1868, column: 24, scope: !4978)
!4980 = !DILocation(line: 1868, column: 23, scope: !4978)
!4981 = !DILocation(line: 1868, column: 4, scope: !4978)
!4982 = !DILocation(line: 1869, column: 6, scope: !4978)
!4983 = !DILocation(line: 1869, column: 14, scope: !4978)
!4984 = distinct !{!4984, !4975, !4985}
!4985 = !DILocation(line: 1870, column: 2, scope: !4971)
!4986 = !DILocation(line: 1871, column: 5, scope: !4971)
!4987 = !DILocation(line: 1872, column: 9, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1872, column: 7)
!4989 = !DILocation(line: 1872, column: 8, scope: !4988)
!4990 = !DILocation(line: 1872, column: 7, scope: !4988)
!4991 = !DILocation(line: 1872, column: 17, scope: !4988)
!4992 = !DILocation(line: 1872, column: 7, scope: !4923)
!4993 = !DILocation(line: 1874, column: 23, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 1873, column: 5)
!4995 = !DILocation(line: 1874, column: 7, scope: !4994)
!4996 = !DILocation(line: 1875, column: 9, scope: !4994)
!4997 = !DILocation(line: 1875, column: 17, scope: !4994)
!4998 = !DILocation(line: 1876, column: 7, scope: !4994)
!4999 = !DILocation(line: 1876, column: 14, scope: !4994)
!5000 = !DILocation(line: 1878, column: 20, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1877, column: 2)
!5002 = !DILocation(line: 1878, column: 24, scope: !5001)
!5003 = !DILocation(line: 1878, column: 23, scope: !5001)
!5004 = !DILocation(line: 1878, column: 4, scope: !5001)
!5005 = !DILocation(line: 1879, column: 6, scope: !5001)
!5006 = !DILocation(line: 1879, column: 14, scope: !5001)
!5007 = distinct !{!5007, !4998, !5008}
!5008 = !DILocation(line: 1880, column: 2, scope: !4994)
!5009 = !DILocation(line: 1881, column: 5, scope: !4994)
!5010 = !DILocation(line: 1883, column: 3, scope: !4923)
!5011 = !DILocation(line: 1884, column: 1, scope: !4923)
!5012 = distinct !DISubprogram(name: "demangle_expression", scope: !3, file: !3, line: 1693, type: !4568, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5013 = !DILocalVariable(name: "work", arg: 1, scope: !5012, file: !3, line: 1693, type: !491)
!5014 = !DILocation(line: 1693, column: 41, scope: !5012)
!5015 = !DILocalVariable(name: "mangled", arg: 2, scope: !5012, file: !3, line: 1693, type: !492)
!5016 = !DILocation(line: 1693, column: 60, scope: !5012)
!5017 = !DILocalVariable(name: "s", arg: 3, scope: !5012, file: !3, line: 1694, type: !60)
!5018 = !DILocation(line: 1694, column: 30, scope: !5012)
!5019 = !DILocalVariable(name: "tk", arg: 4, scope: !5012, file: !3, line: 1694, type: !59)
!5020 = !DILocation(line: 1694, column: 45, scope: !5012)
!5021 = !DILocalVariable(name: "need_operator", scope: !5012, file: !3, line: 1696, type: !7)
!5022 = !DILocation(line: 1696, column: 7, scope: !5012)
!5023 = !DILocalVariable(name: "success", scope: !5012, file: !3, line: 1697, type: !7)
!5024 = !DILocation(line: 1697, column: 7, scope: !5012)
!5025 = !DILocation(line: 1699, column: 11, scope: !5012)
!5026 = !DILocation(line: 1700, column: 19, scope: !5012)
!5027 = !DILocation(line: 1700, column: 3, scope: !5012)
!5028 = !DILocation(line: 1701, column: 5, scope: !5012)
!5029 = !DILocation(line: 1701, column: 13, scope: !5012)
!5030 = !DILocation(line: 1702, column: 3, scope: !5012)
!5031 = !DILocation(line: 1702, column: 10, scope: !5012)
!5032 = !DILocation(line: 1702, column: 18, scope: !5012)
!5033 = !DILocation(line: 1702, column: 23, scope: !5012)
!5034 = !DILocation(line: 1702, column: 22, scope: !5012)
!5035 = !DILocation(line: 1702, column: 21, scope: !5012)
!5036 = !DILocation(line: 1702, column: 31, scope: !5012)
!5037 = !DILocation(line: 1702, column: 38, scope: !5012)
!5038 = !DILocation(line: 1702, column: 43, scope: !5012)
!5039 = !DILocation(line: 1702, column: 42, scope: !5012)
!5040 = !DILocation(line: 1702, column: 41, scope: !5012)
!5041 = !DILocation(line: 1702, column: 51, scope: !5012)
!5042 = !DILocation(line: 0, scope: !5012)
!5043 = !DILocation(line: 1704, column: 11, scope: !5044)
!5044 = distinct !DILexicalBlock(scope: !5045, file: !3, line: 1704, column: 11)
!5045 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1703, column: 5)
!5046 = !DILocation(line: 1704, column: 11, scope: !5045)
!5047 = !DILocalVariable(name: "i", scope: !5048, file: !3, line: 1706, type: !235)
!5048 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 1705, column: 2)
!5049 = !DILocation(line: 1706, column: 11, scope: !5048)
!5050 = !DILocalVariable(name: "len", scope: !5048, file: !3, line: 1707, type: !235)
!5051 = !DILocation(line: 1707, column: 11, scope: !5048)
!5052 = !DILocation(line: 1709, column: 12, scope: !5048)
!5053 = !DILocation(line: 1711, column: 19, scope: !5048)
!5054 = !DILocation(line: 1711, column: 18, scope: !5048)
!5055 = !DILocation(line: 1711, column: 10, scope: !5048)
!5056 = !DILocation(line: 1711, column: 8, scope: !5048)
!5057 = !DILocation(line: 1713, column: 11, scope: !5058)
!5058 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 1713, column: 4)
!5059 = !DILocation(line: 1713, column: 9, scope: !5058)
!5060 = !DILocation(line: 1713, column: 16, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !5058, file: !3, line: 1713, column: 4)
!5062 = !DILocation(line: 1713, column: 18, scope: !5061)
!5063 = !DILocation(line: 1713, column: 4, scope: !5058)
!5064 = !DILocalVariable(name: "l", scope: !5065, file: !3, line: 1715, type: !235)
!5065 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1714, column: 6)
!5066 = !DILocation(line: 1715, column: 15, scope: !5065)
!5067 = !DILocation(line: 1715, column: 35, scope: !5065)
!5068 = !DILocation(line: 1715, column: 27, scope: !5065)
!5069 = !DILocation(line: 1715, column: 38, scope: !5065)
!5070 = !DILocation(line: 1715, column: 19, scope: !5065)
!5071 = !DILocation(line: 1717, column: 12, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1717, column: 12)
!5073 = !DILocation(line: 1717, column: 17, scope: !5072)
!5074 = !DILocation(line: 1717, column: 14, scope: !5072)
!5075 = !DILocation(line: 1718, column: 5, scope: !5072)
!5076 = !DILocation(line: 1718, column: 24, scope: !5072)
!5077 = !DILocation(line: 1718, column: 16, scope: !5072)
!5078 = !DILocation(line: 1718, column: 27, scope: !5072)
!5079 = !DILocation(line: 1718, column: 32, scope: !5072)
!5080 = !DILocation(line: 1718, column: 31, scope: !5072)
!5081 = !DILocation(line: 1718, column: 41, scope: !5072)
!5082 = !DILocation(line: 1718, column: 8, scope: !5072)
!5083 = !DILocation(line: 1718, column: 44, scope: !5072)
!5084 = !DILocation(line: 1717, column: 12, scope: !5065)
!5085 = !DILocation(line: 1720, column: 21, scope: !5086)
!5086 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 1719, column: 3)
!5087 = !DILocation(line: 1720, column: 5, scope: !5086)
!5088 = !DILocation(line: 1721, column: 20, scope: !5086)
!5089 = !DILocation(line: 1721, column: 31, scope: !5086)
!5090 = !DILocation(line: 1721, column: 23, scope: !5086)
!5091 = !DILocation(line: 1721, column: 34, scope: !5086)
!5092 = !DILocation(line: 1721, column: 5, scope: !5086)
!5093 = !DILocation(line: 1722, column: 21, scope: !5086)
!5094 = !DILocation(line: 1722, column: 5, scope: !5086)
!5095 = !DILocation(line: 1723, column: 13, scope: !5086)
!5096 = !DILocation(line: 1724, column: 19, scope: !5086)
!5097 = !DILocation(line: 1724, column: 7, scope: !5086)
!5098 = !DILocation(line: 1724, column: 16, scope: !5086)
!5099 = !DILocation(line: 1725, column: 5, scope: !5086)
!5100 = !DILocation(line: 1727, column: 6, scope: !5065)
!5101 = !DILocation(line: 1713, column: 42, scope: !5061)
!5102 = !DILocation(line: 1713, column: 4, scope: !5061)
!5103 = distinct !{!5103, !5063, !5104}
!5104 = !DILocation(line: 1727, column: 6, scope: !5058)
!5105 = !DILocation(line: 1729, column: 9, scope: !5106)
!5106 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 1729, column: 8)
!5107 = !DILocation(line: 1729, column: 8, scope: !5048)
!5108 = !DILocation(line: 1730, column: 6, scope: !5106)
!5109 = !DILocation(line: 1731, column: 2, scope: !5048)
!5110 = !DILocation(line: 1733, column: 16, scope: !5044)
!5111 = !DILocation(line: 1735, column: 47, scope: !5045)
!5112 = !DILocation(line: 1735, column: 53, scope: !5045)
!5113 = !DILocation(line: 1735, column: 62, scope: !5045)
!5114 = !DILocation(line: 1735, column: 65, scope: !5045)
!5115 = !DILocation(line: 1735, column: 17, scope: !5045)
!5116 = !DILocation(line: 1735, column: 15, scope: !5045)
!5117 = distinct !{!5117, !5030, !5118}
!5118 = !DILocation(line: 1736, column: 5, scope: !5012)
!5119 = !DILocation(line: 1738, column: 9, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1738, column: 7)
!5121 = !DILocation(line: 1738, column: 8, scope: !5120)
!5122 = !DILocation(line: 1738, column: 7, scope: !5120)
!5123 = !DILocation(line: 1738, column: 17, scope: !5120)
!5124 = !DILocation(line: 1738, column: 7, scope: !5012)
!5125 = !DILocation(line: 1739, column: 13, scope: !5120)
!5126 = !DILocation(line: 1739, column: 5, scope: !5120)
!5127 = !DILocation(line: 1742, column: 23, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 1741, column: 5)
!5129 = !DILocation(line: 1742, column: 7, scope: !5128)
!5130 = !DILocation(line: 1743, column: 9, scope: !5128)
!5131 = !DILocation(line: 1743, column: 17, scope: !5128)
!5132 = !DILocation(line: 1746, column: 10, scope: !5012)
!5133 = !DILocation(line: 1746, column: 3, scope: !5012)
!5134 = distinct !DISubprogram(name: "demangle_arm_hp_template", scope: !3, file: !3, line: 2261, type: !5135, scopeLine: 2263, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5135 = !DISubroutineType(types: !5136)
!5136 = !{null, !491, !492, !7, !60}
!5137 = !DILocalVariable(name: "work", arg: 1, scope: !5134, file: !3, line: 2261, type: !491)
!5138 = !DILocation(line: 2261, column: 46, scope: !5134)
!5139 = !DILocalVariable(name: "mangled", arg: 2, scope: !5134, file: !3, line: 2261, type: !492)
!5140 = !DILocation(line: 2261, column: 65, scope: !5134)
!5141 = !DILocalVariable(name: "n", arg: 3, scope: !5134, file: !3, line: 2262, type: !7)
!5142 = !DILocation(line: 2262, column: 31, scope: !5134)
!5143 = !DILocalVariable(name: "declp", arg: 4, scope: !5134, file: !3, line: 2262, type: !60)
!5144 = !DILocation(line: 2262, column: 42, scope: !5134)
!5145 = !DILocalVariable(name: "p", scope: !5134, file: !3, line: 2264, type: !76)
!5146 = !DILocation(line: 2264, column: 15, scope: !5134)
!5147 = !DILocalVariable(name: "args", scope: !5134, file: !3, line: 2265, type: !76)
!5148 = !DILocation(line: 2265, column: 15, scope: !5134)
!5149 = !DILocalVariable(name: "e", scope: !5134, file: !3, line: 2266, type: !76)
!5150 = !DILocation(line: 2266, column: 15, scope: !5134)
!5151 = !DILocation(line: 2266, column: 20, scope: !5134)
!5152 = !DILocation(line: 2266, column: 19, scope: !5134)
!5153 = !DILocation(line: 2266, column: 30, scope: !5134)
!5154 = !DILocation(line: 2266, column: 28, scope: !5134)
!5155 = !DILocalVariable(name: "arg", scope: !5134, file: !3, line: 2267, type: !61)
!5156 = !DILocation(line: 2267, column: 10, scope: !5134)
!5157 = !DILocation(line: 2271, column: 7, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5134, file: !3, line: 2271, column: 7)
!5159 = !DILocation(line: 2271, column: 21, scope: !5158)
!5160 = !DILocation(line: 2271, column: 27, scope: !5158)
!5161 = !DILocation(line: 2271, column: 26, scope: !5158)
!5162 = !DILocation(line: 2271, column: 36, scope: !5158)
!5163 = !DILocation(line: 2271, column: 25, scope: !5158)
!5164 = !DILocation(line: 2271, column: 39, scope: !5158)
!5165 = !DILocation(line: 2271, column: 7, scope: !5134)
!5166 = !DILocalVariable(name: "start_spec_args", scope: !5167, file: !3, line: 2273, type: !52)
!5167 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 2272, column: 5)
!5168 = !DILocation(line: 2273, column: 13, scope: !5167)
!5169 = !DILocalVariable(name: "hold_options", scope: !5167, file: !3, line: 2274, type: !7)
!5170 = !DILocation(line: 2274, column: 11, scope: !5167)
!5171 = !DILocation(line: 2278, column: 34, scope: !5167)
!5172 = !DILocation(line: 2278, column: 33, scope: !5167)
!5173 = !DILocation(line: 2278, column: 25, scope: !5167)
!5174 = !DILocation(line: 2278, column: 23, scope: !5167)
!5175 = !DILocation(line: 2279, column: 11, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 2279, column: 11)
!5177 = !DILocation(line: 2279, column: 27, scope: !5176)
!5178 = !DILocation(line: 2279, column: 31, scope: !5176)
!5179 = !DILocation(line: 2279, column: 50, scope: !5176)
!5180 = !DILocation(line: 2279, column: 49, scope: !5176)
!5181 = !DILocation(line: 2279, column: 47, scope: !5176)
!5182 = !DILocation(line: 2279, column: 60, scope: !5176)
!5183 = !DILocation(line: 2279, column: 58, scope: !5176)
!5184 = !DILocation(line: 2279, column: 11, scope: !5167)
!5185 = !DILocation(line: 2280, column: 25, scope: !5176)
!5186 = !DILocation(line: 2280, column: 33, scope: !5176)
!5187 = !DILocation(line: 2280, column: 32, scope: !5176)
!5188 = !DILocation(line: 2280, column: 42, scope: !5176)
!5189 = !DILocation(line: 2280, column: 61, scope: !5176)
!5190 = !DILocation(line: 2280, column: 60, scope: !5176)
!5191 = !DILocation(line: 2280, column: 58, scope: !5176)
!5192 = !DILocation(line: 2280, column: 9, scope: !5176)
!5193 = !DILocation(line: 2282, column: 25, scope: !5176)
!5194 = !DILocation(line: 2282, column: 33, scope: !5176)
!5195 = !DILocation(line: 2282, column: 32, scope: !5176)
!5196 = !DILocation(line: 2282, column: 42, scope: !5176)
!5197 = !DILocation(line: 2282, column: 9, scope: !5176)
!5198 = !DILocation(line: 2283, column: 21, scope: !5167)
!5199 = !DILocation(line: 2283, column: 23, scope: !5167)
!5200 = !DILocation(line: 2283, column: 9, scope: !5167)
!5201 = !DILocation(line: 2283, column: 18, scope: !5167)
!5202 = !DILocation(line: 2284, column: 7, scope: !5167)
!5203 = !DILocation(line: 2285, column: 11, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 2285, column: 11)
!5205 = !DILocation(line: 2285, column: 17, scope: !5204)
!5206 = !DILocation(line: 2285, column: 28, scope: !5204)
!5207 = !DILocation(line: 2285, column: 11, scope: !5167)
!5208 = !DILocation(line: 2286, column: 28, scope: !5204)
!5209 = !DILocation(line: 2286, column: 35, scope: !5204)
!5210 = !DILocation(line: 2286, column: 39, scope: !5204)
!5211 = !DILocation(line: 2286, column: 46, scope: !5204)
!5212 = !DILocation(line: 2286, column: 37, scope: !5204)
!5213 = !DILocation(line: 2286, column: 9, scope: !5204)
!5214 = !DILocation(line: 2286, column: 15, scope: !5204)
!5215 = !DILocation(line: 2286, column: 26, scope: !5204)
!5216 = !DILocation(line: 2290, column: 22, scope: !5167)
!5217 = !DILocation(line: 2290, column: 28, scope: !5167)
!5218 = !DILocation(line: 2290, column: 20, scope: !5167)
!5219 = !DILocation(line: 2291, column: 7, scope: !5167)
!5220 = !DILocation(line: 2291, column: 13, scope: !5167)
!5221 = !DILocation(line: 2291, column: 21, scope: !5167)
!5222 = !DILocation(line: 2293, column: 22, scope: !5167)
!5223 = !DILocation(line: 2293, column: 7, scope: !5167)
!5224 = !DILocation(line: 2294, column: 7, scope: !5167)
!5225 = !DILocation(line: 2296, column: 11, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 2295, column: 9)
!5227 = !DILocation(line: 2297, column: 21, scope: !5226)
!5228 = !DILocation(line: 2297, column: 20, scope: !5226)
!5229 = !DILocation(line: 2297, column: 19, scope: !5226)
!5230 = !DILocation(line: 2297, column: 11, scope: !5226)
!5231 = !DILocation(line: 2301, column: 19, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 2298, column: 13)
!5233 = !DILocation(line: 2301, column: 27, scope: !5232)
!5234 = !DILocation(line: 2302, column: 31, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 2302, column: 21)
!5236 = !DILocation(line: 2302, column: 37, scope: !5235)
!5237 = !DILocation(line: 2302, column: 22, scope: !5235)
!5238 = !DILocation(line: 2302, column: 21, scope: !5232)
!5239 = !DILocation(line: 2303, column: 19, scope: !5235)
!5240 = !DILocation(line: 2304, column: 17, scope: !5232)
!5241 = !DILocation(line: 2309, column: 53, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 2309, column: 21)
!5243 = !DILocation(line: 2309, column: 59, scope: !5242)
!5244 = !DILocation(line: 2309, column: 22, scope: !5242)
!5245 = !DILocation(line: 2309, column: 21, scope: !5232)
!5246 = !DILocation(line: 2310, column: 19, scope: !5242)
!5247 = !DILocation(line: 2311, column: 17, scope: !5232)
!5248 = !DILocation(line: 2315, column: 49, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 2315, column: 21)
!5250 = !DILocation(line: 2315, column: 55, scope: !5249)
!5251 = !DILocation(line: 2315, column: 22, scope: !5249)
!5252 = !DILocation(line: 2315, column: 21, scope: !5232)
!5253 = !DILocation(line: 2316, column: 19, scope: !5249)
!5254 = !DILocation(line: 2317, column: 17, scope: !5232)
!5255 = !DILocation(line: 2323, column: 17, scope: !5232)
!5256 = !DILocation(line: 2325, column: 27, scope: !5226)
!5257 = !DILocation(line: 2325, column: 11, scope: !5226)
!5258 = !DILocation(line: 2329, column: 18, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 2329, column: 15)
!5260 = !DILocation(line: 2329, column: 17, scope: !5259)
!5261 = !DILocation(line: 2329, column: 16, scope: !5259)
!5262 = !DILocation(line: 2329, column: 26, scope: !5259)
!5263 = !DILocation(line: 2329, column: 37, scope: !5259)
!5264 = !DILocation(line: 2329, column: 43, scope: !5259)
!5265 = !DILocation(line: 2329, column: 42, scope: !5259)
!5266 = !DILocation(line: 2329, column: 41, scope: !5259)
!5267 = !DILocation(line: 2329, column: 51, scope: !5259)
!5268 = !DILocation(line: 2329, column: 15, scope: !5226)
!5269 = !DILocation(line: 2330, column: 13, scope: !5259)
!5270 = !DILocation(line: 2332, column: 28, scope: !5259)
!5271 = !DILocation(line: 2332, column: 13, scope: !5259)
!5272 = distinct !{!5272, !5224, !5273}
!5273 = !DILocation(line: 2333, column: 9, scope: !5167)
!5274 = !DILabel(scope: !5167, name: "hpacc_template_args_done", file: !3, line: 2334)
!5275 = !DILocation(line: 2334, column: 5, scope: !5167)
!5276 = !DILocation(line: 2335, column: 22, scope: !5167)
!5277 = !DILocation(line: 2335, column: 7, scope: !5167)
!5278 = !DILocation(line: 2336, column: 7, scope: !5167)
!5279 = !DILocation(line: 2337, column: 13, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 2337, column: 11)
!5281 = !DILocation(line: 2337, column: 12, scope: !5280)
!5282 = !DILocation(line: 2337, column: 11, scope: !5280)
!5283 = !DILocation(line: 2337, column: 21, scope: !5280)
!5284 = !DILocation(line: 2337, column: 11, scope: !5167)
!5285 = !DILocation(line: 2338, column: 11, scope: !5280)
!5286 = !DILocation(line: 2338, column: 19, scope: !5280)
!5287 = !DILocation(line: 2338, column: 9, scope: !5280)
!5288 = !DILocation(line: 2339, column: 23, scope: !5167)
!5289 = !DILocation(line: 2339, column: 7, scope: !5167)
!5290 = !DILocation(line: 2339, column: 13, scope: !5167)
!5291 = !DILocation(line: 2339, column: 21, scope: !5167)
!5292 = !DILocation(line: 2340, column: 7, scope: !5167)
!5293 = !DILocation(line: 2343, column: 20, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 2343, column: 12)
!5295 = !DILocation(line: 2343, column: 27, scope: !5294)
!5296 = !DILocation(line: 2343, column: 26, scope: !5294)
!5297 = !DILocation(line: 2343, column: 36, scope: !5294)
!5298 = !DILocation(line: 2343, column: 12, scope: !5294)
!5299 = !DILocation(line: 2343, column: 12, scope: !5158)
!5300 = !DILocalVariable(name: "hold_options", scope: !5301, file: !3, line: 2345, type: !7)
!5301 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 2344, column: 5)
!5302 = !DILocation(line: 2345, column: 11, scope: !5301)
!5303 = !DILocalVariable(name: "type_str", scope: !5301, file: !3, line: 2346, type: !61)
!5304 = !DILocation(line: 2346, column: 14, scope: !5301)
!5305 = !DILocation(line: 2348, column: 7, scope: !5301)
!5306 = !DILocation(line: 2349, column: 23, scope: !5301)
!5307 = !DILocation(line: 2349, column: 31, scope: !5301)
!5308 = !DILocation(line: 2349, column: 30, scope: !5301)
!5309 = !DILocation(line: 2349, column: 40, scope: !5301)
!5310 = !DILocation(line: 2349, column: 45, scope: !5301)
!5311 = !DILocation(line: 2349, column: 44, scope: !5301)
!5312 = !DILocation(line: 2349, column: 42, scope: !5301)
!5313 = !DILocation(line: 2349, column: 7, scope: !5301)
!5314 = !DILocation(line: 2350, column: 11, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 2350, column: 11)
!5316 = !DILocation(line: 2350, column: 17, scope: !5315)
!5317 = !DILocation(line: 2350, column: 28, scope: !5315)
!5318 = !DILocation(line: 2350, column: 11, scope: !5301)
!5319 = !DILocation(line: 2351, column: 21, scope: !5315)
!5320 = !DILocation(line: 2351, column: 28, scope: !5315)
!5321 = !DILocation(line: 2351, column: 32, scope: !5315)
!5322 = !DILocation(line: 2351, column: 39, scope: !5315)
!5323 = !DILocation(line: 2351, column: 30, scope: !5315)
!5324 = !DILocation(line: 2351, column: 2, scope: !5315)
!5325 = !DILocation(line: 2351, column: 8, scope: !5315)
!5326 = !DILocation(line: 2351, column: 19, scope: !5315)
!5327 = !DILocation(line: 2355, column: 22, scope: !5301)
!5328 = !DILocation(line: 2355, column: 28, scope: !5301)
!5329 = !DILocation(line: 2355, column: 20, scope: !5301)
!5330 = !DILocation(line: 2356, column: 7, scope: !5301)
!5331 = !DILocation(line: 2356, column: 13, scope: !5301)
!5332 = !DILocation(line: 2356, column: 21, scope: !5301)
!5333 = !DILocation(line: 2358, column: 22, scope: !5301)
!5334 = !DILocation(line: 2358, column: 7, scope: !5301)
!5335 = !DILocation(line: 2360, column: 7, scope: !5301)
!5336 = !DILocation(line: 2360, column: 14, scope: !5301)
!5337 = !DILocation(line: 2360, column: 21, scope: !5301)
!5338 = !DILocation(line: 2360, column: 19, scope: !5301)
!5339 = !DILocation(line: 2361, column: 2, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 2360, column: 24)
!5341 = !DILocation(line: 2364, column: 11, scope: !5340)
!5342 = !DILocation(line: 2364, column: 10, scope: !5340)
!5343 = !DILocation(line: 2364, column: 2, scope: !5340)
!5344 = !DILocation(line: 2371, column: 17, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5340, file: !3, line: 2365, column: 4)
!5346 = !DILocation(line: 2372, column: 27, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2372, column: 17)
!5348 = !DILocation(line: 2372, column: 18, scope: !5347)
!5349 = !DILocation(line: 2372, column: 17, scope: !5345)
!5350 = !DILocation(line: 2373, column: 8, scope: !5347)
!5351 = !DILocation(line: 2374, column: 13, scope: !5345)
!5352 = !DILocation(line: 2375, column: 13, scope: !5345)
!5353 = !DILocation(line: 2376, column: 13, scope: !5345)
!5354 = !DILocation(line: 2377, column: 13, scope: !5345)
!5355 = !DILocation(line: 2378, column: 18, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2378, column: 17)
!5357 = !DILocation(line: 2378, column: 17, scope: !5356)
!5358 = !DILocation(line: 2378, column: 23, scope: !5356)
!5359 = !DILocation(line: 2378, column: 17, scope: !5345)
!5360 = !DILocation(line: 2379, column: 15, scope: !5356)
!5361 = !DILocation(line: 2380, column: 17, scope: !5345)
!5362 = !DILocation(line: 2382, column: 18, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2382, column: 17)
!5364 = !DILocation(line: 2382, column: 17, scope: !5345)
!5365 = !DILocation(line: 2383, column: 8, scope: !5363)
!5366 = !DILocation(line: 2384, column: 13, scope: !5345)
!5367 = !DILocation(line: 2388, column: 17, scope: !5345)
!5368 = !DILocation(line: 2389, column: 18, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2389, column: 17)
!5370 = !DILocation(line: 2389, column: 17, scope: !5345)
!5371 = !DILocation(line: 2390, column: 8, scope: !5369)
!5372 = !DILocation(line: 2391, column: 13, scope: !5345)
!5373 = !DILocalVariable(name: "old_args", scope: !5374, file: !3, line: 2395, type: !76)
!5374 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 2394, column: 13)
!5375 = !DILocation(line: 2395, column: 27, scope: !5374)
!5376 = !DILocation(line: 2395, column: 38, scope: !5374)
!5377 = !DILocation(line: 2396, column: 29, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 2396, column: 19)
!5379 = !DILocation(line: 2396, column: 20, scope: !5378)
!5380 = !DILocation(line: 2396, column: 19, scope: !5374)
!5381 = !DILocation(line: 2397, column: 17, scope: !5378)
!5382 = !DILocation(line: 2400, column: 19, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 2400, column: 19)
!5384 = !DILocation(line: 2400, column: 27, scope: !5383)
!5385 = !DILocation(line: 2400, column: 24, scope: !5383)
!5386 = !DILocation(line: 2400, column: 19, scope: !5374)
!5387 = !DILocation(line: 2402, column: 21, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 2401, column: 3)
!5389 = !DILocation(line: 2402, column: 5, scope: !5388)
!5390 = !DILocation(line: 2402, column: 11, scope: !5388)
!5391 = !DILocation(line: 2402, column: 19, scope: !5388)
!5392 = !DILocation(line: 2403, column: 5, scope: !5388)
!5393 = !DILocation(line: 2406, column: 4, scope: !5345)
!5394 = !DILocation(line: 2407, column: 18, scope: !5340)
!5395 = !DILocation(line: 2407, column: 2, scope: !5340)
!5396 = !DILocation(line: 2408, column: 17, scope: !5340)
!5397 = !DILocation(line: 2408, column: 2, scope: !5340)
!5398 = distinct !{!5398, !5335, !5399}
!5399 = !DILocation(line: 2409, column: 7, scope: !5301)
!5400 = !DILabel(scope: !5301, name: "cfront_template_args_done", file: !3, line: 2410)
!5401 = !DILocation(line: 2410, column: 5, scope: !5301)
!5402 = !DILocation(line: 2411, column: 7, scope: !5301)
!5403 = !DILocation(line: 2412, column: 11, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 2412, column: 11)
!5405 = !DILocation(line: 2412, column: 19, scope: !5404)
!5406 = !DILocation(line: 2412, column: 16, scope: !5404)
!5407 = !DILocation(line: 2412, column: 11, scope: !5301)
!5408 = !DILocation(line: 2413, column: 4, scope: !5404)
!5409 = !DILocation(line: 2413, column: 11, scope: !5404)
!5410 = !DILocation(line: 2413, column: 2, scope: !5404)
!5411 = !DILocation(line: 2414, column: 22, scope: !5301)
!5412 = !DILocation(line: 2414, column: 7, scope: !5301)
!5413 = !DILocation(line: 2415, column: 23, scope: !5301)
!5414 = !DILocation(line: 2415, column: 7, scope: !5301)
!5415 = !DILocation(line: 2415, column: 13, scope: !5301)
!5416 = !DILocation(line: 2415, column: 21, scope: !5301)
!5417 = !DILocation(line: 2416, column: 5, scope: !5301)
!5418 = !DILocation(line: 2417, column: 12, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 2417, column: 12)
!5420 = !DILocation(line: 2417, column: 13, scope: !5419)
!5421 = !DILocation(line: 2417, column: 17, scope: !5419)
!5422 = !DILocation(line: 2417, column: 30, scope: !5419)
!5423 = !DILocation(line: 2417, column: 29, scope: !5419)
!5424 = !DILocation(line: 2417, column: 20, scope: !5419)
!5425 = !DILocation(line: 2417, column: 54, scope: !5419)
!5426 = !DILocation(line: 2418, column: 5, scope: !5419)
!5427 = !DILocation(line: 2418, column: 10, scope: !5419)
!5428 = !DILocation(line: 2418, column: 9, scope: !5419)
!5429 = !DILocation(line: 2418, column: 8, scope: !5419)
!5430 = !DILocation(line: 2418, column: 22, scope: !5419)
!5431 = !DILocation(line: 2419, column: 5, scope: !5419)
!5432 = !DILocation(line: 2419, column: 10, scope: !5419)
!5433 = !DILocation(line: 2419, column: 9, scope: !5419)
!5434 = !DILocation(line: 2419, column: 8, scope: !5419)
!5435 = !DILocation(line: 2419, column: 27, scope: !5419)
!5436 = !DILocation(line: 2419, column: 26, scope: !5419)
!5437 = !DILocation(line: 2419, column: 25, scope: !5419)
!5438 = !DILocation(line: 2419, column: 22, scope: !5419)
!5439 = !DILocation(line: 2420, column: 5, scope: !5419)
!5440 = !DILocation(line: 2420, column: 33, scope: !5419)
!5441 = !DILocation(line: 2420, column: 32, scope: !5419)
!5442 = !DILocation(line: 2420, column: 31, scope: !5419)
!5443 = !DILocation(line: 2420, column: 8, scope: !5419)
!5444 = !DILocation(line: 2417, column: 12, scope: !5294)
!5445 = !DILocation(line: 2423, column: 22, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 2421, column: 5)
!5447 = !DILocation(line: 2423, column: 7, scope: !5446)
!5448 = !DILocation(line: 2424, column: 5, scope: !5446)
!5449 = !DILocation(line: 2427, column: 11, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 2427, column: 11)
!5451 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 2426, column: 5)
!5452 = !DILocation(line: 2427, column: 17, scope: !5450)
!5453 = !DILocation(line: 2427, column: 28, scope: !5450)
!5454 = !DILocation(line: 2427, column: 11, scope: !5451)
!5455 = !DILocation(line: 2428, column: 2, scope: !5450)
!5456 = !DILocation(line: 2428, column: 8, scope: !5450)
!5457 = !DILocation(line: 2428, column: 19, scope: !5450)
!5458 = !DILocation(line: 2429, column: 23, scope: !5451)
!5459 = !DILocation(line: 2429, column: 31, scope: !5451)
!5460 = !DILocation(line: 2429, column: 30, scope: !5451)
!5461 = !DILocation(line: 2429, column: 40, scope: !5451)
!5462 = !DILocation(line: 2429, column: 7, scope: !5451)
!5463 = !DILocation(line: 2431, column: 15, scope: !5134)
!5464 = !DILocation(line: 2431, column: 4, scope: !5134)
!5465 = !DILocation(line: 2431, column: 12, scope: !5134)
!5466 = !DILocation(line: 2432, column: 1, scope: !5134)
!5467 = distinct !DISubprogram(name: "arm_special", scope: !3, file: !3, line: 3103, type: !5468, scopeLine: 3104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5468 = !DISubroutineType(types: !5469)
!5469 = !{!7, !492, !60}
!5470 = !DILocalVariable(name: "mangled", arg: 1, scope: !5467, file: !3, line: 3103, type: !492)
!5471 = !DILocation(line: 3103, column: 27, scope: !5467)
!5472 = !DILocalVariable(name: "declp", arg: 2, scope: !5467, file: !3, line: 3103, type: !60)
!5473 = !DILocation(line: 3103, column: 44, scope: !5467)
!5474 = !DILocalVariable(name: "n", scope: !5467, file: !3, line: 3105, type: !7)
!5475 = !DILocation(line: 3105, column: 7, scope: !5467)
!5476 = !DILocalVariable(name: "success", scope: !5467, file: !3, line: 3106, type: !7)
!5477 = !DILocation(line: 3106, column: 7, scope: !5467)
!5478 = !DILocalVariable(name: "scan", scope: !5467, file: !3, line: 3107, type: !76)
!5479 = !DILocation(line: 3107, column: 15, scope: !5467)
!5480 = !DILocation(line: 3109, column: 17, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5467, file: !3, line: 3109, column: 7)
!5482 = !DILocation(line: 3109, column: 16, scope: !5481)
!5483 = !DILocation(line: 3109, column: 7, scope: !5481)
!5484 = !DILocation(line: 3109, column: 64, scope: !5481)
!5485 = !DILocation(line: 3109, column: 7, scope: !5467)
!5486 = !DILocation(line: 3115, column: 15, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 3110, column: 5)
!5488 = !DILocation(line: 3115, column: 14, scope: !5487)
!5489 = !DILocation(line: 3115, column: 23, scope: !5487)
!5490 = !DILocation(line: 3115, column: 12, scope: !5487)
!5491 = !DILocation(line: 3116, column: 7, scope: !5487)
!5492 = !DILocation(line: 3116, column: 15, scope: !5487)
!5493 = !DILocation(line: 3116, column: 14, scope: !5487)
!5494 = !DILocation(line: 3116, column: 20, scope: !5487)
!5495 = !DILocation(line: 3118, column: 15, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5487, file: !3, line: 3117, column: 9)
!5497 = !DILocation(line: 3118, column: 13, scope: !5496)
!5498 = !DILocation(line: 3119, column: 15, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5496, file: !3, line: 3119, column: 15)
!5500 = !DILocation(line: 3119, column: 17, scope: !5499)
!5501 = !DILocation(line: 3119, column: 15, scope: !5496)
!5502 = !DILocation(line: 3121, column: 8, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 3120, column: 6)
!5504 = !DILocation(line: 3123, column: 19, scope: !5496)
!5505 = !DILocation(line: 3123, column: 16, scope: !5496)
!5506 = !DILocation(line: 3124, column: 15, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5496, file: !3, line: 3124, column: 15)
!5508 = !DILocation(line: 3124, column: 23, scope: !5507)
!5509 = !DILocation(line: 3124, column: 30, scope: !5507)
!5510 = !DILocation(line: 3124, column: 33, scope: !5507)
!5511 = !DILocation(line: 3124, column: 41, scope: !5507)
!5512 = !DILocation(line: 3124, column: 15, scope: !5496)
!5513 = !DILocation(line: 3126, column: 13, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 3125, column: 6)
!5515 = !DILocation(line: 3127, column: 6, scope: !5514)
!5516 = distinct !{!5516, !5491, !5517}
!5517 = !DILocation(line: 3128, column: 9, scope: !5487)
!5518 = !DILocation(line: 3129, column: 9, scope: !5487)
!5519 = !DILocation(line: 3129, column: 18, scope: !5487)
!5520 = !DILocation(line: 3130, column: 7, scope: !5487)
!5521 = !DILocation(line: 3130, column: 16, scope: !5487)
!5522 = !DILocation(line: 3130, column: 15, scope: !5487)
!5523 = !DILocation(line: 3130, column: 14, scope: !5487)
!5524 = !DILocation(line: 3130, column: 24, scope: !5487)
!5525 = !DILocation(line: 3132, column: 23, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5487, file: !3, line: 3131, column: 2)
!5527 = !DILocation(line: 3132, column: 8, scope: !5526)
!5528 = !DILocation(line: 3132, column: 6, scope: !5526)
!5529 = !DILocation(line: 3133, column: 15, scope: !5530)
!5530 = distinct !DILexicalBlock(scope: !5526, file: !3, line: 3133, column: 15)
!5531 = !DILocation(line: 3133, column: 17, scope: !5530)
!5532 = !DILocation(line: 3134, column: 8, scope: !5530)
!5533 = !DILocation(line: 3134, column: 11, scope: !5530)
!5534 = !DILocation(line: 3134, column: 31, scope: !5530)
!5535 = !DILocation(line: 3134, column: 30, scope: !5530)
!5536 = !DILocation(line: 3134, column: 22, scope: !5530)
!5537 = !DILocation(line: 3134, column: 13, scope: !5530)
!5538 = !DILocation(line: 3133, column: 15, scope: !5526)
!5539 = !DILocation(line: 3135, column: 6, scope: !5530)
!5540 = !DILocation(line: 3136, column: 21, scope: !5526)
!5541 = !DILocation(line: 3136, column: 29, scope: !5526)
!5542 = !DILocation(line: 3136, column: 28, scope: !5526)
!5543 = !DILocation(line: 3136, column: 38, scope: !5526)
!5544 = !DILocation(line: 3136, column: 4, scope: !5526)
!5545 = !DILocation(line: 3137, column: 18, scope: !5526)
!5546 = !DILocation(line: 3137, column: 6, scope: !5526)
!5547 = !DILocation(line: 3137, column: 15, scope: !5526)
!5548 = !DILocation(line: 3138, column: 10, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5526, file: !3, line: 3138, column: 8)
!5550 = !DILocation(line: 3138, column: 9, scope: !5549)
!5551 = !DILocation(line: 3138, column: 8, scope: !5549)
!5552 = !DILocation(line: 3138, column: 22, scope: !5549)
!5553 = !DILocation(line: 3138, column: 29, scope: !5549)
!5554 = !DILocation(line: 3138, column: 34, scope: !5549)
!5555 = !DILocation(line: 3138, column: 33, scope: !5549)
!5556 = !DILocation(line: 3138, column: 32, scope: !5549)
!5557 = !DILocation(line: 3138, column: 46, scope: !5549)
!5558 = !DILocation(line: 3138, column: 8, scope: !5526)
!5559 = !DILocation(line: 3140, column: 24, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 3139, column: 6)
!5561 = !DILocation(line: 3140, column: 8, scope: !5560)
!5562 = !DILocation(line: 3141, column: 10, scope: !5560)
!5563 = !DILocation(line: 3141, column: 19, scope: !5560)
!5564 = !DILocation(line: 3142, column: 6, scope: !5560)
!5565 = distinct !{!5565, !5520, !5566}
!5566 = !DILocation(line: 3143, column: 2, scope: !5487)
!5567 = !DILocation(line: 3144, column: 22, scope: !5487)
!5568 = !DILocation(line: 3144, column: 7, scope: !5487)
!5569 = !DILocation(line: 3145, column: 5, scope: !5487)
!5570 = !DILocation(line: 3148, column: 15, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 3147, column: 5)
!5572 = !DILocation(line: 3150, column: 11, scope: !5467)
!5573 = !DILocation(line: 3150, column: 3, scope: !5467)
!5574 = !DILocation(line: 3151, column: 1, scope: !5467)
!5575 = distinct !DISubprogram(name: "iterate_demangle_function", scope: !3, file: !3, line: 2545, type: !5576, scopeLine: 2547, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5576 = !DISubroutineType(types: !5577)
!5577 = !{!7, !491, !492, !60, !76}
!5578 = !DILocalVariable(name: "work", arg: 1, scope: !5575, file: !3, line: 2545, type: !491)
!5579 = !DILocation(line: 2545, column: 47, scope: !5575)
!5580 = !DILocalVariable(name: "mangled", arg: 2, scope: !5575, file: !3, line: 2545, type: !492)
!5581 = !DILocation(line: 2545, column: 66, scope: !5575)
!5582 = !DILocalVariable(name: "declp", arg: 3, scope: !5575, file: !3, line: 2546, type: !60)
!5583 = !DILocation(line: 2546, column: 36, scope: !5575)
!5584 = !DILocalVariable(name: "scan", arg: 4, scope: !5575, file: !3, line: 2546, type: !76)
!5585 = !DILocation(line: 2546, column: 55, scope: !5575)
!5586 = !DILocalVariable(name: "mangle_init", scope: !5575, file: !3, line: 2548, type: !76)
!5587 = !DILocation(line: 2548, column: 15, scope: !5575)
!5588 = !DILocation(line: 2548, column: 30, scope: !5575)
!5589 = !DILocation(line: 2548, column: 29, scope: !5575)
!5590 = !DILocalVariable(name: "success", scope: !5575, file: !3, line: 2549, type: !7)
!5591 = !DILocation(line: 2549, column: 7, scope: !5575)
!5592 = !DILocalVariable(name: "decl_init", scope: !5575, file: !3, line: 2550, type: !61)
!5593 = !DILocation(line: 2550, column: 10, scope: !5575)
!5594 = !DILocalVariable(name: "work_init", scope: !5575, file: !3, line: 2551, type: !145)
!5595 = !DILocation(line: 2551, column: 21, scope: !5575)
!5596 = !DILocation(line: 2553, column: 9, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2553, column: 7)
!5598 = !DILocation(line: 2553, column: 14, scope: !5597)
!5599 = !DILocation(line: 2553, column: 7, scope: !5597)
!5600 = !DILocation(line: 2553, column: 19, scope: !5597)
!5601 = !DILocation(line: 2553, column: 7, scope: !5575)
!5602 = !DILocation(line: 2554, column: 5, scope: !5597)
!5603 = !DILocation(line: 2558, column: 7, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2558, column: 7)
!5605 = !DILocation(line: 2558, column: 22, scope: !5604)
!5606 = !DILocation(line: 2558, column: 25, scope: !5604)
!5607 = !DILocation(line: 2558, column: 42, scope: !5604)
!5608 = !DILocation(line: 2558, column: 45, scope: !5604)
!5609 = !DILocation(line: 2558, column: 59, scope: !5604)
!5610 = !DILocation(line: 2558, column: 62, scope: !5604)
!5611 = !DILocation(line: 2559, column: 7, scope: !5604)
!5612 = !DILocation(line: 2559, column: 18, scope: !5604)
!5613 = !DILocation(line: 2559, column: 23, scope: !5604)
!5614 = !DILocation(line: 2559, column: 10, scope: !5604)
!5615 = !DILocation(line: 2559, column: 34, scope: !5604)
!5616 = !DILocation(line: 2558, column: 7, scope: !5575)
!5617 = !DILocation(line: 2560, column: 36, scope: !5604)
!5618 = !DILocation(line: 2560, column: 42, scope: !5604)
!5619 = !DILocation(line: 2560, column: 51, scope: !5604)
!5620 = !DILocation(line: 2560, column: 58, scope: !5604)
!5621 = !DILocation(line: 2560, column: 12, scope: !5604)
!5622 = !DILocation(line: 2560, column: 5, scope: !5604)
!5623 = !DILocation(line: 2564, column: 3, scope: !5575)
!5624 = !DILocation(line: 2565, column: 31, scope: !5575)
!5625 = !DILocation(line: 2565, column: 3, scope: !5575)
!5626 = !DILocation(line: 2566, column: 3, scope: !5575)
!5627 = !DILocation(line: 2567, column: 40, scope: !5575)
!5628 = !DILocation(line: 2567, column: 3, scope: !5575)
!5629 = !DILocation(line: 2575, column: 3, scope: !5575)
!5630 = !DILocation(line: 2575, column: 10, scope: !5575)
!5631 = !DILocation(line: 2577, column: 35, scope: !5632)
!5632 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 2577, column: 11)
!5633 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 2576, column: 5)
!5634 = !DILocation(line: 2577, column: 41, scope: !5632)
!5635 = !DILocation(line: 2577, column: 50, scope: !5632)
!5636 = !DILocation(line: 2577, column: 57, scope: !5632)
!5637 = !DILocation(line: 2577, column: 11, scope: !5632)
!5638 = !DILocation(line: 2577, column: 11, scope: !5633)
!5639 = !DILocation(line: 2579, column: 34, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 2578, column: 2)
!5641 = !DILocation(line: 2579, column: 40, scope: !5640)
!5642 = !DILocation(line: 2579, column: 49, scope: !5640)
!5643 = !DILocation(line: 2579, column: 14, scope: !5640)
!5644 = !DILocation(line: 2579, column: 12, scope: !5640)
!5645 = !DILocation(line: 2580, column: 8, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 2580, column: 8)
!5647 = !DILocation(line: 2580, column: 8, scope: !5640)
!5648 = !DILocation(line: 2581, column: 6, scope: !5646)
!5649 = !DILocation(line: 2582, column: 2, scope: !5640)
!5650 = !DILocation(line: 2585, column: 18, scope: !5633)
!5651 = !DILocation(line: 2585, column: 8, scope: !5633)
!5652 = !DILocation(line: 2585, column: 16, scope: !5633)
!5653 = !DILocation(line: 2586, column: 21, scope: !5633)
!5654 = !DILocation(line: 2586, column: 7, scope: !5633)
!5655 = !DILocation(line: 2587, column: 23, scope: !5633)
!5656 = !DILocation(line: 2587, column: 7, scope: !5633)
!5657 = !DILocation(line: 2588, column: 32, scope: !5633)
!5658 = !DILocation(line: 2588, column: 7, scope: !5633)
!5659 = !DILocation(line: 2591, column: 12, scope: !5633)
!5660 = !DILocation(line: 2594, column: 7, scope: !5633)
!5661 = !DILocation(line: 2594, column: 15, scope: !5633)
!5662 = !DILocation(line: 2594, column: 14, scope: !5633)
!5663 = !DILocation(line: 2594, column: 20, scope: !5633)
!5664 = !DILocation(line: 2594, column: 24, scope: !5633)
!5665 = !DILocation(line: 2594, column: 32, scope: !5633)
!5666 = !DILocation(line: 2594, column: 39, scope: !5633)
!5667 = !DILocation(line: 2594, column: 42, scope: !5633)
!5668 = !DILocation(line: 2594, column: 50, scope: !5633)
!5669 = !DILocation(line: 0, scope: !5633)
!5670 = !DILocation(line: 2595, column: 6, scope: !5633)
!5671 = distinct !{!5671, !5660, !5670}
!5672 = !DILocation(line: 2598, column: 7, scope: !5633)
!5673 = !DILocation(line: 2598, column: 15, scope: !5633)
!5674 = !DILocation(line: 2598, column: 14, scope: !5633)
!5675 = !DILocation(line: 2598, column: 20, scope: !5633)
!5676 = !DILocation(line: 2598, column: 24, scope: !5633)
!5677 = !DILocation(line: 2598, column: 23, scope: !5633)
!5678 = !DILocation(line: 2598, column: 29, scope: !5633)
!5679 = !DILocation(line: 2599, column: 6, scope: !5633)
!5680 = distinct !{!5680, !5672, !5679}
!5681 = !DILocation(line: 2600, column: 12, scope: !5633)
!5682 = distinct !{!5682, !5629, !5683}
!5683 = !DILocation(line: 2601, column: 5, scope: !5575)
!5684 = !DILocation(line: 2604, column: 3, scope: !5575)
!5685 = !DILocation(line: 2605, column: 3, scope: !5575)
!5686 = !DILocation(line: 2607, column: 10, scope: !5575)
!5687 = !DILocation(line: 2607, column: 3, scope: !5575)
!5688 = !DILocation(line: 2608, column: 1, scope: !5575)
!5689 = distinct !DISubprogram(name: "do_hpacc_template_const_value", scope: !3, file: !3, line: 3954, type: !489, scopeLine: 3956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5690 = !DILocalVariable(name: "work", arg: 1, scope: !5689, file: !3, line: 3954, type: !491)
!5691 = !DILocation(line: 3954, column: 51, scope: !5689)
!5692 = !DILocalVariable(name: "mangled", arg: 2, scope: !5689, file: !3, line: 3955, type: !492)
!5693 = !DILocation(line: 3955, column: 45, scope: !5689)
!5694 = !DILocalVariable(name: "result", arg: 3, scope: !5689, file: !3, line: 3955, type: !60)
!5695 = !DILocation(line: 3955, column: 62, scope: !5689)
!5696 = !DILocalVariable(name: "unsigned_const", scope: !5689, file: !3, line: 3957, type: !7)
!5697 = !DILocation(line: 3957, column: 7, scope: !5689)
!5698 = !DILocation(line: 3959, column: 9, scope: !5699)
!5699 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 3959, column: 7)
!5700 = !DILocation(line: 3959, column: 8, scope: !5699)
!5701 = !DILocation(line: 3959, column: 7, scope: !5699)
!5702 = !DILocation(line: 3959, column: 17, scope: !5699)
!5703 = !DILocation(line: 3959, column: 24, scope: !5699)
!5704 = !DILocation(line: 3959, column: 29, scope: !5699)
!5705 = !DILocation(line: 3959, column: 28, scope: !5699)
!5706 = !DILocation(line: 3959, column: 27, scope: !5699)
!5707 = !DILocation(line: 3959, column: 37, scope: !5699)
!5708 = !DILocation(line: 3959, column: 7, scope: !5689)
!5709 = !DILocation(line: 3960, column: 5, scope: !5699)
!5710 = !DILocation(line: 3962, column: 23, scope: !5689)
!5711 = !DILocation(line: 3962, column: 22, scope: !5689)
!5712 = !DILocation(line: 3962, column: 21, scope: !5689)
!5713 = !DILocation(line: 3962, column: 31, scope: !5689)
!5714 = !DILocation(line: 3962, column: 18, scope: !5689)
!5715 = !DILocation(line: 3964, column: 5, scope: !5689)
!5716 = !DILocation(line: 3964, column: 13, scope: !5689)
!5717 = !DILocation(line: 3966, column: 13, scope: !5689)
!5718 = !DILocation(line: 3966, column: 12, scope: !5689)
!5719 = !DILocation(line: 3966, column: 11, scope: !5689)
!5720 = !DILocation(line: 3966, column: 3, scope: !5689)
!5721 = !DILocation(line: 3969, column: 24, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 3967, column: 5)
!5723 = !DILocation(line: 3969, column: 9, scope: !5722)
!5724 = !DILocation(line: 3972, column: 11, scope: !5722)
!5725 = !DILocation(line: 3972, column: 19, scope: !5722)
!5726 = !DILocation(line: 3973, column: 9, scope: !5722)
!5727 = !DILocation(line: 3976, column: 24, scope: !5722)
!5728 = !DILocation(line: 3976, column: 9, scope: !5722)
!5729 = !DILocation(line: 3977, column: 11, scope: !5722)
!5730 = !DILocation(line: 3977, column: 19, scope: !5722)
!5731 = !DILocation(line: 3978, column: 9, scope: !5722)
!5732 = !DILocation(line: 3980, column: 9, scope: !5722)
!5733 = !DILocation(line: 3984, column: 9, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 3984, column: 7)
!5735 = !DILocation(line: 3984, column: 7, scope: !5689)
!5736 = !DILocation(line: 3985, column: 5, scope: !5734)
!5737 = !DILocation(line: 3989, column: 3, scope: !5689)
!5738 = !DILocation(line: 3989, column: 10, scope: !5689)
!5739 = !DILocation(line: 3991, column: 23, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 3990, column: 5)
!5741 = !DILocation(line: 3991, column: 22, scope: !5740)
!5742 = !DILocation(line: 3991, column: 21, scope: !5740)
!5743 = !DILocation(line: 3991, column: 19, scope: !5740)
!5744 = !DILocation(line: 3992, column: 22, scope: !5740)
!5745 = !DILocation(line: 3992, column: 7, scope: !5740)
!5746 = !DILocation(line: 3993, column: 9, scope: !5740)
!5747 = !DILocation(line: 3993, column: 17, scope: !5740)
!5748 = distinct !{!5748, !5737, !5749}
!5749 = !DILocation(line: 3994, column: 5, scope: !5689)
!5750 = !DILocation(line: 3996, column: 7, scope: !5751)
!5751 = distinct !DILexicalBlock(scope: !5689, file: !3, line: 3996, column: 7)
!5752 = !DILocation(line: 3996, column: 7, scope: !5689)
!5753 = !DILocation(line: 3997, column: 20, scope: !5751)
!5754 = !DILocation(line: 3997, column: 5, scope: !5751)
!5755 = !DILocation(line: 4002, column: 3, scope: !5689)
!5756 = !DILocation(line: 4003, column: 1, scope: !5689)
!5757 = distinct !DISubprogram(name: "do_hpacc_template_literal", scope: !3, file: !3, line: 4009, type: !489, scopeLine: 4011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5758 = !DILocalVariable(name: "work", arg: 1, scope: !5757, file: !3, line: 4009, type: !491)
!5759 = !DILocation(line: 4009, column: 47, scope: !5757)
!5760 = !DILocalVariable(name: "mangled", arg: 2, scope: !5757, file: !3, line: 4009, type: !492)
!5761 = !DILocation(line: 4009, column: 66, scope: !5757)
!5762 = !DILocalVariable(name: "result", arg: 3, scope: !5757, file: !3, line: 4010, type: !60)
!5763 = !DILocation(line: 4010, column: 36, scope: !5757)
!5764 = !DILocalVariable(name: "literal_len", scope: !5757, file: !3, line: 4012, type: !7)
!5765 = !DILocation(line: 4012, column: 7, scope: !5757)
!5766 = !DILocalVariable(name: "recurse", scope: !5757, file: !3, line: 4013, type: !52)
!5767 = !DILocation(line: 4013, column: 10, scope: !5757)
!5768 = !DILocalVariable(name: "recurse_dem", scope: !5757, file: !3, line: 4014, type: !52)
!5769 = !DILocation(line: 4014, column: 10, scope: !5757)
!5770 = !DILocation(line: 4016, column: 9, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 4016, column: 7)
!5772 = !DILocation(line: 4016, column: 8, scope: !5771)
!5773 = !DILocation(line: 4016, column: 7, scope: !5771)
!5774 = !DILocation(line: 4016, column: 17, scope: !5771)
!5775 = !DILocation(line: 4016, column: 7, scope: !5757)
!5776 = !DILocation(line: 4017, column: 5, scope: !5771)
!5777 = !DILocation(line: 4019, column: 5, scope: !5757)
!5778 = !DILocation(line: 4019, column: 13, scope: !5757)
!5779 = !DILocation(line: 4021, column: 32, scope: !5757)
!5780 = !DILocation(line: 4021, column: 17, scope: !5757)
!5781 = !DILocation(line: 4021, column: 15, scope: !5757)
!5782 = !DILocation(line: 4023, column: 7, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 4023, column: 7)
!5784 = !DILocation(line: 4023, column: 19, scope: !5783)
!5785 = !DILocation(line: 4023, column: 7, scope: !5757)
!5786 = !DILocation(line: 4024, column: 5, scope: !5783)
!5787 = !DILocation(line: 4028, column: 18, scope: !5757)
!5788 = !DILocation(line: 4028, column: 3, scope: !5757)
!5789 = !DILocation(line: 4031, column: 13, scope: !5757)
!5790 = !DILocation(line: 4031, column: 11, scope: !5757)
!5791 = !DILocation(line: 4032, column: 11, scope: !5757)
!5792 = !DILocation(line: 4032, column: 21, scope: !5757)
!5793 = !DILocation(line: 4032, column: 20, scope: !5757)
!5794 = !DILocation(line: 4032, column: 30, scope: !5757)
!5795 = !DILocation(line: 4032, column: 3, scope: !5757)
!5796 = !DILocation(line: 4033, column: 3, scope: !5757)
!5797 = !DILocation(line: 4033, column: 11, scope: !5757)
!5798 = !DILocation(line: 4033, column: 24, scope: !5757)
!5799 = !DILocation(line: 4035, column: 33, scope: !5757)
!5800 = !DILocation(line: 4035, column: 42, scope: !5757)
!5801 = !DILocation(line: 4035, column: 48, scope: !5757)
!5802 = !DILocation(line: 4035, column: 17, scope: !5757)
!5803 = !DILocation(line: 4035, column: 15, scope: !5757)
!5804 = !DILocation(line: 4037, column: 7, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 4037, column: 7)
!5806 = !DILocation(line: 4037, column: 7, scope: !5757)
!5807 = !DILocation(line: 4039, column: 22, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 4038, column: 5)
!5809 = !DILocation(line: 4039, column: 30, scope: !5808)
!5810 = !DILocation(line: 4039, column: 7, scope: !5808)
!5811 = !DILocation(line: 4040, column: 13, scope: !5808)
!5812 = !DILocation(line: 4040, column: 7, scope: !5808)
!5813 = !DILocation(line: 4041, column: 5, scope: !5808)
!5814 = !DILocation(line: 4044, column: 23, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 4043, column: 5)
!5816 = !DILocation(line: 4044, column: 32, scope: !5815)
!5817 = !DILocation(line: 4044, column: 31, scope: !5815)
!5818 = !DILocation(line: 4044, column: 41, scope: !5815)
!5819 = !DILocation(line: 4044, column: 7, scope: !5815)
!5820 = !DILocation(line: 4046, column: 17, scope: !5757)
!5821 = !DILocation(line: 4046, column: 5, scope: !5757)
!5822 = !DILocation(line: 4046, column: 14, scope: !5757)
!5823 = !DILocation(line: 4047, column: 9, scope: !5757)
!5824 = !DILocation(line: 4047, column: 3, scope: !5757)
!5825 = !DILocation(line: 4049, column: 3, scope: !5757)
!5826 = !DILocation(line: 4050, column: 1, scope: !5757)
!5827 = distinct !DISubprogram(name: "arm_pt", scope: !3, file: !3, line: 2207, type: !5828, scopeLine: 2209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5828 = !DISubroutineType(types: !5829)
!5829 = !{!7, !491, !76, !7, !492, !492}
!5830 = !DILocalVariable(name: "work", arg: 1, scope: !5827, file: !3, line: 2207, type: !491)
!5831 = !DILocation(line: 2207, column: 28, scope: !5827)
!5832 = !DILocalVariable(name: "mangled", arg: 2, scope: !5827, file: !3, line: 2207, type: !76)
!5833 = !DILocation(line: 2207, column: 46, scope: !5827)
!5834 = !DILocalVariable(name: "n", arg: 3, scope: !5827, file: !3, line: 2208, type: !7)
!5835 = !DILocation(line: 2208, column: 13, scope: !5827)
!5836 = !DILocalVariable(name: "anchor", arg: 4, scope: !5827, file: !3, line: 2208, type: !492)
!5837 = !DILocation(line: 2208, column: 29, scope: !5827)
!5838 = !DILocalVariable(name: "args", arg: 5, scope: !5827, file: !3, line: 2208, type: !492)
!5839 = !DILocation(line: 2208, column: 50, scope: !5827)
!5840 = !DILocation(line: 2212, column: 8, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5827, file: !3, line: 2212, column: 7)
!5842 = !DILocation(line: 2212, column: 23, scope: !5841)
!5843 = !DILocation(line: 2212, column: 26, scope: !5841)
!5844 = !DILocation(line: 2212, column: 41, scope: !5841)
!5845 = !DILocation(line: 2212, column: 63, scope: !5841)
!5846 = !DILocation(line: 2212, column: 55, scope: !5841)
!5847 = !DILocation(line: 2212, column: 46, scope: !5841)
!5848 = !DILocation(line: 2212, column: 53, scope: !5841)
!5849 = !DILocation(line: 2212, column: 7, scope: !5827)
!5850 = !DILocalVariable(name: "len", scope: !5851, file: !3, line: 2214, type: !7)
!5851 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 2213, column: 5)
!5852 = !DILocation(line: 2214, column: 11, scope: !5851)
!5853 = !DILocation(line: 2215, column: 16, scope: !5851)
!5854 = !DILocation(line: 2215, column: 15, scope: !5851)
!5855 = !DILocation(line: 2215, column: 23, scope: !5851)
!5856 = !DILocation(line: 2215, column: 8, scope: !5851)
!5857 = !DILocation(line: 2215, column: 13, scope: !5851)
!5858 = !DILocation(line: 2216, column: 28, scope: !5851)
!5859 = !DILocation(line: 2216, column: 13, scope: !5851)
!5860 = !DILocation(line: 2216, column: 11, scope: !5851)
!5861 = !DILocation(line: 2217, column: 11, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 2217, column: 11)
!5863 = !DILocation(line: 2217, column: 15, scope: !5862)
!5864 = !DILocation(line: 2217, column: 11, scope: !5851)
!5865 = !DILocation(line: 2218, column: 2, scope: !5862)
!5866 = !DILocation(line: 2219, column: 12, scope: !5867)
!5867 = distinct !DILexicalBlock(scope: !5851, file: !3, line: 2219, column: 11)
!5868 = !DILocation(line: 2219, column: 11, scope: !5867)
!5869 = !DILocation(line: 2219, column: 19, scope: !5867)
!5870 = !DILocation(line: 2219, column: 17, scope: !5867)
!5871 = !DILocation(line: 2219, column: 26, scope: !5867)
!5872 = !DILocation(line: 2219, column: 36, scope: !5867)
!5873 = !DILocation(line: 2219, column: 34, scope: !5867)
!5874 = !DILocation(line: 2219, column: 23, scope: !5867)
!5875 = !DILocation(line: 2219, column: 38, scope: !5867)
!5876 = !DILocation(line: 2219, column: 43, scope: !5867)
!5877 = !DILocation(line: 2219, column: 42, scope: !5867)
!5878 = !DILocation(line: 2219, column: 41, scope: !5867)
!5879 = !DILocation(line: 2219, column: 48, scope: !5867)
!5880 = !DILocation(line: 2219, column: 11, scope: !5851)
!5881 = !DILocation(line: 2221, column: 7, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5867, file: !3, line: 2220, column: 2)
!5883 = !DILocation(line: 2221, column: 4, scope: !5882)
!5884 = !DILocation(line: 2222, column: 4, scope: !5882)
!5885 = !DILocation(line: 2224, column: 5, scope: !5851)
!5886 = !DILocation(line: 2225, column: 7, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5827, file: !3, line: 2225, column: 7)
!5888 = !DILocation(line: 2225, column: 23, scope: !5887)
!5889 = !DILocation(line: 2225, column: 26, scope: !5887)
!5890 = !DILocation(line: 2225, column: 7, scope: !5827)
!5891 = !DILocation(line: 2227, column: 30, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 2227, column: 11)
!5893 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 2226, column: 5)
!5894 = !DILocation(line: 2227, column: 22, scope: !5892)
!5895 = !DILocation(line: 2227, column: 13, scope: !5892)
!5896 = !DILocation(line: 2227, column: 20, scope: !5892)
!5897 = !DILocation(line: 2228, column: 11, scope: !5892)
!5898 = !DILocation(line: 2228, column: 33, scope: !5892)
!5899 = !DILocation(line: 2228, column: 25, scope: !5892)
!5900 = !DILocation(line: 2228, column: 16, scope: !5892)
!5901 = !DILocation(line: 2228, column: 23, scope: !5892)
!5902 = !DILocation(line: 2229, column: 11, scope: !5892)
!5903 = !DILocation(line: 2229, column: 33, scope: !5892)
!5904 = !DILocation(line: 2229, column: 25, scope: !5892)
!5905 = !DILocation(line: 2229, column: 16, scope: !5892)
!5906 = !DILocation(line: 2229, column: 23, scope: !5892)
!5907 = !DILocation(line: 2227, column: 11, scope: !5893)
!5908 = !DILocalVariable(name: "len", scope: !5909, file: !3, line: 2231, type: !7)
!5909 = distinct !DILexicalBlock(scope: !5892, file: !3, line: 2230, column: 9)
!5910 = !DILocation(line: 2231, column: 15, scope: !5909)
!5911 = !DILocation(line: 2232, column: 20, scope: !5909)
!5912 = !DILocation(line: 2232, column: 19, scope: !5909)
!5913 = !DILocation(line: 2232, column: 27, scope: !5909)
!5914 = !DILocation(line: 2232, column: 12, scope: !5909)
!5915 = !DILocation(line: 2232, column: 17, scope: !5909)
!5916 = !DILocation(line: 2233, column: 32, scope: !5909)
!5917 = !DILocation(line: 2233, column: 17, scope: !5909)
!5918 = !DILocation(line: 2233, column: 15, scope: !5909)
!5919 = !DILocation(line: 2234, column: 8, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 2234, column: 8)
!5921 = !DILocation(line: 2234, column: 12, scope: !5920)
!5922 = !DILocation(line: 2234, column: 8, scope: !5909)
!5923 = !DILocation(line: 2235, column: 6, scope: !5920)
!5924 = !DILocation(line: 2236, column: 16, scope: !5925)
!5925 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 2236, column: 15)
!5926 = !DILocation(line: 2236, column: 15, scope: !5925)
!5927 = !DILocation(line: 2236, column: 23, scope: !5925)
!5928 = !DILocation(line: 2236, column: 21, scope: !5925)
!5929 = !DILocation(line: 2236, column: 30, scope: !5925)
!5930 = !DILocation(line: 2236, column: 40, scope: !5925)
!5931 = !DILocation(line: 2236, column: 38, scope: !5925)
!5932 = !DILocation(line: 2236, column: 27, scope: !5925)
!5933 = !DILocation(line: 2236, column: 42, scope: !5925)
!5934 = !DILocation(line: 2236, column: 47, scope: !5925)
!5935 = !DILocation(line: 2236, column: 46, scope: !5925)
!5936 = !DILocation(line: 2236, column: 45, scope: !5925)
!5937 = !DILocation(line: 2236, column: 52, scope: !5925)
!5938 = !DILocation(line: 2236, column: 15, scope: !5909)
!5939 = !DILocation(line: 2238, column: 18, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5925, file: !3, line: 2237, column: 13)
!5941 = !DILocation(line: 2238, column: 15, scope: !5940)
!5942 = !DILocation(line: 2239, column: 15, scope: !5940)
!5943 = !DILocation(line: 2241, column: 9, scope: !5909)
!5944 = !DILocation(line: 2242, column: 35, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5892, file: !3, line: 2242, column: 16)
!5946 = !DILocation(line: 2242, column: 27, scope: !5945)
!5947 = !DILocation(line: 2242, column: 18, scope: !5945)
!5948 = !DILocation(line: 2242, column: 25, scope: !5945)
!5949 = !DILocation(line: 2242, column: 16, scope: !5892)
!5950 = !DILocalVariable(name: "len", scope: !5951, file: !3, line: 2244, type: !7)
!5951 = distinct !DILexicalBlock(scope: !5945, file: !3, line: 2243, column: 9)
!5952 = !DILocation(line: 2244, column: 9, scope: !5951)
!5953 = !DILocation(line: 2245, column: 14, scope: !5951)
!5954 = !DILocation(line: 2245, column: 13, scope: !5951)
!5955 = !DILocation(line: 2245, column: 21, scope: !5951)
!5956 = !DILocation(line: 2245, column: 6, scope: !5951)
!5957 = !DILocation(line: 2245, column: 11, scope: !5951)
!5958 = !DILocation(line: 2246, column: 26, scope: !5951)
!5959 = !DILocation(line: 2246, column: 11, scope: !5951)
!5960 = !DILocation(line: 2246, column: 9, scope: !5951)
!5961 = !DILocation(line: 2247, column: 8, scope: !5962)
!5962 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2247, column: 8)
!5963 = !DILocation(line: 2247, column: 12, scope: !5962)
!5964 = !DILocation(line: 2247, column: 8, scope: !5951)
!5965 = !DILocation(line: 2248, column: 6, scope: !5962)
!5966 = !DILocation(line: 2249, column: 10, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2249, column: 9)
!5968 = !DILocation(line: 2249, column: 9, scope: !5967)
!5969 = !DILocation(line: 2249, column: 17, scope: !5967)
!5970 = !DILocation(line: 2249, column: 15, scope: !5967)
!5971 = !DILocation(line: 2249, column: 24, scope: !5967)
!5972 = !DILocation(line: 2249, column: 34, scope: !5967)
!5973 = !DILocation(line: 2249, column: 32, scope: !5967)
!5974 = !DILocation(line: 2249, column: 21, scope: !5967)
!5975 = !DILocation(line: 2249, column: 36, scope: !5967)
!5976 = !DILocation(line: 2249, column: 41, scope: !5967)
!5977 = !DILocation(line: 2249, column: 40, scope: !5967)
!5978 = !DILocation(line: 2249, column: 39, scope: !5967)
!5979 = !DILocation(line: 2249, column: 46, scope: !5967)
!5980 = !DILocation(line: 2249, column: 9, scope: !5951)
!5981 = !DILocation(line: 2251, column: 18, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 2250, column: 13)
!5983 = !DILocation(line: 2251, column: 15, scope: !5982)
!5984 = !DILocation(line: 2252, column: 9, scope: !5982)
!5985 = !DILocation(line: 2254, column: 9, scope: !5951)
!5986 = !DILocation(line: 2255, column: 5, scope: !5893)
!5987 = !DILocation(line: 2257, column: 3, scope: !5827)
!5988 = !DILocation(line: 2258, column: 1, scope: !5827)
!5989 = distinct !DISubprogram(name: "snarf_numeric_literal", scope: !3, file: !3, line: 4053, type: !5468, scopeLine: 4054, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!5990 = !DILocalVariable(name: "args", arg: 1, scope: !5989, file: !3, line: 4053, type: !492)
!5991 = !DILocation(line: 4053, column: 37, scope: !5989)
!5992 = !DILocalVariable(name: "arg", arg: 2, scope: !5989, file: !3, line: 4053, type: !60)
!5993 = !DILocation(line: 4053, column: 51, scope: !5989)
!5994 = !DILocation(line: 4055, column: 9, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 4055, column: 7)
!5996 = !DILocation(line: 4055, column: 8, scope: !5995)
!5997 = !DILocation(line: 4055, column: 7, scope: !5995)
!5998 = !DILocation(line: 4055, column: 14, scope: !5995)
!5999 = !DILocation(line: 4055, column: 7, scope: !5989)
!6000 = !DILocation(line: 4057, column: 19, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 4056, column: 5)
!6002 = !DILocation(line: 4058, column: 22, scope: !6001)
!6003 = !DILocation(line: 4058, column: 7, scope: !6001)
!6004 = !DILocation(line: 4059, column: 9, scope: !6001)
!6005 = !DILocation(line: 4059, column: 14, scope: !6001)
!6006 = !DILocation(line: 4060, column: 5, scope: !6001)
!6007 = !DILocation(line: 4061, column: 14, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 4061, column: 12)
!6009 = !DILocation(line: 4061, column: 13, scope: !6008)
!6010 = !DILocation(line: 4061, column: 12, scope: !6008)
!6011 = !DILocation(line: 4061, column: 19, scope: !6008)
!6012 = !DILocation(line: 4061, column: 12, scope: !5995)
!6013 = !DILocation(line: 4062, column: 7, scope: !6008)
!6014 = !DILocation(line: 4062, column: 12, scope: !6008)
!6015 = !DILocation(line: 4062, column: 5, scope: !6008)
!6016 = !DILocation(line: 4064, column: 8, scope: !6017)
!6017 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 4064, column: 7)
!6018 = !DILocation(line: 4064, column: 7, scope: !5989)
!6019 = !DILocation(line: 4065, column: 5, scope: !6017)
!6020 = !DILocation(line: 4067, column: 3, scope: !5989)
!6021 = !DILocation(line: 4067, column: 10, scope: !5989)
!6022 = !DILocation(line: 4069, column: 23, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 4068, column: 5)
!6024 = !DILocation(line: 4069, column: 22, scope: !6023)
!6025 = !DILocation(line: 4069, column: 21, scope: !6023)
!6026 = !DILocation(line: 4069, column: 19, scope: !6023)
!6027 = !DILocation(line: 4070, column: 22, scope: !6023)
!6028 = !DILocation(line: 4070, column: 7, scope: !6023)
!6029 = !DILocation(line: 4071, column: 9, scope: !6023)
!6030 = !DILocation(line: 4071, column: 14, scope: !6023)
!6031 = distinct !{!6031, !6020, !6032}
!6032 = !DILocation(line: 4072, column: 5, scope: !5989)
!6033 = !DILocation(line: 4074, column: 3, scope: !5989)
!6034 = !DILocation(line: 4075, column: 1, scope: !5989)
!6035 = distinct !DISubprogram(name: "demangle_function_name", scope: !3, file: !3, line: 4490, type: !5576, scopeLine: 4492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6036 = !DILocalVariable(name: "work", arg: 1, scope: !6035, file: !3, line: 4490, type: !491)
!6037 = !DILocation(line: 4490, column: 44, scope: !6035)
!6038 = !DILocalVariable(name: "mangled", arg: 2, scope: !6035, file: !3, line: 4490, type: !492)
!6039 = !DILocation(line: 4490, column: 63, scope: !6035)
!6040 = !DILocalVariable(name: "declp", arg: 3, scope: !6035, file: !3, line: 4491, type: !60)
!6041 = !DILocation(line: 4491, column: 33, scope: !6035)
!6042 = !DILocalVariable(name: "scan", arg: 4, scope: !6035, file: !3, line: 4491, type: !76)
!6043 = !DILocation(line: 4491, column: 52, scope: !6035)
!6044 = !DILocalVariable(name: "i", scope: !6035, file: !3, line: 4493, type: !235)
!6045 = !DILocation(line: 4493, column: 10, scope: !6035)
!6046 = !DILocalVariable(name: "type", scope: !6035, file: !3, line: 4494, type: !61)
!6047 = !DILocation(line: 4494, column: 10, scope: !6035)
!6048 = !DILocalVariable(name: "tem", scope: !6035, file: !3, line: 4495, type: !76)
!6049 = !DILocation(line: 4495, column: 15, scope: !6035)
!6050 = !DILocation(line: 4497, column: 19, scope: !6035)
!6051 = !DILocation(line: 4497, column: 28, scope: !6035)
!6052 = !DILocation(line: 4497, column: 27, scope: !6035)
!6053 = !DILocation(line: 4497, column: 38, scope: !6035)
!6054 = !DILocation(line: 4497, column: 47, scope: !6035)
!6055 = !DILocation(line: 4497, column: 46, scope: !6035)
!6056 = !DILocation(line: 4497, column: 43, scope: !6035)
!6057 = !DILocation(line: 4497, column: 3, scope: !6035)
!6058 = !DILocation(line: 4498, column: 16, scope: !6035)
!6059 = !DILocation(line: 4498, column: 3, scope: !6035)
!6060 = !DILocation(line: 4499, column: 5, scope: !6035)
!6061 = !DILocation(line: 4499, column: 14, scope: !6035)
!6062 = !DILocation(line: 4499, column: 17, scope: !6035)
!6063 = !DILocation(line: 4505, column: 16, scope: !6035)
!6064 = !DILocation(line: 4505, column: 21, scope: !6035)
!6065 = !DILocation(line: 4505, column: 5, scope: !6035)
!6066 = !DILocation(line: 4505, column: 14, scope: !6035)
!6067 = !DILocation(line: 4511, column: 7, scope: !6068)
!6068 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 4511, column: 7)
!6069 = !DILocation(line: 4511, column: 21, scope: !6068)
!6070 = !DILocation(line: 4511, column: 27, scope: !6068)
!6071 = !DILocation(line: 4511, column: 26, scope: !6068)
!6072 = !DILocation(line: 4511, column: 25, scope: !6068)
!6073 = !DILocation(line: 4511, column: 35, scope: !6068)
!6074 = !DILocation(line: 4511, column: 7, scope: !6035)
!6075 = !DILocation(line: 4513, column: 33, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 4512, column: 5)
!6077 = !DILocation(line: 4513, column: 39, scope: !6076)
!6078 = !DILocation(line: 4513, column: 51, scope: !6076)
!6079 = !DILocation(line: 4513, column: 7, scope: !6076)
!6080 = !DILocation(line: 4515, column: 5, scope: !6076)
!6081 = !DILocation(line: 4517, column: 7, scope: !6082)
!6082 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 4517, column: 7)
!6083 = !DILocation(line: 4517, column: 24, scope: !6082)
!6084 = !DILocation(line: 4517, column: 27, scope: !6082)
!6085 = !DILocation(line: 4517, column: 42, scope: !6082)
!6086 = !DILocation(line: 4517, column: 45, scope: !6082)
!6087 = !DILocation(line: 4517, column: 59, scope: !6082)
!6088 = !DILocation(line: 4517, column: 62, scope: !6082)
!6089 = !DILocation(line: 4517, column: 7, scope: !6035)
!6090 = !DILocation(line: 4525, column: 19, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 4525, column: 11)
!6092 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 4518, column: 5)
!6093 = !DILocation(line: 4525, column: 28, scope: !6091)
!6094 = !DILocation(line: 4525, column: 11, scope: !6091)
!6095 = !DILocation(line: 4525, column: 39, scope: !6091)
!6096 = !DILocation(line: 4525, column: 11, scope: !6092)
!6097 = !DILocation(line: 4527, column: 4, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 4526, column: 2)
!6099 = !DILocation(line: 4527, column: 12, scope: !6098)
!6100 = !DILocation(line: 4527, column: 24, scope: !6098)
!6101 = !DILocation(line: 4528, column: 18, scope: !6098)
!6102 = !DILocation(line: 4528, column: 4, scope: !6098)
!6103 = !DILocation(line: 4529, column: 4, scope: !6098)
!6104 = !DILocation(line: 4531, column: 24, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 4531, column: 16)
!6106 = !DILocation(line: 4531, column: 33, scope: !6105)
!6107 = !DILocation(line: 4531, column: 16, scope: !6105)
!6108 = !DILocation(line: 4531, column: 44, scope: !6105)
!6109 = !DILocation(line: 4531, column: 16, scope: !6091)
!6110 = !DILocation(line: 4533, column: 4, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 4532, column: 2)
!6112 = !DILocation(line: 4533, column: 12, scope: !6111)
!6113 = !DILocation(line: 4533, column: 23, scope: !6111)
!6114 = !DILocation(line: 4534, column: 18, scope: !6111)
!6115 = !DILocation(line: 4534, column: 4, scope: !6111)
!6116 = !DILocation(line: 4535, column: 4, scope: !6111)
!6117 = !DILocation(line: 4537, column: 5, scope: !6092)
!6118 = !DILocation(line: 4539, column: 7, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 4539, column: 7)
!6120 = !DILocation(line: 4539, column: 14, scope: !6119)
!6121 = !DILocation(line: 4539, column: 18, scope: !6119)
!6122 = !DILocation(line: 4539, column: 25, scope: !6119)
!6123 = !DILocation(line: 4539, column: 16, scope: !6119)
!6124 = !DILocation(line: 4539, column: 27, scope: !6119)
!6125 = !DILocation(line: 4540, column: 7, scope: !6119)
!6126 = !DILocation(line: 4540, column: 10, scope: !6119)
!6127 = !DILocation(line: 4540, column: 17, scope: !6119)
!6128 = !DILocation(line: 4540, column: 22, scope: !6119)
!6129 = !DILocation(line: 4541, column: 7, scope: !6119)
!6130 = !DILocation(line: 4541, column: 10, scope: !6119)
!6131 = !DILocation(line: 4541, column: 17, scope: !6119)
!6132 = !DILocation(line: 4541, column: 22, scope: !6119)
!6133 = !DILocation(line: 4542, column: 7, scope: !6119)
!6134 = !DILocation(line: 4542, column: 33, scope: !6119)
!6135 = !DILocation(line: 4542, column: 40, scope: !6119)
!6136 = !DILocation(line: 4542, column: 10, scope: !6119)
!6137 = !DILocation(line: 4542, column: 46, scope: !6119)
!6138 = !DILocation(line: 4539, column: 7, scope: !6035)
!6139 = !DILocation(line: 4545, column: 11, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6141, file: !3, line: 4545, column: 11)
!6141 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 4543, column: 5)
!6142 = !DILocation(line: 4545, column: 18, scope: !6140)
!6143 = !DILocation(line: 4545, column: 22, scope: !6140)
!6144 = !DILocation(line: 4545, column: 29, scope: !6140)
!6145 = !DILocation(line: 4545, column: 20, scope: !6140)
!6146 = !DILocation(line: 4545, column: 31, scope: !6140)
!6147 = !DILocation(line: 4546, column: 4, scope: !6140)
!6148 = !DILocation(line: 4546, column: 15, scope: !6140)
!6149 = !DILocation(line: 4546, column: 22, scope: !6140)
!6150 = !DILocation(line: 4546, column: 24, scope: !6140)
!6151 = !DILocation(line: 4546, column: 7, scope: !6140)
!6152 = !DILocation(line: 4546, column: 43, scope: !6140)
!6153 = !DILocation(line: 4545, column: 11, scope: !6141)
!6154 = !DILocation(line: 4548, column: 11, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 4548, column: 4)
!6156 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 4547, column: 2)
!6157 = !DILocation(line: 4548, column: 9, scope: !6155)
!6158 = !DILocation(line: 4548, column: 16, scope: !6159)
!6159 = distinct !DILexicalBlock(scope: !6155, file: !3, line: 4548, column: 4)
!6160 = !DILocation(line: 4548, column: 18, scope: !6159)
!6161 = !DILocation(line: 4548, column: 4, scope: !6155)
!6162 = !DILocalVariable(name: "len", scope: !6163, file: !3, line: 4550, type: !7)
!6163 = distinct !DILexicalBlock(scope: !6159, file: !3, line: 4549, column: 6)
!6164 = !DILocation(line: 4550, column: 12, scope: !6163)
!6165 = !DILocation(line: 4550, column: 18, scope: !6163)
!6166 = !DILocation(line: 4550, column: 25, scope: !6163)
!6167 = !DILocation(line: 4550, column: 29, scope: !6163)
!6168 = !DILocation(line: 4550, column: 36, scope: !6163)
!6169 = !DILocation(line: 4550, column: 27, scope: !6163)
!6170 = !DILocation(line: 4550, column: 38, scope: !6163)
!6171 = !DILocation(line: 4551, column: 34, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6163, file: !3, line: 4551, column: 12)
!6173 = !DILocation(line: 4551, column: 26, scope: !6172)
!6174 = !DILocation(line: 4551, column: 37, scope: !6172)
!6175 = !DILocation(line: 4551, column: 18, scope: !6172)
!6176 = !DILocation(line: 4551, column: 12, scope: !6172)
!6177 = !DILocation(line: 4551, column: 44, scope: !6172)
!6178 = !DILocation(line: 4551, column: 41, scope: !6172)
!6179 = !DILocation(line: 4552, column: 5, scope: !6172)
!6180 = !DILocation(line: 4552, column: 24, scope: !6172)
!6181 = !DILocation(line: 4552, column: 16, scope: !6172)
!6182 = !DILocation(line: 4552, column: 27, scope: !6172)
!6183 = !DILocation(line: 4552, column: 31, scope: !6172)
!6184 = !DILocation(line: 4552, column: 38, scope: !6172)
!6185 = !DILocation(line: 4552, column: 40, scope: !6172)
!6186 = !DILocation(line: 4552, column: 46, scope: !6172)
!6187 = !DILocation(line: 4552, column: 8, scope: !6172)
!6188 = !DILocation(line: 4552, column: 51, scope: !6172)
!6189 = !DILocation(line: 4551, column: 12, scope: !6163)
!6190 = !DILocation(line: 4554, column: 19, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 4553, column: 3)
!6192 = !DILocation(line: 4554, column: 5, scope: !6191)
!6193 = !DILocation(line: 4555, column: 20, scope: !6191)
!6194 = !DILocation(line: 4555, column: 5, scope: !6191)
!6195 = !DILocation(line: 4556, column: 20, scope: !6191)
!6196 = !DILocation(line: 4556, column: 35, scope: !6191)
!6197 = !DILocation(line: 4556, column: 27, scope: !6191)
!6198 = !DILocation(line: 4556, column: 38, scope: !6191)
!6199 = !DILocation(line: 4556, column: 5, scope: !6191)
!6200 = !DILocation(line: 4557, column: 20, scope: !6191)
!6201 = !DILocation(line: 4557, column: 5, scope: !6191)
!6202 = !DILocation(line: 4558, column: 5, scope: !6191)
!6203 = !DILocation(line: 4560, column: 6, scope: !6163)
!6204 = !DILocation(line: 4548, column: 43, scope: !6159)
!6205 = !DILocation(line: 4548, column: 4, scope: !6159)
!6206 = distinct !{!6206, !6161, !6207}
!6207 = !DILocation(line: 4560, column: 6, scope: !6155)
!6208 = !DILocation(line: 4561, column: 2, scope: !6156)
!6209 = !DILocation(line: 4564, column: 11, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6211, file: !3, line: 4564, column: 4)
!6211 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 4563, column: 2)
!6212 = !DILocation(line: 4564, column: 9, scope: !6210)
!6213 = !DILocation(line: 4564, column: 16, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6210, file: !3, line: 4564, column: 4)
!6215 = !DILocation(line: 4564, column: 18, scope: !6214)
!6216 = !DILocation(line: 4564, column: 4, scope: !6210)
!6217 = !DILocalVariable(name: "len", scope: !6218, file: !3, line: 4566, type: !7)
!6218 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 4565, column: 6)
!6219 = !DILocation(line: 4566, column: 12, scope: !6218)
!6220 = !DILocation(line: 4566, column: 18, scope: !6218)
!6221 = !DILocation(line: 4566, column: 25, scope: !6218)
!6222 = !DILocation(line: 4566, column: 29, scope: !6218)
!6223 = !DILocation(line: 4566, column: 36, scope: !6218)
!6224 = !DILocation(line: 4566, column: 27, scope: !6218)
!6225 = !DILocation(line: 4566, column: 38, scope: !6218)
!6226 = !DILocation(line: 4567, column: 34, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 4567, column: 12)
!6228 = !DILocation(line: 4567, column: 26, scope: !6227)
!6229 = !DILocation(line: 4567, column: 37, scope: !6227)
!6230 = !DILocation(line: 4567, column: 18, scope: !6227)
!6231 = !DILocation(line: 4567, column: 12, scope: !6227)
!6232 = !DILocation(line: 4567, column: 44, scope: !6227)
!6233 = !DILocation(line: 4567, column: 41, scope: !6227)
!6234 = !DILocation(line: 4568, column: 5, scope: !6227)
!6235 = !DILocation(line: 4568, column: 24, scope: !6227)
!6236 = !DILocation(line: 4568, column: 16, scope: !6227)
!6237 = !DILocation(line: 4568, column: 27, scope: !6227)
!6238 = !DILocation(line: 4568, column: 31, scope: !6227)
!6239 = !DILocation(line: 4568, column: 38, scope: !6227)
!6240 = !DILocation(line: 4568, column: 40, scope: !6227)
!6241 = !DILocation(line: 4568, column: 45, scope: !6227)
!6242 = !DILocation(line: 4568, column: 8, scope: !6227)
!6243 = !DILocation(line: 4568, column: 50, scope: !6227)
!6244 = !DILocation(line: 4567, column: 12, scope: !6218)
!6245 = !DILocation(line: 4570, column: 19, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 4569, column: 3)
!6247 = !DILocation(line: 4570, column: 5, scope: !6246)
!6248 = !DILocation(line: 4571, column: 20, scope: !6246)
!6249 = !DILocation(line: 4571, column: 5, scope: !6246)
!6250 = !DILocation(line: 4572, column: 20, scope: !6246)
!6251 = !DILocation(line: 4572, column: 35, scope: !6246)
!6252 = !DILocation(line: 4572, column: 27, scope: !6246)
!6253 = !DILocation(line: 4572, column: 38, scope: !6246)
!6254 = !DILocation(line: 4572, column: 5, scope: !6246)
!6255 = !DILocation(line: 4573, column: 5, scope: !6246)
!6256 = !DILocation(line: 4575, column: 6, scope: !6218)
!6257 = !DILocation(line: 4564, column: 43, scope: !6214)
!6258 = !DILocation(line: 4564, column: 4, scope: !6214)
!6259 = distinct !{!6259, !6216, !6260}
!6260 = !DILocation(line: 4575, column: 6, scope: !6210)
!6261 = !DILocation(line: 4577, column: 5, scope: !6141)
!6262 = !DILocation(line: 4578, column: 12, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 4578, column: 12)
!6264 = !DILocation(line: 4578, column: 19, scope: !6263)
!6265 = !DILocation(line: 4578, column: 23, scope: !6263)
!6266 = !DILocation(line: 4578, column: 30, scope: !6263)
!6267 = !DILocation(line: 4578, column: 21, scope: !6263)
!6268 = !DILocation(line: 4578, column: 32, scope: !6263)
!6269 = !DILocation(line: 4578, column: 37, scope: !6263)
!6270 = !DILocation(line: 4578, column: 48, scope: !6263)
!6271 = !DILocation(line: 4578, column: 55, scope: !6263)
!6272 = !DILocation(line: 4578, column: 40, scope: !6263)
!6273 = !DILocation(line: 4578, column: 69, scope: !6263)
!6274 = !DILocation(line: 4579, column: 5, scope: !6263)
!6275 = !DILocation(line: 4579, column: 31, scope: !6263)
!6276 = !DILocation(line: 4579, column: 38, scope: !6263)
!6277 = !DILocation(line: 4579, column: 8, scope: !6263)
!6278 = !DILocation(line: 4579, column: 44, scope: !6263)
!6279 = !DILocation(line: 4578, column: 12, scope: !6119)
!6280 = !DILocation(line: 4582, column: 13, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 4580, column: 5)
!6282 = !DILocation(line: 4582, column: 20, scope: !6281)
!6283 = !DILocation(line: 4582, column: 22, scope: !6281)
!6284 = !DILocation(line: 4582, column: 11, scope: !6281)
!6285 = !DILocation(line: 4583, column: 20, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 4583, column: 11)
!6287 = !DILocation(line: 4583, column: 11, scope: !6286)
!6288 = !DILocation(line: 4583, column: 11, scope: !6281)
!6289 = !DILocation(line: 4585, column: 18, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 4584, column: 2)
!6291 = !DILocation(line: 4585, column: 4, scope: !6290)
!6292 = !DILocation(line: 4586, column: 19, scope: !6290)
!6293 = !DILocation(line: 4586, column: 4, scope: !6290)
!6294 = !DILocation(line: 4587, column: 20, scope: !6290)
!6295 = !DILocation(line: 4587, column: 4, scope: !6290)
!6296 = !DILocation(line: 4588, column: 4, scope: !6290)
!6297 = !DILocation(line: 4589, column: 2, scope: !6290)
!6298 = !DILocation(line: 4590, column: 5, scope: !6281)
!6299 = !DILocation(line: 4591, column: 12, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 4591, column: 12)
!6301 = !DILocation(line: 4591, column: 19, scope: !6300)
!6302 = !DILocation(line: 4591, column: 24, scope: !6300)
!6303 = !DILocation(line: 4591, column: 31, scope: !6300)
!6304 = !DILocation(line: 4591, column: 34, scope: !6300)
!6305 = !DILocation(line: 4591, column: 41, scope: !6300)
!6306 = !DILocation(line: 4591, column: 46, scope: !6300)
!6307 = !DILocation(line: 4592, column: 5, scope: !6300)
!6308 = !DILocation(line: 4592, column: 8, scope: !6300)
!6309 = !DILocation(line: 4592, column: 15, scope: !6300)
!6310 = !DILocation(line: 4592, column: 20, scope: !6300)
!6311 = !DILocation(line: 4592, column: 27, scope: !6300)
!6312 = !DILocation(line: 4592, column: 30, scope: !6300)
!6313 = !DILocation(line: 4592, column: 37, scope: !6300)
!6314 = !DILocation(line: 4592, column: 42, scope: !6300)
!6315 = !DILocation(line: 4591, column: 12, scope: !6263)
!6316 = !DILocation(line: 4596, column: 13, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 4593, column: 5)
!6318 = !DILocation(line: 4596, column: 20, scope: !6317)
!6319 = !DILocation(line: 4596, column: 22, scope: !6317)
!6320 = !DILocation(line: 4596, column: 11, scope: !6317)
!6321 = !DILocation(line: 4597, column: 20, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 4597, column: 11)
!6323 = !DILocation(line: 4597, column: 11, scope: !6322)
!6324 = !DILocation(line: 4597, column: 11, scope: !6317)
!6325 = !DILocation(line: 4599, column: 18, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 4598, column: 2)
!6327 = !DILocation(line: 4599, column: 4, scope: !6326)
!6328 = !DILocation(line: 4600, column: 19, scope: !6326)
!6329 = !DILocation(line: 4600, column: 4, scope: !6326)
!6330 = !DILocation(line: 4601, column: 20, scope: !6326)
!6331 = !DILocation(line: 4601, column: 4, scope: !6326)
!6332 = !DILocation(line: 4602, column: 4, scope: !6326)
!6333 = !DILocation(line: 4603, column: 2, scope: !6326)
!6334 = !DILocation(line: 4604, column: 5, scope: !6317)
!6335 = !DILocation(line: 4605, column: 12, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 4605, column: 12)
!6337 = !DILocation(line: 4605, column: 19, scope: !6336)
!6338 = !DILocation(line: 4605, column: 24, scope: !6336)
!6339 = !DILocation(line: 4605, column: 31, scope: !6336)
!6340 = !DILocation(line: 4605, column: 34, scope: !6336)
!6341 = !DILocation(line: 4605, column: 41, scope: !6336)
!6342 = !DILocation(line: 4605, column: 46, scope: !6336)
!6343 = !DILocation(line: 4606, column: 5, scope: !6336)
!6344 = !DILocation(line: 4606, column: 8, scope: !6336)
!6345 = !DILocation(line: 4607, column: 5, scope: !6336)
!6346 = !DILocation(line: 4607, column: 8, scope: !6336)
!6347 = !DILocation(line: 4605, column: 12, scope: !6300)
!6348 = !DILocation(line: 4609, column: 11, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6350, file: !3, line: 4609, column: 11)
!6350 = distinct !DILexicalBlock(scope: !6336, file: !3, line: 4608, column: 5)
!6351 = !DILocation(line: 4609, column: 18, scope: !6349)
!6352 = !DILocation(line: 4609, column: 23, scope: !6349)
!6353 = !DILocation(line: 4609, column: 11, scope: !6350)
!6354 = !DILocation(line: 4612, column: 11, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 4612, column: 4)
!6356 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 4610, column: 2)
!6357 = !DILocation(line: 4612, column: 9, scope: !6355)
!6358 = !DILocation(line: 4612, column: 16, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 4612, column: 4)
!6360 = !DILocation(line: 4612, column: 18, scope: !6359)
!6361 = !DILocation(line: 4612, column: 4, scope: !6355)
!6362 = !DILocation(line: 4614, column: 28, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 4614, column: 12)
!6364 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 4613, column: 6)
!6365 = !DILocation(line: 4614, column: 20, scope: !6363)
!6366 = !DILocation(line: 4614, column: 31, scope: !6363)
!6367 = !DILocation(line: 4614, column: 12, scope: !6363)
!6368 = !DILocation(line: 4614, column: 35, scope: !6363)
!6369 = !DILocation(line: 4615, column: 5, scope: !6363)
!6370 = !DILocation(line: 4615, column: 24, scope: !6363)
!6371 = !DILocation(line: 4615, column: 16, scope: !6363)
!6372 = !DILocation(line: 4615, column: 27, scope: !6363)
!6373 = !DILocation(line: 4615, column: 31, scope: !6363)
!6374 = !DILocation(line: 4615, column: 38, scope: !6363)
!6375 = !DILocation(line: 4615, column: 40, scope: !6363)
!6376 = !DILocation(line: 4615, column: 8, scope: !6363)
!6377 = !DILocation(line: 4615, column: 48, scope: !6363)
!6378 = !DILocation(line: 4614, column: 12, scope: !6364)
!6379 = !DILocation(line: 4617, column: 19, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6363, file: !3, line: 4616, column: 3)
!6381 = !DILocation(line: 4617, column: 5, scope: !6380)
!6382 = !DILocation(line: 4618, column: 20, scope: !6380)
!6383 = !DILocation(line: 4618, column: 5, scope: !6380)
!6384 = !DILocation(line: 4619, column: 20, scope: !6380)
!6385 = !DILocation(line: 4619, column: 35, scope: !6380)
!6386 = !DILocation(line: 4619, column: 27, scope: !6380)
!6387 = !DILocation(line: 4619, column: 38, scope: !6380)
!6388 = !DILocation(line: 4619, column: 5, scope: !6380)
!6389 = !DILocation(line: 4620, column: 5, scope: !6380)
!6390 = !DILocation(line: 4622, column: 6, scope: !6364)
!6391 = !DILocation(line: 4612, column: 43, scope: !6359)
!6392 = !DILocation(line: 4612, column: 4, scope: !6359)
!6393 = distinct !{!6393, !6361, !6394}
!6394 = !DILocation(line: 4622, column: 6, scope: !6355)
!6395 = !DILocation(line: 4623, column: 2, scope: !6356)
!6396 = !DILocation(line: 4626, column: 8, scope: !6397)
!6397 = distinct !DILexicalBlock(scope: !6398, file: !3, line: 4626, column: 8)
!6398 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 4625, column: 2)
!6399 = !DILocation(line: 4626, column: 15, scope: !6397)
!6400 = !DILocation(line: 4626, column: 20, scope: !6397)
!6401 = !DILocation(line: 4626, column: 27, scope: !6397)
!6402 = !DILocation(line: 4626, column: 30, scope: !6397)
!6403 = !DILocation(line: 4626, column: 37, scope: !6397)
!6404 = !DILocation(line: 4626, column: 42, scope: !6397)
!6405 = !DILocation(line: 4626, column: 8, scope: !6398)
!6406 = !DILocation(line: 4629, column: 15, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 4629, column: 8)
!6408 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 4627, column: 6)
!6409 = !DILocation(line: 4629, column: 13, scope: !6407)
!6410 = !DILocation(line: 4629, column: 20, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 4629, column: 8)
!6412 = !DILocation(line: 4629, column: 22, scope: !6411)
!6413 = !DILocation(line: 4629, column: 8, scope: !6407)
!6414 = !DILocation(line: 4631, column: 25, scope: !6415)
!6415 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 4631, column: 9)
!6416 = distinct !DILexicalBlock(scope: !6411, file: !3, line: 4630, column: 3)
!6417 = !DILocation(line: 4631, column: 17, scope: !6415)
!6418 = !DILocation(line: 4631, column: 28, scope: !6415)
!6419 = !DILocation(line: 4631, column: 9, scope: !6415)
!6420 = !DILocation(line: 4631, column: 32, scope: !6415)
!6421 = !DILocation(line: 4632, column: 9, scope: !6415)
!6422 = !DILocation(line: 4632, column: 28, scope: !6415)
!6423 = !DILocation(line: 4632, column: 20, scope: !6415)
!6424 = !DILocation(line: 4632, column: 31, scope: !6415)
!6425 = !DILocation(line: 4632, column: 35, scope: !6415)
!6426 = !DILocation(line: 4632, column: 42, scope: !6415)
!6427 = !DILocation(line: 4632, column: 44, scope: !6415)
!6428 = !DILocation(line: 4632, column: 12, scope: !6415)
!6429 = !DILocation(line: 4632, column: 52, scope: !6415)
!6430 = !DILocation(line: 4631, column: 9, scope: !6416)
!6431 = !DILocation(line: 4634, column: 23, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 4633, column: 7)
!6433 = !DILocation(line: 4634, column: 9, scope: !6432)
!6434 = !DILocation(line: 4635, column: 24, scope: !6432)
!6435 = !DILocation(line: 4635, column: 9, scope: !6432)
!6436 = !DILocation(line: 4636, column: 24, scope: !6432)
!6437 = !DILocation(line: 4636, column: 39, scope: !6432)
!6438 = !DILocation(line: 4636, column: 31, scope: !6432)
!6439 = !DILocation(line: 4636, column: 42, scope: !6432)
!6440 = !DILocation(line: 4636, column: 9, scope: !6432)
!6441 = !DILocation(line: 4637, column: 9, scope: !6432)
!6442 = !DILocation(line: 4639, column: 3, scope: !6416)
!6443 = !DILocation(line: 4629, column: 47, scope: !6411)
!6444 = !DILocation(line: 4629, column: 8, scope: !6411)
!6445 = distinct !{!6445, !6413, !6446}
!6446 = !DILocation(line: 4639, column: 3, scope: !6407)
!6447 = !DILocation(line: 4640, column: 6, scope: !6408)
!6448 = !DILocation(line: 4642, column: 5, scope: !6350)
!6449 = !DILocation(line: 4646, column: 7, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 4646, column: 7)
!6451 = !DILocation(line: 4646, column: 26, scope: !6450)
!6452 = !DILocation(line: 4646, column: 31, scope: !6450)
!6453 = !DILocation(line: 4646, column: 34, scope: !6450)
!6454 = !DILocation(line: 4646, column: 41, scope: !6450)
!6455 = !DILocation(line: 4646, column: 46, scope: !6450)
!6456 = !DILocation(line: 4646, column: 7, scope: !6035)
!6457 = !DILocation(line: 4647, column: 5, scope: !6450)
!6458 = !DILocation(line: 4649, column: 5, scope: !6450)
!6459 = !DILocation(line: 4650, column: 1, scope: !6035)
!6460 = distinct !DISubprogram(name: "work_stuff_copy_to_from", scope: !3, file: !3, line: 1158, type: !6461, scopeLine: 1159, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6461 = !DISubroutineType(types: !6462)
!6462 = !{null, !491, !491}
!6463 = !DILocalVariable(name: "to", arg: 1, scope: !6460, file: !3, line: 1158, type: !491)
!6464 = !DILocation(line: 1158, column: 45, scope: !6460)
!6465 = !DILocalVariable(name: "from", arg: 2, scope: !6460, file: !3, line: 1158, type: !491)
!6466 = !DILocation(line: 1158, column: 68, scope: !6460)
!6467 = !DILocalVariable(name: "i", scope: !6460, file: !3, line: 1160, type: !7)
!6468 = !DILocation(line: 1160, column: 7, scope: !6460)
!6469 = !DILocation(line: 1162, column: 22, scope: !6460)
!6470 = !DILocation(line: 1162, column: 3, scope: !6460)
!6471 = !DILocation(line: 1165, column: 11, scope: !6460)
!6472 = !DILocation(line: 1165, column: 3, scope: !6460)
!6473 = !DILocation(line: 1165, column: 15, scope: !6460)
!6474 = !DILocation(line: 1168, column: 7, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1168, column: 7)
!6476 = !DILocation(line: 1168, column: 13, scope: !6475)
!6477 = !DILocation(line: 1168, column: 7, scope: !6460)
!6478 = !DILocation(line: 1169, column: 19, scope: !6475)
!6479 = !DILocation(line: 1169, column: 5, scope: !6475)
!6480 = !DILocation(line: 1169, column: 9, scope: !6475)
!6481 = !DILocation(line: 1169, column: 17, scope: !6475)
!6482 = !DILocation(line: 1171, column: 10, scope: !6483)
!6483 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1171, column: 3)
!6484 = !DILocation(line: 1171, column: 8, scope: !6483)
!6485 = !DILocation(line: 1171, column: 15, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1171, column: 3)
!6487 = !DILocation(line: 1171, column: 19, scope: !6486)
!6488 = !DILocation(line: 1171, column: 25, scope: !6486)
!6489 = !DILocation(line: 1171, column: 17, scope: !6486)
!6490 = !DILocation(line: 1171, column: 3, scope: !6483)
!6491 = !DILocalVariable(name: "len", scope: !6492, file: !3, line: 1173, type: !7)
!6492 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 1172, column: 5)
!6493 = !DILocation(line: 1173, column: 11, scope: !6492)
!6494 = !DILocation(line: 1173, column: 25, scope: !6492)
!6495 = !DILocation(line: 1173, column: 31, scope: !6492)
!6496 = !DILocation(line: 1173, column: 39, scope: !6492)
!6497 = !DILocation(line: 1173, column: 17, scope: !6492)
!6498 = !DILocation(line: 1173, column: 43, scope: !6492)
!6499 = !DILocation(line: 1175, column: 24, scope: !6492)
!6500 = !DILocation(line: 1175, column: 7, scope: !6492)
!6501 = !DILocation(line: 1175, column: 11, scope: !6492)
!6502 = !DILocation(line: 1175, column: 19, scope: !6492)
!6503 = !DILocation(line: 1175, column: 22, scope: !6492)
!6504 = !DILocation(line: 1176, column: 15, scope: !6492)
!6505 = !DILocation(line: 1176, column: 19, scope: !6492)
!6506 = !DILocation(line: 1176, column: 27, scope: !6492)
!6507 = !DILocation(line: 1176, column: 31, scope: !6492)
!6508 = !DILocation(line: 1176, column: 37, scope: !6492)
!6509 = !DILocation(line: 1176, column: 45, scope: !6492)
!6510 = !DILocation(line: 1176, column: 49, scope: !6492)
!6511 = !DILocation(line: 1176, column: 7, scope: !6492)
!6512 = !DILocation(line: 1177, column: 5, scope: !6492)
!6513 = !DILocation(line: 1171, column: 34, scope: !6486)
!6514 = !DILocation(line: 1171, column: 3, scope: !6486)
!6515 = distinct !{!6515, !6490, !6516}
!6516 = !DILocation(line: 1177, column: 5, scope: !6483)
!6517 = !DILocation(line: 1179, column: 7, scope: !6518)
!6518 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1179, column: 7)
!6519 = !DILocation(line: 1179, column: 13, scope: !6518)
!6520 = !DILocation(line: 1179, column: 7, scope: !6460)
!6521 = !DILocation(line: 1180, column: 20, scope: !6518)
!6522 = !DILocation(line: 1180, column: 5, scope: !6518)
!6523 = !DILocation(line: 1180, column: 9, scope: !6518)
!6524 = !DILocation(line: 1180, column: 18, scope: !6518)
!6525 = !DILocation(line: 1182, column: 10, scope: !6526)
!6526 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1182, column: 3)
!6527 = !DILocation(line: 1182, column: 8, scope: !6526)
!6528 = !DILocation(line: 1182, column: 15, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6526, file: !3, line: 1182, column: 3)
!6530 = !DILocation(line: 1182, column: 19, scope: !6529)
!6531 = !DILocation(line: 1182, column: 25, scope: !6529)
!6532 = !DILocation(line: 1182, column: 17, scope: !6529)
!6533 = !DILocation(line: 1182, column: 3, scope: !6526)
!6534 = !DILocalVariable(name: "len", scope: !6535, file: !3, line: 1184, type: !7)
!6535 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 1183, column: 5)
!6536 = !DILocation(line: 1184, column: 11, scope: !6535)
!6537 = !DILocation(line: 1184, column: 25, scope: !6535)
!6538 = !DILocation(line: 1184, column: 31, scope: !6535)
!6539 = !DILocation(line: 1184, column: 40, scope: !6535)
!6540 = !DILocation(line: 1184, column: 17, scope: !6535)
!6541 = !DILocation(line: 1184, column: 44, scope: !6535)
!6542 = !DILocation(line: 1186, column: 25, scope: !6535)
!6543 = !DILocation(line: 1186, column: 7, scope: !6535)
!6544 = !DILocation(line: 1186, column: 11, scope: !6535)
!6545 = !DILocation(line: 1186, column: 20, scope: !6535)
!6546 = !DILocation(line: 1186, column: 23, scope: !6535)
!6547 = !DILocation(line: 1187, column: 15, scope: !6535)
!6548 = !DILocation(line: 1187, column: 19, scope: !6535)
!6549 = !DILocation(line: 1187, column: 28, scope: !6535)
!6550 = !DILocation(line: 1187, column: 32, scope: !6535)
!6551 = !DILocation(line: 1187, column: 38, scope: !6535)
!6552 = !DILocation(line: 1187, column: 47, scope: !6535)
!6553 = !DILocation(line: 1187, column: 51, scope: !6535)
!6554 = !DILocation(line: 1187, column: 7, scope: !6535)
!6555 = !DILocation(line: 1188, column: 5, scope: !6535)
!6556 = !DILocation(line: 1182, column: 32, scope: !6529)
!6557 = !DILocation(line: 1182, column: 3, scope: !6529)
!6558 = distinct !{!6558, !6533, !6559}
!6559 = !DILocation(line: 1188, column: 5, scope: !6526)
!6560 = !DILocation(line: 1190, column: 7, scope: !6561)
!6561 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1190, column: 7)
!6562 = !DILocation(line: 1190, column: 13, scope: !6561)
!6563 = !DILocation(line: 1190, column: 7, scope: !6460)
!6564 = !DILocation(line: 1191, column: 20, scope: !6561)
!6565 = !DILocation(line: 1191, column: 5, scope: !6561)
!6566 = !DILocation(line: 1191, column: 9, scope: !6561)
!6567 = !DILocation(line: 1191, column: 18, scope: !6561)
!6568 = !DILocation(line: 1193, column: 10, scope: !6569)
!6569 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1193, column: 3)
!6570 = !DILocation(line: 1193, column: 8, scope: !6569)
!6571 = !DILocation(line: 1193, column: 15, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6569, file: !3, line: 1193, column: 3)
!6573 = !DILocation(line: 1193, column: 19, scope: !6572)
!6574 = !DILocation(line: 1193, column: 25, scope: !6572)
!6575 = !DILocation(line: 1193, column: 17, scope: !6572)
!6576 = !DILocation(line: 1193, column: 3, scope: !6569)
!6577 = !DILocalVariable(name: "len", scope: !6578, file: !3, line: 1195, type: !7)
!6578 = distinct !DILexicalBlock(scope: !6572, file: !3, line: 1194, column: 5)
!6579 = !DILocation(line: 1195, column: 11, scope: !6578)
!6580 = !DILocation(line: 1195, column: 25, scope: !6578)
!6581 = !DILocation(line: 1195, column: 31, scope: !6578)
!6582 = !DILocation(line: 1195, column: 40, scope: !6578)
!6583 = !DILocation(line: 1195, column: 17, scope: !6578)
!6584 = !DILocation(line: 1195, column: 44, scope: !6578)
!6585 = !DILocation(line: 1197, column: 25, scope: !6578)
!6586 = !DILocation(line: 1197, column: 7, scope: !6578)
!6587 = !DILocation(line: 1197, column: 11, scope: !6578)
!6588 = !DILocation(line: 1197, column: 20, scope: !6578)
!6589 = !DILocation(line: 1197, column: 23, scope: !6578)
!6590 = !DILocation(line: 1198, column: 15, scope: !6578)
!6591 = !DILocation(line: 1198, column: 19, scope: !6578)
!6592 = !DILocation(line: 1198, column: 28, scope: !6578)
!6593 = !DILocation(line: 1198, column: 32, scope: !6578)
!6594 = !DILocation(line: 1198, column: 38, scope: !6578)
!6595 = !DILocation(line: 1198, column: 47, scope: !6578)
!6596 = !DILocation(line: 1198, column: 51, scope: !6578)
!6597 = !DILocation(line: 1198, column: 7, scope: !6578)
!6598 = !DILocation(line: 1199, column: 5, scope: !6578)
!6599 = !DILocation(line: 1193, column: 32, scope: !6572)
!6600 = !DILocation(line: 1193, column: 3, scope: !6572)
!6601 = distinct !{!6601, !6576, !6602}
!6602 = !DILocation(line: 1199, column: 5, scope: !6569)
!6603 = !DILocation(line: 1201, column: 7, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1201, column: 7)
!6605 = !DILocation(line: 1201, column: 13, scope: !6604)
!6606 = !DILocation(line: 1201, column: 7, scope: !6460)
!6607 = !DILocation(line: 1202, column: 23, scope: !6604)
!6608 = !DILocation(line: 1202, column: 5, scope: !6604)
!6609 = !DILocation(line: 1202, column: 9, scope: !6604)
!6610 = !DILocation(line: 1202, column: 21, scope: !6604)
!6611 = !DILocation(line: 1204, column: 10, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1204, column: 3)
!6613 = !DILocation(line: 1204, column: 8, scope: !6612)
!6614 = !DILocation(line: 1204, column: 15, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6612, file: !3, line: 1204, column: 3)
!6616 = !DILocation(line: 1204, column: 19, scope: !6615)
!6617 = !DILocation(line: 1204, column: 25, scope: !6615)
!6618 = !DILocation(line: 1204, column: 17, scope: !6615)
!6619 = !DILocation(line: 1204, column: 3, scope: !6612)
!6620 = !DILocalVariable(name: "len", scope: !6621, file: !3, line: 1206, type: !7)
!6621 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 1205, column: 5)
!6622 = !DILocation(line: 1206, column: 11, scope: !6621)
!6623 = !DILocation(line: 1206, column: 25, scope: !6621)
!6624 = !DILocation(line: 1206, column: 31, scope: !6621)
!6625 = !DILocation(line: 1206, column: 43, scope: !6621)
!6626 = !DILocation(line: 1206, column: 17, scope: !6621)
!6627 = !DILocation(line: 1206, column: 47, scope: !6621)
!6628 = !DILocation(line: 1208, column: 28, scope: !6621)
!6629 = !DILocation(line: 1208, column: 7, scope: !6621)
!6630 = !DILocation(line: 1208, column: 11, scope: !6621)
!6631 = !DILocation(line: 1208, column: 23, scope: !6621)
!6632 = !DILocation(line: 1208, column: 26, scope: !6621)
!6633 = !DILocation(line: 1209, column: 15, scope: !6621)
!6634 = !DILocation(line: 1209, column: 19, scope: !6621)
!6635 = !DILocation(line: 1209, column: 31, scope: !6621)
!6636 = !DILocation(line: 1209, column: 35, scope: !6621)
!6637 = !DILocation(line: 1209, column: 41, scope: !6621)
!6638 = !DILocation(line: 1209, column: 53, scope: !6621)
!6639 = !DILocation(line: 1209, column: 57, scope: !6621)
!6640 = !DILocation(line: 1209, column: 7, scope: !6621)
!6641 = !DILocation(line: 1210, column: 5, scope: !6621)
!6642 = !DILocation(line: 1204, column: 38, scope: !6615)
!6643 = !DILocation(line: 1204, column: 3, scope: !6615)
!6644 = distinct !{!6644, !6619, !6645}
!6645 = !DILocation(line: 1210, column: 5, scope: !6612)
!6646 = !DILocation(line: 1212, column: 7, scope: !6647)
!6647 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 1212, column: 7)
!6648 = !DILocation(line: 1212, column: 13, scope: !6647)
!6649 = !DILocation(line: 1212, column: 7, scope: !6460)
!6650 = !DILocation(line: 1214, column: 31, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 1213, column: 5)
!6652 = !DILocation(line: 1214, column: 7, scope: !6651)
!6653 = !DILocation(line: 1214, column: 11, scope: !6651)
!6654 = !DILocation(line: 1214, column: 29, scope: !6651)
!6655 = !DILocation(line: 1215, column: 20, scope: !6651)
!6656 = !DILocation(line: 1215, column: 24, scope: !6651)
!6657 = !DILocation(line: 1215, column: 7, scope: !6651)
!6658 = !DILocation(line: 1216, column: 23, scope: !6651)
!6659 = !DILocation(line: 1216, column: 27, scope: !6651)
!6660 = !DILocation(line: 1216, column: 46, scope: !6651)
!6661 = !DILocation(line: 1216, column: 52, scope: !6651)
!6662 = !DILocation(line: 1216, column: 7, scope: !6651)
!6663 = !DILocation(line: 1217, column: 5, scope: !6651)
!6664 = !DILocation(line: 1218, column: 1, scope: !6460)
!6665 = distinct !DISubprogram(name: "delete_work_stuff", scope: !3, file: !3, line: 1257, type: !1010, scopeLine: 1258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6666 = !DILocalVariable(name: "work", arg: 1, scope: !6665, file: !3, line: 1257, type: !491)
!6667 = !DILocation(line: 1257, column: 39, scope: !6665)
!6668 = !DILocation(line: 1259, column: 30, scope: !6665)
!6669 = !DILocation(line: 1259, column: 3, scope: !6665)
!6670 = !DILocation(line: 1260, column: 20, scope: !6665)
!6671 = !DILocation(line: 1260, column: 3, scope: !6665)
!6672 = !DILocation(line: 1261, column: 1, scope: !6665)
!6673 = distinct !DISubprogram(name: "delete_non_B_K_work_stuff", scope: !3, file: !3, line: 1224, type: !1010, scopeLine: 1225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6674 = !DILocalVariable(name: "work", arg: 1, scope: !6673, file: !3, line: 1224, type: !491)
!6675 = !DILocation(line: 1224, column: 47, scope: !6673)
!6676 = !DILocation(line: 1228, column: 17, scope: !6673)
!6677 = !DILocation(line: 1228, column: 3, scope: !6673)
!6678 = !DILocation(line: 1229, column: 7, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 1229, column: 7)
!6680 = !DILocation(line: 1229, column: 15, scope: !6679)
!6681 = !DILocation(line: 1229, column: 23, scope: !6679)
!6682 = !DILocation(line: 1229, column: 7, scope: !6673)
!6683 = !DILocation(line: 1231, column: 22, scope: !6684)
!6684 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1230, column: 5)
!6685 = !DILocation(line: 1231, column: 30, scope: !6684)
!6686 = !DILocation(line: 1231, column: 13, scope: !6684)
!6687 = !DILocation(line: 1231, column: 7, scope: !6684)
!6688 = !DILocation(line: 1232, column: 7, scope: !6684)
!6689 = !DILocation(line: 1232, column: 15, scope: !6684)
!6690 = !DILocation(line: 1232, column: 23, scope: !6684)
!6691 = !DILocation(line: 1233, column: 7, scope: !6684)
!6692 = !DILocation(line: 1233, column: 15, scope: !6684)
!6693 = !DILocation(line: 1233, column: 28, scope: !6684)
!6694 = !DILocation(line: 1234, column: 5, scope: !6684)
!6695 = !DILocation(line: 1235, column: 7, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 1235, column: 7)
!6697 = !DILocation(line: 1235, column: 13, scope: !6696)
!6698 = !DILocation(line: 1235, column: 7, scope: !6673)
!6699 = !DILocalVariable(name: "i", scope: !6700, file: !3, line: 1237, type: !7)
!6700 = distinct !DILexicalBlock(scope: !6696, file: !3, line: 1236, column: 5)
!6701 = !DILocation(line: 1237, column: 11, scope: !6700)
!6702 = !DILocation(line: 1239, column: 14, scope: !6703)
!6703 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 1239, column: 7)
!6704 = !DILocation(line: 1239, column: 12, scope: !6703)
!6705 = !DILocation(line: 1239, column: 19, scope: !6706)
!6706 = distinct !DILexicalBlock(scope: !6703, file: !3, line: 1239, column: 7)
!6707 = !DILocation(line: 1239, column: 23, scope: !6706)
!6708 = !DILocation(line: 1239, column: 29, scope: !6706)
!6709 = !DILocation(line: 1239, column: 21, scope: !6706)
!6710 = !DILocation(line: 1239, column: 7, scope: !6703)
!6711 = !DILocation(line: 1240, column: 6, scope: !6712)
!6712 = distinct !DILexicalBlock(scope: !6706, file: !3, line: 1240, column: 6)
!6713 = !DILocation(line: 1240, column: 12, scope: !6712)
!6714 = !DILocation(line: 1240, column: 24, scope: !6712)
!6715 = !DILocation(line: 1240, column: 6, scope: !6706)
!6716 = !DILocation(line: 1241, column: 18, scope: !6712)
!6717 = !DILocation(line: 1241, column: 24, scope: !6712)
!6718 = !DILocation(line: 1241, column: 36, scope: !6712)
!6719 = !DILocation(line: 1241, column: 4, scope: !6712)
!6720 = !DILocation(line: 1240, column: 25, scope: !6712)
!6721 = !DILocation(line: 1239, column: 42, scope: !6706)
!6722 = !DILocation(line: 1239, column: 7, scope: !6706)
!6723 = distinct !{!6723, !6710, !6724}
!6724 = !DILocation(line: 1241, column: 38, scope: !6703)
!6725 = !DILocation(line: 1243, column: 21, scope: !6700)
!6726 = !DILocation(line: 1243, column: 27, scope: !6700)
!6727 = !DILocation(line: 1243, column: 13, scope: !6700)
!6728 = !DILocation(line: 1243, column: 7, scope: !6700)
!6729 = !DILocation(line: 1244, column: 7, scope: !6700)
!6730 = !DILocation(line: 1244, column: 13, scope: !6700)
!6731 = !DILocation(line: 1244, column: 25, scope: !6700)
!6732 = !DILocation(line: 1245, column: 5, scope: !6700)
!6733 = !DILocation(line: 1246, column: 7, scope: !6734)
!6734 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 1246, column: 7)
!6735 = !DILocation(line: 1246, column: 13, scope: !6734)
!6736 = !DILocation(line: 1246, column: 7, scope: !6673)
!6737 = !DILocation(line: 1248, column: 22, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6734, file: !3, line: 1247, column: 5)
!6739 = !DILocation(line: 1248, column: 28, scope: !6738)
!6740 = !DILocation(line: 1248, column: 7, scope: !6738)
!6741 = !DILocation(line: 1249, column: 21, scope: !6738)
!6742 = !DILocation(line: 1249, column: 27, scope: !6738)
!6743 = !DILocation(line: 1249, column: 13, scope: !6738)
!6744 = !DILocation(line: 1249, column: 7, scope: !6738)
!6745 = !DILocation(line: 1250, column: 7, scope: !6738)
!6746 = !DILocation(line: 1250, column: 13, scope: !6738)
!6747 = !DILocation(line: 1250, column: 31, scope: !6738)
!6748 = !DILocation(line: 1251, column: 5, scope: !6738)
!6749 = !DILocation(line: 1252, column: 1, scope: !6673)
!6750 = distinct !DISubprogram(name: "forget_types", scope: !3, file: !3, line: 4270, type: !1010, scopeLine: 4271, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6751 = !DILocalVariable(name: "work", arg: 1, scope: !6750, file: !3, line: 4270, type: !491)
!6752 = !DILocation(line: 4270, column: 34, scope: !6750)
!6753 = !DILocalVariable(name: "i", scope: !6750, file: !3, line: 4272, type: !7)
!6754 = !DILocation(line: 4272, column: 7, scope: !6750)
!6755 = !DILocation(line: 4274, column: 3, scope: !6750)
!6756 = !DILocation(line: 4274, column: 10, scope: !6750)
!6757 = !DILocation(line: 4274, column: 18, scope: !6750)
!6758 = !DILocation(line: 4274, column: 25, scope: !6750)
!6759 = !DILocation(line: 4276, column: 14, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6750, file: !3, line: 4275, column: 5)
!6761 = !DILocation(line: 4276, column: 22, scope: !6760)
!6762 = !DILocation(line: 4276, column: 11, scope: !6760)
!6763 = !DILocation(line: 4276, column: 9, scope: !6760)
!6764 = !DILocation(line: 4277, column: 11, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !6760, file: !3, line: 4277, column: 11)
!6766 = !DILocation(line: 4277, column: 19, scope: !6765)
!6767 = !DILocation(line: 4277, column: 27, scope: !6765)
!6768 = !DILocation(line: 4277, column: 30, scope: !6765)
!6769 = !DILocation(line: 4277, column: 11, scope: !6760)
!6770 = !DILocation(line: 4279, column: 10, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6765, file: !3, line: 4278, column: 2)
!6772 = !DILocation(line: 4279, column: 18, scope: !6771)
!6773 = !DILocation(line: 4279, column: 26, scope: !6771)
!6774 = !DILocation(line: 4279, column: 4, scope: !6771)
!6775 = !DILocation(line: 4280, column: 4, scope: !6771)
!6776 = !DILocation(line: 4280, column: 12, scope: !6771)
!6777 = !DILocation(line: 4280, column: 20, scope: !6771)
!6778 = !DILocation(line: 4280, column: 23, scope: !6771)
!6779 = !DILocation(line: 4281, column: 2, scope: !6771)
!6780 = distinct !{!6780, !6755, !6781}
!6781 = !DILocation(line: 4282, column: 5, scope: !6750)
!6782 = !DILocation(line: 4283, column: 1, scope: !6750)
!6783 = distinct !DISubprogram(name: "remember_type", scope: !3, file: !3, line: 4145, type: !4142, scopeLine: 4146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6784 = !DILocalVariable(name: "work", arg: 1, scope: !6783, file: !3, line: 4145, type: !491)
!6785 = !DILocation(line: 4145, column: 35, scope: !6783)
!6786 = !DILocalVariable(name: "start", arg: 2, scope: !6783, file: !3, line: 4145, type: !76)
!6787 = !DILocation(line: 4145, column: 53, scope: !6783)
!6788 = !DILocalVariable(name: "len", arg: 3, scope: !6783, file: !3, line: 4145, type: !7)
!6789 = !DILocation(line: 4145, column: 64, scope: !6783)
!6790 = !DILocalVariable(name: "tem", scope: !6783, file: !3, line: 4147, type: !52)
!6791 = !DILocation(line: 4147, column: 9, scope: !6783)
!6792 = !DILocation(line: 4149, column: 7, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 4149, column: 7)
!6794 = !DILocation(line: 4149, column: 13, scope: !6793)
!6795 = !DILocation(line: 4149, column: 7, scope: !6783)
!6796 = !DILocation(line: 4150, column: 5, scope: !6793)
!6797 = !DILocation(line: 4152, column: 7, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 4152, column: 7)
!6799 = !DILocation(line: 4152, column: 15, scope: !6798)
!6800 = !DILocation(line: 4152, column: 25, scope: !6798)
!6801 = !DILocation(line: 4152, column: 33, scope: !6798)
!6802 = !DILocation(line: 4152, column: 22, scope: !6798)
!6803 = !DILocation(line: 4152, column: 7, scope: !6783)
!6804 = !DILocation(line: 4154, column: 11, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6806, file: !3, line: 4154, column: 11)
!6806 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 4153, column: 5)
!6807 = !DILocation(line: 4154, column: 19, scope: !6805)
!6808 = !DILocation(line: 4154, column: 32, scope: !6805)
!6809 = !DILocation(line: 4154, column: 11, scope: !6806)
!6810 = !DILocation(line: 4156, column: 4, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !6805, file: !3, line: 4155, column: 2)
!6812 = !DILocation(line: 4156, column: 12, scope: !6811)
!6813 = !DILocation(line: 4156, column: 25, scope: !6811)
!6814 = !DILocation(line: 4157, column: 22, scope: !6811)
!6815 = !DILocation(line: 4157, column: 4, scope: !6811)
!6816 = !DILocation(line: 4157, column: 12, scope: !6811)
!6817 = !DILocation(line: 4157, column: 20, scope: !6811)
!6818 = !DILocation(line: 4158, column: 2, scope: !6811)
!6819 = !DILocation(line: 4161, column: 4, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6805, file: !3, line: 4160, column: 2)
!6821 = !DILocation(line: 4161, column: 12, scope: !6820)
!6822 = !DILocation(line: 4161, column: 25, scope: !6820)
!6823 = !DILocation(line: 4163, column: 8, scope: !6820)
!6824 = !DILocation(line: 4162, column: 4, scope: !6820)
!6825 = !DILocation(line: 4162, column: 12, scope: !6820)
!6826 = !DILocation(line: 4163, column: 6, scope: !6820)
!6827 = !DILocation(line: 4165, column: 5, scope: !6806)
!6828 = !DILocation(line: 4166, column: 9, scope: !6783)
!6829 = !DILocation(line: 4166, column: 7, scope: !6783)
!6830 = !DILocation(line: 4167, column: 11, scope: !6783)
!6831 = !DILocation(line: 4167, column: 16, scope: !6783)
!6832 = !DILocation(line: 4167, column: 23, scope: !6783)
!6833 = !DILocation(line: 4167, column: 3, scope: !6783)
!6834 = !DILocation(line: 4168, column: 3, scope: !6783)
!6835 = !DILocation(line: 4168, column: 7, scope: !6783)
!6836 = !DILocation(line: 4168, column: 12, scope: !6783)
!6837 = !DILocation(line: 4169, column: 39, scope: !6783)
!6838 = !DILocation(line: 4169, column: 3, scope: !6783)
!6839 = !DILocation(line: 4169, column: 11, scope: !6783)
!6840 = !DILocation(line: 4169, column: 19, scope: !6783)
!6841 = !DILocation(line: 4169, column: 27, scope: !6783)
!6842 = !DILocation(line: 4169, column: 33, scope: !6783)
!6843 = !DILocation(line: 4169, column: 37, scope: !6783)
!6844 = !DILocation(line: 4170, column: 1, scope: !6783)
!6845 = distinct !DISubprogram(name: "code_for_qualifier", scope: !3, file: !3, line: 560, type: !6846, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6846 = !DISubroutineType(types: !6847)
!6847 = !{!7, !7}
!6848 = !DILocalVariable(name: "c", arg: 1, scope: !6845, file: !3, line: 560, type: !7)
!6849 = !DILocation(line: 560, column: 25, scope: !6845)
!6850 = !DILocation(line: 562, column: 11, scope: !6845)
!6851 = !DILocation(line: 562, column: 3, scope: !6845)
!6852 = !DILocation(line: 565, column: 7, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 563, column: 5)
!6854 = !DILocation(line: 568, column: 7, scope: !6853)
!6855 = !DILocation(line: 571, column: 7, scope: !6853)
!6856 = !DILocation(line: 574, column: 7, scope: !6853)
!6857 = !DILocation(line: 578, column: 3, scope: !6845)
!6858 = !DILocation(line: 579, column: 1, scope: !6845)
!6859 = distinct !DISubprogram(name: "demangle_class", scope: !3, file: !3, line: 2493, type: !489, scopeLine: 2494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6860 = !DILocalVariable(name: "work", arg: 1, scope: !6859, file: !3, line: 2493, type: !491)
!6861 = !DILocation(line: 2493, column: 36, scope: !6859)
!6862 = !DILocalVariable(name: "mangled", arg: 2, scope: !6859, file: !3, line: 2493, type: !492)
!6863 = !DILocation(line: 2493, column: 55, scope: !6859)
!6864 = !DILocalVariable(name: "declp", arg: 3, scope: !6859, file: !3, line: 2493, type: !60)
!6865 = !DILocation(line: 2493, column: 72, scope: !6859)
!6866 = !DILocalVariable(name: "success", scope: !6859, file: !3, line: 2495, type: !7)
!6867 = !DILocation(line: 2495, column: 7, scope: !6859)
!6868 = !DILocalVariable(name: "btype", scope: !6859, file: !3, line: 2496, type: !7)
!6869 = !DILocation(line: 2496, column: 7, scope: !6859)
!6870 = !DILocalVariable(name: "class_name", scope: !6859, file: !3, line: 2497, type: !61)
!6871 = !DILocation(line: 2497, column: 10, scope: !6859)
!6872 = !DILocalVariable(name: "save_class_name_end", scope: !6859, file: !3, line: 2498, type: !52)
!6873 = !DILocation(line: 2498, column: 9, scope: !6859)
!6874 = !DILocation(line: 2500, column: 3, scope: !6859)
!6875 = !DILocation(line: 2501, column: 27, scope: !6859)
!6876 = !DILocation(line: 2501, column: 11, scope: !6859)
!6877 = !DILocation(line: 2501, column: 9, scope: !6859)
!6878 = !DILocation(line: 2502, column: 28, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6859, file: !3, line: 2502, column: 7)
!6880 = !DILocation(line: 2502, column: 34, scope: !6879)
!6881 = !DILocation(line: 2502, column: 7, scope: !6879)
!6882 = !DILocation(line: 2502, column: 7, scope: !6859)
!6883 = !DILocation(line: 2504, column: 40, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6879, file: !3, line: 2503, column: 5)
!6885 = !DILocation(line: 2504, column: 27, scope: !6884)
!6886 = !DILocation(line: 2505, column: 12, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6884, file: !3, line: 2505, column: 11)
!6888 = !DILocation(line: 2505, column: 18, scope: !6887)
!6889 = !DILocation(line: 2505, column: 30, scope: !6887)
!6890 = !DILocation(line: 2505, column: 35, scope: !6887)
!6891 = !DILocation(line: 2505, column: 39, scope: !6887)
!6892 = !DILocation(line: 2505, column: 45, scope: !6887)
!6893 = !DILocation(line: 2505, column: 56, scope: !6887)
!6894 = !DILocation(line: 2505, column: 11, scope: !6884)
!6895 = !DILocation(line: 2508, column: 15, scope: !6896)
!6896 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2508, column: 15)
!6897 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 2506, column: 2)
!6898 = !DILocation(line: 2508, column: 21, scope: !6896)
!6899 = !DILocation(line: 2508, column: 32, scope: !6896)
!6900 = !DILocation(line: 2508, column: 36, scope: !6896)
!6901 = !DILocation(line: 2508, column: 42, scope: !6896)
!6902 = !DILocation(line: 2508, column: 53, scope: !6896)
!6903 = !DILocation(line: 2508, column: 15, scope: !6897)
!6904 = !DILocation(line: 2510, column: 41, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6896, file: !3, line: 2509, column: 13)
!6906 = !DILocation(line: 2510, column: 45, scope: !6905)
!6907 = !DILocation(line: 2510, column: 51, scope: !6905)
!6908 = !DILocation(line: 2510, column: 43, scope: !6905)
!6909 = !DILocation(line: 2510, column: 26, scope: !6905)
!6910 = !DILocation(line: 2510, column: 28, scope: !6905)
!6911 = !DILocation(line: 2511, column: 13, scope: !6905)
!6912 = !DILocation(line: 2512, column: 21, scope: !6897)
!6913 = !DILocation(line: 2512, column: 4, scope: !6897)
!6914 = !DILocation(line: 2513, column: 8, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 2513, column: 8)
!6916 = !DILocation(line: 2513, column: 16, scope: !6915)
!6917 = !DILocation(line: 2513, column: 27, scope: !6915)
!6918 = !DILocation(line: 2513, column: 8, scope: !6897)
!6919 = !DILocation(line: 2515, column: 24, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2514, column: 6)
!6921 = !DILocation(line: 2515, column: 8, scope: !6920)
!6922 = !DILocation(line: 2516, column: 15, scope: !6920)
!6923 = !DILocation(line: 2516, column: 23, scope: !6920)
!6924 = !DILocation(line: 2516, column: 34, scope: !6920)
!6925 = !DILocation(line: 2517, column: 6, scope: !6920)
!6926 = !DILocation(line: 2520, column: 8, scope: !6927)
!6927 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2519, column: 6)
!6928 = !DILocation(line: 2520, column: 16, scope: !6927)
!6929 = !DILocation(line: 2520, column: 28, scope: !6927)
!6930 = !DILocation(line: 2522, column: 2, scope: !6897)
!6931 = !DILocation(line: 2523, column: 22, scope: !6884)
!6932 = !DILocation(line: 2523, column: 18, scope: !6884)
!6933 = !DILocation(line: 2523, column: 20, scope: !6884)
!6934 = !DILocation(line: 2524, column: 23, scope: !6884)
!6935 = !DILocation(line: 2524, column: 40, scope: !6884)
!6936 = !DILocation(line: 2524, column: 43, scope: !6884)
!6937 = !DILocation(line: 2524, column: 7, scope: !6884)
!6938 = !DILocation(line: 2525, column: 23, scope: !6884)
!6939 = !DILocation(line: 2525, column: 40, scope: !6884)
!6940 = !DILocation(line: 2525, column: 43, scope: !6884)
!6941 = !DILocation(line: 2525, column: 68, scope: !6884)
!6942 = !DILocation(line: 2525, column: 7, scope: !6884)
!6943 = !DILocation(line: 2526, column: 23, scope: !6884)
!6944 = !DILocation(line: 2526, column: 30, scope: !6884)
!6945 = !DILocation(line: 2526, column: 7, scope: !6884)
!6946 = !DILocation(line: 2527, column: 24, scope: !6884)
!6947 = !DILocation(line: 2527, column: 7, scope: !6884)
!6948 = !DILocation(line: 2528, column: 15, scope: !6884)
!6949 = !DILocation(line: 2529, column: 5, scope: !6884)
!6950 = !DILocation(line: 2530, column: 3, scope: !6859)
!6951 = !DILocation(line: 2531, column: 11, scope: !6859)
!6952 = !DILocation(line: 2531, column: 3, scope: !6859)
!6953 = distinct !DISubprogram(name: "demangle_args", scope: !3, file: !3, line: 4328, type: !489, scopeLine: 4330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!6954 = !DILocalVariable(name: "work", arg: 1, scope: !6953, file: !3, line: 4328, type: !491)
!6955 = !DILocation(line: 4328, column: 35, scope: !6953)
!6956 = !DILocalVariable(name: "mangled", arg: 2, scope: !6953, file: !3, line: 4328, type: !492)
!6957 = !DILocation(line: 4328, column: 54, scope: !6953)
!6958 = !DILocalVariable(name: "declp", arg: 3, scope: !6953, file: !3, line: 4329, type: !60)
!6959 = !DILocation(line: 4329, column: 24, scope: !6953)
!6960 = !DILocalVariable(name: "arg", scope: !6953, file: !3, line: 4331, type: !61)
!6961 = !DILocation(line: 4331, column: 10, scope: !6953)
!6962 = !DILocalVariable(name: "need_comma", scope: !6953, file: !3, line: 4332, type: !7)
!6963 = !DILocation(line: 4332, column: 7, scope: !6953)
!6964 = !DILocalVariable(name: "r", scope: !6953, file: !3, line: 4333, type: !7)
!6965 = !DILocation(line: 4333, column: 7, scope: !6953)
!6966 = !DILocalVariable(name: "t", scope: !6953, file: !3, line: 4334, type: !7)
!6967 = !DILocation(line: 4334, column: 7, scope: !6953)
!6968 = !DILocalVariable(name: "tem", scope: !6953, file: !3, line: 4335, type: !76)
!6969 = !DILocation(line: 4335, column: 15, scope: !6953)
!6970 = !DILocalVariable(name: "temptype", scope: !6953, file: !3, line: 4336, type: !53)
!6971 = !DILocation(line: 4336, column: 8, scope: !6953)
!6972 = !DILocation(line: 4338, column: 7, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 4338, column: 7)
!6974 = !DILocation(line: 4338, column: 7, scope: !6953)
!6975 = !DILocation(line: 4340, column: 22, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 4339, column: 5)
!6977 = !DILocation(line: 4340, column: 7, scope: !6976)
!6978 = !DILocation(line: 4341, column: 13, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6976, file: !3, line: 4341, column: 11)
!6980 = !DILocation(line: 4341, column: 12, scope: !6979)
!6981 = !DILocation(line: 4341, column: 11, scope: !6979)
!6982 = !DILocation(line: 4341, column: 21, scope: !6979)
!6983 = !DILocation(line: 4341, column: 11, scope: !6976)
!6984 = !DILocation(line: 4343, column: 19, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6979, file: !3, line: 4342, column: 2)
!6986 = !DILocation(line: 4343, column: 4, scope: !6985)
!6987 = !DILocation(line: 4344, column: 2, scope: !6985)
!6988 = !DILocation(line: 4345, column: 5, scope: !6976)
!6989 = !DILocation(line: 4347, column: 3, scope: !6953)
!6990 = !DILocation(line: 4347, column: 13, scope: !6953)
!6991 = !DILocation(line: 4347, column: 12, scope: !6953)
!6992 = !DILocation(line: 4347, column: 11, scope: !6953)
!6993 = !DILocation(line: 4347, column: 21, scope: !6953)
!6994 = !DILocation(line: 4347, column: 28, scope: !6953)
!6995 = !DILocation(line: 4347, column: 33, scope: !6953)
!6996 = !DILocation(line: 4347, column: 32, scope: !6953)
!6997 = !DILocation(line: 4347, column: 31, scope: !6953)
!6998 = !DILocation(line: 4347, column: 41, scope: !6953)
!6999 = !DILocation(line: 4347, column: 49, scope: !6953)
!7000 = !DILocation(line: 4347, column: 54, scope: !6953)
!7001 = !DILocation(line: 4347, column: 53, scope: !6953)
!7002 = !DILocation(line: 4347, column: 52, scope: !6953)
!7003 = !DILocation(line: 4347, column: 62, scope: !6953)
!7004 = !DILocation(line: 4348, column: 3, scope: !6953)
!7005 = !DILocation(line: 4348, column: 6, scope: !6953)
!7006 = !DILocation(line: 4348, column: 12, scope: !6953)
!7007 = !DILocation(line: 4348, column: 21, scope: !6953)
!7008 = !DILocation(line: 4350, column: 14, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 4350, column: 11)
!7010 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 4349, column: 5)
!7011 = !DILocation(line: 4350, column: 13, scope: !7009)
!7012 = !DILocation(line: 4350, column: 12, scope: !7009)
!7013 = !DILocation(line: 4350, column: 22, scope: !7009)
!7014 = !DILocation(line: 4350, column: 30, scope: !7009)
!7015 = !DILocation(line: 4350, column: 36, scope: !7009)
!7016 = !DILocation(line: 4350, column: 35, scope: !7009)
!7017 = !DILocation(line: 4350, column: 34, scope: !7009)
!7018 = !DILocation(line: 4350, column: 44, scope: !7009)
!7019 = !DILocation(line: 4350, column: 11, scope: !7010)
!7020 = !DILocation(line: 4352, column: 18, scope: !7021)
!7021 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 4351, column: 2)
!7022 = !DILocation(line: 4352, column: 26, scope: !7021)
!7023 = !DILocation(line: 4352, column: 15, scope: !7021)
!7024 = !DILocation(line: 4352, column: 13, scope: !7021)
!7025 = !DILocation(line: 4354, column: 8, scope: !7026)
!7026 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 4354, column: 8)
!7027 = !DILocation(line: 4354, column: 17, scope: !7026)
!7028 = !DILocation(line: 4354, column: 8, scope: !7021)
!7029 = !DILocation(line: 4356, column: 24, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !7031, file: !3, line: 4356, column: 12)
!7031 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 4355, column: 6)
!7032 = !DILocation(line: 4356, column: 13, scope: !7030)
!7033 = !DILocation(line: 4356, column: 12, scope: !7031)
!7034 = !DILocation(line: 4358, column: 5, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 4357, column: 3)
!7036 = !DILocation(line: 4360, column: 6, scope: !7031)
!7037 = !DILocation(line: 4363, column: 10, scope: !7038)
!7038 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 4362, column: 6)
!7039 = !DILocation(line: 4365, column: 16, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 4365, column: 15)
!7041 = !DILocation(line: 4365, column: 30, scope: !7040)
!7042 = !DILocation(line: 4365, column: 33, scope: !7040)
!7043 = !DILocation(line: 4365, column: 48, scope: !7040)
!7044 = !DILocation(line: 4365, column: 51, scope: !7040)
!7045 = !DILocation(line: 4365, column: 67, scope: !7040)
!7046 = !DILocation(line: 4365, column: 70, scope: !7040)
!7047 = !DILocation(line: 4365, column: 78, scope: !7040)
!7048 = !DILocation(line: 4365, column: 85, scope: !7040)
!7049 = !DILocation(line: 4365, column: 15, scope: !7021)
!7050 = !DILocation(line: 4373, column: 38, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 4373, column: 19)
!7052 = distinct !DILexicalBlock(scope: !7040, file: !3, line: 4366, column: 13)
!7053 = !DILocation(line: 4373, column: 24, scope: !7051)
!7054 = !DILocation(line: 4373, column: 22, scope: !7051)
!7055 = !DILocation(line: 4373, column: 48, scope: !7051)
!7056 = !DILocation(line: 4373, column: 19, scope: !7052)
!7057 = !DILocation(line: 4375, column: 19, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7051, file: !3, line: 4374, column: 17)
!7059 = !DILocation(line: 4377, column: 13, scope: !7052)
!7060 = !DILocation(line: 4380, column: 24, scope: !7061)
!7061 = distinct !DILexicalBlock(scope: !7062, file: !3, line: 4380, column: 12)
!7062 = distinct !DILexicalBlock(scope: !7040, file: !3, line: 4379, column: 6)
!7063 = !DILocation(line: 4380, column: 13, scope: !7061)
!7064 = !DILocation(line: 4380, column: 12, scope: !7062)
!7065 = !DILocation(line: 4382, column: 12, scope: !7066)
!7066 = distinct !DILexicalBlock(scope: !7061, file: !3, line: 4381, column: 7)
!7067 = !DILocation(line: 4385, column: 8, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 4385, column: 8)
!7069 = !DILocation(line: 4385, column: 25, scope: !7068)
!7070 = !DILocation(line: 4385, column: 28, scope: !7068)
!7071 = !DILocation(line: 4385, column: 43, scope: !7068)
!7072 = !DILocation(line: 4385, column: 46, scope: !7068)
!7073 = !DILocation(line: 4385, column: 60, scope: !7068)
!7074 = !DILocation(line: 4385, column: 63, scope: !7068)
!7075 = !DILocation(line: 4385, column: 8, scope: !7021)
!7076 = !DILocation(line: 4387, column: 9, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 4386, column: 6)
!7078 = !DILocation(line: 4388, column: 6, scope: !7077)
!7079 = !DILocation(line: 4391, column: 9, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 4391, column: 8)
!7081 = !DILocation(line: 4391, column: 11, scope: !7080)
!7082 = !DILocation(line: 4391, column: 16, scope: !7080)
!7083 = !DILocation(line: 4391, column: 20, scope: !7080)
!7084 = !DILocation(line: 4391, column: 25, scope: !7080)
!7085 = !DILocation(line: 4391, column: 33, scope: !7080)
!7086 = !DILocation(line: 4391, column: 22, scope: !7080)
!7087 = !DILocation(line: 4391, column: 8, scope: !7021)
!7088 = !DILocation(line: 4393, column: 8, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 4392, column: 6)
!7090 = !DILocation(line: 4395, column: 4, scope: !7021)
!7091 = !DILocation(line: 4395, column: 11, scope: !7021)
!7092 = !DILocation(line: 4395, column: 17, scope: !7021)
!7093 = !DILocation(line: 4395, column: 26, scope: !7021)
!7094 = !DILocation(line: 4395, column: 30, scope: !7021)
!7095 = !DILocation(line: 4395, column: 33, scope: !7021)
!7096 = !DILocation(line: 4395, column: 37, scope: !7021)
!7097 = !DILocation(line: 4397, column: 14, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 4396, column: 6)
!7099 = !DILocation(line: 4397, column: 22, scope: !7098)
!7100 = !DILocation(line: 4397, column: 30, scope: !7098)
!7101 = !DILocation(line: 4397, column: 12, scope: !7098)
!7102 = !DILocation(line: 4398, column: 12, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 4398, column: 12)
!7104 = !DILocation(line: 4398, column: 23, scope: !7103)
!7105 = !DILocation(line: 4398, column: 26, scope: !7103)
!7106 = !DILocation(line: 4398, column: 12, scope: !7098)
!7107 = !DILocation(line: 4400, column: 20, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 4399, column: 3)
!7109 = !DILocation(line: 4400, column: 5, scope: !7108)
!7110 = !DILocation(line: 4401, column: 3, scope: !7108)
!7111 = !DILocation(line: 4402, column: 21, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 4402, column: 12)
!7113 = !DILocation(line: 4402, column: 13, scope: !7112)
!7114 = !DILocation(line: 4402, column: 12, scope: !7098)
!7115 = !DILocation(line: 4404, column: 5, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7112, file: !3, line: 4403, column: 3)
!7117 = !DILocation(line: 4406, column: 12, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 4406, column: 12)
!7119 = !DILocation(line: 4406, column: 12, scope: !7098)
!7120 = !DILocation(line: 4408, column: 21, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 4407, column: 3)
!7122 = !DILocation(line: 4408, column: 5, scope: !7121)
!7123 = !DILocation(line: 4409, column: 3, scope: !7121)
!7124 = !DILocation(line: 4410, column: 8, scope: !7098)
!7125 = !DILocation(line: 4411, column: 19, scope: !7098)
!7126 = distinct !{!7126, !7090, !7127}
!7127 = !DILocation(line: 4412, column: 6, scope: !7021)
!7128 = !DILocation(line: 4413, column: 2, scope: !7021)
!7129 = !DILocation(line: 4416, column: 8, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 4416, column: 8)
!7131 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 4415, column: 2)
!7132 = !DILocation(line: 4416, column: 19, scope: !7130)
!7133 = !DILocation(line: 4416, column: 22, scope: !7130)
!7134 = !DILocation(line: 4416, column: 8, scope: !7131)
!7135 = !DILocation(line: 4417, column: 21, scope: !7130)
!7136 = !DILocation(line: 4417, column: 6, scope: !7130)
!7137 = !DILocation(line: 4418, column: 17, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 4418, column: 8)
!7139 = !DILocation(line: 4418, column: 23, scope: !7138)
!7140 = !DILocation(line: 4418, column: 9, scope: !7138)
!7141 = !DILocation(line: 4418, column: 8, scope: !7131)
!7142 = !DILocation(line: 4419, column: 6, scope: !7138)
!7143 = !DILocation(line: 4420, column: 8, scope: !7144)
!7144 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 4420, column: 8)
!7145 = !DILocation(line: 4420, column: 8, scope: !7131)
!7146 = !DILocation(line: 4421, column: 22, scope: !7144)
!7147 = !DILocation(line: 4421, column: 6, scope: !7144)
!7148 = !DILocation(line: 4422, column: 4, scope: !7131)
!7149 = !DILocation(line: 4423, column: 15, scope: !7131)
!7150 = distinct !{!7150, !6989, !7151}
!7151 = !DILocation(line: 4425, column: 5, scope: !6953)
!7152 = !DILocation(line: 4427, column: 9, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 4427, column: 7)
!7154 = !DILocation(line: 4427, column: 8, scope: !7153)
!7155 = !DILocation(line: 4427, column: 7, scope: !7153)
!7156 = !DILocation(line: 4427, column: 17, scope: !7153)
!7157 = !DILocation(line: 4427, column: 7, scope: !6953)
!7158 = !DILocation(line: 4429, column: 9, scope: !7159)
!7159 = distinct !DILexicalBlock(scope: !7153, file: !3, line: 4428, column: 5)
!7160 = !DILocation(line: 4429, column: 17, scope: !7159)
!7161 = !DILocation(line: 4430, column: 11, scope: !7162)
!7162 = distinct !DILexicalBlock(scope: !7159, file: !3, line: 4430, column: 11)
!7163 = !DILocation(line: 4430, column: 11, scope: !7159)
!7164 = !DILocation(line: 4432, column: 8, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7166, file: !3, line: 4432, column: 8)
!7166 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 4431, column: 2)
!7167 = !DILocation(line: 4432, column: 8, scope: !7166)
!7168 = !DILocation(line: 4434, column: 23, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7165, file: !3, line: 4433, column: 6)
!7170 = !DILocation(line: 4434, column: 8, scope: !7169)
!7171 = !DILocation(line: 4435, column: 6, scope: !7169)
!7172 = !DILocation(line: 4436, column: 19, scope: !7166)
!7173 = !DILocation(line: 4436, column: 4, scope: !7166)
!7174 = !DILocation(line: 4437, column: 2, scope: !7166)
!7175 = !DILocation(line: 4438, column: 5, scope: !7159)
!7176 = !DILocation(line: 4440, column: 7, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 4440, column: 7)
!7178 = !DILocation(line: 4440, column: 7, scope: !6953)
!7179 = !DILocation(line: 4442, column: 22, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 4441, column: 5)
!7181 = !DILocation(line: 4442, column: 7, scope: !7180)
!7182 = !DILocation(line: 4443, column: 5, scope: !7180)
!7183 = !DILocation(line: 4444, column: 3, scope: !6953)
!7184 = !DILocation(line: 4445, column: 1, scope: !6953)
!7185 = distinct !DISubprogram(name: "qualifier_string", scope: !3, file: !3, line: 585, type: !7186, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7186 = !DISubroutineType(types: !7187)
!7187 = !{!76, !7}
!7188 = !DILocalVariable(name: "type_quals", arg: 1, scope: !7185, file: !3, line: 585, type: !7)
!7189 = !DILocation(line: 585, column: 23, scope: !7185)
!7190 = !DILocation(line: 587, column: 11, scope: !7185)
!7191 = !DILocation(line: 587, column: 3, scope: !7185)
!7192 = !DILocation(line: 590, column: 7, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 588, column: 5)
!7194 = !DILocation(line: 593, column: 7, scope: !7193)
!7195 = !DILocation(line: 596, column: 7, scope: !7193)
!7196 = !DILocation(line: 599, column: 7, scope: !7193)
!7197 = !DILocation(line: 602, column: 7, scope: !7193)
!7198 = !DILocation(line: 605, column: 7, scope: !7193)
!7199 = !DILocation(line: 608, column: 7, scope: !7193)
!7200 = !DILocation(line: 611, column: 7, scope: !7193)
!7201 = !DILocation(line: 614, column: 7, scope: !7193)
!7202 = !DILocation(line: 618, column: 3, scope: !7185)
!7203 = !DILocation(line: 619, column: 1, scope: !7185)
!7204 = distinct !DISubprogram(name: "demangle_class_name", scope: !3, file: !3, line: 2439, type: !489, scopeLine: 2441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7205 = !DILocalVariable(name: "work", arg: 1, scope: !7204, file: !3, line: 2439, type: !491)
!7206 = !DILocation(line: 2439, column: 41, scope: !7204)
!7207 = !DILocalVariable(name: "mangled", arg: 2, scope: !7204, file: !3, line: 2439, type: !492)
!7208 = !DILocation(line: 2439, column: 60, scope: !7204)
!7209 = !DILocalVariable(name: "declp", arg: 3, scope: !7204, file: !3, line: 2440, type: !60)
!7210 = !DILocation(line: 2440, column: 30, scope: !7204)
!7211 = !DILocalVariable(name: "n", scope: !7204, file: !3, line: 2442, type: !7)
!7212 = !DILocation(line: 2442, column: 7, scope: !7204)
!7213 = !DILocalVariable(name: "success", scope: !7204, file: !3, line: 2443, type: !7)
!7214 = !DILocation(line: 2443, column: 7, scope: !7204)
!7215 = !DILocation(line: 2445, column: 22, scope: !7204)
!7216 = !DILocation(line: 2445, column: 7, scope: !7204)
!7217 = !DILocation(line: 2445, column: 5, scope: !7204)
!7218 = !DILocation(line: 2446, column: 7, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 2446, column: 7)
!7220 = !DILocation(line: 2446, column: 9, scope: !7219)
!7221 = !DILocation(line: 2446, column: 7, scope: !7204)
!7222 = !DILocation(line: 2447, column: 5, scope: !7219)
!7223 = !DILocation(line: 2448, column: 22, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 2448, column: 7)
!7225 = !DILocation(line: 2448, column: 21, scope: !7224)
!7226 = !DILocation(line: 2448, column: 13, scope: !7224)
!7227 = !DILocation(line: 2448, column: 7, scope: !7224)
!7228 = !DILocation(line: 2448, column: 34, scope: !7224)
!7229 = !DILocation(line: 2448, column: 31, scope: !7224)
!7230 = !DILocation(line: 2448, column: 7, scope: !7204)
!7231 = !DILocation(line: 2450, column: 33, scope: !7232)
!7232 = distinct !DILexicalBlock(scope: !7224, file: !3, line: 2449, column: 5)
!7233 = !DILocation(line: 2450, column: 39, scope: !7232)
!7234 = !DILocation(line: 2450, column: 48, scope: !7232)
!7235 = !DILocation(line: 2450, column: 51, scope: !7232)
!7236 = !DILocation(line: 2450, column: 7, scope: !7232)
!7237 = !DILocation(line: 2451, column: 15, scope: !7232)
!7238 = !DILocation(line: 2452, column: 5, scope: !7232)
!7239 = !DILocation(line: 2454, column: 11, scope: !7204)
!7240 = !DILocation(line: 2454, column: 3, scope: !7204)
!7241 = !DILocation(line: 2455, column: 1, scope: !7204)
!7242 = distinct !DISubprogram(name: "do_arg", scope: !3, file: !3, line: 4082, type: !489, scopeLine: 4083, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7243 = !DILocalVariable(name: "work", arg: 1, scope: !7242, file: !3, line: 4082, type: !491)
!7244 = !DILocation(line: 4082, column: 28, scope: !7242)
!7245 = !DILocalVariable(name: "mangled", arg: 2, scope: !7242, file: !3, line: 4082, type: !492)
!7246 = !DILocation(line: 4082, column: 47, scope: !7242)
!7247 = !DILocalVariable(name: "result", arg: 3, scope: !7242, file: !3, line: 4082, type: !60)
!7248 = !DILocation(line: 4082, column: 64, scope: !7242)
!7249 = !DILocalVariable(name: "start", scope: !7242, file: !3, line: 4086, type: !76)
!7250 = !DILocation(line: 4086, column: 15, scope: !7242)
!7251 = !DILocation(line: 4086, column: 24, scope: !7242)
!7252 = !DILocation(line: 4086, column: 23, scope: !7242)
!7253 = !DILocation(line: 4088, column: 16, scope: !7242)
!7254 = !DILocation(line: 4088, column: 3, scope: !7242)
!7255 = !DILocation(line: 4090, column: 7, scope: !7256)
!7256 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 4090, column: 7)
!7257 = !DILocation(line: 4090, column: 13, scope: !7256)
!7258 = !DILocation(line: 4090, column: 22, scope: !7256)
!7259 = !DILocation(line: 4090, column: 7, scope: !7242)
!7260 = !DILocation(line: 4092, column: 9, scope: !7261)
!7261 = distinct !DILexicalBlock(scope: !7256, file: !3, line: 4091, column: 5)
!7262 = !DILocation(line: 4092, column: 15, scope: !7261)
!7263 = !DILocation(line: 4092, column: 7, scope: !7261)
!7264 = !DILocation(line: 4094, column: 11, scope: !7265)
!7265 = distinct !DILexicalBlock(scope: !7261, file: !3, line: 4094, column: 11)
!7266 = !DILocation(line: 4094, column: 17, scope: !7265)
!7267 = !DILocation(line: 4094, column: 35, scope: !7265)
!7268 = !DILocation(line: 4094, column: 11, scope: !7261)
!7269 = !DILocation(line: 4095, column: 2, scope: !7265)
!7270 = !DILocation(line: 4098, column: 23, scope: !7261)
!7271 = !DILocation(line: 4098, column: 31, scope: !7261)
!7272 = !DILocation(line: 4098, column: 37, scope: !7261)
!7273 = !DILocation(line: 4098, column: 7, scope: !7261)
!7274 = !DILocation(line: 4099, column: 7, scope: !7261)
!7275 = !DILocation(line: 4102, column: 9, scope: !7276)
!7276 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 4102, column: 7)
!7277 = !DILocation(line: 4102, column: 8, scope: !7276)
!7278 = !DILocation(line: 4102, column: 7, scope: !7276)
!7279 = !DILocation(line: 4102, column: 17, scope: !7276)
!7280 = !DILocation(line: 4102, column: 7, scope: !7242)
!7281 = !DILocation(line: 4105, column: 9, scope: !7282)
!7282 = distinct !DILexicalBlock(scope: !7276, file: !3, line: 4103, column: 5)
!7283 = !DILocation(line: 4105, column: 17, scope: !7282)
!7284 = !DILocation(line: 4106, column: 38, scope: !7282)
!7285 = !DILocation(line: 4106, column: 24, scope: !7282)
!7286 = !DILocation(line: 4106, column: 7, scope: !7282)
!7287 = !DILocation(line: 4106, column: 13, scope: !7282)
!7288 = !DILocation(line: 4106, column: 22, scope: !7282)
!7289 = !DILocation(line: 4108, column: 11, scope: !7290)
!7290 = distinct !DILexicalBlock(scope: !7282, file: !3, line: 4108, column: 11)
!7291 = !DILocation(line: 4108, column: 17, scope: !7290)
!7292 = !DILocation(line: 4108, column: 26, scope: !7290)
!7293 = !DILocation(line: 4108, column: 11, scope: !7282)
!7294 = !DILocation(line: 4110, column: 2, scope: !7290)
!7295 = !DILocation(line: 4112, column: 11, scope: !7296)
!7296 = distinct !DILexicalBlock(scope: !7282, file: !3, line: 4112, column: 11)
!7297 = !DILocation(line: 4112, column: 17, scope: !7296)
!7298 = !DILocation(line: 4112, column: 26, scope: !7296)
!7299 = !DILocation(line: 4112, column: 11, scope: !7282)
!7300 = !DILocation(line: 4114, column: 10, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 4114, column: 8)
!7302 = distinct !DILexicalBlock(scope: !7296, file: !3, line: 4113, column: 2)
!7303 = !DILocation(line: 4114, column: 9, scope: !7301)
!7304 = !DILocation(line: 4114, column: 8, scope: !7301)
!7305 = !DILocation(line: 4114, column: 18, scope: !7301)
!7306 = !DILocation(line: 4114, column: 8, scope: !7302)
!7307 = !DILocation(line: 4117, column: 6, scope: !7301)
!7308 = !DILocation(line: 4119, column: 8, scope: !7301)
!7309 = !DILocation(line: 4119, column: 16, scope: !7301)
!7310 = !DILocation(line: 4120, column: 2, scope: !7302)
!7311 = !DILocation(line: 4123, column: 22, scope: !7282)
!7312 = !DILocation(line: 4123, column: 28, scope: !7282)
!7313 = !DILocation(line: 4123, column: 37, scope: !7282)
!7314 = !DILocation(line: 4123, column: 14, scope: !7282)
!7315 = !DILocation(line: 4123, column: 7, scope: !7282)
!7316 = !DILocation(line: 4130, column: 7, scope: !7317)
!7317 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 4130, column: 7)
!7318 = !DILocation(line: 4130, column: 13, scope: !7317)
!7319 = !DILocation(line: 4130, column: 7, scope: !7242)
!7320 = !DILocation(line: 4131, column: 20, scope: !7317)
!7321 = !DILocation(line: 4131, column: 26, scope: !7317)
!7322 = !DILocation(line: 4131, column: 5, scope: !7317)
!7323 = !DILocation(line: 4133, column: 31, scope: !7317)
!7324 = !DILocation(line: 4133, column: 5, scope: !7317)
!7325 = !DILocation(line: 4133, column: 11, scope: !7317)
!7326 = !DILocation(line: 4133, column: 29, scope: !7317)
!7327 = !DILocation(line: 4135, column: 17, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 4135, column: 7)
!7329 = !DILocation(line: 4135, column: 23, scope: !7328)
!7330 = !DILocation(line: 4135, column: 32, scope: !7328)
!7331 = !DILocation(line: 4135, column: 38, scope: !7328)
!7332 = !DILocation(line: 4135, column: 8, scope: !7328)
!7333 = !DILocation(line: 4135, column: 7, scope: !7242)
!7334 = !DILocation(line: 4136, column: 5, scope: !7328)
!7335 = !DILocation(line: 4138, column: 19, scope: !7242)
!7336 = !DILocation(line: 4138, column: 27, scope: !7242)
!7337 = !DILocation(line: 4138, column: 33, scope: !7242)
!7338 = !DILocation(line: 4138, column: 3, scope: !7242)
!7339 = !DILocation(line: 4140, column: 18, scope: !7242)
!7340 = !DILocation(line: 4140, column: 24, scope: !7242)
!7341 = !DILocation(line: 4140, column: 32, scope: !7242)
!7342 = !DILocation(line: 4140, column: 31, scope: !7242)
!7343 = !DILocation(line: 4140, column: 42, scope: !7242)
!7344 = !DILocation(line: 4140, column: 40, scope: !7242)
!7345 = !DILocation(line: 4140, column: 3, scope: !7242)
!7346 = !DILocation(line: 4141, column: 3, scope: !7242)
!7347 = !DILocation(line: 4142, column: 1, scope: !7242)
!7348 = distinct !DISubprogram(name: "forget_B_and_K_types", scope: !3, file: !3, line: 4243, type: !1010, scopeLine: 4244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7349 = !DILocalVariable(name: "work", arg: 1, scope: !7348, file: !3, line: 4243, type: !491)
!7350 = !DILocation(line: 4243, column: 42, scope: !7348)
!7351 = !DILocalVariable(name: "i", scope: !7348, file: !3, line: 4245, type: !7)
!7352 = !DILocation(line: 4245, column: 7, scope: !7348)
!7353 = !DILocation(line: 4247, column: 3, scope: !7348)
!7354 = !DILocation(line: 4247, column: 10, scope: !7348)
!7355 = !DILocation(line: 4247, column: 18, scope: !7348)
!7356 = !DILocation(line: 4247, column: 23, scope: !7348)
!7357 = !DILocation(line: 4249, column: 14, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7348, file: !3, line: 4248, column: 5)
!7359 = !DILocation(line: 4249, column: 22, scope: !7358)
!7360 = !DILocation(line: 4249, column: 11, scope: !7358)
!7361 = !DILocation(line: 4249, column: 9, scope: !7358)
!7362 = !DILocation(line: 4250, column: 11, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7358, file: !3, line: 4250, column: 11)
!7364 = !DILocation(line: 4250, column: 19, scope: !7363)
!7365 = !DILocation(line: 4250, column: 28, scope: !7363)
!7366 = !DILocation(line: 4250, column: 31, scope: !7363)
!7367 = !DILocation(line: 4250, column: 11, scope: !7358)
!7368 = !DILocation(line: 4252, column: 10, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7363, file: !3, line: 4251, column: 2)
!7370 = !DILocation(line: 4252, column: 18, scope: !7369)
!7371 = !DILocation(line: 4252, column: 27, scope: !7369)
!7372 = !DILocation(line: 4252, column: 4, scope: !7369)
!7373 = !DILocation(line: 4253, column: 4, scope: !7369)
!7374 = !DILocation(line: 4253, column: 12, scope: !7369)
!7375 = !DILocation(line: 4253, column: 21, scope: !7369)
!7376 = !DILocation(line: 4253, column: 24, scope: !7369)
!7377 = !DILocation(line: 4254, column: 2, scope: !7369)
!7378 = distinct !{!7378, !7353, !7379}
!7379 = !DILocation(line: 4255, column: 5, scope: !7348)
!7380 = !DILocation(line: 4257, column: 3, scope: !7348)
!7381 = !DILocation(line: 4257, column: 10, scope: !7348)
!7382 = !DILocation(line: 4257, column: 18, scope: !7348)
!7383 = !DILocation(line: 4257, column: 23, scope: !7348)
!7384 = !DILocation(line: 4259, column: 14, scope: !7385)
!7385 = distinct !DILexicalBlock(scope: !7348, file: !3, line: 4258, column: 5)
!7386 = !DILocation(line: 4259, column: 22, scope: !7385)
!7387 = !DILocation(line: 4259, column: 11, scope: !7385)
!7388 = !DILocation(line: 4259, column: 9, scope: !7385)
!7389 = !DILocation(line: 4260, column: 11, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7385, file: !3, line: 4260, column: 11)
!7391 = !DILocation(line: 4260, column: 19, scope: !7390)
!7392 = !DILocation(line: 4260, column: 28, scope: !7390)
!7393 = !DILocation(line: 4260, column: 31, scope: !7390)
!7394 = !DILocation(line: 4260, column: 11, scope: !7385)
!7395 = !DILocation(line: 4262, column: 10, scope: !7396)
!7396 = distinct !DILexicalBlock(scope: !7390, file: !3, line: 4261, column: 2)
!7397 = !DILocation(line: 4262, column: 18, scope: !7396)
!7398 = !DILocation(line: 4262, column: 27, scope: !7396)
!7399 = !DILocation(line: 4262, column: 4, scope: !7396)
!7400 = !DILocation(line: 4263, column: 4, scope: !7396)
!7401 = !DILocation(line: 4263, column: 12, scope: !7396)
!7402 = !DILocation(line: 4263, column: 21, scope: !7396)
!7403 = !DILocation(line: 4263, column: 24, scope: !7396)
!7404 = !DILocation(line: 4264, column: 2, scope: !7396)
!7405 = distinct !{!7405, !7380, !7406}
!7406 = !DILocation(line: 4265, column: 5, scope: !7348)
!7407 = !DILocation(line: 4266, column: 1, scope: !7348)
!7408 = distinct !DISubprogram(name: "demangle_nested_args", scope: !3, file: !3, line: 4451, type: !489, scopeLine: 4453, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7409 = !DILocalVariable(name: "work", arg: 1, scope: !7408, file: !3, line: 4451, type: !491)
!7410 = !DILocation(line: 4451, column: 42, scope: !7408)
!7411 = !DILocalVariable(name: "mangled", arg: 2, scope: !7408, file: !3, line: 4451, type: !492)
!7412 = !DILocation(line: 4451, column: 61, scope: !7408)
!7413 = !DILocalVariable(name: "declp", arg: 3, scope: !7408, file: !3, line: 4452, type: !60)
!7414 = !DILocation(line: 4452, column: 31, scope: !7408)
!7415 = !DILocalVariable(name: "saved_previous_argument", scope: !7408, file: !3, line: 4454, type: !60)
!7416 = !DILocation(line: 4454, column: 11, scope: !7408)
!7417 = !DILocalVariable(name: "result", scope: !7408, file: !3, line: 4455, type: !7)
!7418 = !DILocation(line: 4455, column: 7, scope: !7408)
!7419 = !DILocalVariable(name: "saved_nrepeats", scope: !7408, file: !3, line: 4456, type: !7)
!7420 = !DILocation(line: 4456, column: 7, scope: !7408)
!7421 = !DILocation(line: 4462, column: 5, scope: !7408)
!7422 = !DILocation(line: 4462, column: 11, scope: !7408)
!7423 = !DILocation(line: 4462, column: 3, scope: !7408)
!7424 = !DILocation(line: 4466, column: 29, scope: !7408)
!7425 = !DILocation(line: 4466, column: 35, scope: !7408)
!7426 = !DILocation(line: 4466, column: 27, scope: !7408)
!7427 = !DILocation(line: 4467, column: 20, scope: !7408)
!7428 = !DILocation(line: 4467, column: 26, scope: !7408)
!7429 = !DILocation(line: 4467, column: 18, scope: !7408)
!7430 = !DILocation(line: 4468, column: 3, scope: !7408)
!7431 = !DILocation(line: 4468, column: 9, scope: !7408)
!7432 = !DILocation(line: 4468, column: 27, scope: !7408)
!7433 = !DILocation(line: 4469, column: 3, scope: !7408)
!7434 = !DILocation(line: 4469, column: 9, scope: !7408)
!7435 = !DILocation(line: 4469, column: 18, scope: !7408)
!7436 = !DILocation(line: 4472, column: 27, scope: !7408)
!7437 = !DILocation(line: 4472, column: 33, scope: !7408)
!7438 = !DILocation(line: 4472, column: 42, scope: !7408)
!7439 = !DILocation(line: 4472, column: 12, scope: !7408)
!7440 = !DILocation(line: 4472, column: 10, scope: !7408)
!7441 = !DILocation(line: 4475, column: 7, scope: !7442)
!7442 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 4475, column: 7)
!7443 = !DILocation(line: 4475, column: 13, scope: !7442)
!7444 = !DILocation(line: 4475, column: 7, scope: !7408)
!7445 = !DILocation(line: 4477, column: 22, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7442, file: !3, line: 4476, column: 5)
!7447 = !DILocation(line: 4477, column: 28, scope: !7446)
!7448 = !DILocation(line: 4477, column: 7, scope: !7446)
!7449 = !DILocation(line: 4478, column: 22, scope: !7446)
!7450 = !DILocation(line: 4478, column: 28, scope: !7446)
!7451 = !DILocation(line: 4478, column: 13, scope: !7446)
!7452 = !DILocation(line: 4478, column: 7, scope: !7446)
!7453 = !DILocation(line: 4479, column: 5, scope: !7446)
!7454 = !DILocation(line: 4480, column: 29, scope: !7408)
!7455 = !DILocation(line: 4480, column: 3, scope: !7408)
!7456 = !DILocation(line: 4480, column: 9, scope: !7408)
!7457 = !DILocation(line: 4480, column: 27, scope: !7408)
!7458 = !DILocation(line: 4481, column: 5, scope: !7408)
!7459 = !DILocation(line: 4481, column: 11, scope: !7408)
!7460 = !DILocation(line: 4481, column: 3, scope: !7408)
!7461 = !DILocation(line: 4482, column: 20, scope: !7408)
!7462 = !DILocation(line: 4482, column: 3, scope: !7408)
!7463 = !DILocation(line: 4482, column: 9, scope: !7408)
!7464 = !DILocation(line: 4482, column: 18, scope: !7408)
!7465 = !DILocation(line: 4484, column: 10, scope: !7408)
!7466 = !DILocation(line: 4484, column: 3, scope: !7408)
!7467 = distinct !DISubprogram(name: "demangle_qualifier", scope: !3, file: !3, line: 626, type: !7186, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7468 = !DILocalVariable(name: "c", arg: 1, scope: !7467, file: !3, line: 626, type: !7)
!7469 = !DILocation(line: 626, column: 25, scope: !7467)
!7470 = !DILocation(line: 628, column: 48, scope: !7467)
!7471 = !DILocation(line: 628, column: 28, scope: !7467)
!7472 = !DILocation(line: 628, column: 10, scope: !7467)
!7473 = !DILocation(line: 628, column: 3, scope: !7467)
!7474 = distinct !DISubprogram(name: "demangle_fund_type", scope: !3, file: !3, line: 3754, type: !489, scopeLine: 3756, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !88)
!7475 = !DILocalVariable(name: "work", arg: 1, scope: !7474, file: !3, line: 3754, type: !491)
!7476 = !DILocation(line: 3754, column: 40, scope: !7474)
!7477 = !DILocalVariable(name: "mangled", arg: 2, scope: !7474, file: !3, line: 3755, type: !492)
!7478 = !DILocation(line: 3755, column: 34, scope: !7474)
!7479 = !DILocalVariable(name: "result", arg: 3, scope: !7474, file: !3, line: 3755, type: !60)
!7480 = !DILocation(line: 3755, column: 51, scope: !7474)
!7481 = !DILocalVariable(name: "done", scope: !7474, file: !3, line: 3757, type: !7)
!7482 = !DILocation(line: 3757, column: 7, scope: !7474)
!7483 = !DILocalVariable(name: "success", scope: !7474, file: !3, line: 3758, type: !7)
!7484 = !DILocation(line: 3758, column: 7, scope: !7474)
!7485 = !DILocalVariable(name: "buf", scope: !7474, file: !3, line: 3759, type: !7486)
!7486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 296, elements: !7487)
!7487 = !{!7488}
!7488 = !DISubrange(count: 37)
!7489 = !DILocation(line: 3759, column: 8, scope: !7474)
!7490 = !DILocalVariable(name: "dec", scope: !7474, file: !3, line: 3760, type: !22)
!7491 = !DILocation(line: 3760, column: 16, scope: !7474)
!7492 = !DILocalVariable(name: "tk", scope: !7474, file: !3, line: 3761, type: !59)
!7493 = !DILocation(line: 3761, column: 15, scope: !7474)
!7494 = !DILocation(line: 3765, column: 3, scope: !7474)
!7495 = !DILocation(line: 3765, column: 11, scope: !7474)
!7496 = !DILocation(line: 3765, column: 10, scope: !7474)
!7497 = !DILocation(line: 3767, column: 17, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3766, column: 5)
!7499 = !DILocation(line: 3767, column: 16, scope: !7498)
!7500 = !DILocation(line: 3767, column: 15, scope: !7498)
!7501 = !DILocation(line: 3767, column: 7, scope: !7498)
!7502 = !DILocation(line: 3772, column: 8, scope: !7503)
!7503 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3772, column: 8)
!7504 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3768, column: 2)
!7505 = !DILocation(line: 3772, column: 8, scope: !7504)
!7506 = !DILocation(line: 3774, column: 20, scope: !7507)
!7507 = distinct !DILexicalBlock(scope: !7508, file: !3, line: 3774, column: 19)
!7508 = distinct !DILexicalBlock(scope: !7503, file: !3, line: 3773, column: 6)
!7509 = !DILocation(line: 3774, column: 19, scope: !7508)
!7510 = !DILocation(line: 3775, column: 33, scope: !7507)
!7511 = !DILocation(line: 3775, column: 17, scope: !7507)
!7512 = !DILocation(line: 3776, column: 24, scope: !7508)
!7513 = !DILocation(line: 3776, column: 54, scope: !7508)
!7514 = !DILocation(line: 3776, column: 53, scope: !7508)
!7515 = !DILocation(line: 3776, column: 52, scope: !7508)
!7516 = !DILocation(line: 3776, column: 32, scope: !7508)
!7517 = !DILocation(line: 3776, column: 8, scope: !7508)
!7518 = !DILocation(line: 3777, column: 6, scope: !7508)
!7519 = !DILocation(line: 3778, column: 6, scope: !7504)
!7520 = !DILocation(line: 3778, column: 14, scope: !7504)
!7521 = !DILocation(line: 3779, column: 4, scope: !7504)
!7522 = !DILocation(line: 3781, column: 6, scope: !7504)
!7523 = !DILocation(line: 3781, column: 14, scope: !7504)
!7524 = !DILocation(line: 3782, column: 4, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7526, file: !3, line: 3782, column: 4)
!7526 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3782, column: 4)
!7527 = !DILocation(line: 3782, column: 4, scope: !7526)
!7528 = !DILocation(line: 3783, column: 19, scope: !7504)
!7529 = !DILocation(line: 3783, column: 4, scope: !7504)
!7530 = !DILocation(line: 3784, column: 4, scope: !7504)
!7531 = !DILocation(line: 3786, column: 6, scope: !7504)
!7532 = !DILocation(line: 3786, column: 14, scope: !7504)
!7533 = !DILocation(line: 3787, column: 4, scope: !7534)
!7534 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 3787, column: 4)
!7535 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3787, column: 4)
!7536 = !DILocation(line: 3787, column: 4, scope: !7535)
!7537 = !DILocation(line: 3788, column: 19, scope: !7504)
!7538 = !DILocation(line: 3788, column: 4, scope: !7504)
!7539 = !DILocation(line: 3789, column: 4, scope: !7504)
!7540 = !DILocation(line: 3791, column: 6, scope: !7504)
!7541 = !DILocation(line: 3791, column: 14, scope: !7504)
!7542 = !DILocation(line: 3792, column: 4, scope: !7543)
!7543 = distinct !DILexicalBlock(scope: !7544, file: !3, line: 3792, column: 4)
!7544 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 3792, column: 4)
!7545 = !DILocation(line: 3792, column: 4, scope: !7544)
!7546 = !DILocation(line: 3793, column: 19, scope: !7504)
!7547 = !DILocation(line: 3793, column: 4, scope: !7504)
!7548 = !DILocation(line: 3794, column: 4, scope: !7504)
!7549 = !DILocation(line: 3796, column: 9, scope: !7504)
!7550 = !DILocation(line: 3797, column: 4, scope: !7504)
!7551 = distinct !{!7551, !7494, !7552}
!7552 = !DILocation(line: 3799, column: 5, scope: !7474)
!7553 = !DILocation(line: 3803, column: 13, scope: !7474)
!7554 = !DILocation(line: 3803, column: 12, scope: !7474)
!7555 = !DILocation(line: 3803, column: 11, scope: !7474)
!7556 = !DILocation(line: 3803, column: 3, scope: !7474)
!7557 = !DILocation(line: 3807, column: 7, scope: !7558)
!7558 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3804, column: 5)
!7559 = !DILocation(line: 3809, column: 9, scope: !7558)
!7560 = !DILocation(line: 3809, column: 17, scope: !7558)
!7561 = !DILocation(line: 3810, column: 7, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 3810, column: 7)
!7563 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3810, column: 7)
!7564 = !DILocation(line: 3810, column: 7, scope: !7563)
!7565 = !DILocation(line: 3811, column: 22, scope: !7558)
!7566 = !DILocation(line: 3811, column: 7, scope: !7558)
!7567 = !DILocation(line: 3812, column: 7, scope: !7558)
!7568 = !DILocation(line: 3814, column: 9, scope: !7558)
!7569 = !DILocation(line: 3814, column: 17, scope: !7558)
!7570 = !DILocation(line: 3815, column: 7, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 3815, column: 7)
!7572 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3815, column: 7)
!7573 = !DILocation(line: 3815, column: 7, scope: !7572)
!7574 = !DILocation(line: 3816, column: 22, scope: !7558)
!7575 = !DILocation(line: 3816, column: 7, scope: !7558)
!7576 = !DILocation(line: 3817, column: 7, scope: !7558)
!7577 = !DILocation(line: 3819, column: 9, scope: !7558)
!7578 = !DILocation(line: 3819, column: 17, scope: !7558)
!7579 = !DILocation(line: 3820, column: 7, scope: !7580)
!7580 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 3820, column: 7)
!7581 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3820, column: 7)
!7582 = !DILocation(line: 3820, column: 7, scope: !7581)
!7583 = !DILocation(line: 3821, column: 22, scope: !7558)
!7584 = !DILocation(line: 3821, column: 7, scope: !7558)
!7585 = !DILocation(line: 3822, column: 7, scope: !7558)
!7586 = !DILocation(line: 3824, column: 9, scope: !7558)
!7587 = !DILocation(line: 3824, column: 17, scope: !7558)
!7588 = !DILocation(line: 3825, column: 7, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 3825, column: 7)
!7590 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3825, column: 7)
!7591 = !DILocation(line: 3825, column: 7, scope: !7590)
!7592 = !DILocation(line: 3826, column: 22, scope: !7558)
!7593 = !DILocation(line: 3826, column: 7, scope: !7558)
!7594 = !DILocation(line: 3827, column: 7, scope: !7558)
!7595 = !DILocation(line: 3829, column: 9, scope: !7558)
!7596 = !DILocation(line: 3829, column: 17, scope: !7558)
!7597 = !DILocation(line: 3830, column: 7, scope: !7598)
!7598 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 3830, column: 7)
!7599 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3830, column: 7)
!7600 = !DILocation(line: 3830, column: 7, scope: !7599)
!7601 = !DILocation(line: 3831, column: 22, scope: !7558)
!7602 = !DILocation(line: 3831, column: 7, scope: !7558)
!7603 = !DILocation(line: 3832, column: 7, scope: !7558)
!7604 = !DILocation(line: 3834, column: 9, scope: !7558)
!7605 = !DILocation(line: 3834, column: 17, scope: !7558)
!7606 = !DILocation(line: 3835, column: 7, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 3835, column: 7)
!7608 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3835, column: 7)
!7609 = !DILocation(line: 3835, column: 7, scope: !7608)
!7610 = !DILocation(line: 3836, column: 22, scope: !7558)
!7611 = !DILocation(line: 3836, column: 7, scope: !7558)
!7612 = !DILocation(line: 3837, column: 10, scope: !7558)
!7613 = !DILocation(line: 3838, column: 7, scope: !7558)
!7614 = !DILocation(line: 3840, column: 9, scope: !7558)
!7615 = !DILocation(line: 3840, column: 17, scope: !7558)
!7616 = !DILocation(line: 3841, column: 7, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 3841, column: 7)
!7618 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3841, column: 7)
!7619 = !DILocation(line: 3841, column: 7, scope: !7618)
!7620 = !DILocation(line: 3842, column: 22, scope: !7558)
!7621 = !DILocation(line: 3842, column: 7, scope: !7558)
!7622 = !DILocation(line: 3843, column: 10, scope: !7558)
!7623 = !DILocation(line: 3844, column: 7, scope: !7558)
!7624 = !DILocation(line: 3846, column: 9, scope: !7558)
!7625 = !DILocation(line: 3846, column: 17, scope: !7558)
!7626 = !DILocation(line: 3847, column: 7, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7628, file: !3, line: 3847, column: 7)
!7628 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3847, column: 7)
!7629 = !DILocation(line: 3847, column: 7, scope: !7628)
!7630 = !DILocation(line: 3848, column: 22, scope: !7558)
!7631 = !DILocation(line: 3848, column: 7, scope: !7558)
!7632 = !DILocation(line: 3849, column: 10, scope: !7558)
!7633 = !DILocation(line: 3850, column: 7, scope: !7558)
!7634 = !DILocation(line: 3852, column: 9, scope: !7558)
!7635 = !DILocation(line: 3852, column: 17, scope: !7558)
!7636 = !DILocation(line: 3853, column: 7, scope: !7637)
!7637 = distinct !DILexicalBlock(scope: !7638, file: !3, line: 3853, column: 7)
!7638 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3853, column: 7)
!7639 = !DILocation(line: 3853, column: 7, scope: !7638)
!7640 = !DILocation(line: 3854, column: 22, scope: !7558)
!7641 = !DILocation(line: 3854, column: 7, scope: !7558)
!7642 = !DILocation(line: 3855, column: 10, scope: !7558)
!7643 = !DILocation(line: 3856, column: 7, scope: !7558)
!7644 = !DILocation(line: 3858, column: 9, scope: !7558)
!7645 = !DILocation(line: 3858, column: 17, scope: !7558)
!7646 = !DILocation(line: 3859, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 3859, column: 7)
!7648 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3859, column: 7)
!7649 = !DILocation(line: 3859, column: 7, scope: !7648)
!7650 = !DILocation(line: 3860, column: 22, scope: !7558)
!7651 = !DILocation(line: 3860, column: 7, scope: !7558)
!7652 = !DILocation(line: 3861, column: 10, scope: !7558)
!7653 = !DILocation(line: 3862, column: 7, scope: !7558)
!7654 = !DILocation(line: 3864, column: 9, scope: !7558)
!7655 = !DILocation(line: 3864, column: 17, scope: !7558)
!7656 = !DILocation(line: 3865, column: 7, scope: !7657)
!7657 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 3865, column: 7)
!7658 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3865, column: 7)
!7659 = !DILocation(line: 3865, column: 7, scope: !7658)
!7660 = !DILocation(line: 3866, column: 22, scope: !7558)
!7661 = !DILocation(line: 3866, column: 7, scope: !7558)
!7662 = !DILocation(line: 3867, column: 10, scope: !7558)
!7663 = !DILocation(line: 3868, column: 7, scope: !7558)
!7664 = !DILocation(line: 3870, column: 9, scope: !7558)
!7665 = !DILocation(line: 3870, column: 17, scope: !7558)
!7666 = !DILocation(line: 3871, column: 12, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3871, column: 11)
!7668 = !DILocation(line: 3871, column: 11, scope: !7558)
!7669 = !DILocation(line: 3873, column: 12, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !7667, file: !3, line: 3872, column: 2)
!7671 = !DILocation(line: 3874, column: 4, scope: !7670)
!7672 = !DILocation(line: 3877, column: 9, scope: !7558)
!7673 = !DILocation(line: 3877, column: 17, scope: !7558)
!7674 = !DILocation(line: 3878, column: 13, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3878, column: 11)
!7676 = !DILocation(line: 3878, column: 12, scope: !7675)
!7677 = !DILocation(line: 3878, column: 11, scope: !7675)
!7678 = !DILocation(line: 3878, column: 21, scope: !7675)
!7679 = !DILocation(line: 3878, column: 11, scope: !7558)
!7680 = !DILocalVariable(name: "i", scope: !7681, file: !3, line: 3880, type: !7)
!7681 = distinct !DILexicalBlock(scope: !7675, file: !3, line: 3879, column: 2)
!7682 = !DILocation(line: 3880, column: 8, scope: !7681)
!7683 = !DILocation(line: 3881, column: 6, scope: !7681)
!7684 = !DILocation(line: 3881, column: 14, scope: !7681)
!7685 = !DILocation(line: 3882, column: 11, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 3882, column: 4)
!7687 = !DILocation(line: 3882, column: 9, scope: !7686)
!7688 = !DILocation(line: 3883, column: 9, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 3882, column: 4)
!7690 = !DILocation(line: 3883, column: 11, scope: !7689)
!7691 = !DILocation(line: 3883, column: 37, scope: !7689)
!7692 = !DILocation(line: 3883, column: 42, scope: !7689)
!7693 = !DILocation(line: 3883, column: 41, scope: !7689)
!7694 = !DILocation(line: 3883, column: 40, scope: !7689)
!7695 = !DILocation(line: 3883, column: 50, scope: !7689)
!7696 = !DILocation(line: 3883, column: 55, scope: !7689)
!7697 = !DILocation(line: 3883, column: 54, scope: !7689)
!7698 = !DILocation(line: 3883, column: 53, scope: !7689)
!7699 = !DILocation(line: 3883, column: 63, scope: !7689)
!7700 = !DILocation(line: 0, scope: !7689)
!7701 = !DILocation(line: 3882, column: 4, scope: !7686)
!7702 = !DILocation(line: 3885, column: 17, scope: !7689)
!7703 = !DILocation(line: 3885, column: 16, scope: !7689)
!7704 = !DILocation(line: 3885, column: 15, scope: !7689)
!7705 = !DILocation(line: 3885, column: 10, scope: !7689)
!7706 = !DILocation(line: 3885, column: 6, scope: !7689)
!7707 = !DILocation(line: 3885, column: 13, scope: !7689)
!7708 = !DILocation(line: 3884, column: 11, scope: !7689)
!7709 = !DILocation(line: 3884, column: 19, scope: !7689)
!7710 = !DILocation(line: 3884, column: 24, scope: !7689)
!7711 = !DILocation(line: 3882, column: 4, scope: !7689)
!7712 = distinct !{!7712, !7701, !7713}
!7713 = !DILocation(line: 3885, column: 17, scope: !7686)
!7714 = !DILocation(line: 3886, column: 10, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 3886, column: 8)
!7716 = !DILocation(line: 3886, column: 9, scope: !7715)
!7717 = !DILocation(line: 3886, column: 8, scope: !7715)
!7718 = !DILocation(line: 3886, column: 18, scope: !7715)
!7719 = !DILocation(line: 3886, column: 8, scope: !7681)
!7720 = !DILocation(line: 3888, column: 16, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 3887, column: 6)
!7722 = !DILocation(line: 3889, column: 8, scope: !7721)
!7723 = !DILocation(line: 3891, column: 8, scope: !7681)
!7724 = !DILocation(line: 3891, column: 4, scope: !7681)
!7725 = !DILocation(line: 3891, column: 11, scope: !7681)
!7726 = !DILocation(line: 3892, column: 6, scope: !7681)
!7727 = !DILocation(line: 3892, column: 14, scope: !7681)
!7728 = !DILocation(line: 3893, column: 2, scope: !7681)
!7729 = !DILocation(line: 3896, column: 13, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7675, file: !3, line: 3895, column: 2)
!7731 = !DILocation(line: 3896, column: 19, scope: !7730)
!7732 = !DILocation(line: 3896, column: 18, scope: !7730)
!7733 = !DILocation(line: 3896, column: 4, scope: !7730)
!7734 = !DILocation(line: 3897, column: 4, scope: !7730)
!7735 = !DILocation(line: 3897, column: 11, scope: !7730)
!7736 = !DILocation(line: 3898, column: 16, scope: !7730)
!7737 = !DILocation(line: 3898, column: 5, scope: !7730)
!7738 = !DILocation(line: 3898, column: 13, scope: !7730)
!7739 = !DILocation(line: 3900, column: 15, scope: !7558)
!7740 = !DILocation(line: 3900, column: 7, scope: !7558)
!7741 = !DILocation(line: 3901, column: 16, scope: !7558)
!7742 = !DILocation(line: 3901, column: 32, scope: !7558)
!7743 = !DILocation(line: 3901, column: 7, scope: !7558)
!7744 = !DILocation(line: 3902, column: 7, scope: !7745)
!7745 = distinct !DILexicalBlock(scope: !7746, file: !3, line: 3902, column: 7)
!7746 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3902, column: 7)
!7747 = !DILocation(line: 3902, column: 7, scope: !7746)
!7748 = !DILocation(line: 3903, column: 22, scope: !7558)
!7749 = !DILocation(line: 3903, column: 30, scope: !7558)
!7750 = !DILocation(line: 3903, column: 7, scope: !7558)
!7751 = !DILocation(line: 3904, column: 7, scope: !7558)
!7752 = !DILocalVariable(name: "bindex", scope: !7753, file: !3, line: 3919, type: !7)
!7753 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3918, column: 7)
!7754 = !DILocation(line: 3919, column: 13, scope: !7753)
!7755 = !DILocation(line: 3919, column: 38, scope: !7753)
!7756 = !DILocation(line: 3919, column: 22, scope: !7753)
!7757 = !DILocalVariable(name: "btype", scope: !7753, file: !3, line: 3920, type: !61)
!7758 = !DILocation(line: 3920, column: 16, scope: !7753)
!7759 = !DILocation(line: 3921, column: 9, scope: !7753)
!7760 = !DILocation(line: 3922, column: 34, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7753, file: !3, line: 3922, column: 13)
!7762 = !DILocation(line: 3922, column: 40, scope: !7761)
!7763 = !DILocation(line: 3922, column: 13, scope: !7761)
!7764 = !DILocation(line: 3922, column: 13, scope: !7753)
!7765 = !DILocation(line: 3923, column: 27, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7761, file: !3, line: 3922, column: 58)
!7767 = !DILocation(line: 3923, column: 39, scope: !7766)
!7768 = !DILocation(line: 3923, column: 42, scope: !7766)
!7769 = !DILocation(line: 3923, column: 63, scope: !7766)
!7770 = !DILocation(line: 3923, column: 11, scope: !7766)
!7771 = !DILocation(line: 3924, column: 11, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7773, file: !3, line: 3924, column: 11)
!7773 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 3924, column: 11)
!7774 = !DILocation(line: 3924, column: 11, scope: !7773)
!7775 = !DILocation(line: 3925, column: 27, scope: !7766)
!7776 = !DILocation(line: 3925, column: 11, scope: !7766)
!7777 = !DILocation(line: 3926, column: 9, scope: !7766)
!7778 = !DILocation(line: 3928, column: 19, scope: !7761)
!7779 = !DILocation(line: 3929, column: 9, scope: !7753)
!7780 = !DILocation(line: 3930, column: 9, scope: !7753)
!7781 = !DILocalVariable(name: "btype", scope: !7782, file: !3, line: 3934, type: !61)
!7782 = distinct !DILexicalBlock(scope: !7558, file: !3, line: 3933, column: 7)
!7783 = !DILocation(line: 3934, column: 16, scope: !7782)
!7784 = !DILocation(line: 3935, column: 9, scope: !7782)
!7785 = !DILocation(line: 3936, column: 38, scope: !7782)
!7786 = !DILocation(line: 3936, column: 44, scope: !7782)
!7787 = !DILocation(line: 3936, column: 19, scope: !7782)
!7788 = !DILocation(line: 3936, column: 17, scope: !7782)
!7789 = !DILocation(line: 3937, column: 25, scope: !7782)
!7790 = !DILocation(line: 3937, column: 9, scope: !7782)
!7791 = !DILocation(line: 3938, column: 9, scope: !7782)
!7792 = !DILocation(line: 3939, column: 9, scope: !7782)
!7793 = !DILocation(line: 3942, column: 15, scope: !7558)
!7794 = !DILocation(line: 3943, column: 7, scope: !7558)
!7795 = !DILocation(line: 3946, column: 10, scope: !7474)
!7796 = !DILocation(line: 3946, column: 27, scope: !7474)
!7797 = !DILocation(line: 3946, column: 3, scope: !7474)
